http://svejkgames.com/tutorial/phaser-tutorial-20/
HTTP/1.1 200 OK
Server: nginx/1.6.0
Date: Tue, 22 Jul 2014 23:36:14 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 22786
Connection: close

<!doctype html>
<html>
    <head>
		<meta name="description" content="Play Desktop and Mobile games instantly in your browser!">
		<meta name="author" content="@SvejkGames">
		<link rel="icon" href="http://svejkgames.com/srcs/favicon.ico" type="image/x-icon">
        <title>Phaser Framework 2.0.x Tutorial</title>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link href="//netdna.bootstrapcdn.com/bootswatch/3.1.1/cosmo/bootstrap.min.css" rel="stylesheet"><!-- Bootstrap custom style CSS -->
        <link href="http://svejkgames.com/srcs/style.css" rel="stylesheet"><!-- Main CSS -->

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script><!-- jQuery main -->
        <script src = "http://svejkgames.com/srcs/main.js"></script>
		
        <script src = "//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script><!-- Bootstrap main JS -->
				<!-- Messenger -->
		<script src = "http://svejkgames.com/srcs/msngr/js/messenger.min.js"></script>
		<script src = "http://svejkgames.com/srcs/msngr/js/messenger-theme-future.js"></script>
		
		<link href="http://svejkgames.com/srcs/msngr/css/messenger.css" rel="stylesheet">
		<link href="http://svejkgames.com/srcs/msngr/css/messenger-theme-future.css" rel="stylesheet">
		<meta property="og:image" content="http://i.imgur.com/oNNDnRN.png"/>
		<!--Highlighter-->
			<script type="text/javascript" src="scripts/shCore.js"></script>
			<script type="text/javascript" src="scripts/shBrushJScript.js"></script>
			<link type="text/css" rel="stylesheet" href="styles/shCoreDefault.css"/>
			<script type="text/javascript">SyntaxHighlighter.all();</script>
    </head>
    <body>
	<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-38249876-22', 'svejkgames.com');
  ga('send', 'pageview');


</script>
        <div id="fb-root"></div>
		        <section class = "navbar navbar-default">
            <div class = "container">

                <a class="navbar-brand" id="logo" href="/"><img style="margin-top: -14px; height:45px" src="http://i.imgur.com/ooIKv7u.png"/></a>
                <button class = "navbar-toggle" data-toggle = "collapse" data-target = ".navHeaderCollapse">
                    <span class = "icon-bar"></span>
                    <span class = "icon-bar"></span>
                    <span class = "icon-bar"></span>
                </button>
                <div class = "collapse navbar-collapse navHeaderCollapse">
                    <ul class = "nav navbar-nav navbar-right">
                        <!--<li><a href = "#login" data-toggle="modal">Login</a></li>
                        <li><a href = "#registration" data-toggle="modal">Registration</a></li>-->
                        <li><a href = "http://svejkgames.com/blog"><b>Blog</b></a></li>
						<li class = "dropdown">
                            <a href = "#" class = "dropdown-toggle" data-toggle = "dropdown">Social Media <b class = "caret"></b></a>
                            <ul class = "dropdown-menu">
                                <li><a href = "https://twitter.com/SvejkGames">Twitter</a></li>
                                <li><a href = "https://www.facebook.com/SvejkGames">Facebook</a></li>
                                <li><a href = "https://plus.google.com/b/101036202265085464789/101036202265085464789/posts?hl=en">Google+</a></li>
                                <!-- you can add as much as you want -->
                            </ul>
                        </li>
                        <li><a href = "mailto:svejkgames@gmail.com">Contact</a></li>
                    </ul>
                </div>
            </div>
        </section>        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="row">

                        <div class="col-md-12">
							<p>
    <center><h1>Phaser Framework 2.0 Tutorial</h1></center>
</p>
<p><center><h3><a href="http://svejkgames.com/blog/post/phaser-framework-tutorial/" style="color:red">FOR THE NEW REVISED VERSION CLICK HERE</a></h3></center></p>
<p>
    I just finished my <a href="http://svejkgames.com/game/fighterjet">7th HTML5 game</a> using Phaser JavaScript Framework, so I decided to write a detailed tutorial about it.
</p>
<p>You can find the source files here: <a href="https://mega.co.nz/#!QAlBTAIC!CyhhvMppiBJYJwWFaARrjLFLxu95uBNr0eEn3n9NZvY">Download</a></p>
<p>
<i>FighterJet Challenge:</i><br /><center><img src="http://i.imgur.com/cFnbinK.gif"/></center>
</p>
<p>
    What you need to make your own game? Nothing else, only a text editor (or IDE, I use <a href="https://netbeans.org">NetBeans</a>), a browser, which supports HTML5 (and JavaScript), and if you
    want to create your own music then a music editor. Also an image editor, e.g. Gimp. I recommend not to use pirated software, because it can cause you
    troubles if you want to make your game public.
</p>
<p>
    There are many sites, where you can download license-free materials, for example <a href="http://opengameart.org">opengameart.com</a>
</p>
<p>
    Let's get started with programming: For the game I used only one state. Using states aren't necessary, but makes many things easier, for example if the
    game ends you can call the menu state, and from menu you can restart the game itself. Also you can make loading animations etc. Here is an example for a
    game without any state, only the game itself: <a href="http://www.photonstorm.com/phaser/tutorial-making-your-first-phaser-game">photonstorm.com/phaser/tutorial-making-your-first-phaser-game</a>
</p>
<p>
    Also there are 3+1 main functions in the game you can use:
<ul>
    <li><strong>Preload:</strong></li> Here you preload images, sounds, spritesheets, and tilemaps, which we will use later for the game itself.

    <li><strong>Create:</strong></li> You add the sprites, music, tiles... to your Canvas, also you can define Groups, dimensions, rules and much more here.

    <li><strong>Update:</strong></li> It is called as many times as possible using requestAnimationFrame. You can check here overlaps, sprite positions...

    <li><strong>Debug:</strong></li> We won't use this one at this game, but it is very useful for debugging the game while running it
</ul>
    It is not necessary to use all of them, but you have to tell to Phaser which ones will you use, when you initialize your game.
</p>
<p>
<pre class="brush: js;">
var game = new Phaser.Game(550, 310, Phaser.AUTO, 'target');  // Phaser.Game(width; height; WebGL or Canvas, Auto means WebGL by default, but if it is not supported, then Canvas; the target div, where we want to run our game
</pre>
<p>In case we don't want use states then:</p>
<pre class="brush: js;">
var game = new Phaser.Game(550, 310, Phaser.AUTO, 'target', {preload: preload, create: create, update: update/*, render: render*/});
</pre>
</p>
<p>
    As I mentioned we only have one state: 'main_state'
</p>
<p>
<pre class="brush: js;">var main_state = {/*Our function will be here*/};</pre>

</p>
<p>
    In the Preload function we load our assets. You can use 'game' keyword instead of 'this', both means the same in this program. The first parameter is the
    name of the sprite or sound, the second is the path to the item.
</p>
<p><pre class="brush: js;">
   preload: function() {
        this.load.image('plane', 'assets/plane.png');
        this.load.image('shadow', 'assets/shadow.png');
        this.load.image('sky', 'assets/sky01.png');
        this.load.image('rockup', 'assets/rock.png');
        this.load.image('rockdown', 'assets/rockDown.png');
        this.load.image('line', 'assets/line.png');
        this.load.image('health', 'assets/health.png');
        this.load.image('ground', 'assets/ground.png');
        this.load.image('star', 'assets/star.png');
        this.load.image('twitter', 'assets/twitter.png');
        /* Use wav or ogg for sounds, because Firefox can't play mp3 */
        game.load.audio('hit', ['assets/hit.wav']);
        game.load.audio('pickup', ['assets/pickup.wav']);
    },
</pre>
												<div id="vertical_ad"><center><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- SvejkGames2 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:250px;height:250px"
     data-ad-client="ca-pub-2970161241993902"
     data-ad-slot="1573644672"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></center></div>
<p>
    <b>If our Preload function is ready the Create function will be called:</b>
</p>
<pre class="brush: js;">
    create: function() {
/*Some necessary variables*/
        started = 0;
        points = 0;
        i = 0;
        rockspeed = -225;
/*We start our Physics engine, Arcade is the easiest, so we will use it now*/
        this.physics.startSystem(Phaser.Physics.ARCADE);
/*We add our 'sky' sprite as our background, which starts from the 0 X and 0 Y coordinate. The sprites anchor by default is in its 0,0 coordinate*/
        this.add.sprite(0, 0, 'sky');
/*We add our sounds*/
        hit = this.add.audio('hit');
        pickup = this.add.audio('pickup');
/*Two necessary arrays*/
        hp = new Array(); // Health points, which are the hearts in the top right corner
        rock = new Array();
        /*We add our plane, which can be controlled by the player*/
        player = this.add.sprite(this.world.centerX - 120, this.world.centerY, 'plane');
        player.anchor.setTo(0.5, 0.5); //Here we set the anchor to the center of the player sprite
        this.physics.enable(player, Phaser.Physics.ARCADE); // Player will use Arcade physics engine
/*We collide with the sides of our canvas*/
        player.body.collideWorldBounds = true;
/*We create our first group, for the stars*/
        stars = game.add.group(); // Groups name will be 'stars'
        stars.enableBody = true; // We enable physical body for all 'stars' group member
        stars.physicsBodyType = Phaser.Physics.ARCADE; //The whole group will use Arcade physics engine
        /*Same as above, but for rocks*/
        rocks = game.add.group();
        rocks.enableBody = true;
        rocks.physicsBodyType = Phaser.Physics.ARCADE;
        
        rocksdisplay = game.add.group();
        rocksdisplay.enableBody = true;
        rocksdisplay.physicsBodyType = Phaser.Physics.ARCADE;
/*We "kill" the sprites which are out of the Canvas*/
        stars.setAll('outOfBoundsKill', true);
        rocks.setAll('outOfBoundsKill', true);
        rocksdisplay.setAll('outOfBoundsKill', true);
/*Adding 3 hearts*/
        for (j = 0; j < 3; j++) {
            hp[j] = this.add.sprite(10 + j * 20, 10, 'health');
        }
        j = 2;//IDs of the hearts: hp[0], hp[1], hp[2]
/*Adding our 'ground' sprite*/
        ground = this.add.sprite(0, this.world.height - 25, 'ground');
        this.physics.enable(ground, Phaser.Physics.ARCADE);
/*Sprite for a shadow, it won't have physical body, it is just for display*/
        shadow = this.add.sprite(this.world.centerX - 120, this.world.height - 20, 'shadow');
		</pre>
		<pre class="brush: js;">
        shadow.anchor.setTo(0.5, 0.5);
        shadow.scale.setTo(0.2, 0.2);
/*Point counter*/
        text = game.add.text(game.world.width - 80, 15, "Points: 0", {
            font: "12px \"Press Start 2P\"",
            fill: "#333",
            align: "center"
        });
        text.anchor.setTo(0.5);
/*Starting text*/
        text2 = game.add.text(this.world.centerX, this.world.centerY - 25, "Click with your mouse to start!\nYour last score: " + score, {
            font: "12px \"Press Start 2P\"",
            fill: "#333",
            align: "center"
        });
        text2.anchor.setTo(0.5);
/*Share button*/
        share = this.add.sprite(this.world.centerX, this.world.centerY + 50, 'twitter');
        share.anchor.setTo(0.5);
        share.inputEnabled = true; // If input is enable, it can be clicked
        share.events.onInputDown.add(this.shareClicked, this); //Adding the 'shareClicked' function if the Share button is clicked
    },
</pre>
<p>
    <b>Let's see our Update function:</b>
</p>
<pre class="brush: js;">
update: function() {
/*If the game is not started already and the mouse is clicked, but we are not clicking on the Share button, then starts the game*/
        if (started === 0 && this.input.activePointer.isDown && sharing === 0) {
            started = 1; // Game started
            player.body.gravity.y = 235; // Giving gravity to our plane

            game.time.events.add(Phaser.Timer.SECOND * 1.5, function() { // Counts 1.5 seconds
                this.time.events.loop(Phaser.Timer.SECOND * 3, this.createStars, this); // Every 3 seconds a new star is called, exactly between two rocks
            }, this);
            this.time.events.loop(Phaser.Timer.SECOND * 3, this.createRocks, this); // Calling the rocks every 3 seconds
            share.visible = false; // We make the share button invisible
            text2.visible = false; // Same with the starting text
        }
        sharing = 0; // Share is not clicked
        game.physics.arcade.overlap(player, rocks, this.rockHit, null, this); // Calling the 'rockHit' function whenever our plane touches a rock
        game.physics.arcade.overlap(ground, player, this.playerDown, null, this); // When we touch the ground
        game.physics.arcade.overlap(stars, player, this.caughtStar, null, this); //Or when we caught a star

        if (started === 1)  {// If the game is already running
            if (this.input.activePointer.isDown) { // Mouse is down
                player.body.velocity.y = -165; // Players velocity on the Y axis is -165 pixel per second
                player.angle = -3; // Planes cone is up a little
            } else {
                player.angle = 0; // Everything is normal if the mouse button is not down
            }
        }
    },
</pre>
<p>
    <b>Now our other function:</b>
</p>
<pre class="brush: js;">
shareClicked: function() {
        	sharing = 1; // We are clicking on the Share button
	window.open("https://twitter.com/intent/tweet?url=http://svejkgames.com/game/fighterjet/&text=I+just+made+" + score + "+points+on+FighterJet+Challenge!", "_blank"); // Opening the link on a blank page
    },
    caughtStar: function(a, b) { // a is the plane, b is the star
        b.kill(); // "Killing" the star
        points++;// +1 point
        text.setText("Points: " + points); // Updating our point counter text
        pickup.play(); // Playing the pickup sound
    },
createRocks: function() {
        i++;// incrementing i, which will be the index of our current rock
        rnd = this.rnd.integerInRange(-119, 119); //random generator from -119 to 119
        rock[i] = rocksdisplay.create(this.world.width + 50, rnd, 'rockdown'); // Creating a new 'rockdisplay' group member
        rock[i].anchor.setTo(0.5);
        rock[i].body.velocity.x = rockspeed; // -255 velocity on the X angle
/*Since in Arcade physics our sprite is always a rectangle, if we don't set it otherwise, so I will use a 1px wide, rock sprite tall transparent rectangle, which will be exactly on our rocks Y axis*/
        line = rocks.create(this.world.width + 58, rnd, 'line');
		</pre>
		<pre class="brush: js;">
        line.anchor.setTo(0.5);
        line.body.velocity.x = rockspeed; // We move along with its rock
        line.name = i;// This lines name will be the index of the rock

        i++;// Other rock, exactly under our previous rock
        rock[i] = rocksdisplay.create(this.world.width + 50, rnd + 239 + 60, 'rockup');
        rock[i].anchor.setTo(0.5);
        rock[i].body.velocity.x = rockspeed;

        line = rocks.create(this.world.width + 58, rnd + 239 + 60, 'line');
        line.anchor.setTo(0.5);
        line.body.velocity.x = rockspeed;
        line.name = i;
    },
/*Generating sprites on random Y position*/
    createStars: function() {
        star = stars.create(this.world.width + 58, rnd = this.rnd.integerInRange(0, this.world.height - 50), 'star');
        star.anchor.setTo(0.5);
        star.body.velocity.x = rockspeed;
    },
    rockHit: function(a, b) { // In reality we hit our line, not the rock
        rock[b.name].kill(); // We "kill" the rock with the index of the line's name
        b.kill(); //"Killing" the line 
        hp[j].kill(); // "Killing" the hearth with the largest index
        j--; // Decrementing our j variable
        hit.play(); // Playing the hit sound

        if (j === -1) { // If our last heart (index: 0) is "killed" then we restart the game
            score = points; // Our score will be the current points
            this.state.start('main'); // Starting the main state again
        }
    },
	</pre>
	<pre class="brush: js;">
    playerDown: function(a, b) { // Runs when player collides (in this case overlaps, even by one pixel) the ground sprite
        hit.play(); // Playing the hit sound
        score = points;
        game.state.start('main');
    } // no ',' because this is our last function
</pre>
<p>
    And of course we have to add these 2 lines to our code to start the game at the firs load:
</p>
	<pre class="brush: js;">
		game.state.add('main', main_state); // We add a new state
		game.state.start('main'); // We run the 'main' state for the first time
	</pre>
<p>
    <b>Now let's see our index.html file:</b>
</p>
<pre class="brush: js;">
&#60!DOCTYPE html>
&#60html>
    &#60head>
        <meta charset="utf-8" />
        <script type="text/javascript">
            score=0;// Defining our score variable
            
            WebFontConfig = {
                google: {families: ['Press+Start+2P::latin']}
            };
            (function() { // Loading our webfont from Google Fonts
                var wf = document.createElement('script');
                wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +
                        '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                wf.type = 'text/javascript';
                wf.async = 'true';
                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(wf, s);
            })();</script>
        <script type="text/javascript" src="js/phaser.min.js"></script>
        <script src="js/main.js"></script>
    &#60/head>
    &#60body>
        <div id="target"></div><!-- The game will run in this div -->
    &#60/body>
&#60/html>
</pre>
</p>
<p>
    If you have any question, suggestion, or you found a grammar error or syntax error in the program, please feel free to contact me or leave a comment.
</p>
<p>Other Phaser tutorials: <a href="http://www.lessmilk.com/phaser-tutorial/">lessmilk.com/phaser-tutorial/</a></p>
<p>
    Thank you for reading!
</p>						</div>
																			<div id="advertisement"><center><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Svejkgames -->
<ins class="adsbygoogle"
     style="display:inline-block;width:728px;height:90px"
     data-ad-client="ca-pub-2970161241993902"
     data-ad-slot="7620178276"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</center></div>
                        <div class="col-md-12"><!-- AddThis Button BEGIN -->
							<div class="addthis_toolbox addthis_default_style addthis_32x32_style">
							<a class="addthis_button_preferred_1"></a>
							<a class="addthis_button_preferred_2"></a>
							<a class="addthis_button_preferred_3"></a>
							<a class="addthis_button_preferred_4"></a>
							<a class="addthis_button_compact"></a>
							<a class="addthis_counter addthis_bubble_style"></a>
							</div>
							<script type="text/javascript">var addthis_config = {"data_track_addressbar":false};</script>
							<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-512cee556050fa68"></script>
							<!-- AddThis Button END -->
                            <hr>
						</div>
                        
                    </div>
<div class="col-md-12">
    <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'svejkgames'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    </div>
                </div>

                <div class="col-md-3">
                    <div class="row">

                        <div class="col-md-12">
                            <div class="list-group">
                                <a href="#" class="list-group-item active" style="cursor: default">
                                    <h4 class="list-group-item-heading"><b style="text-shadow: black 0.1em 0.1em 0.2em;">Follow us on Twitter</b></h4>
                                </a>
<a class="twitter-timeline" href="https://twitter.com/SvejkGames" data-widget-id="451635471114702848">Tweets by @SvejkGames</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
								</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="footer navbar-default">
            <div class="container">
                <p class="navbar-text pull-left">&copy;SvejkGames 2014</p>
				<div class = "navbar-text pull-right">Donate BTC: <a href="https://coinbase.com/checkouts/46401b036e18837268d59352283969bc">1Cmfqguh2p1qSj2pt1UpA1CmoWFD4VsUhe</a></div>
            </div>
        </div>    </body>
</html>
