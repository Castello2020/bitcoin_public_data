http://www.stealthcopter.com/blog/category/cryptography/
HTTP/1.1 200 OK
Date: Tue, 22 Jul 2014 07:18:20 GMT
Server: Apache
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
X-Pingback: http://www.stealthcopter.com/blog/xmlrpc.php
Set-Cookie: PHPSESSID=Uno5lAfT0PWoECTnbVLVj2; path=/
Vary: Accept-Encoding
Content-Encoding: gzip
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
			<title>  cryptography | Stealthcopter.com</title>
	
	<!-- Basic Meta Data -->
	<meta name="Copyright" content="Design is copyright 2008 - 2014 The Theme Foundry" />
	<meta http-equiv="imagetoolbar" content="no" />
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	
	<!-- Favicon -->
	<link rel="shortcut icon" href="http://www.stealthcopter.com/blog/wp-content/themes/aStealthTitan/images/favicon.ico" />

	<!--Stylesheets-->
	<link href="http://www.stealthcopter.com/blog/wp-content/themes/aStealthTitan/style.css" type="text/css" media="screen" rel="stylesheet" />
	<!--[if lt IE 8]>
	<link rel="stylesheet" type="text/css" media="screen" href="http://www.stealthcopter.com/blog/wp-content/themes/aStealthTitan/stylesheets/ie.css" />
	<![endif]-->

	<!--Scripts-->
	<script src="http://www.stealthcopter.com/scripts/jquery-1.3.2.min.js" type="text/javascript"></script>
	<script src="http://www.stealthcopter.com/scripts/jcookie.js" type="text/javascript"></script>
	<!--[if lte IE 7]>
	<script type="text/javascript">
	sfHover=function(){var sfEls=document.getElementById("nav").getElementsByTagName("LI");for(var i=0;i<sfEls.length;i++){sfEls[i].onmouseover=function(){this.className+=" sfhover";}
	sfEls[i].onmouseout=function(){this.className=this.className.replace(new RegExp(" sfhover\\b"),"");}}}
	if (window.attachEvent)window.attachEvent("onload",sfHover);
	</script>
	<![endif]-->

	
	<!--WordPress-->
	<link rel="alternate" type="application/rss+xml" title="Stealthcopter.com RSS Feed" href="http://www.stealthcopter.com/blog/feed/" />
	<link rel="pingback" href="http://www.stealthcopter.com/blog/xmlrpc.php" />

	<!--WP Hook-->
		<link rel="alternate" type="application/rss+xml" title="Stealthcopter.com &raquo; cryptography Category Feed" href="http://www.stealthcopter.com/blog/category/cryptography/feed/" />
<link rel='stylesheet' id='output-css'  href='http://www.stealthcopter.com/blog/wp-content/plugins/addthis/css/output.css?ver=3.6.1' type='text/css' media='all' />
<link rel='stylesheet' id='contact-form-7-css'  href='http://www.stealthcopter.com/blog/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=3.5.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp-polls-css'  href='http://www.stealthcopter.com/blog/wp-content/plugins/wp-polls/polls-css.css?ver=2.63' type='text/css' media='all' />
<script type='text/javascript' src='http://www.stealthcopter.com/blog/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://www.stealthcopter.com/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://www.stealthcopter.com/blog/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.4.5'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.stealthcopter.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.stealthcopter.com/blog/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.6.1" />
	<link href="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Styles/SyntaxHighlighter.css" type="text/css" rel="stylesheet" />
	<style type="text/css">
.wp-polls .pollbar {
	margin: 1px;
	font-size: 6px;
	line-height: 8px;
	height: 8px;
	background-image: url('http://www.stealthcopter.com/blog/wp-content/plugins/wp-polls/images/default/pollbg.gif');
	border: 1px solid #c8c8c8;
}
</style>
<!-- Google Analytics Tracking by Google Analyticator 6.4.5: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-10528385-2']);
        _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google 
        
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
</head>
<body class="archive category category-cryptography category-28">
	<div class="skip-content"><a href="#content">Skip to content</a></div>
<div id="preheader" class="clear">
	<div id="header" class="clear">

		<div class="wrapper">
			<div id="title"><a href="http://www.stealthcopter.com/blog/home">Stealthcopter.com</a></div>			<div id="description">
				Android, Linux, Python and stealthcopters			</div><!--end description-->
				<div class="headerlogo">
					<img src="http://www.stealthcopter.com/images/logo_white.png" alt=" "/>
				</div>



<div id="search">
<form id="searchform" method="get" action="http://www.stealthcopter.com/blog/search/">
<input type="text" value="Search (google powered)" onfocus="if (this.value == 'Search (google powered)') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search (google powered)';}" size="35" maxlength="50" name="q" id="s" />
<input type="hidden" name="cx" value="partner-pub-2877169089740283:uvm185-a1nn" /> 
<input type="hidden" name="cof" value="FORID:10" /> 
<input type="hidden" name="ie" value="ISO-8859-1" /> 
<input type="submit" id="sa" value="" />
</form>
</div>



			<div id="navigation">
				<ul id="nav">
					
											<li class="page_item page-item-1079"><a href="http://www.stealthcopter.com/blog/home/">Home</a></li>
<li class="page_item page-item-1035"><a href="http://www.stealthcopter.com/blog/android-apps/">Android Apps</a>
<ul class='children'>
	<li class="page_item page-item-1060"><a href="http://www.stealthcopter.com/blog/android-apps/live-wallpapers/">Live Wallpapers</a>
	<ul class='children'>
		<li class="page_item page-item-1067"><a href="https://market.android.com/details?id=com.stealthcopter.nexusrevamped">Nexus Revamped</a></li>
		<li class="page_item page-item-1068"><a href="https://market.android.com/details?id=com.stealthcopter.nexusrevampedpro">Nexus Revamped Pro</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-1036"><a href="http://www.stealthcopter.com/blog">Blog</a>
<ul class='children'>
	<li class="page_item page-item-1045"><a href="http://www.stealthcopter.com/blog/category/android/">Android</a></li>
	<li class="page_item page-item-1047"><a href="http://www.stealthcopter.com/blog/category/cryptography">Cryptography</a></li>
	<li class="page_item page-item-1048"><a href="http://www.stealthcopter.com/blog/category/electronics">Electronics</a></li>
	<li class="page_item page-item-1049"><a href="http://www.stealthcopter.com/blog/category/linux">Linux</a></li>
	<li class="page_item page-item-1046"><a href="http://www.stealthcopter.com/blog/category/python">Python</a></li>
</ul>
</li>
<li class="page_item page-item-1055"><a href="http://www.stealthcopter.com/blog/port/">Portfolio</a></li>
<li class="page_item page-item-1034"><a href="http://www.stealthcopter.com/wordcube">Wordcube</a>
<ul class='children'>
	<li class="page_item page-item-1117"><a href="http://www.stealthcopter.com/blog/2010/03/wordcube-feedback/">Feedback</a></li>
	<li class="page_item page-item-1115"><a href="http://www.stealthcopter.com/blog/wordcube/statistics/">Statistics</a></li>
	<li class="page_item page-item-1118"><a href="http://www.stealthcopter.com/wordcube">Today&#8217;s</a></li>
</ul>
</li>
<li class="page_item page-item-1078"><a href="http://www.stealthcopter.com/blog/misc/">Misc</a>
<ul class='children'>
	<li class="page_item page-item-1053"><a href="http://www.stealthcopter.com/blog/misc/donate/">Donate</a></li>
	<li class="page_item page-item-1056"><a href="http://www.stealthcopter.com/blog/misc/contact/">Contact</a></li>
</ul>
</li>
														</ul>
			</div><!--end navigation-->
		</div><!--end wrapper-->
	</div><!--end header-->
</div>
<div class="content-background">
	<div class="wrapper">
		<div class="notice"></div>
		<div id="content">						<h1 class="pagetitle">Posts from the  &#8216;cryptography&#8217; Category</h1>
					<div id="post-1214" class="post-1214 post type-post status-publish format-standard hentry category-cryptography category-python tag-cryptography tag-python">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2011/05/recreating-the-enigma-in-python/" rel="bookmark" title="Permanent Link to Recreating the enigma in python">Recreating the enigma in python</a></h2>
			<div class="date">May 19 <span>11</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>Whilst on holiday I was challenged by a friend (mikemeat) to create an <a href="http://en.wikipedia.org/wiki/Enigma_machine">enigma</a> in python. Here is what I wrote:</p>
<pre name="code" class="python">
# -*- coding: utf-8 -*-  
from random import shuffle,randint,choice
from copy import copy
alphabet=range(0,26)

def shift(l, n): # Method to rotate arrays/cogs
	return l[n:] + l[:n]
	
class cog: # Simple substitution cipher for each cog
	def create(self):
		self.transformation=copy(alphabet)
		shuffle(self.transformation)
		return 
	def passthrough(self,i):
		return self.transformation[i]
	def passthroughrev(self,i):
		return self.transformation.index(i)
	def rotate(self):
		self.transformation=shift(self.transformation, 1)
	def setcog(self,a):
		self.transformation=a

class enigma: # Enigma class	
	def __init__(self, nocogs,printspecialchars):
		self.printspecialchars=printspecialchars
		self.nocogs=nocogs
		self.cogs=[]
		self.oCogs=[] # Create backup of original cog positions for reset
		
		for i in range(0,self.nocogs): # Create cogs
			self.cogs.append(cog())
			self.cogs[i].create()
			self.oCogs.append(self.cogs[i].transformation)
		
		# Create reflector
		refabet=copy(alphabet)
		self.reflector=copy(alphabet)
		while len(refabet)&gt;0:
			a=choice(refabet)
			refabet.remove(a)
			b=choice(refabet)
			refabet.remove(b)
			self.reflector[a]=b
			self.reflector[b]=a

	def print_setup(self): # To print the enigma setup for debugging/replication
		print "Enigma Setup:\nCogs: ",self.nocogs,"\nCog arrangement:"
		for i in range(0,self.nocogs):
			print self.cogs[i].transformation
		print "Reflector arrangement:\n",self.reflector,"\n"
		
	def reset(self):
		for i in range(0,self.nocogs):
			self.cogs[i].setcog(self.oCogs[i])
			
	def encode(self,text):
		ln=0
		ciphertext=""
		for l in text.lower():
			num=ord(l)%97
			if (num&gt;25 or num&lt;0):
				if (self.printspecialchars): # readability
					ciphertext+=l 
				else:
					pass # security
			else:
				ln+=1
				for i in range(0,self.nocogs): # Move thru cogs forward...
					num=self.cogs[i].passthrough(num)
					
				num=self.reflector[num] # Pass thru reflector
				
				for i in range(0,self.nocogs): # Move back thru cogs...
					num=self.cogs[self.nocogs-i-1].passthroughrev(num)
				ciphertext+=""+chr(97+num) # add encrypted letter to ciphertext
				
				for i in range(0,self.nocogs): # Rotate cogs...
					if ( ln % ((i*6)+1) == 0 ): # in a ticker clock style
						self.cogs[i].rotate()
		return ciphertext

plaintext="""The most common arrangement used a ratchet and pawl mechanism. 
Each rotor had a ratchet with 26 teeth and, every time a key was pressed, each 
of the pawls corresponding to a particular rotor would move forward in unison, 
trying to engage with a ratchet, thus stepping the attached rotor once. A thin 
metal ring attached to each rotor upon which the pawl rode normally prevented 
this. As this ring rotated with its rotor, a notch machined into it would 
eventually align itself with the pawl, allowing it to drop into position, engage 
with the ratchet, and advance the rotor. The first rotor, having no previous 
rotor (and therefore no notched ring controlling a pawl), stepped with every 
key press. The five basic rotors (I–V) had one notch each, while the additional 
naval rotors VI, VII and VIII had two notches. The position of the notch on each 
rotor was determined by the letter ring which could be adjusted in relation to 
the core containing the interconnections. The points on the rings at which they 
caused the next wheel to move were as follows"""

x=enigma(4,True)
#x.print_setup()

print "Plaintext:\n"+plaintext+"\n"
ciphertext=x.encode(plaintext)
print "Ciphertext:\n"+ciphertext+"\n"

# To proove that encoding and decoding are symmetrical
# we reset the enigma to starting conditions and enter
# the ciphertext, and get out the plaintext
x.reset()
plaintext=x.encode(ciphertext)
print "Plaintext:\n"+plaintext+"\n"

</pre>
<p>Feel free to tear it apart and show me how much better/easier it could have been!</p>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2011/05/recreating-the-enigma-in-python/#comments" title="Comment on Recreating the enigma in python">7 Comments</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-928" class="post-928 post type-post status-publish format-standard hentry category-cryptography category-web tag-casino tag-cryptography">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2010/07/bitcoins-a-cryptocurrency-free-bitcoins-and-a-rigged-casino/" rel="bookmark" title="Permanent Link to Bitcoins a cryptocurrency, free bitcoins and a rigged casino">Bitcoins a cryptocurrency, free bitcoins and a rigged casino</a></h2>
			<div class="date">Jul 14 <span>10</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p><strong>Update: it&#8217;s currently quite difficult to get hold of bitcoins in the UK but <a href="https://localbitcoins.com/?ch=364">localbitcoins</a> works.</strong></p>
<p><iframe allowtransparency="true" frameborder="0" hspace="0" vspace="0" marginheight="0" marginwidth="0" scrolling="no" width="234" height="60" src="https://localbitcoins.com/affiliate-embed/half-banner?ref=364"></iframe><br />
<br/></p>
<p>If your already aware of the awesomeness of public key cryptography (e.g. <a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy">PGP</a> or <a href="http://en.wikipedia.org/wiki/Off-the-Record_Messaging">OTR</a>), then you will probably appreciate <a href="http://www.bitcoin.org/">Bitcoins</a>. </p>
<p>You send coins by typing in someone&#8217;s address and how many coins to send and then your transaction will propagate around the p2p network. You receive coins in the same way by giving someone your address. In order to track transactions you can also make more addresses (and labels for them) which can also add to anonymity. Bitcoins are currently worth $0.0201 per bc (<a href="http://en.wikipedia.org/wiki/Bitcoin">source</a>)</p>
<p><div id="attachment_930" class="wp-caption aligncenter" style="width: 610px"><a href="http://www.stealthcopter.com/blog/2010/07/bitcoins-a-cryptocurrency-free-bitcoins-and-a-rigged-casino/bitcoin/" rel="attachment wp-att-930"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2010/07/bitcoin-600x393.png" alt="Bitcoin program running" title="Bitcoin program running" width="600" height="393" class="size-medium wp-image-930" /></a><p class="wp-caption-text">Bitcoin program running</p></div></p>
<p><strong>Generating Bitcoins</strong><br />
You can opt to generate solutions to a specific crypotgraphic problem in exchange for bitcoins, by doing so your computer&#8217;s idle CPU will be used to solve this problem and when a solution is found you will be rewarded with some bitcoins, yay. There is also talk of speeding up the generation by using CUDA or similar tools <a href="http://www.bitcoin.org/smf/index.php?topic=133.0">here</a></p>
<p><strong>5 Free Bitcoins</strong><br />
You can get 5 free bitcoins to start off your adventure into this new currency from<a href="https://freebitcoins.appspot.com/">here</a>. This is a donation from somebody who wants to ensure that this currency is sucessful and as such this is a token of good faith and should not be exploited. You can also donate bitcoins to the fund to help this project.</p>
<p><strong>Bitcoin casino (A Rigged Casino)</strong><br />
Now onto complain about a rigged casino that operates with bitcoins (<a href="http://www.sirarthur.net/bitcasino">Bitcasino</a>).</p>
<p><div id="attachment_929" class="wp-caption aligncenter" style="width: 610px"><a href="http://www.stealthcopter.com/blog/2010/07/bitcoins-a-cryptocurrency-free-bitcoins-and-a-rigged-casino/bitcoin_casino/" rel="attachment wp-att-929"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2010/07/bitcoin_casino-600x469.png" alt="Rigged and Broken roulette game on bitcoin casino" title="Rigged and Broken roulette game on bitcoin casino" width="600" height="469" class="size-medium wp-image-929" /></a><p class="wp-caption-text">Rigged and Broken roulette game on bitcoin casino</p></div></p>
<p>I continually placed a bet (free play mode) on red, and for over 40 rounds it came up black, this has a probability of  (20/7)^40 or 0.000000000708%. As unfair as this was then game then started getting worse constantly resulting in 0, however it would say &#8220;31 black odd&#8221; and in the side bar of past numbers &#8220;un&#8221; kept appearing which I guess means unknown.</p>
<p>I also tested a few of the slot machines to see if they were rigged too, and surely enough each rotation of the slots resulted in the exact same result every time, which was of course a losing one.</p>
<p>This bitcoin casino is rigged, buggy and not worth wasting your time with, it is much easier to lose money in other ways.</p>
<p><strong>Conclusion</strong><br />
Bitcoin is an awesome idea and hopefully it will catch on and become sucessful, however be sure to avoid bitcasino! Also if anyone would like to donate some bitcoins then please send them to:<br />
<img src="http://www.stealthcopter.com/images/bc.png" alt="" /> 12Qxwa4d8s7bYHWVvNLkQZAVkJZrz8ReKB</p>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2010/07/bitcoins-a-cryptocurrency-free-bitcoins-and-a-rigged-casino/#comments" title="Comment on Bitcoins a cryptocurrency, free bitcoins and a rigged casino">8 Comments</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-917" class="post-917 post type-post status-publish format-standard hentry category-cryptography category-python tag-cracking tag-cryptography tag-hacking tag-python tag-website">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2010/06/cracking-real-world-salted-md5-passwords-in-python-with-several-dictionaries/" rel="bookmark" title="Permanent Link to Cracking real world salted MD5 passwords in python with several dictionaries">Cracking real world salted MD5 passwords in python with several dictionaries</a></h2>
			<div class="date">Jun 28 <span>10</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>Recently a friend (who will remain unnamed for obvious reasons) asked me to penetration test a website he created. I found a very simple exploit where I could upload an avatar but the file was not checked to ensure it was an image, so I uploaded a php script I wrote an began exploring the server. I printed out all of the usernames, passwords and salts from the database to see how many of the 1,109 passwords could be easily cracked.</p>
<p>The passwords were stored as MD5 hashes with a random 6 character alphanumeric salt. To create the MD5 hash of the password the salt was prefixed to the password and then the combination was hashed. Thanks to this method we can employ a simple bruteforce/dictionary attack on the passwords. I will start with the wordlists creation, then results I obtained to keep your interest, and finally show my python code.</p>
<p><strong>Creating wordlists</strong><br />
I already has two reasnoble sized dictionaries that I use for different things like <a href="http://www.stealthcopter.com/wordcube">wordcube</a>. I used john the ripper on my double sized dictionary to create lots of common permutations on words, such as captial first letter, and a number affixed to the end. To do this you run john with the following parameters, where dic.txt is the input dictionary and dic_plus_rules.txt is the output from john with all of the additions it has made.</p>
<blockquote><p>
john &#8211;wordlist=dic.txt &#8211;rules &#8211;stdout > dic_plus_rules.txt
</p>
</blockquote>
<p>I also download two wordlists from <a href="http://download.openwall.net/pub/wordlists/">openwall</a>, one which is a list of ~3100 <a href="http://download.openwall.net/pub/wordlists/passwords/">common passwords</a>, and one labelled <a href="http://download.openwall.net/pub/wordlists/">ALL</a> that has a large amount of words (~4 million) in various languages. Because of the highly compressible nature of text the files are available in small gzip files. ALL is 11.5Mb which unzips to 41.4Mb and password 12kb which unzips to 21.8kb. There are also more <a href="http://download.openwall.net/pub/wordlists/languages/">wordlists avaliable for different languages</a>, but the ALL file includes these.</p>
<p>The size of all of the wordlists I used is shown below:</p>
<table>
<tr>
<th>Dictionary</th>
<th>Combinations</th>
</tr>
<tr>
<td>English</td>
<td>42,987</td>
</tr>
<tr>
<td>Double-English</td>
<td>80,368</td>
</tr>
<tr>
<td>Double+john-rules</td>
<td>3,986,706</td>
</tr>
<tr>
<td>Openwall Common Passwords</td>
<td>3,158</td>
</tr>
<tr>
<td>Openwall ALL</td>
<td>3,917,116</td>
</tr>
</table>
<p><strong>Results</strong></p>
<table>
<tr>
<th>Dictionary</th>
<th>Cracked</th>
<th>Percentage</th>
<th>Time</th>
</tr>
<tr>
<td>English</td>
<td>60</td>
<td>5.41%</td>
<td>80s</td>
</tr>
<tr>
<td>Double-English</td>
<td>65</td>
<td>5.86%</td>
<td>170s</td>
</tr>
<tr>
<td>Double+john-rules</td>
<td>116</td>
<td>10.46%</td>
<td>2.5hrs (8393s)</td>
</tr>
<tr>
<td>Openwall Common Passwords</td>
<td>112</td>
<td>10.10%</td>
<td>7s</td>
</tr>
<tr>
<td>Openwall All</td>
<td>210</td>
<td>18.94%</td>
<td>2.45hrs (8829s)</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</td>
<tr>
<td>Total Passwords Obtained</td>
<td>254</td>
<td>22.90%</td>
<td>~5hrs</td>
</tr>
</table>
<p><strong>Comical passwords</strong></p>
<p>Here are some of the more amusingly bad passwords, the number in brackets shows the frequency of the password.</p>
<p><em><strong>Crap passwords</strong></em>: 123456 (18), password (4), 1234567 (4), 123456789 (3) 12345678 (2),  12345 (2), abc123 (2), asdfgh (2), nintendo (2), 123123, abcd1234, abcdefg, qwerty<br />
<em><strong>Self-describing passwords</strong></em>: catholic, cowboy, creator, doger, ginger, killer, maggot, player, princess, skater, smallcock, smooth, super, superman, superstar, tester, veggie, winner, wolverine<br />
<em><strong>Some other passwords</strong></em>:bananas, cheese, cinnamon, hampster ,DRAGON, dribble1, poopie, poopoo</p>
<p><strong>Python Program</strong></p>
<pre name="code" class="python">
# -*- coding: utf-8 -*-
#pymd5cracker.py
import hashlib, sys
from time import time

# Change to commandline swtiches when you have the time!
hash = ""
hash_file = "hash2.csv"
wordlist = "mass_rules.txt"; 


# Read the hash file entered
try:
	hashdocument = open(hash_file,"r")
except IOError:
	print "Invalid file."
	raw_input()
	sys.exit()
else:
	# Read the csv values seperated by colons into an array
	hashes=[]
	for line in hashdocument:
		line=line.replace("\n","")
		inp = line.split(":")
		if (line.count(":")<2):
			inp.append("")
		hashes.append(inp)
	hashdocument.close();


# Read wordlist in
try:
	wordlistfile = open(wordlist,"r")
except IOError:
	print "Invalid file."
	raw_input()
	sys.exit()
else:
	pass

tested=0
cracked=0
tic = time()
for line in wordlistfile:
	
	line = line.replace("\n","")
	tested+=1
	for i in range(0,len(hashes)):
	
		m = hashlib.md5()
		m.update(hashes[i][2]+line)
		word_hash = m.hexdigest()
		if word_hash==hashes[i][1]:
			toc = time()
			cracked+=1
			hashes[i].append(line)
			print hashes[i][0]," : ", line, "\t(",time()-tic,"s)"

	# Show progress evey 1000 passwords tested
	if tested%1000==0:
		print "Cracked: ",cracked," (",tested,") ", line


# Save the output of this program so we can use again 
# with another program/dictionary adding the password 
# to each line we have solved.
crackout = open("pycrackout.txt","w")
for i in hashes:
	s=""
	for j in i:
		if s!="":
			s+=":"
		s+=j
	s+="\n"
	crackout.write(s)
crackout.close()

print "Passwords found: ",cracked,"/",len(hashes)
print "Wordlist Words :", test
print "Hashes computed: ",len(hashes)*tested
print "Total time taken: ",time()-tic,'s' 
</pre>
<p><strong>Next</strong></p>
<ul>
<li>Play with more dictionaries</li>
<li>Speed up code:
<ul>
<li>Add multi-threading: My experience with multi-threading in python is that it doesn't work well for cpu intensive tasks, if you know otherwise please let me know.</li>
<li>Have a look at <a href="http://mathema.tician.de/software/pycuda">PyCUDA</a> to see if I can use my graphics card to speed up the code significantly (another type of mutli-threading really...) without having to change language like in my previous post of <a href="http://www.stealthcopter.com/blog/2010/06/cracking-md5-hashes-or-passwords-ultra-fast-with-gpu-acceleration/">CUDA MD5 cracking</a></li>
</ul>
</li>
<li>Remove hash once found to stop pointless checking</li>
<li>Add command line switches to all it to be used like a real program</li>
</ul>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2010/06/cracking-real-world-salted-md5-passwords-in-python-with-several-dictionaries/#comments" title="Comment on Cracking real world salted MD5 passwords in python with several dictionaries">16 Comments</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-914" class="post-914 post type-post status-publish format-standard hentry category-cryptography tag-computational tag-cracking tag-cryptography tag-cuda tag-hacking tag-md5">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2010/06/cracking-md5-hashes-or-passwords-ultra-fast-with-gpu-acceleration/" rel="bookmark" title="Permanent Link to Cracking MD5 hashes (or passwords) ultra-fast with GPU acceleration">Cracking MD5 hashes (or passwords) ultra-fast with GPU acceleration</a></h2>
			<div class="date">Jun 24 <span>10</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>Do you want to crack MD5 hashes in at a rate of ~300MHash/s without a massive rainbow table? Do you have a CUDA enabled GFX card? If you said yes or maybe to these questions then read on for a brief introduction on how to compile and run a CUDA accelerated MD5 cracker (coded by Benjamin <em>&#8220;Titan&#8221;</em> Vernoux ).</p>
<p><strong>Pre-Requisites and Downloading</strong></p>
<ul>
<li>Own a <a href="http://www.nvidia.com/object/cuda_learn_products.html">CUDA enabled GFX card</a>, if you have a NVIDIA graphics card from the past year or so this is most likely the case.</li>
<li>Download and Install the <a href="http://www.nvidia.com/object/cuda_get.html">CUDA toolkit</a></li>
<li>Download MD5 GPU crack from <a href="http://bvernoux.free.fr/md5/index.php">http://bvernoux.free.fr</a> (windows and Linux)</li>
</ul>
<p><strong>Building in Ubuntu 10.04</strong></p>
<p>Extract the archive and do a make on the source code. When doing this I came across two problems that can be fixed by modifying the common.mk file.</p>
<p><em><strong>Problem 1: (cannot be declared weak)</strong></em></p>
<blockquote><p>
$ make<br />
/usr/include/string.h:43: error: inline function ‘void* memcpy(void*, const void*, size_t)’ cannot be declared weak<br />
/usr/include/string.h:64: error: inline function ‘void* memset(void*, int, size_t)’ cannot be declared weak<br />
/usr/include/bits/string3.h:49: error: inline function ‘void* memcpy(void*, const void*, size_t)’ cannot be declared weak<br />
/usr/include/bits/string3.h:78: error: inline function ‘void* memset(void*, int, size_t)’ cannot be declared weak<br />
/opt/cuda/bin/../include/common_functions.h:59: error: inline function ‘void* memset(void*, int, size_t)’ cannot be declared weak<br />
/opt/cuda/bin/../include/common_functions.h:62: error: inline function ‘void* memcpy(void*, const void*, size_t)’ cannot be declared weak<br />
/opt/cuda/bin/../include/math_functions.h:422: error: inline function ‘int __signbit(double)’ cannot be declared weak<br />
/opt/cuda/bin/../include/math_functions.h:427: error: inline function ‘int __signbitf(float)’ cannot be declared weak<br />
/opt/cuda/bin/../include/math_functions.h:440: error: inline function ‘int __signbitl(long double)’ cannot be declared weak<br />
/usr/include/bits/mathcalls.h:350: error: inline function ‘int __signbit(double)’ cannot be declared weak<br />
/usr/include/bits/mathcalls.h:350: error: inline function ‘int __signbitf(float)’ cannot be declared weak<br />
/usr/include/bits/mathcalls.h:350: error: inline function ‘int __signbitl(long double)’ cannot be declared weak<br />
/usr/include/bits/mathinline.h:36: error: inline function ‘int __signbitf(float)’ cannot be declared weak<br />
/usr/include/bits/mathinline.h:42: error: inline function ‘int __signbit(double)’ cannot be declared weak<br />
/usr/include/bits/mathinline.h:48: error: inline function ‘int __signbitl(long double)’ cannot be declared weak</p>
</blockquote>
<p><em><strong>Solution 1</strong></em></p>
<blockquote><p>
# Debug/release configuration<br />
ifeq ($(dbg),1)<br />
	COMMONFLAGS += -g<br />
	NVCCFLAGS   += -D_DEBUG<br />
	BINSUBDIR   := debug<br />
	LIBSUFFIX   := D<br />
else<br />
	##############Change the following line to have -O0 instead of -O2<br />
	COMMONFLAGS += -O0<br />
	BINSUBDIR   := release<br />
	LIBSUFFIX   :=<br />
	NVCCFLAGS   += &#8211;compiler-options -fno-strict-aliasing<br />
	CXXFLAGS    += -fno-strict-aliasing<br />
	CFLAGS      += -fno-strict-aliasing<br />
endif
</p>
</blockquote>
<p><em><strong>Problem 2: (lcudart)</strong></em></p>
<blockquote><p>
$ make<br />
/usr/bin/ld: skipping incompatible /opt/cuda/lib/libcudart.so when searching for -lcudart<br />
/usr/bin/ld: skipping incompatible /opt/cuda/lib/libcudart.so when searching for -lcudart<br />
/usr/bin/ld: cannot find -lcudart<br />
collect2: ld returned 1 exit status<br />
make: *** [bin/linux/release/gpu_md5_crack_0.2.3] Error 1
</p>
</blockquote>
<p><em><strong>Solution 2</strong></em></p>
<blockquote><p>
############## Change lib to lib64 if using a 64 bit operating system<br />
LIB       := -L$(CUDA_INSTALL_PATH)/lib64 -L$(LIBDIR) -L$(COMMONDIR)/lib64/$(OSLOWER) -L$(NVIDIA_SDK_PATH)/lib
</p>
</blockquote>
<p>Remember that you should &#8220;make clean&#8221; in-between each attempt to compile.</p>
<p><strong>Benchmarking</strong></p>
<p>Once it has compiled nicely you can give it a testdrive with its build in benchmark (with an NVIDIA 260 GFX card). Just run with the -b option:</p>
<blockquote><p>
./gpu_md5_crack_0.2.3 -b<br />
GPU_MD5_Crack v0.2.3 09 July 2009 LGPL for BackTrack 4.<br />
Copyright (C) 2009 TitanMKD (titanmkd@gmail.com).                                    </p>
<p>Benchmark Start<br />
Using default CUDA GPU device:0<br />
Cuda device ID:0, Device name:GeForce GTX 260, supporting CUDA:1.3,<br />
multiProcessorCount:27, clockRate:1466.00 MHz, TotalMem:895.31 MB<br />
******* Test 0 Start *******<br />
Expected Password: 1234567890<br />
MD5 Hash:e807f1fcf82d132f9bb018ca6738a19f, Start Password:1200000000, Total pwd to check:1000000000<br />
Charset used 0:0123456789<br />
MD5 brute force started                                                                            </p>
<p>MD5 Cracked pwd=1234567890 hash=e807f1fcf82d132f9bb018ca6738a19f<br />
Instant 200.02 Mhash/s(40.00 ms)<br />
Average 190.49 Mhash/s, Total Time:0.21s(210.00 ms)<br />
MD5 brute force finished<br />
******* Test 0 End *******                                      </p>
<p>******* Test 1 Start *******<br />
Expected Password: azerty<br />
MD5 Hash:ab4f63f9ac65152575886860dde480a1, Start Password:, Total pwd to check:1000000000<br />
Charset used 1:abcdefghijklmnopqrstuvwxyz<br />
MD5 brute force started                                                                  </p>
<p>MD5 Cracked pwd=azerty hash=ab4f63f9ac65152575886860dde480a1<br />
Instant 200.02 Mhash/s(40.00 ms)<br />
Average 240.02 Mhash/s, Total Time:0.10s(100.00 ms)<br />
MD5 brute force finished<br />
******* Test 1 End *******                                  </p>
<p>******* Test 2 Start *******<br />
Expected Password: azer09<br />
MD5 Hash:41b9cabe6033932eb3037fc933060adc, Start Password:, Total pwd to check:1000000000<br />
Charset used 2:abcdefghijklmnopqrstuvwxyz0123456789<br />
MD5 brute force started<br />
Progress 5%, Pwd:6lmea, Instant 280.02 Mhash/s(28.57 ms)<br />
MD5 Cracked pwd=azer09 hash=41b9cabe6033932eb3037fc933060adc<br />
Instant 266.69 Mhash/s(30.00 ms)<br />
Average 287.20 Mhash/s, Total Time:0.39s(390.00 ms)<br />
MD5 brute force finished<br />
******* Test 2 End *******                                                               </p>
<p>******* Test 3 Start *******<br />
Expected Password: AZBVSD<br />
MD5 Hash:fd049008572788d60140aaead79336cc, Start Password:, Total pwd to check:1000000000<br />
Charset used 3:ABCDEFGHIJKLMNOPQRSTUVWXYZ<br />
MD5 brute force started                                                                  </p>
<p>MD5 Cracked pwd=AZBVSD hash=fd049008572788d60140aaead79336cc<br />
Instant 266.69 Mhash/s(30.00 ms)<br />
Average 240.02 Mhash/s, Total Time:0.10s(100.00 ms)<br />
MD5 brute force finished<br />
******* Test 3 End *******</p>
<p>******* Test 4 Start *******<br />
Expected Password: AZ09AA<br />
MD5 Hash:7a552dd9cdd49acc5320bad9c29c9722, Start Password:, Total pwd to check:1000000000<br />
Charset used 4:ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<br />
MD5 brute force started<br />
Progress 5%, Pwd:6LMEA, Instant 266.69 Mhash/s(30.00 ms)<br />
MD5 Cracked pwd=AZ09AA hash=7a552dd9cdd49acc5320bad9c29c9722<br />
Instant 266.69 Mhash/s(30.00 ms)<br />
Average 280.02 Mhash/s, Total Time:0.40s(400.00 ms)<br />
MD5 brute force finished<br />
******* Test 4 End *******</p>
<p>******* Test 5 Start *******<br />
Expected Password: zaZAab<br />
MD5 Hash:aef49f70bb7b923b8bc0a018f916ef64, Start Password:zCAAAA, Total pwd to check:1000000000<br />
Charset used 5:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz<br />
MD5 brute force started<br />
Progress 17%, Pwd:zaDpoA, Instant 280.02 Mhash/s(28.57 ms)<br />
MD5 Cracked pwd=zaZAab hash=aef49f70bb7b923b8bc0a018f916ef64<br />
Instant 266.69 Mhash/s(30.00 ms)<br />
Average 283.10 Mhash/s, Total Time:0.65s(650.00 ms)<br />
MD5 brute force finished<br />
******* Test 5 End *******</p>
<p>******* Test 6 Start *******<br />
Expected Password: za0ZA9<br />
MD5 Hash:062cc3b1302759722f48ac0b95b75803, Start Password:zaAAAA, Total pwd to check:1000000000<br />
Charset used 6:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789<br />
MD5 brute force started</p>
<p>MD5 Cracked pwd=za0ZA9 hash=062cc3b1302759722f48ac0b95b75803<br />
Instant 266.69 Mhash/s(30.00 ms)<br />
Average 266.69 Mhash/s, Total Time:0.06s(60.00 ms)<br />
MD5 brute force finished<br />
******* Test 6 End *******</p>
<p>******* Test 7 Start *******<br />
Expected Password: a^-*|<br />
MD5 Hash:cf7dcf4c3eeb6255668393242fcce273, Start Password:a0000, Total pwd to check:1000000000<br />
Charset used 7: !&#8221;#$%&#038;&#8217;()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~<br />
MD5 brute force started</p>
<p>MD5 Cracked pwd=a^-*| hash=cf7dcf4c3eeb6255668393242fcce273<br />
Instant 266.69 Mhash/s(30.00 ms)<br />
Average 266.69 Mhash/s, Total Time:0.15s(150.00 ms)<br />
MD5 brute force finished<br />
******* Test 7 End *******</p>
<p>Benchmark End
</p>
</blockquote>
<p>So from the benchmark you can see that we are getting between 200 and 300 Mhash/s, that is about 250,000,000 hash attempts per second! AMAZING!!!</p>
<p><strong>Number of combinations for different alphabets</strong></p>
<table>
<tr>
<th>Length</th>
<th>0-9</th>
<th>a-z</th>
<th>a-z0-9</th>
<th>a-zA-Z</th>
<th>a-zA-Z0-9</th>
</tr>
<tr>
<td>1</td>
<td>10</td>
<td>26</td>
<td>36</td>
<td>52</td>
<td>62</td>
</tr>
<tr>
<td>2</td>
<td>100</td>
<td>676</td>
<td>1,296</td>
<td>2,704</td>
<td>3,844</td>
</tr>
<tr>
<td>3</td>
<td>1,000</td>
<td>17,576</td>
<td>46,656</td>
<td>140,608</td>
<td>238,328</td>
</tr>
<tr>
<td>4</td>
<td>10,000</td>
<td>456,976</td>
<td>1,679,616</td>
<td>7,311,616</td>
<td>14,776,336</td>
</tr>
<tr>
<td>5</td>
<td>100,000</td>
<td>11,881,376</td>
<td>60,466,176</td>
<td>380,204,032</td>
<td>916,132,832</td>
</tr>
<tr>
<td>6</td>
<td>1,000,000</td>
<td>308,915,776</td>
<td>2,176,782,336</td>
<td>19,770,609,664</td>
<td>56,800,235,584</td>
</tr>
<tr>
<td>7</td>
<td>10,000,000</td>
<td>8,031,810,176</td>
<td>78,364,164,096</td>
<td>1,028,071,702,528</td>
<td>3,521,614,606,208</td>
</tr>
<tr>
<td>8</td>
<td>100,000,000</td>
<td>208,827,064,576</td>
<td>2,821,109,907,456</td>
<td>53,459,728,531,456</td>
<td>218,340,105,584,896</td>
</tr>
<tr>
<td>9</td>
<td>1,000,000,000</td>
<td>5,429,503,678,976</td>
<td>101,559,956,668,416</td>
<td>2,779,905,883,635,710</td>
<td>13,537,086,546,263,600</td>
</tr>
<tr>
<td>10</td>
<td>10,000,000,000</td>
<td>141,167,095,653,376</td>
<td>3,656,158,440,062,980</td>
<td>144,555,105,949,057,000</td>
<td>839,299,365,868,340,000</td>
</tr>
</table>
<p><strong>Estimated time (in seconds) to crack (at 250MHash/s)</strong></p>
<table>
<tr>
<th>Length</th>
<th>0-9</th>
<th>a-z</th>
<th>a-z0-9</th>
<th>a-zA-Z</th>
<th>a-zA-Z0-9</th>
</tr>
<tr>
<td>1</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
</tr>
<tr>
<td>2</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
</tr>
<tr>
<td>3</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
</tr>
<tr>
<td>4</td>
<td>0.00</td>
<td>0.00</td>
<td>0.00</td>
<td>0.01</td>
<td>0.03</td>
</tr>
<tr>
<td>5</td>
<td>0.00</td>
<td>0.02</td>
<td>0.12</td>
<td>0.76</td>
<td>1.83</td>
</tr>
<tr>
<td>6</td>
<td>0.00</td>
<td>0.62</td>
<td>4.35</td>
<td>39.54</td>
<td>113.60</td>
</tr>
<tr>
<td>7</td>
<td>0.02</td>
<td>16.06</td>
<td>156.73</td>
<td>2,056.14</td>
<td>7,043.23</td>
</tr>
<tr>
<td>8</td>
<td>0.20</td>
<td>417.65</td>
<td>5,642.22</td>
<td>106,919.46</td>
<td>436,680.21</td>
</tr>
<tr>
<td>9</td>
<td>2.00</td>
<td>10,859.01</td>
<td>203,119.91</td>
<td>5,559,811.77</td>
<td>27,074,173.09</td>
</tr>
<tr>
<td>10</td>
<td>20.00</td>
<td>282,334.19</td>
<td>7,312,316.88</td>
<td>289,110,211.90</td>
<td>1,678,598,731.74</td>
</tr>
</table>
<p>Full calculations avaliable here: <a href='http://www.stealthcopter.com/blog/2010/06/cracking-md5-hashes-or-passwords-ultra-fast-with-gpu-acceleration/hashes/' rel='attachment wp-att-915'>MD5 hash cracking time using GPU accelerated brute forcing</a></p>
<p><strong>What now?</strong><br />
Well you can crack MD5&#8242;s at an extremely accelerated rate, so enjoy doing so responsibly (let your morals guide you <img src='http://www.stealthcopter.com/blog/wp-includes/images/smilies/icon_razz.gif' alt=':P' class='wp-smiley' /> ). You could also explore the source code and make additions as you see fit, I am planning on modifying it to allow an extra parameter so that prefixes can be added if you already know how the password starts. This can be the case when someone has prefixed the password with a known salt.</p>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2010/06/cracking-md5-hashes-or-passwords-ultra-fast-with-gpu-acceleration/#comments" title="Comment on Cracking MD5 hashes (or passwords) ultra-fast with GPU acceleration">1 Comment</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-859" class="post-859 post type-post status-publish format-standard hentry category-cryptography category-python tag-cryptography tag-python">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2010/04/how-to-create-a-cryptogram-in-python-random-substitution-cipher/" rel="bookmark" title="Permanent Link to How to create a cryptogram in python (random substitution cipher)">How to create a cryptogram in python (random substitution cipher)</a></h2>
			<div class="date">Apr 20 <span>10</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>Cryptograms are enjoyable puzzles created from a saying or phrase encrypted with a substitutional cipher. They can be fun to decipher by hand by looking for common letter combinations, doublets, guesswork, and other flaws in this encryption mechanism.</p>
<p>I wrote a quick python script which will accept an input text and create a random substitutional cipher and encrypt it. It then outputs the cipher alphabet and the encrypted text.</p>
<p><strong>Source code:</strong></p>
<pre name="code" class="python">
# -*- coding: utf-8 -*-
import sys
from random import randint
from string import maketrans

if (len(sys.argv)>1):
	# Normal alphabet 
	alphabet="abcdefghijklmnopqrstuvwxyz"

	# Randomly create a new cipherbet
	cipherbet=""
	left=alphabet
	for i in range(0,len(alphabet)):
		x=randint(0,len(left)-1)
		cipherbet+=left[x]
		left=left[:x]+left[x+1:]
	
	# Get input text to translate  
	text=sys.argv[1].lower()

	trantab = maketrans(alphabet,cipherbet)
	text=text.translate(trantab)

	# Replace unused letters in cipherbet with _'s  
	for i in cipherbet:
		if i not in text:
			cipherbet=cipherbet.replace(i,"_")

	# Print cipherbet (solution) and the text (cryptogram) 
	print cipherbet
	print text
</pre>
<p><strong>Example usage</strong></p>
<blockquote><p>
python create_cipher.py &#8220;The Science gets done. And you make a neat gun. For the people who are still alive.&#8221;<br />
b_lpievrm_acqxuj_fzdgwn_o_<br />
dri zlmixli vidz puxi. bxp oug qbai b xibd vgx. euf dri jiujci nru bfi zdmcc bcmwi.
</p>
</blockquote>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2010/04/how-to-create-a-cryptogram-in-python-random-substitution-cipher/#comments" title="Comment on How to create a cryptogram in python (random substitution cipher)">3 Comments</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-843" class="post-843 post type-post status-publish format-standard hentry category-cryptography category-electronics tag-cryptography tag-electronics tag-printer">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2010/04/dell-1320c-colour-laser-printer-machine-identification-code-microdots/" rel="bookmark" title="Permanent Link to Dell 1320c colour laser printer (Machine Identification Code microdots)">Dell 1320c colour laser printer (Machine Identification Code microdots)</a></h2>
			<div class="date">Apr 5 <span>10</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>As you may or may not be aware some printers add extra information in order for the printer to be identified (primarily for counterfeiting case I believe). With colour laser printers this can be in the form of a small array of yellow dots printed onto you paper. Yellow dots are hardly visible to the naked eye, however if you are close enough and get the light at the right angle you can see them. If you have some blue leds or a blue light available this can make it much easier to see the dots (as the yellow dots will absorb the blue and look black).</p>
<p><div id="attachment_845" class="wp-caption aligncenter" style="width: 510px"><a href="http://www.stealthcopter.com/blog/2010/04/dell-1320c-colour-laser-printer-machine-identification-code-microdots/cimg0424/" rel="attachment wp-att-845"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2010/04/CIMG0424.jpg" alt="CUPS test paper with non-visible yellow dots" title="CUPS test paper with non-visible yellow dots" width="500" height="667" class="size-full wp-image-845" /></a><p class="wp-caption-text">CUPS test paper with non-visible yellow dots</p></div><br />
<div id="attachment_846" class="wp-caption aligncenter" style="width: 510px"><a href="http://www.stealthcopter.com/blog/2010/04/dell-1320c-colour-laser-printer-machine-identification-code-microdots/cimg0425/" rel="attachment wp-att-846"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2010/04/CIMG0425.jpg" alt="CUPS test paper with non-visible yellow dots (closer)" title="CUPS test paper with non-visible yellow dots (closer)" width="500" height="375" class="size-full wp-image-846" /></a><p class="wp-caption-text">CUPS test paper with non-visible yellow dots (closer)</p></div></p>
<p>Now much clearer under blue led illumination:</p>
<p><div id="attachment_848" class="wp-caption aligncenter" style="width: 610px"><a href="http://www.stealthcopter.com/blog/2010/04/dell-1320c-colour-laser-printer-machine-identification-code-microdots/cimg04322/" rel="attachment wp-att-848"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2010/04/CIMG04322.jpg" alt="Yellow dots very clear under blue illumination on the dell 1320c colour laser printer" title="Yellow dots very clear under blue illumination on the dell 1320c colour laser printer" width="600" height="450" class="size-full wp-image-848" /></a><p class="wp-caption-text">Yellow dots very clear under blue illumination on the dell 1320c colour laser printer</p></div><br />
<div id="attachment_849" class="wp-caption aligncenter" style="width: 610px"><a href="http://www.stealthcopter.com/blog/2010/04/dell-1320c-colour-laser-printer-machine-identification-code-microdots/cimg043222/" rel="attachment wp-att-849"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2010/04/CIMG043222-600x558.jpg" alt="Yellow dots very clear under blue illumination (zoomed in)" title="Yellow dots very clear under blue illumination (zoomed in)" width="600" height="558" class="size-medium wp-image-849" /></a><p class="wp-caption-text">Yellow dots very clear under blue illumination (zoomed in)</p></div></p>
<p>Unfortunately I my camera isn&#8217;t good enough quality and it doesn&#8217;t have a macro lens or feature so I can only show images at both extremes. Below are images captured with my microscope, you don&#8217;t have to look very far around the page, as the clusters are littered all over the page.</p>
<p><div id="attachment_850" class="wp-caption aligncenter" style="width: 610px"><a href="http://www.stealthcopter.com/blog/2010/04/dell-1320c-colour-laser-printer-machine-identification-code-microdots/2010-04-05-152732/" rel="attachment wp-att-850"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2010/04/2010-04-05-152732-600x450.jpg" alt="Microscope image of a few yellow dots on paper printed with dell 1320c" title="Microscope image of a few yellow dots on paper printed with dell 1320c" width="600" height="450" class="size-medium wp-image-850" /></a><p class="wp-caption-text">Microscope image of a few yellow dots on paper printed with dell 1320c</p></div><br />
<div id="attachment_851" class="wp-caption aligncenter" style="width: 610px"><a href="http://www.stealthcopter.com/blog/2010/04/dell-1320c-colour-laser-printer-machine-identification-code-microdots/2010-04-05-152854/" rel="attachment wp-att-851"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2010/04/2010-04-05-152854-600x450.jpg" alt="Microscope image of a two yellow dots (max zoom)" title="Microscope image of a two yellow dots (max zoom)" width="600" height="450" class="size-medium wp-image-851" /></a><p class="wp-caption-text">Microscope image of a two yellow dots (max zoom)</p></div></p>
<p>The <a href="http://www.eff.org/wp/investigating-machine-identification-code-technology-color-laser-printers#testsheets">Electronic frontier foundation</a> have more information about the dots and have setup an address you can send a print test page to in order for them to build up a public defence case. Perhaps criminals will end up printing with yellow backgrounds to combat this method?</p>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2010/04/dell-1320c-colour-laser-printer-machine-identification-code-microdots/#comments" title="Comment on Dell 1320c colour laser printer (Machine Identification Code microdots)">1 Comment</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-347" class="post-347 post type-post status-publish format-standard hentry category-cryptography category-python tag-cryptography tag-python">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2010/01/python-cryptography-decoding-a-caesar-shift-frequency-analysis/" rel="bookmark" title="Permanent Link to Python: Cryptography decoding a Caesar shift (frequency analysis)">Python: Cryptography decoding a Caesar shift (frequency analysis)</a></h2>
			<div class="date">Jan 4 <span>10</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>Due to the simple nature of the Caesar cipher, it could easily be brute forced by trying all possible 25 keys and then looking by eye to see if the plaintext was revealed (this too can be automated by checking for common English words to see if the solution was probable). However the much more elegant method of frequency analysis can be used.</p>
<p>Below is a table of the frequency of letters in the English language:</p>
<p><code></p>
<table>
<tr>
<td>Letter</td>
<td>Frequency (percent)</td>
<td>Frequency (decimal)</td>
<td>Normalised Frequency</td>
</tr>
<tr>
<td>a</td>
<td>8.17%</td>
<td>0.08167</td>
<td>0.64297</td>
</tr>
<tr>
<td>b</td>
<td>1.49%</td>
<td>0.01492</td>
<td>0.11746</td>
</tr>
<tr>
<td>c</td>
<td>2.78%</td>
<td>0.02782</td>
<td>0.21902</td>
</tr>
<tr>
<td>d</td>
<td>4.25%</td>
<td>0.04253</td>
<td>0.33483</td>
</tr>
<tr>
<td>e</td>
<td>12.70%</td>
<td>0.12702</td>
<td>1.00000</td>
</tr>
<tr>
<td>f</td>
<td>2.23%</td>
<td>0.02228</td>
<td>0.17541</td>
</tr>
<tr>
<td>g</td>
<td>2.02%</td>
<td>0.02015</td>
<td>0.15864</td>
</tr>
<tr>
<td>h</td>
<td>6.09%</td>
<td>0.06094</td>
<td>0.47977</td>
</tr>
<tr>
<td>i</td>
<td>6.97%</td>
<td>0.06966</td>
<td>0.54842</td>
</tr>
<tr>
<td>j</td>
<td>0.15%</td>
<td>0.00153</td>
<td>0.01205</td>
</tr>
<tr>
<td>k</td>
<td>0.77%</td>
<td>0.00772</td>
<td>0.06078</td>
</tr>
<tr>
<td>l</td>
<td>4.03%</td>
<td>0.04025</td>
<td>0.31688</td>
</tr>
<tr>
<td>m</td>
<td>2.41%</td>
<td>0.02406</td>
<td>0.18942</td>
</tr>
<tr>
<td>n</td>
<td>6.75%</td>
<td>0.06749</td>
<td>0.53133</td>
</tr>
<tr>
<td>o</td>
<td>7.51%</td>
<td>0.07507</td>
<td>0.59101</td>
</tr>
<tr>
<td>p</td>
<td>1.93%</td>
<td>0.01929</td>
<td>0.15187</td>
</tr>
<tr>
<td>q</td>
<td>0.10%</td>
<td>0.00095</td>
<td>0.00748</td>
</tr>
<tr>
<td>r</td>
<td>5.99%</td>
<td>0.05987</td>
<td>0.47134</td>
</tr>
<tr>
<td>s</td>
<td>6.33%</td>
<td>0.06327</td>
<td>0.49811</td>
</tr>
<tr>
<td>t</td>
<td>9.06%</td>
<td>0.09056</td>
<td>0.71296</td>
</tr>
<tr>
<td>u</td>
<td>2.76%</td>
<td>0.02758</td>
<td>0.21713</td>
</tr>
<tr>
<td>v</td>
<td>0.98%</td>
<td>0.00978</td>
<td>0.07700</td>
</tr>
<tr>
<td>w</td>
<td>2.36%</td>
<td>0.02360</td>
<td>0.18580</td>
</tr>
<tr>
<td>x</td>
<td>0.15%</td>
<td>0.00150</td>
<td>0.01181</td>
</tr>
<tr>
<td>y</td>
<td>1.97%</td>
<td>0.01974</td>
<td>0.15541</td>
</tr>
<tr>
<td>z</td>
<td>0.07%</td>
<td>0.00074</td>
<td>0.00583</td>
</tr>
</table>
<p></code></p>
<p>And shown graphically:</p>
<p><div id="attachment_349" class="wp-caption aligncenter" style="width: 572px"><a href="http://www.stealthcopter.com/blog/wp-content/uploads/2009/12/letter_freq.png"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2009/12/letter_freq.png" alt="English Letter Frequency" title="English Letter Frequency" width="562" height="342" class="size-full wp-image-349" /></a><p class="wp-caption-text">English Letter Frequency</p></div></p>
<p>Using the following code we can use frequency analysis to find the solution to ciphertext created using the Caesar shift demonstrated previously (see <a href="http://www.stealthcopter.com/blog/2009/12/python-cryptography-caesar-shift-encryption-shift-cipher/">Caesar shift</a> and <a href="http://www.stealthcopter.com/blog/2009/12/python-cryptograph-using-maketrans-for-substitution-and-caesar-ciphers/">Caesar shift using makestrans</a>).</p>
<pre name="code" class="python">
from Numeric import *
from string import maketrans

def translator(text,alphabet,key):
	trantab = maketrans(alphabet,key)
	return text.translate(trantab)

def caesar_decode(ciphertext,s):
	alpha="abcdefghijklmnopqrstuvwxyz"
	return translator(ciphertext,alpha,alpha[-s:]+alpha[:-s])




class frequency_analysis:
	def __init__(self, ciphertext):
		self.cor=[0.64297,0.11746,0.21902,0.33483,1.00000,0.17541,
		0.15864,0.47977,0.54842,0.01205,0.06078,0.31688,0.18942,
		0.53133,0.59101,0.15187,0.00748,0.47134,0.49811,0.71296,
		0.21713,0.07700,0.18580,0.01181,0.15541,0.00583]
		self.ciphertext=ciphertext.lower()
		self.freq()
		self.min_error()
		self.key=self.minimum[0]
		self.solution=caesar_decode(self.ciphertext,self.minimum[0])

	def freq(self):
		self.arr=zeros(26,Float64)
		for l in self.ciphertext:
			x=ord(l)
			if (x&gt;=97 and x&lt;=122):
				self.arr[x-97]+=1.0
		self.arr/=max(self.arr)

	def error(self):
		e=0
		for i in range(0,len(self.arr)):
			e+=abs(self.arr[i]-self.cor[i])**2
		return e

	def min_error(self):
		self.minimum=[0,10000]
		for rot in range(0,25):
			e=self.error()
			print rot,e
			if e&lt;self.minimum[1]:
				self.minimum[1]=e
				self.minimum[0]=rot
			x=self.arr[-1]
			del self.cor[-1]
			self.cor.insert(0,x)

ciphertext="ymjwj fwj ybt ydujx tk jshwduynts: tsj ymfy bnqq "+\
"uwjajsy dtzw xnxyjw kwtr wjfinsl dtzw infwd fsi tsj ymfy bnqq "+\
"uwjajsy dtzw ltajwsrjsy. ymnx nx f ajwd nrutwyfsy qjxxts yt "+\
"wjrjgjwjxujhnfqqd ktw fyyfhpx zxnsl kwjvzjshd fsfqdxnx bmnhm "+\
"wjvznwj qtsljw ufxxflj tk yjcy ns twijw yt fhmnjaj gjyyjw wjxzqyx."
FA=frequency_analysis(ciphertext)
print FA.solution
</pre>
<p>This code will calculate the error in statistical frequency for each letter squared to generate an error for each possible rotation. Using a sufficiently long piece of ciphertext this code should accurately reveal the Caesar rotation use. The table below shows the error for each rotation:</p>
<p><code></p>
<table>
<tr>
<td>Rotation</td>
<td>Error</td>
</tr>
<tr>
<td>0</td>
<td>4.11797847386</td>
</tr>
<tr>
<td>1</td>
<td>3.05305477067</td>
</tr>
<tr>
<td>2</td>
<td>3.70059678828</td>
</tr>
<tr>
<td>3</td>
<td>3.66330931218</td>
</tr>
<tr>
<td>4</td>
<td>3.5078619579</td>
</tr>
<tr>
<td>5</td>
<td>0.361318100755</td>
</tr>
<tr>
<td>6</td>
<td>3.17289666386</td>
</tr>
<tr>
<td>7</td>
<td>3.66072641654</td>
</tr>
<tr>
<td>8</td>
<td>3.39769855873</td>
</tr>
<tr>
<td>9</td>
<td>1.74854802027</td>
</tr>
<tr>
<td>10</td>
<td>2.92550921273</td>
</tr>
<tr>
<td>11</td>
<td>2.67524757297</td>
</tr>
<tr>
<td>12</td>
<td>2.86847189573</td>
</tr>
<tr>
<td>13</td>
<td>3.06980318397</td>
</tr>
<tr>
<td>14</td>
<td>2.56886153328</td>
</tr>
<tr>
<td>15</td>
<td>2.17180117031</td>
</tr>
<tr>
<td>16</td>
<td>2.24503724763</td>
</tr>
<tr>
<td>17</td>
<td>2.95579718798</td>
</tr>
<tr>
<td>18</td>
<td>1.74002183444</td>
</tr>
<tr>
<td>19</td>
<td>1.83328601011</td>
</tr>
<tr>
<td>20</td>
<td>1.74779021766</td>
</tr>
<tr>
<td>21</td>
<td>2.71332097813</td>
</tr>
<tr>
<td>22</td>
<td>1.5409364067</td>
</tr>
<tr>
<td>23</td>
<td>1.83209213494</td>
</tr>
<tr>
<td>24</td>
<td>1.54904808883</td>
</tr>
</table>
<p></code></p>
<p>The lowest error is for 5 rotations (correctly so) with an error of 0.361318100755, the next lowest error is 22 rotations with an error of 1.5409364067. This is ~4.3x difference, which gives a very large degree of confidence to our solution and below is the deciphered text.</p>
<blockquote><p>
there are two types of encryption: one that will prevent your sister from reading your diary and one that will prevent your government. this is a very important lesson to remeberespecially for attacks using frequency analysis which require longer passage of text in order to achieve better results.
</p>
</blockquote>
<p><strong>Future</strong><br />
The frequency analysis presented here can be used along with some other techniques in order to crack the viginere cipher.</p>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2010/01/python-cryptography-decoding-a-caesar-shift-frequency-analysis/#comments" title="Comment on Python: Cryptography decoding a Caesar shift (frequency analysis)">1 Comment</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-323" class="post-323 post type-post status-publish format-standard hentry category-cryptography category-python tag-cryptography tag-python">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2009/12/python-cryptograph-using-maketrans-for-substitution-and-caesar-ciphers/" rel="bookmark" title="Permanent Link to Python: Cryptograph using maketrans for substitution and Caesar ciphers">Python: Cryptograph using maketrans for substitution and Caesar ciphers</a></h2>
			<div class="date">Dec 22 <span>09</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>I&#8217;ve rewritten the functions in my previous two posts (<a href="http://www.stealthcopter.com/blog/2009/12/python-cryptography-caesar-shift-encryption-shift-cipher/">caesar</a> and <a href="http://www.stealthcopter.com/blog/2009/12/python-cryptography-substitution-cipher-improving-on-the-caesar-cipher/">substitution</a> ciphers) using the maketrans function from the strings module in python (With thanks to <a href="http://www.wumzi.info/">wumzi</a> for pointing this out).</p>
<p>maketrans takes an input alphabet and an output alphabet and can then be used on a string. This can be used to greatly simplify the two ciphers I produced previously. Example below:</p>
<pre name="code" class="python">
input_alphabet="abcde"
output_alphabet="12345"
trantab = maketrans(input_alphabet,output_alphabet)
text="translate abcdefg"
print text.translate(trantab)
# This will output:
# tr1nsl1t5 12345fg
</pre>
<p>This nows means my code can be rewritten in just a fraction of what it was before:</p>
<pre name="code" class="python">
from random import shuffle
from string import maketrans

alphabet="abcdefghijklmnopqrstuvwxyz" + \
	 "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"+ \
         ":.;,?!@#$%&#038;()+=-*/_<> []{}`~^"

def translator(text,alphabet,key):
	trantab = maketrans(alphabet,key)
	return text.translate(trantab)

def caesar_encode(plaintext,s,alphabet):
	return translator(plaintext,alphabet,alphabet[s:]+alphabet[:s])

def caesar_decode(ciphertext,s,alphabet):
	return translator(ciphertext,alphabet,alphabet[-s:]+alphabet[:-s])

def substitution_encode(plaintext,alphabet):
	randarray=range(0,len(alphabet))
	shuffle(randarray)
	key=""
	for i in range(0,len(alphabet)):
		key+=alphabet[randarray[i]]

	return translator(plaintext,alphabet,key),key

def substitution_decode(ciphertext,key,alphabet):
	return translator(ciphertext,key,alphabet)


# Example useage
plaintext="The wheels on the bus go round and round. round" + \
" and round. round and round. The wheels on the bus go round and"+ \
" round, all through the town!"


print 
print "SUBSTITUTION"
ciphertext,key=substitution_encode(plaintext,alphabet)
print "Key: ", key
print "Plaintext:", plaintext
print "Cipertext:", ciphertext
print "Decoded  :", substitution_decode(ciphertext,key,alphabet)

print 
print "CAESAR SHIFT"
ciphertext=caesar_encode(plaintext,5,alphabet)
print "Key: ", 5
print "Plaintext:", plaintext
print "Cipertext:", ciphertext
print "Decoded  :", caesar_decode(ciphertext,5,alphabet)

</pre>
<p>This will output the following</p>
<blockquote><p>
SUBSTITUTION<br />
Key:  &#038;fywQ.%!lmx_sRGu:{<(5jqAXvMFgk]SIY[4iK+3P8pcV$2da@DT/ZnOJ*E>-r},BH16zUb#L?N`e7C ~9t)oW^=;h0<br />
Plaintext: The wheels on the bus go round and round. round and round.round and round. The wheels on the bus go round and round, all through the town!<br />
Cipertext: O!Q)q!QQ_<)GR)(!Q)f5<)%G){G5Rw)&#038;Rw){G5Rw,){G5Rw)&#038;Rw){G5Rw,{G5Rw)&#038;Rw){G5Rw,)O!Q)q!QQ_<)GR)(!Q)f5<)%G){G5Rw)&#038;Rw){G5RwH)&#038;__)(!{G5%!)(!Q)(GqR6<br />
Decoded  : The wheels on the bus go round and round. round and round.round and round. The wheels on the bus go round and round, all through the town!</p>
<p>CAESAR SHIFT<br />
Key:  5<br />
Plaintext: The wheels on the bus go round and round. round and round.round and round. The wheels on the bus go round and round, all through the town!<br />
Cipertext: Ymj`2mjjqx`ts`ymj`gzx`lt`wtzsi`fsi`wtzsi@`wtzsi`fsi`wtzsi@wtzsi`fsi`wtzsi@`Ymj`2mjjqx`ts`ymj`gzx`lt`wtzsi`fsi`wtzsi$`fqq`ymwtzlm`ymj`yt2s&<br />
Decoded  : The wheels on the bus go round and round. round and round.round and round. The wheels on the bus go round and round, all through the town!
</p>
</blockquote>
<p><strong>Conclusion</strong><br />
maketrans is awesome <img src='http://www.stealthcopter.com/blog/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /> </p>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2009/12/python-cryptograph-using-maketrans-for-substitution-and-caesar-ciphers/#comments" title="Comment on Python: Cryptograph using maketrans for substitution and Caesar ciphers">4 Comments</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-291" class="post-291 post type-post status-publish format-standard hentry category-cryptography category-python tag-cryptography tag-python">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2009/12/python-cryptography-substitution-cipher-improving-on-the-caesar-cipher/" rel="bookmark" title="Permanent Link to Python: Cryptography Substitution Cipher improving on the Caesar cipher">Python: Cryptography Substitution Cipher improving on the Caesar cipher</a></h2>
			<div class="date">Dec 22 <span>09</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>This post builds upon the Caesar shift presented <a href="http://www.stealthcopter.com/blog/2009/12/python-cryptography-caesar-shift-encryption-shift-cipher/">previously</a>; converting it to a full substitution cipher. The substitution cipher will practically remove bruteforce style methods of defeating the encryption and provide a basis for more complicated ciphers.</p>
<p><strong>Subsitution Cipher</strong><br />
Because a Caesar shift only rotates the alphabet there are only 25 possible unique solutions, this leaves the cipher quite vulnerable to brute force. If rather than just rotating the alphabet and keeping it &#8216;linear&#8217; we can shuffle it to create a substitution cipher. This improves the number of possible solutions to a shocking<br />
(26! &#8211; 1) = 4.03291461126605635584e26 (unfortunatly, the substitution cipher is alot weaker than it seems as it is vunerable to several different cryptanalysis attacks).</p>
<p><div id="attachment_292" class="wp-caption aligncenter" style="width: 330px"><a href="http://www.stealthcopter.com/blog/wp-content/uploads/2009/12/320px-Substitution.png"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2009/12/320px-Substitution.png" alt="Substitution Cipher Diagram" title="320px-Substitution" width="320" height="135" class="size-full wp-image-292" /></a><p class="wp-caption-text">Substitution Cipher Diagram</p></div></p>
<p>We start with the simple Caesar shift function with the following changes:</p>
<ul>
<li>A new array is introduced filled with the numbers 0 &#8211; the length of the alphabet. This array is shuffled using shuffle from the random module. The alphabet substitution dictionary is created using this array to decide which letters go where (this is probably clearer in the code than in my explanation).</li>
<li>With the Caesar shift we only needed to know the number of rotations in order to decrypt the text, now we need a full list of the letter substitutions. This is stored as the key and will be needed in order to decode our substitution cipher. </li>
<li>We also now store the alphabet outside of the function so that it can be used in a decode function. This function was added along with some example usage to make the full process more understandable</li>
</ul>
<pre name="code" class="python">
from random import shuffle

alphabet="abcdefghijklmnopqrstuvwxyz"

def substitution(alphabet,plaintext):

	# Create array to use to randomise alphabet position
	randarray=range(0,len(alphabet))
	shuffle(randarray)

	key=""

	#Create our substitution dictionary
	dic={}
	for i in range(0,len(alphabet)):
		key+=alphabet[randarray[i]]
		dic[alphabet[i]]=alphabet[randarray[i]]

	#Convert each letter of plaintext to the corrsponding
	#encrypted letter in our dictionary creating the cryptext
	ciphertext=""
	for l in plaintext:
		if l in dic:
			l=dic[l]
		ciphertext+=l
	for i in alphabet:
		print i,
	print
	for i in key:
		print i,
	print
	return ciphertext,key


# This function decodes the ciphertext using the key and creating
# the reverse of the dictionary created in substitution to retrieve
# the plaintext again
def decode(alphabet,ciphertext,key):
	
	dic={}
	for i in range(0,len(key)):
		dic[key[i]]=alphabet[i]

	plaintext=""
	for l in ciphertext:
		if l in dic:
			l=dic[l]
		plaintext+=l

	return plaintext

# Example useage
plaintext="the cat sat on the mat"
ciphertext,key=substitution(plaintext)
print "Key: ", key
print "Plaintext:", plaintext
print "Cipertext:", ciphertext
print "Decoded  :", decode(ciphertext,key)
</pre>
<p>Running this will output the following (This will be different on each run due to the use of random to generate the key).</p>
<blockquote><p>
Key:  miylbsowutgdkfvjepqhazrncx<br />
Plaintext: the cat sat on the mat<br />
Cipertext: hwb ymh qmh vf hwb kmh<br />
Decoded  : the cat sat on the mat
</p>
</blockquote>
<p><strong>Improvement by using additional characters</strong><br />
Adding additional characters into the substitution will it more difficult to solve. For example if we change our alphabet from:</p>
<blockquote><p>
alphabet=&#8221;abcdefghijklmnopqrstuvwxyz&#8221;
</p>
</blockquote>
<p>If we include capital letters, numbers from 0 -9 and special characters:</p>
<blockquote><p>
alphabet=&#8221;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#8243;+ \<br />
               &#8220;:.;,?!@#$%&#038;()+=-*/_<> []{}`~^&#8221;+ \<br />
               &#8220;abcdefghijklmnopqrstuvwxyz&#8221;
</p>
</blockquote>
<p>We increase the number of possible solutions from (26!-1) to (63!-1) which is 1.98260831540444006412e87. This also has the added benefit of making the encrypted text alot cooler and harder to guess at by eye (unfortunately still very easy to see what character represents space).</p>
<blockquote><p>
Key:  MXjAarLzWqFePI7E botO5f1kym29RZd3Sh8JTiQGKVDp6YBCsU4nucNgwlx0vH<br />
Plaintext: this plaintext will be much more of a challenge to decode compared to the Caesar shift cipher<br />
Cipertext: tzWoHEeMWIta1tHfWeeHXaHPOjzHP7baH7rHMHjzMeeaILaHt7HAaj7AaHj7PEMbaAHt7HtzaHjMaoMbHozWrtHjWEzab<br />
Decoded  : this plaintext will be much more of a challenge to decode compared to the caesar shift cipher
</p>
</blockquote>
<p><strong>Future</strong><br />
The substitution cipher is a lot more secure than Caesar shift cipher but unfortunately is very insecure towards frequency analysis. In future posts I will address using frequency analysis and methods to prevent this type of attack as well as improving on this cipher by creating multiple-dicitionary based ciphers to create Vigenère style ciphers.</p>
<p>I imagine most people reading this will enjoy the simple challenge of solving some encrypted text. I have used this code to make some ciphertext, try and decode it! (extra points for knowing where it is from):</p>
<blockquote><p>
^&#8217;VtuBbtv3vut1u-w.G^&#8217;Vt&#038;vnu-tZBtZnuIvwvtwn<br />
-qbtuB6GN3vutbqBS-qt.BSt&#038;wB~vtV.tqv1wbG}u5t<br />
~nDDv5tVvG}u5tbBwvtVvtbBt@nvIvZG}u5tbqwv6tv<br />
3vw.t@nvIvtnubBt1tUnwvG}Ztbqv.t&#038;Swuv5tnbtqS<br />
wbt&#038;vI1SZvt^t61ZtZBtq1@@.tUBwt.BSm)B6tbqvZv<br />
t@BnubZtBUt51b1tV1~vt1t&#038;v1SbnUSDtDnuvG}u5t6<br />
v&#8217;wvtBSbtBUt&#038;vb1GQv&#8217;wvtwvDv1Znu-tButbnVvG
</p>
</blockquote>
<p>(note: newlines were placed to make it fit and do not represent a character)</p>
<p>Update: Made code a little cleaner by moving dictionary outside of functions.</p>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2009/12/python-cryptography-substitution-cipher-improving-on-the-caesar-cipher/#comments" title="Comment on Python: Cryptography Substitution Cipher improving on the Caesar cipher">2 Comments</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
		<div id="post-271" class="post-271 post type-post status-publish format-standard hentry category-cryptography category-python tag-computational tag-cryptography tag-python">
		<div class="post-header">
			
			<h2><a href="http://www.stealthcopter.com/blog/2009/12/python-cryptography-caesar-shift-encryption-shift-cipher/" rel="bookmark" title="Permanent Link to Python: Cryptography Caesar shift encryption (shift cipher)">Python: Cryptography Caesar shift encryption (shift cipher)</a></h2>
			<div class="date">Dec 21 <span>09</span></div>	
			<div class="author clear">by mat</div>
			
		</div><!--end post header-->
		<div class="entry clear">
			<div class="clear"></div>
						<p>I have always had a keen interest in cryptography and rather than give a brief history of cryptography I will recommend reading <strong>Simon Singh&#8217;s</strong> <a href="http://www.simonsingh.net/The_Code_Book.html">The code book</a> or for a modern and hands on approach <a href="http://www.schneier.com/book-applied.html">Applied Cryptography</a> by <strong>Bruce Schneier</strong> (Who also made a brilliant book on security, more of descriptive approach but very interesting <a href="http://www.schneier.com/book-sandl.html">Secrets and Lies: Digital Security in a Networked World</a>).</p>
<p>This post aims to detail the creation (in python) of one of the simplest forms of encryption; the simple Caesar shift (or shift cipher). The Caesar shift takes the normal alphabet and maps it to a an identical alphabet with a rotation. The cipher will be written in such a way that it can be easily expanded on to create more complex encryption schemes with little modification.</p>
<p><div id="attachment_277" class="wp-caption aligncenter" style="width: 330px"><a href="http://en.wikipedia.org/wiki/Caesar_shift"><img src="http://www.stealthcopter.com/blog/wp-content/uploads/2009/12/320px-Caesar3.png" alt="Caesar shift alphabet" title="320px-Caesar3" width="320" height="135" class="size-full wp-image-277" /></a><p class="wp-caption-text">Caesar shift alphabet diagram</p></div></p>
<p>The above image shows a diagrammatic representation of a Caesar shift of 3 (alphabet transposed onto a rotation of itself with a displacement of 3). Below shows the entire alphabet in plaintext and in ciphertext, followed by a simple sentence in plaintext and in cipher text.</p>
<table>
<tr>
<td>
Plaintext:</td>
<td>abcdefghijklmnopqrstuvwxyz</td>
</tr>
<tr>
<td>
Ciphertext:</td>
<td>defghijklmnopqrstuvwxyzabc</td>
</tr>
</table>
<table>
<tr>
<td>
Plaintext:</td>
<td>the cat sat on the mat</td>
</tr>
<tr>
<td>
Ciphertext:</td>
<td>wkh fdw vdw rq wkh pdw</td>
</tr>
</table>
<p>Below is the code to convert plaintext into ciphertext along with an example of the usage:</p>
<pre name="code" class="python">
def caesar(plaintext,shift):

	alphabet=["a","b","c","d","e","f","g","h","i","j","k","l",
	"m","n","o","p","q","r","s","t","u","v","w","x","y","z"]

	#Create our substitution dictionary
	dic={}
	for i in range(0,len(alphabet)):
		dic[alphabet[i]]=alphabet[(i+shift)%len(alphabet)]

	#Convert each letter of plaintext to the corrsponding
	#encrypted letter in our dictionary creating the cryptext
	ciphertext=""
	for l in plaintext.lower():
		if l in dic:
			l=dic[l]
		ciphertext+=l

	return ciphertext

#Example useage
plaintext="the cat sat on the mat"
print "Plaintext:", plaintext
print "Cipertext:",caesar(plaintext,3)
#This will result in:
#Plaintext: the cat sat on the mat
#Cipertext: wkh fdw vdw rq wkh pdw
</pre>
<p><strong>Explanation</strong><br />
Here we have written a function that is given the plaintext and an arbitary rotation (including negative) and returns a ciphertext. The function creates a dictionary, mapping each letter to another letter that is &#8216;shift&#8217; letters away from it in the alphabet (the modulus (<strong>%</strong>) is used so to wrap the alphabet back to the start if it falls off the end). It then converts each letter of the plain text into the corresponding encrypted letter using the dictionary.</p>
<p><strong>Future</strong><br />
In the next post I will discuss methods to improve the Caesar shift and how to turn it into a full substitution cipher (where the alphabet is shuffled rather than rotated). The Caesar shift is very susceptible to brute forcing and frequency analysis which I shall explain and create a program to defeat these encryptions in a future post.</p>
					</div><!--end entry-->
		<div class="post-footer">
			<div class="comments"><a href="http://www.stealthcopter.com/blog/2009/12/python-cryptography-caesar-shift-encryption-shift-cipher/#comments" title="Comment on Python: Cryptography Caesar shift encryption (shift cipher)">10 Comments</a></div>
		</div><!--end post footer-->
	</div><!--end post-->
			<div class="navigation">
			<div class="alignleft"></div>
			<div class="alignright"></div>
		</div><!--end navigation-->
	</div><!--end content-->
<div id="sidebar">


<!--	<a href="http://uk.droidcon.com">
	<img border="0" alt="Droidcon London Oct 6-7" src="http://uk.droidcon.com/sites/default/files/
640x150%20clear%20droids%20transp.gif" style="width:220px;"/></a>-->


	<!-- sidebar east START -->
	<ul id="eastsidebar" class="sidebar">
	<li id="categories-432908104" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>		<ul>
	<li class="cat-item cat-item-27"><a href="http://www.stealthcopter.com/blog/category/android/" title="View all posts filed under Android">Android</a> (60)
</li>
	<li class="cat-item cat-item-23"><a href="http://www.stealthcopter.com/blog/category/arduino/" title="View all posts filed under arduino">arduino</a> (2)
</li>
	<li class="cat-item cat-item-5"><a href="http://www.stealthcopter.com/blog/category/bash/" title="View all posts filed under bash">bash</a> (8)
</li>
	<li class="cat-item cat-item-28 current-cat"><a href="http://www.stealthcopter.com/blog/category/cryptography/" title="View all posts filed under cryptography">cryptography</a> (10)
</li>
	<li class="cat-item cat-item-36"><a href="http://www.stealthcopter.com/blog/category/electronics/" title="View all posts filed under Electronics">Electronics</a> (13)
</li>
	<li class="cat-item cat-item-3"><a href="http://www.stealthcopter.com/blog/category/linux/" title="View all posts filed under Linux">Linux</a> (12)
</li>
	<li class="cat-item cat-item-29"><a href="http://www.stealthcopter.com/blog/category/misc/" title="View all posts filed under misc">misc</a> (13)
</li>
	<li class="cat-item cat-item-8"><a href="http://www.stealthcopter.com/blog/category/python/" title="View all posts filed under python">python</a> (26)
</li>
	<li class="cat-item cat-item-16"><a href="http://www.stealthcopter.com/blog/category/web/" title="View all posts filed under web">web</a> (6)
</li>
		</ul>
</li>	</ul>
	<!-- sidebar east END -->

	<!-- sidebar west START -->
	<ul id="westsidebar" class="sidebar">
	<li id="archives-5" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>		<ul>
			<li><a href='http://www.stealthcopter.com/blog/2013/09/' title='September 2013'>September 2013</a>&nbsp;(1)</li>
	<li><a href='http://www.stealthcopter.com/blog/2013/07/' title='July 2013'>July 2013</a>&nbsp;(1)</li>
	<li><a href='http://www.stealthcopter.com/blog/2011/08/' title='August 2011'>August 2011</a>&nbsp;(1)</li>
	<li><a href='http://www.stealthcopter.com/blog/2011/07/' title='July 2011'>July 2011</a>&nbsp;(1)</li>
	<li><a href='http://www.stealthcopter.com/blog/2011/05/' title='May 2011'>May 2011</a>&nbsp;(2)</li>
	<li><a href='http://www.stealthcopter.com/blog/2011/04/' title='April 2011'>April 2011</a>&nbsp;(4)</li>
	<li><a href='http://www.stealthcopter.com/blog/2011/03/' title='March 2011'>March 2011</a>&nbsp;(2)</li>
	<li><a href='http://www.stealthcopter.com/blog/2011/02/' title='February 2011'>February 2011</a>&nbsp;(1)</li>
	<li><a href='http://www.stealthcopter.com/blog/2011/01/' title='January 2011'>January 2011</a>&nbsp;(5)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/11/' title='November 2010'>November 2010</a>&nbsp;(3)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/10/' title='October 2010'>October 2010</a>&nbsp;(1)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/09/' title='September 2010'>September 2010</a>&nbsp;(10)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/08/' title='August 2010'>August 2010</a>&nbsp;(5)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/07/' title='July 2010'>July 2010</a>&nbsp;(8)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/06/' title='June 2010'>June 2010</a>&nbsp;(9)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/05/' title='May 2010'>May 2010</a>&nbsp;(3)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/04/' title='April 2010'>April 2010</a>&nbsp;(7)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/03/' title='March 2010'>March 2010</a>&nbsp;(6)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/02/' title='February 2010'>February 2010</a>&nbsp;(8)</li>
	<li><a href='http://www.stealthcopter.com/blog/2010/01/' title='January 2010'>January 2010</a>&nbsp;(17)</li>
	<li><a href='http://www.stealthcopter.com/blog/2009/12/' title='December 2009'>December 2009</a>&nbsp;(6)</li>
	<li><a href='http://www.stealthcopter.com/blog/2009/11/' title='November 2009'>November 2009</a>&nbsp;(2)</li>
	<li><a href='http://www.stealthcopter.com/blog/2009/09/' title='September 2009'>September 2009</a>&nbsp;(11)</li>
	<li><a href='http://www.stealthcopter.com/blog/2009/05/' title='May 2009'>May 2009</a>&nbsp;(4)</li>
	<li><a href='http://www.stealthcopter.com/blog/2008/08/' title='August 2008'>August 2008</a>&nbsp;(1)</li>
		</ul>
</li>	</ul>
	<!-- sidebar west END -->
	<div class="clear"></div>







	<ul>	<li id="text-432906928" class="widget widget_text">			<div class="textwidget"><p>This blog is hosted with <a href="http://www.dreamhost.com/r.cgi?543037"><img src="http://images.dreamhost.com/rewards/80x15-e.png" alt="dreamhost.com"/></a>. Use the coupon code <a href="http://www.dreamhost.com/r.cgi?543037"><strong>STEALTHCOPTER50</strong></a> to save $50 when taking out a hosting plan.</p>
<br/>


<iframe allowtransparency="true" frameborder="0" hspace="0" vspace="0" marginheight="0" marginwidth="0" scrolling="no" width="234" height="60" src="https://localbitcoins.com/affiliate-embed/half-banner?ref=364"></iframe>
<br/>

<p style="text-align:center;"><a href="http://www.dreamhost.com/r.cgi?543037"><img src="http://www.stealthcopter.com/images/234x60-a.gif" alt="dreamhost.com"/></a></p>
<br/>

<p style="text-align:center;">
<script src="http://stackoverflow.com/users/flair/315998.js?theme=clean" type="text/javascript"></script></p>

<p style="text-align:center;">
<script type="text/javascript"><!--
google_ad_client = "pub-2877169089740283";
/* wideskyscraper001 */
google_ad_slot = "1238836277";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</p></div>
		</li>	        <li id="wp-cumulus" class="widget wp_cumulus_widget">							<h2 class="widgettitle">Tags</h2>						<!-- SWFObject embed by Geoff Stearns geoff@deconcept.com http://blog.deconcept.com/swfobject/ --><script type="text/javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/wp-cumulus/swfobject.js"></script><div id="wpcumuluswidgetcontent990865"><p><a href='http://www.stealthcopter.com/blog/tag/acid3/' class='tag-link-17' title='1 topic' style='font-size: 8pt;'>acid3</a>
<a href='http://www.stealthcopter.com/blog/tag/android/' class='tag-link-27' title='60 topics' style='font-size: 22pt;'>Android</a>
<a href='http://www.stealthcopter.com/blog/tag/arduino/' class='tag-link-23' title='2 topics' style='font-size: 9.6912751677852pt;'>arduino</a>
<a href='http://www.stealthcopter.com/blog/tag/art/' class='tag-link-12' title='14 topics' style='font-size: 16.268456375839pt;'>art?</a>
<a href='http://www.stealthcopter.com/blog/tag/bash/' class='tag-link-5' title='8 topics' style='font-size: 14.107382550336pt;'>bash</a>
<a href='http://www.stealthcopter.com/blog/tag/browser/' class='tag-link-18' title='2 topics' style='font-size: 9.6912751677852pt;'>browser</a>
<a href='http://www.stealthcopter.com/blog/tag/computational/' class='tag-link-21' title='9 topics' style='font-size: 14.577181208054pt;'>computational</a>
<a href='http://www.stealthcopter.com/blog/tag/cracking/' class='tag-link-53' title='2 topics' style='font-size: 9.6912751677852pt;'>cracking</a>
<a href='http://www.stealthcopter.com/blog/tag/cryptography/' class='tag-link-28' title='10 topics' style='font-size: 14.953020134228pt;'>cryptography</a>
<a href='http://www.stealthcopter.com/blog/tag/cuda/' class='tag-link-37' title='3 topics' style='font-size: 10.818791946309pt;'>CUDA</a>
<a href='http://www.stealthcopter.com/blog/tag/eclipse/' class='tag-link-30' title='12 topics' style='font-size: 15.610738255034pt;'>eclipse</a>
<a href='http://www.stealthcopter.com/blog/tag/electronics/' class='tag-link-36' title='13 topics' style='font-size: 15.986577181208pt;'>Electronics</a>
<a href='http://www.stealthcopter.com/blog/tag/games/' class='tag-link-24' title='2 topics' style='font-size: 9.6912751677852pt;'>games</a>
<a href='http://www.stealthcopter.com/blog/tag/hacking/' class='tag-link-52' title='3 topics' style='font-size: 10.818791946309pt;'>hacking</a>
<a href='http://www.stealthcopter.com/blog/tag/java/' class='tag-link-31' title='12 topics' style='font-size: 15.610738255034pt;'>java</a>
<a href='http://www.stealthcopter.com/blog/tag/kde/' class='tag-link-15' title='1 topic' style='font-size: 8pt;'>KDE</a>
<a href='http://www.stealthcopter.com/blog/tag/linux/' class='tag-link-3' title='12 topics' style='font-size: 15.610738255034pt;'>Linux</a>
<a href='http://www.stealthcopter.com/blog/tag/liveview/' class='tag-link-72' title='3 topics' style='font-size: 10.818791946309pt;'>liveview</a>
<a href='http://www.stealthcopter.com/blog/tag/live-wallpaper/' class='tag-link-47' title='12 topics' style='font-size: 15.610738255034pt;'>Live Wallpaper</a>
<a href='http://www.stealthcopter.com/blog/tag/maths/' class='tag-link-20' title='5 topics' style='font-size: 12.510067114094pt;'>maths</a>
<a href='http://www.stealthcopter.com/blog/tag/mediatomb/' class='tag-link-6' title='1 topic' style='font-size: 8pt;'>mediatomb</a>
<a href='http://www.stealthcopter.com/blog/tag/memorabilia/' class='tag-link-57' title='3 topics' style='font-size: 10.818791946309pt;'>memorabilia</a>
<a href='http://www.stealthcopter.com/blog/tag/memory/' class='tag-link-10' title='1 topic' style='font-size: 8pt;'>memory</a>
<a href='http://www.stealthcopter.com/blog/tag/microscope/' class='tag-link-43' title='9 topics' style='font-size: 14.577181208054pt;'>microscope</a>
<a href='http://www.stealthcopter.com/blog/tag/nexus-one/' class='tag-link-41' title='2 topics' style='font-size: 9.6912751677852pt;'>nexus one</a>
<a href='http://www.stealthcopter.com/blog/tag/phone/' class='tag-link-56' title='5 topics' style='font-size: 12.510067114094pt;'>phone</a>
<a href='http://www.stealthcopter.com/blog/tag/printer/' class='tag-link-46' title='2 topics' style='font-size: 9.6912751677852pt;'>printer</a>
<a href='http://www.stealthcopter.com/blog/tag/project-euler/' class='tag-link-13' title='6 topics' style='font-size: 13.167785234899pt;'>project euler</a>
<a href='http://www.stealthcopter.com/blog/tag/ps3/' class='tag-link-7' title='1 topic' style='font-size: 8pt;'>ps3</a>
<a href='http://www.stealthcopter.com/blog/tag/python/' class='tag-link-8' title='26 topics' style='font-size: 18.61744966443pt;'>python</a>
<a href='http://www.stealthcopter.com/blog/tag/robot/' class='tag-link-55' title='3 topics' style='font-size: 10.818791946309pt;'>robot</a>
<a href='http://www.stealthcopter.com/blog/tag/sdk/' class='tag-link-32' title='11 topics' style='font-size: 15.328859060403pt;'>sdk</a>
<a href='http://www.stealthcopter.com/blog/tag/sony-ericsson/' class='tag-link-73' title='2 topics' style='font-size: 9.6912751677852pt;'>sony ericsson</a>
<a href='http://www.stealthcopter.com/blog/tag/soundboard/' class='tag-link-50' title='3 topics' style='font-size: 10.818791946309pt;'>soundboard</a>
<a href='http://www.stealthcopter.com/blog/tag/stealthcopter/' class='tag-link-11' title='3 topics' style='font-size: 10.818791946309pt;'>stealthcopter</a>
<a href='http://www.stealthcopter.com/blog/tag/strings/' class='tag-link-22' title='4 topics' style='font-size: 11.758389261745pt;'>strings</a>
<a href='http://www.stealthcopter.com/blog/tag/superkaramba/' class='tag-link-9' title='1 topic' style='font-size: 8pt;'>superkaramba</a>
<a href='http://www.stealthcopter.com/blog/tag/tutorial/' class='tag-link-61' title='3 topics' style='font-size: 10.818791946309pt;'>tutorial</a>
<a href='http://www.stealthcopter.com/blog/tag/twitter/' class='tag-link-33' title='2 topics' style='font-size: 9.6912751677852pt;'>twitter</a>
<a href='http://www.stealthcopter.com/blog/tag/ubuntu/' class='tag-link-4' title='14 topics' style='font-size: 16.268456375839pt;'>ubuntu</a>
<a href='http://www.stealthcopter.com/blog/tag/webcam/' class='tag-link-42' title='3 topics' style='font-size: 10.818791946309pt;'>webcam</a>
<a href='http://www.stealthcopter.com/blog/tag/website/' class='tag-link-25' title='5 topics' style='font-size: 12.510067114094pt;'>website</a>
<a href='http://www.stealthcopter.com/blog/tag/widgets/' class='tag-link-19' title='1 topic' style='font-size: 8pt;'>widgets</a>
<a href='http://www.stealthcopter.com/blog/tag/wordcube/' class='tag-link-26' title='5 topics' style='font-size: 12.510067114094pt;'>WordCube</a>
<a href='http://www.stealthcopter.com/blog/tag/xml/' class='tag-link-39' title='2 topics' style='font-size: 9.6912751677852pt;'>xml</a></p><p>WP Cumulus Flash tag cloud by <a href="http://www.roytanck.com" rel="nofollow">Roy Tanck</a> requires <a href="http://www.macromedia.com/go/getflashplayer">Flash Player</a> 9 or better.</p></div><script type="text/javascript">var widget_so2226409 = new SWFObject("http://www.stealthcopter.com/blog/wp-content/plugins/wp-cumulus/tagcloud.swf?r=7523197", "tagcloudflash", "250", "250", "9", "#ffffff");widget_so2226409.addParam("wmode", "transparent");widget_so2226409.addParam("allowScriptAccess", "always");widget_so2226409.addVariable("tcolor", "0x333333");widget_so2226409.addVariable("tcolor2", "0x333333");widget_so2226409.addVariable("hicolor", "0x000000");widget_so2226409.addVariable("tspeed", "100");widget_so2226409.addVariable("distr", "true");widget_so2226409.addVariable("mode", "tags");widget_so2226409.addVariable("tagcloud", "%3Ctags%3E%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Facid3%2F%27+class%3D%27tag-link-17%27+title%3D%271+topic%27+style%3D%27font-size%3A+8pt%3B%27%3Eacid3%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fandroid%2F%27+class%3D%27tag-link-27%27+title%3D%2760+topics%27+style%3D%27font-size%3A+22pt%3B%27%3EAndroid%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Farduino%2F%27+class%3D%27tag-link-23%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Earduino%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fart%2F%27+class%3D%27tag-link-12%27+title%3D%2714+topics%27+style%3D%27font-size%3A+16.268456375839pt%3B%27%3Eart%3F%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fbash%2F%27+class%3D%27tag-link-5%27+title%3D%278+topics%27+style%3D%27font-size%3A+14.107382550336pt%3B%27%3Ebash%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fbrowser%2F%27+class%3D%27tag-link-18%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Ebrowser%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fcomputational%2F%27+class%3D%27tag-link-21%27+title%3D%279+topics%27+style%3D%27font-size%3A+14.577181208054pt%3B%27%3Ecomputational%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fcracking%2F%27+class%3D%27tag-link-53%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Ecracking%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fcryptography%2F%27+class%3D%27tag-link-28%27+title%3D%2710+topics%27+style%3D%27font-size%3A+14.953020134228pt%3B%27%3Ecryptography%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fcuda%2F%27+class%3D%27tag-link-37%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3ECUDA%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Feclipse%2F%27+class%3D%27tag-link-30%27+title%3D%2712+topics%27+style%3D%27font-size%3A+15.610738255034pt%3B%27%3Eeclipse%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Felectronics%2F%27+class%3D%27tag-link-36%27+title%3D%2713+topics%27+style%3D%27font-size%3A+15.986577181208pt%3B%27%3EElectronics%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fgames%2F%27+class%3D%27tag-link-24%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Egames%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fhacking%2F%27+class%3D%27tag-link-52%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3Ehacking%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fjava%2F%27+class%3D%27tag-link-31%27+title%3D%2712+topics%27+style%3D%27font-size%3A+15.610738255034pt%3B%27%3Ejava%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fkde%2F%27+class%3D%27tag-link-15%27+title%3D%271+topic%27+style%3D%27font-size%3A+8pt%3B%27%3EKDE%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Flinux%2F%27+class%3D%27tag-link-3%27+title%3D%2712+topics%27+style%3D%27font-size%3A+15.610738255034pt%3B%27%3ELinux%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fliveview%2F%27+class%3D%27tag-link-72%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3Eliveview%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Flive-wallpaper%2F%27+class%3D%27tag-link-47%27+title%3D%2712+topics%27+style%3D%27font-size%3A+15.610738255034pt%3B%27%3ELive+Wallpaper%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fmaths%2F%27+class%3D%27tag-link-20%27+title%3D%275+topics%27+style%3D%27font-size%3A+12.510067114094pt%3B%27%3Emaths%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fmediatomb%2F%27+class%3D%27tag-link-6%27+title%3D%271+topic%27+style%3D%27font-size%3A+8pt%3B%27%3Emediatomb%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fmemorabilia%2F%27+class%3D%27tag-link-57%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3Ememorabilia%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fmemory%2F%27+class%3D%27tag-link-10%27+title%3D%271+topic%27+style%3D%27font-size%3A+8pt%3B%27%3Ememory%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fmicroscope%2F%27+class%3D%27tag-link-43%27+title%3D%279+topics%27+style%3D%27font-size%3A+14.577181208054pt%3B%27%3Emicroscope%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fnexus-one%2F%27+class%3D%27tag-link-41%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Enexus+one%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fphone%2F%27+class%3D%27tag-link-56%27+title%3D%275+topics%27+style%3D%27font-size%3A+12.510067114094pt%3B%27%3Ephone%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fprinter%2F%27+class%3D%27tag-link-46%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Eprinter%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fproject-euler%2F%27+class%3D%27tag-link-13%27+title%3D%276+topics%27+style%3D%27font-size%3A+13.167785234899pt%3B%27%3Eproject+euler%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fps3%2F%27+class%3D%27tag-link-7%27+title%3D%271+topic%27+style%3D%27font-size%3A+8pt%3B%27%3Eps3%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fpython%2F%27+class%3D%27tag-link-8%27+title%3D%2726+topics%27+style%3D%27font-size%3A+18.61744966443pt%3B%27%3Epython%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Frobot%2F%27+class%3D%27tag-link-55%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3Erobot%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fsdk%2F%27+class%3D%27tag-link-32%27+title%3D%2711+topics%27+style%3D%27font-size%3A+15.328859060403pt%3B%27%3Esdk%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fsony-ericsson%2F%27+class%3D%27tag-link-73%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Esony+ericsson%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fsoundboard%2F%27+class%3D%27tag-link-50%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3Esoundboard%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fstealthcopter%2F%27+class%3D%27tag-link-11%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3Estealthcopter%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fstrings%2F%27+class%3D%27tag-link-22%27+title%3D%274+topics%27+style%3D%27font-size%3A+11.758389261745pt%3B%27%3Estrings%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fsuperkaramba%2F%27+class%3D%27tag-link-9%27+title%3D%271+topic%27+style%3D%27font-size%3A+8pt%3B%27%3Esuperkaramba%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Ftutorial%2F%27+class%3D%27tag-link-61%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3Etutorial%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Ftwitter%2F%27+class%3D%27tag-link-33%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Etwitter%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fubuntu%2F%27+class%3D%27tag-link-4%27+title%3D%2714+topics%27+style%3D%27font-size%3A+16.268456375839pt%3B%27%3Eubuntu%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fwebcam%2F%27+class%3D%27tag-link-42%27+title%3D%273+topics%27+style%3D%27font-size%3A+10.818791946309pt%3B%27%3Ewebcam%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fwebsite%2F%27+class%3D%27tag-link-25%27+title%3D%275+topics%27+style%3D%27font-size%3A+12.510067114094pt%3B%27%3Ewebsite%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fwidgets%2F%27+class%3D%27tag-link-19%27+title%3D%271+topic%27+style%3D%27font-size%3A+8pt%3B%27%3Ewidgets%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fwordcube%2F%27+class%3D%27tag-link-26%27+title%3D%275+topics%27+style%3D%27font-size%3A+12.510067114094pt%3B%27%3EWordCube%3C%2Fa%3E%0A%3Ca+href%3D%27http%3A%2F%2Fwww.stealthcopter.com%2Fblog%2Ftag%2Fxml%2F%27+class%3D%27tag-link-39%27+title%3D%272+topics%27+style%3D%27font-size%3A+9.6912751677852pt%3B%27%3Exml%3C%2Fa%3E%3C%2Ftags%3E");widget_so2226409.write("wpcumuluswidgetcontent990865");</script>	        </li>			</ul>






	





</div><!--end sidebar--></div><!--end wrapper-->
</div><!--end content-background-->
<div id="footer">
	<div class="wrapper clear">
		
		<div id="copyright">
			<p class="copyright-notice">
		
		
		<!-- Place this tag where you want the badge to render -->
<!-- <g:plus href="https://plus.google.com/115567671223019614015" rel="author" width="170" height="69" theme="dark"></g:plus> -->
		
<a rel="author" href="https://plus.google.com/115567671223019614015">
  <img src="https://ssl.gstatic.com/images/icons/gplus-32.png">
</a>	
			
			Copyright &copy; 2014 
			Stealthcopter.com Adapted from <a href="http://thethemefoundry.com/titan/">Titan Theme</a> by <a href="http://thethemefoundry.com">The Theme Foundry</a>.</p>
		</div><!--end copyright-->
	</div><!--end wrapper-->
</div><!--end footer-->
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shCore.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushPhp.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushJScript.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushJava.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushSql.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushXml.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushPython.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushCss.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushCpp.js"></script>

<!-- unused langs
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushDelphi.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushCSharp.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushVb.js"></script>
<script class="javascript" src="http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/shBrushRuby.js"></script>-->

<script class="javascript">
dp.SyntaxHighlighter.ClipboardSwf = 'http://www.stealthcopter.com/blog/wp-content/plugins/google-syntax-highlighter/Scripts/clipboard.swf';
dp.SyntaxHighlighter.HighlightAll('code');
</script>
<script type="text/javascript">if (typeof(addthis_share) == "undefined"){ addthis_share = {"url_transforms":{"shorten":{"twitter":"bitly"}},"shorteners":{"bitly":""}};}

var addthis_config = {"data_track_clickback":true,"data_track_addressbar":false,"data_track_textcopy":false,"ui_language":"en","ui_atversion":"300"};
var addthis_product = 'wpp-3.5.1';
</script><script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ef585b083f907660df36729666103c89"></script><script type='text/javascript' src='http://www.stealthcopter.com/blog/wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js?ver=3.40.0-2013.08.13'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"loaderUrl":"http:\/\/www.stealthcopter.com\/blog\/wp-content\/plugins\/contact-form-7\/images\/ajax-loader.gif","sending":"Sending ...","cached":"1"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.stealthcopter.com/blog/wp-content/plugins/contact-form-7/includes/js/scripts.js?ver=3.5.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var pollsL10n = {"ajax_url":"http:\/\/www.stealthcopter.com\/blog\/wp-admin\/admin-ajax.php","text_wait":"Your last request is still being processed. Please wait a while ...","text_valid":"Please choose a valid poll answer.","text_multiple":"Maximum number of choices allowed: ","show_loading":"1","show_fading":"1"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.stealthcopter.com/blog/wp-content/plugins/wp-polls/polls-js.js?ver=2.63'></script>
<!--wp_footer--></body>
</html>
