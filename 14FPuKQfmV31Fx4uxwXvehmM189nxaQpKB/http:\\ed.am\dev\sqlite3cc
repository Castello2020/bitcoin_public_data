http://ed.am/dev/sqlite3cc
HTTP/1.0 200 OK
Date: Wed, 23 Jul 2014 13:57:01 GMT
Server: Apache/2.2.22 (Debian)
X-Powered-By: PHP/5.4.4-14+deb7u12
Set-Cookie: bb2_screener_=1406123821+54.227.67.175; path=/
X-Pingback: http://ed.am/xmlrpc.php
Link: <http://ed.am/?p=245>; rel=shortlink
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 9470
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

	<title>::[ edam ]:: &raquo; sqlite3cc</title>
	<link rel="icon" type="image/png" href="/site-icon.png" />

	<style type="text/css" media="screen">
		@import url( http://ed.am/wp-content/themes/edam/style.css );
	</style>

	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://ed.am/feed" />
	<link rel="alternate" type="text/xml" title="RSS .92" href="http://ed.am/feed/rss" />
	<link rel="alternate" type="application/atom+xml" title="Atom 1.0" href="http://ed.am/feed/atom" />

	<link rel="pingback" href="http://ed.am/xmlrpc.php" />
		<link rel='archives' title='November 2012' href='http://ed.am/posts/2012/11' />
	<link rel='archives' title='September 2012' href='http://ed.am/posts/2012/09' />
	<link rel='archives' title='November 2011' href='http://ed.am/posts/2011/11' />
	<link rel='archives' title='October 2011' href='http://ed.am/posts/2011/10' />
	<link rel='archives' title='July 2011' href='http://ed.am/posts/2011/07' />
	<link rel='archives' title='May 2011' href='http://ed.am/posts/2011/05' />
	<link rel='archives' title='June 2010' href='http://ed.am/posts/2010/06' />
	<link rel='archives' title='August 2009' href='http://ed.am/posts/2009/08' />
	<link rel='archives' title='February 2009' href='http://ed.am/posts/2009/02' />
	<link rel='archives' title='December 2008' href='http://ed.am/posts/2008/12' />
	<link rel='archives' title='October 2008' href='http://ed.am/posts/2008/10' />
	<link rel='archives' title='June 2008' href='http://ed.am/posts/2008/06' />
	<link rel='archives' title='May 2008' href='http://ed.am/posts/2008/05' />
	<link rel='archives' title='August 2007' href='http://ed.am/posts/2007/08' />
			<link rel="alternate" type="application/rss+xml" title="::[ edam ]:: &raquo; sqlite3cc Comments Feed" href="http://ed.am/dev/sqlite3cc/feed" />
<style type="text/css">.codecolorer-container {
    margin: 12px 0px 12px 0px;
}
.codecolorer-container div {
    font-family: Monospace;
    line-height: 1.25em;
    margin: 0px;
    padding: 5px 10px;
}</style>
<link rel='stylesheet' id='openid-css'  href='http://ed.am/wp-content/plugins/openid/f/openid.css?ver=519' type='text/css' media='all' />
<link rel='stylesheet' id='codecolorer-css'  href='http://ed.am/wp-content/plugins/codecolorer/codecolorer.css?ver=0.9.9' type='text/css' media='screen' />
<link rel='stylesheet' id='slimbox2-css'  href='http://ed.am/wp-content/plugins/wp-slimbox2/css/slimbox2.css?ver=1.1' type='text/css' media='screen' />
<script type='text/javascript' src='http://ed.am/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ed.am/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ed.am/wp-content/plugins/emailobfusticator/emailobfusticator.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ed.am/wp-content/plugins/pagetoc/pagetoc.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ed.am/wp-content/plugins/ultimenu/ultimenu.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ed.am/wp-content/plugins/openid/f/openid.js?ver=519'></script>
<script type='text/javascript' src='http://ed.am/wp-content/plugins/wp-slimbox2/javascript/slimbox2.js?ver=2.04'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var slimbox2_options = {"autoload":"","overlayColor":"#000000","loop":"","overlayOpacity":"0.7","overlayFadeDuration":"200","resizeDuration":"200","resizeEasing":"swing","initialWidth":"250","initialHeight":"250","imageFadeDuration":"200","captionAnimationDuration":"200","caption":"el.title || el.firstChild.alt || el.firstChild.title || el.href || el.href","url":"1","selector":"div.entry-content, div.gallery, div.entry, div.post, div#page, body","counterText":"Image {x} of {y}","closeKeys":"27,88,67","previousKeys":"37,80","nextKeys":"39,78","prev":"http:\/\/ed.am\/wp-content\/plugins\/wp-slimbox2\/images\/default\/prevlabel.gif","next":"http:\/\/ed.am\/wp-content\/plugins\/wp-slimbox2\/images\/default\/nextlabel.gif","close":"http:\/\/ed.am\/wp-content\/plugins\/wp-slimbox2\/images\/default\/closelabel.gif","picasaweb":"","flickr":"","mobile":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ed.am/wp-content/plugins/wp-slimbox2/javascript/slimbox2_autoload.js?ver=1.0.4b'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ed.am/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ed.am/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='How to install an APK on your Android device' href='http://ed.am/dev/android/how-to-install-an-apk-on-your-android-device' />
<link rel='next' title='Makefiles' href='http://ed.am/dev/make' />
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://ed.am/dev/sqlite3cc' />
<link rel='shortlink' href='http://ed.am/?p=245' />

<!-- Bad Behavior 2.2.15 run time: 2.718 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1406123821 54.227.67.175';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<style type="text/css">.g2_column {width: 738px;}</style>
<script language="javascript" type="text/javascript" src="http://ed.am/wp-content/plugins/wpg2/js/dtree.js"></script>
<link rel="stylesheet" type="text/css" href="http://ed.am/gallery2/main.php?g2_view=imageframe.CSS&amp;g2_frames=None"/>
<link rel="stylesheet" type="text/css" media="screen" href="http://ed.am/wp-content/plugins/wpg2/css/wpg2.css"/>
<script type='text/javascript' src='http://ed.am/wp-includes/js/tw-sack.min.js?ver=1.6.1'></script>
	<script type="text/javascript" src="http://ed.am/wp-content/themes/edam/edam.js"></script>

	<link rel="openid.server" href="http://openid.ed.am/" />
	<link rel="openid2.provider" href="http://openid.ed.am/" />
	<link rel="openid2.local_id" href="http://ed.am/" />

</head>

<body>

<div id="edam-bg-top">
	<div id="edam-page-top">
		<div id="edam-page-link">
			<a href="http://ed.am/"></a>
		</div>
	</div>
	<div id="edam-page">
		<div id="edam-page-content">

<!-- end header -->



<div class="edam-page-heading edam-page-heading-bar">
	<h1 class="post-title"><a href="http://ed.am/dev/sqlite3cc" rel="bookmark">
		sqlite3cc	</a></h1>
</div>

<div class="post" id="post-245">

	<p><strong>The sqlite3cc library is a C++ wrapper around the excellent SQLite 3 library. The SQLite Library has a C-style interface, and sqlite3cc is intended to make the use of SQLite more comfortable in a C++ programming environment.</strong></p>

<p>The goals of sqlite3cc are:</p>

<ul>
<li>to be elegantly written, following principles of good C++ design and those laid out by <a href="http://www.boost.org/">the boost project</a></li>
<li>to be fast, adding an insignificant execution overhead</li>
<li>where feasible, to keep the API similar (if only in name) to the SQLite3 library</li>
</ul>

<h2>Getting sqlite3cc</h2>

<p class="copyleft">The sqlite3cc library is free/libre open-source software, available under the terms of the <a href="http://www.gnu.org/licenses/lgpl.html">GNU Lesser General Public License</a> version 3 or later.</p>

<h3>Download</h3>

<p>You can download the latest version here:</p>

<p><a class="download" href="sqlite3cc/sqlite3cc-0.1.1.tar.xz">Download sqlite3cc<small>version 0.1.1</small><small>234K</small></a></p>

<p><a href="sqlite3cc/NEWS">changes</a> | <a href="http://files.ed.am/dev/sqlite3cc/">old versions</a></p>

<h3>Installation</h3>

<p>To install, run the usual three commands:</p>

<div class="codecolorer-container bash default" style="overflow:auto;white-space:nowrap;"><div class="bash codecolorer">$ .<span class="sy0">/</span>configure<br />
$ <span class="kw2">make</span><br />
$ <span class="kw2">make</span> <span class="kw2">install</span></div></div>

<p>You may need to be root to run the final command.</p>

<h2>Documentation</h2>

<p>A complete reference (courtesy of doxygen) will be available shortly. In the meantime, the rest of this documentation is an informal (and incomplete) guide only.</p>

<p>Note that sqlite3cc makes pretty regular use of <a href="http://en.wikipedia.org/wiki/Riaa">RAII</a>.</p>

<h3>Connections</h3>

<p>The <code>sqlite::connection</code> class essentially wraps sqlite3&#8242;s <code>sqlite3</code> struct.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer"><span class="co1">// connecting to, and work on, a database</span><br />
sqlite<span class="sy4">::</span><span class="me2">connection</span> conn<span class="br0">&#40;</span> <span class="st0">&quot;example.db&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
conn.<span class="me1">busy_timeout</span><span class="br0">&#40;</span> <span class="nu0">1000</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
conn.<span class="me1">exec</span><span class="br0">&#40;</span> <span class="st0">&quot;PRAGMA user_version = 1&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span></div></div>

<h3>Commands and Queries</h3>

<p>The <code>sqlite::query</code> and <code>sqlite::command</code> classes represent SQL statements that, respectively, do and do not return results. They make use of RAII to clean-up their handles and, as such, neither of these classes is copyable (this may change in the next release).</p>

<p>Statements can be prepared and executed in a few different ways, but sqlite3&#8242;s API is also preserved.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer"><span class="co1">// the sqlite3 way</span><br />
sqlite<span class="sy4">::</span><span class="me2">command</span> c1<span class="br0">&#40;</span> conn,<br />
&nbsp; &nbsp; <span class="st0">&quot;CREATE TABLE pets ( name TEXT PRIMARY KEY, type TEXT, age INTEGER )&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
c1.<span class="me1">step</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span></div></div>

<p>In addition to simply wrapping sqlite3&#8242;s structs and providing methods, sqlite3cc also tries to provide a more c++ way of doing things.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer"><span class="co1">// another way</span><br />
sqlite<span class="sy4">::</span><span class="me2">command</span> c2 <span class="sy1">=</span> conn.<span class="me1">make_command</span><span class="br0">&#40;</span> <span class="st0">&quot;INSERT INTO pets VALUES( ?, :foo, :88 )&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
c2.<span class="me1">bind</span><span class="br0">&#40;</span> <span class="nu0">1</span>, <span class="st0">&quot;billy&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
c2.<span class="me1">bind</span><span class="br0">&#40;</span> <span class="st0">&quot;:foo&quot;</span>, <span class="st0">&quot;cat&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span> <br />
c2.<span class="me1">bind</span><span class="br0">&#40;</span> <span class="nu0">88</span>, <span class="nu0">12</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
c2.<span class="me1">exec</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br />
<br />
<span class="co1">// or, for brevity</span><br />
<span class="sy2">*</span>conn.<span class="me1">make_command</span><span class="br0">&#40;</span> <span class="st0">&quot;INSERT INTO pets VALUES( ?, ?, ? )&quot;</span> <span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;tessa&quot;</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;dog&quot;</span> <span class="sy1">&lt;&lt;</span> <span class="nu0">16</span> <span class="sy1">&lt;&lt;</span> sqlite<span class="sy4">::</span><span class="me2">exec</span><span class="sy4">;</span></div></div>

<p>There are some things that you can only do with commands, or only with queries.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer"><span class="co1">// only possible with commands</span><br />
<span class="kw3">assert</span><span class="br0">&#40;</span> c2.<span class="me1">changes</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">==</span> <span class="nu0">1</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
<br />
sqlite<span class="sy4">::</span><span class="me2">query</span> q1<span class="br0">&#40;</span> conn, <span class="st0">&quot;SELECT * FROM pets&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
<br />
<span class="co1">// only possible with queries</span><br />
<span class="kw3">assert</span><span class="br0">&#40;</span> q1.<span class="me1">column_count</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">==</span> <span class="nu0">3</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
<span class="kw3">assert</span><span class="br0">&#40;</span> q1.<span class="me1">column_name</span><span class="br0">&#40;</span> <span class="nu0">2</span> <span class="br0">&#41;</span> <span class="sy1">==</span> <span class="st0">&quot;age&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span></div></div>

<h3>Results</h3>

<p>For queries, results are returned in the form of <code>sqlite::row</code> objects. There are, again, a number of ways to retrieve these.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer">std<span class="sy4">::</span><span class="me2">string</span> name<span class="sy4">;</span><br />
std<span class="sy4">::</span><span class="me2">string</span> type<span class="sy4">;</span><br />
<span class="kw4">unsigned</span> <span class="kw4">int</span> age<span class="sy4">;</span><br />
<br />
<span class="co1">// the sqlite3 way</span><br />
sqlite<span class="sy4">::</span><span class="me2">row</span> r1 <span class="sy1">=</span> q1.<span class="me1">step</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br />
r1.<span class="me1">column</span><span class="br0">&#40;</span> <span class="nu0">0</span>, name <span class="br0">&#41;</span><span class="sy4">;</span><br />
r1.<span class="me1">column</span><span class="br0">&#40;</span> <span class="nu0">1</span>, type <span class="br0">&#41;</span><span class="sy4">;</span><br />
r1.<span class="me1">column</span><span class="br0">&#40;</span> <span class="nu0">2</span>, age <span class="br0">&#41;</span><span class="sy4">;</span><br />
<br />
<span class="co1">// another way</span><br />
sqlite<span class="sy4">::</span><span class="me2">row</span> r2 <span class="sy1">=</span> q1.<span class="me1">step</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br />
name <span class="sy1">=</span> r2.<span class="me1">column</span><span class="sy1">&lt;</span> std<span class="sy4">::</span><span class="me2">string</span> <span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="nu0">0</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
type <span class="sy1">=</span> r2.<span class="me1">column</span><span class="sy1">&lt;</span> std<span class="sy4">::</span><span class="me2">string</span> <span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="nu0">1</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
age <span class="sy1">=</span> r2.<span class="me1">column</span><span class="sy1">&lt;</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> <span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="nu0">2</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
<br />
<span class="co1">// or, for brevity</span><br />
q1.<span class="me1">step</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&gt;&gt;</span> name <span class="sy1">&gt;&gt;</span> type <span class="sy1">&gt;&gt;</span> age<span class="sy4">;</span><br />
q1.<span class="me1">step</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&gt;&gt;</span> name <span class="sy1">&gt;&gt;</span> sqlite<span class="sy4">::</span><span class="me2">null</span> <span class="sy1">&gt;&gt;</span> age <span class="sy1">&gt;&gt;</span> sqlite<span class="sy4">::</span><span class="me2">set_index</span><span class="br0">&#40;</span> <span class="nu0">1</span> <span class="br0">&#41;</span> <span class="sy1">&gt;&gt;</span> type<span class="sy4">;</span></div></div>

<p>In addition, <code>sqlite::query::iterator</code> can also be used to fetch results.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer"><span class="kw1">for</span><span class="br0">&#40;</span> sqlite<span class="sy4">::</span><span class="me2">query</span><span class="sy4">::</span><span class="me2">iterator</span> i <span class="sy1">=</span> q1.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> i <span class="sy3">!</span><span class="sy1">=</span> q1.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> i<span class="sy2">++</span> <span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="kw1">if</span><span class="br0">&#40;</span> i<span class="sy2">-</span><span class="sy1">&gt;</span>row_number<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">==</span> <span class="nu0">3</span> <span class="br0">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;name: &quot;</span> <span class="sy1">&lt;&lt;</span> i<span class="sy2">-</span><span class="sy1">&gt;</span>column<span class="sy1">&lt;</span> std<span class="sy4">::</span><span class="me2">string</span> <span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span></div></div>

<p>When there are no more results, the <code>row</code> object that is returned by <code>step()</code> evaluates to <code>false</code> when converted to a <code>bool</code>.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer"><span class="co1">// make sure we have no more results</span><br />
<span class="kw3">assert</span><span class="br0">&#40;</span> <span class="sy3">!</span>q1.<span class="me1">step</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span></div></div>

<h3>Transactions</h3>

<p>There are four types of transaction in sqlite3cc. They are:</p>

<ul>
<li><code>sqlite::deferred_transaction</code></li>
<li><code>sqlite::immediate_transaction</code></li>
<li><code>sqlite::exclusive_transaction</code></li>
<li><code>sqlite::recursive_transaction</code></li>
</ul>

<p>The first three are parallels to those defined by SQLite. The final type of transaction uses SQLite&#8217;s <code>SAVEPOINT</code> and <code>RELEASE</code> mechanism to allow for nesting transactions.</p>

<p>The use of transactions is facilitated by a scope guard/sentinel class. Note the use of curly-brackets to introduce a scope for the transaction.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer"><span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="co1">// deferred_transaction is used by default</span><br />
&nbsp; &nbsp; sqlite<span class="sy4">::</span><span class="me2">transaction_guard</span><span class="sy1">&lt;</span> <span class="sy1">&gt;</span> t<span class="br0">&#40;</span> conn <span class="br0">&#41;</span><span class="sy4">;</span><br />
&nbsp; &nbsp; conn.<span class="me1">exec</span><span class="br0">&#40;</span> <span class="st0">&quot;DELETE from pets&quot;</span> <span class="br0">&#41;</span><span class="sy4">;</span><br />
<br />
&nbsp; &nbsp; <span class="co1">// commit the transaction (or it will rollback)</span><br />
&nbsp; &nbsp; t.<span class="me1">commit</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br />
<span class="br0">&#125;</span></div></div>

<h3>Error Handling</h3>

<p>As a rule of thumb, where the sqlite3 API has been preserved, sqlite3 error codes are returned. Where the interface has been extended for use with c++, exceptions are thrown. But, as should be the case, exceptions are not thrown for expectable (unexceptional) errors.</p>

<p>The exception thrown is an instance of the <code>sqlite::sqlite_error</code> class.</p>

<div class="codecolorer-container cpp default" style="overflow:auto;white-space:nowrap;"><div class="cpp codecolorer"><span class="kw2">try</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; sqlite<span class="sy4">::</span><span class="me2">row</span> q1.<span class="me1">step</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="br0">&#125;</span><br />
<span class="kw2">catch</span><span class="br0">&#40;</span> sqlite<span class="sy4">::</span><span class="me2">sqlite_error</span> <span class="sy3">&amp;</span>e <span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; std<span class="sy4">::</span><span class="kw3">cerr</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;error: &quot;</span> <span class="sy1">&lt;&lt;</span> e.<span class="me1">what</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;, code &quot;</span> <span class="sy1">&lt;&lt;</span> e.<span class="me1">get_code</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br />
<span class="br0">&#125;</span></div></div>

<h3>SQLite API</h3>

<p>The sqlite3cc library is based on the SQLite C interface, so you will also need to be familiar with that. You can find documentation on the SQLite API <a href="http://www.sqlite.org/">on their website</a>.</p>

<h2>Development</h2>

<p>You can always <a href="http://ed.am/about/">drop me an email</a>. Feedback and suggestions are always welcome.</p>

<h3>Bugs</h3>

<p>Please report bugs at the project&#8217;s development site:</p>

<p class="dev"><a href="http://dev.ed.am/sqlite3cc">dev.ed.am/sqlite3cc</a></p>

<h3>Repository</h3>

<p>You can obtain the latest development code from the bazaar repository at:</p>

<p class="bzr"><a href="http://bzr.ed.am/sqlite3cc">http://bzr.ed.am/sqlite3cc</a></p>

<p>But you will need to run the following to set up the project&#8217;s <code>configure</code> script:</p>

<div class="codecolorer-container bash default" style="overflow:auto;white-space:nowrap;"><div class="bash codecolorer"><span class="co4">$ </span>autoreconf <span class="re5">-i</span></div></div>

	<div class="clear-both"></div>
	<p class="post-meta single-page">
		<span class="page-modified-date">last modified: 4:43 pm, 3rd January, 2014</span>
			&#8212; <a href="http://ed.am/dev/sqlite3cc#comments" class="comments-link"  title="Comment on sqlite3cc">3 comments</a>				</p>
</div>



<div class="comments-syndication">
<a href="/dev/sqlite3cc/feed" class="rss">comments feed</a>
</div>

<h2 id="comments">Comments</h2>


<ul class="commentlist">
<li id="li-comment-369">
<div class="comment even thread-even depth-1" id="comment-369">

<div class="comment-header">
<div class="comment-avatar"><img alt='' src='http://0.gravatar.com/avatar/c7da77ac26fc20ee4f02222cd86f23dc?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=R' class='avatar avatar-32 photo' height='32' width='32' /></div>
<div class="comment-author vcard"><cite class="fn">J. Landercy</cite></div>
<div class="comment-meta commentmetadata">30th November, 2013 at 3:16 pm</div>
<div class="comment-action reply" style="display: none"><a class='comment-reply-link' href='/dev/sqlite3cc?replytocom=369#respond' onclick='return addComment.moveForm("comment-369", "369", "respond", "245")'>reply</a></div>
<div class="comment-action" style="display: none"><a href="http://ed.am/dev/sqlite3cc/comment-page-1#comment-369">permalink</a></div>
</div>

<div class="comment-body">
<p>I found your interface very usefull.
I just compiled into a dynamic library, it works like a charm.</p>

<p>Notice that I linked it to a test program and I executed the present example.
In the current version that I downloaded (2013/11) connection class does not exhibit a command method. Therefore the following line will not compile:</p>

<p>sqlite::command c2 = conn.command( &#8220;INSERT INTO pets VALUES( ?, :foo, :88 )&#8221; );</p>

<p>It might be an relief form a previous version.</p>

<p>Anyway, thank you very much for sharing your work.
I really appreciated it.</p>
</div>

</div>
<ul class="children">
<li id="li-comment-370">
<div class="comment byuser comment-author-edam bypostauthor odd alt depth-2" id="comment-370">

<div class="comment-header">
<div class="comment-avatar"><img alt='' src='http://1.gravatar.com/avatar/1c0f0508cc89d4ea6938b257b797bae3?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=R' class='avatar avatar-32 photo' height='32' width='32' /></div>
<div class="comment-author vcard"><cite class="fn"><a href='http://ed.am/' rel='external nofollow' class='openid_link url'>edam</a></cite></div>
<div class="comment-meta commentmetadata">3rd January, 2014 at 1:12 pm</div>
<div class="comment-action reply" style="display: none"><a class='comment-reply-link' href='/dev/sqlite3cc?replytocom=370#respond' onclick='return addComment.moveForm("comment-370", "370", "respond", "245")'>reply</a></div>
<div class="comment-action" style="display: none"><a href="http://ed.am/dev/sqlite3cc/comment-page-1#comment-370">permalink</a></div>
</div>

<div class="comment-body">
<p>Thanks!  I&#8217;ve fixed that.  And I&#8217;m about to do a 0.1.1 release with a few minor improvements&#8230;</p>
</div>

</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
<li id="li-comment-374">
<div class="comment even thread-odd thread-alt depth-1" id="comment-374">

<div class="comment-header">
<div class="comment-avatar"><img alt='' src='http://1.gravatar.com/avatar/d13d564808bd2f98f923048d4613c698?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=R' class='avatar avatar-32 photo' height='32' width='32' /></div>
<div class="comment-author vcard"><cite class="fn"><a href='http://yetiblog1337.wordpress.com/' rel='external nofollow' class='openid_link url'>Nils</a></cite></div>
<div class="comment-meta commentmetadata">18th April, 2014 at 11:49 pm</div>
<div class="comment-action reply" style="display: none"><a class='comment-reply-link' href='/dev/sqlite3cc?replytocom=374#respond' onclick='return addComment.moveForm("comment-374", "374", "respond", "245")'>reply</a></div>
<div class="comment-action" style="display: none"><a href="http://ed.am/dev/sqlite3cc/comment-page-1#comment-374">permalink</a></div>
</div>

<div class="comment-body">
<p>This wrapper is well-designed and helps a lot to integrate SQLite fast. I&#8217;m using it in my current project and I&#8217;m happy to have it: <a href="https://github.com/monsdar/Brofiler" rel="nofollow">https://github.com/monsdar/Brofiler</a></p>
</div>

</div>
</li><!-- #comment-## -->
</ul>

<div class="navigation">
<div class="alignleft"></div>
<div class="alignright"></div>
</div>

<div id="respond">
<h2 id="postcomment">Leave a Reply</h2>




<form action="http://ed.am/wp-comments-post.php" method="post" id="commentform">


<input type="text" name="author" id="author" value="" size="30" tabindex="1" />
<label for="author"><small>Your name <span class="quiet">(required)</span></small></label><br />
<input type="text" name="email" id="email" value="" size="30" tabindex="2" />
<label for="email"><small>Email address <span class="quiet">(required, will not be published)</span></small></label><br />
<input type="text" name="url" id="url" value="" size="50" tabindex="3" />
<label for="url"><small>Your website <span class="quiet">(optional)</span></small></label><br />


<div id="comment-container">
<textarea name="comment" id="comment" rows="4" tabindex="4"></textarea>
</div>

<input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" />
<input type='hidden' name='comment_post_ID' value='245' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />

<div id="cancel-comment-reply"><a rel="nofollow" id="cancel-comment-reply-link" href="/dev/sqlite3cc#respond" style="display:none;">Cancel Reply</a></div>

		<span id="openid_comment">
			<label>
				<input type="checkbox" id="login_with_openid" name="login_with_openid" checked="checked" />
				Authenticate this comment using <span class="openid_link">OpenID</span>.			</label>
		</span>
		<script type="text/javascript">jQuery(function(){ add_openid_to_comment_form('http://ed.am/index.php', '7b9048330b') })</script>
<input type="hidden" id="captchafree" name="captchafree" value="" />
<script type="text/javascript">
//<![CDATA[
	function gethash(){
		document.getElementById('captchafree').form.onsubmit = null;
		if(document.getElementById('submit')) document.getElementById('submit').value='Please wait...';
		var mysack = new sack("http://ed.am/wp-content/plugins/wp-captcha-free/captcha-free.php");
		mysack.execute = 1;
		mysack.method = 'POST';
		mysack.onError = function() { alert('Unable to get Captcha-Free Hash!') };
		mysack.setVar('post_id', 245);
		mysack.runAJAX();
		return false;
	}
	function gothash(myhash){
		document.getElementById('captchafree').value = myhash;
		// Workaround for Wordpress' retarded choice of naming the submit button same as a JS function name >:-(
		document.getElementById('submit').click();
	}
	document.getElementById('captchafree').form.onsubmit = gethash;
//]]>
</script>
<noscript><p><strong>Please note:</strong> JavaScript is required to post comments.</p></noscript>
<p><input type="checkbox" name="comment_mail_notify" id="comment_mail_notify" value="comment_mail_notify" style="width: auto;" /><label for="comment_mail_notify">Notify me of follow-up comments via e-mail</label></p>
</form>



</div>






<!-- begin footer -->

		</div>

<!-- begin sidebar -->

		<div id="edam-page-meta">
			<ul><li>



<li class="prenav">
	<ul class="nav">
		<li class="page_item"><a href="http://ed.am">Home</a></li>
			</ul>
</li>

	<li id="ultimenu" class="widget widget_ultimenu">
				<ul class="nav">
<li class="page_item page-item-4"><a href="http://ed.am/about">About Me</a></li>
<li class="page_item page-item-1237"><a href="http://ed.am/photos">Photography</a></li>
<li class="page_item page-item-6 page_item_has_children current_page_ancestor current_page_parent"><a href="http://ed.am/dev">Software</a>
<ul class='children'>
	<li class="page_item page-item-54 page_item_has_children"><a href="http://ed.am/dev/android">Android</a>
	<ul class='children'>
		<li class="page_item page-item-973"><a href="http://ed.am/dev/android/export-contacts">Export Contacts</a></li>
		<li class="page_item page-item-60"><a href="http://ed.am/dev/android/import-contacts">Import Contacts</a></li>
		<li class="page_item page-item-201"><a href="http://ed.am/dev/android/how-to-install-an-apk-on-your-android-device">How to install an APK</a></li>
	</ul>
</li>
	<li class="page_item page-item-390 page_item_has_children"><a href="http://ed.am/dev/gtk">GTK-based</a>
	<ul class='children'>
		<li class="page_item page-item-393"><a href="http://ed.am/dev/gtk/eog-manage-raws">Manage Raws</a></li>
		<li class="page_item page-item-406"><a href="http://ed.am/dev/gtk/prep-images">Prep. Images</a></li>
	</ul>
</li>
	<li class="page_item page-item-608 page_item_has_children"><a href="http://ed.am/dev/make">Makefiles</a>
	<ul class='children'>
		<li class="page_item page-item-646"><a href="http://ed.am/dev/make/arduino-mk">Arduino</a></li>
		<li class="page_item page-item-97"><a href="http://ed.am/dev/make/edam-mk">General-purpose</a></li>
	</ul>
</li>
	<li class="page_item page-item-245 current_page_item"><a href="http://ed.am/dev/sqlite3cc">sqlite3cc</a></li>
</ul>
</li>
		</ul>
	</li>
	<li class="widget widget_pagetoc" style="display: none;">
		Page Content		<select id="pagetoc">
			<option value="">Select Section</option>
		</select>
	</li>
<li id="search" class="widget widget_search"><form role="search" method="get" id="searchform" action="http://www.waxworlds.org/edam/">
    <div><label for="s">Search</label><br />    <input type="text" value="" name="s" id="s" /><input type="submit" id="searchsubmit" value="GO" />
    </div>
    </form></li>
<li id="categories-340875741" class="widget widget_categories">Categories<select name='cat' id='cat' class='postform' >
	<option value='-1'>Select Category</option>
	<option class="level-0" value="4">computing&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="5">personal&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="6">rants&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="1">uncategorised&nbsp;&nbsp;(2)</option>
</select>

<script type='text/javascript'>
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "http://ed.am/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</li><li id="archives-2" class="widget widget_archive">Archives		<select name="archive-dropdown" onchange='document.location.href=this.options[this.selectedIndex].value;'>
			<option value="">Select Month</option>

				<option value='http://ed.am/posts/2012/11'> November 2012 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2012/09'> September 2012 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2011/11'> November 2011 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2011/10'> October 2011 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2011/07'> July 2011 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2011/05'> May 2011 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2010/06'> June 2010 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2009/08'> August 2009 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2009/02'> February 2009 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2008/12'> December 2008 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2008/10'> October 2008 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2008/06'> June 2008 &nbsp;(2)</option>
	<option value='http://ed.am/posts/2008/05'> May 2008 &nbsp;(1)</option>
	<option value='http://ed.am/posts/2007/08'> August 2007 &nbsp;(1)</option>
		</select>
</li><li id="linkcat-2" class="widget widget_links">Links
	<ul class='xoxo blogroll'>
<li><a href="http://danielzadik.wordpress.com/" rel="friend met" title="A friend&#8217;s genetics blog">Daniel Zadik Writing</a></li>
<li><a href="http://www.futuremowgli.co.uk/" rel="friend met" title="Music from Future Mowgli">Future Mowgli Project</a></li>
<li><a href="http://kiksgfr.net" rel="friend met" title="A mate&#8217;s music.">KIKS/GFR</a></li>
<li><a href="http://planet.gnu.org/" title="Developments in the brave GNU world.">Planet GNU</a></li>
<li><a href="http://planet.nottinghack.org.uk/" title="Nottingham Hackspace planet">Planet Nottinghack</a></li>

	</ul>
</li>



<li id="meta">Meta	<ul>
						<li class="login"><a href="http://ed.am/wp-login.php">log in</a></li>
		<li><a href="http://ed.am/feed" class="rss">site feed</a></li>
			</ul>
</li>


<li>Thanks!
    <ul>
		<li class="bitcoin"><a href="bitcoin:14FPuKQfmV31Fx4uxwXvehmM189nxaQpKB"><img src="http://ed.am/wp-content/themes/edam/img/bitcoin-button.png" alt="Send me bitcoins" title="Send me bitcoins" border="0" /></a></li>
		<li class="flattr"><a href="http://flattr.com/thing/1606029/ed-am" target="_blank"><img src="http://ed.am/wp-content/themes/edam/img/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></li>
	</ul>
</li>


			</ul>
		</div>

<!-- end sidebar -->

		<div class="clear-both"></div>
	</div>
</div>
<div id="edam-bg-bottom">
	<div id="edam-bg-bottom-inner">
		<div id="edam-page-footer">
			<p>
				powered by <a href="http://wordpress.org/">WordPress</a>
				and <a href="http://gallery.menalto.com/">Gallery2</a>
				&nbsp; | &nbsp;
				hosted at <a href="http://www.waxworlds.org/">waxworlds.org</a>
				&nbsp; | &nbsp;
				site design by <a rel="author" href="http://ed.am/">edam</a>
			</p>
		</div>
	</div>
</div>

<!--43 queries. 0.154 seconds. -->
<script type='text/javascript' src='http://ed.am/wp-includes/js/comment-reply.min.js?ver=3.9.1'></script>

</body>

</html>

