http://drupalreleasedate.com/
HTTP/1.0 200 OK
Date: Wed, 23 Jul 2014 22:23:58 GMT
Server: Apache/2.2.22 (Ubuntu)
X-Powered-By: PHP/5.3.10-1ubuntu3.12
Cache-Control: max-age=604800, public, s-maxage=604800
x-content-digest: ena426bbc98912c71967433e67f2431fef977ba4ad27b1fb97808f534fdaef1c44
Age: 313835
Vary: Accept-Encoding
Content-Encoding: gzip
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link href="//netdna.bootstrapcdn.com/bootstrap/2.3.2/css/bootstrap.min.css" rel="stylesheet"/>
    <link href="/assets/css/style.css" rel="stylesheet"/>

    <title>Drupal Release Date</title>

    <meta name="description" content="Progress and estimated release date for the next version of Drupal"/>
    <link rel="icon" type="image/png" href="/assets/images/favicon.png" />

    <script type="text/javascript" src="//code.jquery.com/jquery-2.0.2.min.js"></script>
        <script type="text/javascript">
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-41333625-1', {
            'siteSpeedSampleRate': 100
        });
        ga('send', 'pageview');
    </script>
    </head>
<body>
<div class="container">
    <div role="main">
            <div class="hero-unit">
        <h1>Drupal 8 Release</h1>
        <section class="estimate">
            Estimated to occur on
            <h2 class="value">?</h2>

            <div class="note"></div>
        </section>

        <section class="changes">
            <h4>Issue Changes</h4>
            <table>
                <thead>
                    <tr>
                        <th/>
                        <th>Critical</th>
                        <th>Major</th>
                        <th>Normal</th>
                    </tr>
                </thead>
                <tbody>
                    <tr data-current>
                        <th>Current</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='day'>
                        <th>Day</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='week'>
                        <th>Week</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='month'>
                        <th>Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='quarter'>
                        <th>3 Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='half'>
                        <th>6 Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='year'>
                        <th>Year</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                </tbody>
            </table>
        </section>
    </div>
    </div>

    <footer>
        <div role="navigation">
            <ul class="nav">
                <li><a href="/chart/samples">Samples Chart</a></li>
                <li><a href="/chart/estimates">Estimates Chart</a></li>
            </ul>
            <ul class="nav">
                <li><a href="/">Home</a></li>
                <li><a href="/about">About</a></li>
            </ul>
        </div>

        <div class="credits" role="contentinfo">
            <div>
                <a href="https://twitter.com/DrupalReleaseDt" data-type="twitter">@DrupalReleaseDt</a>
            </div>
            <div>
                Built by <a href="https://drupal.org/user/490940" data-type="drupal">gapple</a>
                <span role="presentation">|</span>
                On twitter <a href="https://twitter.com/gappleca" data-type="twitter">@gappleca</a>
            </div>
            <div>
                <a href="https://www.gittip.com/gapple/" data-type="gittip">Support on Gittip</a>
                <span role="presentation">|</span>
                <a href="bitcoin:1HcAZTVs5nqqY2LUBxiEFRdVUyZHmLEXqH" data-type="bitcoin" aria-label="Donate Bitcoin"><span aria-hidden="true">1HcAZTVs5nqqY2LUBxiEFRdVUyZHmLEXqH<span></a>
            </div>
            <div>
                <a href="https://github.com/gapple/drupalreleasedate" data-type="github">
                    <span class="hidden-desktop">Fork me on Github</span>
                    <img class="visible-desktop" style="position: absolute; top: 0; right: 0; border: 0;" src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png" alt="Fork me on GitHub"/>
                </a>
            </div>
        </div>
    </footer>
</div>

    
    <script type="text/javascript">
        var Timing = (function () {
            var timings = {};

            var timingObject = {
                /**
                 * Start a timer with the provided key.
                 *
                 * If a timer with the provided key already exists, it is overwritten.
                 *
                 * @param key
                 */
                start: function (key) {
                    timings[key] = {
                        start: new Date(),
                        elapsed: 0
                    };
                },
                /**
                 * End the timer with the provided key, if it exists and is still running.
                 *
                 * @param key
                 */
                stop: function (key) {
                    if (typeof timings[key] === 'undefined' || typeof timings[key].start === 'undefined') {
                        return;
                    }

                    timings[key].elapsed += (new Date()).getTime() - timings[key].start.getTime();
                    delete timings[key].start;
                },
                /**
                 * Continue a timer with the provided key.
                 *
                 * If the timer is still running, this has no effect.
                 *
                 * @param key
                 */
                continue: function (key) {
                    if (typeof timings[key] === 'undefined' || typeof timings[key].start !== 'undefined') {
                        return;
                    }
                    timings[key].start = new Date();
                },
                /**
                 * Get the elapsed time of the timer with the provided key.
                 *
                 * @param key
                 *
                 * @returns {number|undefined}
                 */
                get: function (key) {
                    var end;
                    if (typeof timings[key] === 'undefined') {
                        return;
                    }

                    // Timer is still running.
                    if (typeof timings[key].start !== 'undefined') {
                        return timings[key].elapsed + (new Date()).getTime() - timings[key].start.getTime();
                    }

                    return timings[key].elapsed;
                },
                /**
                 * Get the elapsed time of all stored timers.
                 *
                 * @returns {}
                 */
                getAll: function () {
                    var timingDiffs = {};
                    for (var key in timings) {
                        timingDiffs[key] = timingObject.get(key);
                    }
                    return timingDiffs;
                }
            };

            return timingObject;
        })();
    </script>

            <script type="text/javascript">
            $(function () {
                $('footer .credits').on('click', 'a', function (e) {
                    var href = $(this).attr('href');
                    e.preventDefault();

                    ga('send', 'event', 'credits', 'click', $(this).data('type'), {
                        hitCallback: function () {
                            document.location = href;
                        }
                    });
                });
            });
        </script>
    

    <script type="text/javascript">
        $(function () {
            function updateEstimate(estimate) {
                var estimate = estimate || {
                    value: 'N/A',
                    note: 'The latest estimate could not be retrieved'
                };
                $('.estimate .value').html(estimate.value);
                $('.estimate .note').html(estimate.note);
            }

            Timing.start('index.loadEstimate');
            $.getJSON('/data/estimates.json?limit=1')
                .done(function (response) {
                    Timing.stop('index.loadEstimate');

                    var estimate;
                    if (response.data && response.data[0]) {
                        if (response.data[0].estimate === null || response.data[0].estimate == '0000-00-00') {
                            estimate = {
                                value: 'N/A',
                                note: 'An estimate could not be calculated with the current data'
                            };
                        }
                        else {
                            var estimateDate = new Date(response.data[0].estimate);
                            var estimateString = '';

                            if (window.Intl && typeof window.Intl === "object") {
                                estimateString = estimateDate.toLocaleDateString(
                                    'en-US',
                                    {
                                        timeZone: 'UTC',
                                        month: 'long',
                                        day: 'numeric',
                                        year: 'numeric'
                                    }
                                );
                            }
                            else {
                                switch (estimateDate.getUTCMonth()) {
                                    case 0:
                                        estimateString = 'January';
                                        break;
                                    case 1:
                                        estimateString = 'February';
                                        break;
                                    case 2:
                                        estimateString = 'March';
                                        break;
                                    case 3:
                                        estimateString = 'April';
                                        break;
                                    case 4:
                                        estimateString = 'May';
                                        break;
                                    case 5:
                                        estimateString = 'June';
                                        break;
                                    case 6:
                                        estimateString = 'July';
                                        break;
                                    case 7:
                                        estimateString = 'August';
                                        break;
                                    case 8:
                                        estimateString = 'September';
                                        break;
                                    case 9:
                                        estimateString = 'October';
                                        break;
                                    case 10:
                                        estimateString = 'November';
                                        break;
                                    case 11:
                                        estimateString = 'December';
                                        break;
                                }
                                estimateString += ' ' + estimateDate.getUTCDate() + ', ' + estimateDate.getUTCFullYear();
                            }

                            estimate = {
                                value: estimateString,
                                note: ''
                            };
                        }
                    }
                    updateEstimate(estimate);

                    if (typeof GoogleAnalyticsObject !== 'undefined') {
                        window[GoogleAnalyticsObject]('send', 'timing', 'data', 'load', Timing.get('index.loadEstimate'), 'estimates');
                    }
                })
                .fail(function () {
                    updateEstimate();
                });

            var historicalSamplesMapping = {
                'critical': function (data) {
                    if (
                        typeof data.critical_tasks === 'undefined' ||
                        data.critical_tasks === null ||
                        typeof data.critical_bugs === 'undefined' ||
                        data.critical_bugs === null
                    ) {
                        return null;
                    }
                    return data.critical_tasks + data.critical_bugs;
                },
                'major': function (data) {
                    if (
                        typeof data.major_tasks === 'undefined' ||
                        data.major_tasks === null ||
                        typeof data.major_bugs === 'undefined' ||
                        data.major_bugs === null
                    ) {
                        return null;
                    }
                    return data.major_tasks + data.major_bugs;
                },
                'normal': function (data) {
                    if (
                        typeof data.normal_tasks === 'undefined' ||
                        data.normal_tasks === null ||
                        typeof data.normal_bugs === 'undefined' ||
                        data.normal_bugs === null
                    ) {
                        return null;
                    }
                    return data.normal_tasks + data.normal_bugs;
                },
            };
            Timing.start('index.loadHistoricalSamples');
            $.getJSON('/data/historical-samples.json').done(function (response) {
                Timing.stop('index.loadHistoricalSamples');

                $('.changes [data-current] td[data-key]').each(function () {
                    var key = $(this).data('key');
                    var value = historicalSamplesMapping[key](response.data.current)
                    if (value) {
                        $(this).html(value);
                    }
                });

                $('.changes [data-period]').each(function () {
                    var period = $(this).data('period');

                    if (typeof response.data[period] === 'undefined') {
                        return;
                    }

                    $(this).find('td[data-key]').each(function () {
                        var key = $(this).data('key');
                        var currentValue = historicalSamplesMapping[key](response.data.current);
                        var pastValue = historicalSamplesMapping[key](response.data[period]);

                        if (currentValue !== null && pastValue !== null) {
                            var delta = currentValue - pastValue;
                            var deltaPercent = (delta / pastValue * 100).toPrecision(2);

                            if (delta > 0) {
                                delta = '+' + delta;
                                deltaPercent = '+' + deltaPercent;
                                $(this).addClass('up');
                            }
                            else if (delta < 0) {
                                // Convert negative symbol to a 'minus' character so that it is read by screen readers in digit mode.
                                delta = '−' + delta.toString().slice(1);
                                $(this).addClass('down');
                            }

                            $(this)
                                .html(delta)
                                .attr('title', deltaPercent + '%');
                        }

                    });
                });

                if (typeof GoogleAnalyticsObject !== 'undefined') {
                    window[GoogleAnalyticsObject]('send', 'timing', 'data', 'load', Timing.get('index.loadHistoricalSamples'), 'historical-samples');
                }
            });
        });
    </script>
</body>
</html>

