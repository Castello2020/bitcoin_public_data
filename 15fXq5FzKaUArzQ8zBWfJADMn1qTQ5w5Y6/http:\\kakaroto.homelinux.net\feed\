http://kakaroto.homelinux.net/feed/
HTTP/1.1 200 OK
Server: nginx/1.4.7
Date: Sat, 26 Jul 2014 19:14:04 GMT
Content-Type: text/xml; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.11-2
Set-Cookie: wassup=NTMyMDYzMmRmYWU4ZTljOGYwOWExM2RlYTUyMDBmNDk6OjE0MDY0MDQ3NDQ6Ojo6NTQuMTk2LjE5Ni4xMDg6OmVjMi01NC0xOTYtMTk2LTEwOC5jb21wdXRlLTEuYW1hem9uYXdzLmNvbTo6; expires=Sat, 26-Jul-2014 20:04:04 GMT; Max-Age=3000; path=/
X-Pingback: http://kakaroto.homelinux.net/xmlrpc.php
Last-Modified: Sat, 05 Apr 2014 11:16:35 GMT
ETag: "89c0efc6b08a559703631988c768835f"

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>KaKaRoTo&#039;s Blog</title>
	<atom:link href="http://kakaroto.homelinux.net/feed/" rel="self" type="application/rss+xml" />
	<link>http://kakaroto.homelinux.net</link>
	<description>Open your communications!</description>
	<lastBuildDate>Sat, 05 Apr 2014 11:16:35 +0000</lastBuildDate>
	<language>en-US</language>
		<sy:updatePeriod>hourly</sy:updatePeriod>
		<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.9.1</generator>
	<item>
		<title>Introduction to Cryptocurrencies</title>
		<link>http://kakaroto.homelinux.net/2014/03/introduction-to-cryptocurrencies/</link>
		<comments>http://kakaroto.homelinux.net/2014/03/introduction-to-cryptocurrencies/#comments</comments>
		<pubDate>Fri, 28 Mar 2014 02:08:04 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Educational]]></category>
		<category><![CDATA[bitcoin]]></category>
		<category><![CDATA[cryptocurrency]]></category>
		<category><![CDATA[dogecoin]]></category>
		<category><![CDATA[litecoin]]></category>
		<category><![CDATA[mining]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=560</guid>
		<description><![CDATA[Tips : BTC : 15fXq5FzKaUArzQ8zBWfJADMn1qTQ5w5Y6 DOGE : DK4uNKX99VTgEv8BZdeepsYJHKhev3oR1j Hello everyone! Today, I received an email from a friend saying that he knows that I&#8217;m into crypto currencies recently and he wanted to know if I could give him some pointers&#8230; in true KaKaRoTo fashion, I wrote him a long email to explain everything there is [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="https://cex.io/r/0/kakaroto/0/" title="CEX.IO - Trade Ghashes while they mine you Bitcoins!" target="_blank"><img src="http://cex.io/informer/kakarotoks/571f70ff8e1327d0d87864cc9719a752/" width="500" height="35" border="0"></a></p>
<p style="text-align: center;"><em>Tips :</em></p>
<p style="text-align: center;"><em>BTC : 15fXq5FzKaUArzQ8zBWfJADMn1qTQ5w5Y6</em><br />
<em> DOGE : DK4uNKX99VTgEv8BZdeepsYJHKhev3oR1j</em></p>
<p>Hello everyone!</p>
<p>Today, I received an email from a friend saying that he knows that I&#8217;m into crypto currencies recently and he wanted to know if I could give him some pointers&#8230; in true KaKaRoTo fashion, I wrote him a long email to explain everything there is to know about cryptocurrencies. I think there&#8217;s a lot of interesting stuff in there that others might find useful so I&#8217;ve decided to make it into a blog post.</p>
<p>Note that I didn&#8217;t edit the email, so read it as an &#8220;email to a friend&#8221;.</p>
<p>Concerning crypto currencies, it&#8217;s a whole world and really quite interesting. I&#8217;ll try and give you as much info as i can. Note though that everything I say below may not be 100% accurate, as I might say something wrong, either because I misunderstood it myself or maybe to keep things simplified.<br />
I don&#8217;t know how much you know about it, so at the risk of saying things you know, I&#8217;ll just assume you know nothing about cryptocurrencies.<br />
So cryptocurrencies started with bitcoin in 2010 i think, satoshi nakamoto (an anonymous name of person or a group) released a white paper explaining the concept and created the currency, wallet, website, etc.. Of course you can check bitcoin website for more info, but the concept is basically that btc have a value, which is defined by how much people want to pay for it, but as is, it&#8217;s just a number. The system works by constantly generating coins until a maximum is reached, the concept follows gold mining where as long as you mine, you get more of it but there is a limit on the resource in the world and the value of gold depends on how much people want to pay for it, but other than that, it has no real value (it&#8217;s just a metal, right?).<br />
I&#8217;ll explain about btc (bitcoin) then expand on the other cryptocurrencies (that we call altcoins).<br />
Btc has a blockchain which is a public ledger which is made up of &#8220;blocks&#8221;, each containing transactions, in order to create an account you just generate a private and public key, the public key is your &#8220;account number&#8221; and the private key is your wallet. To send BTC from one person to another, you create a transaction containing your origin and destination accounts and the amount then sign it with your key then post it on the network which will add it to the current block, other nodes in the network will then check that the transaction was signed with the origin account&#8217;s private key, and they will sign your transaction in turn in order to confirm that it&#8217;s been verified.<br />
At the same time, you have &#8220;miners&#8221; which are trying to generate the next block, more on that in a second. When a new block is generated, it gets added to the blockchain (ledger) and all new transactions get written into this new block. The previous one gets finalized. To ensure security of the network, new blocks are constantly being generated, for bitcoin it&#8217;s set to generate a new block every 10 minutes approximately. So, the block get generated by miners, to do that, they need to prove that they worked for it. The proof of work is based on a hashing algorithm, basically the take the current block header&#8217;s hash, they add random data to it then they make a hash of the data. I suppose you know what a hash is, so i won&#8217;t explain that. Basically the hash result must be below a specific threshold, if it is, you found the new block, if it&#8217;s not, you need to search again. So imagine a sha1 hash where the first 10 bytes are 0&#215;00000000000000000000 you must be extremely lucky to find such data that gives this kind of hash. Well that&#8217;s what the PoW (proof of work) is based on. You keep hashing millions of random data (which include the hash of the current block) until you find such a lucky hash that is below the threshold, thus proving that you did work hard to find the new block. You can see the blockchain here for the current block (at the moment) for example : <a href="https://blockchain.info/block-index/381396/0000000000000000d0f673f0241c7aca3f2453b165a2f70014362733e0daad81">https://blockchain.info/block-index/381396/0000000000000000d0f673f0241c7aca3f2453b165a2f70014362733e0daad81</a><br />
you see in the top-right where it says hash/previous block/next block, you see all the 0000 it starts with. That&#8217;s the block&#8217;s hash which is below a specific threshold. The reward for finding such a hash/block is that when you create the new block, you will add a new transaction to it, the first transaction of a block is always a transfer of 25 btc from &#8220;nowhere&#8221; into your address. That&#8217;s your block reward. You can see it in the blockchain link I just gave you, it has all the transactions, and the first one has &#8220;no inputs&#8221; and has 25.07 BTC (if it shows $ value, click on the green button below the value to show it in BTC). So there you go, that&#8217;s how you mine coins and generate new ones. Now the thing is, what is that threshold, and what happens if you can&#8217;t find the hash. Well, the threshold is called &#8220;difficulty&#8221; in the crypto world and it&#8217;s automatically adjusted after every block (or every 10 block or whatever the currency creator decided when he made it), and it&#8217;s based on the average time needed to generate the block. So let&#8217;s say you have 10 miners, each with 1GH/s comutation power, so the network has 10GH/s and for a difficulty of &#8220;5&#8243; (let&#8217;s assume it means first 5 bits are 0), it takes an average of 10 minutes to find the hash. Now 100 new miners join the network with 10GH/s each, that&#8217;s 1000GH/s more to the network and the total network hashrate is now 1010 GH/s.. it will be a LOT easier to find that hash, so now it only takes 30 seconds to find it. But BTC spec says one block every 10 minutes, so the difficulty will increase to let&#8217;s say 13 to account for all the new hashing power, and now the hashes are found every 10 minutes.. some miners leave the network, difficulty goes down, etc&#8230; Of course, it&#8217;s not exact, it&#8217;s based on luck, but it&#8217;s &#8220;how probable that the next hash will be found in 10 minutes considering the current hashing power of the network&#8221;, sometimes with the same hashrate and same difficulty, it takes seconds to find the next block, sometimes it can take hours.. and yes, if it takes hours, then it takes hours, there&#8217;s nothing you can do about it, you just wait until it finds the block, then you lower the difficulty for the next one. No one actually sets the difficulty, it&#8217;s decided upon by the entire network. Everyone runs the same code, so everyone follows the same rules and agrees with each other. If for example someone doesn&#8217;t, then his hash/transaction/whatever will not be confirmed by other miners and it&#8217;s rejected. If two people find the next block at the same time, then one will get orphaned and the other will get confirmed, not sure how that works, but there&#8217;s some race condition/concurrency protection in the way confirmations are done. The same applies for transactions and accounts, if you send money to someone but you didn&#8217;t have the correct private key, then it won&#8217;t get confirmed by anyone else and the transaction is useless. That&#8217;s why whenever you do a payment or transfer, any respectable site will tell you they wait for X confirmation before unlocking the funds for example, it&#8217;s usually 6 confirmations, which can take a few minutes, it depends on the network and the hashrate and number of miners, etc&#8230;<br />
So.. When you have an account, your private key is your wallet, and if you lose it, then you will have no way of signing any transaction for that account, meaning that the money is lost forever. that&#8217;s why it&#8217;s always very important to make a backup of your wallet.dat file somewhere safe, or to write it on a piece of paper, or something like that.. a lot of people have lost millions of dollars because their HDD failed and they didn&#8217;t have a backup of their wallet.dat. One even just threw it out because he thought it was useless, back when 1BTC was valued at 0.0001$.. and then when 1 BTC became 1300$, he regretted it..<br />
Since BTC has a public ledger (the blockchain) and transactions are confirmed by the peers, and no one owns the network, then obviously, you can see the balance of any account you want (see previous blockchain and click on any address to see its full history and balance), that&#8217;s why some people will create a few new accounts (just generate a private key locally) for every transaction and split their funds through multiple accounts, this way someone seeing a transaction won&#8217;t know which of the destination is the one being paid and which one is the new account of the account holder. It is sometimes suggested to use one new account every time you make a transaction.. but I don&#8217;t really do that myself.<br />
Now one last item, we talked about mining, but mostly about what we call &#8220;solo mining&#8221;, which is having your CPU or GPU calculating hashrates until it finds the right one and then you &#8216;win&#8217; the 25BTC reward. But if you did that for real, you would never win it considering how many people are on the network, so what people do is use &#8220;mining pools&#8221;, which is basically a service that will send you much smaller computations to do and you give the result to them, and everyone joins the pool. When the pool is the one that finds the block, it will then share the reward proportionally with every miner depending on how many &#8220;shares&#8221; they sent.. so for example, here&#8217;s one of my shares for BTC in one of the pools I&#8217;m in :<br />
Block          Value                     Status          Duration          Hash Rate         Your Shares                        Payout<br />
292742      BTC 25.1399      43/120       13 minutes      10.02 Ph/s       5456/5000002904       BTC 0.00002743<br />
So, you see the block id which yielded 25.1399 BTC, it has 43 confirmations (out of 120 required before the block is considered accepted/not-orphaned), it took 13 minutes to find it, the pool&#8217;s hash rate is 10.02 Ph/s (my rate is 11.02 GH/s), I sent 5456 shares out of a total of 5000002904 from the entire pool, and the payout is my portion of the 25.1399 BTC that was paid to me (yes, quite small for 11GH/s of hashing power, but consider the 10Ph/s of the pool&#8230; FYI, the network has 50PH/s).<br />
Without mining pools, you wouldn&#8217;t be able to get anything.. I mean, sure I could try to find the block, and maybe I could and if I do, I&#8217;d win 25 BTC which is a LOT of money, but considering how huge the network is, it might take me years to find the block, or maybe I&#8217;ll never do.. so you join a pool and you share your luck with others. There are a few reward types a pool can use, either payout proportional to how much you contributed to that block, or proportional to the number of shares you sent in the past X minutes when a block is found (so if you&#8217;ve been on the pool for hours then you leave just before it finds a block, you still get something). anyways, not important.. the important thing to know is that if the pool isn&#8217;t the one that finds the block (there are a LOT of pools) then you don&#8217;t get anything. You can see the various reward types here : <a href="https://litecoin.info/Mining_pool_comparison#Reward_types">https://litecoin.info/Mining_pool_comparison#Reward_types</a><br />
Oh and another thing, at specific blocks, the reward gets halved.. BTC started with 50 BTC reward, then at 100000th block, it became 25 BTC, it keeps getting halved until some point because, just like gold, the rarer it becomes, the harder it becomes to mine it. and the graph of number of coins in circulation should plateau towards the max, now jump right into it.</p>
<p>Anyways, now that the technical is out of the way, let&#8217;s talk about the theory of mining.<br />
Mining bitcoin is impossible, not at home anyways.. usually a latest gen GPU will give you a few hunderd MH/s hashing SHA256, but GPU mining is so 2011, now everyone is using ASICs (Application-specific integrated circuit) which do a few TH/s easily. So any coin that is SHA256 is basically impossible to mine at home.. you would probably get about 0.01$ USD after a year of mining.. which would be less than your electricity costs. That&#8217;s where Litecoin (LTC) came into action! LTC uses Scrypt algorithm instead of SHA256 so the ASICs don&#8217;t support it, so it&#8217;s pretty much GPU exclusive, yeay! There are TONS of altcoins though, each with their own rules (how much reward per block, how much time per block) and their own specs (current difficulty, current exchange rate) which will be more or less profitable for you. The reference for me is coinwarz (<a href="http://www.coinwarz.com/">http://www.coinwarz.com/</a>) which I check every day because one very profitable coin today might be crap tomorrow. You can put your hashrate there (and electricity cost and power consumption of your GPUs) and it will tell you how much you will gain per day if you mined the coin. The problem is that Scrypt ASICs have just been released last week, so we&#8217;ll have people using ASIC for scrypt based coins soon&#8230; but they&#8217;re not that good, I mean, a 200$ ASIC gives you about 350KH/s which is slightly higher than a 200$ GPU which would give 300KH/s, but the nice thing is that it uses 2W of power, instead of 200W or whatever your GPU consumes.<br />
There is also a new algo (kind of) called Adaptive-N Scrypt, which is just scrypt but with one of the constants made a variable (I think) which will make it hard to do an ASIC for it because memory requirements will increase everytime to prevent ASICs from catching up technology-wise. There&#8217;s also Keccak algo, but that&#8217;s only used by one coin, it&#8217;s called maxcoin and was released by Max Keiser, a financial journalist for RT (the tv channel). It was great, I made over 200$ with it pretty fast then value dropped so low that it was worth less than 20$.. thankfully, it went back up a little and I sold them and made 40$ back and lost 2 weeks of mining&#8230; if only I knew it would crash, I would have sold it when my balance was worth 200$.. but that&#8217;s part of playing the game! <img src="http://kakaroto.homelinux.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /><br />
This is another lesson, if you want to make it profitable, you mine something and you sell it right away into BTC (which is more stable).. I mined maxcoin because it was by far the most profitable, giving me about 20$ per day, but back then the value of one MAX was 0.01 BTC.. then it kept going down until it reached 0.0001 BTC. I managed to hold off selling until it started going back up then I sold it at 0.0004 just before it started dropping again, but if I had sold my mining revenue every day, I would have made a lot more money from it.<br />
On the other hand, some things, you want to keep, for example, there&#8217;s Auroracoin (<a href="http://auroracoin.org">http://auroracoin.org</a>) which is a coin that was created for the icelandic people who have huge financial issues and where 50% of all the coins are pre-mined and will be distributed to all the citizens of iceland, so I mined it and I thought that it would be awesome to have coins from this currency which might be widespread in an entire country.. but a couple of days ago they did the airdrop (where they allow icelandic citizens to claim their coins) and the value dropped..<br />
Actually the value fluctuates depending on supply/demand.. if a lot of people are selling, then the price drops because you compete on the price in order to sell yours first.. if people want to buy, then price goes up. I suppose what happened with auroracoin is that people got their coins and just sold them in exchange for BTC since there was no infrastructure supporting AUR. But maybe in the future, it will start being accepted by merchants in iceland and people will start buying it and price goes back up. at least that&#8217;s the plan. Note also that it was basically a &#8220;free money for everyone&#8221; which goes against the whole idea of proof of work to get reward.. what do you do when you get free money? Note that there&#8217;s also now a SpainCoin and a GreeceCoin following the same 50% pre-mined for citizens principle, and I&#8217;m mining those as well (got 4 AUR, 20 GRCE and 68 SPA (sold 15 of SPA already when it was very high price)..)<br />
There are also others than you want to hold onto because you know the price will go up, like for example, the very much liked and meme-based DOGECOIN! wouhouuu! ok, I do like dogecoin because it&#8217;s so popular. The dogecoin currency was created only as a joke by two guys, they never thought anyone would care, they made a logo using the shiba inu dog and used that meme as a base for the coin &#8220;wow, much coin, very transaction, etc..&#8221; and then they were wtf-ing when people actually started using it.. turns out it became extremely popular and value is sky rocketting. Only problem is that since it was a joke, all the coins will be mined in 10 months or so. but difference is that there is no limit on the amount of DOGE as opposed to other currencies, it will just become really small reward after the limit. The reward was random between 10 000 and 1 000 000 DOGE per block with a block time of 1 minute. Right now, I think they changed it to become a fixed amount because people were abusing the system by only mining doge when the next reward was the highest (since it&#8217;s a consensus, remember, it means the &#8216;random reward&#8217; is not random at all, it&#8217;s based on an equation using the previous block&#8217;s hash as seed), which caused increased difficult on specific blocks and honest miners were only getting the small rewards. Anyways, it&#8217;s been halved once already so right now, it&#8217;s 250 000 DOGE per minute, and the price is 0.00000102 BTC. oh and yes, most exchanges are BTC to altcoin or altcoin to BTC, sometimes to/from LTC as well, then it&#8217;s USD/CAD/WHATEVER$ to/from BTC or LTC. so yeah, you do the math from your altcoin to BTC then according to today&#8217;s value of BTC, you know your altcoin&#8217;s worth in $.<br />
So anyways, what&#8217;s special about DOGE is that it&#8217;s very popular, reddit mostly is making it the altcoin of choice, you always hear about it everywhere, like during the US regulations talks, they would talk about BTC and LTC (as the main coins) and they mentioned &#8220;or a coin based on a dog meme&#8221;. Doge is used a lot for tipping, charity, and all that, so you see a lot of causes evolving around doge, for example they raised 25000$ to get the jamaican bobsled team to go to the olympics, there&#8217;s doge4water (<a href="http://doge4water.org/">http://doge4water.org/</a>) and just recently (last week actually, and funding finished yesterday) there was doge4nascar where they raised 50 000$ to sponsor Josh Wise car in NASCAR racing. <a href="http://www.doge4nascar.com/">http://www.doge4nascar.com/</a> and since they raised it, it&#8217;s been on every news outlet ( Fox news, the guardian, etc.. <a href="https://www.google.ca/search?q=dogecoin+josh+wise&amp;safe=off&amp;tbm=nws ">https://www.google.ca/search?q=dogecoin+josh+wise&amp;safe=off&amp;tbm=nws </a>) which is giving it a lot of exposure and popularity.. and just imagine that car with dogecoin logo on national television during nascar.. this will cause people to get interested in dogecoin, and to BUY dogecoin, which will cause the price to go UP! Also, in 30 days, the reward will be halved to 125 000 DOGE, which means the value kind of has to double in order to keep miners interested in mining dogecoin for profitability.. think about it, reward gets halved, means miners get half as much.. so they will stop mining it, if value doesn&#8217;t double, then they won&#8217;t be get enough and other coins will be more profitable.. of course, other possibility is that miners leave and the network hashrate (and so the difficulty) drops so those who remain get twice as much as before == same profitability&#8230; anyways even though dogecoin value has been dropping a lot lately, it is bound to go back up. It had already gained 10 times its value by the time I started mining it, unfortunately, I only had very little mined at that time (now I have around 145 000 DOGE in my wallet). On the other hand.. as someone recently told me &#8220;we don&#8217;t really see many parodies of gangnam style anymore&#8221; so maybe this hype around dogecoin is a bubble about to burst.. you never know!<br />
That being said.. it&#8217;s a game, like stock market.. you &#8220;buy&#8221; (in this case by using your GPU&#8217;s time and electricity) coins and hope it goes up.. if you don&#8217;t hope that, then sell them right away.. then move away to the next coin, etc..<br />
one very interesting thing is at coin launches! What happens in a coin launch is that there&#8217;s pretty much no one around, so if you get in just at the right time, you can get a lot really quickly. like for example, my auroracoin, I mined it too late.. my friend told me about it and I ignored him.. difficulty was maybe 100 or 200 (don&#8217;t know what it represents exactly, but it&#8217;s not bits of 0s) and he made a few AUR in a day on his home PC GPU (a cheap gpu which gives 60KH/s) then people got &#8220;wow&#8221; over it and started mining it, the value of it jumped and difficulty became 6000 (which is HUGE for scrypt based coins) so I started mining it and only got like 2 AUR after 5 days of mining on my mining rig of 2.1 MH/s&#8230; and my friend got &#8220;rich&#8221; quickly.. he sold and bought himself a new GPU to mine some more&#8230; So the idea is to find coins that will have a lot of exposure and impact, that people will like and you mine them from the very beginning before everyone else joins. Sure, you&#8217;ll still be a drop in the ocean.. but a 2MH/s drop in 200MH/s is better than a 2MH/s drop in 60GH/s network hashrate <img src="http://kakaroto.homelinux.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  You can see the network hashrate on coinwarz by the way.<br />
So one interesting coin coming up is H2O <a href="https://bitcointalk.org/index.php?topic=494229.0">https://bitcointalk.org/index.php?topic=494229.0</a> it looked good a lot of people wanted to jump into it, the launch was meant for march 24th, but they had bugs and delayed it.. rumor is that it&#8217;s going to be this friday.. if you want to mine it and sell, then that might be my first choice. Second choice would be the spaincoin or greececoin because their difficulty is really low so you can make a lot of them really fast, and if they get adopted, their value can be worth a lot, but only in the future.. also it could crash and value becomes 0.. and of course, dogecoin! but it might be better to buy dogecoin, its price is very low right now, 102 (meaning 1 DOGE = 0.00000102 BTC) and I think it will go to 200 in less than a month.. and after nascar ( in two months) it could double again. You could also mine it, see how much you can make according to coinwarz. Be aware you need to find a good pool, if you use a small pool, there&#8217;s a chance it won&#8217;t find blocks and you won&#8217;t get anything.. a good pool finds blocks more easily, but the pool&#8217;s hashrate is obviously higher so you get a smaller share, but often.. a smaller pool will give you a bigger share, but less often, your choice which way to go.<br />
Another way to look at it is that once ASICs start selling (There&#8217;s already one ASIC on the market, but the &#8220;Titan&#8221; asic is planned for Q2/Q3 of 2013 and is supposed to be massive), and asics take over the scrypt network, then you&#8217;ll see a LOT of people with their GPU mining rigs having to shift their focus, either by selling their rigs (so expect cheap GPUs soon, by the way AMD just dropped their prices yesterday on newegg.com (not .ca)) or by making them mine a &#8220;asic-proof&#8221; coin.. and that&#8217;s where Scrypt-N comes into play.. my prediction is that soon everyone will move to scrypt-n coins (spaincoin switched recently from scrypt to scrypt-n in an update) which means the difficulty for scrypt-n coins will go through the roof. and Vertcoin is the one who stated it all, and is probably the scrypt-n coin with the highest difficulty and highest exchange value. My prediction is that when all gpus go to it, its difficulty will go up a lot and by consequence, the rewards will get smaller (harder to mine), which means that for it to be profitable, its value has to increase, so it will probably have a big increase in exchange rate (it already seems to be increasing steadily along with its difficulty).. so the vertcoins that I mined now (relatively easily, 5 VTC so far) will be worth a lot more in a few months (or a year).</p>
<p>You can go at this two ways, the hoarder mode with hopes that in 2 or 3 years, your coins will be worth millions, or a seller who will sell coins as soon as he mines them to make a profit right now.. or you can try to play the market, predict increases and decreases and all that.. You could switch from one altcoin to another, or concentrate on only one&#8230;</p>
<p>Now the last thing about this &#8220;theory&#8221; section is about exchanges.. obviously, altcoins can be exchanged for BTC and BTC for CAD or USD. and for that, you use exchanges, the most known one for BTC was MtGox which fucked up and closed and is under investigation and all that.. there are a few who had issues, but the one I use and most people seem to use is cryptsy.. there are other well known exchanges like Bter, bitstamp, mintpal, etc.. The way it works is that it will generate an address for an altcoin just for you, you transfer money to that address and it counts as a deposit into your account, then you can trade (sell/buy) and you can withdraw the money afterwards.. exchanges will have a balance for each of your altcoins so it kind of counts as a bank, but it&#8217;s not recommended to keep your money in anything other than your own wallet (and secure your wallet.dat). MtGox lost millions of $ and many exchanges got hacked and lost people&#8217;s money. Same rule goes for pools, when you create an account in a pool, first thing you do is set your address for transfers and enable auto-payout, you don&#8217;t want to have the pool hacked or shut down and all your mined coins still in the pool.<br />
So, I suggest cryptsy for most of your stuff, I like it.. but while it supports a lot of currencies, it doesn&#8217;t do all of them, so you have to use others from time to time.. for example, to sell my SPA (spaincoin), I had to use Mintpal since cryptsy doesn&#8217;t do SPA. For GRCE, I only found bittrex and cryptorush that support it (for now), etc..<br />
Remember when I said mining new coins is very profitable.. one issue though about new coins is that they will start with a high value on the market, let&#8217;s take GRCE (greececoin) for example, when it started it was valued at 0.008 (BTC per GRCE) and I was mining it, great.. now my first problem, the rewards I mined are unconfirmed in the network (to avoid an attack of the network if someone has 51% of the network hashrate, you need to wait 120 blocks after the current one before you can use coins generated in that block), so I still can&#8217;t use them.. need to wait for them to be confirmed.. by the time they were confirmed, value dropped to 0.003.. but now I can&#8217;t sell my coins because first, not many exchanges support it.. actually, only one at that time, secondly, no one wanted to buy it.. it&#8217;s still new, no one is interested, the only people who know about it are those who follow the &#8220;new altcoin announcement&#8221; threads on bitcointalk forums, and those are already miners who mined a lot of the coin and who also want to sell it, they don&#8217;t want to buy it&#8230; so if i try to sell it, it won&#8217;t work.. and when no one wants to buy and you want to sell, what do you do ? well, you sell your coins at a value lower than the market price, so as soon as a buyer comes in, he&#8217;ll buy your coins, not someone else&#8217;s.. and all the miners fight over that by lowering the market price.. by the time buyers are in, the price dropped 10 times.. and currently, it&#8217;s at 0.0001, so.. 80 times less than the initial market price. All you can hope for is that this new coin will be successful and people will like it enough that the price will eventually start going back up, and you are left with a lot of coins mined during the launch.</p>
<p>Ok, I think you got the theory, so now let&#8217;s talk about practice! There&#8217;s not a lot to say, you need a GPU (forget about cpu mining), it needs to be an AMD, because Nvidia SUCKS.. you can look at the hardware comparison to get a good idea : <a href="https://litecoin.info/Mining_hardware_comparison">https://litecoin.info/Mining_hardware_comparison</a><br />
You can use your own hardware like my friend did until you earn enough by mining to buy more GPUs, or you can buy a dedicated rig, which is what I did (and also use my desktop GPU for mining when not in use). For your info, if you buy a rig, it&#8217;s better than just buying coins because once it pays for itself, then it will keep generating free money.. but most importantly, at the end of the day, if all your coins are worthless, you still have hardware that has resale value. BUT whatever you invest in this, you have to be prepared to consider that money as &#8220;lost&#8221;.. in other words, don&#8217;t spend money you can&#8217;t afford to lose.<br />
For reference, I &#8220;sacrificed&#8221; 1500$ and bought a rig consisting of :<br />
Power supply + Motherboard + CPU + RAM<br />
2 Asus AMD Radeon R9 290<br />
The power supply is quite important because your rig will use a lot of power, and the motherboard, you&#8217;ll want one with as much PCI-E ports as possible.. mine has 4 PCI-E 16x and 2 PCI-E 1x so I could put 6 GPUs on it.. problem is that a GPU uses two slots because of their width, and I can&#8217;t fit 4 in there.. and that&#8217;s why you can buy PCI-E risers (look for it on ebay). Anyways, with 4 GPUs, you&#8217;ll most likely need a 1500W PSU.. what I did was buy 2 PSUs of 750W because then you can power 2 GPUs with one PSU and the other 2 with the second GPU and just force the second PSU to be always on (by shorting PS_ON with ground on the ATX connector). I bought two because PSU was on sale and even though I only need one, I thought might as well take the second one for half price :p<br />
The GPU was on sale as well, normal price is I think 660$, I got mine for 540$.. now on the US newegg, price dropped to 430$ from what I saw yesterday.<br />
I chose the R9 290 because a friend of mine said they are better than similar KH/s cards in terms of power consumption. I tweaked it until I got 860KH/s per card which is not bad.<br />
I didn&#8217;t need an HDD because I used linux running off a usb stick. If you chose to install windows, you need an HDD though..<br />
Here&#8217;s a nice guide which I followed : <a href="http://www.cryptobadger.com/build-your-own-litecoin-mining-rig/">http://www.cryptobadger.com/build-your-own-litecoin-mining-rig/</a> that website also has other nice articles if you want to read through them.<br />
So I used the SMOS distribution which you just write to a usb key (no install) and you boot it and it starts mining right away, you&#8217;ll just have to edit the config file to point it to your own pools : <a href="http://www.smos-linux.org/">http://www.smos-linux.org/</a><br />
And it gives you a web access similar to this : <a href="http://bamt.webboise.com/mgpumon/">http://bamt.webboise.com/mgpumon/</a><br />
Only issue I had with it is that it has an auto-donate feature where it will stop your miner for 15 minutes and it will mine into its own pools&#8230; which was a big problem for me because when I was mining maxcoin, I had to use a different miner application and I wasn&#8217;t using their service for mining, so it couldn&#8217;t &#8220;stop the server&#8221; so it ran two instances of the miner who froze the cards and I wasted 2 days without mining before I noticed&#8230; so if you want to disable the auto-donate, just do a &#8216;crontab -e&#8217; as root and remove the scripts from crontab.<br />
If you just want to use your desktop for mining, then you can use cgminer for AMD or cudaminer for Nvidia, but as you can see in the hardware comparison wiki, nvidia aren&#8217;t so good for mining. If you use cgminer, you must use version 3.7.2, because any version after that will *not* work for GPUs, as they dropped support for it. I use a fork of cgminer from &#8220;kalroth&#8221; (google kalroth cgminer) which has more option and bugfixes backported into 3.7.2. If you use scrypt-n, then you need vertminer (google it) which supports scrypt-n.<br />
In theory it would take about 8 months to get back the price of a GPU from mining, but if the coin crashes, you lose the time you mined that coin, or if the coin gets a 10x increase in value, it could take only 1 month to get the money back.. you get the idea.<br />
I&#8217;m not sure what other info I can give about the practical aspects of mining.. you get/have hardware, you get the miner, register in a pool, open the wallet, configure the pool in the miner (there are lots of instructions if you google for it) and start mining.. you put an auto-payout, and you hoard or sell depending on your preference.<br />
For information, I&#8217;m using dogehouse.org as pool for dogecoin, and dedicatedpool.com for GRCE and SPA, and vertco.in for VTC.</p>
<p>Now for the last chapter of my book (lol). Mining BTC itself! Yes I know, I said earlier it&#8217;s impossible, but I actually said &#8220;impossible on a GPU&#8221;. I recently found this awesome site called cex.io in which you can trade BTC for GHS. It&#8217;s cloud mining but you don&#8217;t actually rent the GHs you buy them! Meaning that you get the GHS and you use it and mine from it forever or until you sell your GHS to someone else.. this means that you can buy 100GHS (would be around 600$ at current GHS price), let it mine for a while, which will give you about 6$ per day of revenue for 100GHS, then when you&#8217;re tired of it, you sell back those 100GHS. The issue here is two fold, the first is that the BTC network hashrate increases all the time, and the difficulty increases by about 30% per month I think, which means that the 6$ per day you get today, in one month will be much lower unless you buy more GHS.. The second issue is that since the value you can get from 1 GHS is lower every time the network hashrate increases, it means that the value, and so, the price of a GHS also decreases all the time, this means that when you sell back your GHS, you won&#8217;t get back the original amount of BTC (your 600$) you originally put in to buy them.. but hopefully, if you used it for long enough, then you will have earned those 600$ through mining already. I think it would take about 100 days to mine back your investment, then whatever you sell becomes extra money if you decide to sell your GHS.<br />
The cool thing about cex.io is that you&#8217;re not renting the hardware, you&#8217;re buying it (or part of it), so if you have more GHS than what an ASIC miner provides, you can redeem the hardware and have it sent to you.. of course you&#8217;d have to pay electricty and maintain it yourself then, so not a great idea, but it&#8217;s still good to have that option and know that you actually do own the GHS that you bought. By the way, every earning you get from mining BTC, a portion of it gets taken to pay for electricity and maintenance, etc.. which is (according to them) about 13%, they have a complicated equation explained on the website, you pay per GHS you own and the time it&#8217;s been running (snice runs longer = more electricity use), this means that a portion of your earning goes into this maintenance fee, and the longer it takes to mine a BTC block, the higher the fee. Don&#8217;t forget, this is a pool so it&#8217;s a matter of luck.. I&#8217;ve seen it sometimes take a few seconds to find a block, or you find 10 blocks with 5 to 10 minutes between each block found, then you can spend 2 hours without finding any block.. the maximum fee I saw was about 50% and that was for the 2 hour delay before finding a block.. I guess overall it would average to 13% maybe.<br />
If you want to give cex.io a try, I&#8217;d appreciate it if you use my referral link to create your account, because the referal gets 3% bonus GHS when a referred user trades GHS. So if you buy 10GHS, I&#8217;d get 0.3 extra (which I would lose if you sell, you can read the FAQ). Here is my referral link : <a href="https://cex.io/r/0/kakaroto/0/">https://cex.io/r/0/kakaroto/0/</a> please think about it when/if you decide to buy GHS to mine BTC directly.<br />
The advantage of BTC is that its value is pretty stable.. sure, it fluctuates a lot, but it&#8217;s usually been between 550$ and 650$ in recent months, which is not like some altcoins (like maxcoin) which can see their value divided by 100 in a couple of weeks.<br />
What I&#8217;ve done is use my GPU to mine altcoins, then I sold some of them (keeping AUR, VTC, GRCE, SPA and of course DOGE), and used that revenue to buy 11 GHS for myself and I&#8217;m leaving it mining now.. unfortunately, GHS price dropped in the past couple of months, so if I sell my 11GHS, then I&#8217;d have lost some money, but hopefully in a week or two, I&#8217;d be making a profit.<br />
Another interesting point about cex.io is that you can &#8216;preorder&#8217; GHS, they will add hardware on 26 of april and on 26 of may, and you can buy GHS for 0.008 for the april deployment and for 0.004 for the may deployment (currently active GHS can be traded for 0.011) so you could spend the money on the may GHS and triple the investment in 2 months&#8230; but on the other hand, it is possible that the GHS price drops by the 26th of may, and then you&#8217;d have bought GHS at the same price it would be selling on the day it becomes online, but you paid for it 2 months in advance instead of using those 2 months for mining with currently available GHS.. again, in this case, it&#8217;s a gamble. You can see the evolution of GHS value on cex.io for the past month to decide if it&#8217;s worth the risk.</p>
<p>Ok, I think that&#8217;s about it, I think I covered all the basics and advanced topics :-p</p>
<p>Don&#8217;t forget that if you decide to join cex.io, use my referral link here : <a href="https://cex.io/r/0/kakaroto/0/">https://cex.io/r/0/kakaroto/0/</a></p>
<p>Also, if you found this post interesting, you are more than welcome to send me tips to my BTC or DOGE wallets :</p>
<p>BTC : 15fXq5FzKaUArzQ8zBWfJADMn1qTQ5w5Y6</p>
<p>DOGE : DK4uNKX99VTgEv8BZdeepsYJHKhev3oR1j</p>
<p>Thanks for reading!</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2014/03/introduction-to-cryptocurrencies/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Eleganz release for Cobra ODE</title>
		<link>http://kakaroto.homelinux.net/2013/10/eleganz-release-for-cobra-ode/</link>
		<comments>http://kakaroto.homelinux.net/2013/10/eleganz-release-for-cobra-ode/#comments</comments>
		<pubDate>Sun, 06 Oct 2013 02:14:32 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Development]]></category>
		<category><![CDATA[PS3]]></category>
		<category><![CDATA[cobra]]></category>
		<category><![CDATA[efl]]></category>
		<category><![CDATA[eleganz]]></category>
		<category><![CDATA[homebrew]]></category>
		<category><![CDATA[ode]]></category>
		<category><![CDATA[open-source]]></category>
		<category><![CDATA[release]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=554</guid>
		<description><![CDATA[Hi everyone, It&#8217;s been a long time since I last blogged. Today I have some exciting news for you, as I have ported Eleganz, my homebrew manager, to the Cobra ODE. A little while ago, I tweeted that if Cobra ever released their device and did provide an open source library for integration of other managers, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Hi everyone,</p>
<p>It&#8217;s been a long time since I last blogged. Today I have some exciting news for you, as I have ported <a href="http://kakaroto.homelinux.net/2012/11/eleganz-the-elegant-homebrew-manager/">Eleganz</a>, my homebrew manager, to the Cobra ODE.</p>
<p>A little while ago, I tweeted that if Cobra ever released their device and did provide an open source library for integration of other managers, I would port Eleganz to it, and today I am fulfilling that promise. I would like to thank the guys over at <a href="http://ps3crunch.net">ps3crunch.net</a> and <a href="http://ps3hax.net">ps3hax.net</a> for testing this for me, particularly Abkarino, hyappon, freddy, magneto and Xodus69.</p>
<p>When I released Eleganz in November 2011, I left out one small thing on the TODO list, I wanted to see someone pick it up and add the code to exitspawn to actually make Eleganz execute the homebrew apps, but no one did that in almost a year now. I am a bit disappointed that the ps3 scene (homebrew devs, not users) didn&#8217;t pick it up, but it looked like no one was interested in maintaining Eleganz in my place. Today, I am happy to see that Eleganz is not throw-away code, as it can be useful to ODE users.</p>
<p>I can understand why Eleganz didn&#8217;t have much appeal in the world of CFW (it was originally intended to run on OFW if my HEN ever worked), but with the ODEs running on OFW, it&#8217;s perfect for the job. It&#8217;s simple, it&#8217;s beautiful and customizable!</p>
<p>Not only can Eleganz list the games from the Cobra ODE and allow you to select your iso, but it will also allow you to list and run homebrew apps that you can embed in the ISO file. This way you can get access to all your homebrew in a single place, without the need to restart the PS3 or boot the homebrew&#8217;s iso from the ODE. You can just extract the eleganz iso, and add homebrew apps (that are re-signed for running from a BD drive) to the iso&#8217;s PS3_GAME/USRDIR/HOMEBREW directory and recreate the iso with the cobra tool, and that&#8217;s it.</p>
<p>Note that this is not an indication of me getting back into the hacking scene. I have given up on the HEN long ago as I realized that there was no way (that I could find) to run homebrew on OFW, unless they are running from a disc. I may keep improving Eleganz in the near future, but I do not plan to do anything more than that for the ps3 scene at this point.</p>
<p>I would also like to tell everyone that there&#8217;s no need to worry, Eleganz will not become cobra-specific, as any feature I&#8217;d implement will benefit CFW as well as ODE users. I will be releasing an updated version for CFW users soon.</p>
<p>I&#8217;d also like to thank magneto and the Cobra team for offering to send me a Cobra ODE as a <a href="http://www.ps3crunch.net/forum/threads/7869-Gifts-from-Cobra">gift</a> for porting Eleganz to it. Once I receive it, I plan on adding disc dumping capabilities to Eleganz and improve the user experience a little without relying on others to test it for me.</p>
<p>You can find the latest source code on <a href="https://github.com/kakaroto/eleganz">github</a> as always and compile it yourself or you can download the pre-compiled iso file from this link : <a href="http://www.multiupload.nl/GXBBI19VOL">http://www.multiupload.nl/GXBBI19VOL</a></p>
<p>I hope it gets used now and you all can enjoy it and I hope I can see some cool themes created for it now!</p>
<p>KaKaRoTo</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2013/10/eleganz-release-for-cobra-ode/feed/</wfw:commentRss>
		<slash:comments>17</slash:comments>
		</item>
		<item>
		<title>libnice 0.1.4 released!</title>
		<link>http://kakaroto.homelinux.net/2013/02/libnice-0-1-4-released/</link>
		<comments>http://kakaroto.homelinux.net/2013/02/libnice-0-1-4-released/#comments</comments>
		<pubDate>Sat, 23 Feb 2013 01:35:54 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Development]]></category>
		<category><![CDATA[libnice]]></category>
		<category><![CDATA[collabora]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[open-source]]></category>
		<category><![CDATA[release]]></category>
		<category><![CDATA[sdp]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=548</guid>
		<description><![CDATA[Hey everyone, I have just released a new version of libnice, the NAT traversal library. Version 0.1.4 has a few bug fixes but the major changes are the addition of an SDP parsing and generation API. You can now more easily generate your credentials and candidates and parse them with a single API call, making [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Hey everyone,</p>
<p>I have just released a new version of <a href="http://nice.freedesktop.org">libnice</a>, the NAT traversal library.</p>
<p>Version 0.1.4 has a few bug fixes but the major changes are the addition of an SDP parsing and generation API.</p>
<p>You can now more easily generate your credentials and candidates and parse them with a single API call, making it much easier to exchange candidates and establish a successful connection.</p>
<p>Also, I have added three examples to the examples/ subdirectoy from the libnice source tree. Those examples should help anyone learn how to use libnice and what to do in order to establish a successful connection.</p>
<p>The first example, simple-example.c will create a new agent, and gather its candidates and print out a single line to paste on the peer. It uses the signals to asynchronously wait for events and continue the code execution.</p>
<p>The second example, threaded-example.c, will run the mainloop on the main thread and do everything else sequentially in another thread, waiting for signals to release the libnice thread to continue processing.</p>
<p>The final example, sdp-example.c, is based on the threaded example but uses the new SDP generate/parsing API to generate the candidates and credentials line to exchange between the two instances. It will base64 the SDP to make it all fit into a single line, making it easier to exchange the SDP between clients without having to parse the multi-line SDP in the example, keeping it small and concise.</p>
<p>I hope you will find this release useful, let me know if you have any comments.</p>
<p>You can get the latest version <a href="http://nice.freedesktop.org/releases/libnice-0.1.4.tar.gz">here</a> and the documentation has been updated <a href="http://nice.freedesktop.org/libnice/">here</a>.</p>
<p>KaKaRoTo</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2013/02/libnice-0-1-4-released/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Eleganz: The Elegant Homebrew Manager</title>
		<link>http://kakaroto.homelinux.net/2012/11/eleganz-the-elegant-homebrew-manager/</link>
		<comments>http://kakaroto.homelinux.net/2012/11/eleganz-the-elegant-homebrew-manager/#comments</comments>
		<pubDate>Sat, 24 Nov 2012 00:46:07 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Development]]></category>
		<category><![CDATA[EFL]]></category>
		<category><![CDATA[PS3]]></category>
		<category><![CDATA[efl]]></category>
		<category><![CDATA[eleganz]]></category>
		<category><![CDATA[games]]></category>
		<category><![CDATA[open-source]]></category>
		<category><![CDATA[release]]></category>
		<category><![CDATA[themes]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=536</guid>
		<description><![CDATA[Hi everyone, Last year, in January, I decided to have some fun and write a homebrew application using the EFL libraries. I decided to work on a homebrew manager.. basically a replacement to the XMB. It went really well, and the development was really fast, and it was all thanks to the awesome API and capabilities [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Hi everyone,</p>
<p>Last year, in January, I decided to have some fun and write a homebrew application using the <a href="http://trac.enlightenment.org/e/wiki/EFLOverview">EFL</a> libraries. I decided to work on a homebrew manager.. basically a replacement to the XMB. It went really well, and the development was really fast, and it was all thanks to the awesome <a href="http://docs.enlightenment.org">API</a> and capabilities of the EFL libraries. However, I became busy and was unable to continue&#8230; also, it was a bit slow and without proper hardware acceleration, it wouldn&#8217;t be as good as I hoped for, so I put the project on the side.<br />
After many months, in September, thanks to <a href="https://github.com/gzorin">gzorin&#8217;s</a> work, we finally had a working and <a href="http://kakaroto.homelinux.net/2012/09/rsxgl-working-and-usable/">usable GL implementation</a> and the EFL apps automatically gained from it by becoming hardware accelerated. My homebrew manager was much better! but I still needed to finish a few things and I didn&#8217;t have time so I put to rest again.</p>
<p>Today, I have decided to release this homebrew application, <strong>*as is*</strong> for everyone&#8217;s enjoyment! This means that it is not fully working, it might still have some bugs here and there, but it is still a homebrew app that people can use and have some fun with. Most importantly it will serve 4 purposes :</p>
<ul>
<li>Maybe re-awaken  this dying PS3 homebrew scene</li>
<li>Be a good &#8220;exercise to the community&#8221; for finishing it up</li>
<li>Be a good example of what can be done with the EFL</li>
<li>Bring non-developers into writing EFL themes for the app</li>
</ul>
<p>&nbsp;</p>
<p>I introduce to you, Eleganz! The Elegant Homebrew Manager! A little homebrew app that lets you install pkg files and run your games directly from it. Here is the mandatory screencast video :</p>
<p>[There is a video that cannot be displayed in this feed. <a href="http://kakaroto.homelinux.net/2012/11/eleganz-the-elegant-homebrew-manager/">Visit the blog entry to see the video.]</a></p>
<p>&nbsp;</p>
<p>I have published my app in both <a href="https://github.com/kakaroto/eleganz">github</a> and on ps3dev&#8217;s <a href="http://gitorious.ps3dev.net/eleganz">gitorious</a>. and you can also download a pre-compiled .<a href="http://www.multiupload.nl/V6YZTP0OET">pkg</a> for your PS3 to have fun with it.</p>
<p>Here are some highglights of the application (features, limitations and bugs) :</p>
<ul>
<li>The whole User Interface is completely customizable with themes</li>
<li>Installs .pkg files locally to its own data directory (won&#8217;t be visible in the real XMB, unless someone reverses the database format)</li>
<li>Does not yet run games (it&#8217;s for you to do it, use ps3load as reference maybe&#8230;)</li>
<li>Current theme is missing proper theme/images for the progressbar windows (default exquisite/E17 theme used)</li>
<li>System freezes for a few milliseconds when it tries to load a game&#8217;s background image (might be fixed if we implement a pthread library and threading support in the EFL)</li>
<li>Apparently crashes when it exits (bug)</li>
</ul>
<p>The homebrew app comes with two themes, a dark and light theme. I like the dark one so I chose that as the default (oh, ignore that grey background &#8216;default&#8217; one from that screencast video, that was just for testing). I wrote the user interface for the theme (the Edje files) while <a href="https://twitter.com/opium2k">opium</a> designed all the graphics. The theme engine in the EFL is extremely powerful, so I hope I will see tons of themes popping up. And I do not mean &#8220;change the images&#8221; themes, I want real themes, where the whole UI is different, a vertical XMB, a circular one, a 3D theme with perspective/depth for the icons, a dynamic/moving background, etc&#8230; You can learn about the .edj/.edc file format <a href="http://trac.enlightenment.org/e/wiki/EFLChapterFour">here</a> and don&#8217;t forget to check the <a href="http://docs.enlightenment.org/auto/edje/edcref.html">EDC reference</a> wiki.</p>
<p>I hope to see the community pick this up and have fun with it!</p>
<p>That&#8217;s about it, enjoy it, and send me your patches! I&#8217;ll be waiting <img src="http://kakaroto.homelinux.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>KaKaRoTo</p>
<p>&nbsp;</p>
<p>p.s: Forgot to say that the rules/naming conventions/etc.. of the EDC files are explained <a href="https://github.com/kakaroto/eleganz/blob/master/data/themes/rules">here</a>. If a .edj file doesn&#8217;t have the appropriate parts/groups, then it will be ignored and will not show on the UI.</p>
<p>p.p.s: You can install the EFL on <a href="http://dev.enlightenment.fr/~doursse/NSIS/Efl-1.2.0.exe">windows</a> and have access to edje_cc to compile your .edc into .edj.</p>
<p>p.p.p.s: Damn, I  keep forgetting stuff.. by the way, the whole Eleganz application works just fine on the PC too, I did all my development on the PC (that screencast was actually on Linux), *then* I tried it on the PS3 and it just worked.. so for theme development, it should be pretty easy to test without the need of a PS3.</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2012/11/eleganz-the-elegant-homebrew-manager/feed/</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
		<item>
		<title>UVC H264 Encoding cameras support in GStreamer</title>
		<link>http://kakaroto.homelinux.net/2012/09/uvc-h264-encoding-cameras-support-in-gstreamer/</link>
		<comments>http://kakaroto.homelinux.net/2012/09/uvc-h264-encoding-cameras-support-in-gstreamer/#comments</comments>
		<pubDate>Sat, 22 Sep 2012 00:52:59 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Development]]></category>
		<category><![CDATA[c920]]></category>
		<category><![CDATA[cisco]]></category>
		<category><![CDATA[collabora]]></category>
		<category><![CDATA[gstreamer]]></category>
		<category><![CDATA[h264]]></category>
		<category><![CDATA[logitech]]></category>
		<category><![CDATA[open-source]]></category>
		<category><![CDATA[release]]></category>
		<category><![CDATA[uvc]]></category>
		<category><![CDATA[uvch264_src]]></category>
		<category><![CDATA[video]]></category>
		<category><![CDATA[voip]]></category>
		<category><![CDATA[webcam]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=518</guid>
		<description><![CDATA[More and more people are doing video conferencing everyday, and for that to be possible, the video has to be encoded before being sent over the network. The most efficient and most popular codec at this time is H264, and since the UVC (USB Video Class) specification 1.1, there is support for H264 encoding cameras. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>More and more people are doing video conferencing everyday, and for that to be possible, the video has to be encoded before being sent over the network. The most efficient and most popular codec at this time is <a href="http://en.wikipedia.org/wiki/H264">H264</a>, and since the UVC (<a href="http://www.usb.org/developers/devclass_docs#footer">USB Video Class</a>) specification 1.1, there is support for H264 encoding cameras.</p>
<p>One such camera is the <a href="http://www.logitech.com/en-ca/webcam-communications/webcams/hd-pro-webcam-c920">Logitech C920</a>. A really great camera which can produce a 1080p H264-encoded stream at 30 fps.  As part of my job for <a href="http://www.collabora.co.uk">Collabora</a>, I was tasked to add support for such a camera in GStreamer. After months of work, it&#8217;s finally done and has now been integrated upstream into <a href="http://cgit.freedesktop.org/gstreamer/gst-plugins-bad/">gst-plugins-bad 0.10</a> (port to GST 1.0 pending).</p>
<p>One important aspect here is that when you are capturing a high quality, high resolution H264 stream, you don&#8217;t want to be wasting your CPU to decode your own video in order to show a preview window during a video chat, so it was important for me to be able to capture both H264 and raw data from the camera. For this reason, I have decided to create a <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-bad-plugins/html/gst-plugins-bad-plugins-camerabin2.html">camerabin2</a>-style source: uvch264_src.</p>
<p>Uvch264_src is a source which implements the GstBaseCameraSrc API. This means that instead of the traditional <em>&#8216;src&#8217;</em> pad, it provides instead three distinct source pads: <em>vidsrc</em>, <em>imgsrc</em> and <em>vfsrc</em>. The GstBaseCameraSrc API is based heavily on the concept of a &#8220;Camera&#8221; application for phones. As such, the <em>vidsrc</em> is meant as a source for recording video, <em>imgsrc</em> as a source for taking a single-picture and <em>vfsrc</em> as a source for the viewfinder (preview) window. A &#8216;mode&#8217; property is used to switch between video-mode and image-mode for capture. The <em>uvch264_src</em> source only supports video mode however, and the <em>imgsrc</em> will never be used.</p>
<p>When the element goes to <em>PLAYING</em>, only the vfsrc will output data, and you have to send the <em>&#8220;start-capture&#8221;</em> action signal to activate the <em>vidsrc</em>/<em>imgsrc</em> pads, and send the <em>&#8220;stop-capture&#8221;</em> action signal to stop capturing from the <em>vidsrc</em>/<em>imgsrc</em> pads. Note that <em>vfsrc</em> will be outputting data when in <em>PLAYING</em>, so it must always be linked (link it to <em>fakesink</em> if you don&#8217;t need the preview, otherwise you&#8217;ll get a not-linked error). If you want to test this on the command line (gst-launch) you can set the &#8216;auto-start&#8217; property to TRUE and the <em>uvch264_src</em> will automatically start the capture after going to <em>PLAYING</em>.</p>
<p>You can request <strong>H264</strong>, <strong>MJPG</strong>, and <strong>raw</strong> data from the vidsrc, but only MJPG and raw data from the <em>vfsrc</em>. When requesting H264 from the <em>vidsrc</em>, then the max resolution for the <em>vfsrc</em> will be 640&#215;480, which can be served as jpg or as raw (decoded from jpg). So if you don&#8217;t want to use any CPU for decoding, you should ask for a raw resolution lower than 432&#215;240 (with the C920) which will directly capture YUV from the camera. Any higher resolution won&#8217;t be able to go through the usb&#8217;s bandwidth and the preview will have to be captured in mjpg (uvch264_src will take care of that for you).</p>
<p>The source has two types of controls, the static controls which must be set in <em>READY</em> state, and <em>DYNAMIC</em> controls which can be dynamically changed in <em>PLAYING</em> state. The description of each property will specify whether that property is a static or dynamic control, as well as its flags. Here are the supported static controls : <em>initial-bitrate, slice-units, slice-mode, iframe-period, usage-type, entropy, enable-sei, num-reorder-frames, preview-flipped</em> and l<em>eaky-bucket-size</em>. The dynamic controls are : <em>rate-control,  fixed-framerate, level-idc, peak-bitrate, average-bitrate, min-iframe-qp,  max-iframe-qp, min-pframe-qp,  max-pframe-qp, min-bframe-qp,  max-bframe-qp, ltr-buffer-size</em> and<em> ltr-encoder-control</em>.</p>
<p>Each control will have a minimum, maximum and default value, and those are specific to each camera and need to be probed when the element is in <em>READY</em> state. For that reason, I have added three element actions to the source in order to probe those settings : <em>get-enum-setting, get-boolean-setting</em> and <em>get-int-setting</em>.<br />
These functions will return <em>TRUE</em> if the property is valid and the information was successfully retrieved, or <em>FALSE</em> if the property is invalid (giving an<br />
invalid name or a boolean property to get_int_setting for example) or if the camera returned an error trying to probe its capabilities.<br />
The prototype of the signals are :</p>
<ul>
<li><strong>gboolean get_enum_setting (GstElement *object, char *property, gint *mask, gint *default);</strong><br />
Where the mask is a bit field specifying which enums can be set, where the bit being set is (1 &lt;&lt; enum_value).<br />
For example, the &#8216;slice-mode&#8217; enum can only be ignored (0) or slices/frame (3), so the mask returned would be : 0&#215;09<br />
That is equivalent to (1 &lt;&lt; 0 | 1 &lt;&lt; 3) which is :<br />
(1 &lt;&lt; UVC_H264_SLICEMODE_IGNORED) | (1 &lt;&lt; UVC_H264_SLICEMODE_SLICEPERFRAME)</li>
<li><strong>gboolean get_int_setting (GstElement *object, char *property, gint *min, gint *def, gint *max);</strong><br />
This one gives the minimum, maximum and default values for a property. If a property has min and max to the same value, then the property cannot be changed, for example the C920 has num-reorder-frames setting: min=0, def=0 and max=0, and it means the C920 doesn&#8217;t support reorder frames.</li>
<li><strong>gboolean get_boolean_setting (GstElement *object, char *property, gboolean *changeable, gboolean *default_value);</strong><br />
The boolean value will have changeable=TRUE only if changing the property will have an effect on the encoder, for example, the C920 does not support the preview-flipped property, so that one would have changeable=FALSE (and default value is FALSE in this case), but it does support the enable-sei property so that one would have changeable=TRUE (with a default value of FALSE).</li>
</ul>
<p>This should give you all the information you need to know which settings are available on the hardware, and from there, be able to control the properties<br />
that are available.</p>
<p>Since these are element actions, they are called this way :</p>
<div class="geshi no c">
<ol>
<li class="li1">
<div class="de1">gboolean return_value, changeable, default_bool;</div>
</li>
<li class="li1">
<div class="de1">gint mask, minimum, maximum, default_int, default_enum;</div>
</li>
<li class="li1">
<div class="de1">&nbsp;</div>
</li>
<li class="li1">
<div class="de1">g_signal_emit_by_name <span class="br0">&#40;</span>G_OBJECT<span class="br0">&#40;</span>element<span class="br0">&#41;</span>, <span class="st0">&quot;get-enum-setting&quot;</span>, <span class="st0">&quot;slice-mode&quot;</span>, <span class="sy0">&amp;</span>mask, <span class="sy0">&amp;</span>default_enum, <span class="sy0">&amp;</span>return_value, <span class="kw2">NULL</span><span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">g_signal_emit_by_name <span class="br0">&#40;</span>G_OBJECT<span class="br0">&#40;</span>element<span class="br0">&#41;</span>, <span class="st0">&quot;get-boolean-setting&quot;</span>, <span class="st0">&quot;enable-sei&quot;</span>, <span class="sy0">&amp;</span>changeable, <span class="sy0">&amp;</span>default_bool, <span class="sy0">&amp;</span>return_value, <span class="kw2">NULL</span><span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">g_signal_emit_by_name <span class="br0">&#40;</span>G_OBJECT<span class="br0">&#40;</span>element<span class="br0">&#41;</span>, <span class="st0">&quot;get-int-setting&quot;</span>, <span class="st0">&quot;iframe-period&quot;</span>, <span class="sy0">&amp;</span>minimum, <span class="sy0">&amp;</span>default_int <span class="sy0">&amp;</span>maximum, <span class="sy0">&amp;</span>return_value, <span class="kw2">NULL</span><span class="br0">&#41;</span>;</div>
</li>
</ol>
</div>
<p>Apart from that, the source also supports the <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-gstvideo.html#gst-video-event-new-upstream-force-key-unit">GstForceKeyUnit</a> video event for dynamically requesting keyframes, as well as custom-upstream events to control LTR (Long-Term Reference frames), bitrate, QP, rate-control and level-idc, through, respectively, the uvc-h264-ltr-picture-control, uvc-h264-bitrate-control, uvc-h264-qp-control, uvc-h264-rate-control and uvc-h264-level-idc custom upstream events (read the code for more information!). The source also supports receiving the &#8216;renegotiate&#8217; custom upstream event which will make it renegotiate the according to the caps on its pads. This is useful if you want to enable/disable h264 streaming or switch resolution/framerate easily while the pipeline is running; Simply change your caps and send the renegotiate event.</p>
<p>I have written a GUI test application which you can use to test the camera and the source&#8217;s various features. It can also serve as a reference implementation on how the source can be used. The test application resides in gst-plugins-bad, under <em>tests/examples/uvch264/ </em>(make sure to run it from its source directory though).</p>
<p>&nbsp;</p>
<div id="attachment_522" style="width: 310px" class="wp-caption aligncenter"><a href="http://kakaroto.homelinux.net/wp-content/uploads/2012/09/test-uvch264.png"><img class="size-medium wp-image-522" title="test-uvch264" src="http://kakaroto.homelinux.net/wp-content/uploads/2012/09/test-uvch264-300x246.png" alt="" width="300" height="246" /></a><p class="wp-caption-text">uvch264_src test application (click to enlarge)</p></div>
<p>You can also use this example gst-launch pipeline for testing the capture of the camera. This will capture a small preview window as well as an h264 stream in 1080p that will be decoded locally :</p>
<blockquote><p><em>gst-launch uvch264_src device=/dev/video1 name=src auto-start=true src.vfsrc ! queue ! &#8220;video/x-raw-yuv,width=320,height=240,framerate=30/1&#8243; ! xvimagesink src.vidsrc ! queue ! video/x-h264,width=1920,height=1080,framerate=30/1,profile=constrained-baseline ! h264parse ! ffdec_h264 ! xvimagesink</em></p></blockquote>
<p>That&#8217;s about it. If you are interested in using uvch264_src to capture from one of the UVC H264 encoding cameras, make sure you upgrade to the latest git versions of gstreamer, gst-plugins-base, gst-plugins-good and gst-plugins-bad (or 0.10.37+ for gstreamer/gst-plugins-base, 0.10.32 for gst-plugins-good and 0.10.24 for gst-plugins-bad, whenever those versions get released).</p>
<p>I would like to thank Collabora and Cisco for sponsoring me to work on this great project, it couldn&#8217;t have been possible without them!</p>
<p>If you have any more questions about this subject, feel free to contact me.</p>
<p>Enjoy!</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2012/09/uvc-h264-encoding-cameras-support-in-gstreamer/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>RSXGL working and usable</title>
		<link>http://kakaroto.homelinux.net/2012/09/rsxgl-working-and-usable/</link>
		<comments>http://kakaroto.homelinux.net/2012/09/rsxgl-working-and-usable/#comments</comments>
		<pubDate>Wed, 12 Sep 2012 02:39:43 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Development]]></category>
		<category><![CDATA[EFL]]></category>
		<category><![CDATA[PS3]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=510</guid>
		<description><![CDATA[Hi everyone! When the PS3 homebrew scene started, a lot of people were complaining that it wasn&#8217;t possible to write 3D games for the PS3 because of its lack of OpenGL library. Almost a year ago, Alex Betts thought he would tackle this problem and he started working on RSXGL&#8230; an implementation of the OpenGL [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Hi everyone!</p>
<p>When the PS3 homebrew scene started, a lot of people were complaining that it wasn&#8217;t possible to write 3D games for the PS3 because of its lack of OpenGL library.<br />
Almost a year ago, Alex Betts thought he would tackle this problem and he started working on RSXGL&#8230; an implementation of the OpenGL 3.1 specification written from scratch targeting the PS3&#8242;s RSX. Anyone in their right mind would say that it&#8217;s impossible, that it&#8217;s too much work, but Alex spent the last year working on it, alone, until it became usable. You can read some news about it <a href="http://www.ps3hax.net/2011/09/wip-rsxgl-the-rsx-graphics-library/">here</a>.<br />
For some reason though, no one used it to build their own apps. Maybe the status of the project was scaring them, it was said to be incomplete, there was no GLSL support, etc&#8230;<br />
I am writing today to tell you that RSXGL is perfectly usable! It supports online GLSL compilation, as well as any feature you might want. As proof, I have written a new hardware accelerated engine for the EFL using RSXGL and it worked great! Alex and I spent a lot of time testing and fixing all the issues that were in RSXGL that were made visible by the EFL&#8217;s GL engine and I am happy to say that it&#8217;s working now. Expedite is able to run most of its tests at 50 to 60 fps on 1080p resolution (instead of the average of 5 to 10 fps it had on 720p before).<br />
You can see performance tests right here (Running some tests from expedite) :<br />
Software rendering: <a href="http://dl.dropbox.com/u/22642664/expedite_psl1ght.log">http://dl.dropbox.com/u/22642664/expedite_psl1ght.log</a><br />
RSXGL rendering: <a href="http://dl.dropbox.com/u/22642664/expedite_rsxgl.log">http://dl.dropbox.com/u/22642664/expedite_rsxgl.log</a></p>
<p>Please give RSXGL a try. Also, you can get the latest EFL version from my repository, which includes the gl engine for ps3. Now, any EFL application will be automatically hardware accelerated thanks to RSXGL. I hope we can see some new games (or old GL games being ported) soon!</p>
<p>RSXGL : <a href="https://github.com/gzorin/RSXGL">https://github.com/gzorin/RSXGL</a><br />
EFL : <a href="https://github.com/kakaroto/e17">https://github.com/kakaroto/e17</a></p>
<p>Enjoy!</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2012/09/rsxgl-working-and-usable/feed/</wfw:commentRss>
		<slash:comments>29</slash:comments>
		</item>
		<item>
		<title>Exquisite tool becomes a library!</title>
		<link>http://kakaroto.homelinux.net/2012/07/exquisite-tool-becomes-a-library/</link>
		<comments>http://kakaroto.homelinux.net/2012/07/exquisite-tool-becomes-a-library/#comments</comments>
		<pubDate>Sat, 21 Jul 2012 21:04:54 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Development]]></category>
		<category><![CDATA[EFL]]></category>
		<category><![CDATA[PS3]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[efl]]></category>
		<category><![CDATA[exquisite]]></category>
		<category><![CDATA[library]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=497</guid>
		<description><![CDATA[The exquisite tool that comes with Enlightenment is a nice, pure edje application that is used for showing boot process splash screens. I thought it was a nice splash screen and more generally, a nice progress bar and wanted to use it in my own apps. I have modified the exquisite tool to become a [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The exquisite tool that comes with Enlightenment is a nice, pure edje application that is used for showing boot process splash screens. I thought it was a nice splash screen and more generally, a nice progress bar and wanted to use it in my own apps.</p>
<p>I have modified the exquisite tool to become a library so it can be used by others in their applications, while keeping the exquisite and exquisite-writer tools intact (they will now depend on libexquisite.so though).</p>
<p>Since it&#8217;s a very simple feature (only a couple hundred lines of code), the API is simple as well. Here&#8217;s an example of use :</p>
<div class="geshi no c">
<ol>
<li class="li1">
<div class="de1">&nbsp; Evas_Object <span class="sy0">*</span>obj <span class="sy0">=</span> exquisite_object_add <span class="br0">&#40;</span>evas, theme<span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; evas_object_show <span class="br0">&#40;</span>obj<span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; exquisite_object_title_set <span class="br0">&#40;</span>obj, <span class="st0">&quot;Title of the screen&quot;</span><span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; exquisite_object_message_set <span class="br0">&#40;</span>obj, <span class="st0">&quot;My Message&quot;</span><span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; <span class="kw4">int</span> test_id <span class="sy0">=</span> exquisite_object_text_add <span class="br0">&#40;</span>obj, <span class="st0">&quot;First test&quot;</span><span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; <span class="kw4">int</span> second_test <span class="sy0">=</span> exquisite_object_text_add <span class="br0">&#40;</span>obj, <span class="st0">&quot;Second text!&quot;</span><span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; exquisite_object_status_set <span class="br0">&#40;</span>obj, test_id, <span class="st0">&quot;FAIL&quot;</span>, EXQUISITE_STATUS_TYPE_FAILURE<span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; exquisite_object_status_set <span class="br0">&#40;</span>obj, second_test, <span class="st0">&quot;OK&quot;</span>, EXQUISITE_STATUS_TYPE_SUCCESS<span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; exquisite_object_pulsate <span class="br0">&#40;</span>obj<span class="br0">&#41;</span>;</div>
</li>
<li class="li1">
<div class="de1">&nbsp; exquisite_object_progress_set <span class="br0">&#40;</span>obj, <span class="nu0">0.95</span><span class="br0">&#41;</span>;</div>
</li>
</ol>
</div>
<p>That&#8217;s it, and you get a nice screen with title, message, text area for status messages (if you want it), and a progress bar. This also means you can use the default theme from exquisite or write your own using the same theme specification which can later on be used by others.</p>
<p>Please review the API provided, and this is the right time to suggest any changes to the API or to improve on the library, so let us know what you think!</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2012/07/exquisite-tool-becomes-a-library/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Upgrading from Fedora 15 i686 to Fedora 16 x86_64</title>
		<link>http://kakaroto.homelinux.net/2012/03/upgrading-from-fedora-15-i686-to-fedora-16-x86_64/</link>
		<comments>http://kakaroto.homelinux.net/2012/03/upgrading-from-fedora-15-i686-to-fedora-16-x86_64/#comments</comments>
		<pubDate>Fri, 09 Mar 2012 01:33:41 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[64bits]]></category>
		<category><![CDATA[fedora]]></category>
		<category><![CDATA[gnome]]></category>
		<category><![CDATA[upgrade]]></category>
		<category><![CDATA[yum]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=492</guid>
		<description><![CDATA[A couple of months ago I bought a new laptop with 8GB of RAM, but I realized I was running on a 32 bits system which meant I couldn&#8217;t use all my RAM. I had to switch to 64 bits. It takes so much time for me to restore my system that I didn&#8217;t have [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>A couple of months ago I bought a new laptop with 8GB of RAM, but I realized I was running on a 32 bits system which meant I couldn&#8217;t use all my RAM. I had to switch to 64 bits. It takes so much time for me to restore my system that I didn&#8217;t have the courage to go through it again (did it last year, switched from Debian to Fedora, took me a week), so I stayed with 32 bits. Yesterday I had to upgrade to Fedora 16 and decided to do the switch to 64 bits at the same time&#8230; I&#8217;d like to share my experience with you!</p>
<p>First of all, I had to download the 64 bits version of the fedora CD which is not the default download on the website, I had to click on the small &#8220;more download options&#8221; to get the choice and I realized that&#8217;s how I got the 32 bit  install in the first place (Fedora download page should definitely list both links). Then I made a backup of all the installed packages on my system so I can restore them on the new system :</p>
<blockquote><p> <del>yum -C info $(rpm -qa) | grep &#8220;Name   :&#8221; | cut -c 15- &gt; packages-list.log</del></p></blockquote>
<p><del>This will list all of the packages installed, and ask yum for the exact name of the package (instead of &#8220;git-1.7.6.5-1.fc15.i686&#8243;, it becomes &#8220;git&#8221;).. if you have a better method of doing that, let me know, but this did the trick for me.</del></p>
<blockquote><p><strong>Update:</strong> A better method was given to me by Hansen and Richard Godbee in the comments : rpm -qa &#8211;qf &#8220;%{name}\n&#8221; &gt; packages-list.log</p></blockquote>
<p>I obviously had a separate partition for the  /home directory, which made things easier, so I backed up in it the important directories which were: /opt, /root, /etc, /usr/local and my scratchbox home dir. Then the moment of truth, reboot into the live cd, install it, make sure not to format the /home partition, and reboot into the new 64 bits system.</p>
<p>First of all, as soon as I tried to login, gnome 3 would completely crash and would not let me log in, so I had to create a new user, login into gnome 3, then &#8220;ls -la&#8221; the files in the new user&#8217;s home dir, then delete (move away) those same files/directories from my own home dir, so that gnome doens&#8217;t crash anymore&#8230; apparently, my settings suddenly became incompatible or something&#8230; It&#8217;s important to note that I had some further problems later and I had to copy back .gnome2/keyrings otherwise the gnome-keyring daemon would freeze.</p>
<p>To restore all the packages that I had before, I first had to re-install (manually) the rpmfusion repository (free and nonfree), then I just did a simple :</p>
<blockquote><p>yum install $(cat packages-list.log)</p></blockquote>
<p>And after 1.2GB of downloads and 1020 package installs, my system was technically &#8220;restored&#8221; to how it was before the format. I look at the &#8220;No package foobar&#8221; lines given by yum at that point which told me what I needed to install manually (opera, skype, dropbox), which I did, and a few libs that apparently don&#8217;t exist anymore in Fedora 16. Now I just had to restore the /opt for some apps I had in there (and recompile the EFL/E17),  copy the Enlightenment.desktop file to /usr/share/xsessions, restore my /etc/hosts (which had some custom entries), restore some custom scripts I wrote into /usr/local/bin and recompile the libraries I was working on and had installed in /usr/local (gstreamer, libnice, farstream). I also had to install a few 32 bit libraries so I could install skype (which only comes in 32 bit flavor).</p>
<p>It took me about a day of work/compilation, but now I feel back home, don&#8217;t notice any difference in my system other than the fact that I will now be writing 32-bits bugs instead of 64-bits bugs <img src="http://kakaroto.homelinux.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2012/03/upgrading-from-fedora-15-i686-to-fedora-16-x86_64/feed/</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>How the ECDSA algorithm works</title>
		<link>http://kakaroto.homelinux.net/2012/01/how-the-ecdsa-algorithm-works/</link>
		<comments>http://kakaroto.homelinux.net/2012/01/how-the-ecdsa-algorithm-works/#comments</comments>
		<pubDate>Wed, 01 Feb 2012 02:05:07 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Development]]></category>
		<category><![CDATA[PS3]]></category>
		<category><![CDATA[algorithm]]></category>
		<category><![CDATA[collabora]]></category>
		<category><![CDATA[ecdsa]]></category>
		<category><![CDATA[gnome]]></category>
		<category><![CDATA[jailbreak]]></category>
		<category><![CDATA[mathematics]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=462</guid>
		<description><![CDATA[To popular demand, I have decided to try and explain how the ECDSA algorithm works. I&#8217;ve been struggling a bit to understand it properly and while I found a lot of documentation about it, I haven&#8217;t really found any &#8220;ECDSA for newbies&#8221; anywhere. So I thought it would be good to explain in simple terms [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>To popular demand, I have decided to try and explain how the <a href="http://en.wikipedia.org/wiki/ECDSA">ECDSA</a> algorithm works. I&#8217;ve been struggling a bit to understand it properly and while I found a lot of documentation about it, I haven&#8217;t really found any &#8220;ECDSA for newbies&#8221; anywhere. So I thought it would be good to explain in simple terms how it works so others can learn from my research. I have found some websites that explain the basic principles but nowhere near enough to actually understand it, others that explains things without any basics, making it incomprehensible, and others that go way too deep into the the mathematics behind it.</p>
<p>ECDSA stands for &#8220;Elliptic Curve Digital Signature Algorithm&#8221;, it&#8217;s used to create a <a href="http://en.wikipedia.org/wiki/Digital_signature">digital signature</a> of data (a file for example) in order to allow you to verify its authenticity without compromising its security. Think of it like a real signature, you can recognize someone&#8217;s signature, but you can&#8217;t forge it without others knowing. The ECDSA algorithm is basically all about mathematics.. so I think it&#8217;s important to start by saying : &#8220;hey kids, don&#8217;t slack off at school, listen to your teachers, that stuff might be useful for you some day!&#8221; <img src="http://kakaroto.homelinux.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  But these maths are fairly complicated, so while I&#8217;ll try to vulgarize it and make it understandable for non technical people, you will still probably need some knowledge in mathematics to understand it properly. I will do this in two parts, one that is a sort of high level explanation about how it works, and another where I dig deeper into its inner workings to complete your understanding. Note however that I&#8217;ve just recently learned this stuff, so I&#8217;m definitely not an expert on the matter.</p>
<p>So the principle is simple, you have a mathematical equation which draws a curve on a graph, and you choose a random point on that curve and consider that your point of origin. Then you generate a random number, this is your private key, you do some magical mathematical equation using that random number and that &#8220;point of origin&#8221; and you get a second point on the curve, that&#8217;s your public key. When you want to sign a file, you will use this private key (the random number) with a hash of the file (a unique number to represent the file) into a magical equation and that will give you your signature. The signature itself is divided into two parts, called <em><strong>R</strong></em> and <em><strong>S</strong></em>. In order to verify that the signature is correct, you only need the public key (that point on the curve that was generated using the private key) and you put that into another magical equation with one part of the signature (<em><strong>S</strong></em>), and if it was signed correctly using the the private key, it will give you the other part of the signature (<em><strong>R</strong></em>). So to make it short, a signature consists of two numbers, <em><strong>R</strong></em> and <em><strong>S</strong></em>, and you use a private key to generate <em><strong>R</strong></em> and <em><strong>S</strong></em>, and if a mathematical equation using the public key and <em><strong>S</strong></em> gives you <em><strong>R</strong></em>, then the signature is valid. There is no way to know the private key or to create a signature using only the public key.</p>
<p>Alright, now for the more in depth understanding, I suggest you take an aspirin right now as this might hurt! <img src="http://kakaroto.homelinux.net/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley" /> </p>
<p>Let&#8217;s start with the basics (which may be boring for people who know about it, but is mandatory for those who don&#8217;t) : ECDSA uses only integer mathematics, there are no floating points (this means possible values are 1, 2, 3, etc.. but not 1.5..),  also, the range of the numbers is bound by how many bits are used in the signature (more bits means higher numbers, means more security as it becomes harder to &#8216;guess&#8217; the critical numbers used in the equation), as you should know, computers use &#8216;bits&#8217; to represent data, a bit is a &#8216;digit&#8217; in binary notation (0 and 1) and 8 bits represent one byte. Every time you add one bit, the maximum number that can be represented doubles, with 4 bits you can represent values 0 to 15 (for a total of 16 possible values), with 5 bits, you can represent 32 values, with 6 bits, you can represent 64 values, etc.. one byte (8 bits) can represent 256 values, and 32 bits can represent 4294967296 values (4 Giga).. Usually ECDSA will use 160 bits total, so that makes&#8230; well, a very huge number with 49 digits in it&#8230;</p>
<p><a href="http://en.wikipedia.org/wiki/ECDSA">ECDSA</a> is used with a <a href="http://en.wikipedia.org/wiki/Sha1">SHA1</a> <a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function">cryptographic hash</a> of the message to sign (the file). A <a href="http://en.wikipedia.org/wiki/Hash_function">hash</a> is simply another mathematical equation that you apply on every byte of data which will give you a number that is unique to your data. Like for example, the sum of the values of all bytes may be considered a very dumb hash function. So if anything changes in the message (the file) then the hash will be completely different. In the case of the SHA1 hash algorithm, it will always be 20 bytes (160 bits). It&#8217;s very useful to validate that a file has not been modified or corrupted, you get the 20 bytes hash for a file of any size, and you can easily recalculate that hash to make sure it matches. What ECDSA signs is actually that hash, so if the data changes, the hash changes, and the signature isn&#8217;t valid anymore.</p>
<p>Now, how does it work? Well <a href="http://en.wikipedia.org/wiki/Elliptic_curve_cryptography">Elliptic Curve cryptography</a> is based on an equation of the form :</p>
<p style="text-align: center;"><em><strong>y^2 = (x^3 + a * x + b) mod p</strong></em></p>
<p>First thing you notice is that there is a modulo and that the &#8216;<em><strong>y</strong></em>&#8216; is a square. This means that for any <em><strong>x</strong></em> coordinate, you will have two values of <em><strong>y</strong></em> and that the curve is symmetric on the <em>X axis</em>. The modulo is a prime number and makes sure that all the values are within our range of 160 bits and it allows the use of &#8220;<a href="http://en.wikipedia.org/wiki/Modular_square_root">modular square root</a>&#8221; and &#8220;<a href="http://en.wikipedia.org/wiki/Modular_multiplicative_inverse">modular multiplicative inverse</a>&#8221; mathematics which make calculating stuff easier (I think). Since we have a modulo (<em><strong>p</strong></em>) , it means that the possible values of <em><strong>y^2</strong></em> are between  0 and <em><strong>p</strong></em>-1, which gives us <em><strong>p</strong></em> total possible values. However, since we are dealing with integers, only a smaller subset of those values will be a &#8220;<a href="http://en.wikipedia.org/wiki/Square_number">perfect square</a>&#8221; (the square value of two integers), which gives us <em><strong>N</strong></em> possible points on the curve where <em><strong>N &lt; p</strong></em> (<em><strong>N</strong></em> being the number of perfect squares between 0 and<em><strong> p</strong></em>). Since each <strong><em>x </em></strong>will yield two points (positive and negative values of the square-root of <em><strong>y^2</strong></em>), this means that there are <em><strong>N/2</strong></em> possible &#8216;<em><strong>x</strong></em>&#8216; coordinates that are valid and that give a point on the curve. So this elliptic curve has a finite number of points on it, and it&#8217;s all because of the integer calculations and the modulus. Another thing you need to know about <a href="http://en.wikipedia.org/wiki/Elliptic_curve">Elliptic curves</a>, is the notion of &#8220;<a href="http://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication">point addition</a>&#8220;. It is defined as adding one point <em><strong>P</strong></em> to another point <em><strong>Q</strong></em> will lead to a point <em><strong>S</strong></em> such that if you draw a line from <em><strong>P</strong></em> to <em><strong>Q</strong></em>, it will intersect the curve on a third point <em><strong>R</strong></em> which is the negative value of <em><strong>S</strong></em> (remember that the curve is symmetric on the <em>X axis</em>). In this case, we define <em><strong>R = -S</strong></em> to represent the symmetrical point of <em><strong>R</strong></em> on the <em>X axis</em>. This is easier to illustrate with an image :<a href="http://kakaroto.homelinux.net/wp-content/uploads/2012/01/ecdsa1.png"><img class="aligncenter size-medium wp-image-465" title="ecdsa1" src="http://kakaroto.homelinux.net/wp-content/uploads/2012/01/ecdsa1-300x251.png" alt="" width="300" height="251" /></a> So you can see a curve of the form <em><strong>y^2 = x^3 + ax + b</strong></em> (where <em><strong>a = -4</strong></em> and <em><strong>b = 0</strong></em>), which is symmetric on the <em>X axis</em>, and where <em><strong>P+Q</strong></em> is the symmetrical point through <em>X</em> of the point <em><strong>R</strong></em> which is the third intersection of a line going from <em><strong>P</strong></em> to <em><strong>Q</strong></em>. In the same manner, if you do <em><strong>P + P</strong></em>,  it will be the symmetrical point of <em><strong>R</strong></em> which is the intersection of the line that is a tangent to the point <em><strong>P</strong></em>.. And <em><strong>P + P + P</strong></em> is the addition between the resulting point of <em><strong>P+P</strong></em> with the point <em><strong>P</strong></em> since <strong><em>P + P + P</em></strong> can be written as <strong><em>(P+P) + P</em></strong>.. This defines the &#8220;<a href="http://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication">point multiplication</a>&#8221; where <em><strong>k*P</strong></em> is the addition of the point <em><strong>P</strong></em> to itself <em><strong>k</strong></em> times&#8230; here are two examples showing this : <a href="http://kakaroto.homelinux.net/wp-content/uploads/2012/01/ecdsa3.png"><img class="aligncenter size-medium wp-image-470" title="ecdsa3" src="http://kakaroto.homelinux.net/wp-content/uploads/2012/01/ecdsa3-300x242.png" alt="" width="300" height="242" /></a> <a href="http://kakaroto.homelinux.net/wp-content/uploads/2012/01/ecdsa4.png"><img class="aligncenter size-medium wp-image-471" title="ecdsa4" src="http://kakaroto.homelinux.net/wp-content/uploads/2012/01/ecdsa4-300x235.png" alt="" width="300" height="235" /></a></p>
<p style="text-align: left;">Here, you can see two elliptic curves, and a point <em><strong>P</strong></em> from which you draw the tangent, it intersects the curve with a third point, and its symmetric point it <em><strong>2P</strong></em>, then from there, you draw a line from <em><strong>2P</strong></em> and <em><strong>P</strong></em> and it will intersect the curve, and the symmetrical point is <em><strong>3P</strong></em>. etc&#8230; you can keep doing that for the point multiplication. You can also already guess why you need to take the symmetric point of <strong><em>R</em></strong> when doing the addition, otherwise, multiple additions of the same point will always give the same line and the same three intersections.</p>
<p style="text-align: left;">One particularity of this point multiplication is that if you have a point <em><strong>R = k*P</strong></em>, where you know <em><strong>R</strong></em> and you know <em><strong>P</strong></em>, there is no way to find out what the value of &#8216;<em><strong>k</strong></em>&#8216; is. Since there is no point subtraction or point division, you cannot just resolve <em><strong>k = R/P</strong></em>. Also, since you could be doing millions of  point additions, you will just end up on another point on the curve, and you&#8217;d have no way of knowing &#8220;how&#8221; you got there. You can&#8217;t reverse this operation, and you can&#8217;t find the value &#8216;<em><strong>k</strong></em>&#8216; which was multiplied with your point <em><strong>P</strong></em> to give you the resulting point <em><strong>R</strong></em>.</p>
<p style="text-align: left;">This thing where you can&#8217;t find the multiplicand even when you know the original and destination points is the whole basis of the security behind the ECDSA algorithm, and the principle is called a &#8220;<a href="http://en.wikipedia.org/wiki/Trap_door_function">trap door function</a>&#8220;.</p>
<p style="text-align: left;">Now that we&#8217;ve handled the &#8220;basics&#8221;, let&#8217;s talk about the actual ECDSA signature algorithm. For ECDSA, you first need to know your curve parameters, those are <em><strong>a, b, p, N</strong></em> and <em><strong>G</strong></em>. You already know that &#8216;<em><strong>a</strong></em>&#8216; and &#8216;<em><strong>b</strong></em>&#8216; are the parameters of the curve function (<em><strong>y^2 = x^3 + ax + b</strong></em>), that &#8216;<em><strong>p</strong></em>&#8216; is the prime modulus,  and that &#8216;<em><strong>N</strong></em>&#8216; is the number of points of the curve, but there is also &#8216;<em><strong>G</strong></em>&#8216; that is needed for ECDSA, and it represents a &#8216;reference point&#8217; or a point of origin if you prefer. Those curve parameters are important and without knowing them, you obviously can&#8217;t sign or verify a signature. Yes, verifying a signature isn&#8217;t just about knowing the public key, you also need to know the curve parameters for which this public key is derived from.</p>
<p style="text-align: left;">So first of all, you will have a private and a public key.. the private key is a random number (of 20 bytes) that is generated, and the public key is a point on the curve generated from the point multiplication of <em><strong>G</strong></em> with the private key. We set &#8216;<em><strong>dA</strong></em>&#8216; as the private key (random number) and &#8216;<em><strong>Qa</strong></em>&#8216; as the public key (a point), so we have : <em><strong>Qa = dA * G</strong></em> (where <em><strong>G</strong></em> is the point of reference in the curve parameters).</p>
<p style="text-align: left;">So how do you sign a file/message ? First, you need to know that the signature is 40 bytes and is represented by two values of 20 bytes each, the first one is called <em><strong>R</strong></em> and the second one is called <em><strong>S</strong></em>.. so the pair <em><strong>(R, S)</strong></em> together is your ECDSA signature.. now here&#8217;s how you can create those two values in order to sign a file.. first you must generate a random value &#8216;<em><strong>k</strong></em>&#8216; (of 20 byes), and use point multiplication to calculate the point <em><strong>P=k*G</strong></em>. That point&#8217;s <em><strong>x</strong></em> value will represent &#8216;<em><strong>R</strong></em>&#8216;. Since the point on the curve <em><strong>P</strong></em> is represented by its <em><strong>(x, y)</strong></em> coordinates (each being 20 bytes long), you only need the &#8216;<em><strong>x</strong></em>&#8216; value (20 bytes) for the signature, and that value will be called &#8216;<em><strong>R</strong></em>&#8216;. Now all you need is the &#8216;<em><strong>S</strong></em>&#8216; value.</p>
<p style="text-align: left;">To calculate <em><strong>S</strong></em>, you must make a SHA1 hash of the message, this gives you a 20 bytes value that you will consider as a very huge integer number and we&#8217;ll call it &#8216;<em><strong>z</strong></em>&#8216;. Now you can calculate <em><strong>S</strong></em> using the equation :</p>
<p style="text-align: center;"><em><strong>S = k^-1 (z + dA * R) mod p</strong></em></p>
<p style="text-align: left;">Note here the <em><strong>k^-1</strong></em> which is the &#8216;<em><a href="http://en.wikipedia.org/wiki/Modular_multiplicative_inverse">modular multiplicative inverse</a></em>&#8216; of <em><strong>k</strong></em>&#8230; it&#8217;s basically the inverse of <em><strong>k</strong></em>, but since we are dealing with integer numbers, then that&#8217;s not possible, so it&#8217;s a number such that <em><strong>(k^-1 * k ) mod p</strong></em> is equal to 1. And again, I remind you that <em><strong>k</strong></em> is the random number used to generate <em><strong>R</strong></em>, <em><strong>z</strong></em> is the hash of the message to sign, <em><strong>dA</strong></em> is the private key and <em><strong>R</strong></em> is the <em><strong>x</strong></em> coordinate of <em><strong>k*G</strong></em> (where <em><strong>G</strong></em> is the point of origin of the curve parameters).</p>
<p style="text-align: left;">Now that you have your signature, you want to verify it, it&#8217;s also quite simple, and you only need the public key (and curve parameters of course) to do that. You use this equation to calculate a point <strong><em>P</em></strong> :</p>
<p style="text-align: center;"><em><strong>P=  S^-1*z*G + S^-1 * R * Qa</strong></em></p>
<p style="text-align: left;">If the <em><strong>x</strong></em> coordinate of the point <em><strong>P</strong></em> is equal to <em><strong>R</strong></em>, that means that the signature is valid, otherwise it&#8217;s not.</p>
<p style="text-align: left;">Pretty simple, huh? now let&#8217;s see why and how&#8230; and this is going to require some mathematics to verify :</p>
<p style="text-align: left;">We have :</p>
<p style="text-align: left;"><em><strong>P = S^-1*z*G + S^-1 * R *Qa</strong></em></p>
<p style="text-align: left;">but <em><strong>Qa = dA*G</strong></em>, so:</p>
<p style="text-align: left;"><em><strong>P = S^-1*z*G + S^-1 * R * dA*G = S^-1 (z + dA* R) * G</strong></em></p>
<p style="text-align: left;">But the <strong><em>x</em></strong> coordinate of <em><strong>P</strong></em> must match <em><strong>R</strong></em> and <em><strong>R</strong></em> is the <em><strong>x</strong></em> coordinate of <em><strong>k * G</strong></em>, which means that :</p>
<p style="text-align: left;"><em><strong>k*G = S^-1 (z + dA * R) *G</strong></em></p>
<p style="text-align: left;">we can simplify by removing <em><strong>G</strong></em> which gives us :</p>
<p style="text-align: left;"><em><strong>k = S^-1(z + dA * R)</strong></em></p>
<p style="text-align: left;">by inverting <em><strong>k</strong></em> and <strong><em>S</em></strong>, we get :</p>
<p style="text-align: left;"><em><strong>S = k^-1 (z + dA *R)</strong></em></p>
<p style="text-align: left;">and that is the equation used to generate the signature.. so it matches, and that is the reason why you can verify the signature with it.</p>
<p style="text-align: left;">You can note that you need both &#8216;<em><strong>k</strong></em>&#8216; (random number) and &#8216;<em><strong>dA</strong></em>&#8216; (the private key) in order to calculate <em><strong>S</strong></em>, but you only need <em><strong>R</strong></em> and <em><strong>Qa</strong></em> (public key) to validate the signature. And since <em><strong>R=k*G </strong></em>and<strong></strong><em><strong> Qa = dA*G</strong></em> and because of the trap door function in the ECDSA point multiplication (explained above), we cannot calculate <em><strong>dA</strong></em> or <em><strong>k</strong></em> from knowing <em><strong>Qa</strong></em> and <em><strong>R</strong></em>, this makes the ECDSA algorithm secure, there is no way of finding the private keys, and there is no way of faking a signature without knowing the private key.</p>
<p style="text-align: left;">The ECDSA algorithm is used everywhere and has not been cracked and it is a vital part of most of today&#8217;s security.</p>
<p style="text-align: left;">Now I&#8217;ll discuss on how and why the ECDSA signatures that Sony  used in the PS3 were faulty and how it allowed us to gain access to their private key.</p>
<p style="text-align: left;">So you remember the equations needed to generate a signature.. <em><strong>R = k*G</strong></em> and <em><strong>S= k^-1(z + dA*R) mod p</strong></em>.. well this equation&#8217;s strength is in the fact that you have one equation with two unknowns (<em><strong>k</strong></em> and <em><strong>dA</strong></em>) so there is no way to determine either one of those. However, the security of the algorithm is based on its implementation and it&#8217;s important to make sure that &#8216;<em><strong>k</strong></em>&#8216; is randomly generated and that there is no way that someone can guess, calculate, or use a timing attack or any other type of attack in order to find the random value &#8216;<em><strong>k</strong></em>&#8216;. But Sony made a huge mistake in their implementation, they used the same value for &#8216;<em><strong>k</strong></em>&#8216; everywhere, which means that if you have two signatures, both with the same <em><strong>k</strong></em>, then they will both have the same <em><strong>R</strong></em> value, and it means that you can calculate <em><strong>k</strong></em> using two <em><strong>S</strong></em> signatures of two files with hashes <em><strong>z</strong></em> and <em><strong>z&#8217;</strong></em> and signatures <em><strong>S</strong></em> and <em><strong>S&#8217;</strong></em> respectively :</p>
<p style="text-align: left;"><em><strong>S &#8211; S&#8217; = k^-1 (z + dA*R) &#8211; k^-1 (z&#8217; + da*R) = k^-1 (z + da*R &#8211; z&#8217; -dA*R) = k^-1 (z &#8211; z&#8217;)</strong></em></p>
<p style="text-align: left;">So : <em><strong>k = (z &#8211; z&#8217;) / (S &#8211; S&#8217;)</strong></em></p>
<p style="text-align: left;">Once you know <em><strong>k</strong></em>, then the equation  for <em><strong>S</strong></em> because one equation with one unknown and is then easily resolved for <em><strong>dA</strong></em> :</p>
<p style="text-align: left;"><em><strong>dA = (S*k &#8211; z) / R</strong></em></p>
<p style="text-align: left;">Once you know the private key <em><strong>dA</strong></em>, you can now sign your files and the PS3 will recognize it as an authentic file signed by Sony. This is why it&#8217;s important to make sure that the random number used for generating the signature is actually &#8220;cryptographically random&#8221;.  This is also the reason why it is impossible to have a custom firmware above 3.56, simply because since the 3.56 version, Sony have fixed their ECDSA algorithm implementation and used new keys for which it is impossible to find the private key.. if there was a way to find that key, then the security of every computer, website, system may be compromised since a lot of systems are relying on ECDSA for their security, and it is impossible to crack.</p>
<p style="text-align: left;">Finally! I hope this makes the whole algorithm clearer to many of you.. I know that this is still very complicated and hard to understand. I usually try to make things easy to understand for non technical people, but this algorithm is too complex to be able to explain in any simpler terms. After all that&#8217;s why I prefer to call it the MFET algorithm (Mathematics For Extra Terrestrials) <img src="http://kakaroto.homelinux.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p style="text-align: left;">But if you are a developer or a mathematician or someone interested in learning about this because you want to help or simple gain knowledge, then I&#8217;m sure that this contains enough information for you to get started or to at least understand the concept behind this unknown beast called &#8220;ECDSA&#8221;.</p>
<p style="text-align: left;">That being said, I&#8217;d like to thank a few people who helped me understand all of this, one particularly who wishes to remain anonymous, as well as the many wikipedia pages I linked to throughout this article, and Avi Kak thanks to <a href="https://engineering.purdue.edu/kak/compsec/NewLectures/Lecture14.pdf">his paper</a> explaining the mathematics behind ECDSA, and from which I have taken those graph images aboves.</p>
<p style="text-align: left;">P.s: In this article, I used &#8217;20 bytes&#8217; in my text to talk about the ECDSA signature because that&#8217;s what is usually used as it matches the SHA1 hash size of 20 bytes and that&#8217;s what the PS3 security uses, but the algorithm itself can be used with any size of numbers. There may be other inaccuracies in this article, but like I said, I&#8217;m not an expert, I just barely learned all of this in the past week.</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2012/01/how-the-ecdsa-algorithm-works/feed/</wfw:commentRss>
		<slash:comments>158</slash:comments>
		</item>
		<item>
		<title>Status update on the PS3 4.0 HEN</title>
		<link>http://kakaroto.homelinux.net/2012/01/status-update-on-the-ps3-4-0-hen/</link>
		<comments>http://kakaroto.homelinux.net/2012/01/status-update-on-the-ps3-4-0-hen/#comments</comments>
		<pubDate>Thu, 19 Jan 2012 05:00:34 +0000</pubDate>
		<dc:creator><![CDATA[kakaroto]]></dc:creator>
				<category><![CDATA[Development]]></category>
		<category><![CDATA[PS3]]></category>
		<category><![CDATA[4.00]]></category>
		<category><![CDATA[exploit]]></category>
		<category><![CDATA[firmware]]></category>
		<category><![CDATA[HEN]]></category>
		<category><![CDATA[homebrew]]></category>
		<category><![CDATA[jailbreak]]></category>
		<category><![CDATA[status]]></category>

		<guid isPermaLink="false">http://kakaroto.homelinux.net/?p=453</guid>
		<description><![CDATA[Here&#8217;s a &#8220;quick&#8221; status update on the 4.00 HEN (Homebrew ENabler) for PS3. Following my clarifications from almost 2 months ago here, there has been a lot of progress. We have not been slacking off, we&#8217;re a group of about 10 developers working together for the last 2 months, for sometimes 15 hours everyday in [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Here&#8217;s a &#8220;quick&#8221; status update on the 4.00 HEN (Homebrew ENabler) for PS3.</p>
<p>Following my clarifications from almost 2 months ago <a href="http://kakaroto.homelinux.net/2011/11/clarifications-about-3-73-jailbreak/">here</a>, there has been a lot of progress. We have not been slacking off, we&#8217;re a group of about 10 developers working together for the last 2 months, for sometimes 15 hours everyday in order to bring back homebrew support to the latest version of the PS3.</p>
<p>There are three major parts to the HEN, first, getting the packages to install on the PS3, that part is done, completed, tested, debugged, etc.. the second part is to get the apps to run, that one still has major issues&#8230; the last part is something I will not discuss for now (it&#8217;s a surprise) but it&#8217;s about 60% to 70% done (and it has nothing to do with peek&amp;poke and has nothing to do with backup managers or anything like that. This is and will stay a piracy-free solution for the PS3).</p>
<p>Now, running apps is the biggest challenge that we&#8217;ve been working on for the past 2 months. As some of you know, if you&#8217;ve been following me on <a href="http://twitter.com/KaKaRoToKS">Twitter</a>, we originally had hoped for Mathieulh to give us the &#8220;npdrm hash algorithm&#8221; that was necessary to run the apps, but he was reluctant, he kept doing his usual whore so people would kiss his feet (or something else) so he&#8217;d feel good about himself. But in the end, he said that he refuses to give us the needed &#8220;npdrm hash algorithm&#8221; to make it work&#8230; So what I initially thought would be &#8220;this will be released next week&#8221; ended up taking a lot more time than expected, and we&#8217;re still nowhere near ready to make it work.</p>
<p>Mathieulh kept tossing his usual &#8220;riddles&#8221; which he thinks are &#8220;very helpful for those who have a brain&#8221;, and which pisses off anyone who actually does&#8230; so he told us that the solution to all our problems was to look in <em>appldr</em> of the 3.56 firmware.. and that it was something <em>lv1</em> was sending <em>appldr</em> which made the &#8220;hash check&#8221; verified or not&#8230; so we spent one month and a lot of sweat and after killing a few of our brain cells out of exhaustion, we finally concluded that it was all bullshit. After one month of reading assembly code and checking and double-checking our results, we finally were able to confirm that that hash algorithm was NOT in the 3.56 firmware like he told us (at all).</p>
<p>He said  that it was an <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard?banner=no">AES</a> <a href="http://en.wikipedia.org/wiki/OMAC_(cryptography)?banner=no">OMAC</a> hash, but after tracking all the uses of the OMAC functions in appldr, we found that it was not used for the &#8220;hash&#8221;&#8230;  he then said &#8220;oh, I meant <a href="http://en.wikipedia.org/wiki/Hmac?banner=no">HMAC</a>&#8220;, so we do that again and again come up with the same conclusion, then we&#8217;re sure it&#8217;s not in <em>appldr</em>, and then he says &#8220;ah no, it&#8217;s in <em>lv1</em>&#8220;.. have a look for yourself to what he decided to write : <a href="http://www.ps3devwiki.com/index.php?title=Talk:KaKaRoTo_Kind_of_%C2%B4Jailbreak%C2%B4">http://www.ps3devwiki.com/index.php?title=Talk:KaKaRoTo_Kind_of_%C2%B4Jailbreak%C2%B4</a></p>
<p>That happened after the huge twitter fight I had with him for being his usual arrogant ass and claiming that he &#8220;shared&#8221; something (For your information, the code that he shared was not his own, I have proof of that too (can&#8217;t show you the proof because even if I don&#8217;t respect him, I gave him my word to not share what he gave me, and I respect my word) since he forgot to remove the name of the original developer from one of the files&#8230; also it was completely useless and was not used at all, just made me waste a day reading the crappy undocumented code. So why is he still trying to force his &#8220;advice&#8221; through these riddles even after we had that fight? Well to sabotage us and make us lose all those months of hard work!</p>
<p>So anyways, we had all accepted that Mathieulh was full of shit (we knew before, but we gave him the benefit of the doubt) and decided to continue working without considering any of his useless riddles. So we then tried to exploit/decrypt the 3.60+ firmware in order to get the algorithm from there.</p>
<p>Now, a few more weeks later, we finally have succeeded in fully understanding that missing piece from the &#8220;npdrm hash algorithm&#8221;,  and here it is for everyone&#8217;s pleasure with some prerequisite explanation :</p>
<p>A game on the PS3 is an executable file in a format called a &#8220;<a href="http://www.ps3devwiki.com/index.php?title=SELF_File_Format_and_Decryption">SELF</a>&#8220;file (kind of like .exe on windows), those &#8220;self&#8221; files are cryptographically signed and encrypted.. For PSN games (games that do not run from a bluray disc), they need to have an additional security layer called &#8220;NPDRM&#8221;. So a &#8220;npdrm self&#8221; is basically an executable that is encrypted and signed, then re-encrypetd again with some additional information. On 3.55 and lower, we were able to encrypt and sign our own self files so they would look like original (made by sony) &#8220;npdrm self&#8221; files, and the PS3 would run them without problem. However, it wasn&#8217;t really like an original file.. a real NPDRM self file had some additional information that the PS3 simply ignored, it did not check for that information, so we could put anything in it, and it worked. Since the 3.60 version, the PS3 now also validates this additional information, so it can now differentiate between NPDRM self files created by sony and the ones that we create ourselves for homebrew. That&#8217;s the &#8220;npdrm hash algorithm&#8221; that we have been trying to figure out, because once we can duplicate that information in the proper manner, then the PS3 will again think that those files are authentic and will let us play them.</p>
<p>Another important point to explain, I said a few times that the files are &#8220;signed&#8221;.. this means that there is an &#8220;<a href="http://en.wikipedia.org/wiki/ECDSA?banner=no">ECDSA</a> signature&#8221; in the file which the PS3 can verify. The ECDSA signature is something that allows the PS3 to verify if the file has been modified or not.. it is easy to validate the signature, but impossible to create one without having access to the &#8220;private keys&#8221; (think of it like a real signature, you can see your dad&#8217;s signature and recognize it, but you can&#8217;t sign it exactly like him, and you can recognize if your brother tried to forge his signature). So how were we able to sign the self files that were properly authenticated on 3.55? That&#8217;s because this &#8220;ECDSA signature&#8221; is just a very complicated mathematical equation (my head still hurts trying to fully understand it,<del> but I might blog about it in the future and try to explain it in simple terms if people are interested</del> you can learn about it <a href="http://kakaroto.homelinux.net/2012/01/how-the-ecdsa-algorithm-works/">here</a>), and one very important part of this mathematical equation is that you need to use a random number to generate the signature, but Sony had failed and used the same number every time.. by doing that, it was easy to just find the private key (which allows us to forge perfectly the signature) by doing some mathematical equation on it. So to summarize, a &#8220;signed file&#8221; is a file which is digitally signed with an &#8220;ECDSA signature&#8221; that cannot be forged, unless you have the &#8220;private key&#8221; for it, which is impossible to obtain usually, but we were able to obtain it because Sony failed in implementing it properly.</p>
<p>Now, back on topic.. so what is this missing &#8220;npdrm hash algorithm&#8221; that we need? well it turns out that the &#8220;npdrm self&#8221; has a second signature, so it&#8217;s a &#8220;encrypted and signed self file&#8221; with an additional layer of security (the NPDRM layer) which re-encrypts it and re-signs it again. That second signature was not verified in 3.55 and is now verified since the 3.60 version of the PS3 firmware.</p>
<p>One important thing to note is that Sony did NOT make the same mistake with this signature, they always used a random number, so it it technically impossible to figure out the private key for it. To be more exact, this is the exact same case as the .pkg packages you install on the PS3, you need to patch the firmware (making it cfw) so that those .pkg files can be installed, and that&#8217;s because the .pkg files are signed with an ECDSA signature for which no one was able to get the private key. That&#8217;s why we call them &#8220;pseudo-retail packages&#8221; or &#8220;unsigned packages&#8221;.</p>
<p>The signature on the NPDRM self file uses the exact same ECDSA curve and the same key as the one used in PS3 .pkg files, so no one has (or could have) the private key for it. What this means is that, even though we finally figured out the missing piece and we now know how the NPDRM self is built, we simply cannot duplicate it.</p>
<p>The reason we wasted 2 months on this is because Mathieulh lied by saying that he can do it.. remember when the 4.0 was out and I said &#8220;I can confirm that my method still works&#8221; then he also confirmed that his &#8220;npdrm hash algorithm&#8221; still works too? well he didn&#8217;t do anything to confirm, he just lied about it because there is no way that he could have verified it because he doesn&#8217;t have the private key.</p>
<p>I said I will provide proof of the lies that Mathieulh gave us, so here they are : he said it&#8217;s in 3.56, that was a lie, he said it&#8217;s an AES OMAC, that was a lie,  he said it&#8217;s an HMAC, that was a lie, he said it&#8217;s in appldr, that was a lie, he said it&#8217;s in lv1, that was a lie, he said that he can do it, that was a lie, he said that &#8220;it takes one hour to figure it out if you have a brain&#8221;, that was a lie, he said that he verified it to work on 4.0, that was a lie, he said that he had the algorithm/keys, that was a lie, he said that once we know the algorithm used, we can reproduce it, that was a lie, he kept referring to it as &#8220;the hash&#8221;, that was wrong. The proof ? It&#8217;s an ECDSA signature, it&#8217;s not a hash (two very different terms for different things), it was verified by vsh.self, it was not in lv2, or lv1, or appldr, and the private key is unaccessible, so there is no way he could build his own npdrm self files. Now you know the real reason why he refused to &#8220;share&#8221; what he had.. it&#8217;s because he didn&#8217;t have it&#8230;</p>
<p>So why do all this? was it because his arrogance didn&#8217;t allow him to admit not knowing something? or was it because he wanted to make us lose all this time? To me, it looks like pure sabotage, it was misleading information to steer us away from the real part of the code that holds the solution&#8230;. That is of course, if we are kind enough to assume that he knew what/where it was in the first place.  In the end, he wasn&#8217;t smart enough to only lie about things that we could not verify.. now we know (we always knew, but now we have proof to back it) that he&#8217;s a liar, and I do not think that anyone will believe his lies anymore.</p>
<p>&nbsp;</p>
<p>Enough talking about liars and drama queens, back to the 4.0 HEN solution&#8230; so what next? well, we now know that we can&#8217;t sign the file, so we can&#8217;t run our apps on 3.60+ (it can work on 3.56 though). What we will do is look for a different way, a completely new exploit that would allow the files we install to actual run on the PS3. We will also be looking for possible &#8220;signature collisions&#8221; and for that we will need the help of the community, hopefully there is a collision (same random number used twice) which will allow us to calculate the private key, and if that happens, then we can move forward with a release.</p>
<p>When will the &#8220;jailbreak&#8221; be released? If I knew, I&#8217;d tell you, but I don&#8217;t know.. I would have said in last november, then december, then before christmas, then before new year, etc&#8230; but as you can see, it&#8217;s impossible to predict what we will find.. we might get lucky and have it ready in a couple of days, or we may not and it will not be ready for another couple of months.. so all you need to do is : BE PATIENT (and please stop asking me about an estimated release date)!</p>
<p>I would like to thank the team who helped on this task for all this time and who never got discouraged, and I&#8217;d like to thank an anonymous contributor who recently joined us and who was instrumental in figuring it all out. We all believe that freedom starts with knowledge, and that knowledge should be open and available to all, that is why we are sharing this information with the world. We got the confirmation (by finding the public key used and verifying the signatures) yesterday and since sharing this information will not help Sony in any way to block our efforts in a future release, we have decided to share it with you.  We believe in transparency, we believe in openness, we believe in a free world, and we want you to be part of it.</p>
<p>If you want to know more about this ECDSA signature algorithm, <strong>I tried to explain it in a blog post <a href="http://kakaroto.homelinux.net/2012/01/how-the-ecdsa-algorithm-works/">here</a>, also, you can </strong>read <a href="https://engineering.purdue.edu/kak/compsec/NewLectures/Lecture14.pdf">this interesting paper</a> that explains it in detail, and you can also watch Team Fail0verflow&#8217;s <a href="http://www.youtube.com/watch?v=5E0DkoQjCmI">CCC presentation</a> that first explained Sony&#8217;s mistake in their implementation, which made custom firmwares possible.</p>
<p>&nbsp;</p>
<p>Thanks for reading,</p>
<p>KaKaRoTo</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>http://kakaroto.homelinux.net/2012/01/status-update-on-the-ps3-4-0-hen/feed/</wfw:commentRss>
		<slash:comments>297</slash:comments>
		</item>
	</channel>
</rss>

