http://www.arbornetworks.com/asert/category/malware/
HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8
Date: Wed, 23 Jul 2014 11:53:19 GMT
Server: Apache/2.2.26 (Amazon)
Set-Cookie: bb2_screener_=1406116399+54.235.16.159+54.235.16.159; path=/asert/
X-Pingback: http://www.arbornetworks.com/asert/xmlrpc.php
X-Powered-By: PHP/5.3.28
Connection: Close

<!doctype html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en-US"><![endif]-->
<!--[if gt IE 8]><!--><html class="no-js gt-ie8" lang="en-US"><!--<![endif]-->
<head>
	<!-- character encoding utf-8 -->
	<meta charset="UTF-8">
	<!-- google chrome frame -->
	<meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1">
	<!-- title -->
	<title>DDoS &amp; Security Reports  &raquo; Malware</title>
	<!-- search engine robots meta instructions -->
			<meta name="robots" content="all">
		<!-- index search meta data -->
			<meta name="description" content="DDoS &amp; Security Reports Archives">
		<!-- Mobile viewport optimized: h5bp.com/viewport -->
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=1">
	<!-- http://t.co/dKP3o1e -->
	<meta name="HandheldFriendly" content="True">
	<meta name="MobileOptimized" content="320">
	<!-- Sets whether a web application runs in full-screen mode -->
	<meta name="apple-mobile-web-app-capable" content="yes">
	<!-- pingback url -->
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="http://www.arbornetworks.com/asert/xmlrpc.php">
	<!-- RSS Feed -->
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.arbornetworks.com/asert/feed/">
	<!-- Modernizr -->
	<script src="http://www.arbornetworks.com/asert/wp-content/themes/atlas-blog-theme/js/vendor/modernizr-2.6.2.min.js"></script>
	<!-- required for comment functionality -->
		<!-- required for all wordpress themes and placed at the end of the head tag element -->
	<link rel="alternate" type="application/rss+xml" title="DDoS &amp; Security Reports &raquo; Feed" href="http://www.arbornetworks.com/asert/feed/" />
<link rel="alternate" type="application/rss+xml" title="DDoS &amp; Security Reports &raquo; Comments Feed" href="http://www.arbornetworks.com/asert/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="DDoS &amp; Security Reports &raquo; Malware Category Feed" href="http://www.arbornetworks.com/asert/category/malware/feed/" />
<link rel='stylesheet' id='style-css'  href='http://www.arbornetworks.com/asert/wp-content/themes/atlas-blog-theme/style.css?ver=1.0.6' type='text/css' media='all' />
<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js'></script>
<script type='text/javascript' src='http://www.arbornetworks.com/asert/wp-content/plugins/gigpress/scripts/gigpress.js?ver=3.8.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.arbornetworks.com/asert/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.arbornetworks.com/asert/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.8.2" />

<!-- Bad Behavior 2.2.15 run time: 5.378 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1406116399 54.235.16.159 54.235.16.159';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<link href="http://www.arbornetworks.com/asert/?feed=gigpress" rel="alternate" type="application/rss+xml" title="Upcoming events" />
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
	<script type='text/javascript'>
	(function (d, t) {
	  var bh = d.createElement(t), s = d.getElementsByTagName(t)[0];
	  bh.type = 'text/javascript';
	  bh.src = '//www.bugherd.com/sidebarv2.js?apikey=h946gx3b40epcrdhx6yn7w';
	  s.parentNode.insertBefore(bh, s);
	  })(document, 'script');
	</script>
</head>

<body class="archive category category-malware category-23">
	<!--[if lt IE 7]>
		<p class="chromeframe">You are using an outdated browser. <a href="http://browsehappy.com/">Upgrade your browser today</a> or <a href="http://www.google.com/chromeframe/?redirect=true">install Google Chrome Frame</a> to better experience this site.</p>
	<![endif]-->
	<div class="l-full">
		<header class="l-wrapper l-wrapper-banner clearfix" role="banner">
			<div class="l-column-left">
				<h1 class="brand">
																<a href="http://www.arbornetworks.com/asert" id="header-image"><img src="/asert/wp-content/uploads/2013/07/copy-logo1.png" height="45" width="153" alt="DDoS &amp; Security Reports"></a>
										<span class="description"><b class="description-title">DDoS &amp; Security Reports</b><b class="description-subtitle">The Arbor Networks IT Security Blog</b></span>
				</h1>
			</div>

			<div class="l-column-right">
				<nav class="menu-primary-container"><ul id="nav" class="menu-list"><li id="menu-item-5042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-5042"><a href="/asert/">Home</a></li>
<li id="menu-item-5610" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5610"><a href="http://www.arbornetworks.com/asert/map/">Attack Map</a></li>
<li id="menu-item-5043" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5043"><a href="http://www.arbornetworks.com/asert/archives/">Archives</a></li>
<li id="menu-item-5044" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5044"><a href="http://www.arbornetworks.com/asert/about/">About</a></li>
<li id="menu-item-5067" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-5067"><a href="/asert/feed/">RSS</a></li>
</ul></nav>				<!-- <article><a href="http://www.arbornetworks.com/asert/feed/">RSS Feed</a></article> -->
								<form action="http://www.arbornetworks.com/asert" method="get" id="search-form" role="search">
	<label for="s" class="visuallyhidden">Search</label>
	<input type="search" value="" name="s" id="s" placeholder="Search">
	<button type="submit" id="searchsubmit">Submit</button>
</form>
			</div>
		</header>
	</div><div class="l-full l-full-content">
	<div class="l-wrapper l-wrapper-content clearfix">
		<div class="l-column-left">
			<section class="clearfix" id="content" role="main">
									<article class="post-6954 post type-post status-publish format-standard hentry category-botnets category-interesting-research category-malware category-p2p category-threat-analysis" id="post-6954">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2014/06/the-citadel-and-gameover-campaigns-of-5cb682c10440b2ebaf9f28c1fe438468/" rel="bookmark tag" title="The Citadel and Gameover Campaigns of 5CB682C10440B2EBAF9F28C1FE438468 blog post entry">The Citadel and Gameover Campaigns of 5CB682C10440B2EBAF9F28C1FE438468</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/dschwarz">Dennis Schwarz</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2014/06/the-citadel-and-gameover-campaigns-of-5cb682c10440b2ebaf9f28c1fe438468/">06/24/2014</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p>As the infosec community waits for the researchers involved to present their Zeus Gameover <a href="http://www.justice.gov/opa/gameover-zeus.html">take down</a> spoils at the next big conference; ASERT wanted to profile a threat actor that uses both Citadel, “<a href="http://botnetlegalnotice.com/citadel/files/Brief_ms_supp_tro.pdf">a particularly sophisticated and destructive botnet</a>”, and Gameover, “<a href="http://www.justice.gov/opa/documents/dgzc/declaration.pdf">one of the most sophisticated computer viruses in operation today</a>”, to steal banking credentials.</p>
<p><b>Citadel Campaign</b></p>
<p>When a threat actor decides that they would like to start a Citadel campaign they: buy the builder software, build the malware, distribute it to the wild, and then, unfortunately, usually profit. A “login key” in Citadel parlance identifies a specific copy of the builder. This key is also copied into the generated binaries so a link between malware builder and malware is formed. Login keys are supposed to be unique, but due to builders being leaked to the public, some aren’t. For all intents and purposes though, malware researchers use login keys to distinguish between distinct Citadel campaigns.</p>
<p>On October 29, 2013, security researcher Xylitol <a href="https://twitter.com/Xylit0l/status/395269972710014976">tweeted</a> that login key 5CB682C10440B2EBAF9F28C1FE438468 was not associated with any of the defendants in Microsoft’s Citadel botnet <a href="http://botnetlegalnotice.com/citadel">lawsuit</a>:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/06/tweet.png"><img class="alignnone size-full wp-image-6955" alt="tweet" src="/asert/wp-content/uploads/2014/06/tweet-e1402423511212.png" width="295" height="113" /></a></p>
<p>ASERT has the following command and control (C2) URLs linked with that campaign. Most of these were hosted in the 46.30.41.0/24 netblock—owned by EuroByte:</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="165"><b>MD5</b></td>
<td valign="top" width="221"><b>Command and Control URL</b></td>
</tr>
<tr>
<td valign="top" width="165">280ffd0653d150906a65cd513fcafc27</td>
<td valign="top" width="221">http://46.30.41.118/QHasdHJsadbnMQWe/file.php</td>
</tr>
<tr>
<td valign="top" width="165">02968192220a94996ac20ae78f8714a2</td>
<td valign="top" width="221">http://46.30.41.217/street/file.php</td>
</tr>
<tr>
<td valign="top" width="165">f1c8cc93d4e0aabd4713621fe271abc8</td>
<td valign="top" width="221">http://<span style="color: #0000ff;">46.30.41.23</span>/AshjkyuiHKJLuhjka/file.php</td>
</tr>
<tr>
<td valign="top" width="165">80ec7b373282bbaaca52851a46dfcf0b</td>
<td valign="top" width="221">http://46.30.41.51/WBHJSAKJghasjkdJHAGSDAu8/file.php</td>
</tr>
<tr>
<td valign="top" width="165">8c8c69ea9c84c68743368cc66c0962f3</td>
<td valign="top" width="221">http://46.30.41.98/werqfGADSHAJWe/file.php</td>
</tr>
<tr>
<td valign="top" width="165">8d484829fbbfff9aacf94f7d89949ee7</td>
<td valign="top" width="221">http://46.30.43.93/WhjyyuqwvbnqwjhERW/file.php</td>
</tr>
<tr>
<td valign="top" width="165">6646b55acb84ad05f57247e7aaa51b86</td>
<td valign="top" width="221">http://delprizmanet.com/hjkl123678qwe12lkj012/file.php</td>
</tr>
<tr>
<td valign="top" width="165">9c18247e6394f3d07ce9fcc43eb27a35</td>
<td valign="top" width="221">http://sdspropro.co.ua/1123asdASdqeqwoijlkj/file.php</td>
</tr>
<tr>
<td valign="top" width="165">6646b55acb84ad05f57247e7aaa51b86</td>
<td valign="top" width="221">http://sdspropro.co.ua/rrrguudness/file.php</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Using archived copies of the campaign’s configuration files from <a href="http://www.kernelmode.info/forum/viewtopic.php?f=16&amp;t=1465&amp;p=21272#p21274">KernelMode.info</a> and <a href="https://zeustracker.abuse.ch/monitor.php?host=sdspropro.co.ua">ZeuS Tracker</a> it can be seen that the threat actor was using 28 webinjects to target 14 financial institutions in the Netherlands and Germany:</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="443">set_url: *abnamro.nl/nl/ideal/identification.do*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *abnamro.nl/nl/logon/identification*html*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *accessonline.abnamro.com/fss/open/welcome.do*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *banking.berliner-bank.de/trxm/bb*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *banking.postbank.de/rai/login*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *icscards.nl/nlic/portal/ics/login*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *ideal.ing.nl/internetbankieren/SesamLoginServlet*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *ideal.snsreaal.nl/secure/sns/Pages/Payment*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *ideal.snsreaal.nl/secure/srb/Pages/Payment*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *meine.norisbank.de/trxm/noris*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *mijn*.ing.nl/internetbankieren/SesamLoginServlet*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *regiobank.nl/internetbankieren/homepage/secure/homepage/homepage.html</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *regiobank.nl/internetbankieren/secure/login.html</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *regiobank.nl/internetbankieren/secure/login.html*action_prepareStepTwo=Inloggen</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *regiobank.nl/internetbankieren/secure/logout/logoutConfirm.html</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *snsbank.nl/mijnsns/bankieren/secure/betalen/overschrijvenbinnenland.html</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *snsbank.nl/mijnsns/bankieren/secure/verzendlijst/verzendlijst.html*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *snsbank.nl/mijnsns/homepage/secure/homepage/homepage.html</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *snsbank.nl/mijnsns/secure/login.html</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *snsbank.nl/mijnsns/secure/login.html*action_prepareStepTwo=Inloggen</td>
</tr>
<tr>
<td valign="top" width="443">set_url: *snsbank.nl/mijnsns/secure/logout/logoutConfirm.html</td>
</tr>
<tr>
<td valign="top" width="443">set_url: http://www.rabobank.nl/bedrijven/uitgelogd/*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: http://www.rabobank.nl/particulieren/uitgelogd*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: https*abnamro.nl*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: https*de*portal/portal*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: https*paypal*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: https://bankieren.rabobank.nl/klanten*</td>
</tr>
<tr>
<td valign="top" width="443">set_url: https://betalen.rabobank.nl/ideal-betaling*</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>As an example and reference for later, here are a few snippets of one of the webinjects:</p>
<pre><a href="http://alkali.arbornetworks.com/asert/wp-content/uploads/2014/06/webinject1.png"><img class="alignnone size-full wp-image-6956" alt="webinject1" src="/asert/wp-content/uploads/2014/06/webinject1-e1402423848995.png" width="475" height="491" />

</a></pre>
<p>Per ZeuS Tracker and VirusTotal passive DNS data, it seems as if this particular campaign started fizzling out around the end of 2013.</p>
<p><b>Zeus Gameover Campaign</b></p>
<p>As noted by security researcher Brian Krebs, the “<a href="http://krebsonsecurity.com/2014/06/operation-tovar-targets-gameover-zeus-botnet-cryptolocker-scourge/">curators of Gameover also have reportedly loaned out sections of their botnet to vetted third-parties who have used them for a variety of purposes</a>.” Analyzing webinject data from the global configuration file that was being distributed on the peer-to-peer network shortly before its takedown on June 2, 2014; it looks as if the threat actor behind Citadel login key 5CB682C10440B2EBAF9F28C1FE438468 had joined the ranks of Gameover’s coveted third party. Checking historical versions of the config show that this collaboration goes back to at least January 2014.</p>
<p>In the analyzed configuration, there was 1324 total web injects targeting many financial institutions. 12 of these were associated with the profiled actor and will be focused on here.  First, the banking credentials extracted by this group of injects were being exfiltrated to IP address <span style="color: #0000ff;">46.30.41.23</span>. This IP had previously hosted a C2 panel of the above Citadel campaign. Second, there were eight financial institutions targeted; seven of which were a subset of the previous campaign:<span style="line-height: 1.5em;"> </span></p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="443">match: ^https.*?de.*?portal/portal.*?</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?regiobank.nl/internetbankieren/secure/login.html</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?regiobank.nl/internetbankieren/homepage/secure/homepage/homepage.html</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?bankieren.rabobank.nl/klanten.*?</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?meine.deutsche-bank.de/trxm/db.*?</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?meine.norisbank.de/trxm/noris.*?</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?banking.berliner-bank.de/trxm/bb.*?</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?banking.postbank.de/rai/login.*?</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?snsbank.nl/mijnsns/secure/login.html</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?snsbank.nl/mijnsns/homepage/secure/homepage/homepage.html</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?snsbank.nl/mijnsns/bankieren/secure/betalen/overschrijvenbinnenland.html</td>
</tr>
<tr>
<td valign="top" width="443">match: ^https://.*?snsbank.nl/mijnsns/bankieren/secure/verzendlijst/verzendlijst.html.*?</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Finally, the coding style, function/variable naming, and formatting of the webinjects themselves were akin to the above and looked to have been retrofitted from Citadel to work with Gameover:</p>
<p><a href="http://alkali.arbornetworks.com/asert/wp-content/uploads/2014/06/webinject2.png"><img class="alignnone size-full wp-image-6957" alt="webinject2" src="/asert/wp-content/uploads/2014/06/webinject2-e1402424135905.png" width="473" height="271" /></a></p>
<p>The drop site itself is a Ruby on Rails application that logs and displays the data sent from infected hosts:</p>
<p><a href="http://alkali.arbornetworks.com/asert/wp-content/uploads/2014/06/bots.png"><img class="alignnone size-full wp-image-6958" alt="bots" src="/asert/wp-content/uploads/2014/06/bots-e1402424325152.png" width="759" height="428" /></a></p>
<p>&nbsp;</p>
<p>Each entry can be formatted a bit better by clicking “Show”:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/06/bot_detail.png"><img class="alignnone size-full wp-image-6959" alt="bot_detail" src="/asert/wp-content/uploads/2014/06/bot_detail-e1402424437609.png" width="740" height="687" /></a></p>
<p>Some of the logging text seen in these screenshots—for example: “Wait tan from holder”—can be correlated back to the earlier snippets of the webinjects.</p>
<p>The initial entries in the list are dated from around March and June of 2012, but these entries may be old or in error as there is a jump to December 2013 and then consistent logging from there. At the time of this writing there were approximately 1089 entries.</p>
<p>In addition, up to five Jabber IDs can be configured in the application and then messaged on receipt of freshly stolen credentials:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/06/jabber.png"><img class="alignnone size-full wp-image-6960" alt="jabber" src="/asert/wp-content/uploads/2014/06/jabber-e1402424529913.png" width="653" height="188" /></a></p>
<p>At the time of writing, the configured Jabber IDs were:</p>
<ul>
<li>bro2@jabbim.cz</li>
<li>airhan@jabbim.cz</li>
<li>fapache@jabber.me</li>
</ul>
<p>But, there wasn’t much open source intelligence on these.</p>
<p><b>Conclusion</b></p>
<p>Pondering on the data available…this threat actor ran a fairly targeted Citadel campaign focusing on a small set of banks in the Netherlands and Germany. Based on ZeuS Tracker data, most of the Citadel C2s became active after the start of Microsoft’s lawsuit on June 5, 2013, so this likely explains the exclusion of 5CB682C10440B2EBAF9F28C1FE438468 from the legal notices.</p>
<p>The Citadel campaign looks like it closed up shop at the end of 2013. In December 2013, logging on the out-of-band Gameover drop site started in earnest, so this might be when the threat actor moved to stealing banking credentials via Gameover.</p>
<p>So far, it seems as if this threat actor has escaped the clutches of the great Citadel take-down and, since the drop site is still receiving stolen credentials, has evaded the Zeus Gameover take-down as well. In the spirit of &#8220;see something, say something&#8221; and with the recency of the legal action, ASERT has provided the data available to our law enforcement contacts.</p>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2014/06/the-citadel-and-gameover-campaigns-of-5cb682c10440b2ebaf9f28c1fe438468/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/botnets/" title="View all posts in Botnets" rel="category tag">Botnets</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/interesting-research/" title="View all posts in Interesting Research" rel="category tag">Interesting Research</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/p2p/" title="View all posts in P2P" rel="category tag">P2P</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/threat-analysis/" title="View all posts in threat analysis" rel="category tag">threat analysis</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-6901 post type-post status-publish format-standard hentry category-backdoors category-botnets category-encryption category-interesting-research category-malware category-phishing category-reverse-engineering category-threat-analysis category-uncategorized" id="post-6901">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2014/06/illuminating-the-etumbot-apt-backdoor/" rel="bookmark tag" title="Illuminating The Etumbot APT Backdoor blog post entry">Illuminating The Etumbot APT Backdoor</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/arbor-networks">Arbor Networks</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2014/06/illuminating-the-etumbot-apt-backdoor/">06/06/2014</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p align="left">The Arbor Security Engineering Response Team (ASERT) has released a research paper concerning the Etumbot malware.</p>
<p align="left"><span style="line-height: 1.5em;">Etumbot is a backdoor used in targeted attacks since at least March 2011. Indicators suggest that Etumbot is associated with the Numbered Panda group, also known as IXEHSE, DynCalc, and APT12.  </span><span style="line-height: 1.5em;">Although previous research has covered related malware, little has been publicly discussed regarding Etumbot’s capabilities. </span></p>
<p align="left">Indicators suggest that the Etumbot dropper is delivered via spear phishing and is contained inside an archive file intended to be of interest to the target. The attackers use the Unicode Right to Left Override technique and document icons to disguise malicious executable content as document files. Once the dropper is executed, the backdoor is activated and a distraction file of interest to the target is opened for viewing.  <span style="line-height: 1.5em;">ASERT has observed several Etumbot samples using distraction documents involving Taiwanese and Japanese topics of interest, and has also observed recent development activity which indicates that attack campaigns are ongoing.</span></p>
<p align="left">Once installed, the backdoor connects to it&#8217;s Command &amp; Control server and receives an encryption key. RC4 encryption, along with HTTP transactions intended to blend in with typical traffic are used for backdoor communications. Etumbot&#8217;s core functionality allows for the execution of commands and the capability to upload and download files.</p>
<p align="left">Attackers attempt to obfuscate the malware by using a technique known as &#8220;byte strings&#8221;, also known as &#8220;string stacking&#8221;. Through the use of ASERT tools, these byte strings are deobfuscated and revealed herein.</p>
<p align="left">A timeline containing distraction documents along with backdoor and dropper indicators to include MD5 hashes, Command &amp; Control server information, file system and process artifacts are included herein. Some use of the HTran connection bouncer has been observed, indicating that selected C&amp;C&#8217;s were simply compromised sites used to relay traffic elsewhere.</p>
<p align="left"><span style="line-height: 1.5em;">It is our aim to assist incident response and security teams and to provide meaningful insight into this threat.</span></p>
<h1 align="left">Download the full report: <a href="/asert/wp-content/uploads/2014/06/ASERT-Threat-Intelligence-Brief-2014-07-Illuminating-Etumbot-APT.pdf">ASERT Threat Intelligence Brief 2014-07: Illuminating the Etumbot APT Backdoor</a></h1>
<h1 align="left"></h1>
<p align="left">
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2014/06/illuminating-the-etumbot-apt-backdoor/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/malware/backdoors/" title="View all posts in Backdoors" rel="category tag">Backdoors</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/botnets/" title="View all posts in Botnets" rel="category tag">Botnets</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/encryption/" title="View all posts in Encryption" rel="category tag">Encryption</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/interesting-research/" title="View all posts in Interesting Research" rel="category tag">Interesting Research</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/phishing/" title="View all posts in Phishing" rel="category tag">Phishing</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/reverse-engineering/" title="View all posts in Reverse Engineering" rel="category tag">Reverse Engineering</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/threat-analysis/" title="View all posts in threat analysis" rel="category tag">threat analysis</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-6837 post type-post status-publish format-standard hentry category-malware category-reverse-engineering category-threat-analysis" id="post-6837">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2014/06/the-best-of-both-worlds-soraya/" rel="bookmark tag" title="The Best Of Both Worlds &#8211; Soraya blog post entry">The Best Of Both Worlds &#8211; Soraya</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/mbing">Matthew Bing</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2014/06/the-best-of-both-worlds-soraya/">06/02/2014</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p><strong>By Matt Bing &amp; Dave Loftus</strong></p>
<p>Arbor Networks&#8217; ASERT has recently discovered a new malware family that combines several techniques to steal payment card information. Dubbed Soraya, meaning &#8220;rich,&#8221; this malware uses memory scraping techniques similar to those found in Dexter to target point-of-sale terminals. Soraya also intercepts form data sent from web browsers, similar to the Zeus family of malware. Neither of these two techniques are new, but we have not seen them used together in the same piece of malware.</p>
<p><strong>Initialization</strong></p>
<p>Soraya begins by injecting itself as a thread on several system processes, including the Windows Shell <code>explorer.exe</code>. The malware maintains persistence by writing a copy of itself into the AppData directory with the name <code>servhost.exe</code>, and setting itself to execute with the registry key <code>HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\WinServHost</code>.</p>
<p>New processes launched from the infected explorer.exe shell, notably web browsers, will have Soraya code injected. The malware does this by hooking calls to the <code>ntdll.dll!NtResumeThread()</code> function, which is responsible for process initialization. The function <code>ntdll!NtQueryDirectoryFile()</code> is also hooked to hide displaying the <code>servhost.exe</code> file. Both of these techniques are similar to functionality found in the Zeus family of malware.</p>
<p><strong>Memory Scraping</strong></p>
<p>One thread on the system is responsible for scraping memory for credit card data. It does this by creating the mutex <code>POSMainMutex</code> to ensure it is the only thread operating. Every 5 seconds, the thread will iterate through the list of processes with <code>Process32Next()</code>, ignoring system processes with names shown in Figure 1. It will check memory regions for each process with <code>VirtualQueryEx()</code>, ignoring those with the <code>PAGE_NOACCESS</code> or <code>PAGE_GUARD</code> values set. Valid memory regions are copied with <code>ReadProcessMemory()</code> and examined for payment card data. The Dexter malware family uses a similar technique.</p>
<pre>System
[System Process]
svchost.exe
dwm.exe
winlogon.exe
explorer.exe
taskhost.exe
taskeng.exe
smss.exe
MOM.exe
CCC.exe
conhost.exe
services.exe</pre>
<blockquote>
<p style="text-align: center;"><strong>Figure 1 &#8211; Process Names Ignored For Memory Scraping</strong></p>
</blockquote>
<p>Soraya will scan memory for patterns matching valid payment card data. It does not use regular expresssions, but matches the format code &#8220;B&#8221;, patterns of digit strings, and the standard &#8220;^&#8221; separator as defined in <a title="ISO/IEC 7813" href="http://en.wikipedia.org/wiki/ISO/IEC_7813">ISO/IEC 7813</a>. One unique aspect of Soraya is that is uses the Luhn algorithm to identify valid credit and debit card numbers, a new technique for memory scraping point-of-sale malware. The <a title="Luhn algorithm" href="http://en.wikipedia.org/wiki/Luhn">Luhn algorithm</a> leverages a simple checksum over credit card numbers to ensure that they are valid. Track 1 and track 2 data are packaged and sent to the command and control (C2) site using the protocol described below as a &#8220;mode 5&#8243; message.</p>
<pre></pre>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/luhn2.png"><img class="alignnone size-medium wp-image-6849" alt="luhn2" src="/asert/wp-content/uploads/2014/05/luhn2-223x300.png" width="223" height="300" /></a></p>
<p style="text-align: center;"><strong>Figure 2 &#8211; Luhn Algorithm</strong></p>
<p><strong>Form Grabbing</strong></p>
<p>After injecting itself, Soraya will check if the new process is a web browser by locating several unique DLLs. The functions targeted are those responsible for sending POST data, which are intercepted and sent to the C2 as a &#8220;mode 4&#8243; message described below. All POST data is captured, not just payment card information.</p>
<p>Internet Explorer has the function <code>wininet!HttpSendRequestW()</code> hooked, and will check<code>InternetQueryOptionA()</code> with INTERNET_OPTION_URL to see if &gt; 1 byte is being sent. If so, data is copied and exfiltrated.</p>
<p>Firefox has the function <code>nss3!PR_Write</code> hooked. The hooking function will check for the &#8220;POST&#8221; verb, then exfiltrate data.</p>
<p>Chome has the function <code>nspr4.dll!PR_Write()</code> hooked. The hooking function will also check for the &#8220;POST&#8221; verb, then exfiltrate data. Soraya will also manually examine <code>chrome.dll</code> and similarly hook unexported functions.</p>
<p>Soraya hooks these functions by overwriting the function prologue with the instructions <code>PUSH</code> and <code>RET</code>, essentially providing a new saved return address and returning to it. As an example, this is what a normal, unhooked version of Firefox&#8217;s <code>nss3!PR_Write</code> looks like in WinDBG.</p>
<p style="text-align: center;"><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/firefox1_unhooked.png"><img class="size-medium wp-image-6851 aligncenter" alt="firefox1_unhooked" src="/asert/wp-content/uploads/2014/05/firefox1_unhooked-300x73.png" width="300" height="73" /></a></p>
<p>After being injected with Soraya the first 6 bytes of the function are overwritten with <code>PUSH 62042h</code>, the address of the intercept function, and <code>RET</code> which returns to that address.</p>
<p style="text-align: center;"><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/firefox2_hooked.png"><img class="size-medium wp-image-6853 aligncenter" alt="firefox2_hooked" src="/asert/wp-content/uploads/2014/05/firefox2_hooked-300x73.png" width="300" height="73" /></a></p>
<p>The intercept function itself at 0&#215;62042 will check if EBX points to the string &#8220;POST&#8221; at 0x6206A. Before this, it will execute the original PR_Write function by calling the address at 0x640EC.</p>
<p style="text-align: center;"><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/firefox3_hookedfunc.png"><img class="size-medium wp-image-6854 aligncenter" alt="firefox3_hookedfunc" src="/asert/wp-content/uploads/2014/05/firefox3_hookedfunc-300x160.png" width="300" height="160" /></a></p>
<p>The code at 0x640EC to execute the original <code>PR_Write</code> function uses a similar technique. The first six bytes of the original <code>PR_Write</code> function were saved and are executed before returning past the 6 bytes of the hook code that now constitute <code>PR_Write</code>.</p>
<p>The first 6 bytes of the original <code>PR_Write</code> function were saved and are executed before returning past the 6 bytes into the original <code>PR_Write</code> function.</p>
<p style="text-align: center;"><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/firefox4_hookedret.png"><img class="size-medium wp-image-6855 aligncenter" alt="firefox4_hookedret" src="/asert/wp-content/uploads/2014/05/firefox4_hookedret-300x39.png" width="300" height="39" /></a></p>
<p>Soraya uses this same technique to hook the <code>ntdll.dll!NtResumeThread()</code> and <code>ntdll!NtQueryDirectoryFile()</code> functions, in a very similar fashion to the Citadel malware.</p>
<p><strong>Command and Control Communication</strong></p>
<p>One thread on the system is responsible for communicating with the command and control server. It does this by creating the mutex <code>JDWJDd8a2</code> and checking in with the C2 every 5 minutes by posting data to a specific URL embedded in the executable. The C2 site and URL are encoded in the executable by XORing with the Unicode string &#8220;SorayaV1.1&#8243;.</p>
<p>To discourage casual browsing, the C2 backend will only accept messages with a specific User-Agent set. In the samples we&#8217;ve identified, this value has been static, which we believe is unique to this particular campaign.</p>
<p>Several HTTP POST variables may be sent to the C2:</p>
<p><strong>mode</strong> &#8211; Identifies the type of message the malware is sending to the C2<br />
<strong>uid</strong> &#8211; A unique idenifier string generated by the malware, which is stored in the registry at <code>HKCU\SOFTWARE\Microsoft\Soraya2\UID</code><br />
<strong>osname</strong> &#8211; A hex encoded string of the major version, minor version, service pack version, and &#8220;x86&#8243; or &#8220;x64&#8243;<br />
<strong>compname</strong> &#8211; A hex encoded string of the current username and computer name<br />
<strong>browser</strong> &#8211; One of &#8220;FireFox&#8221;, &#8220;Chrome&#8221;, &#8220;InternetExplorer&#8221; depending on the browser generating the message<br />
<strong>url</strong> &#8211; A hex encoded URL for which data is being submitted<br />
<strong>grabbed</strong> &#8211; Raw data captured by a POST to a URL<br />
<strong>compinfo</strong> &#8211; Same as compname<br />
<strong>ccnum</strong> &#8211; Hex encoded credit card data<br />
<strong>type</strong> &#8211; &#8220;Track 1&#8243; or &#8220;Track 2&#8243; depending on the data captured<br />
<strong>track</strong> &#8211; Hex encoded raw track data<br />
<strong>comid</strong> &#8211; A numerical job ID set by the C2</p>
<p>The following &#8220;mode&#8221; values have been identified:</p>
<p><strong>Mode 1</strong> &#8211;  Identify a new bot to the C2<br />
<strong>Mode 2</strong> - Receive the latest commands from the C2<br />
<strong>Mode 3</strong> &#8211; Tell C2 that the current job has completed<br />
<strong>Mode 4</strong> &#8211; Add grabbed form information<br />
<strong>Mode 5</strong> &#8211; Send skimmed track information to the Command &amp; Control</p>
<p>The thread responsible for C2 communication will send &#8220;mode 1&#8243;, &#8220;2&#8243;, and &#8220;3&#8243; messages. In response to a &#8220;mode 2&#8243; check for the latest commands, the server will respond with one of the following:</p>
<p><strong>vweb</strong> &#8211; Open a URI with <code>ShellExecuteA()</code><br />
<strong>vstealth</strong> &#8211; Stealthily open a URL invisible to the user with <code>URLDownloadToFileW(tmpfile)</code><br />
<strong>down</strong> &#8211; Download a file from a URL and execute it<br />
<strong>update</strong> &#8211; Download a from for a URL, respond with a &#8220;mode 3&#8243; complete message, spawn a new process with the executable, then self destruct<br />
<strong>uninstall</strong> &#8211; Respond with a &#8220;mode 3&#8243; message, then self destruct</p>
<p>When Soraya is installed, it sends a POST request to the C2 server. The request consists of a &#8220;mode 1&#8243; message, the operating system version, computer name, and unique UID identifying the bot.</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/installation.png"><img class="alignnone size-medium wp-image-6889" alt="installation" src="/asert/wp-content/uploads/2014/05/installation-300x172.png" width="300" height="172" /></a></p>
<p>Soraya sends a &#8220;mode 2&#8243; message to obtain any pending commands from the C2 server.</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/mode2.png"><img class="alignnone size-medium wp-image-6891" alt="mode2" src="/asert/wp-content/uploads/2014/05/mode2-300x173.png" width="300" height="173" /></a></p>
<p>Any web browser process infected with Soraya is capable of sending &#8220;mode 4&#8243; messages. The thread responsible for memory scraping sends &#8220;mode 5&#8243; messages, as seen below:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/mode5.png"><img class="alignnone size-medium wp-image-6885" alt="mode5" src="/asert/wp-content/uploads/2014/05/mode5-300x193.png" width="300" height="193" /></a></p>
<p><strong>Web Panel / Backend</strong></p>
<p>Version 1.0 of the Soraya panel consists of the following files:</p>
<p><em>login.php</em><br />
The login.php page is the administrative login page used for the panel. This file accepts the control panel password sent via the &#8220;p&#8221; parameter in a GET request. If the login is successful, session variables are set and the administrator is redirected to &#8220;statistics.php&#8221;.</p>
<p><em>auth.php</em><br />
This file stores session information.</p>
<p><em>statistics.php</em><br />
The statistics.php page provides a general overview of any bots that are able to check into the C2. The total number of bots online, the number of infections per country, and the last 25 connections are displayed on this page.</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/bot.png"><img class="alignnone size-medium wp-image-6880" alt="bot" src="/asert/wp-content/uploads/2014/05/bot-300x150.png" width="300" height="150" /></a></p>
<p><em>bot.php</em><br />
Soraya infections checking into the command and control send POST requests to the file &#8220;bot.php&#8221;. Soraya is designed to send a specific user-agent that acts as a connection password to the panel. If correct, this file accepts new bot registrations to the panel, requests for new commands that should be executed by Soraya bots, and acknowledgments that commands have been successfully completed. It also accepts stolen form data and track data. All of this information is subsequently stored in the backend database, which is typical of many C2s.</p>
<p><em>commands.php</em><br />
The &#8220;commands.php&#8221; page is used to send commands to Soraya bots that have registered with the control panel. Commands include the ability to open arbitrary URLs that are visible or not visible to the victim, download and execute files, update a bot, or request that a bot uninstall itself. This page also displays the number of times a bot should perform a particular command, and the total number of times a command has been performed.</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/cmds.png"><img class="alignnone size-medium wp-image-6883" alt="cmds" src="/asert/wp-content/uploads/2014/05/cmds-300x151.png" width="300" height="151" /></a></p>
<p><em>logout.php</em><br />
This page ends the current session.</p>
<p><em>settings.php</em><br />
The panel password, database information, and connection password used by the malware are defined in this file.</p>
<p><em>formgrab.php</em><br />
Displays a list of bots that have acquired form data. The bot identifier, IP address, browser used, URL visted, and date form data was received are displayed on this page.</p>
<p><em>viewlog.php</em><br />
Displays the exfiltrated POST data and their respective URLs.</p>
<p><em>trackgrab.php</em><br />
Displays stolen card numbers, raw track data, the type of track data exfiltrated, and computer name of the compromised machine. This page is also used to save the track data to a dump file using the format &#8220;dump-YYYY-mm-dd.txt&#8221;. Panel administrators have the ability to delete track data from the database using this page.</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/track.png"><img class="alignnone size-medium wp-image-6884" alt="track" src="/asert/wp-content/uploads/2014/05/track-300x149.png" width="300" height="149" /></a></p>
<p><em>funcs.php</em><br />
Contains miscellanous functions used by other components of the control panel.</p>
<p><em>/inc/GeoIP.dat</em><br />
The country code of compromised machines are identified when a bot registers with the control panel. This file contains MaxMind GeoIP data that is used to identify the country.</p>
<p><em>/inc/geoip.inc</em><br />
Contains PHP code from MaxMind that is used to map IP addresses of compromised machines to their respective countries.</p>
<p><strong>Payment Card Data</strong></p>
<p>Our analysis of Soraya revealed that thousands of payment cards have been compromised. We were able to acquire track data from one command and control after the attacker temporarily placed the card data in a publicly accessible location.</p>
<p>An analysis of the track 1 data revealed the country of origin of the financial institutions issuing the cards that were compromised:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/countries.png"><img class="alignnone size-medium wp-image-6874" alt="countries" src="/asert/wp-content/uploads/2014/05/countries-300x180.png" width="300" height="180" /></a></p>
<p>Our analysis revealed that 65.16% of the payment cards compromised were issued by financial institutions located in the United States. Costa Rican financial institutions were also deeply affected, having issued 21.45% of cards that were compromised. Canadian financial institutions issued 11.20%, South African institutions issued 0.82%, Brazilian and Russian based institutions each issued 0.40%, and institutions in the UK, Poland, Mexico, and Panama each issued 0.14%.</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/05/type.png"><img class="alignnone size-medium wp-image-6876" alt="type" src="/asert/wp-content/uploads/2014/05/type-300x214.png" width="300" height="214" /></a></p>
<p>Additionally, we were able to determine the type of many cards compromised by Soraya. Debit cards were the most compromised, representing 63.934% of the track 1 data obtained. Credit cards consisted of 34.153%. We were unable to determine the type of cards for 1.913%.</p>
<p><strong>Conclusion</strong></p>
<p>Soraya has clearly taken inspiration from the Dexter and the Zeus families. The &#8220;split brain&#8221; functionality of both memory scraping and form grabbing is Soraya&#8217;s most unique trait. In past campaigns, memory scrapers have been uniquely targeted at point-of-sale devices and form grabbers have been uniquely targeted at online bank users.</p>
<p><strong style="line-height: 1.5em;">MD5s</strong></p>
<p>To support further investigation by researchers, below are the MD5 values for samples we&#8217;ve identified as Soraya.</p>
<pre>a95dacba360e45fc03769ea55c546a7b
1483d0682f72dfefff522ac726d22256
1661aab32a97e56bc46181009ebd80c9</pre>
<p>The following MD5 hashes are associated with the panel files:</p>
<pre>1df57b31a4bca7a1c93ecd50bd8fd8bf auth.php
67a6bf5b9b23c6588c756c2f2a74635c bot.php
c3e9d1dda7f1f71b4e1e2ead7c7406dd commands.php
515232eb815b7bafab57c7cdca437a7a formgrab.php
ff8cc2e792a59d068f35cb3eb2ea69bc funcs.php
b64ea0c3e9617ccd2f22d8568676a325 /inc/GeoIP.dat
d2ba8b27dc886b36e0e8ec10e013d344 /inc/geoip.inc
c94285b73f61204dcee5614f91aaf206 login.php
d9e7f69822821188eac36b82928de2a0 logout.php
e5dadfff0bc1f2113fedcf4eb3efd02f settings.php
22888a7b45adc60593e4fc2fe031be98 statistics.php
ecf98e76c99f926e09246b02e53f2533 style.css
3f391740cbbd9623c4dfb19fb203f5bc trackgrab.php
ea9a242932dfa03084db3895cf798be5 viewlog.php</pre>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2014/06/the-best-of-both-worlds-soraya/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/reverse-engineering/" title="View all posts in Reverse Engineering" rel="category tag">Reverse Engineering</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/threat-analysis/" title="View all posts in threat analysis" rel="category tag">threat analysis</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-6817 post type-post status-publish format-standard hentry category-ddos-attacks category-backdoors category-botnets category-forensics category-interesting-research category-kill-chain category-malware category-threat-analysis category-trojan-horses category-viruses category-vulnerabilities tag-alina tag-blackpos tag-bruteforce tag-chewbacca tag-jackpos tag-point-of-sale tag-pos tag-poscardstealer tag-retail tag-tor tag-vnc tag-vskimmer" id="post-6817">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2014/05/into-the-light-of-day-uncovering-ongoing-and-historical-point-of-sale-malware-and-attack-campaigns/" rel="bookmark tag" title="Into the Light of Day: Uncovering Ongoing and Historical Point of Sale Malware and Attack Campaigns blog post entry">Into the Light of Day: Uncovering Ongoing and Historical Point of Sale Malware and Attack Campaigns</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/cwilson">cwilson</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2014/05/into-the-light-of-day-uncovering-ongoing-and-historical-point-of-sale-malware-and-attack-campaigns/">05/12/2014</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p><span style="font-size: 14px; line-height: 1.5em;">Point of Sale systems that process debit and credit cards are still being attacked with an increasing variety of malware. Over the last several years PoS attack campaigns have evolved from opportunistic attacks involving crude theft of card data with no centralized Command &amp; Control, through memory scraping PoS botnets with centralized C&amp;C and most recently to highly targeted attacks that require a substantial amount of lateral movement and custom malware created to blend in with the target organization.</span></p>
<p align="left">While contemporary PoS attackers are still successful in using older tools and methodologies that continue to bring results due to poor security, the more ambitious threat actors have moved rapidly, penetrating organizational defenses with targeted attack campaigns. Considering the substantial compromise lifespans within organizations that have active security teams and managed infrastructure, indicators shared herein will be useful to detect active as well as historical compromise.</p>
<p align="left">Organizations of all sizes are encouraged to seriously consider a significant security review of any PoS deployment infrastructure to detect existing compromises as well as to strengthen defenses against an adversary that continues to proliferate and expand attack capabilities.</p>
<p><span style="font-size: 14px; line-height: 1.5em;">In addition to recent publications discussing Dexter and Project Hook malware activity, Arbor ASERT is currently tracking other PoS malware to include Alina, Chewbacca, Vskimmer, JackPoS and other less popular malware such as variants of POSCardStealer and others. Attack tactics shall also be explored through analysis of an attackers toolkit.</span></p>
<p><span style="line-height: 1.5em;">The longevity and extent of attack campaigns is a serious concern. In organizations with security teams and well managed network infrastructure, point of sale compromises have proliferated for months prior to detection. If attackers are able to launch long-running campaigns in such enterprise retail environments, one can conclude that many other organizations with less mature network and infrastructure management are also at serious risk. A sample of high-profile incident timelines, showing the date of the initial compromise, compromise timespan and compromise scope (number stores in this context) is included to highlight this point.</span></p>
<h1>Download the full report: <a href="http://pages.arbornetworks.com/rs/arbor/images/Uncovering_PoS_Malware.pdf" target="_blank">ASERT Threat Intelligence Brief 2014-06 Uncovering PoS Malware and Attack Campaigns</a><a href="http://alkali.arbornetworks.com/asert/wp-content/uploads/2014/05/ASERT-Threat-Intelligence-Brief-2014-6-Uncovering-PoS.pdf"><br />
</a></h1>
<p>ASERT Threat Intelligence would like to thank fellow ASERT team members Dave Loftus, Alison Goodrich, Kirk Soluk and Matt Bing and also wishes to thank David Dunn of FIS Global and the Shadowserver Foundation for providing additional information.</p>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2014/05/into-the-light-of-day-uncovering-ongoing-and-historical-point-of-sale-malware-and-attack-campaigns/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li><li><a href="http://www.arbornetworks.com/asert/tag/alina/" rel="tag">Alina</a>, <a href="http://www.arbornetworks.com/asert/tag/blackpos/" rel="tag">BlackPoS</a>, <a href="http://www.arbornetworks.com/asert/tag/bruteforce/" rel="tag">bruteforce</a>, <a href="http://www.arbornetworks.com/asert/tag/chewbacca/" rel="tag">Chewbacca</a>, <a href="http://www.arbornetworks.com/asert/tag/jackpos/" rel="tag">JackPOS</a>, <a href="http://www.arbornetworks.com/asert/tag/point-of-sale/" rel="tag">Point of Sale</a>, <a href="http://www.arbornetworks.com/asert/tag/pos/" rel="tag">POS</a>, <a href="http://www.arbornetworks.com/asert/tag/poscardstealer/" rel="tag">PoSCardStealer</a>, <a href="http://www.arbornetworks.com/asert/tag/retail/" rel="tag">retail</a>, <a href="http://www.arbornetworks.com/asert/tag/tor/" rel="tag">tor</a>, <a href="http://www.arbornetworks.com/asert/tag/vnc/" rel="tag">VNC</a>, <a href="http://www.arbornetworks.com/asert/tag/vskimmer/" rel="tag">vSkimmer</a></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/ddos-attacks/" title="View all posts in Attacks and DDoS Attacks" rel="category tag">Attacks and DDoS Attacks</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/backdoors/" title="View all posts in Backdoors" rel="category tag">Backdoors</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/botnets/" title="View all posts in Botnets" rel="category tag">Botnets</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/forensics/" title="View all posts in Forensics" rel="category tag">Forensics</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/interesting-research/" title="View all posts in Interesting Research" rel="category tag">Interesting Research</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/kill-chain/" title="View all posts in kill chain" rel="category tag">kill chain</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/threat-analysis/" title="View all posts in threat analysis" rel="category tag">threat analysis</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/trojan-horses/" title="View all posts in Trojan Horses" rel="category tag">Trojan Horses</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/viruses/" title="View all posts in Viruses" rel="category tag">Viruses</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/vulnerabilities/" title="View all posts in Vulnerabilities" rel="category tag">Vulnerabilities</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-6725 post type-post status-publish format-standard hentry category-analysis category-ddos-attacks category-botnets category-interesting-research category-malware category-reverse-engineering" id="post-6725">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2014/04/trojan-eclipse-a-bad-moon-rising/" rel="bookmark tag" title="Trojan.Eclipse &#8212; A Bad Moon Rising? blog post entry">Trojan.Eclipse &#8212; A Bad Moon Rising?</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/dschwarz">Dennis Schwarz</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2014/04/trojan-eclipse-a-bad-moon-rising/">04/22/2014</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p>ASERT’s malware collection and processing system has automatic heuristics that bubble up potentially new and interesting DDoS malware samples into a “for human analysis” queue. A recent member of this queue was Trojan.Eclipse and this post is my analysis of the malware and its associated campaigns.</p>
<p>Analysis was performed on the sample with an MD5 of 0cdd10cd3393d3fe916a55b946c10ad6.</p>
<p>The name Eclipse comes from two places: a mutex named “eclipseddos” and a hardcoded Cookie value used in the command and control (C2) phone home. We’ll see in the Campaign section below that this threat is also known as: shadowbot, gbot3, eclipsebot, Rhubot, and Trojan-Spy.Win32.Zbot.qgxi.</p>
<p>Based on the C2 domain names, GeoIP of the C2 IP addresses, and a social media profile of the owner of one of the C2 domains, I suspect this malware to be Russian in origin. In addition, Eclipse is written in Delphi and empirically Russian malware coders have a certain fondness for this language.</p>
<p><b>Command and Control</b></p>
<p>The analyzed binary has a hardcoded C2 domain string. This string is protected from modification by running it through a simple hashing algorithm and comparing it against a hardcoded hash at certain points of the code. The following Python function replicates this algorithm:</p>
<pre><span style="color: #888888;"> def decrypt(string):
</span><span style="color: #888888;">    table1 = "qwertyuiopasdfghjklzxcvbnm.1234567890"
</span><span style="color: #888888;">    table2 = "asdfghjklqwertyuiopnbmcvxzeasdfghjklv" 
</span><span style="color: #888888;">    out = ""</span></pre>
<pre><span style="color: #888888;">    for orig_char in string:
</span><span style="color: #888888;">        index = table1.find(orig_char)
</span><span style="color: #888888;">        if index == -1:
</span><span style="color: #888888;">            char = orig_char
</span><span style="color: #888888;">        else:
</span><span style="color: #888888;">            char = table2[index]
</span><span style="color: #888888;">        while char in table1[index:]:
</span><span style="color: #888888;">            index = table1.find(char)
</span><span style="color: #888888;">            char = table2[index]
</span><span style="color: #888888;">        out += char

</span><span style="color: #888888;">    print out</span></pre>
<p>For example, the domain “milfsdeasing.com” hashes to “zopterrweoxyezpz.”</p>
<p>An example phone home request looks like this:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/03/phonehome.png"><img class="alignnone size-full wp-image-6728" alt="phonehome" src="/asert/wp-content/uploads/2014/03/phonehome-e1395670775555.png" width="500" height="381" /></a></p>
<p>It is a HTTP GET based C2 protocol where the query string breaks down into the following parameters:</p>
<ul>
<li>bot – 15 random lowercase letters and digits</li>
<li>botkey – possibly a hardcoded campaign key</li>
<li>os – OS name</li>
<li>ram – amount of RAM</li>
<li>user – username</li>
<li>cpu – estimated CPU speed</li>
<li>number of CPUs</li>
</ul>
<p>After the Host line, the remaining headers are static—note the aforementioned Cookie value. An example phone home response looks like this:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/03/response.png"><img class="alignnone size-full wp-image-6729" alt="response" src="/asert/wp-content/uploads/2014/03/response-e1395670855782.png" width="500" height="381" /></a></p>
<p>The returned content is a single &lt;base&gt; tag containing base64-encoded data. Once decoded, an XML-like configuration file emerges (newlines added for clarity):</p>
<pre>&lt;cmd&gt;stop;&lt;/cmd&gt;&lt;tcp&gt;GET /index.php HTTP 1.1
Host: $RANDOM$.net
User-agent: $RANDOM$
&lt;/tcp&gt;&lt;cnfg&gt;control-timeout=1;
control-path=/par/;
control-domain=milfsdeasing.com;
stream-timeout=10;&lt;/cnfg&gt;</pre>
<p>Another example:</p>
<pre>&lt;cmd&gt;type=slow-post; threads=10; timeout=1;
 target=www.victim.com; script=/contact-us.php;
port=80;&lt;/cmd&gt;&lt;tcp&gt;GET /index.php HTTP 1.1
Host: $RANDOM$.net
User-agent: $RANDOM$
&lt;/tcp&gt;&lt;cnfg&gt;control-timeout=1;
control-path=/par/;
control-domain=milfsdeasing.com;
stream-timeout=10;&lt;/cnfg&gt;</pre>
<p>Relatively speaking, for a DDoS bot, Eclipse has a fairly rich configuration mechanism. Starting with the &lt;cnfg&gt; tag, it has four possible options:</p>
<ul>
<li>control-timeout – set C2 poll time</li>
<li>control-path – set C2 pathname</li>
<li>control-domain – set C2 domain</li>
<li>stream-timeout – minimum wait time between attack packets, in milliseconds</li>
</ul>
<p>The &lt;cmd&gt; tag can contain multiple commands delimited by a “\r\n”, and each command has three possible formats: standalone command, command requiring parameters, and a shortcut command. An example of the first format is:</p>
<pre>&lt;cmd&gt;stop;&lt;/cmd&gt;</pre>
<p>Identified commands in this category are:</p>
<ul>
<li>stop – stop attacks</li>
<li>wait – sleep for one day</li>
<li>die – exit process</li>
</ul>
<p>An example of the second format:</p>
<pre>&lt;cmd&gt;type=slow-post; threads=10; timeout=1; target=www.victim.com; script=/contact-us.php; port=80;&lt;/cmd&gt;</pre>
<p>There are a bunch of types, here are the ones identified:</p>
<ul>
<li>update – update self</li>
<li>execute – download and execute</li>
<li>tcpint – custom TCP flood</li>
<li>browser – HTTP GET flood, look like a web browser</li>
<li>dirtjumper – HTTP GET flood</li>
<li>sincere – TCP flood</li>
<li>http – HTTP GET/POST flood</li>
<li>httpspoof – HTTP GET flood with spoofed X-Forwarded-For header</li>
<li>slowloris – broken Slowloris attempt</li>
<li>tcp – TCP flood</li>
<li>udp – UDP flood</li>
<li>http-data – HTTP POST flood</li>
<li>slow-post – broken slow HTTP POST flood</li>
<li>connect – TCP connect flood</li>
<li>tcp-oneconnect – TCP flood</li>
<li>icmp – broken ICMP echo request flood</li>
<li>http-post – referenced in the code, but not implemented</li>
</ul>
<p>Command parameters depend on the type and include:</p>
<ul>
<li>threads – number of attack threads, defaults to 30</li>
<li>timeout – wait time between attack packets, in milliseconds</li>
<li>target – target host</li>
<li>script – URI path and file</li>
<li>port – target port, defaults to 80</li>
<li>connint – unknown, defaults to 1</li>
<li>dataint – unknown, defaults to 1</li>
<li>data – referenced, but unused</li>
<li>template – template attacks</li>
</ul>
<p>Two interesting features here. First, the script parameter can contain variables: $RANDOM$ is replaced with 15 random lowercase letters and digits and $INTEGER$ is replaced with a random integer between 0 and 998.</p>
<p>Second, the template option configures various attacks based on hardcoded templates. They include:</p>
<ul>
<li>nginx – slowloris attack, 30 threads, 10 ms timeout</li>
<li>ssh – tcp attack, 45 threads, 10 ms timeout, destination port 22</li>
<li>ftp – tcp attack, 45 threads, 10 ms timeout, destination port 21</li>
<li>https – tcp attack, 70 threads, 10 ms timeout, destination port 443</li>
<li>dns – udp attack, 10 threads, 10 ms timeout, destination port 53</li>
</ul>
<p>Finally, the shortcut command format looks like this:</p>
<pre>&lt;cmd&gt;#http://www.shortcut-victim.com#&lt;/cmd&gt;</pre>
<p>This launches an http attack with 100 threads and a timeout of 10 ms.</p>
<p>The &lt;tcp&gt; tag is used in conjunction with the tcpint command and defines a custom TCP flood payload template. The template supports $RANDOM$ variables which are replaced with 15 random lowercase letters and digits.</p>
<p><b>Campaigns</b></p>
<p>Campaign-wise, Eclipse can be broken down into roughly four groups: shadowbot, gbot3, eclipsebot, and eclipseddos. The malware implementation used in each campaign varies a bit from what was describe above, but I feel that they’re earlier development versions and warrant being categorized under the same family name.</p>
<p><i>shadowbot Campaign</i></p>
<p><i></i>The shadowbot campaign was active from July 21, 2013 to August 10, 2013 (using VirusTotal’s first submission timestamp). Its name comes from the use of the shadowbot mutex. Other notable differences include:</p>
<ul>
<li>Use of a shortened query string, “index.php?bot=”, in the C2 phone home</li>
<li>Missing Referer and Cookie headers in the C2 phone home</li>
<li>Does not use the &lt;base&gt; tag or base64 encoding</li>
<li>The &lt;cmd&gt; tag is much simpler and is delimited by “#”s</li>
<li>Does not use &lt;cnfg&gt; or &lt;tcp&gt; tags</li>
<li>Uses !random instead of $RANDOM$ variables</li>
<li>Smaller command set: connect, slow-post, http-data, cs, udp, tcp, and http</li>
</ul>
<p>Some sample MD5s and C2 URLs:</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="221">4c76ed5155b2ee388bd770941a3c0473</td>
<td valign="top" width="221">http://aktualisieren-soft.ru/blizzer-kidala/index.php</td>
</tr>
<tr>
<td valign="top" width="221">0af74a0029b248b7c4b5129a1a0e5e3b</td>
<td valign="top" width="221">http://teleon2.ru/paranoik/index.php</td>
</tr>
<tr>
<td valign="top" width="221">2596d7b324599240c723429a01ad7310</td>
<td valign="top" width="221">http://teleon2.ru/paranoik/index.php</td>
</tr>
<tr>
<td valign="top" width="221">dd384ead636a7bd9bf7aa870ae712963</td>
<td valign="top" width="221">http://teleon2.ru/new/index.php</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>The last entry in this table is the sample that Microsoft documented at <a href="http://www.microsoft.com/security/portal/threat/encyclopedia/Entry.aspx?Name=Trojan%3AWin32%2FRhubot.A" target="_blank">http://www.microsoft.com/security/portal/threat/encyclopedia/Entry.aspx?Name=Trojan%3AWin32%2FRhubot.A</a>. They have named the malware “Win32/Rhubot.A”, but to be honest I couldn’t figure out why or find any good source material on “Rhubot”.</p>
<p><i>gbot3 Campaign</i></p>
<p>Next is the gbot3 campaign, which was active from August 9, 2013 to January 1, 2014 VirusTotal time. Its name also comes from the mutex that it sets. The distinguishing features of this version are:</p>
<ul>
<li>As with shadowbot, uses shortened C2 phone home query string, “index.php?bot=”</li>
<li>Does not use base64 encoding, but does contain &lt;cmd&gt;, &lt;cnfg&gt;, and &lt;tcp&gt; tags</li>
<li>&lt;cmd&gt; is space delimited and still fairly basic</li>
<li>Implements “#” shortcut command</li>
<li>Implements tcpint command with &lt;tcp&gt; template. The template supports !randomchar, !random-ug, !random-lang, !random-encoding, !random-ac, !random-accept variables instead of $RANDOM$</li>
<li>Supports !random instead of $RANDOM$ in URI</li>
<li>Command set includes the more novel tcpint, browser, dirtjumper, slow-post, and tcp-oneconnect commands</li>
</ul>
<p>Some sample MD5s and C2 URLs:</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="221">08f89357dc85b9155600a45e2a7a8e7b</td>
<td valign="top" width="221">http://91.226.127.175/test1/index.php</td>
</tr>
<tr>
<td valign="top" width="221">1720907230f0d4e4b6cda96dd52322dc</td>
<td valign="top" width="221">http://91.226.127.175/test1/index.php</td>
</tr>
<tr>
<td valign="top" width="221">ad8ac73540708d5cd6738a5d5f23a1d5</td>
<td valign="top" width="221">http://tryboots.ru/asdfgh/index.php</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>The last entry in this table is the sample referenced in SourceFire VRT’s “MALWARE-CNC Win.Trojan.Rhubot variant outbound connection” rule.</p>
<p><i>eclipsebot campaign</i></p>
<p>Third is the eclipsebot campaign, which was active from September 12, 2013 to November 4, 2013. Naming is based on the mutex. Sans some minor changes, this version is very similar to the eclipseddos analyzed in the beginning of the post. Notable features are:</p>
<ul>
<li>Introduction of C2 domain hash check</li>
<li>Still uses shortened C2 query string, “index.php?bot=”</li>
<li>Introduction of rich &lt;cmd&gt; configuration via type, threads, timeout, target, script, etc. options</li>
<li>Has support for attack templates</li>
<li>Uses $RANDOM$ and $INTEGER$ variables</li>
</ul>
<p>Some sample MD5s and C2 URLs:</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="221">ab6d483b2d6adf510e07395ceea5b980</td>
<td valign="top" width="221">http://blog32.ru/wp-admin/dark/index.php</td>
</tr>
<tr>
<td valign="top" width="221">b4e55f09ba681c10c20c50453c85652f</td>
<td valign="top" width="221">http://blog32.ru/wp-admin/dark/index.php</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><i>eclipseddos campaign</i></p>
<p>The eclipseddos campaign has been active since November 28, 2013 VirusTotal time.</p>
<p>Some sample MD5s and C2 URLs:</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="221">c6cdd4876771f18efade928c50cf81fa</td>
<td valign="top" width="221">http://milfsdeasing.com/par/index.php</td>
</tr>
<tr>
<td valign="top" width="221">548fbf4dde27e725c0a1544f61362b50</td>
<td valign="top" width="221">http://vsehnahuy.com/huy/index.php</td>
</tr>
<tr>
<td valign="top" width="221">0b450a92f29181065bc6601333f01b07</td>
<td valign="top" width="221">http:// test.crack-zone.ru/index.php</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>The last two samples in the above table are referenced in the Emerging Threats rule called “ETPRO TROJAN Trojan-Spy.Win32.Zbot.qgxi Checkin”. As with Microsoft’s AV detection, I couldn’t find any source material on why they decided to name it this way.</p>
<p><b>The Trojan.BlackRev Connection</b></p>
<p>Back in May 2013, I released a blog post titled “<a href="http://www.arbornetworks.com/asert/2013/05/the-revolution-will-be-written-in-delphi/" target="_blank">The Revolution Will Be Written in Delphi</a>” that profiled a DDoS bot named Trojan.BlackRev. Since that post, there have been a few updates that provide for a preamble to a possible relationship between Eclipse and BlackRev. On June 5, 2013 the author of BlackRev, going by the handle “silence”, posted to an underground forum saying that he had sold the project:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/03/blackrev_sold.png"><img class="alignnone size-full wp-image-6731" alt="blackrev_sold" src="/asert/wp-content/uploads/2014/03/blackrev_sold-e1395671292621.png" width="500" height="135" /></a></p>
<p>A few months later on October 4, 2013 on another underground forum, somebody going by the handle “chef” leaked the BlackRev source code:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/03/leak.png"><img class="alignnone size-full wp-image-6732" alt="leak" src="/asert/wp-content/uploads/2014/03/leak-e1395671329949.png" width="500" height="196" /></a></p>
<p>While tracing one of the Eclipse C2 URLs from the shadowbox campaign:</p>
<p><em>http://aktualisieren-soft.ru/<span style="color: #ff0000;">blizzer</span>-kidala/index.php</em></p>
<p>I came across a C2 URL with a similar URI pathname:</p>
<p><em>http://aktualisieren-soft.ru/<span style="color: #ff0000;">blizzer</span>/panel/gate.php</em></p>
<p>The complete C2 protocol looks like this:</p>
<p><a href="http://arbornetworks.com/asert/wp-content/uploads/2014/03/blackrev-eclipse-c2.png"><img class="alignnone size-full wp-image-6733" alt="blackrev-eclipse-c2" src="/asert/wp-content/uploads/2014/03/blackrev-eclipse-c2-e1395671396380.png" width="500" height="381" /></a></p>
<p>This traffic came from a binary with an MD5 of 8da35de6083aa9aa3859ce65e0e816df and I believe this sample to be a “missing link” between the BlackRev and Eclipse code bases.</p>
<p>In addition to the timeline proximity and the feeling of “code sameness” while reversing engineering, some of the major pieces linking this variant to BlackRev are:</p>
<ul>
<li>The query string used in the phone home</li>
<li>Comparison against the “|stop|” string</li>
<li>Bot command is pipe “|” delimited</li>
<li>Launches the same “bot killer” code in a thread</li>
<li>Launches the same “memory reduction” code in a thread</li>
<li>Uses a similar random character generator</li>
<li>HTTP header overlap in some of the attacks</li>
<li>Names a command “antiddos”, which is fairly novel</li>
</ul>
<p>The major pieces linking it to Eclipse (shadowbot specifically) are:</p>
<ul>
<li>Shared C2 infrastructure</li>
<li>HTTP header overlap in the C2 phone home</li>
<li>Use of XML-like tags in the phone home response</li>
<li>Names a command “nginx”, which is a fairly novel</li>
<li>Eclipse variants also contain the same bot killer, memory reduction, and similar random character generation code</li>
<li>Name overlap in some of the attacks</li>
<li>HTTP header overlap in some of the attacks</li>
</ul>
<p>With silence’s claim of selling the project and the leak of the source code to the public, it is unclear how or if the threat actors behind the Eclipse and BlackRev campaigns are related. I do feel strongly though that Eclipse is a descendant of the BlackRev code base.</p>
<p><b>Conclusion</b></p>
<p>This post has been an analysis of the Trojan.Eclipse family of DDoS bots. This malware is interesting because it has a fairly rich configuration mechanism, some novel attack types, and a nice development trail leading back to the either the Trojan.BlackRev code leak or sale of the project by the author.</p>
<p>ASERT is just ramping up attack monitoring of this family. So far we’ve seen a handful of attacks on a consumer complaint website, a venture capital company, a forum for a Russian town, and a rating site for Russian apartment repairs. Monitoring of the attacks and family continue.</p>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2014/04/trojan-eclipse-a-bad-moon-rising/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/analysis/" title="View all posts in analysis" rel="category tag">analysis</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/ddos-attacks/" title="View all posts in Attacks and DDoS Attacks" rel="category tag">Attacks and DDoS Attacks</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/botnets/" title="View all posts in Botnets" rel="category tag">Botnets</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/interesting-research/" title="View all posts in Interesting Research" rel="category tag">Interesting Research</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/reverse-engineering/" title="View all posts in Reverse Engineering" rel="category tag">Reverse Engineering</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-6672 post type-post status-publish format-standard hentry category-malware" id="post-6672">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2014/03/dexter-and-project-hook-point-of-sale-malware-activity-update/" rel="bookmark tag" title="Dexter and Project Hook Point-of-Sale Malware Activity Update blog post entry">Dexter and Project Hook Point-of-Sale Malware Activity Update</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/cwilson">cwilson</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2014/03/dexter-and-project-hook-point-of-sale-malware-activity-update/">03/05/2014</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p>An increase in credit and debit card theft via Point of Sale (PoS) malware campaigns over the late 2013 <a title="Happy Holidays: Point of Sale Malware Campaigns Targeting Credit and Debit Cards" href="http://alkali.arbornetworks.com/asert/2013/12/happy-holidays-point-of-sale-malware-campaigns-targeting-credit-and-debit-cards/" target="_blank">holiday</a> season has resulted in significant media attention and has likely emboldened threat actors as the success of past campaigns comes to light. Media attention has decreased since news of the Target breach and associated fallout, however threat actors targeting PoS systems are still engaged in active attacks.</p>
<h1>Point of Sale Malware Overview</h1>
<p>Certain malware, such as Dexter, Project Hook, Alina, ChewBacca, JackPoS and VSkimmer have been written specifically to compromise Point of Sale machines. Other malware not designed specifically for PoS attack, such as ever-popular Citadel, has the capability to exfiltrate data from the target organization. In short, any system that contains credit/debit card data in any clear-text form in memory or on disk or sends clear-text card data over the network is potentially at risk regardless of whether that machine is a PoS terminal or not.</p>
<p>In addition to Alina, Chewbacca, JackPoS and other Point of Sale malware, ASERT continues to track the <a href="http://www.arbornetworks.com/asert/wp-content/uploads/2013/12/Dexter-and-Project-Hook-Break-the-Bank.pdf">Dexter and Project Hook PoS campaigns we originally reported on</a> in December of 2013.  Indicators  suggest that Dexter Revelation may have been in existence as early as April 2013. A new ASERT threat intelligence brief sited at the end of this post provides a significant amount of updated material about Dexter and Project Hook including:</p>
<ul>
<li>Additional actor insight</li>
<li>Reverse Engineering information</li>
<li>Potentially vulnerable Point of Sale solutions</li>
<li>An extensive list of file and network indicators</li>
<li>An analysis of possible attack vectors</li>
<li>An updated infection map</li>
<li>Mitigation suggestions</li>
</ul>
<p>This information should prove valuable for incident responders and those responsible for protecting cardholder data environments. Additionally, since many of the network and file indicators have not been previously released, these indicators may be useful for identifying environments that are already compromised. The brief also provides scripts for decoding dump files that may help incident responders determine the scope of a compromise.</p>
<p>The following map shows Dexter and Project Hook infections as of January 24, 2014:</p>
<p><a href="/asert/wp-content/uploads/2014/03/Project-Hook_Dexter.png"><img class="alignnone size-full wp-image-6673" alt="Project Hook_Dexter" src="/asert/wp-content/uploads/2014/03/Project-Hook_Dexter.png" width="900" height="508" /></a></p>
<p>Continued PoS campaign activity suggests that organizations still need to be vigilant. This new ASERT intelligence brief will help. The full document is available <a href="http://pages.arbornetworks.com/rs/arbor/images/ASERT%20Threat%20Intelligence%20Brief%202014-03%20PoS%20Malware%20Campaign%20Update.pdf" target="_blank">here</a>.</p>
<p><em><strong>*Author credits: Curt Wilson, Dave Loftus, and Dennis Schwarz</strong></em></p>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2014/03/dexter-and-project-hook-point-of-sale-malware-activity-update/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-6095 post type-post status-publish format-standard hentry category-botnets category-malware category-reverse-engineering category-uncategorized" id="post-6095">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2014/02/pretending-to-be-a-zeus-gameover-bot-2/" rel="bookmark tag" title="Pretending to be a Zeus Gameover Bot blog post entry">Pretending to be a Zeus Gameover Bot</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/dschwarz">Dennis Schwarz</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2014/02/pretending-to-be-a-zeus-gameover-bot-2/">02/12/2014</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p>Zeus Gameover is a banking trojan that started appearing in the wild sometime in early 2012. As with Citadel, Ice IX, and KINS, it is based on the leaked Zeus trojan <a href="https://github.com/Visgean/Zeus">source code</a>. The most significant difference between Gameover and its immediate family members is that it uses a peer-to-peer (P2P) network for its command and control (C&amp;C). What also stands out is that there appears to be only one instance of the Gameover botnet, whereas Citadel for example has hundreds of distinct ones.</p>
<p>This post releases some proof of concept code (read: works for me) that helps malware researchers to further understand and also interact with Gameover. More specifically it:</p>
<ul>
<li>Extracts the initial set of P2P peers (starter peers) from a Gameover memory dump</li>
<li>Queries each of the starter peers for their “P2P network configuration” file</li>
<li>Decrypts and partially parses the configuration into something more human readable</li>
<li>Enumerates part of the P2P network</li>
</ul>
<p><strong>Prior Work</strong></p>
<p>The code is meant to complement the existing body of Gameover malware research. It takes bits and pieces from the following sources and ties them together into something a bit more tangible:</p>
<ul>
<li>“<a href="http://www.cert.pl/PDF/2013-06-p2p-rap_en.pdf">ZeuS-P2P monitoring and analysis</a>” by CERT Polska</li>
<li>“<a href="http://www.secureworks.com/cyber-threat-intelligence/threats/The_Lifecycle_of_Peer_to_Peer_Gameover_ZeuS/">The Lifecycle of Peer-to-Peer (Gameover) ZeuS</a>” by Brett Stone-Gross</li>
<li>“<a href="http://www.few.vu.nl/~da.andriesse/papers/zeus-tech-report-2013.pdf">An Analysis of the Zeus Peer-to-Peer Protocol</a>” by Dennis Andriesse and Herbert Bos</li>
<li>“<a href="http://blog.mindedsecurity.com/2012/09/zeus-gameover-overview.html">ZeuS Gameover Overview</a>” by Minded Security</li>
<li>“<a href="http://www.symantec.com/connect/blogs/zeusbotspyeye-p2p-updated-fortifying-botnet">Zeusbot/Spyeye P2P Updated, Fortifying the Botnet</a>” by Andrea Lelli</li>
</ul>
<p>Much appreciation goes to these folks and their work.</p>
<p><strong>Code Availability</strong></p>
<p>Python code will be available on Arbor Network’s <a href="https://github.com/arbor/zeus_gameover-re">GitHub</a>. It depends on the <a href="http://code.google.com/p/pefile/">pefile Python module</a> and requires a Gameover memory dump to operate on. The dump used in this demonstration came from a sample that has a MD5 of 216b53fe8c704978468e8bfe1aad1152.</p>
<p>Please note that this is a live malware sample and the code has the ability to connect to and query a live malware C&amp;C network! Stay safe.</p>
<p><strong>Demonstration and Walk-Through</strong></p>
<p>The walk-through data is initialized via:</p>
<p>&gt;&gt;&gt; fp = open(&#8220;AML-12420355.rsrc-52307867.dynamic.memdump&#8221;, &#8220;rb&#8221;)<br />
&gt;&gt;&gt; memdump = fp.read()<br />
&gt;&gt;&gt; fp.close()<br />
&gt;&gt;&gt;<br />
&gt;&gt;&gt; from ZeusGameover import ZeusGameover<br />
&gt;&gt;&gt; gameover = ZeusGameover(memdump)</p>
<p>or</p>
<p>$ python ZeusGameover.py AML-12420355.rsrc-52307867.dynamic.memdump<br />
…</p>
<p>First off, a hardcoded “sample configuration” file is extracted from the memory dump and de-XOR’d with a key stored in the relocation section (.reloc) of the binary (see the get_memdump_config function). This configuration file contains an RC4 key state used later to decrypt the “P2P network configuration” file:</p>
<p>&gt;&gt;&gt; rc4_key = gameover.get_memdump_rc4_key()<br />
&gt;&gt;&gt; print &#8220;&#8221;.join(rc4_key).encode(&#8220;hex&#8221;)<br />
a30a0c0f383c42509cf83a0523624520a8c11a7517bab7d97e04dae94bbc390d5a445d6341823b36cc37eab399aed7c3538a1edb847bd8004f5beb4a73e310f1a5e8ec09aff60131f0c4199a3d7f6fc8695c91f416925598ca6e646da243abd29661a971c7fc97b478062d8ef2e5ad2a7c5efb0ebf02d09db8cf47ee80677a4d2ebd0b727487d1039f891c59f326609340d3aa3522cedf28159ba0c2a4b6883ee2496518beefd427b025b1ac1fa61d338ff96c1b7766d632cdfe12b2c034865f30eddcf7dec9e468c548d5297657bb588d4ca1905424ff4ee16b8be0832f94796a95857d9e81e67051fdcbe752fa2c07b91446112ba7088c21ddc6b5f556133f0000</p>
<p>The “sample configuration” file also contains the starter peers used to bootstrap communications with the P2P network (see the get_static_peers function):</p>
<p>static peer #1<br />
ip: 74.96.168.126, udp port: 6710, rc4 key: c2056f859dd9fdf008507a637a0da568d16f825b</p>
<p>static peer #2<br />
ip: 74.203.254.118, udp port: 6630, rc4 key: c046b43fbcec2475831083aa56aef3d5b72ceda6</p>
<p>static peer #3<br />
ip: 70.30.53.56, udp port: 8204, rc4 key: a398bc30c436194c025513cb4bcafc1287460293<br />
…</p>
<p>Using their respective UDP ports and RC4 keys, each of the starter peers is sent a “version” query to see if the peer is still alive. If so, the query will return version information and a TCP port (see the query_peer_for_version function):</p>
<p>…<br />
static peer #8<br />
ip: 85.100.41.9, udp port: 8835, rc4 key: d6c0d41b51dcb4b76205f3ab00f50af4411a22b9<br />
<strong>binary version: 70314355, config version: 76101317, tcp port: 2997</strong><br />
…</p>
<p>If the TCP port is active, it is queried for the “P2P network configuration” file (see the query_peer_for_config and parse_config_response functions):</p>
<p>…<br />
static peer #9<br />
ip: 94.247.29.186, udp port: 3415, rc4 key: a5f5957b3acc687da57e5287837ea70c9ef827f6<br />
binary version: 70314355, config version: 76101317, tcp port: 4948<br />
<strong>config saved (1033680 actual bytes)</strong><br />
…</p>
<p>The “P2P network configuration” file is decrypted with the RC4 key state from above and lightly parsed. Parsing includes de-XORing and, if necessary, zlib decompressing the individual data “sections” of the config (see the parse_config function):</p>
<p>$ strings 94.247.29.186.config<br />
…<br />
[start item number: 22003, type: 0x10000001, packed size: 854, unpacked size: 2201]<br />
@https://bancopostaimpresaonline.poste.it/bpiol/lastFortyMovementsBalance.do?method=loadLastFortyMovementList<br />
@https://*.tecmarket.it/*<br />
@https://www3.csebo.it/*<br />
@https://qweb.quercia.com/*<br />
…<br />
[start item number: 2, type: 0x40000000, packed size: 36, unpacked size: 36]</p>
<p>http://kessura.com/php/s_c.php</p>
<p>[end item number: 2]<br />
[start item number: 3, type: 0x40000000, packed size: 36, unpacked size: 36]</p>
<p>http://kessura.com/php/g_c.php</p>
<p>…<br />
[start item number: 14, type: 0x40000001, packed size: 196, unpacked size: 298]<br />
ERCPQ<br />
inject<br />
&lt;script type=&#8221;text/javascript&#8221; src=&#8221;scripts/service?id=7&#8243; language=&#8221;JavaScript&#8221;&gt;&lt;/script&gt;S<br />
ERCPM<br />
inject<br />
style=&#8217;visibility:hidden&#8217;<br />
[end item number: 14]<br />
…</p>
<p>Over time, the “P2P network configuration” can be queried via new Gameover samples and a timeline of when changes are made and where those changes are start to appear:</p>
<p><a href="/asert/wp-content/uploads/2014/01/gameover_configs.png"><img class="alignnone size-full wp-image-6088" alt="gameover_configs" src="/asert/wp-content/uploads/2014/01/gameover_configs.png" width="770" height="137" /></a></p>
<p>$ diff -u jan_25.config.strings jan_28.config.strings<br />
&#8212; jan_25.config.strings 2014-01-29 15:59:54.000000000 -0500<br />
+++ jan_28.config.strings 2014-01-29 15:59:41.000000000 -0500<br />
…<br />
[start item number: 1, type: 0x40000000, packed size: 39, unpacked size: 39]<br />
-http://nessura.com/oz/service.php<br />
+http://kessura.com/oz/service.php<br />
[end item number: 1]<br />
…</p>
<p>In addition to the configuration data, the starter peers can be used to further enumerate the P2P network (see the enumerate_peers function):</p>
<p>…<br />
peer #21<br />
ip: 115.162.112.200, udp port: 5782, rc4 key: d29e52a567b266b53c8269433c5462c2cf0c4fdd</p>
<p>peer #22<br />
ip: 64.25.199.1, udp port: 6977, rc4 key: d75dfdb4f96e623546940e8a8c03872e07eed9d2<br />
…<br />
peer #88<br />
ip: 99.190.124.179, udp port: 1671, rc4 key: d3526a00abf536c6a1df7d8607c9635c0bd98dc1</p>
<p>peer #89<br />
ip: 153.160.176.252, udp port: 4714, rc4 key: d27382dbec8a01a3c4b405e063a1c10267313d19<br />
…</p>
<p>From a set of twenty starter peers and using a breadth first search an interesting pattern emerges:</p>
<p><a href="/asert/wp-content/uploads/2014/01/breadth_first.png"><img class="alignnone size-full wp-image-6089" alt="breadth_first" src="/asert/wp-content/uploads/2014/01/breadth_first.png" width="753" height="453" /></a></p>
<p>This graph shows how many total unique peers are at each level of the enumeration. While this certainly does not represent the entire Gameover P2P network, it does start to give an idea of its size and scope. Thanks to Kenny MacDermid for the above idea and help on the visual.</p>
<p><strong>Conclusion</strong></p>
<p>Zeus Gameover is a banking trojan that has been around for a couple of years now. It continues to be very active and as of this writing is in ASERT’s top five of tagged malware samples. This is interesting because Gameover is also a well-researched malware family. Usually the longer a family exists and the more focus the malware research community gives it, the less active the malware becomes. But, Gameover continues to be in the limelight and continues to infect and affect a large number of people and companies across the Internet.</p>
<p>This post hopes to complement and further the existing malware research into Gameover. In addition, it hopes to also assist enterprises and service providers to detect and mitigate infected peers and banks and financial institutions to determine if and how they are being targeted.</p>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2014/02/pretending-to-be-a-zeus-gameover-bot-2/#comments" class="comments-count-number">2Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/botnets/" title="View all posts in Botnets" rel="category tag">Botnets</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/reverse-engineering/" title="View all posts in Reverse Engineering" rel="category tag">Reverse Engineering</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-6043 post type-post status-publish format-standard hentry category-ddos-attacks category-botnets category-malware" id="post-6043">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2014/01/can-i-play-with-madness/" rel="bookmark tag" title="Can I Play with Madness? blog post entry">Can I Play with Madness?</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/jjones">Jason Jones</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2014/01/can-i-play-with-madness/">01/16/2014</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p>Madness Pro is a relatively recent DDoS bot, first  seen by ASERT in the second half of 2013 and also profiled by <a title="Meet Madness Pro or Few days rise of a Ddos Botnet" href="http://malware.dontneedcoffee.com/2013/10/meet-madness-pro-or-few-days-rise-of.html" target="_blank">Kafeine</a> in October 2013. Kafeine&#8217;s blogpost gave good insight into one method of infection and how quickly a potent DDoS botnet can be built. This post will take a deeper-dive into what Madness does upon infection of a system and what its attack capabilities are.</p>
<h1>Installation</h1>
<p>Madness uses standard methods to achieve persistence on the system and evade detection. For persistence, it sets up autorun via:</p>
<ul>
<li>HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionRun if the user does not have admin privileges</li>
<li>via HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersionpoliciesExplorerRun</li>
<li>if that fails to HKEY_LOCAL_MACHINESoftwareMicrosoftWindowsCurrentVersionRun if the user does have admin privileges</li>
</ul>
<p>It also creates 4 files in the user&#8217;s home folder named per, perper, perperper, perperperper (hint: search for these filenames on <a href="http://malwr.com" target="_blank">malwr.com</a> to find more samples <img src="http://www.arbornetworks.com/asert/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  ) that contain the registry key values above followed by [7] and [8] for WORLD_FULL_ACCESS and WORLD_READ_ACCESS and run regini on the file to setup the registry permissions on those registry keys before doing the above. A mutex named GH5K-GKL8-CPP4-DE24 will also be created to block multiple installations of Madness (since the mutex we have observed has been the same across all samples we have encountered, it also blocks competitors). It will then attempt to bypass the firewall in Windows XP/Vista/7/8 by turning it off the service  and then disabling autostart of that service.</p>
<p>Many of the interesting strings are encoded with Base64, which include the above-mentioned registry keys, commands, mutex values and operating system names. This makes many of the strings very recognizable and easy to identify with a Yara rule. One example rule has been committed to <a href="https://github.com/arbor/yara" target="_blank">our GitHub repository</a>.</p>
<h1>Capabilities</h1>
<p>Capability-wise, Madness Pro has a large number of DDoS attacks and a download and execute command. The latest version we have observed in the wild is 1.15. The network phone-homes for Madness resemble the WireShark screenshot below. They include a unique randomly-generated bot ID, a version, the mk parameter, the OS version, privilege level on the system, c &#8211; a counter for the number of phone homes, rq &#8211; a counter for the number of successful attack payloads sent since the last phone-home. The response from the server is a base64-encoded, newline-separated list of commands. Multiple targets can be specified per command by separating them with a semicolon.</p>
<div id="attachment_6049" style="width: 1034px" class="wp-caption alignnone"><img class="size-large wp-image-6049" alt="Madness Phone-Home" src="/asert/wp-content/uploads/2014/01/madness_comms-1024x276.png" width="1024" height="276" /><p class="wp-caption-text">Madness Phone-Home</p></div>
<p>I also wrote a Suricata / Snort rule to detect these phone-homes:</p>
<pre><span style="font-size: 12px; color: #808080;">alert http $HOME_NET any -&gt; $EXTERNAL_NET any (msg:"[ASERT] TROJAN W32/Madness Checkin"; flow:established,to_server; content:"GET"; http_method; content: "?uid="; pcre: "/?uidx3d[0-9]{8}x26verx3d[0-9].[0-9]{2}x26mkx3d[0-9a-f]{6}x26osx3d[A-Za-z0-9]+x26rsx3d[a-z]+x26cx3d[0-9]+x26rqx3d[0-9]+/"; reference:url,www.arbornetworks.com/asert/2014/01/can-i-play-with-madness/; reference:md5,3e4107ccf956e2fc7af171adf3c18f0a; classtype:trojan-activity; sid:3000001; rev:1;)</span></pre>
<p>The DDoS attacks use a combination of WinSock, WinInet (InternetOpenRequestA + HttpSendRequestA), and UrlMon (URLDownloadToFileA) functions. The identified commands are shown below:</p>
<blockquote>
<pre><code>exe   - download and execute file
wtf   - stop attacks
dd1   - GET Flood using WinSock
dc1   - AntiCookie GET Flood using WinSockds1   - Slow GET Flood using WinSock
dd2   - POST Flood Using WinSock
dd3   - GET Flood Using WinInet
dd4   - POST Flood Using WinInet
dd5   - ICMP Flood Using WinSock
dd6   - UDP Flood Using WinSock
dd7   - HTTP Flood Using URLDownloadToFileA</code></pre>
</blockquote>
<p>The POST and UDP floods both support specification of flood text by appending &#8216;@@@&#8217; and then the flood text (default is &#8216;flud_text&#8217;). The Cookie recognition code will look for document.cookie and cookies specified of the form ["cookie","realauth=&lt;value&gt;","location"] and attempt to parse the value out.</p>
<blockquote style="background-color: #eeeeee;">
<pre><code style="font-size: 12px;">Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.0.5) Gecko/20060731 Firefox/1.5.0.5 Flock/0.7.4.1
Mozilla/5.0 (X11; U; Linux 2.4.2-2 i586; en-US; m18) Gecko/20010131 Netscape6/6.01
Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)
Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:0.9.6) Gecko/20011128
Mozilla/4.0 (MobilePhone SCP-5500/US/1.0) NetFront/3.0 MMP/2.0 (compatible; Googlebot/2.1; http://www.google.com/bot.html)
Mozilla/4.0 (Windows; U; Windows NT 6.1; nl; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3
Mozilla/4.0 (Windows NT 5.1; U; en) Presto/2.5.22 Version/10.50
Mozilla/4.0 Galeon/1.2.0 (X11; Linux i686; U;) Gecko/20020326
Opera/10.80 (SunOS 5.8 sun4u; U) Opera 10.8 [en]</code></pre>
</blockquote>
<p>The flood template for the WinSock POST request is below, note that the Referer and Cookie headers are only included in the attack if there are referer and cookie values. The user-agent will be incrementally selected from the list above (although the AntiCookie code has a small bug <img src="http://www.arbornetworks.com/asert/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  ). The WinSock GET and AntiCookie GET attacks use similar templates sans the POST data and of course with the GET HTTP verb instead of POST HTTP verb.</p>
<blockquote>
<pre><code style="font-size: 12px;">POST &lt;uri&gt; HTTP/1.1
Accept: */*
Content-Type: application/x-www-form-urlencoded
Host: &lt;target&gt;
Content-Length: &lt;length&gt;
User-Agent: &lt;user-agent from list&gt;
Referer: &lt;referer&gt;
Cookie: &lt;cookie&gt;
Cache-Control: no-cache
Connection: Keep-Alive

&lt;post data&gt;</code></pre>
</blockquote>
<p>The Slow GET flood only sends the GET request and a Host header, sleeps for 100 milliseconds, and then send the rnrn to finish the request.</p>
<p>The UDP and ICMP floods are pretty standard compared to most other DDoS bots. The download and execute command functionality has been used sparingly from the CnCs that we have tracked, except for&#8230;.</p>
<h1>Playing with Madness</h1>
<p>Sometimes a botnet admin mistakenly gives you an FTP download link with server credentials that allows for retrieval of an intact panel that includes credentials for the admin area of the web panel. Fortunately, this admin only had a total of 10 bots and at least 3 of those were researchers :). There&#8217;s not much more to the admin panel than what is showed in the screenshot below:</p>
<div id="attachment_6047" style="width: 1034px" class="wp-caption alignnone"><img class="size-large wp-image-6047" alt="Madness Panel 1.13" src="/asert/wp-content/uploads/2014/01/madness_panel_redacted-1024x310.png" width="1024" height="310" /><p class="wp-caption-text">Madness Panel 1.13</p></div>
<div id="attachment_6052" style="width: 368px" class="wp-caption alignnone"><img class="wp-image-6052 " alt="Madness Symbols" src="/asert/wp-content/uploads/2014/01/madness_symbols.png" width="358" height="293" /><p class="wp-caption-text">Madness Symbols</p></div>
<p>Sometimes the malware author forgets to run &#8216;strip&#8217; on the binaries he&#8217;s generating for customers and these end up in my hands. Unfortunately not until after I had finished my initial reversing, but I was able to validate my analysis and also investigate identify a few things I had not noticed before. One of the interesting things that was not referenced in any calls in that version (and has been since &#8211; now the dc1 attack) was the WinSockGetAntiCookies function and in the latest 1.15 version.</p>
<p>We&#8217;ve also had Madness in our botnet tracking system for a number of months and have some interesting data on some of the sites that have been targeted. One of the most popular targets appears to be the &#8221;underground&#8221; forum fuckav.ru, but the botnets do not appear to be very large as the availability of the site does not appear to be affected very much. The locations of the CnCs tracked are fairly geographically disparate &#8211;  locations that we have found CnCs hosted include the United States, Russia, Slovakia, Netherlands, and France.</p>
<h1>Conclusion</h1>
<p>Given the breadth of the DDoS attacks available in Madness and the ability to attack large numbers of targets at the same time, it does not appear that Madness will be going away anytime soon in the DDoS space. A number of very active CnCs have been observed so far, and we can only expect to see more in the future.</p>
<blockquote>
<pre>Related MD5:</pre>
<pre style="font-size: 12px;">cc303da2c4b7a031d578c1dbf5af1970
027dcd2e6d231598c47557bdea98843d
60c77216bfcc21a2b993ca7e688f5b20
df99277fb3946c0327f10dc1c501452c
3fb38453a63dca35c0e751a709485e2b
32187e96c5af1177c35813c17302babf</pre>
<pre></pre>
</blockquote>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2014/01/can-i-play-with-madness/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/ddos-attacks/" title="View all posts in Attacks and DDoS Attacks" rel="category tag">Attacks and DDoS Attacks</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/botnets/" title="View all posts in Botnets" rel="category tag">Botnets</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-5994 post type-post status-publish format-standard hentry category-botnets category-encryption category-malware category-reverse-engineering category-trojan-horses" id="post-5994">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2013/12/a-business-of-ferrets/" rel="bookmark tag" title="A Business of Ferrets blog post entry">A Business of Ferrets</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/dschwarz">Dennis Schwarz</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2013/12/a-business-of-ferrets/">12/17/2013</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p style="text-align: left;">Trojan.Ferret appeared on my radar thanks to a <a href="https://twitter.com/malpush/status/406308528920342528">tweet</a> by @malpush. The tweet revealed a URL that at the time of this writing was pointing to a command and control (C&amp;C) panel that looked like this:</p>
<p style="text-align: left;"><a href="http://www.arbornetworks.com/asert/wp-content/uploads/2013/12/login-e1386356339994.png"><img class="alignnone size-full wp-image-5996" alt="login" src="/asert/wp-content/uploads/2013/12/login-e1386356339994.png" width="454" height="122" /></a></p>
<p style="text-align: left;">The logo alone convinced me to study this business of ferrets further. Coincidentally (for Arbor), it turns out that this malware is a DDoS bot.</p>
<p><b>Malware Sample</b></p>
<p>The sample analyzed can be found at <a href="https://malwr.com/analysis/YjUzYTQxMWY5N2JiNDJkOTg5MTc2ZTQwZjA3N2I5Y2Y/">malwr</a> (MD5: 4fa91b76294d849d01655ffb72b30981).</p>
<p>It is written in Delphi and plays the following malware games: UPX packing, string obfuscation, anti-virtual machine, anti-debugging, self-modifying code, and process hollowing.</p>
<p>Based on the Delphi usage and the language used for part of the panel, this bot is likely of Russian origin.</p>
<p><b>Obfuscations</b></p>
<p>Trojan.Ferret uses two methods of obfuscation; both are a combination of base64 and XOR. Different keys are used for various sections. The first obfuscation method is used mostly for strings and can be decrypted with the following Python function:</p>
<pre>def decrypt_strings(msg, key):
  msg_no_b64 = base64.b64decode(msg)

  plain_buf = []
  for i in range(len(msg_no_b64)):
    key_lsb = ord(key[i % len(key)]) &amp; 0xf
    msg_lsb = ord(msg_no_b64[i]) &amp; 0xf

    c = msg_lsb ^ key_lsb
    d = c ^ 0xa

    msg_slsb = ord(msg_no_b64[i]) &amp; 0xf0
    plain_byte = msg_slsb ^ d

    plain_buf.append(chr(plain_byte))

  return "".join(plain_buf)</pre>
<p>Here are some examples:</p>
<pre>&gt;&gt;&gt; decrypt_strings("QG1wZ2xnPj4sZGNk", "12xc3qwfhjeryTTYHH")
'Kernel32.dll'

&gt;&gt;&gt; decrypt_strings("TG12RGZveGBnSG5mZ2JrQg==", "12xc3qwfhjeryTTYHH")
'GetModuleHandleA'

&gt;&gt;&gt; decrypt_strings("dWpkbXFqZmxi", "mu#X")
'removeone'

&gt;&gt;&gt; decrypt_strings("cn9tY3Nqf2d1", "mu#X")
'updatever'

&gt;&gt;&gt; decrypt_strings("ZXN8djotITgyOyQ0MD4mOD45Jzc5I2NmfS1kaXhzdCx+YXo=", "GMrlZ8t3pypO3423423LpFqCUx")
'http://188.190.101.13/hor/input.php'</pre>
<p>The second method is used mostly for C&amp;C communications and can be cleaned up with the following Python function:</p>
<pre>def decrypt_cnc(msg, key):
  msg_no_b64 = base64.b64decode(msg)

  plain_buf = []
  for offset, enc_byte in enumerate(msg_no_b64):
    plain_byte = ord(enc_byte) ^ ord(key[offset % len(key)])
    plain_buf.append(chr(plain_byte))

  return "".join(plain_buf)</pre>
<p>Here are some examples:</p>
<pre>&gt;&gt;&gt; decrypt_cnc("ChYJCRhta3k=", "x38")
'2.11 USA'

&gt;&gt;&gt; decrypt_cnc("DRhAAA4YeRgIXBgIUBgPVRgKAEs=", "x38")
'5 x86 A 0d 0h 7m 28s'</pre>
<p><b>Command and Control</b></p>
<p>C&amp;C is HTTP based. Two message types have been identified. The first is message type 0 or the “phone home” and looks like:</p>
<pre>POST /hor/input.php HTTP/1.0
Host: 188.190.101.13
User-Agent: Mozilla Gecko Firefox 25
Accept: text/plain
Accept-Encoding: identity
Accept-Language: en-EN,en
Connection: Close
Referer: http://mhome.br
Content-Length: 106
Content-Type: application/x-www-form-urlencoded

m=CA==&amp;h=CQAACAsPDgEICgkPCQkPDQgPDw4KCQ4LDw4BCwE=&amp;p=cHd1fQ==&amp;v=ChYJCRhta3k=&amp;s=DRhAAA4YeRgIXBgIUBgPVRgKAEs=</pre>
<p>Here’s what it looks like decrypted:</p>
<pre>m=0&amp;h=18803769021711750776216376939&amp;p=HOME&amp;v=2.11 USA&amp;s=5 x86 A 0d 0h 7m 28s</pre>
<p>Its POST parameters are:</p>
<ul>
<li>m – Message type (0)</li>
<li>h – Hash based on computer name</li>
<li>p – Computer name</li>
<li>v – Version and locale</li>
<li>s – Windows version, architecture, user type, and uptime</li>
</ul>
<p>The phone home response looks like:</p>
<pre>HTTP/1.1 200 OK
Date: Wed, 04 Dec 2013 14:48:27 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Content-Length: 32
Connection: close
Content-Type: text/html; charset=UTF-8

dVdCUVRUWRh/XVtTVxh+UUpdXldAGAoN</pre>
<p>Decrypted, it is the User-Agent used in the request:</p>
<pre>&gt;&gt;&gt; decrypt_cnc("dVdCUVRUWRh/XVtTVxh+UUpdXldAGAoN", "x38")
'Mozilla Gecko Firefox 25'</pre>
<p>The second message type is 1 or “poll for commands”. It looks like:</p>
<pre>POST /hor/input.php HTTP/1.0
Host: 188.190.101.13
User-Agent: Mozilla Gecko Firefox 25
Accept: text/plain
Accept-Encoding: identity
Accept-Language: en-EN,en
Connection: Close
Referer: http://udot.tk
Content-Length: 49
Content-Type: application/x-www-form-urlencoded

m=CQ==&amp;h=CQAACAsPDgEICgkPCQkPDQgPDw4KCQ4LDw4BCwE=</pre>
<p>And here it is decrypted:</p>
<pre>m=1&amp;h=18803769021711750776216376939</pre>
<p>Its POST parameters are:</p>
<ul>
<li>m – Message type (1)</li>
<li>h &#8211; Hash based on computer name</li>
</ul>
<p>An example poll response is:</p>
<pre>HTTP/1.1 200 OK
Date: Wed, 04 Dec 2013 12:56:16 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Content-Length: 72
Connection: close
Content-Type: text/html; charset=UTF-8

UExMSF5UV1dcElBMTEgCFxdMWUpfXUwWVl1MF1FWXF1AFkhQSBcSAAgSCQ0IEgg=</pre>
<p>Decrypted:</p>
<pre>&gt;&gt;&gt; decrypt_cnc("UExMSF5UV1dcElBMTEgCFxdMWUpfXUwWVl1MF1FWXF1AFkhQSBcSAAgSCQ0IEgg=", "x38")
'httpflood*http://target.net/index.php/*80*150*0'</pre>
<p>Commands are delimited by “*”s and are formatted like:</p>
<pre>command*arg1*arg2*arg3*arg4*arg5*arg6*arg7</pre>
<p><b>Commands</b></p>
<p>The following bot commands have been identified:</p>
<ul>
<li>httpflood &#8211; HTTP GET flood</li>
<li>httppost &#8211; HTTP POST flood</li>
<li>udpflood &#8211; UDP flood</li>
<li>synflood &#8211; TCP connect flood</li>
<li>tcpflood &#8211; TCP flood</li>
<li>download &#8211; download and execute (all bots)</li>
<li>downloadone &#8211; download and execute (specified bot)</li>
<li>update &#8211; update (all bots)</li>
<li>updateos &#8211; update (specified OS)</li>
<li>updateone &#8211; update (specified bot)</li>
<li>updatever &#8211; update (specified version)</li>
<li>removeos &#8211; remove bot (specified OS)</li>
<li>removeone &#8211; remove bot (specified bot)</li>
<li>s! &#8211; stop all floods</li>
<li>su &#8211; stop UDP flood</li>
<li>sh &#8211; stop HTTP flood</li>
<li>ss &#8211; stop TCP SYN flood</li>
<li>st &#8211; stop TCP flood</li>
</ul>
<p>More information about each command can be found in the “Task Management” section of the C&amp;C panel:</p>
<p><a href="http://www.arbornetworks.com/asert/wp-content/uploads/2013/12/tasks1.png"><img class="size-full wp-image-6005 alignleft" alt="tasks1" src="/asert/wp-content/uploads/2013/12/tasks1-e1386358108940.png" width="456" height="271" /></a></p>
<p style="text-align: left;"><a href="http://www.arbornetworks.com/asert/wp-content/uploads/2013/12/tasks2.png"><img class="alignnone size-full wp-image-6006" alt="tasks2" src="/asert/wp-content/uploads/2013/12/tasks2-e1386358194510.png" width="459" height="341" /></a></p>
<p>Note: I didn’t see any references to the “memexec” or “script” commands in the analyzed binary.</p>
<p><b>C&amp;C Panel</b></p>
<p>Wrapping up, here is a behind the scenes tour of the C&amp;C panel; the “Statistic/Index” page:</p>
<p style="text-align: left;"><a href="http://www.arbornetworks.com/asert/wp-content/uploads/2013/12/index.png"><img class="alignnone size-full wp-image-6008" alt="index" src="/asert/wp-content/uploads/2013/12/index-e1386358309855.png" width="457" height="198" /></a></p>
<p>Here is the “Uploads” page:</p>
<p style="text-align: left;"><a href="http://www.arbornetworks.com/asert/wp-content/uploads/2013/12/uploads.png"><img class="alignnone size-full wp-image-6007" alt="uploads" src="/asert/wp-content/uploads/2013/12/uploads-e1386358257283.png" width="459" height="68" /></a></p>
<p>And, part of the “Bot List” page:</p>
<p><a href="http://www.arbornetworks.com/asert/wp-content/uploads/2013/12/bots.png"><img class="alignnone size-full wp-image-6009" alt="bots" src="/asert/wp-content/uploads/2013/12/bots-e1386358352675.png" width="454" height="272" /></a></p>
<p><b>Conclusions</b></p>
<p>This post has analyzed the crypto, C&amp;C infrastructure, and command set of Trojan.Ferret—a new DDoS bot that is likely of Russian origin.  At the time of this writing only a handful of unique samples and C&amp;C servers have been identified, so the scope and impact of the new threat is still uncertain. ASERT will continue to track this business of ferrets, and any other new businesses that arise.</p>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2013/12/a-business-of-ferrets/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/botnets/" title="View all posts in Botnets" rel="category tag">Botnets</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/encryption/" title="View all posts in Encryption" rel="category tag">Encryption</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/reverse-engineering/" title="View all posts in Reverse Engineering" rel="category tag">Reverse Engineering</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/trojan-horses/" title="View all posts in Trojan Horses" rel="category tag">Trojan Horses</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
									<article class="post-5969 post type-post status-publish format-standard hentry category-interesting-research category-malware category-reverse-engineering category-spam" id="post-5969">

						<header>
							<h1 class="entry-title"><a href="http://www.arbornetworks.com/asert/2013/12/bitcoin-alarm-bitcoin-stealing-spam/" rel="bookmark tag" title="Bitcoin Alarm &#8211; Bitcoin stealing spam blog post entry">Bitcoin Alarm &#8211; Bitcoin stealing spam</a></h1>
							<small class="meta">
	<span class="meta-author">By: <a href="http://www.arbornetworks.com/asert/author/kenny">Kenny MacDermid</a></span> - <time datetime="%3$s" pubdate><a href="http://www.arbornetworks.com/asert/2013/12/bitcoin-alarm-bitcoin-stealing-spam/">12/12/2013</a></time>
</small>						</header>

						<!-- *optional* remove read more link -->
						<!-- http://codex.wordpress.org/Customizing_the_Read_More -->
						<!-- Resolves Issue #4: https://github.com/grayghostvisuals/WP-Flex/issues/4 -->
						<div class="entry-content">
							<p>The rise in Bitcoin values seems to have caused an equal increase of Bitcoin spam as malware authors attempt to make money off the many new market participants. One site that was spammed to me three times in one day is bitcoin-alarm.net. I ignored it the first two times, but they must have really wanted me to look at it, so who am I not to oblidge.</p>
<p><a href="http://www.arbornetworks.com/asert/wp-content/uploads/2013/12/btclogo.png"><img class="aligncenter size-medium wp-image-5972" alt="Bitcoin Alarm Logo" src="/asert/wp-content/uploads/2013/12/btclogo-300x36.png" width="300" height="36" /></a></p>
<p>The site promises a tool to notify you of market changes by SMS, without ever mentioning any nefarious behaviour. YouTube videos teach you what Bitcoin is, and how to install this free tool.  They even provide a link so you can donate to the author, although <a href="https://blockchain.info/address/1PwY2aBrYiZEwtApc5hQ3RwWH64LEsoXAc">it appears</a> no one has chosen to do so. This I have to download.</p>
<p><img class="aligncenter size-full wp-image-5970" alt="BitcoinAlarm Icon" src="/asert/wp-content/uploads/2013/12/AppScreenshot.png" width="175" height="50" /></p>
<p>The download BitcoinAlarm.exe (MD5: edfa12d4a454b0eb786bbe92050ab88a) had just<a href="https://www.virustotal.com/en/file/3e032b8c58aa17811d74f92658196374c2b8e6670640c121582690dab00573a0/analysis/"> 1 hit on VirusTotal</a> when I first scanned it (from <a href="http://www.kaspersky.com">Kaspersky</a>). Is it a false positive on a nice free tool? Lets dig deeper.</p>
<p>The download is an installer. A quick strings didn&#8217;t turn up anything interesting, so lets try <a href="https://github.com/devttys0/binwalk">binwalk</a>:</p>
<p><img class="aligncenter size-full wp-image-5973" alt="Binwalk Results - a rar archive" src="/asert/wp-content/uploads/2013/12/Binwalk-Results.png" width="872" height="112" /><br />
I carved out this RAR archive to see what it contains:</p>
<pre>dd if=BitcoinAlarm.exe.virus of=out.rar bs=1 skip=756224
mkdir ext
unrar x out.rar ext/</pre>
<p><img class="aligncenter size-full wp-image-5975" alt="Unrar results: an SFX script and 5 files." src="/asert/wp-content/uploads/2013/12/unrar.png" width="594" height="226" /></p>
<p>There&#8217;s an SFX script run, lets see what it does:</p>
<div id="attachment_5976" style="width: 518px" class="wp-caption aligncenter"><img class="size-full wp-image-5976" alt="CreateObject(&quot;WScript.Shell&quot;).Exec &quot;winupdate.exe 5943564.IFW&quot;" src="/asert/wp-content/uploads/2013/12/sfxvbe.png" width="508" height="22" /><p class="wp-caption-text">cat 7246235.vbe</p></div>
<p>A quick check of winupdate.exe with VirusTotal shows that it&#8217;s the valid (and non-malicious) <a href="http://www.autoitscript.com/">AutoIt</a> executable. AutoIt is a great little scripting language for Windows, it&#8217;s especially useful for automating GUI related tasks. So if winupdate.exe is AutoIt that would make 5943564.IFW an AutoIt script. It looks like it was obfuscated somewhat though:</p>
<div id="attachment_5977" style="width: 542px" class="wp-caption aligncenter"><img class="size-full wp-image-5977" alt="a bunch of comments" src="/asert/wp-content/uploads/2013/12/obfusscript.png" width="532" height="181" /><p class="wp-caption-text">head 5943564.IFW</p></div>
<p>Run it through</p>
<pre>sed -e '/^;[0-9]/d'</pre>
<p>to clean up the garbage and we end up with <a href="http://pastebin.com/QyZz8mR3">this script</a>. It starts by checking if <a href="http://www.avast.com">Avast</a> is running and if so it sleeps for 20 seconds. I guess this is long enough for Avast to get bored and go look at something else:</p>
<p><a href="http://pastebin.com/QyZz8mR3"><img class="aligncenter size-full wp-image-5979" alt="if Avast, sleep for 20 seconds" src="/asert/wp-content/uploads/2013/12/scriptstart2.png" width="432" height="127" /></a></p>
<p>Well, that&#8217;s certainly not a good sign. It&#8217;s a pretty solid chance that if software is checking for an antivirus engine that it&#8217;s up to no good. A scan of the rest of the file contains other interesting methods like &#8220;disable_uac&#8221;, &#8220;anti_hook&#8221;, &#8220;persistence&#8221;, &#8220;botkiller&#8221;, &#8220;downloader&#8221;, &#8220;disable_syste_restore&#8221;. It&#8217;s starting to look like <a href="http://www.kaspersky.com">Kaspersky</a> was right, congrats on being the 1/49 to detect this.</p>
<p>I see a lot of calls to IniRead(), and they&#8217;re all reading 65901.PPZ. It looks like this is the configuration file. In contains:</p>
<pre>[6404000]
6662859=9455413
[2244034]
6224525=3244993
[3206254]
5598349=4588436
[5378250]
6296134=4064234
[1109091]
1109091=asvep</pre>
<p>Matching these to the script we see find the sections are:</p>
<pre># 6404000 == disable_uac()
# 2244034 == AdlibRegister("anti_hook", 500)
# 3206254 == AdlibRegister("persistence", 500)
# 5378250 == startup()
# 1109021 == $sKey</pre>
<p>This crypto key is used in Main to decrypt and run the file 20070.RQT:</p>
<p><img class="aligncenter size-full wp-image-5981" alt="decrypt and run 20070.RQT with cryptkey" src="/asert/wp-content/uploads/2013/12/submain.png" width="569" height="166" /></p>
<p>The easiest way to decrypt this file was to simply let the script do the work. There&#8217;s a lot of code outside of functions though, so care has to be taken to remove everything non-crypto related. Remove the _RunPE() and replace it with</p>
<pre>FileWrite($uniscriptdir &amp; "DECRYPTED", $sArquive)</pre>
<p>The decrypted file had <a href="https://www.virustotal.com/en/file/098c5a6d4c9e0926c054fc7ca79f67e6de7bf8f41245ed1063fea48575bb377d/analysis/">30/48 hits of VirusTotal</a> when I scanned it (MD5: 224c73f8172123e5ddca2302425664a6). It&#8217;s called NetWiredRC and is a remote access trojan made for stealing login information, and likely in this case being used to steal Bitcoins. It connect to <strong>bitcoins.dd-dns.de</strong> on port 3360.</p>
<p>Some choice credential related strings from the decrypted malware:</p>
<pre>%sThunderbirdprofiles.ini
select *  from moz_logins
%s.purpleaccounts.xml
SoftwareMicrosoftInternet ExplorerIntelliFormsStorage2</pre>
<p>This free utility is nothing more than malware with very low detection rate being spammed to anyone that might have a Bitcoin sitting around. When I <a href="http://www.urlvoid.com/scan/bitcoin-alarm.net/">checked the domain with urlvoid</a> it had zero &#8216;bad&#8217; reports and was not blacklisted. I&#8217;ve since submitted the domain to multiple scanners and it&#8217;s now detected by <a href="http://www.scumware.org/">Scumware</a>.</p>
<p>On a recheck BitcoinAlarm.exe&#8217;s detection is up to 14 of 49 scanners, and the download link appears to return 404. bitcoins.dd-dns.de is no longer answering on port 3360.</p>
<p>Never before has it been so easy to leave cash accessible from the Internet, so expect more malware to make off with your Bitcoin wallet. Bitcoins that are not in use should be moved off into <a href="https://en.bitcoin.it/wiki/Cold_storage">cold storage</a>, or donated to <a href="http://theseinfelddictionary.com/2007/12/12/human-fund/">the human fund</a> at 136K8a5Mb8uDguFb7RnoXz7gzBSe2xaEED (ahem, worth a shot right?).</p>
						</div>

						<!-- post footer -->
						<footer class="entry-footer">
							<div class="comments-count">
								<a href="http://www.arbornetworks.com/asert/2013/12/bitcoin-alarm-bitcoin-stealing-spam/#comments" class="comments-count-number">0Comments</a>
							</div>

							<ul class="entry-taxonomies">
								<li>
									Tagged:									<ul class="entry-list entry-list-tags">
										<li class="entry entry-tags"></li>
									</ul>
								</li>

								<li>
									Filed under:									<ul class="entry-list entry-list-categories">
										<li class="entry entry-categories"><a href="http://www.arbornetworks.com/asert/category/interesting-research/" title="View all posts in Interesting Research" rel="category tag">Interesting Research</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/malware/" title="View all posts in Malware" rel="category tag">Malware</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/reverse-engineering/" title="View all posts in Reverse Engineering" rel="category tag">Reverse Engineering</a></li><li>,<a href="http://www.arbornetworks.com/asert/category/spam/" title="View all posts in Spam" rel="category tag">Spam</a></li>
									</ul>
								</li>
							</ul>
						</footer>

					</article>
				
				<!-- post loop error message -->
				
				<p><a href="http://www.arbornetworks.com/asert/category/malware/page/2/" >Go Back In Time &rarr;</a></p>
			</section>
		</div>

		<div class="l-column-right">
			<span class="column-title">featuring</span>
			<aside id="sidebar" role="complementary">
				<article id="text-4" class="widget widget_text"><h3 class="widget-title">Arbor Sert</h3>			<div class="textwidget"><p>This blog is the public home of our research, commentary, analysis and industry observations. Like the company itself, our blog features a wide variety of talented individual contributors, from world-renowned security researchers on Arbor’s Security Engineering & Response Team (ASERT) to product managers, engineers and architects, to the office of the CTO. As experts, they all bring an interesting mix of subject matter expertise and experience to the conversation.
</p><p>
Arbor is a company with a history rooted in groundbreaking research at the University of Michigan a decade ago, and we remain researchers at heart. We hope you find our perspective interesting and we welcome your comments and feedback.
</p></div>
		</article><div class="widget">
<h3 class="slider-label widget-title">Live Data Feed</h3>
<div class="data-feed">
<div class="flexslider-sm-wrap">
<div class="slider-sm flexslider-sm">
<ul id='active-threat-metrics' class='slides'>
<li>
<div><div>
<span class='data-feed-num large'>
6320
</span>
<span class='metric-info'>
DDoS Attacks Per Day Worldwide
</span>
</div></div>
</li>
<li>
<div><div>
<span class='metric-num'>
60.7
</span>
<span class='metric-info'>
 Peak Attack in Gbps Past 24 Hours
</span>
</div></div>
</li>
<li>
<div><div>
<span class='metric-num'>
785
</span>
<span class='metric-info'>
 Active Botnets Detected
</span>
</div></div>
</li>
</ul>
</div>
</div>
</div>
<footer class="happening-right-now-module-footer">
<a href="http://atlas.arbor.net"><img src="//arbornetworks.com/images/atlas.png" alt="Atlas"><span class="feed-link">Feed based on ATLAS data</span></a>
</footer>
</div>
<article id="tag_cloud-2" class="widget widget_tag_cloud"><h3 class="widget-title">Tag Cloud</h3><div class="tagcloud"><a href='http://www.arbornetworks.com/asert/tag/end-of-internet/' class='tag-link-51' title='2 topics' style='font-size: 10.709677419355pt;'>"End of Internet"</a>
<a href='http://www.arbornetworks.com/asert/tag/500-internal-ddos/' class='tag-link-52' title='1 topic' style='font-size: 8pt;'>500 Internal DDoS</a>
<a href='http://www.arbornetworks.com/asert/tag/504/' class='tag-link-53' title='1 topic' style='font-size: 8pt;'>504</a>
<a href='http://www.arbornetworks.com/asert/tag/add-new-tag/' class='tag-link-54' title='2 topics' style='font-size: 10.709677419355pt;'>Add new tag</a>
<a href='http://www.arbornetworks.com/asert/tag/albaddos/' class='tag-link-55' title='1 topic' style='font-size: 8pt;'>AlbaDDoS</a>
<a href='http://www.arbornetworks.com/asert/tag/aldi/' class='tag-link-56' title='1 topic' style='font-size: 8pt;'>Aldi</a>
<a href='http://www.arbornetworks.com/asert/tag/aldi-bot/' class='tag-link-57' title='1 topic' style='font-size: 8pt;'>Aldi Bot</a>
<a href='http://www.arbornetworks.com/asert/tag/algorithm/' class='tag-link-58' title='1 topic' style='font-size: 8pt;'>algorithm</a>
<a href='http://www.arbornetworks.com/asert/tag/arbor-networks-ddos-experts/' class='tag-link-3' title='3 topics' style='font-size: 12.516129032258pt;'>Arbor Networks - DDoS Experts</a>
<a href='http://www.arbornetworks.com/asert/tag/armageddon/' class='tag-link-59' title='3 topics' style='font-size: 12.516129032258pt;'>Armageddon</a>
<a href='http://www.arbornetworks.com/asert/tag/attack/' class='tag-link-60' title='1 topic' style='font-size: 8pt;'>attack</a>
<a href='http://www.arbornetworks.com/asert/tag/attacks/' class='tag-link-61' title='1 topic' style='font-size: 8pt;'>Attacks</a>
<a href='http://www.arbornetworks.com/asert/tag/beer-ddos/' class='tag-link-62' title='1 topic' style='font-size: 8pt;'>Beer DDoS</a>
<a href='http://www.arbornetworks.com/asert/tag/bgp/' class='tag-link-63' title='3 topics' style='font-size: 12.516129032258pt;'>BGP</a>
<a href='http://www.arbornetworks.com/asert/tag/black-peace-group/' class='tag-link-64' title='1 topic' style='font-size: 8pt;'>Black Peace Group</a>
<a href='http://www.arbornetworks.com/asert/tag/bot/' class='tag-link-67' title='2 topics' style='font-size: 10.709677419355pt;'>Bot</a>
<a href='http://www.arbornetworks.com/asert/tag/botnet/' class='tag-link-68' title='6 topics' style='font-size: 16.279569892473pt;'>Botnet</a>
<a href='http://www.arbornetworks.com/asert/tag/botnets/' class='tag-link-7' title='2 topics' style='font-size: 10.709677419355pt;'>Botnets</a>
<a href='http://www.arbornetworks.com/asert/tag/china/' class='tag-link-72' title='2 topics' style='font-size: 10.709677419355pt;'>China</a>
<a href='http://www.arbornetworks.com/asert/tag/crypto/' class='tag-link-76' title='2 topics' style='font-size: 10.709677419355pt;'>Crypto</a>
<a href='http://www.arbornetworks.com/asert/tag/danny-mcpherson/' class='tag-link-82' title='2 topics' style='font-size: 10.709677419355pt;'>Danny McPherson</a>
<a href='http://www.arbornetworks.com/asert/tag/ddos/' class='tag-link-87' title='16 topics' style='font-size: 22pt;'>ddos</a>
<a href='http://www.arbornetworks.com/asert/tag/denial-of-service-attack/' class='tag-link-93' title='2 topics' style='font-size: 10.709677419355pt;'>Denial-of-service attack</a>
<a href='http://www.arbornetworks.com/asert/tag/dirt-jumper/' class='tag-link-94' title='2 topics' style='font-size: 10.709677419355pt;'>Dirt Jumper</a>
<a href='http://www.arbornetworks.com/asert/tag/down/' class='tag-link-99' title='2 topics' style='font-size: 10.709677419355pt;'>down</a>
<a href='http://www.arbornetworks.com/asert/tag/facebook/' class='tag-link-106' title='2 topics' style='font-size: 10.709677419355pt;'>Facebook</a>
<a href='http://www.arbornetworks.com/asert/tag/google/' class='tag-link-114' title='5 topics' style='font-size: 15.225806451613pt;'>Google</a>
<a href='http://www.arbornetworks.com/asert/tag/halloween/' class='tag-link-118' title='2 topics' style='font-size: 10.709677419355pt;'>Halloween</a>
<a href='http://www.arbornetworks.com/asert/tag/hijack/' class='tag-link-119' title='2 topics' style='font-size: 10.709677419355pt;'>hijack</a>
<a href='http://www.arbornetworks.com/asert/tag/internet/' class='tag-link-128' title='2 topics' style='font-size: 10.709677419355pt;'>internet</a>
<a href='http://www.arbornetworks.com/asert/tag/internet-protocol/' class='tag-link-129' title='2 topics' style='font-size: 10.709677419355pt;'>Internet Protocol</a>
<a href='http://www.arbornetworks.com/asert/tag/internet-service-provider/' class='tag-link-130' title='8 topics' style='font-size: 17.784946236559pt;'>Internet service provider</a>
<a href='http://www.arbornetworks.com/asert/tag/internet-traffic/' class='tag-link-131' title='8 topics' style='font-size: 17.784946236559pt;'>Internet traffic</a>
<a href='http://www.arbornetworks.com/asert/tag/ipv4/' class='tag-link-20' title='2 topics' style='font-size: 10.709677419355pt;'>IPv4</a>
<a href='http://www.arbornetworks.com/asert/tag/ipv6/' class='tag-link-21' title='3 topics' style='font-size: 12.516129032258pt;'>IPv6</a>
<a href='http://www.arbornetworks.com/asert/tag/iran/' class='tag-link-135' title='2 topics' style='font-size: 10.709677419355pt;'>Iran</a>
<a href='http://www.arbornetworks.com/asert/tag/malware-2/' class='tag-link-139' title='2 topics' style='font-size: 10.709677419355pt;'>malware</a>
<a href='http://www.arbornetworks.com/asert/tag/network/' class='tag-link-149' title='2 topics' style='font-size: 10.709677419355pt;'>network</a>
<a href='http://www.arbornetworks.com/asert/tag/outage/' class='tag-link-156' title='4 topics' style='font-size: 14.021505376344pt;'>outage</a>
<a href='http://www.arbornetworks.com/asert/tag/peering/' class='tag-link-158' title='3 topics' style='font-size: 12.516129032258pt;'>peering</a>
<a href='http://www.arbornetworks.com/asert/tag/security/' class='tag-link-169' title='5 topics' style='font-size: 15.225806451613pt;'>Security</a>
<a href='http://www.arbornetworks.com/asert/tag/streaming-media/' class='tag-link-177' title='2 topics' style='font-size: 10.709677419355pt;'>Streaming media</a>
<a href='http://www.arbornetworks.com/asert/tag/traffic/' class='tag-link-182' title='2 topics' style='font-size: 10.709677419355pt;'>traffic</a>
<a href='http://www.arbornetworks.com/asert/tag/wikileaks/' class='tag-link-191' title='3 topics' style='font-size: 12.516129032258pt;'>Wikileaks</a>
<a href='http://www.arbornetworks.com/asert/tag/youtube/' class='tag-link-197' title='4 topics' style='font-size: 14.021505376344pt;'>YouTube</a></div>
</article>			</aside>
		</div>

	</div>
</div>
<footer class="footer footer-primary clearfix" role="contentinfo">

<!-- Google Tag Manager -->
<noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-P2XR"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-P2XR');</script>
<!-- End Google Tag Manager -->


	<div class="l-wrapper l-wrapper-footer">
		<div class="l-column-left clearfix">

<div class="menu-footer-container"><ul id="menu-footer" class="menu"><li id="menu-item-5416" class="disclaimer-info menu-item menu-item-type-custom menu-item-object-custom menu-item-5416"><a href="/">Corporate Site  |</a></li>
<li id="menu-item-5414" class="disclaimer-info menu-item menu-item-type-custom menu-item-object-custom menu-item-5414"><a href="/threats/">Threat Portal  |</a></li>
<li id="menu-item-5415" class="disclaimer-info menu-item menu-item-type-custom menu-item-object-custom menu-item-5415"><a href="http://atlas.arbor.net">ATLAS Portal  |</a></li>
<li id="menu-item-5417" class="disclaimer-info menu-item menu-item-type-custom menu-item-object-custom menu-item-5417"><a href="/privacy-policy/">Privacy Policy  |</a></li>
<li id="menu-item-5418" class="disclaimer-info menu-item menu-item-type-custom menu-item-object-custom menu-item-5418"><a href="/legal-notice/">Legal</a></li>
</ul></div>
			<!-- WPFlex vCard -->
			
							<!-- fn org -->
				<section id="wpflex-options">
					<ul class="dashboard-options">
						<!-- fn org -->
													<li class="fnorg"><small>© Copyright 2014 Arbor Networks, All rights reserved</small></li>  
						
						<!-- adr -->
													<li class="disclaimer">
								<small class="disclaimer-info">
									<span>Arbor Networks is a global provider of DDoS attack prevention, network security and visibility solutions. To find out more, visit <a href="http://www.arbornetworks.com/">http://www.arbornetworks.com/</a></span>
								</small>
							</li>
											</ul>
				</section>
			</div>
			
		<div class="l-column-right">
			<ul id="footer-socials">
				<!-- Linkedin -->
													<li id="footer-linkedin">
						<div class="linkedin">
						  <a href="http://www.linkedin.com/company/arbor-networks" rel="external"><img src="http://www.arbornetworks.com/asert/wp-content/themes/atlas-blog-theme/img/linkedin.png" alt=""></a>
						</div>
					</li>
				
				<!-- Twitter -->
													<li id="footer-twitter">
						<div class="twitter">
						  <a href="https://twitter.com/arbornetworks" rel="external"><img src="http://www.arbornetworks.com/asert/wp-content/themes/atlas-blog-theme/img/twitter.png" alt=""></a>
						</div>
					</li>
				
				<!-- Pinterest -->
													<li id="footer-pinterest">
						<div class="pinterest">
						  <a href="http://www.youtube.com/user/ArborNetworks" rel="external"><img src="http://www.arbornetworks.com/asert/wp-content/themes/atlas-blog-theme/img/pinterest.png" alt=""></a>
						</div>
					</li>
				
				<!-- Slideshare -->
													<li id="footer-slideshare">
						<div class="slideshare">
						  <a href="http://www.slideshare.net/Arbor_Networks" rel="external"><img src="http://www.arbornetworks.com/asert/wp-content/themes/atlas-blog-theme/img/slideshare.png" alt=""></a>
						</div>
					</li>
				
				<!-- Youtube -->
													<li id="footer-youtube">
						<div class="youtube">
						  <a href="http://www.youtube.com/user/ArborNetworks" rel="external"><img src="http://www.arbornetworks.com/asert/wp-content/themes/atlas-blog-theme/img/youtube.png" alt=""></a>
						</div>
					</li>
							</ul>
		</div>
	</div>
</footer>
<link rel='stylesheet' id='gigpress-css-css'  href='http://www.arbornetworks.com/asert/wp-content/plugins/gigpress/css/gigpress.css?ver=3.8.2' type='text/css' media='all' />
<script type='text/javascript' src='http://www.arbornetworks.com/asert/wp-content/themes/atlas-blog-theme/js/minified/main-min.js?ver=1.0.5'></script>
</body>
</html>
