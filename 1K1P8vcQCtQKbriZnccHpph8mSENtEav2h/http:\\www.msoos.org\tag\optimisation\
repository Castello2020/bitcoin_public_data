http://www.msoos.org/tag/optimisation/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 15:29:02 GMT
Server: Apache/2.2.22 (Debian)
X-Powered-By: W3 Total Cache/0.9.4
Vary: Accept-Encoding
X-Pingback: http://www.msoos.org/wordpress/xmlrpc.php
X-Mod-Pagespeed: 1.7.30.4-3847
Content-Encoding: gzip
Cache-Control: max-age=0, no-cache
Content-Length: 18295
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html> <!--[if IE 7]><html
class="ie ie7" lang="en-US"> <![endif]--> <!--[if IE 8]><html
class="ie ie8" lang="en-US"> <![endif]--> <!--[if !(IE 7) | !(IE 8)  ]><!--><html lang="en-US"> <!--<![endif]--><head><link rel="stylesheet" type="text/css" href="http://www.msoos.org/wordpress/wp-content/cache/minify/000000/A.fY_RDsIwCEV_aLXuk5CytdrBUmq6_r24TF80e2iA5NBzGT0W6MJOO1fYXExzzPYqFY-qfkl8EBdrh_EEr5EWUo8ZVBN-6unKJFzNIQwoQ5MS1kImbatLjPkZ3t_ZHEBjQmHdM_zn7moBEj5usn0bcwdpnAWCW4BhPo6ainmHq6-NuHajSyXiI81MTGW3_RJae6YX.css.pagespeed.cf.27IzAWCDrT.css" media="all"/><link rel="stylesheet" type="text/css" href="http://www.msoos.org/wordpress/wp-content/cache/minify/000000/A.M9RPL8gpLdZNzs_NTc0rKdZPLC5OBVLFJZU5qcX6QLn0zDwA.css.pagespeed.cf.5Y-MGexOGr.css" media="all"/><meta charset="UTF-8"><meta name="viewport" content="width=device-width"><title>Optimisation | Wonderings of a SAT geek</title><link rel="profile" href="http://gmpg.org/xfn/11"><link rel="pingback" href="http://www.msoos.org/wordpress/xmlrpc.php"> <!--[if lt IE 9]><script src="http://www.msoos.org/wordpress/wp-content/themes/twentythirteen/js/html5.js"></script><![endif]--><link rel="alternate" type="application/rss+xml" title="Wonderings of a SAT geek &raquo; Feed" href="http://www.msoos.org/feed/"/><link rel="alternate" type="application/rss+xml" title="Wonderings of a SAT geek &raquo; Comments Feed" href="http://www.msoos.org/comments/feed/"/><link rel="alternate" type="application/rss+xml" title="Wonderings of a SAT geek &raquo; Optimisation Tag Feed" href="http://www.msoos.org/tag/optimisation/feed/"/><link rel='stylesheet' id='twentythirteen-fonts-css' href='//fonts.googleapis.com/css?family=Source+Sans+Pro%3A300%2C400%2C700%2C300italic%2C400italic%2C700italic%7CBitter%3A400%2C700&#038;subset=latin%2Clatin-ext' type='text/css' media='all'/><!--[if lt IE 9]><link
rel='stylesheet' id='twentythirteen-ie-css'  href='http://www.msoos.org/wordpress/wp-content/themes/twentythirteen/css/ie.css?ver=2013-07-18' type='text/css' media='all' /> <![endif]--><script type="text/javascript" src="http://www.msoos.org/wordpress/wp-content/cache/minify/000000/K88vSikoSi0u1i8v0M3MS84pTUkt1s8CosLS1KJKKKVTTpQy3dzM9KLEklS93Mw8AA.js.pagespeed.jm.wgYIjCPW9B.js"></script><script type='text/javascript'>//<![CDATA[
var CrayonSyntaxSettings={"version":"2.6.5","is_admin":"0","ajaxurl":"http:\/\/www.msoos.org\/wordpress\/wp-admin\/admin-ajax.php","prefix":"crayon-","setting":"crayon-setting","selected":"crayon-setting-selected","changed":"crayon-setting-changed","special":"crayon-setting-special","orig_value":"data-orig-value","debug":""};var CrayonSyntaxStrings={"copy":"Press %s to Copy, %s to Paste","minimize":"Click To Expand Code"};
//]]></script><script type="text/javascript" src="http://www.msoos.org/wordpress/wp-content/cache/minify/000000/M9RPLkqszM_TLa7MK0ms0M3ITM_IAeKS1CL9rGL93Mw8qAI9IBMA.js.pagespeed.ce.1q0ZrsKt6V.js"></script><link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.msoos.org/wordpress/xmlrpc.php?rsd"/><link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.msoos.org/wordpress/wp-includes/wlwmanifest.xml"/><meta name="generator" content="WordPress 3.9.1"/><script language="JavaScript">jQuery(function(){jQuery('.wpdm-popup').click(function(){tb_show(jQuery(this).html(),this.href+'&modal=1&width=600&height=400');return false;});jQuery('.haspass').click(function(){var url=jQuery(this).attr('href');var id=jQuery(this).attr('rel');var password=jQuery('#pass_'+id).val();jQuery.post('http://www.msoos.org/',{download:id,password:password},function(res){if(res=='error'){jQuery('#wpdm_file_'+id+' .perror').html('Wrong Password');setTimeout("jQuery('#wpdm_file_"+id+" .perror').html('');",3000);return false;}else{location.href='http://www.msoos.org/?wpdmact=process&did='+res;}});return false;});})</script><style type="text/css">.recentcomments a{display:inline!important;padding:0!important;margin:0!important}</style><style type="text/css" id="twentythirteen-header-css">.site-header{background:url(http://www.msoos.org/wordpress/wp-content/themes/twentythirteen/images/headers/circle.png.pagespeed.ce.oNRJCE6n6y.png) no-repeat scroll top;background-size:1600px auto}</style></head><body class="archive tag tag-optimisation tag-46 single-author sidebar"><div id="page" class="hfeed site"> <header id="masthead" class="site-header" role="banner"> <a class="home-link" href="http://www.msoos.org/" title="Wonderings of a SAT geek" rel="home"><h1 class="site-title">Wonderings of a SAT geek</h1><h2 class="site-description">A blog about SAT solving and cryptography</h2> </a><div id="navbar" class="navbar"> <nav id="site-navigation" class="navigation main-navigation" role="navigation"><h3 class="menu-toggle">Menu</h3> <a class="screen-reader-text skip-link" href="#content" title="Skip to content">Skip to content</a><div class="menu-bizz-container"><ul id="menu-bizz" class="nav-menu"><li id="menu-item-1038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1038"><a>Research</a><ul class="sub-menu"><li id="menu-item-1161" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1161"><a href="http://www.msoos.org/talks/">Talks</a></li><li id="menu-item-1160" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1160"><a href="http://www.msoos.org/publications/">Publications</a></li></ul></li><li id="menu-item-1040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1040"><a>Tools</a><ul class="sub-menu"><li id="menu-item-2569" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2569"><a href="http://www.msoos.org/cryptominisat4/">CryptoMiniSat 4</a></li><li id="menu-item-2335" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2335"><a href="http://www.msoos.org/solving-graphs/">Solving graphs</a></li><li id="menu-item-1163" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1163"><a href="http://www.msoos.org/cryptominisat2/">CryptoMiniSat 2</a></li><li id="menu-item-1162" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1162"><a href="http://www.msoos.org/grain-of-salt/">Grain of Salt</a></li></ul></li><li id="menu-item-1039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1039"><a>Docs/Faq</a><ul class="sub-menu"><li id="menu-item-1831" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1831"><a href="http://www.msoos.org/cryptominisat-3/">CryptoMiniSat 4 FAQ</a></li><li id="menu-item-1159" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1159"><a href="http://www.msoos.org/minisat-faq/">MiniSat FAQ</a></li><li id="menu-item-1158" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1158"><a href="http://www.msoos.org/cryptominisat2-faq/">CryptoMiniSat 2 FAQ</a></li><li id="menu-item-1164" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1164"><a href="http://www.msoos.org/xor-clauses/">XOR clauses</a></li></ul></li><li id="menu-item-1170" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1170"><a href="http://www.msoos.org/about/">About Me</a></li></ul></div><form role="search" method="get" class="search-form" action="http://www.msoos.org/"> <label> <span class="screen-reader-text">Search for:</span> <input type="search" class="search-field" placeholder="Search &hellip;" value="" name="s" title="Search for:"/> </label> <input type="submit" class="search-submit" value="Search"/></form> </nav></div> </header><div id="main" class="site-main"><div id="primary" class="content-area"><div id="content" class="site-content" role="main"><header class="archive-header"><h1 class="archive-title">Tag Archives: Optimisation</h1></header> <article id="post-2434" class="post-2434 post type-post status-publish format-standard hentry category-reseach category-sat tag-optimisation tag-resolution tag-simplification tag-variable-elimination"> <header class="entry-header"><h1 class="entry-title"> <a href="http://www.msoos.org/2014/04/why-its-hard-to-eliminate-variables/" rel="bookmark">Why it&#8217;s hard to eliminate variables</a></h1><div class="entry-meta"> <span class="date"><a href="http://www.msoos.org/2014/04/why-its-hard-to-eliminate-variables/" title="Permalink to Why it&#8217;s hard to eliminate variables" rel="bookmark"><time class="entry-date" datetime="2014-04-16T16:39:47+00:00">April 16, 2014</time></a></span><span class="categories-links"><a href="http://www.msoos.org/category/reseach/" title="View all posts in Research" rel="category tag">Research</a>, <a href="http://www.msoos.org/category/sat/" title="View all posts in SAT" rel="category tag">SAT</a></span><span class="tags-links"><a href="http://www.msoos.org/tag/optimisation/" rel="tag">Optimisation</a>, <a href="http://www.msoos.org/tag/resolution/" rel="tag">resolution</a>, <a href="http://www.msoos.org/tag/simplification/" rel="tag">simplification</a>, <a href="http://www.msoos.org/tag/variable-elimination/" rel="tag">variable elimination</a></span><span class="author vcard"><a class="url fn n" href="http://www.msoos.org/author/msoos/" title="View all posts by msoos" rel="author">msoos</a></span></div> </header><div class="entry-content"><p>Let&#8217;s examine why it&#8217;s hard to eliminate variables. I remember the code I looked at in <a href="http://minisat.se/SatELite.html">SatElite</a> that did it: it was crazy clean code and looked like it was pretty easy to perform. In this post I&#8217;ll examine how that simple code became more than a 1&#8217;000 lines of code today.</p><h3>What needs to be done, at first sight</h3><p>At first sight, variable elimination is easy. We just:</p><ol><li>Build occurrence lists</li><li>Pick a variable to eliminate</li><li>Resolve every clause having the positive literal of the variable with negative ones.</li><li>Add newly resolved clauses into the system</li><li>Remove original clauses.</li><li>Goto 2.</li></ol><p>These are all pretty simple steps at first sight, and one can imagine that implementing them is maybe 50-100 lines of code, no more. So, let&#8217;s examine them one-by-one to see how they get complicated.</p><h3>Building occurrence lists</h3><p>The idea is that we simply take every single clause, and for every literal they have, we insert a pointer to the clause into an array for that literal&#8217;s occurrences. This sounds easy, but what happens if we are given 1M clauses, each with 1000 literals  on average? If you think this is crazy, it isn&#8217;t, and does in fact happen.</p><p>One option is we estimate the amount of memory we would use and abort early because we don&#8217;t want to run out of memory. So, first we check the potential size, then we link them in. Unfortunately, this means we can&#8217;t do variable elimination at all. Another possibility is that we link in clauses only partially. For example, we don&#8217;t link in clauses that are redundant but too long. Redundant clauses are ignored during resolution when eliminating, so this is OK, but then we will have to clean these clauses up later, when finishing up. However, if a redundant clause that hasn&#8217;t been linked in backward-subsumes an irredudant clause (and thus becomes irredundant itself), we have to link it in asap. Optimisation leads to complexity.</p><p>We don&#8217;t just want to link these clauses in to some random datastructure. I believe it was <a href="http://fmv.jku.at/biere/">Armin Biere</a> who put this idea into my head, or maybe someone else, but re-using watchlists for occurrence lists means we use our memory resources better: there won&#8217;t be so much fragmentation. Furthermore, an advanced SAT solver uses implicit binary &#038; tertiary clauses, so those are linked in already into the watchlists. That saves memory.</p><h3>Picking a variable to eliminate</h3><p>The order in which you eliminate clauses is a defining part of the speed we get with the final solver. It is crucially important that this is done well. So, what can we do? We can either use some heuristic or precisely calculate the gain for each variable, and eliminate the best guess/calculated one first. These are both <a href="http://en.wikipedia.org/wiki/Greedy_algorithm">greedy algorithms</a> but I think given the complexity of the task, they are the best at hand.</p><p>Using precise calculation is easy, we just resolve all the relevant clauses but don&#8217;t add the resolvents. It&#8217;s very expensive though. A better approach is to use a heuristic. Logically, clauses that have few literals in them are likely not to resolve such that they become tautologies. It&#8217;s unlikely that two binary clauses&#8217; resolvent becomes a tautology. It&#8217;s however likely that large clauses become tautological once resolved. I take this into account when calculating elimination cost for variable. Since redundant clauses are linked in the occurrence lists so that I can subsume them, I have to skip them.</p><p>It&#8217;s not enough to calculate the heuristic once, of course. We have to re-calculate after every elimination &#8212; the playing field has changed. Thus, for every clause you removed, you have to keep in mind which variables were affected, and re-calculate the cost for each after every variable elimination.</p><h3>Resolving clauses</h3><p>The base is easy. We add literals to a new array of literls and mark the literals that have been added in a quick-lookup array. If the opposite of a literal is added, the markings tell us and we can skip the rest &#8212; the resolvent is tautological. Things get hairy if the clause is not tautological.</p><p>What if the new clause is subsumed by already-existing clauses? Should we check for this? This is called forward-subsumption, and it&#8217;s really expensive. Backward subsumption (which asks the question &#8216;Does this clause subsume others?&#8217; instead of &#8216;Is this clause subsumed by others?&#8217;) would be cheaper, but that&#8217;s not the case here. We can thus try to subsume the clause only by e.g. binary&#038;tertiary clauses and hope for the best.</p><p>What if the new clause can be subsumed by stamps? That&#8217;s easy to check for, but if the new clause was used to <em>create</em> the stamp, that would be a self-dependency loop and not adding the resolvent would lead to an incorrect result. We can use the stamps as long as the resolving clauses were not needed for the stamp: i.e. they are not binary clauses and on-the-fly hyper-binary resolution was used during every step of stamp generation. A similar logic goes for using the implication cache.</p><p>We could also virtually extend the clause with literals using watchlists/stamps/impl. cache and then try to subsume that virtual clause. I forgot what 3-letter acronym Biere et al. gave to this method (it&#8217;s one of the 12 on slide 25 <a href="http://www.kr.tuwien.ac.at/drm/ordyniak/worker/slides/Armin-Biere.pdf">here</a>), but, except for the acronym, this idea is pretty simple. You take a binary clause, e.g. xV~y, and if x is in the newly created clause, but y and ~y is not, you add y to the clause. The clause is now bigger, so has a larger chance to be subsumed. You now perform forward subsumption as above, but with the extended clause. Also, take care not to subsume clauses with themselves, which, as you might imagine, can get hairy.</p><p>If all of this sounds a bit intricate, this is not even the difficult part. The difficult part is keeping track of time. Where of course by time I don&#8217;t actually mean seconds &#8212; I mean computation steps that you have to define one way or another and increment counters and set limits. Remember: all this has to be deterministic.</p><p>Doing all of the above with a small but complicated instance is super-fast, under 0.001s. With a weird instance where one <em>single</em> literal may occur in more than a million clauses, it can be very-very expensive even for one single try &#8212; over 100s. That&#8217;s about 5 orders of magnitude of difference. So, you have to be careful. The resolution we cannot skip, but we can abort it (and indicate it up in the call tree). Some of the others we can abort, but then the whole resolution has to be re-started. Some of the above is not critical at all, so you have to use a different time-limit for some, and mark them as too expensive, so at least the basic things get done. This gets complicated, because e.g. forward-subsumption you might want to re-use at other parts of the solver so you have to use a time-limit that isn&#8217;t global.</p><h3>Adding the newly resolved clauses</h3><p>Adding clauses is simple: we create and link them in. However, we can do more. Since backward-subsumption is fast, we can do that with the newly created clauses. Note that this means the newly created clause could subsume some of the original clauses it was created from &#8212; which means the resolvents should be pre-generated and kept in memory.</p><p>Another thing: since we know the new clause needs to be added, we might as well shorten it before in any way we can. At this point, we can make use of all the watchlists, stamps and implication cache we have to shorten the new clause: there are no problems with self-dependencies. It will pay off. However, note that shortening the clause before adding it means that we will have to reverse-shorten it later, when this clause might be part of a group of clauses that is touched by a new variable elimination round. So, we are working against ourselves in a way &#8212; especially because reverse shortening is pretty expensive and hairy as explained above.</p><p>Although this is obvious, but we still have to take care of time-outs. For example, if resolution took so much time that we are already out of time, we must exit asap and not worry about the resolvents. Don&#8217;t link, don&#8217;t remove, just exit. Time is of essence.</p><h3>Removing the original clauses</h3><p>Easy, just unlink them from the occurrence lists. I mean, easy if you don&#8217;t care about time, of course. Because unlinking is an O(N^2) operation if you have N clauses and all of them contain the same literal X &#8212; the N-long occurrence list of literal X has to be read and updated N times. So, we don&#8217;t do this.</p><p>First of all, a special case: the two occurrence lists of the variable we are removing can simply be .clear()-ed. It&#8217;s no longer needed. Secondly, we shouldn&#8217;t unlink clauses one-by-one. Instead, we should mark the clause as removed, and then not care about the clause later. Once variable elimination is finished, we do a sweep of all the occurrence lists and clauses and remove the clauses that have been marked. This means that e.g. forward and backward subsumption gets more hairy (we shouldn&#8217;t subsume with a clause that&#8217;s been marked as removed but is still in the occurrence list) but that O(N^2) becomes O(N) which for problems where N is large makes quite a bit of difference. Like, the difference of 100s vs. 10s for a the same exact thing.</p><h3><h3>The untold horrors</h3><p>On top of what&#8217;s above, you might like to generate some statistics about what worked and what didn&#8217;t. You might like to dump these statistics to a database. You might like to not create resolutions that are not needed as the irreduntant clauses form an AND/ITE gate. Or multiple gates. You might like to eliminate only a subset of variables at each call so that you don&#8217;t make your system too sparse and thus reduce arc consistency. You might want to vary this limit based on the problem at hand. You might want to do many other things that are not detailed above.</p><h3>Conclusions</h3><p>Once I read through the above, I realized I kind of missed the essence: time-outs. It&#8217;s mentioned here and there, but it&#8217;s much more critical than it seems and makes things a hell of a lot harder. How do you cleanly exit from the middle of reverse-shortening while resolving because you ran out of time? I could just bury my head in sand of course and say: I don&#8217;t care. Or, I could make some messy algorithm that checks return values of each call and return a special value in case of time-outs. This needs to be done for every level of the call, which can be pretty deep, unless you like writing 1&#8217;500 line functions. I wanted to say writing&#038;reading, but, really, nobody <em>reads</em> 1&#8217;500 line functions. They are throw-away,write-only code.</p></div> <footer class="entry-meta"><div class="comments-link"> <a href="http://www.msoos.org/2014/04/why-its-hard-to-eliminate-variables/#respond" title="Comment on Why it&#8217;s hard to eliminate variables"><span class="leave-reply">Leave a comment</span></a></div> </footer> </article> <article id="post-1624" class="post-1624 post type-post status-publish format-standard hentry category-reseach category-sat tag-bcp tag-binary-clauses tag-optimisation tag-release tag-research tag-stamping"> <header class="entry-header"><h1 class="entry-title"> <a href="http://www.msoos.org/2013/04/cryptominisat-3-1-released/" rel="bookmark">CryptoMinisat 3.1 released</a></h1><div class="entry-meta"> <span class="date"><a href="http://www.msoos.org/2013/04/cryptominisat-3-1-released/" title="Permalink to CryptoMinisat 3.1 released" rel="bookmark"><time class="entry-date" datetime="2013-04-14T18:29:50+00:00">April 14, 2013</time></a></span><span class="categories-links"><a href="http://www.msoos.org/category/reseach/" title="View all posts in Research" rel="category tag">Research</a>, <a href="http://www.msoos.org/category/sat/" title="View all posts in SAT" rel="category tag">SAT</a></span><span class="tags-links"><a href="http://www.msoos.org/tag/bcp/" rel="tag">BCP</a>, <a href="http://www.msoos.org/tag/binary-clauses/" rel="tag">binary clauses</a>, <a href="http://www.msoos.org/tag/optimisation/" rel="tag">Optimisation</a>, <a href="http://www.msoos.org/tag/release/" rel="tag">Release</a>, <a href="http://www.msoos.org/tag/research/" rel="tag">research</a>, <a href="http://www.msoos.org/tag/stamping/" rel="tag">stamping</a></span><span class="author vcard"><a class="url fn n" href="http://www.msoos.org/author/msoos/" title="View all posts by msoos" rel="author">msoos</a></span></div> </header><div class="entry-content"><p>CryptoMinisat 3.1 has been <a href="https://gforge.inria.fr/frs/?group_id=1992&#038;release_id=8008">released</a>. The short changelog is:</p><p></p><div id="crayon-53cfcef8ed336795311235" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;"><div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title"></span><div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div></div></div><div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div><div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
$ git diff cryptoms-3.0 cryptoms-3.1 --shortstat
 84 files changed, 3079 insertions(+), 2751 deletions(-)</textarea></div><div class="crayon-main" style=""><table class="crayon-table"><tr class="crayon-row"><td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-53cfcef8ed336795311235-1">1</div><div class="crayon-num" data-line="crayon-53cfcef8ed336795311235-2">2</div></div></td><td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-line" id="crayon-53cfcef8ed336795311235-1"><span class="crayon-sy">$</span><span class="crayon-h"> </span><span class="crayon-e">git </span><span class="crayon-e">diff </span><span class="crayon-v">cryptoms</span><span class="crayon-o">-</span><span class="crayon-cn">3.0</span><span class="crayon-h"> </span><span class="crayon-v">cryptoms</span><span class="crayon-o">-</span><span class="crayon-cn">3.1</span><span class="crayon-h"> </span><span class="crayon-o">--</span><span class="crayon-i">shortstat</span></div><div class="crayon-line" id="crayon-53cfcef8ed336795311235-2"><span class="crayon-h"> </span><span class="crayon-cn">84</span><span class="crayon-h"> </span><span class="crayon-e">files </span><span class="crayon-v">changed</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">3079</span><span class="crayon-h"> </span><span class="crayon-e">insertions</span><span class="crayon-sy">(</span><span class="crayon-o">+</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2751</span><span class="crayon-h"> </span><span class="crayon-e">deletions</span><span class="crayon-sy">(</span><span class="crayon-o">-</span><span class="crayon-sy">)</span></div></div></td></tr></table></div></div><p></p><p>The changes made were threefold. First, memory usage has been greatly reduced. This is crucial, because memory usage was over 7GB on certain instances. Secondly, the implication cache wasn&#8217;t very well-used and an idea that came to my mind <em>greatly</em> improved performance on most problems. Finally, time limiting of some inprocessing techniques on certain types of problems has been improved.</p><h3>Memory usage reduction</h3><p>On instances that produced a lot of long learnt clauses the memory usage was very high. These learnt clauses were all automatically linked in to the occurrence list and consequently took large amounts of memory, sometimes up to 10GB. On other instances, the original clauses were too numerous and too large, so putting even them into the occurrence list was too much. On these instances, variable elimination is not carried out (or carried out only later, when enough original clauses have been removed/shortened). To debug some of these problems, I wrote a fuzzer that generates extremely large problems with many binary and many long clauses, it&#8217;s available <a href="https://github.com/msoos/cnf-utils">here</a> as &#8220;largefuzzer&#8221;. It&#8217;s actually quite nice with many-many binary clauses so it also can fuzz the problems encountered with probing of extremely weird and large instances.</p><h3>Implied literal usage improvement</h3><p>CryptoMiniSat uses implied literals, i.e. caches what literals were propagated by each literal during probing. It then re-uses this information to subsume and/or strengthen clauses. This is kind of similar to <a href="http://link.springer.com/chapter/10.1007%2F978-3-642-34188-5_1">stamping</a> though uses more memory. It is actually useful to have alongside stamping, and I now do both &#8212; propagating <a href="http://en.wikipedia.org/wiki/Depth-first_search">DFS</a> that stamping requires is expensive though updating cache during DFS is just as easy as during quasi-<a href="http://en.wikipedia.org/wiki/Breath-first_search">BFS</a>.</p><p>The trick I discovered while playing around with cached implied literals is that if literal L1 propagates L2 and also !L2 then that means there are conceptually two binary clauses in the solver (!L1, L2), (!L1, !L2), so !L1 is TRUE. This is of course trivial, but I never checked for this. The question most would raise is: why would L1 propagate both L2 and !L2 and not fail? The answer is kind of tricky, but very interesting. Let&#8217;s say at one point, L1 propagates L2 due to a learnt clause, but that learnt clause is then removed. A new learnt clause is then later learnt, and with that learnt clause in place, L1 propagates !L2. Now, without caching, this would be ignored. Caching memorizes past conceptual binary clauses and re-uses this information.</p><p>This is not an optimization that only looks good on paper, it is very good to have. With this one optimization, I gained 5 instances from the SAT Comp&#8217;09 instances with a 1000s timeout (196 solved -> 201 solved). I can&#8217;t right now imagine how this could be done with stamping effectively, but that doesn&#8217;t mean it&#8217;s not possible. Though, according to my experience, stamping doesn&#8217;t preserve that much information over time as it&#8217;s being updated (renumbered) frequently while the cache is only improved over time, never shrunk. A possibility would be to have more than one stamp system and round-robin selecting them. However that would mean that sorting of clauses (for shrinking) would need to be done more than once, and sorting them is already relatively expensive. I sometimes feel that what stamping gains in memory it looses on sorting (i.e. processing time) and lower coverage (re-numbering).</p><h3>More precise time-limiting</h3><p>Martin Maurer has been kind enough to file a lot of <a href="https://github.com/msoos/cryptominisat/issues?state=open">bug reports</a> about probing and variable elimination taking too much time, sometimes upwards of 150s when they should take around 20-30s maximum. While investigating, it tuned out that the problem was very weird indeed. While trying to eliminate or probe <em>one</em> variable the time for that one variable took upwards of 100s. This was completely unexpected as the code only checked for timeouts on a per-variable basis. In the end, the code had to be improved to track time on an intra-variable basis in both systems. While at it, I also added intra-variable time-tracking to implicit clause subsumption and strengthening too. So, over-times should less prevalent from now on. As an interesting side-note, time-limiting on probing is now so fine-grained that a 32-bit unsigned integer would overflow within 15s if used as the time-tracker.</p></div> <footer class="entry-meta"><div class="comments-link"> <a href="http://www.msoos.org/2013/04/cryptominisat-3-1-released/#respond" title="Comment on CryptoMinisat 3.1 released"><span class="leave-reply">Leave a comment</span></a></div> </footer> </article> <article id="post-508" class="post-508 post type-post status-publish format-standard hentry category-sat tag-bug tag-optimisation tag-subsumption"> <header class="entry-header"><h1 class="entry-title"> <a href="http://www.msoos.org/2010/10/implicit-binary-clauses/" rel="bookmark">Implicit binary clauses</a></h1><div class="entry-meta"> <span class="date"><a href="http://www.msoos.org/2010/10/implicit-binary-clauses/" title="Permalink to Implicit binary clauses" rel="bookmark"><time class="entry-date" datetime="2010-10-28T00:14:57+00:00">October 28, 2010</time></a></span><span class="categories-links"><a href="http://www.msoos.org/category/sat/" title="View all posts in SAT" rel="category tag">SAT</a></span><span class="tags-links"><a href="http://www.msoos.org/tag/bug/" rel="tag">bug</a>, <a href="http://www.msoos.org/tag/optimisation/" rel="tag">Optimisation</a>, <a href="http://www.msoos.org/tag/subsumption/" rel="tag">subsumption</a></span><span class="author vcard"><a class="url fn n" href="http://www.msoos.org/author/msoos/" title="View all posts by msoos" rel="author">msoos</a></span></div> </header><div class="entry-content"><p>I have lately been trying to get CryptoMiniSat to use implicit binary clauses. The idea is that since binary clauses are very trivial (just two literals), and they don&#8217;t really need to keep state (like clause activity), they don&#8217;t really need to be stored at a separate location. Instead, they can be stored <a href="http://www.msoos.org/propagating-faster">directly</a> in the watchlists. There are a number of advantages and disadvantages that come with this approach.</p><p style="text-align: left;"><a href="http://www.msoos.org/wordpress/wp-content/uploads/2010/10/implicit_bin_clauses1.png"><img class="size-full wp-image-837 aligncenter" style="margin: 10px;" title="implicit_bin_clauses" src="http://www.msoos.org/wordpress/wp-content/uploads/2010/10/644x49ximplicit_bin_clauses1.png.pagespeed.ic.hnlCjgl_OE.png" alt="" width="644" height="49"/></a>The main advantage is a notable reduction of memory usage and memory fragmentation. The first is obvious: since we don&#8217;t allocate space for binary clauses separately, the memory usage of the program should go down. This is especially true since SAT problems usually contain a huge number of binary clauses. The secondary benefit, that of reduced memory fragmentation is not really that much of an advantage if someone uses, e.g. the <a href="http://www.boost.org/doc/libs/release/libs/pool/doc/">boost pool</a> library.</p><p style="text-align: left;">The disadvantages are mainly twofold. Firstly, bugs are very difficult to find. Since there is not one central database of binary clauses (as before), it becomes difficult to check the consistency of the watchlists. However, if inconsistencies creep in, then the solution found by the SAT solver could be wrong. Worst of all, consistency is difficult to keep, as binary clauses often need to be worked on by e.g. subsumption, variable elimination, etc. The second biggest disadvatage is that if a new algorithm comes up that needs a database of binary clauses, this database would need to be re-built every time to run that algorithm, which can be very costly in terms of time.</p><p style="text-align: left;">All in all, it took me about 1 day to implement implicit binary clauses, and about 3 days to debug it. Surprisingly, it came with some very positive side-effects. Firstly, the debugging session took out some very long-standing bugs in CryptoMiniSat. Secondly, since binary clauses represent most clauses in typical SAT problems, and since binary clauses cannot be subsumed by anything other than binary clauses, the subsumption algorithm has been notably speeded up and its memory usage has been reduced. The worst part of using implicit binary clauses has been the fact that I can no longer use binary clause-sorting to find binary xor clauses, and I must resort back to Tarjan&#8217;s strongly connected component finding <a href="http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm">algorithm</a>. This algorithm is algorithmically faster (only O(V+E) versus O(n*logn) ), but practically slower, since I need to carry it out repeatedly, and I cannot save state. Furthermore, I haven&#8217;t yet coded it down, so I am using <a href="http://www.systomath.com/include/Boost-1_34/libs/graph/doc/strong_components.html">boost&#8217;s graph algorithm</a>, which means that I now have a dependency in CryptoMiniSat. This will eventually be corrected, but it is already causing some trouble.</p><p style="text-align: left;">In the meantime, I have been parallelising CryptoMiniSat. Funnily enough, it took me about 2 days in total to multi-thread CryptoMiniSat versus the 4 days it took to implement implicit binary clauses. Oh well.</p></div> <footer class="entry-meta"><div class="comments-link"> <a href="http://www.msoos.org/2010/10/implicit-binary-clauses/#respond" title="Comment on Implicit binary clauses"><span class="leave-reply">Leave a comment</span></a></div> </footer> </article> <article id="post-6" class="post-6 post type-post status-publish format-standard hentry category-sat tag-asymmetric-branching tag-optimisation"> <header class="entry-header"><h1 class="entry-title"> <a href="http://www.msoos.org/2010/07/asymmetric-branching/" rel="bookmark">Asymmetric branching</a></h1><div class="entry-meta"> <span class="date"><a href="http://www.msoos.org/2010/07/asymmetric-branching/" title="Permalink to Asymmetric branching" rel="bookmark"><time class="entry-date" datetime="2010-07-28T13:38:00+00:00">July 28, 2010</time></a></span><span class="categories-links"><a href="http://www.msoos.org/category/sat/" title="View all posts in SAT" rel="category tag">SAT</a></span><span class="tags-links"><a href="http://www.msoos.org/tag/asymmetric-branching/" rel="tag">asymmetric branching</a>, <a href="http://www.msoos.org/tag/optimisation/" rel="tag">Optimisation</a></span><span class="author vcard"><a class="url fn n" href="http://www.msoos.org/author/msoos/" title="View all posts by msoos" rel="author">msoos</a></span></div> </header><div class="entry-content"><p>Asymmetric branching is an algorithm that shortens CNF clauses in SAT Solvers. A clause, for instance <code> v1 V v2 V v3 V v4 </code> (where letters are binary variables and <code>V</code> represents binary OR) could possibly be shortened to <code>v1 V v2 V v3</code>. To find out if it can be, all we have to do is to put <code>-v1,-v2</code> and <code>-v3</code> into the <span style="font-style: italic;">propagation queue</span> and then propagate. If we receive a <span style="font-style: italic;">conflict</span> from the propagation engine, we can learn the clause <code>v1 V v2 V v3</code>, which (incidentally, though this was the point), subsumes the original clause, so we can simply remove variable <code>v4</code> from the original clause.</p><p>Ok, so much for theory. Now comes the hard part: how do we do this such that it actually speeds up the solving? The problem is that asymmetric branching, when done on all possible clauses, is <span style="font-style: italic;">slow</span>. However, its benefits could be large, since a shortened clause naturally leads a faster propagation and shorter <a href="http://en.wikipedia.org/wiki/Resolution_%28algebra%29">resolution</a> proofs thus less propagation need.</p><p>I have been experimenting in getting some benefit from asymmetric branching, and now it works extremely well for <a href="http://planete.inrialpes.fr/~soos/CryptoMiniSat2/index.php">CryptoMiniSat</a>. The trick I use, is that I first <span style="font-style: italic;">sort the clauses</span> according to size, and only try to shorten with asymmetric branching the top couple of clauses. This ensures that the largest clauses are shortened first. Since the largest clauses contribute most the to size of the resolution proof and they are the slowest to propagate, this makes sense.</p><p>CryptoMiniSat tries to do asymmetric branching regularly, always for only a little while (~2 seconds). I believe this is useful, because as the amount of time the program has been trying to solve a problem increases, it makes sense that we have a bit more time to do things that could help resolve the problem faster. For instance, if CryptoMiniSat has been trying to solve a given problem for 30 minutes unsuccessfully with the standard clause-learning <a href="http://en.wikipedia.org/wiki/DPLL">DPLL</a> procedure in vain, we can allocate 2-3 seconds to possibly gain ~5-10% later. In the example case it can be assumed that since we haven&#8217;t been able to solve it for 30 minutes, probably we won&#8217;t solve it in  the next 10 minutes, so gaining 5% on 10 minutes is 30 seconds, far more than the 2-3 seconds we invested.</p><p>The results with asymmetric branching with CryptoMiniSat are quite astounding. Using the <a href="http://www.satcompetition.org/2009/">2009 SAT Competition</a> benchmark set with an approximately correct timeout, CryptoMiniSat could normally solve 217 problems. With asymmetric branching, CryptoMiniSat can now solve 220 &#8212; a <span style="font-style: italic;">huge</span> increase: last year, 16 solvers running in <span style="font-style: italic;">parallel</span> could only solve 229 instances in total.</p><p><em>Edited to add (26/09/2010)</em>: <a href="http://research.microsoft.com/en-us/people/youssefh/vivification.pdf">Clause Vivification</a> by Piette, Hamadi and Sais is a paper about the above described method, though with a number of key differences. The paper seems to advocate for a complete procedure, furthermore, it calls the conflict generation routine in certain cases. I believe that the above described way of carrying out this technique brings more tangible benefits, especially for larger problems.</p><p>(Updated: we need to branch on the inverse of the clause&#8217;s literals. Thanks to Vegard Nossum for spotting this)</p></div> <footer class="entry-meta"><div class="comments-link"> <a href="http://www.msoos.org/2010/07/asymmetric-branching/#comments" title="Comment on Asymmetric branching">View all 2 comments</a></div> </footer> </article> <article id="post-7" class="post-7 post type-post status-publish format-standard hentry category-sat tag-bcp tag-binary-clauses tag-optimisation"> <header class="entry-header"><h1 class="entry-title"> <a href="http://www.msoos.org/2010/07/propagating-faster/" rel="bookmark">Propagating faster</a></h1><div class="entry-meta"> <span class="date"><a href="http://www.msoos.org/2010/07/propagating-faster/" title="Permalink to Propagating faster" rel="bookmark"><time class="entry-date" datetime="2010-07-26T18:13:00+00:00">July 26, 2010</time></a></span><span class="categories-links"><a href="http://www.msoos.org/category/sat/" title="View all posts in SAT" rel="category tag">SAT</a></span><span class="tags-links"><a href="http://www.msoos.org/tag/bcp/" rel="tag">BCP</a>, <a href="http://www.msoos.org/tag/binary-clauses/" rel="tag">binary clauses</a>, <a href="http://www.msoos.org/tag/optimisation/" rel="tag">Optimisation</a></span><span class="author vcard"><a class="url fn n" href="http://www.msoos.org/author/msoos/" title="View all posts by msoos" rel="author">msoos</a></span></div> </header><div class="entry-content"><p>Propagation (BCP) in SAT is the single most expensive operation. The algorithm essentially does the following:</p><div id="crayon-53cfcef8ed801601213812" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;"><div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title"></span><div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div></div></div><div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div><div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
while (queue_head &amp;lt; trail.size()) {
  Literal p = trail[queue_head];
  vector&amp;lt;Watch&amp;gt;&amp;amp; thiswatch = watches[p];
  for (i = thiswatch.begin(); i!=thiswatch[p].end(); i++) {
    confl = prop_confl(i-&amp;gt;clause);
    if (confl != NULL) return confl;
  }
  queue_head++;
}</textarea></div><div class="crayon-main" style=""><table class="crayon-table"><tr class="crayon-row"><td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-1">1</div><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-2">2</div><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-3">3</div><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-4">4</div><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-5">5</div><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-6">6</div><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-7">7</div><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-8">8</div><div class="crayon-num" data-line="crayon-53cfcef8ed801601213812-9">9</div></div></td><td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-line" id="crayon-53cfcef8ed801601213812-1"><span class="crayon-st">while</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">queue_head</span><span class="crayon-h"> </span><span class="crayon-o">&amp;</span><span class="crayon-v">lt</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">trail</span><span class="crayon-sy">.</span><span class="crayon-e">size</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-53cfcef8ed801601213812-2"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-i">Literal</span><span class="crayon-h"> </span><span class="crayon-v">p</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">trail</span><span class="crayon-sy">[</span><span class="crayon-v">queue_head</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed801601213812-3"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-v">vector</span><span class="crayon-o">&amp;</span><span class="crayon-v">lt</span><span class="crayon-sy">;</span><span class="crayon-v">Watch</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-o">&amp;</span><span class="crayon-v">amp</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">thiswatch</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">watches</span><span class="crayon-sy">[</span><span class="crayon-v">p</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed801601213812-4"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">thiswatch</span><span class="crayon-sy">.</span><span class="crayon-e">begin</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-o">!=</span><span class="crayon-v">thiswatch</span><span class="crayon-sy">[</span><span class="crayon-v">p</span><span class="crayon-sy">]</span><span class="crayon-sy">.</span><span class="crayon-st">end</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-o">++</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-53cfcef8ed801601213812-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">prop_confl</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-v">clause</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed801601213812-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-t">NULL</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">confl</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed801601213812-7"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-53cfcef8ed801601213812-8"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-v">queue_head</span><span class="crayon-o">++</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed801601213812-9"><span class="crayon-sy">}</span></div></div></td></tr></table></div></div><p>where the function <code>prop_confl()</code> executes the propagation or returns a conflict, if necessary.</p><p>The problem with the above function is that clauses come in all shapes and sizes. In <a href="http://planete.inrialpes.fr/%7Esoos/CryptoMiniSat2/index.php">CryptoMiniSat</a>, there are two kinds of clauses, normal clauses and XOR clauses. Naturally, these need to be handled differently. Furthermore, if the clause&#8217;s size is small, it is more efficient to handle it differently. The way CryptoMiniSat has done this before was to have a separate &#8220;<code>watches</code>&#8221; for each of these. As you can guess, this is very suboptimal.</p><p>The new code in CryptoMiniSat now uses a different approach. Instead of having a <code>watches_normal, watches_xor, watches_binary</code>, and a <code>for</code> loop for each, we have one <code>watches</code> and one <code>for</code> loop, but this time, the struct <code>Watch</code> encodes the type of the watched clause. So our new BCP function is:</p><div id="crayon-53cfcef8ed808016754674" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;"><div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title"></span><div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div></div></div><div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div><div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
while (queue_head &amp;lt; trail.size()) {
  Literal p = trail[queue_head];
  vector&amp;lt;Watch&amp;gt;&amp;amp; thiswatch = watches[p];
  for (i = thiswatch.begin(); i!=thiswatch.end(); i++) {
    if (i-&amp;gt;isBinary())
      confl = prop_confl_bin(i-&amp;gt;clause);
    if (i-&amp;gt;isNormal())
      confl = prop_confl_norm(i-&amp;gt;clause);
    if (i-&amp;gt;isXor())
      confl = prop_confl_xor(i-&amp;gt;clause);
    if (confl != NULL) return confl;
  }
  queue_head++;
}</textarea></div><div class="crayon-main" style=""><table class="crayon-table"><tr class="crayon-row"><td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-1">1</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-2">2</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-3">3</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-4">4</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-5">5</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-6">6</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-7">7</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-8">8</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-9">9</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-10">10</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-11">11</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-12">12</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-13">13</div><div class="crayon-num" data-line="crayon-53cfcef8ed808016754674-14">14</div></div></td><td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-line" id="crayon-53cfcef8ed808016754674-1"><span class="crayon-st">while</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">queue_head</span><span class="crayon-h"> </span><span class="crayon-o">&amp;</span><span class="crayon-v">lt</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">trail</span><span class="crayon-sy">.</span><span class="crayon-e">size</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-2"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-i">Literal</span><span class="crayon-h"> </span><span class="crayon-v">p</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">trail</span><span class="crayon-sy">[</span><span class="crayon-v">queue_head</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-3"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-v">vector</span><span class="crayon-o">&amp;</span><span class="crayon-v">lt</span><span class="crayon-sy">;</span><span class="crayon-v">Watch</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-o">&amp;</span><span class="crayon-v">amp</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">thiswatch</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">watches</span><span class="crayon-sy">[</span><span class="crayon-v">p</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-4"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">thiswatch</span><span class="crayon-sy">.</span><span class="crayon-e">begin</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-o">!=</span><span class="crayon-v">thiswatch</span><span class="crayon-sy">.</span><span class="crayon-st">end</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-o">++</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-e">isBinary</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">prop_confl_bin</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-v">clause</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-e">isNormal</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">prop_confl_norm</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-v">clause</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-e">isXor</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">prop_confl_xor</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-v">clause</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-11"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-t">NULL</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">confl</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-12"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-13"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-v">queue_head</span><span class="crayon-o">++</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed808016754674-14"><span class="crayon-sy">}</span></div></div></td></tr></table></div></div><p>This new method reduces the jump-around that the processor otherwise would have done with all those separate for loops. It has an important drawback, though: it is now more complicated (and more expensive) to fully propagate binary clauses before any other clause. The original code had this:</p><div id="crayon-53cfcef8ed80c698028250" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;"><div class="crayon-toolbar" data-settings=" show" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><span class="crayon-title"></span><div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button" title="Toggle Line Numbers"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon"></div></div></div></div><div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div><div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly style="-moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4; font-size: 12px !important; line-height: 15px !important;">
while (queue_head &amp;lt; trail.size()) {
  bin_queue_head = queue_head;
  while(bin_queue_head &amp;lt; trail.size()) {
    Literal p = trail[bin_queue_head];
    vector&amp;lt;Watch&amp;gt;&amp;amp; thiswatch_bin = watches_bin[p];
    for (i = thiswatch_bin.begin(); i!=thiswatch_bin.end(); i++) {
      confl = prop_confl_bin(i-&amp;gt;clause);
      if (confl != NULL) return confl;
    }
    bin_queue_head++;
  }
  Literal p = trail[queue_head];
  vector&amp;lt;Watch&amp;gt;&amp;amp; thiswatch = watches[p];
  for (i = thiswatch.begin(); i!=thiswatch.end(); i++) {
    confl = prop_confl(i-&amp;gt;clause);
    if (confl != NULL) return confl;
  }
  queue_head++;
}</textarea></div><div class="crayon-main" style=""><table class="crayon-table"><tr class="crayon-row"><td class="crayon-nums " data-settings="show"><div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-1">1</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-2">2</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-3">3</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-4">4</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-5">5</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-6">6</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-7">7</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-8">8</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-9">9</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-10">10</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-11">11</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-12">12</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-13">13</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-14">14</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-15">15</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-16">16</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-17">17</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-18">18</div><div class="crayon-num" data-line="crayon-53cfcef8ed80c698028250-19">19</div></div></td><td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-1"><span class="crayon-st">while</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">queue_head</span><span class="crayon-h"> </span><span class="crayon-o">&amp;</span><span class="crayon-v">lt</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">trail</span><span class="crayon-sy">.</span><span class="crayon-e">size</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-2"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-v">bin_queue_head</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">queue_head</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-3"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-st">while</span><span class="crayon-sy">(</span><span class="crayon-v">bin_queue_head</span><span class="crayon-h"> </span><span class="crayon-o">&amp;</span><span class="crayon-v">lt</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">trail</span><span class="crayon-sy">.</span><span class="crayon-e">size</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-i">Literal</span><span class="crayon-h"> </span><span class="crayon-v">p</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">trail</span><span class="crayon-sy">[</span><span class="crayon-v">bin_queue_head</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">vector</span><span class="crayon-o">&amp;</span><span class="crayon-v">lt</span><span class="crayon-sy">;</span><span class="crayon-v">Watch</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-o">&amp;</span><span class="crayon-v">amp</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">thiswatch_bin</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">watches_bin</span><span class="crayon-sy">[</span><span class="crayon-v">p</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">thiswatch_bin</span><span class="crayon-sy">.</span><span class="crayon-e">begin</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-o">!=</span><span class="crayon-v">thiswatch_bin</span><span class="crayon-sy">.</span><span class="crayon-st">end</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-o">++</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">prop_confl_bin</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-v">clause</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-t">NULL</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">confl</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">bin_queue_head</span><span class="crayon-o">++</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-11"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-12"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-i">Literal</span><span class="crayon-h"> </span><span class="crayon-v">p</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">trail</span><span class="crayon-sy">[</span><span class="crayon-v">queue_head</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-13"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-v">vector</span><span class="crayon-o">&amp;</span><span class="crayon-v">lt</span><span class="crayon-sy">;</span><span class="crayon-v">Watch</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-o">&amp;</span><span class="crayon-v">amp</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">thiswatch</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">watches</span><span class="crayon-sy">[</span><span class="crayon-v">p</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-14"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">thiswatch</span><span class="crayon-sy">.</span><span class="crayon-e">begin</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-o">!=</span><span class="crayon-v">thiswatch</span><span class="crayon-sy">.</span><span class="crayon-st">end</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-o">++</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-15"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">prop_confl</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">-</span><span class="crayon-o">&amp;</span><span class="crayon-v">gt</span><span class="crayon-sy">;</span><span class="crayon-v">clause</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-16"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">confl</span><span class="crayon-h"> </span><span class="crayon-o">!=</span><span class="crayon-h"> </span><span class="crayon-t">NULL</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">confl</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-17"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-18"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-v">queue_head</span><span class="crayon-o">++</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-53cfcef8ed80c698028250-19"><span class="crayon-sy">}</span></div></div></td></tr></table></div></div><p>Since there are no separate watchlists for binary clauses anymore, we are required to go through all clauses all the time in the first for loop, or we can simply skip the first loop. The disadvantage of this is that some variables could have possibly been set by binary clauses may now be set by non-binary clauses, which leads to a possibly increased number of literals in the resulting learnt clause &#8212; since the incoming arcs into the conflict will likely contain more clauses that are larger than 2-long.</p></div> <footer class="entry-meta"><div class="comments-link"> <a href="http://www.msoos.org/2010/07/propagating-faster/#respond" title="Comment on Propagating faster"><span class="leave-reply">Leave a comment</span></a></div> </footer> </article> <nav class="navigation paging-navigation" role="navigation"><h1 class="screen-reader-text">Posts navigation</h1><div class="nav-links"><div class="nav-previous"><a href="http://www.msoos.org/tag/optimisation/page/2/"><span class="meta-nav">&larr;</span> Older posts</a></div></div> </nav></div></div><div id="tertiary" class="sidebar-container" role="complementary"><div class="sidebar-inner"><div class="widget-area"> <aside id="recent-posts-2" class="widget widget_recent_entries"><h3 class="widget-title">Recent Posts</h3><ul><li> <a href="http://www.msoos.org/2014/07/cryptominisat-4-2-released/">CryptoMiniSat 4.2 released</a></li><li> <a href="http://www.msoos.org/2014/06/smt-competition14-and-stp/">SMT Competition&#8217;14 and STP</a></li><li> <a href="http://www.msoos.org/2014/05/multi-threading-and-startup-speed/">Multi-threading and startup speed</a></li><li> <a href="http://www.msoos.org/2014/05/final-polish-of-sat-competition-2014-entry/">Final polish of my SAT competition entry</a></li><li> <a href="http://www.msoos.org/2014/04/my-sat-competition-2014-entry/">My SAT Competition 2014 entry</a></li></ul> </aside><aside id="recent-comments-2" class="widget widget_recent_comments"><h3 class="widget-title">Recent Comments</h3><ul id="recentcomments"><li class="recentcomments">Benjamin on <a href="http://www.msoos.org/2012/01/amds-opencl-heaven-and-hell/#comment-905">AMD&#8217;s OpenCL heaven and hell</a></li><li class="recentcomments">msoos on <a href="http://www.msoos.org/2012/06/how-to-use-cryptominisat-2-9-as-a-library/#comment-894">How to use CryptoMiniSat 2.9 as a library</a></li><li class="recentcomments">msoos on <a href="http://www.msoos.org/2013/09/minisat-in-your-browser/#comment-893">MiniSat in your browser</a></li><li class="recentcomments">msoos on <a href="http://www.msoos.org/2013/09/minisat-in-your-browser/#comment-892">MiniSat in your browser</a></li><li class="recentcomments">Joel on <a href="http://www.msoos.org/2013/09/minisat-in-your-browser/#comment-887">MiniSat in your browser</a></li></ul></aside><aside id="text-5" class="widget widget_text"><h3 class="widget-title">Contribute back</h3><div class="textwidget"><a href="https://github.com/msoos/cryptominisat/issues">File</a> a bug report, <a href="https://www.amazon.de/registry/wishlist/QZHG6OP15IQB/ref=cm_wl_sb_o?reveal=unpurchased&filter=all&sort=priority&layout=standard&x=9&y=9">buy me a book</a> or send me bitcoins to <font size="2" face="Georgia, Arial">1K1P8vcQCtQKbriZnccHpph8mSENtEav2h</font></div> </aside><aside id="tag_cloud-2" class="widget widget_tag_cloud"><h3 class="widget-title">Tags</h3><div class="tagcloud"><a href='http://www.msoos.org/tag/aig/' class='tag-link-9' title='2 topics' style='font-size: 8pt;'>AIG</a> <a href='http://www.msoos.org/tag/anf/' class='tag-link-11' title='5 topics' style='font-size: 13.25pt;'>ANF</a> <a href='http://www.msoos.org/tag/asymmetric-branching/' class='tag-link-12' title='3 topics' style='font-size: 10.1pt;'>asymmetric branching</a> <a href='http://www.msoos.org/tag/autarky/' class='tag-link-13' title='2 topics' style='font-size: 8pt;'>autarky</a> <a href='http://www.msoos.org/tag/bcp/' class='tag-link-14' title='11 topics' style='font-size: 18.5pt;'>BCP</a> <a href='http://www.msoos.org/tag/binary-clauses/' class='tag-link-15' title='10 topics' style='font-size: 17.8pt;'>binary clauses</a> <a href='http://www.msoos.org/tag/branching/' class='tag-link-18' title='2 topics' style='font-size: 8pt;'>branching</a> <a href='http://www.msoos.org/tag/bug/' class='tag-link-19' title='9 topics' style='font-size: 17.1pt;'>bug</a> <a href='http://www.msoos.org/tag/cluster/' class='tag-link-20' title='2 topics' style='font-size: 8pt;'>cluster</a> <a href='http://www.msoos.org/tag/cnf/' class='tag-link-21' title='5 topics' style='font-size: 13.25pt;'>CNF</a> <a href='http://www.msoos.org/tag/collaborative-effort/' class='tag-link-22' title='14 topics' style='font-size: 20.25pt;'>Collaborative effort</a> <a href='http://www.msoos.org/tag/distributed-sat-solving/' class='tag-link-28' title='4 topics' style='font-size: 11.85pt;'>Distributed SAT Solving</a> <a href='http://www.msoos.org/tag/failed-literal-probing/' class='tag-link-30' title='3 topics' style='font-size: 10.1pt;'>failed literal probing</a> <a href='http://www.msoos.org/tag/free-software/' class='tag-link-32' title='6 topics' style='font-size: 14.475pt;'>free software</a> <a href='http://www.msoos.org/tag/gaussian-elimination/' class='tag-link-33' title='4 topics' style='font-size: 11.85pt;'>Gaussian elimination</a> <a href='http://www.msoos.org/tag/git/' class='tag-link-34' title='2 topics' style='font-size: 8pt;'>git</a> <a href='http://www.msoos.org/tag/glucose/' class='tag-link-35' title='2 topics' style='font-size: 8pt;'>glucose</a> <a href='http://www.msoos.org/tag/glues/' class='tag-link-36' title='3 topics' style='font-size: 10.1pt;'>glues</a> <a href='http://www.msoos.org/tag/grain-of-salt/' class='tag-link-37' title='3 topics' style='font-size: 10.1pt;'>Grain of Salt</a> <a href='http://www.msoos.org/tag/hyper-binary-resolution/' class='tag-link-38' title='5 topics' style='font-size: 13.25pt;'>hyper-binary resolution</a> <a href='http://www.msoos.org/tag/linux/' class='tag-link-40' title='6 topics' style='font-size: 14.475pt;'>linux</a> <a href='http://www.msoos.org/tag/memory-layout/' class='tag-link-41' title='8 topics' style='font-size: 16.225pt;'>memory layout</a> <a href='http://www.msoos.org/tag/minisat/' class='tag-link-42' title='2 topics' style='font-size: 8pt;'>MiniSat</a> <a href='http://www.msoos.org/tag/opencl/' class='tag-link-44' title='3 topics' style='font-size: 10.1pt;'>OpenCL</a> <a href='http://www.msoos.org/tag/openmp/' class='tag-link-45' title='2 topics' style='font-size: 8pt;'>OpenMP</a> <a href='http://www.msoos.org/tag/optimisation/' class='tag-link-46' title='7 topics' style='font-size: 15.35pt;'>Optimisation</a> <a href='http://www.msoos.org/tag/parallel-sat-solving/' class='tag-link-47' title='5 topics' style='font-size: 13.25pt;'>Parallel SAT Solving</a> <a href='http://www.msoos.org/tag/precosat/' class='tag-link-48' title='3 topics' style='font-size: 10.1pt;'>PrecoSat</a> <a href='http://www.msoos.org/tag/presentation/' class='tag-link-49' title='4 topics' style='font-size: 11.85pt;'>presentation</a> <a href='http://www.msoos.org/tag/programming/' class='tag-link-50' title='8 topics' style='font-size: 16.225pt;'>programming</a> <a href='http://www.msoos.org/tag/release/' class='tag-link-52' title='14 topics' style='font-size: 20.25pt;'>Release</a> <a href='http://www.msoos.org/tag/research/' class='tag-link-53' title='9 topics' style='font-size: 17.1pt;'>research</a> <a href='http://www.msoos.org/tag/resolution/' class='tag-link-54' title='10 topics' style='font-size: 17.8pt;'>resolution</a> <a href='http://www.msoos.org/tag/sage/' class='tag-link-56' title='6 topics' style='font-size: 14.475pt;'>Sage</a> <a href='http://www.msoos.org/tag/sat/' class='tag-link-7' title='5 topics' style='font-size: 13.25pt;'>SAT</a> <a href='http://www.msoos.org/tag/sat-race/' class='tag-link-57' title='18 topics' style='font-size: 22pt;'>SAT Race</a> <a href='http://www.msoos.org/tag/security/' class='tag-link-59' title='3 topics' style='font-size: 10.1pt;'>Security</a> <a href='http://www.msoos.org/tag/self-subsuming-resolution/' class='tag-link-61' title='6 topics' style='font-size: 14.475pt;'>self-subsuming resolution</a> <a href='http://www.msoos.org/tag/simplification/' class='tag-link-62' title='5 topics' style='font-size: 13.25pt;'>simplification</a> <a href='http://www.msoos.org/tag/subsumption/' class='tag-link-63' title='3 topics' style='font-size: 10.1pt;'>subsumption</a> <a href='http://www.msoos.org/tag/trust/' class='tag-link-67' title='2 topics' style='font-size: 8pt;'>Trust</a> <a href='http://www.msoos.org/tag/unsat/' class='tag-link-68' title='2 topics' style='font-size: 8pt;'>UNSAT</a> <a href='http://www.msoos.org/tag/variable-elimination/' class='tag-link-69' title='5 topics' style='font-size: 13.25pt;'>variable elimination</a> <a href='http://www.msoos.org/tag/visualisation/' class='tag-link-70' title='8 topics' style='font-size: 16.225pt;'>visualisation</a> <a href='http://www.msoos.org/tag/xor/' class='tag-link-71' title='2 topics' style='font-size: 8pt;'>XOR</a></div> </aside></div></div></div></div> <footer id="colophon" class="site-footer" role="contentinfo"> </footer></div><script type="text/javascript">var sc_project=6140803;var sc_security="26273f9f";</script><script type="text/javascript" src="http://www.statcounter.com/counter/counter_xhtml.js"></script><noscript><div class="statcounter"><a title="web analytics" href="http://statcounter.com/"><img class="statcounter" src="http://c.statcounter.com/6140803/0/26273f9f/0/" alt="web analytics"/></a></div></noscript><div style="text-align: center;"><a href="http://www.w3-edge.com/wordpress-plugins/" rel="external">Optimization WordPress Plugins &amp; Solutions by W3 EDGE</a></div><script type="text/javascript" src="http://www.msoos.org/wordpress/wp-content/cache/minify/000000/K88vSikoSi0u1i8v0M3MS84pTUkt1s8CosLS1KJK_dJMKEuvNFMvOb8oVS83M0-nnBRd5Zkp6aklpOsrSUwqBukCAA.js.pagespeed.jm.vDaQEVGY5C.js"></script><script type='text/javascript'>//<![CDATA[
var thickboxL10n={"next":"Next >","prev":"< Prev","image":"Image","of":"of","close":"Close","noiframes":"This feature requires inline frames. You have iframes disabled or your browser does not support them.","loadingAnimation":"http:\/\/www.msoos.org\/wordpress\/wp-includes\/js\/thickbox\/loadingAnimation.gif"};
//]]></script><script src="http://www.msoos.org/wordpress/wp-content/cache,_minify,_000000,_K88vSikoSi0u1i8v0M3MS84pTUkt1s8q1i_JyEzOTsqvgDMA.js,Mjm.8l1yYRSo50.js+themes,_twentythirteen,_js,_functions.js,,qver==2013-07-18,Mjm._I3RL5yLg9.js.pagespeed.jc.q-2JfbGff9.js"></script><script>eval(mod_pagespeed_You4q2hHd8);</script><script>eval(mod_pagespeed_XZdGJL5Q_4);</script><script>jQuery("#comment-tabs").tabs();</script></body></html>
