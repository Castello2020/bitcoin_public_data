http://orchard.roaming-initiative.com/dns
HTTP/1.1 200 OK
Server: nginx/0.7.67
Date: Wed, 23 Jul 2014 07:47:22 GMT
Content-Type: application/octet-stream
Content-Length: 3882
Last-Modified: Sat, 28 Jun 2014 17:40:38 GMT
Connection: close
Content-Type: text/html
Accept-Ranges: bytes

<!DOCTYPE html>
<html>

<head>
	<title>Orchard DNS</title>
	<link rel="stylesheet" href="/css/main.css">
</head>

<body>
   <table>
      <tr>
	<td id="sidebar">
		<img src="/i/OrchardBigLogo.svg" class="logo">
		<ul>
			<li><a href="/">Home</a></li>
			<li><a href="/about">About Orchard</a></li>
			<li><a href="https://github.com/campadrenalin/djdns">DJDNS</a></li>
			<li><a href="/node">Node Info</a></li>
			<li><a href="/music">My Music</a></li>
		</ul>
		<hr/>
		<ul>
			<li><a href="https://plus.google.com/+PhilipHorger" rel="me">GPlus</a></li>
			<li><a href="https://twitter.com/IJustRealized" rel="me">Twitter</a></li>
			<li><a href="https://github.com/campadrenalin" rel="me">Github</a></li>
			<li><a href="http://roaming-initiative.com/blog">Blog</a></li>
			<li><a href="bitcoin:1EYHwtr2x64ZyXHQnStoCsZze5qhB1mVhY">Bitcoin Address</a></li>
			<li><a href="mailto:campadrenalin@gmail.com" rel="me">Email</a></li>
		</ul>
		<a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/super_badge.png" alt="Member of The Internet Defense League" /></a>
	</td>
	<td id="content">
		<h1>MCP DNS</h1>

<p>One of the early problems conceptually with MCP was maintaining uniqueness of usernames. In a distributed, eventual-consistency
system alone, you can't make those kinds of guarantees. MCP adds on a layer of signature blocking, which means that no read can
occur except between writes, and no writes can collide with each other. Whenever you read, you are guaranteed the latest available
version of the document. However, the overhead and the mob of write traffic makes this seem kind of impractical for large-scale
uniquing. Things looked dark.</p>

<p>The answer came in the form of breaking the namespace up into virtual subdomains, with each level of heirarchy having its own MCP
document. The transactional costs therefor become reasonable, your cache remains valuable, it's pretty simple to bootstrap the
system, and the subdomains can go as deep as you want.</p>

<p>Basically, this is the same problem facing Hyperboria's DNS system right now, and in fact, DNS security on the world wide web as
well. At least, the problem is similar enough for it to have a common solution. I've been working very, very hard over the last
couple months to solidify the concepts and the code involved in a ConcurrenTree based, community-maintained registry. For the next
few days, I'm going to post a series of Google+ articles detailing the continuing evolution of the registry system, and taking
advice on what custom permissions flags registry documents need to support.</p>

<p>One of the greatest things is that as long as we can agree on some permissions flag meanings, subdomain registry setups can work
according to any rules we want. The whole permissions system is based on high-level transformation constraints, enforced and
verified by the participanting nodes in a document. With high-volume, high-participant documents like top-level registries,
anyone operations that break the rules will be community-rejected at a machine level. Your device is part of the spam filter.</p>

	</td>
      </tr>
   </table>
   <footer>
      Site developed by Philip Horger, 2012-2014. Running on Ubuntu 11.10 and nginx, with Markdown and Python for templating.
   </footer>
   <script type="text/javascript">
       window._idl = {};
       _idl.variant = "modal";
       (function() {
   	var idl = document.createElement('script');
   	idl.type = 'text/javascript';
   	idl.async = true;
   	idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
   	document.getElementsByTagName('body')[0].appendChild(idl);
       })();
   </script>
</body>

</html>

