http://roaming-initiative.net/blog/posts/the-one-with-pictures/
HTTP/1.1 200 OK
Server: nginx/1.2.1
Date: Tue, 22 Jul 2014 17:37:52 GMT
Content-Type: text/html
Content-Length: 13417
Last-Modified: Sun, 20 Jul 2014 17:58:40 GMT
Connection: close
Accept-Ranges: bytes

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <link rel="stylesheet" href="/blog/css/main.css">
        <link rel="alternate" type="application/atom+xml"
            href="/blog/posts/index.xml" title="Atom Feed">
        <title>The One With Pictures</title>
    </head>
    <body>
        <div id="wrap">
            <header>
                <h1><a href="/blog/">ri/blog</a></h1>
                <ul class="nav">
                    <li class="home"> <a href="/blog/">home</a></li>
                    <li class="about"><a href="/blog/about/">about</a></li>
                    <li class="posts"><a href="/blog/posts/">posts</a></li>
                    <li class="tags"> <a href="/blog/tags/">tags</a></li>
                </ul>
            </header>
            <ul class="sidebar">
    
    <li>
        <a href="bitcoin:1EYHwtr2x64ZyXHQnStoCsZze5qhB1mVhY"><img src="/blog/images/bitcoinLogo.png" alt="Bitcoin Logo"/></a>
        <a href="bitcoin:1EYHwtr2x64ZyXHQnStoCsZze5qhB1mVhY">Bitcoin!</a>
    </li>
    <li><script data-gittip-username="campadrenalin"
        src="//gttp.co/v1.js"></script>
    </li>
    <li><a href="http://validator.w3.org/feed/check.cgi?url=http%3A//roaming-initiative.com/blog/posts/index.xml"><img src="/blog/images/valid-atom.png" alt="[Valid Atom 1.0]" title="Validate my Atom 1.0 feed" /></a></li>
    <li><a href="/blog/posts/index.xml">Atom feed</a></li>
</ul>

            <div id="main">

<article>
    <div class="metadata">
        <h1>The One With Pictures</h1>
        <div class="facts">
    <span class="date">12/2/2012</span>
    -
    
        
            
            <a href="/blog/tags/pictures/">pictures</a>
        
             - 
            <a href="/blog/tags/thoughts/">thoughts</a>
        
    
</div>

    </div>
    <div class="content">
        

<p><img src="/blog/images/ri_graphs/rilink.svg" alt="RILink software stack" title="RILink software stack." />
</p>

<p>In case walls of text aren&rsquo;t your thing, check out these pictures. Hopefully you&rsquo;ll find them pretty, but more importantly, we really hope that this will help clear up misunderstandings and confusion <em>preemptively</em>, and give everyone a better understanding of just what the Roaming Initiative project is trying to accomplish.</p>

<h2 id="toc_0">How most internet users have their homes set up now</h2>

<p><img src="/blog/images/ri_graphs/conn_arch_old.svg" alt="Typical existing internet setup" title="Typical existing internet setup" />
</p>

<ul>
<li><a href="/blog/images/ri_graphs/conn_arch_old.svg" title="Typical existing internet setup">Full size SVG</a></li>
<li><a href="/blog/images/ri_graphs/conn_arch_old.png" title="Typical existing internet setup">Full size PNG</a></li>
</ul>

<p>Currently, the typical setup is a router acting as intermediary between the ISP connection and multiple home devices. The ISP connection is usually managed by a device such as a cable modem or satellite dish, which connects to your ISP&rsquo;s higher infrastructure. If you want access to Hyperboria, you have to do it through your ISP-based clearnet access.</p>

<h2 id="toc_1">How RI internet access works</h2>

<p><img src="/blog/images/ri_graphs/conn_arch_new.svg" alt="How RI internet access works" title="How RI internet access works" />
</p>

<ul>
<li><a href="/blog/images/ri_graphs/conn_arch_new.svg" title="How RI internet access works">Full size SVG</a></li>
<li><a href="/blog/images/ri_graphs/conn_arch_new.png" title="How RI internet access works">Full size PNG</a></li>
</ul>

<p>Roaming Initiative takes the existing ISP model and turns it on its head. Instead of getting Hyperboria access through the clearnet, you get clearnet access through Hyperboria.</p>

<p>This works by building a physical Hyperboria mesh in the local area, free for anyone to access using commodity hardware and libre software. Your RILink mesh node takes the role of the cable modem, providing access to the local CJDNS mesh. That gives you access to CVI gateways available on Hyperboria, which act like ISPs - you pay for the service, and you get clearnet access through that service&rsquo;s gateways.</p>

<p>There are some really nice consumer advantages to this - free access to Hyperboria, which lets you shop around ISP websites before buying anything, and trivializing service replacement. ISPs get the most mileage for abuse out of two things being difficult/expensive: finding alternative service providers (impossible in areas with a local monopoly), and switching from one service to another. The shared infrastructure means you can buy your internet access from any provider <em>in any country in the world,</em> and switching to a different provider is 15 minutes of online forms and configuration. ISPs can&rsquo;t afford to be evil.</p>

<h2 id="toc_2">How local physical meshes will be set up</h2>

<p><img src="/blog/images/ri_graphs/geography.svg" alt="Local mesh geography" title="Local mesh geography" />
</p>

<ul>
<li><a href="/blog/images/ri_graphs/geography.svg" title="Local mesh geography">Full size SVG</a></li>
<li><a href="/blog/images/ri_graphs/geography.png" title="Local mesh geography">Full size PNG</a></li>
</ul>

<p>The network backbone will be made of RITower devices (see the <a href="/hardware">hardware page</a> for more details) that are enabled with both WiFi and WiMax transcievers for mesh networking. WiMax is a WiFi-like protocol that can achieve good throughput at long ranges, but runs at frequencies controlled by the FCC (so licensing fees are an issue if you want to buy RITowers of your own for use in America). As you can see, the two towers shown are able to communicate with each other (green line) without being in WiFi range (red circles). RITowers contain UPS (uninterrupted power supply) components so that they can stay online for a certain amount of time without power.</p>

<p>While these provide a fast scaffolding for the area meshnet, they&rsquo;re not the only devices contributing to mesh availability. Any WiFi or WiMax device that speaks CJDNS expands the reach and signal strength of the network, and provides redundancy in the event of the FCC suddenly revoking licenses for political reasons. In a sufficiently populated network, all the RITowers can go down without leaving any users without internet. These auxilliary devices can be owned by anyone and made out of anything, although we&rsquo;ll be selling RILink devices specifically for this purpose, containing software designed for easy CVI client configuration.</p>

<p>A CVI gateway can be part of the local network (for example, the software can be installed on an RITower with a clearnet backhaul quite easily), or it can be run in a remote location, such as a server farm/datacenter. The latter is how we&rsquo;re going to handle gateways for the immediate future, to ease the infrastructure hassle of frequent software updates to RITowers as the software matures (it&rsquo;s a lot simpler to update a few Linode VMs than a vast fleet of outdoor hardware). In remote areas not well-serviced by ISPs, it can even make sense to start a &ldquo;ghetto CVI service&rdquo; using an old desktop and the gateway software in a location where you can get a decent ISP connection (although you really should clear it with your ISP before you start reselling bandwidth, legal restrictions may apply, and your ISP&rsquo;s technicians are more useful as allies than foes).</p>

<h2 id="toc_3">RILink usage and software stack</h2>

<p><img src="/blog/images/ri_graphs/rilink.svg" alt="RILink software stack" title="RILink software stack." />
</p>

<ul>
<li><a href="/blog/images/ri_graphs/rilink.svg" title="RILink software stack.">Full size SVG</a></li>
<li><a href="/blog/images/ri_graphs/rilink.png" title="RILink software stack.">Full size PNG</a></li>
</ul>

<p>This graph shows the core software available for every RILink mesh node. This doesn&rsquo;t include any of the fancy extra things that the upper-class hardware models get, like Amanda Backup and a local MediaGoblin server - just the stuff you can expect to have on anything from a Valkyrie to an Asgard.</p>

<p>First of all, the RILink is designed to sit in front of a home router, though the Valkyrie is the best suited to take over both roles thanks to its 4 ports in the back (versus the one port of other RILink classes). If you don&rsquo;t plan on using home wifi, you can get a good ol&rsquo; 10-port ethernet switch instead, but generally speaking you&rsquo;ll want home wifi.</p>

<p>As for internal software, everything is color coded in the diagram. Orange = CJDNS/Hyperboria. Blue = system utilities. Green = configuration, and red = the base OS. The mesh and CVI client functionality is all controllable through the <a href="https://github.com/jvasile/Plinth">Plinth web administration interface</a> (or rather, a fork that isn&rsquo;t branded up with the FreedomBox logo). The open-source Plinth plugins we&rsquo;ll be developing will allow easy, simple, high-level manipulation of CVI client properties, making it easy switch between CVI services.</p>

<p>Not pictured is pingsort, a piece of software that maintains a sorted list of IP addresses based on their ping latency. This background service allows you to switch to a faster gateway server when one is available, and is really useful if you travel a lot.</p>

<p>What <em>is</em> hopefully apparent from the diagram is the way that the clearnet is accessed through a gateway server within the Hyperboria network.</p>

<h2 id="toc_4">CVI gateway software stack</h2>

<p><img src="/blog/images/ri_graphs/gateway.svg" alt="CVI Gateway stack diagram" title="CVI Gateway stack diagram" />
</p>

<ul>
<li><a href="/blog/images/ri_graphs/gateway.svg" title="CVI Gateway stack diagram">Full size SVG</a></li>
<li><a href="/blog/images/ri_graphs/gateway.png" title="CVI Gateway stack diagram">Full size PNG</a></li>
</ul>

<p>The gateway stack is in many senses simpler than the RILink client stack. Of course, VPN administration has its own sets of complications, even with high-level web interfaces designed to abstract the scary away. The gateway stack will share as many technical elements with the RILink stack as possible to avoid duplication of effort and promote consistency and ease of use across all our products and open source projects. The VPN server software is <a href="http://www.openswan.org/">OpenSwan</a>, as its kernelspace IPsec usage gives it the speed advantage that&rsquo;s critical for such a use case. It also gives an interoperability edge over <a href="http://openvpn.net/index.php/open-source.html">OpenVPN</a>, which is useful if you&rsquo;re setting up a laptop, phone, or tablet to act like a mobile CVI client.</p>

<p>Here at RI, the primary developers and users of the CVI gateway system, we use Debian Stable VMs in datacenters as our primary gateways, with a slow introduction of the software to RITower devices. Datacenter gateways are most efficient for international users, RITower installations are most efficient for local use (the pingsort utility that comes with the RILink stack will choose the best available gateway for clients automatically). Starting with the datacenter gateways allows for easier software integration and testing, is good for scaling, and provides a nice environment for developing features that RITowers will need (like data synchronization) without an immediate time crunch over our heads.</p>

<h2 id="toc_5">Meta notes about this post</h2>

<p>This was made possible by Google Docs, Inkscape, and git.</p>

<p>Google Docs let me create and edit these graphs easily on a computer with a big screen, and then download and transfer them with my tiny-screened development machine.</p>

<p>Inkscape does a beautiful job of hand-editing SVG files, but did you know it can also be used for command-line exporting to PNG? That, combined with my newfound discovery of the &ldquo;basename&rdquo; command, made it trivially easy to batch convert the original svg files to have png export copies available in a single line of loopy bash.</p>

<pre><code>for i in *.svg; do inkscape -z $i -e=$(basename $i .svg).png; done;
</code></pre>

<p>Git was probably the biggest deal for this post, oddly enough, and the motivation for including these credits at all. While the blog is not in a public github repository yet (maybe someday, I&rsquo;m still deciding if it makes sense to do that at all), I did finally set up git so that I could work on it from my laptop in a local environment, rather than edit the live copy (in retrospect, the way I was doing it before is kind of insane). Without being able to edit and test locally for hours before deployment, this kind of post would have been impossible. And I feel like I&rsquo;ve also bettered myself by learning how to push and pull on a repository via SSH on a machine I own, rather than some easy-peasy github server.</p>

    </div>
</article>
            </div>
        </div>
        <footer>
            <ul>
                <li class="item">&copy; Philip Horger 2012-2014</li>
                <li class="item"><a href="mailto:philip@roaming-initiative.com">philip@roaming-initiative.com</a></li>
                <li class="item"><a href="http://reddit.com/u/rainfly_x">rainfly_x</a></li>
                <li class="filler"></li>
            </ul>
        </footer>
    </body>
</html>


