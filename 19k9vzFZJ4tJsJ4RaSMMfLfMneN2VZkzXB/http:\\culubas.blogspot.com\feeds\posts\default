http://culubas.blogspot.com/feeds/posts/default
HTTP/1.0 200 OK
Date: Tue, 22 Jul 2014 07:19:58 GMT
Content-Type: application/atom+xml; charset=UTF-8
Server: blogger-renderd
Cache-Control: public, must-revalidate, proxy-revalidate, max-age=1
Vary: Accept-Encoding
Expires: Tue, 22 Jul 2014 07:19:59 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
ETag: W/"695711c0-ec22-4f3a-8aa5-ea8773c1e654"
Last-Modified: Fri, 04 Apr 2014 10:40:31 GMT
X-Frame-Options: SAMEORIGIN
Alternate-Protocol: 80:quic

<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-3612138614443213909</id><updated>2014-04-04T03:40:31.381-07:00</updated><title type='text'>culubas</title><subtitle type='html'></subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://culubas.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3612138614443213909/posts/default'/><link rel='alternate' type='text/html' href='http://culubas.blogspot.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><author><name>corbixgwelt</name><uri>http://www.blogger.com/profile/01496708137799955566</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>1</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-3612138614443213909.post-8863370836845749601</id><published>2011-05-25T08:51:00.001-07:00</published><updated>2011-06-01T06:29:30.184-07:00</updated><title type='text'>Timejacking &amp; Bitcoin</title><content type='html'>&lt;h3&gt;The Global Time Agreement Puzzle&lt;/h3&gt;&lt;br /&gt;&lt;a href=&quot;http://www.bitcoin.org/bitcoin.pdf&quot;&gt;Bitcoin&lt;/a&gt; is an ingeniously-designed digital currency system with revolutionary potential. This post discusses a purely theoretical vulnerability in bitcoin&#39;s de-facto timestamp handling.&lt;br /&gt;&lt;br /&gt;By announcing inaccurate timestamps when connecting to a node, an attacker can alter a node&#39;s network time counter and deceive it into accepting an alternate block chain. This could significantly increase the chances of a successful double-spend, drain a node&#39;s computational resources, or simply slow down the transaction confirmation rate.&lt;br /&gt;&lt;br /&gt;Unlike other attacks, this would still be possible even when all nodes maintain communication with honest peers. A limited timestamp-based disruption is also possible against nodes that use NTP and maintain perfectly synchronized clocks.&lt;br /&gt;&lt;br /&gt;This can be addressed by determining acceptable timestamp ranges solely based on previous block timestamps. Additional measures include narrowing acceptable time ranges, using the system time rather than estimated network time, and blocking untrusted peers.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Bitcoin Basics&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Some background on how bitcoin works: Bitcoin transactions are stored in a globally-readable block chain. Each individual block contains a list of transactions, a proof of work (a partial hash collision that depends in part on the preceding block), a timestamp representing the approximate time the block was created, and some additional information. (See a &lt;a href=&quot;http://blockexplorer.com/rawblock/00000000000042ac033ac4b56e7783d28aa04c14fef6c09a1ea4a3fc5eb823f3&quot;&gt;complete block here&lt;/a&gt;.)&lt;br /&gt;&lt;br /&gt;When a new block is created, 50 bitcoins are added to the account that created the block until the pre-defined limit of 21 million bitcoins is reached. Each new block represents a confirmation of previously stored transactions, making it increasingly harder to revert those transactions. Approximately 126,500 blocks have been created to date with a value of $46 million at current rates.&lt;br /&gt;&lt;br /&gt;The block timestamps allow the system to regulate the production of bitcoins. The required difficulty level for the proof of work is automatically adjusted based on the amount of time it took to create previous blocks, with the goal of producing 1 block every 10 minutes and thus maintaining a stable expansion rate.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Timestamp Hacking&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Each node internally maintains a counter that represents the network time. This is based on the median time of a node&#39;s peers which is sent in the version message when peers connect. The network time counter reverts to the system time however if the median time differs by more than 70 minutes from the system time. A very reasonable way to estimate the median network time.&lt;br /&gt;&lt;br /&gt;An attacker could potentially slow down or speed up a node&#39;s network time counter by connecting as multiple peers and reporting inaccurate timestamps. (A relatively small number of Tor clients could send enough messages to take over the node&#39;s median time.)&lt;br /&gt;&lt;br /&gt;An advanced attack would involve speeding up the clocks of a majority of the network&#39;s mining resources while slowing down the target&#39;s clock. Since the time value can be skewed by at most 70 minutes, the difference between the nodes would be 140 minutes.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Creating a &quot;Poison Pill&quot; Block&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The network time is used to validate new blocks. As a precaution, nodes reject any block timestamp that is greater than 2 hours from the current network time. Block timestamps that are earlier than the median time of the past 11 blocks are also rejected. This validation puts upper and lower bounds on the acceptable range of block timestamps.&lt;br /&gt;&lt;br /&gt;The attacker would then create a new block with a timestamp set 190 minutes ahead of the &lt;em&gt;real time&lt;/em&gt;. (The amount of time required to generate a block would depend on the attacker&#39;s share of the network&#39;s total power, but it could be done 10 times a week on average by someone with a relatively small 1% share.)&lt;br /&gt;&lt;br /&gt;The target node would reject this new block (because the timestamp is 260 minutes past its own slowed-down network time) and continue using the previous chain. However the miners would accept the block (because it&#39;s no more than 120 minutes past their own sped-up network time).&lt;br /&gt;&lt;br /&gt;The target would now be isolated from the network&#39;s normal transaction processing. As network processing continues, each new block created by the miners would appear to be invalid (because it would bear a timestamp 140 minutes past the target&#39;s network time). The target would immediately drop invalid blocks (in CheckBlock()) without bothering to request and re-check the blocks&#39; ancestors. The attack could continue indefinitely until either an unaffected node or the target itself creates a block, clocks are reset, or operators intervene.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Double-Spending&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The target wouldn&#39;t receive legitimate transaction confirmations during the attack window. This would be a period of time during which an attacker could feed confirmations to the target without honest nodes intervening. The attacker knows that those confirmations will be reverted later by the global chain. As long as poisoned blocks continue to be generated, the attacker can continue sending confirmations on the stale chain that the target is using.&lt;br /&gt;&lt;br /&gt;An attacker with 10% of the network power would be able to send 6 confirmations in 5 and a half hours with a success rate of over 10%. After 6 confirmations, the standard bitcoin interface changes a transaction&#39;s status to confirmed. With 3.3 hours, the attacker would have a greater than 1% success rate. A low probability attack could be attempted automatically many times in order to yield a success.&lt;br /&gt;&lt;br /&gt;Once the network stabilizes, the global chain would take precedence and the ephemeral confirmations that the attacker sent to the target would be reverted.&lt;br /&gt;&lt;br /&gt;A timestamp attack wouldn&#39;t require displacing all of a node&#39;s honest peers with malicious nodes (as in some other &lt;a href=&quot;http://en.wikipedia.org/wiki/Sybil_attack&quot;&gt;Sybil-style&lt;/a&gt; attack variants).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Restricted Time Window&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Even if during the attack a non-poisoned block gets created, the attack window would still be at least 140 minutes. An attacker with 10% of the network&#39;s power would be able to issue 6 confirmations during that time with a success rate of 0.147% (a 6-fold increase over the 0.024% chance of reverting 6 confirmations in a standard double-spend attack). The attacker could still add another poisoned block on his own to reset the attack window back to 0 and continue generating confirmations, giving him another edge.&lt;br /&gt;&lt;br /&gt;In the case where only the target&#39;s network time counter was altered (and the rest of the network&#39;s resources were untouched), there would be at least 70 minutes during which the target would be isolated without having honest nodes intervene. The target would be working on a stale chain while the main network moves on.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Effect on Miners&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;If the attack target is a miner, then its mining power would be drastically reduced because it would be working on a stale chain while the network has moved on to another block. A rogue miner could do this repeatedly to its competitors to increase its share of the network.&lt;br /&gt;&lt;br /&gt;Such an attack could theoretically work even if the target&#39;s network time only differed by a second from the majority of the network&#39;s resources. The target would see that the new block was 1 second beyond the 2 hour threshold and reject it, continuing to work on a stale block. (Similary a node with a clock running 1 second fast relative to the true network time could be presented with a timestamp that most would reject as invalid.) This would cause a network split without disrupting network traffic. In practice, network latency would need to be added to the time difference. Some miners use custom clients that simply don&#39;t use their peers&#39; time at all. This can mitigate some issues, but doesn&#39;t prevent timestamp splits.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;More Elaborate Scenario&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;In a major heist scenario worthy of Ocean&#39;s 11, an attacker could attempt to take the target node offline (by a network DoS, power outage, or some other means) for as much time as would be needed to generate enough confirmations on the alternate chain along with a new block on the global chain with the usual 2 hour timestamp. The new block would be posted to the global chain just before bringing the target back online (ensuring the target will reject the global chain even after re-connecting to an honest peer) and the remaining confirmations would be sent, completing the transaction and providing a generous window of time in which to get away before the target becomes aware of the global chain.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Solutions&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;em&gt;Use the node&#39;s system time instead of the network time to determine the upper limit of block timestamps and when creating blocks.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;A common approach to maintaining the time is NTP, however assuming a dependency on NTP could introduce a centralized point of failure. Using a hardware time source rather than a network time source would require additional calibration and maintenance. Even with reasonably good timekeeping, a disagreement among nodes of only a second or slightly longer (something that will happen as nodes gradually calibrate their clocks) could allow an attacker to split the network or isolate a node.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;Tighten the acceptable time ranges.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;The node&#39;s network time could be restricted to a value within 30 minutes. This changes the maximum initial attack window to between 30 and 60 minutes instead of 70 and 140, but would not prevent splits entirely. Nodes with incorrect daylight savings handling might be left behind though.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;Use only trusted peers.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;Requiring secure nodes to use only trusted peers could make those nodes less secure since a small number of trusted peers may be subverted. A fully decentralized system doesn&#39;t require placing trust in a select group of peers. Requiring operators to maintain their own networks or have geographically distributed servers would also be additional maintenance and syncing issues. Using trusted peers or your own distributed network wouldn&#39;t by itself resolve the global time agreement problem.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;Monitor network health and shutdown if there&#39;s suspicious activity.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;Definitely a good thing, but wouldn&#39;t resolve conflicts automatically.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;Require more confirmations before accepting a transaction.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;Great, but there should be a balance between expediency and the probability of reversal. A significant financial attack could still be successful if other miners have their clocks moved forward or if the target is taken offline, even when the required number of confirmations is increased.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;Use the median block chain time exclusively when validating blocks.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;This would ensure no timestamp splits are possible and would be a complete solution. This is already done on the timestamp&#39;s lower bound and could be applied similarly to the upper bound. For instance, the client could ensure that block creation times couldn&#39;t grow faster than a certain rate.&lt;br /&gt;&lt;br /&gt;If the maximum growth factor were say 1.5 and the median block creation time was 10 minutes, the next creation time would be restricted to 15 minutes or less. In the case of an actual network slow down, the median time would adjust soon enough because it grows exponentially (15, 22.5, 33.75, 50.63, etc.).&lt;br /&gt;&lt;br /&gt;This would mean it might take slightly longer for the network to adjust to drops in computing power, but the adjustment would still take place within a reasonable amount of time. Individual timestamps might not reflect a block&#39;s precise creation time, but that isn&#39;t required - the median creation time within a difficulty segment would still be reliable enough for the purposes of moderating difficult levels.&lt;br /&gt;&lt;br /&gt;Assuming honest nodes maintain enough computing power (the fundamental requirement of the decentralized system) and continue using accurate timestamps, it would be difficult to artificially accelerate the chain&#39;s timestamps for a sustained period of time and no timestamp-based splits would be possible.&lt;br /&gt;&lt;br /&gt;This would ensure that no two peers could disagree on whether a block was valid or not since they are no longer using their own variable time clocks but are using the timestamps embedded in the chain itself.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;What about miner incentives?&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;The median time approach, while technically sound and consistent to all nodes, could give honest miners a financial incentive to defect by posting inflated timestamps and keeping the difficulty level artificially low. Since each block adds 50 bitcoins to the creator&#39;s account, a low difficulty setting would allow miners to generate more block bounties in less time. Transactions would be processed more quickly than usual, but confirmations would be less reliable (because they represent less computational work). Such activity could reduce confidence in bitcoin (one reason why miners might not defect).&lt;br /&gt;&lt;br /&gt;One way to moderate this is would be by introducing a simple voting mechanism where bitcoin account holders would periodically submit their desired inflation or deflation rate through a cryptographically secure vote stored in the block chain (which could later be purged to save space).&lt;br /&gt;&lt;br /&gt;This would in effect create a &lt;em&gt;decentralized&lt;/em&gt; central bank, where currency holders decide somewhat democratically on their desired level of expansion. The currency wouldn&#39;t be deflationary or inflationary in principle, since prevailing market conditions and the community&#39;s own aggregate economic interests would determine supply.&lt;br /&gt;&lt;br /&gt;If miners held a majority of currency in reserve, they would still dominate any voting system, but they would need to take the minority view into account, since minority users could switch to alternative currencies and the market would shrink.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;Use delayed timestamp validation.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;Nodes can retain blocks with excessive timestamps in memory and re-check them later (possibly by setting an alarm). At most a certain number of blocks would be retained in a queue sorted by timestamp and descending difficulty. Nodes would then rejoin the main chain as soon as their system clocks catch up. This has the advantage that significant block timestamp inflation isn&#39;t possible, but it&#39;s more complex, and timestamp-based splits would still be possible. The delay required to synchronize however would be minimized compared to an approach that only relied on the system time.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://github.com/bitcoin/bitcoin&quot;&gt;bitcoin client&lt;/a&gt; is an amazing system and is already incredibly robust. Network health and timestamp validation bring up external issues that systems and routers connected to the global net will assess. Bitcoin is a welcome alternative for many individuals and businesses and I expect its user base to continue growing at a rapid pace.&lt;br /&gt;&lt;br /&gt;&lt;small&gt;Feel free to share some bitcoins at 19k9vzFZJ4tJsJ4RaSMMfLfMneN2VZkzXB :)&lt;/small&gt;</content><link rel='replies' type='application/atom+xml' href='http://culubas.blogspot.com/feeds/8863370836845749601/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://culubas.blogspot.com/2011/05/timejacking-bitcoin_802.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3612138614443213909/posts/default/8863370836845749601'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3612138614443213909/posts/default/8863370836845749601'/><link rel='alternate' type='text/html' href='http://culubas.blogspot.com/2011/05/timejacking-bitcoin_802.html' title='Timejacking &amp; Bitcoin'/><author><name>corbixgwelt</name><uri>http://www.blogger.com/profile/01496708137799955566</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>6</thr:total></entry></feed>
