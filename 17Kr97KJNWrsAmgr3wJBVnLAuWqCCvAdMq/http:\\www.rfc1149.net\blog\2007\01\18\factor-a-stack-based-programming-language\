http://www.rfc1149.net/blog/2007/01/18/factor-a-stack-based-programming-language/
HTTP/1.1 200 OK
Server: nginx/1.4.7
Date: Thu, 24 Jul 2014 12:59:18 GMT
Content-Type: text/html
Content-Length: 17917
Last-Modified: Wed, 18 Jun 2014 08:12:08 GMT
Connection: close
ETag: "53a149d8-45fd"
X-XRDS-Location: http://www.myopenid.com/xrds?username=tardieu.myopenid.com
Strict-Transport-Security: max-age=60000
Accept-Ranges: bytes

<!DOCTYPE html>
<html lang="en" prefix="foaf: http://xmlns.com/foaf/0.1/ schema: http://schema.org/ dc: http://purl.org/dc/terms/">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" href="../../../../../css/stylesheet-2.css" type="text/css" />
<link rel="shortcut icon" href="../../../../../wwwicons/pigeon-16.png" />
<title>Factor: a stack-based programming language</title>
<link rel="canonical" href="https://www.rfc1149.net/blog/2007/01/18/factor-a-stack-based-programming-language/" />
<!--[if lt IE 9]>
<script type="text/javascript">
// html5shiv MIT @rem remysharp.com/html5-enabling-script
// iepp v1.6.2 MIT @jon_neal iecss.com/print-protector
/*@cc_on(function(m,c){var z="abbr|article|aside|audio|canvas|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video";function n(d){for(var a=-1;++a<o;)d.createElement(i[a])}function p(d,a){for(var e=-1,b=d.length,j,q=[];++e<b;){j=d[e];if((a=j.media||a)!="screen")q.push(p(j.imports,a),j.cssText)}return q.join("")}var g=c.createElement("div");g.innerHTML="<z>i</z>";if(g.childNodes.length!==1){var i=z.split("|"),o=i.length,s=RegExp("(^|\\s)("+z+")",
"gi"),t=RegExp("<(/*)("+z+")","gi"),u=RegExp("(^|[^\\n]*?\\s)("+z+")([^\\n]*)({[\\n\\w\\W]*?})","gi"),r=c.createDocumentFragment(),k=c.documentElement;g=k.firstChild;var h=c.createElement("body"),l=c.createElement("style"),f;n(c);n(r);g.insertBefore(l,
g.firstChild);l.media="print";m.attachEvent("onbeforeprint",function(){var d=-1,a=p(c.styleSheets,"all"),e=[],b;for(f=f||c.body;(b=u.exec(a))!=null;)e.push((b[1]+b[2]+b[3]).replace(s,"$1.iepp_$2")+b[4]);for(l.styleSheet.cssText=e.join("\n");++d<o;){a=c.getElementsByTagName(i[d]);e=a.length;for(b=-1;++b<e;)if(a[b].className.indexOf("iepp_")<0)a[b].className+=" iepp_"+i[d]}r.appendChild(f);k.appendChild(h);h.className=f.className;h.innerHTML=f.innerHTML.replace(t,"<$1font")});m.attachEvent("onafterprint",
function(){h.innerHTML="";k.removeChild(h);k.appendChild(f);l.styleSheet.cssText=""})}})(this,document);@*/
</script>
<![endif]-->

<script type="text/javascript">
/* <![CDATA[ */
    (function() {
        var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
        s.type = 'text/javascript';
        s.async = true;
        s.src = '//api.flattr.com/js/0.6/load.js?mode=auto&uid=oneeyed&button=compact&category=text&language=en_GB';
        t.parentNode.insertBefore(s, t);
    })();
/* ]]> */</script>
<link rel="openid.server" href="https://www.myopenid.com/server" />
<link rel="openid.delegate" href="https://tardieu.myopenid.com" />
<link rel="openid2.local_id" href="https://tardieu.myopenid.com" />
<link rel="openid2.provider" href="https://www.myopenid.com/server" />
<link rel="alternate" type="application/atom+xml" title="An avian carrier's blog" href="https://www.rfc1149.net/blog/feed/" />
<link rel="author" title="Samuel Tardieu" href="../../../../../sam.html" />

<meta name="description" content="2007-01-18-factor-a-stack-based-programming-language">
<link rel="contents" title="Archives" href="../../../../../blog/" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:url" content="https://www.rfc1149.net/blog/2007/01/18/factor-a-stack-based-programming-language/" />
<meta name="twitter:title" content="Factor: a stack-based programming language" />
<meta name="twitter:description" content="As you may already know, I’m a big fan of stack-based languages such as Forth, functional languages such as Haskell and reflexive languages such as" />
<meta name="twitter:site:id" content="1185642952" />
<meta name="twitter:creator:id" content="1185642952" />



</head>
<body>
<div id="wholebody">
<div id="content">
<nav id="page-navigation">
  <div class="floatleft">
  <a href="../../../../../blog/2007/01/08/le-geek-c-est-bon-mangez-en/" lang="fr" rel="prev" title="Previous blog post: Le geek c'est bon, mangez en">Le geek c'est bon, mangez en</a>
</div>

  <div class="floatright">
  <a href="../../../../../blog/2007/01/26/fizzbuzz-and-bored-programmers/" lang="en" rel="next" title="Next blog post: FizzBuzz and bored programmers" class="langleft">FizzBuzz and bored programmers</a>
</div>

</nav>
<article typeof="schema:BlogPosting">
  <header>
    
    <div id="title"><h1 property="schema:name">Factor: a stack-based programming language</h1></div>
    <div id="authorship">
      <p>
	<a href="../../../../../sam.html" rel="author">Samuel Tardieu</a>,
	<time property="schema:datePublished">2007-01-18</time>
      </p>
    </div>
  </header>
  <div property="schema:articleBody">
    <p>As you may already know, I’m a big fan of stack-based languages such as <a href="http://en.wikipedia.org/wiki/Forth_%28programming_language%29">Forth</a>, functional languages such as <a href="http://en.wikipedia.org/wiki/Haskell_%28programming_language%29">Haskell</a> and reflexive languages such as <a href="http://en.wikipedia.org/wiki/Smalltalk_%28programming_language%29">Smalltalk</a>. You can imagine how happy I was when I discovered <a href="http://www.factorcode.org/">Factor</a> a few days ago: it combines all those aspects.</p>
<p>Today, a friend sent me someone email signature and asked me if I could decipher it:</p>
<pre><code>01101001001000000110011001110101011000110110101101100101011001000010
00000111100101101111011101010111001000100000011011010110111101101101
00001101000010100110000101101110011001000010000001101110011011110111
01110010000001100110011011110111001000100000011110010110111101110101</code></pre>
<p>As any programmer on the Earth would have, I immediately assumed that those were ASCII codes printed in binary format. I had a Factor interactive shell opened in one of my windows, so I cut and pasted the whole string (surrounded by quotes) and entered:</p>
<pre class="factor"><code>8 group [ 2 base&gt; ] map &gt;string print</code></pre>
<p>and the cleartext version appeared instantly. All in all, it took me around 20 seconds to uncover the original text using Factor.</p>
<p>How does this work? Factor is a stack-based language, meaning that data are put onto a stack and <i>words</i> (equivalent of functions in other languages) use the data on the stack and put results there. Factor is a (dynamically) typed language: complex data can be pushed onto the stack, while untyped languages such as Forth can only push numbers there.</p>
<p>Writing the string pushes it on the stack. Using</p>
<pre class="factor"><code>8 group</code></pre>
<p>takes the string on the top of the stack, considers it as a sequence (a succession of characters), group them by eight and returns an array of strings of length 8. At this point, there is only one element on the stack: an array of eight-characters-long strings.</p>
<p>Then</p>
<pre class="factor"><code>[ 2 base&gt; ]</code></pre>
<p>pushes another element on the top of the stack: a quotation (the equivalent of a lambda expression in functional languages), which is a block containing code. The <code>base&gt;</code> word consumes two elements from the stack, a string <code>S</code> and a number <code>B</code>, and pushes back a number which is the value represented by <code>S</code> in base <code>B</code>. For example, the expression</p>
<pre class="factor"><code>&quot;01101001&quot; 2 base&gt;</code></pre>
<p>will let the value <code>105</code> on the stack, as <code>01101001</code> in binary represents <code>105</code> in decimal.</p>
<pre class="factor"><code>map</code></pre>
<p>takes a sequence and a quotation. It represents the classical <code>map</code> operation in functional languages: it applies the quotation to every element of the sequence and gathers the results in a new sequence. As a consequence, each eight-characters-long string gets transformed into its decimal representation. At the end, we end up with a single element on the stack, which is an array containing all the ASCII codes of the sentence.</p>
<pre class="factor"><code>&gt;string</code></pre>
<p>transforms a sequence of ASCII codes into the corresponding string. Then</p>
<pre class="factor"><code>print</code></pre>
<p>is similar to C’s <code>puts</code> and prints the string on the standard output while recognizing special sequences such as <code></code> and <code></code>.</p>
<p>The content of the unencrypted text itself is not important; my point is that Factor is very compact and its stack-oriented nature helps writing concise and clear programs. For example, here is one of the many possible implementations of the reverse functionality: it takes a string from the stack and lets its ASCII representation in binary onto the stack.</p>
<pre class="factor"><code>[ 2 &gt;base 8 CHAR: 0 pad-head ] [ append ] map-reduce</code></pre>
<p>I’m sure that you’re thrilled to know that “Hello, world!” encodes as</p>
<pre><code>0100100001100101011011000110110001101111001011000010
0000011101110110111101110010011011000110010000100001</code></pre>
<p><em>(edited on 2009-06-13 to use <code>pad-head</code> and <code>map-reduce</code>)</em></p>
  </div>
  <span class="tip">
    If you like this post, you can send some bitcoin dust to
      <a href="bitcoin:17Kr97KJNWrsAmgr3wJBVnLAuWqCCvAdMq?label=rfc1149-blog&amp;message=Tip%20for%20blog%20post&amp;amount=0.001">17Kr97KJNWrsAmgr3wJBVnLAuWqCCvAdMq.
  </span>
  <span class="plusone"><g:plusone size="small"></g:plusone></span>
  <a class="FlattrButton" style="display:none;" href="https://www.rfc1149.net/blog/2007/01/18/factor-a-stack-based-programming-language/" title="Factor: a stack-based programming language" data-flattr-description="2007-01-18-factor-a-stack-based-programming-language"></a>
  <footer>
    <address><span><a href="../../../../../sam.html" rel="author">Samuel Tardieu</a></span></address> |
    <abbr title="2007-01-18" property="schema:datePublished">2007-01-18</abbr> |
    <a href="../../../../../blog/tag/factor/">Factor</a>, <a href="../../../../../blog/tag/free-software/">Free Software</a>, <a href="../../../../../blog/tag/linux/">Linux</a>, <a href="../../../../../blog/tag/programming/">Programming</a> |
    <a href="../../../../../blog/2007/01/18/factor-a-stack-based-programming-language/index.html#disqus_thread">Comments</a> |
    <span class="copyright"><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" rel="license" class="noicon" property="https://creativecommons.org/ns#license">CC BY-NC-SA</a></span>
  </footer>
  <div id="comments">
    <div id="disqus_thread"></div>
    <script type="text/javascript">
    var disqus_shortname = 'rfc1149';
    var disqus_url = 'https://www.rfc1149.net/blog/2007/01/18/factor-a-stack-based-programming-language/'.replace(/^https:/, 'http:');
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
    </script>
    <noscript><p>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></p></noscript>
    <a href="https://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>
  </div>
</article>

</div>
<aside id="sidebar" class="bar">
<div id="pageicon"><a href="../../../../../" class="noicon"><img src="../../../../../wwwicons/pigeon-64.png" alt="[page icon]" title="Go to home page" /></a></div>
<br />
<nav>
<h2>Samuel Tardieu</h2>
<g:plusone annotation="inline"></g:plusone>
<a class="FlattrButton" style="display:none;" href="https://www.rfc1149.net/blog/2007/01/18/factor-a-stack-based-programming-language/" title="Factor: a stack-based programming language" data-flattr-description="2007-01-18-factor-a-stack-based-programming-language"></a>
</nav>

<nav>
<ul>
  <li><a href="../../../../../">Site home</a></li>
  <li><a href="../../../../../sam.html">Me and myself</a></li>
  <li><a href="../../../../../blog/">An avian carrier's blog</a> <a href="../../../../../blog/feed/"><img src="../../../../../wwwicons/atom-feed-16.png" alt="Atom feed" title="Feed for all blog posts" /></a>
    <ul>
      <li><a href="../../../../../blog/en/" lang="en">English posts only</a></li>
      <li><a href="../../../../../blog/fr/" lang="fr">Billets en français</a></li>
    </ul>
  </li>
  <li><a href="../../../../../devel/">Software projects</a></li>
  <li><a href="../../../../../biblio.html">Publications</a></li>
  <li>Follow me on <a href="https://twitter.com/rfc1149" class="noicon">Twitter</a></li>
</ul>
</nav>

<hr />

<nav>
<h2>Latest posts</h2>
<ul id="latestposts">
<li>
    <a href="../../../../../blog/2014/01/27/apple-users-security-is-not-for-you/" lang="en">Apple users: security is not for you</a>
</li>
<li>
    <a href="../../../../../blog/2013/05/02/why-bitcoin-transfers-are-not-instantaneous/" lang="en">Why bitcoin transfers are not instantaneous</a>
</li>
<li>
    <a href="../../../../../blog/2013/05/01/the-cloudy-state-of-bitcoin-exchanges-in-europe/" lang="en">The cloudy state of bitcoin exchanges in Europe</a>
</li>

</ul>
</nav>
<hr />

<nav>
<h2>Tags</h2>
<a style="font-size: 65%" href="../../../../../blog/tag/ada/">Ada</a> <a style="font-size: 68%" href="../../../../../blog/tag/android/">Android</a> <a style="font-size: 60%" href="../../../../../blog/tag/anime/">Anime</a> <a style="font-size: 62%" href="../../../../../blog/tag/asterisk/">Asterisk</a> <a style="font-size: 62%" href="../../../../../blog/tag/bitcoin/">Bitcoin</a> <a style="font-size: 68%" href="../../../../../blog/tag/bug/">Bug</a> <a style="font-size: 61%" href="../../../../../blog/tag/c/">C</a> <a style="font-size: 67%" href="../../../../../blog/tag/critiques/">Critiques</a> <a style="font-size: 61%" href="../../../../../blog/tag/erlang/">Erlang</a> <a style="font-size: 68%" href="../../../../../blog/tag/factor/">Factor</a> <a style="font-size: 67%" href="../../../../../blog/tag/forth/">Forth</a> <a style="font-size: 118%" href="../../../../../blog/tag/free-software/">Free Software</a> <a style="font-size: 68%" href="../../../../../blog/tag/geek/">Geek</a> <a style="font-size: 62%" href="../../../../../blog/tag/gentoo/">Gentoo</a> <a style="font-size: 60%" href="../../../../../blog/tag/geocaching/">Geocaching</a> <a style="font-size: 68%" href="../../../../../blog/tag/google/">Google</a> <a style="font-size: 61%" href="../../../../../blog/tag/haskell/">Haskell</a> <a style="font-size: 60%" href="../../../../../blog/tag/health/">Health</a> <a style="font-size: 64%" href="../../../../../blog/tag/ipv6/">IPv6</a> <a style="font-size: 62%" href="../../../../../blog/tag/j/">J</a> <a style="font-size: 60%" href="../../../../../blog/tag/java/">Java</a> <a style="font-size: 61%" href="../../../../../blog/tag/javascript/">Javascript</a> <a style="font-size: 64%" href="../../../../../blog/tag/jekyll/">Jekyll</a> <a style="font-size: 105%" href="../../../../../blog/tag/la-vie-et-le-reste/">La vie et le reste</a> <a style="font-size: 74%" href="../../../../../blog/tag/linux/">Linux</a> <a style="font-size: 67%" href="../../../../../blog/tag/logiciel-libre/">Logiciel libre</a> <a style="font-size: 68%" href="../../../../../blog/tag/legislation/">Législation</a> <a style="font-size: 106%" href="../../../../../blog/tag/net/">Net</a> <a style="font-size: 60%" href="../../../../../blog/tag/ovh/">OVH</a> <a style="font-size: 77%" href="../../../../../blog/tag/petits-tracas/">Petits tracas</a> <a style="font-size: 65%" href="../../../../../blog/tag/photo-and-imaging/">Photo and imaging</a> <a style="font-size: 102%" href="../../../../../blog/tag/programming/">Programming</a> <a style="font-size: 67%" href="../../../../../blog/tag/python/">Python</a> <a style="font-size: 65%" href="../../../../../blog/tag/recoverjpeg/">Recoverjpeg</a> <a style="font-size: 60%" href="../../../../../blog/tag/robotics/">Robotics</a> <a style="font-size: 65%" href="../../../../../blog/tag/ruby/">Ruby</a> <a style="font-size: 64%" href="../../../../../blog/tag/scala/">Scala</a> <a style="font-size: 61%" href="../../../../../blog/tag/science/">Science</a> <a style="font-size: 67%" href="../../../../../blog/tag/security/">Security</a> <a style="font-size: 61%" href="../../../../../blog/tag/software-patents/">Software patents</a> <a style="font-size: 64%" href="../../../../../blog/tag/technologie/">Technologie</a> <a style="font-size: 73%" href="../../../../../blog/tag/technology/">Technology</a> <a style="font-size: 60%" href="../../../../../blog/tag/urbi/">Urbi</a> <a style="font-size: 62%" href="../../../../../blog/tag/voip/">VoIP</a> <a style="font-size: 60%" href="../../../../../blog/tag/xmpp/">XMPP</a> <a style="font-size: 60%" href="../../../../../blog/tag/xorg/">Xorg</a> <a style="font-size: 61%" href="../../../../../blog/tag/zeromq/">ZeroMQ</a> <a style="font-size: 65%" href="../../../../../blog/tag/education/">Éducation</a>
</nav>


</aside>
<footer id="page-footer">
<div class="spacer"> </div>
<hr />
This site is maintained by
    <a href="../../../../../sam.html#me" rel="author schema:creator" typeof="schema:Person"><span property="schema:name">Samuel Tardieu</span></a>
    using <a href="http://jaspervdj.be/hakyll/">Hakyll</a>
    and hosted by
    <a href="http://www.online.net/" class="noicon" rel="schema:provider" typeof="schema:Organization"><span property="schema:name">Online SAS</span></a>. <a href="../../../../../rfc1149.html">Why <code>rfc1149.net</code>?</a>

<script type="text/javascript">
window.___gcfg = {lang: 'en'};
(function() {
var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
po.src = 'https://apis.google.com/js/plusone.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
})();
</script>
</footer>

</div>
</body>
</html>

