http://onsmalltalk.com/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 09:46:39 GMT
Server: KomHttpServer/7.1a (unix)
Expires: Wed, 11 Jun 1980 12:00:00 GMT
Pragma: no-cache
Author: Ramon Leon found at http://onsmalltalk.com
Cache-Control: no-cache, must-revalidate
Content-type: text/html;charset=utf-8
Set-Cookie: blog=cRhqIWDNjv-P4h7B; path=/
Via: 1.0 onsmalltalk.com
Vary: Accept-Encoding
Content-Encoding: gzip
Connection: close

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><title>On Smalltalk</title><link rel="stylesheet" type="text/css" href="/seaside/files/WAStandardFiles/window.css"/><script type="text/javascript" src="/seaside/files/WAStandardFiles/externalAnchors.js"></script><script type="text/javascript" src="/seaside/files/WAStandardFiles/misc.js"></script><script type="text/javascript" src="/seaside/files/WAStandardFiles/shortcuts.js"></script><meta http-equiv="Content-Type" content="text/html;charset=utf-8; charset=utf-8"/><meta http-equiv="Content-Script-Type" content="text/javascript"/><link rel="alternate" type="application/atom+xml" title="On Smalltalk Atom Feed" href="/seaside/atomFeed"/><link rel="alternate" type="application/rss+xml" title="On Smalltalk RSS Feed" href="/seaside/rssFeed"/><link rel="stylesheet" type="text/css" href="/blogStyle.css"/><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js"></script><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/scriptaculous/1.8.1/scriptaculous.js"></script><script type="text/javascript" src="/mainScript.js"></script></head><body onload="onLoad()" onkeydown="onKeyDown(event)"><script type="text/javascript">/*<![CDATA[*/new PeriodicalExecuter(function(){new Ajax.Request('http://onsmalltalk.com/',{'parameters':['_s=cRhqIWDNjv-P4h7B','_k=8Bnsp9i0','1'].join('&')})},81)/*]]>*/</script><div class="blog"><div id="header"><h1><a href="/">On Smalltalk</a></h1><div id="byLine">thoughts on Smalltalk and programming in general...</div></div><div id="commands" style="right: 2000px;"><a accesskey="l" href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;2">Login</a></div><table border="0" cellspacing="0" cellpadding="0" class="blogLayout"><tr><td valign="top" class="mainContent"><div id="posts"><div class="post"><h2><a href="/2010-10-30-installing-a-gemstone-seaside-server-on-ubuntu-10.10">Installing a Gemstone Seaside Server on Ubuntu 10.10</a></h2><p class="postMeta"> By Ramon Leon - 30 October 2010 under <a href="/apache">Apache</a>, <a href="/databases">Databases</a>, <a href="/seaside">Seaside</a>, <a href="/smalltalk">Smalltalk</a>, <a href="/gemstone">Gemstone</a>, <a href="/linux">Linux</a></p><div class="postBody"><p>I'll assume you've already installed Apache and now want to install Gemstone behind it as a Seaside server.  Let's install a few things that we're going to need later, just to get the dependencies out of the way.  Login to your server/workstation as an admin user, someone who can sudo.</p><pre>sudo aptitude install bc zip build-essential apache2-threaded-dev ia32-libs</pre><p>Now let's setup the user we're going to run Gemstone under.</p><pre>sudo adduser glass</pre><p>Add him to the admin group so he can sudo.</p><pre>sudo usermod -a -G admin glass</pre><p>Login as this user.</p><pre>su glasscd</pre><p>Download Gemstone and install it.</p><pre>wget http://seaside.gemstone.com/scripts/installGemstone.shchmod +x installGemstone.sh ./installGemstone.sh</pre><p>Download some init scripts so we can setup Gemstone as a service rather than manually starting it.</p><pre>wget http://onsmalltalk.com/downloads/gemstone_initd_scripts.tgztar xf gemstone_initd_scripts.tgz</pre><p>Edit each of these scripts and change the line RUNASUSER=USER to RUNASUSER=glass and change the first line to #!/bin/bash instead of #/bin/sh as the Gemstone scripts need bash and Ubuntu changed the bin/sh link to point to dash instead of bash which won't work.</p><p>Install the init scripts.  There's a shorter way to write these, but it will fit better on the blog if I do each one separately.</p><pre>sudo mv gemstone_initd_scripts/gemstone /etc/init.d/sudo mv gemstone_initd_scripts/gs_fastcgi /etc/init.d/sudo mv gemstone_initd_scripts/netldi /etc/init.d/chmod a+x /etc/init.d/gemstone chmod a+x /etc/init.d/gs_fastcgichmod a+x /etc/init.d/netldi sudo chown root:root /etc/init.d/gemstonesudo chown root:root /etc/init.d/gs_fastcgisudo chown root:root /etc/init.d/netldi  sudo update-rc.d gemstone defaultssudo update-rc.d gs_fastcgi defaultssudo update-rc.d netldi defaults</pre><p>Start just the <em>gemstone</em> and <em>netldi</em> services.</p><pre>sudo /etc/init.d/gemstone startsudo /etc/init.d/netldi start</pre><p>Grab GemTools and fire it up.  I'm installing on my local machine so I can just fire this up here; if you're installing on a remote server, refer to my previous post about <a href="http://onsmalltalk.com/2010-10-23-faster-remote-gemstone">setting up X11Forwarding and running GemTools on a remote host</a>.</p><pre>wget http://seaside.gemstone.com/squeak/GemTools-1.0-beta.8-244x.app.zipunzip GemTools-1.0-beta.8-244x.app.zipGemTools-1.0-beta.8-244x.app/GemTools.sh</pre><p>Edit the connection to point at localhost and login to Gemstone and open Monticello; open the MetacelloRepository; load either ConfigurationOfSeaside28 or ConfigurationOfSeaside30.  I'm still on 2.8 so that's what I'm loading.  If you're going to load 3.0, you'll need to edit the gs_fastcgi script accordingly as it's built to startup 2.8.  Just change the DAEMON line to runSeasideGems30 instead of runSeasideGems.</p><p>Click the admin button on the gem launcher and check commit on almost out of memory option (just in case loading anything takes up too much temp space), then run ConfigurationOfSeaside28 load in the workspace.  Once Seaside is loaded, we can continue and start up the Seaside gems.</p><pre>sudo /etc/init.d/gs_fastcgi start</pre><p>Next we need to setup Apache to be able to use FastCGI and enable a few modules we'll need and will need to first build the FastCGI module.</p><pre>wget http://www.fastcgi.com/dist/mod_fastcgi-current.tar.gztar zxvf mod_fastcgi-current.tar.gzcd mod_fastcgi*cp Makefile.AP2 Makefilemake top_dir=/usr/share/apache2sudo make install top_dir=/usr/share/apache2echo "LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so" &gt; fastcgi.loadsudo mv fastcgi.load /etc/apache2/mods-available/sudo a2enmod fastcgi expires proxy proxy_http proxy_balancer deflate rewrite</pre><p>And fix the host file so FastCGI doesn't wig out over the ip6 address you're not even using.</p><pre>sudo nano /etc/hosts</pre><p>Comment out ipv6 line like so.</p><pre>#::1     localhost ip6-localhost ip6-loopback</pre><p>Now create a configuration for the site.</p><pre>sudo nano /etc/apache2/sites-available/gemstone</pre><p>Using the below config and modifying where necessary.</p><pre>ServerAdmin your@someplace.comListen 8081Listen 8082Listen 8083FastCgiExternalServer /var/www1 -host localhost:9001 -pass-header AuthorizationFastCgiExternalServer /var/www2 -host localhost:9002 -pass-header AuthorizationFastCgiExternalServer /var/www3 -host localhost:9003 -pass-header Authorization&lt;VirtualHost *:80&gt;    ServerName yourComputerName    RewriteEngine On    DocumentRoot /var/www/    #http expiration    ExpiresActive on    ExpiresByType text/css A864000    ExpiresByType text/javascript A864000    ExpiresByType application/x-javascript A864000    ExpiresByType image/gif A864000    ExpiresByType image/jpeg A864000    ExpiresByType image/png A864000    FileETag none    # http compression    DeflateCompressionLevel 9    SetOutputFilter DEFLATE    AddOutputFilterByType DEFLATE text/html text/plain text/xml application/xml$    BrowserMatch ^Mozilla/4 gzip-only-text/html    BrowserMatch ^Mozilla/4.0[678] no-gzip    BrowserMatch \bMSIE !no-gzip !gzip-only-text/html    # Let apache serve any static files NOW    RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} -f    RewriteRule (.*) %{DOCUMENT_ROOT}$1 [L]    &lt;Proxy *&gt;       AddDefaultCharset off       Order allow,deny       Allow from all    &lt;/Proxy&gt;    ProxyPreserveHost On    #main app    ProxyPass / balancer://gemfarm/    ProxyPassReverse / balancer://gemfarm/    &lt;Proxy balancer://gemfarm&gt;        Order allow,deny        Allow from all        BalancerMember http://localhost:8081        BalancerMember http://localhost:8082        BalancerMember http://localhost:8083    &lt;/Proxy&gt;&lt;/VirtualHost&gt;&lt;VirtualHost *:8081&gt;        DocumentRoot /var/www1&lt;/VirtualHost&gt;&lt;VirtualHost *:8082&gt;        DocumentRoot /var/www2&lt;/VirtualHost&gt;&lt;VirtualHost *:8083&gt;        DocumentRoot /var/www3&lt;/VirtualHost&gt;</pre><p>Make a few symbolic links for those www directories, FastCGI seems to want these to all be different and Apache will complain if they don't actually exist.</p><pre>sudo ln -s /var/www /var/www1sudo ln -s /var/www /var/www2sudo ln -s /var/www /var/www3</pre><p>And enable the new site and restart Apache.</p><pre>sudo a2ensite gemstonesudo /etc/init.d/apache2 restart</pre><p>Hopefully you've gotten no errors at this point and you can navigate to http://yourMachineName/seaside/config and see that everything is working.  Gemstone is now installed as a service, as is netldi and the Seaside FastCGI gems, and they'll start up automatically when the machine starts.  </p><p>I'm not thrilled with running the Seaside gems this way because if they die nothing will restart them.  I'll be following up later with a post on running the Seaside gems and maintenance gem under Monit which will ensure they're restarted should a gem crash for any reason.  Gemstone itself and netldi I'm not worried about and this approach should work fine.</p><p>Since I did this on my workstation which already had apache installed as well as other things I run, I may have missed a dependency or two that I already had installed and didn't notice.  If the above procedure doesn't work for you for any reason, please let me know what I overlooked.</p></div><div class="postInfo"><a href="/2010-10-30-installing-a-gemstone-seaside-server-on-ubuntu-10.10#comments">6 comments</a></div></div><div class="post"><h2><a href="/2010-10-23-faster-remote-gemstone">Faster Remote Gemstone</a></h2><p class="postMeta"> By Ramon Leon - 23 October 2010 under <a href="/databases">Databases</a>, <a href="/linux">Linux</a>, <a href="/performance">Performance</a>, <a href="/smalltalk">Smalltalk</a>, <a href="/gemstone">Gemstone</a></p><div class="postBody"><p>Just a quick post to document some knowledge for myself and for anyone using <a href="http://programminggems.wordpress.com/2008/09/05/setting-up-glass-on-slicehost/">Gemstone on a remote server like SliceHost</a> or my preference Linode and trying to <a href="http://selfish.org/blog/easy%20remote%20gemstone">run GemTools locally through a ssh tunnel</a>. It's slow, very slow, several seconds per mouse click. OmniBrowser is just to chatty. Fortunately Linux has a better way to do it: X11Forwarding. Run the GemTools client on the remote server and forward the UI for just that app to your workstation.</p><p>Now, if you have a mostly Windows background like I do, this might be something new to you, it certainly was to me. I'd kind of heard of it, but didn't realize what it was until today after I got it working. Just one more frakking cool thing Linux can do, much nicer than VNC/Remote Desktop because it means you don't have to install any window manager and the other hundred dependencies that go with it on the server. Every piece of software installed on a remote server is a piece of software that needs updated and/or could be hacked or make the next upgrade not go smoothly, so the less stuff installed on a server the better as far as I'm concerned.</p><p>I happen to be running the latest 64bit Ubuntu 10.4 LTS on a Linode server, so if you're running something else the steps might be slightly different. To prep the server, which I'm assuming is a headless server managed via ssh, you'll only need to install two packages. One to enable the X11 forwarding and one to install a library that the Squeak VM needs for its UI that's not installed by default on a headless server.</p><pre>sudo aptitude install xauth libgl1-mesa-dev ia32-libs</pre><p>You'll also need to enable X11Forwarding in /etc/ssh/sshd_config by ensuring this line exists.</p><pre>X11Forwarding yes</pre><p>Restart sshd if you had to change this because it wasn't enabled.</p><pre>sudo /etc/init.d/ssh restart</pre><p>Now just upload the <a href="http://seaside.gemstone.com/downloads.html">GemTools</a> one click image and unzip it.</p><pre>scp GemTools-1.0-beta.8-244x.app.zip glass@serverName:ssh glass@serverNameunzip GemTools-1.0-beta.8-244x.app.zip</pre><p>And everything is ready to go. Now ssh in again but this time with forwarding and compression enabled.</p><pre>ssh -X -C glass@serverName</pre><p>Now any graphical program started on the server from this session, will run on the server, but its UI will display as a window on the client as if it were running directly on the client. Now fire up GemTools on the server...</p><pre>cd GemTools-1.0-beta.8-244x.app./GemTools.sh</pre><p>And GemTools will start up and it'll appear to run locally, but it's actually running remotely which means OmniBrowser can be as chatty as it likes, it's all runnning from localhost from its point of view. The X display, which is built to do this much better, is running on your machine. Now GemTools will run fast enough that you could actually develop directly in Gemstone if you like. Not that I actually would, Pharo has much better tool support.</p><p>I think this will be the first of a run of posts about Gemstone, there's a lot to learn when switching dialects. I can tell you this, well tested code ports easier, so apparently I've got a lot of tests to write that I probably should have written from the start. Oh well, live and learn.</p></div><div class="postInfo"><a href="/2010-10-23-faster-remote-gemstone#comments">5 comments</a></div></div><div class="post"><h2><a href="/2010-07-28-a-simple-thread-pool-for-smalltalk">A Simple Thread Pool for Smalltalk</a></h2><p class="postMeta"> By Ramon Leon - 28 July 2010 under <a href="/smalltalk">Smalltalk</a>, <a href="/seaside">Seaside</a>, <a href="/squeak">Squeak</a>, <a href="/performance">Performance</a>, <a href="/ajax">Ajax</a>, <a href="/programming">Programming</a></p><div class="postBody"><p>Forking a thread in Smalltalk is easy, wrap something in a block and call fork.  It's so easy that you can easily become fork happy and get yourself into trouble by launching too may processes.  About 6 months ago, my excessive background forking in a Seaside web app finally starting hurting; I'd have images that seemed to lock up for no reason using 100% CPU and they'd get killed by monitoring processes causing lost sessions.  There was a reason; the process scheduler in Squeak/Pharo just isn't built to handle a crazy amount of threads and everything will slow to a crawl if you launch too many.  </p><p>I had a search result page in Seaside that launched about 10 background threads for every page render and then the page would poll for the results of those computations, collect up any results found, and AJAX them into the page.  Each one needs to run in its own thread because any one of them may hang up and take upwards of 30 seconds to finish its work even though the average time would be under a second.  I don't want all the results being stalled waiting for the one slow result, so it made sense to have each on its own thread.  This worked for quite a while with nothing but simple forking, but eventually, the load rose to the point that I needed a thread pool so I could limit the number of threads actually doing the work to a reasonable amount.  So, let's write a thread pool.</p><p>First we'll need a unit of work to put on the thread, similar to a block or a future.  Something we can return right away when an item is queued that can be checked for a result or used as a future result.  We'll start by declaring a worker class with a few instance variables I know I'll need.  A block for the actual work to be done, an expiration time to know if the work still needs done, a value cache to avoid doing the work more than once, a lock to block a calling thread treating the worker as a future value, and an error in case of failure to store the exception to be re-thrown on the main thread.</p><pre><code>Object subclass: #ThreadWorker    instanceVariableNames: 'block expires value lock error'    classVariableNames: ''    poolDictionaries: ''    category: 'ThreadPool'</code></pre><p>I'll also want a few constructors for creating them, one that just takes a block, and one that takes a block and an expiration time.  For my app, if I don't have results within a certain amount of time, I just don't care anymore, so I'd rather have the work item expire and skip the work.</p><pre><code>ThreadWorker class&gt;&gt;on: aBlock    ^ self new        block: aBlock;        yourself ThreadWorker class&gt;&gt;on: aBlock expires: aTime    ^ self new        block: aBlock;        expires: aTime;        yourself</code></pre><p>On the instance side let's initialize the instance and setup the necessary accessors for the constructors above.</p><pre><code>ThreadWorker&gt;&gt;initialize    super initialize.    lock := Semaphore new ThreadWorker&gt;&gt;block: aBlock    block := aBlock ThreadWorker&gt;&gt;expires: aTime    expires := aTime</code></pre><p>Now, since this is for use in a thread pool, I'll want a non-blocking method of forcing evaluation of the work so the thread worker isn't blocked.  So if the work hasn't expired, evaluate the block and store any errors, then signal the Semaphore so any waiting clients are unblocked.</p><pre><code>ThreadWorker&gt;&gt;evaluate    DateAndTime now &lt; expires ifTrue:         [ [ value := block value ]             on: Error            do: [ :err | error := err ] ].    lock signal</code></pre><p>I'll also want a possibly blocking value method for retrieving the results of the work.  If you call this right away, then it'll act like a future and block the caller until the queue has had time to process it using the evaluate method above. </p><pre><code>ThreadWorker&gt;&gt;value    lock isSignaled ifFalse: [ lock wait ].    "rethrow any error from worker thread on calling thread"    error ifNotNil:         [ error            privHandlerContext: thisContext;            signal ].    ^ value</code></pre><p>But if you want to poll for a result, we'll need a method to see if the work has been done yet.  We can do this by checking the state of the Semaphore; the worker has a value only after the Semaphore has been signaled.</p><pre><code>ThreadWorker&gt;&gt;hasValue    ^ lock isSignaled</code></pre><p>That's all we need for the worker.  Now we need a queue to make use of it.  So we'll declare the class with some necessary instance variables and initialize them to some reasonable defaults along with some accessors to adjust the pool sizes.  Now, since a thread pool is generally, by nature, something you only want one of (there are always exceptions, but I prefer simplicity) then we'll just rely on Smalltalk itself to ensure only one pool by making all of the pool methods class methods and the ThreadPool the only instance.  I'll use a shared queue to handle the details of locking to ensure the workers share the pool of work safely.</p><pre><code>Object subclass: #ThreadPool    instanceVariableNames: ''    classVariableNames: 'MaxPoolSize MinPoolSize         PoolManager QueueWorkers WorkQueue'    poolDictionaries: ''    category: 'ThreadPool'ThreadPool class&gt;&gt;initialize    "self initialize"    WorkQueue := SharedQueue2 new.    QueueWorkers := OrderedCollection new.    MinPoolSize := 5.    MaxPoolSize := 15.    Smalltalk addToStartUpList: self ThreadPool class&gt;&gt;maxPoolSize: aSize    MaxPoolSize := aSize ThreadPool class&gt;&gt;minPoolSize: aSize    MinPoolSize := aSize</code></pre><p>Once you have a pool, you need to manage how many threads are actually in it and have it adjust to adapt to the workload.  There are two main questions we need to ask ourselves to do this: are there enough threads or are there too many threads given the current workload.  Let's answer those questions.</p><pre><code>ThreadPool class&gt;&gt;isPoolTooBig    ^ QueueWorkers size &gt; MinPoolSize         and: [ WorkQueue size &lt; QueueWorkers size ]ThreadPool class&gt;&gt;isPoolTooSmall    ^ QueueWorkers size &lt; MinPoolSize         or: [ WorkQueue size &gt; QueueWorkers size             and: [ QueueWorkers size &lt; MaxPoolSize ] ]</code></pre><p>We also need a method for a worker to grab a queued work item and work it, and we don't ever want this to error out killing a worker thread since the worker thread should trap any error and re-throw them to the queuing thread.  But just to be safe, we'll wrap it.</p><pre><code>ThreadPool class&gt;&gt;processQueueElement    [ WorkQueue next evaluate ]         on: Error        do: [  ]</code></pre><p>Now that workers have something to do, we'll need to be able to start and stop worker threads in order to increase or decrease the working thread count.  Once a worker is started, we'll want it to simply work forever and the shared queue will handle blocking the workers when there's no work to do.  We'll also want the worker threads running in the background so they aren't taking priority over foreground work like serving HTTP requests.</p><pre><code>ThreadPool class&gt;&gt;startWorker    QueueWorkers add: ([ [ self processQueueElement ] repeat ]             forkAt: Processor systemBackgroundPriority            named: 'pool worker')</code></pre><p>To kill a worker, we'll just queue a job to kill the active process, which will be whatever worker picks up the job.  This is a simple way to ensure we don't kill a worker that is doing something important.  This requires actually using the queue, so a quick couple methods to actually queue a job and some extensions on BlockClosure/BlockContext to make using the queue as simple as forking.</p><pre><code>ThreadPool class&gt;&gt;queueWorkItem: aBlock expiresAt: aTimestamp     | worker |    worker := ThreadWorker on: aBlock expires: aTimestamp.    WorkQueue nextPut: worker.    ^ worker ThreadPool class&gt;&gt;queueWorkItem: aBlock expiresAt: aTimestamp     session: aSession     | worker |    "a special method for Seaside2.8 so the worker threads     still have access to the current session"    worker := ThreadWorker         on:             [ WACurrentSession                 use: aSession                during: aBlock ]        expires: aTimestamp.    WorkQueue nextPut: worker.    ^ worker BlockClosure&gt;&gt;queueWorkAndExpireIn: aDuration    ^ ThreadPool         queueWorkItem: self        expiresAt: DateAndTime now + aDurationBlockClosure&gt;&gt;queueWorkAndExpireIn: aDuration session: aSession     "a special method for Seaside2.8 so the worker threads      still have access to the current session"    ^ ThreadPool         queueWorkItem: self        expiresAt: DateAndTime now + aDuration        session: aSession</code></pre><p>And now we're able to queue a job to kill a thread, making sure to double check at time of actual execution that the pool is still too big and the thread still needs to die.</p><pre><code>ThreadPool class&gt;&gt;killWorker    "just queue a task that kill the activeProcess,     which will be the worker that picks it up"    [ self isPoolTooBig ifTrue:        [ (QueueWorkers remove: Processor activeProcess) terminate ] ]         queueWorkAndExpireIn: 10 minutes</code></pre><p>Of course, something has to decide when to increase the size of the queue and when to decrease it, and it needs to a method to do so.</p><pre><code>ThreadPool class&gt;&gt;adjustThreadPoolSize    "starting up processes too fast is dangerous      and wasteful, ensure a reasonable delay"    1 second asDelay wait.    self isPoolTooSmall         ifTrue: [ self startWorker ]        ifFalse: [ self isPoolTooBig ifTrue: [ self killWorker ] ]</code></pre><p>We need to ensure the thread pool is always up and running, and that something is managing it, so we'll hook the system startUp routine and kick off the minimum number of workers and start a single manager process to continually adjust the pool size to match the workload.</p><pre><code>ThreadPool class&gt;&gt;startUp    "self startUp"    self shutDown.    MinPoolSize timesRepeat: [ self startWorker ].    PoolManager := [ [ self adjustThreadPoolSize ] repeat ]         forkAt: Processor systemBackgroundPriority        named: 'pool manager'</code></pre><p>And cleanup everything on shutdown so every time the image starts up we're starting from a clean slate.</p><pre><code>ThreadPool class&gt;&gt;shutDown    "self shutDown"    WorkQueue := SharedQueue2 new.    PoolManager ifNotNil: [ PoolManager terminate ].    QueueWorkers do: [ :each | each terminate ].    QueueWorkers removeAll.</code></pre><p>And that's it, a simple thread pool using a shared queue to do all the dirty work of dealing with concurrency.  I now queue excessively without suffering the punishment entailed by forking excessively.  Now rather than...</p><pre><code>[ self someTaskToDo ] fork</code></pre><p>I just do...</p><pre><code>[ self someTaskToDo ] queueWorkAndExpireIn: 25 seconds</code></pre><p>Or in Seaside...</p><pre><code>[ self someTaskToDo ] queueWorkAndExpireIn: 25 seconds session: self session</code></pre><p>And my app is running like a champ again, no more hanging images due to forking like a drunken sailor.</p><p>UPDATE: For the source, see the <a href="http://www.squeaksource.com/ThreadPool.html">ThreadPool package on SqueakSource</a>.</p></div><div class="postInfo"><a href="/2010-07-28-a-simple-thread-pool-for-smalltalk#comments">10 comments</a></div></div><div class="post"><h2><a href="/2010-02-01-dynamic-web-development-with-seaside-pdf-available-for-purchase">Dynamic Web Development with Seaside PDF Available for Purchase</a></h2><p class="postMeta"> By Ramon Leon - 1 February 2010 under <a href="/seaside">Seaside</a>, <a href="/smalltalk">Smalltalk</a>, <a href="/updates">Updates</a>, <a href="/ajax">Ajax</a>, <a href="/apache">Apache</a></p><div class="postBody"><p>Reposted from <a href="http://www.lukas-renggli.ch/blog/seaside-book-pdf">Lukas Renggli blog</a>:</p><p><dir>The PDF version of the book <a href="http://book.seaside.st/book/introduction/pdf-book">Dynamic Web Development with Seaside</a> is available to download now.   </p><p>At the end of the payment process (PayPal) you will be redirected to the download area where you are able to get the latest builds of the PDF version of the book. If you bookmark the page you will be able to download fixes and extra chapters as we integrate them into the online version. By buying the PDF version you support our hard work on the book.</p><p>We wish to thank the European Smalltalk User Group, inceptive.be, Cincom Smalltalk and GemStone Smalltalk for generously sponsoring this book. We are looking for additional sponsors. If you are interested, please contact us. If you are a publisher and interested in publishing this material, please let us know.</dir></p><p>So please, support the Seaside community and buy the book, I know I will.</p></div><div class="postInfo"><a href="/2010-02-01-dynamic-web-development-with-seaside-pdf-available-for-purchase#comments">4 comments</a></div></div><div class="post"><h2><a href="/2009-05-14-sandstonedb-goods-adaptor">SandstoneDb GOODS adaptor</a></h2><p class="postMeta"> By Ramon Leon - 14 May 2009 under <a href="/smalltalk">Smalltalk</a>, <a href="/seaside">Seaside</a>, <a href="/databases">Databases</a></p><div class="postBody"><p>SandstoneDb was written mostly as a rails'ish API for a simple object database for use in small office and prototype applications (plus I needed a db for this blog).  Which object database wasn't really important to me at the time, it was the API that I wanted, so I made the actual object store backing it pluggable and initially wrote two different store adaptors for it.  The first was a memory store which was little more than a dictionary of dictionaries against which I wrote all the unit tests.  The second was a prevayler style file based store that used SmartRefStream serialization and loaded everything from disk on startup; this provided a crash proof Squeak images which wouldn't lose data.</p><p>I figured eventually, for fun I might get around to writing adaptors for some of the other object database back-ends that are in use: <a href="http://www.garret.ru/goods.html">GOODS</a> and Omnibase.  I never really got around to it; however, <a href="http://smalltalkthoughts.blogspot.com">Nico Schwarz</a> has written a <a href="http://smalltalkthoughts.blogspot.com/2009/05/sandstonegoods.html">GOODS adaptor</a> for <a href="http://onsmalltalk.com/sandstonedb-simple-activerecord-style-persistence-in-squeak">SandstoneDb</a>.  This will let you hook up multiple squeak images to a single store and should scale better than the file store that SandstoneDb defaults to.  </p><p>Go check it out and let him know what you think of it.  This is just the kind of project that'll help programmers new to Seaside get going and get accustomed to using an object database rather than a relational one.  It looks like his first blog post as well, so swing by and leave a comment to encourage more posts, we need more bloggers spreading the word!</p></div><div class="postInfo"><a href="/2009-05-14-sandstonedb-goods-adaptor#comments">3 comments</a></div></div></div><div id="postPager"><div id="batch">&lt;&lt;&nbsp;<strong>1</strong>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;3">2</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;4">3</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;5">4</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;6">5</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;7">6</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;8">7</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;9">8</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;10">9</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;11">10</a>&nbsp;<a href="http://onsmalltalk.com/?_s=cRhqIWDNjv-P4h7B&amp;_k=8Bnsp9i0&amp;12">&gt;&gt;</a></div></div></td><td valign="top" class="navigation"><div id="extras"><form accept-charset="utf-8" method="post" action="http://onsmalltalk.com/" id="searchForm"><div><input tabindex="-1" value="Default" name="13" style="position: absolute; top: -100em" type="submit" class="submit"/></div><div id="search"><input onfocus="if(value=='Search'){value='';style.color=null}" style="color: #aaa" value="Search" name="14" type="text" class="text"/></div><div><input name="_s" value="cRhqIWDNjv-P4h7B" type="hidden" class="hidden"/><input name="_k" value="8Bnsp9i0" type="hidden" class="hidden"/></div></form><div id="categories"><h3>Topics</h3><ul><li><a href="/ajax">Ajax</a>&nbsp;(6)</li><li><a href="/apache">Apache</a>&nbsp;(5)</li><li><a href="/databases">Databases</a>&nbsp;(12)</li><li><a href="/gemstone">Gemstone</a>&nbsp;(2)</li><li><a href="/linux">Linux</a>&nbsp;(6)</li><li><a href="/lisp">Lisp</a>&nbsp;(9)</li><li><a href="/magritte">Magritte</a>&nbsp;(10)</li><li><a href="/performance">Performance</a>&nbsp;(8)</li><li><a href="/profiling">Profiling</a>&nbsp;(1)</li><li><a href="/programming">Programming</a>&nbsp;(39)</li><li><a href="/ruby">Ruby</a>&nbsp;(25)</li><li><a href="/seaside">Seaside</a>&nbsp;(64)</li><li><a href="/smalltalk">Smalltalk</a>&nbsp;(82)</li><li><a href="/sql">Sql</a>&nbsp;(13)</li><li><a href="/squeak">Squeak</a>&nbsp;(6)</li><li><a href="/updates">Updates</a>&nbsp;(9)</li></ul></div></div></td></tr></table><div id="pages"><a href="/about">about me</a>|<a href="/books-worth-reading">good books</a>|<a href="/top-posts">popular posts</a>|<a href="/seaside/atomFeed">atom</a>|<a href="/seaside/rssFeed">rss</a></div></div><div style="text-align: center" class="donate">Donate if you like this blog<br/><div>BTC: 12a9hmRF8Aueu38tXyuj7eswTUgsemszp2</div></div><script type="text/javascript">
		document.write(unescape("%3Cscript src='http://www.google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
	</script>
	<script type="text/javascript">	try {var pageTracker = _gat._getTracker("UA-118308-7"); pageTracker._trackPageview();} catch(err) {}</script><script type="text/javascript">/*<![CDATA[*/function onLoad(){}/*]]>*/</script></body></html>
