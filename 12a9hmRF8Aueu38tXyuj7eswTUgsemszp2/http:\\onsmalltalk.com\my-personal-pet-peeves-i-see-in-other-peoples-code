http://onsmalltalk.com/my-personal-pet-peeves-i-see-in-other-peoples-code
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 07:23:35 GMT
Server: KomHttpServer/7.1a (unix)
Expires: Wed, 11 Jun 1980 12:00:00 GMT
Pragma: no-cache
Author: Ramon Leon found at http://onsmalltalk.com
Cache-Control: no-cache, must-revalidate
Content-type: text/html;charset=utf-8
Set-Cookie: blog=P2YMGT5yczXLHc8X; path=/
Via: 1.0 onsmalltalk.com
Vary: Accept-Encoding
Content-Encoding: gzip
Connection: close

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><title>My Personal Pet Peeves I See in Other People's Code</title><link rel="stylesheet" type="text/css" href="/seaside/files/WAStandardFiles/window.css"/><script type="text/javascript" src="/seaside/files/WAStandardFiles/externalAnchors.js"></script><script type="text/javascript" src="/seaside/files/WAStandardFiles/misc.js"></script><script type="text/javascript" src="/seaside/files/WAStandardFiles/shortcuts.js"></script><meta http-equiv="Content-Type" content="text/html;charset=utf-8; charset=utf-8"/><meta http-equiv="Content-Script-Type" content="text/javascript"/><link rel="alternate" type="application/atom+xml" title="On Smalltalk Atom Feed" href="/seaside/atomFeed"/><link rel="alternate" type="application/rss+xml" title="On Smalltalk RSS Feed" href="/seaside/rssFeed"/><link rel="stylesheet" type="text/css" href="/blogStyle.css"/><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js"></script><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/scriptaculous/1.8.1/scriptaculous.js"></script><script type="text/javascript" src="/mainScript.js"></script><meta name="description" content="If you don't have a sense of humor, stop reading now, go somewhere else, otherwise, continue reading this purposefully over the top rant.  Keep in mind, I'm discussing VB, C#, and Java, not [insert yo..."/><meta name="keywords" content="Programming Smalltalk"/><link rel="stylesheet" type="text/css" href="/?_s=YzgcUg2QM03akBhC"/></head><body onload="onLoad()" onkeydown="onKeyDown(event)"><script type="text/javascript">/*<![CDATA[*/new PeriodicalExecuter(function(){new Ajax.Request('http://onsmalltalk.com/my-personal-pet-peeves-i-see-in-other-peoples-code',{'parameters':['_s=P2YMGT5yczXLHc8X','_k=1GGanpMV','1'].join('&')})},81)/*]]>*/</script><div class="blog"><div id="header"><h1><a href="/">On Smalltalk</a></h1><div id="byLine">thoughts on Smalltalk and programming in general...</div></div><div id="commands" style="right: 2000px;"><a accesskey="l" href="http://onsmalltalk.com/my-personal-pet-peeves-i-see-in-other-peoples-code?_s=P2YMGT5yczXLHc8X&amp;_k=1GGanpMV&amp;2">Login</a></div><table border="0" cellspacing="0" cellpadding="0" class="blogLayout"><tr><td valign="top" class="mainContent"><div id="posts"><div class="post"><h2><a href="/my-personal-pet-peeves-i-see-in-other-peoples-code">My Personal Pet Peeves I See in Other People's Code</a></h2><p class="postMeta"> By Ramon Leon - 7 December 2006 under <a href="/programming">Programming</a>, <a href="/smalltalk">Smalltalk</a></p><div class="postBody"><p>If you don't have a sense of humor, stop reading now, go somewhere else, otherwise, continue reading this purposefully over the top rant.  Keep in mind, I'm discussing VB, C#, and Java, not [insert your favorite language where these things don't apply].</p><p>On occasion, I'm forced to get into other peoples code, in Smalltalk, this is usually a pleasure and a chance to learn something.  In other languages (VB, C#, and Java) where code isn't of the general quality of the average Smalltalker, I continually run into the same things over and over again that drive me insane.  Off the top of my head, here's a few...</p><h4>Inability To Grok Booleans</h4><p>Using an if statement to evaluate a boolean, only to return a boolean...</p><pre>if(someCondition)    return true;else return false;</pre><p>Instead of...</p><pre>return someCondition;</pre><p>Comparing a boolean to true or false, as if it isn't already one...</p><pre>if(someCondition ==  true)    doSomething();</pre><h4>Inability To Grok Assignment</h4><p>I can't tell you how many times I've seen this code...</p><pre>ArrayList someItems = new ArrayList();someItems = BuildSomeList();</pre><p>when it's so blindingly obvious that this is equivalent...</p><pre>ArrayList someItems = BuildSomeList();</pre><p>Seriously, I can't imagine what mental defect makes people thing they have to create an ArrayList before the variable will allow an ArrayList to be assigned to it.</p><h4>Ignorant Prefixing</h4><p>From VB'ers, prefixing declared object variables with an "o", as in oXml, to declare it an object, as if everything else somehow isn't an object.  In fact, Hungarian notation in general.  Stop prefixing your damn code with type declarations.  Booleans don't need to start with b, strings don't need to start with "str", wake the hell up and join this decade people.</p><h4>Single Exit Points</h4><p>Constantly jumping through hoops and writing extra unnecessary code just to have a single return statement in a method...</p><pre>string result = "";if(someCondition)    result = "foo";else result = "bar";return result;</pre><p>Instead of...</p><pre>if(someCondition)    return "foo";return "bar";</pre><p>There's not a shortage of return statements, use them liberally, exit early and often, it produces much cleaner and much less ambiguous code.  Those old papers about structured programming that recommend this practice, no longer apply, <strong>we have garbage collection</strong> and your methods shouldn't be that damn long to begin with.</p><h4>1000 Line Methods</h4><p>A method should be 7 to 10 lines of code, any longer than that and you start having to comment sections to explain them, which is what methods are for in the first place.  There are exceptions, but they are exceedingly rare, on average, method should be short and simple and require little if any explanation beyond the method name itself.  Seriously, I'm starting to think we should eliminate the scroll bar in code editors, when you hit the bottom, the computer should just start beeping at you like you're an idiot for typing that much.</p><h4>Declaring Variables At The Top Of A Method</h4><p>In languages that allow it, you should always declare your variables and initialize them in the exact spot you want to use them.  Don't declare variables as if they're somehow a limited resource and keep reusing the same one over and over in different sections of code.  Declare your variables at the minimum level of scope necessary for them to be useful.  If you only need a variable inside a loop, then declare it in the loop (optimizations aside), the code will be cleaner and more readable.  This is another one of those mental quirks that seems to come from having a history in Basic.  Stop it, please.</p><h4>Too Many comments / Worthless Comments.</h4>  <p>If I see more green than code, somethings wrong.  This modern JavaDoc style stuff is ignorant, if you need to explain the code that much, it sucks, really.  Comments should not replicate what the code says, they should augment what it can't, things like "why" you made a design choice belong in comments.  How, is for code, don't repeat the how in the comments.  </p><p>Don't comment closing tags.</p><pre>if(foo == bar){    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code} //end if(foo == bar)</pre><p>this is beyond ignorant, you should be shot.  If you can't see the beginning of a tag on the same screen as the end of a tag, you need to learn how to factor.  Break thing up into smaller methods.  See 1000 line methods above, you have a disease, seek help.</p><p>Don't comment sections of code to explain it, factor it into its own method and make the method name explain it.  Then if necessary, comment the method explaining the "why".  Functions/Methods are the most basic building block of programs, they should be as small as bricks, not the size of entire freaking houses.  You can't compose solutions from a few giant functions, only from many many small ones.  Giant functions aren't reusable, maintainable, or acceptable, ever.</p><h4>Still Using Error Codes</h4><p>Stop using error codes and return values, use exceptions instead.  To put it simply, use the <a href="http://c2.com/cgi/wiki?SamuraiPrinciple">Samurai Principle</a>, a method either succeeds, or blows up with a suitable exception.  Error codes are not acceptable in a modern language, it's a dead technique.</p><h4>Lack Of Consistency And Style</h4><p>I might not like certain styles, but all too often I see code that lacks any style at all.  Code should have a style, things like naming conventions, casing conventions, factoring conventions, something.  Nothing bugs me more than code that clearly lacks any sort of style whatsoever.  Don't name thing haphazardly, sometimes uppercase, sometimes lowercase, sometimes abbreviated, sometimes long.  </p><p>Pick a style for local variables, parameters, instance variables, method names, class names, package names, constructor names, and accessor names.  If you haven't actually thought out how you want to do these things, stop, take the time, it'll allow you to think much less in the future and write code cleaner and faster.  Go read <a href="http://onsmalltalk.com/book-links/013476904X">Kent Beck's Smalltalk Best Practice Patterns</a>, steal his style until you develop your own.  Pick a style, stick with it, don't write schizophrenic random looking code, it's maddening to people who read it later.</p><h4>Still Using Switch Statements</h4><p>Stop using them, period.  There's hardly any cases where polymorphism isn't more appropriate.  Use a class for each case, and break up these nightmare methods into separate pieces that can be worked on in isolation without fear of breaking the other cases.  Your switch statements will be duplicated, eventually, so just start with classes and avoid the inevitable refactoring.  There's a reason Smalltalk has never had a case statement, think about it, HARD.  If you think you can't live without them, think harder, you're wrong.</p><h4>Obsessed With Simple Types</h4><p>Though you can represent anything with a string, it's ignorant to do so.  Every program should not be expressed with only Strings, Chars, Booleans, Integers, Doubles, and Decimals.  Build your own primitive types and use them as such.  Things like Money, SocialSecurityNumber, Address, Contact, User, Name, Email, Url, Company, and OrderNumber can all be primitives as well.  </p><p>Write your programs in the language of the domain, not in the language of existing primitive types that are native to your language.  Stop passing around specially formated strings and validating them constantly, just stick them into a real object and use it instead.  Pass around whole objects, not id's to objects that you can look up later.  Learn to override ToString/asString/to_string so that your object print well when you stick them into things like drop down lists and such.</p><p>Writing code with objects native to the domain in general, greatly reduces the amount of code necessary to express rules in that domain in large part because it greatly eliminates duplicate code.</p><h4>XML Hell</h4><p>Stop using XML as if it were an object model.  Trees of objects are far superior to trees of strings loaded up into a generic DOM.  Use a real object model, and then if you need XML, serialize the objects into XML for transport.  Rarely should XML be built manually, use objects instead, they work better, are easier to force business rules onto, and are easily serialized into any format.  XML is for configuration files and data transport, not for general purpose programming.</p><p>I'm sure there are more, but this post is getting a bit long.  Anyone have any other major pet peeves they like to share?</p></div><div class="postInfo"></div><div class="relatedPosts"><h3>Related Posts</h3><ul><li><a href="/turtles-all-the-way-down">Turtles All the Way Down</a></li><li><a href="/using-magritte-with-seaside">Using Magritte With Seaside</a></li><li><a href="/copy-and-paste-the-future-of-programming">Copy and Paste, The Future of Programming?</a></li><li><a href="/making-a-connection-pool-for-glorp-in-seaside">Making a Connection Pool for Glorp in Seaside</a></li><li><a href="/on-simple-functional-idioms">On Simple Functional Idioms</a></li></ul></div><a name="comments"></a><h3>Comments (automatically disabled after 1 year)</h3><div id="commentAjax"><div id="id3" class="comment"><div class="title"><strong>Anon</strong>&nbsp;2786 days ago</div><div class="body"><p>You suggestions still include gratuitous use of "else".  E.g., you wrote:</p><p>if(someCondition)    return "foo";else return "bar";</p><p>Just do this:</p><p>if(someCondition)    return "foo";return "bar";</p></div><div id="id4" class="meta"></div></div><div id="id5" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>Correct you are, minor oversight on my part from cut and paste. Fixed.</p></div><div id="id6" class="meta"></div></div><div id="id7" class="comment"><div class="title"><strong>Damien Cassou</strong>&nbsp;2786 days ago</div><div class="body"><p>Hi,</p><p>I really like your blog. Please continue posting often.</p><p>Bye</p></div><div id="id8" class="meta"></div></div><div id="id9" class="comment"><div class="title"><strong>Jonathan Feinberg</strong>&nbsp;2786 days ago</div><div class="body"><p>Yay. Woo.</p></div><div id="id10" class="meta"></div></div><div id="id11" class="comment"><div class="title"><strong></strong>&nbsp;2786 days ago</div><div class="body"><p>You are a moron.</p></div><div id="id12" class="meta"></div></div><div id="id13" class="comment"><div class="title"><a target="_new" href="http://eeewert.org/">Craig Ewert</a>&nbsp;2786 days ago</div><div class="body"><p>"A method should be 7 to 10 lines of code..."</p><p>I've always been a heretic on this one.  Usually when I see these forests of short functions, I see functions created solely to make each one short.</p><p>A function should be as long or as short as it needs to be to do what it does.  Cutting out a bit of its insides to make a new function buys you nothing in terms of understandability of the whole, and costs you a context switch when the machine executes it and when a programmer understands it.</p></div><div id="id14" class="meta"></div></div><div id="id15" class="comment"><div class="title"><a target="_new" href="http://www.destraynor.com/serendipity">Des Traynor</a>&nbsp;2786 days ago</div><div class="body"><p>Can I just ask what is the problem with using braces?</p><p>is if(condition){ <br />  statement;}</p><p>that offensive to you?</p></div><div id="id16" class="meta"></div></div><div id="id17" class="comment"><div class="title"><a target="_new" href="http://www.chokeytown.com">Lance Hupper</a>&nbsp;2786 days ago</div><div class="body"><p>"You are a moron."</p><p>The proverbial pot. Where is your explanation of "moron"? Are you of the "Battleship Principal" mentality? Good thing guys like me get paid better money to refactor your code.</p></div><div id="id18" class="meta"></div></div><div id="id19" class="comment"><div class="title"><a target="_new" href="http://eeewert.org/">Craig Ewert</a>&nbsp;2786 days ago</div><div class="body"><p>Contrariwise, I always see people cringe at grotesquely large functions but seldom do I see cringe at oversized classes.  A class with a hundred members and a hundred methods is just as wrong, usually, as a function of a thousand lines.</p></div><div id="id20" class="meta"></div></div><div id="id21" class="comment"><div class="title"><a target="_new" href="http://ns.tan-com.com">Jake</a>&nbsp;2786 days ago</div><div class="body"><p>I just came here from Reddit from Robert's Shared feeds in Google Reader. I just wanted to let you know that you might want to tweak your come from Google message up top for Google Readers, so they won't see it. ;)</p></div><div id="id22" class="meta"></div></div><div id="id23" class="comment"><div class="title"><strong>Joel</strong>&nbsp;2786 days ago</div><div class="body"><p>One of my pet peeves is a hundred 7-10 line methods that exist only because the self-fellater who wrote them thinks methods were invented to replace comments.</p><p>Seriously, though, I agree with you on almost all of these. I hope you write a sequel.</p></div><div id="id24" class="meta"></div></div><div id="id25" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>I cringe at over sized classes as well, though much less so in Smalltalk, where I can organize a large number of methods more easily.  Look at Object for example.</p><p>Thanks for the tip on Google Reader, I'll have to take a look at that landing page plug-in.</p><p>Des, I don't use braces unless it's a multi line statement.</p><p>"A function should be as long or as short as it needs to be to do what it does"</p><p>Agreed Craig, and that averages out to about 7 to 10 lines of code, if you're keeping to the rule that a function should do one thing.  As with all things, there are always exceptions, I was referring to the average.</p></div><div id="id26" class="meta"></div></div><div id="id27" class="comment"><div class="title"><a target="_new" href="http://evercrack.cjb.cc">Cory Boston</a>&nbsp;2786 days ago</div><div class="body"><p>I disagree with not using switch statements because they can be replaced with an OOP solution (not that I understood what you meant)but for the simple reasons that OOP per se isn't the only solution out there (as far as design/method).  Otherwise, good overall assessment and an enjoyable read.</p></div><div id="id28" class="meta"></div></div><div id="id29" class="comment"><div class="title"><strong>A different anonymous</strong>&nbsp;2786 days ago</div><div class="body"><p>I agree, he is a moron.</p><p>I can see him as a monk in the Dark Ages, constantly fasting, constantly accusing the style of the other monk's prayers as being incorrect and insufficiently pious.</p><p>Some of the stuff that bugs him is done on purpose; some people just think it is clearer (easier to follow).</p></div><div id="id30" class="meta"></div></div><div id="id31" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>You must have missed the part where I said "My" personal pet peeves.</p></div><div id="id32" class="meta"></div></div><div id="id33" class="comment"><div class="title"><a target="_new" href="http://mwilden.com">Mark Wilden</a>&nbsp;2786 days ago</div><div class="body"><p>You've obviously been reading my mind, Ramon. Stop it.</p></div><div id="id34" class="meta"></div></div><div id="id35" class="comment"><div class="title"><strong>Matt Brown</strong>&nbsp;2786 days ago</div><div class="body"><p>I agree that code style should be consistent and avoid unnecessary fluff.</p><p>XML is <em>awful</em> for configuration files.  That file is there for me, the user/administrator, not the program.  I want to be able to read it, and I want a higher ratio of actual-content to structure when hacking it.</p></div><div id="id36" class="meta"></div></div><div id="id37" class="comment"><div class="title"><a target="_new" href="http://sigmanu.case.edu">Adam Derewecki</a>&nbsp;2786 days ago</div><div class="body"><p>I usually just do a:   return condition ? "foo" : "bar";</p><p>... but I have a strange obsession with that operator. I'm a TA for intro Java at my university, and one of the things I can't stand is when students:</p><p>result = someOperation();   return result;</p><p>instead of just   return someOperation();</p><p>Good post, I might actually print this out for my intro class tomorrow morning!</p></div><div id="id38" class="meta"></div></div><div id="id39" class="comment"><div class="title"><a target="_new" href="http://www.MrPhil.name/">MrPhil</a>&nbsp;2786 days ago</div><div class="body"><p>if(someCondition ==  true)    doSomething();</p><ul><li>adds clarity</li></ul><p>string result = "";if(someCondition)    result = "foo";else     result = "bar";return result;</p><ul><li>standard approach, consistency and style</li></ul><p>My pet pea is many lines of code commented out.  If you're confident enough to check in code that you've commented out then just delete it!  You are using source control right?!?</p></div><div id="id40" class="meta"></div></div><div id="id41" class="comment"><div class="title"><strong>Tom</strong>&nbsp;2786 days ago</div><div class="body"><p>This doesn't bother me, because it reads just like a business rule:</p><p>if(foo == true) {    // stuff}</p><p>When people write:if(foo) {    // stuff}</p><p>I can't help but dart my eyes back up and make sure 'foo' really is a boolean (I'm still doing that in Java...a left over from my C++ early days, I guess).</p></div><div id="id42" class="meta"></div></div><div id="id43" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>If you think</p><pre>if(someCondition == true)    doSomething();</pre><p>adds clarity, then I assert you aren't groking booleans, as I said in the article.  </p><p>There's nothing about it that makes it clearer, since we all know that "if" takes a boolean parameter and tests for true.  It's totally redundant and useless to compare true to true to see if it's true.  BTW, I'm not talking about C or C++, I'm talking about C#, Java, Smalltalk, Visual Basic, more modern languages.</p><p>I agree with the deleting of commented out code when using source control however, also a peeve of mine.</p></div><div id="id44" class="meta"></div></div><div id="id45" class="comment"><div class="title"><strong>OldTimer</strong>&nbsp;2786 days ago</div><div class="body"><p>Mostly ok, but you can pry my error codes from my cold, dead fingers.  </p><p>And thickets of little functions called from one place each are not a big improvement from over a larger function.  Yes, huge functions are a sign of problems, but slavish adherence to a strict small limit is not the solution.</p></div><div id="id46" class="meta"></div></div><div id="id47" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>LOL, nice, but it's not small functions I'm adhering too, it's using functions to do one thing, them being small is a simple side effect of doing so.  As with all things, there are always exceptions.</p></div><div id="id48" class="meta"></div></div><div id="id49" class="comment"><div class="title"><strong>Anonymous #3</strong>&nbsp;2786 days ago</div><div class="body"><p>I guess if no one else actually ever looks at your code, not using common sense prefixes makes sense.</p></div><div id="id50" class="meta"></div></div><div id="id51" class="comment"><div class="title"><a target="_new" href="http://walkytalky.net/">matt</a>&nbsp;2786 days ago</div><div class="body"><p>[Isaac] Having a single point of return is supposed to make it easier to ensure all your allocations are released before you get there.</p><p>[Ramon] It's an amusing list and I agree with much of it, but way too full of OO dogma. Refactoring every choice into a subclass is just cruft 9 times out of 10. Error codes are often cleaner than exceptions, which are one of the classic "false sense of security" language features.</p><p>XML and Hungarian notation are absolutely the work of the devil, though...</p></div><div id="id52" class="meta"></div></div><div id="id53" class="comment"><div class="title"><a target="_new" href="http://86thedream.blogspot.com">CJ</a>&nbsp;2786 days ago</div><div class="body"><p>You know what annoys me?  High-minded knitpicking.</p><p>But really what annoys me is when people don't use descriptive variable names, they use names like m,n,a,b,c,i,j,k,r,s,x,y,z in some complicated method instead of names like maximumNumberOfExceptions.  </p><p>Oh yeah, that's another thing that annoys me, when people don't follow naming conventions.</p><p>But mostly the high-minded knitpicking.</p></div><div id="id54" class="meta"></div></div><div id="id55" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>I didn't say every choice, but if something grows beyond and if/else if, I'll move to classes.</p></div><div id="id56" class="meta"></div></div><div id="id57" class="comment"><div class="title"><a target="_new" href="http://www.chokeytown.com">Lance Hupper</a>&nbsp;2786 days ago</div><div class="body"><p>"I guess if no one else actually ever looks at your code, not using common sense prefixes makes sense."</p><p>Wrong! The IDE is there to assist you. If you changed an int to a string and named your variables as such (and didn't change your variable name), you just caused an issue for the programmer that follows you. Why the hell should sSomeText be a string? The compilers handle English statements, write Englsh. Some text should be someText.... just as it would read.</p></div><div id="id58" class="meta"></div></div><div id="id59" class="comment"><div class="title"><strong>Izaak</strong>&nbsp;2786 days ago</div><div class="body"><p>Good to see a Smalltalker still doing Smalltalk. however i disagree about single exit points, ^ (someCondition) ifTrue:["foo"] ifFalse:["bar"].is cleaner then(someCondition) ifTrue[^"foo"] ifFalse:[^"bar"].</p><p>less code = simpler, cleaner.</p></div><div id="id60" class="meta"></div></div><div id="id61" class="comment"><div class="title"><strong>eh</strong>&nbsp;2786 days ago</div><div class="body"><p>wow the author needs to get a fucking grip.</p></div><div id="id62" class="meta"></div></div><div id="id63" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>You didn't have to work on the 3rd party code that I did today.  This article didn't come from nowhere!</p></div><div id="id64" class="meta"></div></div><div id="id65" class="comment"><div class="title"><strong>spam</strong>&nbsp;2786 days ago</div><div class="body"><ol><li>Ive read that its bad practice to have multiple return statements in a function.  </li><li>Turning everything into an object is not good either..when it can be expressed with a primitive type</li></ol></div><div id="id66" class="meta"></div></div><div id="id67" class="comment"><div class="title"><strong>Rusty Wright</strong>&nbsp;2786 days ago</div><div class="body"><p>My Personal Pet Peeves I See in Other People's Writing: the incorrect use of the apostrophe drives me nuts. I often feel that they need to stop watching so much tv and start reading more books.  A good one to start with is Eats Leaves &amp; Shoots.</p><p>It's 3rd, not 3'rd.  Use an apostrophe when it's a contraction, not a plural, or some sort of abbreviation, or possessive.</p></div><div id="id68" class="meta"></div></div><div id="id69" class="comment"><div class="title"><strong>OldTimer</strong>&nbsp;2786 days ago</div><div class="body"><p>I'm still on about error codes.  Somebody needs to explain to grandpa here why exceptions are so great?  Maybe tomorrow's blog?  </p><p>Like exceptions, error codes can be ignored by the part of the code that doesn't care.  Unlike exceptions, they don't stop you in your tracks and don't trigger an allocation (the exception) and an expensive stack unwinding.   Error codes and token values (eg NaN and, yes, NULL), when used correctly, are a great aid in smoothing out the bumps.</p></div><div id="id70" class="meta"></div></div><div id="id71" class="comment"><div class="title"><strong>W</strong>&nbsp;2786 days ago</div><div class="body"><p>This makes me want to explode!?!</p></div><div id="id72" class="meta"></div></div><div id="id73" class="comment"><div class="title"><strong>W</strong>&nbsp;2786 days ago</div><div class="body"><p>Wait... wait...</p></div><div id="id74" class="meta"></div></div><div id="id75" class="comment"><div class="title"><strong>W</strong>&nbsp;2786 days ago</div><div class="body"><p>I have exploded!</p></div><div id="id76" class="meta"></div></div><div id="id77" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>Rusty, if this were a blog on the English language you might have a point, but it's not, it's about programming.  Yes, I make the occasional mistake with apostrophe, who doesn't, get over it.</p><p>There, it's correct, you feel better now?</p></div><div id="id78" class="meta"></div></div><div id="id79" class="comment"><div class="title"><a target="_new" href="http://www.slyturtle.com">Andre Behrens</a>&nbsp;2786 days ago</div><div class="body"><p>I find length of methods can have a lot to do with platform. When I write java code, length can often be par for the course. 7-10 lines is what I need just to get the variables set up. In ruby, however, I find it takes effort to write a method longer than 15 lines. Sometimes, but usually, this is because there's a better technique of which I was not aware. Or I was lazy.</p><p>I don't think it's correct to critique the many small methods argument, though. If your objects are properly scoped and structured, you won't have endless thickets of methods. Most very small methods' contents can safely be ignored, unless you designed them poorly, or named them poorly.</p><p>Naming is the lost art of programming.</p></div><div id="id80" class="meta"></div></div><div id="id81" class="comment"><div class="title"><a target="_new" href="http://www.chokeytown.com">Lance Hupper</a>&nbsp;2786 days ago</div><div class="body"><p>"Like exceptions, error codes can be ignored by the part of the code that doesn't care."</p><p>The problem lies in the fact that error codes can change from programmer to programmer whereas exceptions, in the languages that use them, are a part of the framework and part of the programmer language set. By you defining your own error codes you try to reinvent the wheel or the language. If programmers coded with a parallel standards, such as an exception framework, there would be less time spent on trying to understand what the previous programmer was thinking.</p><p>It's true that exceptions used to be expensive, but that's hardly the case anymore.</p></div><div id="id82" class="meta"></div></div><div id="id83" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>Exceptions can't be ignored without explicitly coding around them, totally unlike error codes.</p></div><div id="id84" class="meta"></div></div><div id="id85" class="comment"><div class="title"><strong>Egg Shen</strong>&nbsp;2786 days ago</div><div class="body"><p>"A good one to start with is Eats Leaves &amp; Shoots."</p><p>Next time you try to correct someone and recommend a book, you might come off as slightly more clever if you get the title and punctuation of the title correct--Eats, Shoots &amp; Leaves.</p><p>Also, arguing about punctuation?  Is that all you got?</p></div><div id="id86" class="meta"></div></div><div id="id87" class="comment"><div class="title"><a target="_new" href="http://deepthoughts.orsomethinglikethat.com">Luke</a>&nbsp;2786 days ago</div><div class="body"><p>It is so good to hear the views of another former Smalltalker.  It is obvious from the comments here who has a clue about OO and who does not.  </p><p>A coworker of mine just wrote an article about the declination of OO... http://allenriddle.com/articles/ooInTheEnterprise</p></div><div id="id88" class="meta"></div></div><div id="id89" class="comment"><div class="title"><strong>Adam</strong>&nbsp;2786 days ago</div><div class="body"><p>The idea behind most of my programming style is to increase readability.  I will read the code I wrote many more times than I write it.  With that in mind, I always use braces for the bodies of ifs, even if they are one-liners, and always have an == in the condition of all ifs and whiles, etc.</p><p>I agree with you on multiple return statements.  The function should have a single purpose, and if that purpose can be fulfilled immediately at any point, the function should stop.  The only reason to have a single return point is to avoid problems with required side-effects or to allow a function to accomplish mulitple things, which you shouldn't be doing anyway.</p><p>Hungarian notation, used as you mention, is also garbage.  Putting an "i" at the start of a varialble because it's an integer is nearly 100% useless and distracting, and just one more thing to screw up maintenance wise down the line.  Instead, the reason for the variable being an int in the first place should be in the name, such as a "Count" or "Index" suffix.</p><p>As for error codes versus exceptions, correctly written code needs to prepare for and deal with the possibility that every statement or function call performed will fail.  Exceptions don't make properly handling the errors any easier or more elegant or prettier, they just make code that doesn't do correct error handling look better.  A construct such as:</p><p>if (DoSomething() == false){    //it failed.}</p><p>Is preferable in every way from coding time to runtime over</p><p>try{    DoSomething();}catch (DoSomethingsException e){    //it failed.}</p><p>Furthermore, not coding in the try/catch blocks around everything that might throw exceptions leads to some really horrendous problems.  The worst such problem is probably the exposing of the implementation details of one sub-system to systems which use it only indirectly.  For example module A calls module B, which calls module C.  A has no idea about the existence of module C, but all of a sudden if module B doesn't handle its calls to module C correctly, module A is exposed to exceptions generated by module C that it had no way of predicting at coding time would occur and will therefore not handle properly.</p></div><div id="id90" class="meta"></div></div><div id="id91" class="comment"><div class="title"><strong></strong>&nbsp;2786 days ago</div><div class="body"><p>I can agree with some of your sentiments, however many of your claims are a tad short sighted. Plus you deserved to be shot for your comments are garbage collection-- it is not a heaven sent-- more often than not, it introduces more issues than it aims to resolve.</p></div><div id="id92" class="meta"></div></div><div id="id93" class="comment"><div class="title"><strong>BG</strong>&nbsp;2786 days ago</div><div class="body"><p>Maybe the whole code-size thing can be summarized by saying whatever method forces the reader the least amount of "scroll around effort", is the right way to code it.</p></div><div id="id94" class="meta"></div></div><div id="id95" class="comment"><div class="title"><a target="_new" href="http://www.sportsclubstats.com">Ken Roberts</a>&nbsp;2786 days ago</div><div class="body"><p>Thank you, this was great.  I whole heartedly agree, except:</p><p>I tend to put code into a separate function only when more than 1 place needs to use the code, although I admit my code would naturally refactor itself if I followed your advice.</p><p>I love switch statements.  Many times when I go down the polymorphic path I end up with harder to understand code.  Sometimes its good to see all the logic in front of you in a switch statement instead of spread across derived classes.</p><p>Thanks again for the fun read.</p></div><div id="id96" class="meta"></div></div><div id="id97" class="comment"><div class="title"><a target="_new" href="http://www.uberconcept.com">David Cameron</a>&nbsp;2786 days ago</div><div class="body"><p>I agree with most of your comments but two in particular stand out as rather strange.</p><p>Refactoring all your code into 7-10 line methods does not make it more readable, it means your are constantly switching around looking at each of the different methods to work out what is actually going on. My rule of thumb is that when a function hits 70 lines you should break it up.</p><p>Equally your point that effectively code should not be commented is crazy. This is like the argument that that code <em>without comments</em> is the documentation. At the very least comments should be there to document <em>what</em> is happening. For example some highly optimised code may be incomprehensible without comments. Anyway, you will tend to end up with very long method names.</p><p>I'd go 50-50 on your argument against switch. This basically assumes you have objects in the first place. Suppose you are parsing a file and grabbing elements that are parsed into objects. Sure you can create polymorphic objects that represent the different lines parsed from the file, but you will need a switch statement or a series of if else to work out which object to create in your class factory.</p></div><div id="id98" class="meta"></div></div><div id="id99" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>You don't need to switch around to look at different methods to see what's going one, the method name should tell you that.  That's the whole point, you shouldn't need to see the implementation 95% of the time, just the name.  </p><p>Good naming is what programming is all about.  There's a reason the Smalltalk browser dedicates half the window space to category, class, method category, and method names, and only a small window to code.</p><p>Methods should do one thing, that's what determines when you break up code, not length.  However, a nice side effect of this practice, ends up being lots of short easily understood methods.</p><p>Comments should "NOT" document what is happening, code does that perfectly well.  Comments should only explain why certain choices were made, they should never duplicate what the code says.</p><p>As for switch statements, parsing is one of those exceptions, switch statements are useful here.  I said there was hardly any case where they were appropriate, I didn't say they were never appropriate.</p></div><div id="id100" class="meta"></div></div><div id="id101" class="comment"><div class="title"><strong>Jeff</strong>&nbsp;2786 days ago</div><div class="body"><p>"Intolerance is the hallmark of a small mind."  While I understand your point in all this, 'black and white' rules have no place in software.  For every rule, there is a damn fine reason for not following it.  The key to being really, really good in this field is to know that EVERYTHING has tradeoffs.  </p><p>Offer these as 'guidelines' not absolutes.  You will appear to be much smarter.</p></div><div id="id102" class="meta"></div></div><div id="id103" class="comment"><div class="title"><strong>Dan</strong>&nbsp;2786 days ago</div><div class="body"><p>"Constantly jumping through hoops and writing extra unnecessary code just to have a single return statement in a method"</p><pre><code>string result = "";if(someCondition)   result = "foo";</code></pre><p>else result = "bar";   return result;"</p><p>I'm still a pretty basic level programmer but the visual studio compiler throws a compile time error if you try to not do something like the above.  If you specify a return value in a method header and put all the returns in a conditional it throws an error saying "not all paths return a value".</p></div><div id="id104" class="meta"></div></div><div id="id105" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>Jeff, if you actually read the post, you'd see it was meant partially in jest, hence the overly strong language here and there, and on more than one occasion, I've said as with everything, there are always exceptions.  </p><p>The post is also titled "My Personal Pet Peeves", which obviously means these are opinions and not absolutes, so lets not preach too much about how to appear smarter.</p></div><div id="id106" class="meta"></div></div><div id="id107" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>Dan, don't use the else, it will compile just fine.</p><pre>if(someCondition)    return "foo";return "bar";</pre></div><div id="id108" class="meta"></div></div><div id="id109" class="comment"><div class="title"><a target="_new" href="http://no">Peter</a>&nbsp;2786 days ago</div><div class="body"><p>Yes you make some valid points, but you also try to pass off your preference as best practice and give no support for it other than an insult for using said technique.  You're an asshole.</p></div><div id="id110" class="meta"></div></div><div id="id111" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>And you have no sense of humor. Seriously, it's a rant, get over it, you don't know me, and we're all entitled to the occasional rant.</p></div><div id="id112" class="meta"></div></div><div id="id113" class="comment"><div class="title"><a target="_new" href="http://breetai.freeshell.org">ERB</a>&nbsp;2786 days ago</div><div class="body"><p>The only thing I disagree with you about is commenting ending braces. If you're forced to use a language that has them, i.e. not Python, Haskell, etc. , they can clarify the usual braceTrainWreck at the end of some methods, particularly if you're using anonymous inner classes. Your IDE will highlight the matching brace or the entire block, but what about the blocks within the highlighted block? </p><pre>                     }                   }                 }               );}             }    } </pre><p>etc.</p><p>clicking/cursoring up to the block you're interested is an interruption to your thinking, well, mine, anywayAt least LISP/Schemers know enough to put all the closing )'s on one line.</p></div><div id="id114" class="meta"></div></div><div id="id115" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2786 days ago</div><div class="body"><p>As I said earlier, your method shouldn't be so long that a brace is opened and not closed without scrolling.  Lisp and Scheme certainly do it better, but it looks better in them on one line due to their awesome syntax.</p></div><div id="id116" class="meta"></div></div><div id="id117" class="comment"><div class="title"><strong>Lindley</strong>&nbsp;2786 days ago</div><div class="body"><p>LOL!  I really enjoyed this blog entry.  I feel the same on most accounts.  I'm definately with you in regards to breaking up long methods.  So, I heard you were doing a sequel...</p></div><div id="id118" class="meta"></div></div><div id="id119" class="comment"><div class="title"><a target="_new" href="http://hao2lian.f2o.org/ploidy/">shadytrees</a>&nbsp;2786 days ago</div><div class="body"><p>Regarding switch: Polymorphism is an excellent idea when the difference between each case is a different class, and representing it as such is beneficial. But, say, you're switching on a letter (keycode of a keyboard event under WinAPI). Or a string (command line arguments). And so forth. Because these are the cases I see programmers using switch statements most often simply because the alternative--if and else ifs--is infeasible (so this is me refuting the "hardly any" qualifier). Polymorphism doesn't work there.</p></div><div id="id120" class="meta"></div></div><div id="id121" class="comment"><div class="title"><strong>NullPointerException</strong>&nbsp;2786 days ago</div><div class="body"><p>Nice rant.  Nothing gets me hotter than a pissed off software developer.  If I worked with you, I would swing by your cube everyday so you could stomp all over my ego and I could stare you in the eyes and quietly tell you how much smarter you are than the other guys in the office.  Then you would look at me in disgust, momentarily confused and frightened.  Your lips would begin to spread and your bottom would feel slightly warm and moist.  The adrenaline would consume you, and you would lurch forward and tell me to fuck off in a seething, quivering voice and I would back away cautiously, then turn and run back to my cube, where I would email my therapist and post on reddit for the rest of the day.</p><p>By the way, the 'Name' field on your comment form was populated with the previous poster's input.  What's up with that?</p></div><div id="id122" class="meta"></div></div><div id="id123" class="comment"><div class="title"><strong>OldTimer</strong>&nbsp;2786 days ago</div><div class="body"><p>Re: exceptions vs. error codes</p><p>Ramon, good effort, but Grandpa is unconvinced.  There is no advantage here for exceptions: programmers must come up with their own exception class heirarchies just as they would error token conventions; it's a wash on that point.  Exceptions certainly are more expensive, they look ugly in the code (at least in Java and C++), and they deny intermediate code that doesn't care the opportunity of continuing gracefully (the catch/throw antipattern is required).</p><p>Good night.</p></div><div id="id124" class="meta"></div></div><div id="id125" class="comment"><div class="title"><strong>yes</strong>&nbsp;2786 days ago</div><div class="body"><p>I don't agree with all your points, especially this single exit.  As for the rest of it, your arrogant and abusive attitude doesn't score highly with me.</p><p>F - needs work</p></div><div id="id126" class="meta"></div></div><div id="id127" class="comment"><div class="title"><strong>Are you kidding?</strong>&nbsp;2786 days ago</div><div class="body"><p>Wow.  Aside from some good ideas (exceptions, &amp; xml hell), I sure as hope to hell I am never on a project team with you.  7-10 line methods?  Are you kidding?  Have you ever worked on an enterprise class system?  No curly braces = hard to read.  Declaring variables right where you need em?  That's just stupid and makes it harder to comprehend.  i.e. where'd THAT variable come from???  Multiple return statements within a procedure?  Thats just dangerous and easy to miss.  Did you seriously JUST graduate college...  err...  high school?  How did this make it to reddit - is this what people think makes good code?</p></div><div id="id128" class="meta"></div></div><div id="id129" class="comment"><div class="title"><a target="_new" href="http://ummyeah.com/">fez</a>&nbsp;2786 days ago</div><div class="body"><p>Ramon, some great points.  I agree with almost all of them.</p><p>I just hope you don't rant like this at developer's you work with =)</p><p>Getting along w/ coders on your team is like 20% coding style, 80% personality traits.</p><p>I'd <em>MUCH</em> rather work with a developer who occassionally (probably just b/c he's tired, or forgets) and pulls a:</p><p>if(someCondition)    return true;else return false;</p><p>... than some douche who thinks he's high and mighty and the all-knowing keeper of the One True Way to Do Programming.</p><p>ps. what kind of pretentious blowhards read this blog of yours?"A coworker of mine just wrote an article about the declination of OO..."</p><p>Does he mean "decline", perhaps?  =)</p></div><div id="id130" class="meta"></div></div><div id="id131" class="comment"><div class="title"><strong>Really?</strong>&nbsp;2786 days ago</div><div class="body"><p>I may not be a developer anymore, but as a development manager for a fairly large company, I'd have to say:</p><p>Shut up. Different people have different coding styles. What works for you doesn't work for others. Your code pisses people off too. Speaking of that, how'd your last code review go, oh, and why are you writing this blog post in the middle of the day, is that why your project is 2 weeks late?</p></div><div id="id132" class="meta"></div></div><div id="id133" class="comment"><div class="title"><strong>Justin</strong>&nbsp;2786 days ago</div><div class="body"><p>I've always hated when I see pointless nesting...</p><p>void foo(file){   if(file<em>exists(file)){       do</em>something(file);       //10 more lines   } else {       //handle simple case with one line   }}</p><p>instead of the simplervoid foo(file){   if(!file<em>exists(file)){       //handle simple case with one line       return;    }     do</em>something(file);    //10 more lines}</p><p>especially when there is nothing in the simple case, and the entire function ends up being indented for no reason.</p></div><div id="id134" class="meta"></div></div><div id="id135" class="comment"><div class="title"><strong>vlad</strong>&nbsp;2786 days ago</div><div class="body"><p>some good pointers, but also reminds me of an english pet peeve i have-- using ignorant instead of stupid. the two aren't interchangeable.</p></div><div id="id136" class="meta"></div></div><div id="id137" class="comment"><div class="title"><strong>BigZaphod</strong>&nbsp;2786 days ago</div><div class="body"><p>[@Really?]  I agree in the sense that, yes, people have different styles and others need to just get over themselves in order to work together - but based entirely on this blog posting alone, it's not even remotely clear that the author works in the kind of place you seem to manage.  (Or, indeed, would even <em>want</em> to!)  He may very well be an independent contractor working from home and this code was just passed his way to "fix" by some client.  Also keep in mind that "middle of the day" is someone else's "middle of the night."</p><p>In any case, I think a lot of the over-the-top language was in jest, anyway.</p></div><div id="id138" class="meta"></div></div><div id="id139" class="comment"><div class="title"><strong>Eh.</strong>&nbsp;2786 days ago</div><div class="body"><p>Depends on the code.  I've worked on and written mathematical code where it makes more sense in one routine even though it spans pages.  And where one line of code may have half a page of comments to explain it to future, non-domain-expert maintainers.</p><p>Similarly, if there's an "error code" that can fall through the rest of the code cleanly, then use it.  Exceptions do not play well in parallel or distributed systems.  See some of the recent-ish work on Haskell exceptions for elegant ways to bridge the gap.</p><p>Some problems are hard.  Coding styles don't magically make them easier.  Many of your suggestions <em>do</em> make the majority of code more tractable.</p></div><div id="id140" class="meta"></div></div><div id="id141" class="comment"><div class="title"><a target="_new" href="http://www.redmountainsw.com/">Chui</a>&nbsp;2786 days ago</div><div class="body"><p>If you deal with databases, the condition could be True, False or Null. You should explicit test for == true.</p><p>If you deal with python, the condition could have been None, an empty string, an empty list. Each could have evaluated to a False. But it might be better that the function actually returns T or F.</p><p>If you are in VB6 land, condition could have been -1 (in which case it is True)</p><p>The o prefix can help identify the difference between instances and Static method calls. Especially when you are reading someone else's code.</p></div><div id="id142" class="meta"></div></div><div id="id143" class="comment"><div class="title"><strong>Tom Future</strong>&nbsp;2786 days ago</div><div class="body"><p>Somebody said...</p><p>"Hungarian notation, used as you mention, is also garbage. Putting an "i" at the start of a variable because it's an integer is nearly 100% useless and distracting, and just one more thing to screw up maintenance wise down the line. Instead, the reason for the variable being an int in the first place should be in the name, such as a "Count" or "Index" suffix."</p><p>I admit that their are a few idiots who prefix every integer with "i" and call it Hungarian notation, but please judge the practice by people who know what they're doing.  What those people use for prefixes are things like "cb" for count of bytes, "ix" for index, and "se" for escaped string, which seems to me to be pretty similar to your suffixes, only shorter and with more information.</p></div><div id="id144" class="meta"></div></div><div id="id145" class="comment"><div class="title"><a target="_new" href="http://sunfrog-tech.com">thisisper</a>&nbsp;2785 days ago</div><div class="body"><p>Most of the article is great, except for: "To put it simply, use the Samurai Principle, a method either succeeds, or blows up with a suitable exception. Error codes are not acceptable in a modern language, it's a dead technique."</p><p>Creating exception objects can be a serious performance penalty. If you want fast code return NULL when your method fails, have all the methods check for NULL in the return value of a called method, and check all params for NULL at the top of each method. Checking for null is, at the assembly level, one CMP for the check and one JMP for the branch and return. Generating an exception is.. ridiculous by comparison.</p><p>Some devs like to write code that rely on exceptions to handle bad user input or other errors, but I don't agree with that practice, because you have less control over the control flow of the program. It's worse than unrestrained use of GOTO. Also, in some languages you have to check for specific kinds of exceptions and possibly miss other kinds of exceptions.. bleah.</p></div><div id="id146" class="meta"></div></div><div id="id147" class="comment"><div class="title"><strong>Tom Future</strong>&nbsp;2785 days ago</div><div class="body"><p>&gt;one of the things I can't stand is when students:&gt;&gt;result = someOperation();&gt;return result;&gt;&gt;instead of just&gt;return someOperation();</p><p>what if one needed to change the return type of someOperation (or it changed in an upgrade)? then i need to change the return type of this method, etc. this way the method is insulated from changes in the other methods that it may call.</p></div><div id="id148" class="meta"></div></div><div id="id149" class="comment"><div class="title"><strong>Taylor Carpenter</strong>&nbsp;2785 days ago</div><div class="body"><p>A fun read... the article and comments.  I found them both quite informative.  I see much of this being easier to apply to Python and Ruby (Smalltalk as well of course) than Java.  It seems many people apply C++ (and C) thought patterns to their Java programming.</p><p>BTW, its always good to blow off some steam sometimes.  I got that right away from your tone (and your comments just clarified it).  On the other  hand I do sometimes enjoy the comments where people do not realize your going a bit over the top, etc.  They add a little spice... but don't let them bother you.</p></div><div id="id150" class="meta"></div></div><div id="id151" class="comment"><div class="title"><a target="_new" href="http://l0b0.net/">l0b0</a>&nbsp;2785 days ago</div><div class="body"><p>Splitting up functions can IMO be done for three reasons: It needs to be used by something else, it has more than one purpose, or it's too long. The last one is the least important - If a long function is used by one object to do one thing, it's not getting split up unless it spans several pages (by which time it's highly unlikely to fulfill the other criteria anyway).</p></div><div id="id152" class="meta"></div></div><div id="id153" class="comment"><div class="title"><strong>Bobo the Sperm Whale</strong>&nbsp;2785 days ago</div><div class="body"><p>Actually switch-case statements are &gt;= the State design pattern for small state machines.  The reason being that if you're language doesn't support GC, then you have to go instantiate a bunch of state classes and fret about fragmenting memory, not to mention the cache coherency that goes out of the window due to virtual functions.  Actually most of these pet peeves can be really good examples of code in certain circumstances.And I hate exceptions!  Try-catch blocks cluttering up the code, weirdly unwinding the stack on error and extra verbiage cluttering up the language that ultimately end up confusing you.  Error codes are the way forward. :)</p></div><div id="id154" class="meta"></div></div><div id="id155" class="comment"><div class="title"><a target="_new" href="http://www.notarianni.org">Bernard Notarianni</a>&nbsp;2785 days ago</div><div class="body"><p>Very nice post Ramon, again! I fully agree with all you say: single exit point, long methods, simple native types, comments, XML hell, everything is right on the point of most of java/c++/c# applications I can see.</p><p>Your blog is my top favorite those days. Keep on going! :-)</p></div><div id="id156" class="meta"></div></div><div id="id157" class="comment"><div class="title"><a target="_new" href="http://www.joelonsoftware.com">Joel</a>&nbsp;2785 days ago</div><div class="body"><p>You writing style is rude and obnoxious.  Some of your arguments are weak, or about trivial points.  I get the impression that you do not work well with others.</p><p>I'm sorry that I wasted my time reading your post.</p></div><div id="id158" class="meta"></div></div><div id="id159" class="comment"><div class="title"><a target="_new" href="http://dsingleton.co.uk">David</a>&nbsp;2785 days ago</div><div class="body"><p>Ignoring the very silly (and typical) arguments in the comments (and taking on board this is 'personal pet peeves'), I thought this was an nice post, can't help but agree with you on most of the points.</p><p>People not understanding the nature of booleans (and assignment) is probably my biggest pet peeve as I have to deal with people doing it on a daily basis.</p><p>I'll be keeping an eye out for some interesting smalltalk posts in the future.</p></div><div id="id160" class="meta"></div></div><div id="id161" class="comment"><div class="title"><strong>James</strong>&nbsp;2785 days ago</div><div class="body"><p>You must work as a sole developer reading over amateur code for those to be your pet peeves.  I work as a senior member on a team with over 50 very smart programmers and I can tell you don't know anything about writing solid code just from this post.  You might be smarter than the average php or visual basic web developer but you think you can speak with any authority about real world development practices.  I'd love to see you revisit your opinion in a few years.</p></div><div id="id162" class="meta"></div></div><div id="id163" class="comment"><div class="title"><strong>Josh</strong>&nbsp;2785 days ago</div><div class="body"><p>I disagree on the point about error codes, but only because Exceptions still do not have first class status in most languages today.</p><p>&gt; try-catch blocks cannot be inserted into expressions&gt; catching can only be done on types known at compile time&gt; exceptions can only be grouped via the object hierarchy</p><p>On the other hand:&gt; well chosen sentinel values can be quietly passed around by functions that ought to ignore them, preventing premature leaps up the stack in non-critical situations&gt; a caller doesn't need to contain within itself the error codes it is responsible for handling - it can read them from elsewhere&gt; By "||"ing or "&amp;&amp;"ing or otherwise aggregating error codes, a caller can have the same code be run for different error responses, even if those responses are not necessarily related in the hierarchy</p><p>Of course, error codes still have their own problems - namely that there is no language wide consistency, and most languages don't provide contracts powerful enough for requiring callers to be aware of them. On the other hand, C# completely ignores exceptions as contracts.</p><p>While I think bringing error handling into the type system is a good idea (for correctness purposes) in principle, I think most languages have failed at this goal. Java made the mistake of making exception throwing explicit, and C# made the mistake of making exception handling optional. The correct solution would have been inferred throws and required handling. But even with that, there are still so many improvements to be made. (Compare to CLOS's exception handling, or even Haskell's.)</p></div><div id="id164" class="meta"></div></div><div id="id165" class="comment"><div class="title"><strong>Rocters</strong>&nbsp;2785 days ago</div><div class="body"><p>From the post, its pretty obvious that you have very little coding experience working with a huge team.</p></div><div id="id166" class="meta"></div></div><div id="id167" class="comment"><div class="title"><strong>Rocters</strong>&nbsp;2785 days ago</div><div class="body"><p>It's also pretty obvious you have very little coding experience in PIC or other HW chips.</p></div><div id="id168" class="meta"></div></div><div id="id169" class="comment"><div class="title"><strong>IncredibleH</strong>&nbsp;2785 days ago</div><div class="body"><p>This article was fantastic.  I am more than a bit disappointed by the comments posted.  I programmed in VA Smalltalk for over three years with a team of around 100 other good Smalltalk programmers.  </p><p>I believe that once you have experience in Smalltalk, avoiding the listed pet peeves comes naturally.  Being immersed in a completely OO world without primitives and non-object class definitions makes you think in terms of Objects.  The Smalltalk IDE's I have worked on which are method-at-a-time, promote small methods.  The simple syntax really allows a programmer to create fully descriptive method and variable names.</p><p>I am happy to see that Smalltalk experience has provided someone else with good programming practices.  Again, I am disappointed by the negative comments, but I can chalk that up to ignorant people without any relevant Smalltalk experience.</p></div><div id="id170" class="meta"></div></div><div id="id171" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>I'm disappointed by the amount of people that apparently have no sense of humor and can't tell I was blowing off a little steam and going over the top on purpose.  Seriously people, read the rest of the blog, this isn't my typical writing style at all, it was in jest.</p></div><div id="id172" class="meta"></div></div><div id="id173" class="comment"><div class="title"><strong>Chuck F</strong>&nbsp;2785 days ago</div><div class="body"><p>The number of commenters that took this post personally is amazing.  A couple of points are stylistic choices.  Most of the others show that people don't understand the language itself.</p></div><div id="id174" class="meta"></div></div><div id="id175" class="comment"><div class="title"><strong>Erik</strong>&nbsp;2785 days ago</div><div class="body"><p>try-catch exception handling is just another term for "goto." That it's in vogue currently doesn't change that it's an uncontrolled program logic jump.</p></div><div id="id176" class="meta"></div></div><div id="id177" class="comment"><div class="title"><strong>Stefan</strong>&nbsp;2785 days ago</div><div class="body"><p>Your comments apply primarily to heavily OO languages. They cannot be applied to all situations, especially if you're dealing with anything low-level.</p><p>Stop thinking like a software engineer and think like an actual engineer. Use the right tool for a given job.</p><p>Illustration: http://philip.greenspun.com/humor/eecs-difference-explained</p></div><div id="id178" class="meta"></div></div><div id="id179" class="comment"><div class="title"><strong>Mike</strong>&nbsp;2785 days ago</div><div class="body"><p>You make a couple of good points, but there is no need to be so damn caustic about it</p></div><div id="id180" class="meta"></div></div><div id="id181" class="comment"><div class="title"><strong>Some Random Dude</strong>&nbsp;2785 days ago</div><div class="body"><p>Ramon,</p><p>You're having a lot of difficulty with this post on the basis of your tone. You refer to everyone as "people" -- as in "seriously people" and "get with the decade people" -- and its off-putting. People don't read your blog to be lectured like children or to come to the altar of your great wisdom so they can prostrate themselves before your superior intellect.</p><p>You ask for tolerance in reading the post, but your post is about a lack of tolerance in reading other people's code. Yes, I realize it can be frustrating to see things that annoy you over and again. But you should take the opportunity to share insights with people who come to your blog with a collaborative frame of mind, rather than bonk people over the head because there are too many "else" statements.</p><p>Let's face it -- this stuff is comparatively minor. Last week I had to completely rewrite an ecommerce app because some guy had created two tables for purchase information, both of which stored the exact same data but weren't linked in any way whatsoever and -- oh, the list goes on. Believe me -- BELIEVE ME -- I WISH that the biggest problem had been a profusion of comments.</p><p>Yeah, yeah -- you were blowing off steam. Fair enough, except no one here had done anything to make you boil. Relax. Enjoy life.</p></div><div id="id182" class="meta"></div></div><div id="id183" class="comment"><div class="title"><a target="_new" href="http://www.sportsclubstats.com">Ken Roberts</a>&nbsp;2785 days ago</div><div class="body"><p>Ramon,When reading these comments please don't forget that the tiny antisocial minority is much more likely to post than the appreciative masses.  </p><p>Anyone: Does this phenomenon have a name?Thanks.</p></div><div id="id184" class="meta"></div></div><div id="id185" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>Believe me, I could care less about the comments, and I'm one of the most relaxed easy to work with guys most people would ever meet.  </p><p>Anyone who thinks otherwise, go read the rest of the blog, this is one silly little post where I blew off a little steam after digging through some crappy code for 3 hours, it's not big deal.  I can't help it some people don't share my sense of humor, oh well, that's life, but it's no skin off my back.</p></div><div id="id186" class="meta"></div></div><div id="id187" class="comment"><div class="title"><strong>Bill</strong>&nbsp;2785 days ago</div><div class="body"><p>Very much like the suggestions out of "Writing Solid Code".</p></div><div id="id188" class="meta"></div></div><div id="id189" class="comment"><div class="title"><a target="_new" href="http://www.clown.com">Clown</a>&nbsp;2785 days ago</div><div class="body"><p>Other people use silly standards when compared to my world beating personal standards that only I use. I am the King of code. I am the yardstick by which I am measured. I spend days writing articles showing people their wrongs in an effort to put things right for a brighter day for you and me. I spell like a child because I spend all my time noting peoples coding errors. You may think this blog is offensive but I dont care. I have the demeanor or a Saint and the humour of Bill Hicks. Thats doesnt make me a bad person but rather a genious. This paragraph is nearly over my self imposed limit.I therefore will start a new one. </p><p>I am the coding king. You are not. Adieu</p></div><div id="id190" class="meta"></div></div><div id="id191" class="comment"><div class="title"><strong>Jerk</strong>&nbsp;2785 days ago</div><div class="body"><p>Ramon,You are an idiot and here is why.</p><p>Your example about "Single exit points". You say this is bad:</p><pre><code>string result = "";if(someCondition)   result = "foo";else result = "bar";return result;</code></pre><p>You suggest this instead:</p><pre><code>if(someCondition)    return "foo";return "bar";</code></pre><p>FYI - code should be self documenting, having an else is good practice - go read a javadoc you idiot! - this is very common knowlege so you are an idiot.</p><p>ALSO!</p><p>You say, "Stop prefixing your damn code with type declarations. " You know what, I like knowing it's my variable is string or a double. So STFU! </p><p>Poor, hourly paid employees like you always bytch!</p><p>Stop bytching and blaming - loosers like you do that a lot - so cut it out or I'll outsource your job to Russia!</p></div><div id="id192" class="meta"></div></div><div id="id193" class="comment"><div class="title"><strong>Dieter</strong>&nbsp;2785 days ago</div><div class="body"><p>Go read "Code complete 2nd ed." by Steve McConnell (http://www.cc2e.com/) where the above points are mentioned but in a more detailed and less 'rude' way ;)</p></div><div id="id194" class="meta"></div></div><div id="id195" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2785 days ago</div><div class="body"><p>Dan: Just tried this in VS.Net and it works -if(someCondition())   return "foo";else return "bar";</p></div><div id="id196" class="meta"></div></div><div id="id197" class="comment"><div class="title"><strong>Paul</strong>&nbsp;2785 days ago</div><div class="body"><p>I agree with many of the points you list, but I personally hate the "modularize EVERYTHING" method of coding.  Reminds me of one time where myself  and another developer had to debug a minor error in a project the day before a demo.  I had inherited this project, and at that point it was pretty much full-on spaghetti.  The error ended up being found in a function about 10 levels down from where you'd expect it.  It was on the order of "A() calls B() calls C() calls D() calls E() ... called Z()" which is where the problem was.  Most of the functions had a very specific use, were only called by the function above it (and often private), and were pretty much had no point other than to keep methods short.  I had to start taking notes on what called what because I was flipping around the code so much.  It was a real bitch to debug for such a simple error.  But hey, at least the functions weren't too long.</p><p>I realize you admit there are exceptions to rules, but I think methods should be split up only when there is a good reason, and I don't think "longer than 10 lines" is such a reason (longer than 50 might be, though).  That is one of MY pet peeves. :)</p></div><div id="id198" class="meta"></div></div><div id="id199" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2785 days ago</div><div class="body"><p>As for most of those commenting here:  I do have experience in multiple languages on multiple platforms in teams both large and small at multiple sites and have had to maintain/maintain the code of others.  What Ramon is saying rings true and not following it has caused me grief countless times.  Of course this applies to coding "business applications" with modern OO languages, not embedded systems with things like C.   </p><p>I do however like the extra braces even though they are not needed.</p></div><div id="id200" class="meta"></div></div><div id="id201" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2785 days ago</div><div class="body"><p>In my previous comment I meant maintained/enhanced</p></div><div id="id202" class="meta"></div></div><div id="id203" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2785 days ago</div><div class="body"><p>Paul, Using a good IDE helps mitigate this issue.  Also, it seems developers only follow part of the rules or they don't follow them correctly which probably what is causing your problems.  Bet there are little or no unit tests either.</p></div><div id="id204" class="meta"></div></div><div id="id205" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>Seems people misinterpret writing small functions as nothing more than breaking up larger ones.  This however, leads to long chains of dependent calls as Paul said, A calls B calls C.  </p><p>You don't break up large functions into small ones, you simply never write large ones.  The code patterns are much different, you don't end up with long chains of dependent calls.</p><p>If you write a function with only one purpose in mind, from the bottom up, not from the top down, you simply end up with small reusable functions.  </p><p>Those who are complaining about breaking out chunks into separate functions are writing top down, not bottom up, which explains why they can't see the value in doing this.</p></div><div id="id206" class="meta"></div></div><div id="id207" class="comment"><div class="title"><strong>Mark1</strong>&nbsp;2785 days ago</div><div class="body"><p>Use a class for each case??? You, sir, are a moron.</p></div><div id="id208" class="meta"></div></div><div id="id209" class="comment"><div class="title"><strong>David Mitchell</strong>&nbsp;2785 days ago</div><div class="body"><p>Great post Ramon! A rant is a great way to get lots of feedback (even if a lot of it is angry). Oh well, brought me a smile.</p></div><div id="id210" class="meta"></div></div><div id="id211" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2785 days ago</div><div class="body"><p>Hmm. That wasn't from me.  Another Mark perhaps?</p></div><div id="id212" class="meta"></div></div><div id="id213" class="comment"><div class="title"><strong>radman</strong>&nbsp;2785 days ago</div><div class="body"><p>i think i may still be quite inexperienced.. i do, at times, refactor code.. but why waste time refactoring IF it is of absolutely no benefit to me?</p></div><div id="id214" class="meta"></div></div><div id="id215" class="comment"><div class="title"><strong>Andreas Fuchs</strong>&nbsp;2785 days ago</div><div class="body"><p>Hungarian Notation is the worst of all. My (no longer) boss once wanted us to prefix all PHP arrays with "arr". I considered naming variables $arrMatey.</p></div><div id="id216" class="meta"></div></div><div id="id217" class="comment"><div class="title"><a target="_new" href="http://www.xml-blog.com">Christian Romney</a>&nbsp;2785 days ago</div><div class="body"><p>Jerk is funny...mostly because his example shows how poor a coder he is. For example, I just <em>love</em> this: string result = ""; </p><p>Apparently he never heard of null. Also, the entire method, as someone else already pointed out, could just be:</p><p>return someCondition ? "foo" : "bar";</p><p>Javadoc? Oh that explains it. </p><p>Great post. Too bad a lot of the commenters are so touchy about your tone. Having recently cleaned up some garbage code myself, I was right there with you. It's not so much about agreeing with every little detail, there's always room for some differences among coding styles but it's about clarity, conciseness, and consistency. No need to make a simple conditional return take up five lines when a one-liner will do - especially if clarity is improved. Consistency is the one that really gets on my nerves. I saw some code recently where the author couldn't decide if he liked method names likeThis() or like_this(). The truth is you can often gauge experience by aesthetics.</p></div><div id="id218" class="meta"></div></div><div id="id219" class="comment"><div class="title"><a target="_new" href="http://www.xml-blog.com">Christian Romney</a>&nbsp;2785 days ago</div><div class="body"><p>By the way, before I get flamed, the Javadoc comment was a <em>joke</em> :)</p></div><div id="id220" class="meta"></div></div><div id="id221" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>Christian, you've got it exactly.  There's always room for different opinions, but clarity, conciseness, and consistency are huge and often ignored.  I would type </p><p>return someCondition ? "foo" : "bar";</p><p>myself, but I was referring to the patterns in larger pieces of code, not just a single simple condition, else I'd have done that too.</p></div><div id="id222" class="meta"></div></div><div id="id223" class="comment"><div class="title"><strong>radman</strong>&nbsp;2785 days ago</div><div class="body"><p>what should have (justifiably) motivated the old programmer to write more aesthetic code? this is what i don't get..</p></div><div id="id224" class="meta"></div></div><div id="id225" class="comment"><div class="title"><strong>microserf</strong>&nbsp;2785 days ago</div><div class="body"><p>Grokking booleans:</p><p>if(someCondition)    return true;else    return false;</p><p>Is often better than the suggested "return someConditon" on grounds of improved maintainability. OK, so someCondition is a boolean now; but in the future its type may change. So changing "if(comeCondition)" too "if(comeCondition == someTest)" is a simple change (one lines needs changing). But if you started with "return someCondition", and someConditon changed type later, then you'd have to write the four lines. In a dynamically-typed language, returning someConditon culd lead to a bug when it changes from being a boolean to something else and no compiler gets to do type checking for you.</p><p>The original code might be longer, but it clearly states the purpose of the function and defends against future changes.</p><p>Single exit points:</p><p>Single exit points are, in general, much better than multiple exit points! The reason I say this is that it is orders of magnitude easier to perform code coverage analysis on functions that have a single exit point. I once worked on a project that required something like 98% code coverage, and we quickly learned that single exit points make achieving this much easier (possible, even). They also make the code easier to read, because you know where execution starts, and where it ends.</p><p>The algorithmic complexity does not have to increase; many languages feature a "break" keyword to jump you out of the loop (and you can usually easily arrange this to get you to the exit point). Once a compiler has processed the code, in the worst case a break will add the equivalent of a jump instruction, and at best will be directly equivalent to your hand-coded immediate exit point.</p><p>Using single exit points is likely to make code shorter, easier to understand, improve algorithmic elegance and be easier to test with code coverage tools.</p><p>Too many comments:</p><p>This is a matter for coding conventions or personal taste. However, if comments describe what the code does (and aren't left to go stale), then they can significantly help a maintainer understand what the code does and how. In my opinion, we should be producing so called 'literate programs'; it may seem clever to you to write code that only you can understand to massage your ego, but given that code is written once and read many times, the more help you can give your audience, the better. I for one don't want to be made to feel stupid because I can't understand how a program works simply because the author didn't want me to. Especially ones with all those exit points :-)</p><p>Factoring code to reduce its complexity to a level where understanding it is trivial is, in general, sound advice. However this is often not possible in certain problem domains, due to performance requirements. In scientific numerical programming (and presumably also 3D graphics and the like), code really can't run fast enough. In these domains, the cost of many function calls can really hurt you. Functions can get too long for comfort in order to hit the performance targets. In this kind of code, lots of reassuring comments go a long way to helping maintainers understand what the code does and how.</p><p>Switch statements:</p><p>Not all programming problems are suited to object oriented programming. In these languages, switch statements are much better than a big if statement.</p></div><div id="id226" class="meta"></div></div><div id="id227" class="comment"><div class="title"><strong>Stephan</strong>&nbsp;2785 days ago</div><div class="body"><p>doing</p><p>if (someCondition == true)</p><p>can actually be detrimental to readability in a case like this:if (weFoundAnError() == true)</p><p>it makes your brain have to think about what is happening inside weFoundAnError() that would make it return true, and also the concepts of "error" and "true" fight each other, whereas you could have read it in plain english like this:</p><p>if (weFoundAnError())handleError()</p></div><div id="id228" class="meta"></div></div><div id="id229" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>Microserf, you're setting up straw man arguments and knocking them down.  The only valid response in your entire reply was...</p><p>"Not all programming problems are suited to object oriented programming. In these languages, switch statements are much better than a big if statement."</p><p>To which I agree, but again... This is a Smalltalk blog and a post about C#/Java/VB, so obviously I'm referring to object oriented languages.</p></div><div id="id230" class="meta"></div></div><div id="id231" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>OldTimer and radman, I'm not trying to convince anyone of anything, this isn't a post that argues for my style, it's simply a statement of my style. </p><p>If you want arguments for said style, go read some Martin Fowler, Kent Beck, Eric Evans, Rob Martin, Ralph Johnson, Paul Graham, or Rebecca Wirfs-Brock, all of whom are far better advocates and writers than I and have much more to say on the topic.  I'm just an ordinary programmer.</p></div><div id="id232" class="meta"></div></div><div id="id233" class="comment"><div class="title"><strong>radman</strong>&nbsp;2785 days ago</div><div class="body"><p>this is more curiosity than criticism.. i was just wondering what motivates some programmers here to write code that is aesthetic to others..</p><p>what is their return on that investment?</p></div><div id="id234" class="meta"></div></div><div id="id235" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>Not everyone's in it for the paycheck.  Some people, myself included, actually care what code looks like, beyond its intended function.  To me, it matters if I can delete half a function without actually changing what it does.  </p><p>It matters because IMHO, simpler code is easier to maintain, and over the years, I've been bitten far too often by code that was just hacked out quickly to get a job done.</p><p>I do my best to no long write code I'm not proud of, for any reason.  I'd rather do something right, once, than half ass it, and have to come back several times to fix bugs created by my rushing to meet some artificial deadline.  </p><p>I left the corporate world because of such deadlines, now I do things right, and it's done when it's done and no sooner.  It's a craft, and I won't rush it for any reason.</p></div><div id="id236" class="meta"></div></div><div id="id237" class="comment"><div class="title"><strong>radman</strong>&nbsp;2785 days ago</div><div class="body"><p>i agree with you.. it sounds like you have the ideal position.. my assumption is that you don't share your finished code with 3rd parties though.. or do you?</p><p>what position are u in btw? consultant? academic?</p></div><div id="id238" class="meta"></div></div><div id="id239" class="comment"><div class="title"><strong>Derek Perrault</strong>&nbsp;2785 days ago</div><div class="body"><p>I suggest including braces in if statements that only execute a single line of code.  You never know when you or someone else will need to extend that part of the code.  If the braces are there to begin with, nobody has to remember to add them.</p><p>That, and it just looks consistent.</p></div><div id="id240" class="meta"></div></div><div id="id241" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>Neither, I just moved to a small company that's decided doing things right works better than doing them fast.  The only code I can share, is what I share on this blog, as part of my hobby coding on the side.  Work code obviously doesn't belong to me and can't be shared.</p></div><div id="id242" class="meta"></div></div><div id="id243" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2785 days ago</div><div class="body"><p>I disagree on the braces, because I find I have more one liners than multi liners, and our IDEs auto format so you can't mistakenly forget them.  I tend to separate what happens from when it happens, so my "if"s tend to call methods, not so much contain a bunch of code.</p><p>I don't do this...</p><pre>if(someCondition){   //bunch of code   //bunch of code   //bunch of code   //bunch of code   //bunch of code   //bunch of code   //bunch of code   //bunch of code}</pre><p>I do this...</p><pre>void someMethod(){    if(!someCondition) return;    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code}</pre><p>or this...</p><pre>void someMainMethod(){    if(someCondition)        someMethod();    else someOtherMethod();}void someMethod(){    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code    //bunch of code}</pre><p>Preferring to keep methods short and readable like English, the method name serves as the comment for that chunk of code.</p></div><div id="id244" class="meta"></div></div><div id="id245" class="comment"><div class="title"><a target="_new" href="http://www.fromconcentratesoftware.com/2006/12/08/pet-peeves-and-me/">From Concentrate Software</a>&nbsp;2785 days ago</div><div class="body"><p>[...] I saw this article on coding pet peeves and generally agreed with most of it. I don&#8217;t get peeved if stuff happens but my style mostly matches the guy&#8217;s preferences. I depart in a few key places, though.  Problem: Single exit points - Sure, it&#8217;s easy to complain about single exit points but they&#8217;re a boon for a lot of programmers. The author says &#8220;we have garbage collection&#8221;, but, for many programmers, there is no garbage collection. Objective-C will eventually get GC but it doesn&#8217;t have it yet. Many times, having a single exit point allows me to make sure everything is cleaned up. [...] </p></div><div id="id246" class="meta"></div></div><div id="id247" class="comment"><div class="title"><strong>charles</strong>&nbsp;2785 days ago</div><div class="body"><p>you are so spot on.  i too am becoming disillusioned at the idea of ever surrounding myself with quality coders in a corporate environment.</p></div><div id="id248" class="meta"></div></div><div id="id249" class="comment"><div class="title"><strong>Jason</strong>&nbsp;2785 days ago</div><div class="body"><p>Good post.  And it was great bait to lure out the crappy programmers.  Do you log IP addresses so we can point out to their firms?</p><p>One guy goes into detail about how much computation the CPU must do to handle exceptions.  You realize we are talking about <em>exceptions</em> right?  Do you really care how efficient the code is as it's crashing?  Now people who use exceptions like goto's should be shot.</p><p>Another guy says all variables should be at the top of the function because otherwise they jump out from no where!  Some how it has escaped his notice that probably 90% of his variables at the top of the function don't get initialized for most of it.  Some may never get initialized at all.  The whole point of putting the variables in the scope they belong too (e.g. if you use a c++ for loop make the iterator right in the for loop like for(int i =..) so it doesn't leak all over) is so you don't have to remember all these variables that probably don't even get used.  If this is too hard for you then pick another profession.</p><p>As far as the switch statement bit: it is a question of where do you want to branch.  Let's take a regular expression for example.  You can do a quick parse over the regex and build a basic structure and then in your matching code you have a big nasty switch statement.  This is ok if you don't run the parsing code much.  But if you are going to parse a lot of strings many times, it is better to use objects to represent the expression so you do the branching at compile time (of the expression) instead of every single match attempt.</p></div><div id="id250" class="meta"></div></div><div id="id251" class="comment"><div class="title"><strong>Rebort</strong>&nbsp;2785 days ago</div><div class="body"><p>I enjoyed this a great deal. (And the comments are priceless. Apparently there's a mob out there who can't understand context -- or read preambles -- at all). </p><p>Good work. Here's another vote for a sequel.</p></div><div id="id252" class="meta"></div></div><div id="id253" class="comment"><div class="title"><strong>jim collins</strong>&nbsp;2785 days ago</div><div class="body"><p>"Switch StatementsStop using them, period. There's hardly any cases where polymorphism isn't more appropriate. ""Declaring variables at the top of a methodIn languages that allow it, you should always declare your variables and initialize them in the exact spot you want to use them. "What a bunch of crap. You are a sociopath that writes code in isolation and never is part of a team, esp a team that contains junior programmers and a team where readablity is a concern.</p></div><div id="id254" class="meta"></div></div><div id="id255" class="comment"><div class="title"><strong>PC</strong>&nbsp;2785 days ago</div><div class="body"><p>Good article.However I disagree partly on your idea on XML.  Some programs can be build around XML if they have few business rules. You don't have to always use the object paradigm if you don't need to.</p></div><div id="id256" class="meta"></div></div><div id="id257" class="comment"><div class="title"><a target="_new" href="http://www.xml-blog.com">Christian Romney</a>&nbsp;2785 days ago</div><div class="body"><p>microserf: The boolean argument is pure nonsense. If code needs to change, change it. The multiple return argument is difficult to defend too. Go skim Refactoring: Improving the design of existing code by Marting Fowler and look at guard clauses. Try it on real code you'll be surprised how much readability is improved. Also, all but the most naive tools can handle this pattern with ease in 2006. Any tool that can't is not worth running against my code.</p></div><div id="id258" class="meta"></div></div><div id="id259" class="comment"><div class="title"><strong>A. nonymous Cowherd</strong>&nbsp;2784 days ago</div><div class="body"><p>The problem with exceptions....</p><p>Is that they're just plain half-assed.  They do one-half to two-thirds of what they should do.  </p><p>I don't really know enough about Smalltalk to know if smalltalk's exceptions are better than the average, but:    One language gets exception-like functionality right, and that is Common Lisp with its Condition system (to be fair, many scheme implementations have conditions too, but they're not "standard").</p><p>Conditions are Exceptions done right.</p><p>http://www.gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html</p><p>Basically, while in most languages, you through exceptions and handle them, in lisp you signal conditions, offer restarts, and the handler can choose to change something and restart from where the condition was signalled.  This leads to a much more natural and expressive control flow.</p></div><div id="id260" class="meta"></div></div><div id="id261" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2784 days ago</div><div class="body"><p>Jim, Sorry, but Ramon IS concerned about readability.  Especially in a team of juniors.  I suggest that if his code is difficult for you (or juniors) to read:</p><p>Get a better programming language.Get a better IDE.Get a different job.</p></div><div id="id262" class="meta"></div></div><div id="id263" class="comment"><div class="title"><strong>Jason</strong>&nbsp;2784 days ago</div><div class="body"><p>A. nonymous gets it right.  The problem most of these people have with exceptions is that they have only seen the broken C++ version of them (for those who don't know: that's what Java uses as well).</p><p>In the Smalltalk and Lisp family exceptions are a whole other animal.  Although at this point I think Lisp has the best.  Lisp exceptions are based on the understanding that the lower level function knows what happens, and knows what different things <em>could</em> be done, it just doesn't have enough information to decide which strategy to use.  So the higher level code that does know can tell it. At compile time.</p></div><div id="id264" class="meta"></div></div><div id="id265" class="comment"><div class="title"><strong>Nick</strong>&nbsp;2784 days ago</div><div class="body"><p>It's interesting to note that Hungarian Notation, as originally devised, was not the perverse pit of despair it is today.  Once upon a time, those little prefixes provided <em>actually useful</em> information.  'xScreen' is an x-coordinate on the screen, 'ydWindow' is a difference of y-coordinates (more commonly known as the <em>height</em>) of a window, 'iPerson' is an index into the People collection,  'cThreads' is the total number (or <em>count</em>) of threads.</p><p>This is terrifically useful information, and a convention for adding such information in a concise manner is a very good thing.  Joel Spolsky talks about this: .  Interesting read.  </p><p>That said, I completely agree that the more widely known Systems Hungarian is an abomination unto God.  May it be purged from collective consciousness of the coding masses.  Amen.</p></div><div id="id266" class="meta"></div></div><div id="id267" class="comment"><div class="title"><strong>Nick</strong>&nbsp;2784 days ago</div><div class="body"><p>Er, Joel's article is here: http://www.joelonsoftware.com/articles/Wrong.html</p></div><div id="id268" class="meta"></div></div><div id="id269" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2784 days ago</div><div class="body"><p>I'm not a big fan of Mr Spolsky, IMHO, a much better business man than programmer.  His well known stances against exceptions and extreme programming mark him an old dog in my book.</p><p>As for Hungarian Notation, even done properly, I hate it, I'll take height, count, and index over ydWindow, cThreads, iPerson any day.  </p><p>Variable names shouldn't require me to have memorized a system of prefixes, ever.  They should simply state what they are, in plain English, with no abbreviations or weird codes.  There's not a shortage of words in the world, abbreviations are unnecessary.</p></div><div id="id270" class="meta"></div></div><div id="id271" class="comment"><div class="title"><a target="_new" href="http://jonathanaquino.com">Jonathan Aquino</a>&nbsp;2784 days ago</div><div class="body"><p>Ramon - Amen, brotha. Smalltalk With Style rocks.</p></div><div id="id272" class="meta"></div></div><div id="id273" class="comment"><div class="title"><a target="_new" href="http://beppu.lbox.org/">beppu</a>&nbsp;2784 days ago</div><div class="body"><p>After I read your post, I was mostly in agreement with you.  I was a little surprised when I got down to the comments, though.  There's no need to get your panties in a bunch over this.  ;-)</p></div><div id="id274" class="meta"></div></div><div id="id275" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2784 days ago</div><div class="body"><p>No idea what you're referring to.</p></div><div id="id276" class="meta"></div></div><div id="id277" class="comment"><div class="title"><a target="_new" href="http://tekkie.wordpress.com">Mark Miller</a>&nbsp;2784 days ago</div><div class="body"><p>In the past I've done some of the things you describe. Some of what you talk about sounds like people coming from VB, and just don't understand that you can say things more tersely. In other cases it sounds like people coming from a C/C++ background. Some of them sound like newbie mistakes.</p><p>As a C developer I used to do:</p><p>if(func1() &gt; 0 &amp;&amp; someVar1 != 0 &amp;&amp; func2() != 0 || someVar2 </p><p>just to make it clearer. For me it helped because of consistency. Every test was of the form: opand1 op opand2. I agree for the one term tests, testing for "true" or "false" was unnecessary.</p><p>I'm embarrased to say that when I was first learning C# I failed to grok assignments sometimes. I did just what you described. (blush) I think it has more to do with misunderstanding how the whole referencing system works. I came to it from C++. In that language it's possible to assign one object to another one, doing a shallow or deep copy. I probably figured I needed to "populate an object" (the ArrayList referenced by someItems) in some cases, rather than just receive an object from BuildSomeList().</p><p>As for your "single exit points" example, what irritates you has been promoted by "best practices" advocates. I think even "Code Complete" talks about doing this. Probably what this technique was meant to address was keeping track of state inside functions that are tens or a hundred lines long. In that case I can see value in having a single exit point, because otherwise it would be difficult to find all of them. In short functions, though, I agree it's more clumsy than necessary.</p><p>I don't comment closing tags anymore, but as a C/C++ developer I used to, just because some functions would get long, and it was maddening trying to figure out what closing brace went to which opening one.</p><p>In Smalltalk it makes sense to have short methods. There's no private or public distinction with them, so what's the point in making them long, right? In other languages breaking a large method up into a bunch of methods can make sense, but I don't see the point if the code, though it be large, is really intended for one specific task. If the code is logically tightly coupled anyway, what's the point in creating a bunch of private methods that only one main method will use?</p><p>I think what you're really getting at with some of your comments is more of a design issue. What I see you saying is "Use a DSL!" It makes more sense in that context. Unfortunately most programmers are not taught about domain specific languages. I wasn't when I was in college. When we learned OO it was more like "dog and wolf are a type of canine. Therefore 'canine' is the base class and 'dog' and 'wolf' are subclasses." Likewise, "Circle is a special case of an ellipse. Therefore ellipse should be the base class and circle should be the derived class." When I got into doing real projects these analogies were somewhat helpful but not great.</p><p>As for exceptions, I think what you're getting at is the classical exception principle: If you merely want to send a signal back to a caller then use a standard error/status code. If something happens that is unexpected, throw an exception. For example, if you have a class with a list, and you implement a method that finds something in it, it doesn't make sense to exception out if the function can't find a value, because that can happen with a list search function. Just return -1, null, or nil, depending on the language and the context. But if another object is using this class, and it has an algorithm that assumes that every value it searches for will be found, then if it can't find a value it needs, it should be the one to throw an exception.</p><p>There are other considerations as well. In .Net, for example, they discourage programmers from using exceptions that much, because they're expensive. They apparently slow down performance quite a bit if they're hit a lot.</p><p>Re. use a consistent style. Wholeheartedly agree there.</p><p>Re. XML, I agree with you. Use it strictly as a data transport medium. What makes me cringe is I've heard of people using XML files as databases. Yuck! IMO that's as bad as using an Excel spreadsheet as a database.</p></div><div id="id278" class="meta"></div></div><div id="id279" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2784 days ago</div><div class="body"><p>All good points and much of what I'm saying does come down to design issues.  For example, breaking up large methods into a bunch of smaller private helper functions.  Well, that's not what I'd do, because I think it stinks of bad design.  </p><p>First, I wouldn't write long functions to being with, secondly, if you have one main function and a lot of private helpers, I'd say you have an object hidden there that you should extract into its own class, and make all those helpers public.  You'll end up with more classes, all containing vastly simpler code, with mostly public methods, a much better design.  Smalltalk has no concept of private, public or protected methods and IMHO is far superior to "any" other OO language in common use.</p><p>Long methods, carry with them, all kinds of bad practices meant to cope with the length of the method, things like single exit points, declaring variables at the top, reusing variables many times, not using guard clauses, deeply nested conditional structures, etc.  Stop writing long methods, and most of these other practices no longer make sense.</p><p>You don't write long methods and then break them up because you want parts to be reusable, that's the wrong approach.  The right approach is to write single purpose short methods that are either one of two things, an implementation of a single concept, or a sort of manager method that consists of nothing but calls to other methods with workflow and conditionals deciding what to call.  </p><p>Short methods are composeable, so reuse is a side effect of good design, it's not the goal.  You don't build a brick house by pouring it as one solid concrete block and then cutting it up into bricks, rather, you build a bunch of bricks, and then slowly build up the house from them.  This is the top down vs bottom up approach to programming.</p><p>I'm of the Smalltalk/Lisp mindset that the bottom up approach is the superior approach to programming, and of the mindset that part of doing so involves bending the language to better suit the problem at hand, by creating an embedded DSL to express those solutions in.  This goes against what most "popular" languages promote as best practices, probably because most of them can't do it.  Oh well.  I'll work with the tools that work best, not the ones that are the most popular.</p></div><div id="id280" class="meta"></div></div><div id="id281" class="comment"><div class="title"><a target="_new" href="http://tekkie.wordpress.com">Mark Miller</a>&nbsp;2784 days ago</div><div class="body"><p>Meant to say:</p><p>As a C developer I used to do:</p><p>if(func1() &gt; 0 &amp;&amp; someVar1 != 0 &amp;&amp; func2() != 0 || someVar2 &lt; 2)</p></div><div id="id282" class="meta"></div></div><div id="id283" class="comment"><div class="title"><a target="_new" href="http://tekkie.wordpress.com">Mark Miller</a>&nbsp;2784 days ago</div><div class="body"><p>Re: "I'm of the Smalltalk/Lisp mindset that the bottom up approach is the superior approach to programming, and of the mindset that part of doing so involves bending the language to better suit the problem at hand, by creating an embedded DSL to express those solutions in. This goes against what most "popular" languages promote as best practices, probably because most of them can't do it. Oh well. I'll work with the tools that work best, not the ones that are the most popular."</p><p>This is what I'm working towards. For several months I've been drawn to learning Lisp and Smalltalk. It began when I was introduced to Dr. Edsgar Dijkstra's philosophy that the computer should enable the programmer to express his/her idea to it, and it should in effect "figure out the rest". This was not the mode of instruction I got when I was taking computer science. I wrote about this in my blog at http://tekkie.wordpress.com/2006/05/31/rediscovering-dr-dijkstra-and-giving-lisp-a-second-chance/.</p><p>I wasn't able to put my finger on why I was drawn to this concept of using expressive languages until I saw your post on Martin Fowler's presentation of DSLs. You linked to his presentation video, and it was very enlightening.</p><p>I went into this with some skepticism, because I was thinking that he was going to talk about how to create interpreters or compilers that would deal with a DSL. Fowler said a DSL could take any number of forms. He illustrated how it could be implemented in Ruby, which closely modeled the DSL he wanted to create. Interestingly he didn't give Smalltalk or Lisp examples. He also showed how it could be used in Java. The Java code didn't look much like a language (speaking of a DSL), but I think what he meant was there was enough class infrastructure created, using this method, such that you were programming totally with domain-specific objects to solve the problem, not primitives, like what you were criticizing. So even though Java, C#, etc. don't allow you to create elegant DSL solutions, programmers can still use the technique in those languages to improve their code.</p><p>It took me back to an article I had read about 3 years ago, about some work that Charles Simonyi was doing in this area, using .Net. The idea he has is to let domain experts model a system, using something similar to Rational Rose (just using it as a rough example), and then have the software create the DSL which the app. developers would use for constructing the app., filling in the model with logic. Simonyi didn't call it a DSL, but rather an "application-specific API", but I know this is what he was talking about. The concept maps directly. It was hard for me to wrap my head around it at first. It sounded like a novel concept to me, but I had the feeling he was on the right track. The problem Simonyi is trying to solve is the complaint from customers that they tell the development team what they want, but it gets "lost in translation". What they end up with is nothing like what the customer asked for. I've heard of this happening, and I don't know how it does. I've never been on a team or in a situation where we've produced something that's so off base the customer doesn't even recognize it. Every project I've been on has ended up being at least close to what they want, without needing the help of a tool to get that communication across. Nevertheless I'm glad for Simonyi's effort, because the failure rate of software projects is deplorable. It gives people in my profession a bad name. If he can work out a solution that will significantly decrease the failure rate, then I'm happy for it.</p><p>Simonyi invented Hungarian notation at Microsoft, by the way, so I imagine you hate him. :)</p><p>As for me, I'm just trying to improve my skill and try to get back to something I lost: a time when programming was challenging and fun. Not to say that I haven't had good programming experiences, but it's been diminished by experiences of frustration: "Why is this so complicated?" Before I got into college programming used to be simple. You'd focus more on the problem, and get headaches trying to solve the really hard ones, rather than trying to wrestle with the plumbing or the language. That's the way it should be.</p><p>What I've been realizing, largely by reading some of your posts, is that learning how to create DSLs is crucial to creating an elegant OO solution. I hadn't realized that before. I saw your post on Albatross, and was blown away. I could tell it made good use of the DSL concept, and it's wonderful!</p></div><div id="id284" class="meta"></div></div><div id="id285" class="comment"><div class="title"><a target="_new" href="http://www.notarianni.org">Bernard Notarianni</a>&nbsp;2783 days ago</div><div class="body"><p>Mark,</p><p>I encourage you to read Eric Evans book "<a href="/book-links/0321125215" rel="nofollow">Domain Driven Design</a>" which propose an approach to distil your application toward something which help kind of "embedded DSL" emerge. As for Fowler, his examples are in Java but he is actually coming from Smalltalk.</p><p>The main problem I see today with "DSL" in their name.</p><p>The word "Language" has a lot of different meaning for computer people and it is easy during a discussion to have the feeling people are talking of the same thing, and actually, they are not. Lot of my colleagues understand DSL as a mean of creating new real languages, such as SQL, AWK or maybe XML. They are seeking to improve the design by adding full languages in their java/.net application. The result is one more heterogeneous module, appending to the list of SQL, XML, HTML and the like. More complexity and more failures.</p><p>Fowler wrote that is never felt the need to create such "full language" with Smalltalk. It is one of the things I like very much with Smalltalk: you really don't need all this accidental complexity of external micro-languages.</p><p>:-)</p></div><div id="id286" class="meta"></div></div><div id="id287" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2783 days ago</div><div class="body"><p>I second that, Evans is great and <a href="http://onsmalltalk.com/book-links/0321125215" rel="nofollow">Domain Driven Design</a> is on my recommended reading list already.</p><p>"accidental complexity of external micro-languages"</p><p>I like that, it sums up nicely what I don't like about C#, Java, and VB.  </p><p>Just look at the proliferation of XML micro-languages like Ant people use when working in these languages and you'll see that when you don't have a flexible language like Smalltalk, Lisp, or Ruby, you start faking it with XML.</p></div><div id="id288" class="meta"></div></div><div id="id289" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2783 days ago</div><div class="body"><p>"Just look at the proliferation of XML micro-languages like Ant people use when working in these languages and you'll see that when you don't have a flexible language like Smalltalk, Lisp, or Ruby, you start faking it with XML."</p><p>JRuby and Groovy are helping to fill that whole on the Java side.</p></div><div id="id290" class="meta"></div></div><div id="id291" class="comment"><div class="title"><a target="_new" href="http://www.notarianni.org">Bernard Notarianni</a>&nbsp;2783 days ago</div><div class="body"><p>What I dont like with JRuby and Groovy is that instead of having Java-only, Ruby-only or Groovy-only, you hava java+ruby or java+groovy. Java is a over-complex system by itself, and adding one more layer on top of it does not really help to lower the complexity. This is one more micro-langage appended to the list.</p><p>However, maybe in 5 or 10 years, after playing a while with JRuby and Groovy, it might be that java and those dynamic langages could merge. Fine. As I have complex business problems to solve now, I have no time to wait the mainstream to lower its accidental technical complexity and I prefer to go directly to the best available: Smalltalk.</p></div><div id="id292" class="meta"></div></div><div id="id293" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2783 days ago</div><div class="body"><p>Exactly, Smalltalk is available now, and it has the best development environment in existence today.  Nothing else even comes close IMHO, not even Lisp.</p></div><div id="id294" class="meta"></div></div><div id="id295" class="comment"><div class="title"><a target="_new" href="http://www.pinbottle.com">Jason McElwaine</a>&nbsp;2782 days ago</div><div class="body"><p>I enjoyed this post a lot.  I'm glad I found this blog :)</p></div><div id="id296" class="meta"></div></div><div id="id297" class="comment"><div class="title"><a target="_new" href="http://mhinze.com/?p=10">mhinze.com &amp;raquo; Blog Archive &amp;raquo; links for 2006-12-08</a>&nbsp;2782 days ago</div><div class="body"><p>[...] My Personal Pet Peeves I See in Other People's Code | On Smalltalk (tags: programming code style) [...] </p></div><div id="id298" class="meta"></div></div><div id="id299" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2782 days ago</div><div class="body"><p>Sadly, Smalltalk is not a choice (for one reason or more) for most of us so we have to make do with what we can use. </p><p>On the other hand, you can do JRuby and Groovy by themselves.  They run in the JVM but are not a layer on top.</p><p>As for Java being over-complex ... well Java in and of itself is not.  Some of the technologies involved are.  So if you have simple problem, use the simple stuff.</p></div><div id="id300" class="meta"></div></div><div id="id301" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2782 days ago</div><div class="body"><p>"As for Java being over-complex well Java in and of itself is not".</p><p>Any Smalltalk programmer would disagree, Java has fifty or so reserved words in comparison to Smalltalk's five.  And for all those extra reserved words, you get a less capable language riddled with accidental complexities.  There's nothing simple about Java, unless you just came from C or C++.</p></div><div id="id302" class="meta"></div></div><div id="id303" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2782 days ago</div><div class="body"><p>Well, when you compare Java to Smalltalk, what can I say.  From an architectual standpoint,  it looks bad.  I guess the best thing to do is show people C/C++ and not Smalltalk.  That way they won't know how bad they have it.  :)</p></div><div id="id304" class="meta"></div></div><div id="id305" class="comment"><div class="title"><strong></strong>&nbsp;2782 days ago</div><div class="body"><p>Your article is drivel.  The responses are a terrific, hilarious ride.</p><p>Thanks folks!</p></div><div id="id306" class="meta"></div></div><div id="id307" class="comment"><div class="title"><a target="_new" href="http://tekkie.wordpress.com">Mark Miller</a>&nbsp;2781 days ago</div><div class="body"><p>To Mark:</p><p>I take your comment as tongue in cheek. I hope students are exposed to Smalltalk. I was when I was in college, though I had to take an elective senior-level course in programming languages to be exposed to it, and it was brief. We covered ICON, and SML (predecessor to OCaml) also.</p><p>Of all the languages I was introduced to back then, Smalltalk was my favorite. C came in second, followed by SML. I've since come to appreciate Lisp, but back then I had a terrible introduction to it, and ended up hating it.</p><p>I've talked about this elsewhere. Back then, in the late 1980s, and 1990-1992 it was common to see want ads for Smalltalk developers. But by 1993 Smalltalk had almost disappeared from the want ads. I was sad to see that happen. I did what I could to make money. I programmed in C, which was the hot language du jour.</p><p>In terms of marketable language skills today, I wouldn't wish C/C++ on today's students, in terms of what languages to learn to get a job, unless they wanted to work in embedded systems. I'd teach them Java or .Net.</p><p>If I wanted to teach them what they can achieve with powerful languages, I'd teach them Lisp/Scheme and/or Smalltalk/Ruby. Ruby actually has the potential to be a hot language in the U.S. someday, largely because of Rails and the marketing effort behind it. It would be an improvement in development technology, if nothing else.</p></div><div id="id308" class="meta"></div></div><div id="id309" class="comment"><div class="title"><strong>SpiffyCode</strong>&nbsp;2781 days ago</div><div class="body"><p>You are a nasty little loser with a very big chip on your shoulder for a junior developer.</p></div><div id="id310" class="meta"></div></div><div id="id311" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2781 days ago</div><div class="body"><p>lol, I guess we all know what your code looks like, not so spiffy I guess.</p></div><div id="id312" class="meta"></div></div><div id="id313" class="comment"><div class="title"><strong>Mark</strong>&nbsp;2781 days ago</div><div class="body"><p>To Mark M:Yes, definitely tongue in cheek.  When  I look for developers to work with or for or to hire - I look for Smalltalkers.</p></div><div id="id314" class="meta"></div></div><div id="id315" class="comment"><div class="title"><strong>Jason</strong>&nbsp;2781 days ago</div><div class="body"><p>I would say lisp has more "out of the box" power in the language (macros are easier to do, that's about it really), but for me smalltalk is much MUCH better organized and the environment is just a no brainer.</p><p>To the person who said Java isn't complicated, it isn't if the path you take is through the languages that make a big distinction between statement and expression (c/c++/java/etc. etc.).</p><p>But Lisp, Smalltalk, Ocaml, Haskell, etc.  <em>all</em> have vastly simpler syntax and a great deal more power.  If any of these languages caught up to perl with number of available libraries then any company that used one of these would destroy everyone who didn't.  We see this occur already today, but only in isolated cases (Paul Graham, Raw Dog development, etc.).</p><p>The only question is:  Which will come first?  Will the script/c-derived languages converge on the simplicity (unlikely, so far they add the features of lisp/smalltalk with new syntax) or will one of the above languages reach critical mass allowing people who know about to start dominating the market to a point that they can't be bought and reprogrammed in Java?</p></div><div id="id316" class="meta"></div></div><div id="id317" class="comment"><div class="title"><a target="_new" href="http://www.notarianni.org">Bernard Notarianni</a>&nbsp;2780 days ago</div><div class="body"><p>Jason,</p><p>Your question is very interesting. I understand that this question make sense in a context where it is important to use a mainstream langage with "critical mass" and "dominating the market".</p><p>Put in other words, this would be a context where it is more valuable to be in the mainstream than to use the langages you talk about (Lisp, Smalltalk, etc..).</p><p>Are we currently living in such a context?If it is the case, can we change this context or escape it?</p><p>For instance, I have the feeling that Ramon choosed to go in a context where value of choosing better tools is higher than being in the mainstream. Can we follow his examples?</p></div><div id="id318" class="meta"></div></div><div id="id319" class="comment"><div class="title"><a target="_new" href="http://tekkie.wordpress.com">Mark Miller</a>&nbsp;2779 days ago</div><div class="body"><p>To Jason and Bernard:</p><p>I think one answer is to deal with the prevailing mentality in schools, at least in the U.S., both public schools and universities. Dr. Dijkstra was complaining about this years ago, though back then people had a good excuse to dismiss him--dynamic languages tended to run noticeably slower than compiled languages. They taxed the hardware of the time. Processors have gotten fast enough, and computers have enough memory now where dynamic languages can run reasonably fast, and can be considered for serious applications. This goes in favor of Java and .Net as well. However Java and .Net were created as "the next step" for the compiled language environment. Smalltalk is a compiled language as well, but because of its late-bound nature it's much closer to languages like Lisp or Ruby than to Java or .Net in terms of the kind of dynamism it allows.</p><p>So long as people are trained primarily in the compiled languages, then the dynamic languages will continue to play 2nd fiddle to them. You can see this with what happened to ViaWeb, Paul Graham's successful Lisp project that became Yahoo Store. A few years after Yahoo bought it, they converted most of it to C++ and Perl...conforming to Phil Greenspun's Tenth Rule. The reason they gave was they couldn't find enough Lisp programmers to maintain it. There's got to be a growing population of skilled people in order for a technology to gain momentum, though this is a "chicken and egg" problem. A possibility is maybe Seaside will provide a rebirth for Smalltalk adoption, and Ruby on Rails will help people discover Seaside. The only reason I say so is that Smalltalk and Ruby share some properties, and so when people go to find out about it, they'll find out about Smalltalk as well. I think the presentation videos on Squeak (eToys) and Seaside help draw people in as well.</p><p>Ruby on Rails has more polish than Seaside in terms of presentation and access to resources for newbies. That's something that needs to be improved. I've done what I can so far to encourage people to check it out. Ramon has done a good deal as well.</p></div><div id="id320" class="meta"></div></div><div id="id321" class="comment"><div class="title"><strong>Jason</strong>&nbsp;2778 days ago</div><div class="body"><p>Bernard:We are only living in such a context in that good programmers are being wasted in Java, instead of helping us make useful languages like Smalltalk better (and there is <em>much</em> to do!).  So from my perspective there are only two problems with where smalltalk is today:1)  We don't get some things as fast as a mainstream language because we don't have the resources to get it.2)  If our total mass gets small enough then the language itself will stop getting developed and die (neither smalltalk nor lisp are in this situation at the moment, but I think self probably is and that is a shame).</p><p>As far as what can we do about it, yes Ramon is doing a good thing getting the word out.  I use smalltalk in my free time almost exclusively (also do some haskell and ocaml).</p><p>Mark:The state you mentioned about Paul Graham can be seen as a bad thing, but it can also be seen as a good thing.  The good thing is, small companies have a chance and will continue to have.  In the case you mentioned, as well as the Raw Dog, a small company made a product and the larger companies couldn't keep up.  So the larger company buys the smaller company, but can't use their secret weapon.  So the another small company can do the exact same thing again.</p></div><div id="id322" class="meta"></div></div><div id="id323" class="comment"><div class="title"><a target="_new" href="http://tekkie.wordpress.com">Mark Miller</a>&nbsp;2777 days ago</div><div class="body"><p>Jason:</p><p>When I wrote that Lisp tends to get pushed aside, I neglected to consider the fact that many airline reservation sites (Orbitz being the most prominent) are written partly in Lisp, and continue to be maintained in it. Paul Graham has pointed this out. It's nice to know that Lisp is surviving somewhere in the real world. I guess the real story is Yahoo didn't know how to recruit and retain Lisp developers. The airline reservation services apparently do.</p></div><div id="id324" class="meta"></div></div><div id="id325" class="comment"><div class="title"><a target="_new" href="http://www.nudepenguins.org/blog/index.php/archives/2006/12/21/qotd/">Covering Nudepenguins &amp;raquo; Blog Archive &amp;raquo; QOTD</a>&nbsp;2773 days ago</div><div class="body"><p>[...] &#8211; Ramon Leon [...] </p></div><div id="id326" class="meta"></div></div><div id="id327" class="comment"><div class="title"><strong>mico</strong>&nbsp;2725 days ago</div><div class="body"><p>ArrayList someItems = BuildSomeList();</p><p>I'm sorry but the above could potentially set someItems to null and cause some sort of null pointer exception when trying to use the object later.</p><p>I see it happen all the time.</p></div><div id="id328" class="meta"></div></div><div id="id329" class="comment"><div class="title"><strong>mico</strong>&nbsp;2725 days ago</div><div class="body"><p>Er. Yeah I put my foot in my mouth there. What I see all the time is a little different than your example... so I take that back :)</p></div><div id="id330" class="meta"></div></div><div id="id331" class="comment"><div class="title"><a target="_new" href="http://mgrant0.blogspot.com/">Michael Grant</a>&nbsp;2715 days ago</div><div class="body"><p>I wrote something similar to what you have here while I worked at Sun and was doing a lot of C.  I just revived it and put it in my blog.  Took me hours getting the formatting right so that Blogger would accept it:</p><p>http://mgrant0.blogspot.com/2007/02/mikes-programming-peeves-or-growing.html</p></div><div id="id332" class="meta"></div></div><div id="id333" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2715 days ago</div><div class="body"><p>I'd like to see more programmer blogs doing this.  It's fascinating reading other peoples opinions of how code should look, whether I agree or not, I like seeing justifications for certain practices.  Reading another persons code is like looking into their mind, you can tell quite a lot about a person from their code.</p></div><div id="id334" class="meta"></div></div><div id="id335" class="comment"><div class="title"><a target="_new" href="http://rabbitcube.blogspot.com">Sylocat</a>&nbsp;2689 days ago</div><div class="body"><p>Sounds like some of the programmers who are ticking you off have been using Proce55ing.</p></div><div id="id336" class="meta"></div></div><div id="id337" class="comment"><div class="title"><strong>Computer Scientist</strong>&nbsp;2659 days ago</div><div class="body"><p>Well here is an interesting blog entry finally. Personally, I quite like the tone of the article - to me it was hillarious.... "blindingly obvious" - is that trademarked? Let's see how quickly I can use it in discourse with my fellow colleagues.</p><p>some of my pet peeves...</p><p>1) Unnecessary (and sporadic) use of this:this.foo();this.bar();</p><p>rather than:foo();bar();</p><p>clearly the coder was hunting for methods using the IDE assist, and didn't take the time to cleanup the code. silly fool.</p><ol><li><p>Unnecessary declaration of locals:SomeClass foo = bar.getSomeClass();baz.doIt(foo);// Followed by code which never again uses foo. Why??</p></li><li><p>Potentially frightening comments left in code such as:</p></li></ol><p>// This stuff doesn't work, clean it up asap. DZ 01/01/2001</p><p>... 6 years hence...</p><ol><li>Code which causes confusion over the documented API:</li></ol><p>// This method will always return a non-null reference, or throw an exception.SomeClass foo = bar.getSomeClass(); if (foo != null) { // yet I just checked for a null return?</p><p>That's a subtle one. I could go on.</p><p>I will admit to using the prefix b on my boolean locals and method parameters but have received some grief from my peers lately and I will renew my efforts to stop this filthy habit. :)</p><p>But details aside (which will change over time based on technology) - I believe your meta-gripe is the same one I have time and again when reviewing other's code:</p><p>Take the time to do it right. Have pride in the work you do. Don't just be a coder, be a "software professional". Know your implementation language inside and out. Know your APIs. Say exactly what you mean in your code, no more, no less. Be direct and concise and make every character "count". Be consistent. Strive for elegance.</p><p>Programming is in many ways a creative endeavour. In other disciplines we have the same theme: an artist puts "too much" paint on the canvas, a novel is too wordy, or there are plot inconsistencies, the flow of a room doesn't feel right - doors are in the wrong places... but technically the specs have been met.</p><p>The same principles apply in programming, but I think they don't get enough emphasis - possibly because the profession is very technical and science oriented, asthetics are viewed with disdain. Unfortunately, having been on many large projects over the years in all parts of the lifecycle, I know it does effect the bottom line - time to market, flexibility in adding new features, consistency of the user experience, bug counts, maintainability, etc, etc. The person who commented to the effect "who cares" clearly does not get it, and may never get it.</p><p>I am not sure changing the language will get at the root of the problem, perhaps - but I think there is something less tangible that needs to be taught - either in university, or in the first couple years of a junior developer's apprenticeship.</p><p>Good stuff.</p></div><div id="id338" class="meta"></div></div><div id="id339" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2659 days ago</div><div class="body"><p>Ah, nice to know such things matter to others and that others do "get it".  If only every comment were as insightful.</p></div><div id="id340" class="meta"></div></div><div id="id341" class="comment"><div class="title"><strong>CubiclePrisoner</strong>&nbsp;2530 days ago</div><div class="body"><p>If these are the biggest problems you got with other people's code, I envy you. You wouldn't believe the kind of things my coworkers are up to. </p><p>Calling variables such helpful names as x and y (and not even bother to comment); typing entire programs into Workspace (and never working with classes); designing entire Smalltalk programs on paper because, well, that's how things were done in Fortran on punched cards and why change now?</p><p>Please, give me Hungarian notation any day.</p></div><div id="id342" class="meta"></div></div><div id="id343" class="comment"><div class="title"><a target="_new" href="http://blog.leugim.com.mx/index.php/2007/09/05/aberraciones-en-programacion/">Aberraciones en programación : The command line]</a>&nbsp;2514 days ago</div><div class="body"><p>[...] el blog de Ramon Leon encontré un excelente artículo listando algunas de las aberraciones que he encontrado en el código que he tenido que modificar y [...] ]]></p></div><div id="id344" class="meta"></div></div><div id="id345" class="comment"><div class="title"><a target="_new" href="www.php-engineering.com">JasonMichael</a>&nbsp;2410 days ago</div><div class="body"><p>My biggest pet peeve is when its decided that every primary key has to have a different name, such as the table name with "Id" appended to it.  I think things work much nicer when all primary keys are named 'id', (and not 'pkey'... ugh), and   short aliases are used for the table names when joining them.  I think folks who insist on using primary keys named something other than 'id', have not leared about aliases in SQL.</p></div><div id="id346" class="meta"></div></div><div id="id347" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2410 days ago</div><div class="body"><p>There are other reasons people do this.  For example, in some db's natural joins are free, so having the address.customerId match the customer.customerId means you don't have to type the join.  There's also something to be said for the customerId always being called customerId whenever possible, whether it's a primary key or a foreign key.  It's not about not knowing aliases, it's about wanting consistency.  </p><p>I actually favor customerId as the primary key for customer.  I don't want to have to alias all the keys every time I do a multi table join, and I can type "customerId" faster than I can type "id as customerId".  Why would you want all of your tables to have the same field name for the primary key?</p></div><div id="id348" class="meta"></div></div><div id="id349" class="comment"><div class="title"><strong>Amos</strong>&nbsp;2410 days ago</div><div class="body"><p>Wow, what a great read! I had a grin on my face the whole time, nodding at pretty much everything you said, Ramon (although I'm used to formatting Smalltalk code very differently from you). Some of the comments, though a year old by now, sure exposed the level of ignorance and lack of humour of some readers, it's absolutely hilarious =o)</p><p>And for some reason, several of the fallacies you mention as well as several of the comments bring to mind Charles Babbage's response (albeit to an unrelated question), "I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a [thing]."</p><p>Seems to me that the more people rant against your rant, call you names, and take you for a "junior developer" lacking experience in large dev teams, the more likely it is they either:a) get criticised constantly for the tosh they produce and just can't take any more, orb) have been stuck for so long in the same "large dev team" where bad coding is so common that they just don't know any different.</p><p>There's nothing wrong with anyone disagreeing with your preferences, but to take it so personally that they need to act like jealous kids... sheesh, it'd be funny if it weren't so sad ;-)</p><p>And while I'm at it, here's a couple of my pet peeves in the same spirit:</p><p>1) abbreviations of any kind - unless it's a <em>widely</em> accepted abbreviation, spell it out, for crying out loud, or the second or two you save by typing less (not much of an argument in the days of automatic code-completion) will come back and bite you hundred-fold when you debug (if not you then anyone who will have to decipher your code later on)</p><p>2) multiple calls to non-trivial methods - use a temporary variable already, that's what they're for...</p></div><div id="id350" class="meta"></div></div><div id="id351" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2410 days ago</div><div class="body"><p>I totally agree with both of those as well.  I often wonder how much the need to abbreviate directly correlates to poor typing skills.  One of my favorite things about Smalltalk is that Smalltalk'ers tend not to do that, more than any other language, they cater to the code reader rather than the code writer.  </p><p>You can certainly tell the bad programmers, they're the ones most offended by having their flaws pointed out.  These aren't exactly earth shattering revelations, just things that tend to be found in junior level code.</p></div><div id="id352" class="meta"></div></div><div id="id353" class="comment"><div class="title"><a target="_new" href="http://ionrock.org/blog/">Eric Larson</a>&nbsp;2390 days ago</div><div class="body"><p>My one gripe with this is the don't use XML bit. XML makes for terrible configuration files except when they must be generated and maintained by an application. Also, using XML as an "object" is usually a bad idea, but using XML as a data store is actually very effective. The XML XSLT combination can be very similar to SQL at times and can make a ton of sense. </p><p>This is my personal opinion of course and I'm honestly not the most object oriented person, so I would assume if I was a bit more attuned to OO and the awesomeness of SmallTalk then my thoughts might be different.</p></div><div id="id354" class="meta"></div></div><div id="id355" class="comment"><div class="title"><a target="_new" href="http://onsmalltalk.com">Ramon Leon</a>&nbsp;2388 days ago</div><div class="body"><p>XML is a terrible data store, binary serialization formats are vastly smaller, faster, and can contain real objects that can be queried via the standard collections protocol.  The place where XML is useful is when transporting data across the wire, especially across otherwise incompatible platforms, web services and such.  It's only real value is the availability of parsers on every platform.</p><p>XSLT is a nice little functional language that makes generating HTML from XML very nice to do, it works as a nice view layer on lesser platforms, however, I'm a Seaside fan and I write my HTML directly in Smalltalk.  XSLT's predicate dispatching on templates is rather nice though.</p></div><div id="id356" class="meta"></div></div><div id="id357" class="comment"><div class="title"><strong>Paul</strong>&nbsp;2058 days ago</div><div class="body"><p>Were comments searchable in your old blog?  I was trying to find your reference to Wirfs-Brock book from two years ago and after the search failing and trying to guess the post I just went to google and did a search for 'wirfs-brock site:onsmalltalk.com' But I seem to remember not needing to do that with the old blog.  Do you plan to make comments searchable from inside your blog?  Thanks for all the good info</p></div><div id="id358" class="meta"></div></div></div></div></div></td><td valign="top" class="navigation"><div id="extras"><form accept-charset="utf-8" method="post" action="http://onsmalltalk.com/my-personal-pet-peeves-i-see-in-other-peoples-code" id="searchForm"><div><input tabindex="-1" value="Default" name="359" style="position: absolute; top: -100em" type="submit" class="submit"/></div><div id="search"><input onfocus="if(value=='Search'){value='';style.color=null}" style="color: #aaa" value="Search" name="360" type="text" class="text"/></div><div><input name="_s" value="P2YMGT5yczXLHc8X" type="hidden" class="hidden"/><input name="_k" value="1GGanpMV" type="hidden" class="hidden"/></div></form><div id="categories"><h3>Topics</h3><ul><li><a href="/ajax">Ajax</a>&nbsp;(6)</li><li><a href="/apache">Apache</a>&nbsp;(5)</li><li><a href="/databases">Databases</a>&nbsp;(12)</li><li><a href="/gemstone">Gemstone</a>&nbsp;(2)</li><li><a href="/linux">Linux</a>&nbsp;(6)</li><li><a href="/lisp">Lisp</a>&nbsp;(9)</li><li><a href="/magritte">Magritte</a>&nbsp;(10)</li><li><a href="/performance">Performance</a>&nbsp;(8)</li><li><a href="/profiling">Profiling</a>&nbsp;(1)</li><li><a href="/programming">Programming</a>&nbsp;(39)</li><li><a href="/ruby">Ruby</a>&nbsp;(25)</li><li><a href="/seaside">Seaside</a>&nbsp;(64)</li><li><a href="/smalltalk">Smalltalk</a>&nbsp;(82)</li><li><a href="/sql">Sql</a>&nbsp;(13)</li><li><a href="/squeak">Squeak</a>&nbsp;(6)</li><li><a href="/updates">Updates</a>&nbsp;(9)</li></ul></div></div></td></tr></table><div id="pages"><a href="/about">about me</a>|<a href="/books-worth-reading">good books</a>|<a href="/top-posts">popular posts</a>|<a href="/seaside/atomFeed">atom</a>|<a href="/seaside/rssFeed">rss</a></div></div><div style="text-align: center" class="donate">Donate if you like this blog<br/><div>BTC: 12a9hmRF8Aueu38tXyuj7eswTUgsemszp2</div></div><script type="text/javascript">
		document.write(unescape("%3Cscript src='http://www.google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
	</script>
	<script type="text/javascript">	try {var pageTracker = _gat._getTracker("UA-118308-7"); pageTracker._trackPageview();} catch(err) {}</script><script type="text/javascript">/*<![CDATA[*/function onLoad(){}/*]]>*/</script></body></html>
