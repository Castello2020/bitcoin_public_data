http://opensourcehacker.com/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/
HTTP/1.1 200 OK
Server: Apache/2.2.22 (Ubuntu)
X-Powered-By: PHP/5.3.10-1ubuntu3.11
X-Pingback: http://opensourcehacker.com/xmlrpc.php
Link: <http://opensourcehacker.com/?p=2856>; rel=shortlink
Cache-Control: max-age=0
Expires: Wed, 23 Jul 2014 01:54:02 GMT
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Type: text/html; charset=UTF-8
Content-Length: 10755
Accept-Ranges: bytes
Date: Wed, 23 Jul 2014 01:54:02 GMT
X-Varnish: 562948372
Age: 0
Via: 1.1 varnish
Connection: close

<!DOCTYPE html>
<!--[if IE 6]>
<html id="ie6" lang="en-US">
<![endif]-->
<!--[if IE 7]>
<html id="ie7" lang="en-US">
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en-US">
<![endif]-->
<!--[if !(IE 6) | !(IE 7) | !(IE 8)  ]><!-->
<html lang="en-US">
<!--<![endif]-->
<head>
<meta name="google-site-verification" content="C2jGLB_j53XmXMPfzladiCFXTMOKg_RHJ_OBAQgfOrg" />
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />

<title>Accepting and spending bitcoins in a Django application</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://opensourcehacker.com/wp-content/themes/twentyeleven/style.css" />

<link rel="stylesheet" type="text/css" media="all" href="http://opensourcehacker.com/wp-content/themes/twentyeleven/google-code-prettify/prettify.css" />
<script src="http://opensourcehacker.com/wp-content/themes/twentyeleven/google-code-prettify/prettify.js" type="text/javascript"></script>
<script>
      document.addEventListener("DOMContentLoaded", prettyPrint);               
</script>

<script
  src   = "http://cdn.webglstats.com/stat.js"
  defer = "defer"
  async = "async"
></script>

<link rel="pingback" href="http://opensourcehacker.com/xmlrpc.php" />
<!--[if lt IE 9]>
<script src="http://opensourcehacker.com/wp-content/themes/twentyeleven/js/html5.js" type="text/javascript"></script>
<![endif]-->
<!--[if IE 7]><link rel='stylesheet' id='css-ie-fix' href='http://opensourcehacker.com/wp-content/plugins/special-recent-posts/css/css-ie7-fix.css' type='text/css' media='all' /> <![endif]--><link rel='stylesheet' id='srp-front-stylesheet-css'  href='http://opensourcehacker.com/wp-content/plugins/special-recent-posts/css/css-front.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='sedlex_styles-css'  href='http://opensourcehacker.com/wp-content/plugins/content-table/core/load-styles.php?c=0&#038;load=7e487b67b8e32886e4d732079da67f5b&#038;ver=20140723' type='text/css' media='all' />
<link rel='shortlink' href='http://opensourcehacker.com/?p=2856' />

<!-- All in One SEO Pack 1.6.13.8 by Michael Torbert of Semper Fi Web Design[469,552] -->
<meta name="keywords" content="bitcoin,bitcoind,django,django-bitcoin,ipython,plone,python,virtualenv" />
<link rel="canonical" href="http://opensourcehacker.com/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/" />
<!-- /all in one seo pack -->
<link rel='stylesheet' id='wop-css'  href='http://opensourcehacker.com/wp-content/plugins/widgets-on-pages/wop.css' type='text/css' media='all' /><meta property="fb:admins" content="611693032"/><meta property="og:title" content="Accepting and spending bitcoins in a Django application"/><meta property="og:type" content="article"/><meta property="og:url" content="http://opensourcehacker.com/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/"/><meta property="og:site_name" content="Open Source Hacker"/><meta property="og:image" content="http://opensourcehacker.com/wp-content/uploads/2011/08/icon.png"/><meta name="twitter:card" content="summary">
<meta name="twitter:url" content="http://opensourcehacker.com/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/">
<meta name="twitter:title" content="Accepting and spending bitcoins in a Django application">
<meta name="twitter:description" content="This tutorial shows how to use django-bitcoin to receive and send money in your Python + Django application. The walkthrough guides how to create a bitcoin wallet in your Django application, buy bitcoins, transfers bitcoins into your application and then spend them. This all is done interactively from the command, Django shell and Python prompt.The tutorial was tested on OSX. It should work on Linux unmodified. On Windows you are on your own. django-bitcoin is">
</head>

<body class="single single-post postid-2856 single-format-standard single-author singular two-column right-sidebar">
<div id="page" class="hfeed">
	<header id="branding" role="banner">
			<hgroup>
				<h1 id="site-title"><span><a href="http://opensourcehacker.com/" title="Open Source Hacker" rel="home">Open Source Hacker</a></span></h1>
				<h2 id="site-description">Pushing the boundaries of free technology</h2>

			</hgroup>

						<a href="http://opensourcehacker.com/">
									<img src="http://opensourcehacker.com/wp-content/uploads/2013/06/Untitled-4.jpg" width="1000" height="288" alt="" />
							</a>
			
			                                				<iframe id="ad" allowtransparency="true" frameborder="0" hspace="0" vspace="0" marginheight="0" marginwidth="0" scrolling="no" width="234" height="60" src="https://localbitcoins.com/affiliate-embed/half-banner?ref=1af"></iframe>

				<!-- get_search_form() -->
 			
			<nav id="access" role="navigation">
				<h3 class="assistive-text">Main menu</h3>
								<div class="skip-link"><a class="assistive-text" href="#content" title="Skip to primary content">Skip to primary content</a></div>
				<div class="skip-link"><a class="assistive-text" href="#secondary" title="Skip to secondary content">Skip to secondary content</a></div>
								<div class="menu"><ul><li ><a href="http://opensourcehacker.com/">Home</a></li><li class="page_item page-item-1491"><a href="http://opensourcehacker.com/archives/" title="Archives">Archives</a></li><li class="page_item page-item-1433"><a href="http://opensourcehacker.com/contact/" title="Contact">Contact</a></li><li class="page_item page-item-1437"><a href="http://opensourcehacker.com/references-cv-resume/" title="References">References</a></li></ul></div>

                                <a href="https://twitter.com/moo9000" class="twitter-follow-button" data-button="grey" data-width="100" data-show-count="false" data-link-color="ffFFff" data-text-color="ffFFff" >Follow @moo9000</a>
				<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script> 


<iframe id="facebook" src="http://www.facebook.com/plugins/like.php?app_id=201995916528656&amp;href=http%3A%2F%2Fwww.facebook.com%2Fpages%2FOpen-Source-Hacker%2F181710458567630&amp;send=false&amp;layout=button_count&amp;width=200&amp;show_faces=true&amp;action=like&amp;colorscheme=dark&amp;font=trebuchet+ms&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:100px; height:21px;" allowTransparency="true"></iframe>                                


<!-- Place this tag where you want the +1 button to render -->
<div id="plus">
<div class="g-plusone" data-size="small" data-href="http://opensourcehacker.com"></div>
</div>

<!-- Place this render call where appropriate -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
			</nav><!-- #access -->
	</header><!-- #branding -->


	<div id="main">
		<div id="primary">
			<div id="content" role="main">

				
					<nav id="nav-single">
						<h3 class="assistive-text">Post navigation</h3>
						<span class="nav-previous"><a href="http://opensourcehacker.com/2013/10/07/this-documentation-was-brought-you-by-these-awesome-persons/" rel="prev"><span class="meta-nav">&larr;</span> Previous</a></span>
						<span class="nav-next"><a href="http://opensourcehacker.com/2013/12/14/bitcoinprices-js-a-human-friendly-presentation-of-bitcoin-prices-on-any-web-page/" rel="next">Next <span class="meta-nav">&rarr;</span></a></span>
					</nav><!-- #nav-single -->

					
<article id="post-2856" class="post-2856 post type-post status-publish format-standard hentry category-django category-plone tag-bitcoin tag-bitcoind tag-django tag-django-bitcoin tag-ipython tag-plone tag-python tag-virtualenv">
	<header class="entry-header">
		<h1 class="entry-title">Accepting and spending bitcoins in a Django application</h1>

				<div class="entry-meta">
			<span class="sep">Posted on </span><a href="http://opensourcehacker.com/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/" title="18:06" rel="bookmark"><time class="entry-date" datetime="2013-10-16T18:06:48+00:00" pubdate>2013-10-16</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://opensourcehacker.com/author/moo/" title="View all posts by Mikko Ohtamaa" rel="author">Mikko Ohtamaa</a></span></span>		</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

	<div class="entry-content">
		<div id="django-bitcoin-example-project">
<p>This tutorial shows how to use <a href="https://github.com/kangasbros/django-bitcoin">django-bitcoin to receive and send money in your Python + Django application</a>. The walkthrough guides how to create a bitcoin wallet in your Django application, buy bitcoins, transfers bitcoins into your application and then spend them. This all is done interactively from the command, Django shell and Python prompt.The tutorial was tested on OSX. It should work on Linux unmodified. On Windows you are on your own.</p>
<p><tt>django-bitcoin</tt> is a proven open source solution for handling bitcoins in your service. However, it might be rough on the edges, it is being actively developed and lacks satisfying documentation. If you need a helping hand to set it up please pop up on <em>#localbitcoins-chat</em> on irc.freenode.net or poke me by email.</p>
<p><a href="https://github.com/miohtama/django-bitcoin-example">The tutorial Django application code is available on Github</a>. It was originally presented in PythonBrazil 2013. The tutorial code is MIT licensed and uses my personal fork of <tt>django-bitcoin</tt>. Disclaimer: I work with the related projects.</p>
<div id="why-accept-bitcoin-in-your-online-service">
<p><strong>LocalBitcoins is hiring</strong>. <a href="http://localbitcoins.blogspot.fi/p/localbitcoins-open-job-positions.html">LocalBitcoins is currently looking for fraud analyst, growth hacker, international support people and software developers</a>.</p>
<p></p><div class='toc tableofcontent'>
   <h2>Table Of Content</h2>
   <p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Why_accept_bitcoin_in_your_online_service">1. Why accept bitcoin in your online service</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Configuring_bitcoind">2. Configuring bitcoind</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Initializing_database">3. Initializing database</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Do_a_test_run">4. Do a test run</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Creating_a_wallet">5. Creating a wallet</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Purchase_some_test_bitcoins">6. Purchase some test bitcoins</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Accepting_incoming_transaction">7. Accepting incoming transaction</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Checking_the_balance">8. Checking the balance</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Spending_the_bitcoins">9. Spending the bitcoins</a></p>
<p style='font-size:14px; line-height:14px; padding-left:0px;'><a style='color:#000000 ;' href="#Checking_outgoing_and_past_transactions">10. Checking outgoing and past transactions</a></p>

</div><div class='tableofcontent-end'> </div><p></p>
<h2 id="Why_accept_bitcoin_in_your_online_service">1. Why accept bitcoin in your online service</h2>
<ul>
<li>Bitcoin is money with API: very easy to handle programmatically. You can do it even from UNIX command line.</li>
<li>No upfront contracts or paperwork needed. Bitcoin works in every country.</li>
<li><a href="https://localbitcoins.com?ch=1af">Bitcoin market liquidity has risen to a level, so that it is easy for everyone to obtain bitcoins from LocalBitcoins.com</a>. You can also convert bitcoins easily back to fiat currency, when you need to pay taxes.</li>
<li>It is free from chargeback fraud. The system is based on mathematics instead of trust.</li>
<li>Very low transactions fees</li>
<li>Everybody hates PayPal</li>
</ul>
</div>
<div id="prerequisitements">
<h1>Prerequisites</h1>
<p>In order to understand this tutorial, you need to have basic understanding of</p>
<ul>
<li>Python 2.7</li>
<li><a href="http://opensourcehacker.com/2012/09/16/recommended-way-for-sudo-free-installation-of-python-software-with-virtualenv">virtualenv</a></li>
<li>memcached</li>
<li><a href="http://bitcoin.org/en/download">bitcoind</a></li>
<li>Django basics: how to configure Django project, MySQL, models, South migrations, using interactive Python shell.</li>
<li>How to consume piles of open source code from Github</li>
</ul>
</div>
<div id="installation">
<h1>Installation</h1>
<p>Setup and configure <tt>memcached</tt> first.</p>
<p>Installation (<a href="http://opensourcehacker.com/2012/09/16/recommended-way-for-sudo-free-installation-of-python-software-with-virtualenv/">virtualenv based</a>):</p>
<pre>git clone git@github.com:miohtama/django-bitcoin-example.git
cd django-bitcoin-example
virtualenv venv   # Create virtualenv folder caller venv
. venv/bin/activate  # Active virtualenv</pre>
<p>Install Python dependencies using <em>pip</em>:</p>
<pre>pip install -r requirements.txt</pre>
</div>
<div id="tutorial-walkthrough">
<h1>Tutorial walkthrough</h1>
<p><a href="https://github.com/kangasbros/django-bitcoin">django-bitcoin</a> creates a so called bitcoin web wallet in your Django project.</p>
<ul>
<li>You need to have a <tt>bitcoind</tt> installed on your desktop / server where you run the tutorial.</li>
<li><tt>django-bitcoin</tt> reads transactions from <tt>bitcoind</tt> and duplicates them as Django data with convenient models to handle them in your application</li>
<li><tt>django-bitcoin</tt> can send bitcoins from the system by calling <tt>bitcoind</tt> interfaces</li>
</ul>
<div id="configuring-bitcoind">
<h2 id="Configuring_bitcoind">2. Configuring bitcoind</h2>
<p>Install <a href="http://bitcoin.org/en/download"><cite>bitcoind</cite></a>.</p>
<p>Note that the <em>bitcoind</em> installation takes hefty 10-20 GB disk space for the block chain data. Blockchain contains all transaction history of bitcoin ever. bitcoind downloads this data from the bitcoin network and it may take a while.</p>
<ul>
<li><em>django-bitcoin</em> communites with bitcoind over JSON-RPC protocol. You set the bitcoind address in <tt>settings.py</tt></li>
<li><tt>bitcoind</tt> transaction handling is done as polling, using Django management commands</li>
</ul>
<p>Configure your bitcoind to accept connection with username and password.</p>
<p>Create file <em><tt>example/localsettings.py</tt></em> and let&#8217;s put there in confidential settings (not stored on Github):</p>
<pre>BITCOIND_CONNECTION_STRING = "http://miguel:passwor@example.com:8332"

# How many bitcoin network confirmations are required until django-bitcoin considers the transaction
# as received
BITCOIN_MINIMUM_CONFIRMATIONS = 1

# Use Django signals to tell the system when new money has arrived to your wallets
BITCOIN_TRANSACTION_SIGNALING = True</pre>
</div>
<div id="initializing-database">
<h2 id="Initializing_database">3. Initializing database</h2>
<p><tt>django-bitcoin</tt> uses South for its schema management. Create a database (sqlite <tt>test.db</tt> file by default):</p>
<pre>python manage.py syncdb
python manage.pt migrate django_bitcoin</pre>
</div>
<div id="do-a-test-run">
<h2 id="Do_a_test_run">4. Do a test run</h2>
<p>Let&#8217;s open the development web server and see that the Django admin is up with <tt>django-bitcoin</tt>:</p>
<pre>python manage.py runserver_plus</pre>
<p>Visit <tt>http://localhost:8000/admin</tt> to see the Django admin interface having addresses, wallets and such:</p>
<p><img class="alignnone" alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/admin.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/admin.png" width="625" height="416" /></p>
</div>
<div id="creating-a-wallet">
<h2 id="Creating_a_wallet">5. Creating a wallet</h2>
<p>A wallet, <em><tt>django_bitcoin.models.Wallet</tt></em>, is a combination of receiving and sending bitcoin addresses and stores the bitcoin value associated with these addresses. A wallet can have infinite number of sending and receiving bitcoin addresses.</p>
<p>Bitcoin addresses can be created and used on demand. The sending and receiving addresses do not have relationship between them. When you receive bitcoins to your system they do not leave out from the same address. This is who most bitcoin web wallets behave.</p>
<p>Let&#8217;s start interactive IPython prompt:</p>
<pre>python manage.py shell_plus</pre>
<p>Then we create a wallet with an label. Usually if the application has only one wallet (not per user wallets) you call this wallet instance to <em>master wallet</em>:</p>
<pre>master_wallet, created = Wallet.objects.get_or_create(label="master_wallet")</pre>
<p>Then we need to have an receiving bitcoin address where this wallet can receive bitcoins and then print it out for us:</p>
<pre>recv_address = master_wallet.receiving_address(fresh_addr=False)
print recv_address</pre>
<p>Write down the bitcoin address you got as we are later sending bitcoins into it.</p>
<p><img alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/wallet.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/wallet.png" width="802" height="422" /></p>
</div>
<div id="purchase-some-test-bitcoins">
<h2 id="Purchase_some_test_bitcoins">6. Purchase some test bitcoins</h2>
<p>Go to <a href="https://localbitcoins.com/?ch=1af">LocalBitcoins.com and buy some bitcoins</a>. LocalBitcoins.com is a person-to-person bitcoin exchange where you are not buying bitcoins from an organization, but from other users. This is easy and fast way to obtain your first bitcoins, as there is no cumbersome verification processes you need to undergo in centralized bitcoin exchanges. Think LocalBitcoins as eBay of bitcoins.</p>
<p>LocalBitcoins.com provides different online payment methods. The recommended methods are:</p>
<ul>
<li>Cash deposit (popular in US)</li>
<li>National bank transfer</li>
</ul>
<p>If you are living a big city you can also try cash trade.</p>
<p><a href="https://localbitcoins.com/p/opensourcehacker?ch=1af">You can buy small amounts of bitcoins from me</a>. I can also sell bitcoins on PayPal on a request.</p>
<p><img alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/buy.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/buy.png" width="494" height="382" /></p>
</div>
<div id="accepting-incoming-transaction">
<h2 id="Accepting_incoming_transaction">7. Accepting incoming transaction</h2>
<p>We have the receiving bitcoin address of our master wallet from before. Now we are going to send the bitcoins there from LocalBitcoins:</p>
<p><img alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/send.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/send.png" width="606" height="668" />When you hit the <em>Send</em> on LocalBitcoins.com, the site submits the transaction to the bitcoin network. Bitcoin network consists of nodes which will confirm your transaction. After the certain transaction confirmation threshold is exceeded you can assume the transaction was safe and not double spent attempt. Usually this confirmation threshold is six confirmations, but you can set it lower if you want to have faster customer experience. It takes 5-30 minutes to process a transaction with six confirmations.</p>
<p>Now, in our own example application polls <tt>bitcoind</tt> which listens to bitcoin network. <a href="https://en.bitcoin.it/wiki/API_reference_%28JSON-RPC%29">bitcoind exposes a bunch of commands over JSON-RPC protocol</a>. You can call these commands even from the UNIX command line.</p>
<p>We have a Django management command for polling bitcoind. On each poll, we check the incoming transaction for receiving bitcoin addresses we have in our database. When the bitcoin network keeps confirming our transaction, the confirmation count of the transaction increases. When the threshold is exceeded, <tt>django-bitcoin</tt> writes down the transaction to the database as <em><tt>DepositTransaction</tt></em> and the amount of bitcoins in the wallet is increased.</p>
<p>For this example we run the polling command by hand. Usually this is a task delegated to Celery task scheduler:</p>
<pre>python manage.py CheckTransactions</pre>
<p><img alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/poll.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/poll.png" width="816" height="209" /></p>
</div>
<div id="checking-the-balance">
<h2 id="Checking_the_balance">8. Checking the balance</h2>
<p><tt>CheckTransactions</tt> fires the Django signal handlers notifying the Django project for incoming transactions. For the simplicity, we do not use Django signalling in this example. Instead, we manually run <tt>CheckTransactions</tt> and after 20 minutes and see that the bitcoins have been received in our wallet:</p>
<pre>python manage.py shell_plus
master_wallet = Wallet.objects.get(label="master_wallet")
print master_wallet.total_balance()</pre>
<p><img alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/balance.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/balance.png" width="578" height="396" /></p>
</div>
<div id="spending-the-bitcoins">
<h2 id="Spending_the_bitcoins">9. Spending the bitcoins</h2>
<p>Now, we got the coins! Time to make some purchases. We go to an online shop selling high quality Brazilian music.</p>
<p>Then we&#8217;ll send the bitcoins from our wallet to buy this wonderful piece of art (the screenshot below is a mockup and not an actual store).</p>
<p><img alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/spend.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/spend.png" width="414" height="462" /></p>
<p>All bitcoin amounts are stored in Python <tt>decimal.Decimal</tt> instead of floats to avoid floating point rounding errors.</p>
<p>We fire up the Python shell again and send the bitcoins to the target address:</p>
<pre>python manage.py shell_plus
from decimal import Decimal
master_wallet = Wallet.objects.get(label="master_wallet")
master_wallet.send_to_address("1Bk1Gwo6KVu2a85YkqHAPtdxmS8xHejDUB", Decimal("0.0505"), "Bought Michel Telo MP3")</pre>
<p>Note that for every outgoing transaction there is a bitcoin network fee to compensate the bitcoin miners for confirming your transaction. The network fee is configured to be 0.0005 BTC in <tt>django_bitcoind</tt> by default. So the total amount to be send is the checkout price + network fee. Higher the paid network fee, faster the transaction is processed by bitcoin network.</p>
<p><img alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/outgoing.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/outgoing.png" width="664" height="192" /></p>
</div>
<div id="checking-outgoing-and-past-transactions">
<h2 id="Checking_outgoing_and_past_transactions">10. Checking outgoing and past transactions</h2>
<p>We can check the outgoing transactions from our wallet:</p>
<pre>for t in WalletTransaction.objects.filter(from_wallet=master_wallet):
   print t, t.to_bitcoinaddress</pre>
<p><img alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/history.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/history.png" width="656" height="144" /></p>
<p>If you enter the receiving address to <a>blockchain.info</a> you can see your transaction statuses in the bitcoin network.</p>
<p><img class="alignnone" alt="https://raw.github.com/miohtama/django-bitcoin-example/master/images/blockchain.png" src="https://raw.github.com/miohtama/django-bitcoin-example/master/images/blockchain.png" width="598" height="349" />And that&#8217;s it!</p>
</div>
</div>
</div>
<p class="signature">
 <a href="http://feeds.feedburner.com/OpenSourceHacker" rel="alternate" type="application/rss+xml"><img valign="middle" src="http://www.feedburner.com/fb/images/pub/feed-icon16x16.png" alt="" style="border:0"/></a> <a href="http://feeds.feedburner.com/OpenSourceHacker" rel="alternate" type="application/rss+xml">Subscribe to RSS feed</a> <a href="http://twitter.com/moo9000"> <img valign="middle"  style="border:0" src="http://opensourcehacker.com/wp-content/uploads/twitter-24.png"></a> <a href="http://twitter.com/moo9000">Follow me on Twitter</a> 
 <a href="https://www.facebook.com/pages/Open-Source-Hacker/181710458567630"> <img valign="middle"  style="border:0" src="http://opensourcehacker.com/wp-content/uploads/facebook-24.png"></a> <a href="https://www.facebook.com/pages/Open-Source-Hacker/181710458567630">Follow me on Facebook</a> <a href="https://plus.google.com/103323677227728078543/"><img valign="middle"  style="border:0" src="http://opensourcehacker.com/wp-content/uploads/googleplus.png"></a> <a href="https://plus.google.com/103323677227728078543/">Follow me Google+</a></p>
			</div><!-- .entry-content -->

	<footer class="entry-meta">
		This entry was posted in <a href="http://opensourcehacker.com/category/django/" title="View all posts in django" rel="category tag">django</a>, <a href="http://opensourcehacker.com/category/plone/" title="View all posts in plone" rel="category tag">plone</a> and tagged <a href="http://opensourcehacker.com/tag/bitcoin/" rel="tag">bitcoin</a>, <a href="http://opensourcehacker.com/tag/bitcoind/" rel="tag">bitcoind</a>, <a href="http://opensourcehacker.com/tag/django/" rel="tag">django</a>, <a href="http://opensourcehacker.com/tag/django-bitcoin/" rel="tag">django-bitcoin</a>, <a href="http://opensourcehacker.com/tag/ipython/" rel="tag">ipython</a>, <a href="http://opensourcehacker.com/tag/plone/" rel="tag">plone</a>, <a href="http://opensourcehacker.com/tag/python/" rel="tag">python</a>, <a href="http://opensourcehacker.com/tag/virtualenv/" rel="tag">virtualenv</a> by <a href="http://opensourcehacker.com/author/moo/">Mikko Ohtamaa</a>. Bookmark the <a href="http://opensourcehacker.com/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/" title="Permalink to Accepting and spending bitcoins in a Django application" rel="bookmark">permalink</a>.		
			</footer><!-- .entry-meta -->
</article><!-- #post-2856 -->

						<div id="comments">
	
	
			<h2 id="comments-title">
			2 thoughts on &ldquo;<span>Accepting and spending bitcoins in a Django application</span>&rdquo;		</h2>

		
		<ol class="commentlist">
				<li class="comment even thread-even depth-1" id="li-comment-21824">
		<article id="comment-21824" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://0.gravatar.com/avatar/cc6cc5e2318fc6b1d5d7abb0a20e3c6c?s=68&amp;d=monsterid&amp;r=G' class='avatar avatar-68 photo' height='68' width='68' /><span class="fn">Jozef</span> on <a href="http://opensourcehacker.com/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/comment-page-1/#comment-21824"><time pubdate datetime="2013-11-07T15:59:34+00:00">2013-11-07 at 15:59</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>Hi, I&#8217;m trying to get around django-bitcoin. It seems to be a nice app, but I still don&#8217;t get it clearly.<br />
As I can see it provides Wallets for multiplel users, like official bitcoind does. To my surprise, however, wallets are not mapped to accounts in bitcoind. Instead, there&#8217;s just one account (somerandomstring&#8230;).<br />
Could you please explain to me the reason of this implementation? Is it because of need for better scalability (supposing bitcoind does not scale good with thousands of accounts)?</p>
<p>Also, can I be sure that the transactions will not mix up? Bitcoind provides API for retrieving addresses and balance per account, but here it is all one account, so is this handled by django-bitcoin logic? Thanks.</p>
<p>Joe</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
	<li class="comment byuser comment-author-moo bypostauthor odd alt thread-odd thread-alt depth-1" id="li-comment-21825">
		<article id="comment-21825" class="comment">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<img alt='' src='http://1.gravatar.com/avatar/fbcd3f115ce33ea2380f5a2dae0cf6d2?s=39&amp;d=monsterid&amp;r=G' class='avatar avatar-39 photo' height='39' width='39' /><span class="fn"><a href='http://opensourcehacker.com' rel='external nofollow' class='url'>Mikko Ohtamaa</a></span> on <a href="http://opensourcehacker.com/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/comment-page-1/#comment-21825"><time pubdate datetime="2013-11-07T16:18:22+00:00">2013-11-07 at 16:18</time></a> <span class="says">said:</span>
									</div><!-- .comment-author .vcard -->

				
			</footer>

			<div class="comment-content"><p>I guess is that using one bitcoind account make things easier from the bitcoind connection perspective: you need to authenticate against bitcoind only once with one connection string.</p>
<p>django-bitcoin contains some management scripts for retrieving the transactions <a href="https://github.com/miohtama/django-bitcoin/tree/master/django_bitcoin/management/commands" rel="nofollow">https://github.com/miohtama/django-bitcoin/tree/master/django_bitcoin/management/commands</a> &#8211; the account balance is hold in the database and not in bitcoind.</p>
<p>CheckTransactions checks only for a fresh transactions of known bitcoin addresses (from db). This command is quite fast to execute.</p>
<p>Then there are more strict check scripts which go through of every transaction of known bitcoin addresses from bitcoind. This is very slow process if you have thousands of addresses and cannot be run regularly.</p>
</div>

			<div class="reply">
							</div><!-- .reply -->
		</article><!-- #comment-## -->

	</li><!-- #comment-## -->
		</ol>

		
	
									<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2013/10/16/accepting-and-spending-bitcoins-in-a-django-application/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://opensourcehacker.com/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='2856' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="fbd7913dac" /></p><p style="display:none;"><input type="text" name="nxts" value="1406080442" /><input type="text" name="nxts_signed" value="5bac2821a408264826a271be3228537b496a6c45" /><input type="text" name="adfbd8874a1bc8421f1949b762a7ae03" value="" /><input type="text" name="d7cd6414ce8bf948533fc331dac6bae9" value="c5b3c574fc6c43d1e4b2e6d584e19269" /></p>

	<p style="clear: both;" class="subscribe-to-comments">
	<input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" />
	<label for="subscribe">Notify me of followup comments via e-mail</label>
	</p>


					</form>
							</div><!-- #respond -->
			
</div><!-- #comments -->

				
			</div><!-- #content -->
		</div><!-- #primary -->



	</div><!-- #main -->

	<footer id="colophon" role="contentinfo">

			

			<div id="site-generator">
				open source hacker: get your dose of Linux, Ubuntu, Python, Javascript, HTML5 and other cool and free technology. 
			</div>

 			<div style="display: none">
				<a rel="author" href="https://plus.google.com/103323677227728078543">Google+ profile</a>
 			</div>
	</footer><!-- #colophon -->
</div><!-- #page -->


<!-- tracker added by Ultimate Google Analytics plugin v1.5.3: http://www.oratransplant.nl/uga -->
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-25261116-1";
urchinTracker();
</script>
<img src="http://opensourcehacker.com/wp-content/plugins/cookies-for-comments/css.php?k=f0702d90d271949453d211b6efabce7a&amp;o=i&amp;t=349098543" width='1' height='1' />

</body>
</html>
