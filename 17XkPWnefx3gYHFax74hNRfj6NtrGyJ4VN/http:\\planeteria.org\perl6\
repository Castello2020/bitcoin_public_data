http://planeteria.org/perl6/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 17:53:10 GMT
Server: Apache/2.4.6 (Debian) mod_fcgid/2.3.9 Phusion_Passenger/4.0.10 PHP/5.5.4-1 mod_wsgi/3.4 Python/2.7.5+
Last-Modified: Wed, 23 Jul 2014 17:20:36 GMT
ETag: "58d09-4fedf8ef1c8e8-gzip"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Connection: close
Content-Type: text/html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
   <base href="http://planeteria.org/" />
     <meta name="author" content="Perl 6" />
   <meta name="license" content="Various.  See source blogs for individual posts." />
   <meta name="generator" content="Planeteria 2.1.0" />
   <meta name="keywords" content="Planet, admin, metaplanet, hackervisions, blog, aggregator" />
   <meta name="robots" content="index, follow, noarchive" />
   <meta name="googlebot" content="noarchive" />
   <title>Planet Perl 6</title>
   <link rel="stylesheet" href="/pub.d/css/form.css" type="text/css" />
   <link rel="stylesheet" href="/pub.d/css/screen.css" type="text/css" />
   <link rel="stylesheet" href="/pub.d/css/venus.css" type="text/css" />
   <link rel="alternate" type="application/rss+xml" href="http://planeteria.org/perl6/atom.xml" title="All these posts as one feed" />
</head>
<body>
<div id="wrap">
   <div id="header">
         <h1 id="logo-text"><a href="http://planeteria.org/perl6/" accesskey="1" title="Planet Perl 6">Planet Perl 6</a></h1>
      <p id="slogan">Blog aggregation.  By your community, for your community.</p>
      <a href="http://planeteria.org/"><div id="header-image"><img src="/pub.d/img/planeteria_200.png" /></div></a>
   </div>

   <!-- content -->
   <div id="content-outer" class="clear"><div id="content-wrap">
      <div id="content">
<div id="left">

<!-- BEGIN FEEDS -->
   <div class = "entry">
      <div class="entrybody" id="http://www.nntp.perl.org/group/perl.perl6.announce/2014/07/msg714.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://www.nntp.perl.org/group/perl.perl6.announce/" title="perl.perl6.announce">Perl 6 Announce </a></div><br />
         

            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/07/msg714.html">Parrot 6.6.0 "Parrothead" released! by Bruce Gray</a> 
        </div>

         <div class="content">
            <p>As a dreamer of dreams and a travelin' man,<br/>    I have chalked up many a mile.<br/>    Read dozens of books about heroes and crooks,<br/>    And I've learned much from both of their styles.<br/>        -- Heard playing in Margaritaville bar,<br/>           in Orlando after YAPC::NA::2014.<br/><br/>On behalf of the Parrot team, I'm proud to announce Parrot 6.6.0, also known<br/>as "Parrothead".  Parrot (http://parrot.org/) is a virtual machine aimed<br/>at running all dynamic languages.<br/><br/>Parrot 6.6.0 is available on Parrot's FTP site<br/>(ftp://ftp.parrot.org/pub/parrot/releases/supported/6.6.0/), or by following the<br/>download instructions at http://parrot.org/download.  For those who would like<br/>to develop on Parrot, or help develop Parrot itself, we recommend using Git to<br/>retrieve the source code to get the latest and best Parrot code.<br/><br/>Parrot 6.6.0 News:<br/>    - Core<br/>        + Optimized method call overhead at compile-time in pmc2c directly<br/>          to avoid run-time overhead. Less temp. PMC's, less branches and<br/>          avoiding at least 2 costly C functions per method call.<br/>        + New arity warning:<br/>            "wrong number of arguments: %d passed, %d expected" [GH #1080]<br/>    - Build<br/>        + Workaround libffi-3.1 upstream bug in ffi.h [GH #1081]<br/>        + Expand pkg-config make macros in auto::libffi [GH #1082]<br/>    - Tests<br/>        + Fix t/pmc/filehandle.t on cygwin with newer Cwd &gt;= 3.40 [GH #1077]<br/>    - Community<br/>        + Our GSoC student passed the project midterm, having made great progress.<br/>          Congratulations to Chirag Agrawal!<br/>        + More parrot-bench numbers at https://github.com/parrot/parrot-bench,<br/>          now using gnuplot for all releases from 1.8.0 - 6.6.0, amd64 + -m32<br/><br/><br/>The SHA256 message digests for the downloadable tarballs are:<br/>6d21d3b733d980ab7cb8ee699c59e2b782d8a9c8c0e2cb06d929767e61024ace parrot-6.6.0.tar.gz<br/>08e9e02db952828f6ab71755be47f99ebc90894378f04d8e4d7f3bc623f79ff5 parrot-6.6.0.tar.bz2<br/><br/>Many thanks to all our contributors for making this possible, and our sponsors<br/>for supporting this project.  Our next scheduled release is at 19 Aug 2014.<br/><br/>Enjoy!<br/><br/></p>
          </div>
                        
         <p align="right">
            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/07/msg714.html">
            Perl 6 Announce | perl.perl6.announce | 
            2014-07-16 08:55:39</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=195">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/07/14/2014-28-moar-jit-string-overhaul-metaoperators/">2014.28: Moar jit, string overhaul, metaoperators, …</a> 
        </div>

         <div class="content">
            <p>Even though the previous post&#160;was a bit late and so this one covers a few days less, there&#8217;s interesting things to report. This week, raiph sent me a little summary of IRC activity again, which made it much easier for me. So thanks!</p>
<p>And now let&#8217;s see about those developments:</p>
<ul>
<li>hoelzro has continued work on the pod documentation attaching to entities (methods, classes, variables, &#8230;)</li>
<li>Will Coleda worked on cleaning up our spectest suite a bunch.</li>
<li>brrt has continued work on the JIT, namely making invocations work (both the spesh-improved &#8220;fast&#8221; invocation and the regular &#8220;slow&#8221; invocation).</li>
<li>There is now also a log that shows what opcodes end up being jitted and which opcodes cause the JIT to bail out due to NYI or other reasons.</li>
<li>Using this log, brrt concentrated on a bunch of opcodes that commonly cause bails.</li>
<li>Even I got some work in this week, namely having been inspired to hack on the JIT a bit myself; a bunch of ops can be compiled to regular C function calls, and those are sufficiently easy to add. I&#8217;ve added support for:
<ul>
<li>checkarity (which is responsible for giving run-time errors for wrong numbers of arguments if we couldn&#8217;t determine that at compile time)</li>
<li>push_o, pop_o, shift_o and unshift_o (to access lists and such)</li>
<li>atpos_o (getting an object in a list by index)</li>
<li>getattr_s (accessing a named attribute of an object; with help from brrt).</li>
</ul>
</li>
<li>Additionally, jnthn pointed out that deconts on containers that are quite simple (just a pointer indirection) can be spesh&#8217;d to look exactly like a spesh&#8217;d attribute access, so I was able to add support to spesh to simplify&#160;some deconts (which is an operation that used to cause the jit to bail out extremely often).</li>
<li>The top ops causing the JIT to bail during the compilation of CORE.setting are now:
<ul>
<li><span style="font-size: 18px; line-height: 29.7px;">&#8220;graphs_s&#8221; (which seems to be in every piece of code that follows &#8220;getattr_s&#8221; + &#8220;flattenropes&#8221;)</span></li>
<li>&#8220;ifnonnull&#8221; (100% of the &#8220;atpos_o&#8221; bails turned into &#8220;ifnonnull&#8221; bails)</li>
<li>param_rp_o (grab a required positional parameter)</li>
<li>newlexotic (related to exception handling)</li>
<li>the decont ops that were not spesh&#8217;d away.</li>
</ul>
</li>
<li>Sadly, MoarVM&#8217;s JIT compiler isn&#8217;t invoked at all in the case of On-Stack-Replacement optimized code, so none of our current benchmarks will show any change between JIT and no-JIT.</li>
<li>jnthn has started on the long-awaited rewrite of MoarVM&#8217;s string handling. Here&#8217;s a benchmark from jnthn&#8217;s machine <a href="http://jnthn.net/perl6/bench/2014-07-13.html">comparing last month&#8217;s release of MoarVM, the&#160;strref branch&#160;</a><span style="text-decoration: underline;">of MoarVM and last year&#8217;s rakudo-parrot.</span>&#160;(so no JIT yet). Across the board there&#8217;s improvements, but the most important improvement can be seen in the benchmarks that have &#8220;concat&#8221; in their names. These are the ones that concatenate strings.</li>
<li>jnthn greatly improved the metaoperator parsing in rakudo. The parser used to barf when it saw rather unwieldy operators with disambiguating brackets in them and set operations and such, for example&#160;(|)= or metaops with reductions like&#160;[[*]]=.</li>
<li>jnthn also merged the &#8220;lex2loc&#8221; branch that allows the Optimizer to turn lexical variables into locals if we can prove that they&#8217;re not accessed outside the frame they&#8217;re in. All backends benefit from this.</li>
<li>psch finished the implementation of the translate operator &#8220;tr///&#8221; and its return value.</li>
<li>thanks to japhb, more perl6-bench improvements landed.</li>
<li>A whole bunch of work has been put into improving the POD to HTML rendering by Mouq, lue and atroxaper, like the <a href="https://github.com/atroxaper/Pod-SAX">Pod::SAX</a>, <a href="https://github.com/lue/pod-walker">Pod::Walker</a>, and an HTML renderer based on both of these modules.</li>
<li>retupmoca added a module for interfacing with RabbitMQ to the ecosystem, called <a href="https://github.com/retupmoca/P6-Net-AMQP">Net::AMQP</a>.</li>
<li>lizmat worked some more on S22 and the related tests and did some more discussion about details with the community.</li>
<li>lizmat and retupmoca fixed problems for Supplies that are .tap&#8217;d multiple times.</li>
<li>masak added <a href="https://github.com/masak/data-pretty/">a module Data::Pretty</a> that will give common things you might want to &#8220;say&#8221; a friendlier output.</li>
<li>sergot posted about adding both a high level and a low level wrapper for OpenSSL <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_openssl_progress/">on his blog</a>.</li>
</ul>
<p>And if you&#8217;re interested in getting into Perl&#8239;6 Module Development, you could adopt bbkr&#8217;s MongoDB related modules <a href="https://github.com/bbkr/BSON">BSON</a>&#160;and <a href="https://github.com/bbkr/mongo-perl6-driver">MongoDB</a>.</p>
<p>The next releases are going to happen soon-ish. On Thursday, MoarVM is going to be released and the NQP + Rakudo release is&#160;going to follow this week, too.</p>
<p>Thank you for reading and may your week be filled with adorable kitties (or something equivalently cuddly, if you&#8217;re allergic).</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/195/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/195/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=195&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/07/14/2014-28-moar-jit-string-overhaul-metaoperators/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-07-14 17:05:16</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:filip.sergot.pl,2014-07-14:blog/perl6/gsoc_openssl_progress/">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://filip.sergot.pl/" title="filip.sergot.pl">Filip Sergot </a></div><br />
         

            <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_openssl_progress/">[GSoC] OpenSSL and IO::Socket::SSL status</a> 
        </div>

         <div class="content">
            <p>Hi!</p>

<p>I can proudly annouce that Perl 6 has <a href="https://github.com/sergot/openssl">OpenSSL bindings</a> available now! \o/</p>

<p>We have low level bindings and a high level wrapper, you can simply write:</p>

<pre><code>use OpenSSL;

my $ssl = OpenSSL.new;
# set up the connection here
# ...
$ssl.set-fd($fd);

$ssl.connect;

$ssl.write("GET /\r\n\r\n");
say $ssl.read(100);

$ssl.shutdown;
</code></pre>

<p>But if you don't want to use high level wrapper, you can use OpenSSL particular modules, like:</p>

<ul>
<li>OpenSSL::SSL - contains declaration of SSL struct and functions to hadnle it</li>
<li>OpenSSL::Ctx - contains declaration of SSL_CTX struct and functions to handle it</li>
<li>OpenSSL::Cipher and so on... (see <a href="https://github.com/sergot/openssl/tree/master/lib/OpenSSL">this</a>)</li>
</ul>

<p>The thing which is not clear above is the "set up the connection" section.
I've wrote <a href="https://github.com/sergot/io-socket-ssl">IO::Socket::SSL</a> which provides
high level API, the same as IO::Socket::INET, for SSL connections. It does 
"set up the connection" for us, using written in C client_connect function
which returns connection's file descriptor, it's needed by <code>$ssl.set-fd($fd)</code>,
it is because OpenSSL wants to own the connection.</p>

<pre><code>int client_connect(char *hostname, int port) {
    // ...
    return handle; // fd
}
</code></pre>

<p>We can do the same but in another way, we just have to pass a file descriptor to <code>.set-fd($)</code>.</p>

<p>Using IO::Socket::SSL, we can write:</p>

<pre><code>use IO::Socket::SSL;

my $sock = IO::Socket::SSL.new(:host&lt;filip.sergot.pl&gt;, :port(443));
$sock.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n");
say 'Response: ', $sock.recv;
</code></pre>

<p>Simple as that. :)</p>

<p>Anyway... The most exciting thingis, that <a href="https://github.com/sergot/http-useragent">HTTP::UserAgent</a>
can handle SSL now! Some bugs are known but it works in some cases.</p>

<p>As I <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_midterm/">wrote earlier</a>, we are able to connect to sites which use SSL like this:</p>

<pre><code>say $ua.get('https://filip.sergot.pl').content;
</code></pre>

<p>... above example returns 403 error just because my site doesn't use SSL but has this port (443) open.</p>

<h3>What's next?</h3>

<p>I want to get rid of bugs, implement server stuff of OpenSSL,
implement more features and do some cleaning after all.</p>

<p>There is only one month left! :)</p>
          </div>
                        
         <p align="right">
            <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_openssl_progress/">
            Filip Sergot | filip.sergot.pl | 
            2014-07-14 00:00:00</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=191">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/07/09/2014-27%c2%bd-a-boat-load-of-stuff-pointer-arithmetic-and-casting/">2014.27½: A boat load of stuff, pointer arithmetic and casting.</a> 
        </div>

         <div class="content">
            <p>Hey there! I&#8217;ve been a bit busier and distracted than usual this monday and tuesday. Sadly, I can&#8217;t really write the posts on sunday night and publish them when I get out of bed, as many nice things usually happen between sunday evening and monday noon <span class="wp-smiley emoji emoji-smile" title=":)">:)</span> Anyway, raiph combed through the IRC logs for me and collected a whole bunch of things. Here&#8217;s my rendition of the recent happenings, including up to today, as I&#8217;m running so late:</p>
<ul>
<li>lizmat led the discussion about the behavior of writing &#8220;my %h = { &#8230; }&#8221;, which is now considered assigning an itemized hash to a hash variable and gives a deprecation warning. Programmers might assume this would flatten the right hand side into the hash, but we found that behavior too magical. Thus, lizmat took care of that.</li>
<li>psch has been working (for a bit longer than just this past week, actually) on patches to teach rakudo to properly work with tr///, the &#8220;translation&#8221; operator. It&#8217;s supposed to return the number of characters changed in the source string, which was the most complicated part so far, it seems.</li>
<li>FROGGS taught all backends to do pointer arithmetic on CPointer repr&#8217;d things, allowing NativeCall to handle array-like things better.</li>
<li>FROGGS and sergot also implemented &#8220;NativeCast&#8221; for the NativeCall module, allowing a CPointer to be cast to any type we know. Apart from legit use cases, this allows <a href="https://gist.github.com/FROGGS/79fe3fcf799724fa6106">some scary, scary stuff</a> to be done <span class="wp-smiley emoji emoji-smile" title=":)">:)</span> (<a href="https://github.com/MoarVM/MoarVM/blob/master/src/6model/6model.h#L130">see also</a>)</li>
<li>The above work is an important&#160;stepping stone towards proper TLS support as well as supporting function pointers (for an OpenGL implementation, for example, when you want to have GL extensions)
<ul>
<li>Function Pointers need a bit more work in the perl6 Grammar (actually the Actions) so that we have proper type annotations for &amp;vars (like my &amp;funcptr:(int, int &#8211;&gt; int) or something)</li>
</ul>
</li>
<li>lizmat implemented and then reverted the &#8220;is cached&#8221; trait on methods, which is a bit harder than doing it for subs, because it has to factor in the &#8220;self&#8221;, as well. It&#8217;s not yet clear what the semantics are supposed to be.</li>
<li>lizmat has also continued working dilligently on the S11 and S22 things, among others the CompUnitRepo classes. I saw FROGGS do a few things in this area, too.</li>
<li>masak and krunen did a little &#8220;ping-pong programming session&#8221; to implement &#8220;emmabot&#8221;, a bot that should report on the daily ecosystem and Rakudo Star module testing results. Here&#8217;s the <a href="http://irclog.perlgeek.de/perl6/2014-07-04#i_8973500">section of the irclog</a>&#160;and here&#8217;s the <a href="https://github.com/masak/emmabot">repository for the bot</a>. I didn&#8217;t pay close attention to the conversation, but it might be a good example of how to do Behavior Driven Development <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></li>
<li>Speaking of the daily ecosystem module testing results, a result page now lives on one of our servers and <a href="http://host07.perl6.com:8080/report">can be reached here</a>, thanks to moritz, coke and colomon.</li>
<li>hoelzro invested a bunch of time into making the handling of #| (that is, attaching pod comments to variables, methods, classes, subs, &#8230;) to spec in rakudo and the test suite. Turned out to be quite a bit hairier than it looks from afar!</li>
<li>dwarring continued to improve our test coverage of the advent calendar posts.</li>
<li>japhb landed more improvements to perl6-bench, including extracting a bunch of smaller benchmarks from rc-forest-fire to help figure out why rakudo is so slow at it.
<ul>
<li>In doing so, we found out that rakudo easily beats perl5 at Big Rational Number arithmetic. Pretty neat!</li>
</ul>
</li>
<li>jnthn continued his usual work: stability and performance. Among other things, rakudo now turns more lexicals into local variables if it can and variables gained a new scope (&#8220;typevar&#8221;) that is interesting for optimizing roles and such.</li>
<li>jnthn helped japhb figure out what changes are needed to get perl6-bench to run well on windows. Here&#8217;s a <a href="http://jnthn.net/perl6/bench/2014-07-07.html">benchmark result from his machine</a>.</li>
<li>jnthn has made&#160;MoarVM&#8217;s bytecode specializer throw away guards that the specialized code ends up not relying upon. This reduces&#160;the number of times we deoptimize unnecessarily.</li>
<li>A few fun things on RosettaCode: TimToady&#8217;s &#8220;draw a clock&#8221; implementation <a href="http://rosettacode.org/wiki/Draw_a_clock#Perl_6">with braille-based graphics</a> and sml&#8217;s <a href="http://rosettacode.org/wiki/Dinesman%27s_multiple-dwelling_problem#Perl_6">parser for the Multiple Dwelling Problem</a>.</li>
<li>tadzik tried out <a href="https://i.imgur.com/myx2oNB.jpg">MoarVM on his phone</a>. Sadly, cross-compiling the MoarVM bytecode isn&#8217;t as trivial as it ought to be, as it contains file paths that would need fixing up&#8230;</li>
<li>Mouq is working on a Pod::Walker module to make creating Pod-To-* converters easier. In order to test it, he&#8217;s also refactoring Pod::To::HTML to be based upon it.</li>
<li>atroxpaper is working on a different Pod Walker, namely Pod::SAX. It will provide a stream-like/callback-like API to processing Pod files.</li>
<li>retupmoca fixed up the ecosystem to point&#160;IRC::Utils, Date::WorkdayCalendar, TestML and YAML at forked repositories on github that had pull requests open for longer than a month.</li>
<li>zengargoyle built <a href="https://github.com/zengargoyle/Text-Fortune">a module for fortune files</a>, grondilu started work on <a href="https://github.com/grondilu/chess">a module for &#8220;chess related stuff&#8221;</a>.</li>
<li>Coke dilligently made sure everything&#8217;s all right with the daily test runs. For example, att one point, rakudo.parrot had failed 1800 spectests (due to mostly a single problem).</li>
<li>JimmyZ updated MoarVM&#8217;s packaged uthash to the newest version.</li>
</ul>
<p>Here&#8217;s an update on the GSoC stuff:</p>
<ul>
<li>brrt recently <a href="http://brrt-to-the-future.blogspot.de/2014/07/moar-jit-progress.html">blogged about his progress</a>&#160;and has been working mostly on refactoring the code base and supporting invocation in the jit since then.</li>
<li>sergot has started working on OpenSSL related things. The repositories can be found <a href="https://github.com/sergot?tab=repositories">on his github</a>.</li>
<li>Unfortunately I have either not heard from the other projects or forgotten what I&#8217;ve heard, but I do recall that all our students have passed the mid-term evaluations!</li>
</ul>
<p>Apologies again for the much belated post. Hope y&#8217;all have a nice week <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p>
<p>Update: a few inaccuracies were fixed.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/191/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/191/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=191&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/07/09/2014-27%c2%bd-a-boat-load-of-stuff-pointer-arithmetic-and-casting/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-07-09 11:12:35</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:blogger.com,1999:blog-7864497598813874355.post-856259384406761420">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://brrt-to-the-future.blogspot.com/" title="brrt to the future">Bart Wiegmans </a></div><br />
                     <img class="face" src="https://avatars1.githubusercontent.com/u/1617678?s=400" width="" height="" alt="">

            <a href="http://brrt-to-the-future.blogspot.com/2014/07/moar-jit-progress.html">Moar JIT progress</a> 
        </div>

         <div class="content">
            <p>So, it seems I haven't blogged in 3 weeks - or in other words, far too long. It seems time to blog again. Obviously, <a href="http://p6weekly.wordpress.com/" target="_blank">timotimo++</a> has helpfully blogged my and other's progress in the meantime. But to recap, since my last blog the following abilities have been added to the JIT compiler:<br/><br/></p><ul><li>Conditionals and looping</li><li>Fast argument list access</li><li>Floating point and integer arithmetic</li><li>Reading and writing lexicals, and accessing 'world values'.</li><li>Fast reading and writing of object attributes</li><li>Improved logging and bytecode dumping. </li><li>Specialization guards and deoptimisation</li></ul>The last of these points was done just this week, and the problem that caused it and the solution it involves are relevant to what I want to discuss today, namely invocation.<br/><br/>The basic idea of speculative optimization - that is, what <i>spesh</i> does - is to assume that if all objects in the variable <b><code>$foo</code></b> have been of class <code>Foobar</code> before, they'll continue to be <code>FooBar</code> in the future. If that is true, it is often possible to generate optimized code, because if you know the type of an object you typically know its layout too. Sometimes this assumption doesn't hold, and <br/>then the interpreter must undo the optimization - basically, return the state of the interpreter to where it would've been if no optimization had taken place at all.<br/><br/>All the necessary calculations have already been done by the time <i>spesh</i> hands the code graph over to the JIT compiler, so compiling the guards  ought to be simple (and it is). However, an important assumption broke because of it. The MoarVM term for a piece of executable code is a 'frame', and the JIT compiler compiles whole frames at a time. Sometimes frames can be inlined to create bigger frames, but the resulting code always represents a single new frame. So when I wrote the code responsible for entering JIT-ted code from the interpreter, I assumed that the JIT-ted code represented an entire frame, at the end which the interpreter should return control to its caller.<br/><br/>During deoptimization, however, the interpreter jumps from <i>optimized</i>, type-specific code, to <i>safe</i>, unoptimized 'duck-typing' code. And so it must jump out of the JIT into the interpreter, because the JIT only deals with the optimized code. However, when doing so, the JIT 'driver' code assumed that control had reached the end of the frame and it ought to return to the caller frame. But the frame hadn't completed yet, so where the caller had expected a return value there was none.<br/><br/>The solution was - of course - to make the return from the current frame optional. But in true perl style, there is more than one way to do that. My current solution is to rely on the return value of the JIT code. Another solution is to return control to the caller frame - which is, after all, just a bit of pointer updating, and encapsulated in a function call, too - from the JIT code itself. Either choice is good, but they have their drawbacks, too. Obviously, having the driver do it means that you might return inappropriately (as in the bug), and having the JIT code might mean that you'd forget it when it is appropriate. (Also, it makes the JIT code bigger). Moreover, the invoked frame might be the toplevel frame in which case we shouldn't return to the interpreter at all - the program has completed, is finished, done. So this has to be communicated to the interpreter somehow if the JIT-code is considered responsible for returning to the frame itself.<br/><br/>The issues surrounding a JIT-to-interpreter call are much the same. Because MoarVM doesn't 'nest runloops', the JIT code must actually <i>return</i> to the interpreter to execute the called code. Afterwards the interpreter must return control back to the JIT code. Obviously, the JIT-ted frame hasn't completed when we return to the interpreter during a callout, so it can't return to its caller for the same reason. What is more, when calling out to the interpreter, the caller (which is JIT code) must store a <i>return address</i> somewhere, so the JIT driver knows where to continue executing after the callee returns.<br/><br/>I think by now it is too late to try and spare you from the boring details, but the summary of it is this: who or what should be responsible for returning control from the JIT-frame to the caller frame is ultimately an issue of API design, specifically with regards to the 'meaning' of the return value of the JIT code. If the 'driver' is responsible, the return value must indicate whether the JIT code has 'finished'. If the JIT code is responsible, the return value must indicate whether the whole program has finished, instead. I'm strongly leaning towards the first of these, as the question 'is my own frame finished' seems a more 'local' answer than 'is the entire program finished'.<br/><br/>With that said, what can you expect of me the coming week? With object access and specialization guards complete, the next step is indeed calling to interpreted code from the JIT, which I have started yesterday. I should also get at argument passing, object creation, decontainerization, 'special conditionals', and many other features of MoarVM. The goal is to find 'compilation blockers', i.e., operations which can't be compiled yet but are common, and work through them to support ever greater segments of compiled code.<br/><br/>In the long run, there are other interesting things I want to do. As I mentioned a few posts earlier, I'd like to evolve the 'Jit Graph' - which is a linked list, for now - into a 'real' graph, ultimately to compile better bytecode. An important part of that is determining for any point in the code which variables are 'live' and used, and which are not. This will allow us to generate code to load important variables - e.g., the pointer input arguments buffer - temporarily in a register so that further instructions won't have to load it again. It will also allow us to avoid storing a computed value in a local if we know that it will be overwritten in the next instruction anyway (i.e., is temporary). Because copy-instructions are both very frequent and potentially very costly (because they access memory), eliminating them as best as possible should result in great speed advantages. Ultimately, this will also allow us to move more logic out of the architecture-specific parts and into the generic graph-manipulating parts, which should make the architecture-dependent parts simpler. I won't promise all this will be done in a single summer, but I do hope to be able to start with it. <br/><br/><br/><br/><br/>
          </div>
                        
         <p align="right">
            <a href="http://brrt-to-the-future.blogspot.com/2014/07/moar-jit-progress.html">
            Bart Wiegmans | brrt to the future | 
            2014-07-06 05:49:21</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=189">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/06/30/2014-26-on-stack-replacement-stability/">2014.26: On-Stack-Replacement, stability, …</a> 
        </div>

         <div class="content">
            <p>Well, let&#8217;s see here &#8230;</p>
<ul>
<li>On-Stack-Replacement was merged by jnthn into master and seems pretty stable. It lets the bytecode specializer (and later the JIT compiler) kick in even when there are no invocations involved, like in a loop with many iterations.</li>
<li>There&#8217;s also improvements to inlining, especially stronger return handler elimination inside Rakudo.</li>
<li>Today, jnthn put a bunch of work into making MoarVM&#8217;s multithreading and async I/O stuff more robust. We&#8217;re regularly torture-testing <a href="https://github.com/tony-o/perl6-http-server-async/blob/master/ab.pl6">a very simple asynchronous server</a>&#160;using wrk (a tool like ab) to find race conditions and such. It&#8217;s not perfectly stable, but getting better.</li>
<li>Lizmat also made some async/threads fixes.</li>
<li>The JIT compiler for MoarVM learned how to handle lexicals (bindlex and getlex), simple attribute access for objects and &#8220;World Values&#8221; (most commonly compile-time constants and classes/subs)</li>
<li>A talk by jnthn on garbage collectors in general and the garbage collector of MoarVM in particular has made it onto the public &#8216;net. You can <a href="http://www.infoq.com/presentations/terminology-garbage-collector">watch it on InfoQ</a>.</li>
<li>There&#8217;s <a href="https://github.com/japhb/perl6-bench/tree/master/perl6">a few new benchmarks</a> in the perl6-bench repository. As opposed to the big chunk of microbenchmarks we&#8217;ve had so far, these are a bit bigger. They were taken from <a href="http://rosettacode.org/wiki/Category:Perl_6">RosettaCode</a>.</li>
<li>Japhb also started working on a &#8220;history&#8221; comparison type for perl6-bench, but it doesn&#8217;t have an output functionality for html graphs.</li>
<li>Here&#8217;s a <a href="http://t.h8.lv/p6bench/2014-06-29-OSR_inlinefix.html">couple of days old benchmark run</a> that compares rakudo and nqp with and without a recent fix to OSR and inlining to a 2014.06 released rakudo/nqp as well as perl5. This doesn&#8217;t include the JIT, unfortunately, and the difference is only really noticable in a few of the graphs (damn you, log-log scale!). I guess for next week I ought to make a somewhat more comprehensive benchmark with older versions and maybe even with the JIT.</li>
<li>FROGGS&#8217; panda version with CPAN support can now extract .tar.gz files it pulls from the &#8216;net!</li>
<li>Someone added a bunch of examples to RosettaCode, but I couldn&#8217;t easily figure out which ones. But since RosettaCode is constantly growing anyway, it&#8217;s always a good time to check out what&#8217;s new!</li>
</ul>
<p>I&#8217;m already looking forward to next week&#8217;s changes, there&#8217;s lots of stuff that still needs doing. For example, we&#8217;ve been avoiding the string (actually rope) rewrite for a long time and MoarVM&#8217;s performance for things like concatenation has suffered greatly for it.</p>
<p>Anyway, that&#8217;s it for now. I wish you a pleasant week <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/189/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/189/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=189&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/06/30/2014-26-on-stack-replacement-stability/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-06-30 20:12:21</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://6guts.wordpress.com/?p=325">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://6guts.wordpress.com/" title="6guts">Jonathan Worthington </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/5999d5d26089eb4019867dc7705c41a9" width="" height="" alt="">

            <a href="http://6guts.wordpress.com/2014/06/25/what-ive-been-working-on-and-whats-coming-up/">What I’ve been working on, and what’s coming up</a> 
        </div>

         <div class="content">
            <p>It&#8217;s been a little while since I wrote an update here, and with a spare moment post-teaching I figured it was a nice time to write one. I was lucky enough to end up being sent to the arctic (or, near enough) for this week&#8217;s work, meaning I&#8217;m writing this at 11pm, sat outside &#8211; and it&#8217;s decidedly still very light. It just doesn&#8217;t do dark at this time of year in these parts. Delightful.</p>
<h3>Asynchronous Bits</h3>
<p>In MoarVM and Rakudo 2014.05, basic support for asynchronous sockets landed. By now, they have also been ported to the JVM backend. In 2014.06, there were various improvements &#8211; especially with regard to cancellation and fixing a nasty race condition. Along the way, I also taught MoarVM about asynchronous timers, bringing time-based scheduling up to feature parity with the JVM backend. I then went a step further and added basic file watching support and some signals support; these two&#160;sadly didn&#8217;t yet make it to the JVM backend. On signals, I saw a cute lightning talk by lizmat using signal handling and phasers in loops to arrange Ctrl+C to exit a program once a loop had completed its current iteration.</p>
<p>While things basically work, they are not yet as stable as they need to be &#8211; as those folks implementing multi-threaded asynchronous web servers and then punishing them with various load-testing tools are discovering. So I&#8217;ll be working in the next weeks on hunting down the various bugs here. And once it&#8217;s stable,&#160;I may look into optimizations, depending on if they&#8217;re needed.</p>
<h3>Various Rakudo fixes an optimizations</h3>
<p>I&#8217;ve also done&#160;various assorted optimizations and fixes in Rakudo. They&#8217;re all over the map: optimizing for 1..100000 { } style loops into cheaper while loops, dealing with various small bugs reported in the ticket system, implementing a remaining missing form of colonpair syntax (:42nd meaning nd =&gt; 42), implementing Supply.on_demand for creating supplies out of&#8230;well&#8230;most things, optimizing push/unshift of single items&#8230;it goes on. I&#8217;ll keep trucking away at these sorts of things over the coming months; there&#8217;s some bugs I really want to nail.</p>
<h3>MoarVM&#8217;s dynamic optimizer</h3>
<p>A bunch of my recent and current work revolves around MoarVM&#8217;s dynamic bytecode optimizer, known as &#8220;spesh&#8221; (because its primary &#8211; though not only &#8211; strategy is to specialize bytecode by type). Spesh <a href="http://6guts.wordpress.com/2014/04/12/optimization-concurrency-and-moar/">first appeared</a> in the 2014.04 release of MoarVM.&#160;Since then, it&#8217;s improved in numerous ways. It now has a logging phase, where it gathers extra type information at a number of places in the code. After this, it checks if the type information is stable &#8211; which is often the case, as&#160;most potentially polymorphic code is monomorphic (or put another way, dynamic languages are mostly just eventually-static).&#160;Provided we did get consistent types recorded, then guard clauses are inserted (which cheaply check we really did get the expected type, and if not triggering deoptimization &#8211; falling back to the safe but slower bytecode). The types can them be assumed by the code that follows, allowing a bunch of optimizations to code that the initial specializer just couldn&#8217;t do much with.</p>
<p>Another important optimization spesh learned was optimizing dispatch based on the type information. By the time the code gets hot enough to specialize, multiple dispatch caches are primed. These, in combination with type information, are used to resolve many multiple dispatches, meaning that they become as cheap as single dispatches. Furthermore, if the callee has also been specialized &#8211; which is likely &#8211; then we can pick the appropriate specialization candidate right off, eliminating a bunch of duplicate guard checks. Everything described so far was on 2014.05.</p>
<p>So, what about 2014.06? Well, the 2014.05 work on dispatch &#8211; working out exactly what code we&#8217;re going to be running &#8211; was really paving the way for a much more significant optimization: inlining. 2014.06 thus brought basic support for inlining. It is mostly only capable of NQP code at the moment, but by 2014.07 it&#8217;ll be handling inlining the majority of basic ops in Rakudo that the static optimizer can&#8217;t already nail. Implementing inlining was tricky in places. I decided to go straight for the jugular and support multi-level inlining &#8211; that is, inlining things that also inline things. There are a bunch of places in Perl 6 this will be useful; for example, ?$some_int compiles to prefix:&lt;?&gt;($some_int), which in turn calls $some_int.Bool. That is implemented as nqp::p6bool(nqp::bool_I(self)). With inlining, we&#8217;ll be able to flatten away those calls. In fact, we&#8217;re just a small number of patches off that very case actually being handled.</p>
<p>The other thing that made it tricky to implementing inlining is that spesh is a speculative optimizer. It looks at what types it&#8217;s seeing, and optimizes assuming it will always get those types. Those optimizations include inlining. So, what if we&#8217;re inlining a couple of levels deep, are inside one of the inlined bits of code, and something happens that invalidates our assumptions? This triggers de-optimization. However, in the case of inlining, it has to go back and actually create the stack frames that it elided creating thanks to having applied inlining. This was a bit fiddly, but it&#8217;s done and was part of the 2014.06 release.</p>
<p>Another small but significant thing in 2014.06 is that we started optimizing some calls involving named parameters to pull the parameters out of the caller&#8217;s callsite by index. When the optimization applies, it&#160;saves doing any string comparisons whatsoever when handling named parameters.</p>
<p>So 2014.07 will make inlining able to cope better with Rakudo&#8217;s generated code, but anything else? Well, yes: I&#8217;m also working on OSR (On Stack Replacement). One problem today is that if the main body of the program is a hot loop doing thousands of iterations, we never actually get to specialize the loop code (because we only enter the code once, and so far it is repeated calls to a body of code that triggers optimization). This is especially an issue in benchmarks, but can certainly show up in real-life code too. OSR will allow us to detect such a hot looop exists in unoptimized code, go off and optimize it, and then replace the running code with the optimized version. Those following closely might wonder if this isn&#8217;t just a kind of inverse de-optimization, and that is exactly how I&#8217;ll implement it: just use the deopt table backwards to work out where to shove the program counter. Last but not least, I also plan to work on a range of optimizations to generic code written in roles, to take away the genericity as part of specialization. Given the grammar&#160;engine uses roles in various places, this should be a healthy optimization for parsing.</p>
<h3>JIT Compilation for MoarVM</h3>
<p>I&#8217;m not actually implementing this one; rather, I&#8217;m mentoring brrt++, who is working on it for his Google Summer Of Code project. My work on spesh was in no small part to enable a good JIT. Many of the optimizations that spesh does turn expensive operations with various checks into cheap operations that just go and grab or store data, and thus should be nicely expressible in machine code. The JIT that brrt is working on goes from the graph produced by spesh. It &#8220;just&#8221; turns the graph into machine code, rather than improved bytecode. Of course, that&#8217;s still a good bit of work, especially given de-optimization has to be factored into the whole thing too. Still, progress is good, and I expect the 2014.08 MoarVM release will include the fruits of brrt&#8217;s hard work.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/6guts.wordpress.com/325/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/6guts.wordpress.com/325/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=6guts.wordpress.com&amp;blog=14597269&amp;post=325&amp;subd=6guts&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://6guts.wordpress.com/2014/06/25/what-ive-been-working-on-and-whats-coming-up/">
            Jonathan Worthington | 6guts | 
            2014-06-25 22:20:06</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:filip.sergot.pl,2014-06-25:blog/perl6/gsoc_midterm/">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://filip.sergot.pl/" title="filip.sergot.pl">Filip Sergot </a></div><br />
         

            <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_midterm/">[GSoC] Midterm report</a> 
        </div>

         <div class="content">
            <p>Hi!</p>

<p>I have just submitted my midterm evaluation questionnaire! This part of Google Summer of Code was really great, I learnt a lot. I want to write here about my progress in the project.</p>

<h1>What did I do during the first part of Google Summer of Code?</h1>

<p>Here you can find my previous posts about GSoC:</p>

<ul>
<li><a href="http://filip.sergot.pl/en/blog/perl6/gsoc_http::headers/">HTTP::Headers </a></li>
<li><a href="http://filip.sergot.pl/en/blog/perl6/gsoc_http_cookies_message_datetime_parse/">HTTP::Message, HTTP::Cookies and DateTime::Parse</a></li>
</ul>

<h1>What's new?</h1>

<p>The <strong>important</strong> thing is that I merged all the HTTP::* repos into one, <a href="https://github.com/sergot/http-useragent/">HTTP::UserAgent</a>, you can still find old repos, I just wanted to keep the commits history.</p>

<p>After this period, a simple HTTP client is available, just:</p>

<pre><code>    use HTTP::UserAgent :simple;

    my $content = get "filip.sergot.pl";
    say $content;
</code></pre>

<p>or:</p>

<pre><code>    getprint "filip.sergot.pl";
</code></pre>

<p>That's how you can print the sourcecode of a website.</p>

<p>We have also a prototype of more complex UserAgent working.</p>

<pre><code>    use HTTP::UserAgent;

    my $ua = HTTP::UserAgent.new( :useragent('firefox_linux') );
    say $ua.get('http://ua.offensivecoder.com/').content;
</code></pre>

<p>Wait! But what is the 'firefox_linux' there? And here the HTTP::UserAgent::Common comes, providing the list of most commonly used User-Agents.
It is built according to this <a href="http://techblog.willshouse.com/2012/01/03/most-common-user-agents/">article</a>:</p>

<pre><code>    chrome_w7_64   =&gt; 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36
                       (KHTML, like Gecko) Chrome/34.0.1847.131 Safari/537.36',

    firefox_w7_64  =&gt; 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0)
                       Gecko/20100101 Firefox/29.0',

    ie_w7_64       =&gt; 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0;
                       rv:11.0) like Gecko',

    chrome_w81_64  =&gt; 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36
                       (KHTML, like Gecko) Chrome/34.0.1847.131 Safari/537.36',

    firefox_w81_64 =&gt; 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:29.0)
                       Gecko/20100101 Firefox/29.0',

    mob_safari_osx =&gt; 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_1 like Mac OS X)
                       AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D201
                       Safari/9537.53',

    safari_osx     =&gt; 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2)
                       AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3
                       Safari/537.75.14',

    chrome_osx     =&gt; 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2)
                       AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.131
                       Safari/537.36',

    firefox_linux  =&gt; 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:29.0)
                       Gecko/20100101 Firefox/29.0',

    chrome_linux   =&gt; 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36
                       (KHTML, like Gecko) Chrome/34.0.1847.132 Safari/537.36',
</code></pre>

<p>So we don't have to remember all those crazy names in User-Agent header content, anyway, we are still able to write what we want.</p>

<h1>What's next?</h1>

<p>Here is the plan for the next part of GSoC:</p>

<ul>
<li>HTTP::UserAgent: implement handling cookies</li>
<li>implement TLS support</li>
<li>write rich spectests</li>
<li>write wide, rich documentation</li>
</ul>
          </div>
                        
         <p align="right">
            <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_midterm/">
            Filip Sergot | filip.sergot.pl | 
            2014-06-25 00:00:00</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=184">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/06/24/2014-25-optimizations-more-cpan-more-gsoc-yapcna-and-a-release/">2014.25: optimizations, more CPAN, more GSoC, YAPC::NA, and a release.</a> 
        </div>

         <div class="content">
            <p>I&#8217;m sorry for keeping you waiting yet again; the GulaschProgrammierNacht 14 kept me busy and after it was done I was as tired as I haven&#8217;t been for a long time <span class="wp-smiley emoji emoji-wink" title=";)">;)</span></p>
<p>Here&#8217;s what&#8217;s been going on:</p>
<ul>
<li>FROGGS is continuously working on the CPAN support for panda. His code can query and fetch distributions from CPAN already, and decompress the .gz part of the .tar.gz, but the Archive::Tar module still needs to be finished.</li>
<li>jnthn added the very first steps towards an On-Stack-Replacement operation. OSR is required to optimize hot for loops, for example. Usually, we trigger optimization when a function is called often enough, but with such a for loop, all we do is jump back over the same code over and over. Instead of &#8220;jump to this different function&#8221;, OSR has to directly jump over into optimized bytecode (or jitted bytecode) and make sure variables on the stack and exception handlers and all those things are kept in order.</li>
<li>The YAPC::NA (&#8220;Yet Another Perl Conference, North America&#8221;) is currently happening. As far as I&#8217;ve heard, there are&#160;only two Perl&#8239;6 related talks. Find the complete list of talks <a href="http://www.yapcna.org/yn2014/talks">on the official website</a>. A bunch of videos have already been uploaded to youtube at the time of writing. Find them in the <a href="https://www.youtube.com/user/yapcna/videos?view=0&amp;shelf_id=1&amp;sort=dd">YAPC NA Youtube Account</a>. The Perl Six Youtube account also has a <a href="https://www.youtube.com/playlist?list=PLRuESFRW2Fa77XObvk7-BYVFwobZHdXdK">playlist of english perl&#8239;6 related talks</a>&#160;that contains the YAPC::NA talks.</li>
<li>lizmat, with a bit of help from jnthn, optimized say and note if they are called with a single Str argument.</li>
<li>lizmat also worked more on the CompUnitRepo stuff in Rakudo as well as CPAN, implementing more and more stuff from S11.</li>
<li><span style="font-size: 18px; line-height: 29.7px;">lizmat implemented an :initial argument for my zip_latest Supply combinator. It helps in use cases where you want to get a combination of values from all supplies even if not all supplies have supplied their very first value yet.</span></li>
<li>jnthn fixed the behavior of the &#8220;item&#8221; sub. the &#8220;item&#8221; method has always been correct, however.</li>
<li>FROGGS implemented subbuf-rw and the &#8220;a&#8221; and &#8220;Z&#8221; directives to the unpack method. I&#8217;m guessing this is in order to satisfy the needs of&#160;Archive::Tar.</li>
<li>we updated parrot&#8217;s required revision to version 6.5.0, giving us nice things like unicode database fixes and faster core PMC classes.</li>
<li>carbin fixed the default file mode in MoarVM&#8217;s file ops to be 0666.</li>
<li>Mouq, smls and teodozjan did a bunch of work on <a href="http://doc.perl6.org">doc.perl6.org</a>; Among others, they implemented a design overhaul that had been made by another member of the community some time ago. It&#8217;s easier to find one&#8217;s way around the docs now and there&#8217;s more content!</li>
<li>japhb added a bunch of new bigger benchmarks to perl6-bench and also started implementing &#8220;history&#8221; comparisons&#160;among other things.&#160;Those&#160;show the timings of single benchmarks in different revisions of a backend as one line.</li>
<li>dwarring fixed and created more tests for the advent calendar articles.</li>
<li>masak wrote up an interesting article and with a bunch of code <a href="http://strangelyconsistent.org/blog/boxes-and-pebbles">on his blog</a>. It discusses and solves a problem called &#8220;Boxes and Pebbles&#8221;.</li>
<li>softmoth improved the look of <a href="http://modules.perl6.org/">modules.perl6.org</a>.</li>
<li>bebus reported being able to run Perl&#8239;6 on a Nexus 4 android phone!</li>
</ul>
<p>Another thing that&#8217;s happened is that the Rakudo 2014.06 compiler release got out. There&#8217;s <a href="https://github.com/rakudo/rakudo/blob/nom/docs/ChangeLog">the Rakudo changelog</a>, the NQP changelog&#160;and <a href="https://github.com/MoarVM/MoarVM/blob/master/docs/ChangeLog">the MoarVM changelog.</a>&#160;The Parrot changelog can be found on <a href="http://parrot.org/news/2014/Parrot-6.5.0">the Parrot website</a>, which also contains the <a href="http://parrot.org/zyroz4">latest progress report of the Parrot GSoC student</a>.</p>
<p>Here&#8217;s a bit of an update for the GSoC projects:</p>
<ul>
<li>This week, mentors are submitting evaluations to Google for their students. I expect all three students to be allowed to continue; I&#8217;ve personally been pleased with their work!</li>
<li>brrt just pushed support for passing and returning floating point values to and from methods and then added some arithmetic operations. I didn&#8217;t run tests myself, but the fibonacci example supposedly runs 2.5x faster with the JIT&#160;than without. A pretty good start!</li>
<li>filip sergot built a binary &#8220;http-download&#8221; that is a very thin frontend to <a href="https://github.com/sergot/http-useragent">HTTP::UserAgent</a> that can handle encodings like the chunked transfer encoding. Of course you can do your own requests rather than just downloads with that module.</li>
</ul>
<p>There&#8217;s also a low-hanging fruit for you to try to fix:</p>
<ul>
<li>MoarVM can be compiled with &#8220;computed goto&#8221; or without. On GCC, we could turn it on unconditionally and it&#8217;d result in a very nice speed boost, but our build system (more correctly: MoarVM&#8217;s Configure.pl) doesn&#8217;t do that yet. Should be fairly easy to fix and be quite helpful. <strong>EDIT</strong>: FROGGS did this just now.</li>
</ul>
<p>Special thanks to raiph who pointed out a whole bunch of items for this week&#8217;s post that I&#8217;d have otherwise missed! Hope you&#8217;ll have a nice rest-of-week <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p>
<p>- Timo</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/184/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/184/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=184&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/06/24/2014-25-optimizations-more-cpan-more-gsoc-yapcna-and-a-release/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-06-24 18:24:37</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://pugs.blogs.com/pugs/2014/06/railsgirlstw-panel-transcript.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://pugs.blogs.com/pugs/" title="Pugs">Audrey Tang </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/f63068d724b6084f4807a86426b3b9eb" width="" height="" alt="">

            <a href="http://pugs.blogs.com/pugs/2014/06/railsgirlstw-panel-transcript.html">RailsGirls.tw Panel Transcript</a> 
        </div>

         <div class="content">
            <p>2014-04-27, TEDxTaipei, https://www.youtube.com/watch?v=E6xIcKTRZ00
<br/>
Hazel (Moderator), Linda (RailsGirls), Charles (JRuby), Matz (Ruby), Audrey.
</p><hr/>
<p><strong>Hazel</strong>: Now, we go for the first question. Are you all ready? The first question is "Today, working independently is no longer popular anymore. Team cooperation has become a trend in the age of cross-discipline working."</p>
<p>&#8220;What we learn from programming &#8212; will it help us to do a better job in real life? Maybe&#160; &#8212; for the males and for females &#8212; for everybody."</p>
<p><strong>Linda</strong>: Hello. I suppose that when people told me that learning to program teaches you how to think, I didn't understand it in the beginning. On learning, I've worked with engineering teams a lot. It really helps you structure it in a way that it needed for the engineering to work on problems.</p>
<p>For instance, I would come up with a feature, and they'd go, "Hey, OK, let's do this." And by being able to understand how the code works, or how that product is built, or what kind of features are feasible to build, and so forth, even though I didn't work as an engineer, helped me work better and more efficiently.</p>
<p>[laughter and applause]</p>
<p><strong>Charles</strong>: It's interesting, because just in the past few weeks, my wife has decided to start to learn how to program. She's very excited about the possibilities. She was a little frightened at first, of the difficulties she might run into. But, for years, she's been the primary chef in the house. She's taken care of the kids. She's knitted. She's done other crafts and projects,</p>
<p>What she started to see is that what she's learning in programming fits very well with other methodical, recipe-type systems, and building of crafts, building of a meal, things like that, as tying into the rest of her life, the more that she picks up programming. It's been exciting to see that.</p>
<p>[laughter]</p>
<p><strong>Audrey</strong>: Since Linda and Charles have addressed programming&#8217;s importance so well, I&#8217;d like to talk a little bit about the team working part. I think part of being an audience &#8212;&#160; as we know &#8212; being an audience is the ability to listen.</p>
<p>I think a lot of the experience in programming nowadays online, whether it happens on GitHub or other social events, is the ability to listen, or to perceive, or see each other's viewpoints. We see that on GitHub issues, we see that on mailing lists, we see that on IRC, we see that on wikis.</p>
<p>I think, those taken together is much more important than code itself. As we would see that code itself, as <em>why the lucky stiff</em> re-tweeted, that code never lasts long anyway. It's always replaced by something new.</p>
<p>But human memories, the shards of the souls that we share together, those may not be as precise as code, but they outlast code. Community, people, their relationships, their links, they outlast code.</p>
<p>Code is this wonderful opportunity as an anchor for us to learn to listen to each other, such that we can make something more beautiful and that's objectively there. It's like an artifact, a pyramid or something that we could see, growing day to day objectively, as a result of our being generous to each other.</p>
<p>I think being able to listen, and to be able to give back is the most important thing for us to learn as part of programming in the teamwork that's the future. Thank you.</p>
<p>[applause]</p>
<p><strong>Matz</strong>: I think I have to say something.</p>
<p>[laughter]</p>
<p><strong>Matz</strong>: Despite the original question, in the past, the creating serious software is not this independent work, so they couldn't create the serious software alone. They have to work in the same company and in the same project, then working together as a team, maybe in the hundreds of programmers to create the systems like IBM&#8217;s System/360 or something.</p>
<p>But there are technologies that change the situation, like, for example, Ruby. Ruby was started by me alone as an amateur programming language designer. I created the first snowball and put it into the Internet, so that everyone gathers together. Then we work together over the Internet.</p>
<p>Ruby's getting better and bigger, the committee has grown, and JRuby has been created, and then Rubinius, and so many projects with Rails, or Sinatra, or even other communities like the RailsGirls, that sort of thing. That means we can be more flexible using technology.</p>
<p>We can work alone, the individual can start great things using the power of the Internet. At the same time, using &#8212; say community, Internet, or even GitHub &#8212;we can be socialized to form the power to create great thing by programming.</p>
<p>I believe that is the flexibility, like from individual to huge community, like millions of people. We can choose, not by the company, not by the project, not by the organization or something. That kind of flexibility is the power of the 21st-century I believe.</p>
<p><strong>Charles</strong>: One more thought. It occurred to me that one of the biggest advantages that you'll get out of learning how to program, is the fact that you're going to be able to cooperate, and understand, and work with other programmers, which there are more and more of us.</p>
<p>There's more software being created every day. It runs the world, and being able to be part of the world, I think means that almost everybody should learn how to do some programming. You've got to understand how the world around you works. It also, as Matz was talking about starting Ruby, you don't know if that piece of code that you write tomorrow, that one project that you build, might be the seed that grows into a forest.</p>
<p>The project that Matz started years ago is why we're all here, why we have wonderful events, why we're creating such amazing applications. It could be any one of you. You could be the next one to create something that grows into that forest of a wonderful programmed world.</p>
<p>[applause]</p>
<p><strong>Hazel</strong>: Could you provide some advice for people want to promote programming, to avoid a situation of this [gender exclusion]. May you, Linda, can share some ideas about that. What can you think effectively reduce these uncomfortable situations like this? Maybe in the case, or your ideas, please for Matz, and for Charles, maybe you can share what you see in this IT industry.</p>
<p><strong>Audrey</strong>: Hazel refers to a private conversation we had before the conference, and the basic point was that Taiwan, which is culturally influenced both by the Japanese stereotype of women, and also by the confusion Chinese treatment of women.</p>
<p>There is this sense of a politeness that's built-in, not only into women, but into everybody, so that when we are joining a community, we tend to reach a safe point where we think that we establish some sort of sympathy, or empathy, or understanding with the group, before we even start to speak, or even we start to raise our hand. This is a very East Asian thing.</p>
<p>But in particular for women, if they see a whole space composed of men, or of people who are gender expressions that differ so much from theirs, it's very difficult to establish this kind of rapport, or mutual support sense, before starting to join, or start participation. That's a real entry barrier, as Hazel mentioned herself. It's an artifact of the community's composition, and the culture of things in Taiwan, or in East Asia.</p>
<p>It's not specific to women alone. As for how to fix this, well some people do that by sheer obliviousness, like to their social scripts. They are like, "Well, we shall dive in right here."</p>
<p>[laughter]</p>
<p><strong>Audrey</strong>: When they just jump into a community and start asking stupid questions, some people would say, "Hey, why are you here? You're out of line there, right?" But then [laughs] after a while, they start to become part of the community, and that's actually the fastest way.</p>
<p>As Matz actually implied, the fastest way to get a community going is by releasing something imperfect. It's about like posting your question, and then answering it in a very bad way. A lot of you would join saying, "Hey, there's a better way to do that."</p>
<p>So people who are oblivious to this kind of social training, they could actually enter that kind of online technical community much easier, and with much less difficulty &#8212; even after a lot of argument ands fighting &#8212; than people who are polite, and than people who then shift into some other community who are more friendly, like making digital art, or things like that.</p>
<p>Actually, a suggestion I would make is to be <em>strategically</em> oblivious. [laughs] Just to make some headway into it, pretending that you're already part of the group, and that's a self-fulfilling prophecy, and you will become part of the group in no time.</p>
<p><strong>Linda</strong>: I segue into it with a very personal experience. I wasn't a professional programmer, and still I'm not a professional programmer, besides so I was absolutely oblivious to all of that life, all of that trauma, and all of the drama that surrounded the female in technology, and that sorts of problems.</p>
<p>I just wanted something that helps me learn more programming. I didn't know that the word &#8220;girls&#8221; would offend many Americans, and I&#8217;d like to think I was able to build this platform because I&#8217;m not a native speaker, I didn't know that they're supposed to teach programming in this manner or that manner.</p>
<p>There were so many things that we didn't know, which afforded all of us to experiment, and do things and not worry too much about what happened.</p>
<p>I totally agree with the thought that, that the best way is to barge into a community and start asking questions, but I come from a culture that it also very important to be like others. Finnish people tend to be relatively silent and observe, than raise questions. One of the things that I deliberately wanted to have in the RailsGirls workshops was some sort of cultural section, where we talk about people &#8212; like who are the people in the Rails community.</p>
<p>We talk about Matz, we talk about DHH , we talk about _why, and we talk about the FridayHug. We talk about all of these other institutions and things that I'm quoting, because it's not only about the code.</p>
<p>Then we encourage people to become a part of their local group, and coming to these events, and have the self assurances that, "OK, I know enough to be able to go into a meet-up, and be a part of something bigger. I'm probably still not there technically, but I&#8217;d love to see DHH again.</p>
<p>[laughs]</p>
<p><strong>Charles</strong>: One of the things, I wanted to make sure, it's been said in various ways all day today, but you ever feel like you're being excluded, or singled out, just always remember, it's not your fault.</p>
<p>Everybody's going to face that, not just the programming community. Ask any over-40-years-old programmers how welcome they feel in Silicon Valley, San Francisco, and it's that sort of thing. Look, it's not your fault, and remember that the reason we have events like this, and the reason this has become such a major issue, a feature point of discussion, is because we're trying to fix it.</p>
<p>There are resources that will help you avoid that exclusion, that ostracism from the community. Just keep fighting through it, and we'll try and help you as much as we can along the way.</p>
<p>[laughter]</p>
<p><strong>Matz</strong>: Yeah, it's on. Yeah, just for a little more.</p>
<p><strong>Matz</strong>: [laughs] In CRuby, we had say 90-something core contributors who had the privilege to commit to the central repository. Some of them are Japanese, some of them are living in the United States, and some of them are European. I don't know who any of the Taiwanese or the Chinese. Unfortunately, I know no female contributor yet, but I'm pretty expecting.</p>
<p>Actually, I don't care about this aspect, that gender, and nationalities, and age, and titles, anything. We had very young contributors like 18, or something, and very old contributors like 50s, 60s. But actually, I don't care. As Audrey said, we want to value people by their values. I think that being fair, and that don't care too much about the other attributes is that crucial for the community management.</p>
<p>Our community has a very good tradition to be nice, so the Ruby community is known to be nice people. As Linda said, the community, or the open source, or even Internet, is a human thing, so we are human, and we have hearts. The communication between hearts is the very important even in the software programming, software creation, or anything.</p>
<p><strong>Charles</strong>: Sorry, just one quick inspirational story. I went to a conference in Tunisia in 2013, and it was about 100 people for a Java event. Very first time, done at a technical university in Tunis, and the conference, and the University had a majority of women. It was the first time I'd ever seen that anywhere in the world, and I was amazed by it.</p>
<p>But they were really excited, and they were pretty much in charge there. [laughs] They were running that thing. But it was just great to see that there are parts of the world where they were already getting that going, and starting to get more women involved in technology. I'm just thrilled that it's happening here, and happening around the world.</p>
<p>Thank you to Linda for arranging this, and for the Rails Bridge folks for doing the sessions they're doing in the US. It's really an exciting time, and I'm glad that there are so many more interesting, wonderful programmers entering the community now.</p>
<p><strong>Linda</strong>: Yesterday in RubyConf Taiwan, there was a lot of RailsgGrls alumni who participated, and volunteered over there, and helped organize the event, and I think it's almost like a fairytale that all of the sudden we would have hundreds of women taking part as speakers in conferences.</p>
<p>But I do wish that all of you who volunteered yesterday will keep on programming, and next year you will probably give a talk over there, and be there, and we will have more women as speakers, or so in conferences.</p>
<p><strong>Hazel</strong>: RailsGirls hosted this event, so let's talk about the RailsGirls community. According to your observation, what are the factors in this community that encourage female to access programming?</p>
<p><strong>Linda</strong>: I think that might have a lot of broadening up, because RailsGirls, again was a very personal thing to teach myself programming, and it's definitely not a panacea to every single female, like getting more females in programming world, and as Charles mentioned, there's a lot of organizations that are doing wonderful work for this in very different ways. Can repeat the question? What was that?</p>
<p>[laughs]</p>
<p><strong>Hazel</strong>: Maybe we can change the question about what is the factors? <strong>Linda</strong>: Yeah, what are the factors in general in bringing more females to programming? As I mentioned in my talk, for me it was the practical application, the expressing myself and the creative side of things that initially gave me that aha moment, and I think there's almost two types of click moments in programming:&#160; There's the very tangible moment when you see something come alive on the screen, and like, "Oh wow, I made that?" Then there's the more intellectual pleasure of seeing something like beautiful code that is formulated, and getting that "Whoa," an intellectual aha moment.</p>
<p>Sometimes our schooling system aims for the latter one, where we learn about arrays for a long time, and before having that tangible moment of aha. Maybe one way of getting more women involved in general is to have more of those first moments.</p>
<p><strong>Audrey</strong>: To extend the analogy, I'd like to introduce the question, "Why do people write poetry?" People write poetry because they feel very strongly about something. Because of that, a lot of teenagers write poetry, because they feel very strongly about something.</p>
<p>[laughter]</p>
<p><strong>Audrey</strong>: Only a few of us continue to write after our teenage. But in any case, that was the spark. That was the first moment. If you, whatever your gender or age, if you start caring very much about something, there's got to be way that programming is going to be helpful to make that happen.</p>
<p>As a rule, either there is a way to reduce your stress in automating some of the tasks, or as a way to get your message across, or as a way to get more community around you, or to get better equipment so that you can do whatever you care about more efficiently. There's going to be some way that programming, like a good mastery of language, is going to help you to communicate to other people.</p>
<p>And that&#8217;s Linda&#8217;s second point, when you see that the poetry you write touched another person&#8217;s heart. They come to you and say, "Hey, I read your poem, and it touched me very much, and I was crying," or something &#8212; just by reading your poem. Then you get the sense of accomplishment, of having touched another human being with something you created.</p>
<p>It's actually very easy to do, especially with web programming nowadays, so that's another thing that one can focus on in getting your message across, not only with the existing web systems like Twitters, or Facebook, or something, but with something that you design yourself &#8212; even though it's with iframes and entry level CSS &#8212; because it has an impact, because it is you; it is a part of you. It's part of your soul, and not just some post on some blog system, or on some social network system. Thank you.</p>
<p>[applause]</p>
<p><strong>Charles</strong>: I'd say one of the biggest factors that is going to make it easier for women to enter the programming world is exactly what you all are doing, having more women in the community, more women that can identify with new programmers that are coming to the community.</p>
<p>You're helping lay the foundation of all future generations of women programmers. You're helping open that door, and make it more attractive, make it more comfortable for women in the future to become programmers.</p>
<p>Don't forget that it's an amazing thing that you're doing, for all those future generations that would have had the same trouble that people had 10 years ago, or 20 years ago, trying to get into the sort of field, so just keep up what you're doing, because you're really helping. You're helping all the women in the world at this point.</p>
<p><strong>Matz</strong>: I have never written a poem in my life, but according to the old saying, the poem is the outcome from the passion inside. If it's true, the Ruby itself is my poem. There are 600,000 lines of [laughs] C-code poem that's used.</p>
<p>[applause]</p>
<p><strong>Charles</strong>: Yeah, an epic poem.</p>
<p>[laughter]</p>
<p><strong>Audrey</strong>: It is also very poignant.</p>
<p><strong>Matz</strong>: But anyway, the primary motivation behind the creation of Ruby is the passion. My passion of the love to the programming language. Loving programming language sounds weird to most of the people, but I can't help it. [laughs] Since I was in high school, I loved programming language, so the very important thing is the following passion.</p>
<p>Maybe so you ladies, girls and boys in the field, somewhat passion to create something, and then you see the screen that your software writing on, so you feel something good. That is the passion that you start with, so that passion brings you to be better programmer, better creator, or even artist.</p>
<p>If I say something, so follow your passion, and then nourish your passion. That's a very important things to be a better person maybe.</p>
<p><strong>Hazel</strong>: Please, everyone give the applause for all four of them first.</p>
<p>[applause]</p>
<p><strong>Hazel</strong>: This is really, really exciting, right? I know many of you sitting on the seats have not attended a programming course, or the coding process before. I want to ask a question. Do you want to learn programming? If you want, please raise your hand. Raise your hand higher, higher. [laughter] . Please, OK. Please don&#8217;t put your hand down. Please, we'll hire you soon.</p>
<p>[laughter]</p>
<p><strong>Hazel</strong>: Is there any programmer right here want to teach all of them, please raise your hand. Wow, see, there is too many hands right in the air. I think this is really possible. If you are really want to involve in this community, you want to learning, just ask them to teach you, and maybe like the RailsGirls, you can establish your own community. Maybe in a different language, a different city, different area, that's all possible.</p>
<p>Last, I want all of you please give some words to the audience, sitting on the seats, to encourage them to pursue learning programming, or maybe they want to do something else. Could you give some words?</p>
<p><strong>Audrey</strong>: I'd like to invite you to be yourself. There's a lot of going on in Taiwan where you see on the magazines, or on the books, that have to be as successful, or as interesting, or as fashionable as some person that appears on the cover of a magazine, or a book. There's all sort of this kind of going on. I'm sure it's a worldwide thing.</p>
<p>But I'd like to encourage you to think that if you follow the ways outlined in those magazines and those books, the best you could do is to just be a very good copy, or even a better copy of someone else. But that's not something irreplaceable. That's not something authentic, and that's not something that's authentic to you.</p>
<p>I guess the only way, for me at least, to follow your passion, is to think back of what are your unique experience that makes you care about the things you care, that makes you feel the things the way you feel, and then from it discover a ground for you to be authentic with yourself, and without exception, I think passions and compassion will follow from that. Thank you.</p>
<p>[applause]</p>
<p><strong>Charles</strong>: I love to read sci-fi novels, and fantasy novels, but I still love to watch the Hollywood movies, science fiction, but in reality we have no ESP, and we have no magical power like Spiderman or Superman, but right now though, we can control the computers.</p>
<p>We can control the network, so we can communicate to the people all over the world in a second, the speed of light. That's a kind of magical power. I believe the programming is the magical power that enables the imagination to be real, so learning, and having ability to program computers, is to order computers to use some magical things. Learn program, be a magician, be a wizard, and be happier.</p>
<p>[applause]</p>
<p><strong>Linda</strong>: I'm still pretty much figuring out what I want to be when I grow up, and what I want to be doing.</p>
<p>[laughter]</p>
<p><strong>Linda</strong>: I've had the exact same idea. I've gone through all of my life and tried to figure out what are the points that made me who I am today, and the things that I do what I do. The first of them is from age eight, I think. Then I run into this quote from Steve Jobs, who was talking about connecting the dots. How you can connect dots only looking backwards, not looking forward.</p>
<p>Then I looked at the sky, and I don&#8217;t know if any of you know who came up with constellations, like the shapes that stars form, but it wasn&#8217;t scientists, it wasn&#8217;t engineers, it was the storytellers.</p>
<p>The people who wanted to make sense of the sky by drawing pictures in there, and calling, &#8220;This is an owl, and this is a donkey.&#8221; In the same manner, I've been trying to figure out what are the individual dots in my life, and what kind of a picture they form.</p>
<p>Those pictures can change throughout time, and there might be different kinds of connections, but it's important to have those dots in the first place, and to start thinking about what they form up. It's as you said, very individual, and very unique, and it shouldn't be something that you just copy from someone else.</p>
<p>[applause]</p>
<p><strong>Matz</strong>: I'm a little biased, but honestly, I believe that being able program is the most powerful skill that a person can have. It requires essentially no resources. It helps to have a computer, but essentially it's all just from your mind. It's what you can create.</p>
<p>Anything you can imagine, you can create, and you don't have to have anything but time, and effort, and energy to do it. Once you start to get into this, it's almost like a drug. You're going to feel how powerful you can be, and how much you can do with programming. Get through the early tough stages, because it's a great ride, and it's really exciting.</p>
<p>[applause]</p>
<p><strong>Hazel</strong>: OK. Thank you for you. I received some questions from the audience, but before we answer the questions. Are there any more questions that you want to ask, are there any notes you want to pass it to the stage, is there anyone or this is all the questions?</p>
<p><strong>Hazel</strong>: Is there anyone? No? Let's start the Q&amp;A panel. I think this question is for the programmers to answer. What makes you want to push girls to attend this event, and what impact do you think can make difference to girls who are involved in this event?</p>
<p><strong>Audrey</strong>: The question was, really, I think, about what impact that we think that people who are involved in this event, what kind of differences those events make to the women's lives who attend these events. That's a very good question, actually.</p>
<p>When we talk about pushing someone to compel themselves into taking up an important social task, the way we do it is with finesse. It's about raising something, a spark that kindles in them something they already care about, but they felt that it&#8217;s helpless, maybe because they believe that they're the only person on earth who cares about this issue, or maybe they believe that the system is too large, it's too immutable, people cannot change just by themselves, and things like that.</p>
<p>I think programming in itself is a way to empower people, to see that there are millions of people in the world who put in maybe just five minutes a day into something. Or if you're really addicted, 15 hours a day into something&#8230;</p>
<p>[laughter]</p>
<p><strong>Audrey</strong>: &#8230;it visibly makes the world better. I think that impacts a person's life, empowers them in ways very few other fields that could provide.</p>
<p><strong>Charles</strong>: I'd say I have selfish reasons. Pretty much every programmer I've ever met has taught me something. If women are not part of that community then there are things I'm not learning. I want everybody to be part of this community, so that I have a chance to meet and talk with you about programming some day.</p>
<p>It all goes around. The community can't work without the community. It has to be filled with lots of different people, lots of different ideas and different ways of looking at things. It's not even just for you. I think it's absolutely crucial to the programming world, the IT and tech world, to bring more minds in. This is a great way to do it.</p>
<p><strong>Linda</strong>: For the RailsGirls event, we oftentimes say that you don't learn much about programming, per se, in one weekend and especially using Rails. But you do get to meet the coaches, so you do get a real connection with a real programmer, and then you get to meet all the other women who are as excited about technology as you.</p>
<p>Here in Taiwan you see a lot of women in events. But we've had events in Egypt or Cairo or Azerbaijan, where they just don't even know other women who exist who are excited about this stuff. It's a very powerful thing to fashion, to meet the people.</p>
<p><strong>Matz</strong>: The motivation and the background is up to each individual, like to gain new knowledge or to improve their income by learning programming. But no matter which motivation you&#8217;re behind, I really want you to understand the programming itself is pretty enjoyable. It's fun. I have been programming for more than 30 years. I have never been tired of it. It's very exciting. I often forget to eat, I forget to sleep.</p>
<p>[laughter and applause]</p>
<p><strong>Matz</strong>: Yeah, it's fun, that much. I want you to understand the fun, the joy. Well, plus, you have your individual motivation, and plus knowing that fun will improve and even enhance your individual motivation.</p>
<p><strong>Hazel</strong>: After the first question, here comes the second. It's also related to the first one. Here is a person who is working using the marketing industry. She wants to ask how can learning programming help for his or her real life?</p>
<p>I think, maybe, this question, we should ask the RailsGirls attendee, right here. Do any RailsGirls want to answer this question? Any RailsGirls? Oops. I think Linda has a lot of experience about this.</p>
<p><strong>Linda</strong>: Let me see, marketing people, they run email campaigns. Maybe you can do a dashboard that showcases the analytics of your email campaigns, and that communicates better to your boss how important these things are.</p>
<p>Maybe you need to order a new campaign site and you have a programmer and the programmer says, &#8220;This is impossible. You can't do this,&#8221; so forth. Then you're like, &#8220;Yeah, bullshit. You can do this.&#8221;</p>
<p>[laughter]</p>
<p><strong>Linda</strong>: Stuff like that. There's a lot of really tangible and real things that you can do in your industry. Any other brainstorming? I have never worked as a marketer.</p>
<p><strong>Audrey</strong>: I'm going to talk a little bit more philosophically. Marketing is about getting message across to another person such that they may wish to exchange something that they have, with what you have so that you both become better. This is the fundamental of marketing.</p>
<p>Traditionally there are three kinds of exchanges or marketing behavior that we are used to. One is that this in-group, like maybe we&#8217;re in a family or maybe we&#8217;re in a &#8220;community&#8221; that has an in-group and an out-group.</p>
<p>Members in the family, or in such in-groups, the share everything, they exchange everything with everything, but they don't share with outsiders like &#38750;&#25105;&#26063;&#39006; (&#8220;aliens&#8221;) or something. This is one kind of exchange.</p>
<p>The second kind of exchange is what we see in a government or in a hierarchy where we only exchange with the upper ladder or the downward ladder. Like, I only report to my manager, my manager reports to their manager, and so on, so that the exchange of information is entirely hierarchical.</p>
<p>The third one is that we exchange with whoever with the cash, who has the money. We offer our service or our goods to people who have money, so we use that money to exchange with someone else, to other marketers who sells us things. We basically exchange through currency.</p>
<p>These are the three dominant exchange models in the world.</p>
<p>But by participating &#8212; as a marketer &#8212; into open source, like the Ruby community, you're going to learn the fourth exchange model in the world. That is, you freely exchange with anyone in the world for whatever purpose whatsoever.</p>
<p>This is an extremely revolutionary idea: I don&#8217;t care about whether you're in the same ethnic group as me, I don't care whether you&#8217;re Taiwanese or not. I don't care whether you&#8217;re my boss or my manager, and I don&#8217;t care whether you have the cash. I'm going to offer my service and my generosity to you.</p>
<p>This kind of marketing, as we proved, like Linda&#8217;s Kickstarter campaign, reaches more people in shorter time more efficiently than any of those three legacy, old exchange models. That's going to be the trend of the 21st century. By participating in an open source community, you're going to see firsthand how this works, and how to make it work for you in real time.</p>
<p>[applause]</p>
<p><strong>Matz</strong>: I used to work as the professional programmer, I still am. But I work for the company and I order to develop software in the team. In that time the many things out of control me, so the boss decides something, that you have use this tool, you have to use this language or something like that. But it's bullshit.</p>
<p>[laughter]</p>
<p><strong>Matz</strong>: Now I'm working on open source software, mostly because it enhances my control. I can decide by myself what project I work on and I can decide which technology I use. I can decide what I do today in a certain degree much better than I used to. I think one of the joys from programming is the having power, and having control. Of course, the power comes with responsibility.</p>
<p><strong>Hazel</strong>: Thank you. Well, but here is a caution about the female programming popularity. If the female programmer community is getting bigger and bigger, do they have any influence to the marketing of the programming industry?</p>
<p><strong>Linda</strong>: I was just writing a report on this subject. The first professional programmers in the world were in the second World War, and there were a lot of females operating computers and calculating ballistic things, and so forth &#8212; Audrey might know more about the history of this &#8212; at that time they were doing a service to their country.</p>
<p>Then the next generation in the &#8216;60s was females who were operating computers or programming computers, because the men felt that it's a stupid manual labor thing. That's why women do it, the same way they operate telephones and so forth. But the women secretly realized that programming is really powerful, and they became better and better and better at it. It was like the Bell Labs.</p>
<p>I don't remember the name of the computer anymore, but they were working on this computer and the whole image of programming being male was really crafted in the &#8216;60s. Because the male wanted to get back the programming industry.</p>
<p>The requirements they used to get people into programming positions were crafted so that only young men would fit them, and very artificially done, this whole movement. Before that it was a women's profession, for the better or the worse, because it wasn't valued by the society at the time. But maybe Audrey knows more about that.</p>
<p><strong>Audrey</strong>: Actually, Linda said pretty much everything there is to say about the history in United States. I think the marketing of teaching and applying and doing programming, it's going to be very much distributed.</p>
<p>Because 20 years ago, even, we have this idea of a larval stage &#8212; &#32080;&#34553;&#26399;. It&#8217;s part of the hacker dictionary, the Jargon files. It says, basically, that to become a professional programmer, a hacker, you have to spend three or four years of your time addicted to your computer, totally breaking your sleep patterns and working 20 hour shifts. Then you will, at one point, reach enlightenment. This is a lot like Zen Buddhism.</p>
<p>[laughter]</p>
<p><strong>Audrey</strong>: Once you reach that point, once you reach the point of &#38646;&#30340;&#36681;&#31227;&#12289;&#24043;&#34899;&#30340;&#27402;&#21218; (the point of Zero transference &#8212; the power of wizardry), basically you become a wizard. Once you become a wizard, the distinctions &#8212; like Matz said, of gender, of age, of nationality, of ethnicity &#8212; they just disappear. It's like the scene in The Matrix, where Neo sees everything as green digits.</p>
<p>[laughter]</p>
<p><strong>Audrey</strong>: Once you hit that stage, nothing else really affects your objective judgment. That&#8217;s also a very Zen Buddhism thing. But I think that&#8217;s partially a myth, because it was so difficult to learn about programming without the Internet community at that time.</p>
<p>Now with RailsGirls and communities like that, we have a slope. You can very comfortably stay on any point in the slope, with a lot of people in the same ladder to support each other, and you don't need to spend two or three years of your life.</p>
<p>This way, you can spread it through five years or six years &#8212; you can even sleep eight hours a day without falling back. I think that's going to change the market very much, because then instead of just amateurs and professionals, we're going to have market segments for every point in the ladder, and that's going to make the market and the community much larger.</p>
<p>[applause]</p>
<p><strong>Hazel</strong>: Next question: What is your first entry into programming?</p>
<p><strong>Charles</strong>: I don't really know when, like when I was six or seven and I learned how I could use the computer, I was immediately trying to figure out how to make it do more things than it did right then.</p>
<p>But over the years the things that have really inspired me to keep going is, first of all, the power rush is nice. But being able to make other people happy, make their lives easier by writing software that helps them.</p>
<p>I work on JRuby as a passion, because I hear stories from people that use our software, and love it, and they're happy and their lives are better as a result. That's what's really kept me going, and inspired me to continue to be a programmer, and try to get everybody that know to be a programmer as well. Because it just brings so much to other people's lives as well.</p>
<p>[speakers pass the mic around]</p>
<p><strong>Audrey</strong>: This is like passing the baton, right?</p>
<p><strong>Audrey</strong>: I remember my first entry into programming was when I was seven, and I got this really old book. Matz actually just told me, in private, that he had this really small town library where there is a book about the Ada programming language.</p>
<p>There weren't many programming language books, and was an Ada programming reference. He just read it from cover to cover. Very unfortunately for me, my book was about GW-Basic.</p>
<p>[laughter and applause]</p>
<p><strong>Audrey</strong>: Yeah, if it had been Ada, maybe I would be a better programmer. But in any case, I read it from cover to cover. But I didn&#8217;t have any computers or I haven't seen any computers at that time.</p>
<p>What I did was I took a piece of paper, I started writing on it, drawing keyboards. I started pressing the paper. I started pressing the keys and writing the alphabets that would come after the command line. Then I still remember the touch of my fingers on the face when I type 10, space, RANDOMIZE TIMER, which is what you do is GW-Basic. I have this etched in my muscle memory before I met my first computer.</p>
<p>But that was a defining point, because it shows that computing is not about computers, it's about a certain way of thinking. It's about a certain way &#8212; if you organize your thought in a certain way, it yields predictable results, and it yields something that you can show to other people, so they can replicate your results. This is actually the scientific paradigm. This is like what a person without any scientific equipment whatsoever, they could just figure out, by an old GW-Basic book, the scientific method for themselves. For me, that's was the defining point.</p>
<p><strong>Matz</strong>: Well, I had a similar experience. I was a little bit older when I met computer, I was 15. Soon after that, the computer runs BASIC, a reduced set of it, the language was very limited. It does only 4k memory or something. The BASIC was very strict, it has only one character variable, that means that you can have only 26 variables. That's kind of frustrating.</p>
<p>In the bookstore, I found a book about Pascal, so I read through the book of Pascal from cover to cover. Then I realized that there are several, there are many programming languages out there. Computer programming languages are different from each other, so someone must have created those programming languages with some intention.</p>
<p>At that time, somehow, I got an idea, that someone created the programming language for their purpose, so why not me?</p>
<p>Since then, since that idea struck my brain, I became very, very interested in programming languages. No matter what kind of program &#8212; I don&#8217;t care, I care about the programming language.</p>
<p>So my other friends wanted to program to, say, create games or make money or something, but I don&#8217;t care. I care about the medium, not the purpose. I read through the Ada book, Pascal books, Modula, Lisp, some other programming languages.</p>
<p>But I didn't have a computer to create a programming language. I had no knowledge about the compiler or interpreter, so I took my notebook, and I wrote down the program in my idea of programming language. You don't need programming skill to design a programming language.</p>
<p>Unfortunately, I lost that notebook, it&#8217;s really shame. I don&#8217;t remember anything. I believe that was something in between Pascal and LISP.</p>
<p>Actually, I didn't have friends who knew computers, in my high school age. I went to the university. I met some people who loved programming. At that time, I found that very few people care about programming languages. Then, I studied about computer science. I learned how to write compilers. Then, gradually, I created Ruby. Gradually, it took over the world.</p>
<p>[laughter]</p>
<p><strong>Matz</strong>: The idea of a programming language was a very enlightening idea for me, at my high school age.</p>
<p><strong>Linda</strong>: [laughs] I told about the Al Gore story already. [laughs] Defining moment. More recently, I went to the bookstore. Before I made the Ruby thing, I tried to look for books that would explain for kids how computers work.</p>
<p>I would find tons of books that talked about astronomy, like how to be an astronomer or how does a combustion engine work, aimed at [laughs] kids but none that would explain how computers work. That was an "Aha" moment for me, that this body of work or this material around software engineering needs to exist, and maybe I need to be the person who does it. I loved Audrey&#8217;s paper computer example.</p>
<p>One of the things I want to do is do a little origami paper computer that the kids can assemble themselves, put in the little CPU, and have a very tangible feeling about having a real computer, and their first paper computer. As you said, computing is not about the actual hardware or anything like that, but that experience of owning it.</p>
<p><strong>Charles</strong>: Stay passionate about programming is to look at things that you would deal with every day and find a way to solve it through programming. Raising kids, there's a million and one things that you could use a program to help you manage it, sleep schedules, meals, or whatever. All sorts of things that you could do.</p>
<p>[laughter]</p>
<p><strong>Charles</strong>: The other thing is to remember that, of all of the abilities that we have as humans, being able to program, being able to design programs, has probably some of the fewest demands on you. It really just needs time and a little bit of energy, which, of course, when you're raising kids, those are the two things you really don't have any more.</p>
<p>But as long as you're able to find just a few minutes in the day to keep moving forward, build things around your life, around your passions, kids and stuff in the house, if it gets to that point. You'll be able to keep going. You'll be able to keep going.</p>
<p>I can't imagine programming not being part of my life anymore. Even through the most difficult times. I've had to take some breaks sometimes, I've had to go away. I've gotten burned out on the projects that I'm working on, upset by things that people say to me or say about my programs, about my projects. But I've always come back.</p>
<p>I don't know anybody who has been a programmer that wasn't a programmer forever, in some way. It changes you, and I think it stays with you for the rest of your life.</p>
<p><strong>Linda</strong>: A practical example, my friend made a little Arduino clock that connects to her Fitbit, and it shows like a little screen, it shows how many steps away from home she is for her little kids, all the time. Projects like that maybe, it might be helpful in just kindling that passion.</p>
<p>I want to quote our practical German friends. I've talked to a lot of people about their motivations in taking part in RailsGirls and so forth all around the world. The German girls, one of them approaches me and said that &#8220;Programming is the most flexible work you have. It's well paid, you can do it at home with the kids. You can do it in the evening, you can do it in the morning.&#8221; It allows them to be very self-sufficient, and that's why they want to change careers.</p>
<p>[applause]</p>
<p><strong>Matz</strong>: The ladies are very easy to distract away from the programming, or even careers. Mostly because the social pressure, and the psychological &#8220;mind-set&#8221; or something. I declare it's OK to have passion on programming, on your career. Even you have to care about your family, your children, but you can still have passion on programming or your career.</p>
<p>You can come back someday. That kind of passion can motivate you. That kind of passion could be an engine to drive your life forward.</p>

<p><strong>Audrey</strong>: As a personal anecdote, actually my brother has been teaching my father programming, for a while now, for a few months, and my father is in his 60s. He has a lot of students to teach, a lot of daily routines, three dogs, parents and everything.</p>
<p>I think the most important thing was putting your ideas somewhere that other people can see and improve on, and Ruby is a very quick way to do that of course. As long as you have a GitHub account you can just push something there, or even just as a quest you don't have to create a repository.</p>
<p>This is so people could start working on a code and giving you ideas, and suggestions, and that. Even if GitHub seems very hard &#8212; actually for my dad it is &#8212; you can use other tools like Hackpad, or even like Google Doc, or Google Spreadsheet, or EherCalc, or something like that.</p>
<p>Any online spreadsheet, or document, or any online drawing tool. You can capture your ideas in a place where everyone can see and comment on. It's actually the first step to programming. I mean it in a social way as well, and not in a coding way. To go back to the proper question. I think for someone who's time is fragmented or limited, one way is to watch or participate. One of those ongoing projects that require some input from the crowd does not require your full-time dedication. I'm going to have an advertisement for <a href="http://g0v.asia/tw/"><tt>g0v</tt></a>.</p>
<p>In <tt>g0v</tt> we have a project that&#8217;s going at the moment, where we took all the grids of the reports of the spreadsheet of people's donations to their political campaigns. It was locked away in PDF, and it's only allowed to be printed with water mark, and they publish online, and you have to pay for the copying fees. You can only take two pages, or 100 pages out at a time, it was very archaic, and it is because they don't have a budget to do it.</p>
<p>What we did was we asked people to take the copied papers out, and we scanned them, and upload them on DropBox, or on Google Drive. You don't need to be very technical to do that, and then algorithms split them into individual grids.</p>
<p>Then you can visit the site to see just one grid cell. It's like a Captcha, or a game, where you just see a picture and guess &#8212; maybe a name, or maybe a number and just type in a name or a number. With this crowd-source way we have 300,000 cells identified and counting. People visit and improve the code such that the donations are now transparent, and it becomes part of the communal property.</p>
<p>This motivates a lot of people that have no idea what programming is, to start helping us writing a better guideline. Like there&#8217;s a person who has no experience designing a web page, that just feel very strongly about the cause. They learn about how to do Google sites, or do a basic HTML programming, so that they could put their beautiful icons to the standard operating procedure for those things.</p>
<p>This is about putting something into where people can see, and to contribute on. Even though you only have like five minutes, or even just 15 seconds a day, you can feel that you're part of the community, and you get to know people, who once you have a little bit more time, would take you further along the path.</p>
          </div>
                        
         <p align="right">
            <a href="http://pugs.blogs.com/pugs/2014/06/railsgirlstw-panel-transcript.html">
            Audrey Tang | Pugs | 
            2014-06-22 00:54:10</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://www.nntp.perl.org/group/perl.perl6.announce/2014/06/msg713.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://www.nntp.perl.org/group/perl.perl6.announce/" title="perl.perl6.announce">Perl 6 Announce </a></div><br />
         

            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/06/msg713.html">Parrot 6.5.0 "Black-winged Lovebird" Released by Reini Urban</a> 
        </div>

         <div class="content">
            <p>On behalf of the Parrot team, I'm proud to announce Parrot 6.5.0, also known<br/>as "Black-winged Lovebird".  Parrot (http://parrot.org/) is a virtual<br/>machine aimed<br/>at running all dynamic languages.<br/><br/>Parrot 6.5.0 is available on Parrot's FTP site<br/>(ftp://ftp.parrot.org/pub/parrot/releases/devel/6.5.0/), or by following the<br/>download instructions at http://parrot.org/download.  For those who would like<br/>to develop on Parrot, or help develop Parrot itself, we recommend using Git to<br/>retrieve the source code to get the latest and best Parrot code.<br/><br/>Parrot 6.5.0 News:<br/>    - Core<br/>        + Re-add -DMEMORY_DEBUG support to the new GMS GC [GH #1073]<br/>        + Added 2 new PMC method attributes :manual_wb and :no_wb and<br/>          worked over all core PMCs for unneeded GC write barriers.<br/>          Thereby removed the vtable method calling overhead of _orig into a<br/>          wrapper with the mandatory write barrier. This was the first part<br/>          of Chirag's GSOC project. [GH #1069]<br/>        + find_codepoint: Added name aliases for control character names which<br/>          disappeared with ICU 5.2, and added those names to non-ICU<br/>builds also.<br/>          Improved ICU search for u_charFromName() to check all<br/>UCharNameChoices,<br/>          not only U_EXTENDED_CHAR_NAME. [GH #1075, roast #43]<br/>    - Build<br/>        + Fixed wrong ICU header probes on multi-arch systems (debian)<br/>[GH #1014]<br/>        + Fix opengl on bsd which does not have __APPLE__ defined as 0<br/>[GH #1070]<br/>        + pmc2c was extended to improve write barriers and deal with :manual_wb,<br/>          :no_wb and RETURN() in VTABLE methods. [GH #1069]<br/>    - Documentation<br/>        + Improved the docs for pmc and pmc2c [GH #1069]<br/>+ Harmonized pmc names for the PMC html index [GH #1079]<br/>    - Tests<br/>        + Fix t/op/gc.t for --gc=inf<br/>        + Fix t/library/pcre.t for --without-pcre or windows<br/>    - Community<br/>        + Our GSOC project succeeded in the first deliverable<br/>        + Non-core dynpmc's with multiple return paths in writer<br/>VTABLE methods will<br/>          need to be changed to use either :manual_wb or RETURN() as<br/>in PCCMETHODs,<br/>          and can now be optimized for unneeded GC write barriers.<br/>          E.g. nqp 6model got 2-4% faster.<br/><br/>nqp should be bumped.<br/>Fixes for nqp:<br/>* icu detection on multi-arch systems (newer debian),<br/>* icu workaround for control char name aliases (see roast #43),<br/>* better GC writer barriers (for 6model in nqp branch pmc2c_orig)<br/>parrot -O2 is not yet recommended for nqp/rakudo as it produced slower<br/>code there.<br/><br/>The SHA256 message digests for the downloadable tarballs are:<br/>249047f8fc2041ce460d3524547c10faf4462facdffd6b4f9b42f250640c79de<br/>parrot-6.5.0.tar.gz<br/>1f45044f8dcfaafef795e93a91c8f4a55dd8347cc0359ce4dcf6f34f7bfff140<br/>parrot-6.5.0.tar.bz2<br/><br/>Many thanks to all our contributors for making this possible, and our sponsors<br/>for supporting this project.  Our next scheduled release is 15 Jul 2014.<br/><br/>Enjoy!<br/><br/>-- <br/>Reini Urban<br/>http://cpanel.net/   http://www.perl-compiler.org/<br/></p>
          </div>
                        
         <p align="right">
            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/06/msg713.html">
            Perl 6 Announce | perl.perl6.announce | 
            2014-06-17 17:17:48</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:strangelyconsistent.org,2014-06-16:blog/boxes-and-pebbles">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://strangelyconsistent.org/blog/" title="Strangely Consistent">Carl Masak </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/2d9d4815e8e5927a4e04cdea13ca1e36" width="" height="" alt="">

            <a href="http://strangelyconsistent.org/blog/boxes-and-pebbles">Boxes and pebbles</a> 
        </div>

         <div class="content">
            <p>As I was riding to the airport the other day to pick up a friend, I stumbled
across <a href="https://twitter.com/maanow/status/477207014909562880">this math problem
tweet</a>:</p>

<p><img alt="Let &lt;em&gt;n&lt;/em&gt; be a positive integer. We have &lt;em&gt;n&lt;/em&gt; boxes where each box contains a&#10;nonnegative number of pebbles. In each move we are allowed to take two pebbles&#10;from a box we choose, throw away one of the pebbles, and put the other pebble&#10;in another box we choose. An initial configuration of pebbles is called&#10;solvable if it is possible to reach a configuration with no empty box, in a&#10;finite (possibly zero) number of moves. Determine all initial configurations of&#10;pebbles which are not solvable, but become solvable when an additional pebble&#10;is added to a box, no matter which box is&#10;chosen." src="http://strangelyconsistent.org/blog/images/math-problem.jpg" title=""/></p>

<p>I started out drawing stuff in my notebook to solve it, but at some point I
decided to bring in Perl 6. The solution turned out to be quite illustrative,
so I decided to share it.</p>

<p>Below, I reproduce the problem specification, piece by piece, and interleave it
with REPL interaction.</p>

<h2>The problem</h2>

<blockquote>
  <p>Let <em>n</em> be a positive integer. We have <em>n</em> boxes where each box contains a
nonnegative number of pebbles.</p>
</blockquote>

<pre><code>$ perl6
&gt; class Conf { has @.boxes where *.all &gt;= 0; method gist { "[$.boxes]" } }
&gt; sub conf(@boxes) { Conf.new(:@boxes) }; Nil
&gt; sub n(Conf $c) { $c.boxes.elems }; Nil
</code></pre>

<p>I was a bit saddened to learn that the <code>where</code> clause on the attribute isn't
enforced in Rakudo. There's now <a href="https://rt.perl.org/Ticket/Display.html?id=122109">an RT
ticket</a> about that.</p>

<p>The <code>Nil</code> at the end of some lines is to quiet inconsequential or repetitive
output from the REPL.</p>

<p>Let's take as our running concrete example the starting configuration <code>[2, 0]</code>.
That is, two boxes, one with two pebbles and one empty. As we will see, this is
one of the smallest answers to the problem.</p>

<pre><code>&gt; n(conf [2, 0])
2
</code></pre>

<blockquote>
  <p>In each move we are allowed to take two pebbles from a box we choose, throw
away one of the pebbles, and put the other pebble in another box we choose.</p>
</blockquote>

<pre><code>&gt; sub but(@list, &amp;act) { my @new = @list; &amp;act(@new); @new }; Nil
&gt; sub add($c, $to, $count) { conf $c.boxes.&amp;but(*.[$to] += $count) }; Nil
&gt; sub remove($c, $from, $count) { conf $c.boxes.&amp;but(*.[$from] -= $count) }; Nil
&gt;
&gt; sub move($c, $from, $to) { $c.&amp;remove($from, 2).&amp;add($to, 1) }; Nil
&gt; sub moves-from($c, $from) { (move($c, $from, $_) for ^n($c)) }; Nil
&gt; sub moves($c) { (moves-from($c, $_) if $c.boxes[$_] &gt;= 2 for ^n($c)) }; Nil
&gt; 
&gt; moves(conf [2, 0])
[1 0] [0 1]
</code></pre>

<p>The condition <code>if $c.boxes[$_] &gt;= 2</code> ensures that we don't make a move when
there aren't enough pebbles in a box.</p>

<blockquote>
  <p>An initial configuration of pebbles is called solvable if it is possible to
reach a configuration with no empty box, in a finite (possibly zero) number
of moves.</p>
</blockquote>

<pre><code>&gt; sub has-empty-box($c) { so any($c.boxes) == 0 }; Nil
&gt;
&gt; has-empty-box(conf [2, 2, 2, 0])
True
&gt; has-empty-box(conf [2, 2, 2, 1])
False

&gt; sub is-solvable($c) { !has-empty-box($c) || so is-solvable any moves $c }; Nil
&gt;
&gt; is-solvable(conf [2, 0])
False
&gt; is-solvable(conf [3, 0])
True
</code></pre>

<p>The definition of <code>is-solvable</code> is the first case where I feel that Perl 6
shines in this problem. That one-liner lets us perform a search using all
possible moves for any configuration that has no empty boxes.</p>

<p>For example, if we did this:</p>

<pre><code>&gt; is-solvable(conf [4, 0, 0])
</code></pre>

<p>Then the tree search that happens in the background is this:</p>

<pre><code>[4 0 0]
    [3 0 0]
        [2 0 0]
            [1 0 0]
            [0 1 0]
            [0 0 1]
        [1 1 0]
        [1 0 1]
    [2 1 0]
        [1 1 0]
        [0 2 0]
            [1 0 0]
            [0 1 0]
            [0 0 1]
        [0 1 1]
    [2 0 1]
        [1 0 1]
        [0 1 1]
        [0 0 2]
            [1 0 0]
            [0 1 0]
            [0 0 1]
</code></pre>

<p>...and <code>is-solvable</code> concludes that no matter how it moves the pebbles, it
always ends up with a zero <em>somewhere</em>, so this configuration isn't solvable,
and so the result is <code>False</code>.</p>

<p>By the way, we know that any search like this is finite, because every move
reduces the net amount of pebbles.</p>

<blockquote>
  <p>Determine all initial configurations of pebbles which are not solvable, but
become solvable when an additional pebble is added to a box, no matter which
box is chosen.</p>
</blockquote>

<pre><code>&gt; sub add-pebble($c, $to) { conf $c.boxes.&amp;but(*.[$to] += 1) }; Nil
&gt; sub add-pebble-anywhere($c) { (add-pebble($c, $_) for ^n($c)) }; Nil
&gt; 
&gt; add-pebble-anywhere(conf [2, 0])
[3 0] [2 1]

&gt; sub is-answer($c) { !is-solvable($c) &amp;&amp; so is-solvable all add-pebble-anywhere($c) }; Nil
&gt; is-answer(conf [2, 0])
True
&gt; is-answer(conf [4, 0, 0])
True
</code></pre>

<p>So as we see, our example configuration <code>[2, 0]</code> is a possible answer, because
it is not in itself solvable, but adding a pebble in any of the two boxes makes
it solvable. Similarly, the <code>[4, 0, 0]</code> that we tree-searched above isn't
solvable, but becomes solvable with a pebble added anywhere.</p>

<h2>Hostages, heroes and civilians</h2>

<p>Having specified the problem thus far, I started to use to make it clearer in
my mind by introducing idiosyncratic terminology. I started thinking of the
empty boxes as <strong>hostages</strong>, because they need saving before the end of the
day.</p>

<pre><code>&gt; sub hostages($c) { +$c.boxes.grep(0) }; Nil
&gt; hostages(conf [2, 0])
1
&gt; hostages(conf [3, 0, 0])
2
</code></pre>

<p>Likewise, some pairs of pebbles are <strong>heroes</strong>... but not all of them. First
off, the two pebbles have to be in the same box to make up a hero.</p>

<p>Secondly, the bottom pebble is effectively fixed and cannot contribute to a
hero. (Because if we removed it, there would be no pebbles left, and we'd have
created another hostage.)</p>

<p>In other words, if we take the pebbles in a box,
subtract one, divide by two, and round down, we get the number of heroes in
that box.</p>

<pre><code>&gt; sub heroes($c) { [+] ($c.boxes &#187;-&#187; 1) &#187;div&#187; 2 &#187;max&#187; 0 }; Nil
&gt; heroes(conf [2, 0])
0
&gt; heroes(conf [3, 3, 0])
2
</code></pre>

<p>Heroes live to save hostages. In fact, any move which <em>doesn't</em> use a hero to
save a hostage will just end up wasting a pebble. We can use this knowledge to
define a better <code>moves-from</code> sub, restricting it to moves that save hostages:</p>

<pre><code>&gt; sub moves-from($c, $from) { (move($c, $from, $_) if $c.boxes[$_] == 0 for ^n($c)) }; Nil
</code></pre>

<p>The search moves faster with this condition. For example, the search tree from
above gets trimmed to this:</p>

<pre><code>[4, 0, 0]
    [2, 1, 0]
        [0, 1, 1]
    [2, 0, 1]
        [0, 1, 1]
</code></pre>

<p>Changing the literal <code>2</code> to <code>3</code> in the function <code>moves</code> (in recognition of the
fact that the bottom pebble never figures in a viable move) cuts the tree down
even further:</p>

<pre><code>[4, 0, 0]
    [2, 1, 0]
    [2, 0, 1]
</code></pre>

<p>I noticed the pattern that any possible answer configuration I could come up
with had the property that there was exactly one more hostage than there were
heroes.</p>

<pre><code>&gt; sub one-more-hostage-than-heroes($c) { hostages($c) == heroes($c) + 1 }; Nil
&gt; one-more-hostage-than-heroes(conf [2, 0])
True
&gt; one-more-hostage-than-heroes(conf [3, 1, 0])
False
</code></pre>

<p>This makes intuitive sense: a configuration that is an answer needs to be not
solvable (less than one hero per hostage), but it also needs to be <em>just
barely</em> not solvable. That is, there has to be just one hostage too many.</p>

<p>Does this fully describe a solution, though? It turns out it doesn't, but in
order to see it, let's bring in a testing tool.</p>

<h2>Proving stuff with QuickCheck</h2>

<p>We'll want to generate thousands of random configurations for this, so I
defined the following two routines. The configuration space is infinite, and it
was hard to know how to choose configurations randomly. In the end I favored
an approach with small finite configurations with relatively few pebbles,
hoping it would catch all relevant cases.</p>

<pre><code>sub random-box { Bool.pick ?? 0 !! (1..5).pick }

sub random-conf {
    my $n = (0..5).pick;
    conf [random-box() xx $n];
}
</code></pre>

<p>Next up, a function that tests a certain property on a lot of random
configurations. It's not a total guarantee of correctness, but once you've
tested something against 1000 random inputs, you can have a fairly high
confidence that no exception has slipped through. Think of it as a kind of
probabilistic proof.</p>

<pre><code>sub quickcheck(&amp;prop, $N = 1000) {
    for ^$N {
        print "." if $_ %% 20;
        my $c = random-conf;
        return "Counterexample: $c.gist()" unless &amp;prop($c);
    }
    return "All $N cases passed.";
}
</code></pre>

<p>First up, let's test the statement that if some configuration is a solution,
then it has one more hostage than it has heroes.</p>

<p>Because these properties end up talking a lot in terms of if-then
relationships, let's create a operator for logical implication.</p>

<pre><code>sub infix:&#171;&#8658;&#187;($premise, $conclusion) { !$premise || $conclusion }

sub if-answer-then-one-more-hostage($c) {
    is-answer($c) &#8658; one-more-hostage-than-heroes($c);
}

&gt; quickcheck &amp;if-answer-then-one-more-hostage
..................................................All 1000 cases passed.
</code></pre>

<p>Ok, that turns out to be true. How about in the other direction?</p>

<pre><code>sub if-one-more-hostage-then-answer($c) {
    one-more-hostage-than-heroes($c) &#8658; is-answer($c);
}

&gt; quickcheck &amp;if-one-more-hostage-then-answer
.Counterexample: [0 1]
</code></pre>

<p>This is why QuickCheck-based testing is great; it not just tells us that
something fails, it also gives us a <em>counterexample</em> by which we can see
clearly <em>how</em> and <em>why</em> it fails. In this case, that 1 in there is not enough
to save the hostage. Nor is it enough if that box gets another pebble.</p>

<p>Clearly there is some factor at work here besides hostages and heroes.</p>

<p>We've accounted for that bottom pebble, the useless one that we can never do
anything with. On top of it are zero or more pairs of pebbles; our heroes. But
on top of <em>that</em> can be yet another pebble; let's define a lone pebble like
that to be an <strong>everyday hero</strong>, because all it takes is a small push (one more
pebble) to create a hero out of an everyday hero.</p>

<p>The bottom pebble + pairs of pebbles for heroes + everyday hero pebble = a
positive even number of pebbles. So the easiest way to state "this box is
either a hostage or an everyday hero" is to say "there's an even number of
pebbles in this box".</p>

<p>Let's see if adding that condition is enough to predict answers.</p>

<pre><code>sub all-hostages-or-everyday-heroes($c) { so $c.boxes.all %% 2 }
sub if-one-more-hostage-and-all-hostages-or-everyday-heroes-then-answer($c) {
    (one-more-hostage-than-heroes($c)
        &amp;&amp; all-hostages-or-everyday-heroes($c))
        &#8658; is-answer($c)
}

&gt; quickcheck &amp;if-one-more-hostage-and-all-hostages-or-everyday-heroes-then-answer
..................................................All 1000 cases passed.
</code></pre>

<p>It is enough! Now that we know if it's a sufficient condition, let's find out
if it's also a necessary one.</p>

<pre><code>sub one-more-hostage-and-all-hostages-or-everyday-heroes-means-answer($c) {
    (one-more-hostage-than-heroes($c)
        &amp;&amp; all-hostages-or-everyday-heroes($c))
        == is-answer($c)
}

&gt; quickcheck &amp;one-more-hostage-and-all-hostages-or-everyday-heroes-means-answer
..................................................All 1000 cases passed.
</code></pre>

<p>Ooh, and it <em>is</em>! Lovely.</p>

<p>Notice how much of a simplification this brings about. The two conditions we
just defined (<code>one-more-hostage-than-heroes</code> and
<code>all-hostages-or-everyday-heroes</code>) just check surface properties of a
configuration, whereas <code>is-answer</code> has to perform a possibly large tree search.
But <code>quickcheck</code> tells us that the combination of the two conditions is
completely equivalent to the whole tree search.</p>

<p>Awesome.</p>

<p>Just to bring that point home, let's drop all the cute terminology, and just
write it in terms of the mathematical properties we need to check:</p>

<pre><code>sub pebbles-are-twice-boxes-minus-two-and-all-boxes-even-means-answer($c) {
    ([+]($c.boxes) == 2 * n($c) - 2 &amp;&amp; so($c.boxes.all %% 2))
        == is-answer($c)
}

&gt; quickcheck &amp;pebbles-are-twice-boxes-minus-two-and-all-boxes-even-means-answer
..................................................All 1000 cases passed.
</code></pre>

<p>And that's the answer.</p>

<p>(You can also read the solution
<a href="http://egmo2014.tubitak.gov.tr/sites/default/files/solutions-day2.pdf">here</a>,
problem 5.)</p>

<h2>Enumerating all answers</h2>

<p>We might consider ourselves having solved the problem completely, but it feels
a bit weird to leave it at that. Can't we get a list of all the answers too?</p>

<p>I started writing a custom recursive solution, but ended up recognizing what I
was doing from the output I was getting. (And from the fact that the number of
answers of each size led me to <a href="http://oeis.org/A000041">this OEIS
sequence</a>.)</p>

<p>What we're looking for is really a kind of integer partitions. That makes
sense; we have a fixed number of pebbles, and we want to distribute them among
the boxes in all possible ways.</p>

<p>As one does nowadays, I went out on Stack Overflow to look for a suitable
algorithm to compute integer partitions. Found <a href="http://stackoverflow.com/a/10036764">this elegant Python
solution</a>. This is my Perl 6 rendering of
it:</p>

<pre><code>sub partitions($n) {
    uniq :as(*.Str), gather {
        take [$n];
        for 1..^$n -&gt; $x {
            take ([($x, .list).sort] for partitions($n - $x));
        }
    }
}
</code></pre>

<p>Of course, once we have the partitions, we need to massage them a little bit.
To be exact, we reverse the partition (because I like reading them in
descending order), double the numbers (to get only even numbers), and we pad
with zeroes at the end.</p>

<pre><code>sub double(@list) { @list &#187;*&#187; 2 }
sub pad(@list, $size) { [@list, 0 xx ($size - @list.elems)] }
sub all-answers($n) { (.reverse.&amp;double.&amp;pad($n) for partitions($n - 1)) }
</code></pre>

<p>Note by the way that these answers are "symmetry broken". For each solution,
the order of the boxes is immaterial to the problem, so all permutations of
boxes are also viable answers. So picking a canonical order and sticking with
it makes the output a lot smaller without missing anything essential.</p>

<p>Finally, we print the answers. Sorting is not necessary, just esthetic.</p>

<pre><code>sub array-cmp(@xs, @ys) { [||] @xs Z&lt;=&gt; @ys }

for 1..* -&gt; $n {
    my @answers = all-answers($n).sort(&amp;array-cmp);
    say "{@answers.elems} answers of size $n:";
    say "  ", .&amp;conf for @answers;
}
</code></pre>

<p>This is how they look. These are just the first seven iterations; it goes on
for a while.</p>

<pre><code>1 answers of size 1:
  [0]
1 answers of size 2:
  [2 0]
2 answers of size 3:
  [2 2 0]
  [4 0 0]
3 answers of size 4:
  [2 2 2 0]
  [4 2 0 0]
  [6 0 0 0]
5 answers of size 5:
  [2 2 2 2 0]
  [4 2 2 0 0]
  [4 4 0 0 0]
  [6 2 0 0 0]
  [8 0 0 0 0]
7 answers of size 6:
  [2 2 2 2 2 0]
  [4 2 2 2 0 0]
  [4 4 2 0 0 0]
  [6 2 2 0 0 0]
  [6 4 0 0 0 0]
  [8 2 0 0 0 0]
  [10 0 0 0 0 0]
</code></pre>

<h2>So, it has come to this</h2>

<p>I put all the code from this blog post <a href="https://gist.github.com/masak/f865b7d9dd33e535b501">in a
gist</a> if anyone wants to
play with it.</p>

<p>This problem is now officially flushed out of my system. I like how Perl 6 rose
to the challenge of helping me solve it. I'm also positively surprised by the
"feel" of doing QuickCheck testing. Gotta do more of that.</p>

<p>I worked under a self-imposed restriction that things written in the REPL ought
to fit on one line. It made me reach for ways to chunk ideas into functions,
which I think ended up bringing out the intent of each step a bit better.</p>

<p>Finally, although I knew it from before, junctions and hyperops and ranges and
list comprehensions and functions and metaoperators and custom operators and
lazy lists... they all conspire to make problem solving and exploratory
programming like this a really pleasant experience.</p>
          </div>
                        
         <p align="right">
            <a href="http://strangelyconsistent.org/blog/boxes-and-pebbles">
            Carl Masak | Strangely Consistent | 
            2014-06-16 23:49:10</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=180">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/06/16/2014-24-inlining-some-more-jit-a-bit-of-gtk-and-cairo/">2014.24: Inlining, some more JIT, a bit of gtk and cairo.</a> 
        </div>

         <div class="content">
            <p>Wow, this week I&#8217;ve even done some stuff! I&#8217;ven&#8217;t been active in the source code for a while, so it felt quite refreshing. Here&#8217;s all (well, at least some of) the nice things that have turned up over the last 6 days:</p>
<ul>
<li>jnthn has merged the &#8220;inline&#8221; branch of MoarVM that adds the ability to inline simple bytecode segments into their caller&#8217;s bytecode, thus getting rid of a nice chunk of invocation cost. Sadly, it currently bails out if it sees exception handlers or &#8220;return&#8221; handlers, which is extremely common in actual Perl&#8239;6 code. Thus, the improvements are mostly visible in NQP code.</li>
<li>I added a few more methods to the cairo binding and started on the GtkDrawingArea class for the gtk3 binding. There&#8217;s a whole lot of stuff involved before enough stuff is in place to make cairo-based animations work well.</li>
<li>I also implemented a Supply combinator called &#8220;zip-latest&#8221;. It will generate a tuple (or apply your custom sub) every time a new value comes in from any of the supplies, as opposed to the &#8220;zip&#8221; combinator that waits for all Supplies to have a new value available.</li>
<li>lizmat did a whole bunch of commits related to CompUnitRepo and friends. It&#8217;ll be exciting to see the whole potential of the infrastructure used, for example applications bundled with all their dependencies in a single executable file and other kinds of things.</li>
<li>brrt continued his GSoC work on the MoarVM Just In Time Compiler.&#160;The current piece of code that&#8217;s being used as an example is running the following subroutine in a loop:
<pre>sub foo() {
    nqp::say("OH HAI");
    return 12 - 6;
}</pre>
<p>The JIT compiler turns the whole function directly into runnable machine code, which at the very least eliminates the interpreter overhead.</p></li>
<li>Chirag Agrawal and Reini Urban have&#160;pushed more work in their optimization efforts for write barriers. Reini reports a 2-4% performance improvement in the NQP test suite after annotating all the 6model classes correctly. This work is part of the&#160;&#160;Parrot 6.5.0 release (planned for tomorrow). In addition, rakudo-parrot is going to pass all spectests again (when a pull request is applied). Cool stuff!</li>
<li>dwarring could be considered on a roll, as he&#8217;s continuously writing spectests for the Perl&#8239;6 Advent Calendar of the past years <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></li>
<li>Kamil Ku&#322;aga added a utility program for <a href="http://lacunaexpanse.com/">Lacuna Expanse</a> written in Perl&#8239;6&#160;to the ecosystem.</li>
<li>Michal Jurosz added a <a href="https://github.com/mj41/SP6">simple templating library for Perl&#8239;6</a>&#160;to the ecosystem.</li>
</ul>
<p>That&#8217;s it from me for this week&#8217;s post. I hope your week is productive and pleasant <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/180/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/180/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=180&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/06/16/2014-24-inlining-some-more-jit-a-bit-of-gtk-and-cairo/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-06-16 17:05:07</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:blogger.com,1999:blog-7864497598813874355.post-4930036719040975521">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://brrt-to-the-future.blogspot.com/" title="brrt to the future">Bart Wiegmans </a></div><br />
                     <img class="face" src="https://avatars1.githubusercontent.com/u/1617678?s=400" width="" height="" alt="">

            <a href="http://brrt-to-the-future.blogspot.com/2014/06/progress.html">Progress</a> 
        </div>

         <div class="content">
            <p>Those of you who have followed #moarvm or github closely may already know, but this week I've finally checked in code that calculates 2 + 2 = 4 and returns that value to its' caller. To be very specific, I can make a frame that does the following operations:<br/><br/></p><pre><code><br/>const_i64_16 r0, 2<br/>const_i64_16 r1, 2<br/>add_i, r2, r1, r0<br/>return_i r2<br/></code></pre><br/>As a proof of concept, this is a breakthrough, and it shows that the strategy we've chosen can pay off. I didn't quite succeed without help of FROGGS, jnthn, nwc10, timotimo and others, but we're finally there. I hope. (I'll have to see about windows x64 support). The next thing to do is cleanup and extension. Some objectives for the following week are:<br/><ul><li>Cleanup. The JIT compiler still dumps stuff to stderr for my debugging purposes, but we shouldn't really have that. I've tried moving ad.all output to the spesh log but I can hardly find the data in there, so I think I'll make a separate JIT log file instead. Similarly, the file for the JIT compiler's machine code dump - if any - should be specified. And I should add padding to the dump, so that more than one block can be dumped.</li><li>Adding operations to compile. MoarVM supports no fewer than 638 opcodes, and I support 4 yet. That is about 0,62% of all opcodes :-). Obviously in those terms, I have a long way to go. jnthn suggested that the specialized sp_getarg opcodes are a good way to progress, and I agree - they'll allow us to pass actual arguments to a compiled routine.</li><li>Translate the spesh graph out of SSA form into the linear form that we use for the JIT 'graph' (which is really a labeled linked list so far). </li><li>Compile more basic blocks and add support for branching. This is probably the trickiest thing of the bunch.</li><li>Fix myself a proper windows-x64 virtual machine, and do the windows testing myself.</li><li>Bring the moar-jit branch up-to-date with moarvm master, so that testers don't have such a hard time.</li></ul>&#160;As for longer-term goals,we've had some constructive contact with Mike Pall (of LuaJit / DynASM fame), and he suggested ways to extends DynASM to support dynamic registers. As I've tried to explain last week, this is important for 'good' instruction selection. On further reflection, it will probably do just fine to introduce expression trees - and the specialized compiler backend for them, which would need register selection - gradually, i.e. per supported instruction rather than all at once.<br/><br/>However, the following features are more important still:<br/><ul><li>Support for deoptimisations. Up until now (and the foreseeable future) we keep the memory layout exactly the same</li><li>JIT-to-interpreter calls. This is a bit tricky - MoarVM doesn't support nesting interpreters. What we'll have to do instead is return to the interpreter with a label that stores our <i>continuation</i>, and continue at that continuation when we return.</li><li>At some point, JIT-to-JIT calls. Much the same problems apply - in theory, this doesn't have to differ from JIT-to-interpreter calls, although obviously we'd rather optimise the interpreter out of this loop.</li><li>Support for exceptions, obviously, which - I hope - won't be as tricky as it seems, as it ultimately depends on jumping in the bytecode at the right place.</li><li>Support for simple optimisations, such as merging various MoarVM opcodes into a single opcode if that is more suitable.</li></ul>So that is it for now. See you next week! <br/><ul/>
          </div>
                        
         <p align="right">
            <a href="http://brrt-to-the-future.blogspot.com/2014/06/progress.html">
            Bart Wiegmans | brrt to the future | 
            2014-06-14 01:07:04</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=175">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/06/10/2014-23-beginning-of-inlining-some-gsoc-work-materializes-dson-encoderdecoder/">2014.23: Beginning of inlining, some GSoC work materializes, DSON encoder/decoder</a> 
        </div>

         <div class="content">
            <p>In order to smooth the transition back to the &#8220;every monday&#8221; schedule, I decided to write this post on tuesday instead of monday. Here&#8217;s some of the things that have&#160;happened since last wednesday:</p>
<ul>
<li>Filip Sergot added HTTP::UserAgent (but only ::Simple so far) to the ecosystem.</li>
<li>brrt has been working on the MoarVM JIT based on DynASM, but it seems like there&#8217;s a problem regarding dynamic register usage in DynASM. Still, with only static registers, a JIT could remove the overhead introduced by decoding and dispatching opcodes in the interpreter, better performance with the CPU cache, &#8230;</li>
<li>Chirag Agrawal and Reini Urban had been <a href="https://github.com/parrot/parrot/commits/rurban/pmc2c_orig2-gh1069">improving parrot s pmc2c and PMCs</a> by removing nested method&#160;calls and unneeded write barriers. It doesn t break the rakudo build, but performance measurements&#160;are still to be done.&#160;PMC write barriers can now also be manually optimized. See <a href="https://github.com/parrot/parrot/commit/46a7866acb6093a1a280c32a9db4a72efdbc1eb5">this changelog patch</a> for some more details.</li>
<li>jnthn has started work on letting MoarVM&#8217;s spesh inline code at specialize-time. Currently, NQP won&#8217;t start with it, but just looking at the log output shows a few nice opportunities already being considered for inlining.</li>
<li>dwarring put more tests into the test suite for the advent calendar posts.</li>
<li>donaldh worked on the socket tests for JVM and async socket tests in general.</li>
<li>XFix wrote a decoder and encoder for DSON, a very promising data serialization format. It&#8217;s derived from JSON::Tiny and re-uses a lot of its code; it&#8217;s a nice example for subclassing grammars: Compare the <a href="https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Actions.pm">Actions.pm from JSON::Tiny</a> and the <a href="https://github.com/xfix/Acme-DSON/blob/master/lib/Acme/DSON/Actions.pm">Actions.pm from Acme::DSON</a>.</li>
<li>the dyncall version included in some of our repositories were causing trouble on FreeBSD. That was worked on.</li>
<li>Ulti split off the statistics functions from his BioInfo module into <a href="https://github.com/MattOates/Stats/">a stats module</a>. It currently has mostly average-related things.</li>
<li>FROGGS put all the necessary stuff in place to <a href="https://gist.github.com/FROGGS/d0c2388c0e044830f4b0">allow slangs to be written in Pure Perl&#8239;6</a> and is going to modify his v5 module to be written in Perl&#8239;6 rather than NQP in the future.</li>
<li>Larry Wall added two nice bits to STD.pm: <a href="https://github.com/perl6/std/commit/0f2049cf00a7bbcb4f4db2ad05bce66560a213ba">Don&#8217;t throw errors about deprecated special variables inside signatures</a>&#160;and warn about <a href="https://github.com/perl6/std/commit/77c988436a361ca842a63b5c521ad60b49c93e96">duplicated characters in character classes</a>. For anybody looking to get into rakudo development, porting these patches to Rakudo would be <strong>a very nice low-hanging fruit.</strong></li>
</ul>
<p>Thank you for your patience. May your week be a pleasant one <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/175/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/175/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=175&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/06/10/2014-23-beginning-of-inlining-some-gsoc-work-materializes-dson-encoderdecoder/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-06-10 19:48:27</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:blogger.com,1999:blog-7864497598813874355.post-5736734009161768790">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://brrt-to-the-future.blogspot.com/" title="brrt to the future">Bart Wiegmans </a></div><br />
                     <img class="face" src="https://avatars1.githubusercontent.com/u/1617678?s=400" width="" height="" alt="">

            <a href="http://brrt-to-the-future.blogspot.com/2014/06/news.html">News</a> 
        </div>

         <div class="content">
            <p>Today is the day I've both created an implementation of the 'JIT graph' and destroyed it. (Or rather stashed it away in a <a href="https://github.com/bdw/MoarVM/blob/rich-jit-tree/src/jit/jit.h" target="_blank">safe branch</a>, but you get the point). The current HEAD of <a href="https://github.com/MoarVM/MoarVM/tree/moar-jit" target="_blank">moar-jit</a> has nothing that should deserve a name like 'JIT graph'. it is merely a thin layer around MVMSpeshGraph. So I thought maybe I should explain why I did this, what the consequences are, and what I'll do next.<br/><br/>First of all, let me explain why we wanted a 'JIT graph' in the first place, and what I think it ought to be. MoarVM contains a bytecode specialization framework called <a href="http://6guts.wordpress.com/2014/04/12/optimization-concurrency-and-moar/" target="_blank">spesh</a>. My current project to write a JIT compiler can be seen as an extension of this framework. Also, the core data structure of spesh - namely, <a href="https://github.com/MoarVM/MoarVM/blob/master/src/spesh/graph.h#L3" target="_blank">MVMSpeshGraph</a> - is also the input to the JIT compiler. I've promised a thorough walkthrough of spesh and you'll get it, but not today, today I have another point to make. That point is that although the spesh graph applies some sophisticated transformations upon the source bytecode, it is in essence still MoarVM bytecode. It still refers to MoarVM instructions and MoarVM registers.<br/><br/>Now that is perfectly alright if you want to eventually emit MoarVM instructions as it has done up until now. However there is still quite a layer of abstraction between MoarVM and the physical processor that runs your instructions. For example, in MoarVM acquiring the value of a lexical is a simple as a single <code>getlex</code> instruction. For the CPU there are several levels of indirection involved to do the same, and quite possibly a loop. The goal of the 'JIT graph' then was to bridge these levels of abstraction. In effect, it is to make the job of the (native) code generator much simpler.<br/><br/>I think the best way to explain this is with an example. Given the following MoarVM instruction:<br/></p><pre><code><br/>add_i r0, r1, r2<br/></code></pre><br/>I'd like to construct the following tree: <br/><pre><code><br/>store --&gt; address --&gt; moar-register(r0)<br/>      \-&gt; value --&gt; add --&gt; load --&gt; moar-register(r1)<br/>                        \-&gt; load --&gt; moar-register(r2)<br/></code></pre><br/>I think we can all criticize this structure for being verbose, and you'd be correct, but there is a point here. This structure is suitable for <a href="http://site.iugaza.edu.ps/hzaq/files/2010/02/Code_generation_using_tree_matching_and_dynamic_programming,.pdf" target="_blank">tree-matching and rewriting</a> during code generation - in short, for generating good code. (Simpler algorithms that emit lousy code work too :-)). There are too many nice things I have to say about this structure. But it depends critically on my capability to select the registers on which operations take place. And as it turns out, on x86_64, <a href="http://www.freelists.org/post/luajit/runtime-variable-register-in-dynasm,2" target="_blank">I can't</a>. Or on any other architecture than x86. Oh, and LuaJit doesn't actually use DynASM to compile its JIT, what do you know.<br/><br/>Actually, I kind-of could've guessed that from the luajit source. But I didn't, and that is my own dumb fault.<br/><br/>So, what to do next? There are two - or three, or four - options, depending on your level of investment in the given tools. One such option is to forgo register selection altogether and use static register allocation, which is what I did next. If we do that, there is truly no point in having a complicated graph, because all information is already contained in the MoarVM instructions themselves, and because you can't do anything sensible between instructions. After all, static register allocation means they're always the same. In essence, it means translating&#160; the interpreter into assembly.&#160; For most instructions, this approach is trivial - it could be done by a script. It is also rather unambitious and will never lead to much better performance than what the interpreter can do. Maybe 2x, but not 10x, which is what I think should be doable.<br/><br/>The other option is to do register selection <i>anyway</i>, on top of DynASM, just because. I'm... not sure this is a great idea, but it isn't a terrible idea, either. In essence, it involves writing or generating giant nested switch structures that emit the right code to DynASM, <a href="https://github.com/MoarVM/MoarVM/blob/moar-jit/src/jit/x86_64.dasc#L90" target="_blank">like so</a>, but everywhere, for every instruction in which you'd want this. I don't think that is particularly tractable, but it would be for a preprocessor.<br/><br/>The third option is to fix DynASM to do dynamic register allocation on x86_64 and any architecture you need it. This is possible - we <a href="https://github.com/MoarVM/dynasm" target="_blank">maintain a fork</a> of DynASM - but it'd involve deep diving into the internals of DynASM. What is more, Mike Pall who is vastly more capable than I am decided not to do it, and I'm fairly sure he had his reasons. The fourth option is to look for another solution than what DynASM provides. For while it is certainly elegant and nice, it may not be what we ultimately want.<br/><br/><br/>
          </div>
                        
         <p align="right">
            <a href="http://brrt-to-the-future.blogspot.com/2014/06/news.html">
            Bart Wiegmans | brrt to the future | 
            2014-06-09 15:03:33</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:blogger.com,1999:blog-7864497598813874355.post-3520718978128489598">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://brrt-to-the-future.blogspot.com/" title="brrt to the future">Bart Wiegmans </a></div><br />
                     <img class="face" src="https://avatars1.githubusercontent.com/u/1617678?s=400" width="" height="" alt="">

            <a href="http://brrt-to-the-future.blogspot.com/2014/06/goals-and-subgoals.html">Goals and subgoals</a> 
        </div>

         <div class="content">
            <p>Hi everybody! As it seems that a JIT compiler doesn't fall into place fully formed in a weekend, I've decided to set myself a few goals - along with smaller subgoals that I hope will help keep me on track. The immediate goal for the week is to compile a subroutine that adds two numbers and returns them, like so:<br/></p><pre><code><br/>sub foo() {<br/>    return 3 + 4;<br/>}</code></pre><br/>Which is literally as basic as you can get it. Nevertheless, quite a few parts have to be up and moving to get this to work. Hence the list. So without further ado, I present you:<br/><br/><ul><li>Modifying the Configure / Make files to run DynASM and link the resulting file.</li></ul><div>I've actually already done this, and it was more complicated than it seems, and I'm still not completely happy about it.</div><ul><li>Obtaining writable memory that can be marked executable</li><li>Marking said memory executable and non-writable (security folks!)</li></ul><div>I plan to do this by hijacking MVM_platform_allocate_pages(), which nobody uses right now.</div><ul><li>Determine, for a given code graph, whether we can JIT compile it.&#160;</li><ul><li>Called MVM_can_jit_graph(MVMSpeshGraph*)</li></ul><li>Transforming a Spesh graph into a JIT graph</li><ul><li>Note that I don't know yet what that JIT graph will look like.</li><li>I think it will hold values along with their sizes, though. I'm not sure the spesh graph does that.&#160;</li></ul><li>Directly construct our very simple code graph, by hand, using MAST.</li><li>JIT compiling the very simple code graph of our code.</li><li><b>UPDATE: </b>attach a JIT code segment to a MVMStaticFrame</li><li>Calling and returning from that code.</li></ul><div>This... will probably be a bit experimental - it's of no use to throw in a full-fledged register allocation and instruction selection algorithm to add two constant numbers. We can - in principle - also do without these, but it will lead to rather poor machine code.&#160;</div><div><br/></div><div>I've probably forgotten quite a few things in here. But this seems like a start. If there's something you think I missed, please comment :-)</div>
          </div>
                        
         <p align="right">
            <a href="http://brrt-to-the-future.blogspot.com/2014/06/goals-and-subgoals.html">
            Bart Wiegmans | brrt to the future | 
            2014-06-04 13:52:29</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=172">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/06/04/belated-2014-22-and-pieces-of-2014-23/">Belated: 2014.22 (and pieces of 2014.23): Eleven and other stuff.</a> 
        </div>

         <div class="content">
            <p>Hi there,</p>
<p>I&#8217;ve been surprisingly busy the last two days and didn&#8217;t get to write the weekly yet. Curiously, there wasn&#8217;t terribly much to write about anyway. So I&#8217;m taking the first few days of this week into account as well, so there&#8217;s more exciting stuff. Here goes:</p>
<ul>
<li>lizmat and FROGGS have been working on implementing the new and improved spec S11 about <a href="http://perlcabal.org/syn/S11.html">modules and importation and versioning and stuff</a>. That work had been happening in a branch until recently and it&#8217;s now on the master branch. I probably ought to write up what cool stuff you can use it for when the next release comes up unless somebody beats me to it.</li>
<li>donaldh has improved the IO related pieces of the core setting by removing special cases for different back-ends and partially re-implementing things as nqp ops there.</li>
<li>rakudo now honors a RAKUDO_MAX_THREADS environment variable to change the default amount of tasks that should be run at the same time in the ThreadPoolScheduler. This can still be overruled by creating a ThreadPoolScheduler with a specific max_threads, though.</li>
<li>jnthn has fixed a bunch of sundry problems: for loops with an explicit or implicit $_ that is marked &#8220;rw&#8221; used to clobber the outside $_, sub-signature binding (AKA destructuring assignment) used to turn itemized things into lists regardless of provided sigil, and a LAST phaser in a loop used to fire even if the loop didn&#8217;t run even once.</li>
<li>jnthn has taken up my preliminary work to make MoarVM&#8217;s bytecode specializer handle calls with named parameters as well.</li>
<li>lizmat has done a bunch of work on $*PERL/$?PERL, $*VM, $*USER, $*DISTRO, and many more.</li>
</ul>
<p>Other things worth pointing out:</p>
<ul>
<li>Gabor Szabo has been running <a href="http://perltv.org/">Perl TV</a> for a short while now and it also has some <a href="http://perltv.org/tag/perl%206">Perl&#8239;6 related videos</a>.</li>
<li>masak has finished reviewing the submissions to the Perl&#8239;6 Coding Contest 2012&#8242;s last (and most tricky) task: <a href="http://strangelyconsistent.org/blog/t4-rain-in-a-world-of-cubes">Rain in a world of cubes</a>.</li>
<li>Filip Sergot blogged about his GSoC work on <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_http_cookies_message_datetime_parse/">his personal blog</a>. This post is about HTTP::Message, HTTP::Cookies, and DateTime::Parse.</li>
<li>RosettaCode has been hosting <a href="http://rosettacode.org/wiki/Category:Perl_6">a whole bunch of Perl&#8239;6 implementations of tasks</a>&#160;for a long time now. Today, Larry Wall put up a rather pretty <a href="http://rosettacode.org/wiki/Fibonacci_word/fractal#Perl_6">implementation for the Fibonacci Word Fractal</a>&#160;that uses braille unicode glyphs for its graphical output.</li>
<li>There&#8217;s also an implementation of a Warnsdorff solver for a <a href="http://rosettacode.org/wiki/Solve_a_Hidato_puzzle#Perl_6">Hidato Puzzle</a>&#160;and it&#8217;s re-used for solving a <a href="http://rosettacode.org/wiki/Solve_a_Holy_Knight%27s_tour#Perl_6">Holy Knight&#8217;s Tour</a>, a <a href="http://rosettacode.org/wiki/Solve_a_Hopido_puzzle">Hopido Puzzle</a>, and a <a href="http://rosettacode.org/wiki/Solve_a_Numbrix_puzzle#Perl_6">Numbrix Puzzle</a>. Pretty pleasant how versatile this solver is!</li>
</ul>
<p>As usual, I hope you&#8217;ll have a pleasant rest-of-week <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/172/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/172/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=172&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/06/04/belated-2014-22-and-pieces-of-2014-23/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-06-04 09:48:24</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:filip.sergot.pl,2014-06-03:blog/perl6/gsoc_http_cookies_message_datetime_parse/">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://filip.sergot.pl/" title="filip.sergot.pl">Filip Sergot </a></div><br />
         

            <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_http_cookies_message_datetime_parse/">[GSoC] HTTP::Message, HTTP::Cookies and DateTime::Parse</a> 
        </div>

         <div class="content">
            <p>Hi there!</p>

<p>First two weeks of Google Summer of Code have just ended, it's time for a summary!</p>

<p>I posted about <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_http::headers/">HTTP::Headers</a> already so this post will be about HTTP::Message, HTTP::Cookies and something I didn't plan to have as a standalone module: DateTime::Parse (<a href="http://usev5.wordpress.com/">FROGGS</a>++).</p>

<h1><a href="https://github.com/sergot/http-message">HTTP::Message</a></h1>

<p>This module wraps every HTTP message receiving from servers. </p>

<pre><code>    use HTTP::Message;

    my $msg =
        "HTTP/1.1 200 OK\r\n"
      ~ "Server: Apache/2.2.3 (CentOS)\r\n"
      ~ "Last-Modified: Sat, 31 May 2014 16:39:02 GMT\r\n"
      ~ "ETag: \"16d3e2-20416-4fab4ccb03580\"\r\n"
      ~ "Vary: Accept-Encoding\r\n"
      ~ "Content-Type: text/plain; charset=UTF-8\r\n"
      ~ "Date: Mon, 02 Jun 2014 17:07:52 GMT\r\n"
      ~ "X-Varnish: 1992382947 1992382859\r\n"
      ~ "Age: 40\r\n"
      ~ "Via: 1.1 varnish\r\n"
      ~ "Connection: close\r\n"
      ~ "X-Cache: HIT\r\n"
      ~ "X-Cache-Hits: 2\r\n"
      ~ "\r\n"
      ~ "008000\r\n"
      ~ "# Last updated Sat May 31 16:39:01 2014 (UTC)\n"
      ~ "# \n"
      ~ "# Explanation of the syntax:\n";

    my $m = HTTP::Message.new.parse($msg);
    say ~$m;
</code></pre>

<p>Yes, we have just parsed a HTTP message, now - we can edit it</p>

<pre><code>    $m.add-content("Some new content!!");
    say "content:" ~ $m.content;

    $m.header( Vary =&gt; 'Age' );
    say $m.header('Vary');
</code></pre>

<p>... and remove one header:</p>

<pre><code>    $m.remove-header('Via');
</code></pre>

<p>... or delete the whole message:</p>

<pre><code>    $m.clear;
</code></pre>

<p>We can write HTTP::Request and HTTP::Response now, using this HTTP::Message module.</p>

<p>The plan is to make it able to handle encoding stuff (like chunked encoding).</p>

<h1><a href="https://github.com/sergot/http-cookies">HTTP::Cookies</a></h1>

<p>Another accomplishment is the HTTP::Cookies module, what makes us able to store HTTP cookies.</p>

<p>Here is an example:</p>

<pre><code>    use HTTP::Cookies;

    my $file = './cookies.dat';

    my $c = HTTP::Cookies.new( :$file, :autosave );

    $c.set-cookie(
        'Set-Cookie: name1=value1; Expires=DATE; Path=/; Domain=somedomain; secure'
    );

    say ~$c;
</code></pre>

<p>The 'autosave' option means that every change will be saved immediately.</p>

<p>We can find our cookies in $file too:</p>

<pre><code>    $ cat cookies.dat 
     #LWP6-Cookies-0.1
     Set-Cookie: name1=value1; Expires=DATE; Path=/; Domain=somedomain; secure
</code></pre>

<p>... later, we can load this file:</p>

<pre><code>    $c.load;
</code></pre>

<p>HTTP::Request and HTTP::Response will use this module for cookies handling, so we'll be able to e.g. log into a website etc.</p>

<h1><a href="https://github.com/sergot/datetime-parse">DateTime::Parse</a></h1>

<p>Another thing, which actually appeard unexpectedly, is DateTime::Parse module. We can use it, to parse e.g. HTTP dates (like <em>Last-Modified: Sat, 31 May 2014 16:39:02 GMT</em>). It supports <em>RFC1123</em> and <em>RFC850</em> time formats for now.</p>

<p>It is built using very powerful Perl 6 feature: <a href="https://github.com/sergot/datetime-parse/blob/master/lib/DateTime/Parse/Grammar.pm6">Grammar</a> and <a href="https://github.com/sergot/datetime-parse/blob/master/lib/DateTime/Parse/Actions.pm6">Actions</a>.</p>

<p>We are able to compare dates like this:</p>

<pre><code>    say Date.today &lt; DateTime::Parse.new("Sat, 31 May 2014 16:39:02 GMT").Date;
</code></pre>

<p>As you can see, we're losing the time in this comparision, it'll be improved I hope.</p>

<h1>Plans</h1>

<p><a href="http://usev5.wordpress.com/">FROGGS</a>, <a href="http://perlgeek.de/">mortiz</a> and I decided to change the name of LWP modules to HTTP, so from now it's not a LWP::UserAgent but HTTP::UserAgent. The reason was that we want to keep all the modules used to http stuff, with the same name: <strong>HTTP</strong>. :) </p>

<p>It is the third week of Google Summer of Code and here is the plan:</p>

<ul>
<li>complete HTTP::Request and HTTP::Response modules
<ul>
<li>with cookies working</li>
<li>with encoding/decoding working</li>
</ul></li>
<li>write HTTP::Simple</li>
<li>write lwp tools: lwp-request, lwp-dump and lwp-download (should we name them http-* as well?)</li>
</ul>

<p>I really enjoyed the first two weeks of coding under care of awesome mentors.</p>

<p>Do you wonder about participating in next year? You should!</p>
          </div>
                        
         <p align="right">
            <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_http_cookies_message_datetime_parse/">
            Filip Sergot | filip.sergot.pl | 
            2014-06-03 00:00:00</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:strangelyconsistent.org,2014-05-30:blog/t4-rain-in-a-world-of-cubes">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://strangelyconsistent.org/blog/" title="Strangely Consistent">Carl Masak </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/2d9d4815e8e5927a4e04cdea13ca1e36" width="" height="" alt="">

            <a href="http://strangelyconsistent.org/blog/t4-rain-in-a-world-of-cubes">t4: Rain in a world of cubes</a> 
        </div>

         <div class="content">
            <pre style="background: #ded; margin: 1em; padding: 1em;">&lt;flussence&gt; as a minecraft player I figured out what t4 was asking pretty much instantly :)</pre>

<p>This is me trying to emerge from the big strange writer's block that has
inexplicably formed around the t4 blog post. Here goes.</p>

<p>The t4 task was my clear favorite this year. It has a certain William Gibson
quality to it, with virtual rain falling inside a three-dimensional world where
everything is made of cubes which mostly just hang there, suspended, in
mid-air.</p>

<pre><code>## Simulate rain in a world of cubes

Write a program that calculates the volume of rain water collected in the cube
world described below.

The cube world &amp;mdash; given as input &amp;mdash; consists of a finite set of cubes
on integer coordinates `(x, y, z)`. The positive `y` coordinate means "up".

An infinite amount of rain then falls from an infinite height. Both of these
infinities are taken to really mean "large enough as to make no difference".
As it lands on cubes, the water will follow predictable rules:

* Rain falls everywhere.

* Water falling will land on the first cube below it. It does not fall through
  cubes.

* Water will collect on levels where walls on all sides will keep it in.

* Water will produce vertical waterfalls where such walls are missing.

* Cubes are packed tightly enough that gaps between cubes sharing an edge will
  not let water through. However, the same gaps will readily let air through if
  water needs to displace air for some reason.

Waterfalls work in the simplest way imaginable: if water "escapes" from a      
structure of cubes, it will fall straight down along the first available
"chute" of cube-formed empty cells until it hits a cube. (Which it may not
necessarily do. A waterfall may go on to infinite depth.) As a waterfall hits a
cube, it behaves just like other kinds of water: it may spread, collect, and
form new waterfalls as needed.
</code></pre>

<p>People had different ideas how to solve this one:</p>

<ul>
<li><p><strong>Massive flood</strong>. Fill the whole universe with water, and then carefully
drain it, taking note of what's left.</p></li>
<li><p><strong>Multiple joining pools</strong>. Keep track of all the individual bodies of water.
Raise the water level as long as that's still possible, and join together
bodies of water that touch.</p></li>
<li><p><strong>Waterfall, Frozen</strong>. Track all bodies of water, following waterfalls in the
forwards direction. For each cell proven to contain steady-state water, turn
that block into solid wall, and increase a counter by 1.</p></li>
</ul>

<p>I had fun guessing what solutions people would come up with. I correctly
guessed the first two, but not the last one. I guess it's a bit too mutable for
my FP brain to come up with these days.</p>

<p>Anyway, the mistakes! Oh, the <em>mistakes</em>. Not just one or two contestants for
this one; <em>all</em> of them. Turns out simulating rain on cubes is hard!</p>

<p>Here follows a choice list of assumptions broken by the contestants, that make
their programs return odd results.</p>

<h2>Assuming that rain can reach where it can't</h2>

<pre><code>XXX
X.X
X.X
XXX
</code></pre>

<p>Let me explain the above picture. In order to test the four entrants against
odd cases, I wrote a small program that builds a cube world from the above
syntax. It only describes a cross-section; and so walls in the depth direction
are automatically added. In other words, the above depicts a sealed box with no
way in.</p>

<p>It should contain no rainwater, of course. One of the programs returns that
it's full of water.</p>

<p>Oh, and by the way, the script that produces coordinates from pictures like the
above turned out quite cute and simple, so let me share it:</p>

<pre><code>my %coords =
    ' ' =&gt; [         ],
    'X' =&gt; [-1, 0, +1],
    '.' =&gt; [-1,    +1],
    '~' =&gt; [-1,    +1],
;

for lines.kv -&gt; $y, $line {
    for $line.comb.kv -&gt; $x, $char {
        for %coords{$char}.list -&gt; $z {
            say "($x, {-$y}, $z)";
        }
    }
}
</code></pre>

<h2>Assuming that the water can rise higher than its lowest outlet</h2>

<pre><code>  XXX
  X.X
  X.X
X~X~X
X~X~X
X~~~X
XXXXX
</code></pre>

<p>It's for cases like this that I felt a need in the problem description to talk
about gaps between cubes that "will readily let air through if water needs to
displace air". In other words, if the above is a kind of
<a href="https://en.wikipedia.org/wiki/File:Barometer_Goethe_01.jpg">barometer</a>, then
it's a completely useless one, because it leaks air and water find an
equilibrium based only on itself.</p>

<p>...which means that the correct answer above is 7. That's the number of
waterfilled cubes when the water level is the same "inside" the barometer and
at its mouth.</p>

<p>One of the programs got 9, assuming that the barometer fills up completely. Two
programs got 0, assuming no water can even enter.</p>

<p>Speaking of which...</p>

<h2>Assuming that some vessels are unable to contain water</h2>

<pre><code>    XXX
X~X X~X
X~XXX~X
X~~~~~X
XXXXXXX
</code></pre>

<p>Two programs had trouble with this one. I don't know if it's because of the
banana shape or the cover over one of the ends. But they got 0 cells of
rainwater collecting in it, when the correct answer is that it fills up all 9
internal cells.</p>

<h2>Underestimating the size of a vessel</h2>

<pre><code>XXXX~XXXX
X~~~~~~~X
X~~~~~~~X
X~~X~X~~X
X~~X~X~~X
XXXXXXXXX
</code></pre>

<p>A small vessel sitting in a bigger vessel. A naive program might reach the brim
of the small vessel, figure "oh, ok, we're done here", and then not fill up the
bigger vessel with water.</p>

<p>This happened with one of the programs.</p>

<h2>Concreteness and TDD</h2>

<p>I've mentioned it in previous posts, but the way I pick problems for the
contest is I find problems where I myself go "oh, that's easy, I'll just..."
and then a while later, I go "...oh wait." Problems that <em>look</em> easy on the
surface, but then turn out to have hidden depths. (A bit like these vessels
holding water can have hidden depts, tunnels, nooks and crannies.) One of my
favorite feelings when I design something is having the model "break" for a
certain case. It's like the floor falling out from under me, and I have to
re-orient myself inside the solution space to accomodate the new rules.</p>

<p>All the failures above emphasize the need for having <em>actual</em> test cases to run
the program against. The base tests I send with the problems are
(intentionally) inadequate for this purpose. The contestant is meant to think
up their own tests, consider edge cases, special cases, and pathological cases.</p>

<p>To me, that's where unit testing shines. Development suddenly becomes a
back-and-forth discussion between you and the programming substrate over
something very tangible: concrete cases.</p>

<h2>Only one champion still standing</h2>

<p>Only one of the programs passes all of the above tests with flying colors.
Well, I do want to stress that all four contestants made brave efforts. But for
one reason or another, one of the four programs ended up especially correct.</p>

<p>Check out <a href="https://github.com/masak/p6cc2012/tree/master/t4/review">the
reviews</a> for details.</p>

<h2>...no, wait</h2>

<p>Hm. What about this case?</p>

<pre><code>XXXX~XXXX
X~~~~~~~X
X~~XXX~~X
X~~~~~~~X
XXXXXXXXX
</code></pre>

<p>Should be able to hold 19 cells of water, right? Well, wouldn't you know. Our
so-far unblemished program fails this one, with the cryptic error message
<code>Merging non-balanced water masses</code>. (Two other programs get the correct 19,
and the last one gets 0.)</p>

<p>So I take it back. <em>None</em> of the programs are correct. Pity. But my points
about deep model thinking and representative test cases still stands.
Correctness is hard!</p>

<p>Next up: distributing weights evenly in bags.</p>
          </div>
                        
         <p align="right">
            <a href="http://strangelyconsistent.org/blog/t4-rain-in-a-world-of-cubes">
            Carl Masak | Strangely Consistent | 
            2014-05-30 16:01:27</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:blogs.perl.org,2014:/users/pawel_bbkr_pabian//2382.6059">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://blogs.perl.org/users/pawel_bbkr_pabian/" title="Pawel bbkr Pabian">Pawel bbkr Pabian </a></div><br />
         

            <a href="http://blogs.perl.org/users/pawel_bbkr_pabian/2014/05/perl-6-meets-json-rpc.html">Perl 6 meets JSON-RPC</a> 
        </div>

         <div class="content">
            <p>
During <a href="http://act.yapc.eu/plpw2014/">Polish Perl Workshop 2014</a> Carl M&#228;sak showed us how to model Feline Hotel application.<br/>
But he forgot one thing - that cats own the Internet and they want to browse and reserve rooms online!<br/>
I will pick up where he left off and show you how to publish API and go live in a blink of an eye.
</p>

<hr/>

<p>
So let's create <strong>modern Feline Hotel in Perl 6</strong>!
</p>

<pre>
    class FelineHotel;

	has %!rooms =
	    403 =&gt; {
	        'type'      =&gt; 'Standard',
	        'equipment' =&gt; [ 'bed', 'bowl' ],
	        'price'     =&gt; 64,
	        'available' =&gt; True,
	    },
	    406 =&gt; {
	        'type'      =&gt; 'Purrific',
	        'equipment' =&gt; [ 'bed', 'bowl', 'toys', 'jacuzzi' ],
	        'price'     =&gt; 128,
	        'available' =&gt; True
	    };

	method browse_rooms ( ) {
	    return %!rooms.grep( { .value{ 'available' } } ).hash;
	}

	method reserve_room ( Str $name!, Int $number! ) {
	    self!check_room( $number );

	    return not %!rooms{ $number }{ 'available' } = False;
	}

	method !check_room ( Int $number ) {
	    die 'No such room'
                unless %!rooms{ $number }:exists;
	    die 'Room not available'
                unless %!rooms{ $number }{ 'available' };
	}
</pre>

<p>
Application lives in <em>FelineHotel.pm</em> file and has very simple interface - <em>browse_rooms</em> method returns all available rooms and <em>reserve_room</em> method allows to make reservation by giving cats name and room number. Reservation calls private method <em>check_room</em> and fails if room does not exist or is not available.<br/>
 But how to write an API that allows online clients to connect and use those functions? Just create <em>server.pl</em> file.
</p>

<pre>
    use FelineHotel;
    use JSON::RPC::Server;

    JSON::RPC::Server.new( application =&gt; FelineHotel.new ).run;
</pre>

<p>
Then run it in your interpreter.
</p>

<pre>
    $ perl6 -I. server.pl
</pre>

<p>
It should print <em>Started HTTP server</em> and hang waiting for connections on port <em>8080</em>.<br/>
That's ALL, <u>your Feline Hotel just went live</u>.

</p><hr/>

<p>
To see whole picture let's create client application.
</p>

<pre>
	use JSON::RPC::Client;

	my $feline_hotel = JSON::RPC::Client.new(
            url =&gt; 'http://localhost:8080'
        );

	say 'Hotel has following rooms available:';
	say $feline_hotel.browse_rooms( );

	say 'Nyan cat makes reservation of room 403:';
	say $feline_hotel.reserve_room( 'Nyan', 403 );

	say 'Hotel has following rooms available:';
	say $feline_hotel.browse_rooms( );
</pre>

<p>
You can run it on the same machine as server. Or on any remote machine if you have port 8080 forwarded - in that case change <em>url</em> param in third line.<br/>
And you will see that Nyan cat just reserved room online and this room is not available anymore.<br/>
<strong>Meooow!</strong>
</p>

<hr/>

<p>
Because our Feline Hotel is working we have time for little code dissection.<br/>
Whole functionality is wrapped into <em>FelineHotel</em> class. Module <em>JSON::RPC::Server</em> takes instance of this class and exposes its <u>public</u> methods for outside world to use.<br/>
On the other side of Internet cable <em>JSON::RPC::Client</em> invokes those methods just as if they were declared in local code.<br/><br/>
This technique is called <a href="http://en.wikipedia.org/wiki/Remote_procedure_call">Remote Procedure Call</a> and uses <a href="http://www.json.org/">JavaScript Object Notation</a> format to exchange data in a way formalized by <a href="http://www.jsonrpc.org/specification">JSON-RPC 2.0 protocol.</a>
</p>

<p>
Go ahead and try to create your own services or improve this Feline Hotel if you want. You will quickly realize that <em>JSON::RPC</em> module not only hides networking stuff that happens between client and server but it tries to make your life easier in "Do What I Mean" way. For example you can overload methods on server. And catch exceptions in client.
</p>

<p>
To demonstrate this let's say that we want to refuse reservation for Grumpy cat because he always gives bad reviews online. It is as simple as overloading <em>reserve_room</em> method in server:
</p>

<pre>
	multi method reserve_room ( Str $name!, Int $number! ) {
	    self!check_room( $number );

	    return not %!rooms{ $number }{ 'available' } = False;
	}

	multi method reserve_room ( "Grumpy", Int $number! ) {
	    die 'No!';
	}
</pre>

<p>
Now when Grumpy tries to make reservation from client:
</p>

<pre>
	say 'Grumpy cat makes reservation of room 406:';
	try {
	    $feline_hotel.reserve_room( 'Grumpy', 406 );
	    CATCH { default { .say } }
	}
</pre>

<p>
It will fail with following error:
</p>

<pre>
	Internal error (-32603): "No!"
</pre>

<p>
You can also use named params on both client and server side, advanced methods signatures, batches of requests, notifications and much more. Moreover - all this stuff is not language dependent. You can connect to Perl 6 server using JSON-RPC 2.0 client in PHP/Ruby/Java/etc or use Perl 6 client to call JSON-RPC 2.0 based APIs written in any languages.   
</p>

<p>
<big><strong>Have fun and cheers from APIcon San Francisco 2014!</strong></big>
</p>

<hr/>

<ul>
	<li><em>JSON::RPC</em> module is included in Rakudo Star distribution. If you don't have it you can <a href="http://perl6maven.com/how-to-install-perl6-modules">install it using panda manager</a> or get it <a href="https://github.com/bbkr/jsonrpc">directly from GitHub</a>.</li>
        <li>You can <a href="https://gist.github.com/bbkr/4254320">download code samples here</a>.</li>
</ul>
          </div>
                        
         <p align="right">
            <a href="http://blogs.perl.org/users/pawel_bbkr_pabian/2014/05/perl-6-meets-json-rpc.html">
            Pawel bbkr Pabian | Pawel bbkr Pabian | 
            2014-05-28 15:42:40</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://www.nntp.perl.org/group/perl.perl6.announce/2014/05/msg712.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://www.nntp.perl.org/group/perl.perl6.announce/" title="perl.perl6.announce">Perl 6 Announce </a></div><br />
         

            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/05/msg712.html">Parrot 6.4.0 "Double-eyed Fig Parrot" released! by Bruce Gray</a> 
        </div>

         <div class="content">
            <p>(Dateline: 2014-05-21)<br/><br/>On behalf of the Parrot team, I'm proud to announce Parrot 6.4.0, also known<br/>as "Double-eyed Fig Parrot".  Parrot (http://parrot.org/) is a virtual machine aimed<br/>at running all dynamic languages.<br/><br/>Parrot 6.4.0 is available on Parrot's FTP site<br/>(ftp://ftp.parrot.org/pub/parrot/releases/devel/6.4.0/), or by following the<br/>download instructions at http://parrot.org/download.  For those who would like<br/>to develop on Parrot, or help develop Parrot itself, we recommend using Git to<br/>retrieve the source code to get the latest and best Parrot code.<br/><br/>Parrot 6.4.0 News:<br/>   - Examples<br/>       + Enhance shootout/regexdna.pir to test GC write barrier crashes<br/>   - Community<br/>       + Our GSOC project did officially start. See https://github.com/ZYROz/parrot<br/><br/><br/>The SHA256 message digests for the downloadable tarballs are:<br/>025bfe953211d09af6a4d80b13b4e7fef2bfaa055963b76f1bf674440c0cdbba parrot-6.4.0.tar.gz<br/>419ddbd4c82b08e4ab1670a67c2a222120d34090413e2d4ecef9cb35f9b0bef0 parrot-6.4.0.tar.bz2<br/><br/>Many thanks to all our contributors for making this possible, and our sponsors<br/>for supporting this project.  Our next scheduled release is 17 Jun 2014.<br/><br/>Enjoy!<br/><br/></p>
          </div>
                        
         <p align="right">
            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/05/msg712.html">
            Perl 6 Announce | perl.perl6.announce | 
            2014-05-27 20:07:42</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=167">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/05/26/2014-21-nlpw2014-recordings-release-optimization-gtk-and-cairo/">2014.21: NLPW2014 recordings, release, optimization, GTK and Cairo</a> 
        </div>

         <div class="content">
            <p>Heya, it&#8217;s timotimo again with your weekly change summary.</p>
<p>This week has seen the compiler release of MoarVM, NQP and Rakudo 2014.05. This post covers everything that was done before and after the release during that week.</p>
<ul>
<li>Nicholas Clark used pahole to find and reclaim lots of bytes that were&#160;wasted in MoarVM&#8217;s structs due to alignment rules in the C compiler.</li>
<li>FROGGS&#8217; loop label changes have landed in the release for all back-ends.</li>
<li>I added a few classes and a few lines of example code to the GTK::Simple module.</li>
<li>I also started work on a Cairo binding that&#8217;ll hopefully cooperate well with GTK::Simple as well.</li>
<li>I fixed a problem where NativeCall would dispatch callbacks to the wrong clones of the same closure.</li>
<li>tadzik added a module ClassX::StrictConstructor to the ecosystem that throws errors when excess named arguments are passed to a new method.</li>
<li>Thanks to lizmat, assigning to a read-only member or object now gives a proper error message on MoarVM.</li>
<li>A bunch of microoptimizations have happened. The result of those can be seen in the benchmarks: one <a href="http://t.h8.lv/p6bench/2014-05-26-without_startup.html">with startup time counted</a>, one <a href="http://t.h8.lv/p6bench/2014-05-26-with_startup.html">without startup/compile time counted</a>.
<ul>
<li>FROGGS made IO.d, IO.s and IO.z (checks for files being a folder, what size they have, and being empty respectively) about 40% faster</li>
<li>FROGGS also made Path::contains about 25% faster on JVM.</li>
<li>jnthn made binds to attributes in signatures (i.e. method foo($!bar)) take the fast path in the binder.</li>
<li>same thing for re-names in signatures</li>
<li>jnthn added more optimizations, that ended up making Path::contents much faster.</li>
<li>jnthn also tweaked the signature of &#8220;match&#8221; to go through the fast path in the binder.</li>
<li>the .comb method, when called without arguments, is also faster now, thanks to jnthn.</li>
<li>Junctions now work a bit faster as well. Another change by jnthn.</li>
<li>lizmat made say and note a bit faster.</li>
</ul>
</li>
<li>There&#8217;s another big optimization done by jnthn that turns for loops that iterate over ranges into much simpler while loops. This change makes these loops as fast as the equivalent while (or loop) loop, but it&#8217;s still nice to look at.</li>
</ul>
<p>Other than that, the <a href="https://www.youtube.com/channel/UCAsxQEJp-ov1qEDNjvLfjCA">recordings from the NLPW2014</a> are up on youtube. I&#8217;ve enjoyed jnthn&#8217;s talk about reactive programming a whole lot. Other than that, I haven&#8217;t yet spent much time watching these recordings.</p>
<p>That&#8217;s it from me for today. Hope you&#8217;ll have a brilliant week <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/167/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/167/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=167&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/05/26/2014-21-nlpw2014-recordings-release-optimization-gtk-and-cairo/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-05-26 15:37:16</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:filip.sergot.pl,2014-05-20:blog/perl6/gsoc_http::headers/">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://filip.sergot.pl/" title="filip.sergot.pl">Filip Sergot </a></div><br />
         

            <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_http::headers/">[Google Summer of Code] HTTP::Headers</a> 
        </div>

         <div class="content">
            <p>Hey people!</p>

<p>I participate in Google Summer of Code this year, my project is to add TLS/SSL support to Perl 6, with all HTTP::* modules and LWP::UserAgent as well!</p>

<p>This will be a very good summer! Well, we'll be able to write a lot of new stuff after ending this project.</p>

<p>This is my first post about <strong>GSoC</strong> and it is about <a href="https://github.com/sergot/http-headers">HTTP::Headers</a> module.</p>

<p>The main goal of this module is to provide functionality for handling HTTP headers. It's simple - that's my starting point.</p>

<p>While writing I tried to keep it similar to <a href="https://metacpan.org/pod/HTTP::Headers">Perl 5 module</a>. Headers are represented by a hash - every key-value pair is called a field, key is a name of single header (names are cases insensitive).</p>

<p>Example usage:</p>

<pre><code>    use HTTP::Headers;
    my $h = HTTP::Headers.new(Accept =&gt; 'text/plain');

    my $a = $h.header('Accept');             # get
    $h.remove-header('Accept');              # delete
    $h.header(Content-Type =&gt; 'text/plain'); # set

    say $h.Str("\r\n");                # print headers as a string
</code></pre>

<p>We are able to store multiple values in such fields</p>

<pre><code>    my $h = HTTP::Headers.new(Accept =&gt; &lt;text/plain text/html&gt;);
</code></pre>

<p>We can also push new values to existing field:</p>

<pre><code>    $h.push-header(Accept =&gt; &lt;image/jpeg image/png&gt;);
</code></pre>

<h1>Why do we need this?</h1>

<p>HTTP::Message uses this to store HTTP headers, thus HTTP::{Request, Response} use it too (because they inherit from HTTP::Message).</p>

<p>What do you think about it?</p>

<p>And, as always, feel free to contribute!</p>
          </div>
                        
         <p align="right">
            <a href="http://filip.sergot.pl/en/blog/perl6/gsoc_http::headers/">
            Filip Sergot | filip.sergot.pl | 
            2014-05-20 00:00:00</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=164">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/05/19/2014-20-conference-cpan-progress-and-other-stuff/">2014.20: Conference, CPAN progress and other stuff.</a> 
        </div>

         <div class="content">
            <p>First of all, let me apologize for posting this week&#8217;s post so late in the day. I&#8217;ve spent all day helping friends renovate the apartment they want to move into until the end of the month.</p>
<p>The PLPW in Poznan, Poland, has taken place over the weekend. Here&#8217;s a <a href="http://act.yapc.eu/plpw2014/talks">link to the list of talks</a> again. Filip Sergot announced, that the talk recordings <a href="https://twitter.com/fsergot/status/467946752776343552">will be up on youtube soon</a>. Here&#8217;s the slides of tadzik&#8217;s talk about <a href="http://feather.perl6.nl/~tjs/talks/plpw14/#/">game development in Perl&#8239;6</a>&#160;and his lightning talk about&#160;<a href="http://feather.perl6.nl/~tjs/talks/plpw14/rakudobrew/#/">the lovely&#160;rakudobrew utility</a>.</p>
<p>The Czech Perl Workshop 2014 is starting real soon. Here&#8217;s a <a href="http://act.yapc.eu/czpw2014/talks">link to the talks list</a>.</p>
<p>Other things I&#8217;ve seen:</p>
<ul>
<li>There&#8217;s now a <a href="http://www.cpan.org/modules/by-authors/id/J/JO/JONATHAN/Perl6/">NativeCall distribution on CPAN</a> for Perl&#8239;6, but Panda doesn&#8217;t know how to use CPAN yet.</li>
<li>The patch to Rakudo&#8217;s source code to make slangs work a bit better is now merged into master. FROGGS&#8217; v5 module will soon be Panda-installable, too, to make use of that. I suspect we&#8217;ll be putting v5 into Rakudo&#8239;Star, too.</li>
<li>Bitwise operations on bignums were fixed on MoarVM thanks to skids.</li>
<li>ymd-from-daycount was broken on Parrot due to a broken implementation of bitwise shifts. Now there&#8217;s a workaround in place, thanks to dwarring.</li>
<li>FROGGS fixed my-scoped regexes inside of classes.</li>
<li>FROGGS also finished his work on loop labels for NQP and Rakudo on all three backends. The patches will&#160;be reviewed before merging.</li>
<li>Thanks to significant work by lizmat,&#160;$*KERNEL, $*DISTRO, and $*VM are now full-blown objects.</li>
<li>lizmat implemented subtests for Rakudo&#8217;s Test.pm to make TODOing tests more robust and also to make test output prettier.</li>
<li>jnthn made NQP able to turn simple for loops into much simpler code, which should result in a speed gain. I didn&#8217;t measure it yet, though. This helps on all backends.</li>
<li>On top of that, $_ can now also be turned into a local instead of lexical variable on all back-ends, giving more optimization (and specialization) opportunities.</li>
<li>There&#8217;s also sundry&#160;improvements in spesh.</li>
<li>Nicholas Clark improved the handling of Serialization Context IDs that belong to objects.</li>
<li>If I understand correctly, the bug where MoarVM incorrectly turned nums into strings was fixed. Turns out it was forgetting about the &#8216;e&#8217; inside scientific notation.</li>
<li>donaldh made sure nqp::seekfh and nqp::readfh work correctly on JVM and Parrot and added tests.</li>
<li>flussence prettied up the HTML source of perl6.org.</li>
</ul>
<p>Since I&#8217;ve been busy all day today and yesterday and will be doing the same tomorrow and perhaps even the day after that, I&#8217;ve probably missed some interesting things and will not be able to immediately fix it. Sorry about that!</p>
<p>Anyway, I wish you all a pleasant week <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/164/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/164/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=164&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/05/19/2014-20-conference-cpan-progress-and-other-stuff/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-05-19 23:16:11</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:blogger.com,1999:blog-7864497598813874355.post-2527240473021860537">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://brrt-to-the-future.blogspot.com/" title="brrt to the future">Bart Wiegmans </a></div><br />
                     <img class="face" src="https://avatars1.githubusercontent.com/u/1617678?s=400" width="" height="" alt="">

            <a href="http://brrt-to-the-future.blogspot.com/2014/05/moarvm-as-machine.html">MoarVM as a Machine</a> 
        </div>

         <div class="content">
            <p>If you read my blog, you'll likely know what <a href="http://www.moarvm.com/" target="_blank">MoarVM</a> is and what it does. For readers who do not, MoarVM is a virtual machine that is designed to execute <a href="http://perl6.org/" target="_blank">perl6</a> efficiently. Like a real computer, a virtual machine provides the following:<br/></p>
  <ul>
    <li>A 'processor', that is to say, something that reads a file and executes a program. This simulation is complete with registers and an instruction set.</li>
    <li>An infinite amount of memory, using a garbage collector schema.</li>
    <li>IO ports, including file and network access.</li>
    <li>Concurrency (the simulation of an infinite amount of processors via threads)</li>
  </ul>
  <div>In this post I'll focus on the 'processor' aspect of MoarVM. MoarVM is a 'register virtual machine'. This means simply that all instructions operate on a limited set of storage locations in which all variables reside. These storage locations are called registers. Every instruction in the bytecode stream contains the address of the memory locations (registers) on which it operates. For example, the MoarVM instruction for adding two integers is called add_i, and it takes three 'operands', one for the source registers to be added together and a third for the destination register to store the result. Many instructions are like that.</div>
  <div>
    <br/>
  </div>
  <div>A register VM is often contrasted with a stack VM. The&#160;<a href="http://en.wikipedia.org/wiki/Java_virtual_machine" target="_blank">Java Virtual Machine</a>&#160;is a well-known stack VM, as is the <a href="http://en.wikipedia.org/wiki/Common_Language_Runtime" target="_blank">.NET CLR</a>. In a stack VM values are held on an ever growing and shrinking stack. Instructions typically operate only on the top of the stack and do not contain any references to memory addresses. A typical stack VM would add two numbers by popping two of the stack and pushing the result.</div>
  <div>
    <br/>
  </div>
  <div>Why was the choice for a register VM made? I'm not certain, but I think it likely that it was chosen because <a href="https://www.usenix.org/legacy/events/vee05/full_papers/p153-yunhe.pdf" target="_blank">register machines are frequently faster in execution</a>. In brief, the trade-off is between instruction size on one hand and total number of instructions needed to execute a given program. Because stack VM instructions do not contain any addresses (their operands are implicitly on the stack), they are smaller and the VM has to spend less time to decode them. However, values frequently have to be copied to the top of the stack in order for the stack machine to operate on them. In contrast, a register machine can just summon the right registers whenever they are required and only rarely has to copy a value. In most VM's, the time spent executing an instruction is much larger than the time spent decoding it, so register VM's are often faster.&#160;</div>
  <div>
    <br/>
  </div>
  <div>From the point of view of somebody writing a (JIT) compiler (like myself), both architectures are abstractions, and somewhat silly too. All actual silicon processor architectures have only a limited number of registers, yet most 'register' VM's - including MoarVM - happily dole out a new set of registers for every routine. In some cases, such as the Dalvik VM, these registers are explicitly stack-allocated, too! The 'register' abstraction in MoarVM does not translate into the registers of a real machine in any way.</div>
  <div>
    <br/>
  </div>
  <div>Nonetheless, even for a compiler writer there is a definitive advantage to the register VM architecture. To the compiler, MoarVM's instructions are input, that is to be transformed into native instructions. The register VM's instructions are in this sense very similar to something called <a href="http://en.wikipedia.org/wiki/Three_address_code" target="_blank">Three Address Code</a>. (Actually, some MoarVM instructions take more than three operands, but I'll get to that in a later post). A very convenient property of TAC and MoarVM instructions alike is that every variable already has its own memory location. In contrast, in a stack VM the same variable may have many copies on the stack. This is inconvenient for efficient code generation for two reasons.&#160;</div>
  <div>
    <br/>
  </div>
  <div>First of all, naively copying values as they would be in the stack VM will lead to inefficient code. It may not be obvious which copies are necessary and which are redundant. Nor is it immediately obvious how much run-time memory compiled routine would use. To efficiently compile stack VM code a compiler might do best to translate it into Three Address Code first.<br/><br/></div>
  <div>But the second reason is perhaps more profound. Modern JIT compilers use a technique called <a href="http://courses.engr.illinois.edu/cs421/sp2011/project/self-type-feedback.pdf" target="_blank">type feedback compilation</a>. Briefly, the idea is that a compiler that is integrated into the runtime of the system can exploit information on how the program is actually used to compile more efficient code than would be possible on the basis of the program source code alone. A simple example in javascript would be the following routine:</div>
  <div>
    <br/>
  </div>
  <div>
    <pre>function foo(a) {<br/>    var r = 0;<br/>    for (var i = 1; i &lt; a.length; i++) {<br/>        r += (a[i] * a[i-1]);<br/>    }<br/>    return r;<br/>}<br/></pre>
    <pre/>
    <pre>foo([1,2,3,4,5,6]);</pre>
  </div>
  <div><br/>If all calls to <code>foo</code> happen to have a single argument consisting of an array of integers, the semantics of this routine become much simpler than they are otherwise. (For example, in javascript, the addition of a number and a string produces a well-defined result, so it is totally valid to call <code>foo</code> with an array of strings). A type-feedback compiler might notice a large number of calls to <code>foo</code>, all with integer arrays as their sole argument, assume this will always be so, and compile a much faster routine. In order to correctly handle arrays of strings too, the compiler inserts a 'guard clause' that checks if a is <i>really</i>&#160;an array of integers. If not, the routine must be 'de-optimised'. &#160;Note that&#160;<i>spesh</i>, which is the optimisation framework for MoarVM, also works this way<br/><br/>The goal of de-optimisation is to resume the execution of the interpreted (slow) routine where the assumptions of the compiled routine have failed. A typical place in our 'foo' function would be on entry or on the addition to r. The idea is that the values that are calculated in the optimised routine are copied to the locations of the values of the interpreted routine. In a register machine, this is conceptually simple because <b>all variables already have a fixed location</b><i>.&#160;</i>However, the layout of the stack in a stack vm is<i>&#160;</i><b>dynamic and changes with the execution of the routine</b>, and mapping between compiled and interpreted values may not be very simple at all. It is certainly doable - after all, the JVM famously has an efficient optimising JIT compiler - but not simple.<br/><br/>And in my opinion, simplicity wins.</div>
          </div>
                        
         <p align="right">
            <a href="http://brrt-to-the-future.blogspot.com/2014/05/moarvm-as-machine.html">
            Bart Wiegmans | brrt to the future | 
            2014-05-18 11:34:14</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://p6weekly.wordpress.com/?p=160">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://p6weekly.wordpress.com/" title="Weekly changes in and around Perl 6">Weekly changes in and around Perl 6 </a></div><br />
         

            <a href="http://p6weekly.wordpress.com/2014/05/12/2014-19-moar-spesh-portability-cpan-space-invaders/">2014.19: Moar spesh, portability, cpan, space invaders</a> 
        </div>

         <div class="content">
            <p>This week, more work has been poured into MoarVM&#8217;s specializer. Here&#8217;s the complete&#160;list:</p>
<ul>
<li>jnthn merged the &#8220;spesh_trace&#8221; branch that teaches the specializer about lexicals and adds a &#8220;logging&#8221; step to the specialization process.</li>
<li>locating the corresponding object and ID from serialization contexts had quadratic time complexity, causing any recent addition to the setting (routines, classes, methods, constants) to bump up compilation time more and more. The complexity is now linear instead.</li>
<li>with lots of guidance from jnthn, I implemented more specializations and also improved the code-gen of small integer constants in the bytecode.</li>
<li>nwc10 has been building MoarVM, nqp, and rakudo on different architectures and did lots of patching to make sure it&#8217;s at least somewhat portable; it now works on ARMv6, only fails a nativecall test on PowerPC and due to trouble from libatomicops it doesn&#8217;t work on SPARC yet. Given access to MIPS hardware and a development toolkit, he could probably make that work, too. All portability work has been done on top of Linux.</li>
<li>the key attribute of Pair is now immutable, since it should be very clear that you can&#8217;t use them as lvalues when returned from a hash, for example.</li>
<li>brrt has written his first blog post for the GSoC project in which <a href="http://brrt-to-the-future.blogspot.de/2014/05/as-part-of-my-community-bonding-period.html">he briefly discusses what DynASM is</a>.</li>
<li>tadzik has improved &#8220;steroids&#8221;, his game development framework, and <a href="http://ttjjss.wordpress.com/2014/05/11/new-game-space-invaders/">built a space invaders game on top of it</a>.</li>
<li>lizmat has continued her work on supplies and the corresponding tests.</li>
<li>lizmat also fixed slices from arrays and hashes that used to return empty lists instead of nothing when an element didn&#8217;t exist.</li>
<li>dwarring has continued adding advent calendar tests to the test suite.</li>
<li>the database table that FROGGS&#160;needs for indexing Perl&#8239;6 modules on CPAN&#160;is now in place, so he can start work on the indexer.</li>
<li>FROGGS also continued work on loop labels. They pass their tests on Parrot so far and with adjustments to follow moving objects (due to the garbage collector) on the JVM and MoarVM they should work on those two backends, too. And there will be more tests. FROGGS expects the work to be merged by next monday.</li>
<li>During the coming week, there&#8217;ll be the <a href="http://act.yapc.eu/plpw2014/schedule">PLPW</a>, and two days later the <a href="http://act.yapc.eu/czpw2014/talks">CZPW</a>. On these two events, FROGGS, masak, jnthn, lizmat, woolfy, tadzik, and lichtkind are going to present about Perl&#8239;6 related topics.</li>
</ul>
<p>So in the coming week there&#8217;ll be news for cpan, probably even more performance work (the information gathered by the logging stage is not used for terribly much yet), loop labels, and who knows what else.</p>
<p>Looking forward to it!</p>
<p>Have a lovely week, esteemed readers <span class="wp-smiley emoji emoji-smile" title=":)">:)</span></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/p6weekly.wordpress.com/160/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/p6weekly.wordpress.com/160/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=p6weekly.wordpress.com&amp;blog=63973376&amp;post=160&amp;subd=p6weekly&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://p6weekly.wordpress.com/2014/05/12/2014-19-moar-spesh-portability-cpan-space-invaders/">
            Weekly changes in and around Perl 6 | Weekly changes in and around Perl 6 | 
            2014-05-12 11:37:04</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://ttjjss.wordpress.com/?p=310">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://ttjjss.wordpress.com/" title="Whatever but Cool  Perl">Tadeusz Sosnierz (tadzik) </a></div><br />
         

            <a href="http://ttjjss.wordpress.com/2014/05/11/new-game-space-invaders/">New game: Space Invaders</a> 
        </div>

         <div class="content">
            <p>It&#8217;s been a while since I published RetroRacer, but a lot of new things happened in Steroids too! So many things that I <a href="https://github.com/tadzik/steroids/tree/master/games">backported the old games to the new engine</a>; I&#8217;ll be testing them each time to see if I&#8217;m introducing any breaking changes. But! back to Space Invaders.</p>
<p><a href="http://ttjjss.files.wordpress.com/2014/05/2014-05-11-195724_1024x768_scrot.png"><img alt="Image" class="size-full wp-image aligncenter" id="i-314" src="http://ttjjss.files.wordpress.com/2014/05/2014-05-11-195724_1024x768_scrot.png?w=650"/></a></p>
<p style="text-align: center;">(brave ship fighting off alien hordes)</p>
<p style="text-align: left;">&#160;</p>
<p style="text-align: left;">The game is now available at&#160;<a href="https://github.com/tadzik/steroids">https://github.com/tadzik/steroids</a>. Below I&#8217;ll outline some of the new features in the engine itself.</p>
<p style="text-align: left;"><strong>Animations</strong></p>
<p style="text-align: left;">It is now possible to load animations from spritesheets (<a href="https://github.com/tadzik/steroids/blob/master/assets/invader.png">example here</a>), and tell Steroids to animate them over time.</p>
<blockquote><p>self.load_spritesheet(&#8216;invader&#8217;, &#8216;assets/invader.png&#8217;, 72, 32, 7);</p>
<p>my $invader = self.add_sprite(&#8216;invader&#8217;, $x, $y);</p>
<p>self.add_animation($invader, Any, 200, True);</p>
</blockquote>
<p>In order: load a spritesheet of seven 72&#215;32 images, put it on screen an animate all its frames (Any), changing a frame every 200 miliseconds, and play it in a loop (True). The ships will rotate and look nice :)</p>
<p><strong>Gamepad support</strong></p>
<blockquote><p>method update($dt) {<br/>&#160; &#160; my $pad = self.gamepads[0];<br/>&#160; &#160; my $analog = $pad.analog_percentage($pad.analog_left_x);</p>
<p>&#160; &#160; if self.is_pressed(&#8220;Left&#8221;) or $pad.dpad_position(&#8220;Left&#8221;) {<br/>&#160; &#160; &#160; &#160; $!player.x -= 15;<br/>&#160; &#160; } elsif self.is_pressed(&#8220;Right&#8221;) or $pad.dpad_position(&#8220;Right&#8221;) {<br/>&#160; &#160; &#160; &#160; $!player.x += 15;<br/>&#160; &#160; } elsif $analog.abs &gt; 0.1 {<br/>&#160; &#160; &#160; &#160; $!player.x += Int(15 * $analog);<br/>&#160; &#160; }</p>
<p>&#160; &#160; &#8230;</p>
<p>}</p>
<p>&#160; &#160;&#160;</p>
</blockquote>
<p>New steroids features gamepad support! At this point the only supported one is the Xbox controller (I accidentally used the old SDL joystick API instead of a new, shiny gamecontroller API), so it&#8217;s all a little bit experimental. But, as you can see, it works pretty well and is quite useful indeed!</p>
<p><strong>Game states</strong></p>
<blockquote><p>class Main is Steroids::State {</p>
<p>&#160; &#160; &#8230;</p>
<p>}</p>
<p>&#160;</p>
<p>class Menu is Steroids::State {</p>
<p>&#160; &#160; &#8230;</p>
<p>}</p>
<p>&#160;</p>
<p>given Steroids::Game.new {<br/>&#160; &#160; .add_state(&#8216;menu&#8217;, { Menu.new });<br/>&#160; &#160; .add_state(&#8216;main&#8217;, { Main.new });<br/>&#160; &#160; .change_state(&#8216;menu&#8217;);<br/>&#160; &#160; .start;<br/>}</p>
</blockquote>
<p>What&#8217;s going on here? We have to separate game states (one for the menu and one for the actual game), and we can switch between them at any point using the change_state() method. For example, somewhere in Menu&#8217;s code:</p>
<blockquote><p>method keypressed($k) {<br/>&#160; &#160; if $k eq &#8216;S&#8217; {<br/>&#160; &#160; &#160; &#160; self.reset_state(&#8216;main&#8217;);<br/>&#160; &#160; &#160; &#160; self.change_state(&#8216;main&#8217;);<br/>&#160; &#160; }</p>
<p>&#160; &#160; &#8230;</p>
<p>}</p>
</blockquote>
<p>The states themselves are passed in as code references for the sake of the reset_state() method shown above. You can think of them as factories. The reset above is necessary, so each time you start a new game, it actually starts anew instead of continuing the old one (which is probably either lost or won by that time).</p>
<p>I probably forgot about something, so if anything is unclear just write it in the comment section. Go try out Space Invaders, and don&#8217;t forget about the soundtrack!</p>
<p>I&#8217;ll be talking about Steroids next weekend at this year&#8217;s <a href="http://act.yapc.eu/plpw2014/">Polish Perl Workshop</a>; make sure to stop to find out about the latest developments and future plans.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/ttjjss.wordpress.com/310/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ttjjss.wordpress.com/310/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=ttjjss.wordpress.com&amp;blog=15099040&amp;post=310&amp;subd=ttjjss&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://ttjjss.wordpress.com/2014/05/11/new-game-space-invaders/">
            Tadeusz Sosnierz (tadzik) | Whatever but Cool  Perl | 
            2014-05-11 18:26:00</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:blogger.com,1999:blog-7864497598813874355.post-965721984638003051">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://brrt-to-the-future.blogspot.com/" title="brrt to the future">Bart Wiegmans </a></div><br />
                     <img class="face" src="https://avatars1.githubusercontent.com/u/1617678?s=400" width="" height="" alt="">

            <a href="http://brrt-to-the-future.blogspot.com/2014/05/as-part-of-my-community-bonding-period.html">DynASM is awesome</a> 
        </div>

         <div class="content">
            <p>As part of my &#8216;community bonding&#8217; period, I&#8217;ve taken it upon me to write a small series of blog posts explaining the various parts I&#8217;ll be using to add a JIT compiler to MoarVM. Today I&#8217;d like to focus on the <a href="http://luajit.org/dynasm.html">DynASM</a> project that originates from the awesome <a href="http://luajit.org/">LuaJIT</a>project.<br/><br/>DynASM is probably best described as an run-time assembler in two parts. One part is written in lua and acts as a source preprocessor. It takes a C source file in which special directives are placed that take the form of assembly-language statements. <a href="https://github.com/bdw/lab/tree/master/c/dasm">Here</a>&#160;is a fully worked-out example. These are then transformed into run-time calls that construct the desired bytecode. The generated bytecode can be called like you would a regular function pointer. <br/><br/>DynASM has no run-time dependencies. But to run the preprocessor you will need lua as well as the <a href="http://bitop.luajit.org/">Lua BitOp module</a> (also from the luajit project). The run-time part is contained within the headers. DynASM is licensed under the MIT license and supports many different architectures, including x86, x64, ppc, and arm. DynASM also intergrates neatly into a Makefile-based build.<br/><br/>In many respects DynASM is an ideal tool for this particular   job. However, it also has a few drawbacks. The most important of   these is the lack of documentation. With the exception of a few   <a href="http://blog.reverberate.org/2012/12/hello-jit-world-joy-of-simple-jits.html">  scattered blog posts </a>, there is barely any documentation at   all. For many of the simple operations, this is sufficient. For the   more complex things, such as dynamic register selection, or dynamic   labels, it seems there is no other option than to ask   directly. (FWIW, the 'dynamic registers' question was asked an   answered only two days ago on the luajit mailing list). However, I think the benefits of using DynASM outwheigh these issues.<br/><br/>For my next blog, I'll be looking at the MoarVM machine model and bytecode set, especially in relation to x64. Hope to see you then.</p>
          </div>
                        
         <p align="right">
            <a href="http://brrt-to-the-future.blogspot.com/2014/05/as-part-of-my-community-bonding-period.html">
            Bart Wiegmans | brrt to the future | 
            2014-05-11 04:58:47</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://rakudo.org/?p=337">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://rakudo.org/" title="rakudo.org">rakudo.org </a></div><br />
                     <img class="face" src="http://rakudoperl.org/wp/wp-content/uploads/2011/04/rakudo-1001.png" width="" height="" alt="">

            <a href="http://rakudo.org/2014/05/05/announce-rakudo-star-release-2014-04/">Announce: Rakudo Star Release 2014.04</a> 
        </div>

         <div class="content">
            <h2>A useful, usable, &#8220;early adopter&#8221; distribution of Perl 6</h2>
<p>On behalf of the Rakudo and Perl 6 development teams, I&#8217;m happy to announce the April 2014 release of &#8220;Rakudo Star&#8221;, a useful and usable distribution of Perl 6. The tarball for the April 2014 release is available from&#160;<a href="http://rakudo.org/downloads/star/">http://rakudo.org/downloads/star/</a>. A Windows .MSI version of Rakudo star will usually appear in the downloads area shortly after the tarball release.</p>
<p><strong>This is the first Rakudo Star release with support for the MoarVM backend (all module tests pass on supported platforms) along with experimental support for the JVM backend (some module tests fail).</strong></p>
<p>In the Perl 6 world, we make a distinction between the language (&#8220;Perl 6&#8243;) and specific implementations of the language such as &#8220;Rakudo Perl&#8221;. This Star release includes&#160;<a href="https://github.com/rakudo/rakudo/blob/nom/docs/announce/2014.04.md">release 2014.04</a>&#160;of the&#160;<a href="http://github.com/rakudo/rakudo">Rakudo Perl 6 compiler</a>, version 6.1.0 of the&#160;<a href="http://parrot.org/">Parrot Virtual Machine</a>, version 2014.04 of&#160;<a href="http://moarvm.org/">MoarVM</a>, plus various modules, documentation, and other resources collected from the Perl 6 community.</p>
<p>Some of the new features added to this release include:</p>
<ul>
<li>experimental support for the JVM and MoarVM backends</li>
<li>NativeCall passes all its tests on all backends</li>
<li>S17 (concurrency) now in MoarVM (except timing related features)</li>
<li>winner { more @channels { &#8230; } } now works</li>
<li>implemented univals(), .unival and .univals (on MoarVM)</li>
<li>added .minpairs/.maxpairs on (Set|Bag|Mix)Hash</li>
<li>Naive implementation of &#8220;is cached&#8221; trait on Routines</li>
</ul>
<p>There are some key features of Perl 6 that Rakudo Star does not yet handle appropriately, although they will appear in upcoming releases. Some of the not-quite-there features include:</p>
<ul>
<li>advanced macros</li>
<li>threads and concurrency (in work for the JVM and MoarVM backend)</li>
<li>Unicode strings at levels other than codepoints</li>
<li>interactive readline that understands Unicode</li>
<li>non-blocking I/O</li>
<li>much of Synopsis 9 and 11</li>
</ul>
<p>There is an online resource at&#160;<a href="http://perl6.org/compilers/features">http://perl6.org/compilers/features</a>&#160;that lists the known implemented and missing features of Rakudo and other Perl 6 implementations.</p>
<p>In many places we&#8217;ve tried to make Rakudo smart enough to inform the programmer that a given feature isn&#8217;t implemented, but there are many that we&#8217;ve missed. Bug reports about missing and broken features are welcomed at&#160;<a href="mailto:rakudobug@perl.org">rakudobug@perl.org</a>.</p>
<p>See&#160;<a href="http://perl6.org/">http://perl6.org/</a>&#160;for links to much more information about Perl 6, including documentation, example code, tutorials, reference materials, specification documents, and other supporting resources. A draft of a Perl 6 book is available as docs/UsingPerl6-draft.pdf in the release tarball.</p>
<p>The development team thanks all of the contributors and sponsors for making Rakudo Star possible. If you would like to contribute, see&#160;<a href="http://rakudo.org/how-to-help">http://rakudo.org/how-to-help</a>, ask on the&#160;<a href="mailto:perl6-compiler@perl.org">perl6-compiler@perl.org</a>&#160;mailing list, or join us on IRC #perl6 on freenode.</p>
          </div>
                        
         <p align="right">
            <a href="http://rakudo.org/2014/05/05/announce-rakudo-star-release-2014-04/">
            rakudo.org | rakudo.org | 
            2014-05-05 17:18:19</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://pugs.blogs.com/pugs/2014/04/programming-languages-and-rails-girls.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://pugs.blogs.com/pugs/" title="Pugs">Audrey Tang </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/f63068d724b6084f4807a86426b3b9eb" width="" height="" alt="">

            <a href="http://pugs.blogs.com/pugs/2014/04/programming-languages-and-rails-girls.html">Programming Languages and RailsGirls.tw</a> 
        </div>

         <div class="content">
            <article class="en">
<p>(My talk at TEDxTaipei at 2014-04-27, before a panel with Linda Liukas, Matz and Charles Nutter. <a href="http://www.slideshare.net/autang/railsgirlstw-20140427" target="_blank">Slides in Chinese</a>. <a href="http://audrey.nu/-/2014/04/28/programming-languages-and-rails-girls" target="_blank">&#36880;&#23383;&#31295;&#20013;&#25991;&#29256;</a>.)</p>
<hr/>
<p>Thanks, Linda, for sharing your fascinating story.</p>
<p>As my talk is about "Programming Languages and RailsGirls.tw", I'd like to start with a few stories of programming languages.</p>
<p>As we know, Rails is built on the Ruby language. Matz created Ruby by blending his five favorite languages together: Ada, Eiffel, Lisp, Perl, and Smalltalk.</p>
<p>I cannot cover all of them in a 20-minute talk, so let us start with Ada. Ada comes first in this list not only because its name starts with an "A", but also because it was named after Ada Lovelace, the world's first computer programmer.</p>
<p>In 1842, Ada wrote this program for the Analytical Engine, the first general-purpose computer ever designed but not constructed until a century later. Ada was also the first to realize that computers are not limited to work with numbers; she envisioned that people would compose music and create art on a computer.</p>
<p>Ada's mother was Annabella, a gifted scholar of mathematics. Ada's father, the great Romantic poet Byron, nicknamed his wife the "princess of parallelograms" because of her strict morality with a mathematical rigor.</p>
<p>And indeed, the art of computer programming is a blend of mathematics and poetry. Like a mathematical formula, good programs are rigorous and correct. Programmers, however, work like poets &#8212; we are creative with our languages, we convey a sense of purpose in a concise way, and we inspire each other to carry on our work.</p>
<p>As Professor Dijkstra put it: "Besides a mathematical inclination, an exceptionally good mastery of one's native tongue is the most vital asset of a competent programmer."</p>
<p>Both mathematicians and poets require a coherent vision to guide their work. The same principle applies to professional programming: Without a coherent vision and design integrity, sloppy programs quickly become unmaintainable, such that any attempts to fix a bug will introduce more bugs.</p>
<p>However, professional programming is not the only kind of programming, or even the most popular one. For nearly twenty years, the most well-known language on the web has been JavaScript, a "scripting language" that's easy to start with, but that also makes it very easy to write sloppy programs with a lot of bugs.</p>
<p>The distinction between scripting and programming languages dates back to the 1970s, with the introduction of the C language, a portable language that runs on almost any computer. Computer scientists in Bell Labs wrote hundreds of programs in C that worked together as a complex operating system, and they called it Unix.</p>
<p>Users of the Unix system were not expected to program in C. Instead they wrote "shell scripts" that were simple to write &#8212; mostly just a list of commands &#8212; but very difficult to maintain once they got complex.</p>
<p>Throughout the 1980s, the worldview was that there were programs written in complex and powerful languages like Objective-C and C++; and there were scripts written in simple but limited languages like sed and AWK.</p>
<p>The picture here is a linear spectrum with nothing in-between. If a script became too complex to maintain, people would just re-write it in a "real" programming language like C++.</p>
<p>In 1987, Larry Wall said, "We can open up this spectrum and turn it into a space with two dimensions." He saw C's strength as "Manipulexity", the ability to manipulate complexity, while shell scripts excel at "Whipuptitude", the ability to whip things up quickly.</p>
<p>Perl was hatched in this newfound space, as a language that could do a little bit of both, and one that evolves by redefining its own vocabulary. Over time, Perl evolved to be better at Whipuptitude than any shell scripts, and as good as C++ and Java at Manipulexity for all but the most complex programs.</p>
<p>With Perl, one could start with a sloppy script and, through "refactoring" techniques, gradually make it more rigorous and correct over time, without having to switch to a different language.</p>
<p>In the 1990s, a new generation of Perl-influenced languages appeared, such as&#160; Python, PHP, and Ruby. Each of them improved upon Perl toward their own domains; I consider Ruby the most flexible of the three.</p>
<p>In 2005, the Rails project combined Ruby on the server side and JavaScript on the client side into a full-stack web framework. For many people working with C++ or Java, Rails showed them for the first time that "scripting" languages can build web programs that are more complex, and of larger scale, than contemporary "programming" languages could.</p>
<p>Rails succeeded in part because of its use of meta-programming, which provided way to program the Ruby language itself into domain-specific languages such as ActiveRecord.</p>
<p>Since that time, popular frameworks such as jQuery and AngularJS have taken the same approach to JavaScript, allowing programmers to express our vision and design integrity with a re-programmed language that's much more rigorous and safe.</p>
<p>In the 2010s, Rails adopted CoffeeScript, a Ruby-like language that compiles into "the good parts" of JavaScript, to complement its use of the jQuery framework. This is an extension of the meta-programming idea &#8212; changing a language by keeping the best parts of it.</p>
<p>People in the Perl community took CoffeeScript to create the Coco language, and people in the Haskell community took Coco to create LiveScript. Nowadays, most of my programming is done in LiveScript, which allows me to express the same vision in a way that looks like Ruby, or looks like Perl, or looks like Haskell, whichever way that's most appropriate for the poem, er, program.</p>
<p>So those are my stories about Rails and programming languages. For the next half of my talk, I'd like to talk about the "Girls" part in Rails Girls.</p>
<p>In the first half of the 20th century, people working for women's rights have achieved a lot of legal victories, bringing equality in rights of voting, of education, of individual economy, of marriage and divorce to many people in the world.</p>
<p>However, this equality in law does not readily translate to equality in practice. As Simone de Beauvoir observed in 1949, many societies make women feel inferior not by law, but through the act of "Othering" in languages and in actions. Men are presumed as the default subject, and women are constantly reminded that they are the collective "Other" by the way they are treated, as a group different from the default.</p>
<p>In the 1970s, social workers and thinkers applied Simone's thoughts and observed various socially-constructed expectations known as gender roles. For example, a particular society may confine women into one of two primary roles: either as a Girl &#8212; an adorable object of desire, harmless and of inferior status; or as a Mother &#8212; a caretaker, provider of emotional support, and a reproductive agent.</p>
<p>What's missing in this picture is, of course, the various destinies that each of us wish upon ourselves. We encounter social pressure whenever we happen to contradict one of the expected roles.</p>
<p>We can fix this problem by adopting the vision: That Biology should not determine Destiny. In practical terms, it is helpful to re-introduce the concepts of "scripts" and "programs", this time from the field of social studies.</p>
<p>Larry Wall said this in his 2007 talk on scripting languages: "Suppose you went back to Ada Lovelace and asked her the difference between a script and a program. She'd probably look at you funny, then say something like: 'Well, a script is what you give the actors, but a program is what you give the audience.' That Ada was one sharp lady..."</p>
<p>Here we see social "scripts" are actions expected of people to act according to their roles. In contrast, a "program" informs participants what to expect from the social "norm", but does not dictate people's behaviors the way scripts do.</p>
<p>As a concrete example, when I began my IT career as the webmaster of a small publishing house "The Informationist" in 1994, I worked both online via a BBS and in the office. Many of our staffs were openly LGBTQ and LGBTQ-supporting; it was a safe space for me to explore my gender expressions.</p>
<p>The press turned into a software company named "Inforian" in 1995, when I became its CTO, and started participating in the global Free Software community. While Taiwan's software sector at that time was generally gender-balanced, it shocked me to find that male-dominant scripts were prevalent in online Free Software communities.</p>
<p>After a while, I learned that many women on forums and chatrooms used male-sounding nicknames, not because it was their preferred gender expression, but as a protection against harassment. This was obviously a problem.</p>
<p>In 1998, the Open Source movement started and I helped run a few startups in the Silicon Valley, China, and Taiwan. As I started attending conferences and giving talks, I couldn't help but notice the lack of variety in gender expressions and in ethnic distribution.</p>
<p>For example, I heard the question "are you here with your boyfriend?" asked many times in these conferences, but not once "are you here with your girlfriend?" or "are you here with your partner?" &#8212; it was clearly a social script to make the recipient feel identified as an "other" &#8212; an outsider instead of a participant in the space.</p>
<p>After I returned to Taiwan to work on local open culture communities, I started consciously using the feminine pronoun in all my Chinese online writings, in an attempt to turn around the language's "othering" aspect.</p>
<p>When we started organizing our own conferences in 2003, I also took efforts to invite only the most socially compassionate speakers from abroad, who helped establish a more relaxed atmosphere where people can enjoy a safe space.</p>
<p>However, as Open Source gained commercial popularity, sexualized practices of IT industries' trade shows started to affect our conferences as well. One of these practices is promotional models, hired to drive interests to a vendor's booth; another is offensive imagery in conference contents, including from prominent speakers in both Free Software and Open Source communities.</p>
<p>In 2009, Skud, a long-time fellow hacker in the Perl community, started to speak widely at conferences on this subject. She created "Geek Feminism", a wiki-and-blog platform to list the issues and work together to improve them.</p>
<p>After a year's work, participants in the wiki created a "Code of Conduct" template, a social "program" that sets the expected norms. Valerie Aurora and Mary Gardiner, two Geek Feminism contributors from the Linux community, co-founded the Ada Initiative in 2011, so they can work full-time to support women in open technology and culture.</p>
<p>With help from many contributors, the Ada Initiative worked with over 100 conference organizers to adopt the code of conduct program. I'm very glad to see the upcoming "Rails Girls Summer of Code" event among the list of adopters.</p>
<p>There are three main elements of such a program:</p>
<ul>
<li>Specific descriptions of common but unacceptable behavior (sexist jokes, etc.)</li>
<li>Reporting instructions with contact information</li>
<li>Information about how such policies are enforced</li>
</ul>
<p>Together, they ensure a space where people can be aware of their own social scripts and their effects on each other and refactor them into a more sustainable community with openness and variety as a coherent vision.</p>
<p>There are many more activities from the Ada Initiative, and we have a list of resources and communities on the Geek Feminism wiki, which I'd like to invite you to visit.</p>
<p>To me, the most enlightening bit is perhaps not in the code itself, but in its programming &#8212; the fine-tuning of a conduct that fits best with the local culture.</p>
<p>When we create a safe space for a community's participants, to observe and decide our own social scripts, we can collectively program a social norm that is both rigorous and creative &#8212; just like the best formulas, poems, and programs.</p>
<p>In conclusion, I'd like to share two poetic fragments of mine with you:</p>
<p>&#160;&#160;&#160; I would like to know you<br/>&#160;&#160; &#160;&#160;&#160;&#160; not by your types,<br/>&#160;&#160; &#160;&#160;&#160; &#160;&#160;&#160;&#160; classes or roles &#8212;<br/>&#160;&#160;&#160; &#8212; but by your values.</p>
<p>...and:</p>
<p>&#160;&#160;&#160; Saying "Life is what we make it to be",<br/>&#160;&#160; &#160;&#160;&#160;&#160; is like saying "Language is what we make it to be" &#8212;<br/>&#160;&#160; &#160;&#160;&#160; &#160;&#160;&#160;&#160; True, but not at once;<br/>&#160;&#160; &#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#8212; just one bit at a time.</p>
<p>Thank you.</p>
</article>
          </div>
                        
         <p align="right">
            <a href="http://pugs.blogs.com/pugs/2014/04/programming-languages-and-rails-girls.html">
            Audrey Tang | Pugs | 
            2014-04-28 10:51:37</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:blogger.com,1999:blog-7864497598813874355.post-4724691511478569131">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://brrt-to-the-future.blogspot.com/" title="brrt to the future">Bart Wiegmans </a></div><br />
                     <img class="face" src="https://avatars1.githubusercontent.com/u/1617678?s=400" width="" height="" alt="">

            <a href="http://brrt-to-the-future.blogspot.com/2014/04/hi-everybody-welcome-to-first-post.html"></a> 
        </div>

         <div class="content">
            <p>Hi everybody, welcome to the first post. Here on this blog I will write about developing a just-in-time compiler for&#160;<a href="http://www.moarvm.com/" target="_blank">MoarVM</a>. And perhaps many other things, but the JIT compiler comes first.<br/><br/>What is a JIT compiler? It is the not-so-magical component of an interpreter or virtual machine that takes a piece of interpreted code and makes machine code out of it. There are lots of ways to do that and I'll get to more detail in further posts. For now, I'd like to stress that I'll be working together with the awesome <a href="http://6guts.wordpress.com/" target="_blank">Jonathan Worthington</a>&#160;and <a href="http://p6weekly.wordpress.com/" target="_blank">Timo Paulssen</a>. And I'm really excited for this summer!</p>
          </div>
                        
         <p align="right">
            <a href="http://brrt-to-the-future.blogspot.com/2014/04/hi-everybody-welcome-to-first-post.html">
            Bart Wiegmans | brrt to the future | 
            2014-04-21 13:34:32</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://ttjjss.wordpress.com/?p=297">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://ttjjss.wordpress.com/" title="Whatever but Cool  Perl">Tadeusz Sosnierz (tadzik) </a></div><br />
         

            <a href="http://ttjjss.wordpress.com/2014/04/21/new-perl6-game-retroracer/">New Perl6 game: RetroRacer</a> 
        </div>

         <div class="content">
            <p>(I&#8217;m really sorry for the name; I couldn&#8217;t think of anything better :))</p>
<p><a href="http://ttjjss.files.wordpress.com/2014/04/2014-04-21-000342_600x800_scrot.png"><img alt="Image" class="size-full wp-image" id="i-296" src="http://ttjjss.files.wordpress.com/2014/04/2014-04-21-000342_600x800_scrot.png?w=590"/></a></p>
<p>&#160;</p>
<p>This game, apart from (obviously) being a showcase for a new Steroids iteration, is all about switching lanes on a high traffic road in a fast car. Yay!</p>
<p>It&#8217;s really no rocket science compared to ThroughTheWindow from the last post &#8211; even&#160;code even looks similar. One obvious improvement (beside finally using proper PNGs instead of silly BMPs &#8211; timotimo++!) is a built-in collision detection:</p>
<blockquote><p><span class="k" style="font-weight: bold; font-style: normal; color: #333333;">my&#160;</span><span class="nv" style="font-style: normal; color: teal;">$s&#160;</span><span class="o" style="font-weight: bold; font-style: normal; color: #333333;">=&#160;</span><span class="n" style="font-style: normal; color: #333333;">self</span><span class="o" style="font-weight: bold; font-style: normal; color: #333333;">.</span><span class="n" style="font-style: normal; color: #333333;">add_sprite</span><span class="p" style="font-style: normal; color: #333333;">(</span><span class="s" style="font-style: normal; color: #dd1144;">&#8216;othercar&#8217;</span><span class="p" style="font-style: normal; color: #333333;">,&#160;</span><span class="nv" style="font-style: normal; color: teal;">$_</span><span class="p" style="font-style: normal; color: #333333;">,&#160;</span><span class="mi" style="font-style: normal; color: #009999;">0</span><span class="p" style="font-style: normal; color: #333333;">);</span></p>
<p># &#8230;</p>
<p><span class="nv" style="font-style: normal; color: teal;">$s</span><span class="o" style="font-weight: bold; font-style: normal; color: #333333;">.</span><span class="n" style="font-style: normal; color: #333333;">when</span><span class="p" style="font-style: normal; color: #333333;">({&#160;</span><span class="nv" style="font-style: normal; color: teal;">$_</span><span class="o" style="font-weight: bold; font-style: normal; color: #333333;">.</span><span class="n" style="font-style: normal; color: #333333;">collides_with</span><span class="p" style="font-style: normal; color: #333333;">(</span><span class="nv" style="font-style: normal; color: teal;">$</span><span class="err" style="font-style: normal; color: #a61717;">!</span><span class="nv" style="font-style: normal; color: teal;">player</span><span class="p" style="font-style: normal; color: #333333;">)&#160;</span><span class="p" style="font-style: normal; color: #333333;">},&#160;</span><span class="p" style="font-style: normal; color: #333333;">{</span></p>
<p>&#160; &#160; # &#8230;</p>
<p>});</p>
</blockquote>
<p>No more cheating with collisions like I did with ThroughTheWindow. The existing solution uses the entire image sprite as a hitbox; I&#8217;m hoping to make it customizable one day (it&#8217;s a simple thing really, code-wise).</p>
<p>All in all, the game isn&#8217;t all that much more sophisticated than the last one; I was really just looking for a good excuse to write a new game (and add some new stuff to Steroids), and I sort of came up with a nice theme to follow: ThroughTheWindow used just one key (spacebar), so the next step was to use two (thus RetroRacer) uses left and right arrow keys. What will the next game use? 3 keys? 4 keys? Is it an arithmetical or geometrical series? Oh my, I can&#8217;t wait to find out myself.</p>
<p>Now go and grab it at&#160;<a href="https://github.com/tadzik/RetroRacer">https://github.com/tadzik/RetroRacer</a>, and don&#8217;t forget about the soundtrack!</p>
<p>&#160;</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/ttjjss.wordpress.com/297/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ttjjss.wordpress.com/297/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=ttjjss.wordpress.com&amp;blog=15099040&amp;post=297&amp;subd=ttjjss&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://ttjjss.wordpress.com/2014/04/21/new-perl6-game-retroracer/">
            Tadeusz Sosnierz (tadzik) | Whatever but Cool  Perl | 
            2014-04-20 22:23:11</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://www.nntp.perl.org/group/perl.perl6.announce/2014/04/msg711.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://www.nntp.perl.org/group/perl.perl6.announce/" title="perl.perl6.announce">Perl 6 Announce </a></div><br />
         

            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/04/msg711.html">Parrot 6.3.0 "Black-cheeked Lovebird" released by Reini Urban</a> 
        </div>

         <div class="content">
            <p>On behalf of the Parrot team, I'm proud to announce the supported<br/>release Parrot 6.3.0,<br/>also known as "Black-cheeked Lovebird".  Parrot (http://parrot.org/)<br/>is a virtual machine<br/>aimed at running all dynamic languages.<br/><br/>Parrot 6.3.0 is available on Parrot's FTP site<br/>(ftp://ftp.parrot.org/pub/parrot/releases/supported/6.3.0/), or by following the<br/>download instructions at http://parrot.org/download.  For those who would like<br/>to develop on Parrot, or help develop Parrot itself, we recommend using Git to<br/>retrieve the source code to get the latest and best Parrot code.<br/><br/>Parrot 6.3.0 News:<br/>    - Tests<br/>        + Fixed tests for cygwin and cygwin64<br/>        + Added 2 new examples/benchmarks/ files and benchmarks/run.sh<br/>        + Fixed socket tests without IPv6 support at all [GH #1068]<br/>    - Community<br/>        + New Benchmark results at https://github.com/parrot/parrot-bench<br/>          for all releases from 1.8.0 - 6.2.0<br/><br/><br/>The SHA256 message digests for the downloadable tarballs are:<br/>42aa409fa82d827019ebd218e8f9501b50e04ee81f3ccf705e03f59611317a1b<br/>parrot-6.3.0.tar.gz<br/>8d64df21751770741dac263e621275f04ce7493db6f519e3f4886a085161a80d<br/>parrot-6.3.0.tar.bz2<br/><br/>Many thanks to all our contributors for making this possible, and our sponsors<br/>for supporting this project.  Our next scheduled release is 20 May 2014.<br/><br/>Enjoy!<br/>-- <br/>Reini Urban<br/>http://cpanel.net/   http://www.perl-compiler.org/<br/></p>
          </div>
                        
         <p align="right">
            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/04/msg711.html">
            Perl 6 Announce | perl.perl6.announce | 
            2014-04-19 06:26:59</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://6guts.wordpress.com/?p=317">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://6guts.wordpress.com/" title="6guts">Jonathan Worthington </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/5999d5d26089eb4019867dc7705c41a9" width="" height="" alt="">

            <a href="http://6guts.wordpress.com/2014/04/17/racing-to-writeness-to-wrongness-leads/">Racing to writeness to wrongness leads</a> 
        </div>

         <div class="content">
            <p>In the Perl world I&#8217;m mostly known as a guy who hacks on Perl 6 stuff. Less known is that outside of the Perl world, I spend a lot of my time with the .Net platform. C#, despite a rather uninspiring initial couple of releases, has escaped Java-think and grown into a real multi-paradigm language. It&#8217;s not Perl, but it&#8217;s certainly not unpleasant, and can even be a good bit of fun to work with nowadays.&#160;My work with it right now typically involves teaching, along with various mentoring and trouble-shooting tasks.</p>
<p>The Windows world has always been rather into threads &#8211; at least as long as I&#8217;ve been around. .Net is also, as a result. Want to do some computation in your GUI app? Well, better farm it off to a thread, so the main thread can keep the UI responsive to the user&#8217;s needs. Want to do network I/O? Well, that could probably use some asynchronous programming &#8211; and the completion handler will be run&#160;on some thread or other. Then the results will probably want marshaling somehow. (That used to hurt; now things are better.) Building a web application? Better learn to love threads. You don&#8217;t actually get any choice in the matter: having multiple request-processing threads is the unspoken, unquestioned, default in a web application on .Net.</p>
<p>Of course, just because threads are almost ubiquitous doesn&#8217;t mean the average developer &#8211; or even the above-average developer &#8211; gets things right. A bunch of my recent trouble-shooting gigs have boiled down to dealing with a lack of understanding of multi-threaded programming. &#8220;So, we embed this 80s library in our web application, but things tend to crash under load.&#8221; &#8220;How do you deal with the fact that 80s library likely isn&#8217;t threadsafe?&#8221; &#8220;It&#8230;what?&#8221; &#8220;Oh, my&#8230;&#8221;</p>
<p>So anyway, back to Perl 6. Last year, we managed to get Rakudo on the JVM. And, given we now ran on a VM where folks deploy heavily threaded software every day, and with no particular progress to be seen on concurrency in Perl 6 for years, I did what I usually seem to end up doing: get fed up of the way things are and figured I should try to make them better. Having spent a bunch of years working&#160;with and teaching about parallel, asynchronous, and concurrent programming outside of the Perl world, it was time for worlds to collide.</p>
<p>And oh hell, collide they do. Let&#8217;s go word counting:</p>
<pre>my %word_counts;
for @files -&gt; $filename {
    for slurp($filename).words {
         %word_counts{$_}++;
    }
}</pre>
<p>OK, so that&#8217;s the sequential implementation. But how about one that processes the files in parallel? Well, it seems there are a bunch of files, and that seems like a natural way to parallelize the work. So, here goes:</p>
<pre>my %word_counts;
await do for @files -&gt; $filename {
    start {
        for slurp($filename).words {
            %word_counts{$_}++;
        }
    }
}</pre>
<p>Here, start creates a Promise, which is kept when the code inside of it completes. That work is scheduled to be done on the thread pool, and the code calling start continues onward, moving on to create another Promise for the next file. Soon enough, the thread pool&#8217;s input queue is nicely occupied with work, and threads are chugging through it. The loop is in a context that means it produces results&#160;- the Promise objects &#8211; thanks to our use of the do keyword. We give them to await, which waits for them all to get done. Perfect, right?</p>
<p>Well, not so fast. First of all, are hashes thread safe? That is, if I try to write to a hash from multiple threads, what will happen? Well, good question. And the answer, if you try this out on Rakudo on JVM today, is you&#8217;ll end up with a hosed hash, in all likelihood. OK. Go on. Say what you&#8217;re thinking. Here&#8217;s one guess at a common response: &#8220;But&#8230;but&#8230;but&#8230;OH NO WE MUST MAKE IT WORK, this is Perl, not Java, dammit!&#8221; Well, OK, OK, let&#8217;s try to make it work&#8230;</p>
<p>So the hash ain&#8217;t threadsafe. Let&#8217;s go put implicit locking in hash access. We&#8217;ll slow down everything for it, but maybe with biased locking it won&#8217;t be so bad. Maybe we can build a smart JIT that invalidates the JITted code when you start a thread. Maybe escape analysis will save the common cases, because we can prove that we&#8217;ll never share things. Maybe we can combine escape analysis and trace JIT! (Hey, anybody know if there&#8217;s a paper on that?) Heck, we gotta build smart optimizations to make Perl 6 perform anyway&#8230;</p>
<p>So anyway, a patch or two later and our hashes are now nicely thread safe. We&#8217;re good, right? Well, let&#8217;s run it and&#8230;ohhhh&#8230;wrong answer. Grr. Tssk. Why, oh why? Well, look at this:</p>
<pre>%word_counts{$_}++;</pre>
<p>What does the post-increment operator do? It reads a value out of a scalar, gets its successor, and shoves the result in the scalar. Two threads enter. Both read a 41. Both add 1. Both store 42. D&#8217;oh. So, how do we fix this? Hm. Well, maybe we could make ++ take a lock on the scalar. Now we&#8217;re really, really going to need some good optimization, if we ever want tight loops doing ++ to perform. Like,&#160;inlining and then lifting locks&#8230;if we can get away with it semantically. Or one of the tricks mentioned earlier. Anyway, let&#8217;s suppose we do it. Hmm. for good measure, maybe we&#8217;d better ponder some related cases.</p>
<pre>%word_counts{$_} += 1;</pre>
<p>Not idiomatic here, of course, but we can easily imagine other scenarios where we want something like this. So, we&#8217;d better make all the assignment meta-ops lock the target too&#8230;uh&#8230;and hold the lock during the invocation of the + operator. Heck, maybe we can not do locks in the spin-lock or mutex sense, but go with optimistic concurrency control, given + is pure and we can always retry it if it fails. So, fine, that&#8217;s the auto-increment and the assignment meta-ops sorted. But wait&#8230;what about this:</p>
<pre>%word_counts{$_} = %word_counts{$_} + 1;</pre>
<p>Well, uhh&#8230;darn. I dunno. Maybe we can figure something out here, because having that behave differently than the += case feels really darn weird. But let&#8217;s not get bogged down with side-problems, let&#8217;s get back to our original one. My hash is thread safe! My ++ is atomic, by locks, or some other technique. We&#8217;re good now, aren&#8217;t we?</p>
<p>Nope, still not. Why? Turns out, there&#8217;s a second data race on this line:</p>
<pre>%word_counts{$_}++;</pre>
<p>Why does this work when we never saw the word before? Auto-vivification, of course. We go to look up the current scalar to auto-increment it. But it doesn&#8217;t exist. So we create one, but we can&#8217;t install it unless we know it will be assigned; just looking for a key shouldn&#8217;t make it come to exist. So&#160;we put off the installation of the scalar in the hash until it&#8217;s assigned. So, two threads come upon&#160;the word &#8220;manatee&#8221;. Both go and ask the hash for the scalar under that key. Access to the hash is already protected, so the requests are serialized (in the one-after-the-other sense). The hash each time notices that there&#8217;s no scalar in that slot. It makes one, attached to it the fact that it should&#160;be stored into the hash if the scalar is assigned to, and hands it back. The ++ sees the undefined value in the scalar, and sticks a 1 in there. The assignment causes the scalar to be bound to the hash&#8230;uh&#8230;wait, that&#8217;s two scalars. We made two. So, we lose a word count. Manatees may end up appearing a little less popular than dugongs as a result.</p>
<p><a href="http://6guts.files.wordpress.com/2014/04/hue-manatee.jpg"><img alt="hue-manatee" class="aligncenter size-full wp-image-318" src="http://6guts.files.wordpress.com/2014/04/hue-manatee.jpg?w=640"/></a></p>
<p>How do we fix this one? Well, that&#8217;s kinda tricky. At first, we might wonder if it&#8217;s not possible to just hold some lock on something for the whole line. But&#8230;how do we figure that out? Trying to work out a locking scheme for the general case of auto-viv &#8211; once we mix it with binding &#8211; feels really quite terrifying, as this REPL session reveals:</p>
<pre><strong>&gt; my %animals; my $gerenuk := %animals&lt;gerenuk&gt;; say %animals.perl;</strong>
().hash
<strong>&gt; $gerenuk = 'huh, what is one of those?'; say %animals.perl;</strong>
("gerenuk" =&gt; "huh, what is one of those?").hash</pre>
<p>So, what&#8217;s my point in all of this? Simply, that locking is not just about thread safety, but also about the notion of transaction scope. Trying to implicitly lock stuff to ensure safe mutation on behalf of the programmer means you&#8217;ll achieve thread safety at a micro level. However, it&#8217;s very,&#160;very unlikely that will overlap with the unspoken and uncommunicated transaction scope the programmer had in mind &#8211; or didn&#8217;t even know they needed to have in mind. What achieving safety at the micro level will most certainly achieve, however, is increasing the time it takes for the programmer to discover the real problems in their program. If anything, we want such inevitably unreliable programs to reliably fail, not reliably pretend to work.</p>
<p>I got curious and googled for transaction scope inference, wondering if there is a body of work out there on trying to automatically figure these things out. My conclusion is that either it&#8217;s called something else, I&#8217;m crap at Google today, or I just created a thankless PhD topic for somebody.&#160;(If I did: I&#8217;m sorry. Really. :-) My hunch is that the latter is probably the case, though. Consider this one:</p>
<pre>while @stuff {
    my $work = @stuff.pop;
    ...
}</pre>
<p>Where should the implicit transaction go here? Well, it should take in the boolification of @stuff and the call to pop. So any such general analysis is clearly inter-statement, except that we don&#8217;t want to hard-code it for boolification and popping, so it&#8217;s interprocedural, but then method calls are late-bound, so it&#8217;s undecidable. Heck, it&#8217;d be that way even in boring Java. With Perl you can go meta-programming, and then even your method dispatch algorithm might be late bound.</p>
<p>At this point, we might ponder software transactional memory. That&#8217;s very much on-topic, and only serves to re-inforce my point: in STM, you&#8217;re given a mechanism to define your transaction scope:</p>
<pre>my %word_counts;
await do for @files -&gt; $filename {
    start {
        for slurp($filename).words {
            # THE FOLLOWING IS IMAGINARY SYNTAX. No, I can't 
            # hack you up a prototype down the pub, it's *hard*!
            atomic { %word_counts{$_}++ }
        }
    }
}</pre>
<p>This looks very nice, but let&#8217;s talk about the hardware for a bit.</p>
<p>Yes, the hardware. The shiny multi-core thing we&#8217;re trying to exploit in all of this. The thing that really, really, really, hates on code that writes to shared memory. How so? It all comes down to caches. To make this concrete, we&#8217;ll consider the Intel i7. I&#8217;m going to handwave like mad, because I&#8217;m tired and my beer&#8217;s nearly finished, but if you want the gory details see <a href="http://software.intel.com/sites/products/collateral/hpc/vtune/performance_analysis_guide.pdf">this PDF</a>.&#160;Each core has an Level 1 cache (actually, two: one for instructions and one for data). If the data we need is in it, great: we stall for just 4 cycles to get hold of it. The L1 cache is fast, but also kinda small (generally, memory that is fast needs more transistors per byte we store, meaning you&#160;can&#8217;t have that much of it). The second level cache &#8211; also per core &#8211; is larger. It&#8217;s a bit slower, but not too bad; you&#8217;ll wait about 10 cycles for it to give you the data. (Aside: modern performance programming is thus more about cache efficiency than it is about instruction count.) There&#8217;s then a<br/>
level 3 cache, which is shared between the cores. And here&#8217;s where things get really interesting.</p>
<p>As a baseline, a hit in the level 3 cache is around 40 cycles if the memory is unshared between cores. Let&#8217;s imagine I&#8217;m a CPU core wanting to write to memory at 0xDEADBEEF. I need to get exclusive access to that bit of memory in order to do so. That means before I can safely write it, I need to make&#160;sure that any other core with it in its caches (L1/L2) tosses what it knows, because that will be outdated after my write. If some other core shares it, the cost of obtaining the cache line from L3 goes up to around 65 cycles. But what if the other core has modified it? Then it&#8217;s around 75 cycles. From this, we can see that pretty much any write to shared memory, if another core was last to write, is going to be incurring a cost of around 75 cycles. Compare that to just several cycles for unshared memory.</p>
<p>So how does our approach to parallelizing our word count look in the light of this? Let&#8217;s take a look at it again:</p>
<pre>my %word_counts;
await do for @files -&gt; $filename {
    start {
        for slurp($filename).words {
            %word_counts{$_}++;
        }
    }
}</pre>
<p>Locks are just memory, so if we inserted those automatically &#8211; even if we did work out a good way to do so &#8211; then taking the lock is a shared memory write. That&#8217;s before we go updating the memory associated with the hash table to install entries, and the memory of the scalars to update the counts. What if we STM it? Even if we keep modifications in a local modification buffer, we still have to commit at some point, and that&#8217;s going to have to be a write to shared memory. In fact, that&#8217;s the thing that bothers me about STM. It&#8217;s a really, really great mechanism &#8211; way superior to locks, composable, and I&#160;imagine not too hard to teach &#8211; but its reason for existing is to make writes to shared memory happen in a safe, transactional, way. And its those writes that the hardware makes costly. Anyway, I&#8217;m getting side-tracked again. The real point is that our naive parallelization of our program &#8211; even if we can&#160;find ways to make it work reliably &#8211; is a disaster when considered in the light of how the hardware works.</p>
<p>So, what to do? Here&#8217;s an alternative.</p>
<pre># Produce a word counts hash per file - totally unshared!
my @all_counts = await do for @files -&gt; $filename {
    start {
        my %word_counts;
        for slurp($filename).words {
            %word_counts{$_}++;
        }
        %word_counts
    }
}

# Bring them together into a single result.
my %totals;
for @all_counts {
    %totals{.key} += .value;
}
say %totals.elems;</pre>
<p>Those familiar with map-reduce will probably have already recognized the pattern here. The first part of the program does the work for each file, producing its own word count hash (the map). This is completely thread local. Afterwards, we bring all of the results together into a single hash (the reduce). This is doing reads of data written by another thread, of course. But that&#8217;s the cheaper case,&#160;and once we get hold of the cache lines with with the hash and scalars, and start to chug through it, we&#8217;re not going to be competing for it with anything else.</p>
<p>Of course, the program we get at the end is a bit longer. However, it&#8217;s also not hard to imagine having some built-ins that make patterns like this shorter to get in place. In fact, I think that&#8217;s where we need to be expending effort in the Perl 6 concurrency work. Yes, we need to harden MoarVM so that you can&#8217;t segfault it even if you do bad things. Yes, we should write a module that introduces a monitor keyword, which is a class that automatically takes a lock around each of its method calls:</p>
<pre>monitor ThreadSafeLoggingThingy&#160;{
    has @!log;

    method log($msg) {
        push @!log, $msg;
    }

    method latest($n) {
        $n &lt; @!log
            ?? @!log[*-$n .. *]
            !! @!log[]
    }
}</pre>
<p>Yes, we should do an Actor one too. We could even provide a trait:</p>
<pre>my @a is monitor;</pre>
<p>Which would take @a and wrap it up in a monitor that locks and delegates all its calls to the underlying array. However, by this point, we&#8217;re treading dangerously close to forgetting the importance of transaction scope. At the start of the post, I told the story of the hopelessly unsafe calls to a legacy library from a multi-threaded web application. I had it hunted down and fixed in a morning because it exploded, loud and clear, once I started subjecting it to load tests. Tools to help find such bugs exist. By contrast, having to hunt bugs in code that is threadsafe, non-explosive, but subtly wrong in the placing of its transaction boundaries, is typically long and drawn out &#8211; and where automated tools can help less.</p>
<p>In closing, we most certainly should take the time to offer newbie-friendly concurrent, parallel, and asynchronous programming experiences in Perl 6. However, I feel that needs to be done by guiding folks towards safe, teachable, understandable patterns of a CSP (Communicating Sequential Processes) nature.&#160;Perl may be about Doing The Right Thing, and Doing What I Mean. But nobody means their programs to do what the hardware hates, and the right thing isn&#8217;t to make broken things sort-of-work by sweeping complex decisions on transaction scope under the carpet. &#8220;I did this thing I thought was obvious and it just blew up,&#8221; can be answered with, &#8220;here&#8217;s a nice tutorial on how to do it right; ask if you&#160;need help.&#8221; By contrast, &#8220;your language&#8217;s magic to make stuff appear to work just wasted days of my life&#8221; is a sure-fire way to get a bad reputation among the competent. And that&#8217;s the last thing we want.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/6guts.wordpress.com/317/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/6guts.wordpress.com/317/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=6guts.wordpress.com&amp;blog=14597269&amp;post=317&amp;subd=6guts&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://6guts.wordpress.com/2014/04/17/racing-to-writeness-to-wrongness-leads/">
            Jonathan Worthington | 6guts | 
            2014-04-17 00:09:34</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://6guts.wordpress.com/?p=312">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://6guts.wordpress.com/" title="6guts">Jonathan Worthington </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/5999d5d26089eb4019867dc7705c41a9" width="" height="" alt="">

            <a href="http://6guts.wordpress.com/2014/04/12/optimization-concurrency-and-moar/">Optimization, concurrency, and Moar</a> 
        </div>

         <div class="content">
            <p>It&#8217;s been a while since I wrote an update here. Happily,&#160;timotimo has taken up the role of being our&#160;<a href="http://p6weekly.wordpress.com/">weekly Perl 6 reporter</a>, so there&#8217;s a good place to follow for regular updates. However, I wanted to take a moment to provide the bigger picture of what&#8217;s been happening in the last couple of months, share my perspectives on it, and talk a bit about where things are headed from here.</p>
<h3>Optimization, optimization, optimization!</h3>
<p>A lot of recent effort has gone on optimization. NQP, the subset of Perl 6 that we use to implement much of the Rakudo Perl 6 compiler, has performance on MoarVM that starts to&#160;approach that of Perl 5, and on JVM sometimes exceeds that of Perl 5 for longer running things (it typically runs the&#160;forest fire benchmark from our benchmark suite faster once the JIT has had time to get going, for example). By contrast, Rakudo&#8217;s performance itself has been comparatively awful. Thankfully, things have been getting better, as we&#8217;ve worked to improve optimization, reduce costs of common things, and gradually begun to close the gap. This has involved work on both Rakudo and NQP&#8217;s optimization phases, along with work on improving the built-ins and some performance-oriented factoring changes. There&#8217;s still plenty of work to go, but anybody using Rakudo on MoarVM will likely feel the results in the next release. To give an idea of the improvement in HEAD Rakudo on MoarVM, which will appear in the April monthly:</p>
<ul>
<li>Array and hash access is more than 3 times faster</li>
<li>Most multi-dispatches are now enormously cheaper</li>
<li>Many, many unrequired scalar allocations are optimized away</li>
<li>The forest fire benchmark on Rakudo can render twice as many frames per second</li>
<li>Compiler performance is around 15% better (estimate going on CORE.setting compile time)</li>
</ul>
<p>Compared to Rakudo on Parrot the difference is more marked. On compiler performance alone, the difference is enormous: you can build the entire of Rakudo on MoarVM on my box in around 80s (which I&#8217;m not happy with yet, though you rarely change so much that you have to do the whole thing). That is less time than it takes for Rakudo on Parrot to&#160;complete the parse/AST&#160;phases of compiling CORE.setting (the built-ins). Running the spectest suite happens in half the time. Both of these times are important because they influence how quickly those of us working on Perl 6 implementation can try out our changes. Unsurprisingly,&#160;most of us do the majority of our development on MoarVM first these days.</p>
<p>One consequence of this work is that Rakudo on MoarVM is often sneaking ahead of Rakudo on JVM on some benchmarks now, even once the mighty JVM JIT kicks in. This won&#8217;t last long, though; a couple of the optimizations done will not be a great deal of work to port to the JVM, and then it can re-claim its crown. For now! :-)</p>
<h3>Introducing &#8220;spesh&#8221;</h3>
<p>A whole other level of performance related work has been taking place in MoarVM itself.&#160;The first goal for the project was &#8220;just run NQP and Perl 6&#8243;, and the VM simply got on with interpreting the bytecode we threw at it. That doesn&#8217;t mean it wasn&#8217;t carefully designed along the way &#8211; just that the focus in terms of execution was to be simple, correct and sufficiently complete to serve as a solid Rakudo backend. With that goal achieved, the next phase of the project is underway: implementing dynamic optimization based on program information available at runtime, speculative optimizations that can be undone if things they rely on are broken, and so forth.</p>
<p>The first steps in that direction will be included in this month&#8217;s MoarVM release, and are to thank for much of the improved compiler performance (since the compiler is a program running on the VM too). The easiest way to get an overview is for me to walk you through the pieces in <a href="https://github.com/MoarVM/MoarVM/tree/master/src/spesh">src/spesh</a> in MoarVM.</p>
<ul>
<li><strong>graph</strong> is about building a representation of the bytecode (at a frame level) suitable for analysis and transformation (the two steps involved in optimization). It starts out by building a Control Flow Graph. It then computes the dominance tree, which it uses to rename variables so as to produce a Static Single Assignment form of the bytecode. This is a form whereby a given name is only written to once, which eases many, many aspects of analysis.</li>
<li><strong>args</strong> takes a tuple of incoming arguments, considers their types, arity, and so forth.&#160;It produces a set of guard clauses that indicate when a given specialization of the code applies (that is, a version of the code improved by making assumptions about what was passed), and then re-writes various argument access instructions to &#8220;unsafe&#8221; but fast ones that it can prove will always work out.</li>
<li><strong>facts</strong> takes the graph, looks through it for sources of type information (including the incoming arguments) and does an initial propagation of that information through the graph. It creates usage counts to be later used in dead code elimination.</li>
<li><strong>optimize</strong> takes this annotated graph, and makes a pass through it, applying a number of optimizations. Granted, there are not so many yet; so far we&#8217;ve mostly worked on getting to the point of having a framework to prove safety of transformations, and adding more of them comes next. However, those there so far can do things like:
<ul>
<li>Resolve methods to avoid hash lookups</li>
<li>Install monomorphic method caching if that doesn&#8217;t work out</li>
<li>Resolve type checks, possibly eliminating entire branches of code</li>
<li>Re-write attribute binds into &#8220;unsafe&#8221; pointer operations</li>
<li>Eliminate dead code</li>
</ul>
</li>
<li><strong>codegen</strong> takes the optimized graph and produces bytecode from it again. However, in the future (if we&#8217;re lucky, then hopefully through a GSoC project), this is where we would produce machine code instead.</li>
<li><strong>deopt&#160;</strong>deals with the situation where some invariant specialized code may be relying on gets broken, and yet that specialized code is still on the call stack. It walks the call stack, looking for specialized code on it and tweaking return addresses and other data structures so that when we return into the code, we&#8217;re back in the safe (though of course slower) unspecialized code that checks things as needed.</li>
</ul>
<p>By and large, this is essentially giving MoarVM a JIT. Of course, it&#8217;s not producing machine code yet, but rather JITing back to improved bytecode. While we tend to think of JITs primarily as &#8220;turn the program into machine code&#8221;, that&#8217;s really just one small&#160;part of any modern JIT. Analysis and specialization of the program before the machine code is produced is just as important; with this approach, we get to focus in on that part first and get some of the benefits now.</p>
<h3>Concurrency</h3>
<p>Progress on Perl 6 concurrency continues. The JVM implementation of the concurrency features has had various performance improvements since the March release, and MoarVM now has support for most of the Perl 6 concurrency features also. However, the MoarVM support for these features is early and most certainly not yet production ready. We&#8217;ll include&#160;it in the April release, but stick with Rakudo on the JVM for concurrency things if you&#8217;re doing anything that matters. If you just want to play with the basics, either will do.</p>
<h3>Rakudo on MoarVM takes the&#160;spectest crown</h3>
<p>Rakudo on its various backends hold the top spots on the Perl 6 specification test suite pass rate. However, nowadays Rakudo on MoarVM has worked its way into the lead. How so? Because it has the best Unicode database introspection support, opening up a range of tests that no other backend handles yet. Additionally, because it gets some of the Unicode stuff right that that Parrot does, but JVM doesn&#8217;t. And, finally, because on top of that it can now pass a bunch of the concurrency tests.</p>
<h3>A multi-backend Rakudo Star</h3>
<p>I&#8217;d hoped we would get a Rakudo Star release with support for all three backends out in March. It didn&#8217;t happen; the module tests showed up some holes. We&#8217;ve by now largely fixed those for Rakudo on MoarVM, and we&#8217;re looking quite good for the April Rakudo Star coming with support for both Parrot and MoarVM. With some effort, I&#8217;m optimistic we&#8217;ll&#160;have&#160;a JVM Star release in good shape for April too. This will provide users who want the &#8220;batteries included&#8221; release a choice of backends, and of note give those using Parrot a&#160;chance to switch over to using MoarVM, getting some substantial performance improvements on most programs and lower startup time and memory use.</p>
<h3>Where next?</h3>
<p>In the coming months, I&#8217;m going to be focusing on the following areas:</p>
<ul>
<li>More improvements to the Rakudo and NQP optimizers, so we generate better (faster, smaller) code.</li>
<li>More improvements to the Rakudo built-ins, so they operate more efficiently.</li>
<li>Making the MoarVM concurrency support more robust, and improving the parallel GC.</li>
<li>Advancing the state of asynchronous I/O, so we&#8217;ll have good support for it on both the JVM and MoarVM.</li>
<li>Teaching spesh to specialize better. There are a bunch of data access things that can be made cheaper, as well as being able to better optimize multiple dispatch. Beyond that, both inlining and escape analysis are on the menu.</li>
<li>Improving native type support, including providing native arrays.</li>
</ul>
<p>I&#8217;ve been hidden away coding for much of the year so far, apart from putting in an appearance at FOSDEM. But I&#8217;m getting on the road soon! I&#8217;ll be at the Dutch, Polish and Czech Perl Workshops, and look forward to seeing folks and sharing what I&#8217;ve been working on. Hope to see some of you out there!</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/6guts.wordpress.com/312/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/6guts.wordpress.com/312/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=6guts.wordpress.com&amp;blog=14597269&amp;post=312&amp;subd=6guts&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://6guts.wordpress.com/2014/04/12/optimization-concurrency-and-moar/">
            Jonathan Worthington | 6guts | 
            2014-04-12 00:21:53</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://rakudo.org/?p=330">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://rakudo.org/" title="rakudo.org">rakudo.org </a></div><br />
                     <img class="face" src="http://rakudoperl.org/wp/wp-content/uploads/2011/04/rakudo-1001.png" width="" height="" alt="">

            <a href="http://rakudo.org/2014/04/01/rakudo-star-release-2014-03/">Rakudo Star Release 2014.03</a> 
        </div>

         <div class="content">
            <h1>Announce: Rakudo Star Release 2014.03</h1>
<h2>A useful, usable, &#8220;early adopter&#8221; distribution of Perl 6</h2>
<p>On behalf of the Rakudo and Perl 6 development teams, I&#8217;m happy to<br/>
announce the March 2014 release of &#8220;Rakudo Star&#8221;, a useful and usable<br/>
distribution of Perl 6. The tarball for the March 2014 release is<br/>
available from <a href="http://rakudo.org/downloads/star/" title="http://rakudo.org/downloads/star/">http://rakudo.org/downloads/star/</a>. A Windows .MSI<br/>
version of Rakudo star is also available at that location.</p>
<p>In the Perl 6 world, we make a distinction between the language<br/>
(&#8220;Perl 6&#8243;) and specific implementations of the language such as<br/>
&#8220;Rakudo Perl&#8221;. This Star release includes [release 2014.03] of the<br/>
[Rakudo Perl 6 compiler], version 6.1.0 of the [Parrot Virtual<br/>
Machine], plus various modules, documentation, and other resources<br/>
collected from the Perl 6 community.</p>
<p>[release 2014.03]:<br/>
<a href="https://github.com/rakudo/rakudo/blob/nom/docs/announce/2014.03.md" title=" https://github.com/rakudo/rakudo/blob/nom/docs/announce/2014.03.md"> https://github.com/rakudo/rakudo/blob/nom/docs/announce/2014.03.md</a><br/>
[Rakudo Perl 6 compiler]: <a href="http://github.com/rakudo/rakudo" title="http://github.com/rakudo/rakudo">http://github.com/rakudo/rakudo</a><br/>
[Parrot Virtual Machine]: <a href="http://parrot.orghttp://" title="http://parrot.org">http://parrot.org</a></p>
<p>Some of the new features added to this release include:</p>
<ul>
<li>The core of Rakudo::Debugger is now part of Rakudo itself and works across all backends.</li>
<li>&#8220;make&#8221; no longer itemizes its arguments.</li>
<li>for-loops at the statementlist level are now sunk by default.</li>
<li>better parsing of unspaces and formatting codes inside Pod blocks.</li>
<li>Fix for for-loops to be properly lazy</li>
<li>Numerous Pod parsing and formatting improvements</li>
<li>@ as shortcut for @$, % as shortcut for %$</li>
<li>list infix reductions no longer flatten</li>
<li>Numerous compiler suggestion improvements</li>
</ul>
<p>Please note that this release of Rakudo Star does not support the JVM<br/>
nor the MoarVM backends from the Rakudo compiler. While the other backends<br/>
mostly implement the same features as the Parrot backend, some bits are<br/>
still missing that lead to module build problems or test failures.<br/>
We hope to provide experimental JVM-based and MoarVM-based Rakudo Star<br/>
releases in April 2014.</p>
<p>There are some key features of Perl 6 that Rakudo Star does not yet<br/>
handle appropriately, although they will appear in upcoming releases.<br/>
Some of the not-quite-there features include:</p>
<ul>
<li>advanced macros</li>
<li>threads and concurrency (in work for the JVM and MoarVM backend)</li>
<li>Unicode strings at levels other than codepoints</li>
<li>interactive readline that understands Unicode</li>
<li>non-blocking I/O</li>
<li>much of Synopsis 9 and 11</li>
</ul>
<p>There is an online resource at <a href="http://perl6.org/compilers/features" title="http://perl6.org/compilers/features">http://perl6.org/compilers/features</a><br/>
that lists the known implemented and missing features of Rakudo and<br/>
other Perl 6 implementations.</p>
<p>In many places we&#8217;ve tried to make Rakudo smart enough to inform the<br/>
programmer that a given feature isn&#8217;t implemented, but there are many<br/>
that we&#8217;ve missed. Bug reports about missing and broken features are<br/>
welcomed at <a href="mailto:rakudobug@perl.org" title="rakudobug@perl.org">rakudobug@perl.org</a>.</p>
<p>See <a href="http://perl6.org/" title="http://perl6.org/">http://perl6.org/</a> for links to much more information about<br/>
Perl 6, including documentation, example code, tutorials, reference<br/>
materials, specification documents, and other supporting resources. A<br/>
draft of a Perl 6 book is available as docs/UsingPerl6-draft.pdf in<br/>
the release tarball.</p>
<p>The development team thanks all of the contributors and sponsors for<br/>
making Rakudo Star possible. If you would like to contribute, see<br/>
<a href="http://rakudo.org/how-to-help" title="http://rakudo.org/how-to-help">http://rakudo.org/how-to-help</a>, ask on the <a href="mailto:perl6-compiler@perl.org" title="perl6-compiler@perl.org">perl6-compiler@perl.org</a> mailing list, or join us on IRC #perl6 on freenode.</p>
          </div>
                        
         <p align="right">
            <a href="http://rakudo.org/2014/04/01/rakudo-star-release-2014-03/">
            rakudo.org | rakudo.org | 
            2014-04-01 17:48:38</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://ttjjss.wordpress.com/?p=228">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://ttjjss.wordpress.com/" title="Whatever but Cool  Perl">Tadeusz Sosnierz (tadzik) </a></div><br />
         

            <a href="http://ttjjss.wordpress.com/2014/03/23/perl-6-on-steroids-through-the-window/">Perl 6 on steroids: Through The Window</a> 
        </div>

         <div class="content">
            <p><a href="http://ttjjss.files.wordpress.com/2014/03/2014-03-23-152502_1024x768_scrot.png" style="font-style: normal; line-height: 23.799999237061px; text-decoration: underline;"><img alt="Image" class="size-full wp-image" id="i-279" src="http://ttjjss.files.wordpress.com/2014/03/2014-03-23-152502_1024x768_scrot.png?w=650"/></a></p>
<p>&#160;</p>
<p>I got into programming because I wanted to write games. I played games as a kid (wolfenstein 3d, putt-putt, I don&#8217;t remember the rest of the names), and I thought &#8220;when I grow up, I&#8217;m going to write games!&#8221;</p>
<p>I never really did; at some point I realized I&#8217;ve written more compilers than games: whatever happened to the childhood dream? So I thought I&#8217;ll write some, to try and learn something new.</p>
<p>With two friends from work I went to javascript game programming conference &#8211; it was the only game conf I&#8217;ve ever heard of, so I thought &#8220;javascript or not, let&#8217;s see how gamedev geeks party&#8221;. The universal &#8220;let&#8217;s create idiotic games and make a lot of money on ads and In-App-Purchases&#8221; attitude of the startup crowd discouraged me a little bit, but I tried to ignore that bit and focus on the technical content. I never liked javascript, I didn&#8217;t really want to use it for any kind of programming, and frankly, working in Perl and Python I grew tired of dynamic typing altogether, but I thought &#8220;hmm, maybe if I created a superset of JS that has nice type annotations, that the compiler checks and then drops, emitting vanilla JS, that wouldn&#8217;t be so bad to write code in&#8221;. I consulted a friend of mine, and, as it usually happens, it turned out that such thing already exists: it&#8217;s called Typescript, and Microsoft created it long ago. Oh well, let&#8217;s give it a try.</p>
<p>Why am I writing about all this? Where does Perl 6 come in? Thing is, when I started programming in Typescript, I got annoyed. It&#8217;s severly underdocumented, undersupported, development is not pleasant, because you get some errors from the compiler and then different errors from a browser, but the worst thing is: it was slow! It was so slow it was unbearable, and I thought &#8220;ah, screw it. I&#8217;ll be better off with Perl 6&#8243;.</p>
<p>I chose Perl 6 for performance reasons! Ain&#8217;t that something to tell my grandkids about.</p>
<p>Of course, creating games in Perl 6 is not so trivial: I&#8217;ll have to write the engine/framework/whatever myself. Time to roll the sleeves up and get to work.</p>
<p>I got quite motivated by <a href="http://lessmilk.com" rel="nofollow">http://lessmilk.com</a>. This guy creates a new game every week to learn game development. Cool thing! He was describing phaser.js in one of his articles, so I created Steroids, and modelled it after Phaser.</p>
<p>Why steroids? Well, at some point I ported my C Asteroids to Perl 6, as a proof of concept, to see if it can indeed handle 60fps games (it can), and the &#8220;steroids&#8221; bit somewhat got stuck in my mind. Also, being on steroids gives you much more flexibility than, say, being on the rails. Don&#8217;t worry, nothing bad about being on&#160;Steroids: Just ask Duke Nukem, he got by just fine.</p>
<p>So, Perl 6 on Steroids was born. I started writing a running-jumping game, and abstracting the commonly used bits to a module as I went on. Why a running-jumping game? Well, you asked for it: it&#8217;s time for another backstory:</p>
<p>Ever wrote in a backseat of the car as a kid, looking out the window? Did you imagine a person running along the car, jumping over obstacles? I did, and from what I&#8217;ve heard I am not the only one. Thus, &#8220;Through the Window&#8221; was born: a game where a man runs along the horizon, jumping over trees and cows, being the first showcase for Steroids, and a reason for it to exist.</p>
<p>The post is getting lenghty enough, and there&#8217;s much to announce still, so I&#8217;ll run through the 80 lines of code really quickly to show you what Steroids gives you. You can read the entire source code <a href="https://github.com/tadzik/ThroughTheWindow/blob/master/ThroughTheWindow">here</a></p>
<blockquote><p>class Game is Steroids::Game</p>
</blockquote>
<p>You create a class that inherits from Steroids::Game. You need to define at least two methods for it to make any sense: create() and update(). The former initializes the game, and the latter is called 60 times per second to update the game state.</p>
<p>Some of the things you may want to do in the create() method:</p>
<blockquote><p>self.load_bitmap(&#8216;background&#8217;, &#8216;assets/background.bmp&#8217;);</p>
<p>self.add_sprite(&#8216;background&#8217;, 0, 0);</p>
</blockquote>
<p>Pretty self-explanatory. Steroids handles loading bitmaps from disk for you, and putting them in a scene.</p>
<blockquote><p><i>self.load_bitmap(&#8216;runner&#8217;, &#8216;assets/runner.bmp&#8217;);</i></p>
<p>$!runner = self.add_sprite(&#8216;runner&#8217;, 50, GROUNDLEVEL);</p>
<p>$!runner.y -= $!runner.h;</p>
<div id="LC26">$!runner.gravity = 1;</div>
<div id="LC27">$!runner.when({ $_.y &gt; GROUNDLEVEL &#8211; $_.h }, {</div>
<div id="LC28">$!runner.y = GROUNDLEVEL &#8211; $!runner.h;</div>
<div id="LC29">&#160; &#160; $!runner.velocity[1] = 0;</div>
<div id="LC30">})
<p>;</p></div>
</blockquote>
<div>Plenty of things here: we add a runner to the scene. We move him up a little bit, so he&#8217;s actually standing on the ground, rather than having his head on the ground level, we give him a gravity (so he&#8217;s falling down all the time), and we add an event, so when he hits the ground with his feet we stop him, so he doesn&#8217;t fall any further down. This should probably be handled by a collision detection at some point, but I didn&#8217;t get around to write collision detection yet.</div>
<div>&#160;</div>
<div>That&#8217;s the interesting part from create(), now let&#8217;s look at update() really quickly.</div>
<div>&#160;</div>
<blockquote><div id="LC36">method update {</div>
<div id="LC37">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if @!obstacles</div>
<div id="LC38">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;and @!obstacles[0].x &lt; ($!runner.x + $!runner.w) &lt; (@!obstacles[0].x + @!obstacles[0].w)</div>
<div id="LC39">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;and $!runner.y + $!runner.h &gt; @!obstacles[0].y {</div>
<div id="LC39">&#160; &#160; &#160; &#160; &#160; &#160; say &#8220;===========================================&#8221;;</div>
<div id="LC41">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;say &#8221; Game over! You traveled $!distance pixels &#8220;;</div>
<div id="LC42">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;say &#8220;===========================================&#8221;;</div>
<div id="LC43">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;say &#8220;&#8221;;</div>
<div id="LC44">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.quit;</div>
<div id="LC45">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</div>
</blockquote>
<div>Here&#8217;s our half-assed collision detection: if the front foot of the runner is inside the first obstacle (so, the leftmost), then the game is over.</div>
<div>&#160;</div>
<div>How do the obstacles get there in the first place?</div>
<blockquote><div>
<div id="LC47">&#160;if $!distance &gt; $!last-obstacle + 40 and rand &gt; 0.9 {</div>
<div id="LC48">&#160; &#160; &#160;my $s = self.add_sprite(&lt;cow tree&gt;.pick, self.width, GROUNDLEVEL);</div>
<div id="LC49">&#160; &#160; &#160;$s.y -= $s.h;</div>
<div id="LC50">&#160; &#160; &#160;$s.velocity[0] = -12;</div>
<div id="LC51">&#160; &#160; &#160;@!obstacles.push: $s;</div>
<div id="LC52">&#160; &#160; &#160;$s.when({ $_.x &lt; 0 &#8211; $_.w }, {</div>
<div id="LC53">&#160; &#160; &#160;self.remove_sprite($_);</div>
<div id="LC54">&#160; &#160; &#160; &#160; &#160;@!obstacles.shift;</div>
<div id="LC55">&#160; &#160; &#160;});</div>
<div id="LC56">&#160; &#160; &#160;$!last-obstacle = $!distance;</div>
<div id="LC57">}</div>
</div>
</blockquote>
<div>
<div>If enough time has passed since we put an obstacle on the road (we don&#8217;t want the road to be impossible to travel), we add either a tree or a cow on the ground, as far on the right as we can. We make it slowly move to the left, add it to the list of obstacles, and add an event so when it reaches the left edge of the screen we remove it from the scene.</div>
<div>This part features a hack: @!obstacles.shift removes the first element of the list, and it just so happens that the object disappearing from the scene will always be the first one on the list: we don&#8217;t need to look through @!obstacles to find which one it is.</div>
<div>&#160;</div>
<blockquote><div>
<div id="LC67">if self.is_pressed(&#8220;Space&#8221;) and $!runner.y == GROUNDLEVEL &#8211; $!runner.h {</div>
<div id="LC68">&#160; &#160; &#160;$!runner.velocity[1] = -22;</div>
<div>}</div>
</div>
</blockquote>
<div>
<div>Pretty obvious: if Space is pressed while the runner is on the ground, he bounces upwards.</div>
<div>&#160;</div>
<div>That&#8217;s just about all that it&#8217;s there to describe. <a href="https://github.com/tadzik/ThroughTheWindow">Go play around with it</a>, and remember about the soundtrack (in the README) &#8211; it&#8217;s a very important part of the game :)</div>
<div>&#160;</div>
<div>(I was informed that the build process can be a bit more complicated on OSX; the entire Steroids development team is working hard to fix it, but if you have a good and ready solution, please send me a pull request).</div>
<div>&#160;</div>
<div><strong>But wait, there&#8217;s more!</strong> To celebrate the best game I&#8217;ve ever written, I&#8217;m announcing a contest: The task is to write a game using Steroids (with as many patches to it as you want). Let&#8217;s see how much can we squeeze out of those 120 lines of code to create something fun. One week from now, next sunday, I&#8217;m going to pick a winner and reward the author with a game that I like, and the author doesn&#8217;t yet have. Have an inappropriate amount of fun!</div>
</div>
</div><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/ttjjss.wordpress.com/228/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ttjjss.wordpress.com/228/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=ttjjss.wordpress.com&amp;blog=15099040&amp;post=228&amp;subd=ttjjss&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://ttjjss.wordpress.com/2014/03/23/perl-6-on-steroids-through-the-window/">
            Tadeusz Sosnierz (tadzik) | Whatever but Cool  Perl | 
            2014-03-23 14:36:45</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:strangelyconsistent.org,2014-03-23:blog/parsing-indented-text">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://strangelyconsistent.org/blog/" title="Strangely Consistent">Carl Masak </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/2d9d4815e8e5927a4e04cdea13ca1e36" width="" height="" alt="">

            <a href="http://strangelyconsistent.org/blog/parsing-indented-text">Parsing indented text</a> 
        </div>

         <div class="content">
            <p>"How can I parse indented text with a grammar?" has turned into a frequently-asked question recently. People want to parse Python and CoffeScript.</p>

<p>My fix is double. First, here's <a href="https://github.com/masak/text-indented">Text::Indented</a>, a module that does it.</p>

<p>Secondly, I'll now recreate my steps in creating this module. Each section will have a description of what needs to be done, a failing test, and then the appropriate implementation code to pass the test.</p>

<h2>Quite a simple indent</h2>

<p>We want to be able to <a href="https://github.com/masak/text-indented/commit/08bfb4fd42113774a635da81074728a2afcca2c4">handle indentation <em>at all</em></a>.</p>

<pre><code>    my $input = q:to/EOF/;
    Level 1
        Level 2
    EOF

    parses_correctly($input, 'single indent');
</code></pre>

<p>Well, that's easy. This grammar will do that:</p>

<pre><code>regex TOP { .* }
</code></pre>

<p>(<a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">Kent Beck</a> told me I can cheat, so I cheat!)</p>

<h2>Too much indent for our own good</h2>

<p>But there are some indent jumps that we're not allowed to make. Anything that indents more than one step at a time, basically. <a href="https://github.com/masak/text-indented/commit/a1609e603dd5062c3a93e6d5d8219c82b533d8ab">Let's check for that</a>.</p>

<pre><code>    my $input = q:to/EOF/;
    Level 1
            Level 3!
    EOF

    fails_with($input, Text::Indented::TooMuchIndent);
</code></pre>

<p>This takes a little more code to fix. We declare an exception, start parsing lines, and separate each line into indent, extra whitespace, and the rest of the line. Finally we check the line's indent against the current indent &#8212; mediated by the contextual variable <code>@*SUITES</code>. You'll see where I'm going with this in a minute.</p>

<pre><code>class TooMuchIndent is Exception {}

constant TABSTOP = 4;

regex TOP {
    :my @*SUITES = "root";

    &lt;line&gt;*
}

sub indent { @*SUITES.end }

regex line {
    ^^ (&lt;{ "\\x20" x TABSTOP }&gt;*) (\h*) (\N*) $$ \n?

    {
        my $new_indent = $0.chars div TABSTOP;

        die TooMuchIndent.new
            if $new_indent &gt; indent() + 1;
    }
}
</code></pre>

<p>(The <code>&lt;{ "\\x20" x TABSTOP }&gt;</code> is a bit of a workaround. In Wonderful Perl 6 we would be able to write just <code>[\x20 ** {TABSTOP}]</code>.)</p>

<h2>Actual content</h2>

<p>Having laid the groundworks, let's get our hands dirty. We want the content to end up, line by line, <a href="https://github.com/masak/text-indented/commit/b3e390b16ea5ef09fb2e0ba0c1eaabdf8f312c81">on the right scoping level</a>.</p>

<pre><code>    my $input = q:to/EOF/;
    Level 1
        Level 2
    EOF

    my $root = parse($input);

    isa_ok $root, Text::Indented::Suite;
    is $root.items.elems, 2, 'two things were parsed:';
    isa_ok $root.items[0], Str, 'a string';
    isa_ok $root.items[1], Text::Indented::Suite, 'and a suite';
</code></pre>

<p>We need a <code>Suite</code> (term borrowed from Python) to contain the indented lines:</p>

<pre><code>class Suite {
    has @.items;
}
</code></pre>

<p>This requires a slight amending of <code>TOP</code>:</p>

<pre><code>regex TOP {
    :my @*SUITES = Suite.new;

    &lt;line&gt;*

    { make root_suite }
}
</code></pre>

<p>The logic in <code>line</code> to create new suites with new indents:</p>

<pre><code># ^^ (&lt;{ "\\x20" x TABSTOP }&gt;*) (\h*) (\N*) $$ \n?

my $line = ~$2;

if $new_indent &gt; indent() {
    my $new_suite = Suite.new;
    add_to_current_suite($new_suite);
    increase_indent($new_suite);
}

add_to_current_suite($line);
</code></pre>

<p>For all this, I had to define some convenience routines:</p>

<pre><code>sub root_suite { @*SUITES[0] }
sub current_suite { @*SUITES[indent] }
sub add_to_current_suite($item) { current_suite.items.push($item) }
sub increase_indent($new_suite) { @*SUITES.push($new_suite) }
</code></pre>

<h2>But what about de-indenting?</h2>

<p>We've handled indenting and creating new suites nicely, but <a href="https://github.com/masak/text-indented/commit/3f9b71b7a8f4c0f35cc1f0c97d4bad898bcaa227">what about de-indenting</a>?</p>

<pre><code>    my $input = q:to/EOF/;
    Level 1
        Level 2
    Level 1 again
    EOF

    my $root = parse($input);

    is $root.items.elems, 3, 'three things were parsed:';
    isa_ok $root.items[0], Str, 'a string';
    isa_ok $root.items[1], Text::Indented::Suite, 'a suite';
    isa_ok $root.items[2], Str, 'and a string';
</code></pre>

<p>Easily fixed with an <code>elsif</code> case in our <code>line</code> regex:</p>

<pre><code>elsif $new_indent &lt; indent() {
     decrease_indent;
}
</code></pre>

<p>And a convenience routine:</p>

<pre><code>sub decrease_indent { pop @*SUITES }
</code></pre>

<h2>Hah, you missed multi-step de-indents!</h2>

<p>Indenting multiple steps at a time isn't allowed... but <a href="https://github.com/masak/text-indented/commit/4ee499aace9b6110c3dce23bcbb43708b7ddad87">de-indenting multiple steps</a> is. (This may actually be the strongest point of this kind of syntax. It corresponds to the <code>} } }</code> or <code>end end end</code> case of languages with explicit block delimiters, and is arguably neater.)</p>

<pre><code>    my $input = q:to/EOF/;
    Level 1
        Level 2
            Level 3
            Level 3
    Level 1 again
    EOF

    my $root = parse($input);

    is $root.items.elems, 3, 'three things on the top level';
    is $root.items[1].items[1].items.elems, 2, 'two lines on indent level 3';
</code></pre>

<p>Oh, but we only need to change one line in the implementation to support this:</p>

<pre><code>decrease_indent until indent() == $new_indent;
</code></pre>

<h2>And a half!</h2>

<p>Now for some random sins. You're not supposed to <a href="https://github.com/masak/text-indented/commit/243291ba31e2a77b89bd47c33aadc14cd0dd8366">indent partially</a>, a non-multiple of the indent size.</p>

<pre><code>    my $input = q:to/EOF/;
    Level 1
          Level 2 and a half!
    EOF

    fails_with($input, Text::Indented::PartialIndent);
</code></pre>

<p>So we introduce a new exception.</p>

<pre><code>class PartialIndent is Exception {}
</code></pre>

<p>And a condition that checks for this:</p>

<pre><code># ^^ (&lt;{ "\\x20" x TABSTOP }&gt;*) (\h*) (\N*) $$ \n?

my $partial_indent = ~$1;

die PartialIndent.new
    if $partial_indent;
</code></pre>

<h2>What do you mean, "jumped the gun"?</h2>

<p>Secondly, <a href="https://github.com/masak/text-indented/commit/8b21fc63b18707b3f2bf1b7700b325cf7607df80">you're not meant to indent the first line</a>; it has to be at indentation level 0.</p>

<pre><code>    my $input = q:to/EOF/;
        Level 2 already on the first line!
    EOF

    fails_with($input, Text::Indented::InitialIndent);
</code></pre>

<p>We introduce another exception for that.</p>

<pre><code>class InitialIndent is Exception {}
</code></pre>

<p>And a condition that matches our test case.</p>

<pre><code>die InitialIndent.new
    if !root_suite.items &amp;&amp; $new_indent &gt; 0;
</code></pre>

<h2>The importance of <code>handles</code></h2>

<p>As a final clean-up refactor, <a href="https://github.com/masak/text-indented/commit/71e81bfb082d1afc88c32a51763f25c430167da7">let's change <code>@.items</code> in <code>Suite</code></a> to this:</p>

<pre><code>class Suite {
    has @.items handles &lt;push at_pos Numeric Bool&gt;;
}
</code></pre>

<p>It makes <code>Suite</code> more <code>Array</code>-like. Piece by piece:</p>

<ul>
<li><code>push</code> allows us to push directly into a <code>Suite</code> object, instead of into its <code>.items</code> attribute.</li>
<li><code>at_pos</code> allows us to index <code>Suites</code> directly. Things like <code>$root.items[1]</code> in the tests turn into <code>$root[1]</code>.</li>
<li><code>Numeric</code> gets rid of the <code>.elems</code> calls for us in the tests, and we can write <code>$root.items.elems</code> as just <code>+$root</code> instead.</li>
<li>Finally, <code>Bool</code> allows us to write <code>!root_suite.items</code> as just <code>!root_suite()</code>.</li>
</ul>

<p>Somehow I liked doing this refactor last, after all the dust around the implementation had settled. It makes the API much more enjoyable to use, and hides a bunch of unnecessary steps along the way. I really like the way <code>handles</code> saves a bunch of boring code.</p>

<h2>Enjoy</h2>

<p>Anyway, that's parsing of indented code. Not as tricky as I thought.</p>

<p>Now I fear I've damned myself to contribute this solution to <a href="https://github.com/arnsholt/snake/">arnsholt++'s budding py3k implementation</a>. &#21704;&#21704;</p>
          </div>
                        
         <p align="right">
            <a href="http://strangelyconsistent.org/blog/parsing-indented-text">
            Carl Masak | Strangely Consistent | 
            2014-03-23 01:12:03</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://www.nntp.perl.org/group/perl.perl6.announce/2014/03/msg710.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://www.nntp.perl.org/group/perl.perl6.announce/" title="perl.perl6.announce">Perl 6 Announce </a></div><br />
         

            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/03/msg710.html">Parrot 6.2.0 "Imperial Amazon" Released! by Bruce Gray</a> 
        </div>

         <div class="content">
            <p>Beside him, Melvin and Lavender and Allen all seemed to feel like marching too.<br/>And Neville softly began to sing the Song of Chaos.<br/><br/>The tune was what a Muggle would have identified as John Williams's Imperial<br/>March, also known as "Darth Vader's Theme"; and the words Harry had added were<br/>easy to remember.<br/><br/>Doom doom doom<br/>Doom doom doom doom doom doom<br/>Doom doom doom<br/>Doom doom doom doom doom doom<br/>DOOM doom _DOOM_<br/>Doom doom doom-doom-doom doom doom<br/>Doom doom-doom-doom doom doom<br/>Doom doom doom, doom doom doom.<br/><br/>By the second line the others had joined in, and soon you could hear<br/>the same soft chant coming from nearby parts of the forest.<br/><br/>And Neville marched alongside his fellow Chaos Legionnaires,<br/>strange feelings stirring in his heart,<br/>imagination becoming reality,<br/>as from his lips poured a fearful song of doom.<br/><br/>    -- Harry Potter and the Methods of Rationality<br/>       http://hpmor.com/                chapter/30<br/><br/>On behalf of the Parrot team, I'm proud to announce Parrot 6.2.0, also known<br/>as "Imperial Amazon".  Parrot (http://parrot.org/) is a virtual machine aimed<br/>at running all dynamic languages.<br/><br/>Parrot 6.2.0 is available on Parrot's FTP site<br/>(ftp://ftp.parrot.org/pub/parrot/releases/devel/6.2.0/), or by following the<br/>download instructions at http://parrot.org/download.  For those who would like<br/>to develop on Parrot, or help develop Parrot itself, we recommend using Git to<br/>retrieve the source code to get the latest and best Parrot code.<br/><br/>Parrot 6.2.0 News:<br/>   - Core<br/>       + Re-enable old immc flags for parrot and parrot_old, such as<br/>         -On -a -v -y -E -dxx. [GH #1033]<br/>       + Fixed imcc -O1 and -O2<br/>         -O1 fixes:<br/>           = Special-case get_global for branch_cond_loop_swap, which broke<br/>             NCI tests [GH #1037]<br/>           = set_addr label does mark a basic_block, dead_code_remove() needs<br/>             the label. Fixes nqp [GH #1061].<br/>         -O2 used_once fixes:<br/>           = Allow used_once elimination only for purely functional ops<br/>             without side-effects [GH #1036]<br/>           = Empty ins-&gt;next in deletion [GH #1042].<br/>         -O2 constant propagation fixes:<br/>           = Empty ins-&gt;op ptrs when deleting or skipping certain instruction<br/>             [GH #1039],<br/>           = Wrong logic leading to missed detecting writes from get_results<br/>             [GH #1041],<br/>           = Propagate only matching types in setters [GH #1042],<br/>           = Stop at yield or invokecc for possible push_eh/pop_eh non-local<br/>             effects [GH #1044]<br/>       + Fixed TT #1930, a floating point optimizer problem on PPC<br/>       + Added cache iterators in encoding_find_*cclass [GH #1027]<br/>         to speedup the utf8 pattern "scan a whole string for newlines".<br/>   - Build<br/>       + Set emacs buffer-read-only:t tags in generated files [GH #1034]<br/>       + Provide coda for generated include/*.pasm files [GH #1032]<br/>       + Fix parser for bison 3 [GH #1031]<br/>       + Add support for __builtin_expect LIKELY/UNLIKELY branch optimizations<br/>         in a new auto::expect step. [GH #1047]<br/>   - Deprecations<br/>       + Warn on deprecated usage of append_configure_log()<br/>   - Documentation<br/>       + Updated pod for parrot and tools/build/c2str.pl<br/>   - Tests<br/>       + Added -O1 and -O2 to fulltest<br/>   - Community<br/>       + Parrot has been accepted to Google Summer of Code 2014<br/>       + Got a candidate for "Improve performance of method signatures"<br/><br/><br/>The SHA256 message digests for the downloadable tarballs are:<br/>a4c97e5974cf6e6ee1e34317aafd2d87a3bd63730098a050d4f09802b13da814 parrot-6.2.0.tar.gz<br/>f8b9cd2d558a1517038dc3154343f622ab1fd7b1f1d13f41a5c6dd51425bfe8e parrot-6.2.0.tar.bz2<br/><br/>Many thanks to all our contributors for making this possible, and our sponsors<br/>for supporting this project.  Our next scheduled release is 15 Apr 2014.<br/><br/>Enjoy!<br/><br/></p>
          </div>
                        
         <p align="right">
            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/03/msg710.html">
            Perl 6 Announce | perl.perl6.announce | 
            2014-03-21 17:36:08</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://www.nntp.perl.org/group/perl.perl6.announce/2014/02/msg709.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://www.nntp.perl.org/group/perl.perl6.announce/" title="perl.perl6.announce">Perl 6 Announce </a></div><br />
         

            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/02/msg709.html">Fwd: Parrot 6.1.0 "Black-collared Lovebird" released by Reini Urban</a> 
        </div>

         <div class="content">
            <p>On behalf of the Parrot team, I'm proud to announce Parrot 6.1.0, also<br/>known as "Black-collared Lovebird".  Parrot (http://parrot.org/) is a<br/>virtual machine aimed at running all dynamic languages.<br/><br/>Parrot 6.1.0 is available on Parrot's FTP site<br/>(ftp://ftp.parrot.org/pub/parrot/releases/devel/6.1.0/), or by<br/>following the<br/>download instructions at http://parrot.org/download.  For those who would like<br/>to develop on Parrot, or help develop Parrot itself, we recommend using Git to<br/>retrieve the source code to get the latest and best Parrot code.<br/><br/>Parrot 6.1.0 News:<br/>    - Build<br/>        + Improve auto::libffi probe with -fstack-protector-all or<br/>          -fstack-protector-strong with recent GCC and OpenBSD's toolchains<br/>    - Documentation<br/>        + Replace perldoc by a new podextract.pl [GH #1028, #973,<br/>          #520], which fixes problems with 'sudo make install' generated ops<br/>          pods as root.<br/><br/>Warnings:<br/>        - Latest nqp does not support the new packfile API yet,<br/>          replacing EvalPMC.<br/>        - This release of Parrot fails to build out-of-the-box under Bison 3,<br/>          e.g. on Fedora 20. For workarounds<br/>          see https://github.com/parrot/parrot/issues/1031<br/><br/>The SHA256 message digests for the downloadable tarballs are:<br/>87d25119c73acdb26f89ac4c68d73f3d996451ada51f3cb2cd4878b6f0e0a34c<br/>parrot-6.1.0.tar.gz<br/>bb1294ad2a7d5b3c4688fc736fb775e94ecfe35fdc072a2631c2080eb5f366f7<br/>parrot-6.1.0.tar.bz2<br/><br/>Many thanks to all our contributors for making this possible, and our sponsors<br/>for supporting this project. Esp. cPanel for the time and Erin Schoenhals for<br/>sponsoring her old Macbook G4 powerpc to update the native_pbc's.<br/>I've also updated all the missing old documentations on parrot.github.io<br/>Our next scheduled release is 18 Mar 2014.<br/><br/>Enjoy!<br/><br/>-- <br/>Reini Urban<br/>http://cpanel.net/   http://www.perl-compiler.org/<br/></p>
          </div>
                        
         <p align="right">
            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/02/msg709.html">
            Perl 6 Announce | perl.perl6.announce | 
            2014-02-18 22:48:26</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://www.nntp.perl.org/group/perl.perl6.announce/2014/02/msg708.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://www.nntp.perl.org/group/perl.perl6.announce/" title="perl.perl6.announce">Perl 6 Announce </a></div><br />
         

            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/02/msg708.html">Parrot 6.1.0 "Black-collared Lovebird" released by Reini Urban</a> 
        </div>

         <div class="content">
            <p>On behalf of the Parrot team, I'm proud to announce Parrot 6.1.0, also known<br/>as "Black-collared Lovebird".  Parrot (http://parrot.org/) is a<br/>virtual machine aimed<br/>at running all dynamic languages.<br/><br/>Parrot 6.1.0 is available on Parrot's FTP site<br/>(ftp://ftp.parrot.org/pub/parrot/releases/devel/6.1.0/), or by following the<br/>download instructions at http://parrot.org/download.  For those who would like<br/>to develop on Parrot, or help develop Parrot itself, we recommend using Git to<br/>retrieve the source code to get the latest and best Parrot code.<br/><br/>Parrot 6.1.0 News:<br/>    - Build<br/>        + Improve auto::libffi probe with -fstack-protector-all or<br/>          -fstack-protector-strong with recent GCC and OpenBSD's toolchains<br/>    - Documentation<br/>        + Replace perldoc by a new podextract.pl [GH #1028, #973,<br/>#520], which fixes<br/>          problems with 'sudo make install' generated ops pods as root.<br/><br/>Warnings:<br/>        - Latest nqp does not support the new packfile API yet,<br/>replacing EvalPMC.<br/>        - This release of Parrot fails to build out-of-the-box under Bison 3,<br/>          e.g. on Fedora 20. For workarounds see<br/>https://github.com/parrot/parrot/issues/1031<br/><br/>The SHA256 message digests for the downloadable tarballs are:<br/>87d25119c73acdb26f89ac4c68d73f3d996451ada51f3cb2cd4878b6f0e0a34c<br/>parrot-6.1.0.tar.gz<br/>bb1294ad2a7d5b3c4688fc736fb775e94ecfe35fdc072a2631c2080eb5f366f7<br/>parrot-6.1.0.tar.bz2<br/><br/>Many thanks to all our contributors for making this possible, and our sponsors<br/>for supporting this project. Esp. cPanel for the time and Erin Schoenhals for<br/>sponsoring her old Macbook G4 powerpc to update the native_pbc's.<br/>I've also updated all the missing old documentations on parrot.github.io<br/>Our next scheduled release is 18 Mar 2014.<br/><br/>Enjoy!<br/></p>
          </div>
                        
         <p align="right">
            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/02/msg708.html">
            Perl 6 Announce | perl.perl6.announce | 
            2014-02-18 21:56:35</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://rakudo.org/?p=302">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://rakudo.org/" title="rakudo.org">rakudo.org </a></div><br />
                     <img class="face" src="http://rakudoperl.org/wp/wp-content/uploads/2011/04/rakudo-1001.png" width="" height="" alt="">

            <a href="http://rakudo.org/2014/01/31/rakudo-star-2014-01-released/">Rakudo Star 2014.01 released</a> 
        </div>

         <div class="content">
            <h1>Announce: Rakudo Star Release 2014.01</h1>
<h2>A useful, usable, &#8220;early adopter&#8221; distribution of Perl 6</h2>
<p>On behalf of the Rakudo and Perl 6 development teams, I&#8217;m happy to<br/>
announce the January 2014 release of &#8220;Rakudo Star&#8221;, a useful and usable<br/>
distribution of Perl 6. The tarball for the January 2014 release is<br/>
available from <a href="http://rakudo.org/downloads/star/">http://rakudo.org/downloads/star/</a>. A Windows .MSI<br/>
version of Rakudo star is available in the downloads area as well.</p>
<p>In the Perl 6 world, we make a distinction between the language<br/>
(&#8220;Perl 6&#8243;) and specific implementations of the language such as<br/>
&#8220;Rakudo Perl&#8221;. This Star release includes <a>release 2014.01</a> of the<br/>
<a href="http://github.com/rakudo/rakudo">Rakudo Perl 6 compiler</a>, version 5.9.0 of the <a href="http://parrot.org">Parrot Virtual<br/>
Machine</a>, plus various modules, documentation, and other resources<br/>
collected from the Perl 6 community.</p>
<pre><code>https://github.com/rakudo/rakudo/blob/nom/docs/announce/2014.01.md
</code></pre>
<p>Some of the new features added to this release include:</p>
<ul>
<li>The eval sub and method are now spelled EVAL</li>
<li>Numeric.narrow to coerce to narrowest type possible</li>
<li>Can now supply blocks with multiple arguments as sequence endpoints</li>
<li>Method calls and hash/list access on Nil give Nil</li>
</ul>
<p>This release also contains a range of bug fixes, improvements to error<br/>
reporting and better failure modes.</p>
<p>Please note that this release of Rakudo Star does not support the JVM<br/>
nor the MoarVM backends from the Rakudo compiler. While the other backends<br/>
mostly implement the same features as the Parrot backend, many bits are<br/>
still missing, most prominently the native call interface.<br/>
We hope to provide a JVM-based and MoarVM-based Rakudo Star releases soon.</p>
<p>There are some key features of Perl 6 that Rakudo Star does not yet<br/>
handle appropriately, although they will appear in upcoming releases.<br/>
Some of the not-quite-there features include:</p>
<ul>
<li>advanced macros</li>
<li>threads and concurrency (in work for the JVM backend)</li>
<li>Unicode strings at levels other than codepoints</li>
<li>interactive readline that understands Unicode</li>
<li>non-blocking I/O</li>
<li>much of Synopsis 9 and 11</li>
</ul>
<p>There is an online resource at <a href="http://perl6.org/compilers/features">http://perl6.org/compilers/features</a><br/>
that lists the known implemented and missing features of Rakudo and<br/>
other Perl 6 implementations.</p>
<p>In many places we&#8217;ve tried to make Rakudo smart enough to inform the<br/>
programmer that a given feature isn&#8217;t implemented, but there are many<br/>
that we&#8217;ve missed. Bug reports about missing and broken features are<br/>
welcomed at <a href="mailto:rakudobug@perl.org">rakudobug@perl.org</a>.</p>
<p>See <a href="http://perl6.org/">http://perl6.org/</a> for links to much more information about<br/>
Perl 6, including documentation, example code, tutorials, reference<br/>
materials, specification documents, and other supporting resources. A<br/>
draft of a Perl 6 book is available as docs/UsingPerl6-draft.pdf in<br/>
the release tarball.</p>
<p>The development team thanks all of the contributors and sponsors for<br/>
making Rakudo Star possible. If you would like to contribute, see<br/>
<a href="http://rakudo.org/how-to-help">http://rakudo.org/how-to-help</a>, ask on the <a href="mailto:perl6-compiler@perl.org">perl6-compiler@perl.org</a><br/>
mailing list, or join us on IRC #perl6 on freenode.</p>
          </div>
                        
         <p align="right">
            <a href="http://rakudo.org/2014/01/31/rakudo-star-2014-01-released/">
            rakudo.org | rakudo.org | 
            2014-01-31 16:58:10</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://6guts.wordpress.com/?p=308">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://6guts.wordpress.com/" title="6guts">Jonathan Worthington </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/5999d5d26089eb4019867dc7705c41a9" width="" height="" alt="">

            <a href="http://6guts.wordpress.com/2014/01/24/january-rakudo-compiler-release-moarvm-support-and-much-more/">January Rakudo Compiler Release: MoarVM support and much more</a> 
        </div>

         <div class="content">
            <p>This month&#8217;s Rakudo compiler was cut today, and there&#8217;s a bunch of good stuff in there. In this post I&#8217;ll take a quick look at what&#8217;s been done.</p>
<h3>MoarVM Support</h3>
<p>This is the first Rakudo compiler release to have support for building and running on <a href="http://www.moarvm.org/">MoarVM</a>, a new VM being built especially for Perl 6 and NQP (the Perl 6 subset a sizable chunk of Rakudo is written in). MoarVM support is not quite up to the level of the JVM and Parrot backends yet. It passes less specification tests than either of them &#8211; though it&#8217;s getting awfully close (Rakudo on MoarVM passes over <strong>99%</strong> of the specification tests that Rakudo on the JVM &#8211; the current leader &#8211; does). Thus, you can actually run a heck of a lot of Perl 6 code just fine on it already. I used it recently in a pair programming session and we only hit one bug in the couple of hours we were using it.</p>
<p>The fast-path for signature binding that I mentioned in my <a href="http://6guts.wordpress.com/2014/01/08/a-rakudo-on-moarvm-update/">previous post</a> has also been put in place. It did, as hoped, lead to a fairly dramatic speedup. The workload of building Rakudo&#8217;s built-ins and running the specification test suite was also a good basis for doing some GC tuning, which led to further improvements. By this point, on my box, Rakudo on MoarVM now has:</p>
<ul>
<li>The lowest startup time of any Rakudo backend</li>
<li>The shortest spectest time of any Rakudo backend</li>
<li>For the CORE.setting build and spectests, the smallest memory footprint of any Rakudo backend</li>
</ul>
<p>Other Rakudo developers have reported similar findings. I need more time to look into the exact numbers, but it would appear that Rakudo on MoarVM is also the fastest to build. CORE.setting build time is roughly competitive with on the JVM now (but how roughly seems to vary quite widely &#8211; I think it depends on what JVM or even version is being used), but startup time for NQP on MoarVM is rather lower, meaning that those parts of the build go by faster.</p>
<p>The focus for the next month or two will be getting into a position where we can produce a Rakudo Star release that uses MoarVM. This means digging through the last 1% of failing spectests and dealing with them, finishing the work of getting Panda (our module installer) to work with Rakudo on MoarVM, and then hunting bugs that keep us from running the modules. Getting NativeCall working will also be a notable task, although given we already have a NativeCall in C working against 6model (the one we built for Parrot), there is a lot of prior art this time &#8211; unlike on the JVM.</p>
<p>On performance &#8211; we&#8217;re not even scratching the surface of what&#8217;s possible. MoarVM&#8217;s design means it has a lot of information to hand to do a good amount of runtime specialization and optimization, but none of this is implemented yet. I aim to have a first cut of it in place within the next few months. Once we have this analysis and specialization framework in place, we can start thinking about things such as JIT compilation.</p>
<h3>Rakudo on JVM Improvements</h3>
<p>Probably the&#160;<em>best</em> news in this release for anybody working with Rakudo on JVM is that the gather/take stack overflow bug is now fixed. It was a fun one involving continuations and a lack of tailcall semantics in an important place, but with doing the MoarVM implementation of continuations in my recent past, I was in a good place to hunt it down and get a fix in. A few other pesky issues are resolved, including a regex/closure interaction issue and sometimes sub-optimal line number reporting.</p>
<p>The other really big piece of JVM-specific progress this month has been arnsholt++ continuing to work on the plumbing to get us towards full NativeCall support for JVM. This month, a number of the big missing pieces landed. NativeCall working, and the modules that depend on it working, is the last big blocker for a Rakudo Star on JVM release, and it&#8217;s now looking quite possible that we&#8217;ll see that happen in the February one.</p>
<h3>General Rakudo Improvements</h3>
<p>While a lot of energy went on the things already mentioned, we did get some nice things in place that are independent of any of the particular backend: improvements to the Nil type, the sequence operator, sets and bags, adverb syntax parsing, regex syntax errors, aliased captures in regexes, and numerics. MoarVM&#8217;s rather stricter interpretation of closure semantics than we&#8217;ve had in place on other backends has also led to various code-gen fixes, which may lead to better performance in certain scenarios across the board too (one of those, &#8220;I know it probably should but I didn&#8217;t benchmark&#8221; situations).</p>
<p>I&#8217;d like to take a moment to thank everyone who contributed to this month&#8217;s release. This month had the highest Rakudo contributor count in a good while &#8211; and I&#8217;m hopeful we can maintain and exceed it in the months to come.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/6guts.wordpress.com/308/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/6guts.wordpress.com/308/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=6guts.wordpress.com&amp;blog=14597269&amp;post=308&amp;subd=6guts&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://6guts.wordpress.com/2014/01/24/january-rakudo-compiler-release-moarvm-support-and-much-more/">
            Jonathan Worthington | 6guts | 
            2014-01-24 01:55:47</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://www.nntp.perl.org/group/perl.perl6.announce/2014/01/msg707.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://www.nntp.perl.org/group/perl.perl6.announce/" title="perl.perl6.announce">Perl 6 Announce </a></div><br />
         

            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/01/msg707.html">Parrot 6.0.0 "Red-necked Amazon" Released! by Bruce Gray</a> 
        </div>

         <div class="content">
            <p>May your pleasures be many, your troubles be few.<br/>   -- Cast of "Hee Haw"<br/><br/>On behalf of the Parrot team, I'm proud to announce Parrot 6.0.0, also known<br/>as "Red-necked Amazon".  Parrot (http://parrot.org/) is a virtual machine aimed<br/>at running all dynamic languages.<br/><br/>Parrot 6.0.0 is available on Parrot's FTP site<br/>(ftp://ftp.parrot.org/pub/parrot/releases/supported/6.0.0/), or by following the<br/>download instructions at http://parrot.org/download.  For those who would like<br/>to develop on Parrot, or help develop Parrot itself, we recommend using Git to<br/>retrieve the source code to get the latest and best Parrot code.<br/><br/>Parrot 6.0.0 News:<br/>   - Core<br/>   - Build<br/>   - Documentation<br/>       + Fixed bad IPv6 examples in pdd22_io, thanks to Zefram++ [GH#1005]<br/>   - Tests<br/>       + Fixed failure in t/configure/062-sha1.t.<br/>       + Updated to Unicode 6.3 (libicu5.2): U+180e Mongolian Vowel Separator<br/>         is no whitespace anymore [GH #1015]<br/>   - Community<br/><br/><br/>The SHA256 message digests for the downloadable tarballs are:<br/>e150d4c5a3f12ae9d300f019bf03cca58d8e8051dd0b934222b4e4c91160cd54 parrot-6.0.0.tar.gz<br/>6cb9223ee389a36588acf76ad8ac85e2224544468617412b1d7902e5eb8bd39b parrot-6.0.0.tar.bz2<br/><br/>Many thanks to all our contributors for making this possible, and our sponsors<br/>for supporting this project.  Our next scheduled release is 18 Feb 2014.<br/><br/>Enjoy!<br/><br/></p>
          </div>
                        
         <p align="right">
            <a href="http://www.nntp.perl.org/group/perl.perl6.announce/2014/01/msg707.html">
            Perl 6 Announce | perl.perl6.announce | 
            2014-01-22 17:38:28</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://6guts.wordpress.com/?p=306">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://6guts.wordpress.com/" title="6guts">Jonathan Worthington </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/5999d5d26089eb4019867dc7705c41a9" width="" height="" alt="">

            <a href="http://6guts.wordpress.com/2014/01/08/a-rakudo-on-moarvm-update/">A Rakudo on MoarVM update</a> 
        </div>

         <div class="content">
            <p>Almost exactly a month ago, I reported that <a href="http://6guts.wordpress.com/2013/12/07/a-few-quick-updates/">Rakudo on MoarVM could do &#8220;Hello, world&#8221;</a>. Despite the general slow-down as folks took Christmas and New Year breaks (myself very much included), progress has been very good. Here are the key things to know:</p>
<ul>
<li>All of the Rakudo sanity tests pass on Rakudo on MoarVM</li>
<li>At present, Rakudo on MoarVM passes over&#160;<strong>92%</strong> of the specification tests that the current leader (Rakudo on the JVM) does</li>
<li>We&#8217;re on course to have the January compiler release be the first Rakudo release with some level of MoarVM support; I&#8217;m hopeful we&#8217;ll be passing over 95% of the specification tests Rakudo on the JVM does by that point</li>
</ul>
<p>The work has been taking place in the moar-support branch. We didn&#8217;t merge it yet, but that should happen within the next week or so.</p>
<p>MoarVM itself has been improving steadily, also. Here are a few of the features that have landed in the last weeks:</p>
<ul>
<li>Block exit handlers, used to implement LEAVE and friends</li>
<li>Continuations, used to make gather/take properly lazy</li>
<li>Updated the Unicode database to Unicode 6.3</li>
<li>Sized native arrays</li>
<li>State variables</li>
</ul>
<p>However, another extremely important bit of work has been taking place that is focused on stability. Nicholas Clark has been conducting garbage collection torture tests, by now down to forcing a GC run every single object allocation and using memory protection to catch illegal accesses to moved objects. Most of the things we call GC bugs are not actually inside the garbage collector implementation, but rather are other places in the codebase where mistakes have been made that break invariants that must be upheld for the GC to do its job correctly. I&#8217;ve not been counting, but I&#8217;d estimate that a bit over a dozen bugs have been turned up by this work so far &#8211; bugs that would have been a real pain to find if they had just happened to crop up some weeks, months or years down the line in some user&#8217;s code. At this point, NQP can be built and tested under the toughest torture test that exists so far without showing any issues. The Rakudo build is the current torture subject. I&#8217;m incredibly happy this work is taking place; it means that by the time Rakudo on MoarVM starts getting used more widely, we can be reasonably confident that users are unlikely to run into GC-related issues.</p>
<p>So, what&#8217;s the path from here? Here&#8217;s what I&#8217;m hoping for in the coming month:</p>
<ul>
<li>We reach the point of passing more than 99% of the spectests that Rakudo on the JVM does</li>
<li>Progress towards Panda being able to run and install some modules (not sure we&#8217;ll get all the way there, but I hope we&#8217;ll get reasonably close)</li>
<li>Dealing the with very-slow-path signature binding. If you try anything on Rakudo on MoarVM, you&#8217;ll discover it&#8217;s slow. This is thanks to a hot path being implemented in a slow way, in the name of getting stuff correct before optimizing. As soon as we&#8217;re beyond the 99% point with the spectests, I&#8217;ll dig into this. It should make a dramatic difference. I&#8217;m aiming to do some work in this area to make things better for Rakudo on JVM also.</li>
<li>Whatever fixes are needed to get the Rakudo build and sanity tests surviving the GC torture</li>
</ul>
<p>I&#8217;ll be back with some updates in a couple of weeks, to let you know how we&#8217;re getting on. :-)</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/6guts.wordpress.com/306/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/6guts.wordpress.com/306/"/></a> <img alt="" border="0" height="1" src="http://stats.wordpress.com/b.gif?host=6guts.wordpress.com&amp;blog=14597269&amp;post=306&amp;subd=6guts&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://6guts.wordpress.com/2014/01/08/a-rakudo-on-moarvm-update/">
            Jonathan Worthington | 6guts | 
            2014-01-08 22:50:56</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="tag:strangelyconsistent.org,2014-01-04:blog/lexpads-and-why-roles-need-fixups">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://strangelyconsistent.org/blog/" title="Strangely Consistent">Carl Masak </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/2d9d4815e8e5927a4e04cdea13ca1e36" width="" height="" alt="">

            <a href="http://strangelyconsistent.org/blog/lexpads-and-why-roles-need-fixups">Lexpads and why roles need fixups</a> 
        </div>

         <div class="content">
            <p><em>We need a solution that makes us need less vodka.</em> &#8212; jnthn</p>

<p>There are many extremely simple and elegant software solutions out there. But there are also those special moments, when you realize that something is more complex than you thought, and that the complexity <a href="https://en.wikipedia.org/wiki/Essential_complexity">is most likely essential</a>.</p>

<p>Character encodings are the prototypical example for me. Certainly datetime handling qualifies as well.</p>

<p>Reaching the realization that there is that extra essential complexity, comes (at least for me) with a <a href="https://twitter.com/carlmasak/status/313269099235004417">sinking feeling</a> as I get used to the idea of living with that complexity forever.</p>

<p>With me so far? Something seemed quite easy, wrapped up, ready to go home for the day, but then all this extra complexity rears its head. And it's never going away.</p>

<p>I started writing this blog post because I realized that a certain snag in role handling in Rakudo <a href="https://en.wikipedia.org/wiki/Web_resource">doesn't have a URL</a>, and it really should. So, without fanfare, here's the situation:</p>

<pre><code>my $x;

role R {
    method foo {
        say $x;
    }
}

class C does R {
}

$x = "OH HAI";
C.new.foo;
</code></pre>

<p>I think we all agree that this should print <code>OH HAI</code>. Good? Good. Nothing up my sleeve, no hidden mirrors or escape hatches &#8212; it <em>does</em> print <code>OH HAI</code>. Relax. Take a deep breath.</p>

<p>Ready? Because after you learn this, there's no going back. The world will forever be more complicated and, with some luck, you'll be having that sinking feeling.</p>

<p>Ok, so. Just a few simple facts:</p>

<ul>
<li><p><strong>Blocks have lexpads.</strong> Think of a lexpad as "all the variables declared in that block, along with the values they contain." I count four blocks in the code above. From smallest to biggest, they are: the method inside the role, the class block, the role block, and finally the entire code which gets a "mainline" block even though that block doesn't have any curly braces.</p></li>
<li><p><strong>Blocks are linked through <code>OUTER</code> links.</strong> A small block nested inside a larger block has the larger block as its <code>OUTER</code>. More precisely, it's the lexpads that are linked. I think the literature refers to these as "parent" blocks, but in Perl 6 we taboo that word and use <code>OUTER</code> for lexical lookup (and <code>CALLER</code> for dynamic lookup).</p></li>
<li><p><strong>There's often more than one lexpad per block.</strong> This one is hard to swallow. But think of a recursive factorial function: <code>sub fac($N) { $N ?? fac($N - 1) * $N !! 1 }</code>. As this function calls itself, it's going to need a fresh lexpad with each call. (Or it'll clobber the distinct <code>$N</code> values.) Let's call these lexpads <em>runtime lexpads</em>.</p></li>
<li><p><strong>A block always has a static lexpad, and then one or more runtime lexpads.</strong> Consider this code: <code>class C { method foo { my $x = 42; method bar { say $x } } }; C.bar;</code>. In Rakudo, it prints <code>(Any)</code>, not 42 as you might think. Why not 42? Because <code>C.foo</code> has never run. In fact, the <code>(Any)</code> value of <code>$x</code> is coming from <code>C.foo</code>'s static lexpad, because that's the only lexpad <code>C.foo</code> has. (Interesting historical note: it took us a while to get this right in Rakudo. Used to be you could make variable lookups that <em>didn't</em> reach the static lexpad, but instead caused a Null PMC Access or similar. Ah, the pain.)</p></li>
<li><p><strong>Roles are created at compile time.</strong> This one shouldn't come at a surprise. But we need it for the pressing agony up ahead.</p></li>
<li><p><strong>Classes are composed at compile time.</strong> Yep, same. Unless, you know, you're doing high-level MOP-ery. Which we're not in this code.</p></li>
</ul>

<p>Let's recap what we know by applying it to the code. There's the variable <code>$x</code>. We know we will find it in the static lexpad of the mainline, because it's declared on the top level and everything has a static lexpad. Does it also have a runtime lexpad? Yes, it does, because the mainline starts running after compilation is over. Will we find <code>$x</code> in <em>several</em> runtime lexpads? No, only the one.</p>

<p>Now, we ask ourselves the question: <em>which lexpad is <code>C.foo</code> referring to?</em></p>

<p>"Of course, it's the runtime lexpad", we reply, innocent to the fact that the trap has already shut around us and there's no way out. See, it <em>has</em> to be the runtime lexpad, because the sane thing for the program to do is to print <code>OH HAI</code>, and that value is <em>certainly</em> stored in the runtime lexpad.</p>

<p>But no. It's not possible. It can't. There's no way. Because <em>roles are created at compile time</em>, before there is a runtime lexpad! The role method has no choice: it's bound to the static lexpad, because at that point, that's all there is.</p>

<p>And there we are. The trap has now closed. There's no way to both (a) do what the user expects, and (b) keep the internal model nice and free of weird exceptions.</p>

<p>Since we like (a), we ditch (b) and create an exception in Rakudo. It's called a <strong>fixup</strong>, it's installed during role creation, and it makes sure that whenever the block surrounding the role is entered, the role rebinds its <code>OUTER</code> to that block's fresh lexpad.</p>

<p>Simple it ain't. Nor is it pretty. But it makes the user happy.</p>

<p>The reason I started thinking about this is that we run into the same kind of problem <a href="https://rt.perl.org/Ticket/Display.html?id=120928">with macros</a>, and the same kind of fixup will probably be needed there.</p>

<p>More to the point, at the point where this need-for-a-fixup starts showing up in different parts of the architecture, it's time to give it a name and perhaps think of a uniform way to address this. That's where jnthn's quote from the start of the post originates &#8212; we need a solution that isn't worse than the problem, and that we can reason about without having to scale the Ballmer peak.</p>
          </div>
                        
         <p align="right">
            <a href="http://strangelyconsistent.org/blog/lexpads-and-why-roles-need-fixups">
            Carl Masak | Strangely Consistent | 
            2014-01-04 16:35:06</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://pugs.blogs.com/pugs/2013/12/advent-ventures.html">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://pugs.blogs.com/pugs/" title="Pugs">Audrey Tang </a></div><br />
                     <img class="face" src="http://www.gravatar.com/avatar/f63068d724b6084f4807a86426b3b9eb" width="" height="" alt="">

            <a href="http://pugs.blogs.com/pugs/2013/12/advent-ventures.html">Perl 6：冒險的降臨</a> 
        </div>

         <div class="content">
            <article lang="zh-Hant">
<p><i>(&#36889;&#26159; <a href="http://perl6advent.wordpress.com/2013/12/24/advent-ventures/" target="_blank" title="">Day 24 &#8211; Advent Ventures</a>&#160;&#30340;&#20013;&#35695;&#65292;&#20316;&#32773;&#26159; <u class="pn">Larry Wall</u>&#12290;)</i></p>
<hr/>
<p>&#20154;&#39006;&#27511;&#38570;&#30334;&#33836;&#24180;&#21040;&#20102;&#20170;&#22805;&#65292;<br/>&#24179;&#23433;&#22812;&#35041;&#19988;&#35731;&#26178;&#38291;&#26283;&#20572;&#65292;<br/>&#25105;&#20497;&#20805;&#28415;&#30097;&#21839;&#30340;&#20882;&#38570;<br/>&#20877;&#27425;&#31561;&#24453;&#31572;&#26696;&#30340;&#38477;&#33256;&#12290;</p>
<blockquote>
<p>&#25105;&#20497;&#21040;&#20102;&#21966;&#65311;</p>
</blockquote>
<p>&#31896;&#33740;&#22894;&#39717;&#21313;&#20740;&#24180;&#21040;&#20102;&#30717;&#26230;&#65292;<br/>&#24184;&#22909;&#65288;&#22823;&#33268;&#19978;&#65289;&#24050;&#24536;&#21371;&#19981;&#24184;&#30340;&#24448;&#26132;<br/>&#20197;&#21450;&#28961;&#24773;&#22825;&#25799;&#30041;&#19979;&#30340;&#34880;&#30165;&#65292;<br/>&#25105;&#20497;&#20877;&#27425;&#37528;&#35352;&#26410;&#20358;&#30340;&#22238;&#25014;&#12290;</p>
<blockquote>
<p>&#25105;&#20497;&#21040;&#20102;&#21966;&#65311;</p>
</blockquote>
</article>

<article lang="zh-Hant">
<p>
&#36889;&#20491;&#26376;&#26159; <u class="pn">Perl</u> &#38477;&#33256;&#20197;&#20358;&#30340;&#31532; 26 &#24180;&#65292;<br/>&#65288;&#21253;&#25324; 13 &#27506;&#30340;&#22825;&#25165;&#23567;&#22969;&#65289;<br/>&#25105;&#20497;&#30340;&#23567;&#23478;&#24237;&#19968;&#27425;&#29992; 24 &#20491;&#25925;&#20107;&#65292;<br/>&#24950;&#31069;&#22238;&#23478;&#36335;&#19978;&#30340;&#31278;&#31278;&#21213;&#21033;&#12290;</p>
<blockquote>
<p>&#25105;&#20497;&#21040;&#20102;&#21966;&#65311;&#29241;&#22320;&#65292;&#25105;&#20497;&#21040;&#37027;&#20818;&#20102;&#21966;&#65311;</p>
</blockquote>
<p>&#25105;&#20497;&#36319;&#38568;&#20808;&#32854;&#65292;&#38614;&#28982;&#24472;&#24458;&#20294;&#24478;&#26410;&#36855;&#22833;&#65306;<br/>&#25105;&#20497;&#36319;&#38568;<u class="pn">&#20126;&#20271;&#25289;&#32597;</u>&#65292;&#23563;&#25214;&#23578;&#26410;&#20986;&#29694;&#30340;&#22478;&#24066;&#65307;<br/>&#25105;&#20497;&#36319;&#38568;<u class="pn">&#31070;&#34892;&#23458;</u>&#65292;&#23432;&#35703;&#23559;&#37325;&#26032;&#20998;&#37197;&#26410;&#20358;&#30340;<u class="pn">&#21704;&#27604;&#20154;</u>&#65307;<br/>&#25105;&#20497;&#36319;&#38568;&#27861;&#24107;&#21644;&#24043;&#22763;&#12289;&#23416;&#32773;&#21644;&#25506;&#38570;&#23478;&#12289;&#32854;&#20154;&#21644;&#31185;&#23416;&#23478;&#12290;</p>
<blockquote>
<p>&#25105;&#22312;&#26143;&#31354;&#19979;&#28459;&#27493;&#23563;&#24605;&#8230;&#8230;&#25105;&#26159;&#21542;&#24050;&#32147;&#36855;&#22833;&#8230;&#8230;</p>
</blockquote>
<p>&#28961;&#35542;&#26234;&#32773;&#25110;<u class="pn">&#21704;&#27604;&#20154;</u>&#65292;&#25105;&#20497;&#32317;&#22312;&#40657;&#26263;&#35041;&#21855;&#31243;&#65292;<br/>&#25720;&#32034;&#21069;&#34892;&#65292;&#36814;&#21521;&#26032;&#39854;&#31354;&#27683;&#12289;&#19968;&#32114;&#24076;&#26395;&#65292;<br/>&#32147;&#36942;&#24618;&#29560;&#21644;&#28145;&#28149;&#65292;&#36861;&#23563;&#23553;&#21360;&#30340;&#26143;&#20809;&#65292;<br/>&#25214;&#21040;&#37027;&#29255;&#27138;&#22303;&#65292;&#35731;&#30130;&#24970;&#32773;&#24471;&#20197;&#20241;&#24687;&#65292;&#35731;&#24754;&#20663;&#32773;&#24471;&#20197;&#30274;&#39178;&#12290;</p>
<blockquote>
<p><q>&#31561;&#31561;&#65292;&#20320;&#20497;&#20160;&#40636;&#24847;&#24605;&#65292;&#25105;&#19981;&#33021;&#21435;&#65311;</q>&#8212;&#8212;<u class="pn">&#29976;&#36947;&#22827;</u></p>
</blockquote>
<p>&#25105;&#20497;&#25152;&#26377;&#20154;&#37117;&#24517;&#38920;&#22312;&#27801;&#28448;&#35041;&#24472;&#24458;&#22235;&#21313;&#24180;&#65292;<br/>&#22475;&#33900;&#37240;&#27665;&#21644;&#40572;&#27665;&#30340;&#23629;&#39592;&#65292;<br/>&#35731;&#20182;&#20497;&#30340;&#23401;&#23376;&#26377;&#19968;&#22825;&#33021;&#36328;&#36942;<u class="pn">&#32004;&#26086;&#27827;</u><br/>&#36914;&#20837;&#28415;&#26159;&#29275;&#22902;&#12289;&#34562;&#34588;&#21644;&#28418;&#20142;&#25163;&#27231;&#30340;&#26032;&#22825;&#22320;&#65281;</p>
<blockquote>
<p><q>&#31561;&#31561;&#65292;&#20320;&#20497;&#20160;&#40636;&#24847;&#24605;&#65292;&#25105;&#19981;&#33021;&#21435;&#65311;</q>&#8212;&#8212;<u class="pn">&#25705;&#35199;</u></p>
</blockquote>
<p>&#25105;&#20497;&#25226;&#21476;&#32769;&#20659;&#35498;&#24118;&#36914;&#26410;&#20358;&#65292;<br/>&#22312;&#38620;&#27795;&#30340;&#36335;&#36884;&#19978;&#21535;&#35494;&#65292;<br/>&#32972;&#21253;&#35041;&#35037;&#28415;&#21490;&#35433;&#65292;&#21475;&#34955;&#35041;&#22622;&#28415;&#25925;&#20107;&#65292;<br/>&#25226;&#33258;&#24049;&#30340;&#36604;&#20107;&#20659;&#32862;&#30041;&#22312;&#36523;&#24460;&#12290;</p>
<blockquote>
<p>&#26377;&#20123;&#22909;&#25925;&#20107;&#20320;&#36996;&#27794;&#32893;&#36942;&#21602;&#12290;</p>
</blockquote>
<p>&#25152;&#20197;&#23401;&#23376;&#20497;&#65292;&#38500;&#20102;&#21476;&#32769;&#30340;&#20659;&#35498;&#65292;&#20063;&#35201;&#25910;&#25342;&#26032;&#30340;&#24037;&#20855;&#65292;<br/>&#36629;&#24039;&#32780;&#24375;&#22823;&#30340;&#24037;&#20855;&#33021;&#24171;&#21161;&#20320;&#20497;&#65292;&#20063;&#33021;&#24171;&#21161;&#20320;&#20497;&#20358;&#24171;&#21161;&#25105;&#20497;&#12290;<br/>&#26368;&#36629;&#24039;&#30340;&#24037;&#20855;&#12289;&#26368;&#24375;&#22823;&#30340;&#24037;&#20855;&#65292;&#23601;&#26159;&#24605;&#24819;&#65292;<br/>&#19968;&#23450;&#35201;&#22810;&#25910;&#25342;&#19968;&#20123;&#12290;&#25105;&#26371;&#22312;&#36889;&#35041;&#31561;&#12290;</p>
<blockquote>
<p>&#25105;&#22312;&#36889;&#20818;&#12290;&#23601;&#26159;&#35498;&#25105;&#36996;&#27794;&#21040;&#37027;&#20818;&#12290;&#24555;&#65281;</p>
</blockquote>
<p>&#25361;&#36984;&#19968;&#20123;&#22909;&#26379;&#21451;&#65292;&#20063;&#35731;&#19968;&#20123;&#22909;&#26379;&#21451;&#25361;&#36984;&#20320;&#12290;<br/>&#36650;&#27969;&#32784;&#24515;&#31561;&#24453;&#12289;&#24613;&#36895;&#22868;&#36208;&#65292;<br/>&#25079;&#33879;&#24076;&#26395;&#21069;&#36914;&#12289;&#25110;&#32085;&#26395;&#22320;&#29228;&#34892;&#65292;<br/>&#20877;&#27425;&#19981;&#23624;&#19981;&#25747;&#22320;&#31449;&#36215;&#20358;&#12290;&#25110;&#31232;&#35041;&#31946;&#22615;&#22320;&#65292;&#36889;&#20063;&#34892;&#12290;</p>
<blockquote>
<p>&#26377;&#26178;&#20320;&#26159;&#25925;&#20107;&#30340;&#20027;&#35282;&#65292;&#20294;&#20006;&#38750;&#38568;&#26178;&#37117;&#26159;&#12290;</p>
</blockquote>
<p>&#30456;&#20449;&#20320;&#30340;&#26053;&#31243;&#65292;&#28858;&#20320;&#24118;&#20358;&#26032;&#30340;&#21516;&#20276;&#65307;<br/>&#30456;&#20449;&#26032;&#30340;&#21516;&#20276;&#65292;&#28858;&#20320;&#24118;&#20358;&#26053;&#31243;&#30340;&#25152;&#38656;&#65307;<br/>&#28310;&#20633;&#22909;&#38754;&#23565;&#27704;&#36960;&#30340;&#36994;&#36869;&#65292;&#33287;&#26283;&#26178;&#30340;&#21578;&#21029;&#12290;<br/>&#65288;&#27794;&#20154;&#33021;&#28858;&#26283;&#26178;&#30340;&#36994;&#36869;&#12289;&#27704;&#36960;&#30340;&#21578;&#21029;&#20570;&#22909;&#28310;&#20633;&#12290;&#65289;</p>
<blockquote>
<p>&#25105;&#36996;&#19981;&#30906;&#23450;&#25105;&#26159;&#21542;&#24819;&#25269;&#36948;&#37027;&#35041;&#12290;</p>
</blockquote>
<p>&#24863;&#35613;&#26053;&#36884;&#36060;&#32102;&#20320;&#20170;&#26085;&#30340;&#22821;&#20276;&#65292;&#20154;&#29983;&#26412;&#23601;&#26159;&#33510;&#27138;&#21443;&#21322;&#12290;<br/>&#27427;&#36062;&#24754;&#27427;&#20132;&#38598;&#30340;&#27468;&#26354;&#12289;&#37240;&#29980;&#20132;&#32340;&#30340;&#21860;&#37202;&#12290;<br/>&#20139;&#21463;&#25136;&#39717;&#30340;&#30171;&#26970;&#12289;&#25793;&#25265;&#30340;&#29976;&#32654;&#12290;<br/>&#23565;&#20102;&#65292;&#36996;&#26377;&#65292;&#20139;&#21463;&#22240;&#27492;&#24471;&#21040;&#30340;&#30208;&#20663;&#65292;&#20294;&#21029;&#20663;&#24471;&#22826;&#37325;&#12290;</p>
<blockquote>
<p>&#28858;&#20320;&#36996;&#27794;&#26377;&#25269;&#36948;&#37027;&#35041;&#32780;&#24950;&#24184;&#12290;</p>
</blockquote>
<p>&#27489;&#36814;&#25105;&#30340;&#26379;&#21451;&#20497;&#20358;&#36889;&#35041;&#65292;&#25105;&#20497;&#36996;&#27794;&#26377;&#21040;&#37027;&#35041;&#12290;<br/>&#27489;&#36814;&#20358;&#21040;&#36889;&#20491;&#23478;&#26063;&#65292;&#37327;&#23376;&#30090;&#21152;&#20986;&#28961;&#25976;&#27489;&#27138;&#12289;&#24754;&#20663;&#21644;&#24999;&#25004;&#12290;<br/>&#27489;&#36814;&#21644;&#25105;&#20497;&#19968;&#36215;&#19981;&#26039;&#21162;&#21147;&#65292;&#30428;&#21462;&#26356;&#22810;<u class="pn">&#26222;&#32645;&#31859;&#20462;&#26031;</u>&#20043;&#28779;&#12290;<br/>&#36889;&#28779;&#29138;&#24471;&#30495;&#24555;&#65292;&#21371;&#27704;&#36960;&#22635;&#19981;&#28415;&#29983;&#21629;&#30340;&#31709;&#28779;&#22353;&#12290;</p>
<blockquote>
<p>&#25105;&#20497;&#26356;&#26262;&#21644;&#20102;&#21966;&#65311;</p>
</blockquote>
<p>&#20182;&#20497;&#35498;&#65306;<q title="&#25480;&#20154;&#20197;&#39770;&#65292;&#19968;&#26085;&#20043;&#39184;&#65307;&#25480;&#20154;&#20197;&#28417;&#65292;&#32066;&#29983;&#20043;&#29992;&#12290;&#10;&#33268;&#20154;&#20197;&#28779;&#65292;&#19968;&#26085;&#20043;&#26262;&#65307;&#33268;&#20154;&#20197;&#28954;&#65292;&#32066;&#29983;&#20043;&#29992;&#12290;">&#32102;&#20154;&#19968;&#25226;&#28779;&#8230;&#8230;</q>&#20808;&#31561;&#19968;&#19979;&#65292;&#26377;&#20491;&#21363;&#26178;&#26032;&#32862;&#8230;&#8230;<br/>&#36889;&#30495;&#26159;&#32993;&#25199;&#65306;&#22825;&#28779;&#29694;&#22312;&#33258;&#30001;&#38283;&#28304;&#20102;&#8264; &#22909;&#21543;&#65292;&#21571;&#8230;&#8230;<br/>&#37096;&#33853;&#23458;&#32893;&#21040;&#38642;&#31471;&#22825;&#20351;&#24392;&#20986;&#35222;&#31383;&#12289;&#25918;&#32882;&#27489;&#21809;&#65311;<br/>&#21999;&#8230;&#8230;&#26368;&#22909;&#30475;&#30475;&#26032;&#32862;&#23567;&#24171;&#25163;&#8230;&#8230;&#31245;&#31561;&#19968;&#19979;&#8230;&#8230;&#31561;&#31561;&#31561;&#31561;&#8230;&#8230;</p>
<blockquote>
<p>&#36899;&#32218;&#21697;&#36074;&#30495;&#26159;&#28151;&#24115;&#8230;&#8230;&#24555;&#25910;&#21040;&#20102;&#8230;&#8230;</p>
</blockquote>
<p>&#22079;&#65292;&#20320;&#30693;&#36947;&#21966;&#8264; &#29289;&#29702;&#23416;&#23478;&#29730;&#30952;&#20986;&#20358;&#20102;&#12290;<br/>&#25972;&#20491;&#23431;&#23449;&#21083;&#21083;&#38918;&#21033;&#32232;&#35695;&#23436;&#25104;&#8230;&#8230;<br/>&#29694;&#22312;&#65292;&#20182;&#20497;&#27491;&#22312;&#25214;&#20154;&#23565;&#36889;&#29609;&#24847;&#20818;&#36914;&#34892;&#20597;&#37679;&#65307;<br/>&#22079;&#65292;&#25105;&#30693;&#36947;&#65292;&#25105;&#21482;&#35201;&#29992; <u class="pn">Perl 6</u> &#28204;&#35430;&#22871;&#20214;&#23601;&#34892;&#20102;&#12290;</p>
<blockquote>
<p>&#12304;&#8230;&#8230;&#29694;&#22312;&#20320;&#26377;&#25104;&#21315;&#19978;&#33836;&#30340;&#21839;&#38988;&#8230;&#8230;&#12305;</p>
</blockquote>
<p>&#20320;&#35498;&#20160;&#40636;&#65311;</p>
<blockquote>
<p>&#65288;&#22823;&#32882;&#65289;&#20581;&#20840;&#28204;&#35430; #1 &#21512;&#26684;&#20102;&#21966;&#65311;&#32080;&#26524;&#22914;&#20309;&#65311;</p>
</blockquote>
<p>&#21069;&#36335;&#28459;&#28459;&#32780;&#20462;&#36960;&#65292;<br/>&#31359;&#36234;&#27827;&#27969;&#33287;&#26862;&#26519;&#65292;<br/>&#20320;&#36208;&#38525;&#38364;&#36947;&#65292;&#25105;&#36208;&#29544;&#26408;&#27211;&#65292;<br/>&#25105;&#20497;&#37117;&#22312;&#36890;&#24448;&#25033;&#35377;&#27138;&#22303;&#30340;&#36335;&#19978;&#12290;</p>
<blockquote>
<p>&#12304;<u class="pn">TimToady</u> &#24471;&#21040;&#36060;&#31119;&#65292;&#38283;&#22987;&#25351;&#25582; <u class="pn">Perl</u> &#26397;&#32854;&#32773;&#30340;&#21512;&#21809;&#12290;&#12305;</p>
</blockquote>
<p>&#25105;&#20497;&#21521;<u class="pn">&#37675;&#23433;&#23665;</u>&#36914;&#30332;&#65292;<br/>&#32654;&#40599;&#21205;&#20154;&#30340;<u class="pn">&#37675;&#23433;&#23665;</u>&#65292;<br/>&#25105;&#20497;&#35201;&#30331;&#19978;<u class="pn">&#37675;&#23433;&#23665;</u>&#65292;&#32654;&#21834;&#8212;&#8212;</p>
<blockquote>
<p>&#20320;&#19981;&#33021;&#21435;&#37027;&#35041;&#12290;</p>
</blockquote>
<p>&#31561;&#31561;&#65292;&#20320;&#20497;&#20160;&#40636;&#24847;&#24605;&#65292;&#25105;&#19981;&#33021;&#21435;&#65311;</p>
<blockquote>
<p>&#37679;&#35492;&#20462;&#27491; #1&#65306;&#27578;&#25481;&#25152;&#26377;&#30340;&#36457;&#33139;&#35433;&#20154;&#12290;</p>
</blockquote>
<p>&#22114;&#8230;&#8230;&#32993;&#25199;&#8230;&#8230;</p>
</article>
          </div>
                        
         <p align="right">
            <a href="http://pugs.blogs.com/pugs/2013/12/advent-ventures.html">
            Audrey Tang | Pugs | 
            2013-12-28 15:23:24</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://rakudo.org/?p=293">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://rakudo.org/" title="rakudo.org">rakudo.org </a></div><br />
                     <img class="face" src="http://rakudoperl.org/wp/wp-content/uploads/2011/04/rakudo-1001.png" width="" height="" alt="">

            <a href="http://rakudo.org/2013/12/25/rakudo-star-2013-12-released/">Rakudo Star 2013.12 released</a> 
        </div>

         <div class="content">
            <p>On behalf of the Rakudo and Perl 6 development teams, I&#8217;m happy to announce the December 2013 release of &#8220;Rakudo Star&#8221;, a useful and usable distribution of Perl 6. The tarball for the December 2013 release is available from <a href="http://rakudo.org/downloads/star/">http://rakudo.org/downloads/star/</a>. A Windows .MSI version of Rakudo star will usually appear in the downloads area shortly after the tarball release.</p>
<p>In the Perl 6 world, we make a distinction between the language (&#8220;Perl 6&#8243;) and specific implementations of the language such as &#8220;Rakudo Perl&#8221;. This Star release includes <a href="https://github.com/rakudo/rakudo/blob/nom/docs/announce/2013.12.md">release 2013.12</a> of <a href="http://github.com/rakudo/rakudo">the Rakudo Perl 6 compiler</a>, version 5.9.0 of the <a href="http://parrot.org">Parrot Virtual Machine</a>, plus various modules, documentation, and other resources collected from the Perl 6 community.</p>
<p>Some of the new features added to this release include:</p>
<ul>
<li>The Whatever Star (<code>*</code>) now works inside chain operators like comparisons.</li>
<li>Private attributes from roles are now visible in the classes they apply to.</li>
<li>Memory and speed improvements for <code>ListIter</code> and <code>List.combinations</code>, respectively.</li>
<li>Improvements to the execution of regexes.</li>
</ul>
<p>This release also contains a range of bug fixes, improvements to error<br/>
reporting and better failure modes.</p>
<p>Please note that this release of Rakudo Star does not support the JVM<br/>
backend from the Rakudo compiler. While the JVM backend mostly implements<br/>
the same features as the Parrot backend, many bits are still missing,<br/>
most prominently the native call interface.<br/>
We hope to provide a JVM-based Rakudo Star release soon.</p>
<p>The following notable features have been deprecated or modified from previous<br/>
releases due to changes in the Perl 6 specification, and are planned to be<br/>
removed or changed as follows:</p>
<ul>
<li>All unary hyper ops currently descend into nested arrays and hashes. In the future, those operators and methods that are defined &#8220;nodal&#8221; will behave like a one-level map.</li>
</ul>
<p>There are some key features of Perl 6 that Rakudo Star does not yet<br/>
handle appropriately, although they will appear in upcoming releases.<br/>
Some of the not-quite-there features include:</p>
<ul>
<li>advanced macros</li>
<li>threads and concurrency (in work for the JVM backend)</li>
<li>Unicode strings at levels other than codepoints</li>
<li>interactive readline that understands Unicode</li>
<li>non-blocking I/O</li>
<li>much of Synopsis 9 and 11</li>
</ul>
<p>There is an online resource at <a href="http://perl6.org/compilers/features">http://perl6.org/compilers/features</a> that lists the known implemented and missing features of Rakudo and<br/>
other Perl 6 implementations.</p>
<p>In many places we&#8217;ve tried to make Rakudo smart enough to inform the programmer that a given feature isn&#8217;t implemented, but there are many that we&#8217;ve missed. Bug reports about missing and broken features are welcomed at <a href="mailto:rakudobug@perl.org">rakudobug@perl.org</a>.</p>
<p>See <a href="http://perl6.org/">http://perl6.org/</a> for links to much more information about Perl 6, including documentation, example code, tutorials, reference materials, specification documents, and other supporting resources. A draft of a Perl 6 book is available as <code>docs/UsingPerl6-draft.pdf</code> in the release tarball.</p>
<p>The development team thanks all of the contributors and sponsors for making Rakudo Star possible. If you would like to contribute, see <a href="http://rakudo.org/how-to-help">http://rakudo.org/how-to-help</a>, ask on the <a href="mailto:perl6-compiler@perl.org">perl6-compiler@perl.org</a> mailing list, or join us on IRC <code>#perl6</code> on freenode.</p>
          </div>
                        
         <p align="right">
            <a href="http://rakudo.org/2013/12/25/rakudo-star-2013-12-released/">
            rakudo.org | rakudo.org | 
            2013-12-25 18:49:45</a></a>
         </p>
      </div>
   </div>
   <div class = "entry">
      <div class="entrybody" id="http://perl6advent.wordpress.com/?p=2218">

         <div class="entrytitle" >
            <div class="entrytitleauthor"><a href="http://perl6advent.wordpress.com/" title="Perl 6 Advent Calendar">Perl 6 Advent Calendar </a></div><br />
         

            <a href="http://perl6advent.wordpress.com/2013/12/24/advent-ventures/">Day 24 – Advent Ventures</a> 
        </div>

         <div class="content">
            <pre>
Here at the end of megayears of human adventure,
we schedule a silent night to stop time,
once again awaiting the next advent
of the answer to our questionable venture.

    Are we there yet?

After a gigayear or so of slogging from slime to silicon
mercifully forgetting (most of) the unmerciful past,
and the scars left by unnatural nature upon our pedigree,
we now remember to remember the future once more.

    Are we there yet?

So in this month, 26 year-moments after the advent of Perl,
(including 13 year-eternities of precocious brat sisterhood)
our little family celebrates, 24 tales at a time,
its victories in the struggle to find our way home.

    Are we there yet, Daddy, are we there yet?

We follow after all those who wander but are not lost:
We follow Abraham, looking for a city because it isn't there yet;
We follow Strider, guarding the hobbits who will redistribute the future;
We follow Magi and wizard, scholar and explorer, saint and scientist.

    I wonder as I wander out under the sky...whether I'm lost yet...

But wise man or hobbit, we must all take that journey in the dark,
groping ahead for the path to better air and a little hope,
following the encapsulated starlight past monsters and chasms
out to a land where the weary can rest, and be healed of grief.

    "Wait, what do you mean, I can't go there?" &#8212;Gandalf

We must all wander in this desert for forty years,
burying the bones of naysayers and yaysayers alike,
so that their children can someday cross the Jordan
into a land flowing with milk and honey and fancy new phones!

    "Wait, what do you mean, I can't go there?" &#8212;Moses

We carry these old stories to the future,
cadences to chant over the confusion of the road,
backpacks full of epics, pockets stuffed with tales,
leaving our own litter of anecdotal evidence behind us.

    You haven't heard some of the good ones yet.

So kids, along with the old stories, pack a few new tools,
light but powerful tools that will help you and help you help us.
The lightest tools, the most powerful tools, are ideas,
so pack lots and lots of 'em. I'll wait here while you do.

    I'm here yet. Which means I'm not there yet. Hurry up!

Pick some good friends, and let some good friends pick you.
Take turns waiting patiently, running impatiently,
or walking hopefully, crawling hopelessly,
standing up yet again defiantly. Or woozily, that works too.

    Be the protagonist some of the time, yet not all of the time.

Trust your journey to provide you with new companions;
trust your new companions to provide you with your journey.
Be prepared to say your eternal hellos and temporary goodbyes.
(No one's ever ready for the temporary hellos and eternal goodbyes.)

    And I'm not sure I want to be there quite yet.

Enjoy the companions your journey gives today, for life is bittersweet.
Enjoy the bittersweet songs and the bittersweet beer.
Enjoy the bitter fights and sweet hugs.
And, yes, enjoy the resulting bruises, but not too much.

    Enjoy knowing that you're not there yet.

Welcome, my friends, to the here, and to the not-there-yet.
Welcome to the clan's quantum superposition of joy and grief and longing.
Welcome to our ongoing effort to steal more of that Promethean fire
that burns too fast yet never fast enough to fit the firepits of our lives.

    Are we getting warmer yet?

As they say, "Give a man a fire..." Hold that thought, some breaking news...
This just in: Fire from heaven is now free and open-sourced?! Well, huh...
Seems a blogger heard some angels singing popup advent adverts in the cloud?
Hmm...better do some fact checking...hang in there...tum tiddly tum...

    Darn flakey connection...almost there...

Well, hey, whaddya know?! The physicists figured it out.
The whole universe has just finished compiling without error...
Now they're looking for someone to debug the silly thing;
Hey, I know, I'll just use the Perl 6 test suite.

    [...now you have thousands of problems...]

Did you say something?

    (louder) Does sanity test #1 pass yet? What's the output?

The road goes ever on and on,
Over the river and through the woods,
You take the high road, and I'll take the low road,
We're all bound for the Promised Land.

[TimToady gets blessed and starts directing the choir of Perl Pilgrims.]
We're marching to Zion,
Beautiful, beautiful Zion,
We're marching upward to Zion, that beautif&#8212;

    You can't go there.

Wait, what do you mean, I can't go there?

    Bugfix #1: kill all the bad poets.

Aw...crap...</pre><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/perl6advent.wordpress.com/2218/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/perl6advent.wordpress.com/2218/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=perl6advent.wordpress.com&amp;blog=10740073&amp;post=2218&amp;subd=perl6advent&amp;ref=&amp;feed=1" width="1"/>
          </div>
                        
         <p align="right">
            <a href="http://perl6advent.wordpress.com/2013/12/24/advent-ventures/">
            Perl 6 Advent Calendar | Perl 6 Advent Calendar | 
            2013-12-24 00:00:13</a></a>
         </p>
      </div>
   </div>


</div>	<!-- end left -->

<div id="right">
   <div class="entry">
      <div class="entrytitle">Subscriptions</div>
      <ul>
            <li><a href="http://ttjjss.wordpress.com/category/perl/feed/" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://ttjjss.wordpress.com">Tadeusz Sosnierz (tadzik)</a></li>
            <li><a href="http://blogs.perl.org/users/pawel_bbkr_pabian/atom.xml" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://blogs.perl.org/users/pawel_bbkr_pabian/">Pawel bbkr Pabian</a></li>
            <li><a href="http://filip.sergot.pl/en/blog/perl6/index.atom" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://filip.sergot.pl">Filip Sergot</a></li>
            <li><a href="http://brrt-to-the-future.blogspot.com/feeds/posts/default" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://brrt-to-the-future.blogspot.com/">Bart Wiegmans</a></li>
            <li><a href="http://blog.brentlaabs.com/feeds/posts/default/-/perl6" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://blog.brentlaabs.com/search/label/perl6">Brent Laabs</a></li>
            <li><a href="http://pmthium.com/category/perl6/feed/" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://pmthium.com">Patrick R. Michaud</a></li>
            <li><a href="http://perlgeek.de/blog-en/perl-6/index.rss" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://perlgeek.de/blog-en/">Moritz Lenz</a></li>
            <li><a href="http://rakudo.org/feed/" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://rakudo.org">rakudo.org</a></li>
            <li><a href="http://pugs.blogs.com/pugs/index.rdf" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://pugs.blogs.com/pugs/">Audrey Tang</a></li>
            <li><a href="https://p6weekly.wordpress.com/feed/" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://p6weekly.wordpress.com">Weekly changes in and around Perl 6</a></li>
            <li><a href="http://perl6advent.wordpress.com/feed/" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://perl6advent.wordpress.com">Perl 6 Advent Calendar</a></li>
            <li><a href="http://6guts.wordpress.com/feed/" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://6guts.wordpress.com">Jonathan Worthington</a></li>
            <li><a href="http://perl6maven.com/atom" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://perl6maven.com/atom">Perl 6 Maven</a></li>
            <li><a href="http://www.nntp.perl.org/rss/perl.perl6.announce.rdf" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://www.nntp.perl.org/group/perl.perl6.announce/">Perl 6 Announce</a></li>
            <li><a href="http://strangelyconsistent.org/blog/feed.atom" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"></a> <a href="http://strangelyconsistent.org/blog">Carl Masak</a></li>

            <li> <a href="http://planeteria.org/perl6/atom.xml" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"> All feeds in one</a></li>
            <li> <a href="http://planeteria.org/perl6/opml.xml" title="subscribe"><img src="/pub.d/img/feed-icon-10x10.png" alt="(feed)"> All feeds as OPML</a></li>
      </ul>
   </div>

   <div class = "entry">
   <div class="entrytitle">Contact</div>
<p>Want to see your blog on this planet?  It's maintained by Perl 6 (coke AT cpan DOT org).  Get in touch and let them know you want to join!</p>
</div>
   
  <div class = "entry">
    <div class="entrytitle">Donations</div>
    <p>If you find Planeteria.org or the free software on which it runs useful, please help support this site.</p>
    <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
       <input type="hidden" name="cmd" value="_s-xclick">
       <input type="hidden" name="hosted_button_id" value="49HBMGVGUAHPU">
       <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
       <img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
    </form>
    <p><b>Bitcoin:</b> 17XkPWnefx3gYHFax74hNRfj6NtrGyJ4VN</p>
  </div> <!-- end entry -->
   

   <div class="entry">
      <div class="entrytitle">Copying</div>
      <p>Posts are copyright their respective authors. Click through to
      see each site's terms for redistribution.</p>
   </div>

   <div class="entry">
      <div class="entrytitle">Meta</div>
        <ul>
	  <li>2014-07-23 17:20:35</li>
	  <li><a href="/perl6/admin.py">Admin interface</a></li>
	</ul>
   </div>
</div>	

      </div>  <!-- end content -->
   </div> <!-- end content-outer -->

   <div id="footer-wrap">
      <div id="footer-outer">
         <div id="footer-bottom">
      <p><a href="about.html#thanks">Thanks</a> | <a href="about.html#contact">Contact</a> | <a href="about.html#copying">Copying</a> | <a href="about.html#tos">Terms of Use</a></p>
      <p>You can have the <a href="https://github.com/jvasile/Planeteria">code</a> to this page under the terms of the <a href="http://www.fsf.org/licensing/licenses/agpl-3.0.html">AGPLv3</a>.</p>
   </div></div></div>

</div> <!-- end wrap -->

</body>
</html>

