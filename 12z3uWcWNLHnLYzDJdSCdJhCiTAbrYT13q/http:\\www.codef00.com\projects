http://www.codef00.com/projects
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 02:38:47 GMT
Server: Apache
X-Mod-Pagespeed: 1.6.29.7-3566
Cache-Control: max-age=0, no-cache, no-store, must-revalidate
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 13486
Connection: close
Content-Type: text/html; charset=utf-8

<!DOCTYPE html>
<html>
<head><title>CodeF00 [ Projects ]</title>	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="style.css">
<link rel="shortcut icon" href="/img/favicon.ico" type="image/x-icon">
<meta name="author" content="Evan Teran">
</head>
<body>
<div id="header">
<div id="logo">CodeF00</div>
<div id="navcontainer">
<ul id="navlist"><li><a href="/">Home</a></li><li><a href="/about">About Me</a></li><li><a id="current" href="/projects">Projects</a></li><li><a href="/coding">Coding</a></li><li><a href="/links">Links</a></li><li><a href="http://blog.codef00.com/">Blog</a></li>	</ul>
</div>
</div>
<div id="content">
<h2>Projects</h2>
<p>Here is a list of some of the projects I am either currently worked on, or just liked enough to mention :). This list will be expanded in the future since I tend to pick up new projects all the time.</p>
<ul id="project-list">
<li><a href="projects#debugger">Debugger</a></li>
<li><a href="projects#qgmailnotifier">QGMailNotifier</a></li>
<li><a href="projects#evanos">evanOS</a></li>
<li><a href="projects#pretendo">Pretendo</a></li>
<li><a href="projects#fakestation">Fakestation</a></li>
<li><a href="projects#rpg">RPG Engine</a></li>
<li><a href="projects#rpgscript">RPG Script</a></li>
<li><a href="projects#unif">libunif</a></li>
<li><a href="projects#qhexview">QHexView</a></li>
<li><a href="projects#edisassm">edisassm</a></li>
<li><a href="projects#cpp-json">cpp-json</a></li>
</ul>
<a id="Debugger"></a>
<a id="debugger"></a>
<div class="even">
<div style="float:right;width:300px;text-align:center">
<p><small>Thank you for your support. Any money I recieve as a donation will go directly into edb's development.</small></p>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----">
<input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" name="submit" alt="PayPal - The safer, easier way to pay online!">
<img alt="" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
</form>
<div style="text-align:center">&#8212; or &#8212;</div>
<div class="btc-donate">
<a href="bitcoin:12z3uWcWNLHnLYzDJdSCdJhCiTAbrYT13q">
<img src="img/icon_bitcoin.svg">Donate BTC
</a>
<span class="btc-address"><code>12z3uWcWNLHnLYzDJdSCdJhCiTAbrYT13q</code></span>
</div>
<!--
<img style="width:74px;height:74px" src="/img/bitcoin.png" alt="12z3uWcWNLHnLYzDJdSCdJhCiTAbrYT13q">
<a style="font-size:small" href="bitcoin:12z3uWcWNLHnLYzDJdSCdJhCiTAbrYT13q?amount=0.01&label=Donate">12z3uWcWNLHnLYzDJdSCdJhCiTAbrYT13q</a>
-->
</div>
<div>
<img style="width:100px;height:100px;" src="img/edb-logo.png" alt="edb logo">
<img style="width:150px;height:150px;" src="img/qt_ambassador_logo.png" alt="Qt Ambassador">
</div>
<h3>Debugger - <a href="projects/debugger-0.9.20.tgz">Download Here - 0.9.20</a></h3>
<h3>Requirements</h3>
<ul>
<li><a href="http://qt-project.org/">Qt &gt;= 4.6</a></li>
<li><a href="http://boost.org/">boost &gt;= 1.35</a></li>
</ul>
<h3>Announcments</h3>
<p>I am happy to announce that version 0.9.20 of edb is available under the <a href="http://www.gnu.org/licenses/gpl-2.0.txt">GPL-2</a> license for <a href="projects/debugger-0.9.20.tgz">download!</a> This version supports <strong>x86 and x86-64</strong> architectures. Please give it a try and let me know what I can do to improve it. Documentation is pretty much non-existant, but that's one of the reasons why this is not a 1.0 release :). Remember to read the README file, it has a lot of information, and please check the <a href="http://bugs.codef00.com/">bugzilla</a> before asking about a missing feature, it may already be in the works. Enjoy!</p>
<h3>Source Repository</h3>
<p>edb now has a publically readable <a href="http://code.google.com/p/edb-debugger/">subversion repository</a>. For those out there who want to contribute, this is a great place to start!</p>
<h3>Downloads</h3>
<ul>
<li><a href="/projects/debugger-0.9.20.tgz">edb source (0.9.20) </a></li>
<li><a href="/projects/pkg/gentoo/edb-0.9.20.ebuild">Gentoo ebuild (0.9.20)</a></li>
<li><a href="https://aur.archlinux.org/packages/edb-debugger/">Arch Linux Package</a></li>
</ul>
<p>I have produced an edbuild for all you <a href="http://www.gentoo.org">Gentoo</a> users out there. The easiest way to use it is to do the following (as root):</p>
<code class="language-bash">mkdir -p /usr/local/portage/edb/dev-util/edb/
cp edb-0.9.20.ebuild /usr/local/portage/edb/dev-util/edb/
echo PORTDIR_OVERLAY=\&quot;\${PORTDIR_OVERLAY} /usr/local/portage/edb\&quot; &gt;&gt; /etc/make.conf
cd /usr/local/portage/edb/dev-util/edb/
ebuild edb-0.9.20.ebuild digest
ACCEPT_KEYWORDS=~x86 emerge -a dev-util/edb
</code>
<h3>History</h3>
<p>I do a lot of work analyzing applications which I do not have the source code for. On Windows, <a href="http://www.ollydbg.de/">OllyDbg</a> is my tool of choice, but there is no Linux (or any other *nix) equivalent that I could find. Sure we have <a href="http://www.gnu.org/software/gdb/">GDB</a>, but GDB and all it's various frontends tend to lean towards debugging applications to which we have the source. What I really want is a debugger which is as functional and useable as OllyDbg but for Linux (and possibly more). So I started my own debugger which is currently based on the ptrace API. The hex dump views are based on the <a href="projects#qhexview">QHexView</a> I developed which gives things a very polished look.</p>
<h3>About</h3>
<p>One of the main goals of this debugger is modularity. The interface is written in <a href="http://qt-project.org/">Qt4</a> and is therefore source portable to many platforms. The debugger core is a plugin and the platform specific code is isolated to just a few files, porting to a new OS would require porting these few files and implementing a plugin which implements the <code>DebuggerCoreInterface</code> interface. Also, because the plugins are based on the QPlugin API, and do their work through the <code>DebuggerCoreInterface</code> object, they are almost always portable with just a simple recompile.</p>
<p>The disassembly engine is my <a href="projects#edisassm">edisassm</a> project. I feel that this disassembler is mature and works well. It is worth noting that the current version of edb has temporarily dropped AT&amp;T syntax support. Once this is implemented in edisassm, it will return.</p>
<h3>Bug Reporting</h3>
<p>Bugs &amp; requests are now tracked in bugzilla set up at <a href="http://bugs.codef00.com/">http://bugs.codef00.com</a>. Please post any bugs you find or features you would like me to try to implement there.</p>
<h3>Features</h3>
<ul>
<li>Intuitive GUI interface</li>
<li>The usual debugging operations (step-into/step-over/run/break)</li>
<li>Conditional breakpoints</li>
<li>Debugging core is implemented as a plugin so people can have drop in replacements. Of course if a given platform has several debugging APIs available, then you may have a plugin that implements any of them.</li>
<li>Basic instruction analysis</li>
<li>View/Dump memory regions</li>
<li>Effective address inspection</li>
<li>The data dump view is tabbed, allowing you to have several views of memory open at the same time and quickly switch between them.</li>
<li>Importing and generation of symbol maps</li>
<li>Plugins
<ul>
<li>Code analysis engine which can identify functions</li>
<li>Search for binary strings</li>
<li>Code Bookmarks</li>
<li>Breakpoint management</li>
<li>Check for updates</li>
<li>Output the current state to the console</li>
<li>Environment variable viewer</li>
<li>Hardware Breakpoints</li>
<li>Heap block enumeration</li>
<li>Opcode search engine plugin has basic functionality (similar to <a href="http://www.metasploit.com">msfelfscan/msfpescan</a>)</li>
<li>Open file enumeration</li>
<li>Reference finder</li>
<li>String searching (like strings command in *nix)</li>
<li>Basic <a href="http://en.wikipedia.org/wiki/Return-oriented_programming">ROP</a> instruction search</li>
</ul>
</li>
</ul>
<h3>Thanks</h3>
<ul>
<li>As of 06/2011, I recieved an email letting me know that edb will be included in the <a href="http://www.backtrack-linux.org/">BackTrack linux Distribution</a> and will be available via the backtrack repos with a simple: "<code>apt-get install edb-debugger</code>".</li>
<li>As of 12/2010, thanks to the work of Fernando Merc&ecirc;s from <a href="http://mentebinaria.com.br/">http://mentebinaria.com.br/</a>, edb now has .deb files for users of Debian based distributions.</li>
<li>As of 12/2008, thanks to the work of Nicoleau Fabien, edb is now available in Fedora's stable repositories. You should be able to install it with a simple &quot;<code>yum install edb</code>&quot;! Thanks Nicoleau!</li>
</ul>
<h3>Some screen shots</h3>
<ul class="image-list">
<li><a href="img/debugger.png"> <img style="width: 370px; height: 277px;" src="img/debugger_small.png" alt="debugger"></a></li>
<li><a href="img/debugger2.png"><img style="width: 160px; height: 88px;" src="img/debugger2_small.png" alt="debugger memory region dialog"></a></li>
<li><a href="img/debugger3.png"><img style="width: 203px; height: 74px;" src="img/debugger3_small.png" alt="debugger breakpointer manager dialog"></a></li>
<li><a href="img/debugger4.png"><img style="width: 115px; height: 102px;" src="img/debugger4_small.png" alt="debugger binary string input dialog"></a></li>
<li><a href="img/debugger5.png"><img style="width: 199px; height: 131px;" src="img/debugger5_small.png" alt="debugger opcode search dialog"></a></li>
</ul>	</div>
<a id="QGMailNotifier"></a>
<a id="qgmailnotifier"></a>
<div class="odd">
<h3>QGMailNotifier - <a href="https://code.google.com/p/qgmailnotifier/">Subversion Repository</a></h3>
<p>Download <a href="projects/qgmailnotifier-2014.2.tgz">Version 2014.2 Here</a></p>
<p>I love using <a href="http://mail.google.com/mail/">GMail</a> and on both Windows and MacOSX there is a wonderful simple program called <a href="http://toolbar.google.com/gmail-helper/">Gmail Notifier</a>. Unfortunately, there is no *nix port. To fill the gap there are a few work-alikes out there. But for me, none of them fit the bill. The closest to meeting my needs was <a href="http://kcheckgmail.sourceforge.net/">kcheckgmail</a>. But that one actually logs into the page and parses the data, which makes it <strong>very</strong> brittle and prone to breakage every time google updates their pages. QGMailNotifier uses the GMail RSS feed to get it's data.</p>
<p>So, I've developed my own Qt4 based notifier which works very similarly to the Windows version. I've added a few things here and there, and plan to add some cool things in the future such as: multiple account support, kde wallet support and more methods of notification.</p>
<p>For now, it is simple and works well :). I've created an ebuild for anyone who wants to try it, the only dependancy is Qt >= 4.3.0.</p>
<p>I have produced an <a href="projects/pkg/gentoo/qgmailnotifier-2014.2.ebuild">ebuild </a> for all you gentoo users out there. The easiest way to use it is to do the following (as root):</p>
<code class="language-bash">mkdir -p /usr/local/portage/qgmailnotifier/mail-client/qgmailnotifier/
cp qgmailnotifier-2014.2.ebuild /usr/local/portage/qgmailnotifier/mail-client/qgmailnotifier/
echo PORTDIR_OVERLAY=\&quot;\${PORTDIR_OVERLAY} /usr/local/portage/qgmailnotifier\&quot; &gt;&gt; /etc/make.conf
cd /usr/local/portage/qgmailnotifier/mail-client/qgmailnotifier/
ebuild qgmailnotifier-2014.2.ebuild digest
ACCEPT_KEYWORDS=~x86 emerge -a mail-client/qgmailnotifier
</code><p><img src="img/qgmailnotifier1.png" alt="QGMailNotifier screenshot"></p>
</div>
<a id="evanOS"></a>
<a id="evanos"></a>
<div class="even">
<h3>evanOS</h3>
<p>This is my <a class="wiki-link" href="http://en.wikipedia.org/wiki/Operating_system">operating system</a>. It is written in c++ with a tiny bit of assembly. My primary goal is to make a usable and useful operating system which is truly designed from the ground up to secure and flexible. Its design is influenced by a few Operating Systems. I plan to have a <a href="http://www.unix.org/">UNIX</a> like filesystem, which will have the notion of &quot;devices are files&quot; but devices will live in there own namespace. For example, the first hard disk will be available as: &quot;device:///hard_disk/0&quot; and will not be normally part of the actual filesystem. Similarly, instead of a &quot;/proc/&quot; filesystem, I have &quot;process:///&quot;. However, a user will be able to reproduce a UNIX like /dev by mounting &quot;device:///&quot; to &quot;/dev.&quot;</p>
<p>I plan to have the normal way of creating processes be somewhat like Win32, and not use fork/execve. This is simpler to work with from a programmers point of view. I do however plan to have fork/execve available in order to increase compatibility the vast library of existing UNIX applications.</p>
<p>In its current state, evanOS runs in <a class="wiki-link" href="http://en.wikipedia.org/wiki/Long_mode">long mode</a>, and is 64-bit. It supports multiple processes/threads, semaphores, mutexes, monitors, ATA hard disk access with preliminary ext2/3 reading support, and a few other cool things.</p>
<p>A related side project of mine is a custom written from the ground up libc and libstd++. These are designed to be standards compliant and be able to operate in kernel mode. This way I can test and validate a lot of code in user space before jamming it into my kernel code. Also it allows me to reuse standard code for things like containers which are already have correct implementation. Finally the use of safe containers such as <code>std::string</code> will help greatly in the reduction of possibly insecure code. Once it moves along a bit more, I'll start posting source code so that if anyone is interested they can take a peek at what I'm up to :)</p>
<p>I have successfully added user mode processes, and the ability to load simple statically linked <a class="wiki-link" href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a> binaries off disk and run them! Once I finalize my <a class="wiki-link" href="http://en.wikipedia.org/wiki/Inter-process_communication">IPC</a> API, then I can begin work on a real GUI which will in user space.</p>
<p>I also may choose to fork off the evanOS-libc and evanOS-libstdc++ into seperate projects for people to use as well. The libc is pretty close to being complete and I'd call the libstdc++ 80%, usable but still missing some large pieces.</p>
<p>Some screen shots for your viewing pleasure...</p>
<ul class="image-list">
<li><a href="img/snapshot1.png"><img style="width: 370px; height: 269px;" src="img/snapshot1_small.png" alt="evanOS"></a></li>
<li><a href="img/snapshot2.png"><img style="width: 370px; height: 269px;" src="img/snapshot2_small.png" alt="evanOS"></a></li>
<li><a href="img/snapshot3.png"><img style="width: 370px; height: 269px;" src="img/snapshot3_small.png" alt="evanOS"></a></li>
<li><a href="img/snapshot4.png"><img style="width: 370px; height: 269px;" src="img/snapshot4_small.png" alt="evanOS"></a></li>
<li><a href="img/snapshot5.png"><img style="width: 370px; height: 269px;" src="img/snapshot5_small.png" alt="evanOS"></a></li>
<li><a href="img/snapshot6.png"><img style="width: 370px; height: 269px;" src="img/snapshot6_small.png" alt="evanOS"></a></li>
</ul>
</div>
<a id="Pretendo"></a>
<a id="pretendo"></a>
<div class="odd">
<h3>Pretendo</h3>
<p>
Pretendo is a <abbr title="Nintendo Entertainment System">NES</abbr> emulator. As per usual, it was written in c++ (my favorite language, can't you tell?) by me and my friend Eli Dayan. It was designed to be portable so it is already able to be compiled on Windows, BeOS/Zeta, Solaris and Linux (there is no real reason why it couldn't be built on any system which has SDL and Qt as well), a Macintosh port may be done in the foreseeable future. This will probably depend on if I get one of those cool new <a href="http://www.apple.com/macmini/">Mac Minis</a>...they are pretty bad ass. Here are some screen shots for you to take a gander. After discussing Pretendo with Eli, we both agree that we will in fact open source the emulator, but only after it is in a state where we feel happy with it, until then, binary only releases. It is a fairly fast emulator, but we are still looking to make it faster. (At the moment it get about 650 FPS on my laptop which is a 2.0GHz Centrino). Currently it sports a pretty wide feature set which includes:
</p>
<ul>
<li>Uses native APIs for video and sound when available (Win32, BeOS/Zeta)</li>
<li>Uses SDL for video/sound and Qt for GUI on UNIX targets (command line GUI in works as well)</li>
<li>A pretty accurate sound system</li>
<li>A functional debugger</li>
<li>Good mapper support (0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 15, 19, 23, 32, 33, 40, 41, 64, 66, 68, 69, 71, 118, 240, 245)</li>
<li>UNIF support</li>
<li>Fullscreen and Windowed video modes</li>
<li>Adjustable palette</li>
<li>Pattern Table Viewer (Tile Viewer)</li>
<li>Name Table Viewer</li>
<li>In memory IPS patches, this allows a ROM patch to be applied without modifying the original ROM file. If the user tells the interface to load an IPS file, Pretendo will load a .nes file of the same name from the same directory and then apply the patch automatically. This removes the need for storing the result of a patch on disk, and hopefully will cut down on hacks in people's ROM collections</li>
<li>And a few things I'm probably forgetting</li>
</ul>
<p>
Binaries will be available on a &quot;once they are ready&quot; basis. We are in no rush to get yet another release out the door. We are currently focusing on code quality, emulation accuracy, and being full featured.
</p>
<ul class="image-list">
<li><a href="img/pretendo0.png"><img style="width: 185px; height: 184px;" src="img/pretendo0_small.png" alt="pretendo interface"></a></li>
<li><a href="img/pretendo1.png"><img style="width: 132px; height: 167px;" src="img/pretendo1_small.png" alt="pretendo thumbnail Super Mario Bros."></a></li>
<li><a href="img/pretendo2.png"><img style="width: 132px; height: 167px;" src="img/pretendo2_small.png" alt="pretendo thumbnail Contra"></a></li>
<li><a href="img/pretendo3.png"><img style="width: 132px; height: 167px;" src="img/pretendo3_small.png" alt="pretendo thumbnail Zelda"></a></li>
<li><a href="img/pretendo4.png"><img style="width: 132px; height: 167px;" src="img/pretendo4_small.png" alt="pretendo thumbnail Mega Man 2"></a></li>
<li><a href="img/pretendo_beos.png"><img style="width: 134px; height: 145px;" src="img/pretendo_beos_small.png" alt="pretendo thumbnail Super Mario Bros. (BeOS/Zeta)"></a></li>
<li><a href="img/pretendo_win32.png"><img style="width: 132px; height: 145px;" src="img/pretendo_win32_small.png" alt="pretendo thumbnail Wall Demo (Windows XP)"></a></li>
<li><a href="img/pretendo5.png"><img style="width: 283px; height: 275px;" src="img/pretendo5_small.png" alt="pretendo debugger"></a></li>
<li><a href="img/pretendo6.png"><img style="width: 175px; height: 194px;" src="img/pretendo6_small.png" alt="pretendo about"></a></li>
<li><a href="img/pretendo7.png"><img style="width: 316px; height: 293px;" src="img/pretendo7_small.png" alt="pretendo options"></a></li>
<li><a href="img/pretendo8.png"><img style="width: 143px; height: 110px;" src="img/pretendo8_small.png" alt="pretendo pattern table viewer"></a></li>
<li><a href="img/pretendo9.png"><img style="width: 271px; height: 286px;" src="img/pretendo9_small.png" alt="pretendo name table viewer"></a></li>
</ul>
</div>
<a id="Fakestation"></a>
<a id="fakestation"></a>
<div class="even">
<h3>Fakestation</h3>
<p>
This is my <abbr title="Playstation">PSX</abbr> emulator. Currently it really isn't much more than the CPU core and debugger with little tidbits of PSX specific extras. It will currently boot the <abbr title="Basic Input/Output System">BIOS</abbr> just fine. Unlike other emulators, the goal of this one really isn't speed or playability, but more good design and clean code (which may result in speed/playability). What this means is that the code makes a lot of use of templates, classes, and very thought out design. For example, I noticed that many (all?) open source PSX emulators implement memory in a way which just seems weird to me. They tend to implement the memory code literally 3 times, once time for each of 8-bit, 16-bit and 32-bit read/writes. This in my opinion is rather silly, in the real hardware I don't think there is anything stopping you from using a 32-bit write to write to an address which represents an 8-bit port, even if it is considered a programming error. Plus there is the fact that it's annoying to manage 3 copies of the code. So my approach is the use templates and write it once. Then in the code I enforce alignment requirements of the CPU to make sure everything ends up being correct. The result is smaller and easier to follow code. I'll probably post some source soon.
</p>
</div>
<a id="RPG"></a>
<a id="rpg"></a>
<div class="odd">
<h3>RPG Engine</h3>
<p>This one is one of my current favorites. I am building a <a class="wiki-link" href="http://en.wikipedia.org/wiki/Final_Fantasy_VI">Final Fantasy 3 (Final Fantasy 6 in Japan)</a> style <abbr title="Role Playing Game">RPG</abbr> Engine. It is top down and tile driven in classic RPG style. The cool part is that pretty much every part of the games made are driven by my <a href="projects#rpgscript">C like scripting language</a> developed specifically for this engine. Everything from stepping onto an event tile (think doors/stairs/damage tile/etc) to talking to an <abbr title="Non Player Character">NPC</abbr> triggers a function call in the script. This allows every aspect of the plot of the game to be written outside the engine, making it more than just an engine, but an RPG creation engine. I have also developed a mostly functional map editor which currently is used to aid in development of the main game engine, but it will likely be part of a &quot;suite&quot; of programs which make up the creation engine.</p>
<p>Here's some nice screenshots for anyone curious, click on them for larger versions.</p>
<ul class="image-list">
<li><a href="img/RPG1.png"><img style="width: 160px; height: 120px;" src="img/RPG1_small.png" alt="RPG1 thumbnail"></a></li>
<li><a href="img/RPG2.png"><img style="width: 182px; height: 182px;" src="img/RPG2_small.png" alt="RPG2 thumbnail"></a></li>
</ul>
<p class="note">Note: I am not an artist, so many if not all of the graphics are &quot;borrowed&quot; from other RPGs I have found on the internet. I will be posting a list of sources as soon as I find all the relevant URLs. If you would like to know the source of a given image, please feel free to contact me.</p>
<p>Ok, I found the program where i got my tiles from, they are from an RPG project known as <a href="http://hamsterrepublic.com/ohrrpgce/"><abbr title="Official Hamster Republic RPG Construction Engine">O.H.R.R.P.H.C.E.</abbr></a>. A very good RPG system, with a very fun wacky sense of humor to it.</p>
</div>
<a id="RPGScript"></a>
<a id="rpgscript"></a>
<div class="even">
<h3>RPG Script</h3>
<p>
This is the c like scripting language that I made to drive the event system in my <a href="projects#rpg">RPG</a>. It is a nice small, yet efficient engine written in c++. It is still a work in progress, and a little messy under the hood, but proves to be very useful for my RPG.
</p>
<p>
The language was originally loosely based on code found in <a href="http://www.amazon.com/exec/obidos/ASIN/0072121246/qid%3D1128838730/sr%3D11-1/ref%3Dsr%5F11%5F1/102-7667110-7682536">&quot;C: The Complete Reference&quot;</a>, but has been expanded on, re-written and improved very much. My implementation included features such as:
</p>
<ul>
<li>Assignment to variables during declaration</li>
<li>Detection of duplicate functions</li>
<li>Combination assignment and modification operators (ex. +=)</li>
<li>Binary operations (ex: int a = b | c;)</li>
<li>Proper block level scoping for local variables (they are destroyed when the enclosing block is ended, not just function return</li>
<li>&quot;else if&quot; support</li>
<li>Vastly more complete syntax checking</li>
<li>Pre-tokenization of the program for improved execution speed, this also allows a future version to save this tokenized version and load it for execution. The goal being that you don't have to make your scripts open source.</li>
<li>Several other features I am failing to recall right now...</li>
</ul>
<p>
You can download a copy with my RPG functions trimmed out <a href="projects/rpgscript.tgz">here</a>.
</p>
</div>
<a id="UNIF"></a>
<a id="unif"></a>
<div class="odd">
<h3>libunif</h3>
<p>This library is related to my NES emulator Pretendo. Basically around 2000/2001 there was a bit of a movement in the NES development community to have a more accurate and proper game cart backup format. <a href="http://fms.komkon.org/EMUL8/NES.html#LABM">.NES</a> (the popular format) is very limited and constantly has needed hacks to the format. So <a href="unif_cur.txt"><abbr title="Universal NES Interchange Format">UNIF</abbr></a> came along and personally I think it is in fact a much better format. As for if it did/will catch on, who knows.</p>
<p>Regardless, libunif is a library I made which makes loading UNIF and .NES files pretty trivial. It also has an example program which will convert from .NES to UNIF (though it does need a little user input). The code can be found at <a href="http://code.google.com/p/libunif/">http://code.google.com/p/libunif/</a>. And the documentation can be found <a href="projects/libunif/html/index.html">here</a>.</p>
<p>As of 2011, Tennessee Carmel-Veilleux, the original creator of UNIF, has asked that I host and maintain the UNIF standard which I am more than happy to. So if you see any dead or out of date links to the UNIF standard, feel free to redirect them to the copy that I am hosting at <a href="http://codef00.com/unif_cur.txt">http://codef00.com/unif_cur.txt</a>.</p>
</div>
<a id="QHexView"></a>
<a id="qhexview"></a>
<div class="even">
<h3>QHexView</h3>
<p>This is a reusable Qt4 widget made to display data in traditional hex editor style.</p>
<p>It is very configurable. The different columns may be shown or hidden as needed. In addition, the colours, fonts and font-sizes are all adjustable</p>
<p>I originally considered reusing the widget made for KHexEdit, but it really seemed like it is bit too tightly coupled with the rest of the application. So I developed this widget by building on top of the QAbstractScrollView. The look at feel of the widget is based on KHexEdit, but it is a standalone widget that depends on nothing more than the Qt library itself. Currently the widget only supports read-only operations. However, You can of course alter the underlying data and refresh the view programmatically.</p>
<ul class="image-list">
<li><a href="img/hexview1.png"><img style="width: 177px; height: 118px;" src="img/hexview1_small.png" alt="QHexView thumbnail"></a></li>
</ul>
<p>QHexView is available in at <a href="http://code.google.com/p/qhexview/">http://code.google.com/p/qhexview/</a>. To use it, you simply supply it with an object that inherits from QIODevice. This means that viewing files, data buffers or even a QTCPStream is trivial!</p>
</div>
<a id="edisassm"></a>
<div class="odd">
<h3>edisassm - <a href="https://code.google.com/p/edisassm/">Subversion Repository</a></h3>
<p>My <a href="projects#debugger">debugger (edb)</a> has recently spawned off a side project. I am no longer satisfied with <a href="http://bastard.sourceforge.net/libdisasm.html">libdisasm</a> as the disassembler engine for edb. It is a stagnant project and only supports i386. Because of this I have started my own object oriented disassembly API which will be the future basis for edb's disassembly. It can decode all of the i386/EMT64 instruction set including <a class="wiki-link" href="http://en.wikipedia.org/wiki/MMX">MMX</a>, and the various <a class="wiki-link" href="http://en.wikipedia.org/wiki/Streaming_SIMD_Extensions">SSE</a> instructions sets (SSE/SSE2/SSE3/SSSE3). The tables are based on the latest documentation for the Intel EMT-64 and IA-32 architecutures. Starting with version 1.5.0, disassembling 64-bit code is supported.</p>
<p>Usage is very simple and included in this package is edisassm.cpp which demonstrates a simple disassembler.</p>
</div>
<a id="cpp-json"></a>
<div class="even">
<h3>cpp-json - <a href="https://code.google.com/p/cpp-json/">Subversion Repository</a></h3>
<p>There are a few different JSON parsing libraries out there. But cpp-json aims to be the simplest to use while still being efficient by using modern c++ techniques.</p>
<p>Currently, the only active item on the TODO list is to better support Unicode. The parser can be given iterators referring to wide characters, but there is no runtime detection or endian-ness detection (yet)</p>
<p>However, Unicode is generally <strong>well supported</strong> in the form of <code>\uXXXX</code> encoding, including code points which require surrogate pairs. The resulting <code>json::value</code> object will contain the string, encoded as UTF-8 since it is stored in a <code>std::string</code>.</p>
<p>Of course special consideration is needed when displaying these strings if they do in fact contain non ASCII characters.</p>
<p>So, for example, <code>{"test1" : "\uD840\uDC8A"}</code> will correctly parse and the object's "test1" member will have the byte sequence: <code>0xF0 0xA0 0x82 0x8A</code></p>
<p>Here is a simple example of the usage of this library:</p>
<pre><code>
#include "cpp-json/json.h"
#include &lt;fstream&gt;
#include &lt;iostream&gt;

int main() {
        // open a file
        std::ifstream file("test.json");

        // json::parse can take two iterators or a std::istream
        json::value json = json::parse(file);
        
        // you can access objects like associative array's easily
        // the result is a json::value
        // ... though in real code you may want to check the type first ;-)
        auto servlets = json["web-app"]["servlet"];

        // when dealing with arrays, you can just use iterators, 
        // or feel free to use C++11 ranged-for
        const json::array &a = as_array(servlets);
        for(auto it = a.begin(); it != a.end(); ++it) {
                const json::value &v = *it;
                // all basic types (numbers, strings, booleans) can be converted 
                // to a string
                std::cout &lt;&lt; to_string(v["servlet-name"]) &lt;&lt; std::endl;
        }
}
</code></pre>
</div>
</div>
<div id="footer">
<div style="float:right">
<iframe scrolling="no" style="border: 0; width: 468px; height: 60px;" src="http://coinurl.com/get.php?id=18327"></iframe>
</div>
<div id="google">
<script type="text/javascript">google_ad_client="pub-1189064590511277";google_ad_slot="7131301986";google_ad_width=468;google_ad_height=60;</script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
<div><small><a href="https://plus.google.com/116418769285443917083?rel=author">Evan Teran</a> &copy; 2005-2014</small></div>
<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-2958870-1','codef00.com');ga('send','pageview');</script>
</div>
</body>
</html>
