http://efnx.com/page/2/
HTTP/1.1 200 OK
Server: nginx/1.2.4
Date: Thu, 24 Jul 2014 15:19:23 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.4.4-9
X-Pingback: http://efnx.com/xmlrpc.php

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">

<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="shortcut icon" href="http://www.efnx.com/favicon.gif" type="image/x-icon" />

<title>EFNX </title>

<meta name="generator" content="WordPress 3.6.2-alpha" /> <!-- leave this for stats -->

<link rel="stylesheet" href="http://efnx.com/wp-content/themes/efnx_v2/style.css" type="text/css" media="screen" />
<link rel="alternate" type="application/rss+xml" title="EFNX RSS Feed" href="http://efnx.com/feed/" />
<link rel="pingback" href="http://efnx.com/xmlrpc.php" />

<style type="text/css" media="screen">

	#page { background: url("http://efnx.com/wp-content/themes/efnx_v2/images/pageBG.gif") repeat-y; border: none; }

</style>


            <script type="text/javascript">//<![CDATA[
            // Google Analytics for WordPress by Yoast v4.3.3 | http://yoast.com/wordpress/google-analytics/
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-3059480-1']);
				            _gaq.push(['_trackPageview']);
            (function () {
                var ga = document.createElement('script');
                ga.type = 'text/javascript';
                ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';

                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(ga, s);
            })();
            //]]></script>
			<link rel='stylesheet' id='wp-lightbox-2.min.css-css'  href='http://efnx.com/wp-content/plugins/wp-lightbox-2/styles/lightbox.min.css?ver=1.3.4' type='text/css' media='all' />
<link rel='stylesheet' id='codecolorer-css'  href='http://efnx.com/wp-content/plugins/codecolorer/codecolorer.css?ver=0.9.9' type='text/css' media='screen' />
<script type='text/javascript' src='http://efnx.com/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://efnx.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://efnx.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://efnx.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.6.2-alpha" />

<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="blog" />
<meta property="og:title" content="EFNX" />
<meta property="og:description" content="A blog of code." />
<meta property="og:url" content="http://efnx.com/" />
<meta property="og:site_name" content="EFNX" />
<meta name="twitter:site" content="@jetpack" />
</head>
<body>
		<div class="cloud" style="left:64%; top:94%"></div>
				<div class="cloud" style="left:44%; top:186%"></div>
				<div class="cloud" style="left:-3%; top:200%"></div>
				<div class="cloud" style="left:75%; top:180%"></div>
				<div class="cloud" style="left:52%; top:73%"></div>
		
<div id="page">

<div id="header">
	<div id="headerimg">
		<h1><a href="http://efnx.com/">The <br />efnx code blog.</a></h1>
		<div class="description">A blog of code.</div>
		<br>
		<a style="color:rgb(136, 85, 204); font-size:smaller" class="description" href="bitcoin:1NfaZEG7hxu5ewVcbUebU553xPPoGjBAh5?label=efnx.com">You can send me a tip in BTC ;) 1NfaZEG7hxu5ewVcbUebU553xPPoGjBAh5 </a>
	</div>
</div>
<hr />

	<div id="content" class="narrowcolumn">

	
		
			<div class="post" id="post-393">
				<h2><a href="http://efnx.com/bang-pre-alpha/" rel="bookmark" title="Permanent Link to Bang Pre-Alpha">Bang Pre-Alpha</a></h2>
				<small>May 12th, 2012 <!-- by Schell --></small>

				<div class="entry">
					<p>I have a new ongoing project, it&#8217;s called Bang. It&#8217;s a canvas-tag based display list written in Javascript. I&#8217;m going to be using it in place of AS3/Flash in my web authoring tool chain. <a title="Bang on Github" href="http://schell.github.com/bang" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://schell.github.com']);" target="_blank">Bang on Github</a>. There are three main elements of Bang that make it special:</p>
<h3>Modules</h3>
<p>When writing a project with Bang you keep your code separated in modules. Each module exposes a Javascript Object, like a constructor function. The modules object is passed into each module definition, exposing your module to other modules that depend on it. Keeping your code in modules like this means you need only expose one global variable, the list of modules. Any modules loaded this way are essentially sandboxed in that modules object.<br />
You define a module in a similar manner to <a title="RequireJS" href="http://requirejs.org/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://requirejs.org']);" target="_blank">RequireJS</a> and the <a title="Asynchronous Module Definition" href="https://github.com/amdjs/amdjs-api/wiki/AMD" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);" target="_blank">AMD</a>:</p>
<div class="codecolorer-container javascript twitlight" style="overflow:auto;white-space:nowrap;width:500px;"><div class="javascript codecolorer">mod<span class="br0">&#40;</span><span class="br0">&#123;</span><br />
<span class="kw3">name</span> <span class="sy0">:</span> <span class="st0">'MyObject'</span><span class="sy0">,</span><br />
dependencies <span class="sy0">:</span> <span class="br0">&#91;</span> <span class="st0">'bang::Geometry/Rectangle.js'</span><span class="sy0">,</span> <span class="st0">'myLib::SomeFile.js'</span> <span class="br0">&#93;</span><span class="sy0">,</span><br />
init <span class="sy0">:</span> <span class="kw2">function</span> initMyObject<span class="br0">&#40;</span>modules<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
<span class="kw2">function</span> MyObject<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
<span class="kw1">this</span>.<span class="me1">x</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br />
<span class="kw1">this</span>.<span class="me1">y</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br />
<span class="br0">&#125;</span><br />
MyObject.<span class="me1">prototype</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span><br />
MyObject.<span class="me1">prototype</span>.<span class="me1">constructor</span> <span class="sy0">=</span> MyObject<span class="sy0">;</span><br />
<span class="kw1">return</span> MyObject<span class="sy0">;</span><br />
<span class="br0">&#125;</span><br />
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></div></div>
<p>The module system is another project of mine called <a title="Mod on Github" href="http://schell.github.com/mod" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://schell.github.com']);" target="_blank">Mod</a>. <a title="mod â€“ A javascript module definition and loading tool." href="http://efnx.com/mod-a-javascript-module-definition-and-loading-tool/" >I&#8217;ve written about it before</a>. It&#8217;s very small and simple and it gets the job done (the job of code separation and later compilation).<br />
Bang adds support for Google&#8217;s Closure Compiler to Mod, so once your project is ready to ship you can compile (in a sense), compress, obfuscate and pack your code down into a deployable script or a neato mosquito PNG. I like the PNG method because it&#8217;s slightly more obfuscated and adds further sandboxing, but that&#8217;s a topic for a later post.</p>
<h3>It&#8217;s like Flash, but not too much like Flash&#8230;</h3>
<p>Bang is enough like Flash/AS3 to be familiar, but sacrifices some AS3 similarities in exchange for simplicity and consistency. The complexity in Bang is very small. There aren&#8217;t any tricks to make it more Flash-like than it has to be and it won&#8217;t protect you from learning canvas operations. In fact, you&#8217;ll have to learn about the <a title="CanvasRenderingContext2D documentation at Mozilla" href="https://developer.mozilla.org/en/DOM/CanvasRenderingContext2D" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://developer.mozilla.org']);" target="_blank">CanvasRenderingContext2D</a> to do any real drawing. I&#8217;m not aliasing those calls and hiding it in a mock <a title="Graphics documentation on Adobe Labs" href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/display/Graphics.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://help.adobe.com']);" target="_blank">Graphics</a> object for you! <img src='http://efnx.com/wp-includes/images/smilies/icon_wink.gif' alt=';)' class='wp-smiley' />  And you should be learning these new technologies without crutches. Think of Bang not as a set of crutches, but as a set of wings, or at least a hammer and chisel. No one likes masonry-by-hand.</p>
<h3>It is fast.</h3>
<p>The original pre-alpha version of Bang takes <a title="Douglas Crockford on Wikipedia" href="https://en.wikipedia.org/wiki/Douglas_Crockford" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);" target="_blank">Douglas Crockford</a>&#8216;s extremism literally. There are no uses of the keywords &#8216;this&#8217; or &#8216;new&#8217;. It accomplishes (multiple) inheritance through special constructor functions that add functions and closures to objects (or creates new ones). This, although a departure from AS3 at first, actually gives projects written in Bang an AS3++ feel. Multiple inheritance is awesome. Private variables are awesome. With <a title="Prototypal Inheritance - Douglas Crockford" href="http://javascript.crockford.com/prototypal.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://javascript.crockford.com']);" target="_blank">prototypal inheritance</a> you lose private variables so by using special constructor functions <a title="Private methods and variables in Javascript - Github Gist" href="https://gist.github.com/321279" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://gist.github.com']);" target="_blank">we can create private variables through closures</a>. These features are awesome, but as Martin Hunt of <a title="GameClosure" href="http://gameclosure.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://gameclosure.com']);" target="_blank">GameClosure</a> pointed out to me, it&#8217;s not fast. Processing time will go up linearly with the number of properties and methods created in the class. This means that if you&#8217;re creating a lot of complex game objects every frame tick, the project will likely start chugging. This is not fast. Apps have to be fast! For this reason I started <a title="Prototypal branch of Bang on Github" href="https://github.com/schell/bang/tree/prototypal" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);" target="_blank">a new branch of Bang that uses traditional prototypal inheritance</a>. This branch will include a dirty rectangles implementation for really lazy redrawing, and I have plans for using WebGL for rendering down the line. Stay tuned!</p>
<h3>A tiny demo</h3>
<div id="bang_demo">Take a look at the source for this div. This is the compiled output of the main branch of Bang. It&#8217;s clean, right?!</p>
<div class="bang" data-source="http://efnx.com/wp-content/uploads/2012/05/xor.png"></div>
<br />
<script charset="utf-8" type="text/javascript" src="http://schell.github.com/bang/bang.js"></script><br />

</div>
</p>
<pre style="font: 13px/1.4em Monaco, Lucida Console, monospace; background: #1d021d; color: #8d92f7;"></pre>
<p>
				</div>

				<p class="postmetadata"> Posted in <a href="http://efnx.com/topics/as3/" title="View all posts in AS3" rel="category tag">AS3</a>, <a href="http://efnx.com/topics/javascript/" title="View all posts in Javascript" rel="category tag">Javascript</a>, <a href="http://efnx.com/topics/personal/" title="View all posts in Personal" rel="category tag">Personal</a>, <a href="http://efnx.com/topics/webgl/" title="View all posts in WebGL" rel="category tag">WebGL</a> |   <a href="http://efnx.com/bang-pre-alpha/#respond" title="Comment on Bang Pre-Alpha">No Comments &#187;</a></p>
			</div>

		
			<div class="post" id="post-388">
				<h2><a href="http://efnx.com/mod-a-javascript-module-definition-and-loading-tool/" rel="bookmark" title="Permanent Link to mod &#8211; A javascript module definition and loading tool.">mod &#8211; A javascript module definition and loading tool.</a></h2>
				<small>January 18th, 2012 <!-- by Schell --></small>

				<div class="entry">
					<p>Now that I&#8217;ve been writing a lot less Actionscript and a lot more Javascript I&#8217;ve found that I often need a system for separating my code out into modules. Javascript doesn&#8217;t provide a convenient way to load scripts and define modules so I wrote a tool I call &#8216;<a href="http://github.com/schell/mod" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">mod</a>&#8216; that uses either XMLHTTPRequests or script tag injection to load scripts. </p>
<p>mod uses initialization objects to define modules. A module object takes a name, an init function and optionally an array of dependencies (paths to other scripts you&#8217;d like to load before initializing the current module). You can also supply an optional callback to execute after the module has been initialized. Both init() and callback() are passed an object that contains all the initialized modules thus far.</p>
<p>Defining a module looks like this:</p>
<div class="codecolorer-container javascript twitlight" style="overflow:auto;white-space:nowrap;width:500px;height:300px;"><div class="javascript codecolorer">mod<span class="br0">&#40;</span><span class="br0">&#123;</span><br />
&nbsp; &nbsp; <span class="kw3">name</span> <span class="sy0">:</span> <span class="st0">'Main'</span><span class="sy0">,</span><br />
&nbsp; &nbsp; dependencies <span class="sy0">:</span> <span class="br0">&#91;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="st0">'anotherModule.js'</span><br />
&nbsp; &nbsp; <span class="br0">&#93;</span><span class="sy0">,</span><br />
&nbsp; &nbsp; init <span class="sy0">:</span> <span class="kw2">function</span> initMain<span class="br0">&#40;</span>modules<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// we can access anotherModule because mod.js</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// loads and initializes dependencies in order</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">var</span> anotherModule <span class="sy0">=</span> modules.<span class="me1">anotherModule</span><span class="sy0">;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; someValue <span class="sy0">:</span> anotherModule.<span class="me1">someFunction</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; functionToExpose <span class="sy0">:</span> anotherModule.<span class="me1">someFunctionToExpose</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">;</span><br />
&nbsp; &nbsp; <span class="br0">&#125;</span><span class="sy0">,</span><br />
&nbsp; &nbsp; callback <span class="sy0">:</span> <span class="kw2">function</span> cbMain<span class="br0">&#40;</span>modules<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// we can access Main because callback() is not called</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// until after Main's init()</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw2">var</span> Main <span class="sy0">=</span> modules.<span class="me1">Main</span><span class="sy0">;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; window.<span class="me1">exposedFunction</span> <span class="sy0">=</span> Main.<span class="me1">functionToExpose</span><span class="sy0">;</span><br />
&nbsp; &nbsp; <span class="br0">&#125;</span><br />
<span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span></div></div>
<p>In this first call mod packages your module initialization object and starts loading its dependencies (either through XMLHttpRequest or script tag injection). Once the dependencies are loaded (which may or may not define more modules and load more scripts), the result of the init function is stored in mod.modules, in this case as mod.modules.Main. The loaded modules are exposed to your init and callback functions as the only parameter, so they don&#8217;t clutter global space. As an added benefit, you can share data between modules using mod.modules.</p>
<p>If you use mod to write lots of modules (like I do when working on a big project), mod can &#8216;compile&#8217; your project for you, removing all script loading. It essentially takes all your init and callback functions, wraps them inside an island closure and prints them to one monolithic file which you can then compress with YUI or a google &#8216;something-or-other&#8217;.<br />
To do this, load your project in your browser, open the js console and type mod.printCompilation(). Alternatively, to store in a string, type var compilation = mod.compile();.</p>
				</div>

				<p class="postmetadata"> Posted in <a href="http://efnx.com/topics/javascript/" title="View all posts in Javascript" rel="category tag">Javascript</a> |   <a href="http://efnx.com/mod-a-javascript-module-definition-and-loading-tool/#comments" title="Comment on mod &#8211; A javascript module definition and loading tool.">1 Comment &#187;</a></p>
			</div>

		
			<div class="post" id="post-374">
				<h2><a href="http://efnx.com/measuring-the-speed-of-light-using-marshmallows-in-a-microwave/" rel="bookmark" title="Permanent Link to Measuring the speed of light using marshmallows in a microwave">Measuring the speed of light using marshmallows in a microwave</a></h2>
				<small>November 21st, 2010 <!-- by Schell --></small>

				<div class="entry">
					<p>I just saw a video <a href="http://gaurabc.com/visualizing_microwaves_in_a_microwave_oven" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://gaurabc.com']);" title="visualizing microwaves">here</a> about using neon bulbs to visualize microwaves in a microwave oven.<br />
Another great microwave oven experiment (that I learned from Lynn Cominsky at Sonoma State) is measuring the speed of light (or the frequency of the microwaves emitted) using marshmallows. </p>
<p>1. Cut a bunch of marshmallows in half (or use small ones) and cover a plate with them. </p>
<p>2. Take the rotating platter out of the microwave and place the plate inside. The rotating platter helps cook your food evenly by spinning the food in and out of the microwave&#8217;s &#8216;hot spots&#8217;, but for this experiment we want the marshmallows not to cook evenly. The microwaves are emitted from one side of the microwave (where the emitter is located) and bounce off the opposite side, creating standing waves. The anti-nodes (crests) of the standing waves are the &#8216;hot spots&#8217; I mentioned earlier. The marshmallows will burn along these anti-nodes. </p>
<p>3. Measure the distance between the burn marks. This distance is the wavelength of the microwaves emitted by your microwave.</p>
<p>4. Use this simple wave equation to verify either the speed of light (if your microwave lists its frequency on the back panel) or to determine the frequency of your microwave (given that the speed of light is approximately 3&#215;10^8m/s). </p>
<div class="wp-caption"><a href="http://en.wikipedia.org/wiki/Wavelength" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);"><img alt="wave equation" src="http://upload.wikimedia.org/math/a/1/0/a100432cfbaa6417ffccfab51609f53b.png" title="wave equation" width="57" height="40" /></a> wavelength = velocity/frequency</div>
<p>Don&#8217;t forget to convert your units!</p>
				</div>

				<p class="postmetadata">Tags: <a href="http://efnx.com/tag/personal/" rel="tag">Personal</a>, <a href="http://efnx.com/tag/physics/" rel="tag">physics</a>, <a href="http://efnx.com/tag/random/" rel="tag">random</a><br /> Posted in <a href="http://efnx.com/topics/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a> |   <a href="http://efnx.com/measuring-the-speed-of-light-using-marshmallows-in-a-microwave/#comments" title="Comment on Measuring the speed of light using marshmallows in a microwave">1 Comment &#187;</a></p>
			</div>

		
			<div class="post" id="post-369">
				<h2><a href="http://efnx.com/the-ani-programming-language/" rel="bookmark" title="Permanent Link to The ANI Programming Language">The ANI Programming Language</a></h2>
				<small>November 12th, 2010 <!-- by Schell --></small>

				<div class="entry">
					<p>Oh man, I just read about ANI on hackurls.com and it looks amazing. I can&#8217;t wait to get my hands dirty.</p>
<p>http://code.google.com/p/anic/</p>
				</div>

				<p class="postmetadata">Tags: <a href="http://efnx.com/tag/ani/" rel="tag">ANI</a><br /> Posted in <a href="http://efnx.com/topics/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a> |   <a href="http://efnx.com/the-ani-programming-language/#comments" title="Comment on The ANI Programming Language">1 Comment &#187;</a></p>
			</div>

		
			<div class="post" id="post-360">
				<h2><a href="http://efnx.com/smugmug-gallery-viewer-javascript/" rel="bookmark" title="Permanent Link to Smugmug Gallery Viewer &#8211; Javascript">Smugmug Gallery Viewer &#8211; Javascript</a></h2>
				<small>November 8th, 2010 <!-- by Schell --></small>

				<div class="entry">
					<p>I wrote a smugmug gallery viewer in javascript. To my knowledge it&#8217;s the only js gallery specifically geared at viewing smugmug account galleries. Clone the git repo (or download a tarball) <a href="https://github.com/schell/smugmugjsgallery" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);" title="javascript smugmug gallery viewer">here</a>. I&#8217;ve used two js libs that I wrote recently, <a href="https://github.com/schell/go" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);" title="evented javascript control flow">go</a> (an evented control flow based on callbacks) and <a href="https://github.com/schell/heyjacks" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);" title="asyncronous jsonp requests">heyjacks</a> (an asyncronous jsonp request helper). Let me know what you think.</p>
				</div>

				<p class="postmetadata">Tags: <a href="http://efnx.com/tag/javascript-2/" rel="tag">javascript</a>, <a href="http://efnx.com/tag/photos/" rel="tag">photos</a>, <a href="http://efnx.com/tag/smugmug/" rel="tag">smugmug</a><br /> Posted in <a href="http://efnx.com/topics/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a> |   <a href="http://efnx.com/smugmug-gallery-viewer-javascript/#respond" title="Comment on Smugmug Gallery Viewer &#8211; Javascript">No Comments &#187;</a></p>
			</div>

		
			<div class="post" id="post-357">
				<h2><a href="http://efnx.com/no-longer-freelancing/" rel="bookmark" title="Permanent Link to No longer freelancing">No longer freelancing</a></h2>
				<small>October 8th, 2010 <!-- by Schell --></small>

				<div class="entry">
					<p>I&#8217;ve signed on with my long time client <a href="http://synapsegroup.com" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://synapsegroup.com']);" title="Synapse Group">Synapse Group Inc</a>. This means more time coding for work (and maybe less time coding for fun). I have a couple speed projects in the works though, like continuing work on <a href="http://github.com/schell/node.rtaudio" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);" "rtaudio bindings for node.js">RTAudio bindings for Node.js</a>. I&#8217;ve also switched names at github, which is inconvenient &#8211; but hopefully beneficial in the long run.</p>
				</div>

				<p class="postmetadata"> Posted in <a href="http://efnx.com/topics/personal/" title="View all posts in Personal" rel="category tag">Personal</a> |   <a href="http://efnx.com/no-longer-freelancing/#respond" title="Comment on No longer freelancing">No Comments &#187;</a></p>
			</div>

		
			<div class="post" id="post-350">
				<h2><a href="http://efnx.com/blender-2-5-object-export-to-javascript-for-webgl/" rel="bookmark" title="Permanent Link to Blender 2.5 object export to Javascript for WebGL">Blender 2.5 object export to Javascript for WebGL</a></h2>
				<small>September 8th, 2010 <!-- by Schell --></small>

				<div class="entry">
					<p>I&#8217;ve written a small python script to export a blender object to javascript for use with WebGL (or whatever else you might be running 3d in). It currently copies the entire file output to the clipboard, and only works on mac, but stick around for a write-to-file cross platform version shortly. You can get the script at my github.<br />
<a href="http://gist.github.com/569929" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://gist.github.com']);">blender 2.5 to javascript</a></p>
				</div>

				<p class="postmetadata">Tags: <a href="http://efnx.com/tag/blender-2/" rel="tag">blender</a>, <a href="http://efnx.com/tag/export/" rel="tag">export</a>, <a href="http://efnx.com/tag/javascript-2/" rel="tag">javascript</a>, <a href="http://efnx.com/tag/python-2/" rel="tag">python</a>, <a href="http://efnx.com/tag/webgl-2/" rel="tag">webgl</a><br /> Posted in <a href="http://efnx.com/topics/blender/" title="View all posts in Blender" rel="category tag">Blender</a>, <a href="http://efnx.com/topics/javascript/" title="View all posts in Javascript" rel="category tag">Javascript</a>, <a href="http://efnx.com/topics/python/" title="View all posts in Python" rel="category tag">Python</a>, <a href="http://efnx.com/topics/webgl/" title="View all posts in WebGL" rel="category tag">WebGL</a> |   <a href="http://efnx.com/blender-2-5-object-export-to-javascript-for-webgl/#respond" title="Comment on Blender 2.5 object export to Javascript for WebGL">No Comments &#187;</a></p>
			</div>

		
			<div class="post" id="post-303">
				<h2><a href="http://efnx.com/bourtange-postmortem/" rel="bookmark" title="Permanent Link to Bourtange Postmortem (ILGE 2010)">Bourtange Postmortem (ILGE 2010)</a></h2>
				<small>August 11th, 2010 <!-- by Schell --></small>

				<div class="entry">
					<p><a href="http://github.com/schell/kabukitheatre.bourtange" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">Bourtange @ github</a></p>
<p>Overall I&#8217;m satisfied with my lisp game. My major goals were to learn lisp (to a shallow yet useable degree), learn a little about functional programming and last but not least to end up with a playable game. I feel I hit those goals and as an added bonus I&#8217;ve enjoyed programming in lisp so much that I&#8217;m looking for another project to start working on. That said, here is an explanation of what went into the game, what went right and what went wrong.</p>
<p><strong>Built with</strong><br />
I made the bulk of the game using sbcl with cl-opengl for graphics and TextMate for editing. I wrote some custom &#8216;build&#8217; scripts to send my monolithic game file to the sbcl repl. The development cycle was similar to what you&#8217;d expect from programming in C, &#8216;write->compile->test&#8217;. Later on after my first version I got help from the guys at #lispgames (irc.freenode.net) (sykopomp, xristos, 3b) with setting up emacs and using slime-connect, as well as setting up a .asd for my game. Using the interactive dev env that emacs + slime enables is really a liberating way to program.</p>
<p><strong>What went right</strong><br />
* My game is playable! More often than not I leave my game projects in an unplayable (sometimes not compilable) state. I&#8217;m proud to say that this game is playable.<br />
* The difficulty of the game goes up over time.<br />
* I tried to program in a very functional way, which worked most of the time. It enabled my program to easily reset, and should allow for a fairly easy save function, but I never got into file i/o to finish that.<br />
* The colors are cool</p>
<p><strong>What went wrong</strong><br />
* Writing in a functional way messed me up a little. I tried my best to make things functional, without really having a firm grasp on what that means. I would give up on writing functionally and go back to just making things work when the going got tough. This means that in the end, I feel the code is naive and dirty.<br />
* Collision detection is very simple. This would be fine if things didn&#8217;t move very fast, but when using gravitational equations for motion, things get very fast when they get very close. In order to keep the collision detection simple I put limits on how fast things can move. It works, but it&#8217;s dirty.<br />
* After something gets hit I recalculate 360 points of an arc to display the life left. Halfway through development I wanted to have all the circles be drawn using ONE list of points generated ONCE. I could draw some percentage of the points to represent life lost. When I tried to refactor for this, drawing became very, very broken. If I had more time to work this out I think the game would be much faster and much smoother.</p>
<p>All in all, I&#8217;m pleased. I hope you play my game, and I hope you have fun playing it!</p>
				</div>

				<p class="postmetadata">Tags: <a href="http://efnx.com/tag/contest/" rel="tag">contest</a>, <a href="http://efnx.com/tag/lisp/" rel="tag">lisp</a><br /> Posted in <a href="http://efnx.com/topics/lisp/" title="View all posts in lisp" rel="category tag">lisp</a> |   <a href="http://efnx.com/bourtange-postmortem/#comments" title="Comment on Bourtange Postmortem (ILGE 2010)">2 Comments &#187;</a></p>
			</div>

		
			<div class="post" id="post-299">
				<h2><a href="http://efnx.com/my-lisp-game-is-done/" rel="bookmark" title="Permanent Link to My Lisp Game is Done!">My Lisp Game is Done!</a></h2>
				<small>August 9th, 2010 <!-- by Schell --></small>

				<div class="entry">
					<p>I just checked in the &#8216;final&#8217; code to github. Check out my first program in lisp!<br />
<div class="wp-caption aligncenter" style="width: 410px"><a href="http://github.com/schell/kabukitheatre.bourtange/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);"><img alt="Bourtange, a fort defense game writting in Lisp" src="http://github.com/schell/kabukitheatre.bourtange/raw/master/screenshot.png" title="Bourtange" width="400" height="300" /></a><p class="wp-caption-text">Bourtange!</p></div></p>
				</div>

				<p class="postmetadata">Tags: <a href="http://efnx.com/tag/game/" rel="tag">game</a>, <a href="http://efnx.com/tag/lisp/" rel="tag">lisp</a><br /> Posted in <a href="http://efnx.com/topics/lisp/" title="View all posts in lisp" rel="category tag">lisp</a> |   <a href="http://efnx.com/my-lisp-game-is-done/#respond" title="Comment on My Lisp Game is Done!">No Comments &#187;</a></p>
			</div>

		
			<div class="post" id="post-291">
				<h2><a href="http://efnx.com/lisp-game-progress/" rel="bookmark" title="Permanent Link to Lisp Game Progress">Lisp Game Progress</a></h2>
				<small>August 1st, 2010 <!-- by Schell --></small>

				<div class="entry">
					<p>So after my first (almost) <a href="http://efnx.com/lisp-game-competition/" >30 days of learning lisp</a>, I have a playable game. The gameplay is a cross between <a href="http://en.wikipedia.org/wiki/Tower_defense" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);">tower defense</a> and <a href="http://en.wikipedia.org/wiki/Orbient" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);">orbient</a>. You control a planet-base (the core) in the center of the screen. This core comes equipped with one weapon, the core-blast. Enemies are generated at the edge of the screen, in the spawning-belt, and are drawn toward your core by gravity. When enemies collide with the core, the core looses life. Life is displayed as a green outline around the core and when your core is out of life, it explodes. When an enemy dies, which happens either by colliding with your core, being hit by a blast or being thrown past the spawning belt, you gain resources. Resources are displayed by purple boxes in the upper left. You can spend these resources on extra cores and weapons in the weapon-store, which is displayed in the upper right. Below is a screen shot of the game in action.<br />
<a href="http://efnx.com/domains/efnx.com/wp-content/uploads/2010/08/Screen-shot-2010-08-01-at-12.03.49-PM.png"  rel="lightbox[291]"><img src="http://efnx.com/domains/efnx.com/wp-content/uploads/2010/08/Screen-shot-2010-08-01-at-12.03.49-PM-300x243.png" alt="Screen Shot" title="Screen shot 2010-08-01 at 12.03.49 PM" width="300" height="243" class="alignleft size-medium wp-image-290" /></a><br />
A lot of work still remains to be done, but I hit the 30 day deadline with this first draft. Luckily, the contest hosts have <a href="http://dto.github.com/notebook/2010expo.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://dto.github.com']);">extended the due date</a> to August 10th. By then I plan to fix some bugs, add more weapons, enemies, a game-over screen and do some optimization.  I feel accomplished after learning lisp, though I know I&#8217;ve only seen the tip of the iceberg and have found my new favorite language. To the hosts of the competition, thanks! You guys have made me a better programer. </p>
<p>The source to the game is <a href="http://github.com/schell/kabukitheatre.bourtange" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">here</a> and you can download and build the game as you please. Send me a message with your thoughts on my game or my code!</p>
				</div>

				<p class="postmetadata">Tags: <a href="http://efnx.com/tag/game/" rel="tag">game</a>, <a href="http://efnx.com/tag/lisp/" rel="tag">lisp</a><br /> Posted in <a href="http://efnx.com/topics/lisp/" title="View all posts in lisp" rel="category tag">lisp</a> |   <a href="http://efnx.com/lisp-game-progress/#respond" title="Comment on Lisp Game Progress">No Comments &#187;</a></p>
			</div>

		
		<div class="navigation">
			<div class="alignleft"><a href="http://efnx.com/page/3/" >&laquo; Older Entries</a></div>
			<div class="alignright"><a href="http://efnx.com/" >Newer Entries &raquo;</a></div>
		</div>

			<div class="entry">
			<br />
			<div id="wario"></div>
			<br />
		</div>
	</div>

	<div id="sidebar">
		<ul>
			<li id="pages-2" class="widget widget_pages"><h2 class="widgettitle">Pages</h2>		<ul>
			<li class="page_item page-item-2"><a href="http://efnx.com/about/">About</a></li>
		</ul>
		</li><li id="search-2" class="widget widget_search"><form method="get" id="searchform" action="http://efnx.com/">
<div><input type="text" value="" name="s" id="s" />
<input type="submit" id="searchsubmit" value="Search" />
</div>
</form>
</li><li id="text-2" class="widget widget_text"><h2 class="widgettitle">Badges!</h2>			<div class="textwidget"><a href="http://www.haskellers.com/user/2133"><img src="http://www.haskellers.com/static/badge.png" alt="I'm a Haskeller">
</a>
<a href="http://internetdefenseleague.org" onclick="javascript:_gaq.push(['_trackEvent','outbound-widget','http://internetdefenseleague.org']);"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
		</li><li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>		<ul>
			<li><a href='http://efnx.com/2013/05/' title='May 2013'>May 2013</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2013/04/' title='April 2013'>April 2013</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2013/01/' title='January 2013'>January 2013</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2012/12/' title='December 2012'>December 2012</a>&nbsp;(2)</li>
	<li><a href='http://efnx.com/2012/11/' title='November 2012'>November 2012</a>&nbsp;(4)</li>
	<li><a href='http://efnx.com/2012/05/' title='May 2012'>May 2012</a>&nbsp;(2)</li>
	<li><a href='http://efnx.com/2012/01/' title='January 2012'>January 2012</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2010/11/' title='November 2010'>November 2010</a>&nbsp;(3)</li>
	<li><a href='http://efnx.com/2010/10/' title='October 2010'>October 2010</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2010/09/' title='September 2010'>September 2010</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2010/08/' title='August 2010'>August 2010</a>&nbsp;(3)</li>
	<li><a href='http://efnx.com/2010/07/' title='July 2010'>July 2010</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2010/04/' title='April 2010'>April 2010</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2009/12/' title='December 2009'>December 2009</a>&nbsp;(2)</li>
	<li><a href='http://efnx.com/2009/09/' title='September 2009'>September 2009</a>&nbsp;(2)</li>
	<li><a href='http://efnx.com/2009/07/' title='July 2009'>July 2009</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2009/06/' title='June 2009'>June 2009</a>&nbsp;(4)</li>
	<li><a href='http://efnx.com/2009/05/' title='May 2009'>May 2009</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2009/04/' title='April 2009'>April 2009</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2009/03/' title='March 2009'>March 2009</a>&nbsp;(2)</li>
	<li><a href='http://efnx.com/2009/02/' title='February 2009'>February 2009</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2008/11/' title='November 2008'>November 2008</a>&nbsp;(2)</li>
	<li><a href='http://efnx.com/2008/10/' title='October 2008'>October 2008</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2008/09/' title='September 2008'>September 2008</a>&nbsp;(4)</li>
	<li><a href='http://efnx.com/2008/08/' title='August 2008'>August 2008</a>&nbsp;(2)</li>
	<li><a href='http://efnx.com/2008/07/' title='July 2008'>July 2008</a>&nbsp;(1)</li>
	<li><a href='http://efnx.com/2008/02/' title='February 2008'>February 2008</a>&nbsp;(2)</li>
	<li><a href='http://efnx.com/2008/01/' title='January 2008'>January 2008</a>&nbsp;(4)</li>
	<li><a href='http://efnx.com/2007/12/' title='December 2007'>December 2007</a>&nbsp;(3)</li>
	<li><a href='http://efnx.com/2007/11/' title='November 2007'>November 2007</a>&nbsp;(6)</li>
	<li><a href='http://efnx.com/2007/10/' title='October 2007'>October 2007</a>&nbsp;(4)</li>
		</ul>
</li>		</ul>
	</div>



<hr />
<div id="follow-me">
	<a href="http://github.com/schell" title="schell/efnx at github">Follow me on GitHub</a> 
	<br />
	<a href="https://plus.google.com/115597057831503979302/" title="schell at google+">Follow me on Google+</a>
	<br />
	<a href="http://twitter.com/#!/schellsan" title="schell/efnx/clckclcks at github">Follow me on Twitter</a>
</div>
	<div id="footer">
	<div style="padding:10px; width:579px; text-align:center;">
		Thrilling.<br />
		EFNX is proudly powered by
		<a href="http://wordpress.org/">WordPress</a>
		<br /><a href="http://efnx.com/feed/">Entries (RSS)</a>
		and <a href="http://efnx.com/comments/feed/">Comments (RSS)</a>. 

		<!-- 22 queries. 0.331 seconds. -->
	</div>
</div>
</div>

<!-- Hacked on till subordinated by Schell Scivally -->

	<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var JQLBSettings = {"fitToScreen":"0","resizeSpeed":"400","displayDownloadLink":"0","navbarOnTop":"0","loopImages":"","resizeCenter":"","marginSize":"","linkTarget":"_self","help":"","prevLinkTitle":"previous image","nextLinkTitle":"next image","prevLinkText":"\u00ab Previous","nextLinkText":"Next \u00bb","closeTitle":"close image gallery","image":"Image ","of":" of ","download":"Download"};
/* ]]> */
</script>
<script type='text/javascript' src='http://efnx.com/wp-content/plugins/wp-lightbox-2/wp-lightbox-2.min.js?ver=1.3.4.1'></script>
</body>
</html>

