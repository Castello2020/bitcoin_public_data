http://thomassileo.com/blog/2013/08/20/backing-up-your-tweets-to-camlistore-with-python-and-camlipy/
HTTP/1.1 200 OK
Server: nginx/1.2.7
Date: Tue, 22 Jul 2014 17:25:39 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 40090
Last-Modified: Fri, 16 May 2014 12:50:27 GMT
Connection: close
Accept-Ranges: bytes

<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" type="text/css" href="//thomassileo.s3.amazonaws.com/style.css">
  <!-- <link rel="stylesheet/less" type="text/css" href="/theme/css/style.less">
  <script src="/theme/js/less-1.3.3.min.js" type="text/javascript"></script> -->
  <link rel="stylesheet" type="text/css" href="//thomassileo.s3.amazonaws.com/pygments.min.css">
  <link rel="stylesheet" type="text/css" href="/theme/css/ipython.css">
  <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400italic,400,600,600italic">
  <link rel="stylesheet" media="screen" href="http://openfontlibrary.org/face/cosmic-sans-neue-mono" rel="stylesheet" type="text/css"/>
  <link href="//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.min.css" rel="stylesheet">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@trucsdedev">
  <meta name="twitter:creator" content="@trucsdedev">
  <meta name="twitter:domain" content="thomassileo.com">
  <link rel="canonical" href="http://thomassileo.com/blog/2013/08/20/backing-up-your-tweets-to-camlistore-with-python-and-camlipy/">
<meta name="twitter:title" content="Backing up your tweets to Camlistore with Python and Camlipy">
<meta name="twitter:description" content="If like me, you want to backup everything you ever published, it makes sense to backup your tweets. Camlistore, also known as personal ...">
<style type="text/css">
main article div#article_text .ipynb pre {
  background: none;
  margin: 0;
  padding: 4px;
}
</style>
  <meta charset="utf-8" />
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width; initial-scale=1.0">
  <meta name="author" content="Thomas Sileo">

    <link href="http://thomassileo.com/atom.xml" type="application/atom+xml" rel="alternate" title="Thomas Sileo Full Atom Feed" />
    
  <meta name="date" contents="2013-08-20 15:00:00" />

  <title>
    Backing up your tweets to Camlistore with Python and Camlipy - Thomas Sileo  </title>
</head>

<body>
  <aside>
    <div id="user_meta">
      <a href="http://thomassileo.com">
        <img src="http://thomassileo.s3.amazonaws.com/logo.jpg" alt="logo" class="user_logo">
      </a>
      <h2><a href="http://thomassileo.com">Thomas Sileo</a></h2>
      <p>/home/thomas</p>
      <ul>
                                <li><a href="http://thomassileo.com/about/">About</a></li>                                        <li><a href="http://thomassileo.com/search/">Search</a></li>                        <li><a href="/archives.html">Archives</a></li>
                        <li><a href="https://github.com/tsileo"><i class="icon-large icon-github"></i> GitHub</a></li>
                <li><a href="https://twitter.com/trucsdedev"><i class="icon-large icon-twitter"></i> Twitter</a></li>
              </ul>
    </div>
  </aside>

  <main>
        <article>
  <div id="article_title">
<h1><a href="http://thomassileo.com/blog/2013/08/20/backing-up-your-tweets-to-camlistore-with-python-and-camlipy/" rel="bookmark" title="Permalink to Backing up your tweets to Camlistore with Python and Camlipy">Backing up your tweets to Camlistore with Python and Camlipy</a></h1>

    <p class="article_meta"><time datetime="2013-08-20T15:00:00" pubdate>Tue 20 August 2013</time> by <a rel="author" href="https://plus.google.com/105383704566845547994">Thomas Sileo</a></p>
  </div>
  <div id="article_text">
    <div class="ipynb">
<div class="text_cell_render border-box-sizing rendered_html">
<p>If like me, you want to backup everything you ever published, it makes sense to backup your tweets. <a href="http://camlistore.org/">Camlistore, also known as personal storage system for life</a> seems a perfect fit for the job.</p>
<p>I chose to use Python since I recently created a <a href="https://camlipy.readthedocs.org/en/latest/">Python client for Camlistore, Camlipy</a> and I already played with Twitter API using <a href="http://docs.python-requests.org/en/latest/">requests</a> (see <a href="http://thomassileo.com/blog/2013/01/25/using-twitter-rest-api-v1-dot-1-with-python/">using Twitter API v1.1 with Python</a>).</p>
<h2 class="ipynb" id="requirements">Requirements</h2>
<pre class="ipynb"><code>$ sudo pip install request request_oauthlib camlipy</code></pre>
<h2 class="ipynb" id="twitter-api">Twitter API</h2>
<p>Here is the Twitter API OAuth part, from my previous article, you must set your API keys and run the script to generate your OAuth tokens.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[1]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">requests_oauthlib</span> <span class="kn">import</span> <span class="n">OAuth1</span>
<span class="kn">from</span> <span class="nn">urlparse</span> <span class="kn">import</span> <span class="n">parse_qs</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">locale</span>

<span class="kn">import</span> <span class="nn">requests</span>

<span class="n">REQUEST_TOKEN_URL</span> <span class="o">=</span> <span class="s">&quot;https://api.twitter.com/oauth/request_token&quot;</span>
<span class="n">AUTHORIZE_URL</span> <span class="o">=</span> <span class="s">&quot;https://api.twitter.com/oauth/authorize?oauth_token=&quot;</span>
<span class="n">ACCESS_TOKEN_URL</span> <span class="o">=</span> <span class="s">&quot;https://api.twitter.com/oauth/access_token&quot;</span>

<span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&quot;XXXXXXXXX&quot;</span>
<span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&quot;XXXXXXXXX&quot;</span>

<span class="n">OAUTH_TOKEN</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
<span class="n">OAUTH_TOKEN_SECRET</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>

<span class="n">TWITTER_API_TIMELINE</span> <span class="o">=</span> <span class="s">&#39;https://api.twitter.com/1.1/statuses/user_timeline.json&#39;</span>


<span class="k">def</span> <span class="nf">setup_oauth</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;Authorize your app via identifier.&quot;&quot;&quot;</span>
    <span class="c"># Request token</span>
    <span class="n">oauth</span> <span class="o">=</span> <span class="n">OAuth1</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span> <span class="n">client_secret</span><span class="o">=</span><span class="n">CONSUMER_SECRET</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">REQUEST_TOKEN_URL</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="n">oauth</span><span class="p">)</span>
    <span class="n">credentials</span> <span class="o">=</span> <span class="n">parse_qs</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>

    <span class="n">resource_owner_key</span> <span class="o">=</span> <span class="n">credentials</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;oauth_token&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">resource_owner_secret</span> <span class="o">=</span> <span class="n">credentials</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;oauth_token_secret&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

    <span class="c"># Authorize</span>
    <span class="n">authorize_url</span> <span class="o">=</span> <span class="n">AUTHORIZE_URL</span> <span class="o">+</span> <span class="n">resource_owner_key</span>
    <span class="k">print</span> <span class="s">&#39;Please go here and authorize: &#39;</span> <span class="o">+</span> <span class="n">authorize_url</span>

    <span class="n">verifier</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;Please input the verifier: &#39;</span><span class="p">)</span>
    <span class="n">oauth</span> <span class="o">=</span> <span class="n">OAuth1</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span>
                   <span class="n">client_secret</span><span class="o">=</span><span class="n">CONSUMER_SECRET</span><span class="p">,</span>
                   <span class="n">resource_owner_key</span><span class="o">=</span><span class="n">resource_owner_key</span><span class="p">,</span>
                   <span class="n">resource_owner_secret</span><span class="o">=</span><span class="n">resource_owner_secret</span><span class="p">,</span>
                   <span class="n">verifier</span><span class="o">=</span><span class="n">verifier</span><span class="p">)</span>

    <span class="c"># Finally, Obtain the Access Token</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">ACCESS_TOKEN_URL</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="n">oauth</span><span class="p">)</span>
    <span class="n">credentials</span> <span class="o">=</span> <span class="n">parse_qs</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">credentials</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;oauth_token&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">secret</span> <span class="o">=</span> <span class="n">credentials</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;oauth_token_secret&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">token</span><span class="p">,</span> <span class="n">secret</span>


<span class="k">def</span> <span class="nf">get_oauth</span><span class="p">():</span>
    <span class="n">oauth</span> <span class="o">=</span> <span class="n">OAuth1</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span>
                   <span class="n">client_secret</span><span class="o">=</span><span class="n">CONSUMER_SECRET</span><span class="p">,</span>
                   <span class="n">resource_owner_key</span><span class="o">=</span><span class="n">OAUTH_TOKEN</span><span class="p">,</span>
                   <span class="n">resource_owner_secret</span><span class="o">=</span><span class="n">OAUTH_TOKEN_SECRET</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">oauth</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">OAUTH_TOKEN</span><span class="p">:</span>
    <span class="n">token</span><span class="p">,</span> <span class="n">secret</span> <span class="o">=</span> <span class="n">setup_oauth</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&quot;OAUTH_TOKEN: &quot;</span> <span class="o">+</span> <span class="n">token</span>
    <span class="k">print</span> <span class="s">&quot;OAUTH_TOKEN_SECRET: &quot;</span> <span class="o">+</span> <span class="n">secret</span>
    <span class="k">print</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>Now we can call the Twitter API, we'll hit the <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline">statuses/user_timeline endpoint</a> (check out <a href="https://dev.twitter.com/docs/working-with-timelines">working with timelines</a> if needed).</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[2]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">def</span> <span class="nf">fetch_tweets</span><span class="p">(</span><span class="n">since_id</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">max_id</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">200</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot; Fetch tweets. &quot;&quot;&quot;</span>
    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;count&#39;</span><span class="p">:</span> <span class="n">count</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">since_id</span><span class="p">:</span>
        <span class="n">params</span><span class="p">[</span><span class="s">&#39;since_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">since_id</span>
    <span class="k">if</span> <span class="n">max_id</span><span class="p">:</span>
        <span class="n">params</span><span class="p">[</span><span class="s">&#39;max_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">max_id</span>

    <span class="n">oauth</span> <span class="o">=</span> <span class="n">get_oauth</span><span class="p">()</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">TWITTER_API_TIMELINE</span><span class="p">,</span>
                     <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="n">oauth</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>Here is the <code>backup_timeline</code> function that automatically handle the <code>max_id</code> paramaters since we can only retrieve 200 tweets by API call.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[3]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">def</span> <span class="nf">backup_timeline</span><span class="p">(</span><span class="n">since_id</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">max_id</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">200</span><span class="p">):</span>
    <span class="n">tweets</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">batch</span> <span class="o">=</span> <span class="n">fetch_tweets</span><span class="p">(</span><span class="n">since_id</span><span class="o">=</span><span class="n">since_id</span><span class="p">,</span> <span class="n">max_id</span><span class="o">=</span><span class="n">max_id</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="n">count</span><span class="p">)</span>
        <span class="n">tweets</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">batch</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">tweets</span><span class="p">:</span>
            <span class="n">max_id</span> <span class="o">=</span> <span class="n">tweets</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">batch</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">return</span> <span class="n">tweets</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>Now we can fetch our timeline (it will return only the first 3200 tweets, this is the API limit).</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[4]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">tweets</span> <span class="o">=</span> <span class="n">backup_timeline</span><span class="p">()</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>And we need to retrieve the most recent id for the next time we will backup.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[5]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">since_id</span> <span class="o">=</span> <span class="n">tweets</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>Check that <code>backup_timeline</code> result is empty with <code>since_id</code>.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[6]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">backup_timeline</span><span class="p">(</span><span class="n">since_id</span><span class="o">=</span><span class="n">since_id</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="vbox output_wrapper">
<div class="output vbox">
<div class="hbox output_area"><div class="prompt output_prompt">
    Out[6]:</div>
<div class="box-flex1 output_subarea output_pyout">
<pre class="ipynb">
[]
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<h2 class="ipynb" id="getting-started-with-camlistore-and-camlipy">Getting started with Camlistore and Camlipy</h2>
<p>If you have never heard about <a href="http://camlistore.org/">Camlistore</a> before, you should read the website, and the <a href="http://camlistore.org/docs/overview">project overview</a>. You should also check out <a href="https://camlipy.readthedocs.org/en/latest/">Camlipy documentation</a>.</p>
<p>I am assuming you have at least a little knowledge about how Camlistore works.</p>
<p>Each <a href="http://camlistore.org/docs/terms#blob">blob</a> is identified by its unique <a href="http://camlistore.org/docs/terms#blobref">blobref</a>. A <strong>blobref</strong> looks like <strong>sha1-25f2b42fae7398bc8857ed17d56d7d1e072c9832</strong>.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[7]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="kn">from</span> <span class="nn">camlipy</span> <span class="kn">import</span> <span class="n">Camlistore</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">Camlistore</span><span class="p">(</span><span class="s">&#39;http://localhost:3179&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>First, we need to create a <a href="http://camlistore.org/docs/terms#permanode">permanode</a>, it will hold the static set blobref reference, since we will create a new static set each time we perform a backup.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[8]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">p</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">permanode_by_title</span><span class="p">(</span><span class="s">&#39;twitter_backups&#39;</span><span class="p">,</span> <span class="n">create</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[9]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">p</span>
</pre></div>
</div>
</div>
<div class="vbox output_wrapper">
<div class="output vbox">
<div class="hbox output_area"><div class="prompt output_prompt">
    Out[9]:</div>
<div class="box-flex1 output_subarea output_pyout">
<pre class="ipynb">
&lt;Schema Permanode:sha1-25f2b42fae7398bc8857ed17d56d7d1e072c9832&gt;
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>Next, we create a new static set, which will contain each tweets blobrefs (most recent first), with the <code>add_to_static_set</code> helper, and we add this set to a set.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[10]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">s</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">add_to_static_set</span><span class="p">([</span><span class="n">c</span><span class="o">.</span><span class="n">put_blob</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">tweet</span><span class="p">))</span> <span class="k">for</span> <span class="n">tweet</span> <span class="ow">in</span> <span class="n">tweets</span><span class="p">])</span>
<span class="n">p</span><span class="o">.</span><span class="n">set_camli_content</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">add_to_static_set</span><span class="p">([</span><span class="n">s</span><span class="p">]))</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>Finally we can store the newest id, <code>since_id</code> for the next search, in a permanode attribute (permanode attribute must be str), so we create a new claim.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[11]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">p</span><span class="o">.</span><span class="n">set_attr</span><span class="p">(</span><span class="s">&#39;since_id&#39;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">since_id</span><span class="p">))</span>
</pre></div>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[12]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">p</span><span class="o">.</span><span class="n">get_attr</span><span class="p">(</span><span class="s">&#39;since_id&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="vbox output_wrapper">
<div class="output vbox">
<div class="hbox output_area"><div class="prompt output_prompt">
    Out[12]:</div>
<div class="box-flex1 output_subarea output_pyout">
<pre class="ipynb">
u&apos;369579788119199746&apos;
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<h3 class="ipynb" id="the-final-script">The final script</h3>
<p>Without Twitter API code.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[13]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Fetch the permanode</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">permanode_by_title</span><span class="p">(</span><span class="s">&#39;twitter_backups&#39;</span><span class="p">)</span>

<span class="c"># Retrieve since_id if existing</span>
<span class="n">since_id</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">get_attr</span><span class="p">(</span><span class="s">&#39;since_id&#39;</span><span class="p">))</span>

<span class="c"># Try to retrieve the existing static set</span>
<span class="n">static_set_blobref</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">get_camli_content</span><span class="p">()</span>

<span class="c"># A static set already exists, so we load it</span>
<span class="k">if</span> <span class="n">static_set_blobref</span><span class="p">:</span>
    <span class="n">static_set</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">static_set</span><span class="p">(</span><span class="n">static_set_blobref</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="c"># We create a new static set</span>
    <span class="n">static_set</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">static_set</span><span class="p">()</span>

<span class="c"># Update/set the new tweets blobrefs</span>
<span class="n">tweets_blobrefs</span> <span class="o">=</span> <span class="p">[</span><span class="n">c</span><span class="o">.</span><span class="n">put_blob</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">tweet</span><span class="p">))</span> <span class="k">for</span> <span class="n">tweet</span> <span class="ow">in</span> <span class="n">backup_timeline</span><span class="p">(</span><span class="n">since_id</span><span class="o">=</span><span class="n">since_id</span><span class="p">)]</span>
<span class="k">if</span> <span class="n">tweets_blobrefs</span><span class="p">:</span>
    <span class="n">new_static_set_blobref</span> <span class="o">=</span> <span class="n">static_set</span><span class="o">.</span><span class="n">update</span><span class="p">([</span><span class="n">c</span><span class="o">.</span><span class="n">add_to_static_set</span><span class="p">(</span><span class="n">tweets_blobrefs</span><span class="p">)])</span>
    <span class="n">p</span><span class="o">.</span><span class="n">set_camli_content</span><span class="p">(</span><span class="n">new_static_set_blobref</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<h3 class="ipynb" id="accessing-tweets">Accessing tweets</h3>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[14]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">p2</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">permanode_by_title</span><span class="p">(</span><span class="s">&#39;twitter_backups&#39;</span><span class="p">,</span> <span class="n">create</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[15]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">s2</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">static_set</span><span class="p">(</span><span class="n">p2</span><span class="o">.</span><span class="n">get_camli_content</span><span class="p">())</span>
</pre></div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<p>To retrieve the tweets starting from the most recent, we must iterate the list upside down.</p>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[16]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">tweets</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">static_set_blobref</span> <span class="ow">in</span> <span class="n">s2</span><span class="o">.</span><span class="n">members</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
    <span class="n">static_set</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">static_set</span><span class="p">(</span><span class="n">static_set_blobref</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">tweet_data</span> <span class="ow">in</span> <span class="n">static_set</span><span class="o">.</span><span class="n">members</span><span class="p">:</span>
        <span class="n">tweet</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">get_blob</span><span class="p">(</span><span class="n">tweet_data</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
        <span class="n">tweets</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell vbox">
<div class="input hbox">
<div class="prompt input_prompt">
In&nbsp;[17]:
</div>
<div class="input_area box-flex1">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">tweets</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
</div>
<div class="vbox output_wrapper">
<div class="output vbox">
<div class="hbox output_area"><div class="prompt output_prompt">
    Out[17]:</div>
<div class="box-flex1 output_subarea output_pyout">
<pre class="ipynb">
{u&apos;contributors&apos;: None,
 u&apos;coordinates&apos;: None,
 u&apos;created_at&apos;: u&apos;Mon Aug 19 22:01:02 +0000 2013&apos;,
 u&apos;entities&apos;: {u&apos;hashtags&apos;: [{u&apos;indices&apos;: [49, 60], u&apos;text&apos;: u&apos;Camlistore&apos;}],
  u&apos;symbols&apos;: [],
  u&apos;urls&apos;: [{u&apos;display_url&apos;: u&apos;camlipy.readthedocs.org/en/latest/&apos;,
    u&apos;expanded_url&apos;: u&apos;https://camlipy.readthedocs.org/en/latest/&apos;,
    u&apos;indices&apos;: [61, 84],
    u&apos;url&apos;: u&apos;https://t.co/9GNCYTvvCu&apos;}],
  u&apos;user_mentions&apos;: []},
 u&apos;favorite_count&apos;: 0,
 u&apos;favorited&apos;: False,
 u&apos;geo&apos;: None,
 u&apos;id&apos;: 369579788119199746,
 u&apos;id_str&apos;: u&apos;369579788119199746&apos;,
 u&apos;in_reply_to_screen_name&apos;: None,
 u&apos;in_reply_to_status_id&apos;: None,
 u&apos;in_reply_to_status_id_str&apos;: None,
 u&apos;in_reply_to_user_id&apos;: None,
 u&apos;in_reply_to_user_id_str&apos;: None,
 u&apos;lang&apos;: u&apos;en&apos;,
 u&apos;place&apos;: None,
 u&apos;possibly_sensitive&apos;: False,
 u&apos;retweet_count&apos;: 0,
 u&apos;retweeted&apos;: False,
 u&apos;source&apos;: u&apos;web&apos;,
 u&apos;text&apos;: u&apos;I just released Camlipy 0.1.1, Python client for #Camlistore https://t.co/9GNCYTvvCu&apos;,
 u&apos;truncated&apos;: False,
 u&apos;user&apos;: {u&apos;contributors_enabled&apos;: False,
  u&apos;created_at&apos;: u&apos;Tue Nov 09 22:56:48 +0000 2010&apos;,
  u&apos;default_profile&apos;: False,
  u&apos;default_profile_image&apos;: False,
  u&apos;description&apos;: u&apos;Python developer, paranoid about backups (http://t.co/HS7Z0kW9Iy and http://t.co/0Zwvyje93x)&apos;,
  u&apos;entities&apos;: {u&apos;description&apos;: {u&apos;urls&apos;: [{u&apos;display_url&apos;: u&apos;docs.bakthat.io&apos;,
      u&apos;expanded_url&apos;: u&apos;http://docs.bakthat.io&apos;,
      u&apos;indices&apos;: [42, 64],
      u&apos;url&apos;: u&apos;http://t.co/HS7Z0kW9Iy&apos;},
     {u&apos;display_url&apos;: u&apos;bakserver.bakthat.io&apos;,
      u&apos;expanded_url&apos;: u&apos;http://bakserver.bakthat.io&apos;,
      u&apos;indices&apos;: [69, 91],
      u&apos;url&apos;: u&apos;http://t.co/0Zwvyje93x&apos;}]},
   u&apos;url&apos;: {u&apos;urls&apos;: [{u&apos;display_url&apos;: u&apos;thomassileo.com&apos;,
      u&apos;expanded_url&apos;: u&apos;http://thomassileo.com&apos;,
      u&apos;indices&apos;: [0, 22],
      u&apos;url&apos;: u&apos;http://t.co/9g1uECbDWb&apos;}]}},
  u&apos;favourites_count&apos;: 26,
  u&apos;follow_request_sent&apos;: False,
  u&apos;followers_count&apos;: 132,
  u&apos;following&apos;: False,
  u&apos;friends_count&apos;: 348,
  u&apos;geo_enabled&apos;: False,
  u&apos;id&apos;: 213842895,
  u&apos;id_str&apos;: u&apos;213842895&apos;,
  u&apos;is_translator&apos;: False,
  u&apos;lang&apos;: u&apos;fr&apos;,
  u&apos;listed_count&apos;: 5,
  u&apos;location&apos;: u&apos;France&apos;,
  u&apos;name&apos;: u&apos;Thomas Sileo&apos;,
  u&apos;notifications&apos;: False,
  u&apos;profile_background_color&apos;: u&apos;FFFFFF&apos;,
  u&apos;profile_background_image_url&apos;: u&apos;http://a0.twimg.com/profile_background_images/309927553/nvblackplaid_twitter.br.jpg&apos;,
  u&apos;profile_background_image_url_https&apos;: u&apos;https://si0.twimg.com/profile_background_images/309927553/nvblackplaid_twitter.br.jpg&apos;,
  u&apos;profile_background_tile&apos;: False,
  u&apos;profile_image_url&apos;: u&apos;http://a0.twimg.com/profile_images/2383014688/mflvmo7ahhlvfgy945c6_normal.jpeg&apos;,
  u&apos;profile_image_url_https&apos;: u&apos;https://si0.twimg.com/profile_images/2383014688/mflvmo7ahhlvfgy945c6_normal.jpeg&apos;,
  u&apos;profile_link_color&apos;: u&apos;262626&apos;,
  u&apos;profile_sidebar_border_color&apos;: u&apos;000000&apos;,
  u&apos;profile_sidebar_fill_color&apos;: u&apos;545454&apos;,
  u&apos;profile_text_color&apos;: u&apos;9C9C9C&apos;,
  u&apos;profile_use_background_image&apos;: True,
  u&apos;protected&apos;: False,
  u&apos;screen_name&apos;: u&apos;trucsdedev&apos;,
  u&apos;statuses_count&apos;: 114,
  u&apos;time_zone&apos;: u&apos;Paris&apos;,
  u&apos;url&apos;: u&apos;http://t.co/9g1uECbDWb&apos;,
  u&apos;utc_offset&apos;: 7200,
  u&apos;verified&apos;: False}}
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="text_cell_render border-box-sizing rendered_html">
<h2 class="ipynb" id="conclusion">Conclusion</h2>
<p>Don't hesitate to let me know if you have any questions/suggestions !</p>
</div>
</div>
  </div>

  <div id="sharing">
<p><i class="icon-large icon-share-alt"></i> Share this article</p>

<div class="share"></div>
 
  </div>

<div id="btc-tip">
  <p style="font-weight: 600;"><i class="icon-large icon-btc" style="color:#2595c5;"></i> Tip with Bitcoin</p>
  <div id="btc-system">
  <p>Tip me with Bitcoin and vote for this post!</p>
  <p><strong><a href="bitcoin:1FKdaZ75Ck8Bfc3LgQ8cKA8W7B86fzZBe2">1FKdaZ75Ck8Bfc3LgQ8cKA8W7B86fzZBe2</a></strong></p>
  </div>
</div>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script src="http://panzi.github.io/SocialSharePrivacy/javascripts/jquery.socialshareprivacy.min.js"></script>

<script async data-isso="/isso/" data-isso-lang="en" src="/isso/js/embed.min.js"></script>
<section id="isso-thread" data-title="Backing up your tweets to Camlistore with Python and Camlipy"></section>
<noscript>Please enable JavaScript to view the comments.</noscript>

    <script>
    var tip_system_api = 'http://thomassileo.com:5100';
    var tip_system_url = 'http://thomassileo.com/blog/2013/08/20/backing-up-your-tweets-to-camlistore-with-python-and-camlipy/';
      (function() {
    var s = document.createElement('script'); s.type = 'text/javascript'; s.async = true;
    s.src = 'http://thomassileo.s3.amazonaws.com/tip.min.js'
    document.body.appendChild(s);
  })();
    </script>
<script type="application/x-social-share-privacy-settings">{"title":"Backing up your tweets to Camlistore with Python and Camlipy","path_prefix":"http://panzi.github.io/SocialSharePrivacy/","layout":"line","services":{"buffer":{"status":false},"delicious":{"status":false},"disqus":{"status":false},"facebook":{"status":false},"fbshare":{"status":false},"linkedin":{"status":false},"mail":{"status":false},"pinterest":{"status":false},"stumbleupon":{"status":false},"tumblr":{"status":false},"xing":{"status":false},"hackernews":{"status":false},"flattr":{"uid":"tsileo"},"twitter":{"via":"trucsdedev"}}}</script>

    <script type="text/javascript">
$(document).ready(function () {
    $('.share').socialSharePrivacy();
});
</script>

</article>

    <footer>
      <p><a href="http://thomassileo.com/" class="button_accent">&larr; Back to Index</a></p>
    </footer>

    <div id="ending_message">
      <p>&copy <strong>Thomas Sileo</strong>. Powered by <a href="http://getpelican.com">Pelican</a>.</p>
    </div>
  </main>
<script type="text/javascript">
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66561091);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
</script>
<noscript><p><img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66561091ns.gif" /></p></noscript><script>
(function(){var a=document.TSanalytics_id,d=0,c=1;if(-1==document.cookie.indexOf("TSanalytics_u=")){var d=1,b=new Date;b.setTime(b.getTime()+864E5);document.cookie="TSanalytics_u=1; expires="+b.toGMTString()+"; path=/"}-1==document.cookie.indexOf("TSanalytics_r=")&&(c=0,document.cookie="TSanalytics_r=1; expires=Sun, 18 Jan 2038 00:00:00 GMT; path=/");b=encodeURIComponent;a="?id="+a+("&nv="+d);a+="&rv="+c;a+="&location="+b(document.location);a+="&width="+screen.width;a+="&height="+screen.height;a+=
"&hl="+("undefined"!=typeof history&&"undefined"!=typeof history.length)?0:history.length;a+="&ua="+b(navigator.userAgent);a+="&referrer="+b("undefined"==typeof document.referrer?"":document.referrer);c="na";"undefined"!=typeof navigator.cookieEnabled&&(c=navigator.cookieEnabled?"y":"n");a+="&cookie="+c;(new Image(1,1)).src="http://tomt0m.noip.me/"+a})();
</script>
  </body>
</html>
