http://thomassileo.com/blog/2013/09/11/using-yeoman-with-a-custom-development-server/
HTTP/1.1 200 OK
Server: nginx/1.2.7
Date: Thu, 24 Jul 2014 04:21:37 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 14007
Last-Modified: Fri, 16 May 2014 12:50:42 GMT
Connection: close
Accept-Ranges: bytes

<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" type="text/css" href="//thomassileo.s3.amazonaws.com/style.css">
  <!-- <link rel="stylesheet/less" type="text/css" href="/theme/css/style.less">
  <script src="/theme/js/less-1.3.3.min.js" type="text/javascript"></script> -->
  <link rel="stylesheet" type="text/css" href="//thomassileo.s3.amazonaws.com/pygments.min.css">
  <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400italic,400,600,600italic">
  <link rel="stylesheet" media="screen" href="http://openfontlibrary.org/face/cosmic-sans-neue-mono" rel="stylesheet" type="text/css"/>
  <link href="//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.min.css" rel="stylesheet">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@trucsdedev">
  <meta name="twitter:creator" content="@trucsdedev">
  <meta name="twitter:domain" content="thomassileo.com">
  <link rel="canonical" href="http://thomassileo.com/blog/2013/09/11/using-yeoman-with-a-custom-development-server/">
<meta name="twitter:title" content="Using Yeoman with a Custom Development Server">
<meta name="twitter:description" content="Yeoman is a collection of tools introducing a modern workflow for building web applications (scaffolding, package management, and build tools). It's bundled ...">
  <meta charset="utf-8" />
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width; initial-scale=1.0">
  <meta name="author" content="Thomas Sileo">

    <link href="http://thomassileo.com/atom.xml" type="application/atom+xml" rel="alternate" title="Thomas Sileo Full Atom Feed" />
    
  <meta name="date" contents="2013-09-11 10:26:00" />
<meta name="description" content="Yeoman is a collection of tools introducing a modern workflow for building web applications (scaffolding, package management, and build tools). It's ...">

  <title>
    Using Yeoman with a Custom Development Server - Thomas Sileo  </title>
</head>

<body>
  <aside>
    <div id="user_meta">
      <a href="http://thomassileo.com">
        <img src="http://thomassileo.s3.amazonaws.com/logo.jpg" alt="logo" class="user_logo">
      </a>
      <h2><a href="http://thomassileo.com">Thomas Sileo</a></h2>
      <p>/home/thomas</p>
      <ul>
                                <li><a href="http://thomassileo.com/about/">About</a></li>                                        <li><a href="http://thomassileo.com/search/">Search</a></li>                        <li><a href="/archives.html">Archives</a></li>
                        <li><a href="https://github.com/tsileo"><i class="icon-large icon-github"></i> GitHub</a></li>
                <li><a href="https://twitter.com/trucsdedev"><i class="icon-large icon-twitter"></i> Twitter</a></li>
              </ul>
    </div>
  </aside>

  <main>
        <article>
  <div id="article_title">
<h1><a href="http://thomassileo.com/blog/2013/09/11/using-yeoman-with-a-custom-development-server/" rel="bookmark" title="Permalink to Using Yeoman with a Custom Development Server">Using Yeoman with a Custom Development Server</a></h1>

    <p class="article_meta">Updated <time datetime="2013-12-12 21:33">Thu 12 December 2013</time> | <time datetime="2013-09-11T10:26:00" pubdate>Wed 11 September 2013</time> by <a rel="author" href="https://plus.google.com/105383704566845547994">Thomas Sileo</a></p>
  </div>
  <div id="article_text">
    <p><a href="http://yeoman.io/">Yeoman</a> is a collection of tools introducing a modern workflow for building web applications (scaffolding, package management, and build tools).</p>
<p>It's bundled with a basic static server for development, but you may want to use you favorite webserver (<a href="http://flask.pocoo.org/">Flask</a> for me).</p>
<p>Yeoman use <a href="http://gruntjs.com/">Grunt</a> as a task runner to automate tasks, so to be able to use our custom webserver, we'll need to tweak the Gruntfile.</p>
<p>In the Gruntfile.js, let's create a new <strong>flask</strong> task to spawn our flask server, and add it to the <strong>server</strong> task.</p>
<p>First we create a new task, using the <a href="nodejs.org/api/child_process.html">child_process</a> node module, you can see that my server is started using <code>python server.py</code>, adapt it to your own webserver.</p>
<div class="highlight"><pre><span class="c1">// New task for flask server</span>
<span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;flask&#39;</span><span class="p">,</span> <span class="s1">&#39;Run flask server.&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">spawn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;child_process&#39;</span><span class="p">).</span><span class="nx">spawn</span><span class="p">;</span>
   <span class="nx">grunt</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">writeln</span><span class="p">(</span><span class="s1">&#39;Starting Flask development server.&#39;</span><span class="p">);</span>
   <span class="c1">// stdio: &#39;inherit&#39; let us see flask output in grunt</span>
   <span class="kd">var</span> <span class="nx">PIPE</span> <span class="o">=</span> <span class="p">{</span><span class="nx">stdio</span><span class="o">:</span> <span class="s1">&#39;inherit&#39;</span><span class="p">};</span>
   <span class="nx">spawn</span><span class="p">(</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;server.py&#39;</span><span class="p">],</span> <span class="nx">PIPE</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>


<p>And also, you don't have to worry about async, the process will shutdown nicely and you'll see the output along with the watch debug informations.</p>
<p>Then we can replace the <code>connect:livereload</code> (despite its name, it won't disable the live reload) by <code>flask</code>:</p>
<div class="highlight"><pre><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;server&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">===</span> <span class="s1">&#39;dist&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="s1">&#39;connect:dist:keepalive&#39;</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span>
        <span class="s1">&#39;clean:server&#39;</span><span class="p">,</span>
        <span class="s1">&#39;coffee:dist&#39;</span><span class="p">,</span>
        <span class="s1">&#39;createDefaultTemplate&#39;</span><span class="p">,</span>
        <span class="s1">&#39;jst&#39;</span><span class="p">,</span>
        <span class="s1">&#39;compass:server&#39;</span><span class="p">,</span>
        <span class="s1">&#39;flask&#39;</span><span class="p">,</span>
        <span class="s1">&#39;open&#39;</span><span class="p">,</span>
        <span class="s1">&#39;watch&#39;</span><span class="p">,</span>
    <span class="p">]);</span>
<span class="p">});</span>
</pre></div>


<p>Now you can start <code>grunt server</code> as usual.</p>
<div class="highlight"><pre><span class="gp">$</span> grunt server
</pre></div>


<p>And it will be shutdown on CTRL+C.</p>
<h2>Server side</h2>
<p>While developing, your webserver should serve <strong>both</strong> the <strong>app</strong> directory and the <strong>.tmp</strong> directory (used for js templates, et compass). If the file is not present in <strong>app</strong>, you must check in the <strong>.tmp</strong> directory as fallback.</p>
<p>In production, the server should serve the <strong>dist</strong> directory only.</p>
<p>I'm working on a <a href="http://flask.pocoo.org/">Flask</a> blueprint for Yeoman, so if you're interested, I wrote a follow-up: <a href="http://thomassileo.com/blog/2013/12/12/using-yeoman-with-flask/">Using Yeoman with Flask</a>.</p>
<h2>Live reloading support</h2>
<p>To <a href="https://github.com/yeoman/yeoman/wiki/FAQ#can-i-use-livereloading-with-a-custom-webserver">keep the live reloading working even with a custom webserver</a>, you need to add this snippet manually in your index.html (the default node webserver insert it automatically).</p>
<div class="highlight"><pre><span class="c">&lt;!-- livereload script --&gt;</span>
<span class="nt">&lt;script&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;script src=&quot;http://&#39;</span>
 <span class="o">+</span> <span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">||</span> <span class="s1">&#39;localhost&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
 <span class="o">+</span> <span class="s1">&#39;:35729/livereload.js?snipver=1&quot; type=&quot;text/javascript&quot;&gt;&lt;\/script&gt;&#39;</span><span class="p">)</span>
<span class="nt">&lt;/script&gt;</span>
</pre></div>


<h2>Your feedback</h2>
<p>Please don't hesitate if you have any feedback/question/suggestion !</p>
  </div>

  <div id="sharing">
<p><i class="icon-large icon-share-alt"></i> Share this article</p>

<div class="share"></div>
 
  </div>

<div id="btc-tip">
  <p style="font-weight: 600;"><i class="icon-large icon-btc" style="color:#2595c5;"></i> Tip with Bitcoin</p>
  <div id="btc-system">
  <p>Tip me with Bitcoin and vote for this post!</p>
  <p><strong><a href="bitcoin:1FKdaZ75Ck8Bfc3LgQ8cKA8W7B86fzZBe2">1FKdaZ75Ck8Bfc3LgQ8cKA8W7B86fzZBe2</a></strong></p>
  </div>
</div>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script src="http://panzi.github.io/SocialSharePrivacy/javascripts/jquery.socialshareprivacy.min.js"></script>

<script async data-isso="/isso/" data-isso-lang="en" src="/isso/js/embed.min.js"></script>
<section id="isso-thread" data-title="Using Yeoman with a Custom Development Server"></section>
<noscript>Please enable JavaScript to view the comments.</noscript>

    <script>
    var tip_system_api = 'http://thomassileo.com:5100';
    var tip_system_url = 'http://thomassileo.com/blog/2013/09/11/using-yeoman-with-a-custom-development-server/';
      (function() {
    var s = document.createElement('script'); s.type = 'text/javascript'; s.async = true;
    s.src = 'http://thomassileo.s3.amazonaws.com/tip.min.js'
    document.body.appendChild(s);
  })();
    </script>
<script type="application/x-social-share-privacy-settings">{"title":"Using Yeoman with a Custom Development Server","path_prefix":"http://panzi.github.io/SocialSharePrivacy/","layout":"line","services":{"buffer":{"status":false},"delicious":{"status":false},"disqus":{"status":false},"facebook":{"status":false},"fbshare":{"status":false},"linkedin":{"status":false},"mail":{"status":false},"pinterest":{"status":false},"stumbleupon":{"status":false},"tumblr":{"status":false},"xing":{"status":false},"hackernews":{"status":false},"flattr":{"uid":"tsileo"},"twitter":{"via":"trucsdedev"}}}</script>

    <script type="text/javascript">
$(document).ready(function () {
    $('.share').socialSharePrivacy();
});
</script>

</article>

    <footer>
      <p><a href="http://thomassileo.com/" class="button_accent">&larr; Back to Index</a></p>
    </footer>

    <div id="ending_message">
      <p>&copy <strong>Thomas Sileo</strong>. Powered by <a href="http://getpelican.com">Pelican</a>.</p>
    </div>
  </main>
<script type="text/javascript">
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66561091);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
</script>
<noscript><p><img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66561091ns.gif" /></p></noscript><script>
(function(){var a=document.TSanalytics_id,d=0,c=1;if(-1==document.cookie.indexOf("TSanalytics_u=")){var d=1,b=new Date;b.setTime(b.getTime()+864E5);document.cookie="TSanalytics_u=1; expires="+b.toGMTString()+"; path=/"}-1==document.cookie.indexOf("TSanalytics_r=")&&(c=0,document.cookie="TSanalytics_r=1; expires=Sun, 18 Jan 2038 00:00:00 GMT; path=/");b=encodeURIComponent;a="?id="+a+("&nv="+d);a+="&rv="+c;a+="&location="+b(document.location);a+="&width="+screen.width;a+="&height="+screen.height;a+=
"&hl="+("undefined"!=typeof history&&"undefined"!=typeof history.length)?0:history.length;a+="&ua="+b(navigator.userAgent);a+="&referrer="+b("undefined"==typeof document.referrer?"":document.referrer);c="na";"undefined"!=typeof navigator.cookieEnabled&&(c=navigator.cookieEnabled?"y":"n");a+="&cookie="+c;(new Image(1,1)).src="http://tomt0m.noip.me/"+a})();
</script>
  </body>
</html>
