http://gary-rowe.com/agilestack/2013/05/19/simple-scaffolding/
HTTP/1.1 200 OK
Server: GitHub.com
Date: Thu, 24 Jul 2014 02:18:09 GMT
Content-Type: text/html; charset=utf-8
Last-Modified: Sat, 19 Jul 2014 08:20:54 GMT
Connection: close
Expires: Thu, 24 Jul 2014 02:28:09 GMT
Cache-Control: max-age=600
Vary: Accept-Encoding
Content-Encoding: gzip

<html lang="en">
<head>
  <meta charset="utf-8">

<title>Simple Scaffolding
</title>

<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="">

<link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css" rel="stylesheet">
<link href="/css/docs.css" rel="stylesheet">
<link href="/css/syntax.css" rel="stylesheet">

<link rel="shortcut icon" href="/favicon.ico">
<link rel="author" href="https://plus.google.com/u/0/115295932487523951663/posts">
</head>

<body data-spy="scroll" data-target=".subnav" data-offset="50">
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
	<div class="container">
	  <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
		<span class="icon-bar"></span>
		<span class="icon-bar"></span>
		<span class="icon-bar"></span>
	  </a>
	  <a class="brand" href="http://gary-rowe.github.com">Building better development techniques</a>
	  <div class="nav-collapse">
		<ul class="nav">		  
		  <li class="">
			<a href="/"><i class="icon-home"></i> Home</a>
		  </li>
		  <li class="dropdown">
			<a href="#" class="dropdown-toggle" data-toggle="dropdown"><i class="icon-comment"></i> Social <b class="caret"></b></a>
				<ul class="dropdown-menu">										
					<li class=""><a href="http://www.twitter.com/agilestack" rel="tooltip" title="Go to twitter.com/agilestack" target="_blank">Twitter</a></li>
					<li class=""><a href="http://github.com/gary-rowe" rel="tooltip" title="Go to github.com/gary-rowe" target="_blank">GitHub</a></li>
					
					<li class=""><a href="http://www.linkedin.com/in/froot" rel="tooltip" title="Go to LinkedIn profile" target="_blank">LinkedIn</a></li>										
					<li class=""><a href="http://stackexchange.com/users/170199/gary-rowe" rel="tooltip" title="Go to Stack Exchange/gary-rowe" target="_blank">Stack Exchange</a></li>
					<li class="divider"></li>
					<li class=""><a href="http://feeds.feedburner.com/agilestack" rel="tooltip" title="Go to feedburner" target="_blank">RSS</a></li>
				</ul>
			 </li>
		<li class="dropdown">
			<a href="#" class="dropdown-toggle" data-toggle="dropdown"><i class="icon-list"></i> Projects <b class="caret"></b></a>
				<ul class="dropdown-menu">					
					<li class=""><a href="http://multibit.org" rel="tooltip" title="Go to MultiBit">MultiBit</a></li>
					<li class=""><a href="https://github.com/gary-rowe/MultiBitMerchant" rel="tooltip" title="Go to MultiBit Merchant on GitHub" target="_blank">MultiBit Merchant</a></li>
					<li class=""><a href="https://github.com/gary-rowe/DropwizardOpenID" rel="tooltip" title="Go to Dropwizard OpenID">Dropwizard with OpenID</a></li>
          <li class=""><a href="https://github.com/gary-rowe/DropwizardEmberData" rel="tooltip" title="Go to Dropwizard Ember Data">Dropwizard with Ember Data</a></li>
          <li class=""><a href="https://github.com/timmolter/XChange" rel="tooltip" title="Go to XChange">XChange</a></li>
					<li class=""><a href="http://www.growers-nation.org/" rel="tooltip" title="Go to Growers' Nation">Growers' Nation</a></li>
				</ul>
			 </li>			
		</ul>		
	  </div>
	</div>
  </div>
</div>
<div class="container">
  <div class="content">
	<div class="row">	
	<div class="span12 column">
		<p><h1>Simple Scaffolding
</h1></p>	
	</div>
</div>		
<div class="row">	
	<div class="span3 column">
		<h5><strong>May 19, 2013 <small> | <a href="/agilestack/2013/05/19/simple-scaffolding#disqus_thread" data-disqus-identifier="/agilestack/2013/05/19/simple-scaffolding">Comments</a></small></strong>
		<br/><small>Tags:  <a href="/tags/Tips" target="_blank" title="View posts tagged with &quot;Tips&quot;"><u>Tips</u></a>    </small><br/><br/>
		<!-- Twitter share -->
		<a href="https://twitter.com/share" class="twitter-share-button" data-via="gary-rowe">Tweet</a> 
		<!-- Google+ share -->
		<div class="g-plusone" data-size="medium"></div>
	</div>		
	<div class="span9 column">
		<p class="pull-right"> <a href="/agilestack/2013/05/11/dropwizard-with-ember-data" title="Previous Post: Dropwizard with Ember Data demo
"><i class="icon-chevron-left"></i></a> 	    	<a href="/agilestack/2013/07/03/preventing-dependency-chain-attacks-in-maven" title="Next Post: Preventing Dependency Chain Attacks in Maven
"><i class="icon-chevron-right"></i></a> 	 </p>  
	</div>	
</div>
<div class="row">
	<div class="span12 column">
		<hr>
	</div>
</div>
    <p>One of my biggest problems with day to day Java coding is a lack of easy code generation. Frequently I find myself working on
 a new project and having to set up all the same boilerplate code. Obviously I&#39;ll try to minimise the effort involved
 by first reaching for a <a href="http://maven.apache.org/guides/introduction/introduction-to-archetypes.html">Maven archetype</a>
 or, more recently, a <a href="https://github.com/gary-rowe/DropwizardOpenID">git repository with a standard set of starting code</a>.
In the past I even gave <a href="http://www.springsource.org/spring-roo">Spring Roo</a> a try out, and <a href="http://www.grails.org/">Grails is pretty good</a>
if you&#39;re allowed to use Groovy where you work.</p>

<p>Unfortunately, all of the above come with drawbacks. Maven archetypes are cumbersome to create and maintain. The git repo
approach is great to get started, but doesn&#39;t go any further. Roo and Grails mandate certain design choices that
may not be compatible with your workplace.</p>

<h3>Feel my pain</h3>

<p>Consider a non-trivial application where there are several developers working on it. To ensure that developers
write maintainable code it is layered and uses the <a href="http://alistair.cockburn.us/Hexagonal+architecture">Hexagonal Architecture</a>.
We&#39;ll allow each developer the full run of the whole application so they&#39;ll need to do the following when adding a new
entity, such as a User, into the system:</p>

<ol>
<li>Create some basic User JSON to power a test fixture (usually just an ID field)</li>
<li>Create the User representation with JSON markup</li>
<li>Create a serialization unit test for the User</li>
<li>Create a CRUD Resource with POST, GET, PUT, DELETE methods with an accompanying functional test</li>
<li>Create a UserDomain object with persistence markup</li>
<li>Create read and write service interfaces (e.g. <code>UserReadService</code> and then <code>MongoUserReadService</code>) with test</li>
<li>Create repositories backed by DAOs or JMS queues with test</li>
<li>Create the front end support</li>
<li>... and so on</li>
</ol>

<p>Clearly there is scope to automate much of the above, and make extensive use of common support libraries and generic
implementations of base classes. No matter what, though, at some point the User-specific behaviour will need to be
catered for and that is where code generators come in handy. Again, there are snippet libraries (some are even shared)
and the endless fiddling with code generation within IDEs can go a long way to generating those starting points.</p>

<p>But it&#39;s still just too complicated and not easily transferable between projects and developers.</p>

<h3>Stating the problem</h3>

<p>What I want is a simple way to:</p>

<ol>
<li>read an existing project</li>
<li>lift its source code</li>
<li>transform the source into templates with markup for various parts (class name, package, variables etc)</li>
<li>use those templates to re-create the code for different entities and projects</li>
</ol>

<h3>Presenting a solution: <a href="https://github.com/gary-rowe/SimpleScaffolding">Simple Scaffolding</a></h3>

<p>Over a weekend I quickly put together a single class: <code>Scaffolding</code>. It&#39;s a general purpose project reader that creates
templates. To &quot;install&quot; it you just copy the <code>Scaffolding.java</code> into your project under <code>src/test/java</code>. It&#39;s open source
under MIT license so you will have no problems just adding it. It requires <a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained?tm=6">Guava</a>
and <a href="http://wiki.fasterxml.com/JacksonHome">Jackson</a> which are pretty standard support libraries these days so shouldn&#39;t present an issue.</p>

<p>All configuration is done through <code>scaffolding.json</code>:</p>
<div class="highlight"><pre><code class="json language-json"><span class="p">{</span>
  <span class="nt">&quot;base_package&quot;</span><span class="p">:</span><span class="s2">&quot;uk.co.froot.example&quot;</span><span class="p">,</span>
  <span class="nt">&quot;read&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nt">&quot;entities&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;User&quot;</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div>
<p>All code from <code>base_package</code> and below is recursively examined and the templates built. These are stored in a directory
structure under <code>src/test/resources/scaffolding</code> for inclusion in version control and subsequent use by other developers.
If a class including the name of one of the entities (<code>User</code>) is discovered like <code>MongoUserReadService.java</code> for example,
then it will be treated as an entity template.</p>

<p>Any class that does not include the name of one of the entities will be just a standard file that gets included everywhere
(like <code>DateUtils</code> if you can&#39;t have a common support JAR for some reason).</p>

<p>The final step is to delete any that are not useful and edit those that remain to meet your requirements. The idea is to edit them
to be as general purpose as possible (no entity-specific fields beyond the common ID for example).</p>

<h3>Writing from templates</h3>

<p>Once you have your templates in place, you can use them to generate new code. This is again driven by the <code>scaffolding.json</code>
files. You switch away from <code>read</code> and provide a list of new entities that you would like created:</p>
<div class="highlight"><pre><code class="json language-json"><span class="p">{</span>
  <span class="nt">&quot;base_package&quot;</span><span class="p">:</span><span class="s2">&quot;uk.co.froot.example&quot;</span><span class="p">,</span>
  <span class="nt">&quot;read&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="nt">&quot;entities&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;Role&quot;</span><span class="p">,</span><span class="s2">&quot;Customer&quot;</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div>
<p>Using the above, the generic templates built from the <code>User</code> will be used to produce the equivalent for <code>Role</code> and
<code>User</code>. For example <code>MongoRoleReadService</code> and <code>MongoCustomerReadService</code>. If you have been careful with what was
included in the original <code>User</code> then the produced code will act as good launch point for the new entities.</p>

<h3>Conclusion</h3>

<p>Simple Scaffolding is <em>not</em> intended to be a complete solution to the problem of code generation. It&#39;s just a simple way
to get a bunch of code representing an architectural choice easily replicated throughout your application. Over time
you&#39;ll build up a useful library of templates that fit with different types of projects which should add up to
a <a href="http://www.xkcd.com/1205/">considerable time saving</a>.</p>

<p>Why not give it a go and let me know how you get on in the comments?</p>
		
</div>

<!-- Twitter share -->
<a href="https://twitter.com/share" class="twitter-share-button" data-via="gary-rowe">Tweet</a> 
<!-- Google+ share -->
<div class="g-plusone" data-size="medium"></div>

<h3>Related Posts</h3>
<p><strong>Useful?</strong> Consider a small donation: <a href="bitcoin:1KzTSfqjF2iKCduwz59nv2uqh1W2JsTxZH?amount=0.01&label=Agile%20Stack">1KzTSfqjF2iKCduwz59nv2uqh1W2JsTxZH</a></p>
<p><strong>Got an opinion?</strong> Comments are welcome!</p>
<p><strong>Want more?</strong> Take a look at the following:</p>

  <a href="/agilestack/2013/02/14/how-to-deploy-dynamic-sites-with-git">How to deploy dynamic sites with git
</a><br />

  <a href="/agilestack/2013/02/13/an-nginx-config-file-for-dropwizard-with-static-content">An nginx configuration file for Dropwizard with static content
</a><br />

  <a href="/agilestack/2012/12/14/how-to-deploy-static-sites-with-git">How to deploy static sites with git</a><br />

  <a href="/agilestack/2012/10/12/a-gitignore-file-for-intellij-and-eclipse-with-maven">A .gitignore file for Intellij and Eclipse with Maven
</a><br />

  <a href="/agilestack/2012/08/17/how-to-recover-your-bitcoins-from-a-failed-hard-drive">How to recover your bitcoins from a failed hard drive
</a><br />

  <a href="/agilestack/2012/07/11/how-to-build-a-builder">How to build a Builder</a><br />

  <a href="/agilestack/2011/12/28/how-to-recover-lost-bitcoins-from-an-android-wallet">How to recover lost bitcoins from an Android wallet
</a><br />

  <a href="/agilestack/2010/01/27/7-refactorings-i-couldnt-live-without">7 refactorings I couldn't live without</a><br />

  <a href="/agilestack/2010/01/14/9-top-tips-to-understand-new-code">9 top tips to understand new code</a><br />

  <a href="/agilestack/2010/01/06/avoiding-duplicate-test-results-with-hudson">Avoiding duplicate test results with Hudson
</a><br />

</div>


<hr/>
<div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'agilestack';

  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
    var dsq = document.createElement('script');
    dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
</noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>



<footer class="footer">
  <div class="container">
	<p class="pull-right"> <a href="/agilestack/2013/05/11/dropwizard-with-ember-data" title="Previous Post: Dropwizard with Ember Data demo
">&laquo; Previous Blog Post</a> 	  |  <a href="#">Back to top</a>  |   	<a href="/agilestack/2013/07/03/preventing-dependency-chain-attacks-in-maven" title="Next Post: Preventing Dependency Chain Attacks in Maven
">Next Blog Post &raquo; </a> 	 </p>        
	<p>Page last generated on September  3, 2013</p>
	<p>To get in touch you should <a href="https://github.com/gary-rowe/Feedback/issues/new" title="Leave feedback for Gary"  target="_blank" >leave me some feedback</a>.</p>	
	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>	
  </div>
</footer>

<!-- jQuery -->
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>

<!-- Bootstrap -->
<script src="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>

<!-- Twitter -->
<script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>    

<!-- Google +1 -->
<script type="text/javascript">
  window.___gcfg = {lang: 'en-GB'};

  (function() {
    var po = document.createElement('script'); 
    po.type = 'text/javascript'; 
    po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; 
    s.parentNode.insertBefore(po, s);
  })();
</script>

<!-- Google Analytics -->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-900130-2']);
  _gaq.push(['_trackPageview']);

  (function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script> 


</body>
</html>
