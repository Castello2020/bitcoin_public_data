https://github.com/mikegogulski/bitcoin-php/blob/master/src/bitcoin.inc
bitcoin-php/src/bitcoin.inc at master · mikegogulski/bitcoin-php · GitHub
Skip to content
Sign up
Sign in
Explore
Features
Enterprise
Blog
This repository
This repository
All repositories
Star
127
Fork
61
public
mikegogulski/bitcoin-php
Code
Issues
12
Pull Requests
2
Pulse
Graphs
Network
HTTPS clone URL
Subversion checkout URL
You can clone with
HTTPS
or Subversion.
Download ZIP
Permalink
branch:
master
Switch branches/tags
Branches
Tags
master
Nothing to show
Nothing to show
bitcoin-php / src / bitcoin.inc
sam2kb
June 16, 2013
Accept both empty string "" and wildcard "*" values in listtransactio…
4 contributors
Users who have contributed to this file
mikegogulski
sam2kb
psyvisions
dereuromark
file
961 lines (893 sloc)
33.744 kb
Edit
Raw
Blame
History
Delete
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
&lt;?php/**&nbsp;* Bitcoin classes&nbsp;*&nbsp;* By Mike Gogulski - All rights reversed http://www.unlicense.org/ (public domain)&nbsp;*&nbsp;* If you find this library useful, your donation of Bitcoins to address&nbsp;* 1E3d6EWLgwisXY2CWXDcdQQP2ivRN7e9r9 would be greatly appreciated. Thanks!&nbsp;*&nbsp;* PHPDoc is available at http://code.gogulski.com/&nbsp;*&nbsp;* @author Mike Gogulski - http://www.nostate.com/ http://www.gogulski.com/&nbsp;* @author theymos - theymos @ http://bitcoin.org/smf&nbsp;*/define(&quot;BITCOIN_ADDRESS_VERSION&quot;, &quot;00&quot;);// this is a hex byte/**&nbsp;* Bitcoin utility functions class&nbsp;*&nbsp;* @author theymos (functionality)&nbsp;* @author Mike Gogulski&nbsp;* 	http://www.gogulski.com/ http://www.nostate.com/&nbsp;*  (encapsulation, string abstraction, PHPDoc)&nbsp;*/class Bitcoin {&nbsp;&nbsp;/*&nbsp;&nbsp;&nbsp;* Bitcoin utility functions by theymos&nbsp;&nbsp;&nbsp;* Via http://www.bitcoin.org/smf/index.php?topic=1844.0&nbsp;&nbsp;&nbsp;* hex input must be in uppercase, with no leading 0x&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;private static $hexchars = &quot;0123456789ABCDEF&quot;;&nbsp;&nbsp;private static $base58chars = &quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;;&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert a hex string into a (big) integer&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $hex&nbsp;&nbsp;&nbsp;* @return int&nbsp;&nbsp;&nbsp;* @access private&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;private function decodeHex($hex) {&nbsp;&nbsp;&nbsp;&nbsp;$hex = strtoupper($hex);&nbsp;&nbsp;&nbsp;&nbsp;$return = &quot;0&quot;;&nbsp;&nbsp;&nbsp;&nbsp;for ($i = 0; $i &lt; strlen($hex); $i++) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$current = (string) strpos(self::$hexchars, $hex[$i]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = (string) bcmul($return, &quot;16&quot;, 0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = (string) bcadd($return, $current, 0);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return $return;&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert an integer into a hex string&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param int $dec&nbsp;&nbsp;&nbsp;* @return string&nbsp;&nbsp;&nbsp;* @access private&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;private function encodeHex($dec) {&nbsp;&nbsp;&nbsp;&nbsp;$return = &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;while (bccomp($dec, 0) == 1) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$dv = (string) bcdiv($dec, &quot;16&quot;, 0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rem = (integer) bcmod($dec, &quot;16&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$dec = $dv;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = $return . self::$hexchars[$rem];&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return strrev($return);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert a Base58-encoded integer into the equivalent hex string representation&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $base58&nbsp;&nbsp;&nbsp;* @return string&nbsp;&nbsp;&nbsp;* @access private&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;private function decodeBase58($base58) {&nbsp;&nbsp;&nbsp;&nbsp;$origbase58 = $base58;&nbsp;&nbsp;&nbsp;&nbsp;//only valid chars allowed&nbsp;&nbsp;&nbsp;&nbsp;if (preg_match(&#39;/[^1-9A-HJ-NP-Za-km-z]/&#39;, $base58)) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$return = &quot;0&quot;;&nbsp;&nbsp;&nbsp;&nbsp;for ($i = 0; $i &lt; strlen($base58); $i++) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$current = (string) strpos(Bitcoin::$base58chars, $base58[$i]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = (string) bcmul($return, &quot;58&quot;, 0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = (string) bcadd($return, $current, 0);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$return = self::encodeHex($return);&nbsp;&nbsp;&nbsp;&nbsp;//leading zeros&nbsp;&nbsp;&nbsp;&nbsp;for ($i = 0; $i &lt; strlen($origbase58) &amp;&amp; $origbase58[$i] == &quot;1&quot;; $i++) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = &quot;00&quot; . $return;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if (strlen($return) % 2 != 0) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = &quot;0&quot; . $return;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return $return;&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert a hex string representation of an integer into the equivalent Base58 representation&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $hex&nbsp;&nbsp;&nbsp;* @return string&nbsp;&nbsp;&nbsp;* @access private&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;private function encodeBase58($hex) {&nbsp;&nbsp;&nbsp;&nbsp;if (strlen($hex) % 2 != 0) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&quot;encodeBase58: uneven number of hex characters&quot;);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$orighex = $hex;&nbsp;&nbsp;&nbsp;&nbsp;$hex = self::decodeHex($hex);&nbsp;&nbsp;&nbsp;&nbsp;$return = &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;while (bccomp($hex, 0) == 1) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$dv = (string) bcdiv($hex, &quot;58&quot;, 0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rem = (integer) bcmod($hex, &quot;58&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$hex = $dv;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = $return . self::$base58chars[$rem];&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$return = strrev($return);&nbsp;&nbsp;&nbsp;&nbsp;//leading zeros&nbsp;&nbsp;&nbsp;&nbsp;for ($i = 0; $i &lt; strlen($orighex) &amp;&amp; substr($orighex, $i, 2) == &quot;00&quot;; $i += 2) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return = &quot;1&quot; . $return;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return $return;&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert a 160-bit Bitcoin hash to a Bitcoin address&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @author theymos&nbsp;&nbsp;&nbsp;* @param string $hash160&nbsp;&nbsp;&nbsp;* @param string $addressversion&nbsp;&nbsp;&nbsp;* @return string Bitcoin address&nbsp;&nbsp;&nbsp;* @access public&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public static function hash160ToAddress($hash160, $addressversion = BITCOIN_ADDRESS_VERSION) {&nbsp;&nbsp;&nbsp;&nbsp;$hash160 = $addressversion . $hash160;&nbsp;&nbsp;&nbsp;&nbsp;$check = pack(&quot;H*&quot;, $hash160);&nbsp;&nbsp;&nbsp;&nbsp;$check = hash(&quot;sha256&quot;, hash(&quot;sha256&quot;, $check, true));&nbsp;&nbsp;&nbsp;&nbsp;$check = substr($check, 0, 8);&nbsp;&nbsp;&nbsp;&nbsp;$hash160 = strtoupper($hash160 . $check);&nbsp;&nbsp;&nbsp;&nbsp;return self::encodeBase58($hash160);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert a Bitcoin address to a 160-bit Bitcoin hash&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @author theymos&nbsp;&nbsp;&nbsp;* @param string $addr&nbsp;&nbsp;&nbsp;* @return string Bitcoin hash&nbsp;&nbsp;&nbsp;* @access public&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public static function addressToHash160($addr) {&nbsp;&nbsp;&nbsp;&nbsp;$addr = self::decodeBase58($addr);&nbsp;&nbsp;&nbsp;&nbsp;$addr = substr($addr, 2, strlen($addr) - 10);&nbsp;&nbsp;&nbsp;&nbsp;return $addr;&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Determine if a string is a valid Bitcoin address&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @author theymos&nbsp;&nbsp;&nbsp;* @param string $addr String to test&nbsp;&nbsp;&nbsp;* @param string $addressversion&nbsp;&nbsp;&nbsp;* @return boolean&nbsp;&nbsp;&nbsp;* @access public&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public static function checkAddress($addr, $addressversion = BITCOIN_ADDRESS_VERSION) {&nbsp;&nbsp;&nbsp;&nbsp;$addr = self::decodeBase58($addr);&nbsp;&nbsp;&nbsp;&nbsp;if (strlen($addr) != 50) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$version = substr($addr, 0, 2);&nbsp;&nbsp;&nbsp;&nbsp;if (hexdec($version) &gt; hexdec($addressversion)) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$check = substr($addr, 0, strlen($addr) - 8);&nbsp;&nbsp;&nbsp;&nbsp;$check = pack(&quot;H*&quot;, $check);&nbsp;&nbsp;&nbsp;&nbsp;$check = strtoupper(hash(&quot;sha256&quot;, hash(&quot;sha256&quot;, $check, true)));&nbsp;&nbsp;&nbsp;&nbsp;$check = substr($check, 0, 8);&nbsp;&nbsp;&nbsp;&nbsp;return $check == substr($addr, strlen($addr) - 8);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert the input to its 160-bit Bitcoin hash&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $data&nbsp;&nbsp;&nbsp;* @return string&nbsp;&nbsp;&nbsp;* @access private&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;private function hash160($data) {&nbsp;&nbsp;&nbsp;&nbsp;$data = pack(&quot;H*&quot;, $data);&nbsp;&nbsp;&nbsp;&nbsp;return strtoupper(hash(&quot;ripemd160&quot;, hash(&quot;sha256&quot;, $data, true)));&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert a Bitcoin public key to a 160-bit Bitcoin hash&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $pubkey&nbsp;&nbsp;&nbsp;* @return string&nbsp;&nbsp;&nbsp;* @access public&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public static function pubKeyToAddress($pubkey) {&nbsp;&nbsp;&nbsp;&nbsp;return self::hash160ToAddress($this-&gt;hash160($pubkey));&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Remove leading &quot;0x&quot; from a hex value if present.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $string&nbsp;&nbsp;&nbsp;* @return string&nbsp;&nbsp;&nbsp;* @access public&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public static function remove0x($string) {&nbsp;&nbsp;&nbsp;&nbsp;if (substr($string, 0, 2) == &quot;0x&quot; || substr($string, 0, 2) == &quot;0X&quot;) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$string = substr($string, 2);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return $string;&nbsp;&nbsp;}}/**&nbsp;* Exception class for BitcoinClient&nbsp;*&nbsp;* @author Mike Gogulski&nbsp;* 	http://www.gogulski.com/ http://www.nostate.com/&nbsp;*/class BitcoinClientException extends ErrorException {&nbsp;&nbsp;// Redefine the exception so message isn&#39;t optional&nbsp;&nbsp;public function __construct($message, $code = 0, $severity = E_USER_NOTICE, Exception $previous = null) {&nbsp;&nbsp;&nbsp;&nbsp;parent::__construct($message, $code, $severity, $previous);&nbsp;&nbsp;}&nbsp;&nbsp;public function __toString() {&nbsp;&nbsp;&nbsp;&nbsp;return __CLASS__ . &quot;: [{$this-&gt;code}]: {$this-&gt;message}\n&quot;;&nbsp;&nbsp;}}require_once(dirname(__FILE__) . &quot;/includes/xmlrpc.inc&quot;);require_once(dirname(__FILE__) . &quot;/includes/jsonrpc.inc&quot;);/**&nbsp;* Bitcoin client class for access to a Bitcoin server via JSON-RPC-HTTP[S]&nbsp;*&nbsp;* Implements the methods documented at https://www.bitcoin.org/wiki/doku.php?id=api&nbsp;*&nbsp;* @version 0.3.19&nbsp;* @author Mike Gogulski&nbsp;* 	http://www.gogulski.com/ http://www.nostate.com/&nbsp;*/class BitcoinClient extends jsonrpc_client {&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Create a jsonrpc_client object to talk to the bitcoin server and return it,&nbsp;&nbsp;&nbsp;* or false on failure.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $scheme&nbsp;&nbsp;&nbsp;* 	&quot;http&quot; or &quot;https&quot;&nbsp;&nbsp;&nbsp;* @param string $username&nbsp;&nbsp;&nbsp;* 	User name to use in connection the Bitcoin server&#39;s JSON-RPC interface&nbsp;&nbsp;&nbsp;* @param string $password&nbsp;&nbsp;&nbsp;* 	Server password&nbsp;&nbsp;&nbsp;* @param string $address&nbsp;&nbsp;&nbsp;* 	Server hostname or IP address&nbsp;&nbsp;&nbsp;* @param mixed $port&nbsp;&nbsp;&nbsp;* 	Server port (string or integer)&nbsp;&nbsp;&nbsp;* @param string $certificate_path&nbsp;&nbsp;&nbsp;* 	Path on the local filesystem to server&#39;s PEM certificate (ignored if $scheme != &quot;https&quot;)&nbsp;&nbsp;&nbsp;* @param integer $debug_level&nbsp;&nbsp;&nbsp;* 	0 (default) = no debugging;&nbsp;&nbsp;&nbsp;* 	1 = echo JSON-RPC messages received to stdout;&nbsp;&nbsp;&nbsp;* 	2 = log transmitted messages also&nbsp;&nbsp;&nbsp;* @return jsonrpc_client&nbsp;&nbsp;&nbsp;* @access public&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function __construct($scheme, $username, $password, $address = &quot;localhost&quot;, $port = 8332, $certificate_path = &#39;&#39;, $debug_level = 0) {&nbsp;&nbsp;&nbsp;&nbsp;$scheme = strtolower($scheme);&nbsp;&nbsp;&nbsp;&nbsp;if ($scheme != &quot;http&quot; &amp;&amp; $scheme != &quot;https&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;Scheme must be http or https&quot;);&nbsp;&nbsp;&nbsp;&nbsp;if (empty($username))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;Username must be non-blank&quot;);&nbsp;&nbsp;&nbsp;&nbsp;if (empty($password))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;Password must be non-blank&quot;);&nbsp;&nbsp;&nbsp;&nbsp;$port = (string) $port;&nbsp;&nbsp;&nbsp;&nbsp;if (!$port || empty($port) || !is_numeric($port) || $port &lt; 1 || $port &gt; 65535 || floatval($port) != intval($port))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;Port must be an integer and between 1 and 65535&quot;);&nbsp;&nbsp;&nbsp;&nbsp;if (!empty($certificate_path) &amp;&amp; !is_readable($certificate_path))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;Certificate file &quot; . $certificate_path . &quot; is not readable&quot;);&nbsp;&nbsp;&nbsp;&nbsp;$uri = $scheme . &quot;://&quot; . $username . &quot;:&quot; . $password . &quot;@&quot; . $address . &quot;:&quot; . $port . &quot;/&quot;;&nbsp;&nbsp;&nbsp;&nbsp;parent::__construct($uri);&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;setDebug($debug_level);&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;setSSLVerifyHost(0);&nbsp;&nbsp;&nbsp;&nbsp;if ($scheme == &quot;https&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!empty($certificate_path))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;setCaCertificate($certificate_path);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;setSSLVerifyPeer(false);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Test if the connection to the Bitcoin JSON-RPC server is working&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* The check is done by calling the server&#39;s getinfo() method and checking&nbsp;&nbsp;&nbsp;* for a fault.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @return mixed boolean TRUE if successful, or a fault string otherwise&nbsp;&nbsp;&nbsp;* @access public&nbsp;&nbsp;&nbsp;* @throws none&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function can_connect() {&nbsp;&nbsp;&nbsp;&nbsp;try {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$r = $this-&gt;getinfo();&nbsp;&nbsp;&nbsp;&nbsp;} catch (BitcoinClientException $e) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $e-&gt;getMessage();&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return true;&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Convert a Bitcoin server query argument to a jsonrpcval&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param mixed $argument&nbsp;&nbsp;&nbsp;* @return jsonrpcval&nbsp;&nbsp;&nbsp;* @throws none&nbsp;&nbsp;&nbsp;* @todo Make this method private.&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function query_arg_to_parameter($argument) {&nbsp;&nbsp;&nbsp;&nbsp;$type = &quot;&quot;;// &quot;string&quot; is encoded as this default type value in xmlrpc.inc&nbsp;&nbsp;&nbsp;&nbsp;if (is_numeric($argument)) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (intval($argument) != floatval($argument)) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$argument = floatval($argument);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$type = &quot;double&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$argument = intval($argument);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$type = &quot;int&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if (is_bool($argument))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$type = &quot;boolean&quot;;&nbsp;&nbsp;&nbsp;&nbsp;if (is_int($argument))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$type = &quot;int&quot;;&nbsp;&nbsp;&nbsp;&nbsp;if (is_float($argument))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$type = &quot;double&quot;;&nbsp;&nbsp;&nbsp;&nbsp;if (is_array($argument))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$type = &quot;array&quot;;&nbsp;&nbsp;&nbsp;&nbsp;return new jsonrpcval($argument, $type);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Send a JSON-RPC message and optional parameter arguments to the server.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* Use the API functions if possible. This method remains public to support&nbsp;&nbsp;&nbsp;* changes being made to the API before this libarary can be updated.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $message&nbsp;&nbsp;&nbsp;* @param mixed $args, ...&nbsp;&nbsp;&nbsp;* @return mixed&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @see xmlrpc.inc:php_xmlrpc_decode()&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function query($message) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$message || empty($message))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;Bitcoin client query requires a message&quot;);&nbsp;&nbsp;&nbsp;&nbsp;$msg = new jsonrpcmsg($message);&nbsp;&nbsp;&nbsp;&nbsp;if (func_num_args() &gt; 1) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for ($i = 1; $i &lt; func_num_args(); $i++) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$msg-&gt;addParam(self::query_arg_to_parameter(func_get_arg($i)));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$response = $this-&gt;send($msg);&nbsp;&nbsp;&nbsp;&nbsp;if ($response-&gt;faultCode()) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException($response-&gt;faultString());&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return php_xmlrpc_decode($response-&gt;value());&nbsp;&nbsp;}&nbsp;&nbsp;/*&nbsp;&nbsp;&nbsp;* The following functions implement the Bitcoin RPC API as documented at https://www.bitcoin.org/wiki/doku.php?id=api&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Safely copies wallet.dat to destination, which can be a directory or&nbsp;&nbsp;&nbsp;* a path with filename.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $destination&nbsp;&nbsp;&nbsp;* @return mixed Nothing, or an error array&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function backupwallet($destination) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$destination || empty($destination))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;backupwallet requires a destination&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;backupwallet&quot;, $destination);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the server&#39;s available balance, or the balance for $account with&nbsp;&nbsp;&nbsp;* at least $minconf confirmations.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $account Account to check. If not provided, the server&#39;s&nbsp;&nbsp;&nbsp;*  total available balance is returned.&nbsp;&nbsp;&nbsp;* @param integer $minconf If specified, only transactions with at least&nbsp;&nbsp;&nbsp;*  $minconf confirmations will be included in the returned total.&nbsp;&nbsp;&nbsp;* @return float Bitcoin balance&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getbalance($account = NULL, $minconf = 1) {&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;getbalance requires a numeric minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;if ($account === NULL)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getbalance&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getbalance&quot;, $account, $minconf);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the number of blocks in the longest block chain.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @return integer Current block count&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getblockcount() {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getblockcount&quot;);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the block number of the latest block in the longest block chain.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @return integer Block number&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getblocknumber() {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getblocknumber&quot;);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the number of connections to other nodes.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @return integer Connection count&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getconnectioncount() {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getconnectioncount&quot;);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the proof-of-work difficulty as a multiple of the minimum difficulty.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @return float Difficulty&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getdifficulty() {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getdifficulty&quot;);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns boolean true if server is trying to generate bitcoins, false otherwise.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @return boolean Generation status&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getgenerate() {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getgenerate&quot;);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Tell Bitcoin server to generate Bitcoins or not, and how many processors&nbsp;&nbsp;&nbsp;* to use.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param boolean $generate&nbsp;&nbsp;&nbsp;* @param integer $maxproc&nbsp;&nbsp;&nbsp;* 	Limit generation to $maxproc processors, unlimited if -1&nbsp;&nbsp;&nbsp;* @return mixed Nothing if successful, error array if not&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function setgenerate($generate = TRUE, $maxproc = -1) {&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($maxproc) || $maxproc &lt; -1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;setgenerate: $maxproc must be numeric and &gt;= -1&#39;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;setgenerate&quot;, $generate, $maxproc);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns an array containing server information.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @return array Server information&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getinfo() {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getinfo&quot;);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the account associated with the given address.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $address&nbsp;&nbsp;&nbsp;* @return string Account&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.17&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getaccount($address) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$address || empty($address))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;getaccount requires an address&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getaccount&quot;, $address);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the label associated with the given address.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $address&nbsp;&nbsp;&nbsp;* @return string Label&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @deprecated Since 0.3.17&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getlabel($address) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$address || empty($address))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;getlabel requires an address&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getlabel&quot;, $address);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Sets the account associated with the given address.&nbsp;&nbsp;&nbsp;* $account may be omitted to remove an account from an address.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $address&nbsp;&nbsp;&nbsp;* @param string $account&nbsp;&nbsp;&nbsp;* @return NULL&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.17&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function setaccount($address, $account = &quot;&quot;) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$address || empty($address))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;setaccount requires an address&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;setaccount&quot;, $address, $account);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Sets the label associated with the given address.&nbsp;&nbsp;&nbsp;* $label may be omitted to remove a label from an address.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $address&nbsp;&nbsp;&nbsp;* @param string $label&nbsp;&nbsp;&nbsp;* @return NULL&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @deprecated Since 0.3.17&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function setlabel($address, $label = &quot;&quot;) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$address || empty($address))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;setlabel requires an address&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;setlabel&quot;, $address, $label);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns a new bitcoin address for receiving payments.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* If $account is specified (recommended), it is added to the address book so&nbsp;&nbsp;&nbsp;* payments received with the address will be credited to $account.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $account Label to apply to the new address&nbsp;&nbsp;&nbsp;* @return string Bitcoin address&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getnewaddress($account = NULL) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$account || empty($account))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getnewaddress&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getnewaddress&quot;, $account);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the total amount received by $address in transactions with at least&nbsp;&nbsp;&nbsp;* $minconf confirmations.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $address&nbsp;&nbsp;&nbsp;* 	Bitcoin address&nbsp;&nbsp;&nbsp;* @param integer $minconf&nbsp;&nbsp;&nbsp;* 	Minimum number of confirmations for transactions to be counted&nbsp;&nbsp;&nbsp;* @return float Bitcoin total&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getreceivedbyaddress($address, $minconf = 1) {&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;getreceivedbyaddress requires a numeric minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;if (!$address || empty($address))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;getreceivedbyaddress requires an address&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getreceivedbyaddress&quot;, $address, $minconf);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the total amount received by addresses associated with $account&nbsp;&nbsp;&nbsp;* in transactions with at least $minconf confirmations.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $account&nbsp;&nbsp;&nbsp;* @param integer $minconf&nbsp;&nbsp;&nbsp;* 	Minimum number of confirmations for transactions to be counted&nbsp;&nbsp;&nbsp;* @return float Bitcoin total&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.17&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getreceivedbyaccount($account, $minconf = 1) {&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;getreceivedbyaccount requires a numeric minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;if (!$account || empty($account))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;getreceivedbyaccount requires an account&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getreceivedbyaccount&quot;, $account, $minconf);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the total amount received by addresses with $label in&nbsp;&nbsp;&nbsp;* transactions with at least $minconf confirmations.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $label&nbsp;&nbsp;&nbsp;* @param integer $minconf&nbsp;&nbsp;&nbsp;* 	Minimum number of confirmations for transactions to be counted&nbsp;&nbsp;&nbsp;* @return float Bitcoin total&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @deprecated Since 0.3.17&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getreceivedbylabel($label, $minconf = 1) {&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;getreceivedbylabel requires a numeric minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;if (!$label || empty($label))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;getreceivedbylabel requires a label&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getreceivedbylabel&quot;, $label, $minconf);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Return a list of server RPC commands or help for $command, if specified.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $command&nbsp;&nbsp;&nbsp;* @return string Help text&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function help($command = NULL) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$command || empty($command))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;help&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;help&quot;, $command);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Return an array of arrays showing how many Bitcoins have been received by&nbsp;&nbsp;&nbsp;* each address in the server&#39;s wallet.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param integer $minconf Minimum number of confirmations before payments are included.&nbsp;&nbsp;&nbsp;* @param boolean $includeempty Whether to include addresses that haven&#39;t received any payments.&nbsp;&nbsp;&nbsp;* @return array An array of arrays. The elements are:&nbsp;&nbsp;&nbsp;* 	&quot;address&quot; =&gt; receiving address&nbsp;&nbsp;&nbsp;* 	&quot;account&quot; =&gt; the account of the receiving address&nbsp;&nbsp;&nbsp;* 	&quot;amount&quot; =&gt; total amount received by the address&nbsp;&nbsp;&nbsp;* 	&quot;confirmations&quot; =&gt; number of confirmations of the most recent transaction included&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function listreceivedbyaddress($minconf = 1, $includeempty = FALSE) {&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;listreceivedbyaddress requires a numeric minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;listreceivedbyaddress&quot;, $minconf, $includeempty);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Return an array of arrays showing how many Bitcoins have been received by&nbsp;&nbsp;&nbsp;* each account in the server&#39;s wallet.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param integer $minconf&nbsp;&nbsp;&nbsp;* 	Minimum number of confirmations before payments are included.&nbsp;&nbsp;&nbsp;* @param boolean $includeempty&nbsp;&nbsp;&nbsp;* 	Whether to include addresses that haven&#39;t received any payments.&nbsp;&nbsp;&nbsp;* @return array An array of arrays. The elements are:&nbsp;&nbsp;&nbsp;* 	&quot;account&quot; =&gt; the label of the receiving address&nbsp;&nbsp;&nbsp;* 	&quot;amount&quot; =&gt; total amount received by the address&nbsp;&nbsp;&nbsp;* 	&quot;confirmations&quot; =&gt; number of confirmations of the most recent transaction included&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.17&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function listreceivedbyaccount($minconf = 1, $includeempty = FALSE) {&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;listreceivedbyaccount requires a numeric minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;listreceivedbyaccount&quot;, $minconf, $includeempty);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Return an array of arrays showing how many Bitcoins have been received by&nbsp;&nbsp;&nbsp;* each label in the server&#39;s wallet.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param integer $minconf Minimum number of confirmations before payments are included.&nbsp;&nbsp;&nbsp;* @param boolean $includeempty Whether to include addresses that haven&#39;t received any payments.&nbsp;&nbsp;&nbsp;* @return array An array of arrays. The elements are:&nbsp;&nbsp;&nbsp;* 	&quot;label&quot; =&gt; the label of the receiving address&nbsp;&nbsp;&nbsp;* 	&quot;amount&quot; =&gt; total amount received by the address&nbsp;&nbsp;&nbsp;* 	&quot;confirmations&quot; =&gt; number of confirmations of the most recent transaction included&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @deprecated Since 0.3.17&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function listreceivedbylabel($minconf = 1, $includeempty = FALSE) {&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;listreceivedbylabel requires a numeric minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;listreceivedbylabel&quot;, $minconf, $includeempty);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Send amount from the server&#39;s available balance.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* $amount is a real and is rounded to the nearest 0.01. Returns string &quot;sent&quot; on success.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $address Destination Bitcoin address or IP address&nbsp;&nbsp;&nbsp;* @param float $amount Amount to send. Will be rounded to the nearest 0.01.&nbsp;&nbsp;&nbsp;* @param string $comment&nbsp;&nbsp;&nbsp;* @param string $comment_to&nbsp;&nbsp;&nbsp;* @return string Hexadecimal transaction ID on success.&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @todo Document the comment arguments better.&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function sendtoaddress($address, $amount, $comment = NULL, $comment_to = NULL) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$address || empty($address))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;sendtoaddress requires a destination address&quot;);&nbsp;&nbsp;&nbsp;&nbsp;if (!$amount || empty($amount))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;sendtoaddress requires an amount to send&quot;);&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($amount) || $amount &lt;= 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;sendtoaddress requires the amount sent to be a number &gt; 0&quot;);&nbsp;&nbsp;&nbsp;&nbsp;$amount = floatval($amount);&nbsp;&nbsp;&nbsp;&nbsp;if (!$comment &amp;&amp; !$comment_to)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;sendtoaddress&quot;, $address, $amount);&nbsp;&nbsp;&nbsp;&nbsp;if (!$comment_to)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;sendtoaddress&quot;, $address, $amount, $comment);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;sendtoaddress&quot;, $address, $amount, $comment, $comment_to);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Stop the Bitcoin server.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function stop() {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;stop&quot;);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Check that $address looks like a proper Bitcoin address.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $address String to test for validity as a Bitcoin address&nbsp;&nbsp;&nbsp;* @return array An array containing:&nbsp;&nbsp;&nbsp;* 	&quot;isvalid&quot; =&gt; true or false&nbsp;&nbsp;&nbsp;* 	&quot;ismine&quot; =&gt; true if the address is in the server&#39;s wallet&nbsp;&nbsp;&nbsp;* 	&quot;address&quot; =&gt; bitcoinaddress&nbsp;&nbsp;&nbsp;*  Note: ismine and address are only returned if the address is valid.&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function validateaddress($address) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$address || empty($address))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;validateaddress requires a Bitcoin address&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;validateaddress&quot;, $address);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Return information about a specific transaction.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $txid 64-digit hexadecimal transaction ID&nbsp;&nbsp;&nbsp;* @return array An error array, or an array containing:&nbsp;&nbsp;&nbsp;*    &quot;amount&quot; =&gt; float Transaction amount&nbsp;&nbsp;&nbsp;*    &quot;fee&quot; =&gt; float Transaction fee&nbsp;&nbsp;&nbsp;*    &quot;confirmations&quot; =&gt; integer Network confirmations of this transaction&nbsp;&nbsp;&nbsp;*    &quot;txid&quot; =&gt; string The transaction ID&nbsp;&nbsp;&nbsp;*    &quot;message&quot; =&gt; string Transaction &quot;comment&quot; message&nbsp;&nbsp;&nbsp;*    &quot;to&quot; =&gt; string Transaction &quot;to&quot; message&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.18&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function gettransaction($txid) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$txid || empty($txid) || strlen($txid) != 64 || !preg_match(&#39;/^[0-9a-fA-F]+$/&#39;, $txid))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;gettransaction requires a valid hexadecimal transaction ID&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;gettransaction&quot;, $txid);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Move bitcoins between accounts.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $fromaccount&nbsp;&nbsp;&nbsp;*    Account to move from. If given as an empty string (&quot;&quot;) or NULL, bitcoins will&nbsp;&nbsp;&nbsp;*    be moved from the wallet balance to the target account.&nbsp;&nbsp;&nbsp;* @param string $toaccount&nbsp;&nbsp;&nbsp;*     Account to move to&nbsp;&nbsp;&nbsp;* @param float $amount&nbsp;&nbsp;&nbsp;*     Amount to move&nbsp;&nbsp;&nbsp;* @param integer $minconf&nbsp;&nbsp;&nbsp;*     Minimum number of confirmations on bitcoins being moved&nbsp;&nbsp;&nbsp;* @param string $comment&nbsp;&nbsp;&nbsp;*     Transaction comment&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.18&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function move($fromaccount = &quot;&quot;, $toaccount, $amount, $minconf = 1, $comment = NULL) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$fromaccount) $fromaccount = &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;if (!$toaccount) $toaccount = &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;if (!$amount || !is_numeric($amount) || $amount &lt;= 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;move requires a from account, to account and numeric amount &gt; 0&quot;);&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;move requires a numeric $minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;if (!$comment || empty($comment))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;move&quot;, $fromaccount, $toaccount, $amount, $minconf);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;move&quot;, $fromaccount, $toaccount, $amount, $minconf, $comment);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Send $amount from $account&#39;s balance to $toaddress. This method will fail&nbsp;&nbsp;&nbsp;* if there is less than $amount bitcoins with $minconf confirmations in the&nbsp;&nbsp;&nbsp;* account&#39;s balance (unless $account is the empty-string-named default&nbsp;&nbsp;&nbsp;* account; it behaves like the sendtoaddress method). Returns transaction&nbsp;&nbsp;&nbsp;* ID on success.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $account Account to send from&nbsp;&nbsp;&nbsp;* @param string $toaddress Bitcoin address to send to&nbsp;&nbsp;&nbsp;* @param float $amount Amount to send&nbsp;&nbsp;&nbsp;* @param integer $minconf Minimum number of confirmations on bitcoins being sent&nbsp;&nbsp;&nbsp;* @param string $comment&nbsp;&nbsp;&nbsp;* @param string $comment_to&nbsp;&nbsp;&nbsp;* @return string Hexadecimal transaction ID&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.18&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function sendfrom($account, $toaddress, $amount, $minconf = 1, $comment = NULL, $comment_to = NULL) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$account || !$toaddress || empty($toaddress) || !$amount || !is_numeric($amount) || $amount &lt;= 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;sendfrom requires a from account, to account and numeric amount &gt; 0&quot;);&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;sendfrom requires a numeric $minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;if (!$comment &amp;&amp; !$comment_to)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;sendfrom&quot;, $account, $toaddress, $amount, $minconf);&nbsp;&nbsp;&nbsp;&nbsp;if (!$comment_to)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;sendfrom&quot;, $account, $toaddress, $amount, $minconf, $comment);&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;query(&quot;sendfrom&quot;, $account, $toaddress, $amount, $minconf, $comment, $comment_to);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Return formatted hash data to work on, or try to solve specified block.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* If $data is provided, tries to solve the block and returns true if successful.&nbsp;&nbsp;&nbsp;* If $data is not provided, returns formatted hash data to work on.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $data Block data&nbsp;&nbsp;&nbsp;* @return mixed&nbsp;&nbsp;&nbsp;*    boolean TRUE if $data provided and block solving successful&nbsp;&nbsp;&nbsp;*    array otherwise, containing:&nbsp;&nbsp;&nbsp;*      &quot;midstate&quot; =&gt; string, precomputed hash state after hashing the first half of the data&nbsp;&nbsp;&nbsp;*      &quot;data&quot; =&gt; string, block data&nbsp;&nbsp;&nbsp;*      &quot;hash1&quot; =&gt; string, formatted hash buffer for second hash&nbsp;&nbsp;&nbsp;*      &quot;target&quot; =&gt; string, little endian hash target&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.18&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getwork($data = NULL) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$data)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getwork&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getwork&quot;, $data);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Return the current bitcoin address for receiving payments to $account.&nbsp;&nbsp;&nbsp;* The account and address will be created if $account doesn&#39;t exist.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $account Account name&nbsp;&nbsp;&nbsp;* @return string Bitcoin address for $account&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.18&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getaccountaddress($account) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$account || empty($account))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;getaccountaddress requires an account&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getaccountaddress&quot;, $account);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Return a recent hashes per second performance measurement.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @return integer Hashes per second&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function gethashespersec() {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;gethashespersec&quot;);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the list of addresses associated with the given account.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $account&nbsp;&nbsp;&nbsp;* @return array&nbsp;&nbsp;&nbsp;*    A simple array of Bitcoin addresses associated with $account, empty&nbsp;&nbsp;&nbsp;*    if the account doesn&#39;t exist.&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function getaddressesbyaccount($account) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$account || empty($account))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;getaddressesbyaccount requires an account&quot;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;getaddressesbyaccount&quot;, $account);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the list of transactions associated with the given account.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $account The account to get transactions from. Accepts empty string &quot;&quot; and wildcard &quot;*&quot; values&nbsp;&nbsp;&nbsp;* @param integer $count The number of transactions to return.&nbsp;&nbsp;&nbsp;* @param integer $from The start number of transactions.&nbsp;&nbsp;&nbsp;* @return array&nbsp;&nbsp;&nbsp;*    &quot;account&quot; =&gt; account of transaction&nbsp;&nbsp;&nbsp;*    &quot;address&quot; =&gt; address of transaction&nbsp;&nbsp;&nbsp;*    &quot;category&quot; =&gt; &#39;send&#39; or &#39;recieve&#39;&nbsp;&nbsp;&nbsp;*    &quot;amount&quot; =&gt; Amount sent/recieved&nbsp;&nbsp;&nbsp;*    &quot;fee&quot; =&gt; Only on sent transactions, transaction fee taken&nbsp;&nbsp;&nbsp;*    &quot;confirmations&quot; =&gt; Confirmations&nbsp;&nbsp;&nbsp;*    &quot;txid&quot; =&gt; Transaction ID&nbsp;&nbsp;&nbsp;*    &quot;time&quot; =&gt; Time of transaction&nbsp;&nbsp;&nbsp;*    * @throws BitcoinClientException&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function listtransactions($account, $count = 10, $from = 0) {	if (!$account) $account = &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($count) || $count &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;listtransactions requires a numeric count &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($from) || $from &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;listtransactions requires a numeric from &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;listtransactions&quot;, $account, $count, $from);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns the list of accounts.&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function listaccounts($minconf = 1) {&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;listaccounts&quot;, $minconf);&nbsp;&nbsp;}&nbsp;&nbsp;/**&nbsp;&nbsp;&nbsp;* Returns Transaction id (txid)&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;* @param string $fromAccount Account to send from&nbsp;&nbsp;&nbsp;* @param array $sendTo Key=address Value=amount&nbsp;&nbsp;&nbsp;* @param integer $minconf&nbsp;&nbsp;&nbsp;* @param string $comment&nbsp;&nbsp;&nbsp;* @return string Hexadecimal transaction ID on success.&nbsp;&nbsp;&nbsp;* @throws BitcoinClientException&nbsp;&nbsp;&nbsp;* @since 0.3.21&nbsp;&nbsp;&nbsp;* @author codler&lt;github&gt;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;public function sendmany($fromAccount, $sendTo, $minconf = 1, $comment=NULL) {&nbsp;&nbsp;&nbsp;&nbsp;if (!$fromAccount || empty($fromAccount))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&quot;sendmany requires an account&quot;);&nbsp;&nbsp;&nbsp;&nbsp;if (!is_numeric($minconf) || $minconf &lt; 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new BitcoinClientException(&#39;sendmany requires a numeric minconf &gt;= 0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;if (!$comment)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;sendmany&quot;, $fromAccount, $sendTo, $minconf);&nbsp;&nbsp;&nbsp;&nbsp;return $this-&gt;query(&quot;sendmany&quot;, $fromAccount, $sendTo, $minconf, $comment);&nbsp;&nbsp;}}
Jump to Line
Go
Status
API
Training
Shop
Blog
About
© 2014 GitHub, Inc.
Terms
Privacy
Security
Contact
Something went wrong with that request. Please try again.

