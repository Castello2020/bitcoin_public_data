http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Thu, 24 Jul 2014 04:20:56 GMT
Content-Type: text/html
Connection: close
Set-Cookie: __cfduid=d1b134429e09d00ed7333f8796218e0571406175656107; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.oli.me.uk; HttpOnly
Last-Modified: Sat, 26 Apr 2014 13:24:40 GMT
Cache-Control: max-age=86400
Expires: Fri, 25 Jul 2014 04:21:04 GMT
Vary: Accept-Encoding
CF-RAY: 14ed53faa89c0880-IAD
Content-Encoding: gzip


<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>Equipping Vim for JavaScript - Oliver.prototype.blog</title>
<meta name="author" content="Oliver Caldwell">
<meta name="description" content="I absolutely love Vim. I use it for all of my writing, be that code or blog posts, which includes the funny language JavaScript. Sure you can open up &hellip;">
 
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="canonical" href="http://oli.me.uk/2013/06/29/equipping-vim-for-javascript">
<link href="/favicon.png" rel="icon">
<link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
<link href="/atom.xml" rel="alternate" title="Oliver.prototype.blog" type="application/atom+xml">
 
<link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-29131116-1']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</head>
<body>
<header role="banner"><hgroup>
<h1><a href="/">Oliver.prototype.blog</a></h1>
<h2>A place to share my knowledge and escapades in the world of web development.</h2>
</hgroup>
</header>
<nav role="navigation"><ul class="subscription" data-subscription="rss">
<li><a href="/atom.xml" rel="subscribe-rss" title="subscribe via RSS">RSS</a></li>
</ul>
<form action="http://google.com/search" method="get">
<fieldset role="search">
<input type="hidden" name="q" value="site:oli.me.uk"/>
<input class="search" type="text" name="q" results="0" placeholder="Search"/>
</fieldset>
</form>
<ul class="main-navigation">
<li><a href="/">Blog</a></li>
<li><a href="/archives/">Archives</a></li>
<li><a href="/about-me/">About me</a></li>
<li><a href="https://github.com/Wolfy87/oli.me.uk">Source</a></li>
</ul>
</nav>
<div id="main">
<div id="content">
<div>
<article class="hentry" role="article">
<header>
<h1 class="entry-title">Equipping Vim for JavaScript</h1>
<p class="meta">
<time datetime="2013-06-29T11:33:00+01:00" pubdate data-updated="true">Jun 29<span>th</span>, 2013</time>
| <a href="#disqus_thread">Comments</a>
</p>
</header>
<div class="entry-content"><p>I absolutely love Vim. I use it for all of my writing, be that code or blog posts, which includes the funny language JavaScript. Sure you can open up Vim and start mashing JavaScript, but you&rsquo;ll probably be yearning for a little help from your editor.</p>
<p>With a little bit of work you can actually set up Vim to give you pretty good suggestions (not just based on dumb strings!), great highlighting, perfect indentation and automatic linting. If you haven&rsquo;t tried this kind of thing before, welcome to the wonderful world of <a href="https://github.com/Wolfy87/vim-config/blob/master/bundles.vim">Vim bundle soup</a>.</p>
 
<h2>Managing the bundles</h2>
<p>I use <a href="https://github.com/gmarik/vundle">Vundle</a> to manage all of my bundles, I&rsquo;d recommend it to anyone looking to manage an extensive amount of bundles. It&rsquo;s pretty easy to use and is kind of built for downloading from GitHub, which is where all the bundles I am going to suggest are located.</p>
<p>I&rsquo;m not going to cover using Vundle here because <a href="https://github.com/gmarik/vundle#quick-start">the repository covers it perfectly</a>. So you should go and get Vundle set up before proceeding, it should only take a couple of minutes.</p>
<h2>All things syntax</h2>
<p>You may notice that JavaScript isn&rsquo;t exactly smooth to write in a default Vim install. You can rectify all of it&rsquo;s problems <em>really</em> easily.</p>
<h3>Colours (British spelling, deal with it)</h3>
<p>First, you will want to make sure that you have decent normal Vim colouring by adding something like this to your <code>.vimrc</code>.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">t_Co</span><span class="p">=</span><span class="m">256</span>
</span><span class='line'><span class="nb">syntax</span> <span class="k">on</span>
</span><span class='line'><span class="k">set</span> <span class="nb">background</span><span class="p">=</span><span class="nb">dark</span>
</span><span class='line'><span class="k">colorscheme</span> distinguished
</span></code></pre></td></tr></table></div></figure>
<p>This is mainly geared towards terminal Vim, so just take what you need. It will help to enable the 256 colour pallet, enable syntax highlighting, let Vim know we want a dark background and light foreground and finally set a different colour scheme.</p>
<p>I use <a href="https://github.com/Lokaltog/vim-distinguished">distinguished</a> at the moment, it&rsquo;s a great dark theme that runs excellently in a terminal and is really easy on the eyes. You should use a theme you want, but it&rsquo;s good to grab one that was built with JavaScript in mind.</p>
<p>Now you are going to want to install <a href="https://github.com/jelera/vim-javascript-syntax"><code>jelera/vim-javascript-syntax</code></a> by adding this to your <code>.vimrc</code> (or <a href="https://github.com/Wolfy87/vim-config/blob/master/bundles.vim">dedicated bundle file</a> as I have).</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Bundle <span class="s1">&#39;jelera/vim-javascript-syntax&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>After configuring and executing <code>vim +BundleInstall</code> (<a href="https://github.com/gmarik/vundle#quick-start">learn about Vundle</a> if you haven&rsquo;t already!) your JavaScript should <em>look</em> a lot nicer.</p>
<h3>Indenting (plus a couple of extra visual features)</h3>
<p>The perfect bundle to compliment <code>vim-javascript-syntax</code> is <a href="https://github.com/pangloss/vim-javascript"><code>pangloss/vim-javascript</code></a>. This bundle will add a tiny bit more highlighting as well as completely fix the weird indentation in standalone JavaScript files and code that&rsquo;s embedded within HTML (<em>shudder</em>).</p>
<p>You can combine <code>vim-javascript</code> with <a href="https://github.com/nathanaelkane/vim-indent-guides"><code>nathanaelkane/vim-indent-guides</code></a> to get lovely highlighting for your perfectly indented callback hell. It&rsquo;s a great indicator for what is lined up with what.</p>
<p>You&rsquo;ll also need to actually <a href="http://vim.wikia.com/wiki/Indenting_source_code">enable indentation in Vim</a> if you haven&rsquo;t already.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Bundle <span class="s1">&#39;pangloss/vim-javascript&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;nathanaelkane/vim-indent-guides&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<h3>Automate some typing</h3>
<p>One bundle I can&rsquo;t live without is <a href="https://github.com/Raimondi/delimitMate"><code>Raimondi/delimitMate</code></a>, it will automatically add the closing quote, bracket or any other thing you&rsquo;re typing that needs a counterpart character to stop your browser going haywire on the next refresh.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Bundle <span class="s1">&#39;Raimondi/delimitMate&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Something I&rsquo;ve found to be very useful, which doesn&rsquo;t require any bundles other than <code>delimitMate</code> really, is to add a key binding that will split my current line. So if I type <code>{</code>, <code>delimitMate</code> will insert <code>}</code> after my cursor, then I can execute my binding that will insert a new line in the middle of the two ready to receive some code.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// My cursor is indicated by the underscore.</span>
</span><span class='line'><span class="c1">// I type...</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span><span class="nx">_</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// delimitMate adds...</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span><span class="nx">_</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Then I hit my special key...</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>This is actually very easy to set up, all you need to do is add this to your <code>.vimrc</code> and tweak it as you see fit.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>imap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">c</span><span class="p">&gt;</span> <span class="p">&lt;</span>CR<span class="p">&gt;&lt;</span>Esc<span class="p">&gt;</span>O
</span></code></pre></td></tr></table></div></figure>
<p>That will map <code>Ctrl+C</code> whilst still within insert mode to the line splitting command. You can obviously rebind it if you want, but I think this works really well.</p>
<h2>Linting integration</h2>
<p>If you need linting in <em>any</em> language you should turn to <a href="https://github.com/scrooloose/syntastic"><code>scrooloose/syntastic</code></a>. It doesn&rsquo;t do much on its own, but combine it with an external linter and you have amazing live linting with indicators pointing to your problems within your actual code.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Bundle <span class="s1">&#39;scrooloose/syntastic&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; This does what it says on the tin. It will check your file on open too, not just on save.</span>
</span><span class='line'><span class="c">&quot; You might not want this, so just leave it out if you don&#39;t.</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_check_on_open<span class="p">=</span><span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>
<p>So once you have <code>syntastic</code> installed you will want to grab something that will lint your JavaScript. The obvious choice is the absolutely wonderful <a href="http://www.jshint.com/">JSHint</a>. All you have to do is install it globally with NPM and syntastic will do the rest.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g jshint
</span></code></pre></td></tr></table></div></figure>
<h2>Amazing code completion</h2>
<p>This is the most complicated thing to get going, but it&rsquo;s still pretty easy as install processes go. My first suggestion for auto completing your code would be to install <a href="https://github.com/Valloric/YouCompleteMe"><code>Valloric/YouCompleteMe</code></a>.</p>
<p>This is an optional extra really, it will automatically popup with suggestions as you type and works for a lot of languages. It&rsquo;s a bit dumb with JavaScript to begin with though, that&rsquo;s because it uses string based suggestions. It has no idea what variables actually contain, it just lists words and names you have used previously to help you along.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Bundle <span class="s1">&#39;Valloric/YouCompleteMe&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; These are the tweaks I apply to YCM&#39;s config, you don&#39;t need them but they might help.</span>
</span><span class='line'><span class="c">&quot; YCM gives you popups and splits by default that some people might not like, so these should tidy it up a bit for you.</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:ycm_add_preview_to_completeopt<span class="p">=</span><span class="m">0</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:ycm_confirm_extra_conf<span class="p">=</span><span class="m">0</span>
</span><span class='line'><span class="k">set</span> <span class="nb">completeopt</span><span class="p">-=</span>preview
</span></code></pre></td></tr></table></div></figure>
<p>Now to put the icing on the cake: <a href="https://github.com/marijnh/tern_for_vim"><code>marijnh/tern_for_vim</code></a>. <a href="http://ternjs.net/">Tern</a> is a tool that parses your JavaScript properly. It actually understands what type a property of an object is and is a lot more powerful than basic string suggestions.</p>
<p>Once installed, Tern will hook into YouCompleteMe (if you have installed it) through Vim&rsquo;s <a href="http://vim.wikia.com/wiki/Omni_completion">omni completion</a> which can be trigger manually if you need it. So as you&rsquo;re typing, Tern will be parsing your JavaScript and sending back it&rsquo;s suggestions via the omni completion menu which can be displayed by YouCompleteMe.</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Bundle <span class="s1">&#39;marijnh/tern_for_vim&#39;</span>
</span></code></pre></td></tr></table></div></figure>
<p>You will need to do some extra install work for both Tern and YouCompleteMe though, so please be sure to read though there documentation. YouCompleteMe requires you to compile a module to enable ridiculously fast completion and Tern needs to you go into it&rsquo;s directory and download it&rsquo;s NPM dependencies. Once done though, they will &ldquo;just work&rdquo;.</p>
<h2>Now go and write some JavaScript</h2>
<p>Hopefully you will now get to enjoy a similar environment to me. If you like the kind of bundles and configuration options I use then you might want to cherry-pick even more from <a href="https://github.com/Wolfy87/vim-config">my Vim configuration repository</a>. It&rsquo;s kind of spilled over into Tmux and Bash configuration now too, so you should be able to find at least one nice thing in there.</p>
</div>
<footer>
<p class="meta">
<span class="byline author vcard">Posted by <span class="fn">Oliver Caldwell</span></span>
<time datetime="2013-06-29T11:33:00+01:00" pubdate data-updated="true">Jun 29<span>th</span>, 2013</time>
<span class="categories">
<a class='category' href='/categories/javascript/'>javascript</a>, <a class='category' href='/categories/vim/'>vim</a>
</span>
</p>
<div class="sharing">
<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/" data-via="OliverCaldwell" data-counturl="http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/">Tweet</a>
</div>
<p class="meta">
<a class="basic-alignment left" href="/2013/06/12/maps-in-javascript/" title="Previous Post: Maps in JavaScript">&laquo; Maps in JavaScript</a>
<a class="basic-alignment right" href="/2013/07/02/ranges-summation-and-predicates/" title="Next Post: Ranges, summation and predicates">Ranges, summation and predicates &raquo;</a>
</p>
</footer>
</article>
<section>
<h1>Comments</h1>
<div id="disqus_thread" aria-live="polite"><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
</div>
</section>
</div>
<aside class="sidebar">
<section>
<h1>Bitcoin</h1>
<p>Like what I do here? Want even more? Spur me on with a small donation, it will probably go towards a coffee that will fuel my next post or project.</p>
<script type='text/javascript' src='http://coinwidget.com/widget/coin.js'></script>
<script type='text/javascript'>
		CoinWidgetCom.go({
			wallet_address: '1BE2s3dsELzBHGk3su2U6GfAqSXcA65P34',
			currency: 'bitcoin',
			counter: 'hide',
			alignment: 'bl',
			qrcode: true,
			auto_show: false,
			lbl_button: 'Donate',
			lbl_address: 'My Bitcoin Address:',
			lbl_count: 'donations',
			lbl_amount: 'BTC'
		});
	</script>
</section>
<section>
<h1>Recent Posts</h1>
<ul id="recent_posts">
<li class="post">
<a href="/2014/04/26/installing-vimdeck-on-arch/">Installing Vimdeck on Arch</a>
</li>
<li class="post">
<a href="/2014/03/18/always-remain-a-beginner/">Always remain a beginner</a>
</li>
<li class="post">
<a href="/2013/12/13/test-private-methods/">Test private methods</a>
</li>
<li class="post">
<a href="/2013/12/05/graph-from-scratch/">Graph from scratch</a>
</li>
<li class="post">
<a href="/2013/09/25/grabbing-elements-from-the-dom/">Grabbing elements from the DOM</a>
</li>
</ul>
</section>
<section>
<h1>GitHub Repos</h1>
<ul id="gh_repos">
<li class="loading">Status updating...</li>
</ul>
<a href="https://github.com/Wolfy87">@Wolfy87</a> on GitHub
</section>
</aside>
</div>
</div>
<footer role="contentinfo"><script src="/javascripts/modernizr-2.0.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>!window.jQuery && document.write(unescape('%3Cscript src="./javascripts/lib/jquery.min.js"%3E%3C/script%3E'))</script>
<script src="/javascripts/octopress.js" type="text/javascript"></script>
<script type="text/javascript" src="/javascripts/libs/jXHR.js"></script>
<script type="text/javascript" src="/javascripts/github.js"></script>
<script type="text/javascript">
	github.showRepos({
		user: 'Wolfy87',
		count: 5,
		skip_forks: true,
		target: '#gh_repos'
	});
</script>
<p>
Copyright &copy; 2014 - Oliver Caldwell -
<span class="credit">Powered by <a href="http://octopress.org">Octopress</a></span>
</p>
</footer>
<script type="text/javascript">
      var disqus_shortname = 'olimeuk';
      
        
        // var disqus_developer = 1;
        var disqus_identifier = 'http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/';
        var disqus_url = 'http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/';
        var disqus_script = 'embed.js';
      
    (function () {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = 'http://' + disqus_shortname + '.disqus.com/' + disqus_script;
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    }());
</script>
<script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = 'http://platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script>
</body>
</html>

