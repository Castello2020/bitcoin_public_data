http://forthescience.org/blog/2009/05/23/pythonic-evolution-part-2/
HTTP/1.1 200 OK
Date: Tue, 22 Jul 2014 07:19:30 GMT
Server: Apache
X-Pingback: http://forthescience.org/blog/xmlrpc.php
Link: <http://forthescience.org/blog/?p=95>; rel=shortlink
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 11486
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title> &raquo; Pythonic Evolution &#8211; Part 2 ForTheScience.org</title>
<link rel="pingback" href="http://forthescience.org/blog/xmlrpc.php" />
<link rel="shortcut icon" href="http://forthescience.org/favicon.png">

<style type="text/css" media="screen">

@import "http://forthescience.org/blog/wp-content/themes/garland-revisited/style.php";
</style>
<link type="text/css" rel="stylesheet" href="http://forthescience.org/blog/wp-content/plugins/easy-table-creator/css/easy_table_creator.css" />
<link type="text/css" rel="stylesheet" href="http://forthescience.org/blog/wp-content/plugins/easy-table-creator/css/tablesorter/style.css" />

<style type="text/css" media="screen">@import url(http://forthescience.org/blog/?garland_css=1);
</style><link rel="alternate" type="application/rss+xml" title="ForTheScience.org &raquo; Feed" href="http://forthescience.org/blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="ForTheScience.org &raquo; Comments Feed" href="http://forthescience.org/blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="ForTheScience.org &raquo; Pythonic Evolution &#8211; Part 2 Comments Feed" href="http://forthescience.org/blog/2009/05/23/pythonic-evolution-part-2/feed/" />
<link rel='stylesheet' id='openid-css'  href='http://forthescience.org/blog/wp-content/plugins/openid/f/openid.css?ver=519' type='text/css' media='all' />
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/easy-table-creator/js/easy_table_creator.js?ver=0.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/easy-table-creator/js/jquery.tablesorter.min.js?ver=0.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.4.5'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://forthescience.org/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://forthescience.org/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Pirates Pirates!' href='http://forthescience.org/blog/2009/05/16/pirates-pirates/' />
<link rel='next' title='Google Wave &#8211; say goodbye to email' href='http://forthescience.org/blog/2009/06/04/google-wave-say-goodbye-to-email/' />
<meta name="generator" content="WordPress 3.8.3" />
<link rel='canonical' href='http://forthescience.org/blog/2009/05/23/pythonic-evolution-part-2/' />
<link rel='shortlink' href='http://forthescience.org/blog/?p=95' />
<style type="text/css" id="syntaxhighlighteranchor"></style>
<!-- Google Analytics Tracking by Google Analyticator 6.4.5: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-13239309-1']);
        _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google 
        
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
</head>
<body class="single single-post postid-95 single-format-standard sidebars">
<div id="navigation"></div>
<div id="wrapper">
<div id="container" class="clear-block">
<div id="header">
<div id="logo-floater">
<h1>
<a href="http://forthescience.org/blog/">ForTheScience.org</a> <span style="font-style: italic; font-size: 60%;">A blog about science and programming</span>
</h1>
</div>
<!-- <ul class="links primary-links"> -->
<ul id="dropmenu">
<li class="page_item page-item-2291"><a href="http://gaia.forthescience.org/blog">Gaia blog</a></li>
<li class="page_item page-item-2"><a href="http://forthescience.org/blog/about/">About me</a></li>
<li class="page_item page-item-106"><a href="http://forthescience.org/blog/software/">Software</a></li>
<li class="page_item page-item-34"><a href="http://forthescience.org/blog/my-articles/">My Articles</a></li>
<li class="page_item page-item-5"><a href="http://forthescience.org/blog/bookshelf/">My Bookshelf</a></li>
</ul>                
</div> <!-- /header -->
<div id="sidebar-left" class="sidebar">
</div>
<div id="center"><div id="squeeze"><div class="right-corner"><div class="left-corner">
<!-- begin content -->
<div class="node">
<div class="post-95 post type-post status-publish format-standard hentry category-evolution category-python">
<h2>Pythonic Evolution &#8211; Part 2</h2>
<span class="submitted">May 23, 2009 &#8212; Stefano Borini </span>
<div class="content">
<p>This is the second part of a post relative to evolution. You can find the first part of the post <a href="http://forthescience.org/blog/2009/05/15/pythonic-evolution-part-1/">here</a>.</p>
<p>The last argument in the first post was relative to the requirements for evolution to happen. To recall, you need</p>
<ol>
<li><strong></strong><strong>An imperfect replicator</strong>, an entity able to produce a copy of itself, for example the DNA of our bacteria in the example above. The replication mechanism must have a certain degree of imperfection, so that some chance for occasional mutation must be possible, and consequently variability.</li>
<li><strong>Action of the replicator on the environment</strong>. For example, The DNA molecule, through a complex biological setup is able to produce proteins which, according to the laws of chemistry, influence the external world by digesting a metabolite and obtaining energy, or fighting an aggression to survive (to UV light, in our example) and reproduce.</li>
<li><strong>Variability of the replicator “phenotype”</strong> (which means the “final visible result” of the replicator). Small modifications (accidental or not) to the replicator will change its interaction with the external environment (for example, by granting him to survive better under UV light)</li>
<li><strong>Environmental conditions</strong>: the environment will propose conditions, for example availabe metabolites, temperature, pressure, UV light irradiation and these conditions could also change as time passes..</li>
<li><strong>Selective pressure</strong>: the interaction between the environmental conditions and the replicator phenotype will create a differentiation between replicators. Those better coping with the conditions will have higher reproductive chance than the others, producing a drift toward better replicators (in our case, the bacteria were under selective pressure because the UV light was killing them, but the mutated ones were more likely to survive)</li>
</ol>
<p>We offered the example of bacteria where a slight mutation offered to a single organism a very tiny additional chance to survive and produce children. In this very simple model, the mutated (better fit) characteristic became predominant in approx. one thousands generations, not many when you consider bacteria having replication time in the order of hours or days.</p>
<p>We closed the post by stating that this behavior works regardless of the nature of the replicator and the environment. It works in nature with the genetic code, compiled by ribosomes into proteins. It must works in a digital environment with digital bacteria too.</p>
<p><span id="more-95"></span></p>
<p>Four years ago, I developed a simple python program to show how &#8220;software bacteria&#8221; can evolve behavior to solve simple mathematical equations with no active human programming. The idea is as follows: a python program defines a &#8220;Bacterium&#8221; class, which represent our byte-based life form. Also, I define an &#8220;Environment&#8221;, where a bunch of Bacterium instances will live, prosper and hopefully reproduce. The environment will provide &#8220;mathematical food&#8221; to the bacteria, and the better the bacteria elaborate this food, the better for them, and the higher will be their chance to survive and reproduce.</p>
<p>In real bacteria, the genetic code is converted into protein, and the proteins are responsible for processing metabolites (food) according to the laws of chemistry. In our example, we will make a simplification, skipping the protein step and having the mathematical food directly processed by our genetic code.</p>
<p>The mathematical food will be a simple integer number and the genetic code will be a very simple language able to do sums (of signed numbers) and conditional branching. The result of the genetic code processing the food will be another integer number, a metabolized mathematical result. The environment will promote a condition so that those bacteria whose metabolized product has a particular characteristic (in our case, a particular resulting value) will have a higher chance of reproduction. The condition the environment will propose is the expected result of a simple mathematical equation. Ideally, at the end of this experiment, the evolved bacteria will possess genetic code able to perform the mathematical equation for any given input. In this sense, they evolved to process the food in the best possible way.</p>
<p>Confused? Don&#8217;t worry. It will be clearer soon.</p>
<h1>Here comes The Bacterium</h1>
<p>Cellular systems are not that different from computer programs. There is a programming language, a compiler, input and output parameters. There&#8217;s even memory.</p>
<p>In DNA, the genetic code is made out of four molecular letters, A G C T, forming three letters words, named codons. DNA is first copied to RNA. The RNA then is interpreted by an elaborate mechanism (the ribosome) able to translate each group of three-letter words into a specific amino acid (out of 20) as building block (think LEGO) to be put in a protein. The protein so created is a molecular machine which performs a chemical task, like digesting a metabolite, storing substances (eg. iron), providing structural support and so on. How the system got started is currently not yet known, but it takes one  replicator molecule to start the process, in particular if this molecule has self-catalytic properties (meaning: it makes easier the creation of a copy of itself). Likely candidates are vulcanic activity, electric discharges (lightnings), or panspermia. I tend to favor the electric discharge, coupled with catalysis by means of metals (found in the rocks). After all, the <a href="http://en.wikipedia.org/wiki/Miller-Urey_experiment">Miller-Urey experiment</a> demonstrated that if you mix and boil and discharge electricity long enough, you will generate aminoacids out of simple gases like water, methane, nitrogen and ammonia, something that it was present for sure into the Earth primordial atmosphere. So, at the moment is not know which was the replicator and how it got produced, but even if unlikely as an event, once started it grows and is basically unstoppable, provided proper conditions are met.</p>
<p>Once you have aminoacids, you have proteins. Biological systems evolved to use proteins because they are more efficient and disposable, while the genetic code is less efficient, and very important. After all, programmers keep their source code in a backed up subversion repository, while giving out compiled versions.  Losing a compiled version is not a big issue, you can always recreate it from the sources, but having your subversion system go corrupt means that your asset is totally lost, and could mean that your company is out of business. As already said, in our in-silico setup, we skip the translation part for simplicity.</p>
<p>In our mathematical bacterium we have three variables that can be set: A, X and Y. Each of them has a different role and particularity. A is the import/export variable where the value representing the food is first inserted, modified, and released to the environment. You can see it as the unique input/output parameter of our &#8220;genetic code function&#8221;. X and Y are internal variables. You can make an analogy to internal metabolites needed to support the food consumption.  The main difference between the two is that X is more of a counter: it can be set, incremented (or decremented) and tested for being zero and decide if branch (or not). Y is instead auxilliary in processing A. Our bacterium has a genetic code which consist of 10 codons.  Like amino acids are able to perform various chemical operations on substrates by their own chemical nature, these operations can perform different mathematical or logical tasks. The codons are:</p>
<ul>
<li><strong>LoadA</strong>, <strong>LoadX</strong>, <strong>LoadY</strong>: each of them loads a specified value in the variable A, X or Y.</li>
<li><strong>IncA</strong>, <strong>IncX</strong>: increments the value of the variable A or X of a given specified amount (can be negative)</li>
<li><strong>MoveAtoY</strong>: copies the content of A into Y.</li>
<li><strong>AddYtoA</strong>: performs the sum between the content of A and Y, and stores the result in A.</li>
<li><strong>BranchXZero</strong>,<strong>BranchXNotZero</strong>: jumps a specified number of codons forward (or backwards) if the content of the variable X is zero or not-zero, respectively.</li>
<li><strong>Return</strong>: terminates the execution of the genetic code.</li>
</ul>
<p>Let&#8217;s see some example of genetic code that does something to a mathematical food.</p>
<p>This is the most trivial one</p>
<pre>Return</pre>
<p>A bacterium with this genetic code will take the metabolite (an input number), and load it automatically in A. Then, it will finish immediately with no processing. The content of A is the result of the metabolic process. In this case, the bacterium returns what it eats. you give him 5, it returns 5. You give him 13, it returns 13.</p>
<p>A more interesting case is the following:</p>
<pre>IncA 5
Return</pre>
<p>The bacterium with this genetic code in the first instruction will increment 5 to the content of A. The second statement will return whatever it is containted in A. This bacterium eats 4 and returns 9, eats 13 and returns 18, etc. You get the idea.</p>
<p>So, now you can imagine a population of bacteria, and imagine that the genetic code was created with a completely random process. For example, say that we create a population of 3000 bacteria with the following criteria:</p>
<ol>
<li>When you create each bacterium, you extract a random number of codons (from 2 to 50) which will be used to generate their genetic code.</li>
<li>Given the number of codons for a specific bacterium, you extract that number of randomly chosen codons from the available pool (LoadA, LoadX, LoadY, IncA, IncX, MoveAtoY, AddYtoA, BranchXZero, BranchXNotZero, Return).</li>
<li>For codons accepting a numeric value (LoadA, LoadX, LoadY, IncA, IncX, BranchXZero, BranchXNotZero), extract a random number from, say, -5 to +5 and use it as a numeric value.</li>
<li>What you obtain is a bacterium whose genetic code is a random mess of a random number of random codons with random parameters.</li>
<li>And of course you obtain a population of 3000 bacteria all with random genetic code.</li>
</ol>
<p>If you feed a number (say 42) to each bacteria, you will expect many different results. Each bacterium will be fed with the number 42 (which will be placed in A) and then the randomly generated set of operations will occur. Nice, but not particularly useful.</p>
<p>But here the cool stuff begins. Suppose you decide to say: if the environment provides 42, those bacteria that produces a result close to 47 are more likely to survive. Those who produce a numeric value very far from 47 are instead more likely to die. With this in mind, you start killing bacteria. Those who return exactly 47 will survive. Those that return 48 have a slight chance of dying, but not much. Those who return 0, or 500 will be probably killed immediately. Out of the starting 3000 bacteria, you will now have a troop of survivors (say 100) whose genetic code produce, by pure random chance, something that is quite near to the expected result (47) out of the food value 42.</p>
<p>Now you allow this bacteria to reproduce. Of course, if you take the 100 survivors and produce exact clones so to repopulate up to 3000, you will obtain no improvement. Here the &#8220;imperfect replication&#8221; kicks in. You allow a random number of mutations to occur to each bacterium before duplicating. These mutations will change the genetic code, potentially creating a new program that produces something lethal (too far from 47) but also something with better fit (something quite near to 47).</p>
<p>After this event takes place, you allow the bacteria to replicate so that you restore your pool of 3000, and you apply selection again. You feed them 42 and you kill all those bacteria producing results too far from the expectation (47). New survivors, new mutations, new generation, and you go on and on.</p>
<p>As you can see, all the conditions for evolution are met:</p>
<ol>
<li><strong>An imperfect replicator</strong> exists: it&#8217;s our genetic code based on mathematical codons. Replication is imperfect because we have random mutation of the genetic code at every new generation.</li>
<li><strong>Action of the replicator on the environment</strong>. The genetic code takes a number and process it into another number.</li>
<li><strong>Variability of the replicator “phenotype”</strong>. Modifications on the genetic code produce modification in the final resulting value.</li>
<li><strong>Environmental conditions</strong>: The environment presents 42 and expects 47 as a good value indicative of a nice processing.</li>
<li><strong>Selective pressure</strong>: genetic code responding at best to the environmental conditions will have a higher chance to survive and produce a new generation. Genetic code that is slightly less accurate will have a lower chance to survive, and genetic code producing values too far from what the environment considers a proper response will be killed.</li>
</ol>
<p>In the next post, we will see how this mechanism has been implemented into a small python program, and we will see what happens for different cases.</p>
</div>
<div class="meta">
Posted in <a href="http://forthescience.org/blog/category/topics/biology/evolution/" title="View all posts in Evolution" rel="category tag">Evolution</a>, <a href="http://forthescience.org/blog/category/topics/computer-science/languages/python/" title="View all posts in Python" rel="category tag">Python</a>.  <a href='http://forthescience.org/blog/2009/05/23/pythonic-evolution-part-2/feed/'><abbr title="Really Simple Syndication">RSS</abbr> feed for comments on this post.</a>. <a href="http://forthescience.org/blog/2009/05/23/pythonic-evolution-part-2/trackback/" rel="trackback">TrackBack <abbr title="Universal Resource Locator">URL</abbr></a>.
</div>
</div>
<h3 id="comments">2 Comments</h3>
<ol class="commentlist">
		<li class="comment even thread-even depth-1" id="comment-6018">
				<div id="div-comment-6018" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/ecd71e5111fe5ab8e4e028ede9c54ea5?s=32&amp;d=identicon&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite class="fn">Simone Piunno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://forthescience.org/blog/2009/05/23/pythonic-evolution-part-2/comment-page-1/#comment-6018">
			May 31, 2009 at 6:02 pm</a>		</div>

		<p>Cool article!  You make a good job but I think your formalism is imperfect.<br />
You say your creatures are made out of 10 codons but to me they look like 37 because &#8220;IncA 1&#8243; and &#8220;IncA 2&#8243; are two different basic operations and you have 10 possible IncA (-5 to +5).  For the same reason you have 10 possible codons of BranchXZero and 10 possible codons of BranchXNotZero.<br />
If this were not the case how are you going to store this operand in the DNA?</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-stefano-2 bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-6132">
				<div id="div-comment-6132" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/f13cb1b1bd8b16bf6dc6eda558e162a0?s=32&amp;d=identicon&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite class="fn"><a href='http://stefanoborini.com/id/' rel='external nofollow' class='openid_link url'>Stefano</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://forthescience.org/blog/2009/05/23/pythonic-evolution-part-2/comment-page-1/#comment-6132">
			June 3, 2009 at 12:24 pm</a>		</div>

		<p>You have a point on this. The reason is that this article has been written a loong time ago, and I used the term &#8220;opcode&#8221;, which is a well suited term. Now it&#8217;s too late to change, but you can still assume that the operand is an additional metabolite or cofactor (for example, many proteins need a metal ion to work, and they work with reduced efficiency or not at all with a different ion).</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
</ol>
                        <!-- If comments are closed. -->
                <p class="nocomments">Comments are closed.</p>
        <div class="nextprev">
<div class="alignleft"> &laquo; <a href="http://forthescience.org/blog/2009/05/16/pirates-pirates/" rel="prev">Pirates Pirates!</a></div>
<div class="alignright"> <a href="http://forthescience.org/blog/2009/06/04/google-wave-say-goodbye-to-email/" rel="next">Google Wave &#8211; say goodbye to email</a> &raquo;</div>
</div>
</div><!-- end content -->    
<span class="clear"></span>
<div id="footer">
Valid <a href="http://validator.w3.org/check?uri=referer" title="Valid XHTML Strict 1.0">XHTML Strict 1.0</a> &bull; Theme: Garland-revisited by <a href="http://www.pross.org.uk">Pross</a><br />
</div>
</div></div></div></div> <!-- /.left-corner, /.right-corner, /#squeeze, /#center -->
<div id="sidebar-right" class="sidebar">
<ul class="menu">
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Found something useful?</h2>
			<div class="textwidget"><div>
Tip me via <img style="
width:42px; height:42px; vertical-align:middle" src="http://forthescience.org/blog/wp-content/uploads/2014/02/bitcoin.png"/>
<span style="font-size: 12pt"> <a href="bitcoin:13RQmVjRKVbQnVmuVsFxHjycgo7cTaaZ3w">BitCoin</a>!</span><br> <span style="font-size: 9pt">More info...</span> 
</div>
</div>
		</li>
<li id="categories-516756312" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
<select name='cat' id='cat' class='postform' >
	<option value='-1'>Select Category</option>
	<option class="level-0" value="7">Administrative</option>
	<option class="level-0" value="113">Amministrative</option>
	<option class="level-0" value="105">Argomenti</option>
	<option class="level-1" value="114">&nbsp;&nbsp;&nbsp;Biologia</option>
	<option class="level-2" value="116">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bioetica</option>
	<option class="level-2" value="136">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evoluzione</option>
	<option class="level-1" value="115">&nbsp;&nbsp;&nbsp;Chimica</option>
	<option class="level-1" value="104">&nbsp;&nbsp;&nbsp;Informatica</option>
	<option class="level-2" value="159">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Grafica</option>
	<option class="level-2" value="178">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hardware @it</option>
	<option class="level-2" value="118">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linguaggi</option>
	<option class="level-3" value="128">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bash @it</option>
	<option class="level-3" value="137">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C/C++ @it</option>
	<option class="level-3" value="162">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript @it</option>
	<option class="level-3" value="164">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PostScript @it</option>
	<option class="level-3" value="119">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python @it</option>
	<option class="level-2" value="166">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sistemi Operativi</option>
	<option class="level-3" value="177">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MacOSX @it</option>
	<option class="level-0" value="100">Non categorizzate</option>
	<option class="level-0" value="66">Opinion</option>
	<option class="level-0" value="52">Personal</option>
	<option class="level-0" value="12">Resources</option>
	<option class="level-1" value="83">&nbsp;&nbsp;&nbsp;Articles</option>
	<option class="level-1" value="13">&nbsp;&nbsp;&nbsp;Books</option>
	<option class="level-1" value="19">&nbsp;&nbsp;&nbsp;Courses</option>
	<option class="level-1" value="32">&nbsp;&nbsp;&nbsp;Meetings</option>
	<option class="level-1" value="126">&nbsp;&nbsp;&nbsp;Movies</option>
	<option class="level-1" value="55">&nbsp;&nbsp;&nbsp;Software</option>
	<option class="level-1" value="57">&nbsp;&nbsp;&nbsp;TV</option>
	<option class="level-1" value="14">&nbsp;&nbsp;&nbsp;Websites</option>
	<option class="level-0" value="140">Risorse</option>
	<option class="level-1" value="143">&nbsp;&nbsp;&nbsp;Corsi</option>
	<option class="level-1" value="146">&nbsp;&nbsp;&nbsp;Software @it</option>
	<option class="level-0" value="3">Topics</option>
	<option class="level-1" value="226">&nbsp;&nbsp;&nbsp;Academia</option>
	<option class="level-1" value="91">&nbsp;&nbsp;&nbsp;Art</option>
	<option class="level-1" value="44">&nbsp;&nbsp;&nbsp;Authoring</option>
	<option class="level-1" value="18">&nbsp;&nbsp;&nbsp;Bioinformatics</option>
	<option class="level-1" value="4">&nbsp;&nbsp;&nbsp;Biology</option>
	<option class="level-2" value="45">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bioethics</option>
	<option class="level-2" value="21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evolution</option>
	<option class="level-2" value="197">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genetics</option>
	<option class="level-1" value="75">&nbsp;&nbsp;&nbsp;Charity</option>
	<option class="level-1" value="38">&nbsp;&nbsp;&nbsp;Chemistry</option>
	<option class="level-2" value="73">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computational Chemistry</option>
	<option class="level-2" value="102">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Natural compounds chemistry</option>
	<option class="level-1" value="5">&nbsp;&nbsp;&nbsp;Computer Science</option>
	<option class="level-2" value="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Databases</option>
	<option class="level-3" value="34">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MySQL</option>
	<option class="level-2" value="53">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Design</option>
	<option class="level-2" value="22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Graphics</option>
	<option class="level-3" value="187">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Raytracing</option>
	<option class="level-2" value="174">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hardware</option>
	<option class="level-2" value="9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Languages</option>
	<option class="level-3" value="17">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bash</option>
	<option class="level-3" value="23">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C/C++</option>
	<option class="level-3" value="54">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran</option>
	<option class="level-3" value="56">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gnuplot</option>
	<option class="level-3" value="112">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript</option>
	<option class="level-3" value="25">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perl</option>
	<option class="level-3" value="24">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PostScript</option>
	<option class="level-3" value="10">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python</option>
	<option class="level-3" value="33">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R</option>
	<option class="level-2" value="26">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operating Systems</option>
	<option class="level-3" value="29">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux</option>
	<option class="level-4" value="224">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ubuntu</option>
	<option class="level-3" value="31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MacOSX</option>
	<option class="level-3" value="58">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The Cloud</option>
	<option class="level-3" value="30">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows</option>
	<option class="level-2" value="15">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Refactoring</option>
	<option class="level-2" value="49">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Security</option>
	<option class="level-2" value="110">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Semantics</option>
	<option class="level-2" value="35">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Technologies</option>
	<option class="level-3" value="69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Backups</option>
	<option class="level-3" value="72">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Content Management</option>
	<option class="level-3" value="107">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Digital Rights Management</option>
	<option class="level-3" value="59">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email</option>
	<option class="level-3" value="60">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Google Wave</option>
	<option class="level-3" value="111">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTML</option>
	<option class="level-3" value="68">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPod touch</option>
	<option class="level-3" value="109">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Microformats</option>
	<option class="level-3" value="51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Package Management</option>
	<option class="level-3" value="80">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QR-Codes</option>
	<option class="level-3" value="225">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Qt</option>
	<option class="level-3" value="71">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RDF</option>
	<option class="level-3" value="41">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unicode</option>
	<option class="level-3" value="50">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version Control</option>
	<option class="level-4" value="223">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git</option>
	<option class="level-3" value="67">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Web frameworks</option>
	<option class="level-3" value="36">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XML</option>
	<option class="level-2" value="40">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Testing</option>
	<option class="level-1" value="78">&nbsp;&nbsp;&nbsp;Devices</option>
	<option class="level-2" value="79">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPad</option>
	<option class="level-2" value="172">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPhone</option>
	<option class="level-1" value="106">&nbsp;&nbsp;&nbsp;Dissemination</option>
	<option class="level-1" value="175">&nbsp;&nbsp;&nbsp;Environment</option>
	<option class="level-1" value="74">&nbsp;&nbsp;&nbsp;Food</option>
	<option class="level-1" value="133">&nbsp;&nbsp;&nbsp;Gardening</option>
	<option class="level-1" value="84">&nbsp;&nbsp;&nbsp;Geology</option>
	<option class="level-2" value="85">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Earthquakes</option>
	<option class="level-1" value="63">&nbsp;&nbsp;&nbsp;Law</option>
	<option class="level-2" value="64">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Software Licensing</option>
	<option class="level-1" value="6">&nbsp;&nbsp;&nbsp;Mathematics</option>
	<option class="level-2" value="120">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fractals</option>
	<option class="level-2" value="173">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linear Algebra</option>
	<option class="level-2" value="127">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Probability</option>
	<option class="level-1" value="101">&nbsp;&nbsp;&nbsp;Medicine</option>
	<option class="level-1" value="121">&nbsp;&nbsp;&nbsp;Photography</option>
	<option class="level-1" value="39">&nbsp;&nbsp;&nbsp;Physics</option>
	<option class="level-2" value="93">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Large Hadron Collider</option>
	<option class="level-2" value="97">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Magnetism</option>
	<option class="level-1" value="11">&nbsp;&nbsp;&nbsp;Project Management</option>
	<option class="level-2" value="132">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Risk Management</option>
	<option class="level-1" value="65">&nbsp;&nbsp;&nbsp;Psychology</option>
	<option class="level-1" value="20">&nbsp;&nbsp;&nbsp;Robotics</option>
	<option class="level-1" value="46">&nbsp;&nbsp;&nbsp;Space</option>
	<option class="level-2" value="47">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Astrobiology</option>
	<option class="level-2" value="42">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Astronomy</option>
	<option class="level-2" value="48">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Space Exploration</option>
	<option class="level-1" value="43">&nbsp;&nbsp;&nbsp;Statistics</option>
	<option class="level-1" value="219">&nbsp;&nbsp;&nbsp;Usability</option>
</select>

<script type='text/javascript'>
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "http://forthescience.org/blog/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</li>
 </ul>
</div></div> <!-- /container -->
</div>
<!-- /layout -->
<script type="text/javascript">

    jQuery(document).ready(function(){
        jQuery(".easy-table-creator").tablesorter({widgets: ['zebra']});


    })



</script>
</body>
</html>
