http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 05:57:58 GMT
Server: Apache
X-Pingback: http://forthescience.org/blog/xmlrpc.php
Link: <http://forthescience.org/blog/?p=52>; rel=shortlink
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 12043
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title> &raquo; Why is most science programming done in fortran? ForTheScience.org</title>
<link rel="pingback" href="http://forthescience.org/blog/xmlrpc.php" />
<link rel="shortcut icon" href="http://forthescience.org/favicon.png">

<style type="text/css" media="screen">

@import "http://forthescience.org/blog/wp-content/themes/garland-revisited/style.php";
</style>
<link type="text/css" rel="stylesheet" href="http://forthescience.org/blog/wp-content/plugins/easy-table-creator/css/easy_table_creator.css" />
<link type="text/css" rel="stylesheet" href="http://forthescience.org/blog/wp-content/plugins/easy-table-creator/css/tablesorter/style.css" />

<style type="text/css" media="screen">@import url(http://forthescience.org/blog/?garland_css=1);
</style><link rel="alternate" type="application/rss+xml" title="ForTheScience.org &raquo; Feed" href="http://forthescience.org/blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="ForTheScience.org &raquo; Comments Feed" href="http://forthescience.org/blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="ForTheScience.org &raquo; Why is most science programming done in fortran? Comments Feed" href="http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/feed/" />
<link rel='stylesheet' id='openid-css'  href='http://forthescience.org/blog/wp-content/plugins/openid/f/openid.css?ver=519' type='text/css' media='all' />
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/easy-table-creator/js/easy_table_creator.js?ver=0.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/easy-table-creator/js/jquery.tablesorter.min.js?ver=0.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.4.5'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://forthescience.org/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://forthescience.org/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='What&#8217;s the point of inheritance in python ?' href='http://forthescience.org/blog/2009/02/13/whats-the-point-of-inheritance-in-python/' />
<link rel='next' title='Hard disk going ballistic on OSX ?' href='http://forthescience.org/blog/2009/02/27/hard-disk-going-ballistic-on-osx/' />
<meta name="generator" content="WordPress 3.8.3" />
<link rel='canonical' href='http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/' />
<link rel='shortlink' href='http://forthescience.org/blog/?p=52' />
<style type="text/css" id="syntaxhighlighteranchor"></style>
<!-- Google Analytics Tracking by Google Analyticator 6.4.5: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-13239309-1']);
        _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google 
        
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
</head>
<body class="single single-post postid-52 single-format-standard sidebars">
<div id="navigation"></div>
<div id="wrapper">
<div id="container" class="clear-block">
<div id="header">
<div id="logo-floater">
<h1>
<a href="http://forthescience.org/blog/">ForTheScience.org</a> <span style="font-style: italic; font-size: 60%;">A blog about science and programming</span>
</h1>
</div>
<!-- <ul class="links primary-links"> -->
<ul id="dropmenu">
<li class="page_item page-item-2291"><a href="http://gaia.forthescience.org/blog">Gaia blog</a></li>
<li class="page_item page-item-2"><a href="http://forthescience.org/blog/about/">About me</a></li>
<li class="page_item page-item-106"><a href="http://forthescience.org/blog/software/">Software</a></li>
<li class="page_item page-item-34"><a href="http://forthescience.org/blog/my-articles/">My Articles</a></li>
<li class="page_item page-item-5"><a href="http://forthescience.org/blog/bookshelf/">My Bookshelf</a></li>
</ul>                
</div> <!-- /header -->
<div id="sidebar-left" class="sidebar">
</div>
<div id="center"><div id="squeeze"><div class="right-corner"><div class="left-corner">
<!-- begin content -->
<div class="node">
<div class="post-52 post type-post status-publish format-standard hentry category-fortran">
<h2>Why is most science programming done in fortran?</h2>
<span class="submitted">February 22, 2009 &#8212; Stefano Borini </span>
<div class="content">
<p>I found this interesting question in the referral logs on ForTheScience. Why is most science programming done in Fortran (77 or 95)?</p>
<p>After some thought, I can fill the following reasons:</p>
<ul>
<li>Fortran is simple to understand. Not the code itself maybe, but the style. The learning curve for doing something in Fortran is very low, and after you manage the basic concepts, read and write, you can be proficient enough to write even complex computational application. Most scientists are not programmers, and they would be overwhelmed with the intricacies of C and C++. I would strongly prefer a non-programmer to code Fortran than, say, perl. In other words, Fortran just fits the need computational scientists have: read numbers, do a calculation, write the result, and everything can be taught to a profane in a standard semester course.</li>
<li>Fortran is computationally efficient. I will not go into the age old debate about &#8220;is Fortran really faster than C?&#8221;, for which I have a rather articulate opinion I won&#8217;t delve in. Instead, I will just present the fact that is indeed one of the languages whose compilers and computational libraries have been beaten to death for computational efficiency, being their marketing value.</li>
<li>Fortran is old. This has the effect of producing a huge amount of legacy code that have to be maintained or reused. Rewriting this code is normally not possible: who should do it? Even if this task requires just one man month in three years of Ph.D. contract, it will probably not produce a scientific publication, so nobody want the task. Moreover, the rewriting will likely ruin interfacing with other codes, programs and libraries, as well as the group knowledge (if any) of the code, so this move will almost always be opposed.</li>
<li>Fortran has a slow release cycle. Backward compatibility has been kept into account. Knowing that the code you wrote in the 80s will still compile today (or eventually you will have to add some compiler switch) make everyone happier. I am not sure you can run a perl or python program written 10 years ago and have it running today. I have no experience with C and C++ and old codes, so I am not completely sure about this point, and I welcome being proven wrong.</li>
</ul>
<p>There are for sure many other reasons, but I won&#8217;t go further.</p>
<p>Let&#8217;s see instead why and when Fortran should not be used. My head goes to python for most comparison:</p>
<ul>
<li>Fortran has very reduced expressivity. You need a lot of code, often redundant, to code something. In some cases, you need to put stuff in temporary variables to pass the information to a subroutine, introducing more variables (difficult to maintain) or recycling old ones (bad).</li>
<li>Fortran (77, things are better in 95) makes very difficult to perform modular programming. Namespace pollution can be dramatic on large programs, especially considering the short identifier limit (not an issue on modern compilers, but in violation of the standard). Fortran 95 modules are a step ahead, but you can&#8217;t group modules into submodules.</li>
<li>Fortran (95) does not allow storage of function or subroutine pointers, making callback-oriented programming very hard.</li>
<li>Fortran (95) does not allow inheritance. <a href="http://www.macresearch.org/advanced_fortran_90_callbacks_with_the_transfer_function">Smart workarounds exist</a>, but they require some skills and the base class develops a dependency towards derived ones.</li>
<li>Fortran has no polymorphism nor templating, making very painful to work on generic data types. Again, <a href="http://www.macresearch.org/advanced_fortran_polymorphism_and_generic_programming">workarounds exist, but they require external tools</a>.</li>
<li>Fortran makes very difficult to keep loose coupling. A very strong dependency network arises. For large programs, the number of modules USEd (or the amount of code in them) may increase considerably. Compare with python, where a module does not need to be imported if you have to call a method on an object inside that module, or with C++, where you have forward declarations.</li>
<li>Fortran (95) does not have object orientation, it is very difficult, if not impossible, to use traditional design patterns.</li>
<li>Fortran does not have exceptions (F2003 will, but not custom ones, as far as I know).</li>
<li>Fortran has IMPLICIT. (Edit: yes, it has IMPLICIT NONE, but the existence of implicit declaration is unfortunately abused still today. It should have been deprecated.)</li>
<li>Fortran (77) does not have aggregated data types and dynamic memory allocation (in the standard)</li>
<li>Fortran strings are not dynamic in length (unless, if I remember correctly, if you do very weird hacks). A string of Length 100 and another of Length 101 are like being two different datatypes (say an int and a string), unless you use the LEN=* in routine calls, but you cannot make more room to an allocated string if needed.</li>
<li>Fortran did not have clear interfacing with C, and every compiler did as it pleased. Apparently this is no longer true with the introduction of BIND.</li>
<li>No effective tools exist for documenting the code or easily perform Test Driven Development.</li>
<li>Libraries out there are targeted at computational tasks. I haven&#8217;t seen any good library for GUI programming, networking, db access, and even if you could, would you ?</li>
<li>Fortran is full of unusual pitfalls for anyone used to a different language. While pitfalls exist in any language, Fortran has pitfalls coming from compatibility towards older improper use (e.g. automatic SAVE in assignment at declaration). In some other cases though, pitfalls are due to the highly optimized nature of the language. These pitfalls are in general a strong deviation from the behavior of any other language using the similar constructs.</li>
<li>Most of the code out there uses old code. Even if the language progressed, you will still find ancient remains of code written when the main writing method was a stick on a clay table. This code will most likely be impossible to refactor.</li>
</ul>
<p>This is just out of the top of my head, and I am sure there is a lot more. In any case, Fortran 2003 seems to alleviate most of the problems outlined above.  In particular, it will have object oriented programming, and  function/subroutine pointers. A considerable step forward.</p>
<p>Please note that I wasn&#8217;t a Fortran fan, but with time I became tolerant to it. It should be used sparingly and only where the need exist, or if a real reason exists: use high level programming languages with good expressivity first, such as Python. Then eventually optimize where needed, sometimes with a drop of Fortran, but only if you really, really (yes, I mean <strong>really</strong>) need it.</p>
</div>
<div class="meta">
Posted in <a href="http://forthescience.org/blog/category/topics/computer-science/languages/fortran/" title="View all posts in Fortran" rel="category tag">Fortran</a>.  <a href='http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/feed/'><abbr title="Really Simple Syndication">RSS</abbr> feed for comments on this post.</a>. <a href="http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/trackback/" rel="trackback">TrackBack <abbr title="Universal Resource Locator">URL</abbr></a>.
</div>
</div>
<h3 id="comments">4 Comments</h3>
<ol class="commentlist">
		<li class="comment even thread-even depth-1" id="comment-8680">
				<div id="div-comment-8680" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/8453412b89c939481b80a57da4b72e29?s=32&amp;d=identicon&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite class="fn">Magermans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/comment-page-1/#comment-8680">
			December 2, 2009 at 2:44 pm</a>		</div>

		<p>Perhaps the comment is late, but it is , I think, relevant.<br />
First of all, I&#8217;m a fan of Java. I also work on some simulation software written in Fortran.</p>
<p>1) a lot of code to perform a task ??<br />
let me give a counter example<br />
Java (cold be C or  C++):</p>
<p>float[10][10] a;<br />
for (int i=0; i&lt;a.length; i++) for(int j=0; j&lt;a[i].length; j++) a[i][j] = 0;</p>
<p>Fortran:</p>
<p>real::a(10,10)<br />
a = 0</p>
<p>2) modular programming is easy with fortran 95, Object programming is with fortran 2003.</p>
<p>3) if fortran has IMPLICIT, it also have IMPLICIT NONE and each compiler has flags to prevent implicit statement.</p>
<p>4) Dynmic memory allocation, aggregation: not missing any more since fortran 90</p>
<p>5) dynamic strings: foreseen in fortran 2003, not yet implemented by compilers. The only cons so far. Nevertheless, charaster(100) and Character(101) are more like an double and a float than an int and a string, as thay can be compared and assinged to each other&#8230;</p>
<p>6) GUI programming, Networking, DB access, real time, inter-process communication and much more&#8230; Yes, I&#039;ve done that in Fortran 15 years ago when I was programming Satellite control center, with high requirements on reliability. A lot safer than doing them in C or C++.</p>
<p>Conclusion: The language is secondary and you cannot say &quot;Don&#039;t use that or that language&quot;. There are Pros and cons for all of them, and it always depends on the programmer&#8230;</p>
<p>Pol Magermans<br />
Software Engineer<br />
University of Liège, Belgium.</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-stefano-2 bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-8708">
				<div id="div-comment-8708" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/f13cb1b1bd8b16bf6dc6eda558e162a0?s=32&amp;d=identicon&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite class="fn"><a href='http://stefanoborini.com/id/' rel='external nofollow' class='openid_link url'>Stefano Borini</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/comment-page-1/#comment-8708">
			December 5, 2009 at 5:28 am</a>		</div>

		<p>> 1) a lot of code to perform a task ??<br />
> let me give a counter example<br />
> Java (cold be C or C++):<br />
><br />
> float[10][10] a;<br />
> for (int i=0; i<a .length; i++) for(int j=0; j<a[i].length; j++)  rel="nofollow"> a[i][j] = 0;<br />
><br />
> Fortran:<br />
><br />
> real::a(10,10)<br />
> a = 0</p>
<p>The example you present specifically addresses one strength of fortran (90): handling arrays. For any other task, it will take more code. I cannot show you real examples here, but you are welcome to download the Q5Cost library for real cases of bloat code to perform trivial tasks such as exception handling.<br />
By the way, if the example you gave was C, I would not zero an array the way you did, I would simply use bzero().</p>
<p>> 2) modular programming is easy with fortran 95, Object<br />
> programming is with fortran 2003.</p>
<p>Not really. Modular programming is &#8220;easy&#8221; once you know how it works, but the way is implemented makes it a pain to handle. Namespacing is limited to basically one level, and you cannot rename your module import. When you use USE, you import every symbol in your scope, meaning that if you have two different modules, but with the same symbol name inside, they will clash. Unless there&#8217;s a trick I don&#8217;t know about, this means you cannot import them at the same time. This breaks havoc if you want to use two different modules with the same interface but with different implementation (for example, if you want to read data from a file format and store it into another file format). </p>
<p>> 3) if fortran has IMPLICIT, it also have IMPLICIT NONE and<br />
> each compiler has flags to prevent implicit statement.</p>
<p>Yes, but they are not turned on by default. This is one case where backward compatibility should have been dropped for the sake of forcing a bit of proper coding style. We would have much better code around now.</p>
<p>> 4) Dynmic memory allocation, aggregation: not missing any more<br />
> since fortran 90</p>
<p>Except for strings.</p>
<p>> 5) dynamic strings: foreseen in fortran 2003, not yet<br />
> implemented by compilers. The only cons so far.</p>
<p>well, last time I checked we are in 2009 <img src="http://forthescience.org/blog/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" /> </p>
<p>> Nevertheless, charaster(100) and Character(101) are more like<br />
> an double and a float than an int and a string, as thay can be<br />
> compared and assinged to each other…</p>
<p>In other words, they are like two different datatypes, with forced implicit coercion.</p>
<p>> 6) GUI programming, Networking, DB access, real time,<br />
> inter-process communication and much more… Yes, I&#8217;ve done that<br />
> in Fortran 15 years ago when I was programming Satellite<br />
> control center, with high requirements on reliability.</p>
<p>Interesting. Using what public available libraries ? I guess they were internally produced in your case. This unfortunately limits its access to the rest of the world, making adoption of fortran for these tasks basically nil. </p>
<p>> Conclusion: The language is secondary and you cannot say<br />
> &#8220;Don&#8217;t use that or that language&#8221;. There are Pros and cons<br />
> for all of them, and it always depends on the programmer…</p>
<p>Exactly what I said, and I totally agree with you. I would not use python for a low level device driver and I would not use Fortran to access a MySQL database.</a></p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-9289">
				<div id="div-comment-9289" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/8e370a5b15a010c36fc71332af35e976?s=32&amp;d=identicon&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite class="fn">MSB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/comment-page-1/#comment-9289">
			January 29, 2010 at 3:51 am</a>		</div>

		<p>An ISO Technical Report defined a standard addition for variable length strings.  An open source implementation exists since 2003.   You &#8220;use&#8221; iso_varying_string.  Deferred length allocatable scaler strings (Fortran 2003) provide dynamic length strings.  Some compilers supporter this already, e.g., Intel ifort since mid-2009.</p>
<p>Re: &#8220;When you use USE, you import every symbol in your scope, meaning that if you have two different modules, but with the same symbol name inside, they will clash. Unless thereâ??s a trick I donâ??t know about, this means you cannot import them at the same time.&#8221;   </p>
<p>There are two methods in Fortran to solve this problem:<br />
&#8220;use ModuleName, only: ItemName&#8221; will select only &#8220;ItemName&#8221; from the module &#8220;ModuleName&#8221;, so if that module has items that you don&#8217;t need that clash with another module, they are omitted and don&#8217;t clash.   If two modules have items that you need that have the same name, you can rename the item: &#8220;use ModuleName, OrigName =&gt; NewName&#8221;.   Clash gone!</p>
<p>&#8220;short identifier limit&#8221;?  31 characters in Fortran 95, 63 in Fortran 2003.   Longer than this, the lines of the program will get rather long&#8230;</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-stefano-2 bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-9795">
				<div id="div-comment-9795" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/f13cb1b1bd8b16bf6dc6eda558e162a0?s=32&amp;d=identicon&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite class="fn"><a href='http://stefanoborini.com/id/' rel='external nofollow' class='openid_link url'>Stefano Borini</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://forthescience.org/blog/2009/02/22/why-is-most-science-programming-done-in-fortran/comment-page-1/#comment-9795">
			August 7, 2010 at 6:49 pm</a>		</div>

		<p>@MSB: </p>
<p>> There are two methods in Fortran to solve this problem:<br />
> “use ModuleName, only: ItemName” will select only “ItemName”<br />
> from the module “ModuleName”, so if that module has items that<br />
> you don’t need that clash with another module, they are omitted<br />
> and don’t clash. If two modules have items that you need that<br />
> have the same name, you can rename the item: “use ModuleName,<br />
> OrigName => NewName”. Clash gone!</p>
<p>yes, but you will have to specify it by hand for each routine you need to import. This can become very tedious as you have to cherry pick what you need, and write even more boilerplate code. Compare to how python solves the problem:</p>
<p>  import foo<br />
  import bar</p>
<p>  foo.hello()<br />
  bar.hello()</p>
<p>In Fortran you would have to &#8220;USE foo&#8221; and &#8220;USE bar&#8221;, plus rename the hello routines with &#8220;USE foo, hello => foo_hello&#8221; and &#8220;USE bar, hello => bar_hello&#8221;. This introduces two problems, the first is given above: you need to do it for any routine you need and clash, which can be a lot if you are, for example, using two IO modules with a standard interface for conversion among different formats.</p>
<p>The second problem is that if you are particularly unlucky, and instead of hello you have Conn_getRemoteServerInfo (25 chars) and the module Network (7 chars), to stay consistent in style you will have to do USE Network, Conn_getRemoteServerInfo => Network_Conn_getRemoteServerInfo which is 33 chars and therefore in excess of the standard. </p>
<p>The identifier issue I raise however is a minor point and unfortunate case, though. It is not representative, you can work around it, but during actual programming we did hit it. The root cause was forcing a namespacing-like workaround to keep things organized and programming OO-style without doing OO at all (don&#8217;t ask, I fought against it but sometimes a compromise is needed), in a language that does not support nested namespaces.</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
</ol>
                        <!-- If comments are closed. -->
                <p class="nocomments">Comments are closed.</p>
        <div class="nextprev">
<div class="alignleft"> &laquo; <a href="http://forthescience.org/blog/2009/02/13/whats-the-point-of-inheritance-in-python/" rel="prev">What&#8217;s the point of inheritance in python ?</a></div>
<div class="alignright"> <a href="http://forthescience.org/blog/2009/02/27/hard-disk-going-ballistic-on-osx/" rel="next">Hard disk going ballistic on OSX ?</a> &raquo;</div>
</div>
</div><!-- end content -->    
<span class="clear"></span>
<div id="footer">
Valid <a href="http://validator.w3.org/check?uri=referer" title="Valid XHTML Strict 1.0">XHTML Strict 1.0</a> &bull; Theme: Garland-revisited by <a href="http://www.pross.org.uk">Pross</a><br />
</div>
</div></div></div></div> <!-- /.left-corner, /.right-corner, /#squeeze, /#center -->
<div id="sidebar-right" class="sidebar">
<ul class="menu">
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Found something useful?</h2>
			<div class="textwidget"><div>
Tip me via <img style="
width:42px; height:42px; vertical-align:middle" src="http://forthescience.org/blog/wp-content/uploads/2014/02/bitcoin.png"/>
<span style="font-size: 12pt"> <a href="bitcoin:13RQmVjRKVbQnVmuVsFxHjycgo7cTaaZ3w">BitCoin</a>!</span><br> <span style="font-size: 9pt">More info...</span> 
</div>
</div>
		</li>
<li id="categories-516756312" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
<select name='cat' id='cat' class='postform' >
	<option value='-1'>Select Category</option>
	<option class="level-0" value="7">Administrative</option>
	<option class="level-0" value="113">Amministrative</option>
	<option class="level-0" value="105">Argomenti</option>
	<option class="level-1" value="114">&nbsp;&nbsp;&nbsp;Biologia</option>
	<option class="level-2" value="116">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bioetica</option>
	<option class="level-2" value="136">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evoluzione</option>
	<option class="level-1" value="115">&nbsp;&nbsp;&nbsp;Chimica</option>
	<option class="level-1" value="104">&nbsp;&nbsp;&nbsp;Informatica</option>
	<option class="level-2" value="159">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Grafica</option>
	<option class="level-2" value="178">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hardware @it</option>
	<option class="level-2" value="118">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linguaggi</option>
	<option class="level-3" value="128">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bash @it</option>
	<option class="level-3" value="137">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C/C++ @it</option>
	<option class="level-3" value="162">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript @it</option>
	<option class="level-3" value="164">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PostScript @it</option>
	<option class="level-3" value="119">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python @it</option>
	<option class="level-2" value="166">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sistemi Operativi</option>
	<option class="level-3" value="177">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MacOSX @it</option>
	<option class="level-0" value="100">Non categorizzate</option>
	<option class="level-0" value="66">Opinion</option>
	<option class="level-0" value="52">Personal</option>
	<option class="level-0" value="12">Resources</option>
	<option class="level-1" value="83">&nbsp;&nbsp;&nbsp;Articles</option>
	<option class="level-1" value="13">&nbsp;&nbsp;&nbsp;Books</option>
	<option class="level-1" value="19">&nbsp;&nbsp;&nbsp;Courses</option>
	<option class="level-1" value="32">&nbsp;&nbsp;&nbsp;Meetings</option>
	<option class="level-1" value="126">&nbsp;&nbsp;&nbsp;Movies</option>
	<option class="level-1" value="55">&nbsp;&nbsp;&nbsp;Software</option>
	<option class="level-1" value="57">&nbsp;&nbsp;&nbsp;TV</option>
	<option class="level-1" value="14">&nbsp;&nbsp;&nbsp;Websites</option>
	<option class="level-0" value="140">Risorse</option>
	<option class="level-1" value="143">&nbsp;&nbsp;&nbsp;Corsi</option>
	<option class="level-1" value="146">&nbsp;&nbsp;&nbsp;Software @it</option>
	<option class="level-0" value="3">Topics</option>
	<option class="level-1" value="226">&nbsp;&nbsp;&nbsp;Academia</option>
	<option class="level-1" value="91">&nbsp;&nbsp;&nbsp;Art</option>
	<option class="level-1" value="44">&nbsp;&nbsp;&nbsp;Authoring</option>
	<option class="level-1" value="18">&nbsp;&nbsp;&nbsp;Bioinformatics</option>
	<option class="level-1" value="4">&nbsp;&nbsp;&nbsp;Biology</option>
	<option class="level-2" value="45">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bioethics</option>
	<option class="level-2" value="21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evolution</option>
	<option class="level-2" value="197">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genetics</option>
	<option class="level-1" value="75">&nbsp;&nbsp;&nbsp;Charity</option>
	<option class="level-1" value="38">&nbsp;&nbsp;&nbsp;Chemistry</option>
	<option class="level-2" value="73">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computational Chemistry</option>
	<option class="level-2" value="102">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Natural compounds chemistry</option>
	<option class="level-1" value="5">&nbsp;&nbsp;&nbsp;Computer Science</option>
	<option class="level-2" value="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Databases</option>
	<option class="level-3" value="34">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MySQL</option>
	<option class="level-2" value="53">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Design</option>
	<option class="level-2" value="22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Graphics</option>
	<option class="level-3" value="187">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Raytracing</option>
	<option class="level-2" value="174">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hardware</option>
	<option class="level-2" value="9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Languages</option>
	<option class="level-3" value="17">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bash</option>
	<option class="level-3" value="23">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C/C++</option>
	<option class="level-3" value="54">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran</option>
	<option class="level-3" value="56">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gnuplot</option>
	<option class="level-3" value="112">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript</option>
	<option class="level-3" value="25">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perl</option>
	<option class="level-3" value="24">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PostScript</option>
	<option class="level-3" value="10">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python</option>
	<option class="level-3" value="33">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R</option>
	<option class="level-2" value="26">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operating Systems</option>
	<option class="level-3" value="29">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux</option>
	<option class="level-4" value="224">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ubuntu</option>
	<option class="level-3" value="31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MacOSX</option>
	<option class="level-3" value="58">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The Cloud</option>
	<option class="level-3" value="30">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows</option>
	<option class="level-2" value="15">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Refactoring</option>
	<option class="level-2" value="49">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Security</option>
	<option class="level-2" value="110">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Semantics</option>
	<option class="level-2" value="35">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Technologies</option>
	<option class="level-3" value="69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Backups</option>
	<option class="level-3" value="72">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Content Management</option>
	<option class="level-3" value="107">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Digital Rights Management</option>
	<option class="level-3" value="59">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email</option>
	<option class="level-3" value="60">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Google Wave</option>
	<option class="level-3" value="111">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTML</option>
	<option class="level-3" value="68">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPod touch</option>
	<option class="level-3" value="109">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Microformats</option>
	<option class="level-3" value="51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Package Management</option>
	<option class="level-3" value="80">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QR-Codes</option>
	<option class="level-3" value="225">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Qt</option>
	<option class="level-3" value="71">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RDF</option>
	<option class="level-3" value="41">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unicode</option>
	<option class="level-3" value="50">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version Control</option>
	<option class="level-4" value="223">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git</option>
	<option class="level-3" value="67">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Web frameworks</option>
	<option class="level-3" value="36">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XML</option>
	<option class="level-2" value="40">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Testing</option>
	<option class="level-1" value="78">&nbsp;&nbsp;&nbsp;Devices</option>
	<option class="level-2" value="79">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPad</option>
	<option class="level-2" value="172">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPhone</option>
	<option class="level-1" value="106">&nbsp;&nbsp;&nbsp;Dissemination</option>
	<option class="level-1" value="175">&nbsp;&nbsp;&nbsp;Environment</option>
	<option class="level-1" value="74">&nbsp;&nbsp;&nbsp;Food</option>
	<option class="level-1" value="133">&nbsp;&nbsp;&nbsp;Gardening</option>
	<option class="level-1" value="84">&nbsp;&nbsp;&nbsp;Geology</option>
	<option class="level-2" value="85">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Earthquakes</option>
	<option class="level-1" value="63">&nbsp;&nbsp;&nbsp;Law</option>
	<option class="level-2" value="64">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Software Licensing</option>
	<option class="level-1" value="6">&nbsp;&nbsp;&nbsp;Mathematics</option>
	<option class="level-2" value="120">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fractals</option>
	<option class="level-2" value="173">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linear Algebra</option>
	<option class="level-2" value="127">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Probability</option>
	<option class="level-1" value="101">&nbsp;&nbsp;&nbsp;Medicine</option>
	<option class="level-1" value="121">&nbsp;&nbsp;&nbsp;Photography</option>
	<option class="level-1" value="39">&nbsp;&nbsp;&nbsp;Physics</option>
	<option class="level-2" value="93">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Large Hadron Collider</option>
	<option class="level-2" value="97">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Magnetism</option>
	<option class="level-1" value="11">&nbsp;&nbsp;&nbsp;Project Management</option>
	<option class="level-2" value="132">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Risk Management</option>
	<option class="level-1" value="65">&nbsp;&nbsp;&nbsp;Psychology</option>
	<option class="level-1" value="20">&nbsp;&nbsp;&nbsp;Robotics</option>
	<option class="level-1" value="46">&nbsp;&nbsp;&nbsp;Space</option>
	<option class="level-2" value="47">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Astrobiology</option>
	<option class="level-2" value="42">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Astronomy</option>
	<option class="level-2" value="48">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Space Exploration</option>
	<option class="level-1" value="43">&nbsp;&nbsp;&nbsp;Statistics</option>
	<option class="level-1" value="219">&nbsp;&nbsp;&nbsp;Usability</option>
</select>

<script type='text/javascript'>
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "http://forthescience.org/blog/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</li>
 </ul>
</div></div> <!-- /container -->
</div>
<!-- /layout -->
<script type="text/javascript">

    jQuery(document).ready(function(){
        jQuery(".easy-table-creator").tablesorter({widgets: ['zebra']});


    })



</script>
</body>
</html>
