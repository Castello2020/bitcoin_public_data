http://forthescience.org/blog/2012/05/04/a-raytracer-in-python-%E2%80%93-part-4-profiling/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 14:11:36 GMT
Server: Apache
X-Pingback: http://forthescience.org/blog/xmlrpc.php
Link: <http://forthescience.org/blog/?p=1756>; rel=shortlink
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8441
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title> &raquo; A raytracer in python – part 4: profiling ForTheScience.org</title>
<link rel="pingback" href="http://forthescience.org/blog/xmlrpc.php" />
<link rel="shortcut icon" href="http://forthescience.org/favicon.png">

<style type="text/css" media="screen">

@import "http://forthescience.org/blog/wp-content/themes/garland-revisited/style.php";
</style>
<link type="text/css" rel="stylesheet" href="http://forthescience.org/blog/wp-content/plugins/easy-table-creator/css/easy_table_creator.css" />
<link type="text/css" rel="stylesheet" href="http://forthescience.org/blog/wp-content/plugins/easy-table-creator/css/tablesorter/style.css" />

<style type="text/css" media="screen">@import url(http://forthescience.org/blog/?garland_css=1);
</style><link rel="alternate" type="application/rss+xml" title="ForTheScience.org &raquo; Feed" href="http://forthescience.org/blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="ForTheScience.org &raquo; Comments Feed" href="http://forthescience.org/blog/comments/feed/" />
<link rel='stylesheet' id='openid-css'  href='http://forthescience.org/blog/wp-content/plugins/openid/f/openid.css?ver=519' type='text/css' media='all' />
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/easy-table-creator/js/easy_table_creator.js?ver=0.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/easy-table-creator/js/jquery.tablesorter.min.js?ver=0.1'></script>
<script type='text/javascript' src='http://forthescience.org/blog/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.4.5'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://forthescience.org/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://forthescience.org/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='NASA image shows tree density in United States' href='http://forthescience.org/blog/2012/04/05/nasa-image-shows-tree-density-in-united-states/' />
<link rel='next' title='Earthquake shakes my city' href='http://forthescience.org/blog/2012/05/23/earthquake-shakes-my-city/' />
<meta name="generator" content="WordPress 3.8.3" />
<link rel='canonical' href='http://forthescience.org/blog/2012/05/04/a-raytracer-in-python-%e2%80%93-part-4-profiling/' />
<link rel='shortlink' href='http://forthescience.org/blog/?p=1756' />
<style type="text/css" id="syntaxhighlighteranchor"></style>
<!-- Google Analytics Tracking by Google Analyticator 6.4.5: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-13239309-1']);
        _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google 
        
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
</head>
<body class="single single-post postid-1756 single-format-standard sidebars">
<div id="navigation"></div>
<div id="wrapper">
<div id="container" class="clear-block">
<div id="header">
<div id="logo-floater">
<h1>
<a href="http://forthescience.org/blog/">ForTheScience.org</a> <span style="font-style: italic; font-size: 60%;">A blog about science and programming</span>
</h1>
</div>
<!-- <ul class="links primary-links"> -->
<ul id="dropmenu">
<li class="page_item page-item-2291"><a href="http://gaia.forthescience.org/blog">Gaia blog</a></li>
<li class="page_item page-item-2"><a href="http://forthescience.org/blog/about/">About me</a></li>
<li class="page_item page-item-106"><a href="http://forthescience.org/blog/software/">Software</a></li>
<li class="page_item page-item-34"><a href="http://forthescience.org/blog/my-articles/">My Articles</a></li>
<li class="page_item page-item-5"><a href="http://forthescience.org/blog/bookshelf/">My Bookshelf</a></li>
</ul>                
</div> <!-- /header -->
<div id="sidebar-left" class="sidebar">
</div>
<div id="center"><div id="squeeze"><div class="right-corner"><div class="left-corner">
<!-- begin content -->
<div class="node">
<div class="post-1756 post type-post status-publish format-standard hentry category-python category-raytracing">
<h2>A raytracer in python – part 4: profiling</h2>
<span class="submitted">May 4, 2012 &#8212; Stefano Borini </span>
<div class="content">
<p>After having finally obtained a raytracer which produces antialiasing, it is now time to take a look at performance. We already saw some numbers in the last post. Rendering a 200&#215;200 image with 16 samples per pixels (a grand total of 640.000 rays) takes definitely too much. I want to perform some profiling with python, find the hotspots in the code, and eventually devise a strategy to optimize them.</p>
<h2>General profiling with cProfile</h2>
<p>To perform basic profiling, I used the cProfile program provided in the standard library. It appears that the longest processing time is in the hit() function</p>
<pre>$ python -m cProfile -s time test3.py
 Ordered by: internal time

 ncalls  tottime  percall  cumtime  percall filename:lineno(function)
 2560000  85.329    0.000  108.486    0.000 Sphere.py:12(hit)
 1960020  30.157    0.000   30.157    0.000 {numpy.core.multiarray.array}
 7680000  23.115    0.000   23.115    0.000 {numpy.core._dotblas.dot}
 1        19.589   19.589  195.476  195.476 World.py:25(render)
 2560000   7.968    0.000  116.454    0.000 World.py:62(f)
 640000    6.710    0.000  133.563    0.000 World.py:61(hit_bare_bones_object)
 640025    4.438    0.000  120.902    0.000 {map}
 640000    3.347    0.000  136.910    0.000 Tracer.py:5(trace_ray)
 640000    3.009    0.000    3.009    0.000 {numpy.core.multiarray.zeros}
 640000    2.596    0.000    2.613    0.000 {sorted}
 640000    2.502    0.000    3.347    0.000 {filter}
 640000    1.835    0.000   16.784    0.000 Ray.py:4(__init__)</pre>
<p>This does not surprise me, as the main computation a raytracer performs is to test each ray for intersection on the objects in the scene, in this case multiple Sphere objects.</p>
<h2>Profiling line by line for hot spots</h2>
<p>Understood that most of the time is spent into hit(), I wanted to perform line-by-line profiling. This is not possible with the standard python cProfile module, therefore I searched and found an alternative, <a href="http://packages.python.org/line_profiler/">line_profiler</a>:</p>
<pre>$ easy_install-2.7 --prefix=$HOME line_profiler
$ kernprof.py -l test3.py
Wrote profile results to test3.py.lprof
$ python -m line_profiler test3.py.lprof</pre>
<p>Before running the commands above, I added the @profile decorator to the method I am interested in. This decorator is added by line_profiler to the __builtin__ module, so no explicit import statement is needed.</p>
<pre>class Sphere(object):
    &lt;...&gt;
    @profile
    def hit(self, ray):
         &lt;...&gt;</pre>
<p>The results of this profiling are</p>
<pre>Line # Hits  Time    Per Hit  % Time Line Contents
==============================================================
12                                   @profile
13                                   def hit(self, ray):
14 2560000  27956358  10.9     19.2     temp = ray.origin - self.center
15 2560000  17944912   7.0     12.3     a = numpy.dot(ray.direction, ray.direction)
16 2560000  24132737   9.4     16.5     b = 2.0 * numpy.dot(temp, ray.direction)
17 2560000  37113811  14.5     25.4     c = numpy.dot(temp, temp) \
                                              - self.radius * self.radius
18 2560000  20808930   8.1     14.3     disc = b * b - 4.0 * a * c
19
20 2560000  10963318   4.3      7.5     if (disc &lt; 0.0):
21 2539908   5403624   2.1      3.7         return None
22                                      else:
23   20092     75076   3.7      0.1         e = math.sqrt(disc)
24   20092    104950   5.2      0.1         denom = 2.0 * a
25   20092    115956   5.8      0.1         t = (-b - e) / denom
26   20092     83382   4.2      0.1         if (t &gt; 1.0e-7):
27   20092    525272  26.1      0.4            normal = (temp + t * ray.direction)\
                                                           / self.radius
28   20092    333879  16.6      0.2            hit_point = ray.origin + t * \
                                                              ray.direction
29   20092    299494  14.9      0.2            return ShadeRecord.ShadeRecord(
                                                         normal=normal,
                                                         hit_point=hit_point,
                                                         parameter=t,
                                                         color=self.color)</pre>
<p>Therefore, it appears that most of the time is spent in this chunk of code:</p>
<pre>temp = ray.origin - self.center
a = numpy.dot(ray.direction, ray.direction)
b = 2.0 * numpy.dot(temp, ray.direction)
c = numpy.dot(temp, temp) - self.radius * self.radius
disc = b * b - 4.0 * a * c</pre>
<p>We cannot really optimize much. We could precompute self.radius * self.radius, but it does not really have an impact. Something we can observe is the huge amount of routine calls. Is the routine call overhead relevant ? Maybe: <a href="http://wiki.python.org/moin/PythonSpeed/PerformanceTips#Data_Aggregation">Python has a relevant call overhead</a>, but a very simple program like this</p>
<pre>def main():
    def f():
        return 0
    a=0
    for i in xrange(2560000):
        if f():
            a = a+1

    print a

main()</pre>
<p>is going to take 0.6 seconds, not small, but definitely not as huge as the numbers we see. Why is that ? And why is the raytracer so slow for the same task ? I think the bottleneck is somewhere else.</p>
<h2>Finding the problem</h2>
<p>I decided to profile World.render() to understand what&#8217;s going on: this is the routine in charge of going through the pixels, shooting the rays, then delegating the task of finding intersections to Tracer.trace_ray, which in turns re-delegates the task to World.hit_bare_bone_object. I don&#8217;t really like this design, but I stick to the book as much as possible, mostly because I don&#8217;t know how things will become later on.</p>
<p>The profiling showed two hot spots in World.render(), in the inner loop:</p>
<pre>Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================

    41    640000     18786192     29.4     29.2  ray = Ray.Ray(origin = origin,
                                                               direction = (0.0,0.0,-1.0))
    42
    43    640000     22414265     35.0     34.9  color += numpy.array(tracer.trace_ray(ray))</pre>
<p>Why is it so slow to perform these two operations? It turns out that <a href="http://stackoverflow.com/questions/6559463/why-is-numpy-array-so-slow">numpy is incredibly slow at creating arrays</a>. This may indeed be the reason why it&#8217;s so slow to instantiate a Ray object (two numpy.arrays), to add the color (another instantiation) and to perform operations in the Sphere.hit slow lines. At this point I&#8217;m not sure I can trust numpy.array, and I decide to remove it completely replacing arrays with tuples. The result is pleasing</p>
<pre>$ time python test3.py
real	0m31.215s
user	0m29.923s
sys	0m2.355s</pre>
<p>This is an important point: tuples are much faster than small arrays. numpy seems to be optimized for large datasets and performs poorly when handling small ones. This includes not only the creation of the arrays, but also any operation in numpy that may create numpy arrays as a consequence, such as calling numpy.dot on two tuples instead of a trivial implementation such as</p>
<pre>def dot(a,b):
    return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]</pre>
<p>in fact, if I use numpy.dot on tuples in Sphere.hit():</p>
<pre> a = numpy.dot(ray.direction, ray.direction)
 b = 2.0 * numpy.dot(temp, ray.direction)
 c = numpy.dot(temp, temp) - self.radius * self.radius</pre>
<p>the total running time goes from 31 seconds to a staggering 316 seconds (5 minutes). My guess is that they are converted to numpy.arrays internally, followed by the actual vector-vector operation.</p>
<p>I call myself happy with a runtime of 30 seconds for now, and plan to optimize further when more complex operations are performed. You can find the <a href="https://github.com/stefanoborini/python-raytrace/commit/2cb6e2b31bc75a21a121ed9c7a46b1a3113fcab0">version for this post at github</a>.</p>
</div>
<div class="meta">
Posted in <a href="http://forthescience.org/blog/category/topics/computer-science/languages/python/" title="View all posts in Python" rel="category tag">Python</a>, <a href="http://forthescience.org/blog/category/topics/computer-science/graphics/raytracing/" title="View all posts in Raytracing" rel="category tag">Raytracing</a>.  <a href='http://forthescience.org/blog/2012/05/04/a-raytracer-in-python-%e2%80%93-part-4-profiling/feed/'><abbr title="Really Simple Syndication">RSS</abbr> feed for comments on this post.</a>. <a href="http://forthescience.org/blog/2012/05/04/a-raytracer-in-python-%e2%80%93-part-4-profiling/trackback/" rel="trackback">TrackBack <abbr title="Universal Resource Locator">URL</abbr></a>.
</div>
</div>
                        <!-- If comments are closed. -->
                <p class="nocomments">Comments are closed.</p>
        <div class="nextprev">
<div class="alignleft"> &laquo; <a href="http://forthescience.org/blog/2012/04/05/nasa-image-shows-tree-density-in-united-states/" rel="prev">NASA image shows tree density in United States</a></div>
<div class="alignright"> <a href="http://forthescience.org/blog/2012/05/23/earthquake-shakes-my-city/" rel="next">Earthquake shakes my city</a> &raquo;</div>
</div>
</div><!-- end content -->    
<span class="clear"></span>
<div id="footer">
Valid <a href="http://validator.w3.org/check?uri=referer" title="Valid XHTML Strict 1.0">XHTML Strict 1.0</a> &bull; Theme: Garland-revisited by <a href="http://www.pross.org.uk">Pross</a><br />
</div>
</div></div></div></div> <!-- /.left-corner, /.right-corner, /#squeeze, /#center -->
<div id="sidebar-right" class="sidebar">
<ul class="menu">
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Found something useful?</h2>
			<div class="textwidget"><div>
Tip me via <img style="
width:42px; height:42px; vertical-align:middle" src="http://forthescience.org/blog/wp-content/uploads/2014/02/bitcoin.png"/>
<span style="font-size: 12pt"> <a href="bitcoin:13RQmVjRKVbQnVmuVsFxHjycgo7cTaaZ3w">BitCoin</a>!</span><br> <span style="font-size: 9pt">More info...</span> 
</div>
</div>
		</li>
<li id="categories-516756312" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
<select name='cat' id='cat' class='postform' >
	<option value='-1'>Select Category</option>
	<option class="level-0" value="7">Administrative</option>
	<option class="level-0" value="113">Amministrative</option>
	<option class="level-0" value="105">Argomenti</option>
	<option class="level-1" value="114">&nbsp;&nbsp;&nbsp;Biologia</option>
	<option class="level-2" value="116">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bioetica</option>
	<option class="level-2" value="136">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evoluzione</option>
	<option class="level-1" value="115">&nbsp;&nbsp;&nbsp;Chimica</option>
	<option class="level-1" value="104">&nbsp;&nbsp;&nbsp;Informatica</option>
	<option class="level-2" value="159">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Grafica</option>
	<option class="level-2" value="178">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hardware @it</option>
	<option class="level-2" value="118">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linguaggi</option>
	<option class="level-3" value="128">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bash @it</option>
	<option class="level-3" value="137">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C/C++ @it</option>
	<option class="level-3" value="162">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript @it</option>
	<option class="level-3" value="164">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PostScript @it</option>
	<option class="level-3" value="119">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python @it</option>
	<option class="level-2" value="166">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sistemi Operativi</option>
	<option class="level-3" value="177">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MacOSX @it</option>
	<option class="level-0" value="100">Non categorizzate</option>
	<option class="level-0" value="66">Opinion</option>
	<option class="level-0" value="52">Personal</option>
	<option class="level-0" value="12">Resources</option>
	<option class="level-1" value="83">&nbsp;&nbsp;&nbsp;Articles</option>
	<option class="level-1" value="13">&nbsp;&nbsp;&nbsp;Books</option>
	<option class="level-1" value="19">&nbsp;&nbsp;&nbsp;Courses</option>
	<option class="level-1" value="32">&nbsp;&nbsp;&nbsp;Meetings</option>
	<option class="level-1" value="126">&nbsp;&nbsp;&nbsp;Movies</option>
	<option class="level-1" value="55">&nbsp;&nbsp;&nbsp;Software</option>
	<option class="level-1" value="57">&nbsp;&nbsp;&nbsp;TV</option>
	<option class="level-1" value="14">&nbsp;&nbsp;&nbsp;Websites</option>
	<option class="level-0" value="140">Risorse</option>
	<option class="level-1" value="143">&nbsp;&nbsp;&nbsp;Corsi</option>
	<option class="level-1" value="146">&nbsp;&nbsp;&nbsp;Software @it</option>
	<option class="level-0" value="3">Topics</option>
	<option class="level-1" value="226">&nbsp;&nbsp;&nbsp;Academia</option>
	<option class="level-1" value="91">&nbsp;&nbsp;&nbsp;Art</option>
	<option class="level-1" value="44">&nbsp;&nbsp;&nbsp;Authoring</option>
	<option class="level-1" value="18">&nbsp;&nbsp;&nbsp;Bioinformatics</option>
	<option class="level-1" value="4">&nbsp;&nbsp;&nbsp;Biology</option>
	<option class="level-2" value="45">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bioethics</option>
	<option class="level-2" value="21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evolution</option>
	<option class="level-2" value="197">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genetics</option>
	<option class="level-1" value="75">&nbsp;&nbsp;&nbsp;Charity</option>
	<option class="level-1" value="38">&nbsp;&nbsp;&nbsp;Chemistry</option>
	<option class="level-2" value="73">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computational Chemistry</option>
	<option class="level-2" value="102">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Natural compounds chemistry</option>
	<option class="level-1" value="5">&nbsp;&nbsp;&nbsp;Computer Science</option>
	<option class="level-2" value="16">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Databases</option>
	<option class="level-3" value="34">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MySQL</option>
	<option class="level-2" value="53">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Design</option>
	<option class="level-2" value="22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Graphics</option>
	<option class="level-3" value="187">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Raytracing</option>
	<option class="level-2" value="174">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hardware</option>
	<option class="level-2" value="9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Languages</option>
	<option class="level-3" value="17">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bash</option>
	<option class="level-3" value="23">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C/C++</option>
	<option class="level-3" value="54">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fortran</option>
	<option class="level-3" value="56">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gnuplot</option>
	<option class="level-3" value="112">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript</option>
	<option class="level-3" value="25">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perl</option>
	<option class="level-3" value="24">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PostScript</option>
	<option class="level-3" value="10">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python</option>
	<option class="level-3" value="33">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R</option>
	<option class="level-2" value="26">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operating Systems</option>
	<option class="level-3" value="29">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux</option>
	<option class="level-4" value="224">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ubuntu</option>
	<option class="level-3" value="31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MacOSX</option>
	<option class="level-3" value="58">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The Cloud</option>
	<option class="level-3" value="30">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows</option>
	<option class="level-2" value="15">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Refactoring</option>
	<option class="level-2" value="49">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Security</option>
	<option class="level-2" value="110">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Semantics</option>
	<option class="level-2" value="35">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Technologies</option>
	<option class="level-3" value="69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Backups</option>
	<option class="level-3" value="72">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Content Management</option>
	<option class="level-3" value="107">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Digital Rights Management</option>
	<option class="level-3" value="59">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email</option>
	<option class="level-3" value="60">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Google Wave</option>
	<option class="level-3" value="111">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTML</option>
	<option class="level-3" value="68">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPod touch</option>
	<option class="level-3" value="109">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Microformats</option>
	<option class="level-3" value="51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Package Management</option>
	<option class="level-3" value="80">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QR-Codes</option>
	<option class="level-3" value="225">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Qt</option>
	<option class="level-3" value="71">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RDF</option>
	<option class="level-3" value="41">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unicode</option>
	<option class="level-3" value="50">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version Control</option>
	<option class="level-4" value="223">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git</option>
	<option class="level-3" value="67">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Web frameworks</option>
	<option class="level-3" value="36">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XML</option>
	<option class="level-2" value="40">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Testing</option>
	<option class="level-1" value="78">&nbsp;&nbsp;&nbsp;Devices</option>
	<option class="level-2" value="79">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPad</option>
	<option class="level-2" value="172">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iPhone</option>
	<option class="level-1" value="106">&nbsp;&nbsp;&nbsp;Dissemination</option>
	<option class="level-1" value="175">&nbsp;&nbsp;&nbsp;Environment</option>
	<option class="level-1" value="74">&nbsp;&nbsp;&nbsp;Food</option>
	<option class="level-1" value="133">&nbsp;&nbsp;&nbsp;Gardening</option>
	<option class="level-1" value="84">&nbsp;&nbsp;&nbsp;Geology</option>
	<option class="level-2" value="85">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Earthquakes</option>
	<option class="level-1" value="63">&nbsp;&nbsp;&nbsp;Law</option>
	<option class="level-2" value="64">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Software Licensing</option>
	<option class="level-1" value="6">&nbsp;&nbsp;&nbsp;Mathematics</option>
	<option class="level-2" value="120">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fractals</option>
	<option class="level-2" value="173">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linear Algebra</option>
	<option class="level-2" value="127">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Probability</option>
	<option class="level-1" value="101">&nbsp;&nbsp;&nbsp;Medicine</option>
	<option class="level-1" value="121">&nbsp;&nbsp;&nbsp;Photography</option>
	<option class="level-1" value="39">&nbsp;&nbsp;&nbsp;Physics</option>
	<option class="level-2" value="93">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Large Hadron Collider</option>
	<option class="level-2" value="97">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Magnetism</option>
	<option class="level-1" value="11">&nbsp;&nbsp;&nbsp;Project Management</option>
	<option class="level-2" value="132">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Risk Management</option>
	<option class="level-1" value="65">&nbsp;&nbsp;&nbsp;Psychology</option>
	<option class="level-1" value="20">&nbsp;&nbsp;&nbsp;Robotics</option>
	<option class="level-1" value="46">&nbsp;&nbsp;&nbsp;Space</option>
	<option class="level-2" value="47">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Astrobiology</option>
	<option class="level-2" value="42">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Astronomy</option>
	<option class="level-2" value="48">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Space Exploration</option>
	<option class="level-1" value="43">&nbsp;&nbsp;&nbsp;Statistics</option>
	<option class="level-1" value="219">&nbsp;&nbsp;&nbsp;Usability</option>
</select>

<script type='text/javascript'>
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "http://forthescience.org/blog/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</li>
 </ul>
</div></div> <!-- /container -->
</div>
<!-- /layout -->
<script type="text/javascript">

    jQuery(document).ready(function(){
        jQuery(".easy-table-creator").tablesorter({widgets: ['zebra']});


    })



</script>
</body>
</html>
