http://codemonkey.org.uk/projects/trinity/
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Thu, 24 Jul 2014 14:23:10 GMT
Content-Type: text/html
Connection: close
Set-Cookie: __cfduid=d00960af7ff2e6aa4384da35268b51b741406211790470; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.codemonkey.org.uk; HttpOnly
CF-RAY: 14f0c62a71cc0098-IAD
Content-Encoding: gzip

<html>
<head>
<title>Trinity : A Linux system call fuzzer.</title>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dokv=88e434a982/"},atok:"08114869712f3501fd9655ce17f5cba8",petok:"8472beaabc25ea294c01f2a4e15962a18b2d282f-1406211790-1800",zone:"codemonkey.org.uk",rocket:"0",apps:{"ga_key":{"ua":"UA-3332074-1","ga_bs":"2"},"abetterbrowser":{"ie":"7"}}}];!function(a,b){a=document.createElement("script"),b=document.getElementsByTagName("script")[0],a.async=!0,a.src="//ajax.cloudflare.com/cdn-cgi/nexp/dokv=97fb4d042e/cloudflare.min.js",b.parentNode.insertBefore(a,b)}()}}catch(e){};
//]]>
</script>
<link rel="stylesheet" type="text/css" href="../../style-new.css">
<meta http-equiv="content-type" content="text/html; charset=iso-8859-15">
<meta name="Author" content="Dave Jones">
<meta name="description" content="Trinity - Linux system call fuzzer.">
<meta name="KeyWords" content="Dave Jones, David Jones, davej, codemonkey, kernelslacker">
<meta name="KeyWords" content="linux, codemonkey, kernel, kernel hacker ">
<meta name="KeyWords" content="Trinity, system call, syscall, fuzzer">
<meta name="KeyWords" content="Fedora, Red Hat">
<meta name="verify-v1" content="U5j0VkyWu1wNT2VPuedcEM21NYVIYLhFIu2NceApLUs="/>
<script type="text/javascript">
/* <![CDATA[ */
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-3332074-1']);
_gaq.push(['_trackPageview']);

(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

(function(b){(function(a){"__CF"in b&&"DJS"in b.__CF?b.__CF.DJS.push(a):"addEventListener"in b?b.addEventListener("load",a,!1):b.attachEvent("onload",a)})(function(){"FB"in b&&"Event"in FB&&"subscribe"in FB.Event&&(FB.Event.subscribe("edge.create",function(a){_gaq.push(["_trackSocial","facebook","like",a])}),FB.Event.subscribe("edge.remove",function(a){_gaq.push(["_trackSocial","facebook","unlike",a])}),FB.Event.subscribe("message.send",function(a){_gaq.push(["_trackSocial","facebook","send",a])}));"twttr"in b&&"events"in twttr&&"bind"in twttr.events&&twttr.events.bind("tweet",function(a){if(a){var b;if(a.target&&a.target.nodeName=="IFRAME")a:{if(a=a.target.src){a=a.split("#")[0].match(/[^?=&]+=([^&]*)?/g);b=0;for(var c;c=a[b];++b)if(c.indexOf("url")===0){b=unescape(c.split("=")[1]);break a}}b=void 0}_gaq.push(["_trackSocial","twitter","tweet",b])}})})})(window);
/* ]]> */
</script>
</head>
<table>
<tr><td width=80%>
<p><center>
<table class="topbox" width=95%>
<tr>
<td width=100%><h2><b>Trinity</b>
<hr align=left size=3 noshade></h2>
<p>A Linux System call fuzz tester.</p>
</td></tr><table>
</center></p>
<p><table class="box" width=95%>
<tr><th align="left">What is it?.</th></tr>
<tr><td class="table-cell">
<p>The basic idea is fairly simple. As 'fuzz testing' suggests, we call syscalls at random, with random arguments.<br>
Not an original idea, and one that has been done many times before on Linux, and on other operating systems.<br>
Where Trinity differs is that the arguments it passes are not purely random.<br><br>
We found some bugs in the past by just passing random values, but once the *really* dumb bugs were found,
these dumb fuzzers would just run and run. The problem was if a syscall took for example a file descriptor
as an argument, one of the first things it would try to do was validate that fd. Being garbage, the kernel would just
reject it as -EINVAL of course. So on startup, Trinity creates a list of file descriptors, by opening pipes, scanning sysfs, procfs, /dev,
and creates a bunch of sockets using random network protocols. Then when a syscall needs an fd, it gets passed
one of these at random.</p>
<p>File descriptors aren't the only thing Trinity knows about. Every syscall has its arguments annotated,
and where possible it tries to provide something at least semi-sensible. "Length" arguments for example get
passed one of a whole bunch of potentially interesting values. (Powers of 2 +/-1 are a good choice for triggering off-by-one bugs it seems).
</p>
<p>Trinity also shares those file descriptors between multiple threads, which causes havoc sometimes.</p>
<p>If a child process successfully creates an mmap, the pointer is stored, and fed to subsequent syscalls, sometimes with hilarious results.</p>
<p>Trinity supports Alpha, Aarch64, ARM, i386, IA-64, MIPS, PowerPC-64, S390, S390x, SPARC-64, x86-64.</br>
Adding support for additional architectures is a small amount of work mostly involving just defining the order of the syscall table.</br>
See Documentation/HACKING for details.</p>
</td></tr></table></p>
<p><table class="box" width=95%>
<tr><th align="left">How do I use it?.</th></tr>
<tr><td class="table-cell">
<p>If you run Trinity without any arguments as a non-root user, it will scan for fd's as mentioned above, then
create a number of child processes (depending on how many processors you have). These child processes are where
the 'call the syscall' happens. It's done in child processes so that if a syscall causes a segfault, trinity will respawn
a new thread to take its place. Likewise, if a syscall hangs for more than a few seconds, it will get killed.</p>
<p>I recommend not running it on machines containing data you care about.
It's entirely plausible that trinity could start calling unlink() on files it randomly finds.
You might also want to make sure that there are no nfs or similar filesystems mounted for the same reason.</p>
<p>With that warning out of the way: Trinity has a neat feature called 'victim files'. You can point at a directory with -V and it will use anything
it finds in there as potential sources when it needs a file descriptor. If this is somewhere on NFS for example, this will cause a bunch of
filesystem related syscalls over NFS to occur, which might shake out NFS related bugs.</p>
<p>There's a more extensive README in the source distribution which details all the extra parameters.
Also recommended reading, are the examples in scripts/ which should give some ideas.</p>
</td></tr></table></p>
<p><table class="box" width=95%>
<tr><th align="left">Known problems ?</th></tr>
<tr><td class="table-cell">
<ul>
<li>There are almost always new kernel bugs being triggered by trinity.
I used to maintain <a href="bugs-found.php">a list of the bugs found/fixed</a>, but it got to be too much work to keep track of.
<li>Sometimes, trinity causes the oom-killer to trigger. As long as the oom-killer picks the right process (ie, one of the trinity children, and not dbus, or NetworkManager etc)
then this is working as designed.
<li>There's a fair amount of "noise" printk's in the kernel that Trinity triggers.
I keep a set of <a href="https://github.com/kernelslacker/trinity/tree/master/patches">patches to remove the most common ones</a> in git. It should always apply to Linus' latest tree. For older kernels, you may have to fix up some parts.
<li>If you do find and report a new kernel bug, please Cc me, and mention that you found it with Trinity.
<li>1.4 is known to be broken on MIPS and IA64, use the git snapshot until 1.5
</ul>
</td></tr></table></p>
<p><table class="box" width=95%>
<tr><th align="left">Downloads:</th></tr>
<tr><td class="table-cell">
<ul>
<li>Latest release is <a href="trinity-1.4.tar.xz">v1.4</a>, released on May 12th 2014.
<li>The git tree for trinity lives on <a href="https://github.com/kernelslacker/trinity">github</a>. (Please don't send me github pull requests, send email instead).
<li>snapshot <a href="trinity-git-snapshot.tar.xz">tarballs</a> are created every hour.
</ul>
</td></tr></table></p>
<p><table class="box" width=95%>
<tr><th align="left">changes in git since the last (1.4) tarball release.</th></tr>
<tr><td class="table-cell">
<ul>
<li>Fix for premature exiting on fork() failure.
<li>Tile architecture support
<li>Fix syscall offset for MIPS &amp; IA64
<li>ppc: renameat support
<li>perf_event_open() can now create system-wide events
<li>Correctly ignore ENOSYS from perf_event_open, msgrcv and sys_ipc
<li>When trinity detects the kernel got tainted, it now syslogs the last seed.
<li>Trinity no longer spews 'reseeding' messages constantly.
<li>Locking/scalability improvements.
<li>Reworked logging code to separate rendering &amp; output.
<li>Logfiles now only fsync'd when a child process has dirtied them.
<li>Post-mortem dump when tainting detected.
<li>Handle SIGBUS in children correctly.
<li>Many simplifications and fixes to page dirtying code.
<li>Some RNG improvements.
<li>Assorted code cleanups that should have no user-visible effect.
</ul>
</td></tr></table></p>
<p><table class="box" width=95%>
<tr><th align="left">Contact:</th></tr>
<tr><td class="table-cell">
There is a mailing list for trinity hosted at vger.kernel.org.</br>
To subscribe, send a mail with "subscribe trinity" in the body to <a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="4e232f24213c2a2123210e38292b3c60252b3c202b2260213c29">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script></br>
If you get oopses, send them to <a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="6d01040318154006081f0308012d1b0a081f4306081f03080143021f0a">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script> with the relevant maintainer Cc'd. (I'd appreciate a Cc too &lt;davej atsign redhat.com&gt;, and please mention that you used Trinity to trigger it).
</td></tr></table></p>
<p><table class="box" width=95%>
<tr><th align="left">Like this?</th></tr>
<tr><td class="table-cell">
bitcoin: 15UnuJ42WcJHVg8biotD81y2rKQYMZsuFQ
</td></tr></table></p>
</td>
<td valign="top">
<table width=100%><tr><td>
<table class="box">
<tr><td class="table-cell" valign=top>
 
<form method="get" action="http://www.google.com/custom" target="google_window">
<input type="hidden" name="domains" value="www.codemonkey.org.uk"></input>
<input type="text" name="q" size="32" maxlength="255" value=""></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.codemonkey.org.uk"></input>
<font size="-1" color="#000000">www.codemonkey.org.uk</font>
</td>
</tr>
</table>
<input type="submit" name="sa" value="Google Search"></input>
<input type="hidden" name="client" value="pub-8028264356002608"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#333333;GL:1;DIV:#37352E;VLC:000000;AH:center;BGC:a4876d;LBGC:8E866F;ALC:000000;LC:000000;T:44423A;GFNT:663333;GIMP:663333;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
 
<br>
<table width=45%>
<tr><td>
<br/>
<script type="text/javascript"><!--
google_ad_client = "ca-pub-8028264356002608";
/* wide skyscraper */
google_ad_slot = "7381750378";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</td></tr></table>
</td></tr></table>
<br/>
<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://fpdownload.macromedia.com/get/flashplayer/current/swflash.cab" id="Player_fad97557-67ee-451d-bfce-3d02d9d4d0ea" WIDTH="160px" HEIGHT="600px"> <PARAM NAME="movie" VALUE="http://ws.amazon.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fcodemonkeyorg-20%2F8010%2Ffad97557-67ee-451d-bfce-3d02d9d4d0ea&Operation=GetDisplayTemplate"><PARAM NAME="quality" VALUE="high"><PARAM NAME="bgcolor" VALUE="#FFFFFF"><PARAM NAME="allowscriptaccess" VALUE="always"><embed src="http://ws.amazon.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fcodemonkeyorg-20%2F8010%2Ffad97557-67ee-451d-bfce-3d02d9d4d0ea&Operation=GetDisplayTemplate" id="Player_fad97557-67ee-451d-bfce-3d02d9d4d0ea" quality="high" bgcolor="#ffffff" name="Player_fad97557-67ee-451d-bfce-3d02d9d4d0ea" allowscriptaccess="always" type="application/x-shockwave-flash" align="middle" height="600px" width="160px"></embed></OBJECT> <NOSCRIPT><A HREF="http://ws.amazon.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fcodemonkeyorg-20%2F8010%2Ffad97557-67ee-451d-bfce-3d02d9d4d0ea&Operation=NoScript">Amazon.com Widgets</A></NOSCRIPT>
</td></tr></table>
<hr noshade size=3 align=left>
<a href="http://www.codemonkey.org.uk">back to Dave Jones home page.</a>.
<script type="text/javascript">/* CloudFlare analytics upgrade */
window._gat=window._gat||{_getTracker:function(){return {_trackPageview:function(){}}}};
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-3332074-1");
pageTracker._initData();
pageTracker._trackPageview();
</script>
<script type="text/javascript">//<![CDATA[try{(function(a){var b="http://",c="codemonkey.org.uk",d="/cdn-cgi/cl/",e="img.gif",f=new a;f.src=[b,c,d,e].join("")})(Image)}catch(e){}//]]></script></body>
</html>

