http://www.bitcoinsecurity.org/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 03:54:34 GMT
Server: Apache
X-Pingback: http://www.bitcoinsecurity.org/xmlrpc.php
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 15330
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Bitcoin Security | Data analysis at your fingertips</title>
<link rel="pingback" href="http://www.bitcoinsecurity.org/xmlrpc.php" />
		<script type="text/javascript">
			// <![CDATA[

			// P2 Configuration
			var ajaxUrl                 = "http://www.bitcoinsecurity.org/wp-admin/admin-ajax.php?p2ajax=true";
			var ajaxReadUrl             = "http://www.bitcoinsecurity.org/feed/p2.ajax/?p2ajax=true";
			var updateRate              = "30000"; // 30 seconds
			var nonce                   = "f84b10815a";
			var login_url               = "http://www.bitcoinsecurity.org/wp-login.php?redirect_to=http%3A%2F%2Fwww.bitcoinsecurity.org%2F";
			var templateDir             = "http://www.bitcoinsecurity.org/wp-content/themes/p2";
			var isFirstFrontPage        = 1;
			var isFrontPage             = 1;
			var isSingle                = 0;
			var isPage                  = 0;
			var isUserLoggedIn          = 0;
			var prologueTagsuggest      = 1;
			var prologuePostsUpdates    = 1;
			var prologueCommentsUpdates = 1;
			var getPostsUpdate          = 0;
			var getCommentsUpdate       = 0;
			var inlineEditPosts         = 1;
			var inlineEditComments      = 1;
			var wpUrl                   = "http://www.bitcoinsecurity.org";
			var rssUrl                  = "";
			var pageLoadTime            = "2014-07-23 03:54:35";
			var commentsOnPost          = new Array;
			var postsOnPage             = new Array;
			var postsOnPageQS           = '';
			var currPost                = -1;
			var currComment             = -1;
			var commentLoop             = false;
			var lcwidget                = false;
			var hidecomments            = false;
			var commentsLists           = '';
			var newUnseenUpdates        = 0;
			var mentionData             = null;
			var p2CurrentVersion        = 3;
			var p2StoredVersion         = 3;
			// ]]>
		</script>
<link rel="alternate" type="application/rss+xml" title="Bitcoin Security &raquo; Feed" href="http://www.bitcoinsecurity.org/feed/" />
<link rel="alternate" type="application/rss+xml" title="Bitcoin Security &raquo; Comments Feed" href="http://www.bitcoinsecurity.org/comments/feed/" />
		<script type="text/javascript">
		//<![CDATA[
		var wpLocale = {"month":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthabbrev":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekday":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdayabbrev":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]};
		//]]>
		</script>
		<link rel='stylesheet' id='p2-css'  href='http://www.bitcoinsecurity.org/wp-content/themes/p2/style.css?ver=3.8.3' type='text/css' media='all' />
<link rel='stylesheet' id='p2-print-style-css'  href='http://www.bitcoinsecurity.org/wp-content/themes/p2/style-print.css?ver=20120807' type='text/css' media='print' />
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-includes/js/jquery/jquery.color.min.js?ver=2.1.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var userSettings = {"url":"\/","uid":"0","time":"1406087675"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-includes/js/utils.min.js?ver=3.8.3'></script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-includes/js/comment-reply.min.js?ver=3.8.3'></script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-content/themes/p2/js/jquery.scrollTo-min.js?ver=20120402'></script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-content/themes/p2/js/wp-locale.js?ver=20130819'></script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-content/themes/p2/js/spin.js?ver=20120704'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var p2txt = {"tags":"<br \/>Tags:","tagit":"Tag it","citation":"Citation","title":"Post Title","goto_homepage":"Go to homepage","n_new_updates":"%d new update(s)","n_new_comments":"%d new comment(s)","jump_to_top":"Jump to top","not_posted_error":"An error has occurred, your post was not posted","update_posted":"Your update has been posted","loading":"Loading...","cancel":"Cancel","save":"Save","hide_threads":"Hide threads","show_threads":"Show threads","unsaved_changes":"Your comments or posts will be lost if you continue.","date_time_format":"%1$s <em>on<\/em> %2$s","date_format":"F j, Y","time_format":"g:i a","autocomplete_prompt":"After typing @, type a name or username to find a member of this site","no_matches":"No matches.","comment_cancel_ays":"Are you sure you would like to clear this comment? Its contents will be deleted.","oops_not_logged_in":"Oops! Looks like you are not logged in.","please_log_in":"Please log in again","whoops_maybe_offline":"Whoops! Looks like you are not connected to the server. P2 could not connect with WordPress.","required_filed":"This field is required."};
try{convertEntities(p2txt);}catch(e){};;
/* ]]> */
</script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-content/themes/p2/js/p2.js?ver=20131101'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.bitcoinsecurity.org/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.bitcoinsecurity.org/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.8.3" />
<script language="JavaScript"><!--
 var DevFmtUrl='http://www.bitcoinsecurity.org/wp-content/plugins/devformatter/'; var DevFmtAjaxUrl = 'http://www.bitcoinsecurity.org/wp-admin/admin-ajax.php'; //-->
</script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-content/plugins/devformatter/devfmt_common.js?ver=2013.0.1.41'></script>
<script type='text/javascript' src='http://www.bitcoinsecurity.org/wp-content/plugins/devformatter/devfmt_public.js?ver=2013.0.1.41'></script>
<style type="text/css" media="screen"> @import url( 'http://www.bitcoinsecurity.org/wp-content/plugins/devformatter/devfmt_reset.css?ver=2013.0.1.41' ); </style>
<style type="text/css" media="screen"> @import url( 'http://www.bitcoinsecurity.org/wp-content/plugins/devformatter/devfmt_css.php?ver=2013.0.1.41' ); </style><style type="text/css">
.is-js .hide-if-js {
	display: none;
}
.p2-task-list ul {
	margin-left: 0 !important;
}
.p2-task-list ul ul {
	margin-left: 20px !important;
}
.p2-task-list li {
	list-style: none;
}
</style>
<script type="text/javascript">
jQuery( function( $ ) {
	$( 'body' )
		.addClass( 'is-js' )
		.delegate( '.p2-task-list :checkbox', 'click', function() {
			var $this = $( this ),
			    $li = $this.parents( 'li:first' ),
			    $form = $this.parents( 'form:first' ),
			    data = $li.find( ':input' ).serialize(),
			    colorEl = $li, origColor = $li.css( 'background-color' ), color;

			while ( colorEl.get(0).tagName && colorEl.css( 'background-color' ).match( /^\s*(rgba\s*\(\s*0+\s*,\s*0+\s*,\s*0+\s*,\s*0+\s*\)|transparent)\s*$/ ) ) {
				colorEl = colorEl.parent();
			}

			color = colorEl.get(0).tagName ? colorEl.css( 'background-color' ) : '#ffffff';

			data += '&ajax=1&' + $form.find( '.submit :input' ).serialize();

			$.post( $form.attr( 'action' ), data, function( response ) {
				if ( '1' === response )
					$li.css( 'background-color', '#F6F3D1' ).animate( { backgroundColor: color }, 'slow', function() { $li.css( 'background-color', origColor ); } );
			} );
	} );
} );
</script>
	<style id="p2-header-style" type="text/css">
			#header {
			background: url('http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/header.jpg') repeat;
			height: 120px;
		}
		#header a.secondary {
			display: block;
			position: absolute;
			top: 0;
			width: 980px;
			height: 120px;
		}
		#header a.secondary:hover {
			border: 0;
		}
		#header .sleeve {
			background-color: transparent;
			margin-top: 0;
			margin-right: 0;
			position: relative;
			height: 120px;
			-webkit-box-shadow: none !important;
			-moz-box-shadow: none !important;
			box-shadow: none !important;
		}
		#header {
			-webkit-box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
			-moz-box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
			box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
		}
			#header h1,
		#header small {
			padding: 0;
			text-indent: -1000em;
		}
		</style>
<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #f1f1f1; }
</style>
</head>
<body class="home blog custom-background">

<div id="header">

	<div class="sleeve">
		<h1><a href="http://www.bitcoinsecurity.org/">Bitcoin Security</a></h1>
					<small>Data analysis at your fingertips</small>
				<a class="secondary" href="http://www.bitcoinsecurity.org/"></a>

			</div>

		<div role="navigation" class="site-navigation main-navigation">
		<h1 class="assistive-text">Menu</h1>
		<div class="assistive-text skip-link"><a href="#main" title="Skip to content">Skip to content</a></div>

		<div class="menu-main-menu-container"><ul id="menu-main-menu" class="menu"><li id="menu-item-35" class="menu-item menu-item-type-custom menu-item-object-custom current-menu-item current_page_item menu-item-home menu-item-35"><a href="http://www.bitcoinsecurity.org">Home</a></li>
<li id="menu-item-36" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-36"><a href="http://www.bitcoin.org">The Bitcoin Project</a></li>
</ul></div>	</div>
	</div>

<div id="wrapper">

		<div id="sidebar">
	
		<ul>
					<li id="recent-posts-3" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://www.bitcoinsecurity.org/2014/01/20/mapping-bitcoin-addresses-to-ips-hard-but-possible/">Mapping Bitcoin Addresses to IPs: Hard, but possible</a>
						</li>
					<li>
				<a href="http://www.bitcoinsecurity.org/2012/08/06/sample-scripts/">Sample Scripts</a>
						</li>
					<li>
				<a href="http://www.bitcoinsecurity.org/2012/07/22/what-is-bitcoin/">What is Bitcoin?</a>
						</li>
					<li>
				<a href="http://www.bitcoinsecurity.org/2012/07/22/getting-bitcoin-qt-running-on-ubuntu-12-04/">Getting Bitcoin-Qt running on Ubuntu 12.04</a>
						</li>
					<li>
				<a href="http://www.bitcoinsecurity.org/2012/07/22/7/">Bitcoin Scripts</a>
						</li>
				</ul>
		</li>
<li id="categories-3" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-8"><a href="http://www.bitcoinsecurity.org/category/bitcoin-2/" title="View all posts filed under Bitcoin">Bitcoin</a> (3)
</li>
	<li class="cat-item cat-item-1"><a href="http://www.bitcoinsecurity.org/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a> (2)
</li>
		</ul>
</li>
<li id="linkcat-11" class="widget widget_links"><h2 class="widgettitle">Recommended Links</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.bitcoin.org" title="The official development page for the bitcoin project">Bitcoin.org</a>
The official development page for the bitcoin project</li>

	</ul>
</li>

<li id="text-2" class="widget widget_text"><h2 class="widgettitle">Donations</h2>
			<div class="textwidget"><p>We'd like to open source our custom client but it is a non-trivial effort to move a research system into a state that is production-ready.  If you would like to contribute towards this effort, please consider donating:</p>
<p>Our Address:<br />
1PghADuyQAod8QKHEscxR9m1EMiVnbyK2W</p>
</div>
		</li>
		</ul>

		<div class="clear"></div>

	</div> <!-- // sidebar -->

<div class="sleeve_main">
		<div id="main">
		<h2>
			
				Recent Updates 
			
			<span class="controls">
				<a href="#" id="togglecomments"> Toggle Comment Threads</a> | <a href="#directions" id="directions-keyboard">Keyboard Shortcuts</a>
			</span>
		</h2>

		<ul id="postlist">
		
				    		<li id="prologue-150" class="post-150 post type-post status-publish format-standard hentry category-uncategorized">
	
		<a href="http://www.bitcoinsecurity.org/author/philipkoshy/" title="Posts by philipkoshy ( @philipkoshy )" class="post-avatar">
			<img alt='' src='http://1.gravatar.com/avatar/79774a94ceb9c1e699715053ff76b82b?s=48&amp;d=&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		</a>
		<h4>
					<a href="http://www.bitcoinsecurity.org/author/philipkoshy/" title="Posts by philipkoshy ( @philipkoshy )">philipkoshy</a>
				<span class="meta">
			<abbr title="2014-01-21T02:43:36Z">9:43 pm <em>on</em> January 20, 2014</abbr>			<span class="actions">
				<a href="http://www.bitcoinsecurity.org/2014/01/20/mapping-bitcoin-addresses-to-ips-hard-but-possible/" class="thepermalink" title="Permalink">Permalink</a>
				 | <a rel='nofollow' title='Reply' class='comment-reply-link' href='http://www.bitcoinsecurity.org/2014/01/20/mapping-bitcoin-addresses-to-ips-hard-but-possible/#respond' onclick='return addComment.moveForm("comments-150", "0", "respond", "150")'>Reply</a>
							</span>
							<span class="tags">
					&nbsp;
				</span>
					</span>
	</h4>

	
	<div id="content-150" class="postcontent">
	<h2><a href="http://www.bitcoinsecurity.org/2014/01/20/mapping-bitcoin-addresses-to-ips-hard-but-possible/">Mapping Bitcoin Addresses to IPs: Hard, but possible&nbsp;</a></h2><p>We are excited to announce that our research paper has been accepted for publication in the <a href="http://fc14.ifca.ai/accepted.html">Financial Crypto 2014</a> conference. It is available here:&nbsp;<a href="http://www.bitcoinsecurity.org/wp-content/uploads/2014/01/Koshy-FC141.pdf">An Analysis of Anonymity in Bitcoin Using P2P Network Traffic</a></p>
<h2><strong>Goal</strong></h2>
<p><span style="line-height: 1.5em;">We wanted to determine if real-time transaction traﬃc received from directly connected peers can alone be used to create Bitcoin address-to-IP mappings. Although previous work has analyzed the degree of anonymity Bitcoin oﬀers using clustering and ﬂow analysis, none have demonstrated the ability to map Bitcoin addresses directly to IP data. The ability to create such mappings is important since there have been cases where individuals participating in P2P networks have been identiﬁed by law enforcement after their ISPs had been subpoenaed.</span></p>
<h2><strong>Our Approach</strong></h2>
<p>Although numerous Bitcoin clients exist, none of them were specialized for data collection. Available clients often need to balance receiving and spending bitcoins, vetting and rejecting invalid transactions, maintaining a user’s wallet, mining bitcoins, and, perhaps most detrimental to our study, disconnecting from “poorly-behaving” peers; these were precisely the peers we were interested in. Because existing software had integrated functionality that interfered with our goals, we decided to build our own minimal Bitcoin client called CoinSeer, which was a lean tool designed exclusively for data collection.</p>
<p>To increase the likelihood of receiving transactions directly from their creators in a gossip protocol, CoinSeer created an outbound connection to every listening peer whose IP address was advertised on the Bitcoin network for a period of 5 months between July 24, 2012 and January 2, 2013. We actively collected all data, along with its IP information, being relayed on the network and stored it for oﬄine processing.&nbsp;This approach was inspired by a technique proposed by Dan Kaminsky during the 2011 Black Hat conference.&nbsp;</p>
<h2><strong>Results</strong></h2>
<p>In the paper, we discuss the circumstances that allowed us to map nearly 1,000 Bitcoin addresses to their likely owner IPs by leveraging P2P relaying behavior. &nbsp;Although normal relaying behavior proved very difficult to deanonymize, we discuss how certain anomalous relay patterns became highly useful in our study.</p>
<h2><strong>Takeaway</strong></h2>
<p>If you take the proper precautions (e.g., using TOR, eWallets, mixing services), you are still very safe from our approach. Even if you take no special precautions at all, 91.4% of all traffic was not amenable to analysis.&nbsp;</p>
	</div>

	
	
	<div class="bottom-of-entry">&nbsp;</div>

	

<ul id="comments-150" class="commentlist inlinecomments">
</ul>

			<div class="respond-wrap" style="display: none; ">
												<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://www.bitcoinsecurity.org/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes"></p>							<p class="comment-form-author"><label for="author">Name</label> <input id="author" name="author" type="text" value="" size="30" /></p>
<p class="comment-form-email"><label for="email">Email</label> <input id="email" name="email" type="text" value="" size="30" /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<div class="form"><textarea id="comment" class="expand50-100" name="comment" cols="45" rows="3"></textarea></div> <label class="post-error" for="comment" id="commenttext_error"></label>						<span class="progress spinner-comment-new"></span>						<p class="form-submit">
							<input name="submit" type="submit" id="comment-submit" value="Reply" />
							<input type='hidden' name='comment_post_ID' value='150' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
											</form>
							</div><!-- #respond -->
						</div></li>
				    		<li id="prologue-84" class="post-84 post type-post status-publish format-standard hentry category-uncategorized">
	
		<a href="http://www.bitcoinsecurity.org/author/dianakoshy/" title="Posts by dianakoshy ( @dianakoshy )" class="post-avatar">
			<img alt='' src='http://0.gravatar.com/avatar/0ad95efb4dd356930b1d0c6d0bb9c28a?s=48&amp;d=&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		</a>
		<h4>
					<a href="http://www.bitcoinsecurity.org/author/dianakoshy/" title="Posts by dianakoshy ( @dianakoshy )">dianakoshy</a>
				<span class="meta">
			<abbr title="2012-08-06T21:06:50Z">5:06 pm <em>on</em> August 6, 2012</abbr>			<span class="actions">
				<a href="http://www.bitcoinsecurity.org/2012/08/06/sample-scripts/" class="thepermalink" title="Permalink">Permalink</a>
				 | <a rel='nofollow' title='Reply' class='comment-reply-link' href='http://www.bitcoinsecurity.org/2012/08/06/sample-scripts/#respond' onclick='return addComment.moveForm("comments-84", "0", "respond", "84")'>Reply</a>
							</span>
							<span class="tags">
					&nbsp;
				</span>
					</span>
	</h4>

	
	<div id="content-84" class="postcontent">
	<h2><a href="http://www.bitcoinsecurity.org/2012/08/06/sample-scripts/">Sample Scripts&nbsp;</a></h2><p>I found a few examples of the <a title="BIP-16" href="https://en.bitcoin.it/wiki/BIP_0016" target="_blank">BIP-16 Pay-To-Script-Hash</a> scripts in the wild. So far, the ones I&#8217;ve found contain multi-sig scripts.</p>
<p>Below is an example of a matching output/input pair where the output contains the hash of a MULTISIG script and the input contains the script itself along with the signature required to claim the money. The MULTISIG script lists 2 compressed keys, only one of which need to sign for the money to become available.</p>
<p><span style="text-decoration: underline;"><strong>SAMPLE PAY-TO-SCRIPT-HASH SCRIPT:</strong></span></p>
<p><strong><em>Output (send):</em></strong></p>
<p style="padding-left: 30px;"> TX Hash: </p>
<p><pre style="padding-left: 38px;">96260c7b8bdc436ed513535277111fee88d24826918e28298b12b76e857bbddf</pre></p>
<p style="padding-left: 30px;"> Output Index: </p>
<p><pre style="padding-left: 38px;">0</pre></p>
<p style="padding-left: 30px;"> Raw Script: </p>
<p><pre style="padding-left: 38px;">A9 14 74 82 84 39 0F 9E  26 3A 4B 76 6A 75 D0 63
3C 50 42 6E B8 75 87</pre></p>
<p style="padding-left: 30px;"> Parsed Script: </p>
<p><pre style="padding-left: 38px;"> 
A9                             - OP_HASH160

14                             - length of script hash (= 20)

74 82 84 39 0F 9E 26 3A        - script hash
4B 76 6A 75 D0 63 3C 50   
42 6E B8 75

87                             - OP_EQUAL
</pre></p>
<p><em><strong>Input (claim):</strong></em></p>
<p style="padding-left: 30px;"> TX Hash: </p>
<p><pre style="padding-left: 38px;">446aa241c9f7ec5609100d868bd4ac06121f8aa926f88f7ff296a9e56299b84f</pre></p>
<p style="padding-left: 30px;"> Input Index:</p>
<p><pre style="padding-left: 38px;">4</pre></p>
<p style="padding-left: 30px;"> Raw Script: </p>
<p><pre style="padding-left: 38px;">00 48 30 45 02 20 4A 71  D4 24 8E F5 F5 36 53 50
4A 4C 0C FD 36 80 B2 D5  C3 8B FD CE 6A F2 D8 5C
FA CC 71 A4 7F 5F 02 21  00 C2 38 8E E8 6B C1 54
3B 47 50 59 5B C4 76 1B  23 A1 E2 F5 B6 24 03 68 
D7 A9 79 5B A3 0C C3 28  95 01 47 51 21 02 2A FC
20 BF 37 9B C9 6A 2F 4E  9E 63 FF CE B8 65 2B 2B
6A 09 7F 63 FB EE 6E CE  C2 A4 9A 48 01 0E 21 03
A7 67 C7 22 1E 9F 15 F8  70 F1 AD 93 11 F5 AB 93
7D 79 FC AE EE 15 BB 2C  72 2B CA 51 55 81 B4 C0
52 AE 
</pre></p>
<p style="padding-left: 30px;">Parsed Script:</p>
<p style="padding-left: 38px;">Signature as required by TX_OUT_MULTISIG:</p>
<p><pre style="padding-left: 38px;"> 
00                             - OP_0 (required by MULTISIG before sig)    

48                             - length of full signature (sigLength)     
  
30
                                                                         
45                             - length of signature pieces (rsLength)     

02 

20                             - length of first piece (rLength)

4A 71 D4 24 8E F5 F5 36        - sig_r
53 50 4A 4C 0C FD 36 80
B2 D5 C3 8B FD CE 6A F2 
D8 5C FA CC 71 A4 7F 5F

02 

21                             - length of second piece (sLength)

00 C2 38 8E E8 6B C1 54        - sig_s
3B 47 50 59 5B C4 76 1B
23 A1 E2 F5 B6 24 03 68 
D7 A9 79 5B A3 0C C3 28
95

01
</pre></p>
<p style="padding-left: 38px;"> Script of type TX_OUT_MULTISIG: </p>
<p><pre style="padding-left: 38px;"> 
47                             - length of script

51                             - m = OP_1

21                             - length of pubKey #1

02 2A FC 20 BF 37 9B C9        - pubKey #1(compressed)
6A 2F 4E 9E 63 FF CE B8
65 2B 2B 6A 09 7F 63 FB
EE 6E CE C2 A4 9A 48 01
0E

21                             - length of pubKey #2

03 A7 67 C7 22 1E 9F 15        - pubKey #2 (compressed)
F8 70 F1 AD 93 11 F5 AB
93 7D 79 FC AE EE 15 BB
2C 72 2B CA 51 55 81 B4
C0

52                             - n = OP_2

AE                             - OP_CHECKMULTISIG
</pre></p>
<p style="padding-left: 30px;"> Bitcoin addresses derived from the keys:</p>
<p><pre style="padding-left: 38px;"> 
1Bt8XZ3RDUUsRmmqM26uCfNxQF6SEyrjvt
12ppVrt7pVMQnVpekHmrcEZ5vUnUcFfV6w
</pre></p>
	</div>

	
	
	<div class="bottom-of-entry">&nbsp;</div>

	

<ul id="comments-84" class="commentlist inlinecomments">
</ul>

</li>
				    		<li id="prologue-43" class="post-43 post type-post status-publish format-standard hentry category-bitcoin-2">
	
		<a href="http://www.bitcoinsecurity.org/author/philipkoshy/" title="Posts by philipkoshy ( @philipkoshy )" class="post-avatar">
			<img alt='' src='http://1.gravatar.com/avatar/79774a94ceb9c1e699715053ff76b82b?s=48&amp;d=&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		</a>
		<h4>
					<a href="http://www.bitcoinsecurity.org/author/philipkoshy/" title="Posts by philipkoshy ( @philipkoshy )">philipkoshy</a>
				<span class="meta">
			<abbr title="2012-07-22T10:36:04Z">6:36 am <em>on</em> July 22, 2012</abbr>			<span class="actions">
				<a href="http://www.bitcoinsecurity.org/2012/07/22/what-is-bitcoin/" class="thepermalink" title="Permalink">Permalink</a>
				 | <a rel='nofollow' title='Reply' class='comment-reply-link' href='http://www.bitcoinsecurity.org/2012/07/22/what-is-bitcoin/#respond' onclick='return addComment.moveForm("comments-43", "0", "respond", "43")'>Reply</a>
							</span>
							<span class="tags">
					&nbsp;
				</span>
					</span>
	</h4>

	
	<div id="content-43" class="postcontent">
	<h2><a href="http://www.bitcoinsecurity.org/2012/07/22/what-is-bitcoin/">What is Bitcoin?&nbsp;</a></h2><p>The following is a short technical description I wish I had when I started working with the Bitcoin protocol almost a year ago. Although the <a title="original paper" href="http://www.bitcoin.org/bitcoin.pdf" target="_blank">original paper</a> was useful, it didn&#8217;t provide the instant gratification I required as a wildly impatient developer.</p>
<h2>A Technical Description</h2>
<p>Bitcoin is a decentralized P2P currency that uses a <a title="gossip protocol" href="http://en.wikipedia.org/wiki/Gossip_protocol" target="_blank">gossip protocol</a> to transmit messages among peers in an <a title="overlay network" href="http://en.wikipedia.org/wiki/Overlay_network" target="_blank">overlay network</a>.&nbsp;</p>
<p>(1) Transactions and (2) Blocks are the two main&nbsp;data structures in the protocol. Coins are transferred among&nbsp;users within transactions, which are then grouped into&nbsp;blocks that must be accepted by the network. A coin owner transfers coins by digitally signing (via <a title="ECDSA" href="http://en.wikipedia.org/wiki/Elliptic_Curve_DSA" target="_blank">ECDSA</a>) a hash digest&nbsp;of the previous transaction and the public key of the next owner. This signature is then appended to the end of the coin. Here is the diagram from the original paper:</p>
<p><a href="http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/transaction.png"><img class="size-full wp-image-45 aligncenter" title="transaction" src="http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/transaction.png" alt="" width="436" height="267" /></a></p>
<p style="text-align: center;">Transactions are placed in blocks, which are linked by SHA256 hashes. Although the accepted chain can be considered a list, the block chain is best represented with a tree.</p>
<p><a href="http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/block.png"><img class="size-full wp-image-49 aligncenter" title="block" src="http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/block.png" alt="" width="408" height="104" /></a></p>
<p>Coin generation is tied to block creation. Creating a block is&nbsp;computationally expensive since it requires solving a&nbsp;cryptographic proof-of-work puzzle (see <a title="hashcash" href="http://en.wikipedia.org/wiki/Hashcash" target="_blank">hashcash</a>). Anytime a node&nbsp;generates a block which goes on to be accepted by the&nbsp;network, it is currently awarded 50 Bitcoins although this reward will decrease over time. Not all &nbsp;blocks will be accepted network-wide (i.e., not all generated blocks warrant an award).</p>
<p>New blocks are linked to older blocks, forming a block chain that is constantly being extended. Because of Bitcoin’s&nbsp;decentralized and distributed nature, multiple participants&nbsp;may generate blocks at the same time. &nbsp;For example, in the diagram below, blocks 3, 7 and 8 are all created at the same time. This leads to the&nbsp;<a title="distributed consensus problem" href="http://en.wikipedia.org/wiki/Consensus_(computer_science)" target="_blank">distributed consensus problem</a>. We can represent the block&nbsp;chain as a tree structure, with the longest path representing&nbsp;the accepted chain. A participant choosing to&nbsp;extend an existing path in the block chain indicates a vote&nbsp;towards consensus on that path. The longer the path, the&nbsp;more computation was expended building it. We note that in our data, we find that the tree has a branching factor close to one at any given moment &#8211; in other words, there is very little contention about which chain is longest.&nbsp;In this way, Bitcoin offers a unique solution to the consensus&nbsp;problem in distributed systems since voting power is directly&nbsp;proportional to computing power.</p>
<p><a href="http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/block-chain.png"><img class="size-full wp-image-50 aligncenter" title="block chain" src="http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/block-chain.png" alt="" width="626" height="239" /></a></p>
<h2>Further Reading</h2>
<p>If you&#8217;ve read this far, you are likely interested in the protocol details. &nbsp;For this, I recommend reading the <a title="protocol specification" href="https://en.bitcoin.it/wiki/Protocol_specification">protocol specification</a> and the <a title="source code" href="https://github.com/bitcoin/bitcoin">source code</a>.</p>
	</div>

	
	
	<div class="bottom-of-entry">&nbsp;</div>

	

<ul id="comments-43" class="commentlist inlinecomments">
</ul>

</li>
				    		<li id="prologue-18" class="post-18 post type-post status-publish format-standard hentry category-bitcoin-2">
	
		<a href="http://www.bitcoinsecurity.org/author/philipkoshy/" title="Posts by philipkoshy ( @philipkoshy )" class="post-avatar">
			<img alt='' src='http://1.gravatar.com/avatar/79774a94ceb9c1e699715053ff76b82b?s=48&amp;d=&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		</a>
		<h4>
					<a href="http://www.bitcoinsecurity.org/author/philipkoshy/" title="Posts by philipkoshy ( @philipkoshy )">philipkoshy</a>
				<span class="meta">
			<abbr title="2012-07-22T09:12:30Z">5:12 am <em>on</em> July 22, 2012</abbr>			<span class="actions">
				<a href="http://www.bitcoinsecurity.org/2012/07/22/getting-bitcoin-qt-running-on-ubuntu-12-04/" class="thepermalink" title="Permalink">Permalink</a>
				 | <a rel='nofollow' title='Reply' class='comment-reply-link' href='http://www.bitcoinsecurity.org/2012/07/22/getting-bitcoin-qt-running-on-ubuntu-12-04/#respond' onclick='return addComment.moveForm("comments-18", "0", "respond", "18")'>Reply</a>
							</span>
							<span class="tags">
					&nbsp;
				</span>
					</span>
	</h4>

	
	<div id="content-18" class="postcontent">
	<h2><a href="http://www.bitcoinsecurity.org/2012/07/22/getting-bitcoin-qt-running-on-ubuntu-12-04/">Getting Bitcoin-Qt running on Ubuntu 12.04&nbsp;</a></h2><p>The following is a quick start guide I&#8217;ve written for myself to get the latest version of the Bitcoin-Qt client running in Ubuntu Desktop. &nbsp;Although the following instructions will work on a Ubuntu 12.04 installation, please consult the official documentation as well. I&#8217;ve chosen a setup that suits my own development needs and you may run into issues (i.e., &nbsp;you may not be able to open old wallet backups with the version of libdb I&#8217;ve chosen here).</p>
<h2><strong>Preinstallation Steps:</strong></h2>
<p style="padding-left: 30px;">Install <a title="Ubuntu Desktop Edition" href="http://www.ubuntu.com/download/desktop">Ubuntu Desktop Edition</a>. I use <a title="Virtual Box" href="https://www.virtualbox.org/wiki/Downloads">Virtual Box</a> to do most of my Linux development.</p>
<p style="padding-left: 30px;"><strong></strong>The following packages should be installed using the apt package manager:</p>
<p style="padding-left: 30px;">sudo apt-get install g++ libboost-all-dev qt4-qmake libqt4-dev build-essential libssl-dev libdb5.1++-dev</p>
<h2><strong>Compile the Bitcoin client:</strong></h2>
<ul>
<li>&nbsp;Download the <a title="latest development release" href="http://www.bitcoin.org" target="_blank">latest development release</a>. On the top right of the page, click on Linux (tgz, 32/64-bit) tarball.</li>
<li>After downloading the source, extract the tgz file and type:</li>
</ul>
<p style="padding-left: 30px;">qmake USE_UPNP=- USE_QR_CODE=0</p>
<p style="padding-left: 30px;">make</p>
<h2><strong>To start the client:</strong></h2>
<p style="padding-left: 30px;">To start the client: ./bitcoin-qt</p>
<div>&nbsp;</div>
	</div>

	
			<div class="discussion" style="display: none">
			<p>
				<img alt='' src='http://0.gravatar.com/avatar/27bb50031c266b506f1a388b3c8e7309?s=16&amp;d=&amp;r=G' class='avatar avatar-16 photo' height='16' width='16' /> <a href='http://jordanarseno.com' rel='external nofollow' class='url'>Jordan Arseno</a> is discussing.				<a href="#" class="show-comments">Toggle Comments</a>
			</p>
		</div>
	
	<div class="bottom-of-entry">&nbsp;</div>

	

<ul id="comments-18" class="commentlist inlinecomments">
		<li id="comment-4" class="comment even thread-even depth-1">
		
		<img alt='' src='http://0.gravatar.com/avatar/27bb50031c266b506f1a388b3c8e7309?s=32&amp;d=&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<h4>
			<a href='http://jordanarseno.com' rel='external nofollow' class='url'>Jordan Arseno</a>			<span class="meta">
				<abbr title="2012-08-06T04:22:06Z">12:22 am <em>on</em> August 6, 2012</abbr>				<span class="actions">
					<a class="thepermalink" href="http://www.bitcoinsecurity.org/2012/07/22/getting-bitcoin-qt-running-on-ubuntu-12-04/#comment-4" title="Permalink">Permalink</a>
					 | <a rel='nofollow' class='comment-reply-link' href='http://www.bitcoinsecurity.org/2012/07/22/getting-bitcoin-qt-running-on-ubuntu-12-04/#respond' title='Reply' onclick='return addComment.moveForm("commentcontent-4", "4", "respond", "18")'>Reply</a>				</span>
			</span>
		</h4>
		<div id="commentcontent-4" class="commentcontent"><p>For folks that don&#8217;t need the latest release:</p>
<p>sudo add-apt-repository ppa:bitcoin/bitcoin<br />
sudo apt-get update<br />
sudo apt-get install bitcoin-qt</p>
<p>Or, use Ubuntu Software Centre.</p>
		</div>
	</li><!-- #comment-## -->
</ul>

</li>
				    		<li id="prologue-7" class="post-7 post type-post status-publish format-standard hentry category-bitcoin-2">
	
		<a href="http://www.bitcoinsecurity.org/author/dianakoshy/" title="Posts by dianakoshy ( @dianakoshy )" class="post-avatar">
			<img alt='' src='http://0.gravatar.com/avatar/0ad95efb4dd356930b1d0c6d0bb9c28a?s=48&amp;d=&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		</a>
		<h4>
					<a href="http://www.bitcoinsecurity.org/author/dianakoshy/" title="Posts by dianakoshy ( @dianakoshy )">dianakoshy</a>
				<span class="meta">
			<abbr title="2012-07-22T08:10:38Z">4:10 am <em>on</em> July 22, 2012</abbr>			<span class="actions">
				<a href="http://www.bitcoinsecurity.org/2012/07/22/7/" class="thepermalink" title="Permalink">Permalink</a>
				 | <a rel='nofollow' title='Reply' class='comment-reply-link' href='http://www.bitcoinsecurity.org/2012/07/22/7/#respond' onclick='return addComment.moveForm("comments-7", "0", "respond", "7")'>Reply</a>
							</span>
							<span class="tags">
					&nbsp;
				</span>
					</span>
	</h4>

	
	<div id="content-7" class="postcontent">
	<h2><a href="http://www.bitcoinsecurity.org/2012/07/22/7/">Bitcoin Scripts&nbsp;</a></h2><p>When first learning about the scripts the Bitcoin protocol uses, I couldn’t find in-depth information in one place. I compiled a document for my own reference based on sites and posts I’ve encountered. Hopefully this will make someone&#8217;s life a little easier!</p>
<h2>General Information</h2>
<p>Every transaction contains one script per input and one script per output. Output scripts specify who the money is going to and what must be done to claim it. Input scripts specify who the money is from and generally claim previous outputs (unless the input is a coinbase transaction), thus using coins received from previous transactions.</p>
<p>The scripts contain data fields and operations. When an output is claimed by an input, the input script is prepended to the output script.</p>
<p style="padding-left: 30px;">i.e. [input script claiming money][output script being claimed]</p>
<p>Data fields, each starting with a length, are pushed onto a stack. Operations indicate what must be done to the field(s) at the top of the stack. Usually, this is simply signature verification.</p>
<p>See https:en.bitcoin.it/wiki/Script for more general information.</p>
<h2>Script Types</h2>
<p>There are a number of different script output/input pairs:</p>
<p>a) Standard script sending money to a Bitcoin address and claiming money sent in this way.</p>
<p style="padding-left: 30px;">output (send): OP_DUP OP_HASH160 [pubKeyHash] OP_EQUALVERIFY OP_CHECKSIG</p>
<p style="padding-left: 30px;">input (claim): [sig][pubKey]</p>
<p>b) Standard script assigning newly generated coins to a Bitcoin address and clamining these coins. This is also used for transactions to an IP address.</p>
<p style="padding-left: 30px;">output (send): [pubKey] OP_CHECKSIG</p>
<p style="padding-left: 30px;">input (claim): [sig]</p>
<p>c) Standard input script for newly generated coins (COINBASE).</p>
<p style="padding-left: 30px;">The script is random data (prev_hash is all 0′s, and prev_index is all f’s). Some mining pools encode their information in these scripts. The “extranonce” field, along with a timestamp, may also be encoded here when a miner has exhausted the nonce space while trying to solve the proof-of-work puzzle.</p>
<p>d) Standard script sending money to a script instead of a Bitcoin address (P2SH = Pay-To-Script (BIP 16)). The script must be one of the other standard output scripts.</p>
<p style="padding-left: 30px;">output (send): OP_HASH160 [hashOfScript] OP_EQUAL</p>
<p style="padding-left: 30px;">input (claim): [signatures as required by script][script]</p>
<p>e) Standard script requiring multiple signatures to claim coins (BIP 11) .&nbsp;</p>
<p style="padding-left: 30px;">output (send): OP_SMALLINT1 [pubKey][pubKey][pubKey] OP_SMALLINT2 OP_CHECKMULTISIG</p>
<p style="padding-left: 30px;">input (claim): OP_0 [sig][sig][sig]</p>
<p>f) Sample non-standard transaction including a message.</p>
<p style="padding-left: 30px;">output (send): [message] OP_DROP [pubKey] OP_CHECKSIG</p>
<p style="padding-left: 30px;">input (claim): [sig]</p>
<h2>On-The-Wire: Parsing The Scripts</h2>
<p>Parsing the scripts requires understanding what they look like at the byte level. The following diagram has helped me out quite a bit:</p>
<div id="attachment_70" style="width: 642px" class="wp-caption aligncenter"><a href="http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/tx_binary_map.png"><img class="size-large wp-image-70" title="tx_binary_map" src="http://www.bitcoinsecurity.org/wp-content/uploads/2012/07/tx_binary_map-1024x446.png" alt="" width="632" height="275" /></a><p class="wp-caption-text">Originally found here: <a href="https://bitcointalk.org/index.php?topic=29416" rel="nofollow">https://bitcointalk.org/index.php?topic=29416</a></p></div>
<h2>Common Operations:</h2>
<p style="padding-left: 30px;">OP_DUP = 0×76</p>
<p style="padding-left: 30px;">OP_EQUALVERIFY = 0×88</p>
<p style="padding-left: 30px;">OP_DROP = 0×75</p>
<p style="padding-left: 30px;">OP_HASH160 = 0xa9</p>
<p style="padding-left: 30px;">OP_CHECKSIG = 0xac</p>
<p style="padding-left: 30px;">OP_EQUAL = 0×87</p>
<p style="padding-left: 30px;">OP_CHECKMULTISIG = 0xae</p>
<p style="padding-left: 30px;">OP_SMALLINT1 = m</p>
<p style="padding-left: 30px;">OP_SMALLINT2 = n</p>
<p style="padding-left: 30px;">where 1 &le; n &le; 3 and 1 &le; m &le; n are integers representing that m out of n signatures need to appear to claim the transaction.</p>
<h2>Common Data Fields:</h2>
<p>[sig] = [sigLength][0×30][rsLength][0×02][rLength][sig_r][0×02][sLength][sig_s][0×01]</p>
<p style="padding-left: 30px;">where</p>
<p style="padding-left: 30px;">sigLength gives the number of bytes taken up the rest of the signature ([0×30]…[0×01])</p>
<p style="padding-left: 30px;">rsLength gives the number of bytes in [0×02][rLength][sig_r][0×02][sLength][sig_s]</p>
<p style="padding-left: 30px;">rLength gives the number of bytes in [sig_r] (approx 32 bytes)</p>
<p style="padding-left: 30px;">sLength gives the number of bytes in [sig_s] (approx 32 bytes)</p>
<p>[pubKeyHash] = [pubKeyHashLength][RIPEMD160(SHA256(public key))]</p>
<p style="padding-left: 30px;">where pubKeyHashLength is always 0&#215;14 (= 20) since the RIPEMD160 digest is 20 bytes.</p>
<p>[pubKey] (uncompressed) = [publicKeyLength][0×04][keyX][keyY]</p>
<p style="padding-left: 30px;">where publicKeyLength is always 0&#215;41 (= 65) since keyX and keyY are 32 bytes and 0&#215;04 is 1 byte</p>
<p>[pubKey] (compressed) = [publicKeyLength][0×02 or 0×03][keyX]</p>
<p style="padding-left: 30px;">where publicKeyLength is always 0&#215;21 (= 33) since keyX is 32 bytes and 0&#215;02/0&#215;03 is 1 byte.</p>
<p>Note: [pubKey] can be either compressed or uncompressed. [keyX] and [keyY] are always 32 bytes each. Thus, publicKeyLength will always be 0×41 (= 65) for uncompressed keys and 0×21 (= 33) for compressed keys. The 0×02/0×03/0×04 is part of the key and describes the encoding. 0×04 is for uncompressed while 0×02/0×03 is for compressed key encodings.</p>
<h2>Bitcoin Addresses: Base 58 Encoded Public Keys</h2>
<p>Bitcoin addresses can be built from the public key or the public key hash as follows:</p>
<p>(Taken from <a href="https://en.bitcoin.it/wiki/Protocol_specification#Addresses" rel="nofollow">https://en.bitcoin.it/wiki/Protocol_specification#Addresses</a>)</p>
<p style="padding-left: 30px;">Key hash = Version concatenated with RIPEMD-160(SHA-256(public key))</p>
<p style="padding-left: 30px;">Checksum = 1st 4 bytes of SHA-256(SHA-256(Key hash))</p>
<p style="padding-left: 30px;">Bitcoin Address = Base58Encode(Key hash concatenated with Checksum)</p>
<p>Note: Version = 1 byte of 0 (zero); on the test network, this is 1 byte of 111</p>
<p>Note: The Base58 encoding used is home made, and has some differences. Especially, leading zeroes are kept as single zeroes when conversion happens.</p>
<p>A more detailed step by step algorithm can be found at:</p>
<p style="padding-left: 30px;"><a href="https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses" rel="nofollow">https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses</a></p>
<p>Note: In step 9, it should not be using Base58Check, which appends a checksum to its input and then converts to base 58. Since the checksum has already been appended in step 8, just convert the string from step 8 to base 58 using the custom alphabet.</p>
<p>There is a site that provides a form which performs these steps for a given key:</p>
<p style="padding-left: 30px;"><a href="http://gobittest.appspot.com/Address" rel="nofollow">http://gobittest.appspot.com/Address</a></p>
<p>A full public key (including the 0×02/0×03/0×04 leading byte) would be pasted into #1, while a public key hash would be pasted into #3.</p>
	</div>

	
	
	<div class="bottom-of-entry">&nbsp;</div>

	

<ul id="comments-7" class="commentlist inlinecomments">
</ul>

</li>
			
				</ul>

		<div class="navigation">
			<p class="nav-older"></p>
			<p class="nav-newer"></p>
		</div>

	</div> <!-- main -->

</div> <!-- sleeve -->

	<div class="clear"></div>

</div> <!-- // wrapper -->

<div id="footer">
	<p>
		<a href="http://wordpress.org/" rel="generator">Proudly powered by WordPress.</a>	    Theme: P2 by <a href="http://theme.wordpress.com/" rel="designer">WordPress.com</a>.	</p>
</div>

<div id="notify"></div>

<div id="help">
	<dl class="directions">
		<dt>c</dt><dd>compose new post</dd>
		<dt>j</dt><dd>next post/next comment</dd>
		<dt>k</dt> <dd>previous post/previous comment</dd>
		<dt>r</dt> <dd>reply</dd>
		<dt>e</dt> <dd>edit</dd>
		<dt>o</dt> <dd>show/hide comments</dd>
		<dt>t</dt> <dd>go to top</dd>
		<dt>l</dt> <dd>go to login</dd>
		<dt>h</dt> <dd>show/hide help</dd>
		<dt>shift + esc</dt> <dd>cancel</dd>
	</dl>
</div>


	<script type="text/javascript">
	/* <![CDATA[ */
		jQuery( document ).ready( function( $ ) {
			function hideComments() {
				$('.commentlist').hide();
				$('.discussion').show();
			}
			function showComments() {
				$('.commentlist').show();
				$('.discussion').hide();
			}
			
			$( "#togglecomments" ).click( function() {
				if ( $( '.commentlist' ).css( 'display' ) == 'none' ) {
					showComments();
				} else {
					hideComments();
				}
				return false;
			});
		});
	/* ]]> */
	</script>
</body>
</html>
