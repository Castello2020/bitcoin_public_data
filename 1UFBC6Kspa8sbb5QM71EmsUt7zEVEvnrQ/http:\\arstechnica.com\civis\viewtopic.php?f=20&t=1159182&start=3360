http://arstechnica.com/civis/viewtopic.php?f=20&t=1159182&start=3360
HTTP/1.1 200 OK
Server: nginx
Date: Thu, 24 Jul 2014 00:40:07 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
Set-Cookie: phpbb3_5qbzr_u=1; expires=Fri, 24-Jul-2015 00:40:07 GMT; path=/; domain=.arstechnica.com; HttpOnly
Set-Cookie: phpbb3_5qbzr_k=; expires=Fri, 24-Jul-2015 00:40:07 GMT; path=/; domain=.arstechnica.com; HttpOnly
Set-Cookie: phpbb3_5qbzr_sid=0ae675ba76497c47ac00fff765b2bd5b; expires=Fri, 24-Jul-2015 00:40:07 GMT; path=/; domain=.arstechnica.com; HttpOnly
Cache-Control: private, no-cache="set-cookie"
Expires: 0
Pragma: no-cache
Content-Encoding: gzip
Vary: Accept-Encoding
X-Ars-Server: web08

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-gb" xml:lang="en-gb">
  <head>
    <title>while (true) { - Ars Technica OpenForum</title>

    <!-- Begin CSS -->
    <link rel="stylesheet" href="//cdn.arstechnica.net/civis/ars/theme/forum.css?v=48" type="text/css" />
    <!--[if IE]>
    <link rel="stylesheet" href="//cdn.arstechnica.net/civis/ars/theme/forum.ie.css?v=2" type="text/css" />
    <![endif] -->
    <!-- End CSS --><!-- Begin Metadata -->
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    
    <meta name="viewport" content="width=device-width" />
    
    <link rel="SHORTCUT ICON" href="//cdn.arstechnica.net/civis/ars/theme/favicon.ico"/>
    <link rel="icon" type="image/vnd.microsoft.icon" href="//cdn.arstechnica.net/civis/ars/theme/favicon.ico" />
    
    <!-- End Metadata -->

    <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-31997-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
      })();

    </script>

    
    <script type="text/javascript" src="//cdn.arstechnica.net/public/shared/scripts/da-1.5.js"></script>
    <script type="text/javascript">
    try {  
      cnp.ad.dart.setSite("ars.dart");
      cnp.ad.dart.setZone('forums_programmer');
      //cnp.ad.dart.addParameterString('');
      cnp.ad.dart.addParameterString('mtfIFPath=/mt-static/plugins/ArsTheme/ad-campaigns/doubleclick/');
      cnp.ad.emptyFrameSrc="/wp-content/themes/arstechnica/assets/html/empty.html";
      cnp.ad.loaderFrameSrc="/wp-content/themes/arstechnica/assets/html/ad-loader-frame.html";
    } catch(e) {}
    </script>
   
    
    <!--[if IE 8]>
      <style type="text/css">
        #message-box textarea {
          min-width: 98%;
          max-width: 98%;
          width: 100px;
        }
      </style>
    <![endif]-->
    <script type="text/javascript" src="//cdn.arstechnica.net/wp-content/themes/arstechnica/assets/js/omniture/mbox.js"></script>
  </head>
  <body id="ars-forum">
    <div id="page">
      
        <div id="daehtsam-da">
            <script type="text/javascript">
              var pbanner_start = new Date();
              try {
                var pbanner = cnp.ad.create(cnp.ad.refreshable, false);
                pbanner.addParameter({'dcopt':'ist'});
                pbanner.addParameterString('kw=forums;');
                pbanner.addParameter({'sz': '728x90' });
              } catch(e) {}
            </script>
        </div>
      
      <div id="page-header">
        <div id="masthead">
          <div id="logo"><a href="./index.php?sid=0ae675ba76497c47ac00fff765b2bd5b"><img src="//cdn.arstechnica.net/civis/ars/theme/images/logo.png" alt="" /></a></div>
          
            <div id="anonymous-panel">
              <div id="anonymous-message">
                <p>Welcome to the Ars OpenForum.</p>
              </div>
              <div id="anonymous-links">
                <ul>
                  <li class="register"><a href="./ucp.php?mode=register&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Register</a></li>
                  <li class="login"><a href="./ucp.php?mode=login&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;autoredirect=1&amp;return_to=%2Fcivis%2Fviewtopic.php%3Ff%3D20%26t%3D1159182%26start%3D3360">Login</a></li>
                </ul>
              </div>
            </div>
          
        </div>
        
        <div id="forum-links"><a href="http://arstechnica.com/old/content/2000/01/postguide.ars">Posting Guidelines</a> | <a href="/mods/">Contact Moderators</a>
        </div>

        
          <div class="breadcrumb-jumpbox">
            <div class="breadcrumb"><a href="http://arstechnica.com/">Ars Technica</a> &gt; <a href="./index.php?sid=0ae675ba76497c47ac00fff765b2bd5b">Forums</a> &gt; <a href="./viewforum.php?f=13&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Operating Systems &amp; Software</a> &gt; <a href="./viewforum.php?f=20&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Programmer's Symposium</a>
</div>
  <div class="jumpbox">
    <form method="get" name="jumpbox" action="./viewforum.php?sid=0ae675ba76497c47ac00fff765b2bd5b" onsubmit="if($('.autosubmit', this).value == -1){return false;}">
      <div>
        <span class="jumptext">Jump to:</span>
        <select class="autosubmit" name="f">
          
            <option value="-1">Select a forum</option>
          <option value="-1">------------------</option>
            <option value="5">Hardware  &amp; Tweaking</option>
          
            <option value="6">&nbsp; &nbsp;Audio/Visual Club</option>
          
            <option value="7">&nbsp; &nbsp;Case and Cooling Fetish</option>
          
            <option value="8">&nbsp; &nbsp;CPU &amp; Motherboard Technologia</option>
          
            <option value="9">&nbsp; &nbsp;Mobile Computing Outpost</option>
          
            <option value="10">&nbsp; &nbsp;Networking Matrix</option>
          
            <option value="11">&nbsp; &nbsp;Other Hardware</option>
          
            <option value="12">&nbsp; &nbsp;Agora Classifieds</option>
          
            <option value="13">Operating Systems &amp; Software</option>
          
            <option value="14">&nbsp; &nbsp;Battlefront</option>
          
            <option value="15">&nbsp; &nbsp;Microsoft OS &amp; Software Colloquium</option>
          
            <option value="16">&nbsp; &nbsp;Linux Kung Fu</option>
          
            <option value="17">&nbsp; &nbsp;Windows Technical Mojo</option>
          
            <option value="18">&nbsp; &nbsp;Distributed Computing Arcana</option>
          
            <option value="19">&nbsp; &nbsp;Macintoshian Achaia</option>
          
            <option value="20" selected="selected">&nbsp; &nbsp;Programmer's Symposium</option>
          
            <option value="21">&nbsp; &nbsp;The Server Room</option>
          
            <option value="1">Ars Lykaion</option>
          
            <option value="22">&nbsp; &nbsp;Gaming, Extra Strength Caplets</option>
          
            <option value="23">&nbsp; &nbsp;The Lounge</option>
          
            <option value="24">&nbsp; &nbsp;The Soap Box</option>
          
            <option value="25">&nbsp; &nbsp;The Boardroom</option>
          
            <option value="26">&nbsp; &nbsp;The Observatory</option>
          
            <option value="3">&nbsp; &nbsp;Ars Help &amp; Feedback</option>
          
            <option value="30">Ars Subscription Member Areas</option>
          
            <option value="38">&nbsp; &nbsp;Image Galleries</option>
          
        </select>
        <input type="submit" value="Go" class="downlevel" />
      </div>
    </form>
  </div>

          </div>
        
      </div>
      <div id="page-body">

<h2 class="title">
  while (true) {
  
</h2>

<div id="top-actionbar" class="actionbar">
  
      <div class="topic-actions">
        <div class="reply-button"><a rel="nofollow" href="./posting.php?mode=reply&amp;f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b"><img src="//cdn.arstechnica.net/civis/ars/imageset/en/button_topic_reply.png" alt="Reply to topic" title="Reply to topic" /></a></div>
        
      </div>
    
    <div class="pager">
      6446 posts â€¢ <a href="./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=3320">Previous</a>&nbsp;&nbsp;<li><a href="http://arstechnica.com/civis/./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">1</a></li><span class="page-dots"> ... </span><li><a href="http://arstechnica.com/civis/./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=3320">84</a></li><li class="selected">85</li><li><a href="http://arstechnica.com/civis/./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=3400">86</a></li><span class="page-dots"> ... </span><li><a href="http://arstechnica.com/civis/./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=6440">162</a></li>&nbsp;&nbsp;<a href="./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=3400">Next</a>
    </div>
  
</div>

<div id="content">

  <table id="p24448325" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=172729&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">ShuggyCoUk</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Londinium</div>
              <div class="post-author-registered">Registered: Nov 14, 2005</div><div class="post-author-postcount">Posts: 6996</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24448325&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24448325">Posted: Wed May 08, 2013 7:33 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Alas though, it's not enough to give you what you want. Unless all comparisons (including operator ==) always spill both operands, you can still be surprised by the opposite case: numbers that compare false at extended precision but compare equal at spilled precision. This creates a no less surprising, no less problematic, case.</div><br /><br /><!-- m --><a class="postlink" href="http://blogs.msdn.com/b/davidnotario/archive/2005/08/08/449092.aspx">http://blogs.msdn.com/b/davidnotario/ar ... 49092.aspx</a><!-- m --><br /><br />It's not that they spill, it's that the act of widening/shrinking, loading is required to be transparent until a calculation actually occurs that writes to the transient value.<br /><br />Thus it doesn't matter until you do a calculation, and if you do an FP calculation of any form in IEEE (or similar) one should never expect results to be stable in the face of compiler/hardware alterations (x87,SIMD flavours,register spilling etc. etc.) so it's a moot point.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24448525" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=25224&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">LordHunter317</a></div>
                <div class="post-author-title">
                  
                  Ars Legatus Legionis
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: MD (Waiting)</div>
              <div class="post-author-registered">Registered: Apr 17, 2001</div><div class="post-author-postcount">Posts: 22394</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24448525&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24448525">Posted: Wed May 08, 2013 8:00 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24448281#p24448281" class="postlink" rel="nofollow">Richard Berg</a> wrote:</div><div class="quotecontent">I would argue the other direction: any function on FP types that fails to specify rounding (either explicitly or as an architectural side effect) is not a pure function.<br /><br />Anyone doing &quot;serious&quot; FP math should know this instinctually, if not have it baked into their compute framework.</div>Sure.  Which is why baking in other behaviors is quite objectionable.  It creates pitfalls for those who don't know what they're doing with very dubious benefit.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It's entirely possible -- likely, even -- to write apps that display FP values without needing a single IEEE operator.</div>I'll agree it's possible but I don't agree it's all that commmon.  I wouldn't mind being proven wrong on that point, but no one's really produced anything along those lines.  Few people are writing databases from scratch.  Few people are writing custom GUI widgets that need sorting.<br /><br />Certainly here, I'm more likely to believe given some random bit of code that attempts to leverage thse behaviors is incorrect then to believe it's really necessary and was done on purpose.  People who write FP code and know what they're doing regularly screw this stuff up too.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why do you consider that an impossible (or even unlikely) bar to meet?</div>I don't consider it impossible, but I do consider it a pitfall.  There's a serious judgement to be made here: are the valid usages of providing functionality that's known to trip up and confuse programmers, runs counter to the governing standard, and creates additional complicated rules about how the type must be used (== and Equals() aren't equivalent), large enough to justify all that badness?  It's certainly possible for the answer to be true, but it's a big hill to climb.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Consider Meta's example of UI controls that want generic yet predictable sorting.</div>I noted double isn't the only problem here, you either want a sort algorithm that manages to do the right thing somehow, or provide the ability for custom sorting.  You don't have a choice, here.  Regardles, I don't believe that need justifies Equals(), but it might justify a static method with special semantics and higher-order function support in your language.<br /><br />Just because I'm willing to bend the rules in one situation doesn't mean I'm willing to bend them in all.  The latter is the more flexible, superior choice.  I get the ability to contain where I'm using unusual semantics without permamently imbuing my type with the ununusal behavior.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But unlike some, I realize that my design choices are not your design choices, and neither need be &quot;wrong&quot; in some Platonic sense.</div>Sure, but the argument made for the other design choice is completely and utterly non-compelling.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24448597" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=172729&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">ShuggyCoUk</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Londinium</div>
              <div class="post-author-registered">Registered: Nov 14, 2005</div><div class="post-author-postcount">Posts: 6996</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24448597&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24448597">Posted: Wed May 08, 2013 8:12 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Value equality means I can compute the same value elsewhere and then use it as the key, and get back the entry in the map I desire. Unfortunately, doing that for doubles is quite tricky, without doing something to the keys to ensure I can reliably produce the same value. Almost always, that means explicitly rounding them.</div><br /><br />You seem to be fixating on equality, which in some ways is sensible, equality is far and away the harder problem, that people are likely to screw up.<br />What about *total ordering*<br /><br />IEEE does not have those semantics, thus anything that wants to make use of IComparable&lt;T&gt; to implement an efficient, generalised data structure either:<br /><br />* double/single do not implement IComparable<br />&gt; The author of the class may not place a constraint on &lt;T&gt; to implement IComparable, (though may jump through hoops to always use static methods rather than constructors which do this for non FPtypes) Has to always supply (specifically to double/single) <br />They then supply a separate comparator any time they use doubles, as well as separate overloads for those types.<br />Idiots may choose to instead throw a runtime exception for attempting to use an unsupported class I will ignore them.<br /><br />* double/single does implement IComparable, but with IEE semantics<br />&gt; Many data structures will not be tolerant of this behaviour, with nasty, and hard to diagnose bugs as a result<br /><br />* double/single does implement IComparable, with conventional .Net semantics of a total ordering<br />&gt; Life is easier for many people, though for some it is confusing that (&gt;=,&lt;=) do not agree.<br /><br />* double/single does not implement IComparable, There is some alternate type (StableDouble/StableSingle say) with conventional .Net semantics of a total ordering<br />(assumed explicit conversions exist between them, if you go implicit then providing overloads for one or the other becomes a potential source of bugs, especially given that operator selection is determined by the left hand side of an operand, not the right but there may well be a significant difference if behaviour if you mix)<br />&gt; Life is much more confusing for lots of people, but it does have a certain purity. c# code ends up with lots of cast operations to keep it &quot;do what I say, not what I mean&quot; People get upset at MS for making c# &quot;harder&quot;<br /><br />You could argue that the first option is 'cleaner' for the end users in some way (though losing constructor semantics is a bit of a PITA), but it is undoubtedly more work, and you must implement. <br /><br />Personally I'm not a fan of anything making more work for me given that people who have issues with FP, because they don't understand FP properly, will *always* be a problem.<br /><br />That said you could legitimately argue that .Net might have been sensible to make decimal the default literal type for FP, as well as other techniques to encourage most people to use them by default. That might cause me some pain (like I said, FP is my way of getting some neat, if complex, serious hardware acceleration).<br /><br />I'm all ears for indications of languages that get this balance right. Genuinely, none of the ones I use day to day get it completely right, even from a personal point of view of &quot;does what I want internally consistently&quot; (this is w.r.t the hashcode madness in .Net world for example)<br /><br />Python keeps IEEE semantics for ordering AFAICT (so attempting to sort with nan will result in garbage), but max/min don't seem to follow the IEEE-754r rules (I admit those are recent rules).

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452031" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=41965&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Metasyntactic</a></div>
                <div class="post-author-title">
                  
                  Moderator
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 8, 2003</div><div class="post-author-postcount">Posts: 31210</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452031&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452031">Posted: Wed May 08, 2013 1:28 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24447901#p24447901" class="postlink" rel="nofollow">LordHunter317</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24445253#p24445253" class="postlink" rel="nofollow">Metasyntactic</a> wrote:</div><div class="quotecontent">.Equals for a Double/Single references the value through a storage location.</div>So <span style="font-style: italic">both</span> values will be spilled, always?  I would like to see actual documentation on that, and on what &quot;storage location&quot; actually means.<br /></div><br />A field of a class or struct counts as a storage location (the latter has to, otherwise the struct could not have a fixed size, which would pretty much destroy the world).  .Equals on two System.Doubles will thus read the double value out of each.  Since the double, in this case we're discussing, is the same double, we'll get the read of the same value.  That value may or may not be widened (one or both may be), but the widening is required to preserve value, ensuring that testing the value against the other will always work. <br /><br />Note, this behavior is required by the actual spec and is called out.  No conformant CLI implementation can break this: &quot;[Note: Although two floating point NaNs are defined by IEC 60559:1989 to always compare as unequal, the contract for System.Object.Equals requires that overrides must satisfy the requirements for an equivalence operator.&quot;<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Alas though, it's not enough to give you what you want.  Unless all comparisons (including operator ==) always spill both operands, you can still be surprised by the opposite case: numbers that compare false at extended precision but compare equal at spilled precision.  This creates a no less surprising, no less problematic, case.  <br /></div><br />Again, i understand that if i mix IEEE and .Net semantics that i will get different semantics.  I agree that this may be suprising.  But i'm not seeing how it's problematic.  If i want IEEE semantics i will stick with IEEE operators.  If i want .Net semantics, i will stick with .Net operators.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Any code that wants those semantics can have those semantics *trivially*.</div>You're missing the point.  Having those semantics means your interface methods can't do what they want. <br /></div><br />Why not?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> They would have to provide additional guarantees, and you'd still have lots of issues.  <br /></div><br />What additional guarantees?  What issues?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't even know what your issue is with this.  They have different rounding modes by default.  Just as in many other languages.  And this is... undesirable?</div>It's one more example of why trying to treat FP types as any other type is silly, which is the entire point of providing an Equals() method.  They're just too different from all the other types.<br /></div><br />They're close enough that i am able to get the behavior i want (FP semantics, reflexive equality, strict weak ordering) with little effort.  Treating them like normal .Net objects, and normal strict weakly comparable objects seems utterly reasonable.  Maybe not in LH land.  But we have never wanted a language/platform with such strict ideology.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why?  If i'm processing a list of something, and i want to use those list items as keys in a dictionary, then why do i need to be cognizant of what the key type is?</div>Because most people don't say they want &quot;value equality&quot; when they actually want &quot;reference equality&quot;.  Value equality means I can compute the same value elsewhere and then use it as the key,<br /></div><br />That's not what it means at all.  I already provided links for what value equality means *and* i quoted from it.  Value equality has a very specific meaning for .Net.<br /><br />Note: if i *do* compute the &quot;same value&quot; elsewhere and then use it as a key, then it will work in .Net. The tricky part is trying to ensure that you're actually computing the &quot;same value&quot;.  That said, there are many sorts of things i may do that ensure that the &quot;same value&quot; will be computed.<br /><br />For example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp;static double&#91;&#93; numbers = { whatever, i, want };<br />&nbsp; &nbsp; &nbsp;static computeSomething(int index) { return numbers&#91;index&#93;; }<br /></div><br />This will always produce the &quot;same value&quot; on any given input due to CLI requirements.  Now, if i do any sort of additional IEEE computation on the values, then i may no longer have the &quot;same value&quot;.  But as there are lots of times when i'm working with arbitrary values and *not* mutating them, it's handy to have these value type properties.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why not?</div>Because recomputing the exact same double is extremely tricky and difficult.<br /></div><br />But i'm not &quot;recomputing the same double&quot;.  Did you not read what i wrote?  I explicitly said that i commonly do work that has a bunch  of computation up front, and then *no more computation afterwards*.  At that point, thanks to the rules around FP, i can use these values like other normal .Net types, and not have to worry.  <br /><br />For example, i may do a bunch of statistical work on my codebase, computing lots of things about it.  However, once all the data is computed, i won't be changing the numbers at all.  I can then put those numbers in any sort of *generic* structure (like a table) and take advantage of their comparable nature, without having to worry about the *generic* structure needing to have special code to handle FP numbers. <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">  It's not something the language promises is possible, even if you retrace the exact same path!<br /></div><br />You are discussing something else entirely.  You are talking about providing a system that is guarantees to produce the same set of results for a given sequence of instructions.  I've never made any claims about that (either wanting it, or stating that .Net could/couldn't do it).  <br /><br />As a small tangential point, i will mention that .Net can do this if you want it (and some libraries do it).  It's just arduous as it requires explicitly narrowing at all stages of computation to ensure reproducibility.  Now, why you care about reproducibility is beyond me.  It's not something i care about or expect .Net to provide.  <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Value equality says nothing about always returning the same result for a computation.</div>Sure, OK.  But value equality is essentially useless without this guarantee.<br /></div><br />No it isn't.  There are lots of times when i produce values *and i hold onto those values*.  I don't need to produce them again.  I am simply working with (and not changing the value of) the values i've already computed.<br /><br />It's not &quot;essentially useless&quot;.  It fits entirely into a very common pattern in all sorts of apps.  Namely: compute, then present.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Reflexivity is a meaningless property if I can never produce the same value.<br /></div><br />It may be for *you* LH, but it certainly isn't for *me*.  And it certainly isn't for lots of people who do things like write algorithms and whatnot that work with equatable or weakly comparable values.  For example, my sorting algorithms can be simpler because they can assume that two values will always either be &gt;=, ==, or &lt;=, and will never change at a future point. <br /><br />In this case, i'm doing something useful, and i'm taking advantage of the properties on FP numbers that .Net provides through these methods.  So it's absolutely *not* &quot;essentially useless&quot;.<br /><br />My sort routine won't be producing the values again through some form of computation.   It will be using the values it was provided with.  <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You seem to be discussing the desire for a set of computation steps produce the same results.  However, that has never been a goal, nor has that ever been discussed here.  What has been discussed is the reflexive property, and that property has to do with comparing a value to *itself* not to another value produced by some computation.</div>Reflexivity is only meaningful if I can <span style="font-style: italic">compare two distinct objects</span><br /></div><br />WTF?  No, it isn't.  That's absolutely *not* the case.  The reflexive property is defined as: &quot;x.Equals(x) returns true. This is called the reflexive property.&quot;   I'm not comparing two distinct objects, i'm comparing the *same* object.  You may be thinking of hte symmetric or transitive properties (which refer to *distinct* objects).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I have no idea why you think i said otherwise.</div>I don't, I just don't think you're remotely aware of the consequences of your statements, or why they're useless for practical applications.<br /></div><br />What are the consequences of my statements.  Why are htey useless for practical applications?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">No it doesn't.  You seem to think that all a person will do with an FP type is run computations on it.  I may do that at some stage in my algorithm, but then later use those values for a *different purpose*, for example, placing them in a dictionary that maps from those computed values to something else.</div>But you can't do that.  You can't do <span style="font-weight: bold">any computation at all.</span> <br /></div><br />Are you not reading?  I literally said that i wasn't doing computation afterwards.  &quot;You seem to think that all a person will do with an FP type is run computations on it.  I may do that at some stage in my algorithm, but then later use those values for a *different purpose*&quot;.  *Different* implied that it was no longer computations i'm doing.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I may have these values in all sorts of places, and i may no longer be computing with them.  And, as i'm not computing on them, i would like 'a' to still equal 'a' and to behave that way in the rest of my program.  Yes, if i then do some sort of computation on 'a', then i might not have 'a' anymore.</div>You might not have 'a' twice in the first place simply because you did two computations[1]!  <br /></div><br />But i didn't do two computations!  That's why i have 'a' and 'a', not 'a' and 'b'.  If i do a computation then i have a *new* value.  The reason i have 'a' and 'a' is that i did not perform any computation.  That's why they're both called *a*.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> But the same is true of any value type. that's why they're immutable. When you do computations on them you get *new* value types.</div>Most value types don't have the property that calling the same pure function twice can result in two different values!<br /><br />[1] Or because one was computed and one was a literal, a hole that .NET doesn't even attempt to close.</div>Then i'm comparing *a* to *b*, not *a* to *a*.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452209" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=41965&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Metasyntactic</a></div>
                <div class="post-author-title">
                  
                  Moderator
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 8, 2003</div><div class="post-author-postcount">Posts: 31210</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452209&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452209">Posted: Wed May 08, 2013 1:44 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24448525#p24448525" class="postlink" rel="nofollow">LordHunter317</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24448281#p24448281" class="postlink" rel="nofollow">Richard Berg</a> wrote:</div><div class="quotecontent">I would argue the other direction: any function on FP types that fails to specify rounding (either explicitly or as an architectural side effect) is not a pure function.<br /><br />Anyone doing &quot;serious&quot; FP math should know this instinctually, if not have it baked into their compute framework.</div>Sure.  Which is why baking in other behaviors is quite objectionable.  It creates pitfalls for those who don't know what they're doing with very dubious benefit.<br /></div><br />Your belief that i is dubious is in no way consensus.  I, for example, *love* that i can just sort a list of doubles and not have to worry about the unordered nature of an IEEE NaN.  I can project the IEEE view onto a view that is slightly more constrained (i.e. no unordered values) and can then interoperate with a wealth of .Net libraries (for example, Linq) without having to write any special code.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It's entirely possible -- likely, even -- to write apps that display FP values without needing a single IEEE operator.</div>I'll agree it's possible but I don't agree it's all that commmon. <br /></div><br />This was always commented on.  Being &quot;common&quot; is not a requirement here.  By default, values should behave with .net semantics.  There would need to be a *very* good reason to not do that.  And, so far, the reasons for double values not having the reflexive property have not been good enough to justify it.  <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I wouldn't mind being proven wrong on that point,<br /></div><br />It's not a proof.  It's a judgement call.  There is no wrong approach here.  As mentioned there were a variety of possible, mostly equivalent, options.  Including:<br />1) having two entirely separate types.<br />2) only having IEEE semantics.  users would have to provide their own wrapper if htey wanted.<br />3) only have .Net semantics. users would have to provide their own wrapper if htey wanted.<br />4) having a single type with multiple semantics offered.<br />5) etc.<br /><br />There is no proof that any are right or wrong.  They're just different approaches that could be taken to allow FB values to be used in both worlds effectively.  Heck, you may not even think that that's a desirable goal.  And if that's the case, then that's that.  You seem to be confused that this is a dicussion trying to convince you to like the .Net approach.  It's not.  the discussion is simply to clear up inaccuracies and misconceptions that may exist.  For example, your incorrect understanding of how .Net actually works.  So, i'll often correct you when you make factually incorrect statements.  But, on the other hand, i do not give a rats ass if you like or accept that .Net FP types try to bridge beween IEEE and .Net semantics.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why do you consider that an impossible (or even unlikely) bar to meet?</div>I don't consider it impossible, but I do consider it a pitfall.  There's a serious judgement to be made here: are the valid usages of providing functionality that's known to trip up and confuse programmers, runs counter to the governing standard, and creates additional complicated rules about how the type must be used (== and Equals() aren't equivalent), large enough to justify all that badness?  It's certainly possible for the answer to be true, but it's a big hill to climb.<br /></div><br />And that explicit decision was made.  Because the benefits were precisely viewed to be worth it.  For example, it was felt to be a large benefit that it was automatically a bug for any type to not be reflexive.  You may consider this not worth it, but at the end of the day, you've admitted that this is ultimately a *subjective* decision.  You stated &quot;it's a big hill to climb&quot;, and htat means you recognize that the hill is climbable and that if the hill was climbed then it should be done.<br /><br />That's precisely what happened here.  The options were weighed, and this one won out (certainly not unanimously).  At the end of the day you may have weighted things differently and disagreed with the outcome, but who cared?  If you want a language/platform that does everything maximally as you weight them *then write it yourself*.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Consider Meta's example of UI controls that want generic yet predictable sorting.</div>I noted double isn't the only problem here, you either want a sort algorithm that manages to do the right thing somehow, or provide the ability for custom sorting.  You don't have a choice, here.  Regardles, I don't believe that need justifies Equals(), but it might justify a static method with special semantics and higher-order function support in your language.<br /></div><br />You've now found justification for such semantics to be provided.  So your issue is now that they're provided through the stock .Equals method?  Why?<br /><br />It's especially bizarre as you apparently then want .Equals on a double to *not* behave as it is spec'ed to behave.  Your life makes things worse for many developers writing generic algorithms because now they have to deal with  *one* single type in the *entire universe of .net types*, behaving differently. <br /><br />Your proposal was one of the ones considered.  Purists wanted things to go that way.  But it was felt to be too onerous and so it was beaten by the *semantically equivalent* approach that placed less burden on both library writers and users.<br /><br />This decision was also made with lots of input from those in the field who were producing FP libraries and who wanted to work well with .Net.  Their opinion, overall, was that this was ok.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Just because I'm willing to bend the rules in one situation doesn't mean I'm willing to bend them in all.  The latter is the more flexible, superior choice.<br /></div><br />In your *opinion*.  <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Sure, but the argument made for the other design choice is completely and utterly non-compelling.</div></div><br />In your *opinion*. <br /><br />It's not the .LH framework.  It's the .Net framework.  And the opinions of many others *who don't share the same platonic ideals as you* was part of it.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452283" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=41965&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Metasyntactic</a></div>
                <div class="post-author-title">
                  
                  Moderator
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 8, 2003</div><div class="post-author-postcount">Posts: 31210</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452283&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452283">Posted: Wed May 08, 2013 1:52 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24448597#p24448597" class="postlink" rel="nofollow">ShuggyCoUk</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Value equality means I can compute the same value elsewhere and then use it as the key, and get back the entry in the map I desire. Unfortunately, doing that for doubles is quite tricky, without doing something to the keys to ensure I can reliably produce the same value. Almost always, that means explicitly rounding them.</div><br /><br />You seem to be fixating on equality, which in some ways is sensible, equality is far and away the harder problem, that people are likely to screw up.<br />What about *total ordering*<br /><br />IEEE does not have those semantics, thus anything that wants to make use of IComparable&lt;T&gt; to implement an efficient, generalised data structure either:<br /><br />* double/single do not implement IComparable<br />&gt; The author of the class may not place a constraint on &lt;T&gt; to implement IComparable, (though may jump through hoops to always use static methods rather than constructors which do this for non FPtypes) Has to always supply (specifically to double/single) <br />They then supply a separate comparator any time they use doubles, as well as separate overloads for those types.<br />Idiots may choose to instead throw a runtime exception for attempting to use an unsupported class I will ignore them.<br /><br />* double/single does implement IComparable, but with IEE semantics<br />&gt; Many data structures will not be tolerant of this behaviour, with nasty, and hard to diagnose bugs as a result<br /></div><br />This actually was an issue at some point with people screwing up their own implementations of IComparable.  It could lead to some very bad behavior (including infinite loops in sorting algorithms).  Now, many .Net algorithms even try to detect 'badly behaving' IComparables, in order to tell users to fix their impl to match the requirements of the API.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">* double/single does implement IComparable, with conventional .Net semantics of a total ordering<br />&gt; Life is easier for many people, though for some it is confusing that (&gt;=,&lt;=) do not agree.<br /></div><br />Do you mean &gt;=, =&lt; do not agree with CompareTo?  Or that CompareTo(a, b) does not agree with -CompareTo(b, a)?<br /><br />The latter should always be true.  If you were specifically referring to the operators, and them agreeing with themselves, then i agree with you.  Though i think we get that confusion no matter what.  I can't remember how many times i've had to teach (when i was in college, and the langauges were C/C++/java/haskell) that NaN was not ordered and that NaN didn't equal NaN by IEEE semantics.  It was always very surprising for students the first time they encountered this, and it had to be one of those &quot;yup.  you have a case where 'a == a' will be false&quot;.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">* double/single does not implement IComparable, There is some alternate type (StableDouble/StableSingle say) with conventional .Net semantics of a total ordering<br />(assumed explicit conversions exist between them, if you go implicit then providing overloads for one or the other becomes a potential source of bugs, especially given that operator selection is determined by the left hand side of an operand, not the right but there may well be a significant difference if behaviour if you mix)<br />&gt; Life is much more confusing for lots of people, but it does have a certain purity. c# code ends up with lots of cast operations to keep it &quot;do what I say, not what I mean&quot; People get upset at MS for making c# &quot;harder&quot;<br /><br />You could argue that the first option is 'cleaner' for the end users in some way (though losing constructor semantics is a bit of a PITA), but it is undoubtedly more work, and you must implement. <br /><br />Personally I'm not a fan of anything making more work for me given that people who have issues with FP, because they don't understand FP properly, will *always* be a problem.<br /><br />That said you could legitimately argue that .Net might have been sensible to make decimal the default literal type for FP, as well as other techniques to encourage most people to use them by default. That might cause me some pain (like I said, FP is my way of getting some neat, if complex, serious hardware acceleration).<br /></div><br />Yup.  There is also convention and history to consider.  C# doesn't live in a vacuum.  It has a long lineage that leads up to it, and that lineage strongly (though not absolutely) influences how it has been designed.  That lineage won out here.  Though i do wonder if we were to do a new language, if we would do the same thing again.  My answer would be probably yes.  The issues with FP being the default have simply been so minor as to not justify switching away from them and breaking with developer expectation.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452317" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=41965&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Metasyntactic</a></div>
                <div class="post-author-title">
                  
                  Moderator
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 8, 2003</div><div class="post-author-postcount">Posts: 31210</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452317&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452317">Posted: Wed May 08, 2013 1:55 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm all ears for indications of languages that get this balance right. </div><br />I don't think this is even possible, unless the language is very limited in terms of the types of developers that use it.  For example, if you community purely does nothing but FP computation, is incredibly strict and vigilant about NaNs, and never wants things like strict weak ordering, then yes, i think you could provide an option that works for them.  However, the moment you reach the millions of developers point, with many different *large* groups of styles and needs, there is no way to do it &quot;right&quot;.  After all, i know for a fact that LH isn't alone in his views on FP.  But trying to appease the group he is in, and the other groups isn't (afaict) possible.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452367" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=7952&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Faramir</a></div>
                <div class="post-author-title">
                  
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Apr 24, 2000</div><div class="post-author-postcount">Posts: 25230</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452367&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452367">Posted: Wed May 08, 2013 1:59 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              This discussion is getting tedious to read. It's clear to me that the <span style="font-style: italic">de facto</span> default data type for real numbers shouldn't have been floating points with all their tricky issues. But Microsoft wanted to write a c-like language in order to try to convince people to switch from c++ and java and to a lesser extent from c. And they wanted the language to look good in speed and memory footprint shootouts. So floats and doubles it was. Once that decision was made, they couldn't exactly have a core datatype not work with all the shiny toys they introduced to convince people to switch to c# in the first place. <br /><br />It was an impure but pragmatic decision. All of us have made them. All of us sometimes regret them.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452581" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=41965&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Metasyntactic</a></div>
                <div class="post-author-title">
                  
                  Moderator
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 8, 2003</div><div class="post-author-postcount">Posts: 31210</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452581&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452581">Posted: Wed May 08, 2013 2:17 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It was an impure but pragmatic decision. All of us have made them. All of us sometimes regret them.</div><br />In this case, the only i can think that's regretful is that GetHashCode is inconsistent with the contract of .Equals, and the bug with the unit testing library.  I'm working on getting both addressed.<br /><br />The decision on hte design of Double/Single seems completely reasonable to me and not something to regret.  I absolutely think it was a pragmatic decision, and the end result (module pure bugs unrelated to the decision) has seemed to serve the community well.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452623" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=41965&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Metasyntactic</a></div>
                <div class="post-author-title">
                  
                  Moderator
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 8, 2003</div><div class="post-author-postcount">Posts: 31210</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452623&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452623">Posted: Wed May 08, 2013 2:21 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> But Microsoft wanted to write a c-like language in order to try to convince people to switch from c++ and java and to a lesser extent from c. </div><br />Just, as a point of fact, people switching languages isn't something that has gone into the design.  The goal is to make a language that people can *add* easily to their repertoire, not switch to away from something else.  To that end, it's par for the course for the language to borrow and reuse the parts of other languages that are familiar, fit with the overall language, and aren't felt to be broken or bad enough to warrant fixing or excluding.<br /><br />Javascript, for example, could be argued to be ideologically 'pure' by just have IEEE FP numbers.  But man is it a PITA to use a lot of the time when i work with it.  Sometimes compromise and pragmatism lead to *better* results, and it's when you're ideological that you end up regretting what you've done.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452813" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=7952&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Faramir</a></div>
                <div class="post-author-title">
                  
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Apr 24, 2000</div><div class="post-author-postcount">Posts: 25230</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452813&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452813">Posted: Wed May 08, 2013 2:36 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24452581#p24452581" class="postlink" rel="nofollow">Metasyntactic</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It was an impure but pragmatic decision. All of us have made them. All of us sometimes regret them.</div><br />In this case, the only [sic] i [sic] can think that's regretful is that GetHashCode is inconsistent with the contract of .Equals, and the bug with the unit testing library.  I'm working on getting both addressed.<br /><br />The decision on hte [sic] design of Double/Single seems completely reasonable to me and not something to regret.  I absolutely think it was a pragmatic decision, and the end result (module pure bugs unrelated to the decision) has seemed to serve the community well.</div><br />Of course not. No one that's been paying attention ever expected you to concede a fundamental mistake in the design.<br /><br />You've made your arguments, he's made his. Why not leave it to the reader to decide now?

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452989" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=7510&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">CanSpice</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: GO CANUCKS GO</div>
              <div class="post-author-registered">Registered: Jan 14, 2000</div><div class="post-author-postcount">Posts: 6626</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452989&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452989">Posted: Wed May 08, 2013 2:51 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24452367#p24452367" class="postlink" rel="nofollow">Faramir</a> wrote:</div><div class="quotecontent">This discussion is getting tedious to read.</div><br />It was tedious a week ago. My scrollwheel is getting a workout.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24452995" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=2199&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Richard Berg</a></div>
                <div class="post-author-title">
                  "Eruditio et Basketballio"<br />
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Harlem</div>
              <div class="post-author-registered">Registered: Aug 6, 1999</div><div class="post-author-postcount">Posts: 36589</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24452995&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24452995">Posted: Wed May 08, 2013 2:52 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'll agree it's possible but I don't agree it's all that commmon.  I wouldn't mind being proven wrong on that point, but no one's really produced anything along those lines.  Few people are writing databases from scratch.  Few people are writing custom GUI widgets that need sorting.</div><br />The latter two sentences actually support my argument.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"># data access layer<br />obesity_query = MyRdb.censusTable.GroupBy( p -&gt; new {p.state, p.city}, p -&gt; AVG(p.weight / p.height) )<br />m_obesity_cache = new Lazy&lt;Dictionary&gt;( () -&gt; obesity_query.ToDictionary() )<br /><br /># front end<br />state = UserInput(...)<br />printf( &quot;Fattest city in %s is %s&quot;, <br />&nbsp; state,<br />&nbsp; CensusStats.Obesity&#91;state&#93;.Max(r -&gt; r.bmi).city )<br /></div><br />We rely on the database to give us numerically stable adds &amp; divides, and to return the values at some well-spec'd precision.  .Net math operators are equally capable of IEEE compliant calculation, of course.  Just pointing out that the &quot;fetch external computations&quot; pattern is widespread, for the precise reason (most people use off the shelf RDBMS) you claimed they were rare. <br /><br />We could do the non-IEEE comparisons (implied by Max) inside the DB too, clearly, but we're not forced to do so; the framework gives us consistent tools to do relational stuff either way. It would suck if we had to pass in special overrides to get sane behavior from Linq2Objects that aren't necessary (and indeed, might need to be ripped out) if backed by a different IQueryable provider.  Likewise if we simply moved an operator from the front-end to another tier.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24453279" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=121371&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">dlp</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Militum
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 29, 2005</div><div class="post-author-postcount">Posts: 2073</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24453279&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24453279">Posted: Wed May 08, 2013 3:19 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              It's no fun when the customer doesn't even acknowledge your deployment.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24453311" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=41965&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Metasyntactic</a></div>
                <div class="post-author-title">
                  
                  Moderator
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 8, 2003</div><div class="post-author-postcount">Posts: 31210</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24453311&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24453311">Posted: Wed May 08, 2013 3:22 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24452813#p24452813" class="postlink" rel="nofollow">Faramir</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24452581#p24452581" class="postlink" rel="nofollow">Metasyntactic</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It was an impure but pragmatic decision. All of us have made them. All of us sometimes regret them.</div><br />In this case, the only [sic] i [sic] can think that's regretful is that GetHashCode is inconsistent with the contract of .Equals, and the bug with the unit testing library.  I'm working on getting both addressed.<br /><br />The decision on hte [sic] design of Double/Single seems completely reasonable to me and not something to regret.  I absolutely think it was a pragmatic decision, and the end result (module pure bugs unrelated to the decision) has seemed to serve the community well.</div><br />Of course not. No one that's been paying attention ever expected you to concede a fundamental mistake in the design.<br /></div><br />What 'fundamental mistake' are you referring to?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You've made your arguments, he's made his. Why not leave it to the reader to decide now?</div><br />As mentioned already, i was not arguing.  I was only providing information into the decision making process, as well as correcting factually inaccurate statements (for example, when someone said something was impossible that was possible).  My goal has never been to 'convince' as 'convincing' isn't relevant to me.  Furthermore as to 'Why not leave it to the reader to decide now?': if a reader wants to participate, they are welcome to and i will converse with them.  I have no interest in them 'deciding' anything.  I didn't set out to 'convince' people of anything, or make them 'decide' anything.  I've only been trying to correct false information and to explain the thoughts and criteria that have gone into language/platform design.<br /><br />The former is simply because i really dislike when false information is spread.  It's infectious and just leads to confusion.  The latter is because the topic of 'why' certain decisions are made is of particular interest to me.  I hunted this one down and i thought the reasoning behind this decision and the factors that were balanced out were particularly interesting.  For anyone that wants to design a system, but wants to integrate with another, well known and well used set of standards, that don't exactly map onto your own system's baked in semantics, this can provide insight on the ways to approach the problem.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24453521" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=12350&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Alamout</a></div>
                <div class="post-author-title">
                  
                  Ars Legatus Legionis
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: s/(?&lt;=Bay) State/ Area/</div>
              <div class="post-author-registered">Registered: Aug 12, 2000</div><div class="post-author-postcount">Posts: 20989</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24453521&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24453521">Posted: Wed May 08, 2013 3:46 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As mentioned already, i was not arguing.</div><br /><a href="http://vimeo.com/25921512" class="postlink" rel="nofollow">This is just contradiction!</a>

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24456309" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=158602&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">SituationSoap</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Grand Rapids MI</div>
              <div class="post-author-registered">Registered: Jun 28, 2008</div><div class="post-author-postcount">Posts: 9848</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24456309&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24456309">Posted: Thu May 09, 2013 6:44 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24453279#p24453279" class="postlink" rel="nofollow">dlp</a> wrote:</div><div class="quotecontent">It's no fun when the customer doesn't even acknowledge your deployment.</div><br /><br />Is it even worse when your post in the miscellaneous thread about the customer not acknowledging you also goes unacknowledged?  <img src="//cdn.arstechnica.net/civis/images/smilies/wink.png" alt=";)" title="Wink" />

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24456421" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=41553&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">wallinbl</a></div>
                <div class="post-author-title">
                  
                  Ars Praefectus
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Dec 6, 2001</div><div class="post-author-postcount">Posts: 5006</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24456421&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24456421">Posted: Thu May 09, 2013 7:01 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24456309#p24456309" class="postlink" rel="nofollow">SituationSoap</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24453279#p24453279" class="postlink" rel="nofollow">dlp</a> wrote:</div><div class="quotecontent">It's no fun when the customer doesn't even acknowledge your deployment.</div><br /><br />Is it even worse when your post in the miscellaneous thread about the customer not acknowledging you also goes unacknowledged?  <img src="//cdn.arstechnica.net/civis/images/smilies/wink.png" alt=";)" title="Wink" /></div><br />Presumably, it was expected that it would be lost in the sea of pedantry over floats.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24456611" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=40353&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Ardax</a></div>
                <div class="post-author-title">
                  
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 26, 2002</div><div class="post-author-postcount">Posts: 10429</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24456611&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24456611">Posted: Thu May 09, 2013 7:31 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              It sunk as a rounding error.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24456821" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=10463&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Nazgutek</a></div>
                <div class="post-author-title">
                  
                  Ars Praetorian
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: 1UFBC6Kspa8sbb5QM71EmsUt7zEVEvnrQ</div>
              <div class="post-author-registered">Registered: Feb 19, 2001</div><div class="post-author-postcount">Posts: 499</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24456821&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24456821">Posted: Thu May 09, 2013 8:02 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              The assert didn't catch your post because it was NaN

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24457877" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=121371&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">dlp</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Militum
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 29, 2005</div><div class="post-author-postcount">Posts: 2073</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24457877&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24457877">Posted: Thu May 09, 2013 10:08 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              Shoulda used === instead of .equals.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24464407" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=40353&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Ardax</a></div>
                <div class="post-author-title">
                  
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 26, 2002</div><div class="post-author-postcount">Posts: 10429</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24464407&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24464407">Posted: Fri May 10, 2013 6:36 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              TIL that one of the other developer groups is having performance problems with their document storage... all 40 TB of it.<br /><br />Now, I know that's not exactly &quot;big storage&quot; for some of you guys, but considering that their dev tools are from the mid-90s (Delphi 3 anyone?), I'm more than a little curious to see just WTF they're doing.<br /><br />My manager offered us up to assist if they want.  We'll see what happens.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24466231" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=4495&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Agathos</a></div>
                <div class="post-author-title">
                  "That's Dr. Agathos to you."<br />
                  Ars Praefectus
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Chicago, IL, US</div>
              <div class="post-author-registered">Registered: Mar 18, 1999</div><div class="post-author-postcount">Posts: 3138</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24466231&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24466231">Posted: Fri May 10, 2013 10:13 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              Looking at some Python code that's so ugly, it wraps around and becomes beautiful again.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24467575" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=158602&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">SituationSoap</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Grand Rapids MI</div>
              <div class="post-author-registered">Registered: Jun 28, 2008</div><div class="post-author-postcount">Posts: 9848</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24467575&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24467575">Posted: Fri May 10, 2013 12:00 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              I suddenly realized that with the advent of asm.js, the only thing stopping the world from creating a version of Java that runs natively in the browser is the lack of a JVM that compiles to Javascript. Who needs ExtJS when you can just write Swing and be done with it?

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24468547" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=43669&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">koala</a></div>
                <div class="post-author-title">
                  
                  Ars Praefectus
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Barcelona, Spain</div>
              <div class="post-author-registered">Registered: Dec 31, 2001</div><div class="post-author-postcount">Posts: 4017</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24468547&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24468547">Posted: Fri May 10, 2013 1:26 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24467575#p24467575" class="postlink" rel="nofollow">SituationSoap</a> wrote:</div><div class="quotecontent">I suddenly realized that with the advent of asm.js, the only thing stopping the world from creating a version of Java that runs natively in the browser is the lack of a JVM that compiles to Javascript. Who needs ExtJS when you can just write Swing and be done with it?</div><br /><br />LLVM has a .class -&gt; LLVM bytecode thingie ( <!-- m --><a class="postlink" href="https://llvm.org/svn/llvm-project/java/trunk/docs/java-frontend.txt">https://llvm.org/svn/llvm-project/java/ ... ontend.txt</a><!-- m --> ), you might be able to combine that with emscripten (LLVM -&gt; JS).<br /><br />But really, if you want to do that, dude... Dart.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24468623" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=158602&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">SituationSoap</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Grand Rapids MI</div>
              <div class="post-author-registered">Registered: Jun 28, 2008</div><div class="post-author-postcount">Posts: 9848</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24468623&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24468623">Posted: Fri May 10, 2013 1:32 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24468547#p24468547" class="postlink" rel="nofollow">koala</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24467575#p24467575" class="postlink" rel="nofollow">SituationSoap</a> wrote:</div><div class="quotecontent">I suddenly realized that with the advent of asm.js, the only thing stopping the world from creating a version of Java that runs natively in the browser is the lack of a JVM that compiles to Javascript. Who needs ExtJS when you can just write Swing and be done with it?</div><br /><br />LLVM has a .class -&gt; LLVM bytecode thingie ( <!-- m --><a class="postlink" href="https://llvm.org/svn/llvm-project/java/trunk/docs/java-frontend.txt">https://llvm.org/svn/llvm-project/java/ ... ontend.txt</a><!-- m --> ), you might be able to combine that with emscripten (LLVM -&gt; JS).<br /><br />But really, if you want to do that, dude... Dart.</div><br /><br />I don't really want to do that.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24470601" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=15988&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Pont</a></div>
                <div class="post-author-title">
                  
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Los Gatos Mountains View</div>
              <div class="post-author-registered">Registered: Aug 19, 2000</div><div class="post-author-postcount">Posts: 18282</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24470601&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24470601">Posted: Fri May 10, 2013 6:46 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24464407#p24464407" class="postlink" rel="nofollow">Ardax</a> wrote:</div><div class="quotecontent">TIL that one of the other developer groups is having performance problems with their document storage... all 40 TB of it.<br /><br />Now, I know that's not exactly &quot;big storage&quot; for some of you guys, but considering that their dev tools are from the mid-90s (Delphi 3 anyone?), I'm more than a little curious to see just WTF they're doing.<br /><br />My manager offered us up to assist if they want.  We'll see what happens.</div><br />My first guess would be that they're storing a full version of a document every single time it changes.  No diffs.<br /><br />...and then someone added a way to automatically update documents periodically (like very day).

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24490849" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=123075&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Blacken00100</a></div>
                <div class="post-author-title">
                  "Naked Moral Outrage"<br />
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: swankyrobot.com/blog</div>
              <div class="post-author-registered">Registered: Sep 11, 2007</div><div class="post-author-postcount">Posts: 10375</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24490849&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24490849">Posted: Wed May 15, 2013 12:24 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <a href="https://news.ycombinator.com/item?id=5708362" class="postlink" rel="nofollow">Haahahahahahahaha haaaaahahaha hahahah ahaaaaahahahahaha.</a><br /><br />The Go people almost had me believing they were serious for a moment. Almost.<br /><br /><span style="font-style: italic">&quot;No really! Go isn't like other languages. You have to think differently. Please try it!&quot;</span><br /><br />&quot;Stupid&quot; certainly is a flavor of &quot;different,&quot; I'll give them that...

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24491639" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=158602&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">SituationSoap</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Grand Rapids MI</div>
              <div class="post-author-registered">Registered: Jun 28, 2008</div><div class="post-author-postcount">Posts: 9848</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24491639&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24491639">Posted: Wed May 15, 2013 7:12 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24490849#p24490849" class="postlink" rel="nofollow">Blacken00100</a> wrote:</div><div class="quotecontent"><a href="https://news.ycombinator.com/item?id=5708362" class="postlink" rel="nofollow">Haahahahahahahaha haaaaahahaha hahahah ahaaaaahahahahaha.</a><br /><br />The Go people almost had me believing they were serious for a moment. Almost.<br /><br /><span style="font-style: italic">&quot;No really! Go isn't like other languages. You have to think differently. Please try it!&quot;</span><br /><br />&quot;Stupid&quot; certainly is a flavor of &quot;different,&quot; I'll give them that...</div><br /><br />From the link:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you aren't committing your dependencies then you're doing it wrong.</div><br /><br /> <img src="//cdn.arstechnica.net/civis/images/smilies/scared.gif" alt=":scared:" title="Scared" />

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24491711" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=11114&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">jxl</a></div>
                <div class="post-author-title">
                  
                  Ars Praefectus
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jan 29, 2001</div><div class="post-author-postcount">Posts: 4754</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24491711&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24491711">Posted: Wed May 15, 2013 7:22 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              Is the &quot;no package manager&quot; stance an actual decision from on high on the Go team?

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24492001" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=2199&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Richard Berg</a></div>
                <div class="post-author-title">
                  "Eruditio et Basketballio"<br />
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Harlem</div>
              <div class="post-author-registered">Registered: Aug 6, 1999</div><div class="post-author-postcount">Posts: 36589</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24492001&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24492001">Posted: Wed May 15, 2013 8:04 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you aren't committing your dependencies then you're doing it wrong.</div><br />Well, duh.<br /><br />I've worked at firms that don't take this stance -- frankly it seems to be the exception rather than the rule -- but that doesn't make them any less wrong.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24492233" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=172729&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">ShuggyCoUk</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Londinium</div>
              <div class="post-author-registered">Registered: Nov 14, 2005</div><div class="post-author-postcount">Posts: 6996</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24492233&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24492233">Posted: Wed May 15, 2013 8:32 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              go seems[1] like it was designed to solve a problem for a company the size of google which wishes to go with a &quot;keep everyone at close to trunk&quot; and forget about backward compatibility (since they have few, if any external customers of their code). Essentially take no binary dependencies and rely on local caching of non dirty build outputs.<br /><br />This is a approach to solve a classic problem of large scale development. The dependency graph, where edges are labelled with the desired version(s), is not guaranteed to be a tree. these 'diamonds' are a problem you can roughly speaking solve in several ways:<br /><br />* Always flatten at compilation, picking the 'latest' version of everything. If this results in a compilation failure, fix it (and wait ages for a recompile).<br />* Compile things against the version they desire, at runtime have some (hopefully) deterministic ordering of what is selected to *execute* and hope that things are compatible. If they aren't work out what the hell the DAG actually *is*, fix it. <br />* Compile against the version requested. At runtime, where feasible, allow multiple versions of the code to be resident (where the results of execution of one version cannot affect the results of another), if this ever collides deal with a horrendous crash dump and fix it. <br />* Compile against the version requested, and include that code directly so that it is implicitly used at runtime. Static linking for example.  If this doesn't play ball sweaer at the error messages and fix it.<br /><br />Note that all have a serious cost on failure, and you can optimise your design/platform/language appropriately.<br /><br />AFAICT google use the first approach. The idea would be that you can avoid the classic dependency hell (the MS amongst others jump through considerable hoops over the years to work around[2]) by doing releases off the basis of &quot;everything points to the most recent versions of everything else and you inflict severe pain[3] on anyone breaking 'trunk'. In this world view, there is a high probability of a non trivial portion of the code base having changed each time you pull, and that it is very desirable for people to pull (and merge) as frequently as possible, so you assume you will be rebuilding a lot of stuff every time you hit 'compile'. <br />Thus, after whatever goals the system has w.r.t correctness/runtime performance/ease of coding are met, speed of compilation matters over anything else.<br /><br />Why any sort of significant proportion of the general coding public would think, for a moment, that such a design would be appropriate for them is beyond me. Even if it is an appropriate design[4] for *google* it doesn't make it so for most of the rest of the world, much as anything adopted company wide by the likes of IBM/MSFT/Sun is unlikely to be appropriate for them.<br /><br />As such I can't understand why anyone would care much about Go, except as an academic exercise, as something to look at from the point of view of what does/doesn't work.<br /><br />1. and I believe was, but since I am not the designer I won't put words in their mouths.<br />2. with some significant success, such as the &quot;Fusion&quot; .Net dll loading, and the SxS unmanaged dll mechanisms work well in many respects, at some _serious_ internal contortions for the respective platforms.<br />3. Well, a revert with a snarky commit message.<br />4. I have no idea if it is, I work with some ex-googlers who appreciated the concept of not trying to maintain complex dependency graphs, but found the compilation costs associated with this to be considerable.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24493699" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=56058&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">bames53</a></div>
                <div class="post-author-title">
                  
                  Ars Praefectus
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jun 20, 2002</div><div class="post-author-postcount">Posts: 4787</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24493699&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24493699">Posted: Wed May 15, 2013 11:02 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Always flatten at compilation, picking the 'latest' version of everything. If this results in a compilation failure, fix it (and wait ages for a recompile).</div><br />From what I've heard developers in Google can run such jobs on clusters. The example I've heard of is that apparently it's practical for a developer to update an API for their product, and then iteratively refactor all internal code that uses that API to work with the updated version.<br /><br /><div class="quotetitle"><a href="http://llvm.org/devmtg/2011-11/videos/Carruth_ClangMapReduce-mobile.mov" class="postlink" rel="nofollow">Automatic C++ Refactoring at Google Scale (Video)</a> wrote:</div><div class="quotecontent">Chandler Carruth - Google<br />Google has over 100 million lines of code, and our biggest programming language is C++. We have a single, shared codebase developed primarily on mainline. We build every binary and all of its libraries from scratch every time, allowing us to incrementally evolve APIs and libraries over time. The entire development process is extremely incremental in nature, and even API-breaking changes are a regular occurrence. However, for core libraries used throughout the codebase, this development model is a huge challenge: how do we incrementally evolve an API in use by tens of thousands of other libraries? The answer is to use Clang to automatically refactor APIs and their users across the codebase. How do we scale Clang up to possibly the single largest unified codebase in the world? The same way Google scales anything else: MapReduce. By coupling Clangâ€™s library design and architecture to existing Google infrastructure we can automatically compile, analyze, and refactor the entire Google codebase in minutes. In this talk, I will dive into the challenges of refactoring C++ code, how weâ€™re using Clang and making it even better at solving them, and how we scale these solutions to the size of our codebase.</div>

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24493901" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=158602&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">SituationSoap</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Grand Rapids MI</div>
              <div class="post-author-registered">Registered: Jun 28, 2008</div><div class="post-author-postcount">Posts: 9848</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24493901&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24493901">Posted: Wed May 15, 2013 11:18 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24492001#p24492001" class="postlink" rel="nofollow">Richard Berg</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you aren't committing your dependencies then you're doing it wrong.</div><br />Well, duh.<br /><br />I've worked at firms that don't take this stance -- frankly it seems to be the exception rather than the rule -- but that doesn't make them any less wrong.</div><br /><br />I've never worked anywhere or seen a codebase where &quot;Commit your dependencies&quot; didn't result in nine different incremental versions of every framework that's used within the project (this is especially bad on webapps, where you're getting nine versions of a back end framework, nine versions of JQuery, eleven versions of half your JQuery plugins which are intended to work with different cross sections of the JQuery framework base, etc). I'm sure it's possible to do &quot;commit your dependencies&quot; well, I've just never seen it. There's a reason that a decent dependency manager (Composer, pip, rubygems) has been a desirable community feature in recent years.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24494045" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=172729&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">ShuggyCoUk</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Londinium</div>
              <div class="post-author-registered">Registered: Nov 14, 2005</div><div class="post-author-postcount">Posts: 6996</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24494045&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24494045">Posted: Wed May 15, 2013 11:30 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">&quot; didn't result in nine different incremental versions of every framework that's used within the project</div><br /><br />If you're genuinely *using* 9 different versions then you should keep them all!<br /><br />Trying to ensure things are brought up to date is fine. Being able to script such a cascade in a non flattened model would be lovely (I did something like this by hand for a specific, oft iterated library before we pulled it back into the core project I work on). <br /><br />I actually don't have a problem with the build system retaining an inviolate labelled copy of a specific binary dependency, and then storing in your source control system a pointer to that dependency. Best make sure such a thing is genuinely inviolate though, and ensure that any 'back up'/source drop has access to said 'repository'. Obviously if your source control system can handle just dropping the relevant files straight in then why bother...

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24494051" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=123075&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Blacken00100</a></div>
                <div class="post-author-title">
                  "Naked Moral Outrage"<br />
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: swankyrobot.com/blog</div>
              <div class="post-author-registered">Registered: Sep 11, 2007</div><div class="post-author-postcount">Posts: 10375</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24494051&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24494051">Posted: Wed May 15, 2013 11:31 am</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24492001#p24492001" class="postlink" rel="nofollow">Richard Berg</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you aren't committing your dependencies then you're doing it wrong.</div><br />Well, duh.<br /><br />I've worked at firms that don't take this stance -- frankly it seems to be the exception rather than the rule -- but that doesn't make them any less wrong.</div><br /><br />There is a case to be made for storing binary dependencies in your source tree. (You should still feel terrible for this, but that's a different topic.) He's talking about stuffing <span style="font-style: italic">source</span> dependencies into your source tree. This is very dumb; you have to do a manual merge process, resolving conflicts and other crap by hand, when you want to update that dependency, for no good reason whatsoever. Or you can change one line of a pom.xml/composer.json/Gemfile and use the infrastructure that already exists to leverage those deps.<br /><br />In the absolute worst case, where you've got something that can't, because you are a special flower, be put into Central or Rubygems or whatever thing Composer uses, this is why git submodules/svn externals exist and can be pinned to specific revs.<br /><br />But <span style="font-style: italic">copying source files into your tree</span> and throwing away all their change history because &quot;the compiler is fast&quot; is paste-eatingly bad.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24494427" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=67831&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Jonathon</a></div>
                <div class="post-author-title">
                  
                  Ars Tribunus Angusticlavius
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: Tennessee, USA</div>
              <div class="post-author-registered">Registered: Jan 27, 2006</div><div class="post-author-postcount">Posts: 7895</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24494427&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24494427">Posted: Wed May 15, 2013 12:03 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24494051#p24494051" class="postlink" rel="nofollow">Blacken00100</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24492001#p24492001" class="postlink" rel="nofollow">Richard Berg</a> wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you aren't committing your dependencies then you're doing it wrong.</div><br />Well, duh.<br /><br />I've worked at firms that don't take this stance -- frankly it seems to be the exception rather than the rule -- but that doesn't make them any less wrong.</div><br /><br />There is a case to be made for storing binary dependencies in your source tree. (You should still feel terrible for this, but that's a different topic.) He's talking about stuffing <span style="font-style: italic">source</span> dependencies into your source tree. This is very dumb; you have to do a manual merge process, resolving conflicts and other crap by hand, when you want to update that dependency, for no good reason whatsoever. Or you can change one line of a pom.xml/composer.json/Gemfile and use the infrastructure that already exists to leverage those deps.<br /><br />In the absolute worst case, where you've got something that can't, because you are a special flower, be put into Central or Rubygems or whatever thing Composer uses, this is why git submodules/svn externals exist and can be pinned to specific revs.<br /><br />But <span style="font-style: italic">copying source files into your tree</span> and throwing away all their change history because &quot;the compiler is fast&quot; is paste-eatingly bad.</div><br />And when you're coding in C++ or Go or whatever and you don't have Central or Rubygems or whatever?  There's no real <span style="font-style: italic">good</span> solution there, so people end up coming with solutions like &quot;let's put the source for all our dependencies in our repo.&quot;<br /><br />(Maven has its issues, but I'd <span style="font-style: italic">love</span> to have something along the same lines for cross-platform C++.  I'm tired of screwing around with dependency version issues trying to pull in dependencies from distro packages or manually managed dependencies on Windows.)

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24494507" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=12350&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Alamout</a></div>
                <div class="post-author-title">
                  
                  Ars Legatus Legionis
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: s/(?&lt;=Bay) State/ Area/</div>
              <div class="post-author-registered">Registered: Aug 12, 2000</div><div class="post-author-postcount">Posts: 20989</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24494507&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24494507">Posted: Wed May 15, 2013 12:09 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And when you're coding in C++ or Go or whatever and you don't have Central or Rubygems or whatever? There's no real good solution there, so people end up coming with solutions like &quot;let's put the source for all our dependencies in our repo.&quot;</div><br />Even in those cases, submodules still exist. It makes little sense to fold their code into your repo directly--it's just a pain to maintain and update that mess. It breaks modularity.<br /><br />It works for Google because they always build the world, and because they have the resources to be contributing to every dependency they're using. I'm guessing that when they find a bug in some library, they're apt to actually fix it rather than reverting to a stable version. Still, it would be much easier to push fixes upstream if they were using submodules.<br /><br />Maybe that's what the poster in the linked thread actually meant, but it's not clear.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(Maven has its issues, but I'd love to have something along the same lines for cross-platform C++. I'm tired of screwing around with dependency version issues trying to pull in dependencies from distro packages or manually managed dependencies on Windows.)</div><br /><a href="http://ryppl.org" class="postlink" rel="nofollow">Ryppl</a> and <a href="http://0install.net/" class="postlink" rel="nofollow">0install</a> are trying to build something along these lines, but they are starting with the Boost library and progress seems to be slow (or maybe it just paused recently). I hope they succeed.

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24494519" class="post odd read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=37509&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">zeotherm</a></div>
                <div class="post-author-title">
                  
                  Moderator
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus"></div>
              <div class="post-author-registered">Registered: Jan 18, 2003</div><div class="post-author-postcount">Posts: 8214</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24494519&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24494519">Posted: Wed May 15, 2013 12:10 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24494051#p24494051" class="postlink" rel="nofollow">Blacken00100</a> wrote:</div><div class="quotecontent">paste-eatingly bad.</div><br />I am stealing that for what I am sure will be a useful time in the near future <img src="//cdn.arstechnica.net/civis/images/smilies/big_grin.png" alt=":D" title="Big Green" />

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
    
  <table id="p24494585" class="post even read" width="100%" cellpadding="0" cellspacing="0">
      
        <tr>
          <td rowspan="2" class="post-author">
            <div class="post-author-inner">
              

              <div class="post-author-name"><a href="./memberlist.php?mode=viewprofile&amp;u=123075&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Blacken00100</a></div>
                <div class="post-author-title">
                  "Naked Moral Outrage"<br />
                  Ars Legatus Legionis
                  
                  <br>et <a href="http://arstechnica.com/subscriptions/">Subscriptor</a>
                  
	 
                </div>
              
              <div class="post-author-tribus">Tribus: swankyrobot.com/blog</div>
              <div class="post-author-registered">Registered: Sep 11, 2007</div><div class="post-author-postcount">Posts: 10375</div>
            </div>
          </td>
          <td class="post-date-actions">
            <div class="post-date-actions-inner">
              <div class="post-actions">
                
              </div>
              <div class="post-date">
                <a href="./viewtopic.php?p=24494585&amp;sid=0ae675ba76497c47ac00fff765b2bd5b#p24494585">Posted: Wed May 15, 2013 12:15 pm</a>
              </div>
              <div class="post-actions">
                
              </div>
            </div>
          </td>
        </tr>
        <tr>
          <td class="post-content">
            <div class="post-content-inner">
              
              <div class="quotetitle"><a href="http://arstechnica.com/civis/viewtopic.php?p=24494427#p24494427" class="postlink" rel="nofollow">Jonathon</a> wrote:</div><div class="quotecontent">But <span style="font-style: italic">copying source files into your tree</span> and throwing away all their change history because &quot;the compiler is fast&quot; is paste-eatingly bad.<br />And when you're coding in C++ or Go or whatever and you don't have Central or Rubygems or whatever?  There's no real <span style="font-style: italic">good</span> solution there, so people end up coming with solutions like &quot;let's put the source for all our dependencies in our repo.&quot;</div><br />Submodules/svn-externals-if-you-are-a-bad-person. It is &quot;the&quot; fallback solution, regardless of language or environment. I use it when dealing with C++ about as much as when I'm using .NET.<br /><br />(But if you're coding in Go you already need your head looked at by a professional; it threw an error code that your firmware didn't check and your brain hung about an hour ago.)

              

              
              
            </div>
          </td>
        </tr>
        
    </table>
     
</div>

<div id="bottom-actionbar" class="actionbar">
  <div class="subscribe-actions">
    
  </div>
  
    <div class="pager">
      6446 posts â€¢ <a href="./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=3320">Previous</a>&nbsp;&nbsp;<li><a href="http://arstechnica.com/civis/./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">1</a></li><span class="page-dots"> ... </span><li><a href="http://arstechnica.com/civis/./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=3320">84</a></li><li class="selected">85</li><li><a href="http://arstechnica.com/civis/./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=3400">86</a></li><span class="page-dots"> ... </span><li><a href="http://arstechnica.com/civis/./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=6440">162</a></li>&nbsp;&nbsp;<a href="./viewtopic.php?f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b&amp;start=3400">Next</a>
    </div>
  
</div>

<div class="breadcrumb-jumpbox">
  <div id="bottom-reply">
    
        <div class="reply-button"><a href="./posting.php?mode=reply&amp;f=20&amp;t=1159182&amp;sid=0ae675ba76497c47ac00fff765b2bd5b"><img src="//cdn.arstechnica.net/civis/ars/imageset/en/button_topic_reply.png" alt="Reply to topic" title="Reply to topic" /></a></div>
        
    
  </div>
  <div class="breadcrumb"><a href="http://arstechnica.com/">Ars Technica</a> &gt; <a href="./index.php?sid=0ae675ba76497c47ac00fff765b2bd5b">Forums</a> &gt; <a href="./viewforum.php?f=13&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Operating Systems &amp; Software</a> &gt; <a href="./viewforum.php?f=20&amp;sid=0ae675ba76497c47ac00fff765b2bd5b">Programmer's Symposium</a>
</div>
  <div class="jumpbox">
    <form method="get" name="jumpbox" action="./viewforum.php?sid=0ae675ba76497c47ac00fff765b2bd5b" onsubmit="if($('.autosubmit', this).value == -1){return false;}">
      <div>
        <span class="jumptext">Jump to:</span>
        <select class="autosubmit" name="f">
          
            <option value="-1">Select a forum</option>
          <option value="-1">------------------</option>
            <option value="5">Hardware  &amp; Tweaking</option>
          
            <option value="6">&nbsp; &nbsp;Audio/Visual Club</option>
          
            <option value="7">&nbsp; &nbsp;Case and Cooling Fetish</option>
          
            <option value="8">&nbsp; &nbsp;CPU &amp; Motherboard Technologia</option>
          
            <option value="9">&nbsp; &nbsp;Mobile Computing Outpost</option>
          
            <option value="10">&nbsp; &nbsp;Networking Matrix</option>
          
            <option value="11">&nbsp; &nbsp;Other Hardware</option>
          
            <option value="12">&nbsp; &nbsp;Agora Classifieds</option>
          
            <option value="13">Operating Systems &amp; Software</option>
          
            <option value="14">&nbsp; &nbsp;Battlefront</option>
          
            <option value="15">&nbsp; &nbsp;Microsoft OS &amp; Software Colloquium</option>
          
            <option value="16">&nbsp; &nbsp;Linux Kung Fu</option>
          
            <option value="17">&nbsp; &nbsp;Windows Technical Mojo</option>
          
            <option value="18">&nbsp; &nbsp;Distributed Computing Arcana</option>
          
            <option value="19">&nbsp; &nbsp;Macintoshian Achaia</option>
          
            <option value="20" selected="selected">&nbsp; &nbsp;Programmer's Symposium</option>
          
            <option value="21">&nbsp; &nbsp;The Server Room</option>
          
            <option value="1">Ars Lykaion</option>
          
            <option value="22">&nbsp; &nbsp;Gaming, Extra Strength Caplets</option>
          
            <option value="23">&nbsp; &nbsp;The Lounge</option>
          
            <option value="24">&nbsp; &nbsp;The Soap Box</option>
          
            <option value="25">&nbsp; &nbsp;The Boardroom</option>
          
            <option value="26">&nbsp; &nbsp;The Observatory</option>
          
            <option value="3">&nbsp; &nbsp;Ars Help &amp; Feedback</option>
          
            <option value="30">Ars Subscription Member Areas</option>
          
            <option value="38">&nbsp; &nbsp;Image Galleries</option>
          
        </select>
        <input type="submit" value="Go" class="downlevel" />
      </div>
    </form>
  </div>

</div>

</div>
      <div id="page-footer">
        <div id="latest-stories"></div>
        <div id="footer">
          
<p><a href="/contact-us/">Contact Us</a> | <a href="http://arstechnica.com/">Ars Technica</a></p>
<p><strong>&copy; Ars Technica 1998-2014</strong></p>
<p>Powered by <a href="http://www.phpbb.com/">phpBB</a> and...</p>
<p><a href="http://www.servercentral.com/" title="SC is awesome!"><img src="//cdn.arstechnica.net/forums/forum-powered.png" alt="Ars OpenForum powered by Server Central" /></a></p>
<p class="notice">&copy; 2014 Cond&eacute; Nast. All rights reserved<br/>
  Use of this Site constitutes acceptance of our <a href="http://www.condenast.com/privacy-policy" target="_blank">User Agreement</a> (effective 3/21/12) and <a href="http://www.condenast.com/privacy-policy#privacypolicy" target="_blank">Privacy Policy</a> (effective 3/21/12), and <a href="/amendment-to-conde-nast-user-agreement-privacy-policy/">Ars Technica Addendum (effective 5/17/2012)</a><br>
  <a href="http://www.condenast.com/privacy-policy#privacypolicy-california" target="_blank">Your California Privacy Rights</a><br/>
  The material on this site may not be reproduced, distributed, transmitted, cached or otherwise used, except with the prior written permission of Cond&eacute; Nast.<br/>
  <a href="http://www.condenast.com/privacy-policy#privacypolicy-optout" target="_blank">Ad Choices</a><img width="10" height="10" border="0" src="//cdn.arstechnica.net/public/v6/styles/light/images/footer/ad_choices_arrow.png">
</p>
        </div>
      </div>
    </div>
  <script src="//cdn.arstechnica.net/civis/ars/theme/scripts/forums.js?v=35"></script>
  <script src="https://www.google.com/jsapi"></script>
  <script>
    google.load("jquery", "1");
    google.setOnLoadCallback(function() {
      if(ars !== undefined){
        ars.init();//Tadow!
      }
      if(phpbb !== undefined) {
        p = new phpbb();
        p.init();
      }
    });
  </script>

  

  <noscript>
    <style type="text/css">.downlevel{ display: auto; }</style>
  </noscript><!-- Begin comScore Tag --> 
  <script type="text/javascript"> 
  // do it on window.load because this shit is so unreliable it holds up page load regularly
  $(window).on("load", function(){
    var cs_url = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js?c1=2&c2=6035094&c3=&c4=&c5=&c6=&c15=";
    $.getScript(cs_url, function(){ return });
  });
  </script> 
  <noscript> 
  <img src="http://b.scorecardresearch.com/b?c1=2&c2=6035094&c3=&c4=&c5=&c6=&c15=&cv=1.3&cj=1" style="display:none"
  width="1" height="1" alt="" /> 
  </noscript> 
  <!-- End comScore Tag --><!-- Omniture start -->
  <script type="text/javascript" src="//cdn.arstechnica.net/wp-content/themes/arstechnica/assets/js/omniture/loader.js"></script>
  <script type="text/javascript" src="//cdn.arstechnica.net/wp-content/themes/arstechnica/assets/js/omniture/initialize.js"></script>
  <script type="text/javascript"> if(navigator.appVersion.indexOf('MSIE')>=0)document.write(unescape('%3C')+'\!-'+'-')</script>
  <noscript><a href="http://www.omniture.com" title="Web Analytics"><img src="http://condenast.112.2o7.net/b/ss/condenet-dev/1/H.15.1--NS/0" height="1" width="1" border="0" alt="" /></a></noscript>
  <!-- Omniture end -->
  </body>
</html>
