http://ottopress.com/category/code/page/2/?repeat=w3tc
HTTP/1.1 200 OK
Server: nginx/1.4.4
Date: Thu, 24 Jul 2014 06:27:50 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Pingback: http://ottopress.com/xmlrpc.php

<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>Code &raquo; Otto on WordPress</title>

<link rel="profile" href="http://www.w3.org/1999/xhtml/vocab" />
<link rel="me" type="text/html" href="https://plus.google.com/100201852715113506716" />

<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/style.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/print.css" type="text/css" media="print" />

<link rel="pingback" href="http://ottopress.com/xmlrpc.php" />

<meta property="og:email" content="otto@ottodestruct.com" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">

<script type="text/javascript">var description = '';</script>
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="IvlRFnRHu9RIiAiOS-bo-8vU4ju4V6_b4U3M_-1jlXQ" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Feed" href="http://ottopress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Comments Feed" href="http://ottopress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Code Category Feed" href="http://ottopress.com/category/code/feed/" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='the-neverending-homepage-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.css?ver=20140422' type='text/css' media='all' />
<link rel='stylesheet' id='tiled-gallery-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.css?ver=2012-09-21' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.13.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery-migrate.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ottopress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ottopress.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<meta name="pinterest" content="nopin" /><link rel="microsummary" type="text/plain" href="/category/code/page/2/?repeat=w3tc?microsummary=1" /><link rel="shortcut icon" href="http://ottopress.com/wp-content/wp-logo-vs.png" /><style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-27538437-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>

<body class="archive paged category category-code category-573 paged-2 category-paged-2 infinite-scroll neverending">
<script type="text/javascript">
if (top.location != self.location) top.location.replace(self.location);
</script>
<div id="page">
<div id="header">
	<div id="headertitle">
		<h1><a href="http://ottopress.com" title="Otto on WordPress: You have to use an Ottopress to get fresh squeezed Otto.">Otto on WordPress</a></h1>
		<p>You have to use an Ottopress to get fresh squeezed Otto.</p>
	</div> 
	<!-- Search box (If you prefer having search form as a sidebar widget, remove this block) -->
	<div class="search">
		<form method="get" id="searchform" action="http://ottopress.com/">
<input type="search" size="20" results="5" name="s" id="s" placeholder="Search..." speech="speech" x-webkit-speech="x-webkit-speech" onwebkitspeechchange="this.form.submit();" />
</form>
	</div> 
	<!-- Search ends here-->
		
</div>
<div id="navbar">
<div id="nav">
<div class="menu"><ul><li ><a href="http://ottopress.com/">Home</a></li><li class="page_item page-item-5 page_item_has_children"><a href="http://ottopress.com/wordpress-plugins/">WordPress Plugins</a><ul class='children'><li class="page_item page-item-205"><a href="http://ottopress.com/wordpress-plugins/atd-for-comments/">After The Deadline For Comments</a></li><li class="page_item page-item-21"><a href="http://ottopress.com/wordpress-plugins/atom-default-feed/">Atom Default Feed</a></li><li class="page_item page-item-965"><a href="http://ottopress.com/wordpress-plugins/dropbox-photo-sideloader/">Dropbox Photo Sideloader</a></li><li class="page_item page-item-15"><a href="http://ottopress.com/wordpress-plugins/gravatar-box/">Gravatar Box</a></li><li class="page_item page-item-32"><a href="http://ottopress.com/wordpress-plugins/php-code-widget/">PHP Code Widget</a></li><li class="page_item page-item-7"><a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a></li><li class="page_item page-item-10"><a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a></li><li class="page_item page-item-81"><a href="http://ottopress.com/wordpress-plugins/unicornify/">Unicornify</a></li></ul></li><li class="page_item page-item-374"><a href="http://ottopress.com/contact/">Contact Otto</a></li><li><a href="http://ottodestruct.com" title="Nothing to See Here">Nothing to See Here</a></li><li><a href="http://buyottoabeer.com" title="Otto on Beer">Otto on Beer</a></li></ul></div>
	</div>
</div>
<div id="wrapper">
	<div id="content">

	
			<p>Archive for the &#8216;Code&#8217; Category.</p>

 				
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/category/code/page/3/?repeat=w3tc" >&laquo; Previous Entries</a></div>
			<div class="alignright"><a href="http://ottopress.com/category/code/?repeat=w3tc" >Next Entries &raquo;</a></div>
		</div>

					<div id="post-829" class="post-829 post type-post status-publish format-standard hentry category-code category-wordpress tag-control tag-custom tag-customizer tag-setting tag-theme" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/making-a-custom-control-for-the-theme-customizer/" rel="bookmark" title="Permanent Link to Making a custom control for the Theme Customizer" itemprop="url"><span itemprop="name">Making a custom control for the Theme Customizer</span></a></h2>
				<div class="postmetadata">August 3, 2012, 2:34 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Okay, a quick one today. Let&#8217;s make a custom control for the customizer.</p>
<p>Back in the <a href="http://ottopress.com/2012/how-to-leverage-the-theme-customizer-in-your-own-themes/">first tutorial</a>, I talked about the various controls available in the customizer. Specifically I mentioned image handling, color wheels, text boxes, radios, dropdowns, and checkboxes.</p>
<p>Let&#8217;s try a new one? How about a textarea? It&#8217;s not in the core code, but it&#8217;s easy enough to add one.</p>
<h3>Create a Class</h3>
<p>So first, we have to create our class. Now, where we create this class is important. Specifically, we have to create it in the function called by the customize_register action. You remember that, right? It started like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action( 'customize_register', 'themename_customize_register' );
function themename_customize_register($wp_customize) {
	// ... do stuff ...
</pre>
<p>The reason we have to create our class in here is because we need to make our new class extend the built in WP_Customize_Control class, and that class only gets loaded and defined when we&#8217;re actually using the customizer. An alternate means of doing this would be to wrap the class definition in an &#8220;if (class_exists(&#8216;WP_Customize_Control&#8217;))&#8221; statement, if you prefer to not have your classes defined inside a function. Personal preference, I don&#8217;t think it makes a difference either way.</p>
<p>So, here&#8217;s our textarea control. All we&#8217;re doing is to override the render_content() function and make it display a textarea.</p>
<pre class="brush: php; title: ; notranslate" title="">
class Example_Customize_Textarea_Control extends WP_Customize_Control {
	public $type = 'textarea';

	public function render_content() {
		?&gt;
		&lt;label&gt;
		&lt;span class=&quot;customize-control-title&quot;&gt;&lt;?php echo esc_html( $this-&gt;label ); ?&gt;&lt;/span&gt;
		&lt;textarea rows=&quot;5&quot; style=&quot;width:100%;&quot; &lt;?php $this-&gt;link(); ?&gt;&gt;&lt;?php echo esc_textarea( $this-&gt;value() ); ?&gt;&lt;/textarea&gt;
		&lt;/label&gt;
		&lt;?php
	}
}
</pre>
<p>You can see how simple it is to do, really. We just output a span with the value from $this-&gt;label for the name displayed above the textarea, then output the textarea itself.</p>
<p>Note that the textarea has no &#8220;name&#8221; parameter. It doesn&#8217;t need one. The $this-&gt;link() function outputs the information for the customizer script. Specifically, it will create a &#8220;data-customizer-setting-link&#8221; attribute, to link the textarea to the proper setting it&#8217;s controlling.</p>
<p>Now, we just have to use the new control.</p>
<h3>Add a setting and control</h3>
<p>Let&#8217;s go back to the theme demo I used in the <a href="http://ottopress.com/2012/theme-customizer-part-deux-getting-rid-of-options-pages/">second customizer</a> tutorial post, and add a new setting and control to demonstrate this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$wp_customize-&gt;add_setting( 'textarea_setting', array(
	'default'        =&gt; 'Some default text for the textarea',
) );

$wp_customize-&gt;add_control( new Example_Customize_Textarea_Control( $wp_customize, 'textarea_setting', array(
	'label'   =&gt; 'Textarea Setting',
	'section' =&gt; 'themedemo_demo_settings',
	'settings'   =&gt; 'textarea_setting',
) ) );
</pre>
<p>Nothing complicated there. We create the setting, then we create our control, using the new class we made for this purpose earlier.</p>
<h3>Use the setting in the theme</h3>
<p>Now let&#8217;s add to that index.php file I made in the theme demo to show the results of our work.</p>
<pre class="brush: php; title: ; notranslate" title="">
echo 'textarea_setting =&gt; '.get_theme_mod( 'textarea_setting', 'default_value' ).&quot;\n&quot;;
</pre>
<p>And that&#8217;s pretty much that. We now have a textarea control, and changing/saving results in the setting changing as well. </p>
<p><a href="http://i0.wp.com/ottopress.com/files/2012/08/themedemo.png"><img class="alignnone size-full wp-image-831" title="themedemo" src="http://i1.wp.com/ottopress.com/files/2012/08/themedemo.png?resize=700%2C394" alt="" data-recalc-dims="1" /></a></p>
<p>You can extend this further to use postMessage for real-time changing of settings, if you like. </p>
<p>Custom controls using complex javascript and such can be done as well. Examine the core WP_Customize_Color_Control, which uses the farbtastic Javascript for the color wheel. That one has special JS in the customize-controls.dex.js file to handle receiving the input and passing it along to the customizer JS. Look for &#8220;api.ColorControl&#8221; and how it gets the setting from the HTML and sets it. I&#8217;m not a JS guru, that sort of thing is slightly outside my own scope. <img src="http://i0.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>Any ideas for other controls that themes might need? Leave a comment, maybe somebody has a solution.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bj' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/control/" rel="tag">control</a>, <a href="http://ottopress.com/tag/custom/" rel="tag">custom</a>, <a href="http://ottopress.com/tag/customizer/" rel="tag">customizer</a>, <a href="http://ottopress.com/tag/setting/" rel="tag">setting</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/making-a-custom-control-for-the-theme-customizer/#comments" title="Comment on Making a custom control for the Theme Customizer">98 Comments</a>									 </div>
			</div>			<div id="post-825" class="post-825 post type-post status-publish format-standard hentry category-code category-wordpress tag-customizer tag-preview tag-theme tag-theme_mod" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/theme-customizer-part-deux-getting-rid-of-options-pages/" rel="bookmark" title="Permanent Link to Theme Customizer Part Deux: Getting rid of Options pages" itemprop="url"><span itemprop="name">Theme Customizer Part Deux: Getting rid of Options pages</span></a></h2>
				<div class="postmetadata">July 28, 2012, 10:46 am <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Last time I wrote about using the Theme Customizer to supplant/add to your existing options. But what if you&#8217;re writing a new theme entirely?</p>
<h3>Do you even need an options page?</h3>
<p>How many options does your theme have, anyway? Would it not make more sense to eschew those complex options pages in favor of just allowing the user to do it all &#8220;live&#8221;? With the Theme Customizer, this becomes entirely possible. As an added bonus, it also gives us a really handy use for the theme_mod system.</p>
<h3>Step 1: Surfacing the Customizer</h3>
<p>One thing I don&#8217;t like about the theme customizer is how hidden it is. It&#8217;s in the Themes selection space, under the strangely worded &#8220;Live Preview&#8221; option. Let&#8217;s bring that to the forefront and make it more visible for our example theme. In our functions.php file:</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action ('admin_menu', 'themedemo_admin');
function themedemo_admin() {
	// add the Customize link to the admin menu
	add_theme_page( 'Customize', 'Customize', 'edit_theme_options', 'customize.php' );
}
</pre>
<p>There we go. Now we have a &#8220;Customize&#8221; link in the Appearance menu that loads up the customizer. Nice.</p>
<p><em>(Note, using the &#8220;customize.php&#8221; link works with the currently active theme only. Adding ?theme=themedemo to it would allow links to customize non-active themes, but this makes no real sense in the theme functions.php file of a theme. But if you were doing a plugin that needed to load the customizer, that might be good to know.)</em></p>
<h3>Step 2: Adding some options</h3>
<p>Let&#8217;s add some simple options to the theme customizer. How about a text field and, say, a color picker. Why not?</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action('customize_register', 'themedemo_customize');
function themedemo_customize($wp_customize) {

	$wp_customize-&gt;add_section( 'themedemo_demo_settings', array(
		'title'          =&gt; 'Demonstration Stuff',
		'priority'       =&gt; 35,
	) );

	$wp_customize-&gt;add_setting( 'some_setting', array(
		'default'        =&gt; 'default_value',
	) );

	$wp_customize-&gt;add_control( 'some_setting', array(
		'label'   =&gt; 'Text Setting',
		'section' =&gt; 'themedemo_demo_settings',
		'type'    =&gt; 'text',
	) );

	$wp_customize-&gt;add_setting( 'some_other_setting', array(
		'default'        =&gt; '#000000',
	) );

	$wp_customize-&gt;add_control( new WP_Customize_Color_Control( $wp_customize, 'some_other_setting', array(
		'label'   =&gt; 'Color Setting',
		'section' =&gt; 'themedemo_demo_settings',
		'settings'   =&gt; 'some_other_setting',
	) ) );

}
</pre>
<p>We now have &#8220;some_setting&#8221; and &#8220;some_other_setting&#8221;. You can tell that I&#8217;m being very creative with my naming scheme here. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_wink.gif?w=700" alt=";)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>Note that I didn&#8217;t define the &#8220;type&#8221; for these settings. This means they&#8217;ll be the default type, which is &#8220;theme_mod&#8221;, and that&#8217;s perfect for this case. Since we&#8217;re providing no other way than the customizer to change these settings, then it&#8217;s nice and easy to use them.</p>
<p>Speaking of using them&#8230;</p>
<h3>Step 3: Use the settings in your theme</h3>
<p>Here&#8217;s our theme&#8217;s index.php file:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php get_header(); ?&gt;

&lt;h3&gt;Theme Customizer Demo, using theme_mod and &lt;em&gt;no&lt;/em&gt; settings page!&lt;/h3&gt;

&lt;pre&gt;
&lt;?php

echo 'some_setting =&gt; ' .get_theme_mod( 'some_setting', 'default_value' ).&quot;\n&quot;;
echo 'some_other_setting =&gt; ' .get_theme_mod( 'some_other_setting', '#000000' ).&quot;\n&quot;;
echo 'non_existent_setting =&gt; '.get_theme_mod( 'non_existent_setting', 'default_value' ).&quot;\n&quot;;

?&gt;
&lt;/pre&gt;

&lt;?php get_footer(); ?&gt;
</pre>
<p>The header and footer are pretty standard. Nothing special. You can find them in the download. What we&#8217;re really concerned with here is how the theme uses the settings themselves.</p>
<p>Notice the use of get_theme_mod. It&#8217;s pretty darned easy to use, really. It just gets the settings and uses them however the theme needs to. For this demo, I&#8217;m just outputting their contents for demonstration purposes. I also added in a non-existent setting to show that it works and outputs the default value when nothing is set for the theme in the theme_mod system.</p>
<p>The nice thing about theme_mod is that it automatically stores the information in a nice packed way, unique to the theme itself. If you have multiple copies of the same theme on the site, but with different names, each will have its own settings. Easy and handy.</p>
<h3>Step 4: There is no step 4.</h3>
<p>Seriously, that&#8217;s it. You can go further and make the settings work &#8220;live&#8221; using the postMessage methods I explained in the previous post, but for the most part, there&#8217;s nothing more to do. This is a simple and easy way of making settings, using them, and not worrying about complex options pages, settings in the database, where they&#8217;re stored&#8230; Why do all that extra code if you don&#8217;t have to?</p>
<p>Here&#8217;s a link to a working theme using the above concepts. For fun, it also supports custom background colors. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p><a href='http://ottopress.com/files/2012/07/themedemo.zip'>themedemo.zip</a></p>
<p>This is just one example of how to use the core APIs in a somewhat handy way. There&#8217;s other ways too. Feel free to experiment.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bi' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/customizer/" rel="tag">customizer</a>, <a href="http://ottopress.com/tag/preview/" rel="tag">preview</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/theme_mod/" rel="tag">theme_mod</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/theme-customizer-part-deux-getting-rid-of-options-pages/#comments" title="Comment on Theme Customizer Part Deux: Getting rid of Options pages">48 Comments</a>									 </div>
			</div>			<div id="post-789" class="post-789 post type-post status-publish format-standard hentry category-code category-wordpress tag-3-4 tag-beta tag-code-2 tag-customizer tag-theme tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/how-to-leverage-the-theme-customizer-in-your-own-themes/" rel="bookmark" title="Permanent Link to How to leverage the Theme Customizer in your own themes" itemprop="url"><span itemprop="name">How to leverage the Theme Customizer in your own themes</span></a></h2>
				<div class="postmetadata">May 4, 2012, 6:33 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><em>Note: Everything I&#8217;m talking about here, including the code, is in beta mode. It will be subject to change. I&#8217;ll update this post after release to fix any code changes that may occur between now and then. I&#8217;m releasing this post now so that theme authors can start looking at their themes and thinking about how they might want to change the way they do options pages.</em></p>
<p>So, WordPress 3.4 has this nifty new feature you can find on the main Theme selection page. It&#8217;s a link next to each theme labeled &#8220;Customize&#8221;. This is the new Theme Customizer, and it&#8217;s way cool.</p>
<p>In fact, you can&#8217;t see what it does with a simple picture, so here&#8217;s a video. It&#8217;s available in HD if you want to go full screen. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p><iframe width="700" height="394" src="http://www.youtube.com/embed/vD8v6u3noPg?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p>So, now you know what it does, and if you&#8217;re a theme author, you&#8217;ve probably just gotten some great ideas. Here&#8217;s how you can implement those ideas in your theme.</p>
<p>First, note that if you already support the built in Custom Header and Custom Background functionality the WordPress core provides, then those will magically show up and work in the theme customizer. No extra code needed on your part.</p>
<h3>Existing Options</h3>
<p>Now, the first thing you&#8217;ll probably want to do is to take note of how your existing settings in the theme work. You have three main options for theme settings, realistically. I&#8217;ll go over them briefly.</p>
<p>1. &#8220;Theme mod&#8221;. This uses the set_theme_mod and get_theme_mod functions. It&#8217;s rare that themes actually use these since I wrote about the Settings API, but it is there and if you use these normally then it is supported by the Theme Customizer (in fact it&#8217;s the default).</p>
<p>2. Individual Settings. If you store your theme&#8217;s settings in the options table as individual rows, one per setting, then that works fine with the customizer. This is not the preferred way of doing things in themes, however, and not the most common. Still, some themes do this, so if you&#8217;re one of them, it&#8217;s supported as well.</p>
<p>3. Serialized Settings. This is the way I explained in my Settings API Tutorial and the method recommended by the Theme Review guidelines, as well as the way Chip described in his own tutorial for theme settings. Essentially, you store your settings in an array, then store that array using set_option or get_option, as one row in the database. This method is supported and it&#8217;s the way I&#8217;ll primarily cover in this article. I&#8217;ll briefly mention the other two methods when appropriate.</p>
<p>Once you know how your settings are stored, then you&#8217;ll know what to fill in at certain spots in the code. More on this when we get to it.</p>
<h3>Object Orientation</h3>
<p>Now, the Theme Customizer is very object oriented, and while you don&#8217;t necessarily need to understand this to implement the basics of it, you might need to understand it if you&#8217;re going to make something completely custom. Just a warning.</p>
<p>First, we&#8217;ll look at the left hand side of the customizer screen. Notice that the left hand side is divided into sections. Actually, that&#8217;s their name: WP_Customize_Section. In each of these sections is one or more controls; or rather, WP_Customize_Control. Finally, each of these controls one of more settings on the page: aka WP_Customize_Setting.</p>
<p>The Sections organize the controls. The Controls get input and pass it to the settings. The Settings interface with your existing options in the theme.</p>
<p>To make new stuff here for your own custom options, you need to know where to add it. That place is the customize_register action hook.</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action( 'customize_register', 'themename_customize_register' );
function themename_customize_register($wp_customize) {
	// ... do stuff ...
</pre>
<p>The function gets a parameter of the main $wp_customize object. This is the interface point where you will do everything like adding sections and controls and such.</p>
<h3>Sections</h3>
<p>So, first thing to do is to add a section. Here&#8217;s one way to do it:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_section( 'themename_color_scheme', array(
		'title'          =&gt; __( 'Color Scheme', 'themename' ),
		'priority'       =&gt; 35,
	) );
</pre>
<p>The first parameter is a unique ID for the section that you&#8217;ll need later (when you&#8217;re putting controls into it). The second parameter is an array of options for the section. Sections don&#8217;t have a lot of options, really. You can give them a title, you can give them a &#8220;description&#8221; if you need some explanatory text in them. The priority setting determines their order in the list.</p>
<p>You can also give sections a &#8220;capability&#8221; if you have a special case. Generally speaking, most sites require the &#8220;edit_theme_options&#8221; capability to have users edit this sort of thing, and this is the default capability that the sections use. However, if you have options that anybody can edit, or which should only be managed by administrators, changing this capability will prevent the section from appearing to users who can&#8217;t change those settings anyway.</p>
<p>One final thing you can add to a section is a &#8220;theme_supports&#8221; option. This will make the menu not appear unless the theme supports something. If you&#8217;re putting this code in a theme itself, then you already know what the theme supports, so it doesn&#8217;t make much sense. The core uses this to not show the header and background options if the theme doesn&#8217;t support them.</p>
<h3>Settings</h3>
<p>Next, let&#8217;s configure some settings. Yes, the settings, not the controls. See, the controls need to know what settings they&#8217;re changing, so we have to attach the settings up first.</p>
<p>To declare a setting, you do it like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_setting( 'themename_theme_options[color_scheme]', array(
		'default'        =&gt; 'some-default-value',
		'type'           =&gt; 'option',
		'capability'     =&gt; 'edit_theme_options',
	) );
</pre>
<p>In this case, I&#8217;ve declared that the setting I&#8217;m interested in is in an option, the option is named &#8220;themename_theme_options&#8221; in the database, and it&#8217;s serialized, and the actual array key in there is &#8220;color_scheme&#8221;. Remember that talk we had before about the Settings API and how you store your settings? This was method 3.</p>
<p>Here&#8217;s method 2 (one option per database entry):</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_setting( 'themename_color_scheme', array(
		'default'        =&gt; 'some-default-value',
		'type'           =&gt; 'option',
		'capability'     =&gt; 'edit_theme_options',
	) );
</pre>
<p>And here&#8217;s method 1 (using theme_mod):</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_setting( 'color_scheme', array(
		'default'        =&gt; 'some-default-value',
		'type'           =&gt; 'theme_mod',
		'capability'     =&gt; 'edit_theme_options',
	) );
</pre>
<p>This setting basically tells the theme customizer where the option is stored, and how to change it&#8217;s value so that your theme displays with the changed option.</p>
<p>Here&#8217;s the good bit about this: You&#8217;re telling the theme customizer where the option is. <em>You don&#8217;t have to change the way the existing option works at all.</em></p>
<p>You already have a theme options page, right? So somehow, you&#8217;re saving those options. And in the theme, it&#8217;s reading those options using get_theme_mod or get_option, right? The way the theme customizer works is that it intercepts that call using a filter, changes the option for the previewer case only, and then passes the new option along to the theme. So the theme has no idea that the value it&#8217;s getting isn&#8217;t in the database, but one the user just selected. That&#8217;s the magic trick and why themes <em>don&#8217;t have to dramatically change</em> to support this sort of thing. All they have to do to make custom sections is to tell the theme customizer code what options they&#8217;re using and how, and it changes those options directly for the previewer.</p>
<p>(Note of clarification here: The &#8220;default&#8221; setting above should be <em>a default value</em>, not the <em>current</em> value. The difference is a subtle one, but the point is that you don&#8217;t actually need to get the current value of the option from the DB and put it in here. The WP_Customize_Setting takes care of all that jazz for you. The &#8220;default&#8221; is what should be used if the value doesn&#8217;t exist in the DB at all.)</p>
<p>There&#8217;s one more bit to the add_setting call that we&#8217;ll come back to later when I get around to explaining postMessage.</p>
<h3>Controls</h3>
<p>Finally, we come to the controls. Controls can look one of a lot of ways, obviously. The simplest controls are just checkboxes, or text fields. However, colors are something that change a lot, so there&#8217;s color wheel controls too. In fact, WordPress defines a number of possible controls. Let&#8217;s go over a few:</p>
<p>A radio selection:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_control( 'themename_color_scheme', array(
		'label'      =&gt; __( 'Color Scheme', 'themename' ),
		'section'    =&gt; 'themename_color_scheme',
		'settings'   =&gt; 'themename_theme_options[color_scheme]',
		'type'       =&gt; 'radio',
		'choices'    =&gt; array(
			'value1' =&gt; 'Choice 1',
			'value2' =&gt; 'Choice 2',
			'value3' =&gt; 'Choice 3',
			),
	) );
</pre>
<p>Pretty simple. It&#8217;s referencing the section it&#8217;s in, the setting that it&#8217;s going to change, and then it has the radio type and the list of choices along with their associated values.</p>
<p>How about a checkbox instead? This one comes straight from core:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_control( 'display_header_text', array(
		'settings' =&gt; 'header_textcolor',
		'label'    =&gt; __( 'Display Header Text' ),
		'section'  =&gt; 'header',
		'type'     =&gt; 'checkbox',
	) );
</pre>
<p>A checkbox is on or off, true or false. It needs no real values.</p>
<p>How about a selection dropdown box? Here&#8217;s an example:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_control( 'example_select_box', array(
		'label'   =&gt; 'Select Something:',
		'section' =&gt; 'nav',
		'type'    =&gt; 'select',
		'choices'    =&gt; array(
			'value1' =&gt; 'Choice 1',
			'value2' =&gt; 'Choice 2',
			'value3' =&gt; 'Choice 3',
			),
	) );
</pre>
<p>The default type of control is actually type = &#8216;text&#8217;, and it creates a text box control. One more type of control is the &#8220;dropdown-pages&#8221; type, which creates a dropdown list of the WordPress Pages.</p>
<p>But that&#8217;s not all. There&#8217;s actually several more, but because they&#8217;re so custom, they&#8217;re declared differently. Here&#8217;s where we get all object oriented on ya&#8230;</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_control( new WP_Customize_Color_Control( $wp_customize, 'link_color', array(
		'label'   =&gt; __( 'Link Color', 'themename' ),
		'section' =&gt; 'themename_color_scheme',
		'settings'   =&gt; 'themename_theme_options[link_color]',
	) ) );
</pre>
<p>Whoa, what&#8217;s with the new class? The WP_Customize_Color_Control is a class that is extending the built in WP_Customize_Control class. It adds the color wheel jazz to places where color selection is needed. Note that the class is being created here with new, and so it has to get the $wp_customize passed to it directly, so it knows where to hook in. (Note: This may change before final 3.4 release.)</p>
<p>Other controls of note:</p>
<ul>
<li>WP_Customize_Upload_Control &#8211; This gives you an upload box, for allowing file uploads. However, you probably won&#8217;t use this directly, you&#8217;ll extend it for other things&#8230; like:</li>
<li>WP_Customize_Image_Control &#8211; This gives the image picker and the uploader box. It extends the upload controller. You can see it in action on the custom background piece, where a user can upload a new file to be the background image.</li>
<li>WP_Customize_Header_Image_Control &#8211; Because of the resizing action of the header piece, it needs a bit of special handling and display, so the WP_Customize_Header_Image_Control extends the WP_Customize_Image_Control to add that functionality. You can see it in action on the custom header piece, where a user can upload a new file to be the header image.</li>
</ul>
<p>So, the way to create a custom controller to do whatever you want is to make a new class of your own which extends WP_Customize_Control and adds the bits you want. How to do that is a bit complex, so I&#8217;ll save that for another tutorial. For now, you&#8217;ve got image handling, color wheels, text boxes, radios, dropdowns, and checkboxes. I think that should be enough to get started with.</p>
<h3>End of tutorial?</h3>
<p>Not quite. Everything I went over above is enough to add new sections to the customizer, put controls in them, and then to have the preview show your changes after a slight delay when the page refreshes. All you have to do is to call those functions with the proper parameters, in the proper place, and it&#8217;ll work.</p>
<p>However, note that I said &#8220;when the page refreshes&#8221;&#8230; C&#8217;mon&#8230; this is the year 2012. <a title="Why?" href="http://www.youtube.com/watch?v=vzm6pvHPSGo">We don&#8217;t have flying cars</a>, and we still have to wait a whole second or two?</p>
<p>Nope.</p>
<h3>Enter postMessage</h3>
<p>Back when I mentioned the $wp_customize-&gt;add_setting function call, I mentioned &#8220;one more bit&#8221;. That one more bit is the option called &#8220;transport&#8221;.</p>
<p>Transport defines how your setting change gets from the place where you changed it into the preview pane. The default setting for this is &#8220;refresh&#8221;. An alternative setting is named &#8220;postMessage&#8221;.</p>
<p>The postMessage transport makes it such that the setting is instantly sent into the other frame, where javascript can adjust the page on-the-fly using this new information.</p>
<p>An example:</p>
<p>Let&#8217;s say we have a setting to change the colors of the titles. All the titles on the page are in some tag that has a class of posttitle, perhaps. The option normally just saves the HTML color chosen, then outputs some inline CSS in the header.php to basically do this:</p>
<pre class="brush: css; title: ; notranslate" title="">
.posttitle {
	color: #abcdef;
}
</pre>
<p>Or whatever the option actually is for that color.</p>
<p>We have hooked our setting to that option, and hooked our WP_Customize_Color_Control up to it, and now when we change it, it works and we can see the color change. Note that this is easiest to do with already working customizer options, so the best way to do it is to get it working normally first, then add on this next bit.</p>
<p>Now, we have the working option in the customizer, so to take away that refresh delay, we&#8217;ll add this new option to the add_setting call:</p>
<pre class="brush: php; title: ; notranslate" title="">
	'transport'         =&gt; 'postMessage',
</pre>
<p>This tells the customizer that the setting will be sent directly to the frame via javascript. However, for that setting to work, we need javascript in the frame itself to receive it.</p>
<p>So, back in our main function&#8230; remember that? It started like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action( 'customize_register', 'themename_customize_register' );
function themename_customize_register($wp_customize) {
	// ... do stuff ...
</pre>
<p>Right at the end of that function, we&#8217;re going to add this code:</p>
<pre class="brush: php; title: ; notranslate" title="">
	if ( $wp_customize-&gt;is_preview() &amp;&amp; ! is_admin() )
		add_action( 'wp_footer', 'themename_customize_preview', 21);
</pre>
<p>This is going to add a new function call to our preview frame&#8217;s footer. It only gets added with the preview frame, so the live site and others won&#8217;t see it, because they don&#8217;t need to see it. This is where we&#8217;re going to output our javascript to make things happen in real-time.</p>
<p>Here&#8217;s our function:</p>
<pre class="brush: php; title: ; notranslate" title="">
function themename_customize_preview() {
	?&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
	( function( $ ){
	wp.customize('setting_name',function( value ) {
		value.bind(function(to) {
			$('.posttitle').css('color', to ? to : '' );
		});
	});
	} )( jQuery )
	&lt;/script&gt;
	&lt;?php 
} 
</pre>
<p>As you can see, it just outputs a bit of javascript. This code won&#8217;t change much, ever, so let&#8217;s go over just two pieces of importance: </p>
<ul>
<li>&#8216;setting_name&#8217; is the name of the setting, as added by the $wp_customize-&gt;add_setting call.</li>
<li>The entire line starting with jQuery(&#8216;.posttitle&#8217;) is our custom bit of code. It gets the &#8220;to&#8221; variable, which will be the color chosen by the user, and it sets the posttitles on the page to have that color, using the css modifying functionality of jquery.
</li>
</ul>
<p>Those are the only two bits you need to change, really. The rest is pretty copy-pasta. For each real-time setting, you can dupe this bit of code in the script.</p>
<p>Here&#8217;s another thing: You can change pre-existing refresh settings to be postMessage ones. Take the Site Title and Tagline elements in the Header section, for example. These are refresh settings, and the reason they are is because each theme implements them differently. There&#8217;s no way for the core to know the javascript code needed for any particular theme.</p>
<p>But if you&#8217;re a theme author, then you&#8217;re not writing for a generic theme. You&#8217;re writing for your particular theme. You know how the site title and tagline are displayed. There&#8217;s no reason you can&#8217;t make those update in real time. And while you&#8217;re at it, the header_textcolor setting can be real time too, since you know the theme code.</p>
<p>In your main function again, add these three lines of code:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;get_setting('blogname')-&gt;transport='postMessage';
	$wp_customize-&gt;get_setting('blogdescription')-&gt;transport='postMessage';
	$wp_customize-&gt;get_setting('header_textcolor')-&gt;transport='postMessage';
</pre>
<p>That changes the transport on those core settings to be postMessage. Now you need to add the javascript code to actually do the refreshing in your theme. Here&#8217;s an example of TwentyEleven doing this (with the patch I wrote for it):</p>
<pre class="brush: php; title: ; notranslate" title="">
function twentyeleven_customize_preview() {
	?&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
	( function( $ ){
	wp.customize('blogname',function( value ) {
		value.bind(function(to) {
			$('#site-title a').html(to);
		});
	});
	wp.customize('blogdescription',function( value ) {
		value.bind(function(to) {
			$('#site-description').html(to);
		});
	});
	wp.customize( 'header_textcolor', function( value ) {
		value.bind( function( to ) {
			$('#site-title a, #site-description').css('color', to ? to : '' );
		});
	});
	} )( jQuery )
	&lt;/script&gt;
	&lt;?php
}
</pre>
<p>For the blogname, it changes the HTML inside the &#8220;#site-title a&#8221; link. For the description, it changes the tag with #sitedescription. For the color of those, it simply targets both of them and alters their CSS.</p>
<p>Core has to try to be generic across all themes. But themes have more knowledge of how they work and can change things to target themselves in better ways. A theme adding controls knows what those controls change, so if it&#8217;s something simple like CSS or even something more complex like HTML, if you can write javascript code to make that modification in real time, then you can use postMessage and eliminate that refresh delay.</p>
<p>Hopefully this explains some of the theme customizer. Was it as clear as mud? Take a look at my patch to Twenty Eleven to add some of the theme options from its existing options screen into the customizer. You can find it on this ticket: <a href="http://core.trac.wordpress.org/ticket/20448">http://core.trac.wordpress.org/ticket/20448</a>.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bg' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/3-4/" rel="tag">3.4</a>, <a href="http://ottopress.com/tag/beta/" rel="tag">beta</a>, <a href="http://ottopress.com/tag/code-2/" rel="tag">code</a>, <a href="http://ottopress.com/tag/customizer/" rel="tag">customizer</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/how-to-leverage-the-theme-customizer-in-your-own-themes/#comments" title="Comment on How to leverage the Theme Customizer in your own themes">241 Comments</a>									 </div>
			</div>			<div id="post-771" class="post-771 post type-post status-publish format-standard hentry category-code category-rants category-wordpress tag-i18n tag-l10m tag-pomo tag-tacos tag-translation tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/internationalization-youre-probably-doing-it-wrong/" rel="bookmark" title="Permanent Link to Internationalization: You&#8217;re probably doing it wrong" itemprop="url"><span itemprop="name">Internationalization: You&#8217;re probably doing it wrong</span></a></h2>
				<div class="postmetadata">February 28, 2012, 3:15 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img src="http://i0.wp.com/ottopress.com/files/2012/02/international_flags.jpg?resize=280%2C280" alt="" title="international_flags" class="alignright size-full wp-image-777" data-recalc-dims="1" />Fun fact of the day: about 37% of WordPress downloads are for non-English, localized versions.</p>
<p>So as a plugin or theme author, you should be thinking of <a href="http://codex.wordpress.org/I18n_for_WordPress_Developers">localization and internationalization</a> (L10N and I18N) as pretty much a fact of life by this point.</p>
<p>Fun total guess of the day: based on my experience in browsing through the thing, roughly, ohh&#8230; <em>all</em> plugins and themes in the directory are doing-it-wrong in some manner. </p>
<p>Yes friends, even my code is guilty of this to some degree.</p>
<p>It&#8217;s understandable. When you&#8217;re writing the thing, generally you&#8217;re working on the functionality, not form. So you put strings in and figure &#8220;hey, no biggie, I can come back and add in the I18N stuff later.&#8221; Sometimes you even come back and do that later. </p>
<p>And you know what? You probably still get it wrong. I did. I still often do.</p>
<p>The reason you are getting it wrong is because doing I18N right is non-obvious. There&#8217;s tricks there, and rules that apply outside of the normal PHP ways of doing things.</p>
<p>So here&#8217;s the unbreakable laws of I18N, as pertaining to WordPress plugins and themes.</p>
<p>Note: This is not a tutorial, as such. You are expected to already be translating your code in some way, and to have a basic grasp on it. What I&#8217;m going to show you is stuff you are probably already doing, but which is wrong. With any luck, you will have much slapping-of-the-head during this read, since I&#8217;m hoping to give you that same insight I had, when I finally &#8220;got it&#8221;.</p>
<p>Also note: These are <strong>laws</strong>, folks. Not suggestions. Thou shalt not break them. They are not up for debate. What I&#8217;m going to present to you here today is <em>provably correct</em>. Sorry, I like a good argument as much as the next guy, but arguing against these just makes you wrong.</p>
<h3>Basic I18N functions</h3>
<p>First, lets quickly cover the two top translation functions. There&#8217;s more later, and the laws apply to them too, but these are the ones everybody should know and make the easiest examples.</p>
<p>The base translation function is __(). That&#8217;s the double-underscore function. It takes a string and translates it, according to the localization settings, then returns the string.</p>
<p>Then there&#8217;s the shortcut function of _e(). It does the same, but it echoes the result instead.</p>
<p>There&#8217;s several functions based around these, such as esc_attr_e() for example. These functions all behave identically to their counterparts put together. The esc_attr_e() function first runs the string through __(), then it does esc_attr() on it, then it echo&#8217;s it. These are named in a specific way so as to work with existing translation tools. All the following laws apply to them in the exact same way.</p>
<p>So, right down to it then.</p>
<h3>Law the First: Thou shalt not use PHP variables of any kind inside a translation function&#8217;s strings.</h3>
<p>This code is obviously wrong, or it should be:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = __($string, 'plugin-domain');
</pre>
<p>The reason you never do this is because translation relies on looking up strings in a table and then translating them. However, that list of strings to be translated is built by an automated process. Some code scans your PHP code, <em>without executing it</em>, and pulls out all the __()&#8217;s it finds, then builds the list of strings to be translated. That scanning code cannot possibly know what is inside $string.</p>
<p>However, sometimes it&#8217;s more subtle than that. For example, this is also wrong:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = __(&quot;You have $number tacos&quot;, 'plugin-domain');
</pre>
<p>The translated string here will be something like &#8216;You have 12 tacos&#8217;, but the scanning code can&#8217;t know what $number is in advance, nor is it feasible to expect your translators to translate all cases of what $number could be anyway.</p>
<p>Basically, double quoted strings in translation functions are <strong>always</strong> suspect, and probably wrong. But that rule can&#8217;t be hard and fast, because using string operations like &#8216;You have &#8216;.$number.&#8217; tacos&#8217; is equally wrong, for the exact same reason.</p>
<p>Here&#8217;s a couple of wrongs that people like to argue with:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = __('You have 12 tacos', $plugin_domain);
$string = __('You have 12 tacos', PLUGIN_DOMAIN);
</pre>
<p>These are both cases of the same thing. Basically, you decided that repetition is bad, so you define the plugin domain somewhere central, then reference it everywhere.</p>
<p>Mark Jaquith <a href="http://markjaquith.wordpress.com/2011/10/06/translating-wordpress-plugins-and-themes-dont-get-clever/">went into some detail</a> on why this is wrong on his blog, so I will refer you to that, but I&#8217;ll also espouse a general principle here.</p>
<p>I said this above, and I&#8217;m going to repeat it: &#8220;<em>that list of strings to be translated is built by an automated process</em>&#8220;. When I&#8217;m making some code to read your code and parse it, I&#8217;m <em>not</em> running your code. I&#8217;m parsing it. And while the general simplistic case of building a list of strings does not require me to know your plugin&#8217;s text domain, a more complicated case might. There are legitimate reasons that we want your domain to be plain text and not some kind of variable.</p>
<p>For starters, what if we did something like make a system where you could translate your strings right on the wordpress.org website? Or build a system where you could enlist volunteer translators to translate your strings for you? Or made a system where people could easily download localized versions of your plugin, with the relevant translations already included?</p>
<p>These are but a few ideas, but for all of them, that text domain must be a plain string. Not a variable. Not a define.</p>
<p>Bottom line: <em>Inside all translation functions, no PHP variables are allowed in the strings, for any reason, ever.</em> Plain single-quoted strings only.</p>
<h3>Law the Second: Thou shalt always translate phrases and not words.</h3>
<p>One way people often try to get around not using variables is like the following:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = __('You have ', 'plugin') . $number . __(' tacos', 'plugin-domain');
</pre>
<p>No! Bad coder! Bad!</p>
<p>English is a language of words. Other languages are not as flexible. In some other languages, the subject comes first. Your method doesn&#8217;t work here, unless the localizer makes &#8220;tacos&#8221; into &#8220;you have&#8221; and vice-versa.</p>
<p>This is the correct way:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('You have %d tacos', 'plugin-domain'), $number );
</pre>
<p>The localizer doing your translation can then write the equivalent in his language, leaving the %d in the right place. Note that in this case, the %d is not a PHP variable, it&#8217;s a placeholder for the number.</p>
<p>In fact, this is a good place to introduce a new function to deal with pluralization. Nobody has &#8220;1 tacos&#8221;. So we can write this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( _n('You have %d taco.', 'You have %d tacos.', $number, 'plugin-domain'), $number );
</pre>
<p>The _n function is a translation function that picks the first string if the $number (third parameter to _n) is one, or the second one if it&#8217;s more than one. We still have to use the sprintf to replace the placeholder with the actual number, but now the pluralization can be translated separately, and as part of the whole phrase. Note that the last argument to _n is still the plugin text domain to be used.</p>
<p>Note that some languages have more than just a singular and a plural form. You may need special handling sometimes, but this will get you there most of the time. Polish in particular has pluralization rules that have different words for 1, for numbers ending in 2, 3, and 4, and for numbers ending in 5-1 (except 1 itself). That&#8217;s okay, _n can handle these special cases with special pluralization handling in the translator files, and you generally don&#8217;t need to worry about it as long as you specify the plural form in a sane way, using the whole phrase.</p>
<p>You might also note that _n() is the one and only translation function that can have a PHP variable in it. This is because that third variable is always going to be a number, not a string. Therefore no automated process that builds strings from scanning code will care about what it is. You do need to take care than the $number in _n is always a number though. It will not be using that $number to insert into the string, it will be selecting which string to use based on its value.</p>
<p>Now, using placeholders can be complex, since sometimes things will have to be reversed. Take this example:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('You have %d tacos and %d burritos', 'plugin-domain'), $taco_count, $burrito_count );
</pre>
<p>What if a language has some strange condition where they would never put tacos before burritos? It just wouldn&#8217;t be done. The translator would have to rewrite this to have the burrito count first. But he can&#8217;t, the placeholders are such that the $taco_count is expected to be first in the sprintf. The solution:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('You have %1$d tacos and %2$d burritos', 'plugin-domain'), $taco_count, $burrito_count );
</pre>
<p>The %1$d and such is an alternate form that PHP allows called &#8220;<a href="http://php.net/manual/en/function.sprintf.php">argument swapping</a>&#8220;. In this case, the translator could write it correctly, but put the burritos before the tacos by simply putting %2$d before %1$d in the string.</p>
<p>Note that when you use argument swapping, that single-quoted string thing becomes <em>very</em> important. If you have &#8220;%1$s&#8221; in double quotes, then PHP will see that $s and try to put your $s variable in there. In <a href="http://quirm.net/2011/09/20/using-s-with-double-quotes-in-wordpress/">at least one case</a>, this has caused an accidental Cross-Site-Scripting security issue.</p>
<p><strong>So repeat after me</strong>: &#8220;<em>I will always only use single-quoted strings in I18N functions.</em>&#8221; There. Now you&#8217;re safe again. This probably should be a law, but since it&#8217;s safe to use double-quoted strings as long as you don&#8217;t use PHP variables (thus breaking the first law), I&#8217;ll just leave you to think about it instead. <img src="http://i1.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<h3>Law the Third: Thou shalt disambiguate when needed.</h3>
<p>When I say &#8220;comment&#8221; to you, am I talking about a comment on my site, or am I asking you to make a comment? How about &#8220;test&#8221;? <a href="http://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo">Or even &#8220;buffalo&#8221;?</a></p>
<p>English has words and phrases that can have different meanings depending on context. In other languages, these same concepts can be different words or phrases entirely. To help translators out, use the _x() function for them.</p>
<p>The _x() function is similar to the __() function, but it has a comment section where the context can be specified.</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = _x( 'Buffalo', 'an animal', 'plugin-domain' );
$string = _x( 'Buffalo', 'a city in New York', 'plugin-domain' );
$string = _x( 'Buffalo', 'a verb meaning to confuse somebody', 'plugin-domain' );
</pre>
<p>Though these strings are identical, the translators will get separated strings, along with the explanation of what they are, and they can translate them accordingly.</p>
<p>And just like __() has _e() for immediate echoing, _x() has _ex() for the same thing. Use as needed.</p>
<p>Finally, this last one isn&#8217;t a law so much as something that annoys me. You&#8217;re free to argue about it if you like. <img src="http://i1.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<h3>Annoyance the First: Thou shalt not put unnecessary HTML markup into the translated string.</h3>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('&lt;h3&gt;You have %d tacos&lt;/h3&gt;', 'plugin-domain'), $number );
</pre>
<p>Why would you give the power to the translator to insert markup changes to your code? Markup should be eliminated from your translated strings wherever possible. Put it outside your strings instead.</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = '&lt;h3&gt;'.sprintf( __('You have %d tacos', 'plugin-domain'), $number ).'&lt;/h3&gt;';
</pre>
<p>Note that sometimes though, it&#8217;s perfectly acceptable. If you&#8217;re adding emphasis to a specific word, then that emphasis might be different in other languages. This is pretty rare though, and sometimes you can pull it out entirely. If I wanted a bold number of tacos, I&#8217;d use this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('You have %s tacos', 'plugin-domain'), '&lt;strong&gt;'.$number.'&lt;/strong&gt;' );
</pre>
<p>Or more preferably, the _n version of same that I discussed above.</p>
<h3>Conclusion</h3>
<p>Like I said at the beginning, we&#8217;ve all done these. I&#8217;ve broken all these laws of I18N in the past (I know some of my plugins still do), only to figure out that I was doing-it-wrong. Hopefully, you&#8217;ve spotted something here you&#8217;ve done (or are currently doing) and have realized from reading this exactly why your code is broken. The state of I18N in plugins and themes is pretty low, and that&#8217;s something I&#8217;d really like to get fixed in the long run. With any luck, this article will help. <img src="http://i1.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p><em>Disclaimer: Yes, I wrote this while hungry.</em></p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/be' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/i18n/" rel="tag">i18n</a>, <a href="http://ottopress.com/tag/l10m/" rel="tag">l10m</a>, <a href="http://ottopress.com/tag/pomo/" rel="tag">pomo</a>, <a href="http://ottopress.com/tag/tacos/" rel="tag">tacos</a>, <a href="http://ottopress.com/tag/translation/" rel="tag">translation</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/rants/" title="View all posts in Rants" rel="category tag">Rants</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/internationalization-youre-probably-doing-it-wrong/#comments" title="Comment on Internationalization: You&#8217;re probably doing it wrong">81 Comments</a>									 </div>
			</div>			<div id="post-763" class="post-763 post type-post status-publish format-standard hentry category-code category-wordpress tag-code-2 tag-demo tag-dependency tag-example tag-plugin tag-theme" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/themeplugin-dependencies/" rel="bookmark" title="Permanent Link to Theme/Plugin Dependencies" itemprop="url"><span itemprop="name">Theme/Plugin Dependencies</span></a></h2>
				<div class="postmetadata">February 6, 2012, 4:05 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>In trying to figure out what to talk about at WordCamp Atlanta, I remembered a question put to me in WordCamp Birmingham. The question was how can a theme developer easily make a plugin-dependency in their theme? </p>
<p>I wrote some code to do this sort of thing, just as an example/test/demonstration, but then after looking over the schedule, I found that <a href="http://2012.atlanta.wordcamp.org/session/got-awesome-theme-functionality-it-probably-needs-a-plugin/">Thomas Griffin had beat me to it</a>. After looking over his slides and having him walk me through his code, I realized that his solution was much more fully featured than mine, so I&#8217;m glad I didn&#8217;t present anything on this topic. <em>(I ended up just doing an answer session where I tried to answer any question put to me, and frankly that was much more fun than having slides, so I&#8217;m probably just going to do that from now on.)</em></p>
<p>You can find his cool library here, BTW: <a href="http://tgmpluginactivation.com/">http://tgmpluginactivation.com/</a></p>
<p>However, his solution is highly complex. The class he came up with is well done and fully-featured. He has capabilities for making notifications in the header space on the admin section, lightbox popups, bulk installs, forced activation, custom skinning, etc. It&#8217;s a big thing. While that&#8217;s great for a lot of people in terms of having code you can just drop-in and use, I thought that it doesn&#8217;t do much to teach how one can DIY it.</p>
<p>See, the code I wrote was tiny. It basically just provides some minor functionality to show a theme author how to detect installed plugins, how to detect when they&#8217;re active, how to build install and activate links, etc. It doesn&#8217;t do any pretty stuff. No custom skinning. No lightbox popups. All these things are possible, but if somebody hands you a hunk of library code to do them, then you know how to use that library, not how it works. I dislike using libraries for this reason.</p>
<p>So here&#8217;s the small class I wrote to do the same sort of thing, but in a very bare-bones style.</p>
<pre class="brush: php; title: ; notranslate" title="">
/* 

Simple class to let themes add dependencies on plugins in ways they might find useful

Example usage:

	$test = new Theme_Plugin_Dependency( 'simple-facebook-connect', 'http://ottopress.com/wordpress-plugins/simple-facebook-connect/' );
	if ( $test-&gt;check_active() ) 
		echo 'SFC is installed and activated!';
	else if ( $test-&gt;check() ) 
		echo 'SFC is installed, but not activated. &lt;a href=&quot;'.$test-&gt;activate_link().'&quot;&gt;Click here to activate the plugin.&lt;/a&gt;';
	else if ( $install_link = $test-&gt;install_link() )
		echo 'SFC is not installed. &lt;a href=&quot;'.$install_link.'&quot;&gt;Click here to install the plugin.&lt;/a&gt;';
	else 
		echo 'SFC is not installed and could not be found in the Plugin Directory. Please install this plugin manually.';

*/
if (!class_exists('Theme_Plugin_Dependency')) {
	class Theme_Plugin_Dependency {
		// input information from the theme
		var $slug;
		var $uri;

		// installed plugins and uris of them
		private $plugins; // holds the list of plugins and their info
		private $uris; // holds just the URIs for quick and easy searching

		// both slug and PluginURI are required for checking things
		function __construct( $slug, $uri ) {
			$this-&gt;slug = $slug;
			$this-&gt;uri = $uri;
			if ( empty( $this-&gt;plugins ) ) 
				$this-&gt;plugins = get_plugins();
			if ( empty( $this-&gt;uris ) ) 
				$this-&gt;uris = wp_list_pluck($this-&gt;plugins, 'PluginURI');
		}

		// return true if installed, false if not
		function check() {
			return in_array($this-&gt;uri, $this-&gt;uris);
		}

		// return true if installed and activated, false if not
		function check_active() {
			$plugin_file = $this-&gt;get_plugin_file();
			if ($plugin_file) return is_plugin_active($plugin_file);
			return false;
		}

		// gives a link to activate the plugin
		function activate_link() {
			$plugin_file = $this-&gt;get_plugin_file();
			if ($plugin_file) return wp_nonce_url(self_admin_url('plugins.php?action=activate&amp;plugin='.$plugin_file), 'activate-plugin_'.$plugin_file);
			return false;
		}

		// return a nonced installation link for the plugin. checks wordpress.org to make sure it's there first.
		function install_link() {
			include_once ABSPATH . 'wp-admin/includes/plugin-install.php';

			$info = plugins_api('plugin_information', array('slug' =&gt; $this-&gt;slug ));

			if ( is_wp_error( $info ) ) 
				return false; // plugin not available from wordpress.org

			return wp_nonce_url(self_admin_url('update.php?action=install-plugin&amp;plugin=' . $this-&gt;slug), 'install-plugin_' . $this-&gt;slug);
		}

		// return array key of plugin if installed, false if not, private because this isn't needed for themes, generally
		private function get_plugin_file() {
			return array_search($this-&gt;uri, $this-&gt;uris);
		}
	}
}
</pre>
<p>Obviously, for theme authors wanting to do something, they&#8217;re going to want to make much prettier means of displaying things and installing things. Thus, this code is meant as an example, to show the basics of how to detect such things.</p>
<p>So, use it directly if you like (it works), but more importantly, if you want to put plugin dependancies in your theme, then I suggest reading it and figuring out how it works instead. Then you can see how plugins can be detected and how to build simple install and activation links.</p>
<p>(BTW, note that I used the slug and the PluginURI for a reason. Plugins should be using a unique URL for the plugin in their code, and that URL is very likely to be the most unique thing about the plugin, and therefore the best way to check for a plugin already being there or not. Slugs can be duplicated by accident or design, but URLs are generally going to be unique and specific to a particular plugin.)</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bc' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/code-2/" rel="tag">code</a>, <a href="http://ottopress.com/tag/demo/" rel="tag">demo</a>, <a href="http://ottopress.com/tag/dependency/" rel="tag">dependency</a>, <a href="http://ottopress.com/tag/example/" rel="tag">example</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/themeplugin-dependencies/#comments" title="Comment on Theme/Plugin Dependencies">31 Comments</a>									 </div>
			</div>			<div id="post-761" class="post-761 post type-post status-publish format-standard hentry category-code category-other tag-1-2 tag-facebook tag-oauth tag-sfc tag-simple-facebook-connect" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/using-sfc-got-an-email-from-facebook/" rel="bookmark" title="Permanent Link to Using SFC? Got an email from Facebook?" itemprop="url"><span itemprop="name">Using SFC? Got an email from Facebook?</span></a></h2>
				<div class="postmetadata">January 26, 2012, 3:19 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img class="alignright size-thumbnail wp-image-240" title="facebook-logo" src="http://i2.wp.com/ottopress.com/files/2010/08/facebook-logo.png?resize=200%2C200" alt="" data-recalc-dims="1" />Some people have been forwarding me this email message that they received from Facebook:</p>
<blockquote><p>We currently detect that your app is using the old JavaScript SDK (FeatureLoader.js). This library will no longer work for authentication on February 1st, 2012 since it does not support OAuth 2.0. In May, we announced that all apps on Facebook need to support OAuth 2.0 by October 1st, 2011. Please upgrade to the new JavaScript SDK by February 1st, 2012 to avoid any disruption of service to your app.</p></blockquote>
<p>The Simple Facebook Connect plugin has not used the FeatureLoader.js script since before version 1.0, which was released 5 months ago. Version 1.2 of SFC fully integrated OAuth 2.0 authentication, and it was released 5 weeks ago.</p>
<p>So if you&#8217;re getting this email from Facebook, upgrade SFC to the latest version. Problem solved.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bb' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/1-2/" rel="tag">1.2</a>, <a href="http://ottopress.com/tag/facebook/" rel="tag">facebook</a>, <a href="http://ottopress.com/tag/oauth/" rel="tag">oauth</a>, <a href="http://ottopress.com/tag/sfc/" rel="tag">sfc</a>, <a href="http://ottopress.com/tag/simple-facebook-connect/" rel="tag">simple-facebook-connect</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/using-sfc-got-an-email-from-facebook/#comments" title="Comment on Using SFC? Got an email from Facebook?">1 Comment</a>									 </div>
			</div>			<div id="post-756" class="post-756 post type-post status-publish format-standard hentry category-code category-wordpress tag-autocomplete tag-comment tag-form tag-google tag-plugin tag-snippet tag-x-autocompletetype" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/comment-form-autocomplete-snippet/" rel="bookmark" title="Permanent Link to Comment Form Autocomplete Snippet" itemprop="url"><span itemprop="name">Comment Form Autocomplete Snippet</span></a></h2>
				<div class="postmetadata">January 25, 2012, 3:26 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Google <a href="http://googlewebmastercentral.blogspot.com/2012/01/making-form-filling-faster-easier-and.html">came out with</a> an <a href="http://wiki.whatwg.org/wiki/Autocompletetype">experimental specification</a> for websites to provide &#8220;hints&#8221; on forms, to allow things like autocomplete to work better and be more standardized. Seems useful.</p>
<p>Here&#8217;s a quick plugin snippet you can use to make your comments form use this specification. Only Chrome 15 and up is using this at the moment, but in the long run I think most browsers will be implementing something similar to this, since filling out forms is just one of those endless pieces of drudgery that we could all stand to do away with.</p>
<p>Note that your theme will need to be using the comment_form() function call for this to work, otherwise you&#8217;ll just have to edit your comment form in the theme manually.</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php
/*
Plugin Name: Add X-Autocomplete Fields to Comment Form
*/
add_filter('comment_form_default_fields','add_x_autocompletetype');
function add_x_autocompletetype($fields) {
	$fields['author'] = str_replace('&lt;input', '&lt;input x-autocompletetype=&quot;name-full&quot;', $fields['author']);
	$fields['email'] = str_replace('&lt;input', '&lt;input x-autocompletetype=&quot;email&quot;', $fields['email']);
	return $fields;
}
</pre>
<p>Simple little bit of code, really. Should work with any theme using the normal comment_form() function call.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ba' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/autocomplete/" rel="tag">autocomplete</a>, <a href="http://ottopress.com/tag/comment/" rel="tag">comment</a>, <a href="http://ottopress.com/tag/form/" rel="tag">form</a>, <a href="http://ottopress.com/tag/google/" rel="tag">google</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/snippet/" rel="tag">snippet</a>, <a href="http://ottopress.com/tag/x-autocompletetype/" rel="tag">x-autocompletetype</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/comment-form-autocomplete-snippet/#comments" title="Comment on Comment Form Autocomplete Snippet">2 Comments</a>									 </div>
			</div>
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/category/code/page/3/?repeat=w3tc" >&laquo; Previous Entries</a></div>
			<div class="alignright"><a href="http://ottopress.com/category/code/?repeat=w3tc" >Next Entries &raquo;</a></div>
		</div>
		
	
	</div>
	<div id="sidebar">
		<ul>
			
			<li id="paypal-donate" class="widget widget_wpaypal"><h2 class="widgettitle">Buy Otto a Beer</h2>
<div style="margin-top:5px;margin-bottom:5px;text-align:left;">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
		<p><input type="hidden" name="cmd" value="_xclick" />
		<input type="hidden" name="business" value="otto@ottodestruct.com" />
		<input type="hidden" name="item_name" value="Donation to Otto on WordPress" />
		<input type="hidden" name="item_number" value="0" />
		<input type="hidden" name="notify_url" value="" />
		<input type="hidden" name="no_shipping" value="1" /><input type="hidden" name="return" value="http://ottopress.com" />
		<input type="hidden" name="no_note" value="1" />
		<input type="hidden" name="tax" value="0" />
		<input type="hidden" name="bn" value="PP-DonationsBF" />
		<input type="hidden" name="on0" value="Website" />
		Currency: <br />
		<select id="currency_code" name="currency_code">
		<option value="USD">U.S. Dollars</option>
		<option value="AUD">Australian Dollars</option>
		<option value="CAD">Canadian Dollars</option>
		<option value="EUR">Euros</option>
		<option value="GBP">Pounds Sterling</option>
		<option value="JPY">Yen</option></select></p>
		<p>Amount: <br /><input type="text" name="amount" size="16" title="The amount you wish to donate" value="5.00" /></p>
		<p>Website(Optional): <br /><input type="text" size="16" title="Your website (will be displayed)" name="os0" value="" /></p><p><input class="ppimg" type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" name="submit" style="border:0;" alt="Make payments with PayPal - fast, free and secure" /></p></form></div></li>
<li id="text-7" class="widget widget_text">			<div class="textwidget">Hey, I also take Bitcoins! Send them to: </br>
<a href="bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg">
<img src="https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg" /><br />
1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg</a></div>
		</li>
<li id="text-5" class="widget widget_text"><h2 class="widgettitle">Subscribe!</h2>
			<div class="textwidget"><!-- <a href="https://plus.google.com/111166992820603637934?prsrc=3" style="cursor:pointer;display:inline-block;text-decoration:none;color:#333;font:13px/16px arial,sans-serif;"><span style="display:inline-block;font-weight:bold;vertical-align:top;margin-right:5px;margin-top:8px;">Otto on WordPress</span><span style="display:inline-block;vertical-align:top;margin-right:15px;margin-top:8px;">on</span><img src="https://ssl.gstatic.com/images/icons/gplus-32.png" alt="" style="border:0;width:32px;height:32px;"/></a>
-->
<div class="g-plus" data-href="https://plus.google.com/111166992820603637934?rel=publisher" data-width="250" data-height="131" data-theme="light"></div>
</div>
		</li>
<li id="blog_subscription-3" class="widget jetpack_subscription_widget"><h2 class="widgettitle"><label for="subscribe-field"></label></h2>

		<form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3">
			<p id="subscribe-text">Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p><p>Join 331 other subscribers</p>

			<p id="subscribe-email"><input type="text" name="email" value="Email Address" id="subscribe-field" onclick="if ( this.value == 'Email Address' ) { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = 'Email Address'; }" /></p>

			<p id="subscribe-submit">
				<input type="hidden" name="action" value="subscribe" />
				<input type="hidden" name="source" value="http://ottopress.com/category/code/page/2/?repeat=w3tc" />
				<input type="hidden" name="sub-type" value="widget" />
				<input type="hidden" name="redirect_fragment" value="blog_subscription-3" />
								<input type="submit" value="Subscribe" name="jetpack_subscriptions_widget" />
			</p>
		</form>

		
</li>
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Email Me</h2>
			<div class="textwidget"><ul><li><span class="vcard microid-mailto+http:sha1:23e9670868f6d2b16fe1f6b3db80c8f0423a082a">
<span style="display:none;">
<span class="adr">
 <span class="locality">Memphis</span>,
 <span class="region">TN</span>
 <span class="postal-code">38103</span>
 <span class="country-name">U.S.A.</span>
</span>
<a class="url fn" href="http://ottodestruct.com">Otto</a>
<span class="uid">240cf86e-5cad-11dc-8314-0800200c9a66</span>
</span>
<a class="email" href="mailto:otto@ottodestruct.com">otto@ottodestruct.com</a></span></li></ul>
<a rel="author" href="https://plus.google.com/100201852715113506716?rel=author">
  <img src="https://ssl.gstatic.com/images/icons/gplus-16.png" width="16" height="16">
</a>
</a>
<!-- 

This rant is hidden in HTML comments. If I pointed you to it, then you probably emailed me about the fact that my email address is in plaintext directly above this comment. If you happened to run across it because you just like looking at HTML comments, well, easter egg! :)

YES, that is a bare mailto: href above. 
YES, that is my real email address. 
And YES, it's intentional.

Obfuscating your email address on the web is stupid. 

Firstly, hiding your email address doesn't prevent spam. Spammers get addresses in bulk from mailing lists and websites and other sources. Sure, some scrapers exist, but they are by far the minority of the sources for email lists.

Secondly, hiding your email address ruins the whole point of email. The purpose of publishing my email address is so that anybody, and I do mean *anybody*, can email me. Before the days of cell phones, your phone number and physical address used to be published in a big book that everybody received, for free, on a semi-annual basis. It had distinctive yellow pages in it. Your contact information is not, and never was supposed to be, private information. Treating it as such is stupid.

Thirdly, I have great spam protection. For one, I use GMail, which has frankly incredible filtering because of the volume of mail they deal with. For another, I use various sets of filters to categorize incoming mail into various categories of things. Hell, I can even run statistics on it, if I want. This is a much better solution than continually giving out fake email addresses, or using +stuff to figure out who sent what where... I'd prefer to simply let my filters deal with it instead. 

Finally, if you're one of those systems that scours the web and/or social networks for visible email addresses and then automatically emails that person to let them know that their address is visible, then by all means please just fuck off and die. You're part of the problem. On the other hand, if you're just a regular guy with good intentions, then this doesn't apply to you. :)

Just my 2 cents.

--></div>
		</li>
<li id="categories-2" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-573 current-cat"><a href="http://ottopress.com/category/code/" title="View all posts filed under Code">Code</a>
</li>
	<li class="cat-item cat-item-574"><a href="http://ottopress.com/category/other/" title="View all posts filed under Other">Other</a>
</li>
	<li class="cat-item cat-item-575"><a href="http://ottopress.com/category/rants/" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://ottopress.com/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-576"><a href="http://ottopress.com/category/wordpress/" title="View all posts filed under WordPress">WordPress</a>
</li>
		</ul>
</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://ottopress.com/2014/02/'>February 2014</a></li>
	<li><a href='http://ottopress.com/2013/11/'>November 2013</a></li>
	<li><a href='http://ottopress.com/2013/10/'>October 2013</a></li>
	<li><a href='http://ottopress.com/2013/06/'>June 2013</a></li>
	<li><a href='http://ottopress.com/2013/03/'>March 2013</a></li>
	<li><a href='http://ottopress.com/2012/11/'>November 2012</a></li>
	<li><a href='http://ottopress.com/2012/09/'>September 2012</a></li>
	<li><a href='http://ottopress.com/2012/08/'>August 2012</a></li>
	<li><a href='http://ottopress.com/2012/07/'>July 2012</a></li>
	<li><a href='http://ottopress.com/2012/05/'>May 2012</a></li>
	<li><a href='http://ottopress.com/2012/02/'>February 2012</a></li>
	<li><a href='http://ottopress.com/2012/01/'>January 2012</a></li>
	<li><a href='http://ottopress.com/2011/12/'>December 2011</a></li>
	<li><a href='http://ottopress.com/2011/11/'>November 2011</a></li>
	<li><a href='http://ottopress.com/2011/10/'>October 2011</a></li>
	<li><a href='http://ottopress.com/2011/09/'>September 2011</a></li>
	<li><a href='http://ottopress.com/2011/08/'>August 2011</a></li>
	<li><a href='http://ottopress.com/2011/07/'>July 2011</a></li>
	<li><a href='http://ottopress.com/2011/06/'>June 2011</a></li>
	<li><a href='http://ottopress.com/2011/05/'>May 2011</a></li>
	<li><a href='http://ottopress.com/2011/04/'>April 2011</a></li>
	<li><a href='http://ottopress.com/2011/03/'>March 2011</a></li>
	<li><a href='http://ottopress.com/2011/02/'>February 2011</a></li>
	<li><a href='http://ottopress.com/2011/01/'>January 2011</a></li>
	<li><a href='http://ottopress.com/2010/12/'>December 2010</a></li>
	<li><a href='http://ottopress.com/2010/11/'>November 2010</a></li>
	<li><a href='http://ottopress.com/2010/10/'>October 2010</a></li>
	<li><a href='http://ottopress.com/2010/09/'>September 2010</a></li>
	<li><a href='http://ottopress.com/2010/08/'>August 2010</a></li>
	<li><a href='http://ottopress.com/2010/06/'>June 2010</a></li>
	<li><a href='http://ottopress.com/2010/05/'>May 2010</a></li>
	<li><a href='http://ottopress.com/2010/04/'>April 2010</a></li>
	<li><a href='http://ottopress.com/2010/03/'>March 2010</a></li>
	<li><a href='http://ottopress.com/2010/02/'>February 2010</a></li>
	<li><a href='http://ottopress.com/2009/11/'>November 2009</a></li>
	<li><a href='http://ottopress.com/2009/09/'>September 2009</a></li>
	<li><a href='http://ottopress.com/2008/09/'>September 2008</a></li>
		</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/">Better Know a Vulnerability: SQL Injection</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/language-packs-101-prepwork/">Language Packs 101 &#8211; Prepwork</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/slides-a-presentation-theme/">Slides: A Presentation Theme</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/">I&#8217;m not a fan of orange&#8230;</a>
						</li>
				</ul>
		</li>
<li id="text-6" class="widget widget_text"><h2 class="widgettitle">WP Core Contributions</h2>
			<div class="textwidget"><p>
<a href='http://core.trac.wordpress.org/changeset/28072'>[28072]</a> - <a href='http://core.trac.wordpress.org/ticket/19393'>#19393</a><br />
<a href='http://core.trac.wordpress.org/changeset/27522'>[27522]</a> - <a href='http://core.trac.wordpress.org/ticket/19889'>#19889</a><br />
<a href='http://core.trac.wordpress.org/changeset/27399'>[27399]</a> - <a href='http://core.trac.wordpress.org/ticket/25665'>#25665</a><br />
<a href='http://core.trac.wordpress.org/changeset/26978'>[26978]</a> - <a href='http://core.trac.wordpress.org/ticket/23149'>#23149</a><br />
<a href='http://core.trac.wordpress.org/changeset/26711'>[26711]</a> - <a href='http://core.trac.wordpress.org/ticket/21442'>#21442</a><br />
<a href='http://core.trac.wordpress.org/changeset/26072'>[26072]</a> - <a href='http://core.trac.wordpress.org/ticket/25858'>#25858</a><br />
<a href='http://core.trac.wordpress.org/changeset/22152'>[22152]</a> - <a href='http://core.trac.wordpress.org/ticket/21914'>#21914</a><br />
<a href='http://core.trac.wordpress.org/changeset/22026'>[22026]</a> - <a href='http://core.trac.wordpress.org/ticket/22002'>#22002</a><br />
<a href='http://core.trac.wordpress.org/changeset/21839'>[21839]</a> - <a href='http://core.trac.wordpress.org/ticket/16996'>#16996</a><br />
<a href='http://core.trac.wordpress.org/changeset/21802'>[21802]</a> - <a href='http://core.trac.wordpress.org/ticket/18674'>#18674</a><br />
<a href='http://core.trac.wordpress.org/changeset/21776'>[21776]</a> - <a href='http://core.trac.wordpress.org/ticket/13729'>#13729</a><br />
<a href='http://core.trac.wordpress.org/changeset/21609'>[21609]</a> - <a href='http://core.trac.wordpress.org/ticket/19324'>#19324</a><br />
<a href='http://core.trac.wordpress.org/changeset/20916'>[20916]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20784'>[20784]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20783'>[20783]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20267'>[20267]</a> - <a href='http://core.trac.wordpress.org/ticket/13774'>#13774</a><br />
<a href='http://core.trac.wordpress.org/changeset/19721'>[19721]</a> - <a href='http://core.trac.wordpress.org/ticket/19626'>#19626</a><br />
<a href='http://core.trac.wordpress.org/changeset/19003'>[19003]</a> - <a href="http://core.trac.wordpress.org/ticket/17406">#17406</a><br />
<a href='http://core.trac.wordpress.org/changeset/18741'>[18741]</a> - <a href="http://core.trac.wordpress.org/ticket/15473">#15473</a><br />
<a href='http://core.trac.wordpress.org/changeset/18602'>[18602]</a> - <a href="http://core.trac.wordpress.org/ticket/18230">#18230</a><br />
<a href='http://core.trac.wordpress.org/changeset/18541'>[18541]</a> - <a href="http://core.trac.wordpress.org/ticket/16687">#16687</a><br />
<a href='http://core.trac.wordpress.org/changeset/18205'>[18205]</a> - <a href="http://core.trac.wordpress.org/ticket/17148">#17148</a><br />
<a href='http://core.trac.wordpress.org/changeset/17254'>[17254]</a> - <a href="http://core.trac.wordpress.org/ticket/16192">#16192</a><br />
<a href='http://core.trac.wordpress.org/changeset/16555'>[16555]</a> - <a href="http://core.trac.wordpress.org/ticket/12891">#12891</a><br />
<a href='http://core.trac.wordpress.org/changeset/16284'>[16284]</a> - <a href="http://core.trac.wordpress.org/ticket/13324">#13324</a><br />
<a href='http://core.trac.wordpress.org/changeset/13420'>[13420]</a> - <a href="http://core.trac.wordpress.org/ticket/12291">#12291</a><br />
<a href='http://core.trac.wordpress.org/changeset/12581'>[12581]</a> - <a href="http://core.trac.wordpress.org/ticket/7225">#7225</a><br />
<a href='http://core.trac.wordpress.org/changeset/11738'>[11738]</a> - <a href="http://core.trac.wordpress.org/ticket/10145">#10145</a><br />
<a href='http://core.trac.wordpress.org/changeset/11329'>[11329]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10962'>[10962]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10757'>[10757]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10753'>[10753]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10252'>[10252]</a> - <a href="http://core.trac.wordpress.org/ticket/6791">#6791</a><br />
<a href='http://core.trac.wordpress.org/changeset/9276'>[9276]</a> - <a href="http://core.trac.wordpress.org/ticket/7124">#7124</a><br />
<a href='http://core.trac.wordpress.org/changeset/9209'>[9209]</a> - <a href="http://core.trac.wordpress.org/ticket/7901">#7901</a><br />
<a href='http://core.trac.wordpress.org/changeset/9207'>[9207]</a> - <a href="http://core.trac.wordpress.org/ticket/7635">#7635</a><br />
<a href='http://core.trac.wordpress.org/changeset/9139'>[9139]</a> - <a href="http://core.trac.wordpress.org/ticket/7847">#7847</a><br />
<a href='http://core.trac.wordpress.org/changeset/9089'>[9089]</a> - <a href="http://core.trac.wordpress.org/ticket/7772">#7772</a><br />
<a href='http://core.trac.wordpress.org/changeset/8968'>[8968]</a> - <a href="http://core.trac.wordpress.org/ticket/7761">#7761</a><br />
<a href='http://core.trac.wordpress.org/changeset/8285'>[8285]</a> - <a href="http://core.trac.wordpress.org/ticket/6879">#6879</a><br />
<a href='http://core.trac.wordpress.org/changeset/8208'>[8208]</a> - <a href="http://core.trac.wordpress.org/ticket/4448">#4448</a><br />
<a href='http://core.trac.wordpress.org/changeset/8132'>[8132]</a> - <a href="http://core.trac.wordpress.org/ticket/4954">#4954</a><br />
<a href='http://core.trac.wordpress.org/changeset/8131'>[8131]</a> - <a href="http://core.trac.wordpress.org/ticket/6590">#6590</a><br />
<a href='http://core.trac.wordpress.org/changeset/7869'>[7869]</a> - <a href="http://core.trac.wordpress.org/ticket/6513">#6513</a><br />
<a href='http://core.trac.wordpress.org/changeset/7647'>[7647]</a> - <a href="http://core.trac.wordpress.org/ticket/6608">#6608</a><br />
<a href='http://core.trac.wordpress.org/changeset/7461'>[7461]</a> - <a href="http://core.trac.wordpress.org/ticket/6339">#6339</a><br />
<a href='http://core.trac.wordpress.org/changeset/6873'>[6873]</a> - <a href="http://core.trac.wordpress.org/ticket/4986">#4986</a><br />
<a href='http://core.trac.wordpress.org/changeset/6760'>[6760]</a> - <a href="http://core.trac.wordpress.org/ticket/4617">#4617</a><br />
<a href='http://core.trac.wordpress.org/changeset/6616'>[6616]</a> - <a href="http://core.trac.wordpress.org/ticket/5155">#5155</a><br />
<a href='http://core.trac.wordpress.org/changeset/6439'>[6439]</a> - <a href="http://core.trac.wordpress.org/ticket/2805">#2805</a><br />
<a href='http://core.trac.wordpress.org/changeset/6091'>[6091]</a> - <a href="http://core.trac.wordpress.org/ticket/4182">#4182</a><br />
<a href='http://core.trac.wordpress.org/changeset/6086'>[6086]</a> - <a href="http://core.trac.wordpress.org/ticket/4946">#4946</a><br />
<a href='http://core.trac.wordpress.org/changeset/5986'>[5986]</a> - <a href="http://core.trac.wordpress.org/ticket/4873">#4873</a><br />
<a href='http://core.trac.wordpress.org/changeset/5982'>[5982]</a> - <a href="http://core.trac.wordpress.org/ticket/4800">#4800</a><br />
<a href='http://core.trac.wordpress.org/changeset/5958'>[5958]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5920'>[5920]</a> - <a href="http://core.trac.wordpress.org/ticket/4703">#4703</a><br />
<a href='http://core.trac.wordpress.org/changeset/5910'>[5910]</a> - <a href="http://core.trac.wordpress.org/ticket/4654">#4654</a><br />
<a href='http://core.trac.wordpress.org/changeset/5881'>[5881]</a> - <a href="http://core.trac.wordpress.org/ticket/4704">#4704</a><br />
<a href='http://core.trac.wordpress.org/changeset/5857'>[5857]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5848'>[5848]</a> - <a href="http://core.trac.wordpress.org/ticket/4499">#4499</a><br />
<a href='http://core.trac.wordpress.org/changeset/5845'>[5845]</a> - <a href="http://core.trac.wordpress.org/ticket/4547">#4547</a><br />
<a href='http://core.trac.wordpress.org/changeset/5317'>[5317]</a> - <a href="http://core.trac.wordpress.org/ticket/4169">#4169</a><br />
<a href='http://core.trac.wordpress.org/changeset/5154'>[5154]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5151'>[5151]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5104'>[5104]</a> - <a href="http://core.trac.wordpress.org/ticket/3790">#3790</a><br />
<a href='http://core.trac.wordpress.org/changeset/4964'>[4964]</a> - <a href="http://core.trac.wordpress.org/ticket/3898">#3898</a><br />
</p></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<div style="float:left;"><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
<a href="http://ottopress.com/feed/">Entries (RSS)</a> and <a href="http://ottopress.com/comments/feed/">Comments (RSS)</a>.<br />
<span about="http://ottodestruct.com/" xmlns:cc="http://creativecommons.org/ns#">
This page, by <a property="cc:attributionName" rel="cc:attributionURL" href="http://ottodestruct.com/">Otto</a>, is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License</a>.</span><br />
Powered by <a href="http://wordpress.org/" title="Powered by WordPress.">WordPress</a>.<br />
		<script type="text/javascript">
		//<![CDATA[
		var infiniteScroll = {"settings":{"id":"content","ajaxurl":"http:\/\/ottopress.com\/?infinity=scrolling","type":"scroll","wrapper":false,"wrapper_class":"infinite-wrap","footer":false,"click_handle":"1","text":"Older posts","totop":"Scroll back to top","currentday":"03.08.12","order":"DESC","scripts":[],"styles":[],"google_analytics":false,"offset":2,"history":{"host":"ottopress.com","path":"\/category\/code\/page\/%d\/","use_trailing_slashes":true,"parameters":"?repeat=w3tc"},"query_args":{"paged":2,"category_name":"code","error":"","m":"","p":0,"post_parent":"","subpost":"","subpost_id":"","attachment":"","attachment_id":0,"name":"","static":"","pagename":"","page_id":0,"second":"","minute":"","hour":"","day":0,"monthnum":0,"year":0,"w":0,"tag":"","cat":573,"tag_id":"","author":"","author_name":"","feed":"","tb":"","comments_popup":"","meta_key":"","meta_value":"","preview":"","s":"","sentence":"","fields":"","menu_order":"","category__in":[],"category__not_in":[],"category__and":[],"post__in":[],"post__not_in":[],"tag__in":[],"tag__not_in":[],"tag__and":[],"tag_slug__in":[],"tag_slug__and":[],"post_parent__in":[],"post_parent__not_in":[],"author__in":[],"author__not_in":[],"posts_per_page":7,"ignore_sticky_posts":false,"suppress_filters":false,"cache_results":true,"update_post_term_cache":true,"update_post_meta_cache":true,"post_type":"","nopaging":false,"comments_per_page":"50","no_found_rows":false,"order":"DESC"},"last_post_date":"2012-01-25 15:26:36","stats":"blog=12342457&host=ottopress.com&v=ext&j=1:3.0.2&x_pagetype=infinite-jetpack"}};
		//]]>
		</script>
		<img alt='css.php' src="http://ottopress.com/wp-content/plugins/cookies-for-comments/css.php?k=c6a73cb029f035cdaa9e9e8336d25169&amp;o=i&amp;t=34065745" width='1' height='1' />	<div style="display:none">
	</div>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCss.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.js?ver=20140514'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en-US","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.14.2'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
<script type="text/javascript">
			jQuery.extend( infiniteScroll.settings.scripts, ["jquery-core","jquery-migrate","jquery","tiled-gallery","spin","jquery.spin","syntaxhighlighter-core","syntaxhighlighter-brush-php","syntaxhighlighter-brush-css","the-neverending-homepage","jetpack-photon","devicepx","mediaelement","wp-mediaelement","grofiles-cards","wpgroho"] );
			jQuery.extend( infiniteScroll.settings.styles, ["yarppWidgetCss","jetpack-subscriptions","the-neverending-homepage","tiled-gallery","mediaelement","wp-mediaelement"] );
		</script>
	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.2',blog:'12342457',post:'0',tz:'-5'});
	var load_cmc = function(){linktracker_init(12342457,0,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></div></div>

<script type="text/javascript">
    window._idl = {};
    _idl.variant = "modal";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

</body>
</html>

