http://ottopress.com/2011/tutorial-using-the-wp_filesystem/
HTTP/1.1 200 OK
Server: nginx/1.4.4
Date: Tue, 22 Jul 2014 15:25:16 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Pingback: http://ottopress.com/xmlrpc.php
Link: <http://otto42.com/96>; rel=shortlink

<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>Tutorial: Using the WP_Filesystem &raquo; Otto on WordPress</title>

<link rel="profile" href="http://www.w3.org/1999/xhtml/vocab" />
<link rel="me" type="text/html" href="https://plus.google.com/100201852715113506716" />

<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/style.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/print.css" type="text/css" media="print" />

<link rel="pingback" href="http://ottopress.com/xmlrpc.php" />

<meta property="og:email" content="otto@ottodestruct.com" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">

<script type="text/javascript">var description = '';</script>
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="IvlRFnRHu9RIiAiOS-bo-8vU4ju4V6_b4U3M_-1jlXQ" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Feed" href="http://ottopress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Comments Feed" href="http://ottopress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Tutorial: Using the WP_Filesystem Comments Feed" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/feed/" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='tiled-gallery-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.css?ver=2012-09-21' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.13.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery-migrate.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottodestruct.com/op/wp-content/plugins/gravatar-box/jquery.md5.js?ver=1.0'></script>
<script type='text/javascript' src='http://ottodestruct.com/op/wp-content/plugins/gravatar-box/gravbox.js?ver=1.0'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ottopress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ottopress.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='SFC Quickie: Facebook Insights' href='http://ottopress.com/2011/sfc-quickie-facebook-insights/' />
<link rel='next' title='Post Formats Presentation' href='http://ottopress.com/2011/post-formats-presentation/' />
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://ottopress.com/2011/tutorial-using-the-wp_filesystem/' />
<link rel='shortlink' href='http://otto42.com/96' />
<meta name="pinterest" content="nopin" /><link rel="microsummary" type="text/plain" href="/2011/tutorial-using-the-wp_filesystem/?microsummary=1" /><link rel="shortcut icon" href="http://ottopress.com/wp-content/wp-logo-vs.png" /><link rel="author" href="https://plus.google.com/+SamuelOttoWood" title="Samuel “Otto” Wood on Google+" /> 

<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="Tutorial: Using the WP_Filesystem" />
<meta property="og:url" content="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/" />
<meta property="og:description" content="Note: An actual working implementation of the WP_Filesystem can be found in my Pluginception plugin. Lot of talk amongst theme authors recently about writing local files. Writing files from code, w..." />
<meta property="article:published_time" content="2011-04-05T20:28:38+00:00" />
<meta property="article:modified_time" content="2012-07-13T16:29:53+00:00" />
<meta property="article:author" content="http://ottopress.com/author/otto/" />
<meta property="og:site_name" content="Otto on WordPress" />
<meta property="og:image" content="http://ottopress.com/files/2011/04/connectinfo.png" />
<meta name="twitter:site" content="@ottodestruct" />
<meta name="twitter:image" content="http://ottopress.com/files/2011/04/connectinfo.png?w=240" />
<meta name="twitter:card" content="summary" />
<style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-27538437-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>

<body class="single single-post postid-471 single-format-standard">
<script type="text/javascript">
if (top.location != self.location) top.location.replace(self.location);
</script>
<div id="page">
<div id="header">
	<div id="headertitle">
		<h1><a href="http://ottopress.com" title="Otto on WordPress: You have to use an Ottopress to get fresh squeezed Otto.">Otto on WordPress</a></h1>
		<p>You have to use an Ottopress to get fresh squeezed Otto.</p>
	</div> 
	<!-- Search box (If you prefer having search form as a sidebar widget, remove this block) -->
	<div class="search">
		<form method="get" id="searchform" action="http://ottopress.com/">
<input type="search" size="20" results="5" name="s" id="s" placeholder="Search..." speech="speech" x-webkit-speech="x-webkit-speech" onwebkitspeechchange="this.form.submit();" />
</form>
	</div> 
	<!-- Search ends here-->
		
</div>
<div id="navbar">
<div id="nav">
<div class="menu"><ul><li ><a href="http://ottopress.com/">Home</a></li><li class="page_item page-item-5 page_item_has_children"><a href="http://ottopress.com/wordpress-plugins/">WordPress Plugins</a><ul class='children'><li class="page_item page-item-205"><a href="http://ottopress.com/wordpress-plugins/atd-for-comments/">After The Deadline For Comments</a></li><li class="page_item page-item-21"><a href="http://ottopress.com/wordpress-plugins/atom-default-feed/">Atom Default Feed</a></li><li class="page_item page-item-965"><a href="http://ottopress.com/wordpress-plugins/dropbox-photo-sideloader/">Dropbox Photo Sideloader</a></li><li class="page_item page-item-15"><a href="http://ottopress.com/wordpress-plugins/gravatar-box/">Gravatar Box</a></li><li class="page_item page-item-32"><a href="http://ottopress.com/wordpress-plugins/php-code-widget/">PHP Code Widget</a></li><li class="page_item page-item-7"><a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a></li><li class="page_item page-item-10"><a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a></li><li class="page_item page-item-81"><a href="http://ottopress.com/wordpress-plugins/unicornify/">Unicornify</a></li></ul></li><li class="page_item page-item-374"><a href="http://ottopress.com/contact/">Contact Otto</a></li><li><a href="http://ottodestruct.com" title="Nothing to See Here">Nothing to See Here</a></li><li><a href="http://buyottoabeer.com" title="Otto on Beer">Otto on Beer</a></li></ul></div>
	</div>
</div>
<div id="wrapper">
	<div id="content">

			
		<div class="navigation">
			<div class="alignleft">&laquo; <a href="http://ottopress.com/2011/sfc-quickie-facebook-insights/" rel="prev">SFC Quickie: Facebook Insights</a></div>
			<div class="alignright"><a href="http://ottopress.com/2011/post-formats-presentation/" rel="next">Post Formats Presentation</a> &raquo;</div>
		</div>

		<div class="post" id="post-471">
			<h2 class="posttitle"><a href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/" rel="bookmark" title="Permanent Link to Tutorial: Using the WP_Filesystem" itemprop="url"><span itemprop="name">Tutorial: Using the WP_Filesystem</span></a></h2>
			<div style="clear:none" class="postmetadata">April 5, 2011, 3:28 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
			<div class="postentry">
				<div itemprop="articleBody"><p><em>Note: An actual working implementation of the WP_Filesystem can be found in my <a href="http://wordpress.org/extend/plugins/pluginception/">Pluginception</a> plugin.</em></p>
<p>Lot of talk amongst theme authors recently about writing local files. Writing files from code, whether it be from a theme or from a plugin, is generally bad mojo. However understanding why you shouldn&#8217;t is confusing to many, and then understanding why you shouldn&#8217;t do-it-yourself and should use the WP_Filesystem is even more confusing. To further muddy up the waters, many theme authors have expressed confusion at how to use WP_Filesystem in the first place.</p>
<p>So, let&#8217;s run the gamut in this tutorial. Note that I wrote it quickly, so it may be uneven in parts. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_wink.gif?w=700" alt=";)" class="wp-smiley" data-recalc-dims="1" /> </p>
<h3>Why Not To Do It</h3>
<p>The most common reasons I see theme authors wanting to write local files falls into three categories:</p>
<ol>
<li>Dynamic CSS</li>
<li>Configuration Saving</li>
<li>Export/Import</li>
</ol>
<p>Take the Dynamic CSS case to start with, since it&#8217;s the most common one by far. Some theme authors say &#8220;I&#8217;m making a framework/system/construction-kit where the user can define their own theme/layout/color-schemes and thus produce a bunch of CSS. I want to save this CSS in the theme/uploads directory, and then put a link to it from their page, so that the browser downloads it from there.</p>
<p>Why they shouldn&#8217;t do that: There&#8217;s half a dozen reasons here, but the big two are a) put just the dynamic parts of CSS inline into the page instead, because it&#8217;s faster, simpler, and avoids an extra HTTP roundtrip for the user&#8217;s browser to get this CSS file and b) writing a CSS file locally is insecure as hell if you do it in the &#8220;natural&#8221; way.</p>
<p>Security is going to be a big issue for the next two items, so I&#8217;ll cover it right now.</p>
<p>Modern UNIX-like systems have the concept of &#8220;users&#8221;. When I SSH or FTP into my hosting account, then I&#8217;m logged in as me and my user account. However, my webserver doesn&#8217;t run as my user account. It runs under some different user account, usually &#8220;nobody&#8221; or &#8220;apache&#8221; or &#8220;web&#8221; or something similar to that.</p>
<p>So when I create files, they&#8217;re owned by me. When my webserver creates files, then they&#8217;re owned by the webserver&#8217;s user, whatever it is. Normally, this isn&#8217;t a big deal. The webserver can read and serve files either way, so who cares, right? Well, when you&#8217;re creating files that are owned by the webserver, then the webserver has permission to write to those files. It&#8217;s the owner of them, after all. What&#8217;s important here is that I&#8217;m not the only person on this webserver.</p>
<p>Shared hosting systems have many users files all served by the same webserver. So if I allow that &#8220;nobody&#8221; user to own files that are part of my webpage, then anybody else can use their account on the same webserver to modify those files, and thus modify my webpage. For the case of CSS files, this poses a cross-site-scripting risk. Somebody else on my shared webserver could insert code into my CSS files and change them so as to steal my account information. Bad mojo.</p>
<p>The other two, where theme authors are saving configuration or exporting and importing things have the same basic problems, although the risks might be even higher. In one case, I found a theme saving its configuration settings by creating a PHP file in the uploads directory and then using var_export to export the configuration variable to it. Then it proceeded to include this file when the theme loaded, to load its configuration back in. Talk about insecure, anybody running this theme is basically handing over the entire control of their website to <strong>anybody</strong> on the same web server.</p>
<h3>How To Do It Anyway</h3>
<p>&#8220;But Otto&#8221;, I hear you shouting from halfway around the world, &#8220;WordPress itself writes files all the time! It can even <em>upgrade itself</em>. How is this safe?&#8221; Well, Mr. Incredbly Loud Person, WordPress uses a system called WP_Filesystem to make this safe.</p>
<p>The WP_Filesystem basically support five different ways of writing files to the system and they all ensure that ownership of those files remains firmly in the hands of the same person that owns the WordPress files. In other words, it writes files using your user account and not as the webserver user.</p>
<p>I&#8217;m sure many people have seen this before:</p>
<p><a rel="attachment wp-att-472" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/connectinfo/"><img class="alignnone size-full wp-image-472" title="connectinfo" src="http://i1.wp.com/ottopress.com/files/2011/04/connectinfo.png?resize=503%2C290" alt="" data-recalc-dims="1" /></a></p>
<p>This is the basic connection information screen that appears when you try to upgrade a plugin or themes or even the core code, on certain hosts. Some people may be running on hosts that don&#8217;t pop up this screen, but the basic process behind it still exists.</p>
<p>Essentially, what is going on here is that WordPress does some tests to detect how it can write files to the server and keep the same owner for those files. If it can&#8217;t do it directly, then it does it indirectly via FTP. It needs your login credentials at this point in order to log in as you and thus write files as you instead of as the webserver user that it&#8217;s running under.</p>
<h3>How to Implement the WP_Filesystem code</h3>
<p>Implementing the WP_Filesystem is easy, really. But to do it from a form or options type of system, then you need to have a form or options type of system already. So let&#8217;s start out with an extremely basic form, such as one a theme might implement.</p>
<p><a rel="attachment wp-att-473" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/optionslink/"><img class="alignright size-full wp-image-473" title="optionslink" src="http://i1.wp.com/ottopress.com/files/2011/04/optionslink.png?resize=154%2C214" alt="" data-recalc-dims="1" /></a></p>
<pre class="brush: php; title: ; notranslate" title="">
// add the admin options page
add_action('admin_menu', 'otto_admin_add_page');

function otto_admin_add_page() {
	add_theme_page('Otto Test Page', 'Otto Test Options', 'edit_theme_options', 'otto', 'otto_options_page');
}
</pre>
<p>Okay, now we have a new options menu. Let&#8217;s make a form to put on that menu:</p>
<pre class="brush: php; title: ; notranslate" title="">
function otto_options_page() {
	if ( otto_check_buttons() ) return;
?&gt;
&lt;div&gt;
&lt;h2&gt;My custom options page&lt;/h2&gt;
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
&lt;?php wp_nonce_field('otto-theme-options'); ?&gt;
&lt;input name=&quot;save&quot; type=&quot;submit&quot; value=&quot;Save a file&quot; /&gt;
&lt;/form&gt;&lt;/div&gt;
&lt;?php
}
</pre>
<p>Simple, no-nonsense form. It calls a function to check the incoming button press first (see more below), then it displays a form. It outputs a nonce, makes a button called &#8220;Save a file&#8221; since that&#8217;s what we&#8217;re going to do, then stops. Easy.</p>
<p>Note that the otto_check_buttons() function returns true or false, and this then returns when it is true, thus not displaying the form. This is simply to allow us to display the normal form or not, depending on what we need to do later.</p>
<p>So, when you submit the form, then that otto_check_buttons() function is going to come into effect. Let&#8217;s look at the beginning of that function:</p>
<pre class="brush: php; title: ; notranslate" title="">
function otto_check_buttons() {
	if (empty($_POST)) return false;

	check_admin_referer('otto-theme-options');
</pre>
<p>The beginning of it is simple. If the user hasn&#8217;t submitted the form yet, then it just returns false to make the previous function display the form. Next it checks the referer nonce, to make sure the nonce is correct for the page we&#8217;re on. Let&#8217;s continue:</p>
<pre class="brush: php; title: ; notranslate" title="">
$form_fields = array ('save'); // this is a list of the form field contents I want passed along between page views
$method = 'ftp'; // Normally you leave this an empty string and it figures it out by itself, but you can override the filesystem method here

// check to see if we are trying to save a file
if (isset($_POST['save'])) {
</pre>
<p>Here, I&#8217;m defining two variables that I&#8217;m going to use later. The form_fields is an array of the names of the fields in the form that I want to pass along through that connection information screen. In this case, I defined my &#8220;save&#8221; input field before, and it&#8217;s something I&#8217;ll be checking later, so it has to pass through that form. What happens is that the connection information form generates an extra hidden input with the contents from my first form.</p>
<p>The method variable is not strictly necessary. I&#8217;m forcing it to use the &#8220;ftp&#8221; method for this demonstration code. Normally, you leave this blank and the system figures it out for itself. Changing &#8216;ftp&#8217; to just &#8221; here works fine.</p>
<p>Finally, you can see where I&#8217;m checking to make sure the save button was clicked. Moving on:</p>
<pre class="brush: php; title: ; notranslate" title="">
// okay, let's see about getting credentials
$url = wp_nonce_url('themes.php?page=otto','otto-theme-options');
if (false === ($creds = request_filesystem_credentials($url, $method, false, false, $form_fields) ) ) {
	// if we get here, then we don't have credentials yet,
	// but have just produced a form for the user to fill in,
	// so stop processing for now
	return true; // stop the normal page form from displaying
}
</pre>
<p>Now is the part where I get the credentials from the user. The request_filesystem_credentials() does several things.</p>
<ul>
<li>It checks to see what kind of credentials it needs (we&#8217;re forcing it to FTP in this case)</li>
<li>It checks to see if they&#8217;re pre-DEFINEd in the wp-config file</li>
<li>It checks the POST input to see if it has just received them and returns them if it has</li>
<li>It checks the database to see if it remembers the hostname/username from before</li>
<li>It produces the necessary form to display if it doesn&#8217;t have them</li>
</ul>
<p>The bottom line being that if it has the necessary credentials, it will return them. Else, it will output the form to be displayed to get the credentials, and then return false. So when it returns false, we know the form has been displayed, so we just exit and wait for the user to give us the necessary credentials.</p>
<p>When we get those credentials, we have to check to make sure they work. Here&#8217;s how we do that:</p>
<pre class="brush: php; title: ; notranslate" title="">
// now we have some credentials, try to get the wp_filesystem running
if ( ! WP_Filesystem($creds) ) {
	// our credentials were no good, ask the user for them again
	request_filesystem_credentials($url, $method, true, false, $form_fields);
	return true;
}
</pre>
<p>Simple, really. We call the WP_Filesystem and see if the credentials work. If not, we call request_filesystem_credentials a second time, but this time with the $error flag set. This produces the error message and form to the user so he can correct the information.</p>
<p>Finally, we should have working credentials from the user and all the information we need, so we use the $wp_filesystem global to write out a file.</p>
<pre class="brush: php; title: ; notranslate" title="">
// get the upload directory and make a test.txt file
$upload_dir = wp_upload_dir();
$filename = trailingslashit($upload_dir['path']).'test.txt';

// by this point, the $wp_filesystem global should be working, so let's use it to create a file
global $wp_filesystem;
if ( ! $wp_filesystem-&gt;put_contents( $filename, 'Test file contents', FS_CHMOD_FILE) ) {
	echo 'error saving file!';
}
</pre>
<p>That&#8217;s really all there is to it. I made a file in the upload directory called &#8220;test.txt&#8221; and wrote &#8220;Test file contents&#8221; to it. The global $wp_filesystem variable is what our call to WP_Filesystem($creds) created. This $wp_filesystem supports various different file functions, but the put_contents() function is the easiest one to understand. I gave it the filename, some contents, and the correct permissions for a file on the system. Simple and easy.</p>
<h3>Reasons to use WP_Filesystem</h3>
<p>Two big ones:</p>
<ul>
<li>Compatibility</li>
<li>Security</li>
</ul>
<p>Because of the various permissions systems in use, the WP_Filesystem supports many different ways of writing files to the system, but all abstracted out into simpler functions like put_contents() and get_contents() and such.</p>
<p>The only downside to it is that sometimes you need to ask the user for their account information in order to be able to get the access you need. But this is necessary in order to be secure, since you don&#8217;t want everybody else on the same server to be able to write to your files. And while you may have a server all to yourself, most of your users won&#8217;t. The most common setup for WP is on shared hosting, and if you&#8217;re creating a theme or a plugin, you should design for those users as well.</p>
<p>A copy of all the code above made into a demo plugin can be found here: <a href="http://ottopress.com/files/2011/04/wpfilesystem-demo.phps">wpfilesystem-demo.phps</a>.</p>
<div class="sharedaddy sd-block sd-social sd-gplus"><h3 class="sd-title">Google+</h3><div class="sd-content"><a href="https://plus.google.com/+SamuelOttoWood"><img src="https://lh5.googleusercontent.com/-sTIAD3oDYbs/AAAAAAAAAAI/AAAAAAAAGkQ/ZwW3H57HC8I/photo.jpg?sz=40" alt="Samuel “Otto” Wood" width="20" height="20" align="absmiddle" /> </a><a rel="author" href="https://plus.google.com/+SamuelOttoWood" class="gplus-profile">Samuel “Otto” Wood</a><span class="g-follow-wrapper"><span class="g-follow" data-href="https://plus.google.com/+SamuelOttoWood" data-rel="author" data-height="15"></span></span></div></div><div class='yarpp-related'>
<p class="yarpp">Related posts:</p><ol class="yarpp">
<li><a href="http://ottopress.com/2010/wordpress-3-0-multisite-domain-mapping-tutorial/" rel="bookmark" title="WordPress 3.0: Multisite Domain Mapping Tutorial">WordPress 3.0: Multisite Domain Mapping Tutorial </a></li>
</ol>
</div>
</div>
							</div>
<div><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/96' onclick='this.focus(); this.select();' />
</span></div>

			<div class="postmetadata">
				<div class="postmetadata">
										Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>					&nbsp;|&nbsp;&nbsp;<a href="#respond">Comment</a> (<a href='http://ottopress.com/2011/tutorial-using-the-wp_filesystem/feed/'>RSS</a>)					&nbsp;|&nbsp;&nbsp;<a href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/trackback/ " rel="trackback">Trackback</a>									 </div>
			</div>
    
		</div>
	<div id="comments">
	<h3>69 Comments </h3>
	<div class="navigation" style="clear:both">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>
	<div style="clear:both"></div>
	<ol class="commentlist">
		<li class="comment even thread-even depth-1 parent" id="comment-7973" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7973" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/5c59d04ceb10b7ce586524221d010b76?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://justintadlock.com' rel='external nofollow' class='url'>Justin Tadlock</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7973">
		<time itemprop="dateCreated" datetime="2011-04-05T15:36:07+00:00">April 5, 2011 at 3:36 pm</time></a>	</div>

	<div itemprop="text"><p>Thank you for writing this.  Now, I finally have a place to point people to when this crops up, which is just about once a week.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7973#respond' onclick='return addComment.moveForm("div-comment-7973", "7973", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-2 parent" id="comment-8001" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8001" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/fc1343c3b81fed5bef72db59279c719f?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pithemes.com' rel='external nofollow' class='url'>pixelDanny</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8001">
		<time itemprop="dateCreated" datetime="2011-04-06T16:52:52+00:00">April 6, 2011 at 4:52 pm</time></a>	</div>

	<div itemprop="text"><p>Agreed, great article.</p>
<p>To touch on the shared environment security issues described in the post &#8211; these only exist on hosts that have no idea how to handle security. A properly secured shared hosting environment will:</p>
<p>- Execute PHP as the user so any files written by it are automatically written as the user, not as nobody or apache or web or whatever<br />
- Not allow 777 permissions<br />
- Not allow a user to go outside of his home folder (meaning that even if 777 permissions are allowed they mean nothing since you can&#8217;t go outside of your environment)<br />
- Run modsec which if properly configured will stop most things on its own<br />
- Run suhosin which like modsec stops a whole bunch of stuff on its own</p>
<p>If your host is not doing the above you should seriously consider switching hosts because sooner or later you&#8217;re going to run into a badly coded plugin and / or theme that will ruin your day (not aimed at anyone, just a general statement).</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8001#respond' onclick='return addComment.moveForm("div-comment-8001", "8001", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-3" id="comment-8002" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8002" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8002">
		<time itemprop="dateCreated" datetime="2011-04-06T17:34:26+00:00">April 6, 2011 at 5:34 pm</time></a>	</div>

	<div itemprop="text"><p>FWIW, if you have a host who has set up their webserver using a setuid method (where the web process runs as the user who owns the PHP file), then the $wp_filesystem will be able to detect this and it will use the &#8220;direct&#8221; method. The direct method will have the request_filesystem_credentials() return true, and WP_Filesystem won&#8217;t need any form of FTP credentials. So this code will work and it won&#8217;t ask the user for connection information. </p>
<p>Many shared hosts are using setuid methods because it&#8217;s more secure in such a situation. However, on a non-shared hosting setup, a setuid configuration is less secure, and so should not be used.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8002#respond' onclick='return addComment.moveForm("div-comment-8002", "8002", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-2" id="comment-8182" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8182" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8182">
		<time itemprop="dateCreated" datetime="2011-04-25T13:55:56+00:00">April 25, 2011 at 1:55 pm</time></a>	</div>

	<div itemprop="text"><p>Also see these new pages:</p>
<p><a href="http://codex.wordpress.org/Filesystem_API" rel="nofollow">http://codex.wordpress.org/Filesystem_API</a><br />
<a href="http://codex.wordpress.org/Function_Reference/request_filesystem_credentials" rel="nofollow">http://codex.wordpress.org/Function_Reference/request_filesystem_credentials</a></p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8182#respond' onclick='return addComment.moveForm("div-comment-8182", "8182", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-7976" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7976" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/36f3cc244ad9bca475bc8763d26926aa?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Ken</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7976">
		<time itemprop="dateCreated" datetime="2011-04-05T17:58:03+00:00">April 5, 2011 at 5:58 pm</time></a>	</div>

	<div itemprop="text"><p>I&#8217;ve thought about &#8220;dynamic&#8221; styles in themes before and concluded that it doesn&#8217;t need to be dynamic per se, only updated when the user changes settings in the admin (no extra requests). The WP_Filesystem used on a settings update doesn&#8217;t seem terrible in that case.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7976#respond' onclick='return addComment.moveForm("div-comment-7976", "7976", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-2 parent" id="comment-7977" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7977" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/36f3cc244ad9bca475bc8763d26926aa?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Ken</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7977">
		<time itemprop="dateCreated" datetime="2011-04-05T18:24:41+00:00">April 5, 2011 at 6:24 pm</time></a>	</div>

	<div itemprop="text"><p>For a theme, wouldn&#8217;t it make more sense to write to the theme directory rather then uploads? This way the theme can &#8220;clean up&#8221; after itself when it&#8217;s deleted (since it has no uninstall yet, seems the only thing that can be cleaned up).</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7977#respond' onclick='return addComment.moveForm("div-comment-7977", "7977", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-3 parent" id="comment-7997" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7997" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7997">
		<time itemprop="dateCreated" datetime="2011-04-06T10:56:05+00:00">April 6, 2011 at 10:56 am</time></a>	</div>

	<div itemprop="text"><p>If you write files into the theme directory, then upgrading that theme will wipe out those files.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7997#respond' onclick='return addComment.moveForm("div-comment-7997", "7997", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-4" id="comment-11081" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11081" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/91fc842c0ee345e8bc6e864d3eef2a77?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Pamela</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11081">
		<time itemprop="dateCreated" datetime="2012-07-21T12:46:44+00:00">July 21, 2012 at 12:46 pm</time></a>	</div>

	<div itemprop="text"><p>What about using a child theme directory and style and custom.css there? Theme updates would not be an issue then.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11081#respond' onclick='return addComment.moveForm("div-comment-11081", "11081", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even depth-3 parent" id="comment-8322" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8322" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8322">
		<time itemprop="dateCreated" datetime="2011-05-08T03:16:26+00:00">May 8, 2011 at 3:16 am</time></a>	</div>

	<div itemprop="text"><p>A better option may be to include an uninstaller from within the theme itself.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8322#respond' onclick='return addComment.moveForm("div-comment-8322", "8322", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-4" id="comment-8445" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8445" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8445">
		<time itemprop="dateCreated" datetime="2011-05-20T08:13:18+00:00">May 20, 2011 at 8:13 am</time></a>	</div>

	<div itemprop="text"><p>Just to clarify my own point &#8230; I was suggesting writing an uninstaller for the theme which deleted the files in the uploads folder, not in the theme folder as they&#8217;d get deleted anyway of course.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8445#respond' onclick='return addComment.moveForm("div-comment-8445", "8445", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="comment-7982" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7982" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a1b78e753cb6bfc80cb048b87a1059b4?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://twitter.com/grantnorwood' rel='external nofollow' class='url'>Grant K Norwood</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7982">
		<time itemprop="dateCreated" datetime="2011-04-05T22:45:45+00:00">April 5, 2011 at 10:45 pm</time></a>	</div>

	<div itemprop="text"><p>really well done, thank you.</p>
<p>would you recommend securing a WP installation in order to prevent *other* plugins/themes from writing to the filesystem, especially outside of the uploads dir?  asked another way, if writing any files at all could be a security risk, should we effectively restrict that by denying the shared account user (that WP is using) write access to everything outside of the uploads dir?</p>
<p>i already ensure that the shared apache user always has read-only access to everything.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7982#respond' onclick='return addComment.moveForm("div-comment-7982", "7982", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-7987" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7987" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/e70d4086e89c2e1e081870865be68485?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Gary</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7987">
		<time itemprop="dateCreated" datetime="2011-04-06T02:39:55+00:00">April 6, 2011 at 2:39 am</time></a>	</div>

	<div itemprop="text"><p>Useful article, thanks Otto.</p>
<p>Does the theme / plugin editor use WP_Filesystem?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7987#respond' onclick='return addComment.moveForm("div-comment-7987", "7987", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-2 parent" id="comment-7996" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7996" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7996">
		<time itemprop="dateCreated" datetime="2011-04-06T10:44:53+00:00">April 6, 2011 at 10:44 am</time></a>	</div>

	<div itemprop="text"><p>No, the theme and plugin editors write the files directly. However, editing a file doesn&#8217;t change its ownership, it&#8217;s creating a new file that does that. Since the theme/plugin editors can&#8217;t create new files, they don&#8217;t need to use the WP_Filesystem.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7996#respond' onclick='return addComment.moveForm("div-comment-7996", "7996", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-3 parent" id="comment-7998" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7998" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/e70d4086e89c2e1e081870865be68485?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Gary</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7998">
		<time itemprop="dateCreated" datetime="2011-04-06T10:57:10+00:00">April 6, 2011 at 10:57 am</time></a>	</div>

	<div itemprop="text"><p>So if a theme is creating a file ( a .css, say), then it should use WP_Filesystem when it first creates the file, but can then write the file directly every time the settings are re-saved / the file edited? Is that correct?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7998#respond' onclick='return addComment.moveForm("div-comment-7998", "7998", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-4 parent" id="comment-8003" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8003" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8003">
		<time itemprop="dateCreated" datetime="2011-04-06T17:40:13+00:00">April 6, 2011 at 5:40 pm</time></a>	</div>

	<div itemprop="text"><p>You could do it that way, but doing so will cause you more headache than it&#8217;s worth, and it still won&#8217;t work on some server configurations. Best to just always use the WP_Filesystem to write files of any sort. </p>
<p>Better yet, revamp your code to not have to write files at all. Configuration should be stored in the database, not in files. set_theme_mod() and get_theme_mod() are extremely useful for theme authors.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8003#respond' onclick='return addComment.moveForm("div-comment-8003", "8003", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-5" id="comment-8007" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8007" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/8b582ac8699d155eb5ae6dbe37b54431?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://twitter.com/WraithKenny' rel='external nofollow' class='url'>Kenneth Newman</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8007">
		<time itemprop="dateCreated" datetime="2011-04-06T19:00:13+00:00">April 6, 2011 at 7:00 pm</time></a>	</div>

	<div itemprop="text"><p>set_theme_mod() and get_theme_mod() aren&#8217;t well documented. Reading the source code for examples on how to use these functions puts off theme developers. Now that you opened the pandora&#8217;s box of WP_Filesystem, a tutorial on Theme Mods would help stem the flow of new Dynamic CSS themes <img src="http://ottopress.com/wp-content/plugins/classic-smilies/img/icon_wink.gif" alt=";-)" class="wp-smiley" /> </p>
<p>P.S. Theme Check returns warnings all over the place when using the filesystem method, which perhaps will discourage the practice.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8007#respond' onclick='return addComment.moveForm("div-comment-8007", "8007", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment even depth-5 parent" id="comment-8724" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8724" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/e70d4086e89c2e1e081870865be68485?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Gary</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8724">
		<time itemprop="dateCreated" datetime="2011-06-08T09:39:08+00:00">June 8, 2011 at 9:39 am</time></a>	</div>

	<div itemprop="text"><p>And would the user need to provide their credentials every time the settings were saved and the .css file was updated (assuming they hadn&#8217;t saved their credentials as constants in wp-config.php)?</p>
<p>For someone who is making small design changes via UI settings, saving, checking, going back and tweaking, it&#8217;s going to get very annoying very quickly to potentially have to keep entering their FTP details.</p>
<p>Are / could the credentials be saved between file-writing requests &#8211; perhaps as session variables?</p>
<p>(For reference, the configuration IS being stored in the database, but also immediately written to style sheets &#8211; generating them or creating inline styles on every single request would be painful at best.)</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8724#respond' onclick='return addComment.moveForm("div-comment-8724", "8724", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-6 parent" id="comment-8725" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8725" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8725">
		<time itemprop="dateCreated" datetime="2011-06-08T09:46:11+00:00">June 8, 2011 at 9:46 am</time></a>	</div>

	<div itemprop="text"><p>I find it difficult to believe that you could possibly have enough UI settings that would necessitate the creation of a separate CSS file instead of the more obvious, faster, safer approach of simply generating the CSS content and putting it inline into the document.</p>
<p>For small amounts of CSS, even Google recommends putting it inline into the HTML instead of into a separate file. Their PageSpeed module for Apache will even do this for sites automatically.</p>
<p>That said, it would be entirely possible to remember their FTP credentials and use them again. I won&#8217;t tell you how to do it, because storing credentials like passwords and such is a bad-idea™. However, you could mitigate this by storing them in a session cookie and reading them from there.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8725#respond' onclick='return addComment.moveForm("div-comment-8725", "8725", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment even depth-7 parent" id="comment-8729" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8729" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/e70d4086e89c2e1e081870865be68485?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Gary</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8729">
		<time itemprop="dateCreated" datetime="2011-06-08T10:04:19+00:00">June 8, 2011 at 10:04 am</time></a>	</div>

	<div itemprop="text"><p>Thanks Otto.</p>
<p>I&#8217;ve not built all the settings yet, but suffice to say that the dynamik options screen shots on <a href="http://catalysttheme.com/admin-screenshots/" rel="nofollow">http://catalysttheme.com/admin-screenshots/</a> are a good approximation for the type of thing I&#8217;ll be ending up with.</p>
<p>This won&#8217;t be small amounts of CSS &#8211; it&#8217;ll be enough to populate a typical theme&#8217;s style.css-file&#8217;s worth &#8211; so inline isn&#8217;t a feasible option. There will actually be 2 style sheets &#8211; one for the saved settings, and another that is the settings and another custom style sheet, minified.</p>
<p>I guess the session cookie solution would be best for what I&#8217;m after.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8729#respond' onclick='return addComment.moveForm("div-comment-8729", "8729", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-8" id="comment-8732" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8732" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8732">
		<time itemprop="dateCreated" datetime="2011-06-08T10:17:15+00:00">June 8, 2011 at 10:17 am</time></a>	</div>

	<div itemprop="text"><p>Yikes. Options overload, brother. I&#8217;d toss that theme away immediately. I prefer to strive for simplicity. Why make an options page that is way more complicated than just learning how to write CSS? I mean, why go to all that effort in the first place? Configurability is great and all, but come on. 90% of those options shouldn&#8217;t be options to begin with.</p>
<p>Now you may disagree with this, and that&#8217;s perfectly valid. Not judging. <img src="http://ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif" alt=":)" class="wp-smiley" />  I&#8217;m just saying that I could never recommend anything like that to a client because of the over-complication. Who exactly are you designing this for? What&#8217;s your target audience? It certainly isn&#8217;t non-technical people, because those options pages are loaded with technical jargon and confusion.</p>
<p>I can&#8217;t think of any reason for a theme to have more than, say, 5 options pages. And most of them should be controlling one thing only. Header image. Fonts/colors of text. Background Image. Maybe some minor layout adjustments. But I certainly wouldn&#8217;t, for example, have a screen where people could redesign their footer using shortcodes. Or to be able to adjust the padding or spacing of elements on the page. The theme is supposed to do that, it&#8217;s not supposed to throw that back on the user. Pick a size that works for 90% of people and stick with it. Most people won&#8217;t want to change the default padding anyway. Those that do can learn some minor CSS to do it.</p>
<p>Just my opinion.</p>
</div>

	<div class="reply">
		</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even depth-7 parent" id="comment-8942" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8942" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/2e64bc476e49fde99b6a3814c0d7abdd?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://wpweaver.info' rel='external nofollow' class='url'>Bruce Wampler</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8942">
		<time itemprop="dateCreated" datetime="2011-06-25T12:21:06+00:00">June 25, 2011 at 12:21 pm</time></a>	</div>

	<div itemprop="text"><p>This comment (and your later one about options overload) demonstrates a significant loss of touch with real world WordPress theme users, I believe.</p>
<p>1) There is an obsessive and large group of WordPress users concerned about SEO. Look at the popularity of the SEO plugins, for example. There is a widespread belief (I won&#8217;t judge or comment on reality &#8211; the belief is enough to make it an issue for a theme writer) that anything more than 10 or 20 lines of CSS inline causes significant SEO degradation.) So including the kind of CSS required for a customizable theme just doesn&#8217;t fly with many users.</p>
<p>2) For users who use customizable themes (like my Weaver), I don&#8217;t believe that it is possible to have enough Options, ever. Weaver has been out for more than a year now, and every single option it has (and there are hundreds), has been at the direct request of at least two users. It is impossible to underestimate what users will want to do &#8211; and mostly, the users are right. The options they want make sense. </p>
<p>Maybe some users just want simplicity, but once they make the step to a customizable theme, they really won&#8217;t go back to anything less &#8211; at least in my experience.</p>
<p>I suppose beginning users, or users with fairly simple requirements, can get by with a plain theme &#8211; that&#8217;s why there are so many of them. But once a user gets past the initial site building stage (which many never need to do, for sure), they keep asking &#8211; how do I change this little thing or that little thing.</p>
<p>Interestingly, from the statistics I gather from my own user community, I suspect that a significant number of my own users are really web site developers (I&#8217;m guessing well over 1000 developers) who need a single theme they can tweak for customers. I&#8217;ve heard over and over that Weaver is as good as, and usually better, than most commercial WordPress themes.</p>
<p>So &#8211; for a significant number of WordPress users, please realize that external custom CSS files are important, as are a seemingly infinite number of options. They really like this stuff!</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8942#respond' onclick='return addComment.moveForm("div-comment-8942", "8942", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-8" id="comment-8943" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8943" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8943">
		<time itemprop="dateCreated" datetime="2011-06-25T12:36:55+00:00">June 25, 2011 at 12:36 pm</time></a>	</div>

	<div itemprop="text"><p>Your viewpoint is fine, but I don&#8217;t share it.</p>
<p>Firstly, I tend to ignore people speaking about SEO. Most of them are nuts, frankly. In the grand scheme of things, SEO is simply not that important. If your site is clear, well structured, and you have good content, then that is generally enough. All SEO can do is to boost you an ever-so-slight notch higher in the rankings.</p>
<p>Secondly, options overload is a fundamental truth. I&#8217;ve seen it all too many times. In WordPress itself, we eschew options, and I fully agree with that philosophy. To quote from the <a href="http://wordpress.org/about/philosophy/" rel="nofollow">WordPress Philosophy page</a>, Decisions, not options.</p>
<blockquote><p>Every time you give a user an option, you are asking them to make a decision. When a user doesn&#8217;t care or understand the option this ultimately leads to frustration. As developers we sometimes feel that providing options for everything is a good thing, you can never have too many choices, right? Ultimately these choices end up being technical ones, choices that the average end user has no interest in. It&#8217;s our duty as developers to make smart design decisions and avoid putting the weight of technical choices on our end users.</p></blockquote>
<p>Third, most &#8220;customizable themes&#8221; are terrible. Just&#8230; awful. I have not examined Weaver in particular, but from a quick glance at the options pages, it&#8217;s honestly not a theme I&#8217;d ever give to a client or end-user. You&#8217;ve packaged hundreds of options onto the options page, in 6 tabs. Frankly, it&#8217;s ridiculous. IMO of course. Your users may love it, but some people love tons of useless technical jargon. As a quick estimate, I&#8217;d say that roughly 90% of the options you give there shouldn&#8217;t be options at all. Making a theme that can become any theme is silly. If you want a different theme, use a different theme. Your whole concept of &#8220;sub-themes&#8221; for example, should be child themes. That&#8217;s what they exist for.</p>
<p>And if your userbase is developers who are tweaking themes, then they should be perfectly happy tweaking the code of the theme, or creating a child theme and tweaking that. What is on the WordPress screen should be designed for the end-user, since they&#8217;re the one that&#8217;s going to be using it. Somebody writing a blog should never see all that technical stuff. Developers should strive to not present that sort of thing to the user. Again, decisions, not options.</p>
<p>If you want to do external custom CSS files, you can do it using the WP_Filesystem and not compromise the security of the user&#8217;s website. But IMO, you&#8217;re doing-it-wrong.</p>
</div>

	<div class="reply">
		</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="comment-7990" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7990" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/239a34b0d1ceb0acdd42b1657267a081?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://themeid.com' rel='external nofollow' class='url'>Emil</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7990">
		<time itemprop="dateCreated" datetime="2011-04-06T03:32:02+00:00">April 6, 2011 at 3:32 am</time></a>	</div>

	<div itemprop="text"><p>Thanks Otto, great stuff!</p>
<p>Cheers,<br />
Emil</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7990#respond' onclick='return addComment.moveForm("div-comment-7990", "7990", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-7991" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7991" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/2c4fe0b436f40745b0731019e176362f?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pctip.info/' rel='external nofollow' class='url'>Johann</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7991">
		<time itemprop="dateCreated" datetime="2011-04-06T08:47:55+00:00">April 6, 2011 at 8:47 am</time></a>	</div>

	<div itemprop="text"><p>Thank you very much for pointing this out. I&#8217;m having the exactly problem as in your screenshot and I hate entering information every time. I&#8217;ll take your code to my theme and hope it will wipe the problem away.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7991#respond' onclick='return addComment.moveForm("div-comment-7991", "7991", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="comment-7992" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-7992" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/69fe5bb2f75c934b843390b5d0978a1f?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://voodoopress.com' rel='external nofollow' class='url'>Rev. Voodoo</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-7992">
		<time itemprop="dateCreated" datetime="2011-04-06T08:57:39+00:00">April 6, 2011 at 8:57 am</time></a>	</div>

	<div itemprop="text"><p>Thanks Otto, great info here.<br />
Another one of those things I didn&#8217;t have a grasp on at all.<br />
I love when cool articles fall into my RSS reader</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=7992#respond' onclick='return addComment.moveForm("div-comment-7992", "7992", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-8006" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8006" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/8b582ac8699d155eb5ae6dbe37b54431?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://twitter.com/WraithKenny' rel='external nofollow' class='url'>Kenneth Newman</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8006">
		<time itemprop="dateCreated" datetime="2011-04-06T18:52:18+00:00">April 6, 2011 at 6:52 pm</time></a>	</div>

	<div itemprop="text"><p>Do plugins that minify and concatenate styles and scripts use this method? Is it OK in that case?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8006#respond' onclick='return addComment.moveForm("div-comment-8006", "8006", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment even depth-2" id="comment-8321" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8321" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8321">
		<time itemprop="dateCreated" datetime="2011-05-08T03:12:59+00:00">May 8, 2011 at 3:12 am</time></a>	</div>

	<div itemprop="text"><p>I haven&#8217;t seen any themes which do it this way. The ones I&#8217;ve seen have used very crude methods of modifying files or output the CSS dynamically from the database on every page load (which isn&#8217;t particular efficient &#8211; I used to do it this way myself)</p>
<p>Slightly off-topic:<br />
IMHO minifying scripts and CSS is much better suited to a plugin than a theme.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8321#respond' onclick='return addComment.moveForm("div-comment-8321", "8321", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 parent" id="comment-8431" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8431" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/1784f58e0f5bb339f412f91b0c3526e2?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">qwerty</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8431">
		<time itemprop="dateCreated" datetime="2011-05-19T01:36:52+00:00">May 19, 2011 at 1:36 am</time></a>	</div>

	<div itemprop="text"><p>WordPress uploads directory is writable, so wont other users on the shared host be able to do the scary things you talked about ?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8431#respond' onclick='return addComment.moveForm("div-comment-8431", "8431", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-2" id="comment-8434" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8434" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8434">
		<time itemprop="dateCreated" datetime="2011-05-19T11:26:29+00:00">May 19, 2011 at 11:26 am</time></a>	</div>

	<div itemprop="text"><p>Which was sort of my whole point in saying don&#8217;t do it. But if you do this sort of thing, then using the WP_Filesystem will make the files themselves owned by you and not writable by everybody else.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8434#respond' onclick='return addComment.moveForm("div-comment-8434", "8434", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment odd alt depth-2" id="comment-8447" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8447" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8447">
		<time itemprop="dateCreated" datetime="2011-05-20T08:41:24+00:00">May 20, 2011 at 8:41 am</time></a>	</div>

	<div itemprop="text"><p>There is less benefit in editing the usual content in the uploads folder since it is typically just images. Attacking someone&#8217;s site via HTML, CSS or javascript files is trivial whereas images are much harder to utilize for security attacks in modern browsers (although not unheard of). Even worse would be PHP files, but hopefully loading them into the uploads folder is not a common behaviour!</p>
<p>This is presumably why WordPress core only allows images to be uploaded via the media uploader by default rather than any old content.</p>
<p>PDF&#8217;s are becoming a particularly common way to attack as there are regular security flaws discovered in Adobe Reader so finding a way to edit PDF&#8217;s in the uploads folder would create some serious issues if you were on a poorly setup host.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8447#respond' onclick='return addComment.moveForm("div-comment-8447", "8447", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-8446" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8446" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8446">
		<time itemprop="dateCreated" datetime="2011-05-20T08:32:14+00:00">May 20, 2011 at 8:32 am</time></a>	</div>

	<div itemprop="text"><p>Hi Otto,<br />
Thanks for taking the time to write this up.</p>
<p>I&#8217;ve been puzzling over this for the past week. I can see that it&#8217;s important to ensure that files aren&#8217;t written with certain user permissions to cope with hosting setups which are incorrectly configured, but I always thought I was bypassing that issue by simply CHMOD&#8217;ing the files after they were written. I&#8217;m now worried I may have been doing something wrong all this time, but I&#8217;m having trouble understanding exactly what the security flaw is. Any help pointing out where I&#8217;m screwing this up would be much appreciated.</p>
<p>When I write files to the uploads folder, it normally looks something like this:</p>
<p>file_put_contents( $filename, $file ); // Save file to directory<br />
@chmod( $filename, 0644 ); // Set file permissions (for security purposes)</p>
<p>&#8230; in the mean time I&#8217;ll start routing a few things back through the database until I&#8217;m certain I&#8217;ve gotten a better handle on this stuff.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8446#respond' onclick='return addComment.moveForm("div-comment-8446", "8446", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-2 parent" id="comment-8448" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8448" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8448">
		<time itemprop="dateCreated" datetime="2011-05-20T08:43:28+00:00">May 20, 2011 at 8:43 am</time></a>	</div>

	<div itemprop="text"><p>Permissions aren&#8217;t everything. File ownership matters too. And if you&#8217;re writing files as the webserver user, then anybody else who can run code on that webserver can modify your files.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8448#respond' onclick='return addComment.moveForm("div-comment-8448", "8448", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment even depth-3 parent" id="comment-8449" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8449" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8449">
		<time itemprop="dateCreated" datetime="2011-05-20T09:37:14+00:00">May 20, 2011 at 9:37 am</time></a>	</div>

	<div itemprop="text"><p>Ah. I think I see where I was misunderstanding then. I was assuming file permisions were an adequate way to block others from editing files.</p>
<p>Would you use the WP file system for uploading images for use in themes? I don&#8217;t want to use the regular media upload system if I can avoid it, as it results in the files getting dumped into all sorts of random folders and in the list of media uploads, whereas these are intended to be separate from the regular WordPress media library since they are theme specific.</p>
<p>I tried to upload some images via the WP File system but it kept asking for FTP details, which isn&#8217;t going to work for my particular situation as I need to allow untrusted users to do the uploading. I thought keeping the method blank with &#8221; would work, but it still requested FTP details <img src="http://ottopress.com/wp-content/plugins/classic-smilies/img/icon_sad.gif" alt=":(" class="wp-smiley" /> </p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8449#respond' onclick='return addComment.moveForm("div-comment-8449", "8449", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-4 parent" id="comment-8450" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8450" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8450">
		<time itemprop="dateCreated" datetime="2011-05-20T10:07:39+00:00">May 20, 2011 at 10:07 am</time></a>	</div>

	<div itemprop="text"><p>No, for handling media uploads you want to use the normal media upload handler. If you need to modify the directory that the upload goes to, you can use the upload_dir filter to adjust it. Just be careful to adjust it only for your files and not for the whole upload system.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8450#respond' onclick='return addComment.moveForm("div-comment-8450", "8450", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment even depth-5" id="comment-8451" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8451" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8451">
		<time itemprop="dateCreated" datetime="2011-05-20T10:18:41+00:00">May 20, 2011 at 10:18 am</time></a>	</div>

	<div itemprop="text"><p>Ohhh, upload_dir filter. That sounds useful <img src="http://ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Thanks Otto <img src="http://ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif" alt=":)" class="wp-smiley" />  I genuinely appreciate your assistance. This sort of information is invaluable.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8451#respond' onclick='return addComment.moveForm("div-comment-8451", "8451", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment odd alt depth-5 parent" id="comment-8453" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8453" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8453">
		<time itemprop="dateCreated" datetime="2011-05-20T12:17:41+00:00">May 20, 2011 at 12:17 pm</time></a>	</div>

	<div itemprop="text"><p>I was having problems  using the upload_dir filter, but thankfully Joast de Valk has written a handy tutorial on it already:<br />
<a href="http://yoast.com/smarter-upload-handling-wp-plugins/" rel="nofollow">http://yoast.com/smarter-upload-handling-wp-plugins/</a></p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8453#respond' onclick='return addComment.moveForm("div-comment-8453", "8453", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment even depth-6" id="comment-8454" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-8454" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/a084125c824d274ff40cb834cf9f544a?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://pixopoint.com/' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-8454">
		<time itemprop="dateCreated" datetime="2011-05-20T12:27:19+00:00">May 20, 2011 at 12:27 pm</time></a>	</div>

	<div itemprop="text"><p>Sorry for the multiple posts. I keep finding handy information relating to this issue and want to make sure anyone else reading this finds it too.</p>
<p>The most recent chunk of info. I uncovered was from you Otto <img src="http://ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif" alt=":)" class="wp-smiley" /><br />
<a href="http://www.wptavern.com/forum/themes-templates/1346-creating-upload-function-options-page.html#post13306" rel="nofollow">http://www.wptavern.com/forum/themes-templates/1346-creating-upload-function-options-page.html#post13306</a></p>
<p>I think that post is where I developed my own upload system from, but I didn&#8217;t realise the media uploader could handle custom folders so resorted to using file_put_contents() instead which I guess doesn&#8217;t handle file ownership appropriately for this sort of thing.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=8454#respond' onclick='return addComment.moveForm("div-comment-8454", "8454", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt depth-3 parent" id="comment-12113" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12113" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/7736982e072c988021d830f26b3e241d?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://skateandannoy.com' rel='external nofollow' class='url'>Kilwag</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12113">
		<time itemprop="dateCreated" datetime="2013-10-30T16:18:58+00:00">October 30, 2013 at 4:18 pm</time></a>	</div>

	<div itemprop="text"><p><em>then anybody else who can run code on that webserver can modify your files.</em></p>
<p>Assuming they are somehow able to get into your hosting account? And if they were able to do that, wouldn&#8217;t file ownership of a random php file not be the big issue, if they got that far, couldn&#8217;t they just put their own malicious code somewhere else?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12113#respond' onclick='return addComment.moveForm("div-comment-12113", "12113", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-4 parent" id="comment-12115" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12115" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12115">
		<time itemprop="dateCreated" datetime="2013-10-30T16:32:50+00:00">October 30, 2013 at 4:32 pm</time></a>	</div>

	<div itemprop="text"><p>No, the threat is not from them getting into <em>your</em> account, but merely being on any account on the same server. Many hosts do &#8220;shared hosting&#8221;, where more than one account is running on the same web server.</p>
<p>Now, if a server is properly locked down, then users cannot access other users files directly or create files in their accounts or names. This is pretty standard. </p>
<p>However, the web server process is usually running as a different user (say, &#8220;www&#8221;). It can access your files, and through that, users on your host can potentially change existing files *if* the files have permissions that allow the webserver to do that.</p>
<p>Say I have a file &#8220;test.php&#8221; which is owned by the &#8220;www&#8221; user. Now, anybody else on that shared server can write code, then run it from the webserver. The webserver runs that code under the &#8220;www&#8221; process, and can write to your test.php file, because it is the owner of it.</p>
<p>In short, on normally configured shared hosting, your web process runs PHP, and that PHP process should not be able to write to your files. </p>
<p>This is where the &#8220;setuid&#8221; method came from, where the PHP process actually changes its user credentials to run as the user who owns the original file that is executed. This is safer on shared hosting, because now some other user running things through the web server process from their own account will have that process run as them, and thus still be denied from writing to another user&#8217;s files. But not all shared hosting systems use setuid methods. If you are on shared hosting, and see WordPress ask for FTP credentials, then it&#8217;s not running setuid methods, and it&#8217;s asking for FTP credentials as a form of protection, because it does not want to write files and have them owned by the webserver user.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12115#respond' onclick='return addComment.moveForm("div-comment-12115", "12115", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-5 parent" id="comment-12118" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12118" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/7736982e072c988021d830f26b3e241d?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://skateandannoy.com' rel='external nofollow' class='url'>kilwag</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12118">
		<time itemprop="dateCreated" datetime="2013-10-30T20:05:04+00:00">October 30, 2013 at 8:05 pm</time></a>	</div>

	<div itemprop="text"><p>So you&#8217;re saying another user on the same shared host to create a program that would run as www-data (or whatever) and be able to transverse directories into your host directory and manipulate that file? (If your host&#8217;s system isn&#8217;t locked down, or always?)</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12118#respond' onclick='return addComment.moveForm("div-comment-12118", "12118", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-6 parent" id="comment-12120" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12120" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12120">
		<time itemprop="dateCreated" datetime="2013-10-31T07:33:55+00:00">October 31, 2013 at 7:33 am</time></a>	</div>

	<div itemprop="text"><p>It depends on the configuration and security settings of the hosting system. But yes, basically that can (and has) been done.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12120#respond' onclick='return addComment.moveForm("div-comment-12120", "12120", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-7" id="comment-12132" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12132" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/7736982e072c988021d830f26b3e241d?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://skateandannoy.com' rel='external nofollow' class='url'>Kilwag</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12132">
		<time itemprop="dateCreated" datetime="2013-11-04T18:34:41+00:00">November 4, 2013 at 6:34 pm</time></a>	</div>

	<div itemprop="text"><p>I was thinking, this sort of problem seems very unlikely these days from a well known web host, and maybe I could ignore your advice. Then I read <a href="http://ottopress.com/2011/decoding-a-russian-hackers-code/" rel="nofollow">Decoding a Russian Hacker’s Code</a>, remembering the time my sites on a shared host got hacked, and shut down because I was blowing out my bandwidth. I repeatedly  ending up flagged by Google.  Tech support at the host kept trying to congratulate me on suddenly having a avery popular web site, and i needed to upgrade my services&#8230;  That was a month of headaches I don&#8217;t want to live through again. In the end I was only able to permanently fix the problem by starting with a new host and a a clean install. My non-WP static directories had thousands of files in them, so there was no easy or quick way to scan all directories for suspicious files. </p>
<p>WP_Filesystem it is then. If you only prevented one person from making this mistake, then you&#8217;ve done your job!</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12132#respond' onclick='return addComment.moveForm("div-comment-12132", "12132", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="pingback even thread-even depth-1" id="comment-9576" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-9576" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
		<cite itemprop="name"><a itemprop='url' href='http://www.maorb.info/wordpress/2011-08/otto-on-wordpress' rel='external nofollow' class='url'>ראיון מעניין עם אוטו, ממפתחי קוד הליבה של וורדפרס | אֶקְסְפֶּרִימֶנְט דוֹט אֶפֶס</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-9576">
		<time itemprop="dateCreated" datetime="2011-08-26T17:21:46+00:00">August 26, 2011 at 5:21 pm</time></a>	</div>

	<div itemprop="text"><p>[...] של WP_QUERY  עם האפשרות לייצר שאילות מורכבות לטקסונומיות, שימוש ב-WP_Filesystem, שימוש בפורמטים לפוסטים [...]</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=9576#respond' onclick='return addComment.moveForm("div-comment-9576", "9576", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-10235" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-10235" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/17d7f1d3862401d855ccbdfbe36e3f68?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Jenny</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-10235">
		<time itemprop="dateCreated" datetime="2011-12-06T05:09:45+00:00">December 6, 2011 at 5:09 am</time></a>	</div>

	<div itemprop="text"><p>@otto, I&#8217;m planning to make a custom poste type (or use the attachment type) to let users create multi mdia projects.  Users will be creating, editing and publishing their files, they can also upload a full package of files. Would you recommend I use the wp_filesystem, or the wp media upload handler?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=10235#respond' onclick='return addComment.moveForm("div-comment-10235", "10235", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 parent" id="comment-10819" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-10819" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0de5f1e5d11df19b99426aea1cb23932?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">greg</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-10819">
		<time itemprop="dateCreated" datetime="2012-05-11T10:06:08+00:00">May 11, 2012 at 10:06 am</time></a>	</div>

	<div itemprop="text"><p>Thanks for the tutorial. If you are only getting contents of a file, you do not need to worry about getting credentials, correct? You are never writing a file to the server, so there is no issue with file ownership. Similarly, if you are updating the contents of a file that already exists, you are not creating the file, so again, no issues with file ownership, correct?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=10819#respond' onclick='return addComment.moveForm("div-comment-10819", "10819", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-2" id="comment-10820" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-10820" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-10820">
		<time itemprop="dateCreated" datetime="2012-05-11T10:21:56+00:00">May 11, 2012 at 10:21 am</time></a>	</div>

	<div itemprop="text"><p>If you&#8217;re reading a file, there&#8217;s no issues. If you&#8217;re updating a file, while there are no ownership issues, you shouldn&#8217;t be updating a file in a plugin or a theme because the updates will be lost when the plugin or theme is upgraded. Which means that to maintain across upgrades, you need to create a new file outside the plugin/theme directory, which means you should still use the WP_Filesystem.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=10820#respond' onclick='return addComment.moveForm("div-comment-10820", "10820", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-11104" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11104" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/e50a0b782492223b65ed6e81632d75ed?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Jhon</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11104">
		<time itemprop="dateCreated" datetime="2012-07-30T17:16:15+00:00">July 30, 2012 at 5:16 pm</time></a>	</div>

	<div itemprop="text"><p>Hi Otto, I tried to run this code but always get error(error saving file!)</p>
<p>that could be wrong</p>
<p>Pls help me.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11104#respond' onclick='return addComment.moveForm("div-comment-11104", "11104", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-2 parent" id="comment-11397" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11397" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/47cec0e00cbfe9c81b9320402c0fb1f6?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://www.facebook.com/profile.php?id=1822995198' rel='external nofollow' class='url'>Matthew Van Andel</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11397">
		<time itemprop="dateCreated" datetime="2012-11-15T17:05:31+00:00">November 15, 2012 at 5:05 pm</time></a>	</div>

	<div itemprop="text"><p>Hey Jhon,</p>
<p>This tutorial is a bit deprecated now.</p>
<p>Try using WP_Filesystem_Base instead.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11397#respond' onclick='return addComment.moveForm("div-comment-11397", "11397", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-3" id="comment-11398" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11398" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11398">
		<time itemprop="dateCreated" datetime="2012-11-15T17:14:58+00:00">November 15, 2012 at 5:14 pm</time></a>	</div>

	<div itemprop="text"><p>No, that is incorrect. This tutorial is not deprecated nor out of date. The WP_Filesystem_Base is a class upon which the other filesystem support classes are built upon. But the usage of such remains the same as I wrote in the post.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11398#respond' onclick='return addComment.moveForm("div-comment-11398", "11398", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-2" id="comment-11399" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11399" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11399">
		<time itemprop="dateCreated" datetime="2012-11-15T17:16:21+00:00">November 15, 2012 at 5:16 pm</time></a>	</div>

	<div itemprop="text"><p>If you&#8217;re getting an error from the put_contents() call, then you may want to store the error in a variable (it&#8217;ll probably be a WP_Error object) and var_dump it to see what sort of error it is that you&#8217;re getting.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11399#respond' onclick='return addComment.moveForm("div-comment-11399", "11399", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment even depth-2" id="comment-12179" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12179" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/81a540479468a450b293942066ddfee5?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">remus</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12179">
		<time itemprop="dateCreated" datetime="2013-12-06T11:29:40+00:00">December 6, 2013 at 11:29 am</time></a>	</div>

	<div itemprop="text"><p>I have the same situation &#8211; error from put_contents. I tried to save var dump it but it only gives me &#8220;false&#8221;. How did you fixed ?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12179#respond' onclick='return addComment.moveForm("div-comment-12179", "12179", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 parent" id="comment-11502" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11502" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/13d49945b2541e0e05df0e1b6f8dacfd?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='https://plus.google.com/104587601586083279789' rel='external nofollow' class='url'>Gabe Shackle</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11502">
		<time itemprop="dateCreated" datetime="2012-12-22T21:34:08+00:00">December 22, 2012 at 9:34 pm</time></a>	</div>

	<div itemprop="text"><p>Do you have any examples of how to write a file using the WP_Filesystem API that does not require a form submission?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11502#respond' onclick='return addComment.moveForm("div-comment-11502", "11502", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-2" id="comment-11503" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11503" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11503">
		<time itemprop="dateCreated" datetime="2012-12-22T22:00:34+00:00">December 22, 2012 at 10:00 pm</time></a>	</div>

	<div itemprop="text"><p>Look at where I call request_filesystem_credentials. If the result of that call is anything other than false, then you either don&#8217;t need credentials, or already have the necessary credentials. In which case, you continue on as per usual.</p>
<p>However, if that does return false, or if the WP_Filesystem($creds) call fails, then you don&#8217;t have the proper credentials yet, and you must therefore get them from the user somehow, in which case you have to show them some kind of form.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11503#respond' onclick='return addComment.moveForm("div-comment-11503", "11503", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-11523" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11523" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/333c5b1bd9f7c0f1b765fb3bba107eee?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://www.facebook.com/profile.php?id=607292293' rel='external nofollow' class='url'>Kenth Hagström</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11523">
		<time itemprop="dateCreated" datetime="2013-01-02T08:36:48+00:00">January 2, 2013 at 8:36 am</time></a>	</div>

	<div itemprop="text"><p>Is it possible to upload files outside the WordPress root directory by using the WP_Filesystem?</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11523#respond' onclick='return addComment.moveForm("div-comment-11523", "11523", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 parent" id="comment-11591" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11591" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/572e7ca86e560ef65187861b6322a7af?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://peterrknight.com' rel='external nofollow' class='url'>Peter Knight</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11591">
		<time itemprop="dateCreated" datetime="2013-02-01T17:25:03+00:00">February 1, 2013 at 5:25 pm</time></a>	</div>

	<div itemprop="text"><p>Hi Otto, what would be the most secure way to deal with a caching solution? I noticed Total Cache for example writes files directly (no wp file api), I think another caching plugin stores the user credentials (if required) in the database and another article mentions storing credentials in wp-config.php as constants. I&#8217;m not sure the latter are that much more secure because if a the credentials are compromised a hacker would have free range.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11591#respond' onclick='return addComment.moveForm("div-comment-11591", "11591", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-2 parent" id="comment-12100" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12100" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/7736982e072c988021d830f26b3e241d?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://skateandannoy.com' rel='external nofollow' class='url'>Kilwag</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12100">
		<time itemprop="dateCreated" datetime="2013-10-29T13:16:17+00:00">October 29, 2013 at 1:16 pm</time></a>	</div>

	<div itemprop="text"><p>Cacheing, yes! Here&#8217;s a mother argument for wanting to write to a static file. </p>
<p>I&#8217;m running a network site, on the main site (as a large aside) I want to pull in the last posts from certain categories across different network sites, these posts each have their own Featured Images, so the amount of queries  is going to get out of control quickly, plus  I&#8217;m on a shared host. It would be quicker for the server to be able to include one static file with all that info instead of making a ton of separate queries.  If you could get a post type or post category to write to that file when you publish it, then the whole thing would be automated. </p>
<p>The alternative could be storing it instead as large array of info in a plugin setting? Reducing it to one added query.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12100#respond' onclick='return addComment.moveForm("div-comment-12100", "12100", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor even depth-3 parent" id="comment-12102" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12102" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12102">
		<time itemprop="dateCreated" datetime="2013-10-29T13:30:08+00:00">October 29, 2013 at 1:30 pm</time></a>	</div>

	<div itemprop="text"><p>What you want is probably site transients. They&#8217;re like normal transients, but they apply across the whole network of sites. So you have to use unique keys for each site, which you can do with the site ID.</p>
<p>So, on each site, you have a plugin (or in the theme) that builds a query to get the list of posts that should be displayed on the main site. Each site can do this differently, or you can use one plugin across all the sites to do it. Doesn&#8217;t matter.</p>
<p>In this code, you do something like this:</p>
<p>1. Call get_current_site() to get the current site object, including the ID of that site.</p>
<p>2. Attempt to get a site transient for that site, like so:</p>
<p>$site_posts = get_site_transient(&#8216;site-posts-&#8217;.$current_site->ID);</p>
<p>If this returns false, then you execute your query and store the resulting posts with the set_site_transient function, sorta like this:</p>
<p>set_site_transient( &#8216;site-posts-&#8217;.$current_site->ID, $site_posts, 12 * HOUR_IN_SECONDS );</p>
<p>That sets the posts in a site transient for 12 hours. Adjust timing as needed for each site and depending on how often each site is accessed.</p>
<p>3. Then, on the main site, you have it simply get all those transients in a loop, and display the resulting array of posts from each one. No queries other than to get the transients. Certainly no long queries against the various post tables.</p>
<p>This lets each site set its posts to be displayed on the main site, and by distributing the load across the various sites like that, you don&#8217;t have any big-queries happening only on the main site. The idea is to have each site set the relevant information itself instead of having one site go to all the others to get that same information all at once.</p>
<p>Advantage of transients happens especially when you use a persistent memory caching solution for object caching, like memcache or APC or XCache or what have you. With these in place, transients are stored in fast memory instead of in the database, so no extra queries are needed.</p>
<p>Downsite is that your transients have a time on them, so new posts won&#8217;t trigger the main site to update (for a while).. unless you also make new-posts on each site call delete_site_transient for their info and then re-run the query to re-set their site transient.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12102#respond' onclick='return addComment.moveForm("div-comment-12102", "12102", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment odd alt depth-4" id="comment-12109" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12109" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/7736982e072c988021d830f26b3e241d?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://skateandannoy.com' rel='external nofollow' class='url'>Kilwag</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12109">
		<time itemprop="dateCreated" datetime="2013-10-29T17:43:57+00:00">October 29, 2013 at 5:43 pm</time></a>	</div>

	<div itemprop="text"><p>That sounds very interesting. *Click* (Sound of me googling &#8220;WordPress transients&#8221;)  Thanks for your thoughtful response.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12109#respond' onclick='return addComment.moveForm("div-comment-12109", "12109", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment even depth-4" id="comment-12114" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12114" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/7736982e072c988021d830f26b3e241d?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://skateandannoy.com' rel='external nofollow' class='url'>Kilwag</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12114">
		<time itemprop="dateCreated" datetime="2013-10-30T16:28:23+00:00">October 30, 2013 at 4:28 pm</time></a>	</div>

	<div itemprop="text"><p>From what I gather, without caching, transients are still stored in a table. so the main advantage is that it stores the results of a complex query that can reached with a simple query.  This approach could work well for me, except that certain site transients would likely need to remain available for a long time, (months, even) I haven&#8217;t seen a maximum value for retaining it. But even then, I suppose you could code it to replace it if it didn&#8217;t exist.</p>
<p>I don&#8217;t want to hijack the WP_Filesystem discussion and turn it into transients&#8230; Thanks again for the extra information.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12114#respond' onclick='return addComment.moveForm("div-comment-12114", "12114", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-11605" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11605" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
		<cite itemprop="name"><a itemprop='url' href='http://www.tomjn.com/238/necessary-reading-for-aspiring-wordpress-developers/' rel='external nofollow' class='url'>WordPress: Necessary Reading | Tom J Nowell</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11605">
		<time itemprop="dateCreated" datetime="2013-02-05T09:41:27+00:00">February 5, 2013 at 9:41 am</time></a>	</div>

	<div itemprop="text"><p>[...] Using the WordPress File System API [...]</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11605#respond' onclick='return addComment.moveForm("div-comment-11605", "11605", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1 parent" id="comment-11716" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11716" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/dcb7cc657c19726b709098172efa1b6d?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://paulwp.com' rel='external nofollow' class='url'>paul_wp</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11716">
		<time itemprop="dateCreated" datetime="2013-03-20T19:49:59+00:00">March 20, 2013 at 7:49 pm</time></a>	</div>

	<div itemprop="text"><p>Otto,<br />
in your example you&#8217;re forcing an ftp method. I couldn&#8217;t find that one in the code.<br />
It seems the valid methods are &#8216;ftpext&#8217;, &#8216;ftpsockets&#8217; and &#8216;ssh2&#8242;</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11716#respond' onclick='return addComment.moveForm("div-comment-11716", "11716", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment byuser comment-author-otto bypostauthor odd alt depth-2" id="comment-11719" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11719" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/0994d5e2e158a24ba8017c2525d78263?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://ottodestruct.com' rel='external nofollow' class='url'>Otto</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11719">
		<time itemprop="dateCreated" datetime="2013-03-21T08:09:03+00:00">March 21, 2013 at 8:09 am</time></a>	</div>

	<div itemprop="text"><p>The $type value, in this case, can be anything and you&#8217;d get much the same result. The only values actually being checked for at this level are &#8216;direct&#8217; or &#8216;ftpext&#8217; (for ssl FTP connections, the ftpext method is required). All the other methods require special setup in the wp-config.php file. So specifying &#8216;ftp&#8217; here is just for convenience, so it won&#8217;t use &#8216;direct&#8217;.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11719#respond' onclick='return addComment.moveForm("div-comment-11719", "11719", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="pingback even thread-odd thread-alt depth-1" id="comment-11742" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11742" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
		<cite itemprop="name"><a itemprop='url' href='http://stephanieleary.com/2012/10/how-to-do-damn-near-anything-with-wordpress/' rel='external nofollow' class='url'>How to do damn near anything with WordPress | Stephanie Leary</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11742">
		<time itemprop="dateCreated" datetime="2013-04-01T22:32:58+00:00">April 1, 2013 at 10:32 pm</time></a>	</div>

	<div itemprop="text"><p>[...] APIs: filesystem, HTTP, rewrite, [...]</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11742#respond' onclick='return addComment.moveForm("div-comment-11742", "11742", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="pingback odd alt thread-even depth-1" id="comment-11753" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11753" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
		<cite itemprop="name"><a itemprop='url' href='http://paulchrablass.de/blog/2013/04/08/automatisches-wordpress-upgrade-bei-lokalen-installationen-nutzen/' rel='external nofollow' class='url'>Automatisches WordPress-Upgrade bei lokalen Installationen nutzen | Frontend Log</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11753">
		<time itemprop="dateCreated" datetime="2013-04-08T08:48:20+00:00">April 8, 2013 at 8:48 am</time></a>	</div>

	<div itemprop="text"><p>[...] Editing wp-config.php: WordPress Upgrade Constants Tutorial: Using the WP_Filesystem [...]</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11753#respond' onclick='return addComment.moveForm("div-comment-11753", "11753", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="comment-11860" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11860" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/035a28fd9a7b59fa07eb6a8a1726a58c?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Alex Hug</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11860">
		<time itemprop="dateCreated" datetime="2013-06-10T15:44:48+00:00">June 10, 2013 at 3:44 pm</time></a>	</div>

	<div itemprop="text"><p>Hi Otto,</p>
<p>I&#8217;m writing here now, cause you put me in a lot of mess, according to the Theme Check plugin. I&#8217;m just kidding.<br />
I&#8217;ve made an WP theme and based on some of your advices and others advices i choose to create an dynamic CSS file for the theme customization. Everything is working well, except the readfile, fopen, fwrite, file_get_contents functions that trigger Theme Check Warnings.</p>
<p>After a little research,i&#8217;ve ended up to your page here hoping to find a solution for those Warnings.</p>
<p>So in several words &#8230; created an style.php file which loads an CSS file &#8230; pretty much after your advices. If I remember well &#8230; you&#8217;ve even posted the content of style.php and the other file.</p>
<p>I don&#8217;t ask from you to give me the exact code for me, that would be totally unprofessionally from my part, but I would kindly ask you if you can give me some guidance for solving those problems. </p>
<p>Thank you</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11860#respond' onclick='return addComment.moveForm("div-comment-11860", "11860", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1 parent" id="comment-11922" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11922" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/ef85108cbe732b07e1fa485eab0be614?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Manuel</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11922">
		<time itemprop="dateCreated" datetime="2013-07-16T23:55:08+00:00">July 16, 2013 at 11:55 pm</time></a>	</div>

	<div itemprop="text"><p>Hi, thank you for the tutorial. </p>
<p>I&#8217;m trying to use get_contents with $_POST data&#8230; does it accept the $contect param as for file_get_contents()? With the regular PHP function I&#8217;m able to pass some $_POST data, but, in other words, I can&#8217;t find a way to achieve this with $wp_filesystem-&gt;get_contents: <a href="http://stackoverflow.com/a/2445332/912677" rel="nofollow">http://stackoverflow.com/a/2445332/912677</a></p>
<p>Thank you.</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11922#respond' onclick='return addComment.moveForm("div-comment-11922", "11922", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	<ul class="children">
	<li class="comment even depth-2" id="comment-11923" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-11923" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://0.gravatar.com/avatar/ef85108cbe732b07e1fa485eab0be614?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name">Manuel</cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-11923">
		<time itemprop="dateCreated" datetime="2013-07-17T00:09:38+00:00">July 17, 2013 at 12:09 am</time></a>	</div>

	<div itemprop="text"><p>Just to update the issue I had&#8230; I used wp_remote_post instead: wp_remote_post($target_file,array(&#8216;body&#8217; =&gt;$_POST));</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=11923#respond' onclick='return addComment.moveForm("div-comment-11923", "11923", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-12135" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12135" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
	<img alt='' src='http://1.gravatar.com/avatar/36483685eddffc12986475fc30e29821?s=48&amp;d=retro&amp;r=X' class='avatar avatar-48 photo' height='48' width='48' />	<cite itemprop="name"><a itemprop='url' href='http://wpweddingtheme.com/' rel='external nofollow' class='url'>Arun Basil Lal</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12135">
		<time itemprop="dateCreated" datetime="2013-11-06T11:27:07+00:00">November 6, 2013 at 11:27 am</time></a>	</div>

	<div itemprop="text"><p>Thanks for this one mister. I just used this in a plugin to delete files from the back-end. Thanks again <img src="http://ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12135#respond' onclick='return addComment.moveForm("div-comment-12135", "12135", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	<li class="pingback even thread-even depth-1" id="comment-12209" itemprop="comment" itemscope itemtype="http://schema.org/Comment">
		<div id="div-comment-12209" class="comment-body">
		<div class="comment-author" itemprop="author" itemscope itemtype="http://schema.org/Person">
		<cite itemprop="name"><a itemprop='url' href='http://themeshaper.com/2011/04/19/wpfilesystem-tutorial-ottopress/' rel='external nofollow' class='url'>WP_Filesystem Tutorial on ottopress.com | ThemeShaper</a></cite> <span class="says">says:</span>	</div>

	<div class="comment-meta commentmetadata"><a itemprop="url" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/comment-page-1/#comment-12209">
		<time itemprop="dateCreated" datetime="2013-12-23T11:31:48+00:00">December 23, 2013 at 11:31 am</time></a>	</div>

	<div itemprop="text"><p>[&#8230;] Tutorial: Using the WP_Filesystem [&#8230;]</p>
</div>

	<div class="reply">
	<a class='comment-reply-link' href='/2011/tutorial-using-the-wp_filesystem/?replytocom=12209#respond' onclick='return addComment.moveForm("div-comment-12209", "12209", "respond", "471")'>Reply to this comment</a>	</div>
		</div>
	</li><!-- #comment-## -->
	</ol>
	<div class="navigation" style="clear:both">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>
	<div style="clear:both"></div> 								<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2011/tutorial-using-the-wp_filesystem/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://ottopress.com/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																										<div id="gravbox"></div><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input x-autocompletetype="name-full" id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input x-autocompletetype="email" id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p><p class="form-allowed-tags">Need to post PHP code? Wrap it in <code>[php]</code> and <code>[/php]</code> tags.						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='471' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="06743ab618" /></p><p class="comment-subscription-form"><input type="checkbox" name="subscribe_comments" id="subscribe_comments" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;" /> <label class="subscribe-label" id="subscribe-label" for="subscribe_comments">Notify me of follow-up comments by email.</label></p><p class="comment-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;" /> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of new posts by email.</label></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="4"/></p>					</form>
							</div><!-- #respond -->
			</div>

	
	</div>

	<div id="sidebar">
		<ul>
			
			<li id="paypal-donate" class="widget widget_wpaypal"><h2 class="widgettitle">Buy Otto a Beer</h2>
<div style="margin-top:5px;margin-bottom:5px;text-align:left;">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
		<p><input type="hidden" name="cmd" value="_xclick" />
		<input type="hidden" name="business" value="otto@ottodestruct.com" />
		<input type="hidden" name="item_name" value="Donation to Otto on WordPress" />
		<input type="hidden" name="item_number" value="0" />
		<input type="hidden" name="notify_url" value="" />
		<input type="hidden" name="no_shipping" value="1" /><input type="hidden" name="return" value="http://ottopress.com" />
		<input type="hidden" name="no_note" value="1" />
		<input type="hidden" name="tax" value="0" />
		<input type="hidden" name="bn" value="PP-DonationsBF" />
		<input type="hidden" name="on0" value="Website" />
		Currency: <br />
		<select id="currency_code" name="currency_code">
		<option value="USD">U.S. Dollars</option>
		<option value="AUD">Australian Dollars</option>
		<option value="CAD">Canadian Dollars</option>
		<option value="EUR">Euros</option>
		<option value="GBP">Pounds Sterling</option>
		<option value="JPY">Yen</option></select></p>
		<p>Amount: <br /><input type="text" name="amount" size="16" title="The amount you wish to donate" value="5.00" /></p>
		<p>Website(Optional): <br /><input type="text" size="16" title="Your website (will be displayed)" name="os0" value="" /></p><p><input class="ppimg" type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" name="submit" style="border:0;" alt="Make payments with PayPal - fast, free and secure" /></p></form></div></li>
<li id="text-7" class="widget widget_text">			<div class="textwidget">Hey, I also take Bitcoins! Send them to: </br>
<a href="bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg">
<img src="https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg" /><br />
1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg</a></div>
		</li>
<li id="text-5" class="widget widget_text"><h2 class="widgettitle">Subscribe!</h2>
			<div class="textwidget"><!-- <a href="https://plus.google.com/111166992820603637934?prsrc=3" style="cursor:pointer;display:inline-block;text-decoration:none;color:#333;font:13px/16px arial,sans-serif;"><span style="display:inline-block;font-weight:bold;vertical-align:top;margin-right:5px;margin-top:8px;">Otto on WordPress</span><span style="display:inline-block;vertical-align:top;margin-right:15px;margin-top:8px;">on</span><img src="https://ssl.gstatic.com/images/icons/gplus-32.png" alt="" style="border:0;width:32px;height:32px;"/></a>
-->
<div class="g-plus" data-href="https://plus.google.com/111166992820603637934?rel=publisher" data-width="250" data-height="131" data-theme="light"></div>
</div>
		</li>
<li id="blog_subscription-3" class="widget jetpack_subscription_widget"><h2 class="widgettitle"><label for="subscribe-field"></label></h2>

		<form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3">
			<p id="subscribe-text">Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p><p>Join 328 other subscribers</p>

			<p id="subscribe-email"><input type="text" name="email" value="Email Address" id="subscribe-field" onclick="if ( this.value == 'Email Address' ) { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = 'Email Address'; }" /></p>

			<p id="subscribe-submit">
				<input type="hidden" name="action" value="subscribe" />
				<input type="hidden" name="source" value="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/" />
				<input type="hidden" name="sub-type" value="widget" />
				<input type="hidden" name="redirect_fragment" value="blog_subscription-3" />
								<input type="submit" value="Subscribe" name="jetpack_subscriptions_widget" />
			</p>
		</form>

		
</li>
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Email Me</h2>
			<div class="textwidget"><ul><li><span class="vcard microid-mailto+http:sha1:23e9670868f6d2b16fe1f6b3db80c8f0423a082a">
<span style="display:none;">
<span class="adr">
 <span class="locality">Memphis</span>,
 <span class="region">TN</span>
 <span class="postal-code">38103</span>
 <span class="country-name">U.S.A.</span>
</span>
<a class="url fn" href="http://ottodestruct.com">Otto</a>
<span class="uid">240cf86e-5cad-11dc-8314-0800200c9a66</span>
</span>
<a class="email" href="mailto:otto@ottodestruct.com">otto@ottodestruct.com</a></span></li></ul>
<a rel="author" href="https://plus.google.com/100201852715113506716?rel=author">
  <img src="https://ssl.gstatic.com/images/icons/gplus-16.png" width="16" height="16">
</a>
</a>
<!-- 

This rant is hidden in HTML comments. If I pointed you to it, then you probably emailed me about the fact that my email address is in plaintext directly above this comment. If you happened to run across it because you just like looking at HTML comments, well, easter egg! :)

YES, that is a bare mailto: href above. 
YES, that is my real email address. 
And YES, it's intentional.

Obfuscating your email address on the web is stupid. 

Firstly, hiding your email address doesn't prevent spam. Spammers get addresses in bulk from mailing lists and websites and other sources. Sure, some scrapers exist, but they are by far the minority of the sources for email lists.

Secondly, hiding your email address ruins the whole point of email. The purpose of publishing my email address is so that anybody, and I do mean *anybody*, can email me. Before the days of cell phones, your phone number and physical address used to be published in a big book that everybody received, for free, on a semi-annual basis. It had distinctive yellow pages in it. Your contact information is not, and never was supposed to be, private information. Treating it as such is stupid.

Thirdly, I have great spam protection. For one, I use GMail, which has frankly incredible filtering because of the volume of mail they deal with. For another, I use various sets of filters to categorize incoming mail into various categories of things. Hell, I can even run statistics on it, if I want. This is a much better solution than continually giving out fake email addresses, or using +stuff to figure out who sent what where... I'd prefer to simply let my filters deal with it instead. 

Finally, if you're one of those systems that scours the web and/or social networks for visible email addresses and then automatically emails that person to let them know that their address is visible, then by all means please just fuck off and die. You're part of the problem. On the other hand, if you're just a regular guy with good intentions, then this doesn't apply to you. :)

Just my 2 cents.

--></div>
		</li>
<li id="categories-2" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-573"><a href="http://ottopress.com/category/code/" title="View all posts filed under Code">Code</a>
</li>
	<li class="cat-item cat-item-574"><a href="http://ottopress.com/category/other/" title="View all posts filed under Other">Other</a>
</li>
	<li class="cat-item cat-item-575"><a href="http://ottopress.com/category/rants/" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://ottopress.com/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-576"><a href="http://ottopress.com/category/wordpress/" title="View all posts filed under WordPress">WordPress</a>
</li>
		</ul>
</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://ottopress.com/2014/02/'>February 2014</a></li>
	<li><a href='http://ottopress.com/2013/11/'>November 2013</a></li>
	<li><a href='http://ottopress.com/2013/10/'>October 2013</a></li>
	<li><a href='http://ottopress.com/2013/06/'>June 2013</a></li>
	<li><a href='http://ottopress.com/2013/03/'>March 2013</a></li>
	<li><a href='http://ottopress.com/2012/11/'>November 2012</a></li>
	<li><a href='http://ottopress.com/2012/09/'>September 2012</a></li>
	<li><a href='http://ottopress.com/2012/08/'>August 2012</a></li>
	<li><a href='http://ottopress.com/2012/07/'>July 2012</a></li>
	<li><a href='http://ottopress.com/2012/05/'>May 2012</a></li>
	<li><a href='http://ottopress.com/2012/02/'>February 2012</a></li>
	<li><a href='http://ottopress.com/2012/01/'>January 2012</a></li>
	<li><a href='http://ottopress.com/2011/12/'>December 2011</a></li>
	<li><a href='http://ottopress.com/2011/11/'>November 2011</a></li>
	<li><a href='http://ottopress.com/2011/10/'>October 2011</a></li>
	<li><a href='http://ottopress.com/2011/09/'>September 2011</a></li>
	<li><a href='http://ottopress.com/2011/08/'>August 2011</a></li>
	<li><a href='http://ottopress.com/2011/07/'>July 2011</a></li>
	<li><a href='http://ottopress.com/2011/06/'>June 2011</a></li>
	<li><a href='http://ottopress.com/2011/05/'>May 2011</a></li>
	<li><a href='http://ottopress.com/2011/04/'>April 2011</a></li>
	<li><a href='http://ottopress.com/2011/03/'>March 2011</a></li>
	<li><a href='http://ottopress.com/2011/02/'>February 2011</a></li>
	<li><a href='http://ottopress.com/2011/01/'>January 2011</a></li>
	<li><a href='http://ottopress.com/2010/12/'>December 2010</a></li>
	<li><a href='http://ottopress.com/2010/11/'>November 2010</a></li>
	<li><a href='http://ottopress.com/2010/10/'>October 2010</a></li>
	<li><a href='http://ottopress.com/2010/09/'>September 2010</a></li>
	<li><a href='http://ottopress.com/2010/08/'>August 2010</a></li>
	<li><a href='http://ottopress.com/2010/06/'>June 2010</a></li>
	<li><a href='http://ottopress.com/2010/05/'>May 2010</a></li>
	<li><a href='http://ottopress.com/2010/04/'>April 2010</a></li>
	<li><a href='http://ottopress.com/2010/03/'>March 2010</a></li>
	<li><a href='http://ottopress.com/2010/02/'>February 2010</a></li>
	<li><a href='http://ottopress.com/2009/11/'>November 2009</a></li>
	<li><a href='http://ottopress.com/2009/09/'>September 2009</a></li>
	<li><a href='http://ottopress.com/2008/09/'>September 2008</a></li>
		</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/">Better Know a Vulnerability: SQL Injection</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/language-packs-101-prepwork/">Language Packs 101 &#8211; Prepwork</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/slides-a-presentation-theme/">Slides: A Presentation Theme</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/">I&#8217;m not a fan of orange&#8230;</a>
						</li>
				</ul>
		</li>
<li id="text-6" class="widget widget_text"><h2 class="widgettitle">WP Core Contributions</h2>
			<div class="textwidget"><p>
<a href='http://core.trac.wordpress.org/changeset/28072'>[28072]</a> - <a href='http://core.trac.wordpress.org/ticket/19393'>#19393</a><br />
<a href='http://core.trac.wordpress.org/changeset/27522'>[27522]</a> - <a href='http://core.trac.wordpress.org/ticket/19889'>#19889</a><br />
<a href='http://core.trac.wordpress.org/changeset/27399'>[27399]</a> - <a href='http://core.trac.wordpress.org/ticket/25665'>#25665</a><br />
<a href='http://core.trac.wordpress.org/changeset/26978'>[26978]</a> - <a href='http://core.trac.wordpress.org/ticket/23149'>#23149</a><br />
<a href='http://core.trac.wordpress.org/changeset/26711'>[26711]</a> - <a href='http://core.trac.wordpress.org/ticket/21442'>#21442</a><br />
<a href='http://core.trac.wordpress.org/changeset/26072'>[26072]</a> - <a href='http://core.trac.wordpress.org/ticket/25858'>#25858</a><br />
<a href='http://core.trac.wordpress.org/changeset/22152'>[22152]</a> - <a href='http://core.trac.wordpress.org/ticket/21914'>#21914</a><br />
<a href='http://core.trac.wordpress.org/changeset/22026'>[22026]</a> - <a href='http://core.trac.wordpress.org/ticket/22002'>#22002</a><br />
<a href='http://core.trac.wordpress.org/changeset/21839'>[21839]</a> - <a href='http://core.trac.wordpress.org/ticket/16996'>#16996</a><br />
<a href='http://core.trac.wordpress.org/changeset/21802'>[21802]</a> - <a href='http://core.trac.wordpress.org/ticket/18674'>#18674</a><br />
<a href='http://core.trac.wordpress.org/changeset/21776'>[21776]</a> - <a href='http://core.trac.wordpress.org/ticket/13729'>#13729</a><br />
<a href='http://core.trac.wordpress.org/changeset/21609'>[21609]</a> - <a href='http://core.trac.wordpress.org/ticket/19324'>#19324</a><br />
<a href='http://core.trac.wordpress.org/changeset/20916'>[20916]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20784'>[20784]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20783'>[20783]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20267'>[20267]</a> - <a href='http://core.trac.wordpress.org/ticket/13774'>#13774</a><br />
<a href='http://core.trac.wordpress.org/changeset/19721'>[19721]</a> - <a href='http://core.trac.wordpress.org/ticket/19626'>#19626</a><br />
<a href='http://core.trac.wordpress.org/changeset/19003'>[19003]</a> - <a href="http://core.trac.wordpress.org/ticket/17406">#17406</a><br />
<a href='http://core.trac.wordpress.org/changeset/18741'>[18741]</a> - <a href="http://core.trac.wordpress.org/ticket/15473">#15473</a><br />
<a href='http://core.trac.wordpress.org/changeset/18602'>[18602]</a> - <a href="http://core.trac.wordpress.org/ticket/18230">#18230</a><br />
<a href='http://core.trac.wordpress.org/changeset/18541'>[18541]</a> - <a href="http://core.trac.wordpress.org/ticket/16687">#16687</a><br />
<a href='http://core.trac.wordpress.org/changeset/18205'>[18205]</a> - <a href="http://core.trac.wordpress.org/ticket/17148">#17148</a><br />
<a href='http://core.trac.wordpress.org/changeset/17254'>[17254]</a> - <a href="http://core.trac.wordpress.org/ticket/16192">#16192</a><br />
<a href='http://core.trac.wordpress.org/changeset/16555'>[16555]</a> - <a href="http://core.trac.wordpress.org/ticket/12891">#12891</a><br />
<a href='http://core.trac.wordpress.org/changeset/16284'>[16284]</a> - <a href="http://core.trac.wordpress.org/ticket/13324">#13324</a><br />
<a href='http://core.trac.wordpress.org/changeset/13420'>[13420]</a> - <a href="http://core.trac.wordpress.org/ticket/12291">#12291</a><br />
<a href='http://core.trac.wordpress.org/changeset/12581'>[12581]</a> - <a href="http://core.trac.wordpress.org/ticket/7225">#7225</a><br />
<a href='http://core.trac.wordpress.org/changeset/11738'>[11738]</a> - <a href="http://core.trac.wordpress.org/ticket/10145">#10145</a><br />
<a href='http://core.trac.wordpress.org/changeset/11329'>[11329]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10962'>[10962]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10757'>[10757]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10753'>[10753]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10252'>[10252]</a> - <a href="http://core.trac.wordpress.org/ticket/6791">#6791</a><br />
<a href='http://core.trac.wordpress.org/changeset/9276'>[9276]</a> - <a href="http://core.trac.wordpress.org/ticket/7124">#7124</a><br />
<a href='http://core.trac.wordpress.org/changeset/9209'>[9209]</a> - <a href="http://core.trac.wordpress.org/ticket/7901">#7901</a><br />
<a href='http://core.trac.wordpress.org/changeset/9207'>[9207]</a> - <a href="http://core.trac.wordpress.org/ticket/7635">#7635</a><br />
<a href='http://core.trac.wordpress.org/changeset/9139'>[9139]</a> - <a href="http://core.trac.wordpress.org/ticket/7847">#7847</a><br />
<a href='http://core.trac.wordpress.org/changeset/9089'>[9089]</a> - <a href="http://core.trac.wordpress.org/ticket/7772">#7772</a><br />
<a href='http://core.trac.wordpress.org/changeset/8968'>[8968]</a> - <a href="http://core.trac.wordpress.org/ticket/7761">#7761</a><br />
<a href='http://core.trac.wordpress.org/changeset/8285'>[8285]</a> - <a href="http://core.trac.wordpress.org/ticket/6879">#6879</a><br />
<a href='http://core.trac.wordpress.org/changeset/8208'>[8208]</a> - <a href="http://core.trac.wordpress.org/ticket/4448">#4448</a><br />
<a href='http://core.trac.wordpress.org/changeset/8132'>[8132]</a> - <a href="http://core.trac.wordpress.org/ticket/4954">#4954</a><br />
<a href='http://core.trac.wordpress.org/changeset/8131'>[8131]</a> - <a href="http://core.trac.wordpress.org/ticket/6590">#6590</a><br />
<a href='http://core.trac.wordpress.org/changeset/7869'>[7869]</a> - <a href="http://core.trac.wordpress.org/ticket/6513">#6513</a><br />
<a href='http://core.trac.wordpress.org/changeset/7647'>[7647]</a> - <a href="http://core.trac.wordpress.org/ticket/6608">#6608</a><br />
<a href='http://core.trac.wordpress.org/changeset/7461'>[7461]</a> - <a href="http://core.trac.wordpress.org/ticket/6339">#6339</a><br />
<a href='http://core.trac.wordpress.org/changeset/6873'>[6873]</a> - <a href="http://core.trac.wordpress.org/ticket/4986">#4986</a><br />
<a href='http://core.trac.wordpress.org/changeset/6760'>[6760]</a> - <a href="http://core.trac.wordpress.org/ticket/4617">#4617</a><br />
<a href='http://core.trac.wordpress.org/changeset/6616'>[6616]</a> - <a href="http://core.trac.wordpress.org/ticket/5155">#5155</a><br />
<a href='http://core.trac.wordpress.org/changeset/6439'>[6439]</a> - <a href="http://core.trac.wordpress.org/ticket/2805">#2805</a><br />
<a href='http://core.trac.wordpress.org/changeset/6091'>[6091]</a> - <a href="http://core.trac.wordpress.org/ticket/4182">#4182</a><br />
<a href='http://core.trac.wordpress.org/changeset/6086'>[6086]</a> - <a href="http://core.trac.wordpress.org/ticket/4946">#4946</a><br />
<a href='http://core.trac.wordpress.org/changeset/5986'>[5986]</a> - <a href="http://core.trac.wordpress.org/ticket/4873">#4873</a><br />
<a href='http://core.trac.wordpress.org/changeset/5982'>[5982]</a> - <a href="http://core.trac.wordpress.org/ticket/4800">#4800</a><br />
<a href='http://core.trac.wordpress.org/changeset/5958'>[5958]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5920'>[5920]</a> - <a href="http://core.trac.wordpress.org/ticket/4703">#4703</a><br />
<a href='http://core.trac.wordpress.org/changeset/5910'>[5910]</a> - <a href="http://core.trac.wordpress.org/ticket/4654">#4654</a><br />
<a href='http://core.trac.wordpress.org/changeset/5881'>[5881]</a> - <a href="http://core.trac.wordpress.org/ticket/4704">#4704</a><br />
<a href='http://core.trac.wordpress.org/changeset/5857'>[5857]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5848'>[5848]</a> - <a href="http://core.trac.wordpress.org/ticket/4499">#4499</a><br />
<a href='http://core.trac.wordpress.org/changeset/5845'>[5845]</a> - <a href="http://core.trac.wordpress.org/ticket/4547">#4547</a><br />
<a href='http://core.trac.wordpress.org/changeset/5317'>[5317]</a> - <a href="http://core.trac.wordpress.org/ticket/4169">#4169</a><br />
<a href='http://core.trac.wordpress.org/changeset/5154'>[5154]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5151'>[5151]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5104'>[5104]</a> - <a href="http://core.trac.wordpress.org/ticket/3790">#3790</a><br />
<a href='http://core.trac.wordpress.org/changeset/4964'>[4964]</a> - <a href="http://core.trac.wordpress.org/ticket/3898">#3898</a><br />
</p></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<div style="float:left;"><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
<a href="http://ottopress.com/feed/">Entries (RSS)</a> and <a href="http://ottopress.com/comments/feed/">Comments (RSS)</a>.<br />
<span about="http://ottodestruct.com/" xmlns:cc="http://creativecommons.org/ns#">
This page, by <a property="cc:attributionName" rel="cc:attributionURL" href="http://ottodestruct.com/">Otto</a>, is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License</a>.</span><br />
Powered by <a href="http://wordpress.org/" title="Powered by WordPress.">WordPress</a>.<br />
<img alt='css.php' src="http://ottopress.com/wp-content/plugins/cookies-for-comments/css.php?k=c6a73cb029f035cdaa9e9e8336d25169&amp;o=i&amp;t=200145916" width='1' height='1' />	<div style="display:none">
	<div class="grofile-hash-map-5c59d04ceb10b7ce586524221d010b76">
	</div>
	<div class="grofile-hash-map-fc1343c3b81fed5bef72db59279c719f">
	</div>
	<div class="grofile-hash-map-0994d5e2e158a24ba8017c2525d78263">
	</div>
	<div class="grofile-hash-map-a0e95b475f026e6b3bcd7f615c7f9bc2">
	</div>
	<div class="grofile-hash-map-91fc842c0ee345e8bc6e864d3eef2a77">
	</div>
	<div class="grofile-hash-map-a084125c824d274ff40cb834cf9f544a">
	</div>
	<div class="grofile-hash-map-a1b78e753cb6bfc80cb048b87a1059b4">
	</div>
	<div class="grofile-hash-map-e70d4086e89c2e1e081870865be68485">
	</div>
	<div class="grofile-hash-map-d4c8a07d3227fbd403931b0d161d61d2">
	</div>
	<div class="grofile-hash-map-2e64bc476e49fde99b6a3814c0d7abdd">
	</div>
	<div class="grofile-hash-map-239a34b0d1ceb0acdd42b1657267a081">
	</div>
	<div class="grofile-hash-map-2c4fe0b436f40745b0731019e176362f">
	</div>
	<div class="grofile-hash-map-69fe5bb2f75c934b843390b5d0978a1f">
	</div>
	<div class="grofile-hash-map-1784f58e0f5bb339f412f91b0c3526e2">
	</div>
	<div class="grofile-hash-map-7736982e072c988021d830f26b3e241d">
	</div>
	<div class="grofile-hash-map-17d7f1d3862401d855ccbdfbe36e3f68">
	</div>
	<div class="grofile-hash-map-0de5f1e5d11df19b99426aea1cb23932">
	</div>
	<div class="grofile-hash-map-e50a0b782492223b65ed6e81632d75ed">
	</div>
	<div class="grofile-hash-map-47cec0e00cbfe9c81b9320402c0fb1f6">
	</div>
	<div class="grofile-hash-map-81a540479468a450b293942066ddfee5">
	</div>
	<div class="grofile-hash-map-13d49945b2541e0e05df0e1b6f8dacfd">
	</div>
	<div class="grofile-hash-map-333c5b1bd9f7c0f1b765fb3bba107eee">
	</div>
	<div class="grofile-hash-map-572e7ca86e560ef65187861b6322a7af">
	</div>
	<div class="grofile-hash-map-dcb7cc657c19726b709098172efa1b6d">
	</div>
	<div class="grofile-hash-map-035a28fd9a7b59fa07eb6a8a1726a58c">
	</div>
	<div class="grofile-hash-map-ef85108cbe732b07e1fa485eab0be614">
	</div>
	<div class="grofile-hash-map-36483685eddffc12986475fc30e29821">
	</div>
	</div>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<link rel='stylesheet' id='gplus-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/gplus-authorship/style.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='yarppRelatedCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/related.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/comment-reply.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en-US","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.14.2'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
<script type='text/javascript' src='//apis.google.com/js/plusone.js?ver=3.9.1'></script>

	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.2',blog:'12342457',post:'471',tz:'-5'});
	var load_cmc = function(){linktracker_init(12342457,471,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></div></div>

<script type="text/javascript">
    window._idl = {};
    _idl.variant = "modal";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

</body>
</html>
	
