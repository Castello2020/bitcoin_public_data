http://ottopress.com/tag/wordpress-2/
HTTP/1.1 200 OK
Server: nginx/1.4.4
Date: Wed, 23 Jul 2014 11:58:42 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Pingback: http://ottopress.com/xmlrpc.php

<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>WordPress &raquo; Otto on WordPress</title>

<link rel="profile" href="http://www.w3.org/1999/xhtml/vocab" />
<link rel="me" type="text/html" href="https://plus.google.com/100201852715113506716" />

<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/style.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/print.css" type="text/css" media="print" />

<link rel="pingback" href="http://ottopress.com/xmlrpc.php" />

<meta property="og:email" content="otto@ottodestruct.com" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">

<script type="text/javascript">var description = '';</script>
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="IvlRFnRHu9RIiAiOS-bo-8vU4ju4V6_b4U3M_-1jlXQ" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Feed" href="http://ottopress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Comments Feed" href="http://ottopress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; WordPress Tag Feed" href="http://ottopress.com/tag/wordpress-2/feed/" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='the-neverending-homepage-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.css?ver=20140422' type='text/css' media='all' />
<link rel='stylesheet' id='tiled-gallery-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.css?ver=2012-09-21' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.13.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery-migrate.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ottopress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ottopress.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<meta name="pinterest" content="nopin" /><link rel="microsummary" type="text/plain" href="/tag/wordpress-2/?microsummary=1" /><link rel="shortcut icon" href="http://ottopress.com/wp-content/wp-logo-vs.png" /><style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-27538437-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>

<body class="archive tag tag-wordpress-2 tag-609 infinite-scroll neverending">
<script type="text/javascript">
if (top.location != self.location) top.location.replace(self.location);
</script>
<div id="page">
<div id="header">
	<div id="headertitle">
		<h1><a href="http://ottopress.com" title="Otto on WordPress: You have to use an Ottopress to get fresh squeezed Otto.">Otto on WordPress</a></h1>
		<p>You have to use an Ottopress to get fresh squeezed Otto.</p>
	</div> 
	<!-- Search box (If you prefer having search form as a sidebar widget, remove this block) -->
	<div class="search">
		<form method="get" id="searchform" action="http://ottopress.com/">
<input type="search" size="20" results="5" name="s" id="s" placeholder="Search..." speech="speech" x-webkit-speech="x-webkit-speech" onwebkitspeechchange="this.form.submit();" />
</form>
	</div> 
	<!-- Search ends here-->
		
</div>
<div id="navbar">
<div id="nav">
<div class="menu"><ul><li ><a href="http://ottopress.com/">Home</a></li><li class="page_item page-item-5 page_item_has_children"><a href="http://ottopress.com/wordpress-plugins/">WordPress Plugins</a><ul class='children'><li class="page_item page-item-205"><a href="http://ottopress.com/wordpress-plugins/atd-for-comments/">After The Deadline For Comments</a></li><li class="page_item page-item-21"><a href="http://ottopress.com/wordpress-plugins/atom-default-feed/">Atom Default Feed</a></li><li class="page_item page-item-965"><a href="http://ottopress.com/wordpress-plugins/dropbox-photo-sideloader/">Dropbox Photo Sideloader</a></li><li class="page_item page-item-15"><a href="http://ottopress.com/wordpress-plugins/gravatar-box/">Gravatar Box</a></li><li class="page_item page-item-32"><a href="http://ottopress.com/wordpress-plugins/php-code-widget/">PHP Code Widget</a></li><li class="page_item page-item-7"><a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a></li><li class="page_item page-item-10"><a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a></li><li class="page_item page-item-81"><a href="http://ottopress.com/wordpress-plugins/unicornify/">Unicornify</a></li></ul></li><li class="page_item page-item-374"><a href="http://ottopress.com/contact/">Contact Otto</a></li><li><a href="http://ottodestruct.com" title="Nothing to See Here">Nothing to See Here</a></li><li><a href="http://buyottoabeer.com" title="Otto on Beer">Otto on Beer</a></li></ul></div>
	</div>
</div>
<div id="wrapper">
	<div id="content">

	
			<p>Posts tagged &#8216;WordPress&#8217;</p>

	 		
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/tag/wordpress-2/page/2/" >&laquo; Previous Entries</a></div>
			<div class="alignright"></div>
		</div>

					<div id="post-957" class="post-957 post type-post status-publish format-standard hentry category-code category-wordpress tag-csrf tag-exploit tag-form tag-nonce tag-plugin tag-theme tag-vulnerability tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/" rel="bookmark" title="Permanent Link to Better Know a Vulnerability: Cross Site Request Forgery (CSRF)" itemprop="url"><span itemprop="name">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</span></a></h2>
				<div class="postmetadata">February 26, 2014, 8:11 am <!-- by <span rel="author">Otto</span> --></div>
				<div class="postentry" itemprop="description">
					<p>One of the easier to understand vulnerabilities is the CSRF. It&#8217;s also one of the most common issues we see in plugins and themes, because people rarely think about it.</p>
<p>Imagine that I have a form that takes input, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;form action=&quot;http://example.com/example.php&quot; method=&quot;GET&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;demo&quot; /&gt;
&lt;/form&gt;
</pre>
<p>Now, that&#8217;s a simple form (and missing a submit button to boot), but you get the idea. It takes a text input. Presumably, something on the other end (at /example.php) processes that input, saves it in a database, something like that. Easy.</p>
<h3>First question: Is this necessary?</h3>
<p>The main question I see asked when this concept is explained to people is &#8220;why is this necessary?&#8221;. Some people believe that since you have to be logged in to access admin screens in the first place, then you can&#8217;t get to the forms and submit them. Why have all this protection and checking for a form submission when the form is hidden behind a login screen?</p>
<p>What you need to understand is the difference between &#8220;<em>authority</em>&#8221; and &#8220;<em>intent</em>&#8220;.</p>
<h3>Authority</h3>
<p>In real world cases where we are processing that input, we generally want to limit who is allowed to submit that form in some way. A plugin will want to only allow admins to change settings. A theme will only want to allow site owners to adjust the display of the site. Things of that nature. For these cases, we use methods of authentication.</p>
<p>There&#8217;s several ways to do this, we can check the current_user information. WordPress has capability checks for users to know what they are and are not allowed to do. When we check these, we&#8217;re verifying <strong>authority</strong>. Making sure that the user is allowed to do these things.</p>
<p>But something else that we need to check which most people don&#8217;t think about is <strong>intent</strong>. Did the user actually intend to submit that form, or did their browser submit it for them automatically, perhaps without their knowledge?</p>
<p>Examine that form again, and consider what would happen if you were to visit a webpage, anywhere on the internet, that contains this:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;img src=&quot;http://example.com/example.php?demo=pwned&quot; /&gt;
</pre>
<p>Now, you might be thinking that this is a rather contrived example, and you&#8217;d be right on that score, but it serves to demonstrate the point. Your browser loads this URL and that is the equivalent action to submitting that form, with &#8220;pwned&#8221; as the text in question.</p>
<p>Here&#8217;s the kicker, all those authority checks do us no good in preventing this. You actually do have the authority to submit that form, and your browser, using your authority, just submitted it for you. Pwned, indeed.</p>
<p>(For those of you thinking &#8220;just use POST forms&#8221;, consider that javascript can submit POST forms. So that&#8217;s really no help.)</p>
<h3>Intent</h3>
<p>What we need is to verify intent. We need to know that the user submitted that form, and not just the browser doing it for them automatically.</p>
<p>WordPress used to do this (a looong time ago) using the referer. For those who don&#8217;t know, referer is a URL passed by your browser to indicate where a user came from. So one could check that the referer says that the form was submitted from the form&#8217;s page and not from some other page on the internet. The problem is that referer is not reliable. Some browsers have the ability for script to fake the referer. Firewalls and proxies often strip the referer out, for privacy concerns. And so forth.</p>
<h3>Nonces</h3>
<p>WordPress now does this using nonces. A nonce is a &#8220;number used once&#8221; in its purest form. Basically, it&#8217;s a one-time password. When we generate the form, we generate a number. When the form is submitted, we check the number. If the number is wrong or missing, we don&#8217;t allow the form to be submitted. A script cannot know the number in advance. Other sites cannot guess the number.</p>
<p>Now, technically, WordPress doesn&#8217;t use real nonces, because they&#8217;re not &#8220;used once&#8221;. Instead, WordPress nonces revolve on a 12 hour rotating system (where 24 hours are accepted). For any given 12 hour period, the nonce number for a given action will be the same. But it&#8217;s close enough to a real nonce to eliminate the issue, but notably it&#8217;s <em>only</em> for the issue of verifying intent. Don&#8217;t try to use WordPress nonces for anything else. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>So, when we generate a form, we generate a nonce. This nonce is based on five things: site, user, time, the action being performed, and the object that the action is being performed on. Changing any of these gives us a different nonce.</p>
<p>Let&#8217;s say I want to delete a post. To do that, I need to know the nonce for deleting that specific post, as me, on my site, within the last 24 hours. Without that nonce, I cannot perform the action. More importantly, in order for somebody to &#8220;trick&#8221; my browser into doing it for me, they need to get that specific nonce and get my browser to load it within 24 hours. Tough to do. And even if they pull it off, they only have been able to perform that very specific action, the nonce obtained is useless for any other purpose. They don&#8217;t get any form of full control via this manner. They can&#8217;t make my browser do anything on mysite that they don&#8217;t have the nonce for.</p>
<h3>Using nonces</h3>
<p>So, let&#8217;s get down to brass tacks. Generating a nonce in WordPress is easy and can be done in many different ways depending on your particular needs. You might want to protect a simple link, or you might want to protect a form, or you might even need to protect a javascript ajax call.</p>
<p>Protecting a link can be done with wp_nonce_url(). It takes a URL and an action and adds a valid nonce onto that URL. It works like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$nonced_url = wp_nonce_url( $url, 'action_'.$object_id );
</pre>
<p>Here, we&#8217;re taking some URL, and adding a nonce onto it for a specific action on some specific object. This is important, actions and objects need to both be specified if there is some object being referred to. An example might be a link to delete a specific post. Such code would look like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_nonce_url( $url, 'trash-post_'.$post-&gt;ID )
</pre>
<p>The action is &#8220;trash-post&#8221; and the post being trashed has its ID number appended to that action. Thus, the nonce will let you trash that post and <em>only</em> that post.</p>
<p>On the other hand, maybe we have a form that we need to protect instead. Inside that form, we can add something like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_nonce_field( 'delete-comment_'.$comment_id );
</pre>
<p>This is the nonce for deleting a comment. It outputs a couple of form fields, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;input type=&quot;hidden&quot; id=&quot;_wpnonce&quot; name=&quot;_wpnonce&quot; value=&quot;1234567890&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;_wp_http_referer&quot; value=&quot;/wp-admin/edit-comments.php&quot; /&gt;
</pre>
<p>The value for the nonce will be specific to deleting that comment, on that site, by that user.</p>
<p>Sometimes we just need to generate the nonce directly, in no specific format. One case might be for an AJAX type call, where the data is being submitted by jQuery. In such a case, you can use the wp_create_nonce function to get just that nonce value, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_create_nonce( 'action_'.$object_id );
</pre>
<p>For AJAX requests, you&#8217;ll want to include that nonce value in the submitted data with a name of &#8220;_ajax_nonce&#8221;. Why that particular name? Because it&#8217;s what WordPress checks when verifying the nonce. Speaking of verification:</p>
<h3>Verifying nonces</h3>
<p>Generating these numbers is no good if you don&#8217;t check them as well. Fortunately, WordPress makes this easy. There&#8217;s two functions to verify incoming nonces.</p>
<pre class="brush: php; title: ; notranslate" title="">
check_admin_referer( 'action_'.$object_id );
</pre>
<p>The name of the function refers back to the time before nonces, when this function call was checking the referer value from the browser. Nowadays, it checks nonces instead. If the _wpnonce sent back in the form does not match the action and ID here, then this function stops further processing. This is the cause of the &#8220;Are you sure you want to do this?&#8221; screen that is sometimes reported by users. To avoid getting this screen, the nonce being checked has to match.</p>
<p>An alternative to checking forms or links is checking ajax requests, which is why we have this function:</p>
<pre class="brush: php; title: ; notranslate" title="">
check_ajax_referer( 'action_'.$object_id );
</pre>
<p>This performs the same basic check, but if it fails, it returns a simple &#8220;-1&#8243; response and then halts processing. Your AJAX javascript code can recognise that response and take appropriate action based on it.</p>
<p>In either case, if the nonce fails, the script exits. No action is taken. The form is not processed, the post not deleted. That&#8217;s the sort of check you need to prevent CSRF attacks.</p>
<h3>Bottom Line</h3>
<p>If you have a plugin or a theme or any type of code that &#8220;does something&#8221; in WordPress, then you need to protect that action with a nonce. If you&#8217;re not protecting it with a nonce, then it&#8217;s possible for somebody else to trick your browser into performing that action on your behalf.</p>
<p><span style="line-height: 1.5em;">Also, note that it&#8217;s not enough to just name the action. You generally are taking action on some specific &#8220;thing&#8221;, and the ID of that thing needs to be included in your nonce as well. The more specific the action, the better.</span></p>
<p>Any form, any action, no matter how much &#8220;authentication&#8221; you have on checking it, can be exploited, because you&#8217;re not really authenticating the &#8220;user&#8221;, you&#8217;re authenticating that it&#8217;s coming from &#8220;the user&#8217;s browser&#8221;. You need to have something else that changes regularly, so that you can verify that the user did indeed load that particular form and submit it relatively recently, and thus probably intended to perform that action.</p>
<p>Nonces are easy to implement. So do it already. We have enough plugins not doing it that this clearly needs to be said. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/eo' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/csrf/" rel="tag">csrf</a>, <a href="http://ottopress.com/tag/exploit/" rel="tag">exploit</a>, <a href="http://ottopress.com/tag/form/" rel="tag">form</a>, <a href="http://ottopress.com/tag/nonce/" rel="tag">nonce</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/vulnerability/" rel="tag">vulnerability</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/#comments" title="Comment on Better Know a Vulnerability: Cross Site Request Forgery (CSRF)">7 Comments</a>									 </div>
			</div>			<div id="post-914" class="post-914 post type-post status-publish format-standard hentry category-code category-wordpress tag-slides tag-theme tag-wordcamp tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2013/slides-a-presentation-theme/" rel="bookmark" title="Permanent Link to Slides: A Presentation Theme" itemprop="url"><span itemprop="name">Slides: A Presentation Theme</span></a></h2>
				<div class="postmetadata">June 19, 2013, 10:44 am <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>You know, when some people are asked to do a presentation on a subject, they start by thinking about what they&#8217;re going to say, how they&#8217;re going to say it, and what their presentation will contain.</p>
<p>Me, I just start writing code.</p>
<p>I was asked to present at WordCamp Seattle, on the specific subject of the GPL. Talking about licenses is pretty dry stuff, so I came up with some ideas and such and put them down and built a presentation. No problem. But naturally, I wanted to use WordPress to present it.</p>
<p>I&#8217;ve tried this sort of presentation-theme idea a couple years back, and didn&#8217;t really get anywhere good. HTML wasn&#8217;t up to the task at the time, not really. But in my searching for this again, I ran across the <a href="https://code.google.com/p/io-2012-slides/">Google IO 2012 slides template</a>.</p>
<p>It&#8217;s a neat template. Does some very cool stuff. HTML5, CSS3, clever Javascripty goodness. Bit annoying to adjust though, and very hardcoded. So, I turned it into a WordPress theme instead.</p>
<p>I call it &#8220;Slides&#8221;, because I&#8217;m bad at naming things.</p>
<p>If you want to skip straight to the download, you&#8217;ll find it at the bottom of the post, but I encourage you to read first, because if you just install it on an existing WordPress install, you&#8217;ll find your site to be instantly broken.</p>
<p> <a href="http://ottopress.com/2013/slides-a-presentation-theme/#more-914" class="more-link">Continue reading &#8216;Slides: A Presentation Theme&#8217; &raquo;</a></p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/e6' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/slides/" rel="tag">slides</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/wordcamp/" rel="tag">wordcamp</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2013/slides-a-presentation-theme/#comments" title="Comment on Slides: A Presentation Theme">18 Comments</a>									 </div>
			</div>			<div id="post-849" class="post-849 post type-post status-publish format-standard hentry category-code category-wordpress tag-i18n tag-internationalization tag-l10n tag-localization tag-php tag-translation tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/more-internationalization-fun/" rel="bookmark" title="Permanent Link to More Internationalization Fun" itemprop="url"><span itemprop="name">More Internationalization Fun</span></a></h2>
				<div class="postmetadata">September 19, 2012, 5:10 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><a href="http://i1.wp.com/ottopress.com/files/2012/02/international_flags.jpg"><img src="http://i1.wp.com/ottopress.com/files/2012/02/international_flags.jpg?resize=280%2C280" alt="" title="international_flags" class="alignright size-full wp-image-777" data-recalc-dims="1" /></a><br />
So in my <a href="http://ottopress.com/2012/internationalization-youre-probably-doing-it-wrong/">last post about Internationalization</a>, I covered some non-obvious things that you should consider when adding translation capabilities to your code.</p>
<p>Today, let&#8217;s add to that by covering some non-obvious translation functions. You&#8217;re probably not using these, since they don&#8217;t get talked about as much. But there&#8217;s probably places where you should be using them, so knowing about them is the first step. And <a href="http://www.youtube.com/watch?v=P4mQ7UUkjro">knowing is half the battle</a>.</p>
<h3>Basic functions, again</h3>
<p>Last time I talked about these functions:</p>
<ul>
<li><code>__()</code></li>
<li><code>_e()</code></li>
<li><code>_x()</code></li>
<li><code>_ex()</code></li>
<li><code>_n()</code></li>
</ul>
<p>Let&#8217;s cover the ones I didn&#8217;t talk about.</p>
<h3>Escaping output</h3>
<p>In practice, you tend to use these mostly when outputting things onto the main page or in the admin. But, one thing you also use a lot when outputting text is the standard escaping functions. These are things like <code>esc_html()</code>, which outputs text in a way that makes it &#8220;safe&#8221; to go onto a webpage, without being interpreted as HTML. If the text comes from user input, then this is a good idea.</p>
<p>Now, if you think about it, then the text you have may be translated in some other file, which you don&#8217;t control either. So escaping that text might be a good idea too. If somebody snuck bad code into a translation file, a user might get bad things displayed without being able to easily find it.</p>
<p>So you could write something like <code>echo esc_html(__('text','text-domain'))</code>, but that&#8217;s a bit wordy. Let&#8217;s talk about some shortcuts.</p>
<p>The <code>esc_html__()</code> function is the equivalent of <code>esc_html(__(...))</code>. It does the escaped html and the double-underscore translation all in one go. Similarly, the <code>esc_html_e()</code> function does the same thing, but it echoes the result, just like the <code>_e()</code> function would. And there&#8217;s also <code>esc_html_x()</code>, which is the equivalent of combining <code>esc_html()</code> and <code>_x()</code>.</p>
<p>Along with those three are the three identical equivalents for attributes: <code>esc_attr__()</code>, <code>esc_attr_e()</code>, and <code>esc_attr_x()</code>. As the name implies, these combine the translation functions with <code>esc_attr()</code>, which is the escape function specifically intended when you&#8217;re outputting text into html attributes.</p>
<p>Also note there&#8217;s no shortcut for the equivalent of <code>_ex()</code>. It&#8217;s just not used that much, or at least not enough to need something special for it. Use an <code>echo esc_html_x()</code> instead.</p>
<p>There are no shortcuts for the other escaping functions as yet, but these can save a few keystrokes and make your code that much more readable.</p>
<h3>The Numerical No-op</h3>
<p>So we&#8217;ve got some shortcuts for escaping with those three functions, but where&#8217;s the love for <code>_n()</code>?</p>
<p>One of the problems with <code>_n()</code> is that it tends to require the strings to be in the same place that the PHP variable is. For all the other functions, you could have a big file of strings in an array, and then reference those strings by name or something elsewhere because they don&#8217;t require any PHP variables. Nothing about them is computed at the time of the output.</p>
<p>But not so with <code>_n()</code>, that $number to decide which string to use means that the strings have to be right there, they can&#8217;t be translated separately and referenced.</p>
<p>This is where <code>_n_noop()</code> comes in. The <code>_n_noop()</code> function basically takes the singular and plural strings for something, along with the text domain, and stores them in an array so that they can be referenced later by a function named <code>translate_nooped_plural()</code>.</p>
<p>Perhaps an example is in order. Let&#8217;s go back to the tacos:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( _n('You have %d taco.', 'You have %d tacos.', $number, 'plugin-domain'), $number );
</pre>
<p>What if we wanted those strings somewhere else? Like in a big file with all of our strings. Here&#8217;s a way to separate the strings from the _n() call:</p>
<pre class="brush: php; title: ; notranslate" title="">
$taco_plural = _n_noop('You have %d taco.', 'You have %d tacos.', 'plugin-domain');
$string = sprintf( translate_nooped_plural( $taco_plural, $number) , $number );
</pre>
<p>Now, that $taco_plural can be defined anywhere. Note that it contains no references to PHP variables. It&#8217;s basically static and unchanging. This allows us to separate it, then reference it elsewhere for the actual translation. The <code>translate_nooped_plural()</code> function performs the same job as <code>_n()</code> does, choosing which string to use based on the $number of tacos. The sprintf then pushes the $number into the chosen string, replacing the %d with the number.</p>
<p>Thus, that lets us extract the translatable strings out and put them anywhere we choose.</p>
<p>Also of note: The <code>_nx_noop()</code> function is a cross between <code>_n_noop()</code> and <code>_x()</code>. It takes a context for the translators as the third argument, and the domain becomes the fourth argument. Useful if you need to explain to the translators the context surrounding the pluralization choice.</p>
<h3>Numbers and Dates</h3>
<p>The <code>number_format_i18n()</code> function is functionally equivalent to the <a href="http://php.net/manual/en/function.number-format.php">PHP number_format</a> function. It lets you format numbers with commas at the thousands mark and so forth, except that it also takes localization into account. Not everybody uses commas for thousands and periods for decimals. This function will do the translation appropriately for that aspect.</p>
<p>The <code>date_i18n()</code> function is functionally equivalent to the <a href="http://php.net/manual/en/function.date.php">PHP date</a> function. It will handle all the same string formatting parameters as date() will, but it will cause output to be translated for month names, day-of-week names, and so forth. Of note is that it doesn&#8217;t change the format requested. If some places put days before months, for example, it won&#8217;t handle that. But it will output the month name in the native language (if the translation pack has the right month name in it). So you may want to run the date formatting string through <code>__()</code> as well, to let translators adjust the date format accordingly.</p>
<h3>Wrap up</h3>
<p>And that&#8217;s pretty much all the rest of the translation functions that I didn&#8217;t cover before. I may have forgotten a few useful ones here or there. Feel free to comment about anything I missed, or what you see most often, especially if you&#8217;re doing translations yourself.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bo' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/i18n/" rel="tag">i18n</a>, <a href="http://ottopress.com/tag/internationalization/" rel="tag">internationalization</a>, <a href="http://ottopress.com/tag/l10n/" rel="tag">l10n</a>, <a href="http://ottopress.com/tag/localization/" rel="tag">localization</a>, <a href="http://ottopress.com/tag/php/" rel="tag">PHP</a>, <a href="http://ottopress.com/tag/translation/" rel="tag">translation</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/more-internationalization-fun/#comments" title="Comment on More Internationalization Fun">7 Comments</a>									 </div>
			</div>			<div id="post-789" class="post-789 post type-post status-publish format-standard hentry category-code category-wordpress tag-3-4 tag-beta tag-code-2 tag-customizer tag-theme tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/how-to-leverage-the-theme-customizer-in-your-own-themes/" rel="bookmark" title="Permanent Link to How to leverage the Theme Customizer in your own themes" itemprop="url"><span itemprop="name">How to leverage the Theme Customizer in your own themes</span></a></h2>
				<div class="postmetadata">May 4, 2012, 6:33 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><em>Note: Everything I&#8217;m talking about here, including the code, is in beta mode. It will be subject to change. I&#8217;ll update this post after release to fix any code changes that may occur between now and then. I&#8217;m releasing this post now so that theme authors can start looking at their themes and thinking about how they might want to change the way they do options pages.</em></p>
<p>So, WordPress 3.4 has this nifty new feature you can find on the main Theme selection page. It&#8217;s a link next to each theme labeled &#8220;Customize&#8221;. This is the new Theme Customizer, and it&#8217;s way cool.</p>
<p>In fact, you can&#8217;t see what it does with a simple picture, so here&#8217;s a video. It&#8217;s available in HD if you want to go full screen. <img src="http://i1.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p><iframe width="700" height="394" src="http://www.youtube.com/embed/vD8v6u3noPg?feature=oembed" frameborder="0" allowfullscreen></iframe></p>
<p>So, now you know what it does, and if you&#8217;re a theme author, you&#8217;ve probably just gotten some great ideas. Here&#8217;s how you can implement those ideas in your theme.</p>
<p>First, note that if you already support the built in Custom Header and Custom Background functionality the WordPress core provides, then those will magically show up and work in the theme customizer. No extra code needed on your part.</p>
<h3>Existing Options</h3>
<p>Now, the first thing you&#8217;ll probably want to do is to take note of how your existing settings in the theme work. You have three main options for theme settings, realistically. I&#8217;ll go over them briefly.</p>
<p>1. &#8220;Theme mod&#8221;. This uses the set_theme_mod and get_theme_mod functions. It&#8217;s rare that themes actually use these since I wrote about the Settings API, but it is there and if you use these normally then it is supported by the Theme Customizer (in fact it&#8217;s the default).</p>
<p>2. Individual Settings. If you store your theme&#8217;s settings in the options table as individual rows, one per setting, then that works fine with the customizer. This is not the preferred way of doing things in themes, however, and not the most common. Still, some themes do this, so if you&#8217;re one of them, it&#8217;s supported as well.</p>
<p>3. Serialized Settings. This is the way I explained in my Settings API Tutorial and the method recommended by the Theme Review guidelines, as well as the way Chip described in his own tutorial for theme settings. Essentially, you store your settings in an array, then store that array using set_option or get_option, as one row in the database. This method is supported and it&#8217;s the way I&#8217;ll primarily cover in this article. I&#8217;ll briefly mention the other two methods when appropriate.</p>
<p>Once you know how your settings are stored, then you&#8217;ll know what to fill in at certain spots in the code. More on this when we get to it.</p>
<h3>Object Orientation</h3>
<p>Now, the Theme Customizer is very object oriented, and while you don&#8217;t necessarily need to understand this to implement the basics of it, you might need to understand it if you&#8217;re going to make something completely custom. Just a warning.</p>
<p>First, we&#8217;ll look at the left hand side of the customizer screen. Notice that the left hand side is divided into sections. Actually, that&#8217;s their name: WP_Customize_Section. In each of these sections is one or more controls; or rather, WP_Customize_Control. Finally, each of these controls one of more settings on the page: aka WP_Customize_Setting.</p>
<p>The Sections organize the controls. The Controls get input and pass it to the settings. The Settings interface with your existing options in the theme.</p>
<p>To make new stuff here for your own custom options, you need to know where to add it. That place is the customize_register action hook.</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action( 'customize_register', 'themename_customize_register' );
function themename_customize_register($wp_customize) {
	// ... do stuff ...
</pre>
<p>The function gets a parameter of the main $wp_customize object. This is the interface point where you will do everything like adding sections and controls and such.</p>
<h3>Sections</h3>
<p>So, first thing to do is to add a section. Here&#8217;s one way to do it:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_section( 'themename_color_scheme', array(
		'title'          =&gt; __( 'Color Scheme', 'themename' ),
		'priority'       =&gt; 35,
	) );
</pre>
<p>The first parameter is a unique ID for the section that you&#8217;ll need later (when you&#8217;re putting controls into it). The second parameter is an array of options for the section. Sections don&#8217;t have a lot of options, really. You can give them a title, you can give them a &#8220;description&#8221; if you need some explanatory text in them. The priority setting determines their order in the list.</p>
<p>You can also give sections a &#8220;capability&#8221; if you have a special case. Generally speaking, most sites require the &#8220;edit_theme_options&#8221; capability to have users edit this sort of thing, and this is the default capability that the sections use. However, if you have options that anybody can edit, or which should only be managed by administrators, changing this capability will prevent the section from appearing to users who can&#8217;t change those settings anyway.</p>
<p>One final thing you can add to a section is a &#8220;theme_supports&#8221; option. This will make the menu not appear unless the theme supports something. If you&#8217;re putting this code in a theme itself, then you already know what the theme supports, so it doesn&#8217;t make much sense. The core uses this to not show the header and background options if the theme doesn&#8217;t support them.</p>
<h3>Settings</h3>
<p>Next, let&#8217;s configure some settings. Yes, the settings, not the controls. See, the controls need to know what settings they&#8217;re changing, so we have to attach the settings up first.</p>
<p>To declare a setting, you do it like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_setting( 'themename_theme_options[color_scheme]', array(
		'default'        =&gt; 'some-default-value',
		'type'           =&gt; 'option',
		'capability'     =&gt; 'edit_theme_options',
	) );
</pre>
<p>In this case, I&#8217;ve declared that the setting I&#8217;m interested in is in an option, the option is named &#8220;themename_theme_options&#8221; in the database, and it&#8217;s serialized, and the actual array key in there is &#8220;color_scheme&#8221;. Remember that talk we had before about the Settings API and how you store your settings? This was method 3.</p>
<p>Here&#8217;s method 2 (one option per database entry):</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_setting( 'themename_color_scheme', array(
		'default'        =&gt; 'some-default-value',
		'type'           =&gt; 'option',
		'capability'     =&gt; 'edit_theme_options',
	) );
</pre>
<p>And here&#8217;s method 1 (using theme_mod):</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_setting( 'color_scheme', array(
		'default'        =&gt; 'some-default-value',
		'type'           =&gt; 'theme_mod',
		'capability'     =&gt; 'edit_theme_options',
	) );
</pre>
<p>This setting basically tells the theme customizer where the option is stored, and how to change it&#8217;s value so that your theme displays with the changed option.</p>
<p>Here&#8217;s the good bit about this: You&#8217;re telling the theme customizer where the option is. <em>You don&#8217;t have to change the way the existing option works at all.</em></p>
<p>You already have a theme options page, right? So somehow, you&#8217;re saving those options. And in the theme, it&#8217;s reading those options using get_theme_mod or get_option, right? The way the theme customizer works is that it intercepts that call using a filter, changes the option for the previewer case only, and then passes the new option along to the theme. So the theme has no idea that the value it&#8217;s getting isn&#8217;t in the database, but one the user just selected. That&#8217;s the magic trick and why themes <em>don&#8217;t have to dramatically change</em> to support this sort of thing. All they have to do to make custom sections is to tell the theme customizer code what options they&#8217;re using and how, and it changes those options directly for the previewer.</p>
<p>(Note of clarification here: The &#8220;default&#8221; setting above should be <em>a default value</em>, not the <em>current</em> value. The difference is a subtle one, but the point is that you don&#8217;t actually need to get the current value of the option from the DB and put it in here. The WP_Customize_Setting takes care of all that jazz for you. The &#8220;default&#8221; is what should be used if the value doesn&#8217;t exist in the DB at all.)</p>
<p>There&#8217;s one more bit to the add_setting call that we&#8217;ll come back to later when I get around to explaining postMessage.</p>
<h3>Controls</h3>
<p>Finally, we come to the controls. Controls can look one of a lot of ways, obviously. The simplest controls are just checkboxes, or text fields. However, colors are something that change a lot, so there&#8217;s color wheel controls too. In fact, WordPress defines a number of possible controls. Let&#8217;s go over a few:</p>
<p>A radio selection:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_control( 'themename_color_scheme', array(
		'label'      =&gt; __( 'Color Scheme', 'themename' ),
		'section'    =&gt; 'themename_color_scheme',
		'settings'   =&gt; 'themename_theme_options[color_scheme]',
		'type'       =&gt; 'radio',
		'choices'    =&gt; array(
			'value1' =&gt; 'Choice 1',
			'value2' =&gt; 'Choice 2',
			'value3' =&gt; 'Choice 3',
			),
	) );
</pre>
<p>Pretty simple. It&#8217;s referencing the section it&#8217;s in, the setting that it&#8217;s going to change, and then it has the radio type and the list of choices along with their associated values.</p>
<p>How about a checkbox instead? This one comes straight from core:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_control( 'display_header_text', array(
		'settings' =&gt; 'header_textcolor',
		'label'    =&gt; __( 'Display Header Text' ),
		'section'  =&gt; 'header',
		'type'     =&gt; 'checkbox',
	) );
</pre>
<p>A checkbox is on or off, true or false. It needs no real values.</p>
<p>How about a selection dropdown box? Here&#8217;s an example:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_control( 'example_select_box', array(
		'label'   =&gt; 'Select Something:',
		'section' =&gt; 'nav',
		'type'    =&gt; 'select',
		'choices'    =&gt; array(
			'value1' =&gt; 'Choice 1',
			'value2' =&gt; 'Choice 2',
			'value3' =&gt; 'Choice 3',
			),
	) );
</pre>
<p>The default type of control is actually type = &#8216;text&#8217;, and it creates a text box control. One more type of control is the &#8220;dropdown-pages&#8221; type, which creates a dropdown list of the WordPress Pages.</p>
<p>But that&#8217;s not all. There&#8217;s actually several more, but because they&#8217;re so custom, they&#8217;re declared differently. Here&#8217;s where we get all object oriented on ya&#8230;</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;add_control( new WP_Customize_Color_Control( $wp_customize, 'link_color', array(
		'label'   =&gt; __( 'Link Color', 'themename' ),
		'section' =&gt; 'themename_color_scheme',
		'settings'   =&gt; 'themename_theme_options[link_color]',
	) ) );
</pre>
<p>Whoa, what&#8217;s with the new class? The WP_Customize_Color_Control is a class that is extending the built in WP_Customize_Control class. It adds the color wheel jazz to places where color selection is needed. Note that the class is being created here with new, and so it has to get the $wp_customize passed to it directly, so it knows where to hook in. (Note: This may change before final 3.4 release.)</p>
<p>Other controls of note:</p>
<ul>
<li>WP_Customize_Upload_Control &#8211; This gives you an upload box, for allowing file uploads. However, you probably won&#8217;t use this directly, you&#8217;ll extend it for other things&#8230; like:</li>
<li>WP_Customize_Image_Control &#8211; This gives the image picker and the uploader box. It extends the upload controller. You can see it in action on the custom background piece, where a user can upload a new file to be the background image.</li>
<li>WP_Customize_Header_Image_Control &#8211; Because of the resizing action of the header piece, it needs a bit of special handling and display, so the WP_Customize_Header_Image_Control extends the WP_Customize_Image_Control to add that functionality. You can see it in action on the custom header piece, where a user can upload a new file to be the header image.</li>
</ul>
<p>So, the way to create a custom controller to do whatever you want is to make a new class of your own which extends WP_Customize_Control and adds the bits you want. How to do that is a bit complex, so I&#8217;ll save that for another tutorial. For now, you&#8217;ve got image handling, color wheels, text boxes, radios, dropdowns, and checkboxes. I think that should be enough to get started with.</p>
<h3>End of tutorial?</h3>
<p>Not quite. Everything I went over above is enough to add new sections to the customizer, put controls in them, and then to have the preview show your changes after a slight delay when the page refreshes. All you have to do is to call those functions with the proper parameters, in the proper place, and it&#8217;ll work.</p>
<p>However, note that I said &#8220;when the page refreshes&#8221;&#8230; C&#8217;mon&#8230; this is the year 2012. <a title="Why?" href="http://www.youtube.com/watch?v=vzm6pvHPSGo">We don&#8217;t have flying cars</a>, and we still have to wait a whole second or two?</p>
<p>Nope.</p>
<h3>Enter postMessage</h3>
<p>Back when I mentioned the $wp_customize-&gt;add_setting function call, I mentioned &#8220;one more bit&#8221;. That one more bit is the option called &#8220;transport&#8221;.</p>
<p>Transport defines how your setting change gets from the place where you changed it into the preview pane. The default setting for this is &#8220;refresh&#8221;. An alternative setting is named &#8220;postMessage&#8221;.</p>
<p>The postMessage transport makes it such that the setting is instantly sent into the other frame, where javascript can adjust the page on-the-fly using this new information.</p>
<p>An example:</p>
<p>Let&#8217;s say we have a setting to change the colors of the titles. All the titles on the page are in some tag that has a class of posttitle, perhaps. The option normally just saves the HTML color chosen, then outputs some inline CSS in the header.php to basically do this:</p>
<pre class="brush: css; title: ; notranslate" title="">
.posttitle {
	color: #abcdef;
}
</pre>
<p>Or whatever the option actually is for that color.</p>
<p>We have hooked our setting to that option, and hooked our WP_Customize_Color_Control up to it, and now when we change it, it works and we can see the color change. Note that this is easiest to do with already working customizer options, so the best way to do it is to get it working normally first, then add on this next bit.</p>
<p>Now, we have the working option in the customizer, so to take away that refresh delay, we&#8217;ll add this new option to the add_setting call:</p>
<pre class="brush: php; title: ; notranslate" title="">
	'transport'         =&gt; 'postMessage',
</pre>
<p>This tells the customizer that the setting will be sent directly to the frame via javascript. However, for that setting to work, we need javascript in the frame itself to receive it.</p>
<p>So, back in our main function&#8230; remember that? It started like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action( 'customize_register', 'themename_customize_register' );
function themename_customize_register($wp_customize) {
	// ... do stuff ...
</pre>
<p>Right at the end of that function, we&#8217;re going to add this code:</p>
<pre class="brush: php; title: ; notranslate" title="">
	if ( $wp_customize-&gt;is_preview() &amp;&amp; ! is_admin() )
		add_action( 'wp_footer', 'themename_customize_preview', 21);
</pre>
<p>This is going to add a new function call to our preview frame&#8217;s footer. It only gets added with the preview frame, so the live site and others won&#8217;t see it, because they don&#8217;t need to see it. This is where we&#8217;re going to output our javascript to make things happen in real-time.</p>
<p>Here&#8217;s our function:</p>
<pre class="brush: php; title: ; notranslate" title="">
function themename_customize_preview() {
	?&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
	( function( $ ){
	wp.customize('setting_name',function( value ) {
		value.bind(function(to) {
			$('.posttitle').css('color', to ? to : '' );
		});
	});
	} )( jQuery )
	&lt;/script&gt;
	&lt;?php 
} 
</pre>
<p>As you can see, it just outputs a bit of javascript. This code won&#8217;t change much, ever, so let&#8217;s go over just two pieces of importance: </p>
<ul>
<li>&#8216;setting_name&#8217; is the name of the setting, as added by the $wp_customize-&gt;add_setting call.</li>
<li>The entire line starting with jQuery(&#8216;.posttitle&#8217;) is our custom bit of code. It gets the &#8220;to&#8221; variable, which will be the color chosen by the user, and it sets the posttitles on the page to have that color, using the css modifying functionality of jquery.
</li>
</ul>
<p>Those are the only two bits you need to change, really. The rest is pretty copy-pasta. For each real-time setting, you can dupe this bit of code in the script.</p>
<p>Here&#8217;s another thing: You can change pre-existing refresh settings to be postMessage ones. Take the Site Title and Tagline elements in the Header section, for example. These are refresh settings, and the reason they are is because each theme implements them differently. There&#8217;s no way for the core to know the javascript code needed for any particular theme.</p>
<p>But if you&#8217;re a theme author, then you&#8217;re not writing for a generic theme. You&#8217;re writing for your particular theme. You know how the site title and tagline are displayed. There&#8217;s no reason you can&#8217;t make those update in real time. And while you&#8217;re at it, the header_textcolor setting can be real time too, since you know the theme code.</p>
<p>In your main function again, add these three lines of code:</p>
<pre class="brush: php; title: ; notranslate" title="">
	$wp_customize-&gt;get_setting('blogname')-&gt;transport='postMessage';
	$wp_customize-&gt;get_setting('blogdescription')-&gt;transport='postMessage';
	$wp_customize-&gt;get_setting('header_textcolor')-&gt;transport='postMessage';
</pre>
<p>That changes the transport on those core settings to be postMessage. Now you need to add the javascript code to actually do the refreshing in your theme. Here&#8217;s an example of TwentyEleven doing this (with the patch I wrote for it):</p>
<pre class="brush: php; title: ; notranslate" title="">
function twentyeleven_customize_preview() {
	?&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
	( function( $ ){
	wp.customize('blogname',function( value ) {
		value.bind(function(to) {
			$('#site-title a').html(to);
		});
	});
	wp.customize('blogdescription',function( value ) {
		value.bind(function(to) {
			$('#site-description').html(to);
		});
	});
	wp.customize( 'header_textcolor', function( value ) {
		value.bind( function( to ) {
			$('#site-title a, #site-description').css('color', to ? to : '' );
		});
	});
	} )( jQuery )
	&lt;/script&gt;
	&lt;?php
}
</pre>
<p>For the blogname, it changes the HTML inside the &#8220;#site-title a&#8221; link. For the description, it changes the tag with #sitedescription. For the color of those, it simply targets both of them and alters their CSS.</p>
<p>Core has to try to be generic across all themes. But themes have more knowledge of how they work and can change things to target themselves in better ways. A theme adding controls knows what those controls change, so if it&#8217;s something simple like CSS or even something more complex like HTML, if you can write javascript code to make that modification in real time, then you can use postMessage and eliminate that refresh delay.</p>
<p>Hopefully this explains some of the theme customizer. Was it as clear as mud? Take a look at my patch to Twenty Eleven to add some of the theme options from its existing options screen into the customizer. You can find it on this ticket: <a href="http://core.trac.wordpress.org/ticket/20448">http://core.trac.wordpress.org/ticket/20448</a>.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bg' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/3-4/" rel="tag">3.4</a>, <a href="http://ottopress.com/tag/beta/" rel="tag">beta</a>, <a href="http://ottopress.com/tag/code-2/" rel="tag">code</a>, <a href="http://ottopress.com/tag/customizer/" rel="tag">customizer</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/how-to-leverage-the-theme-customizer-in-your-own-themes/#comments" title="Comment on How to leverage the Theme Customizer in your own themes">241 Comments</a>									 </div>
			</div>			<div id="post-771" class="post-771 post type-post status-publish format-standard hentry category-code category-rants category-wordpress tag-i18n tag-l10m tag-pomo tag-tacos tag-translation tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/internationalization-youre-probably-doing-it-wrong/" rel="bookmark" title="Permanent Link to Internationalization: You&#8217;re probably doing it wrong" itemprop="url"><span itemprop="name">Internationalization: You&#8217;re probably doing it wrong</span></a></h2>
				<div class="postmetadata">February 28, 2012, 3:15 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img src="http://i1.wp.com/ottopress.com/files/2012/02/international_flags.jpg?resize=280%2C280" alt="" title="international_flags" class="alignright size-full wp-image-777" data-recalc-dims="1" />Fun fact of the day: about 37% of WordPress downloads are for non-English, localized versions.</p>
<p>So as a plugin or theme author, you should be thinking of <a href="http://codex.wordpress.org/I18n_for_WordPress_Developers">localization and internationalization</a> (L10N and I18N) as pretty much a fact of life by this point.</p>
<p>Fun total guess of the day: based on my experience in browsing through the thing, roughly, ohh&#8230; <em>all</em> plugins and themes in the directory are doing-it-wrong in some manner. </p>
<p>Yes friends, even my code is guilty of this to some degree.</p>
<p>It&#8217;s understandable. When you&#8217;re writing the thing, generally you&#8217;re working on the functionality, not form. So you put strings in and figure &#8220;hey, no biggie, I can come back and add in the I18N stuff later.&#8221; Sometimes you even come back and do that later. </p>
<p>And you know what? You probably still get it wrong. I did. I still often do.</p>
<p>The reason you are getting it wrong is because doing I18N right is non-obvious. There&#8217;s tricks there, and rules that apply outside of the normal PHP ways of doing things.</p>
<p>So here&#8217;s the unbreakable laws of I18N, as pertaining to WordPress plugins and themes.</p>
<p>Note: This is not a tutorial, as such. You are expected to already be translating your code in some way, and to have a basic grasp on it. What I&#8217;m going to show you is stuff you are probably already doing, but which is wrong. With any luck, you will have much slapping-of-the-head during this read, since I&#8217;m hoping to give you that same insight I had, when I finally &#8220;got it&#8221;.</p>
<p>Also note: These are <strong>laws</strong>, folks. Not suggestions. Thou shalt not break them. They are not up for debate. What I&#8217;m going to present to you here today is <em>provably correct</em>. Sorry, I like a good argument as much as the next guy, but arguing against these just makes you wrong.</p>
<h3>Basic I18N functions</h3>
<p>First, lets quickly cover the two top translation functions. There&#8217;s more later, and the laws apply to them too, but these are the ones everybody should know and make the easiest examples.</p>
<p>The base translation function is __(). That&#8217;s the double-underscore function. It takes a string and translates it, according to the localization settings, then returns the string.</p>
<p>Then there&#8217;s the shortcut function of _e(). It does the same, but it echoes the result instead.</p>
<p>There&#8217;s several functions based around these, such as esc_attr_e() for example. These functions all behave identically to their counterparts put together. The esc_attr_e() function first runs the string through __(), then it does esc_attr() on it, then it echo&#8217;s it. These are named in a specific way so as to work with existing translation tools. All the following laws apply to them in the exact same way.</p>
<p>So, right down to it then.</p>
<h3>Law the First: Thou shalt not use PHP variables of any kind inside a translation function&#8217;s strings.</h3>
<p>This code is obviously wrong, or it should be:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = __($string, 'plugin-domain');
</pre>
<p>The reason you never do this is because translation relies on looking up strings in a table and then translating them. However, that list of strings to be translated is built by an automated process. Some code scans your PHP code, <em>without executing it</em>, and pulls out all the __()&#8217;s it finds, then builds the list of strings to be translated. That scanning code cannot possibly know what is inside $string.</p>
<p>However, sometimes it&#8217;s more subtle than that. For example, this is also wrong:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = __(&quot;You have $number tacos&quot;, 'plugin-domain');
</pre>
<p>The translated string here will be something like &#8216;You have 12 tacos&#8217;, but the scanning code can&#8217;t know what $number is in advance, nor is it feasible to expect your translators to translate all cases of what $number could be anyway.</p>
<p>Basically, double quoted strings in translation functions are <strong>always</strong> suspect, and probably wrong. But that rule can&#8217;t be hard and fast, because using string operations like &#8216;You have &#8216;.$number.&#8217; tacos&#8217; is equally wrong, for the exact same reason.</p>
<p>Here&#8217;s a couple of wrongs that people like to argue with:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = __('You have 12 tacos', $plugin_domain);
$string = __('You have 12 tacos', PLUGIN_DOMAIN);
</pre>
<p>These are both cases of the same thing. Basically, you decided that repetition is bad, so you define the plugin domain somewhere central, then reference it everywhere.</p>
<p>Mark Jaquith <a href="http://markjaquith.wordpress.com/2011/10/06/translating-wordpress-plugins-and-themes-dont-get-clever/">went into some detail</a> on why this is wrong on his blog, so I will refer you to that, but I&#8217;ll also espouse a general principle here.</p>
<p>I said this above, and I&#8217;m going to repeat it: &#8220;<em>that list of strings to be translated is built by an automated process</em>&#8220;. When I&#8217;m making some code to read your code and parse it, I&#8217;m <em>not</em> running your code. I&#8217;m parsing it. And while the general simplistic case of building a list of strings does not require me to know your plugin&#8217;s text domain, a more complicated case might. There are legitimate reasons that we want your domain to be plain text and not some kind of variable.</p>
<p>For starters, what if we did something like make a system where you could translate your strings right on the wordpress.org website? Or build a system where you could enlist volunteer translators to translate your strings for you? Or made a system where people could easily download localized versions of your plugin, with the relevant translations already included?</p>
<p>These are but a few ideas, but for all of them, that text domain must be a plain string. Not a variable. Not a define.</p>
<p>Bottom line: <em>Inside all translation functions, no PHP variables are allowed in the strings, for any reason, ever.</em> Plain single-quoted strings only.</p>
<h3>Law the Second: Thou shalt always translate phrases and not words.</h3>
<p>One way people often try to get around not using variables is like the following:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = __('You have ', 'plugin') . $number . __(' tacos', 'plugin-domain');
</pre>
<p>No! Bad coder! Bad!</p>
<p>English is a language of words. Other languages are not as flexible. In some other languages, the subject comes first. Your method doesn&#8217;t work here, unless the localizer makes &#8220;tacos&#8221; into &#8220;you have&#8221; and vice-versa.</p>
<p>This is the correct way:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('You have %d tacos', 'plugin-domain'), $number );
</pre>
<p>The localizer doing your translation can then write the equivalent in his language, leaving the %d in the right place. Note that in this case, the %d is not a PHP variable, it&#8217;s a placeholder for the number.</p>
<p>In fact, this is a good place to introduce a new function to deal with pluralization. Nobody has &#8220;1 tacos&#8221;. So we can write this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( _n('You have %d taco.', 'You have %d tacos.', $number, 'plugin-domain'), $number );
</pre>
<p>The _n function is a translation function that picks the first string if the $number (third parameter to _n) is one, or the second one if it&#8217;s more than one. We still have to use the sprintf to replace the placeholder with the actual number, but now the pluralization can be translated separately, and as part of the whole phrase. Note that the last argument to _n is still the plugin text domain to be used.</p>
<p>Note that some languages have more than just a singular and a plural form. You may need special handling sometimes, but this will get you there most of the time. Polish in particular has pluralization rules that have different words for 1, for numbers ending in 2, 3, and 4, and for numbers ending in 5-1 (except 1 itself). That&#8217;s okay, _n can handle these special cases with special pluralization handling in the translator files, and you generally don&#8217;t need to worry about it as long as you specify the plural form in a sane way, using the whole phrase.</p>
<p>You might also note that _n() is the one and only translation function that can have a PHP variable in it. This is because that third variable is always going to be a number, not a string. Therefore no automated process that builds strings from scanning code will care about what it is. You do need to take care than the $number in _n is always a number though. It will not be using that $number to insert into the string, it will be selecting which string to use based on its value.</p>
<p>Now, using placeholders can be complex, since sometimes things will have to be reversed. Take this example:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('You have %d tacos and %d burritos', 'plugin-domain'), $taco_count, $burrito_count );
</pre>
<p>What if a language has some strange condition where they would never put tacos before burritos? It just wouldn&#8217;t be done. The translator would have to rewrite this to have the burrito count first. But he can&#8217;t, the placeholders are such that the $taco_count is expected to be first in the sprintf. The solution:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('You have %1$d tacos and %2$d burritos', 'plugin-domain'), $taco_count, $burrito_count );
</pre>
<p>The %1$d and such is an alternate form that PHP allows called &#8220;<a href="http://php.net/manual/en/function.sprintf.php">argument swapping</a>&#8220;. In this case, the translator could write it correctly, but put the burritos before the tacos by simply putting %2$d before %1$d in the string.</p>
<p>Note that when you use argument swapping, that single-quoted string thing becomes <em>very</em> important. If you have &#8220;%1$s&#8221; in double quotes, then PHP will see that $s and try to put your $s variable in there. In <a href="http://quirm.net/2011/09/20/using-s-with-double-quotes-in-wordpress/">at least one case</a>, this has caused an accidental Cross-Site-Scripting security issue.</p>
<p><strong>So repeat after me</strong>: &#8220;<em>I will always only use single-quoted strings in I18N functions.</em>&#8221; There. Now you&#8217;re safe again. This probably should be a law, but since it&#8217;s safe to use double-quoted strings as long as you don&#8217;t use PHP variables (thus breaking the first law), I&#8217;ll just leave you to think about it instead. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<h3>Law the Third: Thou shalt disambiguate when needed.</h3>
<p>When I say &#8220;comment&#8221; to you, am I talking about a comment on my site, or am I asking you to make a comment? How about &#8220;test&#8221;? <a href="http://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo">Or even &#8220;buffalo&#8221;?</a></p>
<p>English has words and phrases that can have different meanings depending on context. In other languages, these same concepts can be different words or phrases entirely. To help translators out, use the _x() function for them.</p>
<p>The _x() function is similar to the __() function, but it has a comment section where the context can be specified.</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = _x( 'Buffalo', 'an animal', 'plugin-domain' );
$string = _x( 'Buffalo', 'a city in New York', 'plugin-domain' );
$string = _x( 'Buffalo', 'a verb meaning to confuse somebody', 'plugin-domain' );
</pre>
<p>Though these strings are identical, the translators will get separated strings, along with the explanation of what they are, and they can translate them accordingly.</p>
<p>And just like __() has _e() for immediate echoing, _x() has _ex() for the same thing. Use as needed.</p>
<p>Finally, this last one isn&#8217;t a law so much as something that annoys me. You&#8217;re free to argue about it if you like. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<h3>Annoyance the First: Thou shalt not put unnecessary HTML markup into the translated string.</h3>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('&lt;h3&gt;You have %d tacos&lt;/h3&gt;', 'plugin-domain'), $number );
</pre>
<p>Why would you give the power to the translator to insert markup changes to your code? Markup should be eliminated from your translated strings wherever possible. Put it outside your strings instead.</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = '&lt;h3&gt;'.sprintf( __('You have %d tacos', 'plugin-domain'), $number ).'&lt;/h3&gt;';
</pre>
<p>Note that sometimes though, it&#8217;s perfectly acceptable. If you&#8217;re adding emphasis to a specific word, then that emphasis might be different in other languages. This is pretty rare though, and sometimes you can pull it out entirely. If I wanted a bold number of tacos, I&#8217;d use this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( __('You have %s tacos', 'plugin-domain'), '&lt;strong&gt;'.$number.'&lt;/strong&gt;' );
</pre>
<p>Or more preferably, the _n version of same that I discussed above.</p>
<h3>Conclusion</h3>
<p>Like I said at the beginning, we&#8217;ve all done these. I&#8217;ve broken all these laws of I18N in the past (I know some of my plugins still do), only to figure out that I was doing-it-wrong. Hopefully, you&#8217;ve spotted something here you&#8217;ve done (or are currently doing) and have realized from reading this exactly why your code is broken. The state of I18N in plugins and themes is pretty low, and that&#8217;s something I&#8217;d really like to get fixed in the long run. With any luck, this article will help. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p><em>Disclaimer: Yes, I wrote this while hungry.</em></p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/be' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/i18n/" rel="tag">i18n</a>, <a href="http://ottopress.com/tag/l10m/" rel="tag">l10m</a>, <a href="http://ottopress.com/tag/pomo/" rel="tag">pomo</a>, <a href="http://ottopress.com/tag/tacos/" rel="tag">tacos</a>, <a href="http://ottopress.com/tag/translation/" rel="tag">translation</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/rants/" title="View all posts in Rants" rel="category tag">Rants</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/internationalization-youre-probably-doing-it-wrong/#comments" title="Comment on Internationalization: You&#8217;re probably doing it wrong">81 Comments</a>									 </div>
			</div>			<div id="post-709" class="post-709 post type-post status-publish format-aside hentry category-code category-wordpress tag-post tag-random tag-snippet tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/random-post-snippet/" rel="bookmark" title="Permanent Link to Random Post snippet" itemprop="url"><span itemprop="name">Random Post snippet</span></a></h2>
				<div class="postmetadata">October 31, 2011, 5:20 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img class="alignright size-full wp-image-702" title="phpcode" src="http://i2.wp.com/ottopress.com/files/2011/10/phpcode.png?resize=200%2C100" alt="" data-recalc-dims="1" /><br />
Wrote this quick WordPress code snippet at WordCamp Louisville. It makes a /random/ URL on your site which redirects to a random post. Thought some people might find it useful.</p>
<p>Not a perfect little snippet, but gets the job done. Note the use of the little-used 307 redirect for temporary redirection. This is to make browsers not cache the results of the redirect, like some of them might do with a 302.</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action('init','random_add_rewrite');
function random_add_rewrite() {
       global $wp;
       $wp-&gt;add_query_var('random');
       add_rewrite_rule('random/?$', 'index.php?random=1', 'top');
}

add_action('template_redirect','random_template');
function random_template() {
       if (get_query_var('random') == 1) {
               $posts = get_posts('post_type=post&amp;orderby=rand&amp;numberposts=1');
               foreach($posts as $post) {
                       $link = get_permalink($post);
               }
               wp_redirect($link,307);
               exit;
       }
}
</pre>
<p>There&#8217;s plugins that do this sort of thing too, but this is such a simple little thing that it doesn&#8217;t really need a big amount of code to do.</p>
<p><em>Edit</em>: Added get_permalink() optimization from @Raherian.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ax' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/post/" rel="tag">post</a>, <a href="http://ottopress.com/tag/random/" rel="tag">random</a>, <a href="http://ottopress.com/tag/snippet/" rel="tag">snippet</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/random-post-snippet/#comments" title="Comment on Random Post snippet">15 Comments</a>									 </div>
			</div>			<div id="post-701" class="post-701 post type-post status-publish format-standard hentry category-other category-wordpress tag-plugin tag-snippets tag-themes tag-upgrades tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/creating-a-site-specific-snippets-plugin/" rel="bookmark" title="Permanent Link to Creating a Site-Specific Snippets Plugin" itemprop="url"><span itemprop="name">Creating a Site-Specific Snippets Plugin</span></a></h2>
				<div class="postmetadata">October 16, 2011, 5:43 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img class="alignright size-full wp-image-702" title="phpcode" src="http://i2.wp.com/ottopress.com/files/2011/10/phpcode.png?resize=200%2C100" alt="" data-recalc-dims="1" /></p>
<p>If you read &#8220;how-to&#8221; stuff for WordPress sites around the web, then you frequently run across what many people like to call &#8220;snippets&#8221;. Short bits of code or functions to do various things. I myself post snippets frequently, usually made up on the fly to solve somebody&#8217;s specific problem.</p>
<p>One question I get a fair amount is &#8220;where do I add this code?&#8221;</p>
<p>The usual answer to this for a lot of people is &#8220;in the theme&#8217;s functions.php file&#8221;. This is a quick solution, but it is often a problematic one. </p>
<p>The reason this has become the more or less go-to place to add these snippets is because it&#8217;s complicated to explain to a newbie how to make a plugin and activate it, or to point out the problems with modifying core code, or plugin code. Saying to look for a specific file in their theme, on the other hand, is quick and easy, and until recently theme upgrades have been fairly rare.</p>
<p>However, as themes get upgrades, it becomes more and more incorrect to tell people to modify them directly. And telling people how to create child themes is complex, even if it&#8217;s easy to do.</p>
<p>So I&#8217;d like to start a new trend, and recommend that people start making Site-Specific Plugins. Most people who run WP sites on a serious level do this in some way already, but if you make it sorta-standard practice, then it&#8217;ll make things simpler all around.</p>
<h3>How to create a Site-Specific Plugin</h3>
<p>1. Create a new directory in the plugins directory. Name it after the site in some fashion. For example, /wp-content/plugins/example.com or something like that.</p>
<p>2. Create a new php file in that directory. Name is dealer&#8217;s choice.</p>
<p>3. Put this in the file:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php
/*
Plugin Name: Site Plugin for example.com
Description: Site specific code changes for example.com
*/
</pre>
<p>4. Finally, go activate your new blank plugin on the site.</p>
<p>Now you have a simple and specific place to add snippets. It will survive upgrades of any sort, and you can edit it to add new code on an as needed basis. What&#8217;s more, it&#8217;s kinda sorta break-proof. If the user uses the built-in plugin editor to edit it, and they add code that breaks the site, then the editor detects that on saving the code and deactivates the plugin, preventing the &#8220;white screen of death&#8221; for their site.</p>
<p>This is a much better way to use &#8220;snippets&#8221; than the theme&#8217;s functions.php file, and we should really use it more often in our replies to users.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ar' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/snippets/" rel="tag">snippets</a>, <a href="http://ottopress.com/tag/themes/" rel="tag">themes</a>, <a href="http://ottopress.com/tag/upgrades/" rel="tag">upgrades</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/creating-a-site-specific-snippets-plugin/#comments" title="Comment on Creating a Site-Specific Snippets Plugin">25 Comments</a>									 </div>
			</div>
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/tag/wordpress-2/page/2/" >&laquo; Previous Entries</a></div>
			<div class="alignright"></div>
		</div>
		
	
	</div>
	<div id="sidebar">
		<ul>
			
			<li id="paypal-donate" class="widget widget_wpaypal"><h2 class="widgettitle">Buy Otto a Beer</h2>
<div style="margin-top:5px;margin-bottom:5px;text-align:left;">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
		<p><input type="hidden" name="cmd" value="_xclick" />
		<input type="hidden" name="business" value="otto@ottodestruct.com" />
		<input type="hidden" name="item_name" value="Donation to Otto on WordPress" />
		<input type="hidden" name="item_number" value="0" />
		<input type="hidden" name="notify_url" value="" />
		<input type="hidden" name="no_shipping" value="1" /><input type="hidden" name="return" value="http://ottopress.com" />
		<input type="hidden" name="no_note" value="1" />
		<input type="hidden" name="tax" value="0" />
		<input type="hidden" name="bn" value="PP-DonationsBF" />
		<input type="hidden" name="on0" value="Website" />
		Currency: <br />
		<select id="currency_code" name="currency_code">
		<option value="USD">U.S. Dollars</option>
		<option value="AUD">Australian Dollars</option>
		<option value="CAD">Canadian Dollars</option>
		<option value="EUR">Euros</option>
		<option value="GBP">Pounds Sterling</option>
		<option value="JPY">Yen</option></select></p>
		<p>Amount: <br /><input type="text" name="amount" size="16" title="The amount you wish to donate" value="5.00" /></p>
		<p>Website(Optional): <br /><input type="text" size="16" title="Your website (will be displayed)" name="os0" value="" /></p><p><input class="ppimg" type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" name="submit" style="border:0;" alt="Make payments with PayPal - fast, free and secure" /></p></form></div></li>
<li id="text-7" class="widget widget_text">			<div class="textwidget">Hey, I also take Bitcoins! Send them to: </br>
<a href="bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg">
<img src="https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg" /><br />
1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg</a></div>
		</li>
<li id="text-5" class="widget widget_text"><h2 class="widgettitle">Subscribe!</h2>
			<div class="textwidget"><!-- <a href="https://plus.google.com/111166992820603637934?prsrc=3" style="cursor:pointer;display:inline-block;text-decoration:none;color:#333;font:13px/16px arial,sans-serif;"><span style="display:inline-block;font-weight:bold;vertical-align:top;margin-right:5px;margin-top:8px;">Otto on WordPress</span><span style="display:inline-block;vertical-align:top;margin-right:15px;margin-top:8px;">on</span><img src="https://ssl.gstatic.com/images/icons/gplus-32.png" alt="" style="border:0;width:32px;height:32px;"/></a>
-->
<div class="g-plus" data-href="https://plus.google.com/111166992820603637934?rel=publisher" data-width="250" data-height="131" data-theme="light"></div>
</div>
		</li>
<li id="blog_subscription-3" class="widget jetpack_subscription_widget"><h2 class="widgettitle"><label for="subscribe-field"></label></h2>

		<form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3">
			<p id="subscribe-text">Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p><p>Join 331 other subscribers</p>

			<p id="subscribe-email"><input type="text" name="email" value="Email Address" id="subscribe-field" onclick="if ( this.value == 'Email Address' ) { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = 'Email Address'; }" /></p>

			<p id="subscribe-submit">
				<input type="hidden" name="action" value="subscribe" />
				<input type="hidden" name="source" value="http://ottopress.com/tag/wordpress-2/" />
				<input type="hidden" name="sub-type" value="widget" />
				<input type="hidden" name="redirect_fragment" value="blog_subscription-3" />
								<input type="submit" value="Subscribe" name="jetpack_subscriptions_widget" />
			</p>
		</form>

		
</li>
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Email Me</h2>
			<div class="textwidget"><ul><li><span class="vcard microid-mailto+http:sha1:23e9670868f6d2b16fe1f6b3db80c8f0423a082a">
<span style="display:none;">
<span class="adr">
 <span class="locality">Memphis</span>,
 <span class="region">TN</span>
 <span class="postal-code">38103</span>
 <span class="country-name">U.S.A.</span>
</span>
<a class="url fn" href="http://ottodestruct.com">Otto</a>
<span class="uid">240cf86e-5cad-11dc-8314-0800200c9a66</span>
</span>
<a class="email" href="mailto:otto@ottodestruct.com">otto@ottodestruct.com</a></span></li></ul>
<a rel="author" href="https://plus.google.com/100201852715113506716?rel=author">
  <img src="https://ssl.gstatic.com/images/icons/gplus-16.png" width="16" height="16">
</a>
</a>
<!-- 

This rant is hidden in HTML comments. If I pointed you to it, then you probably emailed me about the fact that my email address is in plaintext directly above this comment. If you happened to run across it because you just like looking at HTML comments, well, easter egg! :)

YES, that is a bare mailto: href above. 
YES, that is my real email address. 
And YES, it's intentional.

Obfuscating your email address on the web is stupid. 

Firstly, hiding your email address doesn't prevent spam. Spammers get addresses in bulk from mailing lists and websites and other sources. Sure, some scrapers exist, but they are by far the minority of the sources for email lists.

Secondly, hiding your email address ruins the whole point of email. The purpose of publishing my email address is so that anybody, and I do mean *anybody*, can email me. Before the days of cell phones, your phone number and physical address used to be published in a big book that everybody received, for free, on a semi-annual basis. It had distinctive yellow pages in it. Your contact information is not, and never was supposed to be, private information. Treating it as such is stupid.

Thirdly, I have great spam protection. For one, I use GMail, which has frankly incredible filtering because of the volume of mail they deal with. For another, I use various sets of filters to categorize incoming mail into various categories of things. Hell, I can even run statistics on it, if I want. This is a much better solution than continually giving out fake email addresses, or using +stuff to figure out who sent what where... I'd prefer to simply let my filters deal with it instead. 

Finally, if you're one of those systems that scours the web and/or social networks for visible email addresses and then automatically emails that person to let them know that their address is visible, then by all means please just fuck off and die. You're part of the problem. On the other hand, if you're just a regular guy with good intentions, then this doesn't apply to you. :)

Just my 2 cents.

--></div>
		</li>
<li id="categories-2" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-573"><a href="http://ottopress.com/category/code/" title="View all posts filed under Code">Code</a>
</li>
	<li class="cat-item cat-item-574"><a href="http://ottopress.com/category/other/" title="View all posts filed under Other">Other</a>
</li>
	<li class="cat-item cat-item-575"><a href="http://ottopress.com/category/rants/" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://ottopress.com/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-576"><a href="http://ottopress.com/category/wordpress/" title="View all posts filed under WordPress">WordPress</a>
</li>
		</ul>
</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://ottopress.com/2014/02/'>February 2014</a></li>
	<li><a href='http://ottopress.com/2013/11/'>November 2013</a></li>
	<li><a href='http://ottopress.com/2013/10/'>October 2013</a></li>
	<li><a href='http://ottopress.com/2013/06/'>June 2013</a></li>
	<li><a href='http://ottopress.com/2013/03/'>March 2013</a></li>
	<li><a href='http://ottopress.com/2012/11/'>November 2012</a></li>
	<li><a href='http://ottopress.com/2012/09/'>September 2012</a></li>
	<li><a href='http://ottopress.com/2012/08/'>August 2012</a></li>
	<li><a href='http://ottopress.com/2012/07/'>July 2012</a></li>
	<li><a href='http://ottopress.com/2012/05/'>May 2012</a></li>
	<li><a href='http://ottopress.com/2012/02/'>February 2012</a></li>
	<li><a href='http://ottopress.com/2012/01/'>January 2012</a></li>
	<li><a href='http://ottopress.com/2011/12/'>December 2011</a></li>
	<li><a href='http://ottopress.com/2011/11/'>November 2011</a></li>
	<li><a href='http://ottopress.com/2011/10/'>October 2011</a></li>
	<li><a href='http://ottopress.com/2011/09/'>September 2011</a></li>
	<li><a href='http://ottopress.com/2011/08/'>August 2011</a></li>
	<li><a href='http://ottopress.com/2011/07/'>July 2011</a></li>
	<li><a href='http://ottopress.com/2011/06/'>June 2011</a></li>
	<li><a href='http://ottopress.com/2011/05/'>May 2011</a></li>
	<li><a href='http://ottopress.com/2011/04/'>April 2011</a></li>
	<li><a href='http://ottopress.com/2011/03/'>March 2011</a></li>
	<li><a href='http://ottopress.com/2011/02/'>February 2011</a></li>
	<li><a href='http://ottopress.com/2011/01/'>January 2011</a></li>
	<li><a href='http://ottopress.com/2010/12/'>December 2010</a></li>
	<li><a href='http://ottopress.com/2010/11/'>November 2010</a></li>
	<li><a href='http://ottopress.com/2010/10/'>October 2010</a></li>
	<li><a href='http://ottopress.com/2010/09/'>September 2010</a></li>
	<li><a href='http://ottopress.com/2010/08/'>August 2010</a></li>
	<li><a href='http://ottopress.com/2010/06/'>June 2010</a></li>
	<li><a href='http://ottopress.com/2010/05/'>May 2010</a></li>
	<li><a href='http://ottopress.com/2010/04/'>April 2010</a></li>
	<li><a href='http://ottopress.com/2010/03/'>March 2010</a></li>
	<li><a href='http://ottopress.com/2010/02/'>February 2010</a></li>
	<li><a href='http://ottopress.com/2009/11/'>November 2009</a></li>
	<li><a href='http://ottopress.com/2009/09/'>September 2009</a></li>
	<li><a href='http://ottopress.com/2008/09/'>September 2008</a></li>
		</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/">Better Know a Vulnerability: SQL Injection</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/language-packs-101-prepwork/">Language Packs 101 &#8211; Prepwork</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/slides-a-presentation-theme/">Slides: A Presentation Theme</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/">I&#8217;m not a fan of orange&#8230;</a>
						</li>
				</ul>
		</li>
<li id="text-6" class="widget widget_text"><h2 class="widgettitle">WP Core Contributions</h2>
			<div class="textwidget"><p>
<a href='http://core.trac.wordpress.org/changeset/28072'>[28072]</a> - <a href='http://core.trac.wordpress.org/ticket/19393'>#19393</a><br />
<a href='http://core.trac.wordpress.org/changeset/27522'>[27522]</a> - <a href='http://core.trac.wordpress.org/ticket/19889'>#19889</a><br />
<a href='http://core.trac.wordpress.org/changeset/27399'>[27399]</a> - <a href='http://core.trac.wordpress.org/ticket/25665'>#25665</a><br />
<a href='http://core.trac.wordpress.org/changeset/26978'>[26978]</a> - <a href='http://core.trac.wordpress.org/ticket/23149'>#23149</a><br />
<a href='http://core.trac.wordpress.org/changeset/26711'>[26711]</a> - <a href='http://core.trac.wordpress.org/ticket/21442'>#21442</a><br />
<a href='http://core.trac.wordpress.org/changeset/26072'>[26072]</a> - <a href='http://core.trac.wordpress.org/ticket/25858'>#25858</a><br />
<a href='http://core.trac.wordpress.org/changeset/22152'>[22152]</a> - <a href='http://core.trac.wordpress.org/ticket/21914'>#21914</a><br />
<a href='http://core.trac.wordpress.org/changeset/22026'>[22026]</a> - <a href='http://core.trac.wordpress.org/ticket/22002'>#22002</a><br />
<a href='http://core.trac.wordpress.org/changeset/21839'>[21839]</a> - <a href='http://core.trac.wordpress.org/ticket/16996'>#16996</a><br />
<a href='http://core.trac.wordpress.org/changeset/21802'>[21802]</a> - <a href='http://core.trac.wordpress.org/ticket/18674'>#18674</a><br />
<a href='http://core.trac.wordpress.org/changeset/21776'>[21776]</a> - <a href='http://core.trac.wordpress.org/ticket/13729'>#13729</a><br />
<a href='http://core.trac.wordpress.org/changeset/21609'>[21609]</a> - <a href='http://core.trac.wordpress.org/ticket/19324'>#19324</a><br />
<a href='http://core.trac.wordpress.org/changeset/20916'>[20916]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20784'>[20784]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20783'>[20783]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20267'>[20267]</a> - <a href='http://core.trac.wordpress.org/ticket/13774'>#13774</a><br />
<a href='http://core.trac.wordpress.org/changeset/19721'>[19721]</a> - <a href='http://core.trac.wordpress.org/ticket/19626'>#19626</a><br />
<a href='http://core.trac.wordpress.org/changeset/19003'>[19003]</a> - <a href="http://core.trac.wordpress.org/ticket/17406">#17406</a><br />
<a href='http://core.trac.wordpress.org/changeset/18741'>[18741]</a> - <a href="http://core.trac.wordpress.org/ticket/15473">#15473</a><br />
<a href='http://core.trac.wordpress.org/changeset/18602'>[18602]</a> - <a href="http://core.trac.wordpress.org/ticket/18230">#18230</a><br />
<a href='http://core.trac.wordpress.org/changeset/18541'>[18541]</a> - <a href="http://core.trac.wordpress.org/ticket/16687">#16687</a><br />
<a href='http://core.trac.wordpress.org/changeset/18205'>[18205]</a> - <a href="http://core.trac.wordpress.org/ticket/17148">#17148</a><br />
<a href='http://core.trac.wordpress.org/changeset/17254'>[17254]</a> - <a href="http://core.trac.wordpress.org/ticket/16192">#16192</a><br />
<a href='http://core.trac.wordpress.org/changeset/16555'>[16555]</a> - <a href="http://core.trac.wordpress.org/ticket/12891">#12891</a><br />
<a href='http://core.trac.wordpress.org/changeset/16284'>[16284]</a> - <a href="http://core.trac.wordpress.org/ticket/13324">#13324</a><br />
<a href='http://core.trac.wordpress.org/changeset/13420'>[13420]</a> - <a href="http://core.trac.wordpress.org/ticket/12291">#12291</a><br />
<a href='http://core.trac.wordpress.org/changeset/12581'>[12581]</a> - <a href="http://core.trac.wordpress.org/ticket/7225">#7225</a><br />
<a href='http://core.trac.wordpress.org/changeset/11738'>[11738]</a> - <a href="http://core.trac.wordpress.org/ticket/10145">#10145</a><br />
<a href='http://core.trac.wordpress.org/changeset/11329'>[11329]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10962'>[10962]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10757'>[10757]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10753'>[10753]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10252'>[10252]</a> - <a href="http://core.trac.wordpress.org/ticket/6791">#6791</a><br />
<a href='http://core.trac.wordpress.org/changeset/9276'>[9276]</a> - <a href="http://core.trac.wordpress.org/ticket/7124">#7124</a><br />
<a href='http://core.trac.wordpress.org/changeset/9209'>[9209]</a> - <a href="http://core.trac.wordpress.org/ticket/7901">#7901</a><br />
<a href='http://core.trac.wordpress.org/changeset/9207'>[9207]</a> - <a href="http://core.trac.wordpress.org/ticket/7635">#7635</a><br />
<a href='http://core.trac.wordpress.org/changeset/9139'>[9139]</a> - <a href="http://core.trac.wordpress.org/ticket/7847">#7847</a><br />
<a href='http://core.trac.wordpress.org/changeset/9089'>[9089]</a> - <a href="http://core.trac.wordpress.org/ticket/7772">#7772</a><br />
<a href='http://core.trac.wordpress.org/changeset/8968'>[8968]</a> - <a href="http://core.trac.wordpress.org/ticket/7761">#7761</a><br />
<a href='http://core.trac.wordpress.org/changeset/8285'>[8285]</a> - <a href="http://core.trac.wordpress.org/ticket/6879">#6879</a><br />
<a href='http://core.trac.wordpress.org/changeset/8208'>[8208]</a> - <a href="http://core.trac.wordpress.org/ticket/4448">#4448</a><br />
<a href='http://core.trac.wordpress.org/changeset/8132'>[8132]</a> - <a href="http://core.trac.wordpress.org/ticket/4954">#4954</a><br />
<a href='http://core.trac.wordpress.org/changeset/8131'>[8131]</a> - <a href="http://core.trac.wordpress.org/ticket/6590">#6590</a><br />
<a href='http://core.trac.wordpress.org/changeset/7869'>[7869]</a> - <a href="http://core.trac.wordpress.org/ticket/6513">#6513</a><br />
<a href='http://core.trac.wordpress.org/changeset/7647'>[7647]</a> - <a href="http://core.trac.wordpress.org/ticket/6608">#6608</a><br />
<a href='http://core.trac.wordpress.org/changeset/7461'>[7461]</a> - <a href="http://core.trac.wordpress.org/ticket/6339">#6339</a><br />
<a href='http://core.trac.wordpress.org/changeset/6873'>[6873]</a> - <a href="http://core.trac.wordpress.org/ticket/4986">#4986</a><br />
<a href='http://core.trac.wordpress.org/changeset/6760'>[6760]</a> - <a href="http://core.trac.wordpress.org/ticket/4617">#4617</a><br />
<a href='http://core.trac.wordpress.org/changeset/6616'>[6616]</a> - <a href="http://core.trac.wordpress.org/ticket/5155">#5155</a><br />
<a href='http://core.trac.wordpress.org/changeset/6439'>[6439]</a> - <a href="http://core.trac.wordpress.org/ticket/2805">#2805</a><br />
<a href='http://core.trac.wordpress.org/changeset/6091'>[6091]</a> - <a href="http://core.trac.wordpress.org/ticket/4182">#4182</a><br />
<a href='http://core.trac.wordpress.org/changeset/6086'>[6086]</a> - <a href="http://core.trac.wordpress.org/ticket/4946">#4946</a><br />
<a href='http://core.trac.wordpress.org/changeset/5986'>[5986]</a> - <a href="http://core.trac.wordpress.org/ticket/4873">#4873</a><br />
<a href='http://core.trac.wordpress.org/changeset/5982'>[5982]</a> - <a href="http://core.trac.wordpress.org/ticket/4800">#4800</a><br />
<a href='http://core.trac.wordpress.org/changeset/5958'>[5958]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5920'>[5920]</a> - <a href="http://core.trac.wordpress.org/ticket/4703">#4703</a><br />
<a href='http://core.trac.wordpress.org/changeset/5910'>[5910]</a> - <a href="http://core.trac.wordpress.org/ticket/4654">#4654</a><br />
<a href='http://core.trac.wordpress.org/changeset/5881'>[5881]</a> - <a href="http://core.trac.wordpress.org/ticket/4704">#4704</a><br />
<a href='http://core.trac.wordpress.org/changeset/5857'>[5857]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5848'>[5848]</a> - <a href="http://core.trac.wordpress.org/ticket/4499">#4499</a><br />
<a href='http://core.trac.wordpress.org/changeset/5845'>[5845]</a> - <a href="http://core.trac.wordpress.org/ticket/4547">#4547</a><br />
<a href='http://core.trac.wordpress.org/changeset/5317'>[5317]</a> - <a href="http://core.trac.wordpress.org/ticket/4169">#4169</a><br />
<a href='http://core.trac.wordpress.org/changeset/5154'>[5154]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5151'>[5151]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5104'>[5104]</a> - <a href="http://core.trac.wordpress.org/ticket/3790">#3790</a><br />
<a href='http://core.trac.wordpress.org/changeset/4964'>[4964]</a> - <a href="http://core.trac.wordpress.org/ticket/3898">#3898</a><br />
</p></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<div style="float:left;"><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
<a href="http://ottopress.com/feed/">Entries (RSS)</a> and <a href="http://ottopress.com/comments/feed/">Comments (RSS)</a>.<br />
<span about="http://ottodestruct.com/" xmlns:cc="http://creativecommons.org/ns#">
This page, by <a property="cc:attributionName" rel="cc:attributionURL" href="http://ottodestruct.com/">Otto</a>, is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License</a>.</span><br />
Powered by <a href="http://wordpress.org/" title="Powered by WordPress.">WordPress</a>.<br />
		<script type="text/javascript">
		//<![CDATA[
		var infiniteScroll = {"settings":{"id":"content","ajaxurl":"http:\/\/ottopress.com\/?infinity=scrolling","type":"scroll","wrapper":false,"wrapper_class":"infinite-wrap","footer":false,"click_handle":"1","text":"Older posts","totop":"Scroll back to top","currentday":"26.02.14","order":"DESC","scripts":[],"styles":[],"google_analytics":false,"offset":0,"history":{"host":"ottopress.com","path":"\/tag\/wordpress-2\/page\/%d\/","use_trailing_slashes":true,"parameters":""},"query_args":{"tag":"wordpress-2","error":"","m":"","p":0,"post_parent":"","subpost":"","subpost_id":"","attachment":"","attachment_id":0,"name":"","static":"","pagename":"","page_id":0,"second":"","minute":"","hour":"","day":0,"monthnum":0,"year":0,"w":0,"category_name":"","cat":"","tag_id":609,"author":"","author_name":"","feed":"","tb":"","paged":0,"comments_popup":"","meta_key":"","meta_value":"","preview":"","s":"","sentence":"","fields":"","menu_order":"","category__in":[],"category__not_in":[],"category__and":[],"post__in":[],"post__not_in":[],"tag__in":[],"tag__not_in":[],"tag__and":[],"tag_slug__in":["wordpress-2"],"tag_slug__and":[],"post_parent__in":[],"post_parent__not_in":[],"author__in":[],"author__not_in":[],"posts_per_page":7,"ignore_sticky_posts":false,"suppress_filters":false,"cache_results":true,"update_post_term_cache":true,"update_post_meta_cache":true,"post_type":"","nopaging":false,"comments_per_page":"50","no_found_rows":false,"order":"DESC"},"last_post_date":"2011-10-16 17:43:25","stats":"blog=12342457&host=ottopress.com&v=ext&j=1:3.0.2&x_pagetype=infinite-jetpack"}};
		//]]>
		</script>
		<img alt='css.php' src="http://ottopress.com/wp-content/plugins/cookies-for-comments/css.php?k=c6a73cb029f035cdaa9e9e8336d25169&amp;o=i&amp;t=915608036" width='1' height='1' />	<div style="display:none">
	</div>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCss.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.js?ver=20140514'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en-US","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.14.2'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
<script type="text/javascript">
			jQuery.extend( infiniteScroll.settings.scripts, ["jquery-core","jquery-migrate","jquery","tiled-gallery","spin","jquery.spin","syntaxhighlighter-core","syntaxhighlighter-brush-php","syntaxhighlighter-brush-css","the-neverending-homepage","jetpack-photon","devicepx","mediaelement","wp-mediaelement","grofiles-cards","wpgroho"] );
			jQuery.extend( infiniteScroll.settings.styles, ["yarppWidgetCss","jetpack-subscriptions","the-neverending-homepage","tiled-gallery","mediaelement","wp-mediaelement"] );
		</script>
	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.2',blog:'12342457',post:'0',tz:'-5'});
	var load_cmc = function(){linktracker_init(12342457,0,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></div></div>

<script type="text/javascript">
    window._idl = {};
    _idl.variant = "modal";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

</body>
</html>

