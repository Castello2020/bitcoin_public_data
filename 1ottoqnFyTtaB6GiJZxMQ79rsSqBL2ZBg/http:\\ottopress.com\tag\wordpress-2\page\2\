http://ottopress.com/tag/wordpress-2/page/2/
HTTP/1.1 200 OK
Server: nginx/1.4.4
Date: Tue, 22 Jul 2014 09:19:50 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Pingback: http://ottopress.com/xmlrpc.php

<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>WordPress &raquo; Otto on WordPress</title>

<link rel="profile" href="http://www.w3.org/1999/xhtml/vocab" />
<link rel="me" type="text/html" href="https://plus.google.com/100201852715113506716" />

<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/style.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/print.css" type="text/css" media="print" />

<link rel="pingback" href="http://ottopress.com/xmlrpc.php" />

<meta property="og:email" content="otto@ottodestruct.com" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">

<script type="text/javascript">var description = '';</script>
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="IvlRFnRHu9RIiAiOS-bo-8vU4ju4V6_b4U3M_-1jlXQ" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Feed" href="http://ottopress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Comments Feed" href="http://ottopress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; WordPress Tag Feed" href="http://ottopress.com/tag/wordpress-2/feed/" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='the-neverending-homepage-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.css?ver=20140422' type='text/css' media='all' />
<link rel='stylesheet' id='tiled-gallery-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.css?ver=2012-09-21' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.13.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery-migrate.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ottopress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ottopress.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<meta name="pinterest" content="nopin" /><link rel="microsummary" type="text/plain" href="/tag/wordpress-2/page/2/?microsummary=1" /><link rel="shortcut icon" href="http://ottopress.com/wp-content/wp-logo-vs.png" /><style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-27538437-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>

<body class="archive paged tag tag-wordpress-2 tag-609 paged-2 tag-paged-2 infinite-scroll neverending">
<script type="text/javascript">
if (top.location != self.location) top.location.replace(self.location);
</script>
<div id="page">
<div id="header">
	<div id="headertitle">
		<h1><a href="http://ottopress.com" title="Otto on WordPress: You have to use an Ottopress to get fresh squeezed Otto.">Otto on WordPress</a></h1>
		<p>You have to use an Ottopress to get fresh squeezed Otto.</p>
	</div> 
	<!-- Search box (If you prefer having search form as a sidebar widget, remove this block) -->
	<div class="search">
		<form method="get" id="searchform" action="http://ottopress.com/">
<input type="search" size="20" results="5" name="s" id="s" placeholder="Search..." speech="speech" x-webkit-speech="x-webkit-speech" onwebkitspeechchange="this.form.submit();" />
</form>
	</div> 
	<!-- Search ends here-->
		
</div>
<div id="navbar">
<div id="nav">
<div class="menu"><ul><li ><a href="http://ottopress.com/">Home</a></li><li class="page_item page-item-5 page_item_has_children"><a href="http://ottopress.com/wordpress-plugins/">WordPress Plugins</a><ul class='children'><li class="page_item page-item-205"><a href="http://ottopress.com/wordpress-plugins/atd-for-comments/">After The Deadline For Comments</a></li><li class="page_item page-item-21"><a href="http://ottopress.com/wordpress-plugins/atom-default-feed/">Atom Default Feed</a></li><li class="page_item page-item-965"><a href="http://ottopress.com/wordpress-plugins/dropbox-photo-sideloader/">Dropbox Photo Sideloader</a></li><li class="page_item page-item-15"><a href="http://ottopress.com/wordpress-plugins/gravatar-box/">Gravatar Box</a></li><li class="page_item page-item-32"><a href="http://ottopress.com/wordpress-plugins/php-code-widget/">PHP Code Widget</a></li><li class="page_item page-item-7"><a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a></li><li class="page_item page-item-10"><a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a></li><li class="page_item page-item-81"><a href="http://ottopress.com/wordpress-plugins/unicornify/">Unicornify</a></li></ul></li><li class="page_item page-item-374"><a href="http://ottopress.com/contact/">Contact Otto</a></li><li><a href="http://ottodestruct.com" title="Nothing to See Here">Nothing to See Here</a></li><li><a href="http://buyottoabeer.com" title="Otto on Beer">Otto on Beer</a></li></ul></div>
	</div>
</div>
<div id="wrapper">
	<div id="content">

	
			<p>Posts tagged &#8216;WordPress&#8217;</p>

	 		
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/tag/wordpress-2/page/3/" >&laquo; Previous Entries</a></div>
			<div class="alignright"><a href="http://ottopress.com/tag/wordpress-2/" >Next Entries &raquo;</a></div>
		</div>

					<div id="post-673" class="post-673 post type-post status-publish format-standard hentry category-wordpress tag-3-3 tag-contextual tag-dropdown tag-future tag-help tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/new-in-wordpress-3-3-more-useful-help-screens/" rel="bookmark" title="Permanent Link to New in WordPress 3.3: More Useful Help Screens" itemprop="url"><span itemprop="name">New in WordPress 3.3: More Useful Help Screens</span></a></h2>
				<div class="postmetadata">October 6, 2011, 4:18 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><em>Note: Post has been updated for 3.3 beta 2</em></p>
<p>WordPress plugin and theme authors could get something interesting in WordPress 3.3: a somewhat more comprehensive help screen system.</p>
<p>This is actually just a small part of a more long term makeover involving unifying the admin screen code base, but it&#8217;s pretty cool nevertheless. Backward compatibility is sorta fuzzy on parts of it at the moment, but not a lot of authors used these functions previously anyway, from what I can tell.</p>
<p>Anyway, I spent an entertaining half hour reworking the help dropdown for my SFC plugin. Here&#8217;s what it looks like in 3.3-aortic-dissection right now (note that the look and feel of this will probably change before final):</p>
<div id="attachment_674" style="width: 935px" class="wp-caption alignnone"><a href="http://i0.wp.com/ottopress.com/files/2011/10/sfc33help.png"><img class="size-full wp-image-674" title="sfc33help" src="http://i1.wp.com/ottopress.com/files/2011/10/sfc33help.png?resize=700%2C299" alt="SFC Help screen in WordPress 3.3" data-recalc-dims="1" /></a><p class="wp-caption-text">SFC Help screen in WordPress 3.3</p></div>
<p>As you can see, the dropdown Help menu moved into the Admin bar (along with lots of other stuff), and has some tabs on the left hand side where you can make different topics and such for different parts of the plugin.</p>
<p>The code for this is actually fairly straightforward, albeit in a sideways sort of way&#8230;</p>
<p>First we have to look at the code that adds my options page in the first place. This would work with any of the add_*_page functions, so add_theme_page and such works fine too.</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action('admin_menu', 'sfc_admin_add_page');
function sfc_admin_add_page() {
	global $sfc_options_page;
	$sfc_options_page = add_options_page(__('Simple Facebook Connect', 'sfc'), __('Simple Facebook Connect', 'sfc'), 'manage_options', 'sfc', 'sfc_options_page');
	add_action(&quot;load-$sfc_options_page&quot;, 'sfc_plugin_help');
}
</pre>
<p>This makes an options page, and then uses the assigned identifier for that page to hook the load-* action. This means that when our page is loaded, the sfc_plugin_help function will get called.</p>
<pre class="brush: php; title: ; notranslate" title="">
function sfc_plugin_help() {
	global $sfc_options_page;
	$screen = get_current_screen();
	if ($screen-&gt;id != $sfc_options_page)
		return;
</pre>
<p>Here, we call get_current_screen() to get the current WP_Screen object. The WP_Screen object is new to 3.3, but essentially it encapsulates an admin screen. It&#8217;s still under active development, but in the long run, it may make the task of creating admin screens much, much easier.</p>
<p>Anyway, right away, I do one thing and that is to check if the ID of the current screen matches the ID I was given for my options page. If it doesn&#8217;t match, then the user isn&#8217;t on my screen, and so I return having done nothing at all. This is a sort of belt and suspenders approach, since we shouldn&#8217;t be here if load-$sfc_options_page didn&#8217;t get called, but it never hurts to be sure.</p>
<p>The next bit is where I add my help screens. Here&#8217;s an incomplete sample of that code:</p>
<pre class="brush: php; title: ; notranslate" title="">
$screen-&gt;add_help_tab( array(
	'id'      =&gt; 'sfc-base',
	'title'   =&gt; __('Connecting to Facebook', 'sfc'),
	'content' =&gt; &quot;HTML for help content&quot;,
));

$screen-&gt;add_help_tab( array(
	'id'      =&gt; 'sfc-modules',
	'title'   =&gt; __('SFC Modules', 'sfc'),
	'content' =&gt; &quot;HTML for help content&quot;,
));

$screen-&gt;add_help_tab( array(
	'id'      =&gt; 'sfc-login',
	'title'   =&gt; __('Login and Register', 'sfc'),
	'content' =&gt; &quot;HTML for help content&quot;,
));
</pre>
<p>I removed the content for each one to make it clearer. Essentially, I&#8217;m just calling the object&#8217;s add_help_tab function to add my new tabs to the help screen, one by one. Simple, right?</p>
<p>There&#8217;s other useful bits in WP_Screen too, such as adding screen options, adding a right hand side sidebar to the help dropdown, and so forth. I haven&#8217;t figured out a use for them yet, but they&#8217;re still nice to see.</p>
<p>If you have a complex plugin or theme, might be worth looking into this now. Might reduce your need for end-user support. Maybe. Hard to say. People rarely look at the documentation, but inline help might be worth a shot.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/an' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/3-3/" rel="tag">3.3</a>, <a href="http://ottopress.com/tag/contextual/" rel="tag">contextual</a>, <a href="http://ottopress.com/tag/dropdown/" rel="tag">dropdown</a>, <a href="http://ottopress.com/tag/future/" rel="tag">future</a>, <a href="http://ottopress.com/tag/help/" rel="tag">help</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/new-in-wordpress-3-3-more-useful-help-screens/#comments" title="Comment on New in WordPress 3.3: More Useful Help Screens">24 Comments</a>									 </div>
			</div>			<div id="post-663" class="post-663 post type-post status-publish format-standard hentry category-code category-other tag-filter tag-gd tag-greyscale tag-image tag-imagefx tag-manipulation tag-photos tag-php tag-plugin tag-sepia tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/customizing-wordpress-images-with-a-plugin-imagefx/" rel="bookmark" title="Permanent Link to Customizing WordPress Images with a Plugin: ImageFX" itemprop="url"><span itemprop="name">Customizing WordPress Images with a Plugin: ImageFX</span></a></h2>
				<div class="postmetadata">October 4, 2011, 8:12 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>My post about how to <a href="http://ottopress.com/2011/customizing-wordpress-images/">customize WordPress images</a> with tricks like greyscale and such got me lots of feedback, so I figured I might as well turn it into a plugin.</p>
<p>The <a href="http://wordpress.org/extend/plugins/imagefx/">ImageFX plugin</a> allows you to customize the image sizes from WordPress or custom ones for your theme, by applying filters to them.</p>
<p><img class="alignright size-full wp-image-668" title="imagefx" src="http://i2.wp.com/ottopress.com/files/2011/10/imagefx.png?resize=479%2C238" alt="" data-recalc-dims="1" /></p>
<p>The way it works is basically identical to my original post on the topic, only it allows the filters to be defined on a per-image-size level. It also allows the addition of a &#8220;slug&#8221; to be appended to the image filename, which is useful for cases where you want to have two images at the same size, but with different filters.</p>
<p>Since it was easy to do, I went ahead and created several other simple image filters that you can use for your images:</p>
<ul>
<li>Greyscale (black and white)</li>
<li>Sepia tone (old-timey!)</li>
<li>Colorize with red, yellow, green, blue, or purple</li>
<li>Photonegative</li>
<li>Emboss</li>
<li>Brighten</li>
<li>Greyscale except red, green, or blue (classy!)</li>
</ul>
<p>Here&#8217;s some examples. This a pic of me, Nacin, Rose, and Matt at WordCamp San Francisco. I ran it through the sepia, blue colorize, and grey-except-red filters.</p>
<p><a href="http://i0.wp.com/ottopress.com/files/2011/10/orig.jpg"><img class="alignleft size-thumbnail wp-image-664" title="orig" src="http://i0.wp.com/ottopress.com/files/2011/10/orig.jpg?resize=200%2C133" alt="" data-recalc-dims="1" /></a><a href="http://i0.wp.com/ottopress.com/files/2011/10/sepia.jpg"><img class="alignleft size-thumbnail wp-image-665" title="sepia" src="http://i1.wp.com/ottopress.com/files/2011/10/sepia.jpg?resize=200%2C133" alt="" data-recalc-dims="1" /></a><a href="http://i1.wp.com/ottopress.com/files/2011/10/blue.jpg"><img class="alignleft size-thumbnail wp-image-666" title="blue" src="http://i0.wp.com/ottopress.com/files/2011/10/blue.jpg?resize=200%2C133" alt="" data-recalc-dims="1" /></a><a href="http://i2.wp.com/ottopress.com/files/2011/10/bw-red.jpg"><img class="alignleft size-thumbnail wp-image-667" title="bw-red" src="http://i1.wp.com/ottopress.com/files/2011/10/bw-red.jpg?resize=200%2C133" alt="" data-recalc-dims="1" /></a></p>
<p><br style="clear: left;" /><br />
These are some of the default filters included, but since I could, I went ahead and made it easily expandable too. All you have to do to define a filter is to create a function to do the image filtering you want, then call the imagefx_register_filter() function to add it.</p>
<p>To implement your own custom filter, you can do it like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
imagefx_register_filter('custom-name','my_custom_filter');
function my_custom_filter(&amp;$image) {
 // modify the $image here as you see fit
}
</pre>
<p>Note that the $image is passed by reference, so you don&#8217;t have to return it. This is because the $image resource takes up a lot of memory, so to save on memory usage, you are manipulating it in place, sort of thing.</p>
<p>You can use any of the <a href="http://www.php.net/manual/en/ref.image.php">image functions in PHP</a> to change the image however you like. The filters I&#8217;ve implemented are mostly pretty simple. You can see them all in the filters.php file, in the plugin.</p>
<p>Caveats: The plugin will only filter JPG images, to avoid the overhead of recompressing PNGs and to avoid breaking animated GIF files. Also note that I haven&#8217;t tested these filters extensively. They&#8217;re only a starting point, sort of thing. I spent all of about 20 minutes writing them, so don&#8217;t expect miracles. <img src="http://i0.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>You can download version 0.1 of the plugin from the WordPress plugin directory: <a href="http://wordpress.org/extend/plugins/imagefx/">http://wordpress.org/extend/plugins/imagefx/</a></p>
<p>Enjoy!</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/am' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/filter/" rel="tag">filter</a>, <a href="http://ottopress.com/tag/gd/" rel="tag">gd</a>, <a href="http://ottopress.com/tag/greyscale/" rel="tag">greyscale</a>, <a href="http://ottopress.com/tag/image/" rel="tag">image</a>, <a href="http://ottopress.com/tag/imagefx/" rel="tag">imagefx</a>, <a href="http://ottopress.com/tag/manipulation/" rel="tag">manipulation</a>, <a href="http://ottopress.com/tag/photos/" rel="tag">photos</a>, <a href="http://ottopress.com/tag/php/" rel="tag">PHP</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/sepia/" rel="tag">sepia</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/customizing-wordpress-images-with-a-plugin-imagefx/#comments" title="Comment on Customizing WordPress Images with a Plugin: ImageFX">30 Comments</a>									 </div>
			</div>			<div id="post-646" class="post-646 post type-post status-publish format-standard hentry category-rants category-wordpress tag-actions tag-code-2 tag-filters tag-shortcode tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/actions-and-filters-are-not-the-same-thing/" rel="bookmark" title="Permanent Link to Actions and filters are NOT the same thing&#8230;" itemprop="url"><span itemprop="name">Actions and filters are NOT the same thing&#8230;</span></a></h2>
				<div class="postmetadata">September 9, 2011, 3:31 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Have you ever looked at the add_action function in WordPress? Here it is:</p>
<pre class="brush: php; title: ; notranslate" title="">
function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1) {
	return add_filter($tag, $function_to_add, $priority, $accepted_args);
}
</pre>
<p>I know, right? Some people&#8217;s minds just got blown.</p>
<h3>What are Filters?</h3>
<p>A filter is defined as a function that takes in some kind of input, modifies it, and then returns it. This is an extremely handy little concept that PHP itself uses in a ton of different ways. About half the string functions qualify as a &#8216;filter&#8217; function.</p>
<p>Look at <a href="http://php.net/manual/en/function.strrev.php">strrev()</a>. It&#8217;s a simple-stupid example. It takes a string as an argument, and then returns the reverse of that string. You could use it as a filter function in WordPress, easily. Like, to reverse all your titles.</p>
<pre class="brush: php; title: ; notranslate" title="">
add_filter('the_title', 'strrev');
</pre>
<p>Some filters take more than one argument, but the first argument is always the thing to be modified and returned. PHP adheres to this concept too. Take the <a href="http://www.php.net/manual/en/function.substr.php">substr()</a> function. The first argument is the string, the second and third are the start and optional length values. The returned value is the part of the string you want.</p>
<p><img class="alignright size-full wp-image-648" title="Head-desk-1" src="http://i1.wp.com/ottopress.com/files/2011/09/Head-desk-1.jpg?resize=400%2C300" alt="" data-recalc-dims="1" /></p>
<h3>What are Actions?</h3>
<p>An action is just a place where you call a function, and you don&#8217;t really care what it returns. The function is performing some kind of action just by being called. If you hook a function to the init action, then it runs whenever do_action(&#8216;init&#8217;) is called.</p>
<p>Now, some actions have arguments too, but again, there&#8217;s still no return value.</p>
<p>So in a sense, a WordPress action is just a filter without the first argument and without a return value.</p>
<h3>So why have them both?</h3>
<p>Because there is still a conceptual difference between an action and a filter.</p>
<p>Filters filter things. Actions do not. And this is critically important when you&#8217;re writing a filter.</p>
<p>A filter function should never, ever, have unexpected side effects.</p>
<p>Take a quick example. Here&#8217;s <a href="http://wordpress.org/support/topic/plugin-simple-facebook-connect-weird-conflict-with-secure-and-accessible-php?replies=2">a thread</a> on the WordPress support forums where a person found that using my own SFC plugin in combination with a contact form emailer plugin caused the email from the form to be sent 3-5 times.</p>
<p>Why did it do this? Basically, because the contact form plugin is sending an email inside a filter function.</p>
<p>One of the things SFC does is to build a description meta from the content on the page. It also looks through that content for images and video, in order to build meta information to send to Facebook. In order for this to happen at the right time, the plugin must call the_content filter.</p>
<p>See, what if somebody puts a link to a Flickr picture on their page? In that case, oEmbed will kick in and convert that link into a nice and pretty embedded image. Same for YouTube videos. Or maybe somebody is using a gallery and there&#8217;s lots of pictures on the resulting page, but the only thing in the post_content is the gallery shortcode.</p>
<p>In order to get those images from the content, SFC has to do apply_filters(&#8216;the_content&#8217;,$post_content). This makes all the other plugins and all the other bits of the system process that $post_content and return the straight HTML. Then it can go and look for images, look for video, even make a pretty 1000 character excerpt to send to Facebook.</p>
<p>But SFC can&#8217;t possibly know that doing apply_filters(&#8216;the_content&#8217;,&#8230;) will cause some other plugin to go and send a freakin&#8217; email. That&#8217;s totally unexpected. It&#8217;s just trying to filter some content. That would be like calling the strrev() function and having it make a phone call. Totally crazy.</p>
<h3>Shortcodes</h3>
<p>Shortcodes are a type of filter. They take in content from the shortcode, they return replacement content of some sort. They are filters, by definition. Always, always keep that in mind.</p>
<p>Also keep in mind that shortcodes are supposed to <em>return</em> the replacement content, not just echo it out.</p>
<h3>Conclusion</h3>
<p>So plugin authors, please, please, I&#8217;m begging you, learn this lesson well.</p>
<p>Filters are supposed to filter. Actions are supposed to take action.</p>
<p>When you mix the two up, then you cause pain for the rest of the world trying to interact with your code. My desk is starting to get covered in dents from me repeatedly banging my head into it because of this.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ak' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/actions/" rel="tag">actions</a>, <a href="http://ottopress.com/tag/code-2/" rel="tag">code</a>, <a href="http://ottopress.com/tag/filters/" rel="tag">filters</a>, <a href="http://ottopress.com/tag/shortcode/" rel="tag">shortcode</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/rants/" title="View all posts in Rants" rel="category tag">Rants</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/actions-and-filters-are-not-the-same-thing/#comments" title="Comment on Actions and filters are NOT the same thing&#8230;">30 Comments</a>									 </div>
			</div>			<div id="post-608" class="post-608 post type-post status-publish format-standard hentry category-other tag-beta tag-captcha tag-facebook tag-login tag-plugin tag-register tag-sfc tag-simple-facebook-connect tag-trunk tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/sfc-1-0-login-and-registration/" rel="bookmark" title="Permanent Link to SFC 1.0 &#8211; Login and Registration" itemprop="url"><span itemprop="name">SFC 1.0 &#8211; Login and Registration</span></a></h2>
				<div class="postmetadata">August 22, 2011, 6:33 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Another new thing in SFC 1.0 is the new Login and Registration mechanism. The login mechanism in the older SFC worked, but it was slightly buggy and didn&#8217;t work very well. The new mechanism works quite well indeed.</p>
<div id="attachment_610" style="width: 610px" class="wp-caption alignnone"><a href="http://i2.wp.com/ottopress.com/files/2011/07/login.png"><img class="size-medium wp-image-610" title="login" src="http://i1.wp.com/ottopress.com/files/2011/07/login.png?resize=600%2C278" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Login screen with Facebook popup</p></div>
<p>For starters, it will auto-connect existing accounts to Facebook, based on matching email addresses. Just Login with your FB credentials, and if you&#8217;re using the same email in both sites, then it auto logs you in based on that. Your account gets automatically connected to your Facebook Profile, and this appears in the &#8220;Howdy&#8221; dropdown as well as on your Profile.</p>
<div id="attachment_609" style="width: 119px" class="wp-caption alignnone"><a href="http://i1.wp.com/ottopress.com/files/2011/07/dropdown.png"><img class="size-full wp-image-609" title="dropdown" src="http://i0.wp.com/ottopress.com/files/2011/07/dropdown.png?resize=109%2C118" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Howdy dropdown</p></div>
<p>This may seem insecure to some, however the mechanism behind the scenes is that Facebook sets a cookie in your browser, and cryptographically signs it. Your Application Secret is the key used to decode this signature, thus proving it came from your Facebook application, and eliminating the risk of having users log in without your valid credentials.</p>
<p>However, this does point out something everybody should know: Secrets are supposed to be <strong>secret</strong>. So keep your Facebook Application Secret a real secret. This applies anytime you&#8217;re setting up interconnected web applications. Secrets are called that for a reason.</p>
<h3>Registration Flow</h3>
<p>In order to integrate Login and Registration using Facebook, Facebook came up with what is essentially a <a href="http://developers.facebook.com/docs/user_registration/flows/">flow diagram</a> explaining the steps an app should use to login and register somebody to a third party site.</p>
<div id="attachment_614" style="width: 572px" class="wp-caption alignnone"><a href="http://i1.wp.com/ottopress.com/files/2011/07/flow2.png"><img class="size-medium wp-image-614" title="flow2" src="http://i0.wp.com/ottopress.com/files/2011/07/flow2.png?resize=562%2C600" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Facebook&#39;s rather complex registration flow diagram</p></div>
<p>This rather complex looking flowchart shows how a site which has its own login and registration mechanism can implenent Facebook. I&#8217;ve followed this chart as best as possible, and thanks to FB&#8217;s <a href="http://developers.facebook.com/docs/plugins/registration/">Registration plugin</a>, it works quite well now. Here&#8217;s how it breaks down.</p>
<p>For existing users:</p>
<ol>
<li>You click the Login button.</li>
<li>You login to Facebook if needed.</li>
<li>If your email on Facebook matches your email in WordPress, you&#8217;re logged in and your account is automatically connected.</li>
<li>If your email doesn&#8217;t match, then you can log in normally with WordPress instead, and connect your account manually, on the Users-&gt;Your Profile screen.</li>
</ol>
<p>For new users:</p>
<ol>
<li>You click the Login button.</li>
<li>You login to Facebook if needed.</li>
<li>If no account can be found for you from the login process, you get redirected to the Register page.</li>
<li>There the Facebook register plugin shows up and lets you register for the WordPress site, using your Facebook credentials. All it asks for is a username and to solve a CAPTCHA (to prevent spam registrations).</li>
<li>You get a new WordPress account, already connected to Facebook for you. It even emails you a password.</li>
</ol>
<div id="attachment_612" style="width: 289px" class="wp-caption alignnone"><a href="http://i0.wp.com/ottopress.com/files/2011/07/register.png"><img class="size-medium wp-image-612" title="register" src="http://i2.wp.com/ottopress.com/files/2011/07/register.png?resize=279%2C600" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Registration screen</p></div>
<p>Some have expressed concern that Facebook seems required for registration. This is not actually the case, because after all, not everybody uses Facebook. One of the nice things about the FB Register plugin is that it has different methods for Facebook connected users vs. non-Facebook connected users. Both types of users can register for the site. Facebook users get some advantages like having their account automatically connected and not having to type in an email address, but the basic process is the same.</p>
<p>For new users not using Facebook:</p>
<ol>
<li>You click the Register link.</li>
<li>The Facebook register plugin shows up and lets you register for the WordPress site. It will ask for a username and your email address, as per the normal registration process. It does have the CAPTCHA too, and tells you that you can login using Facebook as well, if you want.</li>
<li>You get a new WordPress account, and it emails you a password.</li>
</ol>
<div id="attachment_613" style="width: 335px" class="wp-caption alignnone"><a href="http://i2.wp.com/ottopress.com/files/2011/07/register-nofb.png"><img class="size-full wp-image-613" title="register-nofb" src="http://i2.wp.com/ottopress.com/files/2011/07/register-nofb.png?resize=325%2C550" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Registration screen</p></div>
<p>And after logging in and having it recognize you, the user will be automatically connected to their account on their Profile page.</p>
<div id="attachment_611" style="width: 610px" class="wp-caption alignnone"><a href="http://i1.wp.com/ottopress.com/files/2011/07/profile.png"><img class="size-medium wp-image-611" title="profile" src="http://i1.wp.com/ottopress.com/files/2011/07/profile.png?resize=600%2C56" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Facebook Connection shown on the Profile Page</p></div>
<p>If you want to try the new version now, I&#8217;ve finally moved it into the normal &#8220;trunk&#8221; directory on the repository at <a href="http://wordpress.org">WordPress.org</a>, so you can download the ZIP file of the plugin here:<br />
<a href="http://downloads.wordpress.org/plugin/simple-facebook-connect.zip">http://downloads.wordpress.org/plugin/simple-facebook-connect.zip</a></p>
<p>Release date: soon. Real soon now. <img src="http://i0.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ah' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/beta/" rel="tag">beta</a>, <a href="http://ottopress.com/tag/captcha/" rel="tag">captcha</a>, <a href="http://ottopress.com/tag/facebook/" rel="tag">facebook</a>, <a href="http://ottopress.com/tag/login/" rel="tag">login</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/register/" rel="tag">register</a>, <a href="http://ottopress.com/tag/sfc/" rel="tag">sfc</a>, <a href="http://ottopress.com/tag/simple-facebook-connect/" rel="tag">simple-facebook-connect</a>, <a href="http://ottopress.com/tag/trunk/" rel="tag">trunk</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/sfc-1-0-login-and-registration/#comments" title="Comment on SFC 1.0 &#8211; Login and Registration">20 Comments</a>									 </div>
			</div>			<div id="post-621" class="post-621 post type-post status-publish format-standard has-post-thumbnail hentry category-code category-wordpress tag-bears tag-imagefilter tag-images tag-metadata tag-php tag-upload tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/customizing-wordpress-images/" rel="bookmark" title="Permanent Link to Customizing WordPress images" itemprop="url"><span itemprop="name">Customizing WordPress images</span></a></h2>
				<div class="postmetadata">August 19, 2011, 12:04 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<blockquote class="twitter-tweet" width="550"><p>@<a href="https://twitter.com/otto42">otto42</a> Did I hear you right that there&#8217;s greyscale filtering in WordPress somewhere? Could you point me in the right direction?</p>
<p>&mdash; Tammy Hart (@tammyhart) <a href="https://twitter.com/tammyhart/status/104276342450831360" data-datetime="2011-08-18T19:39:52+00:00">August 18, 2011</a></p></blockquote>
<p><script src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>Manipulating images in PHP isn&#8217;t all that difficult. WordPress offers some functions to make it easier, and integrating with the WordPress uploader isn&#8217;t at all difficult, really.</p>
<p>For example, let&#8217;s say your theme needed a black and white version of the images, sized at 100&#215;100, and cropped to that size. This might be suitable for Next/Previous images to use for a gallery, perhaps&#8230;</p>
<div id="attachment_624" style="width: 210px" class="wp-caption alignnone"><a href="http://placebear.com"><img class="size-full wp-image-624 " title="bears" src="http://i0.wp.com/ottopress.com/files/2011/08/bears.jpg?resize=200%2C200" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">When black and white bears attack...</p></div>
<p>First, we need to create the image size itself:</p>
<pre class="brush: php; title: ; notranslate" title="">
add_action('after_setup_theme','themename_bw_size');
function themename_bw_size() {
	add_image_size('themename-bw-image', 100, 100, true);
}
</pre>
<p>This simple function hooks into the after_setup_theme hook, which is loaded after the theme&#8217;s functions.php file is loaded. The function calls add_image_size to add a new image size for the uploader to create for each image that is uploaded into the WordPress media library. The size is specified as 100&#215;100 with hard cropping.</p>
<p>Now that is easy enough, but we need to make the image black and white. To do this, we&#8217;ll hook into the wp_generate_attachment_metadata filter. This filter is called after the images have been resized and saved, but before the metadata about those resized images has been added to the attachment post. We&#8217;re not actually using this filter as a &#8220;filter&#8221;, but we need some of the meta data so this is as good a place to hook as any, as long as we remember to return the metadata again.</p>
<pre class="brush: php; title: ; notranslate" title="">
add_filter('wp_generate_attachment_metadata','themename_bw_filter');
function themename_bw_filter($meta) {
	$file = wp_upload_dir();
	$file = trailingslashit($file['path']).$meta['sizes']['themename-bw-image']['file'];
	list($orig_w, $orig_h, $orig_type) = @getimagesize($file);
	$image = wp_load_image($file);
	imagefilter($image, IMG_FILTER_GRAYSCALE);
	switch ($orig_type) {
		case IMAGETYPE_GIF:
			imagegif( $image, $file );
			break;
		case IMAGETYPE_PNG:
			imagepng( $image, $file );
			break;
		case IMAGETYPE_JPEG:
			imagejpeg( $image, $file );
			break;
	}
	return $meta;
}
</pre>
<p>Let&#8217;s break this down piece by piece:</p>
<pre class="brush: php; title: ; notranslate" title="">
$file = wp_upload_dir();
$file = trailingslashit($file['path']).$meta['sizes']['themename-bw-image']['file'];
</pre>
<p>This bit of code gets our upload directory path, makes sure it&#8217;s trailing slashed, then appends the filename of our themename-bw-image file to it. Thus, after this is run, $file contains the full local path to the image we want to make black and white.</p>
<pre class="brush: php; title: ; notranslate" title="">
list($orig_w, $orig_h, $orig_type) = @getimagesize($file);
</pre>
<p>This line of code simply gets the image size and type into some variables. We really only need the type for later, but this is an easy way to do it.</p>
<pre class="brush: php; title: ; notranslate" title="">
$image = wp_load_image($file);
</pre>
<p>The wp_load_image function is a handy one. It reads in the image and returns a PHP image resource for us to work with.</p>
<pre class="brush: php; title: ; notranslate" title="">
imagefilter($image, IMG_FILTER_GRAYSCALE);
</pre>
<p>This simply applies the grayscale filter to the image resource, making it black and white.</p>
<pre class="brush: php; title: ; notranslate" title="">
switch ($orig_type) {
	case IMAGETYPE_GIF:
		imagegif( $image, $file );
		break;
	case IMAGETYPE_PNG:
		imagepng( $image, $file );
		break;
	case IMAGETYPE_JPEG:
		imagejpeg( $image, $file );
		break;
}
</pre>
<p>Finally, we save the image back to the same file, overwriting the color one with the black and white one.</p>
<pre class="brush: php; title: ; notranslate" title="">
return $meta;
</pre>
<p>Since we used a filter, it&#8217;s important that we don&#8217;t leave out the final return to return the original information we were passed in, so that the metadata gets properly stored in the attachment post. We didn&#8217;t actually modify the metadata here, though we could.</p>
<p>Pretty simple to manipulate images in this way. You could apply one of the <a href="http://php.net/manual/en/function.imagefilter.php">many other types of filters available</a>, or change all the images into <a href="http://placebear.com">pictures of bears</a>, or whatever you like, really.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ag' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/bears/" rel="tag">bears</a>, <a href="http://ottopress.com/tag/imagefilter/" rel="tag">imagefilter</a>, <a href="http://ottopress.com/tag/images/" rel="tag">images</a>, <a href="http://ottopress.com/tag/metadata/" rel="tag">metadata</a>, <a href="http://ottopress.com/tag/php/" rel="tag">PHP</a>, <a href="http://ottopress.com/tag/upload/" rel="tag">upload</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/customizing-wordpress-images/#comments" title="Comment on Customizing WordPress images">39 Comments</a>									 </div>
			</div>			<div id="post-549" class="post-549 post type-post status-publish format-standard hentry category-other category-wordpress tag-captions tag-exif tag-picasa tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/picasa-and-wordpress-and-captions/" rel="bookmark" title="Permanent Link to Picasa and WordPress and Captions" itemprop="url"><span itemprop="name">Picasa and WordPress and Captions</span></a></h2>
				<div class="postmetadata">June 14, 2011, 4:46 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Was trying to upload <a href="http://ottodestruct.com/blog/2011/canoeing-and-kansas-city/">some photos</a> and noticed that the captions I had set on the photos in <a href="http://picasa.google.com/">Picasa</a> showed up as titles in WordPress instead of as captions. Examining the core code, I found that it&#8217;s <a href="http://core.trac.wordpress.org/ticket/7580">a known issue</a>, but that fixing it in the core isn&#8217;t so easy, since WordPress has to support a number of different image editing programs and such. Different programs use the EXIF fields in different ways.</p>
<p>But I mostly use Picasa for photo management, so I don&#8217;t care about those other programs. So I wrote a quick plugin to fix the problem with WordPress and Picasa photos. Basically it just rejiggers the attachment when it&#8217;s added (but not when it&#8217;s edited) and puts the caption in the right place.</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php
/**
Plugin Name: Picasa Captioner
Description: Fix up WordPress to read Picasa Captions from EXIF info properly.
Author: Otto
Author URI: http://ottodestruct.com/
**/

add_filter( 'wp_read_image_metadata', 'picasa_adjust_caption' );
function picasa_adjust_caption($meta) {
	if (empty($meta['caption']) &amp;&amp; !empty($meta['title'])) {
		$meta['caption'] = $meta['title'];
		$meta['title'] = '';
	}
	return $meta;
}

add_action( 'add_attachment', 'picasa_adjust_attachment' );
function picasa_adjust_attachment($id) {
	$attachment = &amp; get_post( $id, ARRAY_A );
	if ( !empty( $attachment ) ) {
		$attachment['post_excerpt'] = $attachment['post_content'];
		$attachment['post_content'] = '';
		wp_update_post($attachment);
	}
}
</pre>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/9n' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/captions/" rel="tag">captions</a>, <a href="http://ottopress.com/tag/exif/" rel="tag">exif</a>, <a href="http://ottopress.com/tag/picasa/" rel="tag">picasa</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/picasa-and-wordpress-and-captions/#comments" title="Comment on Picasa and WordPress and Captions">8 Comments</a>									 </div>
			</div>			<div id="post-372" class="post-372 post type-post status-publish format-standard hentry category-code category-wordpress tag-attachments tag-gallery tag-image tag-pages tag-posts tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/photo-gallery-primer/" rel="bookmark" title="Permanent Link to Photo Gallery Primer" itemprop="url"><span itemprop="name">Photo Gallery Primer</span></a></h2>
				<div class="postmetadata">May 25, 2011, 6:39 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>I have seen many questions from people about how to create photo galleries in WordPress. But often I see these questions answered by somebody recommending a plugin or something like that. You don&#8217;t really need plugins to create photo galleries. WordPress has a huge amount of gallery functionality built right in. You just need to make your theme smarter in order to take advantage of it.</p>
<p>Note: <a href="http://ma.tt">Matt</a> has one of the neatest photo gallery implementations around, and he often gets questions about it. So I&#8217;m going to refer to it from time to time in this post. Maybe you&#8217;ll want to <a href="http://ma.tt/gallery/">head over there</a> and familiarize yourself with some of the look and features of it.</p>
<h3>Understanding the Gallery Concept</h3>
<p>One of the first things you need to know is how WordPress organizes Galleries. A gallery is really just a post with a bunch of images attached to it.</p>
<p>While editing a post or creating a new one, you have the option to upload images or other files. When you upload a file through the file Uploader, WordPress creates a post just for that file. This post has a post_type of &#8220;attachment&#8221;. Images in particular get some extra processing, and they show up in multiple sizes, you can insert them into the posts, etc. You probably already knew that. You probably have seen the gallery inserter, which just inserts the &#8220;gallery&#8221; shortcode into your post.</p>
<p>What you might not have known is that it&#8217;s doing more than you think. It&#8217;s not just resizing those images you&#8217;re uploading, but it&#8217;s pulling out metadata and other information about the image too. It&#8217;s grabbing <a href="http://hyperboleandahalf.blogspot.com/2010/04/alot-is-better-than-you-at-everything.html">alot</a> of the EXIF data from the image and storing it as postmeta items for that attachment post. The post itself, being a post, gets its own URL, which is the post that it is attached to&#8217;s URL followed by the attachment posts title. Basically, an attachment post is sorta like a child of the parent post, which contains the gallery. So all a gallery really is is the sum of the attachments posts that are children of the gallery post itself.</p>
<div id="attachment_503" style="width: 610px" class="wp-caption aligncenter"><a rel="attachment wp-att-503" href="http://ottopress.com/2011/photo-gallery-primer/gallerychart/"><img class="size-medium wp-image-503" title="Gallerychart" src="http://i1.wp.com/ottopress.com/files/2010/12/Gallerychart.png?resize=600%2C246" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Graph of the Gallery concept</p></div>
<p>Is that clear as mud? Don&#8217;t worry, it&#8217;s simpler to work with than you think.</p>
<h3>Create an Image Template</h3>
<p>First thing you need to do is to edit your theme (or create a child theme, if you prefer). What you&#8217;re going to do is to make an &#8220;image.php&#8221; file.</p>
<p>(Side note: If you browse through the source of WordPress, you&#8217;ll never find where it loads the &#8220;image.php&#8221; file, because it isn&#8217;t there. What it is actually doing is looking for the mimetype of the attachment as a filename. So since you uploaded, say, a JPG file, then the mimetype is image/jpeg. It splits that and looks for image.php, followed by jpeg.php, followed by image_jpeg.php, and finally just attachment.php as the generic base. It does this for any and all attachments, and any and all mime types. So you can have a video.php for video attachments, audio.php for audio attachments, etc.)</p>
<p>The image.php file is the template that will load for &#8220;single images&#8221;. A gallery shows thumbnails, but when you click on them, you go to the attachment page for just that image. An easy way to start with your custom image page is to copy your existing single post page to it. Just copy single.php to image.php. If you don&#8217;t have a single.php, maybe you should try copying the index.php file instead.</p>
<h3>Modify your Image Template</h3>
<p>Since this is an image, it&#8217;s going to have things in it that normal posts don&#8217;t. It&#8217;s also going to need special navigational entries that other posts don&#8217;t have.</p>
<p>For starters, it has a parent, which is the post containing the gallery. So what if we want to display the gallery post&#8217;s name? Easy, we can reference the parent using $post->post_parent. So code like get_the_title($post->post_parent) will get us that title so we can echo it. Similarly, using something like get_permalink($post->post_parent) will get us the link back to the gallery. So this sort of code in our image template will display that link:</p>
<pre class="brush: php; title: ; notranslate" title="">
echo &quot;&lt;a href='&quot; . get_permalink($post-&gt;post_parent). &quot;'&gt;Go back to &quot;. get_the_title($post-&gt;post_parent) .&quot;&lt;/a&gt;&quot;;
</pre>
<p>For navigation, we have special functions. previous_image_link and next_image_link will let us display links to the previous or next images in the gallery order. Each of these takes two parameters. The first is the size of the previous or next image we want to display (or false to not show a thumbnail at all), the second optional parameter is some text to put in the link. So to show a couple of text navigational links, this code would work:</p>
<pre class="brush: php; title: ; notranslate" title="">
echo previous_image_link(false,'Previous Photo');
echo next_image_link(false,'Next Photo');
</pre>
<p>If I wanted to display image links instead, I could change that false to &#8216;thumbnail&#8217; to display the thumbnail sized images. Or &#8216;medium&#8217;. Or whatever size I preferred.</p>
<p>Next we want to display the image. The wp_get_attachment_image function takes care of that easily:</p>
<pre class="brush: php; title: ; notranslate" title="">
echo wp_get_attachment_image( $post-&gt;ID, 'medium' );
</pre>
<p>The second parameter there is the size we want to display it at. You could also use &#8216;large&#8217;, &#8216;full&#8217;, &#8216;thumbnail&#8217;, etc. Any of the image sizes. If you want the image to be clickable, you might wrap it in an A tag and link it to the image itself.</p>
<p>But remember that attachment posts are still posts. All those fields you can enter on the image uploader are available to you to use. For example, the &#8220;Title&#8221; is stored in the normal Post Title field, so calling the_title() will display that. The Description is stored in the Content field and can be displayed with the_content(). The Caption is stored in the Excerpt field and can be displayed with the_excerpt(). You should use these as needed.</p>
<h3>EXIF Information</h3>
<p>Here&#8217;s an example of one of Matt&#8217;s single image pages, showing a balloon: <a href="http://ma.tt/2011/05/balloon-ride/mcm_9033/">http://ma.tt/2011/05/balloon-ride/mcm_9033/</a>.</p>
<p>Nice shot. Scroll down a bit and look on the right hand side of that page, where it says INFO. Lots of nifty information there. But he didn&#8217;t put any of that in, WordPress did it all by itself.</p>
<p>To gain access to that information in your image.php file, you use this code:</p>
<pre class="brush: php; title: ; notranslate" title="">
$imagemeta = wp_get_attachment_metadata();
</pre>
<p>If you examine this array, you find that it contains widths, heights, filenames of the various sizes of thumbnails generated, etc. But it also contains an array called &#8220;image_meta&#8221;. This is an array of information that represents everything WordPress was able to glean from the image itself. After you know this, it&#8217;s just a matter of displaying it properly.</p>
<p>For example, to display the camera name, he has code similar to this:</p>
<pre class="brush: php; title: ; notranslate" title="">
if ($imagemeta['image_meta']['camera']) {
	echo &quot;Camera: &quot; . $imagemeta['image_meta']['camera'];
}
</pre>
<p>There&#8217;s other bits in there, like Aperture, Focal Length, ISO settings, and Shutter Speed. Most of these are straightforward, except for shutter speed which is often not in an easy format to display. Usually it&#8217;s a fractional value, represented as a decimal. Often we want to convert this to the fractional display. Here&#8217;s a bit of code I wrote to do that. It&#8217;s not perfect, but what is?</p>
<pre class="brush: php; title: ; notranslate" title="">
if ($imagemeta['image_meta']['shutter_speed']) {
	echo 'Shutter: ';

	// shutter speed handler
	if ((1 / $imagemeta['image_meta']['shutter_speed']) &gt; 1) {
	echo &quot;1/&quot;;
		if (number_format((1 / $imagemeta['image_meta']['shutter_speed']), 1) ==  number_format((1 / $imagemeta['image_meta']['shutter_speed']), 0)) {
			echo number_format((1 / $imagemeta['image_meta']['shutter_speed']), 0, '.', '') . ' sec';
		} else {
			echo number_format((1 / $imagemeta['image_meta']['shutter_speed']), 1, '.', '') . ' sec';
		}
	} else {
		echo $imagemeta['image_meta']['shutter_speed'].' sec';
	}
}
</pre>
<p>Ugly, I know, but it gets the job done, more or less. Works on most shutter speeds I&#8217;ve tested it with.</p>
<h3>Gallery Formatting in the Stream</h3>
<p>Now, obviously you want your posts to look good in the normal flow of the blog as well. Twenty-Ten and the upcoming Twenty-Eleven themes both show you how to do this rather easily. Twenty-Ten used the &#8220;gallery&#8221; category for this at one point, before Post Formats came along and made that method obsolete. Now it uses the gallery post format instead.</p>
<p>So first, obviously, your theme will need to support the gallery post format. This is easy, just add this to your theme&#8217;s functions.php if it doesn&#8217;t have gallery support already (or add &#8220;gallery&#8221; to it if it does have post format support).</p>
<pre class="brush: php; title: ; notranslate" title="">
add_theme_support( 'post-formats', array( 'gallery') );
</pre>
<p>Now that that&#8217;s done, you have the option of choosing gallery as a post format. So you need to edit your theme to use that flag as an indicator to display things differently.</p>
<p>There&#8217;s plenty of <a href="http://ottopress.com/2011/post-formats-presentation/">tutorials</a> <a href="http://codex.wordpress.org/Post_Formats">on</a> <a href="http://lisasabin-wilson.com/wordpress-3-1-post-formats-reference">post</a> <a href="http://www.netmagazine.com/features/wordpress-post-formats-made-easy">formats</a> out there, so I&#8217;ll assume you&#8217;re more than capable of figuring out how to use has_post_format(&#8216;gallery&#8217;) or the &#8220;.home .format-gallery&#8221; CSS indicators to style the posts as needed.</p>
<p>What you need to know for specific gallery formatting in the main stream of the blog is how to display a selected representative image from the gallery there instead of the whole thing. There&#8217;s two basic steps to this.</p>
<p>First, you have to write your post appropriately to begin with. Take one of Matt&#8217;s posts for example: <a href="http://ma.tt/2011/05/20/">http://ma.tt/2011/05/20/</a></p>
<p>Here&#8217;s how that post actually looks in the editor:</p>
<pre class="brush: xml; title: ; notranslate" title="">
Description text at the top here... Went for balloon ride, etc.
&lt; !--more-- &gt;
[ gallery ]
</pre>
<p>In other words, he puts the description first, then the more tag, then the gallery after it. This has the effect of giving a natural separation of the description content and the gallery itself. The gallery is not displayed on the front page, because it&#8217;s after the more tag. So a call to the_content() on the stream pages will only show the description.</p>
<p>Secondly, you can easily adapt the Featured Image function to let you choose which image to display in the stream. All the user has to do is to upload their gallery then select one and set it to be the featured image. Voila, it&#8217;ll be the main representative one used.</p>
<pre class="brush: php; title: ; notranslate" title="">
if ( has_post_thumbnail() ) {
        // use the thumbnail (&quot;featured image&quot;)
        $thumb_id = get_post_thumbnail_id();
	the_post_thumbnail( $size ); // whatever size you want
}
</pre>
<p>By tossing a div around that, you can then float it left, or right, or whatever you prefer to do. With some extra code and the use of the get_children function, you can make this default to the first image in the gallery if they don&#8217;t choose a featured image.</p>
<pre class="brush: php; title: ; notranslate" title="">
else {
	$attachments = get_children( array(
		'post_parent' =&gt; get_the_ID(),
		'post_status' =&gt; 'inherit',
		'post_type' =&gt; 'attachment',
		'post_mime_type' =&gt; 'image',
		'order' =&gt; 'ASC',
		'orderby' =&gt; 'menu_order ID',
		'numberposts' =&gt; 1)
	);
	foreach ( $attachments as $thumb_id =&gt; $attachment )
		echo wp_get_attachment_image($thumb_id, $size); // whatever size you want
	}
}
</pre>
<p>Using tricks like this, you can get the bits of the gallery yourself and display them in different ways.</p>
<h3>Make a Gallery Specific Page Template</h3>
<p>Matt&#8217;s <a href="http://ma.tt/gallery/">Gallery Page</a> is itself customized. It displays the galleries in an entirely different way. There&#8217;s a big copy of the featured image, along with a few thumbnails below the description, and it even has a count of the images in each &#8220;album&#8221;. This is all done with a pretty straightforward page template.</p>
<p>So to start, make a Page Template:</p>
<pre class="brush: php; title: ; notranslate" title="">
/*
Template Name: Gallery
*/
</pre>
<p>Right at the top of the template, we&#8217;re going to add a special taxonomy query, which will get all the gallery posts (as well those in the gallery category, since we&#8217;re being backward compatible and all). So here&#8217;s the code:</p>
<pre class="brush: php; title: ; notranslate" title="">
$args = wp_parse_args($query_string);

query_posts(array(
         'tax_query' =&gt; array(
                'relation' =&gt; 'OR',
                array(
                        'taxonomy' =&gt; 'post_format',
                        'terms' =&gt; array('post-format-gallery'),
                        'field' =&gt; 'slug',
                ),
                array(
                        'taxonomy' =&gt; 'category',
                        'terms' =&gt; array('gallery'),
                        'field' =&gt; 'slug',
                ),
        ),
        'paged' =&gt; $args['paged'],
) );
</pre>
<p>First we parse the normal arguments, then we override them with our own query. The only argument we really use from the normal set is the page number, for multiple paging.</p>
<p>Our overriden query uses an advanced taxonomy query. In this case, it selects any posts in the gallery post format, or any post with a category of gallery. By passing this to query_posts, we override our main page query, and thus our main Loop will now display the gallery posts only.</p>
<p>After this, it&#8217;s just a matter of displaying what we want to display.</p>
<p>The main Loop itself is pretty straightforward. To display that featured image, we use essentially the same code as we used before, only passing it a bigger size.</p>
<p>To display the description, we just use the_content() as per usual. One thing we have to do though is to set the global $more value to zero, so that it stops at the !&#8211;more&#8211; tag, preventing it from continuing to display the whole gallery.</p>
<p>Getting the count turns out to kinda suck. There&#8217;s no good function in WordPress to do this for you easily. So, reluctantly, I resorted to an SQL query.</p>
<pre class="brush: php; title: ; notranslate" title="">
echo $wpdb-&gt;get_var( &quot;SELECT COUNT(*) FROM $wpdb-&gt;posts WHERE post_parent = '$post-&gt;ID' AND post_type = 'attachment'&quot; ) .' PHOTOS IN THIS SET';
</pre>
<p>The four thumbnails you can do using the get_children trick. However, there&#8217;s a catch. We don&#8217;t want to display the featured image as one of those four thumbnails. So, since we&#8217;ve already displayed that image (see the code above), we have the $thumb_id variable still. So we&#8217;ll use that to not get that image. Like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
$attachments = get_children( array(
	'post_parent' =&gt; get_the_ID(),
	'post_status' =&gt; 'inherit',
	'post_type' =&gt; 'attachment',
	'post_mime_type' =&gt; 'image',
	'order' =&gt; 'ASC',
	'orderby' =&gt; 'menu_order ID',
	'numberposts' =&gt; 4,
	'exclude' =&gt; $thumb_id )
);
foreach ( $attachments as $img =&gt; $attachment ) {
	echo '&lt;a href=&quot;'.get_permalink($img).'&quot;&gt;'.wp_get_attachment_image( $img, $size ).'&lt;/a&gt;';
}
</pre>
<p>By using the exclude parameter, we can get the first four images in the gallery without getting that featured image again, if it&#8217;s in those first four images.</p>
<h4>Update</h4>
<p><a href="http://andrewnacin.com/">Andrew Nacin</a> pointed out that I can combine the act of getting those four children and getting the attachment count into a single new WP_Query, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
$images = new WP_Query( array(
    'post_parent' =&gt; get_the_ID(),
    'post_status' =&gt; 'inherit',
    'post_type' =&gt; 'attachment',
    'post_mime_type' =&gt; 'image',
    'order' =&gt; 'ASC',
    'orderby' =&gt; 'menu_order ID',
    'posts_per_page' =&gt; 4,
    'post__not_in' =&gt; array($thumb_id),
    'update_post_term_cache' =&gt; false,
) );
</pre>
<p>This creates a new secondary query that I can loop through like so, to show the children:</p>
<pre class="brush: php; title: ; notranslate" title="">
foreach ($images-&gt;posts as $image) {
	echo '&lt;a href=&quot;'.get_permalink($image-&gt;ID).'&quot;&gt;'.wp_get_attachment_image( $image-&gt;ID, $size ).'&lt;/a&gt;';
}
</pre>
<p>It also has the side benefit of doing the primary counting of the images for me, via the <a href="http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_found-rows">SQL_CALC_FOUND_ROWS</a> that WordPress uses in full-blown queries. However, the count will be off by 1, since we&#8217;re excluding the featured thumbnail. Therefore, I just have to add one to it:</p>
<pre class="brush: php; title: ; notranslate" title="">
echo ($images-&gt;found_posts+1) . ' PHOTOS IN THIS SET';
</pre>
<p>That combines both of those elements into one query instead of two, and eliminates the need for the direct SQL query.</p>
<p>(Side note: I also set &#8216;update_post_term_cache&#8217; to false to prevent it from doing an extra query to get the terms for these posts into the internal memory cache. This saves us a bunch of unnecessary queries, since I&#8217;m not using the terms here anyway. Using full WP_Query objects instead of the simpler ones like get_children can take a little bit more thought and effort, but can save you time in the long run, if used wisely.)</p>
<h3>Sizes</h3>
<p>Throughout this post I&#8217;ve used $size as a generic indicator of where to put the size parameter. WordPress creates sized images by default, as we all know. These are thumbnail, medium, large, and full which is just the full sized uploaded image, unmodified.</p>
<p>But WordPress can create other sizes too, if you like. At different points throughout Matt&#8217;s gallery pages, you&#8217;ll see images displayed in all sizes. These sizes are custom, and they&#8217;re added in the functions.php file.</p>
<pre class="brush: php; title: ; notranslate" title="">
add_image_size( 'nav-thumbnail', 100, 100, true );
add_image_size( 'random-thumbnail', 200, 150, true );
add_image_size( 'gallery-thumbnail', 250, 200, false );
add_image_size( 'gallery-large', 660, 500, false );
add_image_size( 'gallery-pagethumb', 70, 70, true );
</pre>
<p>The add_image_size function takes a width, a height, and a flag to cause it to crop or not. So those tiny thumbnails on the gallery are &#8220;gallery-pagethumb&#8221; sized, and are 70&#215;70, cropped. Anywhere I need one of those sizes, I can just pass that parameter instead of $size and voila.</p>
<p>Obviously though, adding too many sizes is undesirable, because it takes time to create those sizes (they&#8217;re created on upload of the images), and it takes storage space to store them. Hopefully a future version of WordPress can work around this issue.</p>
<h3>Conclusion</h3>
<p>These are the basics of making cool galleries, without plugins, without special uploaders, and while being able to style it to match your theme. Play with it. Experiment. There&#8217;s a ton of functions in WordPress specifically for dealing with these. Take a look through wp-includes/media.php and look at some of the function names. You might be surprised.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/9g' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/attachments/" rel="tag">attachments</a>, <a href="http://ottopress.com/tag/gallery/" rel="tag">gallery</a>, <a href="http://ottopress.com/tag/image/" rel="tag">image</a>, <a href="http://ottopress.com/tag/pages/" rel="tag">pages</a>, <a href="http://ottopress.com/tag/posts/" rel="tag">posts</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/photo-gallery-primer/#comments" title="Comment on Photo Gallery Primer">55 Comments</a>									 </div>
			</div>
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/tag/wordpress-2/page/3/" >&laquo; Previous Entries</a></div>
			<div class="alignright"><a href="http://ottopress.com/tag/wordpress-2/" >Next Entries &raquo;</a></div>
		</div>
		
	
	</div>
	<div id="sidebar">
		<ul>
			
			<li id="paypal-donate" class="widget widget_wpaypal"><h2 class="widgettitle">Buy Otto a Beer</h2>
<div style="margin-top:5px;margin-bottom:5px;text-align:left;">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
		<p><input type="hidden" name="cmd" value="_xclick" />
		<input type="hidden" name="business" value="otto@ottodestruct.com" />
		<input type="hidden" name="item_name" value="Donation to Otto on WordPress" />
		<input type="hidden" name="item_number" value="0" />
		<input type="hidden" name="notify_url" value="" />
		<input type="hidden" name="no_shipping" value="1" /><input type="hidden" name="return" value="http://ottopress.com" />
		<input type="hidden" name="no_note" value="1" />
		<input type="hidden" name="tax" value="0" />
		<input type="hidden" name="bn" value="PP-DonationsBF" />
		<input type="hidden" name="on0" value="Website" />
		Currency: <br />
		<select id="currency_code" name="currency_code">
		<option value="USD">U.S. Dollars</option>
		<option value="AUD">Australian Dollars</option>
		<option value="CAD">Canadian Dollars</option>
		<option value="EUR">Euros</option>
		<option value="GBP">Pounds Sterling</option>
		<option value="JPY">Yen</option></select></p>
		<p>Amount: <br /><input type="text" name="amount" size="16" title="The amount you wish to donate" value="5.00" /></p>
		<p>Website(Optional): <br /><input type="text" size="16" title="Your website (will be displayed)" name="os0" value="" /></p><p><input class="ppimg" type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" name="submit" style="border:0;" alt="Make payments with PayPal - fast, free and secure" /></p></form></div></li>
<li id="text-7" class="widget widget_text">			<div class="textwidget">Hey, I also take Bitcoins! Send them to: </br>
<a href="bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg">
<img src="https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg" /><br />
1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg</a></div>
		</li>
<li id="text-5" class="widget widget_text"><h2 class="widgettitle">Subscribe!</h2>
			<div class="textwidget"><!-- <a href="https://plus.google.com/111166992820603637934?prsrc=3" style="cursor:pointer;display:inline-block;text-decoration:none;color:#333;font:13px/16px arial,sans-serif;"><span style="display:inline-block;font-weight:bold;vertical-align:top;margin-right:5px;margin-top:8px;">Otto on WordPress</span><span style="display:inline-block;vertical-align:top;margin-right:15px;margin-top:8px;">on</span><img src="https://ssl.gstatic.com/images/icons/gplus-32.png" alt="" style="border:0;width:32px;height:32px;"/></a>
-->
<div class="g-plus" data-href="https://plus.google.com/111166992820603637934?rel=publisher" data-width="250" data-height="131" data-theme="light"></div>
</div>
		</li>
<li id="blog_subscription-3" class="widget jetpack_subscription_widget"><h2 class="widgettitle"><label for="subscribe-field"></label></h2>

		<form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3">
			<p id="subscribe-text">Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p><p>Join 328 other subscribers</p>

			<p id="subscribe-email"><input type="text" name="email" value="Email Address" id="subscribe-field" onclick="if ( this.value == 'Email Address' ) { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = 'Email Address'; }" /></p>

			<p id="subscribe-submit">
				<input type="hidden" name="action" value="subscribe" />
				<input type="hidden" name="source" value="http://ottopress.com/tag/wordpress-2/page/2/" />
				<input type="hidden" name="sub-type" value="widget" />
				<input type="hidden" name="redirect_fragment" value="blog_subscription-3" />
								<input type="submit" value="Subscribe" name="jetpack_subscriptions_widget" />
			</p>
		</form>

		
</li>
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Email Me</h2>
			<div class="textwidget"><ul><li><span class="vcard microid-mailto+http:sha1:23e9670868f6d2b16fe1f6b3db80c8f0423a082a">
<span style="display:none;">
<span class="adr">
 <span class="locality">Memphis</span>,
 <span class="region">TN</span>
 <span class="postal-code">38103</span>
 <span class="country-name">U.S.A.</span>
</span>
<a class="url fn" href="http://ottodestruct.com">Otto</a>
<span class="uid">240cf86e-5cad-11dc-8314-0800200c9a66</span>
</span>
<a class="email" href="mailto:otto@ottodestruct.com">otto@ottodestruct.com</a></span></li></ul>
<a rel="author" href="https://plus.google.com/100201852715113506716?rel=author">
  <img src="https://ssl.gstatic.com/images/icons/gplus-16.png" width="16" height="16">
</a>
</a>
<!-- 

This rant is hidden in HTML comments. If I pointed you to it, then you probably emailed me about the fact that my email address is in plaintext directly above this comment. If you happened to run across it because you just like looking at HTML comments, well, easter egg! :)

YES, that is a bare mailto: href above. 
YES, that is my real email address. 
And YES, it's intentional.

Obfuscating your email address on the web is stupid. 

Firstly, hiding your email address doesn't prevent spam. Spammers get addresses in bulk from mailing lists and websites and other sources. Sure, some scrapers exist, but they are by far the minority of the sources for email lists.

Secondly, hiding your email address ruins the whole point of email. The purpose of publishing my email address is so that anybody, and I do mean *anybody*, can email me. Before the days of cell phones, your phone number and physical address used to be published in a big book that everybody received, for free, on a semi-annual basis. It had distinctive yellow pages in it. Your contact information is not, and never was supposed to be, private information. Treating it as such is stupid.

Thirdly, I have great spam protection. For one, I use GMail, which has frankly incredible filtering because of the volume of mail they deal with. For another, I use various sets of filters to categorize incoming mail into various categories of things. Hell, I can even run statistics on it, if I want. This is a much better solution than continually giving out fake email addresses, or using +stuff to figure out who sent what where... I'd prefer to simply let my filters deal with it instead. 

Finally, if you're one of those systems that scours the web and/or social networks for visible email addresses and then automatically emails that person to let them know that their address is visible, then by all means please just fuck off and die. You're part of the problem. On the other hand, if you're just a regular guy with good intentions, then this doesn't apply to you. :)

Just my 2 cents.

--></div>
		</li>
<li id="categories-2" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-573"><a href="http://ottopress.com/category/code/" title="View all posts filed under Code">Code</a>
</li>
	<li class="cat-item cat-item-574"><a href="http://ottopress.com/category/other/" title="View all posts filed under Other">Other</a>
</li>
	<li class="cat-item cat-item-575"><a href="http://ottopress.com/category/rants/" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://ottopress.com/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-576"><a href="http://ottopress.com/category/wordpress/" title="View all posts filed under WordPress">WordPress</a>
</li>
		</ul>
</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://ottopress.com/2014/02/'>February 2014</a></li>
	<li><a href='http://ottopress.com/2013/11/'>November 2013</a></li>
	<li><a href='http://ottopress.com/2013/10/'>October 2013</a></li>
	<li><a href='http://ottopress.com/2013/06/'>June 2013</a></li>
	<li><a href='http://ottopress.com/2013/03/'>March 2013</a></li>
	<li><a href='http://ottopress.com/2012/11/'>November 2012</a></li>
	<li><a href='http://ottopress.com/2012/09/'>September 2012</a></li>
	<li><a href='http://ottopress.com/2012/08/'>August 2012</a></li>
	<li><a href='http://ottopress.com/2012/07/'>July 2012</a></li>
	<li><a href='http://ottopress.com/2012/05/'>May 2012</a></li>
	<li><a href='http://ottopress.com/2012/02/'>February 2012</a></li>
	<li><a href='http://ottopress.com/2012/01/'>January 2012</a></li>
	<li><a href='http://ottopress.com/2011/12/'>December 2011</a></li>
	<li><a href='http://ottopress.com/2011/11/'>November 2011</a></li>
	<li><a href='http://ottopress.com/2011/10/'>October 2011</a></li>
	<li><a href='http://ottopress.com/2011/09/'>September 2011</a></li>
	<li><a href='http://ottopress.com/2011/08/'>August 2011</a></li>
	<li><a href='http://ottopress.com/2011/07/'>July 2011</a></li>
	<li><a href='http://ottopress.com/2011/06/'>June 2011</a></li>
	<li><a href='http://ottopress.com/2011/05/'>May 2011</a></li>
	<li><a href='http://ottopress.com/2011/04/'>April 2011</a></li>
	<li><a href='http://ottopress.com/2011/03/'>March 2011</a></li>
	<li><a href='http://ottopress.com/2011/02/'>February 2011</a></li>
	<li><a href='http://ottopress.com/2011/01/'>January 2011</a></li>
	<li><a href='http://ottopress.com/2010/12/'>December 2010</a></li>
	<li><a href='http://ottopress.com/2010/11/'>November 2010</a></li>
	<li><a href='http://ottopress.com/2010/10/'>October 2010</a></li>
	<li><a href='http://ottopress.com/2010/09/'>September 2010</a></li>
	<li><a href='http://ottopress.com/2010/08/'>August 2010</a></li>
	<li><a href='http://ottopress.com/2010/06/'>June 2010</a></li>
	<li><a href='http://ottopress.com/2010/05/'>May 2010</a></li>
	<li><a href='http://ottopress.com/2010/04/'>April 2010</a></li>
	<li><a href='http://ottopress.com/2010/03/'>March 2010</a></li>
	<li><a href='http://ottopress.com/2010/02/'>February 2010</a></li>
	<li><a href='http://ottopress.com/2009/11/'>November 2009</a></li>
	<li><a href='http://ottopress.com/2009/09/'>September 2009</a></li>
	<li><a href='http://ottopress.com/2008/09/'>September 2008</a></li>
		</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/">Better Know a Vulnerability: SQL Injection</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/language-packs-101-prepwork/">Language Packs 101 &#8211; Prepwork</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/slides-a-presentation-theme/">Slides: A Presentation Theme</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/">I&#8217;m not a fan of orange&#8230;</a>
						</li>
				</ul>
		</li>
<li id="text-6" class="widget widget_text"><h2 class="widgettitle">WP Core Contributions</h2>
			<div class="textwidget"><p>
<a href='http://core.trac.wordpress.org/changeset/28072'>[28072]</a> - <a href='http://core.trac.wordpress.org/ticket/19393'>#19393</a><br />
<a href='http://core.trac.wordpress.org/changeset/27522'>[27522]</a> - <a href='http://core.trac.wordpress.org/ticket/19889'>#19889</a><br />
<a href='http://core.trac.wordpress.org/changeset/27399'>[27399]</a> - <a href='http://core.trac.wordpress.org/ticket/25665'>#25665</a><br />
<a href='http://core.trac.wordpress.org/changeset/26978'>[26978]</a> - <a href='http://core.trac.wordpress.org/ticket/23149'>#23149</a><br />
<a href='http://core.trac.wordpress.org/changeset/26711'>[26711]</a> - <a href='http://core.trac.wordpress.org/ticket/21442'>#21442</a><br />
<a href='http://core.trac.wordpress.org/changeset/26072'>[26072]</a> - <a href='http://core.trac.wordpress.org/ticket/25858'>#25858</a><br />
<a href='http://core.trac.wordpress.org/changeset/22152'>[22152]</a> - <a href='http://core.trac.wordpress.org/ticket/21914'>#21914</a><br />
<a href='http://core.trac.wordpress.org/changeset/22026'>[22026]</a> - <a href='http://core.trac.wordpress.org/ticket/22002'>#22002</a><br />
<a href='http://core.trac.wordpress.org/changeset/21839'>[21839]</a> - <a href='http://core.trac.wordpress.org/ticket/16996'>#16996</a><br />
<a href='http://core.trac.wordpress.org/changeset/21802'>[21802]</a> - <a href='http://core.trac.wordpress.org/ticket/18674'>#18674</a><br />
<a href='http://core.trac.wordpress.org/changeset/21776'>[21776]</a> - <a href='http://core.trac.wordpress.org/ticket/13729'>#13729</a><br />
<a href='http://core.trac.wordpress.org/changeset/21609'>[21609]</a> - <a href='http://core.trac.wordpress.org/ticket/19324'>#19324</a><br />
<a href='http://core.trac.wordpress.org/changeset/20916'>[20916]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20784'>[20784]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20783'>[20783]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20267'>[20267]</a> - <a href='http://core.trac.wordpress.org/ticket/13774'>#13774</a><br />
<a href='http://core.trac.wordpress.org/changeset/19721'>[19721]</a> - <a href='http://core.trac.wordpress.org/ticket/19626'>#19626</a><br />
<a href='http://core.trac.wordpress.org/changeset/19003'>[19003]</a> - <a href="http://core.trac.wordpress.org/ticket/17406">#17406</a><br />
<a href='http://core.trac.wordpress.org/changeset/18741'>[18741]</a> - <a href="http://core.trac.wordpress.org/ticket/15473">#15473</a><br />
<a href='http://core.trac.wordpress.org/changeset/18602'>[18602]</a> - <a href="http://core.trac.wordpress.org/ticket/18230">#18230</a><br />
<a href='http://core.trac.wordpress.org/changeset/18541'>[18541]</a> - <a href="http://core.trac.wordpress.org/ticket/16687">#16687</a><br />
<a href='http://core.trac.wordpress.org/changeset/18205'>[18205]</a> - <a href="http://core.trac.wordpress.org/ticket/17148">#17148</a><br />
<a href='http://core.trac.wordpress.org/changeset/17254'>[17254]</a> - <a href="http://core.trac.wordpress.org/ticket/16192">#16192</a><br />
<a href='http://core.trac.wordpress.org/changeset/16555'>[16555]</a> - <a href="http://core.trac.wordpress.org/ticket/12891">#12891</a><br />
<a href='http://core.trac.wordpress.org/changeset/16284'>[16284]</a> - <a href="http://core.trac.wordpress.org/ticket/13324">#13324</a><br />
<a href='http://core.trac.wordpress.org/changeset/13420'>[13420]</a> - <a href="http://core.trac.wordpress.org/ticket/12291">#12291</a><br />
<a href='http://core.trac.wordpress.org/changeset/12581'>[12581]</a> - <a href="http://core.trac.wordpress.org/ticket/7225">#7225</a><br />
<a href='http://core.trac.wordpress.org/changeset/11738'>[11738]</a> - <a href="http://core.trac.wordpress.org/ticket/10145">#10145</a><br />
<a href='http://core.trac.wordpress.org/changeset/11329'>[11329]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10962'>[10962]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10757'>[10757]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10753'>[10753]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10252'>[10252]</a> - <a href="http://core.trac.wordpress.org/ticket/6791">#6791</a><br />
<a href='http://core.trac.wordpress.org/changeset/9276'>[9276]</a> - <a href="http://core.trac.wordpress.org/ticket/7124">#7124</a><br />
<a href='http://core.trac.wordpress.org/changeset/9209'>[9209]</a> - <a href="http://core.trac.wordpress.org/ticket/7901">#7901</a><br />
<a href='http://core.trac.wordpress.org/changeset/9207'>[9207]</a> - <a href="http://core.trac.wordpress.org/ticket/7635">#7635</a><br />
<a href='http://core.trac.wordpress.org/changeset/9139'>[9139]</a> - <a href="http://core.trac.wordpress.org/ticket/7847">#7847</a><br />
<a href='http://core.trac.wordpress.org/changeset/9089'>[9089]</a> - <a href="http://core.trac.wordpress.org/ticket/7772">#7772</a><br />
<a href='http://core.trac.wordpress.org/changeset/8968'>[8968]</a> - <a href="http://core.trac.wordpress.org/ticket/7761">#7761</a><br />
<a href='http://core.trac.wordpress.org/changeset/8285'>[8285]</a> - <a href="http://core.trac.wordpress.org/ticket/6879">#6879</a><br />
<a href='http://core.trac.wordpress.org/changeset/8208'>[8208]</a> - <a href="http://core.trac.wordpress.org/ticket/4448">#4448</a><br />
<a href='http://core.trac.wordpress.org/changeset/8132'>[8132]</a> - <a href="http://core.trac.wordpress.org/ticket/4954">#4954</a><br />
<a href='http://core.trac.wordpress.org/changeset/8131'>[8131]</a> - <a href="http://core.trac.wordpress.org/ticket/6590">#6590</a><br />
<a href='http://core.trac.wordpress.org/changeset/7869'>[7869]</a> - <a href="http://core.trac.wordpress.org/ticket/6513">#6513</a><br />
<a href='http://core.trac.wordpress.org/changeset/7647'>[7647]</a> - <a href="http://core.trac.wordpress.org/ticket/6608">#6608</a><br />
<a href='http://core.trac.wordpress.org/changeset/7461'>[7461]</a> - <a href="http://core.trac.wordpress.org/ticket/6339">#6339</a><br />
<a href='http://core.trac.wordpress.org/changeset/6873'>[6873]</a> - <a href="http://core.trac.wordpress.org/ticket/4986">#4986</a><br />
<a href='http://core.trac.wordpress.org/changeset/6760'>[6760]</a> - <a href="http://core.trac.wordpress.org/ticket/4617">#4617</a><br />
<a href='http://core.trac.wordpress.org/changeset/6616'>[6616]</a> - <a href="http://core.trac.wordpress.org/ticket/5155">#5155</a><br />
<a href='http://core.trac.wordpress.org/changeset/6439'>[6439]</a> - <a href="http://core.trac.wordpress.org/ticket/2805">#2805</a><br />
<a href='http://core.trac.wordpress.org/changeset/6091'>[6091]</a> - <a href="http://core.trac.wordpress.org/ticket/4182">#4182</a><br />
<a href='http://core.trac.wordpress.org/changeset/6086'>[6086]</a> - <a href="http://core.trac.wordpress.org/ticket/4946">#4946</a><br />
<a href='http://core.trac.wordpress.org/changeset/5986'>[5986]</a> - <a href="http://core.trac.wordpress.org/ticket/4873">#4873</a><br />
<a href='http://core.trac.wordpress.org/changeset/5982'>[5982]</a> - <a href="http://core.trac.wordpress.org/ticket/4800">#4800</a><br />
<a href='http://core.trac.wordpress.org/changeset/5958'>[5958]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5920'>[5920]</a> - <a href="http://core.trac.wordpress.org/ticket/4703">#4703</a><br />
<a href='http://core.trac.wordpress.org/changeset/5910'>[5910]</a> - <a href="http://core.trac.wordpress.org/ticket/4654">#4654</a><br />
<a href='http://core.trac.wordpress.org/changeset/5881'>[5881]</a> - <a href="http://core.trac.wordpress.org/ticket/4704">#4704</a><br />
<a href='http://core.trac.wordpress.org/changeset/5857'>[5857]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5848'>[5848]</a> - <a href="http://core.trac.wordpress.org/ticket/4499">#4499</a><br />
<a href='http://core.trac.wordpress.org/changeset/5845'>[5845]</a> - <a href="http://core.trac.wordpress.org/ticket/4547">#4547</a><br />
<a href='http://core.trac.wordpress.org/changeset/5317'>[5317]</a> - <a href="http://core.trac.wordpress.org/ticket/4169">#4169</a><br />
<a href='http://core.trac.wordpress.org/changeset/5154'>[5154]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5151'>[5151]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5104'>[5104]</a> - <a href="http://core.trac.wordpress.org/ticket/3790">#3790</a><br />
<a href='http://core.trac.wordpress.org/changeset/4964'>[4964]</a> - <a href="http://core.trac.wordpress.org/ticket/3898">#3898</a><br />
</p></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<div style="float:left;"><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
<a href="http://ottopress.com/feed/">Entries (RSS)</a> and <a href="http://ottopress.com/comments/feed/">Comments (RSS)</a>.<br />
<span about="http://ottodestruct.com/" xmlns:cc="http://creativecommons.org/ns#">
This page, by <a property="cc:attributionName" rel="cc:attributionURL" href="http://ottodestruct.com/">Otto</a>, is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License</a>.</span><br />
Powered by <a href="http://wordpress.org/" title="Powered by WordPress.">WordPress</a>.<br />
		<script type="text/javascript">
		//<![CDATA[
		var infiniteScroll = {"settings":{"id":"content","ajaxurl":"http:\/\/ottopress.com\/?infinity=scrolling","type":"scroll","wrapper":false,"wrapper_class":"infinite-wrap","footer":false,"click_handle":"1","text":"Older posts","totop":"Scroll back to top","currentday":"06.10.11","order":"DESC","scripts":[],"styles":[],"google_analytics":false,"offset":2,"history":{"host":"ottopress.com","path":"\/tag\/wordpress-2\/page\/%d\/","use_trailing_slashes":true,"parameters":""},"query_args":{"paged":2,"tag":"wordpress-2","error":"","m":"","p":0,"post_parent":"","subpost":"","subpost_id":"","attachment":"","attachment_id":0,"name":"","static":"","pagename":"","page_id":0,"second":"","minute":"","hour":"","day":0,"monthnum":0,"year":0,"w":0,"category_name":"","cat":"","tag_id":609,"author":"","author_name":"","feed":"","tb":"","comments_popup":"","meta_key":"","meta_value":"","preview":"","s":"","sentence":"","fields":"","menu_order":"","category__in":[],"category__not_in":[],"category__and":[],"post__in":[],"post__not_in":[],"tag__in":[],"tag__not_in":[],"tag__and":[],"tag_slug__in":["wordpress-2"],"tag_slug__and":[],"post_parent__in":[],"post_parent__not_in":[],"author__in":[],"author__not_in":[],"posts_per_page":7,"ignore_sticky_posts":false,"suppress_filters":false,"cache_results":true,"update_post_term_cache":true,"update_post_meta_cache":true,"post_type":"","nopaging":false,"comments_per_page":"50","no_found_rows":false,"order":"DESC"},"last_post_date":"2011-05-25 18:39:34","stats":"blog=12342457&host=ottopress.com&v=ext&j=1:3.0.2&x_pagetype=infinite-jetpack"}};
		//]]>
		</script>
		<img alt='css.php' src="http://ottopress.com/wp-content/plugins/cookies-for-comments/css.php?k=c6a73cb029f035cdaa9e9e8336d25169&amp;o=i&amp;t=343023895" width='1' height='1' />	<div style="display:none">
	</div>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushXml.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.js?ver=20140514'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en-US","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.14.2'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
<script type="text/javascript">
			jQuery.extend( infiniteScroll.settings.scripts, ["jquery-core","jquery-migrate","jquery","tiled-gallery","spin","jquery.spin","syntaxhighlighter-core","syntaxhighlighter-brush-php","syntaxhighlighter-brush-xml","the-neverending-homepage","jetpack-photon","devicepx","mediaelement","wp-mediaelement","grofiles-cards","wpgroho"] );
			jQuery.extend( infiniteScroll.settings.styles, ["yarppWidgetCss","jetpack-subscriptions","the-neverending-homepage","tiled-gallery","mediaelement","wp-mediaelement"] );
		</script>
	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.2',blog:'12342457',post:'0',tz:'-5'});
	var load_cmc = function(){linktracker_init(12342457,0,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></div></div>

<script type="text/javascript">
    window._idl = {};
    _idl.variant = "modal";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

</body>
</html>

