http://ottopress.com/tag/plugin/
HTTP/1.1 200 OK
Server: nginx/1.4.4
Date: Wed, 23 Jul 2014 01:17:13 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Pingback: http://ottopress.com/xmlrpc.php

<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>plugin &raquo; Otto on WordPress</title>

<link rel="profile" href="http://www.w3.org/1999/xhtml/vocab" />
<link rel="me" type="text/html" href="https://plus.google.com/100201852715113506716" />

<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/style.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/print.css" type="text/css" media="print" />

<link rel="pingback" href="http://ottopress.com/xmlrpc.php" />

<meta property="og:email" content="otto@ottodestruct.com" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">

<script type="text/javascript">var description = '';</script>
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="IvlRFnRHu9RIiAiOS-bo-8vU4ju4V6_b4U3M_-1jlXQ" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Feed" href="http://ottopress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Comments Feed" href="http://ottopress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; plugin Tag Feed" href="http://ottopress.com/tag/plugin/feed/" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='the-neverending-homepage-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.css?ver=20140422' type='text/css' media='all' />
<link rel='stylesheet' id='tiled-gallery-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.css?ver=2012-09-21' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.13.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery-migrate.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ottopress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ottopress.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<meta name="pinterest" content="nopin" /><link rel="microsummary" type="text/plain" href="/tag/plugin/?microsummary=1" /><link rel="shortcut icon" href="http://ottopress.com/wp-content/wp-logo-vs.png" /><style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-27538437-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>

<body class="archive tag tag-plugin tag-594 infinite-scroll neverending">
<script type="text/javascript">
if (top.location != self.location) top.location.replace(self.location);
</script>
<div id="page">
<div id="header">
	<div id="headertitle">
		<h1><a href="http://ottopress.com" title="Otto on WordPress: You have to use an Ottopress to get fresh squeezed Otto.">Otto on WordPress</a></h1>
		<p>You have to use an Ottopress to get fresh squeezed Otto.</p>
	</div> 
	<!-- Search box (If you prefer having search form as a sidebar widget, remove this block) -->
	<div class="search">
		<form method="get" id="searchform" action="http://ottopress.com/">
<input type="search" size="20" results="5" name="s" id="s" placeholder="Search..." speech="speech" x-webkit-speech="x-webkit-speech" onwebkitspeechchange="this.form.submit();" />
</form>
	</div> 
	<!-- Search ends here-->
		
</div>
<div id="navbar">
<div id="nav">
<div class="menu"><ul><li ><a href="http://ottopress.com/">Home</a></li><li class="page_item page-item-5 page_item_has_children"><a href="http://ottopress.com/wordpress-plugins/">WordPress Plugins</a><ul class='children'><li class="page_item page-item-205"><a href="http://ottopress.com/wordpress-plugins/atd-for-comments/">After The Deadline For Comments</a></li><li class="page_item page-item-21"><a href="http://ottopress.com/wordpress-plugins/atom-default-feed/">Atom Default Feed</a></li><li class="page_item page-item-965"><a href="http://ottopress.com/wordpress-plugins/dropbox-photo-sideloader/">Dropbox Photo Sideloader</a></li><li class="page_item page-item-15"><a href="http://ottopress.com/wordpress-plugins/gravatar-box/">Gravatar Box</a></li><li class="page_item page-item-32"><a href="http://ottopress.com/wordpress-plugins/php-code-widget/">PHP Code Widget</a></li><li class="page_item page-item-7"><a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a></li><li class="page_item page-item-10"><a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a></li><li class="page_item page-item-81"><a href="http://ottopress.com/wordpress-plugins/unicornify/">Unicornify</a></li></ul></li><li class="page_item page-item-374"><a href="http://ottopress.com/contact/">Contact Otto</a></li><li><a href="http://ottodestruct.com" title="Nothing to See Here">Nothing to See Here</a></li><li><a href="http://buyottoabeer.com" title="Otto on Beer">Otto on Beer</a></li></ul></div>
	</div>
</div>
<div id="wrapper">
	<div id="content">

	
			<p>Posts tagged &#8216;plugin&#8217;</p>

	 		
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/tag/plugin/page/2/" >&laquo; Previous Entries</a></div>
			<div class="alignright"></div>
		</div>

					<div id="post-957" class="post-957 post type-post status-publish format-standard hentry category-code category-wordpress tag-csrf tag-exploit tag-form tag-nonce tag-plugin tag-theme tag-vulnerability tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/" rel="bookmark" title="Permanent Link to Better Know a Vulnerability: Cross Site Request Forgery (CSRF)" itemprop="url"><span itemprop="name">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</span></a></h2>
				<div class="postmetadata">February 26, 2014, 8:11 am <!-- by <span rel="author">Otto</span> --></div>
				<div class="postentry" itemprop="description">
					<p>One of the easier to understand vulnerabilities is the CSRF. It&#8217;s also one of the most common issues we see in plugins and themes, because people rarely think about it.</p>
<p>Imagine that I have a form that takes input, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;form action=&quot;http://example.com/example.php&quot; method=&quot;GET&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;demo&quot; /&gt;
&lt;/form&gt;
</pre>
<p>Now, that&#8217;s a simple form (and missing a submit button to boot), but you get the idea. It takes a text input. Presumably, something on the other end (at /example.php) processes that input, saves it in a database, something like that. Easy.</p>
<h3>First question: Is this necessary?</h3>
<p>The main question I see asked when this concept is explained to people is &#8220;why is this necessary?&#8221;. Some people believe that since you have to be logged in to access admin screens in the first place, then you can&#8217;t get to the forms and submit them. Why have all this protection and checking for a form submission when the form is hidden behind a login screen?</p>
<p>What you need to understand is the difference between &#8220;<em>authority</em>&#8221; and &#8220;<em>intent</em>&#8220;.</p>
<h3>Authority</h3>
<p>In real world cases where we are processing that input, we generally want to limit who is allowed to submit that form in some way. A plugin will want to only allow admins to change settings. A theme will only want to allow site owners to adjust the display of the site. Things of that nature. For these cases, we use methods of authentication.</p>
<p>There&#8217;s several ways to do this, we can check the current_user information. WordPress has capability checks for users to know what they are and are not allowed to do. When we check these, we&#8217;re verifying <strong>authority</strong>. Making sure that the user is allowed to do these things.</p>
<p>But something else that we need to check which most people don&#8217;t think about is <strong>intent</strong>. Did the user actually intend to submit that form, or did their browser submit it for them automatically, perhaps without their knowledge?</p>
<p>Examine that form again, and consider what would happen if you were to visit a webpage, anywhere on the internet, that contains this:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;img src=&quot;http://example.com/example.php?demo=pwned&quot; /&gt;
</pre>
<p>Now, you might be thinking that this is a rather contrived example, and you&#8217;d be right on that score, but it serves to demonstrate the point. Your browser loads this URL and that is the equivalent action to submitting that form, with &#8220;pwned&#8221; as the text in question.</p>
<p>Here&#8217;s the kicker, all those authority checks do us no good in preventing this. You actually do have the authority to submit that form, and your browser, using your authority, just submitted it for you. Pwned, indeed.</p>
<p>(For those of you thinking &#8220;just use POST forms&#8221;, consider that javascript can submit POST forms. So that&#8217;s really no help.)</p>
<h3>Intent</h3>
<p>What we need is to verify intent. We need to know that the user submitted that form, and not just the browser doing it for them automatically.</p>
<p>WordPress used to do this (a looong time ago) using the referer. For those who don&#8217;t know, referer is a URL passed by your browser to indicate where a user came from. So one could check that the referer says that the form was submitted from the form&#8217;s page and not from some other page on the internet. The problem is that referer is not reliable. Some browsers have the ability for script to fake the referer. Firewalls and proxies often strip the referer out, for privacy concerns. And so forth.</p>
<h3>Nonces</h3>
<p>WordPress now does this using nonces. A nonce is a &#8220;number used once&#8221; in its purest form. Basically, it&#8217;s a one-time password. When we generate the form, we generate a number. When the form is submitted, we check the number. If the number is wrong or missing, we don&#8217;t allow the form to be submitted. A script cannot know the number in advance. Other sites cannot guess the number.</p>
<p>Now, technically, WordPress doesn&#8217;t use real nonces, because they&#8217;re not &#8220;used once&#8221;. Instead, WordPress nonces revolve on a 12 hour rotating system (where 24 hours are accepted). For any given 12 hour period, the nonce number for a given action will be the same. But it&#8217;s close enough to a real nonce to eliminate the issue, but notably it&#8217;s <em>only</em> for the issue of verifying intent. Don&#8217;t try to use WordPress nonces for anything else. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>So, when we generate a form, we generate a nonce. This nonce is based on five things: site, user, time, the action being performed, and the object that the action is being performed on. Changing any of these gives us a different nonce.</p>
<p>Let&#8217;s say I want to delete a post. To do that, I need to know the nonce for deleting that specific post, as me, on my site, within the last 24 hours. Without that nonce, I cannot perform the action. More importantly, in order for somebody to &#8220;trick&#8221; my browser into doing it for me, they need to get that specific nonce and get my browser to load it within 24 hours. Tough to do. And even if they pull it off, they only have been able to perform that very specific action, the nonce obtained is useless for any other purpose. They don&#8217;t get any form of full control via this manner. They can&#8217;t make my browser do anything on mysite that they don&#8217;t have the nonce for.</p>
<h3>Using nonces</h3>
<p>So, let&#8217;s get down to brass tacks. Generating a nonce in WordPress is easy and can be done in many different ways depending on your particular needs. You might want to protect a simple link, or you might want to protect a form, or you might even need to protect a javascript ajax call.</p>
<p>Protecting a link can be done with wp_nonce_url(). It takes a URL and an action and adds a valid nonce onto that URL. It works like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$nonced_url = wp_nonce_url( $url, 'action_'.$object_id );
</pre>
<p>Here, we&#8217;re taking some URL, and adding a nonce onto it for a specific action on some specific object. This is important, actions and objects need to both be specified if there is some object being referred to. An example might be a link to delete a specific post. Such code would look like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_nonce_url( $url, 'trash-post_'.$post-&gt;ID )
</pre>
<p>The action is &#8220;trash-post&#8221; and the post being trashed has its ID number appended to that action. Thus, the nonce will let you trash that post and <em>only</em> that post.</p>
<p>On the other hand, maybe we have a form that we need to protect instead. Inside that form, we can add something like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_nonce_field( 'delete-comment_'.$comment_id );
</pre>
<p>This is the nonce for deleting a comment. It outputs a couple of form fields, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;input type=&quot;hidden&quot; id=&quot;_wpnonce&quot; name=&quot;_wpnonce&quot; value=&quot;1234567890&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;_wp_http_referer&quot; value=&quot;/wp-admin/edit-comments.php&quot; /&gt;
</pre>
<p>The value for the nonce will be specific to deleting that comment, on that site, by that user.</p>
<p>Sometimes we just need to generate the nonce directly, in no specific format. One case might be for an AJAX type call, where the data is being submitted by jQuery. In such a case, you can use the wp_create_nonce function to get just that nonce value, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_create_nonce( 'action_'.$object_id );
</pre>
<p>For AJAX requests, you&#8217;ll want to include that nonce value in the submitted data with a name of &#8220;_ajax_nonce&#8221;. Why that particular name? Because it&#8217;s what WordPress checks when verifying the nonce. Speaking of verification:</p>
<h3>Verifying nonces</h3>
<p>Generating these numbers is no good if you don&#8217;t check them as well. Fortunately, WordPress makes this easy. There&#8217;s two functions to verify incoming nonces.</p>
<pre class="brush: php; title: ; notranslate" title="">
check_admin_referer( 'action_'.$object_id );
</pre>
<p>The name of the function refers back to the time before nonces, when this function call was checking the referer value from the browser. Nowadays, it checks nonces instead. If the _wpnonce sent back in the form does not match the action and ID here, then this function stops further processing. This is the cause of the &#8220;Are you sure you want to do this?&#8221; screen that is sometimes reported by users. To avoid getting this screen, the nonce being checked has to match.</p>
<p>An alternative to checking forms or links is checking ajax requests, which is why we have this function:</p>
<pre class="brush: php; title: ; notranslate" title="">
check_ajax_referer( 'action_'.$object_id );
</pre>
<p>This performs the same basic check, but if it fails, it returns a simple &#8220;-1&#8243; response and then halts processing. Your AJAX javascript code can recognise that response and take appropriate action based on it.</p>
<p>In either case, if the nonce fails, the script exits. No action is taken. The form is not processed, the post not deleted. That&#8217;s the sort of check you need to prevent CSRF attacks.</p>
<h3>Bottom Line</h3>
<p>If you have a plugin or a theme or any type of code that &#8220;does something&#8221; in WordPress, then you need to protect that action with a nonce. If you&#8217;re not protecting it with a nonce, then it&#8217;s possible for somebody else to trick your browser into performing that action on your behalf.</p>
<p><span style="line-height: 1.5em;">Also, note that it&#8217;s not enough to just name the action. You generally are taking action on some specific &#8220;thing&#8221;, and the ID of that thing needs to be included in your nonce as well. The more specific the action, the better.</span></p>
<p>Any form, any action, no matter how much &#8220;authentication&#8221; you have on checking it, can be exploited, because you&#8217;re not really authenticating the &#8220;user&#8221;, you&#8217;re authenticating that it&#8217;s coming from &#8220;the user&#8217;s browser&#8221;. You need to have something else that changes regularly, so that you can verify that the user did indeed load that particular form and submit it relatively recently, and thus probably intended to perform that action.</p>
<p>Nonces are easy to implement. So do it already. We have enough plugins not doing it that this clearly needs to be said. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/eo' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/csrf/" rel="tag">csrf</a>, <a href="http://ottopress.com/tag/exploit/" rel="tag">exploit</a>, <a href="http://ottopress.com/tag/form/" rel="tag">form</a>, <a href="http://ottopress.com/tag/nonce/" rel="tag">nonce</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/vulnerability/" rel="tag">vulnerability</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/#comments" title="Comment on Better Know a Vulnerability: Cross Site Request Forgery (CSRF)">7 Comments</a>									 </div>
			</div>			<div id="post-763" class="post-763 post type-post status-publish format-standard hentry category-code category-wordpress tag-code-2 tag-demo tag-dependency tag-example tag-plugin tag-theme" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/themeplugin-dependencies/" rel="bookmark" title="Permanent Link to Theme/Plugin Dependencies" itemprop="url"><span itemprop="name">Theme/Plugin Dependencies</span></a></h2>
				<div class="postmetadata">February 6, 2012, 4:05 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>In trying to figure out what to talk about at WordCamp Atlanta, I remembered a question put to me in WordCamp Birmingham. The question was how can a theme developer easily make a plugin-dependency in their theme? </p>
<p>I wrote some code to do this sort of thing, just as an example/test/demonstration, but then after looking over the schedule, I found that <a href="http://2012.atlanta.wordcamp.org/session/got-awesome-theme-functionality-it-probably-needs-a-plugin/">Thomas Griffin had beat me to it</a>. After looking over his slides and having him walk me through his code, I realized that his solution was much more fully featured than mine, so I&#8217;m glad I didn&#8217;t present anything on this topic. <em>(I ended up just doing an answer session where I tried to answer any question put to me, and frankly that was much more fun than having slides, so I&#8217;m probably just going to do that from now on.)</em></p>
<p>You can find his cool library here, BTW: <a href="http://tgmpluginactivation.com/">http://tgmpluginactivation.com/</a></p>
<p>However, his solution is highly complex. The class he came up with is well done and fully-featured. He has capabilities for making notifications in the header space on the admin section, lightbox popups, bulk installs, forced activation, custom skinning, etc. It&#8217;s a big thing. While that&#8217;s great for a lot of people in terms of having code you can just drop-in and use, I thought that it doesn&#8217;t do much to teach how one can DIY it.</p>
<p>See, the code I wrote was tiny. It basically just provides some minor functionality to show a theme author how to detect installed plugins, how to detect when they&#8217;re active, how to build install and activate links, etc. It doesn&#8217;t do any pretty stuff. No custom skinning. No lightbox popups. All these things are possible, but if somebody hands you a hunk of library code to do them, then you know how to use that library, not how it works. I dislike using libraries for this reason.</p>
<p>So here&#8217;s the small class I wrote to do the same sort of thing, but in a very bare-bones style.</p>
<pre class="brush: php; title: ; notranslate" title="">
/* 

Simple class to let themes add dependencies on plugins in ways they might find useful

Example usage:

	$test = new Theme_Plugin_Dependency( 'simple-facebook-connect', 'http://ottopress.com/wordpress-plugins/simple-facebook-connect/' );
	if ( $test-&gt;check_active() ) 
		echo 'SFC is installed and activated!';
	else if ( $test-&gt;check() ) 
		echo 'SFC is installed, but not activated. &lt;a href=&quot;'.$test-&gt;activate_link().'&quot;&gt;Click here to activate the plugin.&lt;/a&gt;';
	else if ( $install_link = $test-&gt;install_link() )
		echo 'SFC is not installed. &lt;a href=&quot;'.$install_link.'&quot;&gt;Click here to install the plugin.&lt;/a&gt;';
	else 
		echo 'SFC is not installed and could not be found in the Plugin Directory. Please install this plugin manually.';

*/
if (!class_exists('Theme_Plugin_Dependency')) {
	class Theme_Plugin_Dependency {
		// input information from the theme
		var $slug;
		var $uri;

		// installed plugins and uris of them
		private $plugins; // holds the list of plugins and their info
		private $uris; // holds just the URIs for quick and easy searching

		// both slug and PluginURI are required for checking things
		function __construct( $slug, $uri ) {
			$this-&gt;slug = $slug;
			$this-&gt;uri = $uri;
			if ( empty( $this-&gt;plugins ) ) 
				$this-&gt;plugins = get_plugins();
			if ( empty( $this-&gt;uris ) ) 
				$this-&gt;uris = wp_list_pluck($this-&gt;plugins, 'PluginURI');
		}

		// return true if installed, false if not
		function check() {
			return in_array($this-&gt;uri, $this-&gt;uris);
		}

		// return true if installed and activated, false if not
		function check_active() {
			$plugin_file = $this-&gt;get_plugin_file();
			if ($plugin_file) return is_plugin_active($plugin_file);
			return false;
		}

		// gives a link to activate the plugin
		function activate_link() {
			$plugin_file = $this-&gt;get_plugin_file();
			if ($plugin_file) return wp_nonce_url(self_admin_url('plugins.php?action=activate&amp;plugin='.$plugin_file), 'activate-plugin_'.$plugin_file);
			return false;
		}

		// return a nonced installation link for the plugin. checks wordpress.org to make sure it's there first.
		function install_link() {
			include_once ABSPATH . 'wp-admin/includes/plugin-install.php';

			$info = plugins_api('plugin_information', array('slug' =&gt; $this-&gt;slug ));

			if ( is_wp_error( $info ) ) 
				return false; // plugin not available from wordpress.org

			return wp_nonce_url(self_admin_url('update.php?action=install-plugin&amp;plugin=' . $this-&gt;slug), 'install-plugin_' . $this-&gt;slug);
		}

		// return array key of plugin if installed, false if not, private because this isn't needed for themes, generally
		private function get_plugin_file() {
			return array_search($this-&gt;uri, $this-&gt;uris);
		}
	}
}
</pre>
<p>Obviously, for theme authors wanting to do something, they&#8217;re going to want to make much prettier means of displaying things and installing things. Thus, this code is meant as an example, to show the basics of how to detect such things.</p>
<p>So, use it directly if you like (it works), but more importantly, if you want to put plugin dependancies in your theme, then I suggest reading it and figuring out how it works instead. Then you can see how plugins can be detected and how to build simple install and activation links.</p>
<p>(BTW, note that I used the slug and the PluginURI for a reason. Plugins should be using a unique URL for the plugin in their code, and that URL is very likely to be the most unique thing about the plugin, and therefore the best way to check for a plugin already being there or not. Slugs can be duplicated by accident or design, but URLs are generally going to be unique and specific to a particular plugin.)</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bc' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/code-2/" rel="tag">code</a>, <a href="http://ottopress.com/tag/demo/" rel="tag">demo</a>, <a href="http://ottopress.com/tag/dependency/" rel="tag">dependency</a>, <a href="http://ottopress.com/tag/example/" rel="tag">example</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/themeplugin-dependencies/#comments" title="Comment on Theme/Plugin Dependencies">31 Comments</a>									 </div>
			</div>			<div id="post-756" class="post-756 post type-post status-publish format-standard hentry category-code category-wordpress tag-autocomplete tag-comment tag-form tag-google tag-plugin tag-snippet tag-x-autocompletetype" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/comment-form-autocomplete-snippet/" rel="bookmark" title="Permanent Link to Comment Form Autocomplete Snippet" itemprop="url"><span itemprop="name">Comment Form Autocomplete Snippet</span></a></h2>
				<div class="postmetadata">January 25, 2012, 3:26 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Google <a href="http://googlewebmastercentral.blogspot.com/2012/01/making-form-filling-faster-easier-and.html">came out with</a> an <a href="http://wiki.whatwg.org/wiki/Autocompletetype">experimental specification</a> for websites to provide &#8220;hints&#8221; on forms, to allow things like autocomplete to work better and be more standardized. Seems useful.</p>
<p>Here&#8217;s a quick plugin snippet you can use to make your comments form use this specification. Only Chrome 15 and up is using this at the moment, but in the long run I think most browsers will be implementing something similar to this, since filling out forms is just one of those endless pieces of drudgery that we could all stand to do away with.</p>
<p>Note that your theme will need to be using the comment_form() function call for this to work, otherwise you&#8217;ll just have to edit your comment form in the theme manually.</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php
/*
Plugin Name: Add X-Autocomplete Fields to Comment Form
*/
add_filter('comment_form_default_fields','add_x_autocompletetype');
function add_x_autocompletetype($fields) {
	$fields['author'] = str_replace('&lt;input', '&lt;input x-autocompletetype=&quot;name-full&quot;', $fields['author']);
	$fields['email'] = str_replace('&lt;input', '&lt;input x-autocompletetype=&quot;email&quot;', $fields['email']);
	return $fields;
}
</pre>
<p>Simple little bit of code, really. Should work with any theme using the normal comment_form() function call.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ba' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/autocomplete/" rel="tag">autocomplete</a>, <a href="http://ottopress.com/tag/comment/" rel="tag">comment</a>, <a href="http://ottopress.com/tag/form/" rel="tag">form</a>, <a href="http://ottopress.com/tag/google/" rel="tag">google</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/snippet/" rel="tag">snippet</a>, <a href="http://ottopress.com/tag/x-autocompletetype/" rel="tag">x-autocompletetype</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/comment-form-autocomplete-snippet/#comments" title="Comment on Comment Form Autocomplete Snippet">2 Comments</a>									 </div>
			</div>			<div id="post-701" class="post-701 post type-post status-publish format-standard hentry category-other category-wordpress tag-plugin tag-snippets tag-themes tag-upgrades tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/creating-a-site-specific-snippets-plugin/" rel="bookmark" title="Permanent Link to Creating a Site-Specific Snippets Plugin" itemprop="url"><span itemprop="name">Creating a Site-Specific Snippets Plugin</span></a></h2>
				<div class="postmetadata">October 16, 2011, 5:43 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img class="alignright size-full wp-image-702" title="phpcode" src="http://i2.wp.com/ottopress.com/files/2011/10/phpcode.png?resize=200%2C100" alt="" data-recalc-dims="1" /></p>
<p>If you read &#8220;how-to&#8221; stuff for WordPress sites around the web, then you frequently run across what many people like to call &#8220;snippets&#8221;. Short bits of code or functions to do various things. I myself post snippets frequently, usually made up on the fly to solve somebody&#8217;s specific problem.</p>
<p>One question I get a fair amount is &#8220;where do I add this code?&#8221;</p>
<p>The usual answer to this for a lot of people is &#8220;in the theme&#8217;s functions.php file&#8221;. This is a quick solution, but it is often a problematic one. </p>
<p>The reason this has become the more or less go-to place to add these snippets is because it&#8217;s complicated to explain to a newbie how to make a plugin and activate it, or to point out the problems with modifying core code, or plugin code. Saying to look for a specific file in their theme, on the other hand, is quick and easy, and until recently theme upgrades have been fairly rare.</p>
<p>However, as themes get upgrades, it becomes more and more incorrect to tell people to modify them directly. And telling people how to create child themes is complex, even if it&#8217;s easy to do.</p>
<p>So I&#8217;d like to start a new trend, and recommend that people start making Site-Specific Plugins. Most people who run WP sites on a serious level do this in some way already, but if you make it sorta-standard practice, then it&#8217;ll make things simpler all around.</p>
<h3>How to create a Site-Specific Plugin</h3>
<p>1. Create a new directory in the plugins directory. Name it after the site in some fashion. For example, /wp-content/plugins/example.com or something like that.</p>
<p>2. Create a new php file in that directory. Name is dealer&#8217;s choice.</p>
<p>3. Put this in the file:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php
/*
Plugin Name: Site Plugin for example.com
Description: Site specific code changes for example.com
*/
</pre>
<p>4. Finally, go activate your new blank plugin on the site.</p>
<p>Now you have a simple and specific place to add snippets. It will survive upgrades of any sort, and you can edit it to add new code on an as needed basis. What&#8217;s more, it&#8217;s kinda sorta break-proof. If the user uses the built-in plugin editor to edit it, and they add code that breaks the site, then the editor detects that on saving the code and deactivates the plugin, preventing the &#8220;white screen of death&#8221; for their site.</p>
<p>This is a much better way to use &#8220;snippets&#8221; than the theme&#8217;s functions.php file, and we should really use it more often in our replies to users.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ar' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/snippets/" rel="tag">snippets</a>, <a href="http://ottopress.com/tag/themes/" rel="tag">themes</a>, <a href="http://ottopress.com/tag/upgrades/" rel="tag">upgrades</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/creating-a-site-specific-snippets-plugin/#comments" title="Comment on Creating a Site-Specific Snippets Plugin">25 Comments</a>									 </div>
			</div>			<div id="post-663" class="post-663 post type-post status-publish format-standard hentry category-code category-other tag-filter tag-gd tag-greyscale tag-image tag-imagefx tag-manipulation tag-photos tag-php tag-plugin tag-sepia tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/customizing-wordpress-images-with-a-plugin-imagefx/" rel="bookmark" title="Permanent Link to Customizing WordPress Images with a Plugin: ImageFX" itemprop="url"><span itemprop="name">Customizing WordPress Images with a Plugin: ImageFX</span></a></h2>
				<div class="postmetadata">October 4, 2011, 8:12 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>My post about how to <a href="http://ottopress.com/2011/customizing-wordpress-images/">customize WordPress images</a> with tricks like greyscale and such got me lots of feedback, so I figured I might as well turn it into a plugin.</p>
<p>The <a href="http://wordpress.org/extend/plugins/imagefx/">ImageFX plugin</a> allows you to customize the image sizes from WordPress or custom ones for your theme, by applying filters to them.</p>
<p><img class="alignright size-full wp-image-668" title="imagefx" src="http://i0.wp.com/ottopress.com/files/2011/10/imagefx.png?resize=479%2C238" alt="" data-recalc-dims="1" /></p>
<p>The way it works is basically identical to my original post on the topic, only it allows the filters to be defined on a per-image-size level. It also allows the addition of a &#8220;slug&#8221; to be appended to the image filename, which is useful for cases where you want to have two images at the same size, but with different filters.</p>
<p>Since it was easy to do, I went ahead and created several other simple image filters that you can use for your images:</p>
<ul>
<li>Greyscale (black and white)</li>
<li>Sepia tone (old-timey!)</li>
<li>Colorize with red, yellow, green, blue, or purple</li>
<li>Photonegative</li>
<li>Emboss</li>
<li>Brighten</li>
<li>Greyscale except red, green, or blue (classy!)</li>
</ul>
<p>Here&#8217;s some examples. This a pic of me, Nacin, Rose, and Matt at WordCamp San Francisco. I ran it through the sepia, blue colorize, and grey-except-red filters.</p>
<p><a href="http://i0.wp.com/ottopress.com/files/2011/10/orig.jpg"><img class="alignleft size-thumbnail wp-image-664" title="orig" src="http://i2.wp.com/ottopress.com/files/2011/10/orig.jpg?resize=200%2C133" alt="" data-recalc-dims="1" /></a><a href="http://i0.wp.com/ottopress.com/files/2011/10/sepia.jpg"><img class="alignleft size-thumbnail wp-image-665" title="sepia" src="http://i1.wp.com/ottopress.com/files/2011/10/sepia.jpg?resize=200%2C133" alt="" data-recalc-dims="1" /></a><a href="http://i2.wp.com/ottopress.com/files/2011/10/blue.jpg"><img class="alignleft size-thumbnail wp-image-666" title="blue" src="http://i0.wp.com/ottopress.com/files/2011/10/blue.jpg?resize=200%2C133" alt="" data-recalc-dims="1" /></a><a href="http://i2.wp.com/ottopress.com/files/2011/10/bw-red.jpg"><img class="alignleft size-thumbnail wp-image-667" title="bw-red" src="http://i1.wp.com/ottopress.com/files/2011/10/bw-red.jpg?resize=200%2C133" alt="" data-recalc-dims="1" /></a></p>
<p><br style="clear: left;" /><br />
These are some of the default filters included, but since I could, I went ahead and made it easily expandable too. All you have to do to define a filter is to create a function to do the image filtering you want, then call the imagefx_register_filter() function to add it.</p>
<p>To implement your own custom filter, you can do it like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
imagefx_register_filter('custom-name','my_custom_filter');
function my_custom_filter(&amp;$image) {
 // modify the $image here as you see fit
}
</pre>
<p>Note that the $image is passed by reference, so you don&#8217;t have to return it. This is because the $image resource takes up a lot of memory, so to save on memory usage, you are manipulating it in place, sort of thing.</p>
<p>You can use any of the <a href="http://www.php.net/manual/en/ref.image.php">image functions in PHP</a> to change the image however you like. The filters I&#8217;ve implemented are mostly pretty simple. You can see them all in the filters.php file, in the plugin.</p>
<p>Caveats: The plugin will only filter JPG images, to avoid the overhead of recompressing PNGs and to avoid breaking animated GIF files. Also note that I haven&#8217;t tested these filters extensively. They&#8217;re only a starting point, sort of thing. I spent all of about 20 minutes writing them, so don&#8217;t expect miracles. <img src="http://i1.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>You can download version 0.1 of the plugin from the WordPress plugin directory: <a href="http://wordpress.org/extend/plugins/imagefx/">http://wordpress.org/extend/plugins/imagefx/</a></p>
<p>Enjoy!</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/am' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/filter/" rel="tag">filter</a>, <a href="http://ottopress.com/tag/gd/" rel="tag">gd</a>, <a href="http://ottopress.com/tag/greyscale/" rel="tag">greyscale</a>, <a href="http://ottopress.com/tag/image/" rel="tag">image</a>, <a href="http://ottopress.com/tag/imagefx/" rel="tag">imagefx</a>, <a href="http://ottopress.com/tag/manipulation/" rel="tag">manipulation</a>, <a href="http://ottopress.com/tag/photos/" rel="tag">photos</a>, <a href="http://ottopress.com/tag/php/" rel="tag">PHP</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/sepia/" rel="tag">sepia</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/customizing-wordpress-images-with-a-plugin-imagefx/#comments" title="Comment on Customizing WordPress Images with a Plugin: ImageFX">30 Comments</a>									 </div>
			</div>			<div id="post-575" class="post-575 post type-post status-publish format-standard hentry category-other tag-1-0 tag-connect tag-facebook tag-plugin tag-sfc tag-simple-facebook-connect" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/sfc-1-0-a-quick-walkthrough/" rel="bookmark" title="Permanent Link to SFC 1.0: A quick walkthrough" itemprop="url"><span itemprop="name">SFC 1.0: A quick walkthrough</span></a></h2>
				<div class="postmetadata">August 24, 2011, 10:53 am <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Facebook recently made a breaking change to the developer process, which makes it impossible for new applications to get the correct API keys. Since this essentially broke all previous versions of SFC, I went ahead and pushed the beta version public. It&#8217;s still unfinished, but Facebook didn&#8217;t really give me a lot of choice.</p>
<p>So, this is a quick walkthrough of some of the new features of SFC 1.0.</p>
<h3>Upgrade Process</h3>
<p>The upgrade process is slightly more involved for this one. It is recommended that you deactivate the old SFC plugins before upgrading. Why? Well, if you don&#8217;t, you&#8217;ll get a bunch of errors when visiting the Plugins screen later, saying that all the old SFC plugins either don&#8217;t exist or have an invalid header. These errors are normal, because of the next feature:</p>
<div id="attachment_577" style="width: 414px" class="wp-caption alignnone"><a href="http://i1.wp.com/ottopress.com/files/2011/06/sfc-plugins-screen.png"><img class="size-full wp-image-577" title="sfc-plugins-screen" src="http://i2.wp.com/ottopress.com/files/2011/06/sfc-plugins-screen.png?resize=404%2C169" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">One plugin only</p></div>
<h3>No more sub-plugins</h3>
<p>Simple Facebook Connect is now a single plugin, with modular features. If you examine the plugins screen, you&#8217;ll find only one entry: Simple Facebook Connect.</p>
<p>The many-plugins-in-one was a useful experiment, IMO, and I still think it&#8217;s a better way to do things. But many people find it confusing, and some have disagreed with the notion. A lack of useful core support for plugin dependencies and user feedback convinced me to switch it up. So now, SFC is one plugin. But it&#8217;s still modular!</p>
<div id="attachment_576" style="width: 610px" class="wp-caption alignnone"><a href="http://i0.wp.com/ottopress.com/files/2011/06/sfc-module-selection.png"><img class="size-medium wp-image-576" title="sfc-module-selection" src="http://i1.wp.com/ottopress.com/files/2011/06/sfc-module-selection.png?resize=600%2C279" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Sub-module selections</p></div>
<p>As you can see in the image, you can still turn on and off pieces of the plugin. Why have a piece running and consuming valuable resources if you&#8217;re not using it? Turning a module off completely disables it in the code. And the core of SFC itself is still written modularly, for maximum performance (since integrating Facebook itself is such a drag on performance for a site to begin with).</p>
<h3>Support for new Facebook code</h3>
<p>Over a year ago, Facebook stopped supporting the original Facebook Connect libraries. This was a major problem for sites, however the old code still worked. So as time went on, and the old Connect libraries started to degrade and become less and less useful, SFC was rewritten from the ground up to use all the newer supported libraries. Facebook&#8217;s JS SDK is used. FB&#8217;s Graph API is used. The old Facebook REST Platform code is completely gone, as are the older incompatible Facebook Connect libraries. OpenGraph meta tags (including embed info for images and video) are inserted into the entire site, completely automatically, allowing Facebook to see the content of your site and act accordingly.</p>
<p>Many of the plugins themselves have been rewritten fairly extensively as well, but with this comes some removal of older code.</p>
<div id="attachment_580" style="width: 610px" class="wp-caption alignnone"><a href="http://i0.wp.com/ottopress.com/files/2011/06/sfc-share-button.png"><img class="size-medium wp-image-580" title="sfc-share-button" src="http://i1.wp.com/ottopress.com/files/2011/06/sfc-share-button.png?resize=600%2C267" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Faux Share button settings</p></div>
<p>The Share button is gone. It was previously implemented using the older Connect libraries, but with the newer libraries from Facebook, it&#8217;s been completely removed. There was just no good way to retain it, Facebook has simply dropped any and all support for it. So, in it&#8217;s place (because it was so handy) is a modified Like button, which can still look sorta like the old Share button. The SFC module is still named Share, for ease of transition. The Like button itself is still around too, so you can use both Like and Share to get two Like buttons on the same post, perhaps for different placement.</p>
<p>The Bookmark widget is gone. It simply isn&#8217;t supported anymore, and didn&#8217;t work anyway.</p>
<p>The Find on Facebook widget is gone. This didn&#8217;t do really anything special to begin with, other than place the Find Us image into a widget, with a link to the Facebook Page. The image it once used is still included in the plugin, for people that want to do this themselves via a text widget.</p>
<p>The Connect widget is gone, but may make a return in the next version, as soon as some bugs are sorted out.</p>
<p>The Upcoming Events widget is gone. It rarely worked properly to begin with, and the newer XFBML libraries doesn&#8217;t have support for it anymore. A alternate approach to this may make it back into the next version.</p>
<p>All the remaining widgets have been combined into a single module for use on the widgets screen. In addition, most of them still have a way to access them directly, such as from a function call in a theme.</p>
<div id="attachment_578" style="width: 610px" class="wp-caption alignnone"><a href="http://i1.wp.com/ottopress.com/files/2011/06/sfc-publish-settings.png"><img class="size-medium wp-image-578" title="sfc-publish-settings" src="http://i2.wp.com/ottopress.com/files/2011/06/sfc-publish-settings.png?resize=600%2C339" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Publisher settings</p></div>
<p>The Publisher has been simplified greatly. For one, auto-publishing now works even for Applications! The confusing permissions dialogs have been reduced to one. Colored indicators have been added, showing when the plugin has the necessary &#8220;tokens&#8221; from Facebook in order to be able to publish properly. The manual publishing functionality is still on the edit post screens too. And for those people using the auto-publish, a new system for pulling Facebook comments on their published posts back into the blog has been implemented.</p>
<p>For those who wanted it, Custom Post Type support has been added to the publisher as well. Any CPT marked as &#8220;public&#8221; gets shared like everything else.</p>
<div id="attachment_579" style="width: 281px" class="wp-caption alignnone"><a href="http://i0.wp.com/ottopress.com/files/2011/06/sfc-register-screen.png"><img class="size-medium wp-image-579" title="sfc-register-screen" src="http://i2.wp.com/ottopress.com/files/2011/06/sfc-register-screen.png?resize=271%2C600" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Register screen</p></div>
<p>The Register system has been completely rewritten to take advantage of Facebook&#8217;s new register plugin functionality. It can handle standalone registrations, or registrations using Facebook information. It even adds a Facebook created captcha to prevent spam registrations.</p>
<p>Login has been improved. One of the most common complaints was &#8220;What does &#8216;User not recognized&#8217; mean?&#8221; This should be severely reduced now, since the Login module will auto-detect existing users and automatically connect their local WP accounts with their FB accounts, when they try to login. This follows Facebook&#8217;s own <a href="http://developers.facebook.com/docs/user_registration/flows/">Registration Flow Models</a> for connecting users to sites.</p>
<p>The Comment system has been improved. The share-after-comment system now happens in the background, no extra popups for users to have to click on. The whole system is now using the Graph API, so no more strange javascript errors causing weirdness. Although there is still some javascript to display the user their picture and info after logging in, so it still has that same look and feel.</p>
<p>There&#8217;s a lot more too. I&#8217;ll be updating this post with new stuff soon!</p>
<p>&nbsp;</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/aj' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/1-0/" rel="tag">1.0</a>, <a href="http://ottopress.com/tag/connect/" rel="tag">connect</a>, <a href="http://ottopress.com/tag/facebook/" rel="tag">facebook</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/sfc/" rel="tag">sfc</a>, <a href="http://ottopress.com/tag/simple-facebook-connect/" rel="tag">simple-facebook-connect</a><br />					Category: <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/sfc-1-0-a-quick-walkthrough/#comments" title="Comment on SFC 1.0: A quick walkthrough">79 Comments</a>									 </div>
			</div>			<div id="post-608" class="post-608 post type-post status-publish format-standard hentry category-other tag-beta tag-captcha tag-facebook tag-login tag-plugin tag-register tag-sfc tag-simple-facebook-connect tag-trunk tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/sfc-1-0-login-and-registration/" rel="bookmark" title="Permanent Link to SFC 1.0 &#8211; Login and Registration" itemprop="url"><span itemprop="name">SFC 1.0 &#8211; Login and Registration</span></a></h2>
				<div class="postmetadata">August 22, 2011, 6:33 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Another new thing in SFC 1.0 is the new Login and Registration mechanism. The login mechanism in the older SFC worked, but it was slightly buggy and didn&#8217;t work very well. The new mechanism works quite well indeed.</p>
<div id="attachment_610" style="width: 610px" class="wp-caption alignnone"><a href="http://i0.wp.com/ottopress.com/files/2011/07/login.png"><img class="size-medium wp-image-610" title="login" src="http://i1.wp.com/ottopress.com/files/2011/07/login.png?resize=600%2C278" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Login screen with Facebook popup</p></div>
<p>For starters, it will auto-connect existing accounts to Facebook, based on matching email addresses. Just Login with your FB credentials, and if you&#8217;re using the same email in both sites, then it auto logs you in based on that. Your account gets automatically connected to your Facebook Profile, and this appears in the &#8220;Howdy&#8221; dropdown as well as on your Profile.</p>
<div id="attachment_609" style="width: 119px" class="wp-caption alignnone"><a href="http://i2.wp.com/ottopress.com/files/2011/07/dropdown.png"><img class="size-full wp-image-609" title="dropdown" src="http://i1.wp.com/ottopress.com/files/2011/07/dropdown.png?resize=109%2C118" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Howdy dropdown</p></div>
<p>This may seem insecure to some, however the mechanism behind the scenes is that Facebook sets a cookie in your browser, and cryptographically signs it. Your Application Secret is the key used to decode this signature, thus proving it came from your Facebook application, and eliminating the risk of having users log in without your valid credentials.</p>
<p>However, this does point out something everybody should know: Secrets are supposed to be <strong>secret</strong>. So keep your Facebook Application Secret a real secret. This applies anytime you&#8217;re setting up interconnected web applications. Secrets are called that for a reason.</p>
<h3>Registration Flow</h3>
<p>In order to integrate Login and Registration using Facebook, Facebook came up with what is essentially a <a href="http://developers.facebook.com/docs/user_registration/flows/">flow diagram</a> explaining the steps an app should use to login and register somebody to a third party site.</p>
<div id="attachment_614" style="width: 572px" class="wp-caption alignnone"><a href="http://i2.wp.com/ottopress.com/files/2011/07/flow2.png"><img class="size-medium wp-image-614" title="flow2" src="http://i2.wp.com/ottopress.com/files/2011/07/flow2.png?resize=562%2C600" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Facebook&#39;s rather complex registration flow diagram</p></div>
<p>This rather complex looking flowchart shows how a site which has its own login and registration mechanism can implenent Facebook. I&#8217;ve followed this chart as best as possible, and thanks to FB&#8217;s <a href="http://developers.facebook.com/docs/plugins/registration/">Registration plugin</a>, it works quite well now. Here&#8217;s how it breaks down.</p>
<p>For existing users:</p>
<ol>
<li>You click the Login button.</li>
<li>You login to Facebook if needed.</li>
<li>If your email on Facebook matches your email in WordPress, you&#8217;re logged in and your account is automatically connected.</li>
<li>If your email doesn&#8217;t match, then you can log in normally with WordPress instead, and connect your account manually, on the Users-&gt;Your Profile screen.</li>
</ol>
<p>For new users:</p>
<ol>
<li>You click the Login button.</li>
<li>You login to Facebook if needed.</li>
<li>If no account can be found for you from the login process, you get redirected to the Register page.</li>
<li>There the Facebook register plugin shows up and lets you register for the WordPress site, using your Facebook credentials. All it asks for is a username and to solve a CAPTCHA (to prevent spam registrations).</li>
<li>You get a new WordPress account, already connected to Facebook for you. It even emails you a password.</li>
</ol>
<div id="attachment_612" style="width: 289px" class="wp-caption alignnone"><a href="http://i2.wp.com/ottopress.com/files/2011/07/register.png"><img class="size-medium wp-image-612" title="register" src="http://i1.wp.com/ottopress.com/files/2011/07/register.png?resize=279%2C600" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Registration screen</p></div>
<p>Some have expressed concern that Facebook seems required for registration. This is not actually the case, because after all, not everybody uses Facebook. One of the nice things about the FB Register plugin is that it has different methods for Facebook connected users vs. non-Facebook connected users. Both types of users can register for the site. Facebook users get some advantages like having their account automatically connected and not having to type in an email address, but the basic process is the same.</p>
<p>For new users not using Facebook:</p>
<ol>
<li>You click the Register link.</li>
<li>The Facebook register plugin shows up and lets you register for the WordPress site. It will ask for a username and your email address, as per the normal registration process. It does have the CAPTCHA too, and tells you that you can login using Facebook as well, if you want.</li>
<li>You get a new WordPress account, and it emails you a password.</li>
</ol>
<div id="attachment_613" style="width: 335px" class="wp-caption alignnone"><a href="http://i2.wp.com/ottopress.com/files/2011/07/register-nofb.png"><img class="size-full wp-image-613" title="register-nofb" src="http://i1.wp.com/ottopress.com/files/2011/07/register-nofb.png?resize=325%2C550" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Registration screen</p></div>
<p>And after logging in and having it recognize you, the user will be automatically connected to their account on their Profile page.</p>
<div id="attachment_611" style="width: 610px" class="wp-caption alignnone"><a href="http://i1.wp.com/ottopress.com/files/2011/07/profile.png"><img class="size-medium wp-image-611" title="profile" src="http://i2.wp.com/ottopress.com/files/2011/07/profile.png?resize=600%2C56" alt="" data-recalc-dims="1" /></a><p class="wp-caption-text">Facebook Connection shown on the Profile Page</p></div>
<p>If you want to try the new version now, I&#8217;ve finally moved it into the normal &#8220;trunk&#8221; directory on the repository at <a href="http://wordpress.org">WordPress.org</a>, so you can download the ZIP file of the plugin here:<br />
<a href="http://downloads.wordpress.org/plugin/simple-facebook-connect.zip">http://downloads.wordpress.org/plugin/simple-facebook-connect.zip</a></p>
<p>Release date: soon. Real soon now. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/ah' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/beta/" rel="tag">beta</a>, <a href="http://ottopress.com/tag/captcha/" rel="tag">captcha</a>, <a href="http://ottopress.com/tag/facebook/" rel="tag">facebook</a>, <a href="http://ottopress.com/tag/login/" rel="tag">login</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/register/" rel="tag">register</a>, <a href="http://ottopress.com/tag/sfc/" rel="tag">sfc</a>, <a href="http://ottopress.com/tag/simple-facebook-connect/" rel="tag">simple-facebook-connect</a>, <a href="http://ottopress.com/tag/trunk/" rel="tag">trunk</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/sfc-1-0-login-and-registration/#comments" title="Comment on SFC 1.0 &#8211; Login and Registration">20 Comments</a>									 </div>
			</div>
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/tag/plugin/page/2/" >&laquo; Previous Entries</a></div>
			<div class="alignright"></div>
		</div>
		
	
	</div>
	<div id="sidebar">
		<ul>
			
			<li id="paypal-donate" class="widget widget_wpaypal"><h2 class="widgettitle">Buy Otto a Beer</h2>
<div style="margin-top:5px;margin-bottom:5px;text-align:left;">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
		<p><input type="hidden" name="cmd" value="_xclick" />
		<input type="hidden" name="business" value="otto@ottodestruct.com" />
		<input type="hidden" name="item_name" value="Donation to Otto on WordPress" />
		<input type="hidden" name="item_number" value="0" />
		<input type="hidden" name="notify_url" value="" />
		<input type="hidden" name="no_shipping" value="1" /><input type="hidden" name="return" value="http://ottopress.com" />
		<input type="hidden" name="no_note" value="1" />
		<input type="hidden" name="tax" value="0" />
		<input type="hidden" name="bn" value="PP-DonationsBF" />
		<input type="hidden" name="on0" value="Website" />
		Currency: <br />
		<select id="currency_code" name="currency_code">
		<option value="USD">U.S. Dollars</option>
		<option value="AUD">Australian Dollars</option>
		<option value="CAD">Canadian Dollars</option>
		<option value="EUR">Euros</option>
		<option value="GBP">Pounds Sterling</option>
		<option value="JPY">Yen</option></select></p>
		<p>Amount: <br /><input type="text" name="amount" size="16" title="The amount you wish to donate" value="5.00" /></p>
		<p>Website(Optional): <br /><input type="text" size="16" title="Your website (will be displayed)" name="os0" value="" /></p><p><input class="ppimg" type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" name="submit" style="border:0;" alt="Make payments with PayPal - fast, free and secure" /></p></form></div></li>
<li id="text-7" class="widget widget_text">			<div class="textwidget">Hey, I also take Bitcoins! Send them to: </br>
<a href="bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg">
<img src="https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg" /><br />
1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg</a></div>
		</li>
<li id="text-5" class="widget widget_text"><h2 class="widgettitle">Subscribe!</h2>
			<div class="textwidget"><!-- <a href="https://plus.google.com/111166992820603637934?prsrc=3" style="cursor:pointer;display:inline-block;text-decoration:none;color:#333;font:13px/16px arial,sans-serif;"><span style="display:inline-block;font-weight:bold;vertical-align:top;margin-right:5px;margin-top:8px;">Otto on WordPress</span><span style="display:inline-block;vertical-align:top;margin-right:15px;margin-top:8px;">on</span><img src="https://ssl.gstatic.com/images/icons/gplus-32.png" alt="" style="border:0;width:32px;height:32px;"/></a>
-->
<div class="g-plus" data-href="https://plus.google.com/111166992820603637934?rel=publisher" data-width="250" data-height="131" data-theme="light"></div>
</div>
		</li>
<li id="blog_subscription-3" class="widget jetpack_subscription_widget"><h2 class="widgettitle"><label for="subscribe-field"></label></h2>

		<form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3">
			<p id="subscribe-text">Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p><p>Join 329 other subscribers</p>

			<p id="subscribe-email"><input type="text" name="email" value="Email Address" id="subscribe-field" onclick="if ( this.value == 'Email Address' ) { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = 'Email Address'; }" /></p>

			<p id="subscribe-submit">
				<input type="hidden" name="action" value="subscribe" />
				<input type="hidden" name="source" value="http://ottopress.com/tag/plugin/" />
				<input type="hidden" name="sub-type" value="widget" />
				<input type="hidden" name="redirect_fragment" value="blog_subscription-3" />
								<input type="submit" value="Subscribe" name="jetpack_subscriptions_widget" />
			</p>
		</form>

		
</li>
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Email Me</h2>
			<div class="textwidget"><ul><li><span class="vcard microid-mailto+http:sha1:23e9670868f6d2b16fe1f6b3db80c8f0423a082a">
<span style="display:none;">
<span class="adr">
 <span class="locality">Memphis</span>,
 <span class="region">TN</span>
 <span class="postal-code">38103</span>
 <span class="country-name">U.S.A.</span>
</span>
<a class="url fn" href="http://ottodestruct.com">Otto</a>
<span class="uid">240cf86e-5cad-11dc-8314-0800200c9a66</span>
</span>
<a class="email" href="mailto:otto@ottodestruct.com">otto@ottodestruct.com</a></span></li></ul>
<a rel="author" href="https://plus.google.com/100201852715113506716?rel=author">
  <img src="https://ssl.gstatic.com/images/icons/gplus-16.png" width="16" height="16">
</a>
</a>
<!-- 

This rant is hidden in HTML comments. If I pointed you to it, then you probably emailed me about the fact that my email address is in plaintext directly above this comment. If you happened to run across it because you just like looking at HTML comments, well, easter egg! :)

YES, that is a bare mailto: href above. 
YES, that is my real email address. 
And YES, it's intentional.

Obfuscating your email address on the web is stupid. 

Firstly, hiding your email address doesn't prevent spam. Spammers get addresses in bulk from mailing lists and websites and other sources. Sure, some scrapers exist, but they are by far the minority of the sources for email lists.

Secondly, hiding your email address ruins the whole point of email. The purpose of publishing my email address is so that anybody, and I do mean *anybody*, can email me. Before the days of cell phones, your phone number and physical address used to be published in a big book that everybody received, for free, on a semi-annual basis. It had distinctive yellow pages in it. Your contact information is not, and never was supposed to be, private information. Treating it as such is stupid.

Thirdly, I have great spam protection. For one, I use GMail, which has frankly incredible filtering because of the volume of mail they deal with. For another, I use various sets of filters to categorize incoming mail into various categories of things. Hell, I can even run statistics on it, if I want. This is a much better solution than continually giving out fake email addresses, or using +stuff to figure out who sent what where... I'd prefer to simply let my filters deal with it instead. 

Finally, if you're one of those systems that scours the web and/or social networks for visible email addresses and then automatically emails that person to let them know that their address is visible, then by all means please just fuck off and die. You're part of the problem. On the other hand, if you're just a regular guy with good intentions, then this doesn't apply to you. :)

Just my 2 cents.

--></div>
		</li>
<li id="categories-2" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-573"><a href="http://ottopress.com/category/code/" title="View all posts filed under Code">Code</a>
</li>
	<li class="cat-item cat-item-574"><a href="http://ottopress.com/category/other/" title="View all posts filed under Other">Other</a>
</li>
	<li class="cat-item cat-item-575"><a href="http://ottopress.com/category/rants/" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://ottopress.com/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-576"><a href="http://ottopress.com/category/wordpress/" title="View all posts filed under WordPress">WordPress</a>
</li>
		</ul>
</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://ottopress.com/2014/02/'>February 2014</a></li>
	<li><a href='http://ottopress.com/2013/11/'>November 2013</a></li>
	<li><a href='http://ottopress.com/2013/10/'>October 2013</a></li>
	<li><a href='http://ottopress.com/2013/06/'>June 2013</a></li>
	<li><a href='http://ottopress.com/2013/03/'>March 2013</a></li>
	<li><a href='http://ottopress.com/2012/11/'>November 2012</a></li>
	<li><a href='http://ottopress.com/2012/09/'>September 2012</a></li>
	<li><a href='http://ottopress.com/2012/08/'>August 2012</a></li>
	<li><a href='http://ottopress.com/2012/07/'>July 2012</a></li>
	<li><a href='http://ottopress.com/2012/05/'>May 2012</a></li>
	<li><a href='http://ottopress.com/2012/02/'>February 2012</a></li>
	<li><a href='http://ottopress.com/2012/01/'>January 2012</a></li>
	<li><a href='http://ottopress.com/2011/12/'>December 2011</a></li>
	<li><a href='http://ottopress.com/2011/11/'>November 2011</a></li>
	<li><a href='http://ottopress.com/2011/10/'>October 2011</a></li>
	<li><a href='http://ottopress.com/2011/09/'>September 2011</a></li>
	<li><a href='http://ottopress.com/2011/08/'>August 2011</a></li>
	<li><a href='http://ottopress.com/2011/07/'>July 2011</a></li>
	<li><a href='http://ottopress.com/2011/06/'>June 2011</a></li>
	<li><a href='http://ottopress.com/2011/05/'>May 2011</a></li>
	<li><a href='http://ottopress.com/2011/04/'>April 2011</a></li>
	<li><a href='http://ottopress.com/2011/03/'>March 2011</a></li>
	<li><a href='http://ottopress.com/2011/02/'>February 2011</a></li>
	<li><a href='http://ottopress.com/2011/01/'>January 2011</a></li>
	<li><a href='http://ottopress.com/2010/12/'>December 2010</a></li>
	<li><a href='http://ottopress.com/2010/11/'>November 2010</a></li>
	<li><a href='http://ottopress.com/2010/10/'>October 2010</a></li>
	<li><a href='http://ottopress.com/2010/09/'>September 2010</a></li>
	<li><a href='http://ottopress.com/2010/08/'>August 2010</a></li>
	<li><a href='http://ottopress.com/2010/06/'>June 2010</a></li>
	<li><a href='http://ottopress.com/2010/05/'>May 2010</a></li>
	<li><a href='http://ottopress.com/2010/04/'>April 2010</a></li>
	<li><a href='http://ottopress.com/2010/03/'>March 2010</a></li>
	<li><a href='http://ottopress.com/2010/02/'>February 2010</a></li>
	<li><a href='http://ottopress.com/2009/11/'>November 2009</a></li>
	<li><a href='http://ottopress.com/2009/09/'>September 2009</a></li>
	<li><a href='http://ottopress.com/2008/09/'>September 2008</a></li>
		</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/">Better Know a Vulnerability: SQL Injection</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/language-packs-101-prepwork/">Language Packs 101 &#8211; Prepwork</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/slides-a-presentation-theme/">Slides: A Presentation Theme</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/">I&#8217;m not a fan of orange&#8230;</a>
						</li>
				</ul>
		</li>
<li id="text-6" class="widget widget_text"><h2 class="widgettitle">WP Core Contributions</h2>
			<div class="textwidget"><p>
<a href='http://core.trac.wordpress.org/changeset/28072'>[28072]</a> - <a href='http://core.trac.wordpress.org/ticket/19393'>#19393</a><br />
<a href='http://core.trac.wordpress.org/changeset/27522'>[27522]</a> - <a href='http://core.trac.wordpress.org/ticket/19889'>#19889</a><br />
<a href='http://core.trac.wordpress.org/changeset/27399'>[27399]</a> - <a href='http://core.trac.wordpress.org/ticket/25665'>#25665</a><br />
<a href='http://core.trac.wordpress.org/changeset/26978'>[26978]</a> - <a href='http://core.trac.wordpress.org/ticket/23149'>#23149</a><br />
<a href='http://core.trac.wordpress.org/changeset/26711'>[26711]</a> - <a href='http://core.trac.wordpress.org/ticket/21442'>#21442</a><br />
<a href='http://core.trac.wordpress.org/changeset/26072'>[26072]</a> - <a href='http://core.trac.wordpress.org/ticket/25858'>#25858</a><br />
<a href='http://core.trac.wordpress.org/changeset/22152'>[22152]</a> - <a href='http://core.trac.wordpress.org/ticket/21914'>#21914</a><br />
<a href='http://core.trac.wordpress.org/changeset/22026'>[22026]</a> - <a href='http://core.trac.wordpress.org/ticket/22002'>#22002</a><br />
<a href='http://core.trac.wordpress.org/changeset/21839'>[21839]</a> - <a href='http://core.trac.wordpress.org/ticket/16996'>#16996</a><br />
<a href='http://core.trac.wordpress.org/changeset/21802'>[21802]</a> - <a href='http://core.trac.wordpress.org/ticket/18674'>#18674</a><br />
<a href='http://core.trac.wordpress.org/changeset/21776'>[21776]</a> - <a href='http://core.trac.wordpress.org/ticket/13729'>#13729</a><br />
<a href='http://core.trac.wordpress.org/changeset/21609'>[21609]</a> - <a href='http://core.trac.wordpress.org/ticket/19324'>#19324</a><br />
<a href='http://core.trac.wordpress.org/changeset/20916'>[20916]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20784'>[20784]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20783'>[20783]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20267'>[20267]</a> - <a href='http://core.trac.wordpress.org/ticket/13774'>#13774</a><br />
<a href='http://core.trac.wordpress.org/changeset/19721'>[19721]</a> - <a href='http://core.trac.wordpress.org/ticket/19626'>#19626</a><br />
<a href='http://core.trac.wordpress.org/changeset/19003'>[19003]</a> - <a href="http://core.trac.wordpress.org/ticket/17406">#17406</a><br />
<a href='http://core.trac.wordpress.org/changeset/18741'>[18741]</a> - <a href="http://core.trac.wordpress.org/ticket/15473">#15473</a><br />
<a href='http://core.trac.wordpress.org/changeset/18602'>[18602]</a> - <a href="http://core.trac.wordpress.org/ticket/18230">#18230</a><br />
<a href='http://core.trac.wordpress.org/changeset/18541'>[18541]</a> - <a href="http://core.trac.wordpress.org/ticket/16687">#16687</a><br />
<a href='http://core.trac.wordpress.org/changeset/18205'>[18205]</a> - <a href="http://core.trac.wordpress.org/ticket/17148">#17148</a><br />
<a href='http://core.trac.wordpress.org/changeset/17254'>[17254]</a> - <a href="http://core.trac.wordpress.org/ticket/16192">#16192</a><br />
<a href='http://core.trac.wordpress.org/changeset/16555'>[16555]</a> - <a href="http://core.trac.wordpress.org/ticket/12891">#12891</a><br />
<a href='http://core.trac.wordpress.org/changeset/16284'>[16284]</a> - <a href="http://core.trac.wordpress.org/ticket/13324">#13324</a><br />
<a href='http://core.trac.wordpress.org/changeset/13420'>[13420]</a> - <a href="http://core.trac.wordpress.org/ticket/12291">#12291</a><br />
<a href='http://core.trac.wordpress.org/changeset/12581'>[12581]</a> - <a href="http://core.trac.wordpress.org/ticket/7225">#7225</a><br />
<a href='http://core.trac.wordpress.org/changeset/11738'>[11738]</a> - <a href="http://core.trac.wordpress.org/ticket/10145">#10145</a><br />
<a href='http://core.trac.wordpress.org/changeset/11329'>[11329]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10962'>[10962]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10757'>[10757]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10753'>[10753]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10252'>[10252]</a> - <a href="http://core.trac.wordpress.org/ticket/6791">#6791</a><br />
<a href='http://core.trac.wordpress.org/changeset/9276'>[9276]</a> - <a href="http://core.trac.wordpress.org/ticket/7124">#7124</a><br />
<a href='http://core.trac.wordpress.org/changeset/9209'>[9209]</a> - <a href="http://core.trac.wordpress.org/ticket/7901">#7901</a><br />
<a href='http://core.trac.wordpress.org/changeset/9207'>[9207]</a> - <a href="http://core.trac.wordpress.org/ticket/7635">#7635</a><br />
<a href='http://core.trac.wordpress.org/changeset/9139'>[9139]</a> - <a href="http://core.trac.wordpress.org/ticket/7847">#7847</a><br />
<a href='http://core.trac.wordpress.org/changeset/9089'>[9089]</a> - <a href="http://core.trac.wordpress.org/ticket/7772">#7772</a><br />
<a href='http://core.trac.wordpress.org/changeset/8968'>[8968]</a> - <a href="http://core.trac.wordpress.org/ticket/7761">#7761</a><br />
<a href='http://core.trac.wordpress.org/changeset/8285'>[8285]</a> - <a href="http://core.trac.wordpress.org/ticket/6879">#6879</a><br />
<a href='http://core.trac.wordpress.org/changeset/8208'>[8208]</a> - <a href="http://core.trac.wordpress.org/ticket/4448">#4448</a><br />
<a href='http://core.trac.wordpress.org/changeset/8132'>[8132]</a> - <a href="http://core.trac.wordpress.org/ticket/4954">#4954</a><br />
<a href='http://core.trac.wordpress.org/changeset/8131'>[8131]</a> - <a href="http://core.trac.wordpress.org/ticket/6590">#6590</a><br />
<a href='http://core.trac.wordpress.org/changeset/7869'>[7869]</a> - <a href="http://core.trac.wordpress.org/ticket/6513">#6513</a><br />
<a href='http://core.trac.wordpress.org/changeset/7647'>[7647]</a> - <a href="http://core.trac.wordpress.org/ticket/6608">#6608</a><br />
<a href='http://core.trac.wordpress.org/changeset/7461'>[7461]</a> - <a href="http://core.trac.wordpress.org/ticket/6339">#6339</a><br />
<a href='http://core.trac.wordpress.org/changeset/6873'>[6873]</a> - <a href="http://core.trac.wordpress.org/ticket/4986">#4986</a><br />
<a href='http://core.trac.wordpress.org/changeset/6760'>[6760]</a> - <a href="http://core.trac.wordpress.org/ticket/4617">#4617</a><br />
<a href='http://core.trac.wordpress.org/changeset/6616'>[6616]</a> - <a href="http://core.trac.wordpress.org/ticket/5155">#5155</a><br />
<a href='http://core.trac.wordpress.org/changeset/6439'>[6439]</a> - <a href="http://core.trac.wordpress.org/ticket/2805">#2805</a><br />
<a href='http://core.trac.wordpress.org/changeset/6091'>[6091]</a> - <a href="http://core.trac.wordpress.org/ticket/4182">#4182</a><br />
<a href='http://core.trac.wordpress.org/changeset/6086'>[6086]</a> - <a href="http://core.trac.wordpress.org/ticket/4946">#4946</a><br />
<a href='http://core.trac.wordpress.org/changeset/5986'>[5986]</a> - <a href="http://core.trac.wordpress.org/ticket/4873">#4873</a><br />
<a href='http://core.trac.wordpress.org/changeset/5982'>[5982]</a> - <a href="http://core.trac.wordpress.org/ticket/4800">#4800</a><br />
<a href='http://core.trac.wordpress.org/changeset/5958'>[5958]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5920'>[5920]</a> - <a href="http://core.trac.wordpress.org/ticket/4703">#4703</a><br />
<a href='http://core.trac.wordpress.org/changeset/5910'>[5910]</a> - <a href="http://core.trac.wordpress.org/ticket/4654">#4654</a><br />
<a href='http://core.trac.wordpress.org/changeset/5881'>[5881]</a> - <a href="http://core.trac.wordpress.org/ticket/4704">#4704</a><br />
<a href='http://core.trac.wordpress.org/changeset/5857'>[5857]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5848'>[5848]</a> - <a href="http://core.trac.wordpress.org/ticket/4499">#4499</a><br />
<a href='http://core.trac.wordpress.org/changeset/5845'>[5845]</a> - <a href="http://core.trac.wordpress.org/ticket/4547">#4547</a><br />
<a href='http://core.trac.wordpress.org/changeset/5317'>[5317]</a> - <a href="http://core.trac.wordpress.org/ticket/4169">#4169</a><br />
<a href='http://core.trac.wordpress.org/changeset/5154'>[5154]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5151'>[5151]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5104'>[5104]</a> - <a href="http://core.trac.wordpress.org/ticket/3790">#3790</a><br />
<a href='http://core.trac.wordpress.org/changeset/4964'>[4964]</a> - <a href="http://core.trac.wordpress.org/ticket/3898">#3898</a><br />
</p></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<div style="float:left;"><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
<a href="http://ottopress.com/feed/">Entries (RSS)</a> and <a href="http://ottopress.com/comments/feed/">Comments (RSS)</a>.<br />
<span about="http://ottodestruct.com/" xmlns:cc="http://creativecommons.org/ns#">
This page, by <a property="cc:attributionName" rel="cc:attributionURL" href="http://ottodestruct.com/">Otto</a>, is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License</a>.</span><br />
Powered by <a href="http://wordpress.org/" title="Powered by WordPress.">WordPress</a>.<br />
		<script type="text/javascript">
		//<![CDATA[
		var infiniteScroll = {"settings":{"id":"content","ajaxurl":"http:\/\/ottopress.com\/?infinity=scrolling","type":"scroll","wrapper":false,"wrapper_class":"infinite-wrap","footer":false,"click_handle":"1","text":"Older posts","totop":"Scroll back to top","currentday":"26.02.14","order":"DESC","scripts":[],"styles":[],"google_analytics":false,"offset":0,"history":{"host":"ottopress.com","path":"\/tag\/plugin\/page\/%d\/","use_trailing_slashes":true,"parameters":""},"query_args":{"tag":"plugin","error":"","m":"","p":0,"post_parent":"","subpost":"","subpost_id":"","attachment":"","attachment_id":0,"name":"","static":"","pagename":"","page_id":0,"second":"","minute":"","hour":"","day":0,"monthnum":0,"year":0,"w":0,"category_name":"","cat":"","tag_id":594,"author":"","author_name":"","feed":"","tb":"","paged":0,"comments_popup":"","meta_key":"","meta_value":"","preview":"","s":"","sentence":"","fields":"","menu_order":"","category__in":[],"category__not_in":[],"category__and":[],"post__in":[],"post__not_in":[],"tag__in":[],"tag__not_in":[],"tag__and":[],"tag_slug__in":["plugin"],"tag_slug__and":[],"post_parent__in":[],"post_parent__not_in":[],"author__in":[],"author__not_in":[],"posts_per_page":7,"ignore_sticky_posts":false,"suppress_filters":false,"cache_results":true,"update_post_term_cache":true,"update_post_meta_cache":true,"post_type":"","nopaging":false,"comments_per_page":"50","no_found_rows":false,"order":"DESC"},"last_post_date":"2011-08-22 18:33:15","stats":"blog=12342457&host=ottopress.com&v=ext&j=1:3.0.2&x_pagetype=infinite-jetpack"}};
		//]]>
		</script>
		<img alt='css.php' src="http://ottopress.com/wp-content/plugins/cookies-for-comments/css.php?k=c6a73cb029f035cdaa9e9e8336d25169&amp;o=i&amp;t=812957564" width='1' height='1' />	<div style="display:none">
	</div>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.js?ver=20140514'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en-US","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.14.2'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
<script type="text/javascript">
			jQuery.extend( infiniteScroll.settings.scripts, ["jquery-core","jquery-migrate","jquery","tiled-gallery","spin","jquery.spin","syntaxhighlighter-core","syntaxhighlighter-brush-php","the-neverending-homepage","jetpack-photon","devicepx","mediaelement","wp-mediaelement","grofiles-cards","wpgroho"] );
			jQuery.extend( infiniteScroll.settings.styles, ["yarppWidgetCss","jetpack-subscriptions","the-neverending-homepage","tiled-gallery","mediaelement","wp-mediaelement"] );
		</script>
	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.2',blog:'12342457',post:'0',tz:'-5'});
	var load_cmc = function(){linktracker_init(12342457,0,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></div></div>

<script type="text/javascript">
    window._idl = {};
    _idl.variant = "modal";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

</body>
</html>

