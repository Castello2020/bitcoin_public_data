http://ottopress.com/category/code/?repeat=w3tc
HTTP/1.1 200 OK
Server: nginx/1.4.4
Date: Wed, 23 Jul 2014 16:01:37 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Pingback: http://ottopress.com/xmlrpc.php

<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>Code &raquo; Otto on WordPress</title>

<link rel="profile" href="http://www.w3.org/1999/xhtml/vocab" />
<link rel="me" type="text/html" href="https://plus.google.com/100201852715113506716" />

<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/style.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/print.css" type="text/css" media="print" />

<link rel="pingback" href="http://ottopress.com/xmlrpc.php" />

<meta property="og:email" content="otto@ottodestruct.com" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">

<script type="text/javascript">var description = '';</script>
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="IvlRFnRHu9RIiAiOS-bo-8vU4ju4V6_b4U3M_-1jlXQ" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Feed" href="http://ottopress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Comments Feed" href="http://ottopress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Code Category Feed" href="http://ottopress.com/category/code/feed/" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='the-neverending-homepage-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.css?ver=20140422' type='text/css' media='all' />
<link rel='stylesheet' id='tiled-gallery-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.css?ver=2012-09-21' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.13.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery-migrate.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ottopress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ottopress.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<meta name="pinterest" content="nopin" /><link rel="microsummary" type="text/plain" href="/category/code/?repeat=w3tc?microsummary=1" /><link rel="shortcut icon" href="http://ottopress.com/wp-content/wp-logo-vs.png" /><style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-27538437-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>

<body class="archive category category-code category-573 infinite-scroll neverending">
<script type="text/javascript">
if (top.location != self.location) top.location.replace(self.location);
</script>
<div id="page">
<div id="header">
	<div id="headertitle">
		<h1><a href="http://ottopress.com" title="Otto on WordPress: You have to use an Ottopress to get fresh squeezed Otto.">Otto on WordPress</a></h1>
		<p>You have to use an Ottopress to get fresh squeezed Otto.</p>
	</div> 
	<!-- Search box (If you prefer having search form as a sidebar widget, remove this block) -->
	<div class="search">
		<form method="get" id="searchform" action="http://ottopress.com/">
<input type="search" size="20" results="5" name="s" id="s" placeholder="Search..." speech="speech" x-webkit-speech="x-webkit-speech" onwebkitspeechchange="this.form.submit();" />
</form>
	</div> 
	<!-- Search ends here-->
		
</div>
<div id="navbar">
<div id="nav">
<div class="menu"><ul><li ><a href="http://ottopress.com/">Home</a></li><li class="page_item page-item-5 page_item_has_children"><a href="http://ottopress.com/wordpress-plugins/">WordPress Plugins</a><ul class='children'><li class="page_item page-item-205"><a href="http://ottopress.com/wordpress-plugins/atd-for-comments/">After The Deadline For Comments</a></li><li class="page_item page-item-21"><a href="http://ottopress.com/wordpress-plugins/atom-default-feed/">Atom Default Feed</a></li><li class="page_item page-item-965"><a href="http://ottopress.com/wordpress-plugins/dropbox-photo-sideloader/">Dropbox Photo Sideloader</a></li><li class="page_item page-item-15"><a href="http://ottopress.com/wordpress-plugins/gravatar-box/">Gravatar Box</a></li><li class="page_item page-item-32"><a href="http://ottopress.com/wordpress-plugins/php-code-widget/">PHP Code Widget</a></li><li class="page_item page-item-7"><a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a></li><li class="page_item page-item-10"><a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a></li><li class="page_item page-item-81"><a href="http://ottopress.com/wordpress-plugins/unicornify/">Unicornify</a></li></ul></li><li class="page_item page-item-374"><a href="http://ottopress.com/contact/">Contact Otto</a></li><li><a href="http://ottodestruct.com" title="Nothing to See Here">Nothing to See Here</a></li><li><a href="http://buyottoabeer.com" title="Otto on Beer">Otto on Beer</a></li></ul></div>
	</div>
</div>
<div id="wrapper">
	<div id="content">

	
			<p>Archive for the &#8216;Code&#8217; Category.</p>

 				
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/category/code/page/2/?repeat=w3tc" >&laquo; Previous Entries</a></div>
			<div class="alignright"></div>
		</div>

					<div id="post-957" class="post-957 post type-post status-publish format-standard hentry category-code category-wordpress tag-csrf tag-exploit tag-form tag-nonce tag-plugin tag-theme tag-vulnerability tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/" rel="bookmark" title="Permanent Link to Better Know a Vulnerability: Cross Site Request Forgery (CSRF)" itemprop="url"><span itemprop="name">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</span></a></h2>
				<div class="postmetadata">February 26, 2014, 8:11 am <!-- by <span rel="author">Otto</span> --></div>
				<div class="postentry" itemprop="description">
					<p>One of the easier to understand vulnerabilities is the CSRF. It&#8217;s also one of the most common issues we see in plugins and themes, because people rarely think about it.</p>
<p>Imagine that I have a form that takes input, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;form action=&quot;http://example.com/example.php&quot; method=&quot;GET&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;demo&quot; /&gt;
&lt;/form&gt;
</pre>
<p>Now, that&#8217;s a simple form (and missing a submit button to boot), but you get the idea. It takes a text input. Presumably, something on the other end (at /example.php) processes that input, saves it in a database, something like that. Easy.</p>
<h3>First question: Is this necessary?</h3>
<p>The main question I see asked when this concept is explained to people is &#8220;why is this necessary?&#8221;. Some people believe that since you have to be logged in to access admin screens in the first place, then you can&#8217;t get to the forms and submit them. Why have all this protection and checking for a form submission when the form is hidden behind a login screen?</p>
<p>What you need to understand is the difference between &#8220;<em>authority</em>&#8221; and &#8220;<em>intent</em>&#8220;.</p>
<h3>Authority</h3>
<p>In real world cases where we are processing that input, we generally want to limit who is allowed to submit that form in some way. A plugin will want to only allow admins to change settings. A theme will only want to allow site owners to adjust the display of the site. Things of that nature. For these cases, we use methods of authentication.</p>
<p>There&#8217;s several ways to do this, we can check the current_user information. WordPress has capability checks for users to know what they are and are not allowed to do. When we check these, we&#8217;re verifying <strong>authority</strong>. Making sure that the user is allowed to do these things.</p>
<p>But something else that we need to check which most people don&#8217;t think about is <strong>intent</strong>. Did the user actually intend to submit that form, or did their browser submit it for them automatically, perhaps without their knowledge?</p>
<p>Examine that form again, and consider what would happen if you were to visit a webpage, anywhere on the internet, that contains this:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;img src=&quot;http://example.com/example.php?demo=pwned&quot; /&gt;
</pre>
<p>Now, you might be thinking that this is a rather contrived example, and you&#8217;d be right on that score, but it serves to demonstrate the point. Your browser loads this URL and that is the equivalent action to submitting that form, with &#8220;pwned&#8221; as the text in question.</p>
<p>Here&#8217;s the kicker, all those authority checks do us no good in preventing this. You actually do have the authority to submit that form, and your browser, using your authority, just submitted it for you. Pwned, indeed.</p>
<p>(For those of you thinking &#8220;just use POST forms&#8221;, consider that javascript can submit POST forms. So that&#8217;s really no help.)</p>
<h3>Intent</h3>
<p>What we need is to verify intent. We need to know that the user submitted that form, and not just the browser doing it for them automatically.</p>
<p>WordPress used to do this (a looong time ago) using the referer. For those who don&#8217;t know, referer is a URL passed by your browser to indicate where a user came from. So one could check that the referer says that the form was submitted from the form&#8217;s page and not from some other page on the internet. The problem is that referer is not reliable. Some browsers have the ability for script to fake the referer. Firewalls and proxies often strip the referer out, for privacy concerns. And so forth.</p>
<h3>Nonces</h3>
<p>WordPress now does this using nonces. A nonce is a &#8220;number used once&#8221; in its purest form. Basically, it&#8217;s a one-time password. When we generate the form, we generate a number. When the form is submitted, we check the number. If the number is wrong or missing, we don&#8217;t allow the form to be submitted. A script cannot know the number in advance. Other sites cannot guess the number.</p>
<p>Now, technically, WordPress doesn&#8217;t use real nonces, because they&#8217;re not &#8220;used once&#8221;. Instead, WordPress nonces revolve on a 12 hour rotating system (where 24 hours are accepted). For any given 12 hour period, the nonce number for a given action will be the same. But it&#8217;s close enough to a real nonce to eliminate the issue, but notably it&#8217;s <em>only</em> for the issue of verifying intent. Don&#8217;t try to use WordPress nonces for anything else. <img src="http://i0.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>So, when we generate a form, we generate a nonce. This nonce is based on five things: site, user, time, the action being performed, and the object that the action is being performed on. Changing any of these gives us a different nonce.</p>
<p>Let&#8217;s say I want to delete a post. To do that, I need to know the nonce for deleting that specific post, as me, on my site, within the last 24 hours. Without that nonce, I cannot perform the action. More importantly, in order for somebody to &#8220;trick&#8221; my browser into doing it for me, they need to get that specific nonce and get my browser to load it within 24 hours. Tough to do. And even if they pull it off, they only have been able to perform that very specific action, the nonce obtained is useless for any other purpose. They don&#8217;t get any form of full control via this manner. They can&#8217;t make my browser do anything on mysite that they don&#8217;t have the nonce for.</p>
<h3>Using nonces</h3>
<p>So, let&#8217;s get down to brass tacks. Generating a nonce in WordPress is easy and can be done in many different ways depending on your particular needs. You might want to protect a simple link, or you might want to protect a form, or you might even need to protect a javascript ajax call.</p>
<p>Protecting a link can be done with wp_nonce_url(). It takes a URL and an action and adds a valid nonce onto that URL. It works like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$nonced_url = wp_nonce_url( $url, 'action_'.$object_id );
</pre>
<p>Here, we&#8217;re taking some URL, and adding a nonce onto it for a specific action on some specific object. This is important, actions and objects need to both be specified if there is some object being referred to. An example might be a link to delete a specific post. Such code would look like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_nonce_url( $url, 'trash-post_'.$post-&gt;ID )
</pre>
<p>The action is &#8220;trash-post&#8221; and the post being trashed has its ID number appended to that action. Thus, the nonce will let you trash that post and <em>only</em> that post.</p>
<p>On the other hand, maybe we have a form that we need to protect instead. Inside that form, we can add something like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_nonce_field( 'delete-comment_'.$comment_id );
</pre>
<p>This is the nonce for deleting a comment. It outputs a couple of form fields, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;input type=&quot;hidden&quot; id=&quot;_wpnonce&quot; name=&quot;_wpnonce&quot; value=&quot;1234567890&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;_wp_http_referer&quot; value=&quot;/wp-admin/edit-comments.php&quot; /&gt;
</pre>
<p>The value for the nonce will be specific to deleting that comment, on that site, by that user.</p>
<p>Sometimes we just need to generate the nonce directly, in no specific format. One case might be for an AJAX type call, where the data is being submitted by jQuery. In such a case, you can use the wp_create_nonce function to get just that nonce value, like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
wp_create_nonce( 'action_'.$object_id );
</pre>
<p>For AJAX requests, you&#8217;ll want to include that nonce value in the submitted data with a name of &#8220;_ajax_nonce&#8221;. Why that particular name? Because it&#8217;s what WordPress checks when verifying the nonce. Speaking of verification:</p>
<h3>Verifying nonces</h3>
<p>Generating these numbers is no good if you don&#8217;t check them as well. Fortunately, WordPress makes this easy. There&#8217;s two functions to verify incoming nonces.</p>
<pre class="brush: php; title: ; notranslate" title="">
check_admin_referer( 'action_'.$object_id );
</pre>
<p>The name of the function refers back to the time before nonces, when this function call was checking the referer value from the browser. Nowadays, it checks nonces instead. If the _wpnonce sent back in the form does not match the action and ID here, then this function stops further processing. This is the cause of the &#8220;Are you sure you want to do this?&#8221; screen that is sometimes reported by users. To avoid getting this screen, the nonce being checked has to match.</p>
<p>An alternative to checking forms or links is checking ajax requests, which is why we have this function:</p>
<pre class="brush: php; title: ; notranslate" title="">
check_ajax_referer( 'action_'.$object_id );
</pre>
<p>This performs the same basic check, but if it fails, it returns a simple &#8220;-1&#8243; response and then halts processing. Your AJAX javascript code can recognise that response and take appropriate action based on it.</p>
<p>In either case, if the nonce fails, the script exits. No action is taken. The form is not processed, the post not deleted. That&#8217;s the sort of check you need to prevent CSRF attacks.</p>
<h3>Bottom Line</h3>
<p>If you have a plugin or a theme or any type of code that &#8220;does something&#8221; in WordPress, then you need to protect that action with a nonce. If you&#8217;re not protecting it with a nonce, then it&#8217;s possible for somebody else to trick your browser into performing that action on your behalf.</p>
<p><span style="line-height: 1.5em;">Also, note that it&#8217;s not enough to just name the action. You generally are taking action on some specific &#8220;thing&#8221;, and the ID of that thing needs to be included in your nonce as well. The more specific the action, the better.</span></p>
<p>Any form, any action, no matter how much &#8220;authentication&#8221; you have on checking it, can be exploited, because you&#8217;re not really authenticating the &#8220;user&#8221;, you&#8217;re authenticating that it&#8217;s coming from &#8220;the user&#8217;s browser&#8221;. You need to have something else that changes regularly, so that you can verify that the user did indeed load that particular form and submit it relatively recently, and thus probably intended to perform that action.</p>
<p>Nonces are easy to implement. So do it already. We have enough plugins not doing it that this clearly needs to be said. <img src="http://i0.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/eo' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/csrf/" rel="tag">csrf</a>, <a href="http://ottopress.com/tag/exploit/" rel="tag">exploit</a>, <a href="http://ottopress.com/tag/form/" rel="tag">form</a>, <a href="http://ottopress.com/tag/nonce/" rel="tag">nonce</a>, <a href="http://ottopress.com/tag/plugin/" rel="tag">plugin</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/vulnerability/" rel="tag">vulnerability</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/#comments" title="Comment on Better Know a Vulnerability: Cross Site Request Forgery (CSRF)">7 Comments</a>									 </div>
			</div>			<div id="post-948" class="post-948 post type-post status-publish format-standard hentry category-code category-wordpress tag-code-2 tag-dangerous tag-exploit tag-injection tag-prepare tag-sql tag-vulnerability tag-wpdb" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/" rel="bookmark" title="Permanent Link to Better Know a Vulnerability: SQL Injection" itemprop="url"><span itemprop="name">Better Know a Vulnerability: SQL Injection</span></a></h2>
				<div class="postmetadata">November 21, 2013, 5:20 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>We get a lot of submissions to the <a href="http://wordpress.org/plugins">WordPress.org plugin repository</a>, and so there is often a lot of dangerous code submitted. Usually this isn&#8217;t malicious, it&#8217;s just by people who honestly don&#8217;t know that their code has problems. Understanding those problems is the first step to fixing them.</p>
<p>So here&#8217;s one common vulnerability we see in code submissions a lot: SQL Injection</p>
<p>To understand SQL Injection, let&#8217;s quote <a href="https://en.wikipedia.org/wiki/SQL_injection">Wikipedia</a> for a moment:</p>
<blockquote><p>SQL injection is a code injection technique, used to attack data driven applications, in which malicious SQL statements are inserted into an entry field for execution</p></blockquote>
<p>Here&#8217;s a piece of code made for WordPress, which is querying the database for a post:</p>
<pre class="brush: php; title: ; notranslate" title="">
// bad code, do not use
$results = $wpdb-&gt;get_results( &quot;SELECT * FROM $wpdb-&gt;posts WHERE ID = $id&quot; );
</pre>
<p>If you don&#8217;t see the problem with this code right away, then you should continue reading this post.</p>
<p>(Yes, this article shows the basics of the prepare() function. If you already know about the prepare() function, you might be shocked at the number of people who do not.)</p>
<p> <a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/#more-948" class="more-link">Continue reading &#8216;Better Know a Vulnerability: SQL Injection&#8217; &raquo;</a></p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/en' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/code-2/" rel="tag">code</a>, <a href="http://ottopress.com/tag/dangerous/" rel="tag">dangerous</a>, <a href="http://ottopress.com/tag/exploit/" rel="tag">exploit</a>, <a href="http://ottopress.com/tag/injection/" rel="tag">injection</a>, <a href="http://ottopress.com/tag/prepare/" rel="tag">prepare</a>, <a href="http://ottopress.com/tag/sql/" rel="tag">sql</a>, <a href="http://ottopress.com/tag/vulnerability/" rel="tag">vulnerability</a>, <a href="http://ottopress.com/tag/wpdb/" rel="tag">wpdb</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/#comments" title="Comment on Better Know a Vulnerability: SQL Injection">11 Comments</a>									 </div>
			</div>			<div id="post-942" class="post-942 post type-post status-publish format-standard hentry category-code category-wordpress tag-api tag-internationalization tag-localization tag-update tag-wordpress-org" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2013/language-packs-101-prepwork/" rel="bookmark" title="Permanent Link to Language Packs 101 &#8211; Prepwork" itemprop="url"><span itemprop="name">Language Packs 101 &#8211; Prepwork</span></a></h2>
				<div class="postmetadata">October 23, 2013, 2:29 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><span style="line-height: 1.5;">O<img class="alignright size-thumbnail wp-image-943" alt="languages" src="http://i0.wp.com/ottopress.com/files/2013/10/languages.jpg?resize=200%2C141" data-recalc-dims="1" />ne of the new features alongside the auto-update feature in WordPress 3.7 is support for &#8220;language packs&#8221;. More info about these will be coming out eventually, along with new tools for plugin and theme authors to use to manage this system (or to not have to micro-manage it, rather). A lot of this feature is yet to be implemented on WordPress.org, but the core support for it is in WordPress 3.7.</span></p>
<p>In order to use it most effectively, there&#8217;s a few ground rules that you, as a plugin or theme author, need to follow. Fortunately, they&#8217;re pretty simple.</p>
<h3>Text-domains = the plugin/theme slug</h3>
<p>Firstly, for language packs to work, your text-domain must be <em>identical</em> to the plugin or theme&#8217;s slug.</p>
<p>What&#8217;s a &#8220;slug&#8221;? Good question. If you examine the URL of your plugin or theme on WordPress.org, you&#8217;ll find that it looks like this:</p>
<pre>http://wordpress.org/plugins/some-text-here</pre>
<p>or</p>
<pre>http://wordpress.org/themes/some-text-here</pre>
<p>That &#8220;some-text-here&#8221; part is the slug. It cannot be changed by the plugin or theme author once the entry is created for it in the WordPress.org directory. It is a unique item to plugins/themes, and that&#8217;s how WordPress.org will be managing and naming the language files.</p>
<p>Therefore, your &#8220;text-domain&#8221; <strong>must</strong> be the same as that slug. In all your translation function calls, the text-domain must be there, it must be a plain string, and it must be identical to the slug of your plugin or theme on WordPress.org.</p>
<h3><span style="line-height: 1.5;">Headers</span></h3>
<p>For translation to be most effective for your plugin/theme, you need to include a header in it that you may not be including:</p>
<pre>Text Domain: put-the-slug-here</pre>
<p>This &#8220;Text Domain&#8221; header is read and used to load your language pack files even when your plugin is not activated. This allows the headers of the plugin (like the description and such) to be translated properly when the plugin is displayed on the Plugins/Themes screen. So your international users will be able to read that text too, before ever using the code.</p>
<p>If you want to include your own translation files instead of using the language pack system, then this still works. The core code will look for the relevant *.mo translation files in the plugin&#8217;s directory. If you use a subdirectory, like &#8220;/languages&#8221;, then you can use a header like the following:</p>
<pre>Domain Path: /languages</pre>
<p>Note that the Domain Path for plugins defaults to the plugin&#8217;s own root directory, but the Domain Path for themes defaults to &#8220;/languages&#8221; to begin with. If the default works for you, then you do not need to have this header at all.</p>
<p>Also note that if a language file is not found for a particular configuration, then WordPress 3.7 will fall back to using the language pack system to attempt to find it. So if you only include, say, 3 languages, and there are language packs for 4 more, then those 4 more will still work.</p>
<p>Speaking of configuration,</p>
<h3>Function calls: load_plugin_textdomain or load_theme_textdomain</h3>
<p>Here is how to properly call them, with the Headers you&#8217;ll need included for good measure:</p>
<p>If you want to allow for translation MO files in the plugin&#8217;s own directory:</p>
<pre>Text Domain: plugin-slug
load_plugin_textdomain( 'plugin-slug', false, dirname( plugin_basename( __FILE__ ) ) );</pre>
<p>If you want to allow for translation MO files in the plugin&#8217;s languages subdirectory:</p>
<pre>Text Domain: plugin-slug
Domain Path: /languages
load_plugin_textdomain( 'plugin-slug', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );</pre>
<p>If you want to use language packs exclusively (note: WP will still check the base /wp-content/plugins directory for language files, just in case):</p>
<pre>Text Domain: plugin-slug
load_plugin_textdomain( 'plugin-slug' );</pre>
<p>If you want to allow for translation MO files in the theme&#8217;s languages subdirectory:</p>
<pre>Text Domain: theme-slug
load_theme_textdomain( 'theme-slug', get_template_directory() . '/languages' );</pre>
<p>If you want to allow for translation MO files in the theme&#8217;s &#8220;lang&#8221; directory:</p>
<pre>Text Domain: theme-slug
Domain Path: /lang
load_theme_textdomain( 'theme-slug', get_template_directory() . '/lang' );</pre>
<p>If you want to use language packs exclusively (note: WP will still check the theme&#8217;s own directory for language files, just in case):</p>
<pre>Text Domain: theme-slug
load_theme_textdomain( 'theme-slug' );</pre>
<p><strong>Important:</strong></p>
<ul>
<li>Any calls to load_plugin_textdomain should be in a function attached to the &#8220;plugins_loaded&#8221; action hook.</li>
<li>Any calls to load_theme_textdomain should be in a function attached to the &#8220;after_setup_theme&#8221; action hook.</li>
</ul>
<h3>How it will work</h3>
<p>Eventually, WordPress.org will have a way to allow plugin/theme authors to upload translation files. Or, it will have a way to allow users to submit their translations to them via translate.wordpress.org&#8230; Regardless, the relevant MO files will be made on some basis, and the files will be made available to WordPress users through the normal plugin/theme update process. The auto-update system will automatically download these MO files into the /wp-content/languages directory. There will be plugins and themes subdirectories under that to hold these files.</p>
<p>The files will be named &#8220;slug-locale.mo&#8221;, where slug is the plugin or theme&#8217;s slug, and the locale is the relevant locale information about the language (like &#8220;en_US&#8221; for example). When load_plugin/theme_textdomain is called, WordPress will look in the specified place for the relevant MO file, and if it does not find it, then it falls back to looking in the /wp-content/languages folder for it, on that named basis. If it finds it, it loads it up and uses it.</p>
<p>This gives the plugin or theme authors the ability to continue to manage their translations themselves, as they&#8217;ve always done, or use the new language pack system and let WordPress.org manage it for you. The language pack system has a number of advantages:</p>
<ul>
<li>Users only download the languages they actually need, instead of all of them. Your plugin is smaller, the download is faster.</li>
<li>New translations can be approved and pushed as updates independently of the plugin or theme. No more need to bump the version just to get new translations to users.</li>
<li>Translations can be handled much easier, or ignored by the author entirely. Communities can (eventually) do their own translations through translate.wordpress.org.</li>
</ul>
<p>Things like that. These all rely on plugins and themes doing translations a certain and specific way, along with properly internationalizing their code for translation.</p>
<p>Obviously, any code not doing this sort of thing won&#8217;t get these benefits. Well, we can&#8217;t fix everything at once. But hopefully, the most common and popular ones will do this (or already are), and they can be integrated into the system quickly and easily.</p>
<h3>Some tools to help</h3>
<p>If you&#8217;re a plugin or theme author, do yourself a favor and use your SVN client to get a copy of this repository:</p>
<p><a href="http://develop.svn.wordpress.org/trunk/">http://develop.svn.wordpress.org/trunk/</a></p>
<p>This is the core develop repository for WordPress. It comes with the WordPress trunk code (in /src) but it also has some important tools you&#8217;ll need in the /tools/i18n directory. Note that to use these tools, you need the *entire* checkout, not just the tools. The tools make calls back into the WordPress core code to do some of the work, so the whole /trunk directory needs to be available there.</p>
<p>Also, those tools are managed by the core team. So keep them to date by doing an svn update every once in a while too.</p>
<p>Here&#8217;s one of those tools: <strong>makepot.php</strong></p>
<p>And here&#8217;s how you run it:</p>
<pre>&gt; php makepot.php wp-plugin /path/to/my/plugin-dir plugin-slug.pot</pre>
<p>This will scan your plugin&#8217;s directory and create a POT file for you to give to translators or include with your plugin. Theme authors, same deal, just replace &#8220;wp-plugin&#8221; with &#8220;wp-theme&#8221;.</p>
<p>Here&#8217;s another tool: <strong>add-textdomain.php</strong></p>
<p>It will read in a file and add a proper text-domain to all translation function calls it finds. To use it, you can do this:</p>
<pre>&gt; php add-textdomain.php plugin-slug /path/to/a/file.php &gt; newfile.php</pre>
<p>The newfile.php will be identical, but all the translation calls will be fixed up and have the plugin-slug in there as intended.</p>
<p>The tool outputs the new file on standard output, which I redirected into &#8220;newfile.php&#8221; as you can see above. This is so that it is non-destructive by default. If you&#8217;re confident, and have backups of the files just in case, you can use it in-place like so:</p>
<pre>&gt; php add-textdomain -i plugin-slug /path/to/a/file.php</pre>
<p>The original file will be replaced with the modified version. Use this at your own risk. I&#8217;m paranoid, I prefer to make a new file for manual comparison. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_wink.gif?w=700" alt=";)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>This tool will go through and add the text-domain to any calls where you might have left it off. I have done this many times. Force of habit, or I just forget to do it, etc.</p>
<h3>More Info</h3>
<p>And if you&#8217;re having a hard time with making your text translatable in the code, <a href="http://ottopress.com/tag/internationalization/">I have a couple other posts</a> on that topic as well. See them too.</p>
<p><span style="line-height: 1.5;">So go forth, plugin and theme authors. Start fixing up that code. Many of you may have nothing to fix. Some of you may just need a header change. But it&#8217;s worth giving it a once over anyway. It certainly would be very nice if, as the new features begin to be added to WordPress.org, then your code was all ready and set to take immediate advantage of it, wouldn&#8217;t it? <img src="http://i0.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </span></p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/el' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/api/" rel="tag">api</a>, <a href="http://ottopress.com/tag/internationalization/" rel="tag">internationalization</a>, <a href="http://ottopress.com/tag/localization/" rel="tag">localization</a>, <a href="http://ottopress.com/tag/update/" rel="tag">update</a>, <a href="http://ottopress.com/tag/wordpress-org/" rel="tag">wordpress.org</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2013/language-packs-101-prepwork/#comments" title="Comment on Language Packs 101 &#8211; Prepwork">28 Comments</a>									 </div>
			</div>			<div id="post-914" class="post-914 post type-post status-publish format-standard hentry category-code category-wordpress tag-slides tag-theme tag-wordcamp tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2013/slides-a-presentation-theme/" rel="bookmark" title="Permanent Link to Slides: A Presentation Theme" itemprop="url"><span itemprop="name">Slides: A Presentation Theme</span></a></h2>
				<div class="postmetadata">June 19, 2013, 10:44 am <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>You know, when some people are asked to do a presentation on a subject, they start by thinking about what they&#8217;re going to say, how they&#8217;re going to say it, and what their presentation will contain.</p>
<p>Me, I just start writing code.</p>
<p>I was asked to present at WordCamp Seattle, on the specific subject of the GPL. Talking about licenses is pretty dry stuff, so I came up with some ideas and such and put them down and built a presentation. No problem. But naturally, I wanted to use WordPress to present it.</p>
<p>I&#8217;ve tried this sort of presentation-theme idea a couple years back, and didn&#8217;t really get anywhere good. HTML wasn&#8217;t up to the task at the time, not really. But in my searching for this again, I ran across the <a href="https://code.google.com/p/io-2012-slides/">Google IO 2012 slides template</a>.</p>
<p>It&#8217;s a neat template. Does some very cool stuff. HTML5, CSS3, clever Javascripty goodness. Bit annoying to adjust though, and very hardcoded. So, I turned it into a WordPress theme instead.</p>
<p>I call it &#8220;Slides&#8221;, because I&#8217;m bad at naming things.</p>
<p>If you want to skip straight to the download, you&#8217;ll find it at the bottom of the post, but I encourage you to read first, because if you just install it on an existing WordPress install, you&#8217;ll find your site to be instantly broken.</p>
<p> <a href="http://ottopress.com/2013/slides-a-presentation-theme/#more-914" class="more-link">Continue reading &#8216;Slides: A Presentation Theme&#8217; &raquo;</a></p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/e6' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/slides/" rel="tag">slides</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/wordcamp/" rel="tag">wordcamp</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2013/slides-a-presentation-theme/#comments" title="Comment on Slides: A Presentation Theme">18 Comments</a>									 </div>
			</div>			<div id="post-902" class="post-902 post type-post status-publish format-standard hentry category-code category-wordpress tag-blue tag-child tag-orange tag-theme tag-twentythirteen" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2013/im-not-a-fan-of-orange/" rel="bookmark" title="Permanent Link to I&#8217;m not a fan of orange&#8230;" itemprop="url"><span itemprop="name">I&#8217;m not a fan of orange&#8230;</span></a></h2>
				<div class="postmetadata">March 12, 2013, 1:42 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><a href="http://ottodestruct.com"><img src="http://i2.wp.com/ottopress.com/files/2013/03/blue.png?resize=474%2C229" alt="blue" class="alignright size-full wp-image-903" data-recalc-dims="1" /></a><br />
I&#8217;m not a fan of the color orange. Dunno why. I prefer soothing and relaxing colors, like blues and greens.</p>
<p>But the new <a href="http://make.wordpress.org/core/2013/02/18/introducing-twenty-thirteen/">Twenty Thirteen theme</a> for the next version of WordPress is very, very orange.</p>
<p>Since I like to run the default themes over on <a href="http://ottodestruct.com">my other site</a>, this clearly could not stand.</p>
<p>So, I did a palette swap. Basically, I took the three header images, and swapped the Red and Blue channels, leaving the Green channel alone. Easy enough to do in Photoshop.</p>
<p>Then, I made a child theme, and put some minimalist code in the functions.php file to fiddle with the default header images to use the ones from my child theme instead of the normal ones. Finally, I did a search and replace for all the color references in the style.css file, swapped the R and B values in them, then put them in my new style.css file.</p>
<p>The result you can see over on <a href="http://ottodestruct.com">my other blog</a>. Yes, I know I don&#8217;t write often enough. Hell, I&#8217;ve been busy.</p>
<p>Child themes are fun to mess with. Here&#8217;s a copy if you want it for anything.</p>
<p><a href="http://ottopress.com/files/2013/03/twentythirteen-blue.zip">Twenty Thirteen &#8211; Blue</a></p>
<p>Enjoy! <img src="http://i1.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/e3' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/blue/" rel="tag">blue</a>, <a href="http://ottopress.com/tag/child/" rel="tag">child</a>, <a href="http://ottopress.com/tag/orange/" rel="tag">orange</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/twentythirteen/" rel="tag">twentythirteen</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/#comments" title="Comment on I&#8217;m not a fan of orange&#8230;">27 Comments</a>									 </div>
			</div>			<div id="post-863" class="post-863 post type-post status-publish format-standard hentry category-code category-other tag-infinite-scroll tag-jetpack tag-template-part" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/jetpack-and-the-infinite-scroll/" rel="bookmark" title="Permanent Link to Jetpack and the Infinite Scroll" itemprop="url"><span itemprop="name">Jetpack and the Infinite Scroll</span></a></h2>
				<div class="postmetadata">November 16, 2012, 1:38 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img alt="Infinite Scroll" src="http://i2.wp.com/ottopress.com/wp-content/blogs.dir/3/files/2012/11/infinite-scroll.jpg?resize=358%2C160" class="alignright wp-image-868" data-recalc-dims="1" /><br />
Everybody seems to be talking about <a href="http://jetpack.me/support/photon/">Photon</a>. Nobody really seemed to notice the <a href="http://jetpack.me/support/infinite-scroll/">Infinite Scroll</a> feature added to the latest Jetpack. While it is slightly buggy, it&#8217;s pretty neat nevertheless. It&#8217;s also pretty easy to add support for in your own themes. I added it to this blog, just to see how. <img src="http://i2.wp.com/ottopress.com/wp-content/plugins/classic-smilies/img/icon_smile.gif?w=700" alt=":)" class="wp-smiley" data-recalc-dims="1" /> </p>
<p>So, here&#8217;s how you do it.</p>
<h3>Step 1: Use Template Parts</h3>
<p>Look at the HTML produced by your main Loop. The main one being the one that displays the main set of posts. This is usually in the index.php file.</p>
<p>Let&#8217;s say that HTML looks like this (overly simplified, of course):</p>
<pre class="brush: xml; title: ; notranslate" title="">
&lt;div id=&quot;content&quot;&gt;
	&lt;div class=&quot;post&quot;&gt;...&lt;/div&gt;
	&lt;div class=&quot;post&quot;&gt;...&lt;/div&gt;
	&lt;div class=&quot;post&quot;&gt;...&lt;/div&gt;
&lt;/div&gt;
</pre>
<p>Each one of those posts is produced inside the loop, while the content container is outside it. Now let&#8217;s look at a simplified version of what The Loop might look like in PHP:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php while (have_posts()) : the_post(); ?&gt;
        &lt;div id=&quot;post-&lt;?php the_ID(); ?&gt;&quot; &lt;?php post_class(); ?&gt;&gt;
... all the post creation stuff here ...
        &lt;/div&gt;
&lt;?php endwhile; ?&gt;
</pre>
<p>What we need to do is to separate that &#8220;post&#8221; from the Loop itself, in a way that the Infinite Scroll code can then produce the post independently. With Template Parts, this is actually rather easy. We just cut and paste all that post-producing code, and put it in a new &#8220;content.php&#8221; file. Then we change the Loop into this:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php 
while (have_posts()) : the_post();
	get_template_part( 'content', get_post_format() ); 
endwhile; 
?&gt;
</pre>
<p>The get_template_part function will load that content.php file for us and include it there.</p>
<p>See a template is a file listed in the Template Hierarchy. But a template part is a file that contains only part of a template, and you can name them yourself. In this case, we named it &#8220;content&#8221;. It will become, therefore, content.php in the theme.</p>
<p>We also created a mini-hierarchy for ourselves while we were at it, using the Post Formats. What this means is that if I want to display, say, the &#8220;quote&#8221; format posts differently, I can copy content.php to content-quote.php, and make my changes in there. Then quotes will be displayed however I like in that new template part. And if content-quote.php doesn&#8217;t exist, then it falls back to using content.php, just like the normal fallbacks.</p>
<p>By separating out the Post from the surrounding loop that it&#8217;s in, then each post can be generated independently, sent over the wire via Javascript, and inserted into the page. Thus, Infinite Scroll can do the job.</p>
<h3>Step 2: Enable Infinite Scroll</h3>
<p>A theme can declare support for infinite scroll using add_theme_support(), like so:</p>
<pre class="brush: php; title: ; notranslate" title="">
add_theme_support( 'infinite-scroll', array(
	'container'    =&gt; 'content',
) );
</pre>
<p>The &#8220;container&#8221; is the ID of the element in the page that was our wrapper class. Let&#8217;s go back to that HTML again:</p>
<pre class="brush: xml; title: ; notranslate" title="">
&lt;div id=&quot;content&quot;&gt;
	&lt;div class=&quot;post&quot;&gt;...&lt;/div&gt;
	&lt;div class=&quot;post&quot;&gt;...&lt;/div&gt;
	&lt;div class=&quot;post&quot;&gt;...&lt;/div&gt;
&lt;/div&gt;
</pre>
<p>See how the &#8220;id=content&#8221; is the big wrapper for our posts? Well, we tell the Infinite Scroll code that, it then uses it in the Javascript to know where to append the new posts to. Easy.</p>
<h3>Step 3: Finishing touches</h3>
<p>Simply speaking, that&#8217;s all there really is to it. But, there&#8217;s additional ways to customize it for your particular theme, to look better. Each of these is an option you can add to that add_theme_support call. Let&#8217;s go over them briefly:</p>
<p><strong>Footer</strong>: You may have noticed when you enabled this and test it that you now have a sort of white footer overlay at the bottom of the page. This provides the page with a footer space that scrolls with the page, giving it a sort of finished look. Some people may like it, some not so much. We can use the footer option to adjust it.</p>
<p>First, using &#8216;footer&#8217;=&gt;false will simply turn it off.</p>
<p>Alternatively, giving it the ID of some other element on the page will make it match that element&#8217;s width. For example, if you have HTML that looks like this:</p>
<pre class="brush: xml; title: ; notranslate" title="">
&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;content&quot;&gt;
		&lt;div class=&quot;post&quot;&gt;...&lt;/div&gt;
	&lt;/div&gt;
	&lt;div id=&quot;sidebar&quot;&gt;
		&lt;div&gt;...&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</pre>
<p>..then using &#8216;footer&#8217;=&gt;&#8217;page&#8217; would make it match the width of the &#8220;page&#8221; element, so as to be the proper width across the screen to fit better with the page.</p>
<p><strong>Type</strong>: Infinite Scroll supports two methods of loading new posts. One method is called &#8216;scroll&#8217;, where new posts are loaded as the user reaches the bottom of the page. When they scroll, essentially. The other is called &#8216;click&#8217;, which adds in a new button towards the bottom of the posts, and when you click it, it loads more posts. You can force one type or the other using the &#8216;type&#8217; option.</p>
<p><strong>Footer Widgets</strong>: Some themes support having widget spaces in the footer. This has become fairly commonplace after Twenty Ten did it. Well, if you&#8217;re using the scroll type, then the widgets won&#8217;t be seen for a while on some blogs, since it will just load in more posts and keep pushing that footer further down. You could set the type to click to allow the footer to actually be seen.</p>
<p>The &#8216;footer_widgets&#8217; option lets you specify a widget space that you registered with register_sidebar(). It will check that space to see if there&#8217;s any widgets in it. If there are, then it will automatically set type to &#8220;click&#8221; so that those widgets can be seen. If not, then it will let the type stay as &#8220;scroll&#8221;. Thus, it can choose the type intelligently, depending on whether widgets exist in the footer or not.</p>
<p><strong>Wrapper</strong>: If you have some complex HTML for your posts, then you can give the &#8216;wrapper&#8217; option a classname to use. It will wrap the returned posts in a div with that custom classname for you. This also allows you a way to perform styling tricks on those just-loaded posts.</p>
<p><strong>Render</strong>: The &#8216;render&#8217; option gives you an alternative to making a content template part. You can give this a function name, and that function will be called to render the posts instead. If you&#8217;re writing a theme, I suggest using the content template part instead. It&#8217;s easier and way more flexible.</p>
<p><strong>Posts per page</strong>: By default, the Infinite Scroll module makes the page show 7 posts only, then more load when you scroll down (for the &#8216;scroll&#8217; type). This is smaller than most people&#8217;s settings (default of which is 10), but it doesn&#8217;t matter since the whole point is to make it load new posts when you scroll down to them. If you happen to need a different number, you can use the &#8216;posts_per_page&#8217; option to change the number.</p>
<p>There&#8217;s also a few things you can do with CSS.</p>
<p>When infinite scrolling is enabled, then body_class (which you should have been using in the body tag anyway) will get the &#8220;infinite-scroll&#8221; class added to it. If the type setting is &#8216;scroll&#8217; instead of &#8216;click&#8217;, then the class &#8220;neverending&#8221; will be there too. Also, once the user gets to the last post, the javascript code adds an &#8220;infinity-end&#8221; class to the body, meaning that you can style what happens when the user gets to the end. Jetpack&#8217;s documentation page suggests hiding the normal footer until the user actually reaches it, using CSS like this:</p>
<pre class="brush: css; title: ; notranslate" title="">
/* Hides navigation links and site footer when infinite scroll is active */
.infinite-scroll #navigation,
.infinite-scroll.neverending #footer {
	display: none;
}
/* Shows the footer again in case all posts have been loaded */
.infinity-end.neverending #footer {
	display: block;
}
</pre>
<p>But obviously you can use it for more than just this functionality; because it&#8217;s on the body, the classes can be used to adjust anything on the page, and make them different with the infinite scroll than without it.</p>
<p>You can also style the &#8220;span.infinite-loader&#8221;. This is the spinning handle thing that shows up at the bottom of posts, before the new ones load in. Honestly, the loading is pretty quick and the default style looks pretty good to me. You can adjust the style of it if you like, perhaps to make it more centered on the container.</p>
<p>The div#infinite-handle will be the box that shows up to load more posts, if the type is set to &#8220;click&#8221;. You can use this to reposition the box, make it wider, change the color, etc.</p>
<p>Finally, if you are doing anything extremely tricky with Javascript, loading in new posts may be not handled precisely well by your existing code. The official support page methods a post-load event fired on document.body that occurs when the posts are loaded. You should <a href="http://jetpack.me/support/infinite-scroll/">refer to that documentation</a> for more info on it, if needed.</p>
<h3>Summary</h3>
<p>On the whole, it&#8217;s a clever module to add to Jetpack. It still has some problems with specific sorts of content (some videos display very wonky sometimes), but I&#8217;m sure they&#8217;ll have that sorted out before too long. Adding support for it in your theme might also get you thinking about Template Parts and how to use them, and that&#8217;s definitely a good thing to be doing.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/e0' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/infinite-scroll/" rel="tag">infinite scroll</a>, <a href="http://ottopress.com/tag/jetpack/" rel="tag">jetpack</a>, <a href="http://ottopress.com/tag/template-part/" rel="tag">template part</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/other/" title="View all posts in Other" rel="category tag">Other</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/jetpack-and-the-infinite-scroll/#comments" title="Comment on Jetpack and the Infinite Scroll">25 Comments</a>									 </div>
			</div>			<div id="post-849" class="post-849 post type-post status-publish format-standard hentry category-code category-wordpress tag-i18n tag-internationalization tag-l10n tag-localization tag-php tag-translation tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2012/more-internationalization-fun/" rel="bookmark" title="Permanent Link to More Internationalization Fun" itemprop="url"><span itemprop="name">More Internationalization Fun</span></a></h2>
				<div class="postmetadata">September 19, 2012, 5:10 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><a href="http://i2.wp.com/ottopress.com/files/2012/02/international_flags.jpg"><img src="http://i2.wp.com/ottopress.com/files/2012/02/international_flags.jpg?resize=280%2C280" alt="" title="international_flags" class="alignright size-full wp-image-777" data-recalc-dims="1" /></a><br />
So in my <a href="http://ottopress.com/2012/internationalization-youre-probably-doing-it-wrong/">last post about Internationalization</a>, I covered some non-obvious things that you should consider when adding translation capabilities to your code.</p>
<p>Today, let&#8217;s add to that by covering some non-obvious translation functions. You&#8217;re probably not using these, since they don&#8217;t get talked about as much. But there&#8217;s probably places where you should be using them, so knowing about them is the first step. And <a href="http://www.youtube.com/watch?v=P4mQ7UUkjro">knowing is half the battle</a>.</p>
<h3>Basic functions, again</h3>
<p>Last time I talked about these functions:</p>
<ul>
<li><code>__()</code></li>
<li><code>_e()</code></li>
<li><code>_x()</code></li>
<li><code>_ex()</code></li>
<li><code>_n()</code></li>
</ul>
<p>Let&#8217;s cover the ones I didn&#8217;t talk about.</p>
<h3>Escaping output</h3>
<p>In practice, you tend to use these mostly when outputting things onto the main page or in the admin. But, one thing you also use a lot when outputting text is the standard escaping functions. These are things like <code>esc_html()</code>, which outputs text in a way that makes it &#8220;safe&#8221; to go onto a webpage, without being interpreted as HTML. If the text comes from user input, then this is a good idea.</p>
<p>Now, if you think about it, then the text you have may be translated in some other file, which you don&#8217;t control either. So escaping that text might be a good idea too. If somebody snuck bad code into a translation file, a user might get bad things displayed without being able to easily find it.</p>
<p>So you could write something like <code>echo esc_html(__('text','text-domain'))</code>, but that&#8217;s a bit wordy. Let&#8217;s talk about some shortcuts.</p>
<p>The <code>esc_html__()</code> function is the equivalent of <code>esc_html(__(...))</code>. It does the escaped html and the double-underscore translation all in one go. Similarly, the <code>esc_html_e()</code> function does the same thing, but it echoes the result, just like the <code>_e()</code> function would. And there&#8217;s also <code>esc_html_x()</code>, which is the equivalent of combining <code>esc_html()</code> and <code>_x()</code>.</p>
<p>Along with those three are the three identical equivalents for attributes: <code>esc_attr__()</code>, <code>esc_attr_e()</code>, and <code>esc_attr_x()</code>. As the name implies, these combine the translation functions with <code>esc_attr()</code>, which is the escape function specifically intended when you&#8217;re outputting text into html attributes.</p>
<p>Also note there&#8217;s no shortcut for the equivalent of <code>_ex()</code>. It&#8217;s just not used that much, or at least not enough to need something special for it. Use an <code>echo esc_html_x()</code> instead.</p>
<p>There are no shortcuts for the other escaping functions as yet, but these can save a few keystrokes and make your code that much more readable.</p>
<h3>The Numerical No-op</h3>
<p>So we&#8217;ve got some shortcuts for escaping with those three functions, but where&#8217;s the love for <code>_n()</code>?</p>
<p>One of the problems with <code>_n()</code> is that it tends to require the strings to be in the same place that the PHP variable is. For all the other functions, you could have a big file of strings in an array, and then reference those strings by name or something elsewhere because they don&#8217;t require any PHP variables. Nothing about them is computed at the time of the output.</p>
<p>But not so with <code>_n()</code>, that $number to decide which string to use means that the strings have to be right there, they can&#8217;t be translated separately and referenced.</p>
<p>This is where <code>_n_noop()</code> comes in. The <code>_n_noop()</code> function basically takes the singular and plural strings for something, along with the text domain, and stores them in an array so that they can be referenced later by a function named <code>translate_nooped_plural()</code>.</p>
<p>Perhaps an example is in order. Let&#8217;s go back to the tacos:</p>
<pre class="brush: php; title: ; notranslate" title="">
$string = sprintf( _n('You have %d taco.', 'You have %d tacos.', $number, 'plugin-domain'), $number );
</pre>
<p>What if we wanted those strings somewhere else? Like in a big file with all of our strings. Here&#8217;s a way to separate the strings from the _n() call:</p>
<pre class="brush: php; title: ; notranslate" title="">
$taco_plural = _n_noop('You have %d taco.', 'You have %d tacos.', 'plugin-domain');
$string = sprintf( translate_nooped_plural( $taco_plural, $number) , $number );
</pre>
<p>Now, that $taco_plural can be defined anywhere. Note that it contains no references to PHP variables. It&#8217;s basically static and unchanging. This allows us to separate it, then reference it elsewhere for the actual translation. The <code>translate_nooped_plural()</code> function performs the same job as <code>_n()</code> does, choosing which string to use based on the $number of tacos. The sprintf then pushes the $number into the chosen string, replacing the %d with the number.</p>
<p>Thus, that lets us extract the translatable strings out and put them anywhere we choose.</p>
<p>Also of note: The <code>_nx_noop()</code> function is a cross between <code>_n_noop()</code> and <code>_x()</code>. It takes a context for the translators as the third argument, and the domain becomes the fourth argument. Useful if you need to explain to the translators the context surrounding the pluralization choice.</p>
<h3>Numbers and Dates</h3>
<p>The <code>number_format_i18n()</code> function is functionally equivalent to the <a href="http://php.net/manual/en/function.number-format.php">PHP number_format</a> function. It lets you format numbers with commas at the thousands mark and so forth, except that it also takes localization into account. Not everybody uses commas for thousands and periods for decimals. This function will do the translation appropriately for that aspect.</p>
<p>The <code>date_i18n()</code> function is functionally equivalent to the <a href="http://php.net/manual/en/function.date.php">PHP date</a> function. It will handle all the same string formatting parameters as date() will, but it will cause output to be translated for month names, day-of-week names, and so forth. Of note is that it doesn&#8217;t change the format requested. If some places put days before months, for example, it won&#8217;t handle that. But it will output the month name in the native language (if the translation pack has the right month name in it). So you may want to run the date formatting string through <code>__()</code> as well, to let translators adjust the date format accordingly.</p>
<h3>Wrap up</h3>
<p>And that&#8217;s pretty much all the rest of the translation functions that I didn&#8217;t cover before. I may have forgotten a few useful ones here or there. Feel free to comment about anything I missed, or what you see most often, especially if you&#8217;re doing translations yourself.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/bo' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/i18n/" rel="tag">i18n</a>, <a href="http://ottopress.com/tag/internationalization/" rel="tag">internationalization</a>, <a href="http://ottopress.com/tag/l10n/" rel="tag">l10n</a>, <a href="http://ottopress.com/tag/localization/" rel="tag">localization</a>, <a href="http://ottopress.com/tag/php/" rel="tag">PHP</a>, <a href="http://ottopress.com/tag/translation/" rel="tag">translation</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2012/more-internationalization-fun/#comments" title="Comment on More Internationalization Fun">7 Comments</a>									 </div>
			</div>
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/category/code/page/2/?repeat=w3tc" >&laquo; Previous Entries</a></div>
			<div class="alignright"></div>
		</div>
		
	
	</div>
	<div id="sidebar">
		<ul>
			
			<li id="paypal-donate" class="widget widget_wpaypal"><h2 class="widgettitle">Buy Otto a Beer</h2>
<div style="margin-top:5px;margin-bottom:5px;text-align:left;">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
		<p><input type="hidden" name="cmd" value="_xclick" />
		<input type="hidden" name="business" value="otto@ottodestruct.com" />
		<input type="hidden" name="item_name" value="Donation to Otto on WordPress" />
		<input type="hidden" name="item_number" value="0" />
		<input type="hidden" name="notify_url" value="" />
		<input type="hidden" name="no_shipping" value="1" /><input type="hidden" name="return" value="http://ottopress.com" />
		<input type="hidden" name="no_note" value="1" />
		<input type="hidden" name="tax" value="0" />
		<input type="hidden" name="bn" value="PP-DonationsBF" />
		<input type="hidden" name="on0" value="Website" />
		Currency: <br />
		<select id="currency_code" name="currency_code">
		<option value="USD">U.S. Dollars</option>
		<option value="AUD">Australian Dollars</option>
		<option value="CAD">Canadian Dollars</option>
		<option value="EUR">Euros</option>
		<option value="GBP">Pounds Sterling</option>
		<option value="JPY">Yen</option></select></p>
		<p>Amount: <br /><input type="text" name="amount" size="16" title="The amount you wish to donate" value="5.00" /></p>
		<p>Website(Optional): <br /><input type="text" size="16" title="Your website (will be displayed)" name="os0" value="" /></p><p><input class="ppimg" type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" name="submit" style="border:0;" alt="Make payments with PayPal - fast, free and secure" /></p></form></div></li>
<li id="text-7" class="widget widget_text">			<div class="textwidget">Hey, I also take Bitcoins! Send them to: </br>
<a href="bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg">
<img src="https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg" /><br />
1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg</a></div>
		</li>
<li id="text-5" class="widget widget_text"><h2 class="widgettitle">Subscribe!</h2>
			<div class="textwidget"><!-- <a href="https://plus.google.com/111166992820603637934?prsrc=3" style="cursor:pointer;display:inline-block;text-decoration:none;color:#333;font:13px/16px arial,sans-serif;"><span style="display:inline-block;font-weight:bold;vertical-align:top;margin-right:5px;margin-top:8px;">Otto on WordPress</span><span style="display:inline-block;vertical-align:top;margin-right:15px;margin-top:8px;">on</span><img src="https://ssl.gstatic.com/images/icons/gplus-32.png" alt="" style="border:0;width:32px;height:32px;"/></a>
-->
<div class="g-plus" data-href="https://plus.google.com/111166992820603637934?rel=publisher" data-width="250" data-height="131" data-theme="light"></div>
</div>
		</li>
<li id="blog_subscription-3" class="widget jetpack_subscription_widget"><h2 class="widgettitle"><label for="subscribe-field"></label></h2>

		<form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3">
			<p id="subscribe-text">Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p><p>Join 331 other subscribers</p>

			<p id="subscribe-email"><input type="text" name="email" value="Email Address" id="subscribe-field" onclick="if ( this.value == 'Email Address' ) { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = 'Email Address'; }" /></p>

			<p id="subscribe-submit">
				<input type="hidden" name="action" value="subscribe" />
				<input type="hidden" name="source" value="http://ottopress.com/category/code/?repeat=w3tc" />
				<input type="hidden" name="sub-type" value="widget" />
				<input type="hidden" name="redirect_fragment" value="blog_subscription-3" />
								<input type="submit" value="Subscribe" name="jetpack_subscriptions_widget" />
			</p>
		</form>

		
</li>
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Email Me</h2>
			<div class="textwidget"><ul><li><span class="vcard microid-mailto+http:sha1:23e9670868f6d2b16fe1f6b3db80c8f0423a082a">
<span style="display:none;">
<span class="adr">
 <span class="locality">Memphis</span>,
 <span class="region">TN</span>
 <span class="postal-code">38103</span>
 <span class="country-name">U.S.A.</span>
</span>
<a class="url fn" href="http://ottodestruct.com">Otto</a>
<span class="uid">240cf86e-5cad-11dc-8314-0800200c9a66</span>
</span>
<a class="email" href="mailto:otto@ottodestruct.com">otto@ottodestruct.com</a></span></li></ul>
<a rel="author" href="https://plus.google.com/100201852715113506716?rel=author">
  <img src="https://ssl.gstatic.com/images/icons/gplus-16.png" width="16" height="16">
</a>
</a>
<!-- 

This rant is hidden in HTML comments. If I pointed you to it, then you probably emailed me about the fact that my email address is in plaintext directly above this comment. If you happened to run across it because you just like looking at HTML comments, well, easter egg! :)

YES, that is a bare mailto: href above. 
YES, that is my real email address. 
And YES, it's intentional.

Obfuscating your email address on the web is stupid. 

Firstly, hiding your email address doesn't prevent spam. Spammers get addresses in bulk from mailing lists and websites and other sources. Sure, some scrapers exist, but they are by far the minority of the sources for email lists.

Secondly, hiding your email address ruins the whole point of email. The purpose of publishing my email address is so that anybody, and I do mean *anybody*, can email me. Before the days of cell phones, your phone number and physical address used to be published in a big book that everybody received, for free, on a semi-annual basis. It had distinctive yellow pages in it. Your contact information is not, and never was supposed to be, private information. Treating it as such is stupid.

Thirdly, I have great spam protection. For one, I use GMail, which has frankly incredible filtering because of the volume of mail they deal with. For another, I use various sets of filters to categorize incoming mail into various categories of things. Hell, I can even run statistics on it, if I want. This is a much better solution than continually giving out fake email addresses, or using +stuff to figure out who sent what where... I'd prefer to simply let my filters deal with it instead. 

Finally, if you're one of those systems that scours the web and/or social networks for visible email addresses and then automatically emails that person to let them know that their address is visible, then by all means please just fuck off and die. You're part of the problem. On the other hand, if you're just a regular guy with good intentions, then this doesn't apply to you. :)

Just my 2 cents.

--></div>
		</li>
<li id="categories-2" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-573 current-cat"><a href="http://ottopress.com/category/code/" title="View all posts filed under Code">Code</a>
</li>
	<li class="cat-item cat-item-574"><a href="http://ottopress.com/category/other/" title="View all posts filed under Other">Other</a>
</li>
	<li class="cat-item cat-item-575"><a href="http://ottopress.com/category/rants/" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://ottopress.com/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-576"><a href="http://ottopress.com/category/wordpress/" title="View all posts filed under WordPress">WordPress</a>
</li>
		</ul>
</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://ottopress.com/2014/02/'>February 2014</a></li>
	<li><a href='http://ottopress.com/2013/11/'>November 2013</a></li>
	<li><a href='http://ottopress.com/2013/10/'>October 2013</a></li>
	<li><a href='http://ottopress.com/2013/06/'>June 2013</a></li>
	<li><a href='http://ottopress.com/2013/03/'>March 2013</a></li>
	<li><a href='http://ottopress.com/2012/11/'>November 2012</a></li>
	<li><a href='http://ottopress.com/2012/09/'>September 2012</a></li>
	<li><a href='http://ottopress.com/2012/08/'>August 2012</a></li>
	<li><a href='http://ottopress.com/2012/07/'>July 2012</a></li>
	<li><a href='http://ottopress.com/2012/05/'>May 2012</a></li>
	<li><a href='http://ottopress.com/2012/02/'>February 2012</a></li>
	<li><a href='http://ottopress.com/2012/01/'>January 2012</a></li>
	<li><a href='http://ottopress.com/2011/12/'>December 2011</a></li>
	<li><a href='http://ottopress.com/2011/11/'>November 2011</a></li>
	<li><a href='http://ottopress.com/2011/10/'>October 2011</a></li>
	<li><a href='http://ottopress.com/2011/09/'>September 2011</a></li>
	<li><a href='http://ottopress.com/2011/08/'>August 2011</a></li>
	<li><a href='http://ottopress.com/2011/07/'>July 2011</a></li>
	<li><a href='http://ottopress.com/2011/06/'>June 2011</a></li>
	<li><a href='http://ottopress.com/2011/05/'>May 2011</a></li>
	<li><a href='http://ottopress.com/2011/04/'>April 2011</a></li>
	<li><a href='http://ottopress.com/2011/03/'>March 2011</a></li>
	<li><a href='http://ottopress.com/2011/02/'>February 2011</a></li>
	<li><a href='http://ottopress.com/2011/01/'>January 2011</a></li>
	<li><a href='http://ottopress.com/2010/12/'>December 2010</a></li>
	<li><a href='http://ottopress.com/2010/11/'>November 2010</a></li>
	<li><a href='http://ottopress.com/2010/10/'>October 2010</a></li>
	<li><a href='http://ottopress.com/2010/09/'>September 2010</a></li>
	<li><a href='http://ottopress.com/2010/08/'>August 2010</a></li>
	<li><a href='http://ottopress.com/2010/06/'>June 2010</a></li>
	<li><a href='http://ottopress.com/2010/05/'>May 2010</a></li>
	<li><a href='http://ottopress.com/2010/04/'>April 2010</a></li>
	<li><a href='http://ottopress.com/2010/03/'>March 2010</a></li>
	<li><a href='http://ottopress.com/2010/02/'>February 2010</a></li>
	<li><a href='http://ottopress.com/2009/11/'>November 2009</a></li>
	<li><a href='http://ottopress.com/2009/09/'>September 2009</a></li>
	<li><a href='http://ottopress.com/2008/09/'>September 2008</a></li>
		</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/">Better Know a Vulnerability: SQL Injection</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/language-packs-101-prepwork/">Language Packs 101 &#8211; Prepwork</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/slides-a-presentation-theme/">Slides: A Presentation Theme</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/">I&#8217;m not a fan of orange&#8230;</a>
						</li>
				</ul>
		</li>
<li id="text-6" class="widget widget_text"><h2 class="widgettitle">WP Core Contributions</h2>
			<div class="textwidget"><p>
<a href='http://core.trac.wordpress.org/changeset/28072'>[28072]</a> - <a href='http://core.trac.wordpress.org/ticket/19393'>#19393</a><br />
<a href='http://core.trac.wordpress.org/changeset/27522'>[27522]</a> - <a href='http://core.trac.wordpress.org/ticket/19889'>#19889</a><br />
<a href='http://core.trac.wordpress.org/changeset/27399'>[27399]</a> - <a href='http://core.trac.wordpress.org/ticket/25665'>#25665</a><br />
<a href='http://core.trac.wordpress.org/changeset/26978'>[26978]</a> - <a href='http://core.trac.wordpress.org/ticket/23149'>#23149</a><br />
<a href='http://core.trac.wordpress.org/changeset/26711'>[26711]</a> - <a href='http://core.trac.wordpress.org/ticket/21442'>#21442</a><br />
<a href='http://core.trac.wordpress.org/changeset/26072'>[26072]</a> - <a href='http://core.trac.wordpress.org/ticket/25858'>#25858</a><br />
<a href='http://core.trac.wordpress.org/changeset/22152'>[22152]</a> - <a href='http://core.trac.wordpress.org/ticket/21914'>#21914</a><br />
<a href='http://core.trac.wordpress.org/changeset/22026'>[22026]</a> - <a href='http://core.trac.wordpress.org/ticket/22002'>#22002</a><br />
<a href='http://core.trac.wordpress.org/changeset/21839'>[21839]</a> - <a href='http://core.trac.wordpress.org/ticket/16996'>#16996</a><br />
<a href='http://core.trac.wordpress.org/changeset/21802'>[21802]</a> - <a href='http://core.trac.wordpress.org/ticket/18674'>#18674</a><br />
<a href='http://core.trac.wordpress.org/changeset/21776'>[21776]</a> - <a href='http://core.trac.wordpress.org/ticket/13729'>#13729</a><br />
<a href='http://core.trac.wordpress.org/changeset/21609'>[21609]</a> - <a href='http://core.trac.wordpress.org/ticket/19324'>#19324</a><br />
<a href='http://core.trac.wordpress.org/changeset/20916'>[20916]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20784'>[20784]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20783'>[20783]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20267'>[20267]</a> - <a href='http://core.trac.wordpress.org/ticket/13774'>#13774</a><br />
<a href='http://core.trac.wordpress.org/changeset/19721'>[19721]</a> - <a href='http://core.trac.wordpress.org/ticket/19626'>#19626</a><br />
<a href='http://core.trac.wordpress.org/changeset/19003'>[19003]</a> - <a href="http://core.trac.wordpress.org/ticket/17406">#17406</a><br />
<a href='http://core.trac.wordpress.org/changeset/18741'>[18741]</a> - <a href="http://core.trac.wordpress.org/ticket/15473">#15473</a><br />
<a href='http://core.trac.wordpress.org/changeset/18602'>[18602]</a> - <a href="http://core.trac.wordpress.org/ticket/18230">#18230</a><br />
<a href='http://core.trac.wordpress.org/changeset/18541'>[18541]</a> - <a href="http://core.trac.wordpress.org/ticket/16687">#16687</a><br />
<a href='http://core.trac.wordpress.org/changeset/18205'>[18205]</a> - <a href="http://core.trac.wordpress.org/ticket/17148">#17148</a><br />
<a href='http://core.trac.wordpress.org/changeset/17254'>[17254]</a> - <a href="http://core.trac.wordpress.org/ticket/16192">#16192</a><br />
<a href='http://core.trac.wordpress.org/changeset/16555'>[16555]</a> - <a href="http://core.trac.wordpress.org/ticket/12891">#12891</a><br />
<a href='http://core.trac.wordpress.org/changeset/16284'>[16284]</a> - <a href="http://core.trac.wordpress.org/ticket/13324">#13324</a><br />
<a href='http://core.trac.wordpress.org/changeset/13420'>[13420]</a> - <a href="http://core.trac.wordpress.org/ticket/12291">#12291</a><br />
<a href='http://core.trac.wordpress.org/changeset/12581'>[12581]</a> - <a href="http://core.trac.wordpress.org/ticket/7225">#7225</a><br />
<a href='http://core.trac.wordpress.org/changeset/11738'>[11738]</a> - <a href="http://core.trac.wordpress.org/ticket/10145">#10145</a><br />
<a href='http://core.trac.wordpress.org/changeset/11329'>[11329]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10962'>[10962]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10757'>[10757]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10753'>[10753]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10252'>[10252]</a> - <a href="http://core.trac.wordpress.org/ticket/6791">#6791</a><br />
<a href='http://core.trac.wordpress.org/changeset/9276'>[9276]</a> - <a href="http://core.trac.wordpress.org/ticket/7124">#7124</a><br />
<a href='http://core.trac.wordpress.org/changeset/9209'>[9209]</a> - <a href="http://core.trac.wordpress.org/ticket/7901">#7901</a><br />
<a href='http://core.trac.wordpress.org/changeset/9207'>[9207]</a> - <a href="http://core.trac.wordpress.org/ticket/7635">#7635</a><br />
<a href='http://core.trac.wordpress.org/changeset/9139'>[9139]</a> - <a href="http://core.trac.wordpress.org/ticket/7847">#7847</a><br />
<a href='http://core.trac.wordpress.org/changeset/9089'>[9089]</a> - <a href="http://core.trac.wordpress.org/ticket/7772">#7772</a><br />
<a href='http://core.trac.wordpress.org/changeset/8968'>[8968]</a> - <a href="http://core.trac.wordpress.org/ticket/7761">#7761</a><br />
<a href='http://core.trac.wordpress.org/changeset/8285'>[8285]</a> - <a href="http://core.trac.wordpress.org/ticket/6879">#6879</a><br />
<a href='http://core.trac.wordpress.org/changeset/8208'>[8208]</a> - <a href="http://core.trac.wordpress.org/ticket/4448">#4448</a><br />
<a href='http://core.trac.wordpress.org/changeset/8132'>[8132]</a> - <a href="http://core.trac.wordpress.org/ticket/4954">#4954</a><br />
<a href='http://core.trac.wordpress.org/changeset/8131'>[8131]</a> - <a href="http://core.trac.wordpress.org/ticket/6590">#6590</a><br />
<a href='http://core.trac.wordpress.org/changeset/7869'>[7869]</a> - <a href="http://core.trac.wordpress.org/ticket/6513">#6513</a><br />
<a href='http://core.trac.wordpress.org/changeset/7647'>[7647]</a> - <a href="http://core.trac.wordpress.org/ticket/6608">#6608</a><br />
<a href='http://core.trac.wordpress.org/changeset/7461'>[7461]</a> - <a href="http://core.trac.wordpress.org/ticket/6339">#6339</a><br />
<a href='http://core.trac.wordpress.org/changeset/6873'>[6873]</a> - <a href="http://core.trac.wordpress.org/ticket/4986">#4986</a><br />
<a href='http://core.trac.wordpress.org/changeset/6760'>[6760]</a> - <a href="http://core.trac.wordpress.org/ticket/4617">#4617</a><br />
<a href='http://core.trac.wordpress.org/changeset/6616'>[6616]</a> - <a href="http://core.trac.wordpress.org/ticket/5155">#5155</a><br />
<a href='http://core.trac.wordpress.org/changeset/6439'>[6439]</a> - <a href="http://core.trac.wordpress.org/ticket/2805">#2805</a><br />
<a href='http://core.trac.wordpress.org/changeset/6091'>[6091]</a> - <a href="http://core.trac.wordpress.org/ticket/4182">#4182</a><br />
<a href='http://core.trac.wordpress.org/changeset/6086'>[6086]</a> - <a href="http://core.trac.wordpress.org/ticket/4946">#4946</a><br />
<a href='http://core.trac.wordpress.org/changeset/5986'>[5986]</a> - <a href="http://core.trac.wordpress.org/ticket/4873">#4873</a><br />
<a href='http://core.trac.wordpress.org/changeset/5982'>[5982]</a> - <a href="http://core.trac.wordpress.org/ticket/4800">#4800</a><br />
<a href='http://core.trac.wordpress.org/changeset/5958'>[5958]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5920'>[5920]</a> - <a href="http://core.trac.wordpress.org/ticket/4703">#4703</a><br />
<a href='http://core.trac.wordpress.org/changeset/5910'>[5910]</a> - <a href="http://core.trac.wordpress.org/ticket/4654">#4654</a><br />
<a href='http://core.trac.wordpress.org/changeset/5881'>[5881]</a> - <a href="http://core.trac.wordpress.org/ticket/4704">#4704</a><br />
<a href='http://core.trac.wordpress.org/changeset/5857'>[5857]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5848'>[5848]</a> - <a href="http://core.trac.wordpress.org/ticket/4499">#4499</a><br />
<a href='http://core.trac.wordpress.org/changeset/5845'>[5845]</a> - <a href="http://core.trac.wordpress.org/ticket/4547">#4547</a><br />
<a href='http://core.trac.wordpress.org/changeset/5317'>[5317]</a> - <a href="http://core.trac.wordpress.org/ticket/4169">#4169</a><br />
<a href='http://core.trac.wordpress.org/changeset/5154'>[5154]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5151'>[5151]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5104'>[5104]</a> - <a href="http://core.trac.wordpress.org/ticket/3790">#3790</a><br />
<a href='http://core.trac.wordpress.org/changeset/4964'>[4964]</a> - <a href="http://core.trac.wordpress.org/ticket/3898">#3898</a><br />
</p></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<div style="float:left;"><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
<a href="http://ottopress.com/feed/">Entries (RSS)</a> and <a href="http://ottopress.com/comments/feed/">Comments (RSS)</a>.<br />
<span about="http://ottodestruct.com/" xmlns:cc="http://creativecommons.org/ns#">
This page, by <a property="cc:attributionName" rel="cc:attributionURL" href="http://ottodestruct.com/">Otto</a>, is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License</a>.</span><br />
Powered by <a href="http://wordpress.org/" title="Powered by WordPress.">WordPress</a>.<br />
		<script type="text/javascript">
		//<![CDATA[
		var infiniteScroll = {"settings":{"id":"content","ajaxurl":"http:\/\/ottopress.com\/?infinity=scrolling","type":"scroll","wrapper":false,"wrapper_class":"infinite-wrap","footer":false,"click_handle":"1","text":"Older posts","totop":"Scroll back to top","currentday":"26.02.14","order":"DESC","scripts":[],"styles":[],"google_analytics":false,"offset":0,"history":{"host":"ottopress.com","path":"\/category\/code\/page\/%d\/","use_trailing_slashes":true,"parameters":"?repeat=w3tc"},"query_args":{"category_name":"code","error":"","m":"","p":0,"post_parent":"","subpost":"","subpost_id":"","attachment":"","attachment_id":0,"name":"","static":"","pagename":"","page_id":0,"second":"","minute":"","hour":"","day":0,"monthnum":0,"year":0,"w":0,"tag":"","cat":573,"tag_id":"","author":"","author_name":"","feed":"","tb":"","paged":0,"comments_popup":"","meta_key":"","meta_value":"","preview":"","s":"","sentence":"","fields":"","menu_order":"","category__in":[],"category__not_in":[],"category__and":[],"post__in":[],"post__not_in":[],"tag__in":[],"tag__not_in":[],"tag__and":[],"tag_slug__in":[],"tag_slug__and":[],"post_parent__in":[],"post_parent__not_in":[],"author__in":[],"author__not_in":[],"posts_per_page":7,"ignore_sticky_posts":false,"suppress_filters":false,"cache_results":true,"update_post_term_cache":true,"update_post_meta_cache":true,"post_type":"","nopaging":false,"comments_per_page":"50","no_found_rows":false,"order":"DESC"},"last_post_date":"2012-09-19 17:10:04","stats":"blog=12342457&host=ottopress.com&v=ext&j=1:3.0.2&x_pagetype=infinite-jetpack"}};
		//]]>
		</script>
		<img alt='css.php' src="http://ottopress.com/wp-content/plugins/cookies-for-comments/css.php?k=c6a73cb029f035cdaa9e9e8336d25169&amp;o=i&amp;t=1303526696" width='1' height='1' />	<div style="display:none">
	</div>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushXml.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCss.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.js?ver=20140514'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en-US","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.14.2'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
<script type="text/javascript">
			jQuery.extend( infiniteScroll.settings.scripts, ["jquery-core","jquery-migrate","jquery","tiled-gallery","spin","jquery.spin","syntaxhighlighter-core","syntaxhighlighter-brush-php","syntaxhighlighter-brush-xml","syntaxhighlighter-brush-css","the-neverending-homepage","jetpack-photon","devicepx","mediaelement","wp-mediaelement","grofiles-cards","wpgroho"] );
			jQuery.extend( infiniteScroll.settings.styles, ["yarppWidgetCss","jetpack-subscriptions","the-neverending-homepage","tiled-gallery","mediaelement","wp-mediaelement"] );
		</script>
	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.2',blog:'12342457',post:'0',tz:'-5'});
	var load_cmc = function(){linktracker_init(12342457,0,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></div></div>

<script type="text/javascript">
    window._idl = {};
    _idl.variant = "modal";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

</body>
</html>

