http://www.depesz.com/2009/01/21/waiting-for-84-window-functions/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 13:11:23 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=1369>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Waiting for 8.4 &#8211; window functions</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Waiting for 8.4 &#8211; window functions Comments Feed" href="http://www.depesz.com/2009/01/21/waiting-for-84-window-functions/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2009/01/21/waiting-for-84-window-functions/' />
<link rel='shortlink' href='http://www.depesz.com/?p=1369' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-1369">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2009/01/21/waiting-for-84-window-functions/" rel="bookmark" title="Permanent Link to Waiting for 8.4 &#8211; window functions">Waiting for 8.4 &#8211; window functions</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>January 21st, 2009 by depesz | Tags: <a href="http://www.depesz.com/tag/aggregate/" rel="tag">aggregate</a>, <a href="http://www.depesz.com/tag/avg/" rel="tag">avg</a>, <a href="http://www.depesz.com/tag/cumulative-sum/" rel="tag">cumulative sum</a>, <a href="http://www.depesz.com/tag/groups/" rel="tag">groups</a>, <a href="http://www.depesz.com/tag/partitions/" rel="tag">partitions</a>, <a href="http://www.depesz.com/tag/pg84/" rel="tag">pg84</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/rownum/" rel="tag">rownum</a>, <a href="http://www.depesz.com/tag/sum/" rel="tag">sum</a>, <a href="http://www.depesz.com/tag/window-functions/" rel="tag">window functions</a> |  <a href="http://www.depesz.com/2009/01/21/waiting-for-84-window-functions/#comments" title="Comment on Waiting for 8.4 &#8211; window functions">2 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>A <b>long</b> overdue post about new functionality. At this moment it is no longer such new, as it was committed on 28th of December (yes, I know, I should have written it earlier, Sorry).</p>
<p>On this day Tom Lane committed patch by Hitoshi Harada which adds support for so called window functions:</p>
<p><code>Support window functions a la SQL:2008.<br />
&nbsp;<br />
Hitoshi Harada, with some kibitzing from Heikki and Tom.</code></p>
<p><span id="more-1369"></span></p>
<p>Disclaimer: I find naming in this topic to be &#8220;a bit" confusing. I'm trying to explain it as I understand, but I might be wrong, and if I am, please comment, so others will benefit from clarifications.</p>
<p>What &#8220;window functions" are? What they do?</p>
<p>Well, window functions are function that can work on some subset of returned rows to gather some general statistics.</p>
<p>So, they &#8220;kind of" work like aggregates, but aggregates force you to return only 1 row per group, while in window function you can return many.</p>
<p>Simplest possible example:</p>
<p>This is aggregate:</p>
<p><code># select avg(i) from generate_series(1,3) i;<br />
        avg<br />
--------------------<br />
 2.0000000000000000<br />
(1 row)</code></p>
<p>There is only 1 group (all rows from generate_series(1,3), and it returns only 1 row).</p>
<p>But with window functions we can do something like this:</p>
<p><code># select i, avg(i) over () from generate_series(1,3) i;<br />
 i |        avg<br />
---+--------------------<br />
 1 | 2.0000000000000000<br />
 2 | 2.0000000000000000<br />
 3 | 2.0000000000000000<br />
(3 rows)</code></p>
<p>This is not something you could do with aggregates otherwise then using some kind of subselect.</p>
<p>Before I'll explain how my above query worked, let me introduce some basic concepts of window functions: partitions and windows.</p>
<p>Partition is generally the same as &#8220;group by" in standard aggregates. It generates groups (partitions), and all window functions calls are ran in &#8220;context" of given partition.</p>
<p>For example. Let's assume we have pretty simple table with people, their department and salary:</p>
<p><code>create table test (<br />
    person text,<br />
    dept text,<br />
    salary int4<br />
);</code></p>
<p>Now, let's put there some people:</p>
<p><code>insert into test (person, dept, salary) values<br />
( 'alexander', 'it',         3700 ),<br />
( 'benjamin',  'accounting', 2100 ),<br />
( 'bradley',   'marketing',  1000 ),<br />
( 'chandler',  'management', 2400 ),<br />
( 'fernando',  'marketing',  1650 ),<br />
( 'joey',      'management', 3250 ),<br />
( 'lincoln',   'accounting', 2950 ),<br />
( 'lj',        'it',         3250 ),<br />
( 'michael',   'accounting', 1700 ),<br />
( 'monica',    'management', 2950 ),<br />
( 'paul',      'accounting', 1650 ),<br />
( 'phoebe',    'accounting', 3700 ),<br />
( 'rachel',    'accounting', 2950 ),<br />
( 'ross',      'it',         1250 ),<br />
( 'sara',      'it',         2600 ),<br />
( 'theodore',  'management', 3250 )<br />
;</code></p>
<p>So, let's use window functions to show what is the salary of any given person against average salary in his department.</p>
<p>To do so, we will partition the data by department, and calculate averages in these partitions:</p>
<p><code># select person, dept, salary, avg(salary) over( partition by dept ) from test;<br />
  person   |    dept    | salary |          avg<br />
-----------+------------+--------+-----------------------<br />
 lincoln   | accounting |   2950 | 2508.3333333333333333<br />
 benjamin  | accounting |   2100 | 2508.3333333333333333<br />
 rachel    | accounting |   2950 | 2508.3333333333333333<br />
 phoebe    | accounting |   3700 | 2508.3333333333333333<br />
 paul      | accounting |   1650 | 2508.3333333333333333<br />
 michael   | accounting |   1700 | 2508.3333333333333333<br />
 alexander | it         |   3700 | 2700.0000000000000000<br />
 lj        | it         |   3250 | 2700.0000000000000000<br />
 ross      | it         |   1250 | 2700.0000000000000000<br />
 sara      | it         |   2600 | 2700.0000000000000000<br />
 chandler  | management |   2400 | 2962.5000000000000000<br />
 theodore  | management |   3250 | 2962.5000000000000000<br />
 joey      | management |   3250 | 2962.5000000000000000<br />
 monica    | management |   2950 | 2962.5000000000000000<br />
 fernando  | marketing  |   1650 | 1325.0000000000000000<br />
 bradley   | marketing  |   1000 | 1325.0000000000000000<br />
(16 rows)</code></p>
<p>As you can see it automatically sorted results by dept &#8211; this is side effect, and don't count on it.</p>
<p>Anyway &#8211; we can add our own sorting to this:</p>
<p><code># select person, dept, salary, avg(salary) over( partition by dept ) from test order by person;<br />
  person   |    dept    | salary |          avg<br />
-----------+------------+--------+-----------------------<br />
 alexander | it         |   3700 | 2700.0000000000000000<br />
 benjamin  | accounting |   2100 | 2508.3333333333333333<br />
 bradley   | marketing  |   1000 | 1325.0000000000000000<br />
 chandler  | management |   2400 | 2962.5000000000000000<br />
 fernando  | marketing  |   1650 | 1325.0000000000000000<br />
 joey      | management |   3250 | 2962.5000000000000000<br />
 lincoln   | accounting |   2950 | 2508.3333333333333333<br />
 lj        | it         |   3250 | 2700.0000000000000000<br />
 michael   | accounting |   1700 | 2508.3333333333333333<br />
 monica    | management |   2950 | 2962.5000000000000000<br />
 paul      | accounting |   1650 | 2508.3333333333333333<br />
 phoebe    | accounting |   3700 | 2508.3333333333333333<br />
 rachel    | accounting |   2950 | 2508.3333333333333333<br />
 ross      | it         |   1250 | 2700.0000000000000000<br />
 sara      | it         |   2600 | 2700.0000000000000000<br />
 theodore  | management |   3250 | 2962.5000000000000000<br />
(16 rows)</code></p>
<p>Pretty nifty, isn't it?</p>
<p>Especially, since you can:</p>
<p><code># select<br />
    person,<br />
    dept,<br />
    cast(<br />
        salary * 100 / avg(salary) over( partition by dept )<br />
        as numeric(5,2)<br />
    ) as percent_of_average<br />
from test<br />
order by percent_of_average desc;<br />
  person   |    dept    | percent_of_average<br />
-----------+------------+--------------------<br />
 phoebe    | accounting |             147.51<br />
 alexander | it         |             137.04<br />
 fernando  | marketing  |             124.53<br />
 lj        | it         |             120.37<br />
 rachel    | accounting |             117.61<br />
 lincoln   | accounting |             117.61<br />
 theodore  | management |             109.70<br />
 joey      | management |             109.70<br />
 monica    | management |              99.58<br />
 sara      | it         |              96.30<br />
 benjamin  | accounting |              83.72<br />
 chandler  | management |              81.01<br />
 bradley   | marketing  |              75.47<br />
 michael   | accounting |              67.77<br />
 paul      | accounting |              65.78<br />
 ross      | it         |              46.30<br />
(16 rows)</code></p>
<p>To quickly check who (in given department) is the most overpaid. Or looks like the most overpaid <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>So, I hope you understand what partition is. Now to the windows.</p>
<p>As you saw, all window functions that I called till now, worked on all rows in given partition.</p>
<p>It means that given &#8220;average" salary was average to whole department. Windows let you say that you want to calculate something for only part of the partition.</p>
<p>The 2 most common examples of such calculations are &#8220;rownum" and cumulative sum. I <a href="http://www.depesz.com/index.php/2007/08/17/rownum-anyone-cumulative-sum-in-one-query/">wrote</a> about them long time ago, but with 8.4 you can write it much simpler:</p>
<p>rownum using window functions:</p>
<p><code># select person, dept, salary, rank() over ( partition by dept order by salary ), row_number() over (partition by dept order by salary) from test;<br />
  person   |    dept    | salary | rank | row_number<br />
-----------+------------+--------+------+------------<br />
 paul      | accounting |   1650 |    1 |          1<br />
 michael   | accounting |   1700 |    2 |          2<br />
 benjamin  | accounting |   2100 |    3 |          3<br />
 lincoln   | accounting |   2950 |    4 |          4<br />
 rachel    | accounting |   2950 |    4 |          5<br />
 phoebe    | accounting |   3700 |    6 |          6<br />
 ross      | it         |   1250 |    1 |          1<br />
 sara      | it         |   2600 |    2 |          2<br />
 lj        | it         |   3250 |    3 |          3<br />
 alexander | it         |   3700 |    4 |          4<br />
 chandler  | management |   2400 |    1 |          1<br />
 monica    | management |   2950 |    2 |          2<br />
 joey      | management |   3250 |    3 |          3<br />
 theodore  | management |   3250 |    3 |          4<br />
 bradley   | marketing  |   1000 |    1 |          1<br />
 fernando  | marketing  |   1650 |    2 |          2<br />
(16 rows)</code></p>
<p>Again &#8211; it just so happens that rows are ordered, but don't count on it! If you want them ordered, add proper order by clause.</p>
<p>rank() is kind-of like rownum. It returns which position given row gets when ordering by (whatever we put in &#8220;order by" clause inside &#8220;over ()".</p>
<p>Please notice, that we don't have to partition the data:</p>
<p><code># select person, dept, salary, rank() over ( order by salary ) from test;<br />
  person   |    dept    | salary | rank<br />
-----------+------------+--------+------<br />
 bradley   | marketing  |   1000 |    1<br />
 ross      | it         |   1250 |    2<br />
 paul      | accounting |   1650 |    3<br />
 fernando  | marketing  |   1650 |    3<br />
 michael   | accounting |   1700 |    5<br />
 benjamin  | accounting |   2100 |    6<br />
 chandler  | management |   2400 |    7<br />
 sara      | it         |   2600 |    8<br />
 lincoln   | accounting |   2950 |    9<br />
 monica    | management |   2950 |    9<br />
 rachel    | accounting |   2950 |    9<br />
 theodore  | management |   3250 |   12<br />
 joey      | management |   3250 |   12<br />
 lj        | it         |   3250 |   12<br />
 phoebe    | accounting |   3700 |   15<br />
 alexander | it         |   3700 |   15<br />
(16 rows)</code></p>
<p>In this situation there is only 1 partition &#8211; i.e. whole resultset.</p>
<p>This example also shows why rank() is not really rownum &#8211; it's not unique (it was also visible in previous example, but I think in this one it's clearer).</p>
<p>There are 2 rows with rank = 3, 3 rows with 9 or 12 and so on.</p>
<p>The reason is very simple &#8211; given the ordering we shows (i.e. only salary) these rows are indistinguishable. But if I'd change the order by (within over()) to make them different:</p>
<p><code># select person, dept, salary, rank() over ( order by salary, person ) from test;<br />
  person   |    dept    | salary | rank<br />
-----------+------------+--------+------<br />
 bradley   | marketing  |   1000 |    1<br />
 ross      | it         |   1250 |    2<br />
 fernando  | marketing  |   1650 |    3<br />
 paul      | accounting |   1650 |    4<br />
 michael   | accounting |   1700 |    5<br />
 benjamin  | accounting |   2100 |    6<br />
 chandler  | management |   2400 |    7<br />
 sara      | it         |   2600 |    8<br />
 lincoln   | accounting |   2950 |    9<br />
 monica    | management |   2950 |   10<br />
 rachel    | accounting |   2950 |   11<br />
 joey      | management |   3250 |   12<br />
 lj        | it         |   3250 |   13<br />
 theodore  | management |   3250 |   14<br />
 alexander | it         |   3700 |   15<br />
 phoebe    | accounting |   3700 |   16<br />
(16 rows)</code></p>
<p>rank() is simple, but what about cumulative sum? Let's try:</p>
<p><code># select person, dept, salary, sum(salary) over ( partition by dept order by person ) from test;<br />
  person   |    dept    | salary |  sum<br />
-----------+------------+--------+-------<br />
 benjamin  | accounting |   2100 |  2100<br />
 lincoln   | accounting |   2950 |  5050<br />
 michael   | accounting |   1700 |  6750<br />
 paul      | accounting |   1650 |  8400<br />
 phoebe    | accounting |   3700 | 12100<br />
 rachel    | accounting |   2950 | 15050<br />
 alexander | it         |   3700 |  3700<br />
 lj        | it         |   3250 |  6950<br />
 ross      | it         |   1250 |  8200<br />
 sara      | it         |   2600 | 10800<br />
 chandler  | management |   2400 |  2400<br />
 joey      | management |   3250 |  5650<br />
 monica    | management |   2950 |  8600<br />
 theodore  | management |   3250 | 11850<br />
 bradley   | marketing  |   1000 |  1000<br />
 fernando  | marketing  |   1650 |  2650<br />
(16 rows)</code></p>
<p>Generally &#8211; it runs sum(salary) on every row and previous rows (in given partition).</p>
<p>Now, since it's quite sensible to use the same &#8220;OVER" multiple times in given query (to get average and sum of salaries for example) you can define them separately, like this:</p>
<p><code>select<br />
    dept,<br />
    rank() over ( w_depts order by person ),<br />
    person,<br />
    salary,<br />
    sum(salary) over ( w_depts ),<br />
    avg(salary) over (w_depts),<br />
    count(*) over ( w_depts )<br />
from<br />
    test<br />
window<br />
    w_depts as ( partition by dept )<br />
order by<br />
    dept, person;<br />
    dept    | rank |  person   | salary |  sum  |          avg          | count<br />
------------+------+-----------+--------+-------+-----------------------+-------<br />
 accounting |    1 | benjamin  |   2100 | 15050 | 2508.3333333333333333 |     6<br />
 accounting |    2 | lincoln   |   2950 | 15050 | 2508.3333333333333333 |     6<br />
 accounting |    3 | michael   |   1700 | 15050 | 2508.3333333333333333 |     6<br />
 accounting |    4 | paul      |   1650 | 15050 | 2508.3333333333333333 |     6<br />
 accounting |    5 | phoebe    |   3700 | 15050 | 2508.3333333333333333 |     6<br />
 accounting |    6 | rachel    |   2950 | 15050 | 2508.3333333333333333 |     6<br />
 it         |    1 | alexander |   3700 | 10800 | 2700.0000000000000000 |     4<br />
 it         |    2 | lj        |   3250 | 10800 | 2700.0000000000000000 |     4<br />
 it         |    3 | ross      |   1250 | 10800 | 2700.0000000000000000 |     4<br />
 it         |    4 | sara      |   2600 | 10800 | 2700.0000000000000000 |     4<br />
 management |    1 | chandler  |   2400 | 11850 | 2962.5000000000000000 |     4<br />
 management |    2 | joey      |   3250 | 11850 | 2962.5000000000000000 |     4<br />
 management |    3 | monica    |   2950 | 11850 | 2962.5000000000000000 |     4<br />
 management |    4 | theodore  |   3250 | 11850 | 2962.5000000000000000 |     4<br />
 marketing  |    1 | bradley   |   1000 |  2650 | 1325.0000000000000000 |     2<br />
 marketing  |    2 | fernando  |   1650 |  2650 | 1325.0000000000000000 |     2<br />
(16 rows)</code></p>
<p>You can also use window functions to show you parts of partitions. For example, let's assume you want list of people who earn the most, or second to most in their departments.</p>
<p>Doing this without window functions would be really tedious, but window functions, give as simple way:</p>
<p><code># select dept, person, salary from (<br />
    select dept, person, salary, rank() over (partition by dept order by salary desc) from test<br />
) as x where rank in (1,2);<br />
    dept    |  person   | salary<br />
------------+-----------+--------<br />
 accounting | phoebe    |   3700<br />
 accounting | lincoln   |   2950<br />
 accounting | rachel    |   2950<br />
 it         | alexander |   3700<br />
 it         | lj        |   3250<br />
 management | theodore  |   3250<br />
 management | joey      |   3250<br />
 marketing  | fernando  |   1650<br />
 marketing  | bradley   |   1000<br />
(9 rows)</code></p>
<p>You might ask yourself if it is not possible to do without subselect &#8211; unfortunately &#8211; window functions are evaluated after result was generated, i.e. after all conditions have been passed. But the subselect shouldn't be big issue.</p>
<p>Now, after all these great things, there is one thing that bugs me. Citation from manual:</p>
<p><code>For each row, the window function is computed across the rows that fall into the same partition as the current row</code></p>
<p>This rings some bad bells for me. Let's write a simple aggregate that will generally do count(), but will also raise notice every time it will get called:</p>
<p><code>CREATE OR REPLACE FUNCTION test_count(a INT4, b INT4) RETURNs INT4 as $$<br />
BEGIN<br />
    raise notice 'test_count(%, %)', a, b;<br />
    RETURN a + 1;<br />
END;<br />
$$ language plpgsql;<br />
CREATE aggregate test_count (INT4) (<br />
    sfunc = test_count,<br />
    stype = INT4,<br />
    initcond = '0'<br />
);</code></p>
<p>It's pretty simple, and we can easily validate how it works:</p>
<p><code># select test_count(1), count(*) from test;<br />
NOTICE:  test_count(0, 1)<br />
NOTICE:  test_count(1, 1)<br />
NOTICE:  test_count(2, 1)<br />
NOTICE:  test_count(3, 1)<br />
NOTICE:  test_count(4, 1)<br />
NOTICE:  test_count(5, 1)<br />
NOTICE:  test_count(6, 1)<br />
NOTICE:  test_count(7, 1)<br />
NOTICE:  test_count(8, 1)<br />
NOTICE:  test_count(9, 1)<br />
NOTICE:  test_count(10, 1)<br />
NOTICE:  test_count(11, 1)<br />
NOTICE:  test_count(12, 1)<br />
NOTICE:  test_count(13, 1)<br />
NOTICE:  test_count(14, 1)<br />
NOTICE:  test_count(15, 1)<br />
 test_count | count<br />
------------+-------<br />
         16 |    16<br />
(1 row)</code></p>
<p>As you can see the function has been called 16 times &#8211; one for every row in data.</p>
<p>But let's see how it will go when calling it as window function:</p>
<p><code># select person, test_count(1) over (order by person) from test where dept = 'it';<br />
NOTICE:  test_count(0, 1)<br />
NOTICE:  test_count(1, 1)<br />
NOTICE:  test_count(2, 1)<br />
NOTICE:  test_count(3, 1)<br />
  person   | test_count<br />
-----------+------------<br />
 alexander |          1<br />
 lj        |          2<br />
 ross      |          3<br />
 sara      |          4<br />
(4 rows)</code></p>
<p>Great. I was afraid that it will be:</p>
<p><code>NOTICE:  test_count(0, 1)<br />
NOTICE:  test_count(0, 1)<br />
NOTICE:  test_count(1, 1)<br />
NOTICE:  test_count(0, 1)<br />
NOTICE:  test_count(1, 1)<br />
NOTICE:  test_count(2, 1)<br />
NOTICE:  test_count(0, 1)<br />
NOTICE:  test_count(1, 1)<br />
NOTICE:  test_count(2, 1)<br />
NOTICE:  test_count(3, 1)</code></p>
<p>i.e. &#8211; one time for every row in every window it has to take into consideration.</p>
<p>But luckily it's smarter, and realizes that the value can be reused.</p>
<p>So, to finish this long post &#8211; another great feature of PostgreSQL &#8211; have fun playing with it.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">2 comments <a href='http://www.depesz.com/2009/01/21/waiting-for-84-window-functions/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="mycomment" id="comment-27460" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-27460" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jan 21, 2009</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>breinbaas on irc suggested using row_number in my example. I checked it and yes &#8211; it looks great. I added it to one example, but then I realized that adding it, and commenting everywhere would take too much time.</p>
<p>To put it simply &#8211; while writing the post I didn&#8217;t know row_number() exists. In <a href="http://developer.postgresql.org/pgdocs/postgres/tutorial-window.html" rel="nofollow">http://developer.postgresql.org/pgdocs/postgres/tutorial-window.html</a> it never links to <a href="http://developer.postgresql.org/pgdocs/postgres/functions-window.html" rel="nofollow">http://developer.postgresql.org/pgdocs/postgres/functions-window.html</a> and I somehow missed it.</p>
<p>I&#8217;m sorry &#8211; will check the docs better next time.</p>
	</li>
		
		
			
<li class="odd" id="comment-27465" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-27465" title="">#</a></span> Hitoshi Harada</div>  <div class="date">Jan 22, 2009</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/95caaafba8f1d9b4bc273eeb66edb3a6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Thanks for mentioning it. Oh, I shoud&#8217;ve had to add to tutorial row_number(), which is the most basic window function :P).<br />
I believe this is a great feature and will help many poeple to solve complex problems such as above easily.<br />
Enjoy!</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="1369" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="927c302a38" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="73"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">599 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">374 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">262 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">207 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">158 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">145 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">142 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">131 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">126 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">105 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

