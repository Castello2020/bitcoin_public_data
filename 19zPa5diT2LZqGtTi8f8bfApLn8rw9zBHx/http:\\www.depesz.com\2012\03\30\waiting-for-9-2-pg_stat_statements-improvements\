http://www.depesz.com/2012/03/30/waiting-for-9-2-pg_stat_statements-improvements/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 18:02:57 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2428>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Waiting for 9.2 &#8211; pg_stat_statements improvements</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Waiting for 9.2 &#8211; pg_stat_statements improvements Comments Feed" href="http://www.depesz.com/2012/03/30/waiting-for-9-2-pg_stat_statements-improvements/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2012/03/30/waiting-for-9-2-pg_stat_statements-improvements/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2428' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2428">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2012/03/30/waiting-for-9-2-pg_stat_statements-improvements/" rel="bookmark" title="Permanent Link to Waiting for 9.2 &#8211; pg_stat_statements improvements">Waiting for 9.2 &#8211; pg_stat_statements improvements</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>March 30th, 2012 by depesz | Tags: <a href="http://www.depesz.com/tag/analysis/" rel="tag">analysis</a>, <a href="http://www.depesz.com/tag/performance/" rel="tag">performance</a>, <a href="http://www.depesz.com/tag/pg92/" rel="tag">pg92</a>, <a href="http://www.depesz.com/tag/pgfouine/" rel="tag">pgfouine</a>, <a href="http://www.depesz.com/tag/pg_stat_statements/" rel="tag">pg_stat_statements</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a> |  <a href="http://www.depesz.com/2012/03/30/waiting-for-9-2-pg_stat_statements-improvements/#comments" title="Comment on Waiting for 9.2 &#8211; pg_stat_statements improvements">3 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>Three interesting patches:</p>
<ul>
<li>On 27th of March, Robert Haas <a href="http://git.postgresql.org/pg/commitdiff/40b9b957694cf7749c420c6c51a7e1d3c9b1fec1">committed</a> patch:

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">New GUC, track_iotiming, to track I/O timings.
&nbsp;
Currently, the only way to see the numbers this gathers is via
EXPLAIN (ANALYZE, BUFFERS), but the plan is to add visibility through
the stats collector and pg_stat_statements in subsequent patches.
&nbsp;
Ants Aasma, reviewed by Greg Smith, with some further changes by me.</pre></td></tr></table></div>

</li>
<li>On 27th of March, Robert Haas <a href="http://git.postgresql.org/pg/commitdiff/5b4f346611431361339253203d486789e4babb02">committed</a> patch:

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">Expose track_iotiming information via pg_stat_statements.
&nbsp;
Ants Aasma, reviewed by Greg Smith, with very minor tweaks by me.</pre></td></tr></table></div>

</li>
<li>
On 29th of March, Tom Lane <a href="http://git.postgresql.org/pg/commitdiff/7313cc016344a5705eb3e6916d8c4ea849c57975">committed</a> patch:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">Improve contrib/pg_stat_statements to lump &amp;quot;similar&amp;quot; queries together.
&nbsp;
pg_stat_statements now hashes selected fields of the analyzed parse tree
to assign a &quot;fingerprint&quot; to each query, and groups all queries with the
same fingerprint into a single entry in the pg_stat_statements view.
In practice it is expected that queries with the same fingerprint will be
equivalent except for values of literal constants.  To make the display
more useful, such constants are replaced by &quot;?&quot; in the displayed query
strings.
&nbsp;
This mechanism currently supports only optimizable queries (SELECT,
INSERT, UPDATE, DELETE).  Utility commands are still matched on the
basis of their literal query strings.
&nbsp;
There remain some open questions about how to deal with utility statements
that contain optimizable queries (such as EXPLAIN and SELECT INTO) and how
to deal with expiring speculative hashtable entries that are made to save
the normalized form of a query string.  However, fixing these issues should
require only localized changes, and since there are other open patches
involving contrib/pg_stat_statements, it seems best to go ahead and commit
what we've got.
&nbsp;
Peter Geoghegan, reviewed by Daniel Farina</pre></td></tr></table></div>

</li>
</ul>
<p><span id="more-2428"></span></p>
<p>Some time ago I <a href="http://www.depesz.com/2009/01/13/waiting-for-84-pg_stat_statements/">wrote</a> about <a href="http://www.postgresql.org/docs/current/interactive/pgstatstatements.html">pg_stat_statements</a> &#8211; contrib module which does in-db similar thing to what <a href="http://pgfouine.projects.postgresql.org/">pgFouine</a> does with logs.</p>
<p>Back then, there were problems with it &#8211; namely &#8211; it treated &#8220;select * from table where field = 1&#8243; and &#8220;select * from table where field = 2&#8243; as two different queries &#8211; unless you used prepared statements, but I'm not fan of <a href="http://www.depesz.com/2008/05/10/prepared-statements-gotcha/">these</a>.</p>
<p>Now, this new version supposedly fixes this problem, and adds more information &#8211; information that is not available in normal logs!</p>
<p>Loading, in 9.2 needs two steps:</p>
<ul>
<li>Add line:

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">shared_preload_libraries = 'pg_stat_statements'</pre></td></tr></table></div>

<p> to postgresql.conf</li>
<li>Restart PostgreSQL to make the library loaded.</li>
<li>In some database &#8211; doesn't matter which one, you have to run:

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">create</span> extension pg_stat_statements;</pre></td></tr></table></div>

<p> to have access to the stats</li>
</ul>
<p>Contrib module, once loaded (in shared_preload_libraries GUC) gets data about all queries in all databases. The extension just puts two helper functions, and a view in the database you created it in.</p>
<p>With all of this loaded, let's see how it really works &#8211; first &#8211; does it really treat &#8220;select * from table where field = 1&#8243; and &#8220;select * from table where field = 2&#8243; as the same query now?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> pg_stat_statements_reset<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
 pg_stat_statements_reset
──────────────────────────
&nbsp;
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> pg_class <span style="color: #993333; font-weight: bold;">where</span> relkind <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'r'</span>;
 <span style="color: #993333; font-weight: bold;">count</span>
───────
    <span style="color: #cc66cc;">58</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> pg_class <span style="color: #993333; font-weight: bold;">where</span> relkind <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'i'</span>;
 <span style="color: #993333; font-weight: bold;">count</span>
───────
   <span style="color: #cc66cc;">112</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> pg_stat_statements <span style="color: #993333; font-weight: bold;">where</span> query ~ <span style="color: #ff0000;">'from pg_class where relkind'</span>;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>───────┬─────────────────────────────────────────────────
userid              │ <span style="color: #cc66cc;">16384</span>
dbid                │ <span style="color: #cc66cc;">16388</span>
query               │ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> pg_class <span style="color: #993333; font-weight: bold;">where</span> relkind <span style="color: #66cc66;">=</span> ?;
calls               │ <span style="color: #cc66cc;">2</span>
total_time          │ <span style="color: #cc66cc;">0.000268</span>
<span style="color: #993333; font-weight: bold;">rows</span>                │ <span style="color: #cc66cc;">2</span>
shared_blks_hit     │ <span style="color: #cc66cc;">16</span>
shared_blks_read    │ <span style="color: #cc66cc;">0</span>
shared_blks_dirtied │ <span style="color: #cc66cc;">0</span>
shared_blks_written │ <span style="color: #cc66cc;">0</span>
local_blks_hit      │ <span style="color: #cc66cc;">0</span>
local_blks_read     │ <span style="color: #cc66cc;">0</span>
local_blks_dirtied  │ <span style="color: #cc66cc;">0</span>
local_blks_written  │ <span style="color: #cc66cc;">0</span>
temp_blks_read      │ <span style="color: #cc66cc;">0</span>
temp_blks_written   │ <span style="color: #cc66cc;">0</span>
time_read           │ <span style="color: #cc66cc;">0</span>
time_write          │ <span style="color: #cc66cc;">0</span></pre></td></tr></table></div>

<p>Good news, everyone &#8211; it works. Both queries were normalized to &#8220;select count(*) from pg_class where relkind = ?", and calls count shows correctly 2 calls.</p>
<p>Let's make one more test &#8211; is it smart enough to swap columns?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> oid<span style="color: #66cc66;">,</span> relname <span style="color: #993333; font-weight: bold;">from</span> pg_class <span style="color: #993333; font-weight: bold;">where</span> relkind <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'r'</span> <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">1</span>;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>─────────
oid     │ <span style="color: #cc66cc;">2619</span>
relname │ pg_statistic
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> relname<span style="color: #66cc66;">,</span> oid <span style="color: #993333; font-weight: bold;">from</span> pg_class <span style="color: #993333; font-weight: bold;">where</span> relkind <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'r'</span> <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">1</span>;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>─────────
relname │ pg_statistic
oid     │ <span style="color: #cc66cc;">2619</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> pg_stat_statements <span style="color: #993333; font-weight: bold;">where</span> query ~ <span style="color: #ff0000;">'from pg_class where relkind.*limit'</span>;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>
<span style="color: #993333; font-weight: bold;">count</span> │ <span style="color: #cc66cc;">2</span></pre></td></tr></table></div>

<p>No. It's not. But that's OK &#8211; so far nothing is (well, my <a href="http://svn.depesz.com/svn/pgsql-tools/trunk/analyze.pgsql.logs.pl">tool</a> is smart enough in some cases.).</p>
<p>It is interesting to see that we have a bunch of additional columns &#8211; related to block I/O &#8211; we see how many read blocks where found in shared_buffers, how many were dirtied because of the query and so on.</p>
<p>Let's see how it works. I have 32MB of shared_buffers in this test instance, so query to any table that has more than this in size should show interesting values <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> test <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #993333; font-weight: bold;">select</span> i<span style="color: #66cc66;">,</span> repeat<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'depesz'</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">10</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> filler <span style="color: #993333; font-weight: bold;">from</span> generate_series<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">400000</span><span style="color: #66cc66;">&#41;</span> i;
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #cc66cc;">400000</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> pg_stat_statements <span style="color: #993333; font-weight: bold;">where</span> query ~ <span style="color: #ff0000;">'table test'</span>;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>───────┬────────────────────────────────────────────────────────────────────────────────────────────────
userid              │ <span style="color: #cc66cc;">16384</span>
dbid                │ <span style="color: #cc66cc;">16388</span>
query               │ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> test <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #993333; font-weight: bold;">select</span> i<span style="color: #66cc66;">,</span> repeat<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'depesz'</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">10</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> filler <span style="color: #993333; font-weight: bold;">from</span> generate_series<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">400000</span><span style="color: #66cc66;">&#41;</span> i;
calls               │ <span style="color: #cc66cc;">1</span>
total_time          │ <span style="color: #cc66cc;">1.457536</span>
<span style="color: #993333; font-weight: bold;">rows</span>                │ <span style="color: #cc66cc;">0</span>
shared_blks_hit     │ <span style="color: #cc66cc;">302</span>
shared_blks_read    │ <span style="color: #cc66cc;">4939</span>
shared_blks_dirtied │ <span style="color: #cc66cc;">4950</span>
shared_blks_written │ <span style="color: #cc66cc;">4408</span>
local_blks_hit      │ <span style="color: #cc66cc;">0</span>
local_blks_read     │ <span style="color: #cc66cc;">0</span>
local_blks_dirtied  │ <span style="color: #cc66cc;">0</span>
local_blks_written  │ <span style="color: #cc66cc;">0</span>
temp_blks_read      │ <span style="color: #cc66cc;">685</span>
temp_blks_written   │ <span style="color: #cc66cc;">684</span>
time_read           │ <span style="color: #cc66cc;">0</span>
time_write          │ <span style="color: #cc66cc;">0</span></pre></td></tr></table></div>

<p>Nice. I'm not entirely sure what are those &#8220;local blocks" though, and the documentation is also not clear on it.</p>
<p>Still, let's see how select's on such table work:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>─
<span style="color: #993333; font-weight: bold;">count</span> │ <span style="color: #cc66cc;">400000</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> pg_stat_statements <span style="color: #993333; font-weight: bold;">where</span> query ~ <span style="color: #ff0000;">'count.*test'</span>;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>───────┬───────────────────────────
userid              │ <span style="color: #cc66cc;">16384</span>
dbid                │ <span style="color: #cc66cc;">16388</span>
query               │ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;
calls               │ <span style="color: #cc66cc;">1</span>
total_time          │ <span style="color: #cc66cc;">0.048413</span>
<span style="color: #993333; font-weight: bold;">rows</span>                │ <span style="color: #cc66cc;">1</span>
shared_blks_hit     │ <span style="color: #cc66cc;">544</span>
shared_blks_read    │ <span style="color: #cc66cc;">4395</span>
shared_blks_dirtied │ <span style="color: #cc66cc;">0</span>
shared_blks_written │ <span style="color: #cc66cc;">0</span>
local_blks_hit      │ <span style="color: #cc66cc;">0</span>
local_blks_read     │ <span style="color: #cc66cc;">0</span>
local_blks_dirtied  │ <span style="color: #cc66cc;">0</span>
local_blks_written  │ <span style="color: #cc66cc;">0</span>
temp_blks_read      │ <span style="color: #cc66cc;">0</span>
temp_blks_written   │ <span style="color: #cc66cc;">0</span>
time_read           │ <span style="color: #cc66cc;">0</span>
time_write          │ <span style="color: #cc66cc;">0</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>─
<span style="color: #993333; font-weight: bold;">count</span> │ <span style="color: #cc66cc;">400000</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> pg_stat_statements <span style="color: #993333; font-weight: bold;">where</span> query ~ <span style="color: #ff0000;">'count.*test'</span>;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>───────┬───────────────────────────
userid              │ <span style="color: #cc66cc;">16384</span>
dbid                │ <span style="color: #cc66cc;">16388</span>
query               │ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;
calls               │ <span style="color: #cc66cc;">2</span>
total_time          │ <span style="color: #cc66cc;">0.096897</span>
<span style="color: #993333; font-weight: bold;">rows</span>                │ <span style="color: #cc66cc;">2</span>
shared_blks_hit     │ <span style="color: #cc66cc;">1120</span>
shared_blks_read    │ <span style="color: #cc66cc;">8758</span>
shared_blks_dirtied │ <span style="color: #cc66cc;">0</span>
shared_blks_written │ <span style="color: #cc66cc;">0</span>
local_blks_hit      │ <span style="color: #cc66cc;">0</span>
local_blks_read     │ <span style="color: #cc66cc;">0</span>
local_blks_dirtied  │ <span style="color: #cc66cc;">0</span>
local_blks_written  │ <span style="color: #cc66cc;">0</span>
temp_blks_read      │ <span style="color: #cc66cc;">0</span>
temp_blks_written   │ <span style="color: #cc66cc;">0</span>
time_read           │ <span style="color: #cc66cc;">0</span>
time_write          │ <span style="color: #cc66cc;">0</span></pre></td></tr></table></div>

<p>shared_blks_hit/read are correctly incremented, though it looks like pg has to read much more data than I expected.</p>
<p>The 2 columns at the end &#8211; time_read and time_write are empty. To make them contain some data we need to enable &#8220;track_iotiming":</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> pg_stat_statements_reset<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>────────────┬─
pg_stat_statements_reset │
&nbsp;
$ <span style="color: #993333; font-weight: bold;">set</span> track_iotiming <span style="color: #66cc66;">=</span> <span style="color: #993333; font-weight: bold;">true</span>;
<span style="color: #993333; font-weight: bold;">SET</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">drop</span> <span style="color: #993333; font-weight: bold;">table</span> test;
<span style="color: #993333; font-weight: bold;">DROP</span> <span style="color: #993333; font-weight: bold;">TABLE</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> test <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #993333; font-weight: bold;">select</span> i<span style="color: #66cc66;">,</span> repeat<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'depesz'</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">10</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> filler <span style="color: #993333; font-weight: bold;">from</span> generate_series<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">400000</span><span style="color: #66cc66;">&#41;</span> i;
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #cc66cc;">400000</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>─
<span style="color: #993333; font-weight: bold;">count</span> │ <span style="color: #cc66cc;">400000</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> query<span style="color: #66cc66;">,</span> calls<span style="color: #66cc66;">,</span> time_read<span style="color: #66cc66;">,</span> time_write <span style="color: #993333; font-weight: bold;">from</span> pg_stat_statements;
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#93;</span>───────────────────────────────────────────────────────────────────────────────────────────────
query      │ <span style="color: #993333; font-weight: bold;">drop</span> <span style="color: #993333; font-weight: bold;">table</span> test;
calls      │ <span style="color: #cc66cc;">1</span>
time_read  │ <span style="color: #cc66cc;">0</span>
time_write │ <span style="color: #cc66cc;">0</span>
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">2</span> <span style="color: #66cc66;">&#93;</span>───────────────────────────────────────────────────────────────────────────────────────────────
query      │ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> test <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #993333; font-weight: bold;">select</span> i<span style="color: #66cc66;">,</span> repeat<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'depesz'</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">10</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> filler <span style="color: #993333; font-weight: bold;">from</span> generate_series<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">400000</span><span style="color: #66cc66;">&#41;</span> i;
calls      │ <span style="color: #cc66cc;">1</span>
time_read  │ <span style="color: #cc66cc;">0</span>
time_write │ <span style="color: #cc66cc;">0.319568</span>
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">3</span> <span style="color: #66cc66;">&#93;</span>───────────────────────────────────────────────────────────────────────────────────────────────
query      │ <span style="color: #993333; font-weight: bold;">select</span> pg_stat_statements_reset<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
calls      │ <span style="color: #cc66cc;">1</span>
time_read  │ <span style="color: #cc66cc;">0</span>
time_write │ <span style="color: #cc66cc;">0</span>
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">4</span> <span style="color: #66cc66;">&#93;</span>───────────────────────────────────────────────────────────────────────────────────────────────
query      │ <span style="color: #993333; font-weight: bold;">set</span> track_iotiming <span style="color: #66cc66;">=</span> <span style="color: #993333; font-weight: bold;">true</span>;
calls      │ <span style="color: #cc66cc;">1</span>
time_read  │ <span style="color: #cc66cc;">0</span>
time_write │ <span style="color: #cc66cc;">0</span>
─<span style="color: #66cc66;">&#91;</span> RECORD <span style="color: #cc66cc;">5</span> <span style="color: #66cc66;">&#93;</span>───────────────────────────────────────────────────────────────────────────────────────────────
query      │ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;
calls      │ <span style="color: #cc66cc;">1</span>
time_read  │ <span style="color: #cc66cc;">0.007696</span>
time_write │ <span style="color: #cc66cc;">0.013145</span></pre></td></tr></table></div>

<p>In here we see some interesting information. First of all &#8211; we do see time that create table spent writing information.</p>
<p>But we also see that select count(*) <b>writes</b> data! I think it's because of dirty buffers that had to be written so that count(*) could use them for reading data from disk. This theory seems to be proved by the fact that after <a href="http://www.postgresql.org/docs/current/interactive/sql-checkpoint.html">checkpoint</a> and resetting stats &#8211; count(*) doesn't write anymore:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ checkpoint;
CHECKPOINT
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> pg_stat_statements_reset<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
 pg_stat_statements_reset
──────────────────────────
&nbsp;
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;
 <span style="color: #993333; font-weight: bold;">count</span>
────────
 <span style="color: #cc66cc;">400000</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> query<span style="color: #66cc66;">,</span> calls<span style="color: #66cc66;">,</span> time_read<span style="color: #66cc66;">,</span> time_write <span style="color: #993333; font-weight: bold;">from</span> pg_stat_statements;
               query                │ calls │ time_read │ time_write
────────────────────────────────────┼───────┼───────────┼────────────
 <span style="color: #993333; font-weight: bold;">select</span> pg_stat_statements_reset<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>; │     <span style="color: #cc66cc;">1</span> │         <span style="color: #cc66cc;">0</span> │          <span style="color: #cc66cc;">0</span>
 <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;         │     <span style="color: #cc66cc;">1</span> │  <span style="color: #cc66cc;">0.007603</span> │          <span style="color: #cc66cc;">0</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">2</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>It should be noted, though, that these things are not free &#8211; pg_stat_statements does introduce it's overhead, and tracking i/o timing introduces another (possibly higher) overhead. How much overhead it actually is? Let's see.</p>
<p>I wrote a simple script, which:</p>
<ul>
<li>created test database</li>
<li>initialized pgbench database with scale = 20 (~ 320MB of database size, not much, but more than shared_buffers @ 24MB)</li>
<li>ran a test of pgbench and logged transactions per second count (excluding connection time)</li>
</ul>
<p>This test was ran for concurrency of 1, 5, 10, 15, 20 and 25. For each concurrency, I ran the test three times, and used average tps from these 3 runs.</p>
<p>All of this was done for:</p>
<ul>
<li>default configuration &#8211; &#8220;base"</li>
<li>base config, but with pg_stat_statements loaded</li>
<li>base config with track_iotiming enabled</li>
<li>base config with both track_iotiming and pg_stat_statements loaded</li>
</ul>
<p>Results are like this:</p>
<table class="normal">
<thead>
<tr>
<th>Concurrency</th>
<th>1</th>
<th>5</th>
<th>10</th>
<th>15</th>
<th>20</th>
<th>25</th>
</tr>
</thead>
<tbody>
<tr>
<th>base</th>
<td class="num">70.908</td>
<td class="num">118.708</td>
<td class="num">180.121</td>
<td class="num">190.050</td>
<td class="num">207.320</td>
<td class="num">175.615</td>
</tr>
<tr>
<th>base + p.s.s</th>
<td class="num">60.486</td>
<td class="num">99.921</td>
<td class="num">148.548</td>
<td class="num">199.900</td>
<td class="num">189.496</td>
<td class="num">178.722</td>
</tr>
<tr>
<th>base + iotiming</th>
<td class="num">62.161</td>
<td class="num">111.923</td>
<td class="num">162.692</td>
<td class="num">181.376</td>
<td class="num">197.459</td>
<td class="num">183.211</td>
</tr>
<tr>
<th>base + p.s.s + iotiming</th>
<td class="num">61.641</td>
<td class="num">101.936</td>
<td class="num">181.319</td>
<td class="num">178.514</td>
<td class="num">186.824</td>
<td class="num">190.334</td>
</tr>
</tbody>
</table>
<p>Table might not be very readable, so I have a graph:</p>
<p><img src="/wp-content/uploads/2012/03/pss-1.png" width="575" height="334" alt="tps"/></p>
<p>I also made one, which shows how much percent of performance you're loosing (or gaining?!) in every case. Base = 100%, which means it doesn't gain or lose anything &#8211; so it sits at &#8220;0%":</p>
<p><img src="/wp-content/uploads/2012/03/pss-2.png" width="575" height="334" alt="tps"/></p>
<p>It clearly shows that my results are not really great &#8211; value for base with concurrency 25 is lower than with pg_stat_statements and track_iotiming, but this could be simply related to different context switch scenario &#8211; this was not a powerful machine &#8211; just a core2duo desktop under linux (with most of the daemons disabled, to minimize external influences on pgbench results).</p>
<p>All in all &#8211; it shows that in worst case you're losing 15% of performance, and that if you'll decide to enable pg_stat_statements, you can eable track_iotiming too, as its overhead seems to be surprisingly low.</p>
<p>Going back to original subject &#8211; both changes are very welcome. We definitely can use this kind of information, and thanks to these new additions &#8211; pg_stat_statements looks more and more interesting.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">3 comments <a href='http://www.depesz.com/2012/03/30/waiting-for-9-2-pg_stat_statements-improvements/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-35364" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35364" title="">#</a></span> <a href='http://rhaas.blogspot.com' rel='external nofollow' class='url'>Robert Haas</a></div>  <div class="date">Mar 31, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Local blocks are data blocks for temporary tables and indexes.  Shared blocks are data blocks for permanent or unlogged tables and indexes.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35365" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35365" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 31, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Robert:<br />
thanks for clarification.</p>
	</li>
		
		
			
<li class="odd" id="comment-45280" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-45280" title="">#</a></span> Hervé</div>  <div class="date">Apr 3, 2014</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/43329e0f8794c8941caff3436bd82da1?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Not sure but I think writes following the count(*) request may be rather due to hint bits.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="2428" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="13b3e15c4d" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="180"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">603 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">375 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">280 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">217 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">168 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">152 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">150 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">136 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">132 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">108 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

