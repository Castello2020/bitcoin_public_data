HTTP/1.1 200 OK
Server: nginx
Date: Tue, 22 Jul 2014 15:25:49 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2651>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Waiting for 9.3 &#8211; Add new JSON processing functions and parser API.</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Waiting for 9.3 &#8211; Add new JSON processing functions and parser API. Comments Feed" href="http://www.depesz.com/2013/03/30/waiting-for-9-3-add-new-json-processing-functions-and-parser-api/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2013/03/30/waiting-for-9-3-add-new-json-processing-functions-and-parser-api/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2651' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2651">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2013/03/30/waiting-for-9-3-add-new-json-processing-functions-and-parser-api/" rel="bookmark" title="Permanent Link to Waiting for 9.3 &#8211; Add new JSON processing functions and parser API.">Waiting for 9.3 &#8211; Add new JSON processing functions and parser API.</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>March 30th, 2013 by depesz | Tags: <a href="http://www.depesz.com/tag/json/" rel="tag">json</a>, <a href="http://www.depesz.com/tag/pg93/" rel="tag">pg93</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a> |  <a href="http://www.depesz.com/2013/03/30/waiting-for-9-3-add-new-json-processing-functions-and-parser-api/#comments" title="Comment on Waiting for 9.3 &#8211; Add new JSON processing functions and parser API.">11 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>On 29th of March, Andrew Dunstan <a href="http://git.postgresql.org/pg/commitdiff/a570c98d7fa0841f17bbf51d62d02d9e493c7fcc">committed</a> patch:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">Add new JSON processing functions and parser API.
&nbsp;
The JSON parser is converted into a recursive descent parser, and
exposed for use by other modules such as extensions. The API provides
hooks for all the significant parser event such as the beginning and end
of objects and arrays, and providing functions to handle these hooks
allows for fairly simple construction of a wide variety of JSON
processing functions. A set of new basic processing functions and
operators is also added, which use this API, including operations to
extract array elements, object fields, get the length of arrays and the
set of keys of a field, deconstruct an object into a set of key/value
pairs, and create records from JSON objects and arrays of objects.
&nbsp;
Catalog version bumped.
&nbsp;
Andrew Dunstan, with some documentation assistance from Merlin Moncure.</pre></td></tr></table></div>

<p><span id="more-2651"></span></p>
<p>This is huge change, and one that makes me very happy. So far we were able to create JSONs, and store them. But reading of data from JSON was not really possible.</p>
<p>Now &#8211; thanks to Andrew's work &#8211; we got huge number of additional features that can be used to actually use the data from within the jsons.</p>
<p>First, let's talk about new operators. There are 2 new operators, each with 2 variants.</p>
<p>First operator is -&gt; &#8211; this is used to extract data from json value. Returned value is also json, so you can &#8220;chain" it:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:[1,2,3]}'</span>::json<span style="color: #66cc66;">-&gt;</span><span style="color: #ff0000;">'a'</span><span style="color: #66cc66;">-&gt;</span><span style="color: #cc66cc;">2</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>?
<span style="color: #808080; font-style: italic;">----------</span>
 <span style="color: #cc66cc;">3</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>This operator can take either integer or text on the right side. If it's integer &#8211; it assumes the left side of operator is json array, and returns element that has given index (0 based).</p>
<p>If the right side is text, it is used to get data from JSON objects (hashes).</p>
<p>So, for example, If I have JSON object:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">&#123;</span> <span style="color: #ff0000;">&quot;name&quot;</span>: <span style="color: #ff0000;">&quot;depesz&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;password&quot;</span>: <span style="color: #ff0000;">&quot;super simple&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;access_level&quot;</span>: <span style="color: #cc66cc;">100</span> <span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>And I'd want to get name from it, I could:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{ &quot;name&quot;: &quot;depesz&quot;, &quot;password&quot;: &quot;super simple&quot;, &quot;access_level&quot;: 100 }'</span>::json<span style="color: #66cc66;">-&gt;</span><span style="color: #ff0000;">'name'</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>? 
<span style="color: #808080; font-style: italic;">----------</span>
 <span style="color: #ff0000;">&quot;depesz&quot;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Array approach works just as fine:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'[&quot;hubert&quot;, &quot;depesz&quot;, &quot;lubaczewski&quot;]'</span>::json<span style="color: #66cc66;">-&gt;</span><span style="color: #cc66cc;">1</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>?
<span style="color: #808080; font-style: italic;">----------</span>
 <span style="color: #ff0000;">&quot;depesz&quot;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Please note that the return values are within quotes &#8211; this is because these are not texts, but rather json values. If we'd want text, it can be done using -&gt;&gt; version of the operator, like:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{ &quot;name&quot;: &quot;depesz&quot;, &quot;password&quot;: &quot;super simple&quot;, &quot;access_level&quot;: 100 }'</span>::json<span style="color: #66cc66;">-&gt;&gt;</span><span style="color: #ff0000;">'name'</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>?
<span style="color: #808080; font-style: italic;">----------</span>
 depesz
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'[&quot;hubert&quot;, &quot;depesz&quot;, &quot;lubaczewski&quot;]'</span>::json<span style="color: #66cc66;">-&gt;&gt;</span><span style="color: #cc66cc;">1</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>?
<span style="color: #808080; font-style: italic;">----------</span>
 depesz
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Second operator (technically, I described above 4 operators, but they are very similar) is #&gt;</p>
<p>This operator can be used instead of chaining multiple -&gt;..-&gt;..-&gt;..-&gt;&#8230; #&gt; right side is text array, So if we'd take a look at the example earlier, with:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:[1,2,3]}'</span>::json<span style="color: #66cc66;">-&gt;</span><span style="color: #ff0000;">'a'</span><span style="color: #66cc66;">-&gt;</span><span style="color: #cc66cc;">2</span>;</pre></td></tr></table></div>

<p>It can be also written as:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:[1,2,3]}'</span>::json #<span style="color: #66cc66;">&gt;</span> ARRAY<span style="color: #66cc66;">&#91;</span> <span style="color: #ff0000;">'a'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'2'</span> <span style="color: #66cc66;">&#93;</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>?
<span style="color: #808080; font-style: italic;">----------</span>
 <span style="color: #cc66cc;">3</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>(of course you can use different way of providing the array, like &#8216;{a,2}'::text[].</p>
<p>New functions, added by this patch are:</p>
<h2>json_array_elements</h2>
<p>Returns set of json values from an array. For example:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> json_array_elements<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'[1,2,[4,5],{&quot;a&quot;:&quot;b&quot;},4]'</span><span style="color: #66cc66;">&#41;</span>;
 json_array_elements
<span style="color: #808080; font-style: italic;">---------------------</span>
 <span style="color: #cc66cc;">1</span>
 <span style="color: #cc66cc;">2</span>
 <span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">4</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">5</span><span style="color: #66cc66;">&#93;</span>
 <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>:<span style="color: #ff0000;">&quot;b&quot;</span><span style="color: #66cc66;">&#125;</span>
 <span style="color: #cc66cc;">4</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">5</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<h2>json_array_length</h2>
<p>Returns number of elements in given array. If the array has subarrays, these are not traversed, so:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> json_array_length<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'[1,2,[4,5],{&quot;a&quot;:&quot;b&quot;},4]'</span><span style="color: #66cc66;">&#41;</span>;
 json_array_length
<span style="color: #808080; font-style: italic;">-------------------</span>
                 <span style="color: #cc66cc;">5</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<h2>json_each</h2>
<p>Returns set of records of key/value (key &#8211; text, value &#8211; json) which represent JSON object:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> json_each<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'{&quot;name&quot;:&quot;depesz&quot;,&quot;password&quot;:&quot;super simple&quot;,&quot;grades&quot;:[1,3,1,1,1,2],&quot;skills&quot;:{&quot;a&quot;:&quot;b&quot;, &quot;c&quot;:[1,2,3]}}'</span><span style="color: #66cc66;">&#41;</span>;
   <span style="color: #993333; font-weight: bold;">key</span>    <span style="color: #66cc66;">|</span>         <span style="color: #993333; font-weight: bold;">value</span>
<span style="color: #808080; font-style: italic;">----------+------------------------</span>
 name     <span style="color: #66cc66;">|</span> <span style="color: #ff0000;">&quot;depesz&quot;</span>
 password <span style="color: #66cc66;">|</span> <span style="color: #ff0000;">&quot;super simple&quot;</span>
 grades   <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span>
 skills   <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>:<span style="color: #ff0000;">&quot;b&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;c&quot;</span>:<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">4</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<h2>json_each_text</h2>
<p>Just like json_each() above, but value is text, so for scalar values (not arrays and not objects), quotes are removed.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> json_each_text<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'{&quot;name&quot;:&quot;depesz&quot;,&quot;password&quot;:&quot;super simple&quot;,&quot;grades&quot;:[1,3,1,1,1,2],&quot;skills&quot;:{&quot;a&quot;:&quot;b&quot;, &quot;c&quot;:[1,2,3]}}'</span><span style="color: #66cc66;">&#41;</span>;
   <span style="color: #993333; font-weight: bold;">key</span>    <span style="color: #66cc66;">|</span>         <span style="color: #993333; font-weight: bold;">value</span>
<span style="color: #808080; font-style: italic;">----------+------------------------</span>
 name     <span style="color: #66cc66;">|</span> depesz
 password <span style="color: #66cc66;">|</span> super simple
 grades   <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span>
 skills   <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>:<span style="color: #ff0000;">&quot;b&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;c&quot;</span>:<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">4</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<h2>json_extract_path</h2>
<p>Function that does just what #&gt; operator &#8211; extracts value based on path:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> json_extract_path<span style="color: #66cc66;">&#40;</span>
    <span style="color: #ff0000;">'{&quot;name&quot;:&quot;depesz&quot;,&quot;password&quot;:&quot;super simple&quot;,&quot;grades&quot;:[1,3,1,1,1,2],&quot;skills&quot;:{&quot;a&quot;:&quot;b&quot;, &quot;c&quot;:[1,2,3]}}'</span><span style="color: #66cc66;">,</span>
    <span style="color: #ff0000;">'skills'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'c'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'2'</span>
<span style="color: #66cc66;">&#41;</span>;
 json_extract_path
<span style="color: #808080; font-style: italic;">-------------------</span>
 <span style="color: #cc66cc;">3</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<h2>json_extract_path_text</h2>
<p>Same as above, but returns as text &#8211; so for scalar values quotations are removed. Since it seems obvious, I'm skipping example.</p>
<h2>json_object_keys</h2>
<p>Returns set of text values, where each value is key in an object:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> json_object_keys<span style="color: #66cc66;">&#40;</span>
    <span style="color: #ff0000;">'{&quot;name&quot;:&quot;depesz&quot;,&quot;password&quot;:&quot;super simple&quot;,&quot;grades&quot;:[1,3,1,1,1,2],&quot;skills&quot;:{&quot;a&quot;:&quot;b&quot;, &quot;c&quot;:[1,2,3]}}'</span>
<span style="color: #66cc66;">&#41;</span>;
 json_object_keys
<span style="color: #808080; font-style: italic;">------------------</span>
 name
 password
 grades
 skills
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">4</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Two last functions: json_populate_record and json_populate_recordset, are a bit more complicated, so I'll cover them both in a bit more text.</p>
<p>If you have a JSON that is representation of a row from a table. Or, at least &#8211; some columns from such table. For example, let's consider such table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ \d test
     <span style="color: #993333; font-weight: bold;">Table</span> <span style="color: #ff0000;">&quot;public.test&quot;</span>
 <span style="color: #993333; font-weight: bold;">Column</span> <span style="color: #66cc66;">|</span>  <span style="color: #993333; font-weight: bold;">Type</span>   <span style="color: #66cc66;">|</span> Modifiers
<span style="color: #808080; font-style: italic;">--------+---------+-----------</span>
 i      <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">integer</span> <span style="color: #66cc66;">|</span>
 t      <span style="color: #66cc66;">|</span> text    <span style="color: #66cc66;">|</span>
 b      <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">boolean</span> <span style="color: #66cc66;">|</span></pre></td></tr></table></div>

<p>And let's say we have such json:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#91;</span>
  <span style="color: #009900;">&#123;</span> <span style="color: #3366CC;">&quot;i&quot;</span><span style="color: #339933;">:</span><span style="color: #CC0000;">1</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&quot;t&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;whatever&quot;</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&quot;b&quot;</span><span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">true</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
  <span style="color: #009900;">&#123;</span> <span style="color: #3366CC;">&quot;i&quot;</span><span style="color: #339933;">:</span><span style="color: #CC0000;">2</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&quot;t&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;anything&quot;</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
  <span style="color: #009900;">&#123;</span> <span style="color: #3366CC;">&quot;i&quot;</span><span style="color: #339933;">:</span><span style="color: #CC0000;">3</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&quot;b&quot;</span><span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">false</span> <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#93;</span></pre></td></tr></table></div>

<p>Then, you can use json_populate_recordset() function (which takes json, which is supposed to be array of objects) to return recordset that has columns named and <em>typed</em> like test table.</p>
<p>How does it work? For test, I stored my JSON (as shown above) in single-row table &#8220;t", and the column is named j. So now I can:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> json_populate_recordset<span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">NULL</span>::test<span style="color: #66cc66;">,</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">select</span> j <span style="color: #993333; font-weight: bold;">from</span> t <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
 i <span style="color: #66cc66;">|</span>    t     <span style="color: #66cc66;">|</span>   b
<span style="color: #808080; font-style: italic;">---+----------+--------</span>
 <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> whatever <span style="color: #66cc66;">|</span> t
 <span style="color: #cc66cc;">2</span> <span style="color: #66cc66;">|</span> anything <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
 <span style="color: #cc66cc;">3</span> <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>   <span style="color: #66cc66;">|</span> f
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">3</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>First argument to the function &#8211; NULL::test, is any value <em>typed</em> to whatever you want to get from the function. Since each table is also a type, and simplest value is null, you generally want NULL::table_name.</p>
<p>Second argument is the JSON.</p>
<p>We can also verify datatypes by doing:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> test_2 <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> json_populate_recordset<span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">NULL</span>::test<span style="color: #66cc66;">,</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">select</span> j <span style="color: #993333; font-weight: bold;">from</span> t <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #cc66cc;">3</span>
&nbsp;
$ \d test_2
    <span style="color: #993333; font-weight: bold;">Table</span> <span style="color: #ff0000;">&quot;public.test_2&quot;</span>
 <span style="color: #993333; font-weight: bold;">Column</span> <span style="color: #66cc66;">|</span>  <span style="color: #993333; font-weight: bold;">Type</span>   <span style="color: #66cc66;">|</span> Modifiers
<span style="color: #808080; font-style: italic;">--------+---------+-----------</span>
 i      <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">integer</span> <span style="color: #66cc66;">|</span>
 t      <span style="color: #66cc66;">|</span> text    <span style="color: #66cc66;">|</span>
 b      <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">boolean</span> <span style="color: #66cc66;">|</span></pre></td></tr></table></div>

<p>As you can see the datatypes are correct.</p>
<p>If value for any field is not provided in source data &#8211; it will be returned as NULL.</p>
<p>Difference between json_populate_record() and json_populate_recordset() is that json_populate_record expects to get single object, and returns single row, while the json_populate_recordset works on array of objects and returns (potentially) multiple rows.</p>
<p>I, for am, am grateful to Andrew for his work, as now JSON seems to be really useful for DB programming. So far it was more or less only for sending data back to application, but now we can use JSON to do many cool things ourselves.</p>
<p>The only thing missing is modifying existing JSONs. Like &#8211; adding key to object, or adding value to array, or changing existing value within array/object to something else. It can be done now, but in a not-so-pleasant way.</p>
<p><!-- vim: set spell spelllang=en_US ft=xhtml: --></p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">11 comments <a href='http://www.depesz.com/2013/03/30/waiting-for-9-3-add-new-json-processing-functions-and-parser-api/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-39037" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39037" title="">#</a></span> Andrew Dunstan</div>  <div class="date">Mar 30, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d438b256de7b28895c1d0db249969dd8?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Thanks for your comments. </p>
<p>One thing about the new API is that it makes writing functions like json_set() a heck of a lot easier. I could probably undertake to write something along these line in a fairly short time, although it does have some wrinkles (e.g. what do you do if the arguments say to set element 5 of a non-existent array? Set items 0 .. 4 to null?)</p>
<p>It&#8217;s certainly worth doing, though.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-39074" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39074" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 31, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Andrew:<br />
I would say so. Alternatively &#8211; make array_push(), array_unshift() functions, and make the one that changes element &#8220;inside&#8221; &#8211; work only for existing elements.</p>
	</li>
		
		
			
<li class="odd" id="comment-39557" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39557" title="">#</a></span> dezso</div>  <div class="date">Apr 15, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/11db73037dd7fb30ea7f8af83faa3147?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>This will be really a huge change, thanks for implementing it and writing about!  One question popped into my mind: how about indexing arbitrary JSONs?  Is there anything like that?  (Would be a sort of NoSQL in a yeSQL column <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="mycomment" id="comment-39558" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39558" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Apr 15, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Dezso:<br />
As I understand &#8211; currently it&#8217;s not indexable.<br />
Also, I don&#8217;t think you can create index on them, because extraction functions are stable, and not immutable. Not sure why, though. Andrew?</p>
	</li>
		
		
			
<li class="odd" id="comment-39559" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39559" title="">#</a></span> Andrew Dunstan</div>  <div class="date">Apr 15, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d438b256de7b28895c1d0db249969dd8?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Perhaps the extraction functions should be immutable. Bring it up on the -hackers list. But that&#8217;s not quite the same as indexing arbitrary json, i.e. indexing on unknown keys and values.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-39560" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39560" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Apr 15, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Andrew:<br />
Sure, it&#8217;s not the same. But at the very least it would make it possible to create functional indexes.</p>
	</li>
		
		
			
<li class="odd" id="comment-39694" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39694" title="">#</a></span> dezso</div>  <div class="date">Apr 23, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/11db73037dd7fb30ea7f8af83faa3147?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>My thought was that just as hstore can be indexed, probably a flat JSON could be indexed, too.  I see for achieving  this, one should be able to determine if a JSON is flat, though.  I have no idea for non-flat sructures&#8230;</p>
	</li>
		
		
			
<li class="mycomment" id="comment-39695" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39695" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Apr 23, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Dezso:</p>
<p>yeah, I figured. Given current limitations for both datatypes, I would say that they should be used in different scenarios:</p>
<p>if you want indexable searches, and you&#8217;re fine with &#8220;no-nesting&#8221; limitation: use hstore.<br />
if you need nested, complicated structures, and don&#8217;t care about indexing &#8211; use json.<br />
and if you need the best from both world &#8211; you&#8217;ll have to wait to see what, and when, the future will bring.</p>
	</li>
		
		
			
<li class="odd" id="comment-39938" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39938" title="">#</a></span> dezso</div>  <div class="date">May 3, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/11db73037dd7fb30ea7f8af83faa3147?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>A trackback or what: <a href="http://dba.stackexchange.com/questions/41431/use-cases-for-hstore-vs-json-datatypes-in-postgresql" rel="nofollow">http://dba.stackexchange.com/questions/41431/use-cases-for-hstore-vs-json-datatypes-in-postgresql</a></p>
	</li>
		
		
			
<li class="odd" id="comment-40100" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-40100" title="">#</a></span> Ilker</div>  <div class="date">May 20, 2013</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/8d5a0d5af1e26380f7da705d776e65a8?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hi,</p>
<p>I&#8217;ve just upgraded to Postgresql 9.3beta. When I apply json_each or json_each_text functions to a json column, the result is a set of rows with column names &#8216;key&#8217; and &#8216;value&#8217;.</p>
<p>Is there a way to get different column names like &#8216;key1&#8242; and &#8216;value1&#8242; after applying those functions?</p>
<p>PS: You can find SO question in this link: <a href="http://stackoverflow.com/questions/16650796/json-each-and-json-each-text-results-with-different-column-names" rel="nofollow">http://stackoverflow.com/questions/16650796/json-each-and-json-each-text-results-with-different-column-names</a></p>
	</li>
		
		
			
<li class="odd" id="comment-82539" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-82539" title="">#</a></span> <a href='http://unsightlyancest88.shutterfly.com/unsightlyancest88' rel='external nofollow' class='url'>Tabatha</a></div>  <div class="date">Jun 6, 2014</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/6cee720311ef634b8dcacec92d8ffc55?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Bon je n&#8217;ai pas eu l&#8217;occasion de terminer de regarder cependant je repasserai dans la semaine</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="2651" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="cf2004338b" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="46"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">2 comments</span> | <span class="wpp-views">649 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">4 comments</span> | <span class="wpp-views">622 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">290 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">225 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">160 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">150 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">135 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">134 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">124 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">109 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

