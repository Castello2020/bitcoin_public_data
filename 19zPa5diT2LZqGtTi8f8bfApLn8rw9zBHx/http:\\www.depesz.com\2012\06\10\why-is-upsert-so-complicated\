http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 20:06:50 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2468>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Why is UPSERT so complicated?</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Why is UPSERT so complicated? Comments Feed" href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2468' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2468">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" rel="bookmark" title="Permanent Link to Why is UPSERT so complicated?">Why is UPSERT so complicated?</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>June 10th, 2012 by depesz | Tags: <a href="http://www.depesz.com/tag/exception/" rel="tag">exception</a>, <a href="http://www.depesz.com/tag/insert/" rel="tag">insert</a>, <a href="http://www.depesz.com/tag/lock/" rel="tag">lock</a>, <a href="http://www.depesz.com/tag/merge/" rel="tag">merge</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/race-condition/" rel="tag">race condition</a>, <a href="http://www.depesz.com/tag/update/" rel="tag">update</a>, <a href="http://www.depesz.com/tag/upsert/" rel="tag">upsert</a> |  <a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/#comments" title="Comment on Why is UPSERT so complicated?">23 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>If you worked with certain <em>other</em> (than PostgreSQL) open source database, you might wonder why PostgreSQL doesn't have MERGE, and why UPSERT <a href="http://www.postgresql.org/docs/current/static/plpgsql-control-structures.html#PLPGSQL-UPSERT-EXAMPLE">example</a> in documentation is so complicated.</p>
<p>Well, let's try to answer the question, and look into some alternatives.</p>
<p><span id="more-2468"></span></p>
<p>First, of course &#8211; let's define the task.</p>
<p>I will need a way to either insert row, or update it, if it already exists. What does &#8220;it already exists" mean &#8211; let's assume we're talking about row with the same value in UNIQUE column.</p>
<p>For example &#8211; I have a table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span> test <span style="color: #66cc66;">&#40;</span>
    whatever INT4 <span style="color: #993333; font-weight: bold;">PRIMARY</span> <span style="color: #993333; font-weight: bold;">KEY</span><span style="color: #66cc66;">,</span>
    counter  INT4 <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">DEFAULT</span> <span style="color: #cc66cc;">0</span>
<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Very simple, but that's basically the point. I want to insert new &#8220;whatever", but if it already exists &#8211; I want instead to update the counter.</p>
<p>And &#8211; what makes UPSERT so complicated &#8211; it should never raise exception.</p>
<p>The first, simplest solution is:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">UPDATE</span> test <span style="color: #993333; font-weight: bold;">set</span> counter <span style="color: #66cc66;">=</span> counter <span style="color: #66cc66;">+</span> <span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">WHERE</span> whatever <span style="color: #66cc66;">=</span> ?;</pre></td></tr></table></div>

<p>and if it fails (modified row count is = 0) &#8211; run:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span>whatever<span style="color: #66cc66;">,</span> counter<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span>?<span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>It's so simple, it can't fail. Right? Let's see. Very simple Perl program to test:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#!/usr/bin/env perl</span>
<span style="color: #000000; font-weight: bold;">use</span> DBI<span style="color: #339933;">;</span>
<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$dbh</span> <span style="color: #339933;">=</span> DBI<span style="color: #339933;">-&gt;</span><span style="color: #000066;">connect</span><span style="color: #009900;">&#40;</span>
    <span style="color: #ff0000;">'dbi:Pg:dbname=pgdba;host=127.0.0.1;port=5920'</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #009900;">&#123;</span> <span style="color: #ff0000;">'AutoCommit'</span> <span style="color: #339933;">=&gt;</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">,</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #b1b100;">while</span> <span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #339933;">=</span> <span style="color: #000066;">int</span><span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #339933;">+</span> <span style="color: #000066;">rand</span> <span style="color: #cc66cc;">100</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$rows</span> <span style="color: #339933;">=</span> <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
        <span style="color: #ff0000;">'UPDATE test set counter = counter + 1 WHERE whatever = ?'</span><span style="color: #339933;">,</span>
        <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
        <span style="color: #0000ff;">$whatever</span>
    <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #cc66cc;">0</span> <span style="color: #339933;">==</span> <span style="color: #0000ff;">$rows</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
            <span style="color: #ff0000;">'INSERT INTO test (whatever, counter) VALUES (?, 1)'</span><span style="color: #339933;">,</span>
            <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
            <span style="color: #0000ff;">$whatever</span>
        <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>Of course it will never end (while look from line 9 to 23 doesn't have ending condition), but after running it, and pressing ctrl-c I can stop it. And I did, after couple of minutes &#8211; and we're good. No errors. So it's OK, right? Wrong.</p>
<p>Before I will show why it's wrong, let's explain what it does &#8211; in case reader of this blogpost didn't read fluently such simple Perl programs <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<ul>
<li>Line 1 &#8211; standard UNIX &#8220;shebang" to tell shell to run it via perl</li>
<li>Line 2 &#8211; load DBI module, which is all-purpose database access library</li>
<li>Lines 3-8 &#8211; it's technically one line, just indented a lot &#8211; creates database connection, using Pg driver, to database pgdba, using tcp/ip connection to 127.0.0.1, port 5920. Undefs are just a way to specify default username and lack of password. Autocommit bit in line 7 makes each statement its own transaction.</li>
<li>Line 9 &#8211; beginning of infinite loop</li>
<li>Line 10 &#8211; I pick random integer value in range 1-100</li>
<li>Lines 11-15 &#8211; single command, runs UPDATA in database with given $whatever (random value from previous step)</li>
<li>Line 16 if no rows were updated (-&gt;do() returned 0) &#8211; run next step</li>
<li>Lines 17-21 &#8211; single command, running INSERT in database</li>
</ul>
<p>All very simple, step by step doing what we need.</p>
<p>And yet, despite initial test &#8211; I say that it's wrong. Why?</p>
<p>Answer is very simple &#8211; it breaks when I'll run it many times in parallel. How? Let's see:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">'truncate test'</span>; <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#123;</span><span style="color: #000000;">1</span>..<span style="color: #000000;">10</span><span style="color: #7a0874; font-weight: bold;">&#125;</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>test.pl <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span>; <span style="color: #c20cb9; font-weight: bold;">sleep</span> <span style="color: #000000;">5</span>; <span style="color: #c20cb9; font-weight: bold;">killall</span> <span style="color: #c20cb9; font-weight: bold;">perl</span>
TRUNCATE TABLE
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12843</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12844</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">3</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12845</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">4</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12846</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">5</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12847</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">6</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12848</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">7</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12849</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">8</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12850</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">9</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12851</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">10</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">12852</span>
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">55</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">20</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">11</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">97</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">18</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">18</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">4</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">5</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">6</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">7</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">8</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">9</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>-  Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">3</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>-  Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">10</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>+  Terminated              .<span style="color: #000000; font-weight: bold;">/</span>test.pl</pre></td></tr></table></div>

<p>We have errors. But how? It shows error of duplicate key in test.pl line 17 &#8211; which is the $dbh-&gt;do() of INSERT. But the UPDATE didn't found the row. So what's going on?</p>
<p>Reason is very simple &#8211; with multiple processes working in parallel it is perfectly possible that two processes chose the same value. Both issued UPDATE &#8211; and neither of the UPDATES found a row, so they both issued INSERT. And the second insert failed.</p>
<p>Of course there is very short time for such case to happen &#8211; if the update happened 1 millisecond later &#8211; I wouldn't have the problem. That's why it's called <a href="http://en.wikipedia.org/wiki/Race_condition">race condition</a>.</p>
<p>Some people at the moment say: OK, but that's simple &#8211; just do it in transaction.</p>
<p>So, let's try. I changed the script to be:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#!/usr/bin/env perl</span>
<span style="color: #000000; font-weight: bold;">use</span> DBI<span style="color: #339933;">;</span>
<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$dbh</span> <span style="color: #339933;">=</span> DBI<span style="color: #339933;">-&gt;</span><span style="color: #000066;">connect</span><span style="color: #009900;">&#40;</span>
    <span style="color: #ff0000;">'dbi:Pg:dbname=pgdba;host=127.0.0.1;port=5920'</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #009900;">&#123;</span> <span style="color: #ff0000;">'AutoCommit'</span> <span style="color: #339933;">=&gt;</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #b1b100;">while</span> <span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #339933;">=</span> <span style="color: #000066;">int</span><span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #339933;">+</span> <span style="color: #000066;">rand</span> <span style="color: #cc66cc;">100</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$rows</span> <span style="color: #339933;">=</span> <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
        <span style="color: #ff0000;">'UPDATE test set counter = counter + 1 WHERE whatever = ?'</span><span style="color: #339933;">,</span>
        <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
        <span style="color: #0000ff;">$whatever</span>
    <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #cc66cc;">0</span> <span style="color: #339933;">==</span> <span style="color: #0000ff;">$rows</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
            <span style="color: #ff0000;">'INSERT INTO test (whatever, counter) VALUES (?, 1)'</span><span style="color: #339933;">,</span>
            <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
            <span style="color: #0000ff;">$whatever</span>
        <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #006600;">commit</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>Changes &#8211; line 7 now shows disabled autocommit, and we have line 23 which does commit() after the work has been done. We don't need BEGIN; because Perl's DBI is smart enough to start transaction whenever we are not in transaction, and some work has to be done.</p>
<p>So, with this change, we see:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">'truncate test'</span>; <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#123;</span><span style="color: #000000;">1</span>..<span style="color: #000000;">10</span><span style="color: #7a0874; font-weight: bold;">&#125;</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>test.pl <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span>; <span style="color: #c20cb9; font-weight: bold;">sleep</span> <span style="color: #000000;">5</span>; <span style="color: #c20cb9; font-weight: bold;">killall</span> <span style="color: #c20cb9; font-weight: bold;">perl</span>
TRUNCATE TABLE
...
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">23</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">98</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">22</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">77</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  duplicate key value violates unique constraint <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  Key <span style="color: #7a0874; font-weight: bold;">&#40;</span>whatever<span style="color: #7a0874; font-weight: bold;">&#41;</span>=<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">9</span><span style="color: #7a0874; font-weight: bold;">&#41;</span> already exists. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">17</span>.
...</pre></td></tr></table></div>

<p>(I removed the &#8220;job started" and &#8220;Terminated" lines for brevity).</p>
<p>It still fails? Why? Reason is very simple &#8211; transactions (in default <em>isolation level</em>) cannot prevent anything like this &#8211; they just are there to make sure that:</p>
<ul>
<li>other connections will not see &#8220;your" changes, before you will finish making them</li>
<li>if you'll decide &#8211; you can abandon all your changes &#8211; i.e. rollback</li>
</ul>
<p>That's all.</p>
<p>If you're paying attention you noticed &#8220;in default <em>isolation level</em>&#8220;.</p>
<p>There are <a href="http://www.postgresql.org/docs/current/interactive/transaction-iso.html">docs</a> on these levels, but generally they mean &#8211; how much &#8220;separated" you want your transactions. There is even &#8220;SERIALIZABLE" level, which is described like:</p>
<blockquote><p>The most strict is Serializable, which is defined by the standard in a paragraph which says that any concurrent execution of a set of Serializable transactions is guaranteed to produce the same effect as running them one at a time in some order.</p></blockquote>
<p>This might sound great. Let's test it. Another change in the test script:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#!/usr/bin/env perl</span>
<span style="color: #000000; font-weight: bold;">use</span> DBI<span style="color: #339933;">;</span>
<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$dbh</span> <span style="color: #339933;">=</span> DBI<span style="color: #339933;">-&gt;</span><span style="color: #000066;">connect</span><span style="color: #009900;">&#40;</span>
    <span style="color: #ff0000;">'dbi:Pg:dbname=pgdba;host=127.0.0.1;port=5920'</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #009900;">&#123;</span> <span style="color: #ff0000;">'AutoCommit'</span> <span style="color: #339933;">=&gt;</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #b1b100;">while</span> <span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span><span style="color: #ff0000;">'SET TRANSACTION ISOLATION LEVEL SERIALIZABLE'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #339933;">=</span> <span style="color: #000066;">int</span><span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #339933;">+</span> <span style="color: #000066;">rand</span> <span style="color: #cc66cc;">100</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$rows</span> <span style="color: #339933;">=</span> <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
        <span style="color: #ff0000;">'UPDATE test set counter = counter + 1 WHERE whatever = ?'</span><span style="color: #339933;">,</span>
        <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
        <span style="color: #0000ff;">$whatever</span>
    <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #cc66cc;">0</span> <span style="color: #339933;">==</span> <span style="color: #0000ff;">$rows</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
            <span style="color: #ff0000;">'INSERT INTO test (whatever, counter) VALUES (?, 1)'</span><span style="color: #339933;">,</span>
            <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
            <span style="color: #0000ff;">$whatever</span>
        <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #006600;">commit</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>(new line 10).</p>
<p>Unfortunately, this time, when I'll try to run is, I will get HUGE number of errors like these:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">'truncate test'</span>; <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#123;</span><span style="color: #000000;">1</span>..<span style="color: #000000;">10</span><span style="color: #7a0874; font-weight: bold;">&#125;</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>test.pl <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span> <span style="color: #000000;">2</span><span style="color: #000000; font-weight: bold;">&gt;&amp;</span><span style="color: #000000;">1</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #c20cb9; font-weight: bold;">head</span> <span style="color: #660033;">-n</span> <span style="color: #000000;">15</span>; <span style="color: #c20cb9; font-weight: bold;">sleep</span> <span style="color: #000000;">5</span>; <span style="color: #c20cb9; font-weight: bold;">killall</span> <span style="color: #c20cb9; font-weight: bold;">perl</span>
TRUNCATE TABLE
DBD::Pg::db commit failed: ERROR:  could not serialize access due to read<span style="color: #000000; font-weight: bold;">/</span><span style="color: #c20cb9; font-weight: bold;">write</span> dependencies among transactions
DETAIL:  Reason code: Canceled on identification <span style="color: #c20cb9; font-weight: bold;">as</span> a pivot, during commit attempt.
HINT:  The transaction might succeed <span style="color: #000000; font-weight: bold;">if</span> retried. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">24</span>.
DBD::Pg::db commit failed: ERROR:  could not serialize access due to read<span style="color: #000000; font-weight: bold;">/</span><span style="color: #c20cb9; font-weight: bold;">write</span> dependencies among transactions
DETAIL:  Reason code: Canceled on commit attempt with conflict <span style="color: #000000; font-weight: bold;">in</span> from prepared pivot.
HINT:  The transaction might succeed <span style="color: #000000; font-weight: bold;">if</span> retried. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">24</span>.
DBD::Pg::db commit failed: ERROR:  could not serialize access due to read<span style="color: #000000; font-weight: bold;">/</span><span style="color: #c20cb9; font-weight: bold;">write</span> dependencies among transactions
DETAIL:  Reason code: Canceled on commit attempt with conflict <span style="color: #000000; font-weight: bold;">in</span> from prepared pivot.
HINT:  The transaction might succeed <span style="color: #000000; font-weight: bold;">if</span> retried. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">24</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  could not serialize access due to read<span style="color: #000000; font-weight: bold;">/</span><span style="color: #c20cb9; font-weight: bold;">write</span> dependencies among transactions
DETAIL:  Reason code: Canceled on identification <span style="color: #c20cb9; font-weight: bold;">as</span> a pivot, during write.
HINT:  The transaction might succeed <span style="color: #000000; font-weight: bold;">if</span> retried. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">18</span>.
DBD::Pg::db <span style="color: #000000; font-weight: bold;">do</span> failed: ERROR:  could not serialize access due to read<span style="color: #000000; font-weight: bold;">/</span><span style="color: #c20cb9; font-weight: bold;">write</span> dependencies among transactions
DETAIL:  Reason code: Canceled on identification <span style="color: #c20cb9; font-weight: bold;">as</span> a pivot, during write.
HINT:  The transaction might succeed <span style="color: #000000; font-weight: bold;">if</span> retried. at .<span style="color: #000000; font-weight: bold;">/</span>test.pl line <span style="color: #000000;">18</span>.</pre></td></tr></table></div>

<p>Ouch. That sucks.</p>
<p>So, another idea might be: just use a lock. Of course. But what kind of lock? You cannot lock a row if it doesn't exist. SO we'd have to lock the table. That's doable.</p>
<p>So, let's change the line 10 from setting isolation level, to:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>10
</pre></td><td class="code"><pre class="sql" style="font-family:monospace;">    $dbh<span style="color: #66cc66;">-&gt;</span>do<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'LOCK TABLE test IN ACCESS EXCLUSIVE MODE'</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Quick run shows &#8211; NO ERROR. Yeah. We're all good. Are we? Well, not really. Reason is simple &#8211; performance.</p>
<p>Each command either inserted row with counter = 1, or updated the counter by incrementing it. So, by summing all counters &#8211; we'll see how many queries actually happened. Since all copies of the script are killed after 5 seconds we'll have some base number:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">sum</span><span style="color: #66cc66;">&#40;</span>counter<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> test;
 <span style="color: #993333; font-weight: bold;">sum</span>
─────
 <span style="color: #cc66cc;">439</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>OK. And how does it work without locking? We will have errors, but let's just see some numbers. Line 10 got commented out, and:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">'truncate test'</span>; <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#123;</span><span style="color: #000000;">1</span>..<span style="color: #000000;">10</span><span style="color: #7a0874; font-weight: bold;">&#125;</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>test.pl <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span> <span style="color: #000000; font-weight: bold;">&amp;&gt;</span> <span style="color: #000000; font-weight: bold;">/</span>dev<span style="color: #000000; font-weight: bold;">/</span>null; <span style="color: #c20cb9; font-weight: bold;">sleep</span> <span style="color: #000000;">5</span>; <span style="color: #c20cb9; font-weight: bold;">killall</span> <span style="color: #c20cb9; font-weight: bold;">perl</span>; psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">&quot;select sum(counter) from test&quot;</span>
TRUNCATE TABLE
...
 <span style="color: #c20cb9; font-weight: bold;">sum</span>
<span style="color: #660033;">------</span>
 <span style="color: #000000;">2042</span>
<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">1</span> row<span style="color: #7a0874; font-weight: bold;">&#41;</span></pre></td></tr></table></div>

<p>That's very big difference. We had some errors, but the number of logged &#8220;items" was nearly 5 times higher. So &#8211; locking of the table can be an answer, but it kills performance.</p>
<p>There is one kind of locks that could be used. These are so called <a href="http://www.postgresql.org/docs/current/interactive/explicit-locking.html#ADVISORY-LOCKS">advisory locks</a>. Using them you can lock something that doesn't exist in database &#8211; because you're applying the lock on <em>a number</em>. Not a row. Not a table. Not any object. Just <em>a number</em> (or two numbers, but that's irrelevant).</p>
<p>So &#8211; this looks like a godsend. Right? Well, mostly &#8211; yes. Let's see. Two small changes (line 10 got moved to 11 and change to create lock, and I added line 25 and 26 to remove the lock):</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#!/usr/bin/env perl</span>
<span style="color: #000000; font-weight: bold;">use</span> DBI<span style="color: #339933;">;</span>
<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$dbh</span> <span style="color: #339933;">=</span> DBI<span style="color: #339933;">-&gt;</span><span style="color: #000066;">connect</span><span style="color: #009900;">&#40;</span>
    <span style="color: #ff0000;">'dbi:Pg:dbname=pgdba;host=127.0.0.1;port=5920'</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #009900;">&#123;</span> <span style="color: #ff0000;">'AutoCommit'</span> <span style="color: #339933;">=&gt;</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #b1b100;">while</span> <span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #339933;">=</span> <span style="color: #000066;">int</span><span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #339933;">+</span> <span style="color: #000066;">rand</span> <span style="color: #cc66cc;">100</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span> <span style="color: #ff0000;">'SELECT pg_advisory_lock( ? )'</span><span style="color: #339933;">,</span> <span style="color: #000066;">undef</span><span style="color: #339933;">,</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$rows</span> <span style="color: #339933;">=</span> <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
        <span style="color: #ff0000;">'UPDATE test set counter = counter + 1 WHERE whatever = ?'</span><span style="color: #339933;">,</span>
        <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
        <span style="color: #0000ff;">$whatever</span>
    <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #cc66cc;">0</span> <span style="color: #339933;">==</span> <span style="color: #0000ff;">$rows</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
            <span style="color: #ff0000;">'INSERT INTO test (whatever, counter) VALUES (?, 1)'</span><span style="color: #339933;">,</span>
            <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
            <span style="color: #0000ff;">$whatever</span>
        <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #006600;">commit</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span> <span style="color: #ff0000;">'SELECT pg_advisory_unlock( ? )'</span><span style="color: #339933;">,</span> <span style="color: #000066;">undef</span><span style="color: #339933;">,</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #006600;">commit</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>You might ask: why I need another commit() at line 26? Answer is simple &#8211; if I didn't make it there, the unlock would work, but would be in the same transaction as next iteration of the loop. And this &#8211; while wouldn't be fully an error is a thing I don't like &#8211; doing stuff for two unrelated jobs in the same transaction.</p>
<p>So, let's run it, see if there are errors, and what's the performance:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">'truncate test'</span>; <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#123;</span><span style="color: #000000;">1</span>..<span style="color: #000000;">10</span><span style="color: #7a0874; font-weight: bold;">&#125;</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>test.pl <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span>; <span style="color: #c20cb9; font-weight: bold;">sleep</span> <span style="color: #000000;">5</span>; <span style="color: #c20cb9; font-weight: bold;">killall</span> <span style="color: #c20cb9; font-weight: bold;">perl</span>; psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">&quot;select sum(counter) from test&quot;</span>
TRUNCATE TABLE
...
 <span style="color: #c20cb9; font-weight: bold;">sum</span>
<span style="color: #660033;">------</span>
 <span style="color: #000000;">2114</span>
<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">1</span> row<span style="color: #7a0874; font-weight: bold;">&#41;</span></pre></td></tr></table></div>

<p>Looks good &#8211; no errors, and the performance number looks great. So, we're set. Right? Yeah, you guessed it &#8211; wrong.</p>
<p>Why? Reason is very simple &#8211; lack of trust.</p>
<p>Advisory locks work <b>great</b>, and will protect you from all kinds of errors. If you use them.</p>
<p>And since the advisory lock doesn't lock anything &#8220;real" in database &#8211; like table or row &#8211; it will not stop other accesses to the table &#8211; from parts of your code where you forgot about them (locks), or from psql sessions where you're too lazy to do it.</p>
<p>This wouldn't be that big of a problem generally, but PostgreSQL devs, and (to some extent) users strive for perfection. And safety in all cases. So &#8211; while using advisory locks (or even the solution with race condition) might be good for your situation &#8211; it is not good enough for the <em>general case</em>.</p>
<p>Now, let me make a small digression. I, once, long time ago, <a href="http://www.depesz.com/2006/05/13/wstawianie-rekordu-gdy-jeszcze-go-nie-ma/">wrote on Polish</a>, and then, (quite recently) David Fetter <a href="http://people.planetpostgresql.org/dfetter/index.php?/archives/48-Adding-Only-New-Rows-INSERT-IGNORE,-Done-Right.html">extended</a> description of a method to do &#8220;insert of new rows" (i.e. ignore, without error, inserting of rows that already exist).</p>
<p>Generally the method is basically either:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> test <span style="color: #66cc66;">&#40;</span>whatever<span style="color: #66cc66;">,</span> counter<span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #cc66cc;">123</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">where</span> <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">exists</span> <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> test <span style="color: #993333; font-weight: bold;">where</span> whatever <span style="color: #66cc66;">=</span> <span style="color: #cc66cc;">123</span><span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>or the same, with OUTER JOIN:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span>whatever<span style="color: #66cc66;">,</span> counter<span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">SELECT</span> v<span style="color: #66cc66;">.*</span>
<span style="color: #993333; font-weight: bold;">FROM</span>
    <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">123</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> v<span style="color: #66cc66;">&#40;</span>w<span style="color: #66cc66;">,</span> c<span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">LEFT</span> <span style="color: #993333; font-weight: bold;">JOIN</span> test t <span style="color: #993333; font-weight: bold;">on</span> t<span style="color: #66cc66;">.</span>whatever <span style="color: #66cc66;">=</span> v<span style="color: #66cc66;">.</span>w
<span style="color: #993333; font-weight: bold;">WHERE</span>
    t<span style="color: #66cc66;">.</span>whatever <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NULL</span>;</pre></td></tr></table></div>

<p>Unfortunately both of these approaches have the same problem &#8211; race condition. Window of opportunity for the error is shorter than in case of two queries, but it exists. I will not show it, because test is trivial, and I don't want to inflate this, already big, blogpost, but you can either trust me or simply run the test yourself.</p>
<p>End of digression, back to main track.</p>
<p>So, we need a way to do the update, insert if it didn't work, and then &#8211; if insert failed redo update. Seems simple, with one problem &#8211; we wanted errors not to happen.</p>
<p>And now we should ask ourselves &#8211; what does it mean that &#8220;error did not happen". Does it mean that at no point we saw the &#8220;ERROR" text, or simply &#8211; that we have one transaction that does the change in dataase, and that it will <em>always</em> succeed, but might sometime log error (but it will still succeed).</p>
<p>If we want to get rid of errors altogether &#8211; we need to dive into PL/pgSQL language, but for now &#8211; let's just assume we want it done in single transaction, that will always succeed. Errors might be shown, but each iteration of loop from line 9, should increment a counter in database.</p>
<p>So, I'll use a relatively unknown feature of PostgreSQL: <a href="http://www.postgresql.org/docs/current/interactive/sql-savepoint.html">SAVEPOINT</a>. Savepoint is a &#8220;thing" within transaction, that we can always roll back to, even in case of errors that happened after setting savepoint.</p>
<p>New version of test program:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#!/usr/bin/env perl</span>
<span style="color: #000000; font-weight: bold;">use</span> DBI<span style="color: #339933;">;</span>
<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$dbh</span> <span style="color: #339933;">=</span> DBI<span style="color: #339933;">-&gt;</span><span style="color: #000066;">connect</span><span style="color: #009900;">&#40;</span>
    <span style="color: #ff0000;">'dbi:Pg:dbname=pgdba;host=127.0.0.1;port=5920'</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #009900;">&#123;</span> <span style="color: #ff0000;">'AutoCommit'</span> <span style="color: #339933;">=&gt;</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">,</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #b1b100;">for</span> <span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #339933;">..</span><span style="color: #cc66cc;">500</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #339933;">=</span> <span style="color: #000066;">int</span><span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #339933;">+</span> <span style="color: #000066;">rand</span> <span style="color: #cc66cc;">100</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$rows</span> <span style="color: #339933;">=</span> <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
        <span style="color: #ff0000;">'UPDATE test set counter = counter + 1 WHERE whatever = ?'</span><span style="color: #339933;">,</span>
        <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
        <span style="color: #0000ff;">$whatever</span>
    <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #cc66cc;">1</span> <span style="color: #339933;">==</span> <span style="color: #0000ff;">$rows</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #006600;">commit</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #b1b100;">next</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span><span style="color: #ff0000;">'SAVEPOINT x'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #0000ff;">$rows</span> <span style="color: #339933;">=</span> <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
        <span style="color: #ff0000;">'INSERT INTO test (whatever, counter) VALUES (?, 1)'</span><span style="color: #339933;">,</span>
        <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
        <span style="color: #0000ff;">$whatever</span>
    <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #cc66cc;">1</span> <span style="color: #339933;">==</span> <span style="color: #0000ff;">$rows</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #006600;">commit</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
        <span style="color: #b1b100;">next</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span> <span style="color: #ff0000;">'ROLLBACK TO x'</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span>
        <span style="color: #ff0000;">'UPDATE test set counter = counter + 1 WHERE whatever = ?'</span><span style="color: #339933;">,</span>
        <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
        <span style="color: #0000ff;">$whatever</span>
    <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #006600;">commit</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>(I know, it's not pretty, but should be simple to understand).</p>
<p>So, what does it do? First &#8211; I changed the loop from infinite to &#8220;do 500 operations". I run 10 parallel tasks, which should give me 5000 operations in database &#8211; which is a bit more than I did previously, but should be good enough to see how it works.</p>
<p>Then &#8211; I do update, and see if it worked. If it did &#8211; fine, commit transaction, and do another loop.</p>
<p>If it didn't work &#8211; I create savepoint, imaginatively named &#8220;x", and call insert &#8211; this time, checking how many rows were inserted.</p>
<p>If the row was inserted &#8211; commit the transaction, and continue with next loop &#8211; I don't have to &#8220;destroy" savepoints &#8211; they &#8220;live" within transaction only, so when you commit transaction savepoint is removed too.</p>
<p>If the row was not inserted (because of, in our case, UNIQUE violation) &#8211; issue rollback to savepoint x (thus removing &#8220;transaction is aborted" state), and redo update. Since we now know that the row is there &#8211; we don't have to check anything, just do it, commit, and continue with next iteration of the loop.</p>
<p>Results?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">=</span>$ psql <span style="color: #66cc66;">-</span>c <span style="color: #ff0000;">'truncate test'</span>; <span style="color: #993333; font-weight: bold;">for</span> i <span style="color: #993333; font-weight: bold;">in</span> <span style="color: #66cc66;">&#123;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">..</span><span style="color: #cc66cc;">10</span><span style="color: #66cc66;">&#125;</span>; do <span style="color: #66cc66;">./</span>test<span style="color: #66cc66;">.</span>pl &amp; done; <span style="color: #993333; font-weight: bold;">time</span> wait; psql <span style="color: #66cc66;">-</span>c <span style="color: #ff0000;">&quot;select sum(counter) from test&quot;</span>
<span style="color: #993333; font-weight: bold;">TRUNCATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span>
<span style="color: #66cc66;">...</span>
DBD::Pg::db do failed: ERROR:  duplicate <span style="color: #993333; font-weight: bold;">key</span> <span style="color: #993333; font-weight: bold;">value</span> violates <span style="color: #993333; font-weight: bold;">unique</span> <span style="color: #993333; font-weight: bold;">constraint</span> <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  <span style="color: #993333; font-weight: bold;">Key</span> <span style="color: #66cc66;">&#40;</span>whatever<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">=</span><span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">46</span><span style="color: #66cc66;">&#41;</span> already <span style="color: #993333; font-weight: bold;">exists</span><span style="color: #66cc66;">.</span> at <span style="color: #66cc66;">./</span>test<span style="color: #66cc66;">.</span>pl line <span style="color: #cc66cc;">21</span><span style="color: #66cc66;">.</span>
DBD::Pg::db do failed: ERROR:  duplicate <span style="color: #993333; font-weight: bold;">key</span> <span style="color: #993333; font-weight: bold;">value</span> violates <span style="color: #993333; font-weight: bold;">unique</span> <span style="color: #993333; font-weight: bold;">constraint</span> <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  <span style="color: #993333; font-weight: bold;">Key</span> <span style="color: #66cc66;">&#40;</span>whatever<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">=</span><span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">90</span><span style="color: #66cc66;">&#41;</span> already <span style="color: #993333; font-weight: bold;">exists</span><span style="color: #66cc66;">.</span> at <span style="color: #66cc66;">./</span>test<span style="color: #66cc66;">.</span>pl line <span style="color: #cc66cc;">21</span><span style="color: #66cc66;">.</span>
DBD::Pg::db do failed: ERROR:  duplicate <span style="color: #993333; font-weight: bold;">key</span> <span style="color: #993333; font-weight: bold;">value</span> violates <span style="color: #993333; font-weight: bold;">unique</span> <span style="color: #993333; font-weight: bold;">constraint</span> <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  <span style="color: #993333; font-weight: bold;">Key</span> <span style="color: #66cc66;">&#40;</span>whatever<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">=</span><span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">81</span><span style="color: #66cc66;">&#41;</span> already <span style="color: #993333; font-weight: bold;">exists</span><span style="color: #66cc66;">.</span> at <span style="color: #66cc66;">./</span>test<span style="color: #66cc66;">.</span>pl line <span style="color: #cc66cc;">21</span><span style="color: #66cc66;">.</span>
DBD::Pg::db do failed: ERROR:  duplicate <span style="color: #993333; font-weight: bold;">key</span> <span style="color: #993333; font-weight: bold;">value</span> violates <span style="color: #993333; font-weight: bold;">unique</span> <span style="color: #993333; font-weight: bold;">constraint</span> <span style="color: #ff0000;">&quot;test_pkey&quot;</span>
DETAIL:  <span style="color: #993333; font-weight: bold;">Key</span> <span style="color: #66cc66;">&#40;</span>whatever<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">=</span><span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">71</span><span style="color: #66cc66;">&#41;</span> already <span style="color: #993333; font-weight: bold;">exists</span><span style="color: #66cc66;">.</span> at <span style="color: #66cc66;">./</span>test<span style="color: #66cc66;">.</span>pl line <span style="color: #cc66cc;">21</span><span style="color: #66cc66;">.</span>
<span style="color: #66cc66;">...</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">real</span>    0m12<span style="color: #66cc66;">.</span>216s
<span style="color: #993333; font-weight: bold;">user</span>    0m1<span style="color: #66cc66;">.</span>228s
sys     0m0<span style="color: #66cc66;">.</span>336s
 <span style="color: #993333; font-weight: bold;">sum</span>
<span style="color: #808080; font-style: italic;">------</span>
 <span style="color: #cc66cc;">5000</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>So, we see that we had INSERT error four times. But final count on table shows that all iterations of the loop did in fact increment a counter &#8211; which means that savepoint worked.</p>
<p>What about performance? Previously we had ~ 2100 increments in 5 seconds. This time we have 5000 in 12.2 seconds. This means that this is only ~ 3% slower than version with advisory locks.</p>
<p>But, I have to admit, I cheated a little. We do 5000 inserts, but we have only 100 different values of &#8220;whatever". Which means that in 4896 cases flow of the loop ended right after first update.</p>
<p>Whether this is an issue for you &#8211; you have to consider yourself, and perhaps redo tests with different number of loops, or different range of &#8220;whatever" values.</p>
<p>Of course &#8211; you might say that you don't like the fact that the program shows errors. I could silence them in script, or I could move to stored procedure. Since the code <a href="http://www.postgresql.org/docs/current/static/plpgsql-control-structures.html#PLPGSQL-UPSERT-EXAMPLE">in docs</a> used procedure &#8211; let's use it.</p>
<p>PL/pgSQL function that does the same logic is:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> upsert_test<span style="color: #66cc66;">&#40;</span> in_whatever INT4 <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> void <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">UPDATE</span> test <span style="color: #993333; font-weight: bold;">set</span> counter <span style="color: #66cc66;">=</span> counter <span style="color: #66cc66;">+</span> <span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">WHERE</span> whatever <span style="color: #66cc66;">=</span> in_whatever;
    <span style="color: #993333; font-weight: bold;">IF</span> FOUND <span style="color: #993333; font-weight: bold;">THEN</span>
        <span style="color: #993333; font-weight: bold;">RETURN</span>;
    <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
    <span style="color: #993333; font-weight: bold;">BEGIN</span>
        <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span>whatever<span style="color: #66cc66;">,</span> counter<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span>in_whatever<span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;
    EXCEPTION <span style="color: #993333; font-weight: bold;">WHEN</span> OTHERS <span style="color: #993333; font-weight: bold;">THEN</span>
        <span style="color: #993333; font-weight: bold;">UPDATE</span> test <span style="color: #993333; font-weight: bold;">set</span> counter <span style="color: #66cc66;">=</span> counter <span style="color: #66cc66;">+</span> <span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">WHERE</span> whatever <span style="color: #66cc66;">=</span> in_whatever;
    <span style="color: #993333; font-weight: bold;">END</span>;
    <span style="color: #993333; font-weight: bold;">RETURN</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;</pre></td></tr></table></div>

<p>and this allowed me to simplify perl test script to:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#!/usr/bin/env perl</span>
<span style="color: #000000; font-weight: bold;">use</span> DBI<span style="color: #339933;">;</span>
<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$dbh</span> <span style="color: #339933;">=</span> DBI<span style="color: #339933;">-&gt;</span><span style="color: #000066;">connect</span><span style="color: #009900;">&#40;</span>
    <span style="color: #ff0000;">'dbi:Pg:dbname=pgdba;host=127.0.0.1;port=5920'</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #000066;">undef</span><span style="color: #339933;">,</span>
    <span style="color: #009900;">&#123;</span> <span style="color: #ff0000;">'AutoCommit'</span> <span style="color: #339933;">=&gt;</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">,</span> <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #b1b100;">for</span> <span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #339933;">..</span><span style="color: #cc66cc;">500</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #339933;">=</span> <span style="color: #000066;">int</span><span style="color: #009900;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #339933;">+</span> <span style="color: #000066;">rand</span> <span style="color: #cc66cc;">100</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #0000ff;">$dbh</span><span style="color: #339933;">-&gt;</span><span style="color: #b1b100;">do</span><span style="color: #009900;">&#40;</span> <span style="color: #ff0000;">'SELECT upsert_test( ? )'</span><span style="color: #339933;">,</span> <span style="color: #000066;">undef</span><span style="color: #339933;">,</span> <span style="color: #0000ff;">$whatever</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>Couple of notes:</p>
<ul>
<li>there is no &#8220;SAVEPOINT" command in PL/pgSQL. But the inner BEGIN (line 7) does exactly the same thing.</li>
<li>WHEN OTHERS (function, line 9) is a &#8220;catch all" type of exception handler. Doing &#8220;WHEN unique_violation" (as in <a href="http://www.postgresql.org/docs/current/static/plpgsql-control-structures.html#PLPGSQL-UPSERT-EXAMPLE">Pg docs</a> is cleaner, but it's not relevant at the moment</li>
<li>You might have noticed that Perl script is again using AutoCommit &#8211; this is because now every transaction is just one command (select from function), so we don't need explicit transactions. Thought &#8211; in real life applications I wouldn't use autocommit.</li>
</ul>
<p>So, how it works?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">'truncate test'</span>; <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#123;</span><span style="color: #000000;">1</span>..<span style="color: #000000;">10</span><span style="color: #7a0874; font-weight: bold;">&#125;</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>test.pl <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span>; <span style="color: #000000; font-weight: bold;">time</span> <span style="color: #7a0874; font-weight: bold;">wait</span>; psql <span style="color: #660033;">-c</span> <span style="color: #ff0000;">&quot;select sum(counter) from test&quot;</span>
TRUNCATE TABLE
...
&nbsp;
real    0m12.094s
user    0m0.932s
sys     0m0.268s
 <span style="color: #c20cb9; font-weight: bold;">sum</span>
<span style="color: #660033;">------</span>
 <span style="color: #000000;">5000</span>
<span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">1</span> row<span style="color: #7a0874; font-weight: bold;">&#41;</span></pre></td></tr></table></div>

<p>No errors on screen. No errors in logs. Performance acceptable. Function a bit simpler than the one in logs (no loop, just simple 3 queries).</p>
<p>So we're good? Yeah, sure, you expected it. No, we're not good.</p>
<p>We forgot about one fact. DELETEs happen.</p>
<p>What will happen, if we'd have following case:</p>
<table class="num">
<thead>
<tr>
<th>session #1</th>
<th>session #2</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>update &#8230; &#8211; fails, there is no row</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>insert</td>
</tr>
<tr>
<td>insert &#8211; fails, the row exists</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>DELETE</td>
</tr>
<tr>
<td>update &#8211; fails, there is no row!</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<p>Of course the chances for such case are very low. And the timing would have to be perfect. But it is technically possible, and if it is technically possible, it should be at least mentioned, and at best &#8211; solved.</p>
<p>This is, of course, another case of race condition. And this is exactly the reason why docs version of the upsert function has a loop.</p>
<p>If you'll excuse me &#8211; I will skip showing the error happening &#8211; as it requires either changing the code by adding artificial slowdowns, or a lot of luck, or a lot of time. But I hope you understand why the DELETEs can cause problems. And why loop is needed to solve the problem.</p>
<p>Of course &#8211; adding the loop, the way as its shown in docs, introduces potential infinite loop &#8211; code that runs inserts and deletes, and runs in perfect synchronization with your function will cause your function to never end.</p>
<p>But such situation is simply improbable (running in perfect synchronization), so we should be good, and the loop will at most redo its work twice.</p>
<p>So, all in all &#8211; now, I hope, you understand why code in documentation is so complex with exception handling and loop.</p>
<p>In your own programs you can use another approaches. For example &#8211; if you're sure you're running just one writing client at a time &#8211; you can use the way with outer join or &#8220;exists" that I mentioned in digression. If you are sure about your app, and that noone will ever touch the database otherwise &#8211; you can use advisory locks (these would work with DELETE's too, as long as delete would use advisory lock too). Or you can use exception handling, and possibly loop. It all depends on a case that you have.</p>
<p>As a final word &#8211; yeah, but why PostgreSQL doesn't handle it internally, as the other database?</p>
<p>Answer lies somewhere between &#8220;developers have other things to do first" and &#8220;it's complicated, because there are many ways to do it, and the most correct one is slow &#8211; so there is a trade off decision to be made".</p>
<p>I don't know which method was used by &#8220;MERGE" in the other database, and would like to know what kind of trade offs they made &#8211; speed over correctness, or the other way around. And to what extent.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">23 comments <a href='http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-35576" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35576" title="">#</a></span> <a href='http://blog.mclaughlinsoftware.com/2009/05/25/mysql-merge-gone-awry/' rel='external nofollow' class='url'>Matt</a></div>  <div class="date">Jun 10, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f2d87f9b4635242b9041adb1e6cd4a19?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>As noted, MERGE is complicated and slow.  If two different database servers implement it, then it is going to be implemented with different schematics.  Oracle and MySQL already have different implementation&#8217;s, and to nobody&#8217;s surprise, MySQL&#8217;s implementation allows for risky behavior that does not protect the data.  PostgreSQL users expect that any data put into the database will reliably come out of the database.  So MERGE is slow and inconsistently implemented.  The correct thing to do is make the application aware of if a record is new or existing.  Any application making use of MERGE should open a bug to replace it with more predictable and faster logic using INSERT and UPDATE.</p>
<p>If an application does use MERGE, it has to account for implementation specific behavior and not will not be portable, in a safe way, to other database servers.  So it is not suitable for ORM&#8217;s or database independent applications.</p>
<p>So what is a legitimate use case for MERGE where not knowing if a record is new or existing is not possible prior to the transaction?  They only thing that I can think of is one-off scripts that do not have any concurrency.  But if you design for that, then some misguided ORM for web applications is going to use your MERGE function and users are going to wonder about what happened to their data when concurrency concerns were ignored or not understood.</p>
	</li>
		
		
			
<li class="odd" id="comment-35579" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35579" title="">#</a></span> metys</div>  <div class="date">Jun 11, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/0324156e46a4e97865b8126c3e2861e5?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Nice &amp; clear solition! &#8230;as usual! <img src="http://www.depesz.com/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-35584" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35584" title="">#</a></span> <a href='http://rhaas.blogspot.com' rel='external nofollow' class='url'>Robert Haas</a></div>  <div class="date">Jun 11, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Nice explanation.</p>
	</li>
		
		
			
<li class="odd" id="comment-35587" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35587" title="">#</a></span> Angus</div>  <div class="date">Jun 11, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Are upserts not  really not a DSS type operation in which you would get better performance having a separate insert/ update operations vs the overhead of errors generation?</p>
	</li>
		
		
			
<li class="odd" id="comment-35603" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35603" title="">#</a></span> Matt</div>  <div class="date">Jun 14, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f2d87f9b4635242b9041adb1e6cd4a19?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Regarding overhead and more, I submitted a long comment about this a day or so ago, but added a link and mentioned &#8220;that other database&#8221;, so it is probably being held for approval.  Basically, my conclusion is that combined operations are going to be slower.  If you know your data has never entered its table before, an INSERT is always going to be faster.  I see this as useful for poorly designed database abstraction layers and applications that do not know if something is new or not and certain types of load scenarios.</p>
<p>If your application is currently doing a SELECT before choosing between INSERT or UPDATE because it does not know if a given record exists or not, then this has the potential to be faster since making that choice will be faster as the logic is moved closer to the database engine.  However, certain operations will be added to make sure that this is done safely, which is the expectation with all PostgreSQL design choices.</p>
	</li>
		
		
			
<li class="odd" id="comment-35626" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35626" title="">#</a></span> Berend Tober</div>  <div class="date">Jun 24, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Can you arrange the stored procedure to try the INSERT first, trapping a duplicate key exception, and then if that fails because of duplicate key do the UPDATE?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35627" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35627" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 24, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Berend:<br />
sure, but it doesn&#8217;t change anything. Because still concurrent delete might occur, and delete the existing row before update.</p>
<p>Positioning update as first command is beneficial because trapping errors is *relatively* expensive. Not very, just more than normal query running. So, it&#8217;s better to run update first, and only if it &#8220;failed&#8221; &#8211; run the expensive block of exception catching and insert.</p>
	</li>
		
		
			
<li class="odd" id="comment-35673" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35673" title="">#</a></span> Tobias Florek</div>  <div class="date">Jun 26, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/05d72a85a99ae2b0e530007de1347ee2?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>is it possible to lock the table for DELETEs? wouldn&#8217;t that &#8220;solve&#8221; the most hairy problems. for some (let&#8217;s say: most) workloads a delete-lock might be acceptable.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35680" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35680" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 26, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Tobias:</p>
<p>well, you could use advisory locks. but it&#8217;s no match for &#8220;rogue&#8221; delete.<br />
you could write a trigger that rejects deletes and enable/disable it for the time you need.<br />
you could revoke delete privileges.</p>
	</li>
		
		
			
<li class="odd" id="comment-36380" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36380" title="">#</a></span> Wayne</div>  <div class="date">Oct 17, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>@MATT</p>
<p>Yes, MERGE maybe be a slower operation, but can it possibly be slower than having to issue an INSERT over the network, get back the exception over the network, issue an INSERT over the network, get back the result over the network? That is four network round-trips instead of two. I would venture to guess that whatever slowness MERGE/REPLACE introduces would be WAY faster than having to deal with one more network round-trip.</p>
<p>Some would argue that MERGE/REPLACE can be accomplished with a stored proc or function. Yes, but that routine would only handle a small set of use cases. And besides, why have the user roll a custom solution when this functionality is already so widely available with other DBMS?</p>
	</li>
		
		
			
<li class="odd" id="comment-36381" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36381" title="">#</a></span> Wayne</div>  <div class="date">Oct 17, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>@MATT</p>
<p>Also, I strongly disagree that MERGE/REPLACE is only used in one-off scripts. There are many situations where someone would want to replace existing data when doing an update. One example would be for auditing events. You don&#8217;t really care if an event has already been logged, you just want to make sure that it is being logged now. The fact that this feature is available in Oracle and MySQL, AND the fact that many people have already requested this feature in Postgress, should tell you that MERGE/REPLACE is not only for one-off use cases.</p>
	</li>
		
		
			
<li class="odd" id="comment-36413" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36413" title="">#</a></span> <a href='http://sam.vilain.net/' rel='external nofollow' class='url'>SamVilain</a></div>  <div class="date">Oct 25, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/4f98eae5330b95c5bb92ab705fb5a7c1?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I think your SERIALIZABLE example is incorrect; you&#8217;re supposed to trap the error that you received and retry the entire transaction in the event of a serialization error.  If you do this then you shouldn&#8217;t have this issue.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-36414" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36414" title="">#</a></span> <a href='http://depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Oct 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@SamVilain:<br />
sure, but that kind-of defeats the purpose. I know I can retry, and I can retry under any isolation level, in every case. The point of this blogpost is to provide an idea how to write (or how not to write) solution that will work with single run.</p>
	</li>
		
		
			
<li class="odd" id="comment-36566" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36566" title="">#</a></span> <a href='http://www.debiki.com' rel='external nofollow' class='url'>KajMagnus</a></div>  <div class="date">Dec 1, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/5c61b4a2bb3858e9fd2de8dcb9ba3e14?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Thanks for writing this interesting article</p>
<p>Concerning the last part the article, when session 2 does a DELETE. Since there&#8217;s a race condition anyway, I think you could simply do the easiest thing, and pretend that the DELETE happened after the failed UPDATE, and simply skip the UPDATE. — That is, something like:</p>
<p>    EXCEPTION WHEN OTHERS THEN<br />
        UPDATE test set counter = counter + 1 WHERE whatever = in_whatever;<br />
        &#8212; another session deleted the row:<br />
        EXCEPTION WHEN OTHERS THEN<br />
           RETURN; &#8212; doesn&#8217;t matter, race condition regardless<br />
        END;<br />
    END;<br />
    RETURN;</p>
	</li>
		
		
			
<li class="mycomment" id="comment-36567" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36567" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Dec 1, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@KajMagnus:</p>
<p>Not sure what you means &#8211; UPDATE will not raise exception if someone deletes the row.</p>
	</li>
		
		
			
<li class="odd" id="comment-37041" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-37041" title="">#</a></span> Dmitriy</div>  <div class="date">Jan 17, 2013</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/6605901e50e165ac3e642110d53b8abb?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>One of the most beautiful and informative posts I&#8217;ve ever read. Thank you very much for such detailed explanation, kind sir.</p>
	</li>
		
		
			
<li class="odd" id="comment-37103" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-37103" title="">#</a></span> <a href='http://dba.stackexchange.com/users/6219/dezso' rel='external nofollow' class='url'>dezso</a></div>  <div class="date">Jan 23, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/11db73037dd7fb30ea7f8af83faa3147?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Depesz UPDATE will throw an exception (&#8216;ERROR:  40001: could not serialize access due to concurrent update&#8217;) if not in read committed isolation level.  I know this was not the case in your examples, just found worth mentioning it.  Otherwise this is a great article, but that&#8217;s not a big surprise <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-37642" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-37642" title="">#</a></span> RobJ</div>  <div class="date">Feb 25, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/bf87b4173ec6110e0477e13012805827?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I can do an UPSERT with a CTE in a single SQL statement, which might take care of concurrency issues.  Have I stumbled upon something useful, or did everybody already know this?  Here&#8217;s the example:</p>
<p>=&gt; create table t (n int primary key, c varchar(10));<br />
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index &#8220;t_pkey&#8221; for table &#8220;t&#8221;<br />
insert into t values (1, &#8216;hello&#8217;);<br />
CREATE TABLE<br />
=&gt; insert into t values (1, &#8216;hello&#8217;);<br />
INSERT 0 1<br />
=&gt; select * from t;<br />
 n |   c<br />
&#8212;+&#8212;&#8212;-<br />
 1 | hello<br />
(1 row)</p>
<p>=&gt; with<br />
postgres-&gt; upsert<br />
postgres-&gt; as<br />
postgres-&gt; (select 2 as n, &#8216;world&#8217;::varchar as c),<br />
postgres-&gt; update_option<br />
postgres-&gt; as<br />
postgres-&gt; (update t set c = upsert.c from upsert where t.n = upsert.n)<br />
postgres-&gt; insert into t<br />
postgres-&gt; select upsert.n, upsert.c from upsert where not exists(select 1 from t where t.n = upsert.n);<br />
INSERT 0 1<br />
=&gt; select * from t order by n;<br />
 n |   c<br />
&#8212;+&#8212;&#8212;-<br />
 1 | hello<br />
 2 | world<br />
(2 rows)</p>
<p>=&gt; with<br />
postgres-&gt; upsert<br />
postgres-&gt; as<br />
postgres-&gt; (select 1 as n, &#8216;goodbye&#8217;::varchar as c),<br />
postgres-&gt; update_option<br />
postgres-&gt; as<br />
postgres-&gt; (update t set c = upsert.c from upsert where t.n = upsert.n)<br />
postgres-&gt; insert into t<br />
postgres-&gt; select upsert.n, upsert.c from upsert where not exists(select 1 from t where t.n = upsert.n);<br />
INSERT 0 0<br />
=&gt; select * from t order by n;<br />
 n |    c<br />
&#8212;+&#8212;&#8212;&#8212;<br />
 1 | goodbye<br />
 2 | world<br />
(2 rows)</p>
	</li>
		
		
			
<li class="mycomment" id="comment-37643" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-37643" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Feb 25, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@RobJ:<br />
it is rather known, but it&#8217;s not race-condition free.</p>
	</li>
		
		
			
<li class="odd" id="comment-41166" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41166" title="">#</a></span> Chirag</div>  <div class="date">Jul 28, 2013</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>what if :<br />
new data insert</p>
<p>else data exist then row lock and then update.</p>
<p>will this work</p>
	</li>
		
		
			
<li class="mycomment" id="comment-41177" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41177" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jul 29, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Chirag:<br />
it would be the same thing as the LOOPing function, it&#8217;s just insert first, and update later.</p>
<p>Lock is irrelevant, because UPDATE gets lock too, and delete of the row can happen between failed insert and lock as with insert and update.</p>
	</li>
		
		
			
<li class="odd" id="comment-45899" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-45899" title="">#</a></span> Dave</div>  <div class="date">Apr 24, 2014</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/26f4cda30c85bddeb50b881a98d804e2?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>What about<br />
begin transaction;<br />
  ctr = select Coalesce(counter,0) from test where whatever = ?;<br />
  delete from test where whatever = ?;<br />
  insert into test(ctr+1, ?);<br />
 commit transaction;</p>
	</li>
		
		
			
<li class="mycomment" id="comment-45904" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-45904" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Apr 24, 2014</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Dave:</p>
<p>not sure what you mean &#8220;what about&#8221;. clearly it&#8217;s buggy. consider case where the row does *not* exist when select/delete happens, but is inserted in other transaction just before insert in this transaction.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="2468" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="83b69b465f" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="99"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">604 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">375 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">284 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">223 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">171 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">153 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">150 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">137 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">135 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/" title="How I Learned to Stop Worrying and Love the Triggers" class="wpp-post-title" target="_self">How I Learned to Stop Worrying and Love the Triggers</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">107 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

