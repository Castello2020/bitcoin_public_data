http://www.depesz.com/2013/08/30/pick-a-task-to-work-on/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 21:29:15 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2743>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Pick a task to work on</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Pick a task to work on Comments Feed" href="http://www.depesz.com/2013/08/30/pick-a-task-to-work-on/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2013/08/30/pick-a-task-to-work-on/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2743' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2743">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2013/08/30/pick-a-task-to-work-on/" rel="bookmark" title="Permanent Link to Pick a task to work on">Pick a task to work on</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>August 30th, 2013 by depesz | Tags: <a href="http://www.depesz.com/tag/advisory/" rel="tag">advisory</a>, <a href="http://www.depesz.com/tag/advisory-locks/" rel="tag">advisory locks</a>, <a href="http://www.depesz.com/tag/list/" rel="tag">list</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/python/" rel="tag">python</a>, <a href="http://www.depesz.com/tag/queue/" rel="tag">queue</a>, <a href="http://www.depesz.com/tag/task/" rel="tag">task</a> |  <a href="http://www.depesz.com/2013/08/30/pick-a-task-to-work-on/#comments" title="Comment on Pick a task to work on">8 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>There are cases where system stores list of things to do, and then there are some worker processes that check the list, pick something to work on, do it, and remove from the list.</p>
<p>Proper solution is to use some kind of queuing system. There is even <a href="http://skytools.projects.pgfoundry.org/doc/pgq-sql.html">PgQ</a> which works withing PostgreSQL, but some people are not happy with it, as it requires compilation and installation. So they just use plain selects.</p>
<p>Will that work OK?</p>
<p><span id="more-2743"></span></p>
<p>Let's imagine, that our queue contains 10 thousand strings, and we want to calculate MD5 checksums of them.</p>
<p>Since I want my test to be at least a bit realistic, I will also need priority. Some tasks are more important than others. Let me assume that priority is based on number of repetitions of first character. So string &#8220;ddwhatever" should be processed before &#8220;abc" (because of &#8220;d" repetition).</p>
<p>Additionally, I will need some timestamp &#8211; to simulate the fact that some rows have been inserted earlier, and some later. For now, it will be pretty simple &#8211; I will choose some arbitrary timestamp, and then increment with 1 second for every line.</p>
<p>Since I will be redoing the test multiple times, I'll pre-generate list of strings, with simple python:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="python" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">#!/usr/bin/env python</span>
<span style="color: #808080; font-style: italic;"># -*- coding: utf-8 -*-</span>
<span style="color: #ff7700;font-weight:bold;">import</span> <span style="color: #dc143c;">string</span>
<span style="color: #ff7700;font-weight:bold;">import</span> <span style="color: #dc143c;">random</span>
<span style="color: #ff7700;font-weight:bold;">import</span> <span style="color: #dc143c;">time</span>
&nbsp;
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> line_generator<span style="color: black;">&#40;</span>use_time<span style="color: black;">&#41;</span>:
    size <span style="color: #66cc66;">=</span> <span style="color: #ff4500;">50</span>
    chars <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">string</span>.<span style="color: black;">letters</span> + <span style="color: #dc143c;">string</span>.<span style="color: black;">digits</span>
    random_string <span style="color: #66cc66;">=</span> <span style="color: #483d8b;">''</span>.<span style="color: black;">join</span><span style="color: black;">&#40;</span><span style="color: #dc143c;">random</span>.<span style="color: black;">choice</span><span style="color: black;">&#40;</span>chars<span style="color: black;">&#41;</span> <span style="color: #ff7700;font-weight:bold;">for</span> x <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #008000;">range</span><span style="color: black;">&#40;</span>size<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    priority <span style="color: #66cc66;">=</span> <span style="color: #ff4500;">49</span> - <span style="color: #008000;">len</span><span style="color: black;">&#40;</span>random_string.<span style="color: black;">lstrip</span><span style="color: black;">&#40;</span>random_string<span style="color: black;">&#91;</span><span style="color: #ff4500;">0</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    timestamp <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">time</span>.<span style="color: black;">strftime</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'%Y-%m-%d %H:%M:%S'</span><span style="color: #66cc66;">,</span> <span style="color: #dc143c;">time</span>.<span style="color: black;">localtime</span><span style="color: black;">&#40;</span>use_time<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #483d8b;">'%s<span style="color: #000099; font-weight: bold;">\t</span>%s<span style="color: #000099; font-weight: bold;">\t</span>%s<span style="color: #000099; font-weight: bold;">\n</span>'</span> % <span style="color: black;">&#40;</span>random_string<span style="color: #66cc66;">,</span> <span style="color: #008000;">str</span><span style="color: black;">&#40;</span>priority<span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span> timestamp<span style="color: black;">&#41;</span>
&nbsp;
start_time <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">time</span>.<span style="color: #dc143c;">time</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span> - <span style="color: #ff4500;">100000000</span>
f <span style="color: #66cc66;">=</span> <span style="color: #008000;">file</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'/tmp/md5_data.txt'</span><span style="color: #66cc66;">,</span> <span style="color: #483d8b;">'w'</span><span style="color: black;">&#41;</span>
<span style="color: #ff7700;font-weight:bold;">for</span> i <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #008000;">xrange</span><span style="color: black;">&#40;</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">10001</span><span style="color: black;">&#41;</span>:
    f.<span style="color: black;">write</span><span style="color: black;">&#40;</span>line_generator<span style="color: black;">&#40;</span>start_time<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    start_time +<span style="color: #66cc66;">=</span> <span style="color: #ff4500;">1</span>
f.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span></pre></td></tr></table></div>

<p>The data looks like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">1hEBJdCz8vpbiBv3oQWZzksmPyROyFRnqCHcxaQIOnf9Bt69DX	0	2010-06-30 03:21:15
3UeHKPjmzKhPOptZtE59XYpAbNcuryUhDW6lrqtNwoGL53kpg6	0	2010-06-30 03:21:16
VTboIg1uaYirybCDFwgBglOkdAV9QD20cafPkQso9vLsggU0WQ	0	2010-06-30 03:21:17
lC2R2dWlCQlEvhNuS991mnsmATeXlAwxvCE3lqmr64J4Eumd81	0	2010-06-30 03:21:18
PPuMHqGcQfxMlPJMBYlYXI4DwMWYqiuyjTeQCobBiDpTQp9kAv	1	2010-06-30 03:21:19
hMJYfwpgu29rR2fTAeGW5cIArEoQdI9kgzXYts4Ca294bCV96H	0	2010-06-30 03:21:20
oepH8Tq4ZrnbI957fnK1ElI6cEuIVZHVicUeHDtVB1dSUKu0iK	0	2010-06-30 03:21:21
gEsvbKdW27jUecvE8mPpwKfs7CMuP2GRxEbTPb8cUz4udIpz3q	0	2010-06-30 03:21:22
EbHEyj6WfV9YxLfWD5UBYiXvFfnHY2aOpX1YqOHQhyyMpNWjWR	0	2010-06-30 03:21:23
9wwIbPy3y1Ec2TlwgQPOXZQCrDzEnJfPZoAciZ2YsXOyMh7x73	0	2010-06-30 03:21:24</pre></td></tr></table></div>

<p>So, now, let's make the queue table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> queue <span style="color: #66cc66;">&#40;</span>
    job text<span style="color: #66cc66;">,</span>
    priority int4<span style="color: #66cc66;">,</span>
    added_on timestamptz
<span style="color: #66cc66;">&#41;</span>;
\COPY queue <span style="color: #993333; font-weight: bold;">from</span> <span style="color: #66cc66;">/</span>tmp<span style="color: #66cc66;">/</span>md5_data<span style="color: #66cc66;">.</span>txt</pre></td></tr></table></div>

<p>With this in place, I'll add the index that will let me quickly find rows to process:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">index</span> queue_idx <span style="color: #993333; font-weight: bold;">on</span> queue <span style="color: #66cc66;">&#40;</span>priority <span style="color: #993333; font-weight: bold;">desc</span><span style="color: #66cc66;">,</span> added_on <span style="color: #993333; font-weight: bold;">asc</span><span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>OK. So the basic query to get 1st row to process would be:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> queue <span style="color: #993333; font-weight: bold;">order</span> <span style="color: #993333; font-weight: bold;">by</span> priority <span style="color: #993333; font-weight: bold;">desc</span><span style="color: #66cc66;">,</span> added_on <span style="color: #993333; font-weight: bold;">asc</span> <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">1</span>;
                        job                         <span style="color: #66cc66;">|</span> priority <span style="color: #66cc66;">|</span>        added_on        
<span style="color: #808080; font-style: italic;">----------------------------------------------------+----------+------------------------</span>
 66664o28k4haYpPdiLRB7uvh17kYPZA9zg2WIiYv2ka6TxqYAj <span style="color: #66cc66;">|</span>        <span style="color: #cc66cc;">3</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2010</span><span style="color: #66cc66;">-</span>06<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">30</span> <span style="color: #cc66cc;">12</span>:<span style="color: #cc66cc;">14</span>:<span style="color: #cc66cc;">46</span><span style="color: #66cc66;">+</span>02
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">explain</span> analyze
<span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> queue <span style="color: #993333; font-weight: bold;">order</span> <span style="color: #993333; font-weight: bold;">by</span> priority <span style="color: #993333; font-weight: bold;">desc</span><span style="color: #66cc66;">,</span> added_on <span style="color: #993333; font-weight: bold;">asc</span> <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">1</span>;
                                                          QUERY PLAN                                                          
<span style="color: #808080; font-style: italic;">------------------------------------------------------------------------------------------------------------------------------</span>
 <span style="color: #993333; font-weight: bold;">Limit</span>  <span style="color: #66cc66;">&#40;</span>cost<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.29</span><span style="color: #66cc66;">..</span>0<span style="color: #66cc66;">.</span>36 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span> width<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">44</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#40;</span>actual <span style="color: #993333; font-weight: bold;">time</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.036</span><span style="color: #66cc66;">..</span>0<span style="color: #66cc66;">.</span>036 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span> loops<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
   <span style="color: #66cc66;">-&gt;</span>  <span style="color: #993333; font-weight: bold;">Index</span> Scan <span style="color: #993333; font-weight: bold;">using</span> queue_idx <span style="color: #993333; font-weight: bold;">on</span> queue  <span style="color: #66cc66;">&#40;</span>cost<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.29</span><span style="color: #66cc66;">..</span>770<span style="color: #66cc66;">.</span>28 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">10000</span> width<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">44</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#40;</span>actual <span style="color: #993333; font-weight: bold;">time</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.035</span><span style="color: #66cc66;">..</span>0<span style="color: #66cc66;">.</span>035 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span> loops<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
 Total runtime: <span style="color: #cc66cc;">0.079</span> ms
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">3</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>OK. it works, and is clearly indexes. So we're good.</p>
<p>Now. The first solution to the queue processing, is to write simple script that will read the data from queue, do the work on every row, and delete it from queue after the work is done.</p>
<p>Like this one:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="python" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">#!/usr/bin/env python</span>
<span style="color: #808080; font-style: italic;"># -*- coding: utf-8 -*-</span>
<span style="color: #ff7700;font-weight:bold;">import</span> psycopg2
<span style="color: #ff7700;font-weight:bold;">import</span> hashlib
<span style="color: #ff7700;font-weight:bold;">import</span> <span style="color: #dc143c;">sys</span>
&nbsp;
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> process_item<span style="color: black;">&#40;</span>row<span style="color: black;">&#41;</span>:
    h <span style="color: #66cc66;">=</span> hashlib.<span style="color: #dc143c;">md5</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    h.<span style="color: black;">update</span><span style="color: black;">&#40;</span>row<span style="color: black;">&#91;</span><span style="color: #ff4500;">0</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">return</span> h.<span style="color: black;">hexdigest</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
conn <span style="color: #66cc66;">=</span> psycopg2.<span style="color: black;">connect</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">&quot;port=5930 host=127.0.0.1 user=depesz dbname=depesz&quot;</span><span style="color: black;">&#41;</span>
cur <span style="color: #66cc66;">=</span> conn.<span style="color: black;">cursor</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
processed <span style="color: #66cc66;">=</span> <span style="color: #ff4500;">0</span>
<span style="color: #ff7700;font-weight:bold;">while</span> <span style="color: #008000;">True</span>:
    cur.<span style="color: black;">execute</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'select * from queue order by priority desc, added_on asc limit 1'</span><span style="color: black;">&#41;</span>
    row <span style="color: #66cc66;">=</span> cur.<span style="color: black;">fetchone</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">if</span> row <span style="color: #ff7700;font-weight:bold;">is</span> <span style="color: #008000;">None</span>:
        <span style="color: #ff7700;font-weight:bold;">break</span>
    ignore <span style="color: #66cc66;">=</span> process_item<span style="color: black;">&#40;</span>row<span style="color: black;">&#41;</span>
    processed <span style="color: #66cc66;">=</span> processed + <span style="color: #ff4500;">1</span>
    cur.<span style="color: black;">execute</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'delete from queue where priority = %s and added_on = %s'</span><span style="color: #66cc66;">,</span> <span style="color: black;">&#40;</span>row<span style="color: black;">&#91;</span><span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">,</span> row<span style="color: black;">&#91;</span><span style="color: #ff4500;">2</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    conn.<span style="color: black;">commit</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
cur.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
conn.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
<span style="color: #ff7700;font-weight:bold;">print</span> <span style="color: #483d8b;">&quot;processed %d rows.&quot;</span> % <span style="color: black;">&#40;</span>processed<span style="color: #66cc66;">,</span><span style="color: black;">&#41;</span></pre></td></tr></table></div>

<p>I ran the script three times. Each of course processed 10k rows (between runs I refilled the table, with the same data). Average time was 63.822 seconds.</p>
<p>Now, we can parallelize it. What will happen if I'd run 2 processing scripts? Let's see:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">=</span>$ <span style="color: #66cc66;">./</span>processor<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">.</span>py &amp; <span style="color: #66cc66;">./</span>processor<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">.</span>py &amp; <span style="color: #993333; font-weight: bold;">time</span> wait
<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span> <span style="color: #cc66cc;">14231</span>
<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span> <span style="color: #cc66cc;">14232</span>
processed <span style="color: #cc66cc;">10000</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">.</span>
processed <span style="color: #cc66cc;">10000</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">.</span>
<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">-</span>  Done                    <span style="color: #66cc66;">./</span>processor<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">.</span>py
&nbsp;
<span style="color: #993333; font-weight: bold;">real</span>    1m4<span style="color: #66cc66;">.</span>833s
<span style="color: #993333; font-weight: bold;">user</span>    0m4<span style="color: #66cc66;">.</span>304s
sys     0m2<span style="color: #66cc66;">.</span>940s</pre></td></tr></table></div>

<p>Whoa. This looks bad. Total time is more or less the same, but both of the scripts did process 10k rows? So each row was processed twice. That's not good.</p>
<p>The reason is that while I do &#8220;select" &#8211; the row is fully available to the other processor.</p>
<p>So maybe I'll add there &#8220;select for update"? Make the cur.execute line:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="python" style="font-family:monospace;">    cur.<span style="color: black;">execute</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'select * from queue order by priority desc, added_on asc limit 1 for update'</span><span style="color: black;">&#41;</span></pre></td></tr></table></div>

<p>Result:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">=</span>$ <span style="color: #66cc66;">./</span>processor<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">.</span>py &amp; <span style="color: #66cc66;">./</span>processor<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">.</span>py &amp; <span style="color: #993333; font-weight: bold;">time</span> wait
<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span> <span style="color: #cc66cc;">14409</span>
<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span> <span style="color: #cc66cc;">14410</span>
processed <span style="color: #cc66cc;">5000</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">.</span>
processed <span style="color: #cc66cc;">5000</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">.</span>
<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">-</span>  Done                    <span style="color: #66cc66;">./</span>processor<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">.</span>py
<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">+</span>  Done                    <span style="color: #66cc66;">./</span>processor<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">.</span>py
&nbsp;
<span style="color: #993333; font-weight: bold;">real</span>    1m3<span style="color: #66cc66;">.</span>487s
<span style="color: #993333; font-weight: bold;">user</span>    0m2<span style="color: #66cc66;">.</span>336s
sys     0m1<span style="color: #66cc66;">.</span>792s</pre></td></tr></table></div>

<p>Rows were splitted now correctly, but the total time didn't decrease. This is because when first processor does the select for update, it locks the row and second processor has to wait. It can't skip the row, so it has to wait.</p>
<p>There is &#8220;FOR UPDATE NOWAIT" version of the query, but the problem is that it is raising exception, which forces application to rollback, and retry. Not good.</p>
<p>Of course, I could add some random offset, so that usually not the first row would be selected, and chances of interlocking would be small, but then &#8211; it doesn't sound as sane solution &#8211; we want the rows to be processed in order.</p>
<p>Now. Another solution would be to add column: &#8220;in_process" which would be updated to true, change would be committed. And then, after processing is done &#8211; we can remove the row.</p>
<p>This would work, but it has one huge disadvantage. What will happen if the processing application dies without removing the row and without changing back the &#8220;in_process" flag?</p>
<p>The row would stay forever as &#8220;in_process".</p>
<p>Of course &#8211; we could add some maintenance, and make &#8220;in_process" not boolean but timestamp. In this way we could assume that if something is in process for too long (5 minutes?) we assume it has to be redone.</p>
<p>Not really cool. But there is another approach. Let's store not timestamp, but integer &#8211; the integer would mark which backend is processing the row. If the backend is no longer there &#8211; it has to be redone.</p>
<p>Let's modify the table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">ALTER</span> <span style="color: #993333; font-weight: bold;">TABLE</span> queue <span style="color: #993333; font-weight: bold;">add</span> <span style="color: #993333; font-weight: bold;">column</span> processed_by INT4;</pre></td></tr></table></div>

<p>Now, the script that processes rows is:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="python" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">#!/usr/bin/env python</span>
<span style="color: #808080; font-style: italic;"># -*- coding: utf-8 -*-</span>
<span style="color: #ff7700;font-weight:bold;">import</span> psycopg2
<span style="color: #ff7700;font-weight:bold;">import</span> hashlib
<span style="color: #ff7700;font-weight:bold;">import</span> <span style="color: #dc143c;">sys</span>
&nbsp;
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> process_item<span style="color: black;">&#40;</span>row<span style="color: black;">&#41;</span>:
    h <span style="color: #66cc66;">=</span> hashlib.<span style="color: #dc143c;">md5</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    h.<span style="color: black;">update</span><span style="color: black;">&#40;</span>row<span style="color: black;">&#91;</span><span style="color: #ff4500;">0</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">return</span> h.<span style="color: black;">hexdigest</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
conn <span style="color: #66cc66;">=</span> psycopg2.<span style="color: black;">connect</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">&quot;port=5930 host=127.0.0.1 user=depesz dbname=depesz&quot;</span><span style="color: black;">&#41;</span>
cur <span style="color: #66cc66;">=</span> conn.<span style="color: black;">cursor</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
processed <span style="color: #66cc66;">=</span> <span style="color: #ff4500;">0</span>
<span style="color: #ff7700;font-weight:bold;">while</span> <span style="color: #008000;">True</span>:
    cur.<span style="color: black;">execute</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'''
        select *
        from queue
        where processed_by is null
            or not exists (select * from pg_stat_get_activity( processed_by ) )
        order by priority desc, added_on asc limit 1 for update
        '''</span><span style="color: black;">&#41;</span>
    row <span style="color: #66cc66;">=</span> cur.<span style="color: black;">fetchone</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">if</span> row <span style="color: #ff7700;font-weight:bold;">is</span> <span style="color: #008000;">None</span>:
        <span style="color: #ff7700;font-weight:bold;">break</span>
    cur.<span style="color: black;">execute</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'update queue set processed_by = pg_backend_pid() where priority = %s and added_on = %s'</span><span style="color: #66cc66;">,</span> <span style="color: black;">&#40;</span>row<span style="color: black;">&#91;</span><span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">,</span> row<span style="color: black;">&#91;</span><span style="color: #ff4500;">2</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    conn.<span style="color: black;">commit</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
    ignore <span style="color: #66cc66;">=</span> process_item<span style="color: black;">&#40;</span>row<span style="color: black;">&#41;</span>
    processed <span style="color: #66cc66;">=</span> processed + <span style="color: #ff4500;">1</span>
&nbsp;
    cur.<span style="color: black;">execute</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'delete from queue where priority = %s and added_on = %s and processed_by = pg_backend_pid()'</span><span style="color: #66cc66;">,</span> <span style="color: black;">&#40;</span>row<span style="color: black;">&#91;</span><span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">,</span> row<span style="color: black;">&#91;</span><span style="color: #ff4500;">2</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    conn.<span style="color: black;">commit</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
cur.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
conn.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
<span style="color: #ff7700;font-weight:bold;">print</span> <span style="color: #483d8b;">&quot;processed %d rows.&quot;</span> % <span style="color: black;">&#40;</span>processed<span style="color: #66cc66;">,</span><span style="color: black;">&#41;</span></pre></td></tr></table></div>

<p>Test run:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py <span style="color: #000000; font-weight: bold;">&amp;</span> .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">time</span> <span style="color: #7a0874; font-weight: bold;">wait</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">16959</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">16960</span>
processed <span style="color: #000000;">5000</span> rows.
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>-  Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py
processed <span style="color: #000000;">5000</span> rows.
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>+  Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py
&nbsp;
real    2m6.649s
user    0m3.772s
sys     0m3.564s</pre></td></tr></table></div>

<p>What?</p>
<p>I checked, the Pg logs. Apparently summarized times of all queries previously (select for update/delete) is ~ 114 seconds. Now &#8211; the time skyrocketed to 240s.</p>
<p>First thing &#8211; what will happen with more backends?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #000000;">1</span> <span style="color: #000000;">2</span> <span style="color: #000000;">3</span> <span style="color: #000000;">4</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span>; <span style="color: #000000; font-weight: bold;">time</span> <span style="color: #7a0874; font-weight: bold;">wait</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">17346</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">17347</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">3</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">17348</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">4</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">17349</span>
processed <span style="color: #000000;">2087</span> rows.
processed <span style="color: #000000;">2676</span> rows.
processed <span style="color: #000000;">2859</span> rows.
processed <span style="color: #000000;">2378</span> rows.
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">3</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>-  Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">4</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>+  Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>+  Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">2</span>.py
&nbsp;
real    2m3.399s
user    0m3.064s
sys     0m2.444s</pre></td></tr></table></div>

<p>Why is it so slow? I looked at the pg query log the time try with two processors, and found out that 167 second of the time (out of total 268) was taken by COMMIT. 39 seconds by &#8220;select for update", and 31 by &#8220;delete".</p>
<p>My guess is that doing the update and commit we are simply forcing more IO (at the very least the xlog has to be fsynced).</p>
<p>I could have tested with unlogged tables, but I think that the queue table should be logged &#8211; so that it wouldn't vanish in case of sudden system restart.</p>
<p>So &#8211; it looks that we're stuck &#8211; processing in parallel takes the same time due to locks, and if we'll add information about lock that can be bypassed by other processors &#8211; it's even slower due to more writes.</p>
<p>Or are we?</p>
<p>I wrote couple of times about magnificent thing called advisory locks. Let's see if they can help us now.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="python" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">#!/usr/bin/env python</span>
<span style="color: #808080; font-style: italic;"># -*- coding: utf-8 -*-</span>
<span style="color: #ff7700;font-weight:bold;">import</span> psycopg2
<span style="color: #ff7700;font-weight:bold;">import</span> hashlib
<span style="color: #ff7700;font-weight:bold;">import</span> <span style="color: #dc143c;">sys</span>
&nbsp;
&nbsp;
<span style="color: #ff7700;font-weight:bold;">def</span> process_item<span style="color: black;">&#40;</span>row<span style="color: black;">&#41;</span>:
    h <span style="color: #66cc66;">=</span> hashlib.<span style="color: #dc143c;">md5</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    h.<span style="color: black;">update</span><span style="color: black;">&#40;</span>row<span style="color: black;">&#91;</span><span style="color: #ff4500;">0</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">return</span> h.<span style="color: black;">hexdigest</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
conn <span style="color: #66cc66;">=</span> psycopg2.<span style="color: black;">connect</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">&quot;port=5930 host=127.0.0.1 user=depesz dbname=depesz&quot;</span><span style="color: black;">&#41;</span>
cur <span style="color: #66cc66;">=</span> conn.<span style="color: black;">cursor</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
processed <span style="color: #66cc66;">=</span> <span style="color: #ff4500;">0</span>
<span style="color: #ff7700;font-weight:bold;">while</span> <span style="color: #008000;">True</span>:
    cur.<span style="color: black;">execute</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'''
    select *
    from queue
    where pg_try_advisory_xact_lock(123, hashtext( priority::text || added_on::text ) )
    order by priority desc, added_on asc limit 1 for update
    '''</span><span style="color: black;">&#41;</span>
    row <span style="color: #66cc66;">=</span> cur.<span style="color: black;">fetchone</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
    <span style="color: #ff7700;font-weight:bold;">if</span> row <span style="color: #ff7700;font-weight:bold;">is</span> <span style="color: #008000;">None</span>:
        <span style="color: #ff7700;font-weight:bold;">break</span>
    ignore <span style="color: #66cc66;">=</span> process_item<span style="color: black;">&#40;</span>row<span style="color: black;">&#41;</span>
    processed <span style="color: #66cc66;">=</span> processed + <span style="color: #ff4500;">1</span>
    cur.<span style="color: black;">execute</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'delete from queue where priority = %s and added_on = %s'</span><span style="color: #66cc66;">,</span> <span style="color: black;">&#40;</span>row<span style="color: black;">&#91;</span><span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">,</span> row<span style="color: black;">&#91;</span><span style="color: #ff4500;">2</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>
    conn.<span style="color: black;">commit</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
&nbsp;
cur.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
conn.<span style="color: black;">close</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>
<span style="color: #ff7700;font-weight:bold;">print</span> <span style="color: #483d8b;">&quot;processed %d rows.&quot;</span> % <span style="color: black;">&#40;</span>processed<span style="color: #66cc66;">,</span><span style="color: black;">&#41;</span></pre></td></tr></table></div>

<p>First test:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #000000;">1</span> <span style="color: #000000;">2</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">3</span>.py <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span>; <span style="color: #000000; font-weight: bold;">time</span> <span style="color: #7a0874; font-weight: bold;">wait</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">20100</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">20101</span>
processed <span style="color: #000000;">5000</span> rows.
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>-  Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">3</span>.py
processed <span style="color: #000000;">5000</span> rows.
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>+  Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">3</span>.py
&nbsp;
real    1m2.254s
user    0m2.656s
sys     0m2.144s</pre></td></tr></table></div>

<p>It's actually not bad. A bit faster than serial processing. And what if I'd add more processors?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #000000;">1</span> <span style="color: #000000;">2</span> <span style="color: #000000;">3</span> <span style="color: #000000;">4</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">3</span>.py <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span>; <span style="color: #000000; font-weight: bold;">time</span> <span style="color: #7a0874; font-weight: bold;">wait</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">20203</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">20204</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">3</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">20205</span>
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">4</span><span style="color: #7a0874; font-weight: bold;">&#93;</span> <span style="color: #000000;">20206</span>
processed <span style="color: #000000;">2500</span> rows.
processed <span style="color: #000000;">2499</span> rows.
processed <span style="color: #000000;">2501</span> rows.
processed <span style="color: #000000;">2500</span> rows.
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">1</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">3</span>.py
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">2</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>   Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">3</span>.py
<span style="color: #7a0874; font-weight: bold;">&#91;</span><span style="color: #000000;">4</span><span style="color: #7a0874; font-weight: bold;">&#93;</span>+  Done                    .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">3</span>.py
&nbsp;
real    0m30.911s
user    0m1.936s
sys     0m1.508s</pre></td></tr></table></div>

<p>Now this is nice. Please note that I got uneven distribution &#8211; one of the processors did 2499, two 2500 and one 2501. Which is great.</p>
<p>Finally, let's up the count one more time, to see how it will work out:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">=$ <span style="color: #000000; font-weight: bold;">for</span> i <span style="color: #000000; font-weight: bold;">in</span> <span style="color: #7a0874; font-weight: bold;">&#123;</span><span style="color: #000000;">1</span>..<span style="color: #000000;">8</span><span style="color: #7a0874; font-weight: bold;">&#125;</span>; <span style="color: #000000; font-weight: bold;">do</span> .<span style="color: #000000; font-weight: bold;">/</span>processor-<span style="color: #000000;">3</span>.py <span style="color: #000000; font-weight: bold;">&amp;</span> <span style="color: #000000; font-weight: bold;">done</span>; <span style="color: #000000; font-weight: bold;">time</span> <span style="color: #7a0874; font-weight: bold;">wait</span>
...
processed <span style="color: #000000;">1249</span> rows.
processed <span style="color: #000000;">1250</span> rows.
processed <span style="color: #000000;">1250</span> rows.
processed <span style="color: #000000;">1250</span> rows.
processed <span style="color: #000000;">1250</span> rows.
processed <span style="color: #000000;">1250</span> rows.
processed <span style="color: #000000;">1251</span> rows.
processed <span style="color: #000000;">1250</span> rows.
...
real    0m14.704s
user    0m2.148s
sys     0m1.112s</pre></td></tr></table></div>

<p>It's all good.</p>
<p>Now &#8211; if you can, please do use proper solution (pgq or something other having &#8220;mq" in the name).</p>
<p>But if you can't &#8211; you can actually get pretty good results with some advisory locks and simple sql queries. Without even plpgsql.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">8 comments <a href='http://www.depesz.com/2013/08/30/pick-a-task-to-work-on/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-41483" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41483" title="">#</a></span> Luca Veronese</div>  <div class="date">Aug 30, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/bef750869b8e580844dce31ca7cadbb4?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hi,</p>
<p>could the for update in the last version be dropped? If I understand correctly, the advisory lock predicate is sufficient to hold back any other process from getting at that row during your transaction, and at the end of your transaction the row does not exist any more.<br />
If I am not wrong, a select for update causes I/O to occur, so dropping the for update may improve performance.</p>
<p>Thank for your valuable posts.</p>
	</li>
		
		
			
<li class="odd" id="comment-41484" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41484" title="">#</a></span> <a href='http://filip.rembialkowski.net' rel='external nofollow' class='url'>Filip</a></div>  <div class="date">Aug 30, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/3c7762851de72b8505fa70cae4eb7c83?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>thx depesz for good use case for advisory locks. btw, pg_try_advisory_xact_lock is just another reason to upgrade from 9.0 <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" /> </p>
<p>@Luca, I think the &#8220;for update&#8221; locks the rows in case any misconfigured worker tries to delete / update them while the current worker is processing.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-41502" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41502" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Aug 31, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Luca:<br />
Filip is right. The purpose of &#8220;for update&#8221; is to prevent other clients from causing problems. This could be rogue (or sloppy) dba, previous version of script, or anything similar.</p>
	</li>
		
		
			
<li class="odd" id="comment-41533" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41533" title="">#</a></span> <a href='http://blog.2ndquadrant.com/' rel='external nofollow' class='url'>Craig Ringer</a></div>  <div class="date">Sep 2, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/59605206c327b58906d443950265a250?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>A way to skip locked rows, SELECTing the first that&#8217;s not locked FOR UPDATE would be ideal.</p>
<p>A &#8220;SELECT &#8230; FOR UPDATE SKIP LOCKED&#8221; has been discussed and described several times. I&#8217;ve tested a prototype patch I was given and it certainly makes all this a great deal easier. I&#8217;m glad to see others are interested in the problem too.</p>
<p>Do you know of a good simple and widely used queuing system that might be easily adapted to use advisory locking and/or for key skip locked?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-41534" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41534" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Sep 2, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Craig: not really. Maybe pgq?</p>
	</li>
		
		
			
<li class="odd" id="comment-41575" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41575" title="">#</a></span> Thomas Munro</div>  <div class="date">Sep 4, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/99296bfd67499da95eb97e1e400c546a?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Craig Ringer, for SKIP LOCKED DATA, I guess you are referring to the work-in-progress patch I sent to the list in Feb 2012.  Recently, I was contacted off-list by a PG contributor who has kindly volunteered to help test and review the patch.  I have rejuvenated it for recent PG (it clashed with the recent lock strength changes).  It doesn&#8217;t yet work correctly in certain scenarios (like when used from plpgsql), and we need to understand the cleanup scenarios better.  We plan to submit this patch to a commit fest at some stage.</p>
<p>Here is the latest work-in-progress patch: <a href="https://github.com/macdice/postgres/commit/f4c83e0f2aeba9eca877da7a4200f02ba852f5f8" rel="nofollow">https://github.com/macdice/postgres/commit/f4c83e0f2aeba9eca877da7a4200f02ba852f5f8</a></p>
<p>Working on this branch: <a href="https://github.com/macdice/postgres/tree/skip-locked-data" rel="nofollow">https://github.com/macdice/postgres/tree/skip-locked-data</a></p>
	</li>
		
		
			
<li class="odd" id="comment-41602" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-41602" title="">#</a></span> misha</div>  <div class="date">Sep 5, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/95bd139d286e0ee99eb303aa1f8546fe?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Also with PGQ infrastructure we have possibility to check the second attempt of perform process_item() in destination DB deployed in another cluster if disaster happens while the main script executes. And PGQ has graceful cooperative consumer too.</p>
	</li>
		
		
			
<li class="odd" id="comment-44928" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-44928" title="">#</a></span> intgr</div>  <div class="date">Mar 11, 2014</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/485b471504b5332261dcf8e67b068b04?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>In PostgreSQL 9.3 and newer you could lock the rows using FOR NO KEY UPDATE, instead of FOR UPDATE, which causes less contention when you have foreign keys pointing to the queue table.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="2743" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="b1b1c19ea7" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="149"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">606 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">325 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">287 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">226 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">171 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">151 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">139 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">139 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">134 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">94 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

