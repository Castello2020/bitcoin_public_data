http://www.depesz.com/2010/06/16/test-driven-development-for-postgresql/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 05:04:30 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=1733>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Test driven development for PostgreSQL</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Test driven development for PostgreSQL Comments Feed" href="http://www.depesz.com/2010/06/16/test-driven-development-for-postgresql/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2010/06/16/test-driven-development-for-postgresql/' />
<link rel='shortlink' href='http://www.depesz.com/?p=1733' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-1733">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2010/06/16/test-driven-development-for-postgresql/" rel="bookmark" title="Permanent Link to Test driven development for PostgreSQL">Test driven development for PostgreSQL</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>June 16th, 2010 by depesz | Tags: <a href="http://www.depesz.com/tag/pgtap/" rel="tag">pgtap</a>, <a href="http://www.depesz.com/tag/plperl/" rel="tag">plperl</a>, <a href="http://www.depesz.com/tag/plpgsql/" rel="tag">plpgsql</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/tdd/" rel="tag">tdd</a>, <a href="http://www.depesz.com/tag/test/" rel="tag">test</a>, <a href="http://www.depesz.com/tag/tests/" rel="tag">tests</a>, <a href="http://www.depesz.com/tag/trigger/" rel="tag">trigger</a>, <a href="http://www.depesz.com/tag/triggers/" rel="tag">triggers</a> |  <a href="http://www.depesz.com/2010/06/16/test-driven-development-for-postgresql/#comments" title="Comment on Test driven development for PostgreSQL">9 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>I have a mixed love/hate relationship with tests.</p>
<p>I hate writing them. I hate remembering to add them when I'm in the zone, and application code is flowing freely from the tips of my fingers.</p>
<p>But when I do add them, I absolutely love the ability to twist and replace the most core innards of application, and be able to tell that at least the sanity check of the code passes.</p>
<p>I love them even more when they prevent me for repeating some mistake/bug &#8211; i.e. when there is a bug, and I have tests (which clearly failed, as they didn't catch the bug), I add test for this specific bug, so I know that in future it will not happen again.</p>
<p>For a long time I've been fan of stored procedures (or functions) &#8211; of course not for everything, but where it makes sense.</p>
<p><span id="more-1733"></span></p>
<p>For quite some time now (first version that I see is from 2008-06-17 &#8211; 2 years ago), we can use <a href="http://pgtap.org/">pgTAP</a>.</p>
<p>What it is? First, let's start with name. pg is obviously from PostgreSQL. TAP is acronym and means &#8216;Test Anything Protocol'. In case you're not familiar with it &#8211; basically it is just a standardized way of reporting success/failure of test program(s).</p>
<p>So. First of all &#8211; should you use it?</p>
<p>Answer is complex, but generally &#8211; if you use any stored procedures/functions, and or triggers &#8211; I would at least consider using them.</p>
<p>Let's assume you have trigger which changes full name of person to properly capitalized version. That is &#8211; it will change &#8216;hubert LUBACZEWSKI' into &#8216;Hubert Lubaczewski'.</p>
<p>Code is trivial:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="plsql" style="font-family:monospace;"><span style="color: #00F;">CREATE</span> <span style="color: #00F;">OR</span> <span style="color: #000;">REPLACE</span> <span style="color: #00F;">FUNCTION</span> capitalize_fullname<span style="color: #00F;">&#40;</span><span style="color: #00F;">&#41;</span> RETURNS <span style="color: #00F;">TRIGGER</span> <span style="color: #00F;">AS</span> $BODY$
<span style="color: #00F;">BEGIN</span>
<span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>full_name <span style="color: #00F;">:=</span> <span style="color: #000;">initcap</span><span style="color: #00F;">&#40;</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>full_name <span style="color: #00F;">&#41;</span><span style="color: #00F;">;</span>
<span style="color: #00F;">RETURN</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">;</span>
<span style="color: #00F;">END</span><span style="color: #00F;">;</span>
$BODY$ LANGUAGE <span style="color: #F00;">'plpgsql'</span><span style="color: #00F;">;</span>
&nbsp;
<span style="color: #00F;">CREATE</span> <span style="color: #00F;">TRIGGER</span> capitalize_fullname
BEFORE <span style="color: #00F;">INSERT</span> <span style="color: #00F;">OR</span> <span style="color: #00F;">UPDATE</span> <span style="color: #00F;">ON</span> people
<span style="color: #00F;">FOR</span> EACH <span style="color: #00F;">ROW</span> <span style="color: #00F;">EXECUTE</span> <span style="color: #00F;">PROCEDURE</span> capitalize_fullname<span style="color: #00F;">&#40;</span><span style="color: #00F;">&#41;</span><span style="color: #00F;">;</span></pre></td></tr></table></div>

<p>And it works fairly well:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"># <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> people <span style="color: #66cc66;">&#40;</span>full_name<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'hubert LUBACZEWSKI'</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #cc66cc;">0</span> <span style="color: #cc66cc;">1</span>
&nbsp;
# <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> people;
id <span style="color: #66cc66;">|</span>     full_name
<span style="color: #808080; font-style: italic;">----+--------------------</span>
<span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> Hubert Lubaczewski
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Now. Let's assume you've got complaint, that your code incorrectly capitalized name of &#8220;Louis d'Orléans" &#8211; it made his name into &#8220;Louis D'Orléans". Which is clearly wrong.</p>
<p>Before I'll go to fix it, let's add test suite (simple test suite for now) for my database.</p>
<p>First &#8211; let's get pgTap. On it's <a href="http://pgtap.org/">site</a> I go to download page, and download newest tar.bz2, unpacked, and did <i>make &#038;&#038; make install</i> (you might need to use sudo make install in case Pg is installed somewhere where you don't have write access to).</p>
<p>After installation I got 5 new files:</p>
<ul>
<li>/home/pgdba/work/share/postgresql/contrib/pgtap.sql</li>
<li>/home/pgdba/work/share/postgresql/contribuninstall_pgtap.sql</li>
<li>/home/pgdba/work/share/doc/postgresql/contrib/README.pgtap</li>
<li>/home/pgdba/work/bin/pg_prove</li>
<li>/home/pgdba/work/bin/pg_tapgen</li>
</ul>
<p>(of course in another situation, the paths might be different).</p>
<p>Now. For to use pgtap, we need to load it's functions to database. At this moment quick notice &#8211; I could have used <i>make TAPSCHEMA=something</i>, but for this simple test, I just don't care.</p>
<p>So, let's load pgTap to my test database:</p>
<p><code># psql -f `pg_config --sharedir`/contrib/pgtap.sql<br />
&lt;a lot of &quot;CREATE FUNCTION&quot; messages&gt;</code></p>
<p>With this, I'm ready to actually make some tests.</p>
<p>In app directory, I create &#8220;tests" subdirectory, and store there first test file:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">=</span>$ cat tests<span style="color: #66cc66;">/</span>t<span style="color: #66cc66;">-</span>01<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">sql</span>
<span style="color: #993333; font-weight: bold;">BEGIN</span>;
<span style="color: #993333; font-weight: bold;">SELECT</span> plan<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #993333; font-weight: bold;">SELECT</span> lives_ok<span style="color: #66cc66;">&#40;</span>
<span style="color: #ff0000;">'INSERT INTO people (full_name) VALUES ($$abc$$)'</span><span style="color: #66cc66;">,</span>
<span style="color: #ff0000;">'Inserting to people should work, and not raise exception.'</span>
<span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #993333; font-weight: bold;">SELECT</span> finish<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">ROLLBACK</span>;</pre></td></tr></table></div>

<p>Please notice that the whole test is within transaction that gets rolled back. Reason is simple &#8211; tests shouldn't pollute database with test data.</p>
<p>Now, I can run this simple test <i>&#8220;suite"</i>:</p>
<p><code>=$ pg_prove tests/*sql<br />
tests/t-01.sql .. ok<br />
<b>All tests successful.</b><br />
Files=1, Tests=1,  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)<br />
Result: PASS</code></p>
<p>Nice. This test only shows that I can insert data and the trigger doesn't break. Now, let's add tests for actual capitalization. These can be in the same file (t-01.sql), but I'll add them in 2nd test file:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">=</span>$ cat tests<span style="color: #66cc66;">/</span>t<span style="color: #66cc66;">-</span>02<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">sql</span>
<span style="color: #993333; font-weight: bold;">BEGIN</span>;
<span style="color: #993333; font-weight: bold;">SELECT</span> plan<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> people <span style="color: #66cc66;">&#40;</span>full_name<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'abc'</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">is</span><span style="color: #66cc66;">&#40;</span> full_name<span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Abc'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Capitalization of &gt;Abc&lt;'</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">FROM</span> people <span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> currval<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'people_id_seq'</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> people <span style="color: #66cc66;">&#40;</span>full_name<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'DEPESZ'</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">is</span><span style="color: #66cc66;">&#40;</span> full_name<span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Depesz'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Capitalization of &gt;Depesz&lt;'</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">FROM</span> people <span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> currval<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'people_id_seq'</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> people <span style="color: #66cc66;">&#40;</span>full_name<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'HuBeRt dEPesZ LubaCZEWski'</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">is</span><span style="color: #66cc66;">&#40;</span> full_name<span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Hubert Depesz Lubaczewski'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Capitalization of &gt;Hubert Depesz Lubaczewski&lt;'</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">FROM</span> people <span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> currval<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'people_id_seq'</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #993333; font-weight: bold;">SELECT</span> finish<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">ROLLBACK</span>;</pre></td></tr></table></div>

<p>Please notice that I had to bump plan() to be 3.</p>
<p>Now, I can run it, and it shows that we're fine:</p>
<p><code>=$ pg_prove tests/*sql<br />
tests/t-01.sql .. ok<br />
tests/t-02.sql .. ok<br />
All tests successful.<br />
Files=2, Tests=4,  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)<br />
Result: PASS</code></p>
<p>So, now I can add test that will actually fail &#8211; with Louis d'Orléans:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">=</span>$ cat tests<span style="color: #66cc66;">/</span>t<span style="color: #66cc66;">-</span>03<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">sql</span>
<span style="color: #993333; font-weight: bold;">BEGIN</span>;
    <span style="color: #993333; font-weight: bold;">SELECT</span> plan<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
    <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> people <span style="color: #66cc66;">&#40;</span>full_name<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'Louis d'</span><span style="color: #ff0000;">'Orléans'</span> <span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">is</span><span style="color: #66cc66;">&#40;</span> full_name<span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Louis d'</span><span style="color: #ff0000;">'Orléans'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Capitalization of &gt;Louis d'</span><span style="color: #ff0000;">'Orléans&lt;'</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">FROM</span> people <span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> currval<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'people_id_seq'</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
    <span style="color: #993333; font-weight: bold;">SELECT</span> finish<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">ROLLBACK</span>;</pre></td></tr></table></div>

<p>And test run:</p>
<p><code>=$ pg_prove tests/*sql<br />
tests/t-01.sql .. ok<br />
tests/t-02.sql .. ok<br />
tests/t-03.sql .. 1/1<br />
not ok 1 - Capitalization of &gt;Louis d'Orléans&lt;<br />
# Failed test 1: &quot;Capitalization of &gt;Louis d'Orléans&lt;&quot;<br />
#         have: Louis D'Orléans<br />
#         want: Louis d'Orléans<br />
# Looks like you failed 1 test of 1<br />
tests/t-03.sql .. Failed 1/1 subtests<br />
&nbsp;<br />
Test Summary Report<br />
-------------------<br />
tests/t-03.sql (Wstat: 0 Tests: 1 Failed: 1)<br />
  Failed test:  1<br />
Files=3, Tests=5,  0 wallclock secs ( 0.01 usr  0.02 sys +  0.00 cusr  0.01 csys =  0.04 CPU)<br />
Result: FAIL</code></p>
<p>As you can see the test clearly failed, it showed there it failed (tests/t-03.sql, not ok 1 &#8211; failed test #1), and it showed nicely what it got, and what it should get to pass.</p>
<p>Now, I can fix the trigger, make sure the test pass, and release the code.</p>
<p>The great thing is that if I'll ever want to switch from (for example) plpgsql trigger to plperl one &#8211; I got cover that checks whatever errors we previously had so we will not hit the same issue twice. And that's a great thing.</p>
<p>One final note: regardless of how big your test suite is, how many thousands of cases it checks, how many edge cases, how many previous errors &#8211; it can never be said: &#8220;my code is correct because tests pass".</p>
<p>It can be said: &#8220;my code is not correct because tests fail", or &#8220;I don't know of any more bugs in the code, because all tests have passed". </p>
<p>But tests will never prove that your code is fully correct, because it is technically not possible to test all of the possible cases.</p>
<p>With this in mind &#8211; use tests. Play with it, and see what functionality David put in there (the is() and lives_ok() functions are just the beginning). It is really astonishing piece of work. And will make your life, as DBA simpler. After some getting used to it <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">9 comments <a href='http://www.depesz.com/2010/06/16/test-driven-development-for-postgresql/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-29923" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29923" title="">#</a></span> Daniel Cristian Cruz</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/62ea72e4db4fc1f9338f9141acfa55e0?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Is it a good pratice to use prepared transactions to test deferred constraints?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29925" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29925" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Daniel:<br />
no idea. I don&#8217;t really use deferred constraints, so never had the need to test them.</p>
	</li>
		
		
			
<li class="odd" id="comment-29927" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29927" title="">#</a></span> <a href='http://xenoterracide.blogspot.com' rel='external nofollow' class='url'>Caleb Cushing ( xenoterracide )</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e990c7cdac81e570939c4d5b17303b42?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>can you skip the tests if pgTAP isn&#8217;t available? can these be run with make test along side say&#8230; perl tests in a perl dist? (I figure they probably can)</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29928" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29928" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Caleb:<br />
I don&#8217;t think you can embed such logic (skipping if pgtap is not available). But I think it&#8217;s not a problem &#8211; if it will not be available, check will simply break on plan().</p>
<p>as for running those tests along perl tests &#8211; check this: <a href="http://justatheory.com/computers/programming/perl/tap-parser-sourcehandler.html" rel="nofollow">http://justatheory.com/computers/programming/perl/tap-parser-sourcehandler.html</a></p>
	</li>
		
		
			
<li class="odd" id="comment-29929" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29929" title="">#</a></span> <a href='http://www.justatheory.com/' rel='external nofollow' class='url'>Theory</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/397f829eea921e02e35c37c22f9e6d3b?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Thanks for the great post, depesz.</p>
<p>For those going to OSCON, come to my <a href="http://www.oscon.com/oscon2010/public/schedule/detail/14168" rel="nofollow">Test Driven Database Development</a> tutorial.</p>
<p>@Caleb: More specifically, see <a href="http://search.cpan.org/perldoc?TAP::Parser::SourceHandler::pgTAP" rel="nofollow">TAP::Parser::SourceHandler::pgTAP</a></p>
<p>—Theory</p>
	</li>
		
		
			
<li class="odd" id="comment-29931" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29931" title="">#</a></span> Tasos</div>  <div class="date">Jun 17, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Is there any way to install pgTap for Windows?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29932" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29932" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 17, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Tasos:<br />
No idea. I don&#8217;t even have windows to be able to test it. I don&#8217;t actually think it shouldn&#8217;t be possible &#8211; it&#8217;s just some c code, so assuming you can get some kind of c compiler, it should work, i guess.</p>
	</li>
		
		
			
<li class="odd" id="comment-29934" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29934" title="">#</a></span> Hans</div>  <div class="date">Jun 18, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2c32b52f6d7c057f0c54afd069eeb98f?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>We also use pgTap and we intergrate it with our Hudson [1] system for continuous integration. With the help of a tap-to-junit Perl script [2], Hudson can be aware of the failure results.</p>
<p>[1] <a href="http://hudson-ci.org/" rel="nofollow">http://hudson-ci.org/</a><br />
[2] <a href="http://jmason.org/software/scripts/tap-to-junit-xml.txt" rel="nofollow">http://jmason.org/software/scripts/tap-to-junit-xml.txt</a></p>
	</li>
		
		
			
<li class="odd" id="comment-30018" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30018" title="">#</a></span> <a href='http://darrylpye.wordpress.com/' rel='external nofollow' class='url'>darryl pye</a></div>  <div class="date">Jul 7, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/fc005cb7ede00ab17dda867b8ba666e8?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hi<br />
I  couldn&#8217;t get this to work on windows so I use pgunit.<br />
It doesn&#8217;t  have a lot of functionality but it is easy to extend with your own assert functions.<br />
You can check out some details  here.</p>
<p><a href="http://darrylpye.wordpress.com/2009/11/14/unit-testing-postgres/" rel="nofollow">http://darrylpye.wordpress.com/2009/11/14/unit-testing-postgres/</a></p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="1733" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="83da2f15e9" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="41"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">3 comments</span> | <span class="wpp-views">587 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">364 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">253 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">193 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">148 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">133 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">122 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">117 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">116 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/" title="How I Learned to Stop Worrying and Love the Triggers" class="wpp-post-title" target="_self">How I Learned to Stop Worrying and Love the Triggers</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">98 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

