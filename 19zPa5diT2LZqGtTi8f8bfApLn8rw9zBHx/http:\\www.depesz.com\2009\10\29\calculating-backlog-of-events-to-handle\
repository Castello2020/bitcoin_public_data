http://www.depesz.com/2009/10/29/calculating-backlog-of-events-to-handle/
HTTP/1.1 200 OK
Server: nginx
Date: Tue, 22 Jul 2014 13:22:29 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=1530>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Calculating backlog of events to handle</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Calculating backlog of events to handle Comments Feed" href="http://www.depesz.com/2009/10/29/calculating-backlog-of-events-to-handle/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2009/10/29/calculating-backlog-of-events-to-handle/' />
<link rel='shortlink' href='http://www.depesz.com/?p=1530' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-1530">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2009/10/29/calculating-backlog-of-events-to-handle/" rel="bookmark" title="Permanent Link to Calculating backlog of events to handle">Calculating backlog of events to handle</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>October 29th, 2009 by depesz | Tags: <a href="http://www.depesz.com/tag/backlog/" rel="tag">backlog</a>, <a href="http://www.depesz.com/tag/cte/" rel="tag">cte</a>, <a href="http://www.depesz.com/tag/plpgsql/" rel="tag">plpgsql</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/with/" rel="tag">with</a>, <a href="http://www.depesz.com/tag/with-recursive/" rel="tag">with recursive</a> |  <a href="http://www.depesz.com/2009/10/29/calculating-backlog-of-events-to-handle/#comments" title="Comment on Calculating backlog of events to handle">4 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>Yesterday on my favorite <a href="irc://freenode.net/postgresql">IRC channel</a> fooqux asked interesting question. I took some more questions, and here is problem description:</p>
<p><i>We have a system which, every 5 minutes, takes a number of tasks to be done. Tasks are uniform. Within 5 minutes we can handle at most 100 tasks. Given the history of number of tasks added every 5 minutes, calculate backlog at any given moment.</i></p>
<p>Did you understand the problem? Well &#8211; I didn't. So, let's see the data, and expected output.</p>
<p><span id="more-1530"></span></p>
<p>So. Let's see the data. I generated some random data, and here is how it looks:</p>
<p><code># select * from test order by stamp limit 20;<br />
        stamp        │ new_events<br />
─────────────────────┼────────────<br />
 2000-01-01 00:05:00 │         15<br />
 2000-01-01 00:10:00 │         46<br />
 2000-01-01 00:15:00 │         57<br />
 2000-01-01 00:20:00 │         19<br />
 2000-01-01 00:25:00 │        132<br />
 2000-01-01 00:30:00 │         14<br />
 2000-01-01 00:35:00 │         19<br />
 2000-01-01 00:40:00 │        137<br />
 2000-01-01 00:45:00 │         14<br />
 2000-01-01 00:50:00 │        146<br />
 2000-01-01 00:55:00 │         83<br />
 2000-01-01 01:00:00 │         72<br />
 2000-01-01 01:05:00 │         43<br />
 2000-01-01 01:10:00 │         75<br />
 2000-01-01 01:15:00 │         74<br />
 2000-01-01 01:20:00 │         62<br />
 2000-01-01 01:25:00 │        134<br />
 2000-01-01 01:30:00 │         87<br />
 2000-01-01 01:35:00 │         59<br />
 2000-01-01 01:40:00 │        103<br />
(20 rows)</code></p>
<p>Nothing really fancy here (side info: check those nice, Unicode frames in new psql <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  will be writing about them some time in future).</p>
<p>So, the idea is that every 5 minutes (every, there are no gaps) new number arrives. And this is number of items to be processed. And every 5 minutes we can process 100 tasks, which is fine when we get 15 new tasks, but when system gets 150 tasks, and it will do only 100 of them in its 5 minute period of tim &#8211; it will backlog.</p>
<p>Every backlog calculation has to start from some specific point in time, where we know it was 0. In here &#8211; we know that on '2000-01-01 00:05:00&#8242; it was 0 (because there were no events before).</p>
<p>Also, on every time frame we have to calculate how many tasks could be processed, and how many will have to be added or subtracted from backlog.</p>
<p>So, let's add first layer of calculation:</p>
<p><code># select *, new_events - 100 as backlog_change from test order by stamp limit 20;<br />
        stamp        │ new_events │ backlog_change<br />
─────────────────────┼────────────┼────────────────<br />
 2000-01-01 00:05:00 │         15 │            -85<br />
 2000-01-01 00:10:00 │         46 │            -54<br />
 2000-01-01 00:15:00 │         57 │            -43<br />
 2000-01-01 00:20:00 │         19 │            -81<br />
 2000-01-01 00:25:00 │        132 │             32<br />
 2000-01-01 00:30:00 │         14 │            -86<br />
 2000-01-01 00:35:00 │         19 │            -81<br />
 2000-01-01 00:40:00 │        137 │             37<br />
 2000-01-01 00:45:00 │         14 │            -86<br />
 2000-01-01 00:50:00 │        146 │             46<br />
 2000-01-01 00:55:00 │         83 │            -17<br />
 2000-01-01 01:00:00 │         72 │            -28<br />
 2000-01-01 01:05:00 │         43 │            -57<br />
 2000-01-01 01:10:00 │         75 │            -25<br />
 2000-01-01 01:15:00 │         74 │            -26<br />
 2000-01-01 01:20:00 │         62 │            -38<br />
 2000-01-01 01:25:00 │        134 │             34<br />
 2000-01-01 01:30:00 │         87 │            -13<br />
 2000-01-01 01:35:00 │         59 │            -41<br />
 2000-01-01 01:40:00 │        103 │              3<br />
(20 rows)</code></p>
<p>Of course backlog cannot be less than zero &#8211; you can't have -1 tasks to be taken care of.</p>
<p>So, how can we deal with it? With help of Common Table Expressions, which were <a href="http://www.depesz.com/index.php/2008/10/07/waiting-for-84-common-table-expressions-with-queries/">added</a> in PostgreSQL 8.4.</p>
<p>Now we know what to use. But how?</p>
<p>Recursive CTE is not easy to comprehend at first, but with some trial and error we can grasp it.</p>
<p>First of all &#8211; Recursive CTE references itself. So, we need to start with something that it will be able to reference to.</p>
<p>First query is trivial:</p>
<p><code># WITH backlog_info AS (<br />
    SELECT *, new_events - 100 as backlog<br />
    FROM test<br />
    WHERE stamp = '2000-01-01 00:05:00'<br />
)<br />
SELECT *<br />
FROM backlog_info<br />
ORDER BY stamp ASC<br />
LIMIT 20;<br />
        stamp        │ new_events │ backlog<br />
─────────────────────┼────────────┼─────────<br />
 2000-01-01 00:05:00 │         15 │     -85<br />
(1 row)</code></p>
<p>I hope the code is clear. Couple of important points:</p>
<ul>
<li>WHERE stamp = &#8216;&#8230;' is to select single row that we will start from. It should be that <b>before</b> it backlog is 0</li>
<li>ORDER BY and LIMIT &#8211; it's obviously not necessary now, since we have only 1 row to return, but let's have it from start &#8211; in next queries we will change only the WITH() part.</li>
<li>There is obvious bug &#8211; as I wrote above backlog cannot be &lt; 0. It's shouldn't be possible.</li>
</ul>
<p>So, given the bug, we have to fix it. It's fortunately, relatively simple:</p>
<p><code># WITH backlog_info AS (<br />
    SELECT *, greatest( new_events - 100, 0 ) as backlog<br />
    FROM test<br />
    WHERE stamp = '2000-01-01 00:05:00'<br />
)<br />
SELECT *<br />
FROM backlog_info<br />
ORDER BY stamp ASC<br />
LIMIT 20;<br />
        stamp        │ new_events │ backlog<br />
─────────────────────┼────────────┼─────────<br />
 2000-01-01 00:05:00 │         15 │       0<br />
(1 row)</code></p>
<p>Just to remind: greatest( X, Y ) will return greater of these numbers. So if calculated backlog will be &gt; 0 &#8211; it will be returned. If it will be &lt; 0 &#8211; 0 will be greater, and backlog will be 0. Hope it's clear <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Now. We have our first row ready. What about others?</p>
<p>In next rows we should reference previous one. Luckily it's very easy:</p>
<p><code>WITH RECURSIVE backlog_info AS (<br />
    SELECT *, greatest( new_events - 100, 0 ) as backlog<br />
    FROM test<br />
    WHERE stamp = '2000-01-01 00:05:00'<br />
UNION ALL<br />
    SELECT t.*, greatest( pt.backlog + t.new_events - 100, 0 ) as backlog<br />
    FROM test t, backlog_info pt<br />
    WHERE t.stamp = pt.stamp + '5 minutes'::INTERVAL<br />
)<br />
SELECT *<br />
FROM backlog_info<br />
ORDER BY stamp ASC<br />
LIMIT 20;<br />
        stamp        │ new_events │ backlog<br />
─────────────────────┼────────────┼─────────<br />
 2000-01-01 00:05:00 │         15 │       0<br />
 2000-01-01 00:10:00 │         46 │       0<br />
 2000-01-01 00:15:00 │         57 │       0<br />
 2000-01-01 00:20:00 │         19 │       0<br />
 2000-01-01 00:25:00 │        132 │      32<br />
 2000-01-01 00:30:00 │         14 │       0<br />
 2000-01-01 00:35:00 │         19 │       0<br />
 2000-01-01 00:40:00 │        137 │      37<br />
 2000-01-01 00:45:00 │         14 │       0<br />
 2000-01-01 00:50:00 │        146 │      46<br />
 2000-01-01 00:55:00 │         83 │      29<br />
 2000-01-01 01:00:00 │         72 │       1<br />
 2000-01-01 01:05:00 │         43 │       0<br />
 2000-01-01 01:10:00 │         75 │       0<br />
 2000-01-01 01:15:00 │         74 │       0<br />
 2000-01-01 01:20:00 │         62 │       0<br />
 2000-01-01 01:25:00 │        134 │      34<br />
 2000-01-01 01:30:00 │         87 │      21<br />
 2000-01-01 01:35:00 │         59 │       0<br />
 2000-01-01 01:40:00 │        103 │       3<br />
(20 rows)</code></p>
<p>Nice. It works. But am I happy with it? well. Not really.</p>
<p>There are still 2 problems.</p>
<p>First is more psychological: what will happen if there will be no row for given every-5-minute point? Let's see:</p>
<p><code># delete from test where stamp = '2000-01-01 00:55:00';<br />
&nbsp;<br />
# WITH RECURSIVE backlog_info AS (<br />
    SELECT *, greatest( new_events - 100, 0 ) as backlog<br />
    FROM test<br />
    WHERE stamp = '2000-01-01 00:05:00'<br />
UNION ALL<br />
    SELECT t.*, greatest( pt.backlog + t.new_events - 100, 0 ) as backlog<br />
    FROM test t, backlog_info pt<br />
    WHERE t.stamp = pt.stamp + '5 minutes'::INTERVAL<br />
)<br />
SELECT *<br />
FROM backlog_info<br />
ORDER BY stamp ASC<br />
LIMIT 20;<br />
        stamp        │ new_events │ backlog<br />
─────────────────────┼────────────┼─────────<br />
 2000-01-01 00:05:00 │         15 │       0<br />
 2000-01-01 00:10:00 │         46 │       0<br />
 2000-01-01 00:15:00 │         57 │       0<br />
 2000-01-01 00:20:00 │         19 │       0<br />
 2000-01-01 00:25:00 │        132 │      32<br />
 2000-01-01 00:30:00 │         14 │       0<br />
 2000-01-01 00:35:00 │         19 │       0<br />
 2000-01-01 00:40:00 │        137 │      37<br />
 2000-01-01 00:45:00 │         14 │       0<br />
 2000-01-01 00:50:00 │        146 │      46<br />
(10 rows)</code></p>
<p>Quite bad, isn't it?</p>
<p>And 2nd. problem. Let's take a look at explain analyze output:</p>
<p><code>                                                                  QUERY PLAN<br />
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br />
 Limit  (cost=219.75..219.80 rows=20 width=16) (actual time=2765.042..2765.115 rows=20 loops=1)<br />
   CTE backlog_info<br />
     -&gt;  Recursive Union  (cost=0.00..215.04 rows=101 width=16) (actual time=0.190..2760.145 rows=1000 loops=1)<br />
           -&gt;  Index Scan using some_idx on test  (cost=0.00..8.27 rows=1 width=12) (actual time=0.183..0.187 rows=1 loops=1)<br />
                 Index Cond: (stamp = '2000-01-01 00:05:00'::timestamp without time zone)<br />
           -&gt;  Hash Join  (cost=0.33..20.48 rows=10 width=16) (actual time=1.367..2.754 rows=1 loops=1000)<br />
                 Hash Cond: (t.stamp = (pt.stamp + '00:05:00'::interval))<br />
                 -&gt;  Seq Scan on test t  (cost=0.00..15.00 rows=1000 width=12) (actual time=0.006..1.353 rows=1000 loops=1000)<br />
                 -&gt;  Hash  (cost=0.20..0.20 rows=10 width=12) (actual time=0.008..0.008 rows=1 loops=1000)<br />
                       -&gt;  WorkTable Scan on backlog_info pt  (cost=0.00..0.20 rows=10 width=12) (actual time=0.002..0.003 rows=1 loops=1000)<br />
   -&gt;  Sort  (cost=4.71..4.96 rows=101 width=16) (actual time=2765.037..2765.058 rows=20 loops=1)<br />
         Sort Key: backlog_info.stamp<br />
         Sort Method:  top-N heapsort  Memory: 17kB<br />
         -&gt;  CTE Scan on backlog_info  (cost=0.00..2.02 rows=101 width=16) (actual time=0.198..2763.362 rows=1000 loops=1)<br />
 Total runtime: 2765.290 ms<br />
(15 rows)</code></p>
<p>Do you see the problem? No? Check loops counts on scans. This is simply wrong.</p>
<p>(number 1000 comes from the fact that I have 1000 rows in there).</p>
<p>So, what should be the solution? It's quite simple actually &#8211; don't sweat it, write a stored procedure <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p><code>CREATE OR REPLACE FUNCTION<br />
    get_events_data_with_backlog(<br />
        IN  from_when  TIMESTAMP,<br />
        OUT stamp      TIMESTAMP,<br />
        OUT new_events INT4,<br />
        OUT backlog    INT4<br />
    )<br />
    RETURNS SETOF RECORD<br />
    LANGUAGE plpgsql<br />
    AS $$<br />
DECLARE<br />
    temprec        RECORD;<br />
BEGIN<br />
    backlog := 0;<br />
    FOR temprec IN<br />
        SELECT *<br />
        FROM test t<br />
        WHERE t.stamp &gt;= coalesce( from_when, '-infinity' )<br />
        ORDER BY t.stamp ASC<br />
    LOOP<br />
        stamp      := temprec.stamp;<br />
        new_events := temprec.new_events;<br />
        backlog    := greatest( backlog + ( new_events - 100 ), 0 );<br />
        RETURN NEXT;<br />
    END LOOP;<br />
    RETURN;<br />
END;<br />
$$;</code></p>
<p>How does it work? Sanely:</p>
<p><code># select * from get_events_data_with_backlog(NULL) limit 20;<br />
        stamp        │ new_events │ backlog<br />
─────────────────────┼────────────┼─────────<br />
 2000-01-01 00:05:00 │         15 │       0<br />
 2000-01-01 00:10:00 │         46 │       0<br />
 2000-01-01 00:15:00 │         57 │       0<br />
 2000-01-01 00:20:00 │         19 │       0<br />
 2000-01-01 00:25:00 │        132 │      32<br />
 2000-01-01 00:30:00 │         14 │       0<br />
 2000-01-01 00:35:00 │         19 │       0<br />
 2000-01-01 00:40:00 │        137 │      37<br />
 2000-01-01 00:45:00 │         14 │       0<br />
 2000-01-01 00:50:00 │        146 │      46<br />
 2000-01-01 00:55:00 │         83 │      29<br />
 2000-01-01 01:00:00 │         72 │       1<br />
 2000-01-01 01:05:00 │         43 │       0<br />
 2000-01-01 01:10:00 │         75 │       0<br />
 2000-01-01 01:15:00 │         74 │       0<br />
 2000-01-01 01:20:00 │         62 │       0<br />
 2000-01-01 01:25:00 │        134 │      34<br />
 2000-01-01 01:30:00 │         87 │      21<br />
 2000-01-01 01:35:00 │         59 │       0<br />
 2000-01-01 01:40:00 │        103 │       3<br />
(20 rows)</code></p>
<p>And what happens if I remove any row from within?</p>
<p><code># delete from test where stamp = '2000-01-01 00:55:00';<br />
&nbsp;<br />
# select * from get_events_data_with_backlog(NULL) limit 20;<br />
        stamp        │ new_events │ backlog<br />
─────────────────────┼────────────┼─────────<br />
 2000-01-01 00:05:00 │         15 │       0<br />
 2000-01-01 00:10:00 │         46 │       0<br />
 2000-01-01 00:15:00 │         57 │       0<br />
 2000-01-01 00:20:00 │         19 │       0<br />
 2000-01-01 00:25:00 │        132 │      32<br />
 2000-01-01 00:30:00 │         14 │       0<br />
 2000-01-01 00:35:00 │         19 │       0<br />
 2000-01-01 00:40:00 │        137 │      37<br />
 2000-01-01 00:45:00 │         14 │       0<br />
 2000-01-01 00:50:00 │        146 │      46<br />
 2000-01-01 01:00:00 │         72 │      18<br />
 2000-01-01 01:05:00 │         43 │       0<br />
 2000-01-01 01:10:00 │         75 │       0<br />
 2000-01-01 01:15:00 │         74 │       0<br />
 2000-01-01 01:20:00 │         62 │       0<br />
 2000-01-01 01:25:00 │        134 │      34<br />
 2000-01-01 01:30:00 │         87 │      21<br />
 2000-01-01 01:35:00 │         59 │       0<br />
 2000-01-01 01:40:00 │        103 │       3<br />
 2000-01-01 01:45:00 │        107 │      10<br />
(20 rows)</code></p>
<p>OK. So, there are 2 good points, and 1 bad. Good: it's faster &#8211; only one seq scan over table, and that's all. Second: it doesn't break if there is no data in middle of dataset.</p>
<p>Bad: Well, it returns 20 rows, but these are wrong. Backlog for '2000-01-01 01:00:00&#8242; should be definitely 0. System had enough time to process data from '2000-01-01 00:50:00&#8242; &#8211; it had 10 minutes.</p>
<p>So, let's fix the last bug:</p>
<p><code>CREATE OR REPLACE FUNCTION<br />
    get_events_data_with_backlog(<br />
        IN  from_when  TIMESTAMP,<br />
        OUT stamp      TIMESTAMP,<br />
        OUT new_events INT4,<br />
        OUT backlog    INT4<br />
    )<br />
    RETURNS SETOF RECORD<br />
    LANGUAGE plpgsql<br />
    AS $$<br />
DECLARE<br />
    temprec          RECORD;<br />
    previous_stamp   TIMESTAMP;<br />
    time_passed      INTERVAL;<br />
    intervals_passed INT4;<br />
    could_process    INT4;<br />
BEGIN<br />
    backlog := 0;<br />
    FOR temprec IN<br />
        SELECT *<br />
        FROM test t<br />
        WHERE t.stamp &gt;= coalesce( from_when, '-infinity' )<br />
        ORDER BY t.stamp ASC<br />
    LOOP<br />
        IF previous_stamp IS NULL THEN<br />
            previous_stamp := temprec.stamp - '5 minutes'::INTERVAL;<br />
        END IF;<br />
        stamp            := temprec.stamp;<br />
        new_events       := temprec.new_events;<br />
        time_passed      := temprec.stamp - previous_stamp;<br />
        intervals_passed := extract(epoch FROM time_passed) / 300;<br />
        could_process    := intervals_passed * 100;<br />
        backlog          := greatest( backlog + ( new_events - could_process), 0 );<br />
        RETURN NEXT;<br />
        previous_stamp := temprec.stamp;<br />
    END LOOP;<br />
    RETURN;<br />
END;<br />
$$;</code></p>
<p>( of course calculations within function could be written in much terser format, but I wanted it to be clear what it does ).</p>
<p>And how does it work?</p>
<p><code># delete from test where stamp = '2000-01-01 00:55:00';<br />
&nbsp;<br />
# select * from get_events_data_with_backlog(NULL) limit 20;<br />
        stamp        │ new_events │ backlog<br />
─────────────────────┼────────────┼─────────<br />
 2000-01-01 00:05:00 │         15 │       0<br />
 2000-01-01 00:10:00 │         46 │       0<br />
 2000-01-01 00:15:00 │         57 │       0<br />
 2000-01-01 00:20:00 │         19 │       0<br />
 2000-01-01 00:25:00 │        132 │      32<br />
 2000-01-01 00:30:00 │         14 │       0<br />
 2000-01-01 00:35:00 │         19 │       0<br />
 2000-01-01 00:40:00 │        137 │      37<br />
 2000-01-01 00:45:00 │         14 │       0<br />
 2000-01-01 00:50:00 │        146 │      46<br />
 2000-01-01 01:00:00 │         72 │       0<br />
 2000-01-01 01:05:00 │         43 │       0<br />
 2000-01-01 01:10:00 │         75 │       0<br />
 2000-01-01 01:15:00 │         74 │       0<br />
 2000-01-01 01:20:00 │         62 │       0<br />
 2000-01-01 01:25:00 │        134 │      34<br />
 2000-01-01 01:30:00 │         87 │      21<br />
 2000-01-01 01:35:00 │         59 │       0<br />
 2000-01-01 01:40:00 │        103 │       3<br />
 2000-01-01 01:45:00 │        107 │      10<br />
(20 rows)</code></p>
<p>Nice. Everything calculated properly.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">4 comments <a href='http://www.depesz.com/2009/10/29/calculating-backlog-of-events-to-handle/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-28348" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-28348" title="">#</a></span> <a href='http://blog.pwkf.org/' rel='external nofollow' class='url'>Steve Schnepp</a></div>  <div class="date">Oct 29, 2009</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/693f9a2f0eea07660d81e9690b6afd96?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>It&#8217;s just too bad that those &#8220;nice Unicode frames&#8221; are not stacked together in the HTML code block. </p>
<p>A line-height:0.5em; instead of the current 1em in style.css:75 would take care of that&#8230;</p>
	</li>
		
		
			
<li class="mycomment" id="comment-28349" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-28349" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Oct 29, 2009</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Steve:<br />
good point. Will look into it, but since layout is (as you can definitely see) my priority &#8211; it might take a while to get to it <img src="http://www.depesz.com/wp-includes/images/smilies/icon_sad.gif" alt=":(" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-28369" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-28369" title="">#</a></span> <a href='http://twitter.com/efge' rel='external nofollow' class='url'>Efgé</a></div>  <div class="date">Nov 1, 2009</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/cb50b456cce534e8d8683fae109803a1?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>To me this looks like a perfect job for a windowing function&#8230;</p>
	</li>
		
		
			
<li class="mycomment" id="comment-28370" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-28370" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Nov 2, 2009</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Efgé:<br />
That&#8217;s what fooqux wanted, and that&#8217;s what I originally tried to write, but it seems that I can&#8217;t write it with window functions. If you can &#8211; great. Show us &#8211; I mean &#8211; it&#8217;s perfectly possible that I overlooked something.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="1530" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="d794682ba0" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="87"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">2 comments</span> | <span class="wpp-views">646 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">4 comments</span> | <span class="wpp-views">621 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">284 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">224 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">154 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">149 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">135 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">131 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">121 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">105 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

