http://www.depesz.com/2014/03/25/waiting-for-9-4-introduce-jsonb-a-structured-format-for-storing-json/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 15:25:39 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2838>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Waiting for 9.4 &#8211; Introduce jsonb, a structured format for storing json.</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Waiting for 9.4 &#8211; Introduce jsonb, a structured format for storing json. Comments Feed" href="http://www.depesz.com/2014/03/25/waiting-for-9-4-introduce-jsonb-a-structured-format-for-storing-json/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2014/03/25/waiting-for-9-4-introduce-jsonb-a-structured-format-for-storing-json/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2838' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2838">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2014/03/25/waiting-for-9-4-introduce-jsonb-a-structured-format-for-storing-json/" rel="bookmark" title="Permanent Link to Waiting for 9.4 &#8211; Introduce jsonb, a structured format for storing json.">Waiting for 9.4 &#8211; Introduce jsonb, a structured format for storing json.</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>March 25th, 2014 by depesz | Tags: <a href="http://www.depesz.com/tag/gin/" rel="tag">gin</a>, <a href="http://www.depesz.com/tag/index/" rel="tag">index</a>, <a href="http://www.depesz.com/tag/json/" rel="tag">json</a>, <a href="http://www.depesz.com/tag/jsonb/" rel="tag">jsonb</a>, <a href="http://www.depesz.com/tag/pg94/" rel="tag">pg94</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/search/" rel="tag">search</a> |  <a href="http://www.depesz.com/2014/03/25/waiting-for-9-4-introduce-jsonb-a-structured-format-for-storing-json/#comments" title="Comment on Waiting for 9.4 &#8211; Introduce jsonb, a structured format for storing json.">7 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<h1><a href="http://fabriziomello.github.io/blog/2014/05/01/postgresql-aguardando-pela-9-dot-4-introduzindo-jsonb/">Portuguese Brazil Version</a></h1>
<p>On 23rd of March, Andrew Dunstan <a href="http://git.postgresql.org/pg/commitdiff/d9134d0a355cfa447adc80db4505d5931084278a">committed</a> patch:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">Introduce jsonb, a structured format for storing json.
&nbsp;
The new format accepts exactly the same data as the json type. However, it is
stored in a format that does not require reparsing the orgiginal text in order
to process it, making it much more suitable for indexing and other operations.
Insignificant whitespace is discarded, and the order of object keys is not
preserved. Neither are duplicate object keys kept - the later value for a given
key is the only one stored.
&nbsp;
The new type has all the functions and operators that the json type has,
with the exception of the json generation functions (to_json, json_agg etc.)
and with identical semantics. In addition, there are operator classes for
hash and btree indexing, and two classes for GIN indexing, that have no
equivalent in the json type.
&nbsp;
This feature grew out of previous work by Oleg Bartunov and Teodor Sigaev, which
was intended to provide similar facilities to a nested hstore type, but which
in the end proved to have some significant compatibility issues.
&nbsp;
Authors: Oleg Bartunov,  Teodor Sigaev, Peter Geoghegan and Andrew Dunstan.
Review: Andres Freund</pre></td></tr></table></div>

<p><span id="more-2838"></span></p>
<p>After it got committed, it got covered pretty well, but I decided to write about it too, with some examples.</p>
<p>First, let's see how it works.</p>
<p>I'll start with some test values:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#123;</span><span style="color: #3366CC;">&quot;a&quot;</span><span style="color: #339933;">:</span><span style="color: #3366CC;">&quot;abc&quot;</span><span style="color: #339933;">,</span><span style="color: #3366CC;">&quot;d&quot;</span><span style="color: #339933;">:</span><span style="color: #3366CC;">&quot;def&quot;</span><span style="color: #339933;">,</span><span style="color: #3366CC;">&quot;z&quot;</span><span style="color: #339933;">:</span><span style="color: #009900;">&#91;</span><span style="color: #CC0000;">1</span><span style="color: #339933;">,</span><span style="color: #CC0000;">2</span><span style="color: #339933;">,</span><span style="color: #CC0000;">3</span><span style="color: #009900;">&#93;</span><span style="color: #009900;">&#125;</span></pre></td></tr></table></div>


<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#123;</span><span style="color: #3366CC;">&quot;a&quot;</span><span style="color: #339933;">:</span><span style="color: #3366CC;">&quot;abc&quot;</span><span style="color: #339933;">,</span><span style="color: #3366CC;">&quot;d&quot;</span><span style="color: #339933;">;</span><span style="color: #3366CC;">&quot;def&quot;</span><span style="color: #339933;">,</span><span style="color: #3366CC;">&quot;z&quot;</span><span style="color: #339933;">:</span><span style="color: #009900;">&#91;</span>1x2<span style="color: #339933;">,</span><span style="color: #CC0000;">3</span><span style="color: #009900;">&#93;</span><span style="color: #009900;">&#125;</span></pre></td></tr></table></div>


<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#123;</span>
    <span style="color: #3366CC;">&quot;a&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;abc&quot;</span><span style="color: #339933;">,</span>
    <span style="color: #3366CC;">&quot;d&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;def&quot;</span><span style="color: #339933;">,</span>
    <span style="color: #3366CC;">&quot;z&quot;</span><span style="color: #339933;">:</span> <span style="color: #009900;">&#91;</span><span style="color: #CC0000;">1</span><span style="color: #339933;">,</span> <span style="color: #CC0000;">2</span><span style="color: #339933;">,</span> <span style="color: #CC0000;">3</span><span style="color: #009900;">&#93;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>and</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#123;</span><span style="color: #3366CC;">&quot;a&quot;</span><span style="color: #339933;">:</span><span style="color: #3366CC;">&quot;abc&quot;</span><span style="color: #339933;">,</span><span style="color: #3366CC;">&quot;d&quot;</span><span style="color: #339933;">:</span><span style="color: #3366CC;">&quot;def&quot;</span><span style="color: #339933;">,</span><span style="color: #3366CC;">&quot;z&quot;</span><span style="color: #339933;">:</span><span style="color: #009900;">&#91;</span><span style="color: #CC0000;">1</span><span style="color: #339933;">,</span><span style="color: #CC0000;">2</span><span style="color: #339933;">,</span><span style="color: #CC0000;">3</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">,</span><span style="color: #3366CC;">&quot;d&quot;</span><span style="color: #339933;">:</span><span style="color: #3366CC;">&quot;overwritten&quot;</span><span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>First, let's see what will happen after casting these to json and jsonb:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;:&quot;def&quot;,&quot;z&quot;:[1,2,3]}'</span>::json;
               json                
<span style="color: #808080; font-style: italic;">-----------------------------------</span>
 <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>:<span style="color: #ff0000;">&quot;abc&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;d&quot;</span>:<span style="color: #ff0000;">&quot;def&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;z&quot;</span>:<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;:&quot;def&quot;,&quot;z&quot;:[1,2,3]}'</span>::jsonb;
                  jsonb                   
<span style="color: #808080; font-style: italic;">------------------------------------------</span>
 <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>: <span style="color: #ff0000;">&quot;abc&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;d&quot;</span>: <span style="color: #ff0000;">&quot;def&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;z&quot;</span>: <span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>All fine in here, but jsonb output is reformatted. In here it didn't do much, but it did add some whitespaces. That's nice.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;;&quot;def&quot;,&quot;z&quot;:[1x2,3]}'</span>::json;
ERROR:  invalid <span style="color: #993333; font-weight: bold;">input</span> syntax <span style="color: #993333; font-weight: bold;">for</span> <span style="color: #993333; font-weight: bold;">type</span> json
LINE <span style="color: #cc66cc;">1</span>: <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;;&quot;def&quot;,&quot;z&quot;:[1x2,3]}'</span>::json;
               ^
DETAIL:  Token <span style="color: #ff0000;">&quot;;&quot;</span> <span style="color: #993333; font-weight: bold;">is</span> invalid<span style="color: #66cc66;">.</span>
CONTEXT:  JSON <span style="color: #993333; font-weight: bold;">data</span><span style="color: #66cc66;">,</span> line <span style="color: #cc66cc;">1</span>: <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>:<span style="color: #ff0000;">&quot;abc&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;d&quot;</span>;<span style="color: #66cc66;">...</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;;&quot;def&quot;,&quot;z&quot;:[1x2,3]}'</span>::jsonb;
ERROR:  invalid <span style="color: #993333; font-weight: bold;">input</span> syntax <span style="color: #993333; font-weight: bold;">for</span> <span style="color: #993333; font-weight: bold;">type</span> json
LINE <span style="color: #cc66cc;">1</span>: <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;;&quot;def&quot;,&quot;z&quot;:[1x2,3]}'</span>::jsonb;
               ^
DETAIL:  Token <span style="color: #ff0000;">&quot;;&quot;</span> <span style="color: #993333; font-weight: bold;">is</span> invalid<span style="color: #66cc66;">.</span>
CONTEXT:  JSON <span style="color: #993333; font-weight: bold;">data</span><span style="color: #66cc66;">,</span> line <span style="color: #cc66cc;">1</span>: <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>:<span style="color: #ff0000;">&quot;abc&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;d&quot;</span>;<span style="color: #66cc66;">...</span></pre></td></tr></table></div>

<p>In both cases it correctly reported error, but in the jsonb case it said<br />
&#8220;invalid input syntax for type json". It's probably due to cast order, and<br />
should be OK normally. And anyway &#8211; JSON and JSONB are similar enough not to<br />
cause problems.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{
    &quot;a&quot;: &quot;abc&quot;,
    &quot;d&quot;: &quot;def&quot;,
    &quot;z&quot;: [1, 2, 3]
}'</span>::json;
        json        
<span style="color: #808080; font-style: italic;">--------------------</span>
 <span style="color: #66cc66;">&#123;</span>                 <span style="color: #66cc66;">+</span>
     <span style="color: #ff0000;">&quot;a&quot;</span>: <span style="color: #ff0000;">&quot;abc&quot;</span><span style="color: #66cc66;">,</span>   <span style="color: #66cc66;">+</span>
     <span style="color: #ff0000;">&quot;d&quot;</span>: <span style="color: #ff0000;">&quot;def&quot;</span><span style="color: #66cc66;">,</span>   <span style="color: #66cc66;">+</span>
     <span style="color: #ff0000;">&quot;z&quot;</span>: <span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">+</span>
 <span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{
    &quot;a&quot;: &quot;abc&quot;,
    &quot;d&quot;: &quot;def&quot;,
    &quot;z&quot;: [1, 2, 3]
}'</span>::jsonb;
                  jsonb                   
<span style="color: #808080; font-style: italic;">------------------------------------------</span>
 <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>: <span style="color: #ff0000;">&quot;abc&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;d&quot;</span>: <span style="color: #ff0000;">&quot;def&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;z&quot;</span>: <span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>In here we see the whitespace removal. I'd say it's pretty cool. Of course not if (for whatever reason) you want to retain the spaces, but these shouldn't be meaningful, so depending on them being there doesn't sound wise.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;:&quot;def&quot;,&quot;z&quot;:[1,2,3],&quot;d&quot;:&quot;overwritten&quot;}'</span>::json;
                        json                         
<span style="color: #808080; font-style: italic;">-----------------------------------------------------</span>
 <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>:<span style="color: #ff0000;">&quot;abc&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;d&quot;</span>:<span style="color: #ff0000;">&quot;def&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;z&quot;</span>:<span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">2</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;d&quot;</span>:<span style="color: #ff0000;">&quot;overwritten&quot;</span><span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;:&quot;def&quot;,&quot;z&quot;:[1,2,3],&quot;d&quot;:&quot;overwritten&quot;}'</span>::jsonb;
                      jsonb                       
<span style="color: #808080; font-style: italic;">--------------------------------------------------</span>
 <span style="color: #66cc66;">&#123;</span><span style="color: #ff0000;">&quot;a&quot;</span>: <span style="color: #ff0000;">&quot;abc&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;d&quot;</span>: <span style="color: #ff0000;">&quot;overwritten&quot;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">&quot;z&quot;</span>: <span style="color: #66cc66;">&#91;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">2</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">3</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>And the value being overwritten. I'd say that it's great.</p>
<p>As for disk space usage &#8211; it will definitely depend on a case, but quick test shows that jsonb can use significantly more disk space:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> pg_column_size<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;:&quot;def&quot;,&quot;z&quot;:[1,2,3]}'</span>::jsonb<span style="color: #66cc66;">&#41;</span>;
 pg_column_size 
<span style="color: #808080; font-style: italic;">----------------</span>
             <span style="color: #cc66cc;">84</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> pg_column_size<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'{&quot;a&quot;:&quot;abc&quot;,&quot;d&quot;:&quot;def&quot;,&quot;z&quot;:[1,2,3]}'</span>::json<span style="color: #66cc66;">&#41;</span>;
 pg_column_size 
<span style="color: #808080; font-style: italic;">----------------</span>
             <span style="color: #cc66cc;">37</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>On the other hand for this JSON:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#123;</span><span style="color: #3366CC;">&quot;widget&quot;</span><span style="color: #339933;">:</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #3366CC;">&quot;debug&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;on&quot;</span><span style="color: #339933;">,</span>
    <span style="color: #3366CC;">&quot;window&quot;</span><span style="color: #339933;">:</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #3366CC;">&quot;title&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;Sample Konfabulator Widget&quot;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;name&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;main_window&quot;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;width&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">500</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;height&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">500</span>
    <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
    <span style="color: #3366CC;">&quot;image&quot;</span><span style="color: #339933;">:</span> <span style="color: #009900;">&#123;</span> 
        <span style="color: #3366CC;">&quot;src&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;Images/Sun.png&quot;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;name&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;sun1&quot;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;hOffset&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">250</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;vOffset&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">250</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;alignment&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;center&quot;</span>
    <span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
    <span style="color: #3366CC;">&quot;text&quot;</span><span style="color: #339933;">:</span> <span style="color: #009900;">&#123;</span>
        <span style="color: #3366CC;">&quot;data&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;Click Here&quot;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;size&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">36</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;style&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;bold&quot;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;name&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;text1&quot;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;hOffset&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">250</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;vOffset&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">100</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;alignment&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;center&quot;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&quot;onMouseUp&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;sun1.opacity = (sun1.opacity / 100) * 90;&quot;</span>
    <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>JSON value takes 605 bytes, and JSONb &#8211; 524.</p>
<p>What's more&#8230;</p>
<p>For jsonb we have more operators. For example &#8211; equality:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'{&quot;a&quot;:1, &quot;b&quot;:2}'</span>::jsonb <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'{&quot;b&quot;:2, &quot;a&quot;:1}'</span>::jsonb;
 ?<span style="color: #993333; font-weight: bold;">column</span>? 
<span style="color: #808080; font-style: italic;">----------</span>
 t
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>More operators are described <a href="http://www.postgresql.org/docs/devel/static/functions-json.html">the docs</a>.</p>
<p>What's more &#8211; the new datatype can use indexes to search for elements.</p>
<p>I made test table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> test <span style="color: #66cc66;">&#40;</span>v jsonb<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>and loaded there 100k rows, which look like:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#123;</span><span style="color: #3366CC;">&quot;i&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">42</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&quot;s&quot;</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;ryzdaoop&quot;</span><span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>Some of the rows (~ 1%) have additional value in the json &#8211; key &#8220;r" with value 1.</p>
<p>Now, I can create index on this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">index</span> whatever <span style="color: #993333; font-weight: bold;">on</span> test <span style="color: #993333; font-weight: bold;">using</span> gin <span style="color: #66cc66;">&#40;</span>v<span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">INDEX</span></pre></td></tr></table></div>

<p>and now:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">explain</span> analyze <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> test <span style="color: #993333; font-weight: bold;">where</span> v ? <span style="color: #ff0000;">'r'</span>;
                                                      QUERY PLAN                                                       
<span style="color: #808080; font-style: italic;">-----------------------------------------------------------------------------------------------------------------------</span>
 Bitmap Heap Scan <span style="color: #993333; font-weight: bold;">on</span> test  <span style="color: #66cc66;">&#40;</span>cost<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">16.77</span><span style="color: #66cc66;">..</span>307<span style="color: #66cc66;">.</span>23 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">100</span> width<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">42</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#40;</span>actual <span style="color: #993333; font-weight: bold;">time</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.554</span><span style="color: #66cc66;">..</span>2<span style="color: #66cc66;">.</span>670 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1024</span> loops<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
   Recheck Cond: <span style="color: #66cc66;">&#40;</span>v ? <span style="color: #ff0000;">'r'</span>::text<span style="color: #66cc66;">&#41;</span>
   Heap Blocks: exact<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">644</span>
   <span style="color: #66cc66;">-&gt;</span>  Bitmap <span style="color: #993333; font-weight: bold;">Index</span> Scan <span style="color: #993333; font-weight: bold;">on</span> whatever  <span style="color: #66cc66;">&#40;</span>cost<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.00</span><span style="color: #66cc66;">..</span>16<span style="color: #66cc66;">.</span>75 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">100</span> width<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#40;</span>actual <span style="color: #993333; font-weight: bold;">time</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.416</span><span style="color: #66cc66;">..</span>0<span style="color: #66cc66;">.</span>416 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1024</span> loops<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
         <span style="color: #993333; font-weight: bold;">Index</span> Cond: <span style="color: #66cc66;">&#40;</span>v ? <span style="color: #ff0000;">'r'</span>::text<span style="color: #66cc66;">&#41;</span>
 Planning <span style="color: #993333; font-weight: bold;">time</span>: <span style="color: #cc66cc;">0.475</span> ms
 Total runtime: <span style="color: #cc66cc;">2.788</span> ms
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">7</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>I could have also did:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">explain</span> analyze <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> test <span style="color: #993333; font-weight: bold;">where</span> v @<span style="color: #66cc66;">&gt;</span> <span style="color: #ff0000;">'{&quot;i&quot;:42}'</span>;
                                                      QUERY PLAN                                                      
<span style="color: #808080; font-style: italic;">----------------------------------------------------------------------------------------------------------------------</span>
 Bitmap Heap Scan <span style="color: #993333; font-weight: bold;">on</span> test  <span style="color: #66cc66;">&#40;</span>cost<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">28.77</span><span style="color: #66cc66;">..</span>319<span style="color: #66cc66;">.</span>23 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">100</span> width<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">42</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#40;</span>actual <span style="color: #993333; font-weight: bold;">time</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1.132</span><span style="color: #66cc66;">..</span>1<span style="color: #66cc66;">.</span>707 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">103</span> loops<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
   Recheck Cond: <span style="color: #66cc66;">&#40;</span>v @<span style="color: #66cc66;">&gt;</span> <span style="color: #ff0000;">'{&quot;i&quot;: 42}'</span>::jsonb<span style="color: #66cc66;">&#41;</span>
   Heap Blocks: exact<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">99</span>
   <span style="color: #66cc66;">-&gt;</span>  Bitmap <span style="color: #993333; font-weight: bold;">Index</span> Scan <span style="color: #993333; font-weight: bold;">on</span> whatever  <span style="color: #66cc66;">&#40;</span>cost<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.00</span><span style="color: #66cc66;">..</span>28<span style="color: #66cc66;">.</span>75 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">100</span> width<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#40;</span>actual <span style="color: #993333; font-weight: bold;">time</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1.089</span><span style="color: #66cc66;">..</span>1<span style="color: #66cc66;">.</span>089 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">103</span> loops<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
         <span style="color: #993333; font-weight: bold;">Index</span> Cond: <span style="color: #66cc66;">&#40;</span>v @<span style="color: #66cc66;">&gt;</span> <span style="color: #ff0000;">'{&quot;i&quot;: 42}'</span>::jsonb<span style="color: #66cc66;">&#41;</span>
 Planning <span style="color: #993333; font-weight: bold;">time</span>: <span style="color: #cc66cc;">0.482</span> ms
 Total runtime: <span style="color: #cc66cc;">1.783</span> ms
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">7</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Or even:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">explain</span> analyze <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> test <span style="color: #993333; font-weight: bold;">where</span> v @<span style="color: #66cc66;">&gt;</span> <span style="color: #ff0000;">'{&quot;i&quot;:42, &quot;r&quot;:1}'</span>;
                                                     QUERY PLAN                                                     
<span style="color: #808080; font-style: italic;">--------------------------------------------------------------------------------------------------------------------</span>
 Bitmap Heap Scan <span style="color: #993333; font-weight: bold;">on</span> test  <span style="color: #66cc66;">&#40;</span>cost<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">52.77</span><span style="color: #66cc66;">..</span>343<span style="color: #66cc66;">.</span>23 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">100</span> width<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">42</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#40;</span>actual <span style="color: #993333; font-weight: bold;">time</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1.171</span><span style="color: #66cc66;">..</span>1<span style="color: #66cc66;">.</span>191 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">3</span> loops<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
   Recheck Cond: <span style="color: #66cc66;">&#40;</span>v @<span style="color: #66cc66;">&gt;</span> <span style="color: #ff0000;">'{&quot;i&quot;: 42, &quot;r&quot;: 1}'</span>::jsonb<span style="color: #66cc66;">&#41;</span>
   Heap Blocks: exact<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">3</span>
   <span style="color: #66cc66;">-&gt;</span>  Bitmap <span style="color: #993333; font-weight: bold;">Index</span> Scan <span style="color: #993333; font-weight: bold;">on</span> whatever  <span style="color: #66cc66;">&#40;</span>cost<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0.00</span><span style="color: #66cc66;">..</span>52<span style="color: #66cc66;">.</span>75 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">100</span> width<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#40;</span>actual <span style="color: #993333; font-weight: bold;">time</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1.143</span><span style="color: #66cc66;">..</span>1<span style="color: #66cc66;">.</span>143 <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">=</span><span style="color: #cc66cc;">3</span> loops<span style="color: #66cc66;">=</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
         <span style="color: #993333; font-weight: bold;">Index</span> Cond: <span style="color: #66cc66;">&#40;</span>v @<span style="color: #66cc66;">&gt;</span> <span style="color: #ff0000;">'{&quot;i&quot;: 42, &quot;r&quot;: 1}'</span>::jsonb<span style="color: #66cc66;">&#41;</span>
 Planning <span style="color: #993333; font-weight: bold;">time</span>: <span style="color: #cc66cc;">0.530</span> ms
 Total runtime: <span style="color: #cc66cc;">1.256</span> ms
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">7</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Now, that's really cool.</p>
<p>Unfortunately you can't use the indexes to search &#8220;deep". What does it mean?</p>
<p>Let's assume you have JSON value like:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#123;</span><span style="color: #3366CC;">&quot;a&quot;</span><span style="color: #339933;">:</span> <span style="color: #009900;">&#91;</span><span style="color: #CC0000;">1</span><span style="color: #339933;">,</span><span style="color: #CC0000;">2</span><span style="color: #339933;">,</span><span style="color: #CC0000;">3</span><span style="color: #339933;">,</span><span style="color: #CC0000;">4</span><span style="color: #009900;">&#93;</span><span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>You can index it, and search for " value ? &#8216;a' &#8220;, or " value @> &#8216;{&#8220;a":[1,2,3,4]}', but you can't search (using index) for &#8220;rows, which have 3 in the array that is under key &#8220;a" in the json".</p>
<p>Of course &#8211; you can work around it by creating index on ((value -> &#8216;a')) if that's what you really need.</p>
<p>Anyway &#8211; I really like it. It seems to work nicely, and I hope to get more features in there in the future.</p>
<p>Thanks guys.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">7 comments <a href='http://www.depesz.com/2014/03/25/waiting-for-9-4-introduce-jsonb-a-structured-format-for-storing-json/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-45147" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-45147" title="">#</a></span> Peter Geoghegan</div>  <div class="date">Mar 26, 2014</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f9a2dba12b94d0c204d846a29da56bf5?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>&#8220;You can index it, and search for &#8221; value ? ‘a&#8217; “, or &#8221; value @&gt; ‘{“a&#8221;:[1,2,3,4]}&#8217;, but you can&#8217;t search for “rows, which have 3 in the array that is under key “a&#8221; in the json&#8221;.&#8221;</p>
<p>Actually, yes, you can, and if containment is tested the query may use a non-expression index: </p>
<p>[local]/postgres=# create table w as select &#8216;{&#8220;a&#8221;: [1,2,3,4]}&#8217;::jsonb t;<br />
SELECT 1<br />
[local]/postgres=# select * from w where t @&gt; &#8216;{&#8220;a&#8221;:[3]}&#8217;;<br />
          t<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
 {&#8220;a&#8221;: [1, 2, 3, 4]}<br />
(1 row)</p>
<p>What&#8217;s really cool about the jsonb_hash_ops opclass is that it allows for really flexible and effective indexing when the jsonb column is directly indexed, without ending up with gigantic index.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-45155" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-45155" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 26, 2014</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Peter:<br />
I meant that you can&#8217;t search using the index. Corrected. Searching without usage of index is of course possible.</p>
	</li>
		
		
			
<li class="odd" id="comment-45159" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-45159" title="">#</a></span> Peter Geoghegan</div>  <div class="date">Mar 26, 2014</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f9a2dba12b94d0c204d846a29da56bf5?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Such queries can use an index:</p>
<p>[local]/postgres=# \d+ w<br />
                          Table &#8220;public.w&#8221;<br />
 Column | Type  | Modifiers | Storage  | Stats target | Description<br />
&#8212;&#8212;&#8211;+&#8212;&#8212;-+&#8212;&#8212;&#8212;&#8211;+&#8212;&#8212;&#8212;-+&#8212;&#8212;&#8212;&#8212;&#8211;+&#8212;&#8212;&#8212;&#8212;-<br />
 t      | jsonb |           | extended |              |<br />
Indexes:<br />
    &#8220;ff&#8221; gin (t jsonb_hash_ops)<br />
Has OIDs: no</p>
<p>[local]/postgres=# explain analyze select * from w where t @&gt; &#8216;{&#8220;a&#8221;:[1]}&#8217;;<br />
                                                QUERY PLAN<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />
 Bitmap Heap Scan on w  (cost=8.00..12.01 rows=1 width=32) (actual time=0.053..0.056 rows=1 loops=1)<br />
   Recheck Cond: (t @&gt; &#8216;{&#8220;a&#8221;: [1]}&#8217;::jsonb)<br />
   Heap Blocks: exact=1<br />
   -&gt;  Bitmap Index Scan on ff  (cost=0.00..8.00 rows=1 width=0) (actual time=0.027..0.027 rows=1 loops=1)<br />
         Index Cond: (t @&gt; &#8216;{&#8220;a&#8221;: [1]}&#8217;::jsonb)<br />
 Planning time: 0.162 ms<br />
 Total runtime: 0.124 ms<br />
(7 rows)</p>
	</li>
		
		
			
<li class="mycomment" id="comment-45160" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-45160" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 26, 2014</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Peter: Hmmm .. you&#8217;re right. Looks like misunderstood the part in docs that start with:</p>
<p>&#8220;However, the index could not be used for queries like the following, due to the aforementioned nesting restriction:&#8221;</p>
<p>in <a href="http://www.postgresql.org/docs/devel/static/datatype-json.html#JSON-INDEXING" rel="nofollow">http://www.postgresql.org/docs/devel/static/datatype-json.html#JSON-INDEXING</a></p>
	</li>
		
		
			
<li class="odd" id="comment-45161" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-45161" title="">#</a></span> Peter Geoghegan</div>  <div class="date">Mar 26, 2014</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f9a2dba12b94d0c204d846a29da56bf5?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I understand your confusion. Perhaps that could stand to be clearer.</p>
<p>The nesting restriction referred to is really just that you cannot query against a &#8220;sub-document&#8221; extracted using the -&gt; operator, for example, unless you have an appropriate expression index. This might be a particular problem if you were checking existence in your predicate (the &#8216;?&#8217; operator), because that simply doesn&#8217;t work past the first nesting level (those are the semantics, but it would be hard to make &#8220;nested existence&#8221; checking work with the current approach to GIN indexing, plus that mostly isn&#8217;t too compelling anyway). There may be some minor advantages to testing &#8220;existence&#8221; rather than &#8220;containment&#8221;. Perhaps even the term &#8220;containment&#8221; is misleading, since it&#8217;s a kind of nested containment, but that&#8217;s a holdover from hstore.</p>
<p>We want to discourage people from indexing everything, which is more or less what a straight GIN index on a jsonb column represents. People should continue to make informed decisions about what to index in a way consistent with actual querying patterns, since presumably in general it isn&#8217;t all that useful to be able to use an index scan to find *any* one thing.</p>
<p>Having said all that, if you&#8217;re using a jsonb_hash_ops GIN index, this approach actually works surprisingly well.</p>
	</li>
		
		
			
<li class="odd" id="comment-78954" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-78954" title="">#</a></span> <a href='http://schinckel.net' rel='external nofollow' class='url'>Matthew Schinckel</a></div>  <div class="date">Jun 1, 2014</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/833bfbcc9940cfcf0af6def751c23b05?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I really like the new operators (and how they bring most of the hstore functionality to jsonb).</p>
<p>However, there still appear to be some operations missing. Notably, the subtraction operator, and, it seems, any operators that actually change, rather than compare objects: <a href="http://www.postgresql.org/docs/9.4/static/hstore.html#HSTORE-OP-TABLE" rel="nofollow">http://www.postgresql.org/docs/9.4/static/hstore.html#HSTORE-OP-TABLE</a></p>
	</li>
		
		
			
<li class="odd" id="comment-115025" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-115025" title="">#</a></span> Matt</div>  <div class="date">Jul 22, 2014</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>No doubt that JSONB will be useful to web developers, but it seems useless or annoying to everyone else as a regular document store.  One of the attractions to PostgreSQL is its comprehensive data type support, as well as its user defined data types.  If it requires casting dates and others into strings or integers, then those types have to be cast back for each query that reads them.  Besides being very tedious to code around, this negates any benefit from being stored as binary.</p>
<p>I suppose if one wants a hierarchical data store, the xml type may be preferable as XML can be used in various ways to deal with rich data types.  But that is still a pain.  I would rather have something like hstore2, but with all data types supported.  That way, the I/O through the database driver is just like any column in the database.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="2838" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="184f2cd097" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="144"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">601 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">375 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">273 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">213 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">161 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">150 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">143 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">133 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">128 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">106 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

