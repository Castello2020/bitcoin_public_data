http://www.depesz.com/2013/02/25/variables-in-sql-what-how-when/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 22:10:15 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2608>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Variables in SQL, what, how, when?</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Variables in SQL, what, how, when? Comments Feed" href="http://www.depesz.com/2013/02/25/variables-in-sql-what-how-when/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2013/02/25/variables-in-sql-what-how-when/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2608' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2608">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2013/02/25/variables-in-sql-what-how-when/" rel="bookmark" title="Permanent Link to Variables in SQL, what, how, when?">Variables in SQL, what, how, when?</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>February 25th, 2013 by depesz | Tags: <a href="http://www.depesz.com/tag/global/" rel="tag">global</a>, <a href="http://www.depesz.com/tag/plperl/" rel="tag">plperl</a>, <a href="http://www.depesz.com/tag/plpgsql/" rel="tag">plpgsql</a>, <a href="http://www.depesz.com/tag/plpython/" rel="tag">plpython</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/psql/" rel="tag">psql</a>, <a href="http://www.depesz.com/tag/session/" rel="tag">session</a>, <a href="http://www.depesz.com/tag/variable/" rel="tag">variable</a> |  <a href="http://www.depesz.com/2013/02/25/variables-in-sql-what-how-when/#comments" title="Comment on Variables in SQL, what, how, when?">1 comment &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>One of the questions that gets asked quite a lot, is: how can you use variables in your queries? Other databases have them, does PostgreSQL?</p>
<p>Actually the answer is &#8220;no". But, it is actually very easy to work around, and what's more important &#8211; quite often, what you need are not variables in queries, but rather variables in client. What does it mean? Let's see.</p>
<p><span id="more-2608"></span></p>
<p>It all depends on your usecase. We have, basically these options:</p>
<ul>
<li>Variables in psql (<a href="http://www.depesz.com/2012/12/31/command-line-tools-in-xxi-century-no-way-yes-way/">the command line tool</a>)</li>
<li><acronym title="Grand Unified Configuration">GUCs</acronym>
<li>Per session variables in temp tables</li>
<li>Per session and global variables in normal tables</li>
</ul>
<h1>Variables in psql</h1>
<p>In quite a lot of cases, these will be enough for your usage. These are not evaluated in PostgreSQL backend, but in psql client.</p>
<p>Example usage:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ \prompt <span style="color: #ff0000;">'How many rows? '</span> <span style="color: #993333; font-weight: bold;">rows</span>
How many <span style="color: #993333; font-weight: bold;">rows</span>? <span style="color: #cc66cc;">10</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> relname <span style="color: #993333; font-weight: bold;">from</span> pg_class <span style="color: #993333; font-weight: bold;">limit</span> :<span style="color: #993333; font-weight: bold;">rows</span>;
             relname
<span style="color: #808080; font-style: italic;">---------------------------------</span>
 pg_statistic
 pg_type
 pg_toast_2619
 pg_toast_2619_index
 pg_authid_rolname_index
 pg_authid_oid_index
 pg_attribute_relid_attnam_index
 pg_attribute_relid_attnum_index
 pg_toast_1255
 pg_toast_1255_index
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">10</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Such variables can be set by using \prompt, or by using \set, or by running shell commands (on client, not on server). Afterwards you can use them, in queries, using notations like:</p>
<ul>
<li>:var &#8211; simply inserts value of var in the query at given location</li>
<li>:'var' &#8211; inserts the value as properly quoted string &#8211; even if it includes &#8216; characters</li>
<li>:"var" &#8211; inserts the value as properly quoted identifier</li>
</ul>
<p>So, you can, for example, write something like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ \<span style="color: #993333; font-weight: bold;">set</span> <span style="color: #993333; font-weight: bold;">table</span> pg_class
$ \<span style="color: #993333; font-weight: bold;">set</span> <span style="color: #993333; font-weight: bold;">match</span> oid
$ \<span style="color: #993333; font-weight: bold;">set</span> <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">10</span>
$ <span style="color: #993333; font-weight: bold;">select</span> relname <span style="color: #993333; font-weight: bold;">from</span> :<span style="color: #ff0000;">&quot;table&quot;</span> <span style="color: #993333; font-weight: bold;">where</span> relname ~ :<span style="color: #ff0000;">'match'</span> <span style="color: #993333; font-weight: bold;">limit</span> :<span style="color: #993333; font-weight: bold;">limit</span>;
         relname
<span style="color: #808080; font-style: italic;">--------------------------</span>
 pg_authid_oid_index
 pg_am_oid_index
 pg_amop_oid_index
 pg_amproc_oid_index
 pg_aggregate_fnoid_index
 pg_cast_oid_index
 pg_collation_oid_index
 pg_database_oid_index
 pg_proc_oid_index
 pg_operator_oid_index
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">10</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>In PostgreSQL 9.3, <a href="http://www.depesz.com/2013/02/03/waiting-for-9-3-create-a-psql-command-gset-to-store-query-results-into-psql-variables/">we'll get</a> the ability to set value of variable based on a query, which will let us do some cooler stuff, in simpler way than before (it is possible to set value of variable from a query in older versions too, but the way of doing this is not nice &#8211; example is in <a href="http://www.depesz.com/2013/02/03/waiting-for-9-3-create-a-psql-command-gset-to-store-query-results-into-psql-variables/">the blog post</a>).</p>
<p>So, if you only need some shared value between multiple queries that you run in batch mode via psql &#8211; it's perfectly possible, and very simple.</p>
<p>The cool thing about psql variables, is that you can build whole queries in them. For example:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">=</span>$ \<span style="color: #993333; font-weight: bold;">set</span> top <span style="color: #ff0000;">'select now() - query_start as runtime, query from pg_stat_activity where state &lt;&gt; '</span><span style="color: #ff0000;">'idle'</span><span style="color: #ff0000;">' order by query_start;'</span>
&nbsp;
<span style="color: #66cc66;">=</span>$ :top</pre></td></tr></table></div>

<p>After pressing enter in the :top command, you'll getr information about queries that run.</p>
<h1><acronym title="Grand Unified Configuration">GUCs</acronym></h1>
<p>You might know that there are various Pg settings &#8211; like work_mem, shared_buffers, listen_addresses and so on.</p>
<p>What you might not know is that you can relatively easily setup your own variables. To do so, you need to use some kind of prefix (class). In PostgreSQL before 9.2, you had to configure the class in postgresql.conf, using:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">custom_variable_classes <span style="color: #66cc66;">=</span> depesz</pre></td></tr></table></div>

<p>So you can use &#8220;depesz" class. In 9.2 and later classes are defined on use.</p>
<p>Usage of these variables is very simple &#8211; using functions. There are two functions that you'll need:</p>
<ul>
<li>current_setting(variable) &#8211; returns current value for given variable, raises exception on unknown variable</li>
<li>set_config(variable, value, is_local) &#8211; sets variable to given value (and declares it if it wasn't declared before). If is_local is set to true, the change is only for current transaction. Otherwise &#8211; it's for current session.</li>
</ul>
<p>So, let's see how it works. First, I'll try to use unknown variable:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> current_setting<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'depesz.xx'</span><span style="color: #66cc66;">&#41;</span>;
ERROR:  unrecognized configuration parameter <span style="color: #ff0000;">&quot;depesz.xx&quot;</span></pre></td></tr></table></div>

<p>OK. That worked. Now, let's set the value:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> set_config<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'depesz.xx'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'123'</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">false</span><span style="color: #66cc66;">&#41;</span>;
 set_config
<span style="color: #808080; font-style: italic;">------------</span>
 <span style="color: #cc66cc;">123</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> current_setting<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'depesz.xx'</span><span style="color: #66cc66;">&#41;</span>;
 current_setting
<span style="color: #808080; font-style: italic;">-----------------</span>
 <span style="color: #cc66cc;">123</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Couple of important notes:</p>
<ul>
<li>variable cannot contain null. If you'll store null in variable, or if it becomes declared without value &#8211; it will have empty string as value</li>
<li>if you'll use is_local set to true, and you're in AutoCommit mode &#8211; this is basically no-op (side effect will be declaring of the variable, but it will have empty string as value). This did bite me couple of times <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </li>
<li>you can set default values per user and per database using normal &#8220;alter user/database set &#8230; = &#8230;"</li>
</ul>
<p>There is (as far as I know) no way to use GUCs to store real global variable &#8211; across multiple sessions. The problem is that while you can use &#8220;ALTER &#8230; SET &#8230;", it is evaluated on connection, so it will not affect existing connections. This might be good for you, though.</p>
<p>Value of variable can be also fetched using &#8220;SHOW" sql command, and set using &#8220;SET" command, but since using function interface is simpler in case of writing my own functions, I tend to use functions to read/write the variables.</p>
<h1>Per session variables in temp tables</h1>
<p>In case you're on PostgreSQL 9.1 (or earlier), and you can't modify postgresql.conf to add your own <a href="http://www.postgresql.org/docs/9.1/static/runtime-config-custom.html">custom_variable_classes</a>, you can do more or less the same thing using some very simple functions.</p>
<p>Using temp tables makes it very fast, and there is no need to care about identification of session &#8211; you just get what you need.</p>
<p>For example, we can imagine two simple functions, like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> set_variable<span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">IN</span> p_var TEXT<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">IN</span> p_val TEXT <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> void <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">DECLARE</span>
    v_var TEXT;
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">execute</span> <span style="color: #ff0000;">'CREATE temp TABLE IF NOT exists sys_variables ( variable TEXT PRIMARY KEY, value TEXT );'</span>;
    LOOP
        <span style="color: #993333; font-weight: bold;">execute</span> <span style="color: #ff0000;">'UPDATE sys_variables SET value = $1 WHERE variable = $2 returning variable'</span> <span style="color: #993333; font-weight: bold;">INTO</span> v_var <span style="color: #993333; font-weight: bold;">USING</span> p_val<span style="color: #66cc66;">,</span> p_var;
        <span style="color: #993333; font-weight: bold;">IF</span> v_var <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">THEN</span>
            <span style="color: #993333; font-weight: bold;">RETURN</span>;
        <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
        <span style="color: #993333; font-weight: bold;">BEGIN</span>
            <span style="color: #993333; font-weight: bold;">execute</span> <span style="color: #ff0000;">'INSERT INTO sys_variables ( variable, value ) VALUES ( $1, $2 )'</span> <span style="color: #993333; font-weight: bold;">USING</span> p_var<span style="color: #66cc66;">,</span> p_val;
            <span style="color: #993333; font-weight: bold;">RETURN</span>;
        EXCEPTION <span style="color: #993333; font-weight: bold;">WHEN</span> unique_violation <span style="color: #993333; font-weight: bold;">THEN</span>
            <span style="color: #808080; font-style: italic;">-- ignore, re-process the loop</span>
        <span style="color: #993333; font-weight: bold;">END</span>;
    <span style="color: #993333; font-weight: bold;">END</span> LOOP;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;
&nbsp;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> get_variable<span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">IN</span> p_var TEXT <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> TEXT <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">DECLARE</span>
    v_val TEXT;
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">execute</span> <span style="color: #ff0000;">'CREATE temp TABLE IF NOT exists sys_variables ( variable TEXT PRIMARY KEY, value TEXT );'</span>;
    <span style="color: #993333; font-weight: bold;">execute</span> <span style="color: #ff0000;">'SELECT value FROM sys_variables WHERE variable = $1'</span> <span style="color: #993333; font-weight: bold;">INTO</span> v_val <span style="color: #993333; font-weight: bold;">USING</span> p_var;
    <span style="color: #993333; font-weight: bold;">RETURN</span> v_val;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;</pre></td></tr></table></div>

<p>And then you can use it like:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> set_variable<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'xx'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'qq'</span><span style="color: #66cc66;">&#41;</span>;
 set_variable
<span style="color: #808080; font-style: italic;">--------------</span>
&nbsp;
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>and</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> get_variable<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'xx'</span><span style="color: #66cc66;">&#41;</span>;
NOTICE:  relation <span style="color: #ff0000;">&quot;sys_variables&quot;</span> already <span style="color: #993333; font-weight: bold;">exists</span><span style="color: #66cc66;">,</span> skipping
CONTEXT:  <span style="color: #993333; font-weight: bold;">SQL</span> statement <span style="color: #ff0000;">&quot;CREATE temp TABLE IF NOT exists sys_variables ( variable TEXT PRIMARY KEY, value TEXT );&quot;</span>
PL<span style="color: #66cc66;">/</span>pgSQL <span style="color: #993333; font-weight: bold;">function</span> get_variable<span style="color: #66cc66;">&#40;</span>text<span style="color: #66cc66;">&#41;</span> line <span style="color: #cc66cc;">5</span> at <span style="color: #993333; font-weight: bold;">EXECUTE</span> statement
 get_variable
<span style="color: #808080; font-style: italic;">--------------</span>
 qq
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>There is a problem with NOTICEs, though. It can be alleviated in couple of ways:</p>
<ul>
<li>move the &#8220;create table" to separate function, and call it just once, right after connecting to database</li>
<li>add some kind of logic that will check if the temp table exists, and run &#8216;create temp table' only if it doesn't</li>
<li>set client_min_messages = warning; to hide those notices</li>
</ul>
<h1>Per session and global variables in normal tables</h1>
<p>This is the most complicated, but, on the other hand &#8211; the most versatile approach.</p>
<p>For starters, we will need real table &#8211; let's assume it's sys_variables, again. And we'll need to create it. Suggested idea:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
</pre></td><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span> sys_variables <span style="color: #66cc66;">&#40;</span>
    variable TEXT<span style="color: #66cc66;">,</span>
    <span style="color: #993333; font-weight: bold;">value</span> TEXT<span style="color: #66cc66;">,</span>
    backend_pid INT4<span style="color: #66cc66;">,</span>
    backend_start timestamptz
<span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">UNIQUE</span> <span style="color: #993333; font-weight: bold;">INDEX</span> sys_variables_global_variable <span style="color: #993333; font-weight: bold;">on</span> sys_variables <span style="color: #66cc66;">&#40;</span>variable<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">WHERE</span> backend_pid <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NULL</span>;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">UNIQUE</span> <span style="color: #993333; font-weight: bold;">INDEX</span> sys_variables_session_variable <span style="color: #993333; font-weight: bold;">on</span> sys_variables <span style="color: #66cc66;">&#40;</span>variable<span style="color: #66cc66;">,</span> backend_pid<span style="color: #66cc66;">,</span> backend_start<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">WHERE</span> backend_pid <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span>;
&nbsp;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> get_variable<span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">IN</span> p_variable TEXT <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> TEXT <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">DECLARE</span>
    v_value TEXT;
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span> sv<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">value</span> <span style="color: #993333; font-weight: bold;">INTO</span> v_value <span style="color: #993333; font-weight: bold;">FROM</span> pg_stat_get_activity<span style="color: #66cc66;">&#40;</span>pg_backend_pid<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> x <span style="color: #993333; font-weight: bold;">join</span> sys_variables sv <span style="color: #993333; font-weight: bold;">on</span> x<span style="color: #66cc66;">.</span>pid <span style="color: #66cc66;">=</span> sv<span style="color: #66cc66;">.</span>backend_pid <span style="color: #993333; font-weight: bold;">AND</span> x<span style="color: #66cc66;">.</span>backend_start <span style="color: #66cc66;">=</span> sv<span style="color: #66cc66;">.</span>backend_start <span style="color: #993333; font-weight: bold;">WHERE</span> backend_pid <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">AND</span> variable <span style="color: #66cc66;">=</span> p_variable;
    <span style="color: #993333; font-weight: bold;">IF</span> FOUND <span style="color: #993333; font-weight: bold;">THEN</span>
        <span style="color: #993333; font-weight: bold;">RETURN</span> v_value;
    <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
    <span style="color: #993333; font-weight: bold;">SELECT</span> sv<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">value</span> <span style="color: #993333; font-weight: bold;">INTO</span> v_value <span style="color: #993333; font-weight: bold;">FROM</span> sys_variables sv <span style="color: #993333; font-weight: bold;">WHERE</span> backend_pid <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">AND</span> variable <span style="color: #66cc66;">=</span> p_variable;
    <span style="color: #993333; font-weight: bold;">IF</span> FOUND <span style="color: #993333; font-weight: bold;">THEN</span>
        <span style="color: #993333; font-weight: bold;">RETURN</span> v_value;
    <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
    <span style="color: #993333; font-weight: bold;">RETURN</span> <span style="color: #993333; font-weight: bold;">NULL</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql stable;
&nbsp;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> set_local_variable<span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">IN</span> p_variable TEXT<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">IN</span> p_value TEXT <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> void <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">DECLARE</span>
    v_data record;
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span> pid<span style="color: #66cc66;">,</span> backend_start <span style="color: #993333; font-weight: bold;">INTO</span> v_data <span style="color: #993333; font-weight: bold;">FROM</span> pg_stat_get_activity<span style="color: #66cc66;">&#40;</span>pg_backend_pid<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>;
    LOOP
        <span style="color: #993333; font-weight: bold;">UPDATE</span> sys_variables <span style="color: #993333; font-weight: bold;">SET</span> <span style="color: #993333; font-weight: bold;">value</span> <span style="color: #66cc66;">=</span> p_value <span style="color: #993333; font-weight: bold;">WHERE</span> variable <span style="color: #66cc66;">=</span> p_variable <span style="color: #993333; font-weight: bold;">AND</span> backend_pid <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">AND</span> backend_pid <span style="color: #66cc66;">=</span> v_data<span style="color: #66cc66;">.</span>pid <span style="color: #993333; font-weight: bold;">AND</span> backend_start <span style="color: #66cc66;">=</span> v_data<span style="color: #66cc66;">.</span>backend_start;
        <span style="color: #993333; font-weight: bold;">IF</span> FOUND <span style="color: #993333; font-weight: bold;">THEN</span>
            <span style="color: #993333; font-weight: bold;">RETURN</span>;
        <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
        <span style="color: #993333; font-weight: bold;">BEGIN</span>
            <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> sys_variables <span style="color: #66cc66;">&#40;</span> variable<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">value</span><span style="color: #66cc66;">,</span> backend_pid<span style="color: #66cc66;">,</span> backend_start <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> p_variable<span style="color: #66cc66;">,</span> p_value<span style="color: #66cc66;">,</span> v_data<span style="color: #66cc66;">.</span>pid<span style="color: #66cc66;">,</span> v_data<span style="color: #66cc66;">.</span>backend_start <span style="color: #66cc66;">&#41;</span>;
            <span style="color: #993333; font-weight: bold;">RETURN</span>;
        EXCEPTION <span style="color: #993333; font-weight: bold;">WHEN</span> unique_violation <span style="color: #993333; font-weight: bold;">THEN</span>
            <span style="color: #808080; font-style: italic;">-- ignore, re-process the loop</span>
        <span style="color: #993333; font-weight: bold;">END</span>;
    <span style="color: #993333; font-weight: bold;">END</span> LOOP;
    <span style="color: #993333; font-weight: bold;">RETURN</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;
&nbsp;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> set_global_variable<span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">IN</span> p_variable TEXT<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">IN</span> p_value TEXT <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> void <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">DECLARE</span>
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    LOOP
        <span style="color: #993333; font-weight: bold;">UPDATE</span> sys_variables <span style="color: #993333; font-weight: bold;">SET</span> <span style="color: #993333; font-weight: bold;">value</span> <span style="color: #66cc66;">=</span> p_value <span style="color: #993333; font-weight: bold;">WHERE</span> variable <span style="color: #66cc66;">=</span> p_variable <span style="color: #993333; font-weight: bold;">AND</span> backend_pid <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NULL</span>;
        <span style="color: #993333; font-weight: bold;">IF</span> FOUND <span style="color: #993333; font-weight: bold;">THEN</span>
            <span style="color: #993333; font-weight: bold;">RETURN</span>;
        <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
        <span style="color: #993333; font-weight: bold;">BEGIN</span>
            <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> sys_variables <span style="color: #66cc66;">&#40;</span> variable<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">value</span><span style="color: #66cc66;">,</span> backend_pid<span style="color: #66cc66;">,</span> backend_start <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> p_variable<span style="color: #66cc66;">,</span> p_value<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">NULL</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #66cc66;">&#41;</span>;
            <span style="color: #993333; font-weight: bold;">RETURN</span>;
        EXCEPTION <span style="color: #993333; font-weight: bold;">WHEN</span> unique_violation <span style="color: #993333; font-weight: bold;">THEN</span>
            <span style="color: #808080; font-style: italic;">-- ignore, re-process the loop</span>
        <span style="color: #993333; font-weight: bold;">END</span>;
    <span style="color: #993333; font-weight: bold;">END</span> LOOP;
    <span style="color: #993333; font-weight: bold;">RETURN</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;
&nbsp;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> sys_variables_cleanup<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> void <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">DECLARE</span>
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">DELETE</span> <span style="color: #993333; font-weight: bold;">FROM</span> sys_variables <span style="color: #993333; font-weight: bold;">WHERE</span> backend_pid <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">AND</span> <span style="color: #66cc66;">&#40;</span>backend_pid<span style="color: #66cc66;">,</span> backend_start<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">in</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">SELECT</span> a<span style="color: #66cc66;">.</span>pid<span style="color: #66cc66;">,</span> a<span style="color: #66cc66;">.</span>backend_start <span style="color: #993333; font-weight: bold;">FROM</span> pg_stat_activity <span style="color: #993333; font-weight: bold;">as</span> a <span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">RETURN</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;</pre></td></tr></table></div>

<p>Is it scary? Don't worry, it's actually pretty simple thing. Let's see it step by step.</p>
<p>First part &#8211; lines 1-8 create the storage table, and unique indexes. We need two unique indexes &#8211; one for global variables (not assigned to any session, thus having backend_pid NULL, and session variables, assigned to some backend. Theoretically we'd need only backend_pid, but the problem is that  in system with lots of connections the pid could be reused rather quickly. So I add also backend_start time, which has microsecond precision, and together with pid give me truly unique session identifier.</p>
<p>Next, lines 10-24, the getter. Inside, it first (line 14) checks if, for current session, there is session variable of given name. Data for session identification are taken from pg_stat_get_activity() function &#8211; the same that is used by commonly used pg_stat_activity view.</p>
<p>If such variable exists &#8211; the function returns it, and ends. If it doesn't &#8211; it then checks for global variable with the same name. Simple.</p>
<p>Functions set_local_variable (lines 26-45) and set_global_variable (lines 47-64) do basically the same &#8211; insert or update of a row, with proper values in variable, backend_pid and backend_start columns. Nothing worth talking about in here.</p>
<p>Last function is cleanup. The problem is that we can't delete session variables once the session ends &#8211; there are no &#8220;on disconnect" triggers. So, after some use of such system, we would have quite a lot of old session variables. Solution is to call this function ( sys_variables_cleanup &#8211; lines 66-72 ) from crontab. This removes old, obsolete rows.</p>
<p>Of course, this can get further improvement &#8211; for example, you might want to consider usage of <a href="http://www.depesz.com/2011/01/03/waiting-for-9-1-unlogged-tables/">unlogged</a> tables. Or, perhaps, move session variables to temp tables. Or add a function that would remove session variable, so you could get value of global one. But this is not the really critical stuff.</p>
<h1>Summary</h1>
<p>So, the final question is: which one is the best? And if I can't answer it, which one do I use?</p>
<p>Well, there is no &#8220;best" solution. All solutions have benefits and drawbacks. And as for what I use &#8211; I don't. Really. When I need for writing quick batch scripts, I use psql variables, but that happens rarely. And if I need something in Pg itself, I simple end up writing a function anyway, and use variables in functions (or in <a href="http://www.depesz.com/2009/11/01/waiting-for-8-5-do/">DO</a> blocks).</p>
<p>All things said &#8211; this blogpost does not describe all possible ways. For example, if you're writing a lot of functions in PL/Perl (or other PL/* languages, but not PL/PgSQL) &#8211; there is some kind of shared (between queries, within session) memory. In PL/Perl it's <a href="http://www.postgresql.org/docs/9.1/static/plperl-global.html">%_SHARED</a>, in PL/Python it's <a href="http://www.postgresql.org/docs/9.1/static/plpython-sharing.html">SD</a>, in other languages it's probably named differently.</p>
<p><!-- vim: set spell spelllang=en_US ft=xhtml: --></p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">One comment <a href='http://www.depesz.com/2013/02/25/variables-in-sql-what-how-when/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-37709" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-37709" title="">#</a></span> Valentine Gogichashvili</div>  <div class="date">Mar 6, 2013</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/08539ac65983449f00c40e3f66070030?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hi, if you have a slave machine with a big shared_buffers value, then creating and dropping temporary table leads to slowdown of WAL replay. So be careful with this approach (it leads to full sharded_buffers scan on slave every time the temp table is dropped). So if you use such temp tables very very often, that can influence your replication very negatively.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="2608" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="3feb6f8833" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="18"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">325 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">305 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">241 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">185 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">148 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">135 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">123 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">121 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">120 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">94 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

