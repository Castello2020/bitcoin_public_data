http://www.depesz.com/2008/10/04/deserialization-of-hstore-data-structure-in-perl/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 21:29:18 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=1285>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Deserialization of hstore data structure in Perl</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Deserialization of hstore data structure in Perl Comments Feed" href="http://www.depesz.com/2008/10/04/deserialization-of-hstore-data-structure-in-perl/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2008/10/04/deserialization-of-hstore-data-structure-in-perl/' />
<link rel='shortlink' href='http://www.depesz.com/?p=1285' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-1285">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2008/10/04/deserialization-of-hstore-data-structure-in-perl/" rel="bookmark" title="Permanent Link to Deserialization of hstore data structure in Perl">Deserialization of hstore data structure in Perl</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>October 4th, 2008 by depesz | Tags: <a href="http://www.depesz.com/tag/eval/" rel="tag">eval</a>, <a href="http://www.depesz.com/tag/hstore/" rel="tag">hstore</a>, <a href="http://www.depesz.com/tag/perl/" rel="tag">perl</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a> |  <a href="http://www.depesz.com/2008/10/04/deserialization-of-hstore-data-structure-in-perl/#comments" title="Comment on Deserialization of hstore data structure in Perl">2 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>You might be familiar with hstore datatype in PostgreSQL &#8211; if you're not &#8211; <a href="http://www.postgresql.org/docs/current/interactive/hstore.html">check it</a> out, as it is really cool.</p>
<p>Basically it's hash in database, which you can search in.</p>
<p><span id="more-1285"></span></p>
<p>This is how it looks:</p>
<p><code># \d x<br />
      Table "public.x"<br />
 Column |  Type  | Modifiers<br />
--------+--------+-----------<br />
 i      | hstore |<br />
&nbsp;<br />
# select * from x;<br />
                             i<br />
-----------------------------------------------------------<br />
 "lat"=&gt;"52.195593", "lng"=&gt;"20.837449", "name"=&gt;"Piastów"<br />
(1 row)</code></p>
<p>You can of course get individual parts out of it:</p>
<p><code># select i-&gt;'lat' from x;<br />
 ?column?<br />
-----------<br />
 52.195593<br />
(1 row)</code></p>
<p>The thing is &#8211; when I load it to perl, I get single field with stringified hstore as scalar variable:</p>
<p><code>=&gt; perl -MDBI -MData::Dumper -e 'print Dumper(DBI-&gt;connect("dbi:Pg:dbname=depesz")-&gt;selectall_arrayref("select i from x"))'<br />
$VAR1 = [<br />
          [<br />
            '"lat"=&gt;"52.195593", "lng"=&gt;"20.837449", "name"=&gt;"Piastów"'<br />
          ]<br />
        ];</code></p>
<p>Since it's hash, it should be possible to convert this stringified value to simple hash. Basically &#8211; you can of course parse it character-by-character, but there should be an easier way. Right? Right.</p>
<p><code>=&gt; perl -MData::Dumper -e 'my $str = q{"lat"=&gt;"52.195593", "lng"=&gt;"20.837449", "name"=&gt;"Piastów"}; my $q = eval "{$str}"; print Dumper($q)'<br />
$VAR1 = {<br />
          'lat' =&gt; '52.195593',<br />
          'name' =&gt; 'Piastów',<br />
          'lng' =&gt; '20.837449'<br />
        };</code></p>
<p>That's great. Isn't it? Well. Yes. The thing is &#8211; what happens if your hstore contains &#8220;strange" vaues &#8211; like emails:</p>
<p><code># select i || tconvert('email', 'depesz@depesz.com') from x;<br />
                                        ?column?<br />
-----------------------------------------------------------------------------------------<br />
 "lat"=&gt;"52.195593", "lng"=&gt;"20.837449", "name"=&gt;"Piastów", "email"=&gt;"depesz@depesz.com"<br />
(1 row)</code></p>
<p>Let's test the perl eval code:</p>
<p><code>=&gt; perl -MData::Dumper -e 'my $str = q{"lat"=&gt;"52.195593", "lng"=&gt;"20.837449", "name"=&gt;"Piastów", "email"=&gt;"depesz@depesz.com"}; my $q = eval "{$str}"; print Dumper($q)'<br />
$VAR1 = {<br />
          'email' =&gt; 'depesz.com',<br />
          'lat' =&gt; '52.195593',<br />
          'name' =&gt; 'Piastów',<br />
          'lng' =&gt; '20.837449'<br />
        };</code></p>
<p>What? it removed my username? Well, actually it removed &#8220;@depesz" &#8211; because it tried to eval it, and it doesn't exist. The thing is, that when you turn on strict (which you should always do) &#8211; it generates other result:</p>
<p><code>=&gt; perl -MData::Dumper -e 'use strict; my $str = q{"lat"=&gt;"52.195593", "lng"=&gt;"20.837449", "name"=&gt;"Piastów", "email"=&gt;"depesz@depesz.com"}; my $q = eval "{$str}"; print Dumper($q)'<br />
$VAR1 = undef;</code></p>
<p>Whoa. Why did that happen? Let's add &#8220;-w":</p>
<p><code>=&gt; perl -MData::Dumper -we 'use strict; my $str = q{"lat"=&gt;"52.195593", "lng"=&gt;"20.837449", "name"=&gt;"Piastów", "email"=&gt;"depesz@depesz.com"}; my $q = eval "{$str}"; print Dumper($q)'<br />
Possible unintended interpolation of @depesz in string at (eval 1) line 1.<br />
$VAR1 = undef;</code></p>
<p>The reason why I write about it? To remind me. I just recenly made this mistake, and suffered for very <i>interesting</i> 2 days of debuging just to find out that I deserialized hstore in wrong way.</p>
<p>What is correct way then?</p>
<p>Well, Theodor Sigaev wrote in his <a href="http://www.sigaev.ru/gin/hstore.pdf">presentation</a> (slide 18) to use this code:</p>
<p><code>&lt;code&gt;$settings =~ s/([$@%])/\\$1/g;<br />
my $hsettings = eval( "{$settings}" );&lt;/code&gt;</code></p>
<p>Which basically works, but You have to prepend sigils ($, @ and %) with \:</p>
<p><code>&lt;code&gt;$settings =~ s/([\$\@\%])/\\$1/g;<br />
my $hsettings = eval( "{$settings}" );&lt;/code&gt;</code></p>
<p>After this change deserializtion of hstore works perfectly:</p>
<p><code>=&gt; perl -MData::Dumper -we 'use strict; my $str = q{"lat"=&gt;"52.195593", "lng"=&gt;"20.837449", "name"=&gt;"Piastów", "email"=&gt;"depesz@depesz.com"}; $str =~ s/([\$\@\%])/\\$1/g; my $q = eval "{$str}"; print Dumper($q)'<br />
$VAR1 = {<br />
          'email' =&gt; 'depesz@depesz.com',<br />
          'lat' =&gt; '52.195593',<br />
          'name' =&gt; 'Piastów',<br />
          'lng' =&gt; '20.837449'<br />
        };</code></p>
<p>Of course &#8211; I would catch it faster if I did check eval errors. Which is another way of saying &#8211; code defensively &#8211; even if you're <b>sure</b> that nothing can go wrong.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">2 comments <a href='http://www.depesz.com/2008/10/04/deserialization-of-hstore-data-structure-in-perl/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-28123" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-28123" title="">#</a></span> Dan</div>  <div class="date">Sep 20, 2009</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/49541ef12b1f1ec82cd53764f11ed18a?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hey,</p>
<p>I noticed you have a few blog entries related to the hstore data type in PostgreSQL. Are you using this data type in a production environment? Have you run into any gotchas with this data type?</p>
<p>Thanks,<br />
Dan</p>
	</li>
		
		
			
<li class="mycomment" id="comment-28125" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-28125" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Sep 21, 2009</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Dan:<br />
Yes, I use it. As for gotchas &#8211; not really. I just saw one case when the type was abused &#8211; values from hstore were used for searching and ordering in quite busy website database, and this lead to performance issues. But as long as you&#8217;re using it sensibly, everything works fine.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="1285" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="6e06bb50ba" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="49"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">606 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">325 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">287 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">226 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">171 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">151 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">139 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">139 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">134 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">94 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

