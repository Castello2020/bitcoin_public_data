http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/
HTTP/1.1 200 OK
Server: nginx
Date: Tue, 22 Jul 2014 09:15:41 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2550>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; How I Learned to Stop Worrying and Love the Triggers</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; How I Learned to Stop Worrying and Love the Triggers Comments Feed" href="http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2550' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2550">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/" rel="bookmark" title="Permanent Link to How I Learned to Stop Worrying and Love the Triggers">How I Learned to Stop Worrying and Love the Triggers</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>November 14th, 2012 by depesz | Tags: <a href="http://www.depesz.com/tag/count/" rel="tag">count</a>, <a href="http://www.depesz.com/tag/normalize/" rel="tag">normalize</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/primer/" rel="tag">primer</a>, <a href="http://www.depesz.com/tag/sanitize/" rel="tag">sanitize</a>, <a href="http://www.depesz.com/tag/triggers/" rel="tag">triggers</a> |  <a href="http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/#comments" title="Comment on How I Learned to Stop Worrying and Love the Triggers">13 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>Some people are afraid of triggers.</p>
<p>Reasons for this are not really understandable for me, but I guess it stems from the fact that these are usually application developers, and not database admins. Or they encountered some kind of problem with triggers, and now they tend to think that triggers are inherently evil.</p>
<p>But they are not.</p>
<p>As virtually anything, triggers have some benefits, and some drawbacks. With a bit of thinking you can use them to do really cool things. But first you have to understand what exactly trigger is, how it works, and when to use which kind.</p>
<p><span id="more-2550"></span></p>
<p>A trigger is a function that gets automatically called in case of database event. What kind of event? Currently these are:</p>
<ul>
<li>INSERT INTO</li>
<li>UPDATE</li>
<li>DELETE FROM</li>
<li>TRUNCATE (this one can be used for triggers only <a href="http://www.depesz.com/2008/03/28/waiting-for-84/">since PostgreSQL 8.4</a>)</li>
</ul>
<p>In upcoming 9.3 release there <a href="http://www.depesz.com/2012/07/29/waiting-for-9-3-event-triggers/">will be more types of triggers</a>, but their usage is a bit more complicated, so I'll not cover them for now.</p>
<p>These triggers can be defined on every user table (you can't create triggers on system tables), and (<a href="http://www.depesz.com/2010/10/16/waiting-for-9-1-triggers-on-views/">since 9.1</a>) also on views.</p>
<p>For now, I will focus on basic triggers on tables, as view triggers are a bit different. I will also skip <a href="http://www.depesz.com/2009/12/23/waiting-for-8-5-conditional-triggers/">conditional</a> triggers, and triggers set on <a href="http://www.depesz.com/2009/11/18/waiting-for-8-5-triggers-on-columns/">subset of fields</a>.</p>
<p>Psqls &#8220;\h CREATE TRIGGER" shows:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">Command:     <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span>
Description: define a <span style="color: #993333; font-weight: bold;">new</span> <span style="color: #993333; font-weight: bold;">trigger</span>
Syntax:
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #66cc66;">&#91;</span> <span style="color: #993333; font-weight: bold;">CONSTRAINT</span> <span style="color: #66cc66;">&#93;</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> name <span style="color: #66cc66;">&#123;</span> <span style="color: #993333; font-weight: bold;">BEFORE</span> <span style="color: #66cc66;">|</span> AFTER <span style="color: #66cc66;">|</span> INSTEAD <span style="color: #993333; font-weight: bold;">OF</span> <span style="color: #66cc66;">&#125;</span> <span style="color: #66cc66;">&#123;</span> event <span style="color: #66cc66;">&#91;</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #66cc66;">...</span> <span style="color: #66cc66;">&#93;</span> <span style="color: #66cc66;">&#125;</span>
    <span style="color: #993333; font-weight: bold;">ON</span> <span style="color: #993333; font-weight: bold;">table_name</span>
    <span style="color: #66cc66;">&#91;</span> <span style="color: #993333; font-weight: bold;">FROM</span> referenced_table_name <span style="color: #66cc66;">&#93;</span>
    <span style="color: #66cc66;">&#123;</span> <span style="color: #993333; font-weight: bold;">NOT</span> DEFERRABLE <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span> DEFERRABLE <span style="color: #66cc66;">&#93;</span> <span style="color: #66cc66;">&#123;</span> INITIALLY IMMEDIATE <span style="color: #66cc66;">|</span> INITIALLY DEFERRED <span style="color: #66cc66;">&#125;</span> <span style="color: #66cc66;">&#125;</span>
    <span style="color: #66cc66;">&#91;</span> <span style="color: #993333; font-weight: bold;">FOR</span> <span style="color: #66cc66;">&#91;</span> EACH <span style="color: #66cc66;">&#93;</span> <span style="color: #66cc66;">&#123;</span> <span style="color: #993333; font-weight: bold;">ROW</span> <span style="color: #66cc66;">|</span> STATEMENT <span style="color: #66cc66;">&#125;</span> <span style="color: #66cc66;">&#93;</span>
    <span style="color: #66cc66;">&#91;</span> <span style="color: #993333; font-weight: bold;">WHEN</span> <span style="color: #66cc66;">&#40;</span> condition <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#93;</span>
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> function_name <span style="color: #66cc66;">&#40;</span> arguments <span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">where</span> event can be one <span style="color: #993333; font-weight: bold;">of</span>:
&nbsp;
    <span style="color: #993333; font-weight: bold;">INSERT</span>
    <span style="color: #993333; font-weight: bold;">UPDATE</span> <span style="color: #66cc66;">&#91;</span> <span style="color: #993333; font-weight: bold;">OF</span> column_name <span style="color: #66cc66;">&#91;</span><span style="color: #66cc66;">,</span> <span style="color: #66cc66;">...</span> <span style="color: #66cc66;">&#93;</span> <span style="color: #66cc66;">&#93;</span>
    <span style="color: #993333; font-weight: bold;">DELETE</span>
    <span style="color: #993333; font-weight: bold;">TRUNCATE</span></pre></td></tr></table></div>

<p>That's quite a lot. But don't worry. There are, for now, just couple of types of triggers:</p>
<ul>
<li><em>BEFORE</em> or <em>AFTER</em></li>
<li>FOR EACH <em> ROW</em> or <em>STATEMENT</em></li>
</ul>
<p>( side note: triggers on TRUNCATE cannot be made &#8220;FOR EACH ROW" &#8211; they can be only per STATEMENT ).</p>
<p>I'll start, conveniently from the end. What's the difference in &#8220;for each row" vs. &#8220;for each statement"?</p>
<p>That's pretty simple, and straight forward.</p>
<p>When you have multi-row operation, for example: delete from table; (without where), &#8220;for each row" trigger, will be called when deleting every single row. While &#8220;for each statement" will be ran only once.</p>
<p>That's not the only difference though.</p>
<p>When running &#8220;FOR EACH ROW" trigger, you have (in function) special variables which contain exact content of row that is being inserted/updated/deleted. So in the function you can do something with it. On the other hand &#8211; since FOR EACH STATEMENT triggers can work on millions of rows at once &#8211; they do not get information what rows were modified.</p>
<p>You might think that it is stupid &#8211; after all &#8211; what's the point of trigger if you don't know what got modified. But actually it has some serious uses, and the limitation that &#8220;statement trigger doesn't know what was modified" can be worked around. Truth must be told though, that in real life, I see much more row-level triggers than statement based ones.</p>
<p>The other important classification of trigger &#8211; AFTER/BEFORE.</p>
<p>Let's consider it in case of UPDATE. You're running an update. PostgreSQL has to check that all values you provided are sensible, match all constraints (not null, checks, unique), then it actually updates the row (well, technically it doesn't because PostgreSQL has mvcc, but for now let's pretend that it does).</p>
<p>BEFORE trigger is called just before the internal row representation is updated. AFTER trigger is called afterwards.</p>
<p>What does it tell us?</p>
<p>For starters &#8211; if you want to modify new values inserted/updated to the table &#8211; the correct place to do it is in BEFORE trigger.</p>
<p>I have seen code, where people were adding AFTER INSERT trigger, which issued UPDATE of newly inserted record. That just doesn't make sense. It bloats the table, and is slower. In BEFORE trigger, you can modify the row data before it will be stored in table.</p>
<p>To have a place for experiments, I'll make a simple users table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> users <span style="color: #66cc66;">&#40;</span>
    id serial <span style="color: #993333; font-weight: bold;">primary</span> <span style="color: #993333; font-weight: bold;">key</span><span style="color: #66cc66;">,</span>
    username text <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">unique</span><span style="color: #66cc66;">,</span>
    fullname text<span style="color: #66cc66;">,</span>
    created_on timestamptz <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">default</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
    last_modified timestamptz
<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>And now we can experiment on it. First &#8211; let's assume that you'd want fullnames to be normalized to lowercase, with uppercased first letter of every word (just in case: this is bad idea, and don't do it in real life code).</p>
<p>For this, the simple solution is to create a trigger that will modify fullname of all records &#8211; on INSERT, and on UPDATE.</p>
<p>Before I can write it, we need couple of information:</p>
<ul>
<li>trigger calls a function (i.e. logic is not in <em>trigger</em>, but it's in <em>function</em> (which can be shared between multiple triggers, on multiple tables)</li>
<li>such function should be defined not to have any arguments and return pseudotype <em>TRIGGER</em></li>
<li>in case of <em>FOR EACH ROW</em> triggers, whole rows are available as either NEW or OLD record variables (in case of insert &#8211; NEW, in case of DELETE &#8211; OLD, in case of UPDATE &#8211; both, OLD one is state of row before update, NEW is state of row after update)</li>
<li>there are some more special variables, which are listed in <a href="http://www.postgresql.org/docs/current/interactive/plpgsql-trigger.html">fine manual</a></li>
</ul>
<p>If you're reading carefully you might be confused that I wrote that such function doesn't have arguments, but in psql \h output above it shows:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> function_name <span style="color: #66cc66;">&#40;</span> arguments <span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>which suggests that arguments are possible.</p>
<p>That's right &#8211; you can have arguments to trigger, but they are not passed as arguments to function. Instead they are passed using special variable TG_ARGV, and its compantion TG_NARGS.</p>
<p>Knowing all of this we can write our fullname-normalizing function:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> normalize_fullname<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> <span style="color: #993333; font-weight: bold;">trigger</span> <span style="color: #993333; font-weight: bold;">AS</span> $$
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>fullname :<span style="color: #66cc66;">=</span> initcap<span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>fullname <span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">RETURN</span> <span style="color: #993333; font-weight: bold;">NEW</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;</pre></td></tr></table></div>

<p>In case you're not familiar with functions in PostgreSQL:</p>
<ul>
<li>line 1 &#8211; begins &#8220;CREATE FUNCTION" statement, including information that the function will be named <em>normalize_fullname</em>, will not have any arguments &#8220;()", and it returns value of pseudotype trigger.</li>
<li>line 2 &#8211; every function in plpgsql (check line 6) has to have BEGIN -&gt; END; block, which is its body</li>
<li>line 3 &#8211; NEW is record which contains data for new row. NEW.fullname is value of fullname column in this record. initcap function takes string, and returns modified version, so it has to be assigned to NEW.fullname again to make the change actually happen</li>
<li>line 4 &#8211; function has to return something, and the returned value is used to insert/update the data.</li>
<li>line 5 &#8211; end of function body</li>
<li>line 6 &#8211; declaration that the function is written in &#8220;plpgsql" language (one of many possible pl/* languages)</li>
</ul>
<p>With the function in place, I can actually create a trigger:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
</pre></td><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> normalize_fullname_trg
    <span style="color: #993333; font-weight: bold;">BEFORE</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">UPDATE</span>
    <span style="color: #993333; font-weight: bold;">ON</span> users
    <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span>
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> normalize_fullname<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>and explanation:</p>
<ul>
<li>line 1 &#8211; beginning of CREATE TRIGGER statement. Each trigger has its own name, which can, but doesn't have to be, like executed function</li>
<li>line 2 &#8211; marks the trigger as BEFORE, and sets it to be ran on INSERT and UPDATE events (we don't care about delete when normalizing data, and TRUNCATE is different anyway)</li>
<li>line 3 &#8211; sets the table the trigger is created on</li>
<li>line 4 &#8211; marks the trigger as per ROW, and not per STATEMENT</li>
<li>line 5 &#8211; names the function that has to be called whenever something happens</li>
</ul>
<p>Does that work? Let's see:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> users <span style="color: #66cc66;">&#40;</span> username<span style="color: #66cc66;">,</span> fullname <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">values</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'depesz'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'hubert lubaczewski'</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #cc66cc;">0</span> <span style="color: #cc66cc;">1</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> users;
 id <span style="color: #66cc66;">|</span> username <span style="color: #66cc66;">|</span>      fullname      <span style="color: #66cc66;">|</span>          created_on           <span style="color: #66cc66;">|</span> last_modified
<span style="color: #808080; font-style: italic;">----+----------+--------------------+-------------------------------+---------------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> depesz   <span style="color: #66cc66;">|</span> Hubert Lubaczewski <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">14</span>:<span style="color: #cc66cc;">58</span>:<span style="color: #cc66cc;">47.500289</span><span style="color: #66cc66;">+</span>01 <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>and what about update?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">update</span> users <span style="color: #993333; font-weight: bold;">set</span> fullname <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'ABSOLUTELY IRRELEVANT NAME'</span>;
<span style="color: #993333; font-weight: bold;">UPDATE</span> <span style="color: #cc66cc;">1</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> users;
 id <span style="color: #66cc66;">|</span> username <span style="color: #66cc66;">|</span>          fullname          <span style="color: #66cc66;">|</span>          created_on           <span style="color: #66cc66;">|</span> last_modified
<span style="color: #808080; font-style: italic;">----+----------+----------------------------+-------------------------------+---------------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> depesz   <span style="color: #66cc66;">|</span> Absolutely Irrelevant Name <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">14</span>:<span style="color: #cc66cc;">58</span>:<span style="color: #cc66cc;">47.500289</span><span style="color: #66cc66;">+</span>01 <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Looks like working.</p>
<p>This looks easy, I hope. Now for a bit more advanced topics.</p>
<p>I mentioned that function returns NEW because it's the row that has to be set in table, but that's not always the case. You can also return NULL value, which will do something really sneaky &#8211; it will <em>not</em> do the insert/update/delete, but it will also not raise any exception/error. It will just silently ignore your command.</p>
<p>Let's see simple example:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> we_dont_like_them<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">returns</span> <span style="color: #993333; font-weight: bold;">trigger</span> <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">IF</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>fullname ilike <span style="color: #ff0000;">'%mysql%'</span> <span style="color: #993333; font-weight: bold;">THEN</span>
        <span style="color: #993333; font-weight: bold;">RETURN</span> <span style="color: #993333; font-weight: bold;">NULL</span>;
    ELSIF <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>username ilike <span style="color: #ff0000;">'%mysql%'</span> <span style="color: #993333; font-weight: bold;">THEN</span>
        <span style="color: #993333; font-weight: bold;">RETURN</span> <span style="color: #993333; font-weight: bold;">NULL</span>;
    <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
    <span style="color: #993333; font-weight: bold;">RETURN</span> <span style="color: #993333; font-weight: bold;">NEW</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> we_dont_like_them_trg
    <span style="color: #993333; font-weight: bold;">BEFORE</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">UPDATE</span>
    <span style="color: #993333; font-weight: bold;">ON</span> users
    <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span>
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> we_dont_like_them<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> users <span style="color: #66cc66;">&#40;</span>username<span style="color: #66cc66;">,</span> fullname<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">values</span>
    <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'test1'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'mysql'</span> <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
    <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'test2'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'MYSQL'</span> <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
    <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'mysql1'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'test3'</span> <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
    <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'MySQL2'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'test4'</span> <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
    <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'mssql'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'oops'</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> users;
 id <span style="color: #66cc66;">|</span> username <span style="color: #66cc66;">|</span>          fullname          <span style="color: #66cc66;">|</span>          created_on           <span style="color: #66cc66;">|</span> last_modified
<span style="color: #808080; font-style: italic;">----+----------+----------------------------+-------------------------------+---------------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> depesz   <span style="color: #66cc66;">|</span> Absolutely Irrelevant Name <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">14</span>:<span style="color: #cc66cc;">58</span>:<span style="color: #cc66cc;">47.500289</span><span style="color: #66cc66;">+</span>01 <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
  <span style="color: #cc66cc;">6</span> <span style="color: #66cc66;">|</span> mssql    <span style="color: #66cc66;">|</span> Oops                       <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">15</span>:<span style="color: #cc66cc;">19</span>:<span style="color: #cc66cc;">03.42297</span><span style="color: #66cc66;">+</span>01  <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">2</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>As you can see all users which mention MySQL got silently skipped.</p>
<p>You can also use triggers to do some kind of more complex validation. And if given user fails &#8211; use RAISE EXCEPTION to break the transaction. But actually &#8211; these kind of things should be <em>rather</em> done in CHECK constraints, and not triggers.</p>
<p>All of what I showed above are BEFORE-PER-ROW trigger. So what good are other triggers for?</p>
<p>AFTER triggers are meant to be place where you put logic that influences other tables when the modifiation of your original table succeds.</p>
<p>For example, let's assume we have also privileges table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span> privileges <span style="color: #66cc66;">&#40;</span>
    user_id int4 <span style="color: #993333; font-weight: bold;">primary</span> <span style="color: #993333; font-weight: bold;">key</span> <span style="color: #993333; font-weight: bold;">references</span> users <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
    privileges text<span style="color: #66cc66;">&#91;</span><span style="color: #66cc66;">&#93;</span> <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span>
<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>And, for whatever reason, we want a row to exist for every user in privileges table, with basic &#8216;none' privilege.</p>
<p>To do it, I can:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> make_default_privileges<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">returns</span> <span style="color: #993333; font-weight: bold;">trigger</span> <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">begin</span>
    <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> privileges <span style="color: #66cc66;">&#40;</span>user_id<span style="color: #66cc66;">,</span> privileges<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">values</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>id<span style="color: #66cc66;">,</span> ARRAY<span style="color: #66cc66;">&#91;</span> <span style="color: #ff0000;">'none'</span> <span style="color: #66cc66;">&#93;</span>::text<span style="color: #66cc66;">&#91;</span><span style="color: #66cc66;">&#93;</span> <span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">return</span> <span style="color: #993333; font-weight: bold;">NEW</span>;
<span style="color: #993333; font-weight: bold;">end</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> make_default_privileges_trg
    AFTER <span style="color: #993333; font-weight: bold;">INSERT</span>
    <span style="color: #993333; font-weight: bold;">ON</span> users
    <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span>
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> make_default_privileges<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> users <span style="color: #66cc66;">&#40;</span>username<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">values</span> <span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'guest'</span><span style="color: #66cc66;">&#41;</span> returning <span style="color: #66cc66;">*</span>;
 id <span style="color: #66cc66;">|</span> username <span style="color: #66cc66;">|</span> fullname <span style="color: #66cc66;">|</span>          created_on           <span style="color: #66cc66;">|</span> last_modified
<span style="color: #808080; font-style: italic;">----+----------+----------+-------------------------------+---------------</span>
  <span style="color: #cc66cc;">7</span> <span style="color: #66cc66;">|</span> guest    <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>   <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">15</span>:<span style="color: #cc66cc;">26</span>:<span style="color: #cc66cc;">45.790506</span><span style="color: #66cc66;">+</span>01 <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> privileges;
 user_id <span style="color: #66cc66;">|</span> privileges
<span style="color: #808080; font-style: italic;">---------+------------</span>
       <span style="color: #cc66cc;">7</span> <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#123;</span><span style="color: #993333; font-weight: bold;">none</span><span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Of course you might say: &#8220;OK, but I can do it in BEFORE trigger too, right?".</p>
<p>Well, right. You can. At least kind-of.  NEW.id is already assigned. But you shouldn't.</p>
<p>There are two reasons. First one &#8211; foreign key. If you'll insert to privileges from BEFORE INSERT trigger, foreign key on privileges will complain because from its point of view, the row in users does not exist yet.</p>
<p>But even without foreign key &#8211; you can have many triggers on a row. Some trigger might reject the row, silently or with exception. In such case &#8211; we shouldn't insert to another table &#8211; not because the data will stay there &#8211; as it will not, but because it's unnecessary work.</p>
<p>Hence &#8211; if you have to issue insert/update/delete from trigger &#8211; it should <em>almost always</em> be AFTER trigger.</p>
<p>As you perhaps noticed, I did &#8216;return NEW' in the function. If you are inquisitive, you might wonder: if I'll return NULL, will it also ignore the row? No. In AFTER trigger, returned value doesn't matter at all. I usually do return NEW, but I could do return NULL as well &#8211; the row is already stored in table, so I can't &#8220;ignore" it afterwards.</p>
<p>This brings me to one of the most commonly asked questions about triggers (at least commonly to me): if the insert will fail, will the effects of trigger stay in db.</p>
<p>Long story short &#8211; no. Even if you don't use transactions explicitly, each query sent to PostgreSQL is in implicit, single-query, transaction. And command and its triggers are always within the same transaction. So if trigger will raise exception &#8211; it will also remove the changes that command applied. If one of the triggers will raise exception &#8211; effects of all triggers, ran by this command, will be rolled back.</p>
<p>This is great, because it gives you guarantee that whatever you do in trigger, will always be applied only with the data change from application.</p>
<p>When you have application-level triggers (in ORM, or whatever) &#8211; you can, by mistake, run two related modifications in separate transaction, and accidentaly have one rolled back, but the other not &#8211; thus ending up with &#8220;mixed" state of database.</p>
<p>When the logic is in trigger &#8211; all changes, are treated as atomic &#8211; and you either have all of them, or none.</p>
<p>Back to explaining.</p>
<p>One of the most common tasks for triggers (at least in my environment) is forbiding changes of particular data, or forcing change of given columns.</p>
<p>For example &#8211; let's look at the users table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">                                     <span style="color: #993333; font-weight: bold;">Table</span> <span style="color: #ff0000;">&quot;public.users&quot;</span>
    <span style="color: #993333; font-weight: bold;">Column</span>     <span style="color: #66cc66;">|</span>           <span style="color: #993333; font-weight: bold;">Type</span>           <span style="color: #66cc66;">|</span>                     Modifiers
<span style="color: #808080; font-style: italic;">---------------+--------------------------+----------------------------------------------------</span>
 id            <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">integer</span>                  <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">default</span> <span style="color: #993333; font-weight: bold;">nextval</span><span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'users_id_seq'</span>::regclass<span style="color: #66cc66;">&#41;</span>
 username      <span style="color: #66cc66;">|</span> text                     <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span>
 fullname      <span style="color: #66cc66;">|</span> text                     <span style="color: #66cc66;">|</span>
 created_on    <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">timestamp</span> <span style="color: #993333; font-weight: bold;">with</span> <span style="color: #993333; font-weight: bold;">time</span> zone <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">default</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
 last_modified <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">timestamp</span> <span style="color: #993333; font-weight: bold;">with</span> <span style="color: #993333; font-weight: bold;">time</span> zone <span style="color: #66cc66;">|</span>
Indexes:
    <span style="color: #ff0000;">&quot;users_pkey&quot;</span> <span style="color: #993333; font-weight: bold;">PRIMARY</span> <span style="color: #993333; font-weight: bold;">KEY</span><span style="color: #66cc66;">,</span> btree <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">&#41;</span>
    <span style="color: #ff0000;">&quot;users_username_key&quot;</span> <span style="color: #993333; font-weight: bold;">UNIQUE</span> <span style="color: #993333; font-weight: bold;">CONSTRAINT</span><span style="color: #66cc66;">,</span> btree <span style="color: #66cc66;">&#40;</span>username<span style="color: #66cc66;">&#41;</span>
Referenced <span style="color: #993333; font-weight: bold;">by</span>:
    <span style="color: #993333; font-weight: bold;">TABLE</span> <span style="color: #ff0000;">&quot;privileges&quot;</span> <span style="color: #993333; font-weight: bold;">CONSTRAINT</span> <span style="color: #ff0000;">&quot;privileges_user_id_fkey&quot;</span> <span style="color: #993333; font-weight: bold;">FOREIGN</span> <span style="color: #993333; font-weight: bold;">KEY</span> <span style="color: #66cc66;">&#40;</span>user_id<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">REFERENCES</span> users<span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">&#41;</span>
Triggers:
    make_default_privileges_trg AFTER <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">ON</span> users <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span> <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> make_default_privileges<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
    normalize_fullname_trg <span style="color: #993333; font-weight: bold;">BEFORE</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">UPDATE</span> <span style="color: #993333; font-weight: bold;">ON</span> users <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span> <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> normalize_fullname<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
    we_dont_like_them_trg <span style="color: #993333; font-weight: bold;">BEFORE</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">UPDATE</span> <span style="color: #993333; font-weight: bold;">ON</span> users <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span> <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> we_dont_like_them<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>created_on column &#8211; ideally it shouldn't be possible to specify anything other than &#8220;now", but default value doesn't protect us. I can easily create user with fake created_on:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> users <span style="color: #66cc66;">&#40;</span>username<span style="color: #66cc66;">,</span> created_on<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">values</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'bad santa'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'0001-01-01 00:00:00'</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> users <span style="color: #993333; font-weight: bold;">where</span> username <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'bad santa'</span>;
 id <span style="color: #66cc66;">|</span> username  <span style="color: #66cc66;">|</span> fullname <span style="color: #66cc66;">|</span>        created_on         <span style="color: #66cc66;">|</span> last_modified
<span style="color: #808080; font-style: italic;">----+-----------+----------+---------------------------+---------------</span>
  <span style="color: #cc66cc;">8</span> <span style="color: #66cc66;">|</span> bad santa <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>   <span style="color: #66cc66;">|</span> 0001<span style="color: #66cc66;">-</span>01<span style="color: #66cc66;">-</span>01 00:00:00<span style="color: #66cc66;">+</span>01:<span style="color: #cc66cc;">24</span> <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>What's more &#8211; after the row is in there, I can update the column &#8211; which also is not good idea.</p>
<p>On the other hand &#8211; last_modified should be set to now() on every update, even if I forget to set it in update statement. And it shouldn't be set to anything on insert.</p>
<p>This is of course also task for triggers. Based on what you learned earlier, you might understand that it should be BEFORE, but should it be one trigger (on both INSERT and UPDATE), or two separate triggers (because the logic is different in those cases).</p>
<p>Doing it in two triggers is trivial, but doing it in one function will let me show you some more cool stuff &#8211; namely TG_OP variable (described <a href="http://www.postgresql.org/docs/current/interactive/plpgsql-trigger.html">in the manual</a>):</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> sanitize_dates<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> <span style="color: #993333; font-weight: bold;">AS</span> $$
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">IF</span> TG_OP <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'INSERT'</span> <span style="color: #993333; font-weight: bold;">THEN</span>
        <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>created_on :<span style="color: #66cc66;">=</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
        <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>last_modified :<span style="color: #66cc66;">=</span> <span style="color: #993333; font-weight: bold;">NULL</span>;
    ELSIF TG_OP <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'UPDATE'</span> <span style="color: #993333; font-weight: bold;">THEN</span>
        <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>created_on :<span style="color: #66cc66;">=</span> <span style="color: #993333; font-weight: bold;">OLD</span><span style="color: #66cc66;">.</span>created_on;
        <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>last_modified :<span style="color: #66cc66;">=</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
    <span style="color: #993333; font-weight: bold;">RETURN</span> <span style="color: #993333; font-weight: bold;">NEW</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">LANGUAGE</span> plpgsql;
$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> sanitize_dates_trg
    <span style="color: #993333; font-weight: bold;">BEFORE</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">UPDATE</span>
    <span style="color: #993333; font-weight: bold;">ON</span> users
    <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span>
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> sanitize_dates<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Interesting bit are the IFs in the function.</p>
<ul>
<li>First, in lines 3-5, function checks if it was called for INSERT, and if so &#8211; sets created_on for now() and last_modified to NULL. Thus &#8211; if user supplied any information there, it will be ignored.</li>
<li>Second, in lines 6-8, function checks if the command was UPDATE, and if yes &#8211; copies created_on from OLD version of the record to NEW data &#8211; hence, if the user tried to set new value of created_on &#8211; it will be overwritten. And then it sets last_modified to now().</li>
</ul>
<p>And how does it work?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">SELECT</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
              now
<span style="color: #808080; font-style: italic;">-------------------------------</span>
 <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">15</span>:<span style="color: #cc66cc;">50</span>:<span style="color: #cc66cc;">13.750914</span><span style="color: #66cc66;">+</span>01
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> users <span style="color: #66cc66;">&#40;</span>username<span style="color: #66cc66;">,</span> created_on<span style="color: #66cc66;">,</span> last_modified<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">values</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'paranoid parrot'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'0001-01-01 00:00:00'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'1410-07-15 07:00:00'</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> users <span style="color: #993333; font-weight: bold;">where</span> username <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'paranoid parrot'</span>;
 id <span style="color: #66cc66;">|</span>    username     <span style="color: #66cc66;">|</span> fullname <span style="color: #66cc66;">|</span>          created_on           <span style="color: #66cc66;">|</span> last_modified
<span style="color: #808080; font-style: italic;">----+-----------------+----------+-------------------------------+---------------</span>
  <span style="color: #cc66cc;">9</span> <span style="color: #66cc66;">|</span> paranoid parrot <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>   <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">15</span>:<span style="color: #cc66cc;">50</span>:<span style="color: #cc66cc;">13.751598</span><span style="color: #66cc66;">+</span>01 <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">update</span> users <span style="color: #993333; font-weight: bold;">set</span> created_on <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'0001-01-01 00:00:00'</span><span style="color: #66cc66;">,</span> last_modified <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'1410-07-15 07:00:00'</span> <span style="color: #993333; font-weight: bold;">where</span> username <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'paranoid parrot'</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> users <span style="color: #993333; font-weight: bold;">where</span> username <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'paranoid parrot'</span>;
 id <span style="color: #66cc66;">|</span>    username     <span style="color: #66cc66;">|</span> fullname <span style="color: #66cc66;">|</span>          created_on           <span style="color: #66cc66;">|</span>         last_modified
<span style="color: #808080; font-style: italic;">----+-----------------+----------+-------------------------------+-------------------------------</span>
  <span style="color: #cc66cc;">9</span> <span style="color: #66cc66;">|</span> paranoid parrot <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>   <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">15</span>:<span style="color: #cc66cc;">50</span>:<span style="color: #cc66cc;">13.751598</span><span style="color: #66cc66;">+</span>01 <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">15</span>:<span style="color: #cc66cc;">50</span>:<span style="color: #cc66cc;">13.765139</span><span style="color: #66cc66;">+</span>01
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Sweet. Of course &#8211; triggers <em>can</em> be disabled, but it requires specific privileges, so that's not really relevant.</p>
<p>So, I covered BEFORE and AFTER, for inserts, and updates. What about DELETE?</p>
<p>Let's make archive table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> users_archive <span style="color: #66cc66;">&#40;</span>
    id int4 <span style="color: #993333; font-weight: bold;">primary</span> <span style="color: #993333; font-weight: bold;">key</span><span style="color: #66cc66;">,</span>
    username text <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">unique</span><span style="color: #66cc66;">,</span>
    fullname text<span style="color: #66cc66;">,</span>
    created_on timestamptz <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">default</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
    last_modified timestamptz<span style="color: #66cc66;">,</span>
    deleted_on timestamptz
<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>This table is almost the same like users, but it is not linked to sequence for id column, and it has one more column &#8211; deleted_on.</p>
<p>With this I can:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span> archive_users<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">RETURNS</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> <span style="color: #993333; font-weight: bold;">AS</span> $$
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> users_archive <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">,</span> username<span style="color: #66cc66;">,</span> fullname<span style="color: #66cc66;">,</span> created_on<span style="color: #66cc66;">,</span> last_modified<span style="color: #66cc66;">,</span> deleted_on<span style="color: #66cc66;">&#41;</span>
        <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">OLD</span><span style="color: #66cc66;">.</span>id<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">OLD</span><span style="color: #66cc66;">.</span>username<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">OLD</span><span style="color: #66cc66;">.</span>fullname<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">OLD</span><span style="color: #66cc66;">.</span>created_on<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">OLD</span><span style="color: #66cc66;">.</span>last_modified<span style="color: #66cc66;">,</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">RETURN</span> <span style="color: #993333; font-weight: bold;">OLD</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">LANGUAGE</span> plpgsql;
&nbsp;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> archive_users_trg
    AFTER <span style="color: #993333; font-weight: bold;">DELETE</span>
    <span style="color: #993333; font-weight: bold;">ON</span> users
    <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span>
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> archive_users<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">delete</span> <span style="color: #993333; font-weight: bold;">from</span> users <span style="color: #993333; font-weight: bold;">where</span> id <span style="color: #66cc66;">=</span> <span style="color: #cc66cc;">1</span> returning <span style="color: #66cc66;">*</span>;
 id <span style="color: #66cc66;">|</span> username <span style="color: #66cc66;">|</span>          fullname          <span style="color: #66cc66;">|</span>          created_on           <span style="color: #66cc66;">|</span> last_modified
<span style="color: #808080; font-style: italic;">----+----------+----------------------------+-------------------------------+---------------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> depesz   <span style="color: #66cc66;">|</span> Absolutely Irrelevant Name <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">14</span>:<span style="color: #cc66cc;">58</span>:<span style="color: #cc66cc;">47.500289</span><span style="color: #66cc66;">+</span>01 <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> users_archive;
 id <span style="color: #66cc66;">|</span> username <span style="color: #66cc66;">|</span>          fullname          <span style="color: #66cc66;">|</span>          created_on           <span style="color: #66cc66;">|</span> last_modified <span style="color: #66cc66;">|</span>          deleted_on
<span style="color: #808080; font-style: italic;">----+----------+----------------------------+-------------------------------+---------------+-------------------------------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> depesz   <span style="color: #66cc66;">|</span> Absolutely Irrelevant Name <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">14</span>:<span style="color: #cc66cc;">58</span>:<span style="color: #cc66cc;">47.500289</span><span style="color: #66cc66;">+</span>01 <span style="color: #66cc66;">|</span> <span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">null</span><span style="color: #66cc66;">&#93;</span>        <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2012</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">11</span><span style="color: #66cc66;">-</span><span style="color: #cc66cc;">13</span> <span style="color: #cc66cc;">15</span>:<span style="color: #cc66cc;">58</span>:<span style="color: #cc66cc;">15.001053</span><span style="color: #66cc66;">+</span>01
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>With this, I have example for all kinds of <em>FOR EACH ROW</em> triggers. But what about STATEMENT? The thing is that when using them you don't actually know what rows were inserted/updated/deleted. So, this might be useful, for example, to regenerate some kind of materialized view that you're OK to redo after every change to your base table.</p>
<p>But, there is one &#8220;interesting" trick you can do.</p>
<p>Let's assume you want to store, in side table, total count of all rows in a table. So that your &#8220;select count(*) from table" can be modified to: &#8220;select count from counts where table_name = &#8216;table'".</p>
<p>If we'd use standard &#8220;FOR EACH ROW" triggers, this could lead to relatively important problems.</p>
<p>Let's consider case, when, on INSERT you increment the counter in side table, on DELETE you decrement it. Trivial, right? Two triggers (or one with IF), &#8220;AFTER INSERT" and &#8220;AFTER DELETE".</p>
<p>But what would happen if I did: INSERT INTO table values ()&#8230;.. &#8211; for 500,000 rows? Or delete of a million of rows?</p>
<p>Well, the counts table would get updated 500,000 times, or a million times. Does it sound like a good idea? Hope you said: &#8220;NO!".</p>
<p>Thanks to STATEMENT triggers we can do something smarter. For example: have &#8220;a counter" somewhere in memory, and make ROW triggers increment it (without any write overhead, and make AFTER STATEMENT trigger do actual count update.</p>
<p>How would that work? First we need the counts table:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> counts <span style="color: #66cc66;">&#40;</span>
    <span style="color: #993333; font-weight: bold;">table_name</span> text <span style="color: #993333; font-weight: bold;">primary</span> <span style="color: #993333; font-weight: bold;">key</span><span style="color: #66cc66;">,</span>
    <span style="color: #993333; font-weight: bold;">count</span> int4 <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span>
<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Then, I will store initial row:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> counts <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">table_name</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'users'</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> users;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> counts;
 <span style="color: #993333; font-weight: bold;">table_name</span> <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">count</span>
<span style="color: #808080; font-style: italic;">------------+-------</span>
 users      <span style="color: #66cc66;">|</span>     <span style="color: #cc66cc;">4</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Where can I store the counter in the mean time? There is couple of options &#8211; for example &#8211; as a GUC (system setting), or using temporary, unlogged, table. If I was to use pl/Perl (or other pl/* languages) I could have some shared memory bit that I could use. But since we're in PL/pgSQL, I think I will (ab)use GUCs.</p>
<p>I will need 3 triggers. One &#8211; before statement, that will initialize the per-query counter, then row-level trigger to update the counter, and then after statement, to store the count change.</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">function</span> initialize_row_counter<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">returns</span> <span style="color: #993333; font-weight: bold;">trigger</span> <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">begin</span>
    perform set_config<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'trigger.row_counter'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'0'</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">true</span> <span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">return</span> <span style="color: #993333; font-weight: bold;">null</span>;
<span style="color: #993333; font-weight: bold;">end</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> initialize_row_counter_trg
    <span style="color: #993333; font-weight: bold;">BEFORE</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">DELETE</span>
    <span style="color: #993333; font-weight: bold;">ON</span> users
    <span style="color: #993333; font-weight: bold;">FOR</span> EACH STATEMENT
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> initialize_row_counter<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">function</span> modify_row_counter<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">returns</span> <span style="color: #993333; font-weight: bold;">trigger</span> <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">declare</span>
    v_counter int4 :<span style="color: #66cc66;">=</span> current_setting<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'trigger.row_counter'</span> <span style="color: #66cc66;">&#41;</span>::int4;
<span style="color: #993333; font-weight: bold;">begin</span>
    <span style="color: #993333; font-weight: bold;">IF</span> TG_OP <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'INSERT'</span> <span style="color: #993333; font-weight: bold;">THEN</span>
        v_counter :<span style="color: #66cc66;">=</span> v_counter <span style="color: #66cc66;">+</span> <span style="color: #cc66cc;">1</span>;
    <span style="color: #993333; font-weight: bold;">ELSE</span>
        v_counter :<span style="color: #66cc66;">=</span> v_counter <span style="color: #66cc66;">-</span> <span style="color: #cc66cc;">1</span>;
    <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
    perform set_config<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'trigger.row_counter'</span><span style="color: #66cc66;">,</span> v_counter::text<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">true</span> <span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">return</span> <span style="color: #993333; font-weight: bold;">null</span>;
<span style="color: #993333; font-weight: bold;">end</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> modify_row_counter_trg
    AFTER <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">DELETE</span>
    <span style="color: #993333; font-weight: bold;">ON</span> users
    <span style="color: #993333; font-weight: bold;">FOR</span> EACH <span style="color: #993333; font-weight: bold;">ROW</span>
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> modify_row_counter<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">function</span> apply_row_counter<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">returns</span> <span style="color: #993333; font-weight: bold;">trigger</span> <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #993333; font-weight: bold;">declare</span>
    v_counter int4 :<span style="color: #66cc66;">=</span> current_setting<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'trigger.row_counter'</span> <span style="color: #66cc66;">&#41;</span>::int4;
<span style="color: #993333; font-weight: bold;">begin</span>
    <span style="color: #993333; font-weight: bold;">if</span> v_counter <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #cc66cc;">0</span> <span style="color: #993333; font-weight: bold;">then</span>
        <span style="color: #993333; font-weight: bold;">UPDATE</span> counts <span style="color: #993333; font-weight: bold;">SET</span> <span style="color: #993333; font-weight: bold;">count</span> <span style="color: #66cc66;">=</span> <span style="color: #993333; font-weight: bold;">count</span> <span style="color: #66cc66;">+</span> v_counter <span style="color: #993333; font-weight: bold;">WHERE</span> <span style="color: #993333; font-weight: bold;">table_name</span> <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'users'</span>;
    <span style="color: #993333; font-weight: bold;">end</span> <span style="color: #993333; font-weight: bold;">if</span>;
    perform set_config<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'trigger.row_counter'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'0'</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">true</span> <span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">return</span> <span style="color: #993333; font-weight: bold;">null</span>;
<span style="color: #993333; font-weight: bold;">end</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TRIGGER</span> apply_row_counter_trg
    AFTER <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">DELETE</span>
    <span style="color: #993333; font-weight: bold;">ON</span> users
    <span style="color: #993333; font-weight: bold;">FOR</span> EACH STATEMENT
    <span style="color: #993333; font-weight: bold;">EXECUTE</span> <span style="color: #993333; font-weight: bold;">PROCEDURE</span> apply_row_counter<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>And now for some tests:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> users <span style="color: #66cc66;">&#40;</span>username<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'test'</span> <span style="color: #66cc66;">||</span> i <span style="color: #993333; font-weight: bold;">from</span> generate_series<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">10</span><span style="color: #66cc66;">&#41;</span> i;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #cc66cc;">0</span> <span style="color: #cc66cc;">10</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> counts;
 <span style="color: #993333; font-weight: bold;">table_name</span> <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">count</span>
<span style="color: #808080; font-style: italic;">------------+-------</span>
 users      <span style="color: #66cc66;">|</span>    <span style="color: #cc66cc;">14</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">delete</span> <span style="color: #993333; font-weight: bold;">from</span> privileges;
<span style="color: #993333; font-weight: bold;">DELETE</span> <span style="color: #cc66cc;">13</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">delete</span> <span style="color: #993333; font-weight: bold;">from</span> users;
<span style="color: #993333; font-weight: bold;">DELETE</span> <span style="color: #cc66cc;">14</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> counts;
 <span style="color: #993333; font-weight: bold;">table_name</span> <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">count</span>
<span style="color: #808080; font-style: italic;">------------+-------</span>
 users      <span style="color: #66cc66;">|</span>     <span style="color: #cc66cc;">0</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>All good. One comment though. In the trigger functions I used:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">set_config<span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'trigger.row_counter'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'0'</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">true</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>I am on PostgreSQL 9.3, and if you'd be testing this code on earlier Pg, you will get error saying:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">ERROR:  unrecognized configuration parameter <span style="color: #ff0000;">&quot;trigger.row_counter&quot;</span></pre></td></tr></table></div>

<p>This is because you'll need to declare &#8220;trigger" namespace for variables in your postgresql.conf, using:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">custom_variable_classes <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'trigger'</span></pre></td></tr></table></div>

<p>Hope the example is clear. You might wander why I returned NULL in all of the cases. Well &#8211; for statement triggers, either BEFORE or AFTER, return value is ignored &#8211; since it doesn't work on actual rows anyway. And the row-level trigger was an AFTER trigger, so its return value is also ignored.</p>
<p>In case you'd want whole rows to be analyzed &#8211; it's also possible. You can use the GUCs to store text representation of array of rows, or just use temporary, unlogged, table that will keep copy of the modified rows.</p>
<p>But, in case you need it, I think it would be better to use pl/Perl (or other pl/* language), since it has a pretty usable %_SHARED hash/dict that can be used to store arbitrary structures. But that's not relevant for now.</p>
<p>After all of this I hope that it will be clear:</p>
<ul>
<li>triggers are not scary</li>
<li>they can do pretty cool things</li>
<li>they give you certain guarantees which application-level code simply cannot due to separation</li>
<li>which trigger should be used for what and when</li>
<li>issuing update from trigger to modify just inserted row is a big NO-NO.</li>
</ul>
<p>Of course, as with everything in life &#8211; with power comes responsibility. Your trigger can become problematic if it will lead to deadlocks ( example why it might happen, and what can be done to avoid the problem was <a href="http://www.depesz.com/2007/09/12/objects-in-categories-counters-with-triggers/">described here</a>).</p>
<p>One of the arguments against triggers is that they slow down operations.</p>
<p>For example &#8211; adding trigger to normalize fullname will cause inserts to be slower than without the trigger. This is <em>of course</em> true. But how problematic is it actually?</p>
<p>For simple test purpose, I recreate the table with no triggers:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">drop</span> <span style="color: #993333; font-weight: bold;">table</span> users cascade;
&nbsp;
$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> users <span style="color: #66cc66;">&#40;</span>
    id serial <span style="color: #993333; font-weight: bold;">primary</span> <span style="color: #993333; font-weight: bold;">key</span><span style="color: #66cc66;">,</span>
    username text <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">unique</span><span style="color: #66cc66;">,</span>
    fullname text<span style="color: #66cc66;">,</span>
    created_on timestamptz <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">default</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
    last_modified timestamptz
<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>And then I loaded, using fastest possible way:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">copy users <span style="color: #66cc66;">&#40;</span>username<span style="color: #66cc66;">,</span> fullname<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">FROM</span> <span style="color: #ff0000;">'/tmp/data.input'</span>;</pre></td></tr></table></div>

<p>100,000 rows to the table.</p>
<p>This is the worst case scenario &#8211; table is empty, there is no bloat, all happens as fast as possible, so trigger overhead will be as huge as possible.</p>
<p>The whole procedure (drop, create, copy) has been repeated 5 times a in row, with times:</p>
<ul>
<li>1029.678 ms</li>
<li>1265.373 ms</li>
<li>1220.776 ms</li>
<li>1084.679 ms</li>
<li>1077.521 ms</li>
</ul>
<p>That is, we have values from 1029.678 ms to 1265.373 ms, with average of 1135.605 ms.</p>
<p>Then, I re-added the normalize_fullname trigger, as writen in the beginning, and repeated the test. Times now:</p>
<ul>
<li>1118.322 ms</li>
<li>1098.351 ms</li>
<li>1108.593 ms</li>
<li>1083.157 ms</li>
<li>1059.112 ms</li>
</ul>
<p>Values from 1059.112 ms to 1118.322 ms, with average of 1093.507 ms! That's actually <em>faster</em> than without trigger. But I think that's just because of random load fluctuations on my test machine.</p>
<p>The point is &#8211; there is no real slowdown. Of course the trigger in here is trivial &#8211; just a simple function call and assignment. There would be slowdown (and more interesting) if we'd be doing some queries from triggers. Right? Sure. But if you'd but the same queries in app to run &#8211; you would have the overhead too.</p>
<p>All in all &#8211; trigger speed is related to how complex it is, and for simple task the overhead is negligible.</p>
<p>Finally, I would like to present my own point why I prefer triggers in database, as opposed to triggers in application code (i.e. paths in application code that run something additional to &#8220;normal" query, that can be made using trigger.</p>
<p>All those tools, orms, and so on, assume one very important thing &#8211; you will always communicate with database using them.</p>
<p>This is not a problem while you're writing your application &#8211; after all &#8211; it all goes through the model classes. But once you have the app deployed, and you need just a small job &#8211; some data load perhaps, or automatic tool ran from cron that does expiring &#8211; it gets complicated.</p>
<p>For example. Let's assume you have count of active users, kept up to date by application code inside some kind of ORM. All works fine, but you want to add auto-expiring users that match certain criteria.</p>
<p>If the counter was kept using trigger(s), you would just add to crontab:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">psql <span style="color: #66cc66;">-</span>c <span style="color: #ff0000;">&quot;update users set expired = true where some + magic = condition&quot;</span></pre></td></tr></table></div>

<p>and you're done.</p>
<p>But since the count-refreshing code is in app, you <em>have to</em>:</p>
<ul>
<li>use the same code for this simple job &#8211; i.e. full-blown ORM, instead of simple query</li>
<li>use the same language &#8211; because the orm will most likely not be portable</li>
</ul>
<p>This might not sound as a big issue, but just think about how much easier it is to write:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">psql <span style="color: #66cc66;">-</span>c <span style="color: #ff0000;">&quot;delete from users where expired and last_login &lt; now() - '6 months'::interval&quot;</span></pre></td></tr></table></div>

<p>than write equivalent in your programming of choice. Sometimes shell + psql <em>is</em> better tool.</p>
<p>Does that mean that triggers should be used everywhere, and all kind of automation in app is bad? No. Sometimes you do know that exporting the logic one-layer-above will make the whole thing simpler. Plus &#8211; we don't have triggers that would run on commit, which would greatly help in some cases.</p>
<p>Anyway &#8211; I think that wraps it. If you have any problems with triggers &#8211; remember that there is very helpful <a href="irc://irc.freenode.net/%23postgresql,ischannel">irc channel</a> where you can meet literally hundreds (641 now, though some are probably bots/inactive) people using PostgreSQL which can help you.</p>
<p><!-- vim: set spell spelllang=en_US ft=xhtml: --></p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">13 comments <a href='http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-36463" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36463" title="">#</a></span> <a href='http://www.denpanosekai.com' rel='external nofollow' class='url'>denpanosekai</a></div>  <div class="date">Nov 14, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/da686ed2bcaba1b0c46d8cafe3f7cfd1?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Great primer. I&#8217;ve been using triggers more and more these days, especially the &#8220;update of column&#8221; kind.</p>
<p>I do have a general question. Coming from the world of embedded software, I&#8217;ve always sort of seen triggers as SQL interrupts and generally the advice is to keep triggers &#8220;short&#8221; much like interrupts.</p>
<p>But what does &#8220;short&#8221; really mean? What is this so-called limit? With interrupts you&#8217;d generally set a global or two and be done, but I&#8217;ve been using triggers to leverage sanity validation from applications, handle duplicate records and even built whole alarm systems in trigger space (using LISTEN/NOTIFY). I also use cascading triggers and I don&#8217;t really see the difference between using those and a big-ass stored procedure. They&#8217;ll both take as long to execute, and they&#8217;ll both rollback in case of failure. So where does that &#8220;keep your trigger short&#8221; mentality come from? Some actual real-life horror stories would be nice.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-36464" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36464" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Nov 14, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@denpanosekai:</p>
<p>the only horror stories that I have are related to bugs in triggers, not their length. Things like deadlock-prone code, circular calls to triggers.</p>
<p>So, can&#8217;t help with this.</p>
	</li>
		
		
			
<li class="odd" id="comment-36465" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36465" title="">#</a></span> Dragan Sahpaski</div>  <div class="date">Nov 14, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e70d3ad106d032117256ec4c4ef4f4ae?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>That&#8217;s a great Dr. Strangelove inspired title.<br />
Great post ! Thanks.</p>
<p>BTW. The tab field switch between the name and email fields in the comment form doesn&#8217;t work. Name takes you to the search field on top of the page.</p>
<p>Cheers</p>
	</li>
		
		
			
<li class="mycomment" id="comment-36466" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36466" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Nov 14, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Dragan:<br />
Thanks, fixed the tabindex, should be better now.</p>
	</li>
		
		
			
<li class="odd" id="comment-36472" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36472" title="">#</a></span> Michael</div>  <div class="date">Nov 15, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/c09cf6f339bfe9b4fd44da7d758863a5?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>My philosophy is that all business logic and additional manipulation of the data should be included in the database. The database is not just for mere storage of data (tables), but that&#8217;s where the fastest processing because the data is  there. In my opinion is totally wrong to drag data from the database to client for further processing and return a specific set of data back to the database. It is much easier to do and much faster using triggers, or by calling functions in the database.</p>
	</li>
		
		
			
<li class="odd" id="comment-36473" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36473" title="">#</a></span> Rafał</div>  <div class="date">Nov 15, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>@Michael: I have opposite opinion. I&#8217;m Java developer and I prefer to have all business logic in Java, where I have object, design pattern and so many other great features <img src="http://www.depesz.com/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" />  Database is for me for storage and I seldom (almost never) use triggers.<br />
@Depesz: very nice tutorial <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-36475" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36475" title="">#</a></span> Michael</div>  <div class="date">Nov 15, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/c09cf6f339bfe9b4fd44da7d758863a5?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Rafal: For example, you have Sales Order and now you need to make Invoice from that order. You need to download Stock data, customer data &#8230; all to java client to determinate is there stock available or check customer limit &#8230;. And then in your objects populate invoice data and send data to insert into database. IstThat your way?<br />
For me, it&#8217;s to many data sending and retrieving throw wire and slowest way for acomplish goal.</p>
<p>Faster way is to write PL/PGSQL function to do that, and you call that function from your java client.</p>
<p>And one more, if you need to change something or add new stuff, you need to change function in one place (database). In your way you need to change in your client and than distribute new version of client to users.</p>
	</li>
		
		
			
<li class="odd" id="comment-36479" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36479" title="">#</a></span> Joe Van Dyk</div>  <div class="date">Nov 15, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e1c881ecb7bf966f44fecaa5387ab26b?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I&#8217;d love to see an article about avoiding deadlocks (especially with triggers). I keep running into deadlocks when doing summary columns (say for every item in an order, we need to update an inventory count).</p>
	</li>
		
		
			
<li class="mycomment" id="comment-36480" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36480" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Nov 15, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Joe:<br />
well, deadlocks are relatively simple thing, though getting rid of them might be complicated. It is all on case by case basis, so I&#8217;m not sure how to write such article.</p>
<p>If you have isolated transactions that happen to interlock, you might send it to me, so I&#8217;ll check what can be done about it.</p>
	</li>
		
		
			
<li class="odd" id="comment-36481" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36481" title="">#</a></span> <a href='http://www.denpanosekai.com' rel='external nofollow' class='url'>denpanosekai</a></div>  <div class="date">Nov 15, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/da686ed2bcaba1b0c46d8cafe3f7cfd1?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@MICHAEL My opinion is the same. Moving entire business logic from C++/Java to PL/PGSQL has tremendously sped up operation and data integrity.</p>
	</li>
		
		
			
<li class="odd" id="comment-36500" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36500" title="">#</a></span> Piotr</div>  <div class="date">Nov 19, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/9e82b85156b3b74fec8e211548bbef08?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>My 0.2 cents.. &#8211; triggers are much more difficult to debug from developers perspective while support tickets are usually raised against development teams not db masters..</p>
	</li>
		
		
			
<li class="odd" id="comment-36513" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36513" title="">#</a></span> Troy</div>  <div class="date">Nov 21, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>This is weird, I was feeling quite happy about triggers today (trigger happy?) and I thought of that classic Strangelove quote, and just on a whim, wondered if anybody had made a post called &#8220;How I learned to stop worrying and love the triggers&#8221;.  So I googled it, and lo and behold there was an exact post by that title! And only from a week ago! Oh well, quite strange.  Good article!</p>
	</li>
		
		
			
<li class="odd" id="comment-40913" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-40913" title="">#</a></span> <a href='http://technobytz.com/sql-trigger-example-in-postgresql.html' rel='external nofollow' class='url'>sql trigger</a></div>  <div class="date">Jul 7, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/53de9923cde956d0b8ebe7b24cd24dfa?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Triggers are useful, if used wisely.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="2550" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="ee456b30f6" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="245"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">2 comments</span> | <span class="wpp-views">638 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">4 comments</span> | <span class="wpp-views">616 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">274 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">207 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">145 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">145 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">128 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">127 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">115 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">101 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

