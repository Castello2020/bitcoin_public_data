http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/
HTTP/1.1 200 OK
Server: nginx
Date: Thu, 24 Jul 2014 05:34:04 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=1610>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03 Comments Feed" href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/' />
<link rel='shortlink' href='http://www.depesz.com/?p=1610' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-1610">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" rel="bookmark" title="Permanent Link to CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>March 2nd, 2010 by depesz | Tags: <a href="http://www.depesz.com/tag/char/" rel="tag">char</a>, <a href="http://www.depesz.com/tag/constraint/" rel="tag">constraint</a>, <a href="http://www.depesz.com/tag/datatype/" rel="tag">datatype</a>, <a href="http://www.depesz.com/tag/domain/" rel="tag">domain</a>, <a href="http://www.depesz.com/tag/length/" rel="tag">length</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/text/" rel="tag">text</a>, <a href="http://www.depesz.com/tag/trigger/" rel="tag">trigger</a>, <a href="http://www.depesz.com/tag/varchar/" rel="tag">varchar</a> |  <a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/#comments" title="Comment on CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03">48 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>Fight!</p>
<p>But more seriously &#8211; people tend to use various data types, and there have been some myths about them, so let's see how it really boils down.</p>
<p>First of all &#8211; All those data types are internally saved using the same C data structure &#8211; varlena.</p>
<p>Thanks to this we can be <i>nearly</i> sure that there are no performance differences. Are there no performance differences in reality? Let's test.</p>
<p><span id="more-1610"></span></p>
<p>First, let's create simple table, and fill it with 500k rows. Then add index. and also &#8211; make the table with index from start, and then load data.</p>
<p>For generating test data, I wrote this simple script:</p>
<p><code>#!/usr/bin/perl -w<br />
use strict;<br />
&nbsp;<br />
print gen_random_word(100).&quot;\n&quot; for 1..500_000;<br />
&nbsp;<br />
exit;<br />
&nbsp;<br />
sub gen_random_word {<br />
    my $len = shift;<br />
    my @chars = (&quot;a&quot;..&quot;z&quot;, &quot;A&quot;..&quot;Z&quot;, &quot;0&quot;..&quot;9&quot;);<br />
    return join '', map { $chars[ rand @chars ] } 1 .. $len;<br />
}</code></p>
<p>And ran it like this:</p>
<p><code>$ perl ~/z.pl &gt; words.100.txt<br />
$ cut -b 1-50 words.100.txt &gt; words.50.txt<br />
$ cut -b 1-10 words.50.txt &gt; words.10.txt<br />
$ ls -l *.txt<br />
-rw-r--r-- 1 depesz users 50500000 Mar  1 14:59 words.100.txt<br />
-rw-r--r-- 1 depesz users  5500000 Mar  1 14:59 words.10.txt<br />
-rw-r--r-- 1 depesz users 25500000 Mar  1 14:59 words.50.txt</code></p>
<p>As you can see we have 3 test data files &#8211; with &#8220;words" of 10, 50 and 100 characters. Each datafile contains 500k rows.</p>
<p>Now, let's test the data load using this script:</p>
<p><code>#!/bin/bash<br />
export TIME=&quot;%e&quot;<br />
&nbsp;<br />
echo &quot;Testing of: create table, load data and create index.&quot;<br />
&nbsp;<br />
for LEN in 10 50 100<br />
do<br />
    echo &quot;  - testing word length $LEN&quot;<br />
    for DATATYPE in &quot;char($LEN)&quot; &quot;varchar($LEN)&quot; &quot;varchar&quot; &quot;text&quot;<br />
    do<br />
        export DATATYPE<br />
        for i in 1 2 3 4 5<br />
        do<br />
            dropdb test 2&gt; /dev/null<br />
            createdb test<br />
            psql -d test -qAtX -c &quot;create table test ( field $DATATYPE )&quot;<br />
            (<br />
                echo &quot;\\copy test from /var/tmp/test/words.$LEN.txt&quot;<br />
                echo &quot;CREATE INDEX q on test (field)&quot;<br />
            ) | time psql -qAtX -d test<br />
        done 2&gt;&amp;1 | awk '<br />
            BEGIN{MAX=0; MIN=1000}<br />
            ($1 &gt; MAX) {MAX=$1}<br />
            ($1 &lt; MIN) {MIN=$1}<br />
            {C++;S+=$1}<br />
            END{printf &quot;    - %-12s : avg: %7.2fs (min: %.2f, max: %.2f)\n&quot;, ENVIRON[&quot;DATATYPE&quot;], S/C, MIN, MAX}<br />
        '<br />
    done<br />
done<br />
&nbsp;<br />
echo &quot;Testing of: create table with index anda then load data.&quot;<br />
for LEN in 10 50 100<br />
do<br />
    echo &quot;  - testing word length $LEN&quot;<br />
    for DATATYPE in &quot;char($LEN)&quot; &quot;varchar($LEN)&quot; &quot;varchar&quot; &quot;text&quot;<br />
    do<br />
        export DATATYPE<br />
        for i in 1 2 3 4 5<br />
        do<br />
            dropdb test 2&gt; /dev/null<br />
            createdb test<br />
            psql -d test -qAtX -c &quot;create table test ( field $DATATYPE )&quot;<br />
            psql -d test -qAtX -c &quot;create index q on test (field)&quot;<br />
            (<br />
                echo &quot;\\copy test from /var/tmp/test/words.$LEN.txt&quot;<br />
            ) | time psql -qAtX -d test<br />
        done 2&gt;&amp;1 | awk '<br />
            BEGIN{MAX=0; MIN=1000}<br />
            ($1 &gt; MAX) {MAX=$1}<br />
            ($1 &lt; MIN) {MIN=$1}<br />
            {C++;S+=$1}<br />
            END{printf &quot;    - %-12s : avg: %7.2fs (min: %.2f, max: %.2f)\n&quot;, ENVIRON[&quot;DATATYPE&quot;], S/C, MIN, MAX}<br />
        '<br />
    done<br />
done</code></p>
<p>Basically, this script will test data loading 5 times for each datatype and each word length, using 2 methods:</p>
<ul>
<li>Method #1:<br />
<code>create table test ( field $DATATYPE );<br />
copy test (Field) from '/var/tmp/test/words.$LEN.txt';<br />
CREATE INDEX q on test (field);</code>
</li>
<li>Method #2:<br />
<code>create table test ( field $DATATYPE );<br />
CREATE INDEX q on test (field);<br />
copy test (Field) from '/var/tmp/test/words.$LEN.txt';</code>
</li>
</ul>
<p>The script might look complicated, but it's not really. And its output is even simpler:</p>
<p><code>Testing of: create table, load data and create index.<br />
  - testing word length 10<br />
    - char(10)     : avg:    4.34s (min: 4.25, max: 4.41)<br />
    - varchar(10)  : avg:    4.17s (min: 4.09, max: 4.24)<br />
    - varchar      : avg:    4.23s (min: 4.20, max: 4.27)<br />
    - text         : avg:    4.21s (min: 4.19, max: 4.22)<br />
  - testing word length 50<br />
    - char(50)     : avg:    5.67s (min: 5.54, max: 5.80)<br />
    - varchar(50)  : avg:    5.40s (min: 5.26, max: 5.62)<br />
    - varchar      : avg:    5.41s (min: 5.35, max: 5.58)<br />
    - text         : avg:    5.47s (min: 5.34, max: 5.65)<br />
  - testing word length 100<br />
    - char(100)    : avg:    7.83s (min: 7.72, max: 7.99)<br />
    - varchar(100) : avg:    7.65s (min: 7.51, max: 7.81)<br />
    - varchar      : avg:    7.64s (min: 7.48, max: 7.78)<br />
    - text         : avg:    7.62s (min: 7.47, max: 7.78)<br />
Testing of: create table with index anda then load data.<br />
  - testing word length 10<br />
    - char(10)     : avg:    5.03s (min: 4.95, max: 5.07)<br />
    - varchar(10)  : avg:    4.90s (min: 4.80, max: 5.02)<br />
    - varchar      : avg:    4.99s (min: 4.87, max: 5.09)<br />
    - text         : avg:    4.90s (min: 4.82, max: 5.02)<br />
  - testing word length 50<br />
    - char(50)     : avg:   12.56s (min: 11.33, max: 14.04)<br />
    - varchar(50)  : avg:   12.35s (min: 11.31, max: 14.07)<br />
    - varchar      : avg:   11.96s (min: 10.93, max: 13.09)<br />
    - text         : avg:   11.45s (min: 10.30, max: 12.41)<br />
  - testing word length 100<br />
    - char(100)    : avg:   57.01s (min: 54.35, max: 59.11)<br />
    - varchar(100) : avg:   55.12s (min: 53.91, max: 57.11)<br />
    - varchar      : avg:   58.38s (min: 54.46, max: 62.88)<br />
    - text         : avg:   55.52s (min: 52.73, max: 58.43)</code></p>
<p>As you can see times are very similar &#8211; there are differences between data types, but there is no clear &#8220;winner", and I'm much more inclined to assume that these differences come from random fluctuations of load on my machine, than from anything else.</p>
<p>So, we know that storing the data takes the same time.</p>
<p>What about searching?</p>
<p>So, I recreated the big tables:</p>
<p><code>create table test_char ( field char(100) );<br />
\copy test_char from /var/tmp/test/words.100.txt<br />
CREATE INDEX q_char on test_char (field);<br />
&nbsp;<br />
create table test_varchar ( field varchar(100) );<br />
\copy test_varchar from /var/tmp/test/words.100.txt<br />
CREATE INDEX q_varchar on test_varchar (field);<br />
&nbsp;<br />
create table test_varcharu ( field varchar );<br />
\copy test_varcharu from /var/tmp/test/words.100.txt<br />
CREATE INDEX q_varcharu on test_varcharu (field);<br />
&nbsp;<br />
create table test_text ( field text );<br />
\copy test_text from /var/tmp/test/words.100.txt<br />
CREATE INDEX q_text on test_text (field);</code></p>
<p>And wrote simple script to test searches:</p>
<p><code>#!/bin/bash<br />
export TIME=&quot;%e&quot;<br />
for DATATYPE in char varchar varcharu text<br />
do<br />
    export DATATYPE<br />
    for i in 1 2 3 4 5<br />
    do<br />
        for j in $( seq 1 20 )<br />
        do<br />
            echo &quot;SELECT COUNT(*) FROM test_char where field = any('{&quot;$( shuf words.100.txt | head -n 50 | xargs echo | tr ' ' , )&quot;}');&quot;<br />
        done | time psql -qAtX -d test &gt; /dev/null<br />
    done 2&gt;&amp;1 | awk '<br />
    BEGIN{MAX=0; MIN=1000}<br />
    ($1 &gt; MAX) {MAX=$1}<br />
    ($1 &lt; MIN) {MIN=$1}<br />
    {C++;S+=$1}<br />
    END{printf &quot;- %-12s : avg: %7.2fs (min: %.2f, max: %.2f)\n&quot;, ENVIRON[&quot;DATATYPE&quot;], S/C, MIN, MAX}<br />
    '<br />
done</code></p>
<p>In case you can't read it &#8211; for each data type, it runs 5 times test. Each test contains of 20 selects, each getting 50 rows from test table, using of course index scan.</p>
<p>Results:</p>
<p><code>- char         : avg:    2.47s (min: 2.44, max: 2.49)<br />
- varchar      : avg:    2.50s (min: 2.48, max: 2.51)<br />
- varcharu     : avg:    2.48s (min: 2.47, max: 2.50)<br />
- text         : avg:    2.49s (min: 2.44, max: 2.52)</code></p>
<p>This (I believe) proves that performance of all 4 datatypes is the same.</p>
<p>So, what other points there might be when considering which datatype to use?</p>
<p>Ease of use? In this area char(n) gets really low notes. Why? Can you spot problem?</p>
<p><code># create table x (y char(15));<br />
CREATE TABLE<br />
&nbsp;<br />
# insert into x(y) values ('depesz');<br />
INSERT 0 1<br />
&nbsp;<br />
# select * from x where y like '%sz';<br />
 y<br />
---<br />
(0 rows)</code></p>
<p>Why wasn't the record selected? Reason is simple: char(n) values are right padded with spaces.</p>
<p>This also means that this will work:</p>
<p><code># select * from x where y = 'depesz ';<br />
        y<br />
-----------------<br />
 depesz<br />
(1 row)</code></p>
<p>Given this &#8211; remember that char(n) will actually use <b>more</b> disk space for strings &#8211; if your strings are shorter than &#8220;n" &#8211; because it will right pad them to required length.</p>
<p>So, what about varchar, varchar(n) and text.</p>
<p>Varchar and text are the same. So we can treat them as the same, but to avoid confusion with varchar(n), and because text is simply shorter (in terms of characters in name) &#8211; I prefer text.</p>
<p>So, we're with 2 data types left: varchar(n) and text.</p>
<p>The obvious benefit of varchar(n) is that is has built-in limit of size.</p>
<p>Which is all cool, until you will have to change this limit. Which happens <b>a lot</b>.</p>
<p>Of course, one can say, you can:</p>
<p><code>alter table xxx alter column type varchar(new limit)</code></p>
<p>Well, first &#8211; let me say that I am discussing now <b>only</b> making the limit larger. If the new limit has to be smaller than previously (never seen of such case, but it's technically possible) &#8211; table has to be scanned to be sure that all values fit within new limit.</p>
<p>So, what happens with when you make the limit larger?</p>
<p>PostgreSQL has to rewrite the table. Which has 2 very important drawbacks:</p>
<ul>
<li>Requires exclusive lock on the table for the time of operation</li>
<li>In case of non-trivial tables, will take considerable amount of time</li>
</ul>
<p>This 2 points together make it (in my opinion) a no-go.</p>
<p>I'd rather use text without any limitation, than consider making database that will require (for example) shutdown of site, to change limit of email field from 75 to 100 characters (been there, done than, cursed a lot).</p>
<p>So, what is the best way to be able to limit field size &#8211; in a way that will not lock the table when increasing the limit? Or at least &#8211; will do it's job without table rewrite, as this takes too long time.</p>
<p>First idea: check. So, let's test it:</p>
<p><code># create table x (y text);<br />
CREATE TABLE<br />
&nbsp;<br />
# insert into x select 'depesz' from generate_series(1,10000000);<br />
INSERT 0 10000000<br />
&nbsp;<br />
# select pg_relation_size('x'), pg_total_relation_size('x');<br />
 pg_relation_size | pg_total_relation_size<br />
------------------+------------------------<br />
        362479616 |              362594304<br />
(1 row)</code></p>
<p>OK, we have some data in it. Now, let's add check, so we will have something to alter <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p><code># \timing<br />
Timing is on.<br />
&nbsp;<br />
# alter table x add constraint y_length check (length(y) &lt;= 16 );<br />
ALTER TABLE<br />
Time: 4038.007 ms</code></p>
<p>Now, let's alter it. Unfortunately you can't change contraint &#8211; you have to drop it and create. OK, Let's play:</p>
<p><code># begin;<br />
BEGIN<br />
Time: 0.100 ms<br />
&nbsp;<br />
*# alter table x drop constraint y_length;<br />
ALTER TABLE<br />
Time: 0.284 ms<br />
&nbsp;<br />
*# alter table x add constraint y_length check (length(y) &lt;= 32 );<br />
ALTER TABLE<br />
Time: 2333.937 ms<br />
&nbsp;<br />
*# commit;<br />
COMMIT<br />
Time: 0.642 ms</code></p>
<p>OK, It took in totak about 2.5s. &#8211; for relatively small table.</p>
<p>What about rewrite and locks?</p>
<p>Well, just before I ran this transaction I ran this SQL:</p>
<p><code># select oid, relfilenode from pg_class  where relname = 'x';<br />
  oid  | relfilenode<br />
-------+-------------<br />
 27238 |       27238<br />
(1 row)</code></p>
<p>Afterwards, the numbers are the same, so table was not rewritten. but, while the transaction was going on, I checked its locks:</p>
<p><code># select * from pg_locks  where pid = 16874;<br />
   locktype    | database | relation |  page  | tuple  | virtualxid | transactionid | classid | objid  | objsubid | virtualtransaction |  pid  |        mode         | granted<br />
---------------+----------+----------+--------+--------+------------+---------------+---------+--------+----------+--------------------+-------+---------------------+---------<br />
 relation      |    27219 |    27238 | [null] | [null] | [null]     |        [null] |  [null] | [null] |   [null] | 2/29               | 16874 | AccessExclusiveLock | t<br />
 virtualxid    |   [null] |   [null] | [null] | [null] | 2/29       |        [null] |  [null] | [null] |   [null] | 2/29               | 16874 | ExclusiveLock       | t<br />
 object        |    27219 |   [null] | [null] | [null] | [null]     |        [null] |    2606 |  27244 |        0 | 2/29               | 16874 | AccessExclusiveLock | t<br />
 transactionid |   [null] |   [null] | [null] | [null] | [null]     |          2720 |  [null] | [null] |   [null] | 2/29               | 16874 | ExclusiveLock       | t<br />
(4 rows)</code></p>
<p>Unfortunately, as you can see, this transaction obtained &#8216;AccessExclusiveLock' for table x. This means that for 2.5 seconds nobody can use it. It doesn't sound bad, does it? Unfortunately &#8211; it does. My table is relatively small. What's more &#8211; trying to get lock, automatically blocks all next transactions trying to reach the table.</p>
<p>So, is there any other option?</p>
<p>Well, we could use trigger &#8211; like this:</p>
<p><code>CREATE FUNCTION y_length_check() RETURNS TRIGGER AS $$<br />
BEGIN<br />
    IF length(NEW.y) &gt; 16 THEN<br />
        RAISE EXCEPTION 'Too long value in x.y';<br />
    END IF;<br />
    RETURN NEW;<br />
END;<br />
$$ LANGUAGE plpgsql;<br />
CREATE TRIGGER y_length BEFORE UPDATE OR INSERT ON x FOR EACH ROW EXECUTE PROCEDURE y_length_check();</code></p>
<p>Which will of course work, but looks like overkill. The good thing about this approach is that limit change is instant &#8211; you just do &#8220;CREATE OR REPLACE FUNCTION", and you're done.</p>
<p>Any other way that would not require exclusive lock on a table?</p>
<p>Sure, let's try to use DOMAINs:</p>
<p><code># CREATE DOMAIN depesz_text as text;<br />
CREATE DOMAIN<br />
&nbsp;<br />
# ALTER DOMAIN depesz_text ADD CONSTRAINT max_length CHECK ( length(value) &lt;= 16 );<br />
ALTER DOMAIN<br />
&nbsp;<br />
# CREATE TABLE x (y depesz_text);<br />
CREATE TABLE<br />
&nbsp;<br />
# insert into x select 'depesz' from generate_series(1,10000000);<br />
INSERT 0 10000000</code></p>
<p>Of course trying to insert too long value will fail:</p>
<p><code># insert into x (y) values ('abcdefghhijlndlkagjhflsagfljsahflsahdflsadjhlsd');<br />
ERROR:  value for domain depesz_text violates check constraint &quot;max_length&quot;</code></p>
<p>And how about changing limit?</p>
<p><code># BEGIN;<br />
BEGIN<br />
Time: 0.088 ms<br />
&nbsp;<br />
*# ALTER DOMAIN depesz_text DROP CONSTRAINT max_length;<br />
ALTER DOMAIN<br />
Time: 0.140 ms<br />
&nbsp;<br />
*# ALTER DOMAIN depesz_text ADD CONSTRAINT max_length CHECK ( length(value) &lt;= 32 );<br />
ALTER DOMAIN<br />
Time: 2052.200 ms<br />
&nbsp;<br />
*# select * from pg_locks  where pid = 16874;<br />
   locktype    | database | relation |  page  | tuple  | virtualxid | transactionid | classid | objid  | objsubid | virtualtransaction |  pid  |        mode         | granted<br />
---------------+----------+----------+--------+--------+------------+---------------+---------+--------+----------+--------------------+-------+---------------------+---------<br />
 relation      |    27219 |    10988 | [null] | [null] | [null]     |        [null] |  [null] | [null] |   [null] | 2/45               | 16874 | AccessShareLock     | t<br />
 virtualxid    |   [null] |   [null] | [null] | [null] | 2/45       |        [null] |  [null] | [null] |   [null] | 2/45               | 16874 | ExclusiveLock       | t<br />
 relation      |    27219 |     1247 | [null] | [null] | [null]     |        [null] |  [null] | [null] |   [null] | 2/45               | 16874 | RowExclusiveLock    | t<br />
 object        |    27219 |   [null] | [null] | [null] | [null]     |        [null] |    2606 |  27249 |        0 | 2/45               | 16874 | AccessExclusiveLock | t<br />
 relation      |    27219 |    27250 | [null] | [null] | [null]     |        [null] |  [null] | [null] |   [null] | 2/45               | 16874 | ShareLock           | t<br />
 transactionid |   [null] |   [null] | [null] | [null] | [null]     |          2732 |  [null] | [null] |   [null] | 2/45               | 16874 | ExclusiveLock       | t<br />
(6 rows)<br />
&nbsp;<br />
Time: 0.874 ms<br />
&nbsp;<br />
*# select 27250::regclass, 10988::regclass;<br />
 regclass | regclass<br />
----------+----------<br />
 x        | pg_locks<br />
(1 row)<br />
&nbsp;<br />
Time: 0.191 ms<br />
*# commit;<br />
COMMIT<br />
Time: 0.966 ms</code></p>
<p>As you can see &#8211; there is only ShareLock on the table while changing domain &#8211; this means that writes will not work, but selects will. Which is huge gain in comparison with &#8220;ALTER TABLE" and its AccessExclusiveLock on table &#8211; which blocked everything.</p>
<p>Is that all that we can do? Basically &#8211; yes. We could theoretically make check that gets limit from custom GUC, but it looks slow, and is definitely error prone &#8211; as the values can be modified per-session.</p>
<p>So, while there is no clear winner, I believe that the TEXT+DOMAIN is really good enough for most of the cases, and if you want really transparent limit changes &#8211; it looks like trigger is the only choice.</p>
<p>To sum it all up:</p>
<ul>
<li>char(n) &#8211; takes too much space when dealing with values shorter than n, and can lead to subtle errors because of adding trailing spaces, plus it is problematic to change the limit</li>
<li>varchar(n) &#8211; it's problematic to change the limit in live environment</li>
<li>varchar &#8211; just like text</li>
<li>text &#8211; for me a winner &#8211; over (n) data types because it lacks their problems, and over varchar &#8211; because it has distinct name</li>
</ul>
<p>UPDATE</p>
<p>Based on Caleb comment, I did test of speed of data load for various ways of getting text datatype with limited length.</p>
<p>I used this script to create test tables:</p>
<p><code>CREATE TABLE t_varchar ( field varchar(100) );<br />
&nbsp;<br />
CREATE TABLE t_trigger_text (field TEXT );<br />
&nbsp;<br />
CREATE FUNCTION ttt_field_length_trigger() RETURNS TRIGGER AS $$<br />
BEGIN<br />
    IF length(NEW.field) &gt; 100 THEN<br />
        RAISE EXCEPTION 'Too long value in t_trigger_text.field';<br />
    END IF;<br />
    RETURN NEW;<br />
END;<br />
$$ LANGUAGE plpgsql;<br />
CREATE TRIGGER ttt_field_length_trigger<br />
    BEFORE UPDATE OR INSERT ON t_trigger_text<br />
    FOR EACH ROW EXECUTE PROCEDURE ttt_field_length_trigger();<br />
&nbsp;<br />
CREATE TABLE t_constraint_text (field TEXT check ( length(field) &lt;= 100 ) );<br />
&nbsp;<br />
CREATE OR REPLACE FUNCTION check_length (TEXT) RETURNS bool as $$<br />
    SELECT length($1) &lt;= 100;<br />
$$ language sql;<br />
CREATE TABLE t_function_constraint_text (field TEXT check ( check_length(field) ) );<br />
&nbsp;<br />
CREATE DOMAIN depesz_text as TEXT;<br />
ALTER DOMAIN depesz_text ADD CONSTRAINT max_length CHECK ( length(value) &lt;= 100 );<br />
CREATE TABLE t_domain ( field depesz_text );<br />
&nbsp;<br />
&nbsp;<br />
CREATE DOMAIN depesz_text2 as TEXT;<br />
ALTER DOMAIN depesz_text2 ADD CONSTRAINT max_length CHECK ( check_length(value) );<br />
CREATE TABLE t_function_domain ( field depesz_text2 );</code></p>
<p>and this test script:</p>
<p><code>#!/bin/bash<br />
export TIME=&quot;%e&quot;<br />
&nbsp;<br />
for table in &quot;t_varchar&quot; &quot;t_trigger_text&quot; &quot;t_constraint_text&quot; &quot;t_function_constraint_text&quot; &quot;t_domain&quot; &quot;t_function_domain&quot;<br />
do<br />
    export table<br />
    for i in 1 2 3 4 5<br />
    do<br />
        dropdb test 2&gt; /dev/null<br />
        createdb test<br />
        psql -qAtX -d test -f create.sql<br />
        echo &quot;\\copy $table from /var/tmp/test/words.100.txt&quot; | time psql -qAtX -d test<br />
    # done<br />
    done 2&gt;&amp;1 | awk '<br />
    BEGIN{MAX=0; MIN=1000}<br />
    ($1 &gt; MAX) {MAX=$1}<br />
    ($1 &lt; MIN) {MIN=$1}<br />
    {C++;S+=$1}<br />
    END{printf &quot; - %-26s : avg: %7.2fs (min: %.2f, max: %.2f)\n&quot;, ENVIRON[&quot;table&quot;], S/C, MIN, MAX}<br />
    '<br />
done</code></p>
<p>As you can see we have 6 different tables:</p>
<ul>
<li>t_varchar : basic table with varchar(100) field</li>
<li>t_trigger_text : table with text field, and trigger function which checks length</li>
<li>t_constraint_text : table with text field, and simple check for length</li>
<li>t_function_constraint_text : table with text field, and check, but check is done using function (thanks go to Marko Tiikkaja for the idea)</li>
<li>t_domain : table with domain field, and domain has simple check</li>
<li>t_function_domain : table with domain field, and domain has function based check.</li>
</ul>
<p>Both function-based contraints (t_function_constraint_text and t_function_domain) have the same great ability as t_trigger_text &#8211; changing limit is instantenous.</p>
<p>Results of the test:</p>
<p><code>- t_varchar                  : avg:    2.21s (min: 2.06, max: 2.41)<br />
- t_trigger_text             : avg:    4.37s (min: 4.29, max: 4.46)<br />
- t_constraint_text          : avg:    2.33s (min: 2.28, max: 2.42)<br />
- t_function_constraint_text : avg:    2.52s (min: 2.35, max: 2.91)<br />
- t_domain                   : avg:    2.62s (min: 2.33, max: 2.83)<br />
- t_function_domain          : avg:    2.52s (min: 2.29, max: 2.76)</code></p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">48 comments <a href='http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-29446" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29446" title="">#</a></span> <a href='http://filip.rembialkowski.net' rel='external nofollow' class='url'>Filip</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/3c7762851de72b8505fa70cae4eb7c83?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Nice. I was always a fan of DOMAINs, now I have one more reason to use them. This decoupling of constraints from data is a great feature. And it&#8217;s standards-compliant, so should be portable to other databases.</p>
	</li>
		
		
			
<li class="odd" id="comment-29447" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29447" title="">#</a></span> Marko Tiikkaja</div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/29cd5820544cc4803d6e4e50d254cf54?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>You could also use a function in the CHECK constraint, e.g. CHECK(foo_bar_check(bar)).  It&#8217;s not as expensive as a trigger and you can easily replace the function when you want to change the limit.</p>
	</li>
		
		
			
<li class="odd" id="comment-29448" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29448" title="">#</a></span> <a href='http://guenti.poolbyte.de' rel='external nofollow' class='url'>Mario Günterberg</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2ac17e5f5a66e51cff5536d850bd7ceb?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Nice to see that. It&#8217;s a good comparison and have a good point of view. I most prefer also the text data type.</p>
	</li>
		
		
			
<li class="odd" id="comment-29449" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29449" title="">#</a></span> AndersH</div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/6e325be78e65d09320e8c2a785f1019e?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>In sql server they have deprecated the &#8220;text&#8221; datatype and advises use of &#8220;varchar(max)&#8221; instead.<br />
<a href="http://msdn.microsoft.com/en-us/library/ms187993.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms187993.aspx</a><br />
I just wish Oracle would do the same. The lob datatypes have way to many restrictions compared with a varchar2.<br />
I think types like &#8220;char&#8221; and &#8220;text&#8221; exposes implementation details.</p>
	</li>
		
		
			
<li class="odd" id="comment-29450" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29450" title="">#</a></span> Chris S</div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/bd97ad406560c9276d29e19222785d2d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I&#8217;ve been bit too many times by needing to change the size of a varchar(n) as well.  Been going with text for awhile now based on mailing list info and some more basic measurements.  Glad to see it looks like the right call.</p>
	</li>
		
		
			
<li class="odd" id="comment-29451" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29451" title="">#</a></span> <a href='http://www.postgresonline.com' rel='external nofollow' class='url'>Regina</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/fdeac731da75c06316d72bc9b401b953?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I guess I&#8217;m the only one that disapproves of the over use of text.<br />
First of all the fact that your table becomes unusable by changing the length I consider a bit of problem and one of my pet peeves with PostgreSQL.  I don&#8217;t have this much of an issue with other databases so I consider it something that must be improved on with PostgreSQL. Cause I get asked that question all the time &#8212; why is it so damn slow to increase a field in PostgreSQL?</p>
<p>Secondly hmm I use tools to view data that really consider text and varchar(x) as very different animals.  They rely on that to determine width to show a field and also (gasp!),whether a field is searchable or not.  I know its sad but we must live in a world that has to support other databases in addition to PostgreSQL. In most other databases &#8211;  text storage is very different from varchar(n) and so generic tools such as ODBC drivers and so forth treat them differently.  Not to mention I just like the fact that I can generate a create table statement and have the meta data quickly there to know what the maximum size is I can expect in a table.  I like the genericness of that approach to seeing max length.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29452" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29452" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Regina:<br />
You&#8217;re most likely not the only one that doesn&#8217;t like &#8220;text&#8221;.</p>
<p>Compatibility (whether it will work with other databases) was one of the angles that I wanted to write about, but then I realized, that in the most important (in my, not so enlightened, opinion) database &#8211; oracle &#8211; it&#8217;s also not varchar.</p>
<p>As for using tools that have problems with text, and don&#8217;t have it with varchar &#8211; well, whatever I write expresses my opinions, and, thanks $DEITY, I don&#8217;t have to deal with such tools/interfaces/whatever.</p>
<p>As with every &#8220;rule&#8221; in every field &#8211; there are exceptions. What I write is just general guideline (according to me) that can be ignored, bent, or ridiculed <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-29453" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29453" title="">#</a></span> moltonel</div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d20f86db9a6f03cb070e9fbaaf0b7228?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Nice to know about the &#8216;domain&#8217; trick, thanks.</p>
<p>But I&#8217;m surprised postgres isn&#8217;t smart enough to take a SharedLock instead of an ExclusiveLock when altering the table in this manner. Is there a good reason for that, or could postgres use a SharedLock in the future ? Failing that, it would be good to update the &#8220;character types&#8221; documentation. I guess 99% of people use varchar(n) instead of domain/trigger, because they dont know any better.</p>
	</li>
		
		
			
<li class="odd" id="comment-29454" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29454" title="">#</a></span> <a href='http://www.postgresonline.com' rel='external nofollow' class='url'>Regina</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/fdeac731da75c06316d72bc9b401b953?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Hubert,<br />
Yap I know.  What would be really cool though, is to have my cake and eat it too. You can have your text with your domains, but I&#8217;m lazy &#8212; I just want to limit the amount of text people put in my fields (very easily) and have my meta data view show it.</p>
<p>If the performance is exactly the same, then why can&#8217;t PostgreSQL internally<br />
do the domain thing but publish the meta data I wanna see and other tools rely on.  Then it wouldn&#8217;t need to rewrite tables right?</p>
<p>Really I don&#8217;t care about implementation details &#8212; I just like my meta data the way I like my meta data and don&#8217;t want to go sniffing in domain logic to find it.  My ER diagrammer lists the sizes the way I like it. Its so important for ETL. Okay now you can ridicule me too :).</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29455" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29455" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Regina &#8211; well, I think that Pg should even simpler way to update max length &#8211; after all &#8211; since binary format of &#8216;xx&#8217;::varchar(10) and &#8216;xx&#8217;::varchar(1000) is (afaik) the same, it should be (theoretically) enough to update catalog and set new max length (of course only in case when new length it greater than previous). but I&#8217;m not sure if it will ever happen.</p>
	</li>
		
		
			
<li class="odd" id="comment-29456" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29456" title="">#</a></span> Valentine Gogichashvili</div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/08539ac65983449f00c40e3f66070030?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Can actually ALTER TABLE for the constraint check use a temporary index on length(value)? Never tried it actually&#8230;</p>
<p>And what about changing a varchar(n) limit in the system catalog directly for the needed table column? Increasing the limit is always safe actually. Do you see any problems with that, other then it is not good to play with the catalog? What ALTER TABLE actually does, is checking that a new limit, that it is going to write into the catalog, is not violated by the current data. And probably is dropping current execution plans.</p>
	</li>
		
		
			
<li class="odd" id="comment-29457" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29457" title="">#</a></span> Tomas</div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/1819a9ab44695d291e895915d0670680?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I think varchar(&lt;=255) should take a bit less space than text (text uses 4 bytes for length, varchar(&lt;=255) should use 1 byte).</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29458" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29458" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Tomas: afaik, it&#8217;s not true in Pg.</p>
	</li>
		
		
			
<li class="odd" id="comment-29459" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29459" title="">#</a></span> <a href='http://www.pgexperts.com' rel='external nofollow' class='url'>David Fetter</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d824f1c7f8d11aaba14412fb70e32265?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@depesz,</p>
<p>The real issue around constraints which you kinda touched on is that &#8220;must be length n or shorter&#8221; isn&#8217;t a real constraint, or at least hasn&#8217;t been one any time I&#8217;ve seen so far.  Real constraints are more complicated.  Perhaps pointing this out in your DOMAIN example would help.</p>
	</li>
		
		
			
<li class="odd" id="comment-29460" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29460" title="">#</a></span> <a href='http://xenoterracide.blogspot.com' rel='external nofollow' class='url'>Caleb Cushing ( xenoterracide )</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e990c7cdac81e570939c4d5b17303b42?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Maybe I missed it&#8230; or maybe like the difference between the data types.. it&#8217;s negligible. but what, if any, difference is there for inserts and updates on the different kind of constraints. I&#8217;m kinda a fan of thinking that varchar(x) will be the fastest, and that inserts into my table are probably being done more often than I&#8217;m increasing that limit. if there is I may want to use varchar or even char if I know the width is unlikely to change for a very long time (like a zip code which is not a number). Basically you&#8217;ve shown it&#8217;s a pain if you ever need to change&#8230; yeah, ok, but what if it adds a lot of overhead to a write heavy server?</p>
	</li>
		
		
			
<li class="odd" id="comment-29461" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29461" title="">#</a></span> <a href='http://xenoterracide.blogspot.com' rel='external nofollow' class='url'>Caleb Cushing ( xenoterracide )</a></div>  <div class="date">Mar 2, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e990c7cdac81e570939c4d5b17303b42?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>also worth noting that although this code works in postgres many less mature databases don&#8217;t support this part of the standard (and by many I&#8217;m looking at MySQL). CHECK&#8217;s and DOMAIN&#8217;s are simply not an option there at this time, so if you&#8217;re building something to support both&#8230;</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29466" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29466" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 3, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Post updated to include test suggested by Caleb.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29467" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29467" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 3, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@David:<br />
Sure. I know that usually you should have more complex constraints, but in here, I was just testing simplest possible case.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29468" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29468" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 3, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Caleb:<br />
sorry but MySQL compliance is not high on my priorities list.</p>
	</li>
		
		
			
<li class="odd" id="comment-29469" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29469" title="">#</a></span> StuckMojo (Jon Erdman)</div>  <div class="date">Mar 3, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/b2ebf9ad949116d6116049da2cca121e?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Valentine Gogichashvili<br />
It&#8217;s actually not always safe. You have to do a bit more if your change pushes the table from not needing a toast table to needing one. Apparently talking PG into creating the toast table for you at the same time you change the catalog is not so simple in later versions (although not impossible). And if you don&#8217;t realize you need to do it, things get all mucked up.</p>
	</li>
		
		
			
<li class="odd" id="comment-29471" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29471" title="">#</a></span> sebpa</div>  <div class="date">Mar 3, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/c0b4b81136c9b640b9c09de6a24551d6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>great post as always, now i won&#8217;t have to explain why char(x) is bad idea, i will point here if it&#8217;s neccessary</p>
	</li>
		
		
			
<li class="odd" id="comment-29472" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29472" title="">#</a></span> Pete Yunker</div>  <div class="date">Mar 4, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/28c436336a3053852275c987be04e85b?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Great post &#8211; thanks for taking the time to share with everyone.  Not that it matters, since you&#8217;re creating words with random characters anyway, but for those trying to follow along, I believe</p>
<p>my @chars = (&#8220;a&#8221;..&#8221;A&#8221;, &#8220;z&#8221;..&#8221;Z&#8221;, &#8220;0&#8243;..&#8221;9&#8243;);</p>
<p>should really be</p>
<p>my @chars = (&#8220;a&#8221;..&#8221;z&#8221;, &#8220;A&#8221;..&#8221;Z&#8221;, &#8220;0&#8243;..&#8221;9&#8243;);</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29473" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29473" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 4, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Pete:<br />
You&#8217;re absolutely right. Fixing it now. Thanks.</p>
	</li>
		
		
			
<li class="odd" id="comment-29475" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29475" title="">#</a></span> Charles</div>  <div class="date">Mar 5, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/6ff26a72a31e0b73a733b4e793a3d017?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hi,<br />
could You provide the specs of the libraries, operating system and hardware that You are using for the tests?</p>
<p>Greate Thanks for all the hard work <img src="http://www.depesz.com/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="mycomment" id="comment-29477" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29477" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 5, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Charles:<br />
system is Arch Linux 32 bit, updated daily &#8211; that also basically responds to the libraries question.<br />
hardware &#8211; i7 920, 12GB of ram, and 2 (standalone, not raid) velociraptors 300g disks.</p>
	</li>
		
		
			
<li class="odd" id="comment-29593" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29593" title="">#</a></span> Teoś</div>  <div class="date">Mar 18, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Is default storage the same for char() and varchar/text? So far I thought that storage for fixed size char is faster than varchar/text. Is it relevant at all?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29594" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29594" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 18, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@TEOŚ:<br />
have you read the blogpost? I mean &#8211; it&#8217;s the one of the first things, that I stress that the binary formats are exactly the same, and I test it to show that there is no visible performance difference.</p>
	</li>
		
		
			
<li class="odd" id="comment-29596" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29596" title="">#</a></span> Teoś</div>  <div class="date">Mar 18, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>OK, just wanted to make sure.Thx.</p>
	</li>
		
		
			
<li class="odd" id="comment-29597" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29597" title="">#</a></span> Teoś</div>  <div class="date">Mar 18, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Formally you could also use RULE. It should be faster than TRIGGER and comparable to all other options.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29598" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29598" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Mar 18, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Rules are very bad idea. If at any point in time you think &#8220;well, rule can do it just fine&#8221;, it means you&#8217;re in a very bad situation, and you definitely should reconsider.</p>
	</li>
		
		
			
<li class="odd" id="comment-29600" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29600" title="">#</a></span> Teoś</div>  <div class="date">Mar 18, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I don&#8217;t see justification for such a general statement (yet). Recently I adapted single-thread code to parallel computation in a nearly real-time app in such a way that the original single-threaded version is still usable. Rules work just fine in integration of data streams, despite their limited capabilities. The syntax of RULE is less complex than that of a trigger (define function + define trigger) and the execution time seems OK at first glance (I didn&#8217;t test in-depth).</p>
	</li>
		
		
			
<li class="odd" id="comment-29601" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29601" title="">#</a></span> Teoś</div>  <div class="date">Mar 18, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Concerning the speed it seems that rules are actually faster than triggers, at least in the specific situation described: <a href="http://filip.rembialkowski.net/postgres-partitioning-performance-rules-vs-triggers/" rel="nofollow">http://filip.rembialkowski.net/postgres-partitioning-performance-rules-vs-triggers/</a></p>
	</li>
		
		
			
<li class="odd" id="comment-29672" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29672" title="">#</a></span> janus</div>  <div class="date">Apr 14, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/add043573df3902416e30ba38983568f?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Tell us why rules are bad, please.  Otherwise i don&#8217;t see any technical justification for the statement.</p>
	</li>
		
		
			
<li class="odd" id="comment-29686" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29686" title="">#</a></span> Matthew</div>  <div class="date">Apr 18, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2c9772ecb974fa899d56cb75cdcf2c0b?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@depesz &#8220;MySQL compliance&#8221; is a oxymoron.</p>
	</li>
		
		
			
<li class="odd" id="comment-29775" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29775" title="">#</a></span> Scott C.</div>  <div class="date">May 10, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>You can increase the max length of a varchar column without re-writing the table &#8230; but it requires modifying the system tables.</p>
<p>Its instant, its safe (if you increase only), and I&#8217;ve done it many times to prevent having to re-write a TB of data.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29777" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29777" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">May 10, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Scott:<br />
No, it&#8217;s not safe. I don&#8217;t know details (I know it involves creation of related toast table, but that&#8217;s about it), but you can ask RhodiumToad on irc for what can go wrong with it.</p>
<p>Besides &#8211; touching internal pg data seems like a very bad idea anyway.</p>
	</li>
		
		
			
<li class="odd" id="comment-34616" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-34616" title="">#</a></span> <a href='http://xenoterracide.com' rel='external nofollow' class='url'>Caleb Cushing ( xenoterracide )</a></div>  <div class="date">Dec 2, 2011</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e990c7cdac81e570939c4d5b17303b42?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>is there a reason when doing create domain not to do</p>
<p>CREATE DOMAIN foo AS VARCHAR(100);</p>
<p>?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-34619" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-34619" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Dec 2, 2011</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Caleb:<br />
hmm .. &#8211; because you then can&#8217;t change the limit at all? You can&#8217;t change base type of domain.</p>
	</li>
		
		
			
<li class="odd" id="comment-34638" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-34638" title="">#</a></span> <a href='http://xenoterracide.com' rel='external nofollow' class='url'>Caleb Cushing ( xenoterracide )</a></div>  <div class="date">Dec 5, 2011</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e990c7cdac81e570939c4d5b17303b42?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>that&#8217;s a limitation I was not aware of</p>
	</li>
		
		
			
<li class="odd" id="comment-36010" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36010" title="">#</a></span> Erwin Brandstetter</div>  <div class="date">Jul 25, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e7a49210b09257a4a59fe328c763320b?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>PostgreSQL 9.1 introduced a new feature to alleviate some pain. I quote the release notes here:<br />
<a href="http://www.postgresql.org/docs/current/interactive/release-9-1.html#AEN107778" rel="nofollow">http://www.postgresql.org/docs/current/interactive/release-9-1.html#AEN107778</a></p>
<p>&gt;    Allow ALTER TABLE &#8230; SET DATA TYPE to avoid table rewrites in appropriate cases (Noah Misch, Robert Haas)</p>
<p>&gt;    For example, converting a varchar column to text no longer requires a rewrite of the table. However, increasing the length constraint on a varchar column still requires a table rewrite.</p>
<p>Removes the advantage of the domain solution in v9.1, doesn&#8217;t it? Better go with text + constraint now?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-36011" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36011" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jul 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Erwin:<br />
personally, i go with straight up text, with no limitation.</p>
<p>If you&#8217;d positively need limitation, then using varchar(x) would be good idea now, or text, with limitation based on check constraint that runs function().</p>
	</li>
		
		
			
<li class="odd" id="comment-36013" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36013" title="">#</a></span> Erwin Brandstetter</div>  <div class="date">Jul 25, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e7a49210b09257a4a59fe328c763320b?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I go with just text in 99% of the cases, too.<br />
Where limitation is needed varchar(n) still seems a poor choice (change of limit still requires table rewrite and would break views, etc).<br />
I was only considering text + constraint vs. text-domain with constraint, and whether the changes in 9.1 affect the advantage of the domain &#8211; less aggressive lock while changing the constraint. Maybe I just have to run some tests.</p>
	</li>
		
		
			
<li class="odd" id="comment-36068" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36068" title="">#</a></span> <a href='http://considerateconsultancy.com' rel='external nofollow' class='url'>Loek Bergman</a></div>  <div class="date">Aug 3, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/a4e482533f468160a1057f7d9a1f0ea6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Thanks for the research. I was looking for performance differences between varchar and text and you showed me that there is no real difference. </p>
<p>Your post has a technical point of view. For the decision which datatype to use, I would however consider first functional requirements. The real problem for me with constraints (domains or varchar(n) alike) is that they come in too late. Functional data corruption and SQL-injection are the first concerns. The second requires input validation before any execution of SQL. The first might be the reason why ALTER TABLE puts an exclusive lock on the table.</p>
<p>Hence I prefer the use of ALTER TABLE instead of domains, because alteration of a domain does not affect rows already in the database. That means using domains that the same column can be used for different types of functional data. That makes it very hard to understand reports based on those columns.</p>
	</li>
		
		
			
<li class="odd" id="comment-36298" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36298" title="">#</a></span> Noah Yetter</div>  <div class="date">Oct 4, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/8c78a23741df24ed841c4d680bce4ddc?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>You can change varchar(n) on the fly by hacking the catalog:<br />
<a href="http://sniptools.com/databases/resize-a-column-in-a-postgresql-table-without-changing-data" rel="nofollow">http://sniptools.com/databases/resize-a-column-in-a-postgresql-table-without-changing-data</a></p>
<p>Why PG doesn&#8217;t do this itself when you do an ALTER TABLE, I don&#8217;t know.</p>
	</li>
		
		
			
<li class="odd" id="comment-36619" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36619" title="">#</a></span> Gavan Schneider</div>  <div class="date">Dec 5, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/8bf45d3e0d3961b3cc85010948741838?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Excellent article, and wonderful to see opinion backed by data.</p>
<p>In your discussion of using DOMAIN+CONSTRAINT to flexibly limit TEXT length I note your adverse comment about the time taken to check a large table if the constraint limit is changed.</p>
<p>From the PostgreSQL 9.2 documentation I note:<br />
    ALTER DOMAIN<br />
    ADD domain_constraint [ NOT VALID ]<br />
      These checks can be suppressed &#8230;<br />
      Newly inserted or updated rows are<br />
      always checked&#8230;</p>
<p>Seems to be the best of both worlds&#8230; assuming the existing data is still valid it does not need checking; and, all newly entered/altered data, i.e., the reason for the design change, will be checked against the updated constraint.</p>
<p>Untested: Could this be an instantaneous &#8216;no locks&#8217; solution?</p>
<p>On the general question of text vs. varchar(n) I infer from the following that at least Joe Celko favours setting lower limits in suitable (most?) contexts:<br />
    These large sizes tend to invite bad data.<br />
    You give someone &#8230; an NVARCHAR(255) column<br />
    and eventually it will get a Buddhist sutra<br />
    in Chinese Unicode.<br />
[http://joecelkothesqlapprentice.blogspot.com.au/2007/06/db-table-design-question.html]</p>
	</li>
		
		
			
<li class="mycomment" id="comment-36624" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36624" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Dec 5, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Gavan:<br />
while using invalid checks is interesting hack, I wouldn&#8217;t really use it in production.<br />
Of course &#8211; the fact that you can have invalid checks, and later on validate them makes changing constraints easier.</p>
<p>As for Celko. Well. I appreciate a lot of stuff that he did and does, but I definitely don&#8217;t agree with him on many things (starting from favorite structure for trees).</p>
	</li>
		
		
			
<li class="odd" id="comment-36628" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36628" title="">#</a></span> Gavan Schneider</div>  <div class="date">Dec 5, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/8bf45d3e0d3961b3cc85010948741838?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Thanks for the &#8216;interesting hack&#8217; compliment. <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>I&#8217;m unsure why you have reservations: likely I&#8217;m reading the docs differently and/or expressing myself badly.</p>
<p>The way I read the specification the checks are not &#8216;invalid&#8217; (despite the semantics saying this), rather the checks are not applied to existing data, only new data.</p>
<p>If the original domain text had a constraint of 24, and design changes to 36, then it is provably certain that the new constraint (36) will not invalidate any existing data.</p>
<p>Importantly, as you mention, it would be good to avoid the wasted effort of a big production table getting rechecked for existing valid data, i.e., data that had already passed the more restrictive constraint.</p>
<p>Obviously this is not the case for a 36-&gt;24 design change. But moving the limit down is a much bigger problem that just checking constraints, and it&#8217;s almost certainly never going to happen, i.e., not a likely problem &#8216;in production&#8217;.</p>
<p>I would see the sequence as follows.</p>
<p>1. Implementation: text field with unqualified length constraint of 24, with the belief/hope this will never change.</p>
<p>2. Transition: (Design change needed) Add the qualified with &#8220;NOT VALID&#8221; constraint for 36, i.e., both constraints active, so no invalid data can sneak in.</p>
<p>3. Complete: drop the original constraint of 24 so the longer data can now enter the table.</p>
<p>4. Ongoing: (whenever design changes) repeat steps 2 &amp; 4.</p>
<p>As for Celko and trees I can see the place for aesthetics in the selection of one&#8217;s trees. At least until application specific performance data is collected. <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-42190" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-42190" title="">#</a></span> Wutikrai</div>  <div class="date">Nov 7, 2013</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e94fc884a40ab3b9e643f38311381ce4?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Great job. Thank for your cool work. I am moving MySQL to PostgreSQL. According to the test, no need expecting Char would outperform Varchar. But I still prefer Varchar than Text since it make meta data more understadable.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="1610" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="d2f6f2eb4d" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="34"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">333 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">308 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">249 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">196 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">150 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">140 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">124 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">124 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">123 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/" title="How I Learned to Stop Worrying and Love the Triggers" class="wpp-post-title" target="_self">How I Learned to Stop Worrying and Love the Triggers</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">96 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

