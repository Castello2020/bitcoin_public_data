http://www.depesz.com/2008/05/08/mysqls-timestamp-in-postgresql/
HTTP/1.1 200 OK
Server: nginx
Date: Tue, 22 Jul 2014 17:25:19 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=1202>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; MySQL&#8217;s timestamp in PostgreSQL</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; MySQL&#8217;s timestamp in PostgreSQL Comments Feed" href="http://www.depesz.com/2008/05/08/mysqls-timestamp-in-postgresql/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2008/05/08/mysqls-timestamp-in-postgresql/' />
<link rel='shortlink' href='http://www.depesz.com/?p=1202' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-1202">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2008/05/08/mysqls-timestamp-in-postgresql/" rel="bookmark" title="Permanent Link to MySQL&#8217;s timestamp in PostgreSQL">MySQL&#8217;s timestamp in PostgreSQL</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>May 8th, 2008 by depesz | Tags: <a href="http://www.depesz.com/tag/domain/" rel="tag">domain</a>, <a href="http://www.depesz.com/tag/mysql/" rel="tag">mysql</a>, <a href="http://www.depesz.com/tag/plperl/" rel="tag">plperl</a>, <a href="http://www.depesz.com/tag/plpgsql/" rel="tag">plpgsql</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/timestamp/" rel="tag">timestamp</a> |  <a href="http://www.depesz.com/2008/05/08/mysqls-timestamp-in-postgresql/#comments" title="Comment on MySQL&#8217;s timestamp in PostgreSQL">7 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>MySQL has this nifty/annoying feature/bug of special data type &#8220;TIMESTAMP". It is like a DATETIME, but it gets automatically updated whenever you modify the row.</p>
<p>I'll try to add the same feature to PostgreSQL.</p>
<p><span id="more-1202"></span></p>
<p>This is how it works in MySQL:</p>
<p><code>mysql&gt; create table test (x varchar(10), y timestamp);<br />
Query OK, 0 rows affected (0.03 sec)<br />
mysql&gt; insert into test (x) values ('a');<br />
Query OK, 1 row affected (0.00 sec)<br />
mysql&gt; insert into test (x, y) values ('b', '2008-02-02 22:22:22');<br />
Query OK, 1 row affected (0.00 sec)</code></p>
<p>I created simple table and inserted 2 very simple rows. This is how it looks:</p>
<p><code>mysql&gt; select * from test;<br />
+------+---------------------+<br />
| x    | y                   |<br />
+------+---------------------+<br />
| a    | 2008-05-08 16:22:45 |<br />
| b    | 2008-02-02 22:22:22 |<br />
+------+---------------------+<br />
2 rows in set (0.00 sec)</code></p>
<p>Now, let's update one of the rows, with modification of x field:</p>
<p><code>mysql&gt; update test set x = 'c' where x = 'a';<br />
Query OK, 1 row affected (0.00 sec)<br />
Rows matched: 1  Changed: 1  Warnings: 0<br />
mysql&gt; select * from test;<br />
+------+---------------------+<br />
| x    | y                   |<br />
+------+---------------------+<br />
| c    | 2008-05-08 16:23:00 |<br />
| b    | 2008-02-02 22:22:22 |<br />
+------+---------------------+<br />
2 rows in set (0.00 sec)</code></p>
<p>OK, so let's try to modify also y field (the timestamp field):</p>
<p><code>mysql&gt; update test set x = 'd', y = '2008-01-01 01:23:45' where x = 'b';<br />
Query OK, 1 row affected (0.00 sec)<br />
Rows matched: 1  Changed: 1  Warnings: 0<br />
mysql&gt; select * from test;<br />
+------+---------------------+<br />
| x    | y                   |<br />
+------+---------------------+<br />
| c    | 2008-05-08 16:23:00 |<br />
| d    | 2008-01-01 01:23:45 |<br />
+------+---------------------+<br />
2 rows in set (0.00 sec)</code></p>
<p>Having done that we can pinpoint actual functionality of TIMESTAMP data type:</p>
<ul>
<li>When inserting new row, timestamp column is set to now() unless it had explicitly assigned value.</li>
<li>When updating row, if I explicitly stated new value for timestamp field, it will be set to this value. Otherwise, it will be set to now().</li>
</ul>
<p>Inserting part can be done by simply specifying &#8220;default now() not null". But what about second?</p>
<p>It's actually quite easy. All that's required is a simple trigger:</p>
<p><code>CREATE OR REPLACE FUNCTION trg_handle_timestamp() RETURNS TRIGGER AS $BODY$<br />
BEGIN<br />
    IF NEW.y = OLD.y THEN NEW.y := now(); END IF;<br />
    RETURN NEW;<br />
END;<br />
$BODY$ LANGUAGE 'plpgsql';<br />
CREATE TRIGGER trg_handle_timestamp BEFORE UPDATE ON test FOR EACH ROW EXECUTE PROCEDURE trg_handle_timestamp();</code></p>
<p>This is how it works:</p>
<p><code># create table test (<br />
=#     x varchar(10),<br />
=#     y timestamp not null default now()<br />
=# );<br />
CREATE TABLE<br />
# insert into test (x) values ('a');<br />
INSERT 0 1<br />
# insert into test (x, y) values ('b', '2008-02-02 22:22:22');<br />
INSERT 0 1<br />
# select * from test;<br />
 x |             y<br />
---+----------------------------<br />
 a | 2008-05-08 16:35:39.371974<br />
 b | 2008-02-02 22:22:22<br />
(2 rows)</code></p>
<p>Base inserts are working OK, value for y field in first row was correctly set using default value.</p>
<p>Now, I add the trigger:</p>
<p><code># CREATE OR REPLACE FUNCTION trg_handle_timestamp() RETURNS TRIGGER AS $BODY$<br />
=# BEGIN<br />
=#     IF NEW.y = OLD.y THEN NEW.y := now(); END IF;<br />
=#     RETURN NEW;<br />
=# END;<br />
=# $BODY$ LANGUAGE 'plpgsql';<br />
CREATE FUNCTION<br />
# CREATE TRIGGER trg_handle_timestamp BEFORE UPDATE ON test FOR EACH ROW EXECUTE PROCEDURE trg_handle_timestamp();<br />
CREATE TRIGGER</code></p>
<p>And now for some updates:</p>
<p><code># update test set x = 'c' where x = 'a';<br />
UPDATE 1<br />
# update test set x = 'd', y = '2008-01-01 01:23:45' where x = 'b';<br />
UPDATE 1<br />
# select * from test;<br />
 x |             y<br />
---+----------------------------<br />
 c | 2008-05-08 16:35:56.318366<br />
 d | 2008-01-01 01:23:45<br />
(2 rows)</code></p>
<p>As You can see, it works well.</p>
<p>But there are couple of things I don't like:</p>
<ul>
<li>in MySQL, if I'll do UPDATE test set y=y; it will keep previous values of y. In PostgreSQL &#8211; they will be overwritten by new values because we can't actually &#8220;know" what fields were set explicitly in UPDATE, and I had to use (OLD = NEW) trick to check if the field was updated</li>
<li>I have to remember to add &#8220;not null default now()"</li>
<li>I have to remember to add trigger for the table</li>
<li>If I have many tables with this &#8220;MySQL TIMESTAMP", they all have to be named the same, otherwise I will have to rewrite trigger procedure for each of them.</li>
</ul>
<p>To be honest &#8211; I can't do anything about first and third issu &#8211; or at least I don't know how to do anything about them.</p>
<p>But I can fix the other two <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>To do it, I will create new data type (domain). Let's name it mytimestamp:</p>
<p><code>CREATE domain mytimestamp as timestamp DEFAULT now() NOT NULL;</code></p>
<p>This will easily solve the issue about remembering to add &#8220;not null default now()".</p>
<p>And what about other gripe?</p>
<p>Well, our trigger has to be smarter. It has to know the data type of all columns in given table. And then work with them.</p>
<p>Writing this in pl/PgSQL would be a nightmare, so let's change the language to pl/Perl:</p>
<p><code>CREATE OR REPLACE FUNCTION trg_handle_timestamp() RETURNS TRIGGER AS $BODY$<br />
unless ( $_SHARED{'trg_handle_timestamp_plan'} ) {<br />
    $_SHARED{'trg_handle_timestamp_plan'} = spi_prepare(<br />
        'SELECT column_name FROM information_schema.columns where table_schema = $1 and table_name = $2 and domain_name = $3',<br />
        'TEXT', 'TEXT', 'TEXT'<br />
    );<br />
}<br />
my $returned = spi_exec_prepared(<br />
    $_SHARED{'trg_handle_timestamp_plan'},<br />
    $_TD-&gt;{'table_schema'},<br />
    $_TD-&gt;{'table_name'},<br />
    'mytimestamp'<br />
);<br />
my $was_modified = 0;<br />
my @time = localtime();<br />
for my $row (@{ $returned-&gt;{'rows'} }) {<br />
    my $column_name = $row-&gt;{'column_name'};<br />
    if ($_TD-&gt;{'new'}-&gt;{$column_name} eq $_TD-&gt;{'old'}-&gt;{$column_name}) {<br />
        $was_modified = 1;<br />
        $_TD-&gt;{'new'}-&gt;{$column_name} = sprintf("%04u-%02u-%02u %02u:%02u:%02u", 1900 + $time[5], 1 + $time[4], @time[3,2,1,0]);<br />
    }<br />
}<br />
return 'MODIFY' if $was_modified;<br />
return;<br />
$BODY$ language plperl;<br />
CREATE TRIGGER trg_handle_timestamp BEFORE UPDATE ON test FOR EACH ROW EXECUTE PROCEDURE trg_handle_timestamp();</code></p>
<p>Whoa, it looks much more complicated, but don't worry. It has to be written only once, and it works for all mytimestamp columns in all tables, regardless of how are they named.</p>
<p>So, with this new trigger, let's make new test table:</p>
<p><code>create table test (<br />
    x varchar(10),<br />
    y mytimestamp,<br />
    z mytimestamp<br />
);<br />
insert into test (x) values ('a');<br />
insert into test (x, y) values ('b', '2008-02-02 22:22:22');<br />
insert into test (x, z) values ('c', '2008-03-03 03:33:33');</code></p>
<p>Content of the table:</p>
<p><code>select * from test;<br />
 x |             y              |             z<br />
---+----------------------------+----------------------------<br />
 a | 2008-05-08 17:12:28.830297 | 2008-05-08 17:12:28.830297<br />
 b | 2008-02-02 22:22:22        | 2008-05-08 17:12:28.831448<br />
 c | 2008-05-08 17:12:28.832128 | 2008-03-03 03:33:33<br />
(3 rows)</code></p>
<p>Now, let's add the trigger and run some updates:</p>
<p><code>CREATE TRIGGER trg_handle_timestamp BEFORE UPDATE ON test FOR EACH ROW EXECUTE PROCEDURE trg_handle_timestamp();<br />
update test set x = 'd' where x = 'a';<br />
update test set x = 'e', y = '2008-01-01 01:23:45' where x = 'b';<br />
update test set x = 'f', y = '2008-01-01 01:23:45', z = '2007-12-31 23:59:59' where x = 'c';</code></p>
<p>Afterward, the test table looks like this:</p>
<p><code>select * from test;<br />
 x |          y          |          z<br />
---+---------------------+---------------------<br />
 d | 2008-05-08 17:12:28 | 2008-05-08 17:12:28<br />
 e | 2008-01-01 01:23:45 | 2008-05-08 17:12:28<br />
 f | 2008-01-01 01:23:45 | 2007-12-31 23:59:59<br />
(3 rows)</code></p>
<p>Not bad. Of course the pl/Perl trigger is more complex than MySQL approach, but hey &#8211; You already have it &#8211; You can copy it directly from here.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">7 comments <a href='http://www.depesz.com/2008/05/08/mysqls-timestamp-in-postgresql/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-26056" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-26056" title="">#</a></span> Ries</div>  <div class="date">May 8, 2008</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/53ff21117b4dc54358cf43e66484e178?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>For me the above simply doesn&#8217;t sound right&#8230;.<br />
For any update/insert I think a developer needs to specify what he exactly want&#8217;s, not using some automated guessing system&#8230; if you know what I mean&#8230;<br />
It&#8217;s the same as how MySQL handles auto increment, you could assign a NULL to the column and it get&#8217;s incremented!!! Not right&#8230;</p>
<p>Ries</p>
	</li>
		
		
				
<li class="odd" id="comment-26059" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-26059" title="">#</a></span> Hugo</div>  <div class="date">May 9, 2008</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/b854db94711b0d1aeb64fbc8a256cd5d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I use some like this:</p>
<p>CREATE TABLE movimientos<br />
(<br />
  idmovimientos serial NOT NULL,<br />
  desc character varying(250) NOT NULL,<br />
  modificacion timestamp without time zone NOT NULL DEFAULT now(),<br />
  CONSTRAINT pk_movimientos PRIMARY KEY (idmovimientos)<br />
);</p>
<p>===============================================================</p>
<p>CREATE TRIGGER updatemodificacion<br />
  AFTER UPDATE<br />
  ON movimientos<br />
  FOR EACH ROW<br />
  EXECUTE PROCEDURE updatemodificacion();</p>
<p>=============================================================</p>
<p>CREATE OR REPLACE FUNCTION updatemodificacion()<br />
  RETURNS &#8220;trigger&#8221; AS<br />
$BODY$<br />
BEGIN<br />
  IF TG_OP = &#8216;UPDATE&#8217; THEN<br />
     NEW.modificacion := current_timestamp;<br />
     RETURN NEW;<br />
  ELSE<br />
     RETURN OLD;<br />
  END IF;<br />
END;<br />
$BODY$<br />
  LANGUAGE &#8216;plpgsql&#8217; VOLATILE;<br />
;</p>
<p>Example:</p>
<p>If exists a column (modificacion) in all tables of the DB, simply create the trigger in every table and the column (modificacion) will be updated with de value current_timestamp if you modify other column.</p>
<p>Hugo</p>
	</li>
		
		
			
<li class="odd" id="comment-26063" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-26063" title="">#</a></span> Hugo</div>  <div class="date">May 9, 2008</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f2b801ec8a40360d88a83f6762cbebde?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I have something like this, to obtain similar result<br />
==================================<br />
CREATE TABLE movimientos<br />
(<br />
  idmovimientos serial NOT NULL,<br />
  modificacion timestamp without time zone NOT NULL DEFAULT now(),<br />
  CONSTRAINT pk_movimientos PRIMARY KEY (idmovimientos)<br />
)<br />
===================================<br />
CREATE OR REPLACE FUNCTION updatemodificacion()<br />
  RETURNS &#8220;trigger&#8221; AS<br />
$BODY$<br />
BEGIN<br />
  IF TG_OP = &#8216;UPDATE&#8217; THEN<br />
     NEW.modificacion := current_timestamp;<br />
     RETURN NEW;<br />
  ELSE<br />
     RETURN OLD;<br />
  END IF;<br />
END;<br />
$BODY$<br />
  LANGUAGE &#8216;plpgsql&#8217; VOLATILE;<br />
ALTER FUNCTION updatemodificacion() OWNER TO postgres;<br />
COMMENT ON FUNCTION updatemodificacion() IS &#8216;Actualiza el campo modifcacion de cada tabla de la base de datos en el evento Update&#8217;;<br />
==================================<br />
CREATE TRIGGER updatemodificacion<br />
  AFTER UPDATE<br />
  ON movimientos<br />
  FOR EACH ROW<br />
  EXECUTE PROCEDURE updatemodificacion();</p>
	</li>
		
		
			
<li class="odd" id="comment-26135" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-26135" title="">#</a></span> Tom Davis</div>  <div class="date">May 15, 2008</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/69806522647113a3245e6bd3f7597560?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>If you&#8217;re trying to model MySQl for compatibility reasons, you should keep in mind that the timestamp datatype has the auto-update behavior only for the first timestamp column of a table, unless the others contain ON UPDATE CURRENT_TIMESTAMP. Well it&#8217;s actually a little more convoluted than that.</p>
<p>I find having an &#8220;edited_on&#8221; column with a modification date that&#8217;s always updated by the system and can&#8217;t be altered by users to be more useful. I also often use an &#8220;edited_by&#8221; column to automatically capture a user_id of who created or updated a tuple.</p>
	</li>
		
		
			
<li class="odd" id="comment-26229" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-26229" title="">#</a></span> ArturM</div>  <div class="date">May 22, 2008</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/ad15ac6a944f1a2590d28752a7894faa?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>SQL Server has TIMESTAMP type for similar use but this is surprisingly not a datetime.</p>
	</li>
		
		
			
	</ol>
	
	

	<ol class="bob">

	<li style="background:transparent;padding-left:0;"><h2>2 Trackback(s)</h2></li>
	

	<li id="comment-26058">
		May 8, 2008: Anonymous			</li>
	
		

	<li id="comment-37571">
		Feb 14, 2013: <a href='http://www.pythian.com/blog/log-buffer-96-a-carnival-of-the-vanities-for-dbas/' rel='external nofollow' class='url'>Log Buffer #96: A Carnival of the Vanities for DBAs</a>			</li>
	
		

	</ol>

	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="1202" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="f82e1d93f9" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="205"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">651 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">4 comments</span> | <span class="wpp-views">628 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">293 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">231 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">162 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">156 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">139 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">135 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">127 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">109 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

