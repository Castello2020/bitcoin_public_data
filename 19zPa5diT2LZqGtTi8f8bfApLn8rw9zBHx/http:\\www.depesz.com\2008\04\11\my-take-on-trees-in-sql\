http://www.depesz.com/2008/04/11/my-take-on-trees-in-sql/
HTTP/1.1 200 OK
Server: nginx
Date: Thu, 24 Jul 2014 14:36:52 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=1192>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; My take on trees in SQL</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; My take on trees in SQL Comments Feed" href="http://www.depesz.com/2008/04/11/my-take-on-trees-in-sql/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2008/04/11/my-take-on-trees-in-sql/' />
<link rel='shortlink' href='http://www.depesz.com/?p=1192' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-1192">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2008/04/11/my-take-on-trees-in-sql/" rel="bookmark" title="Permanent Link to My take on trees in SQL">My take on trees in SQL</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>April 11th, 2008 by depesz | Tags: <a href="http://www.depesz.com/tag/plpgsql/" rel="tag">plpgsql</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/tree/" rel="tag">tree</a>, <a href="http://www.depesz.com/tag/trigger/" rel="tag">trigger</a> |  <a href="http://www.depesz.com/2008/04/11/my-take-on-trees-in-sql/#comments" title="Comment on My take on trees in SQL">26 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>Quick note in polish: jeśli znasz moje poprzednie posty nt. drzew, to ten możesz sobie pewnie odpuścić. będzie zawierał jedynie opis implementacji zbliżony do tego co już jest <a href="http://www.depesz.com/various/various-sqltrees-implementation.php">dostępne</a>.</p>
<p>OK, back to English (or at least my version of English).</p>
<p>Finding a good way to store trees in SQL was/is my long-term hobby. I tried ltree, basic adjacency list, Celko's nested sets way, and nothing really was able to make me feel satisfied.</p>
<p>Ltree is great, but PostgreSQL only (not that it's a big problem). Adjacency list is very simple in insert, update and delete operations, but forces me to use recursive queries in case of some not-so-standard queries. Nested sets are quite the contrary &#8211; great for selects, but I simply hate writing insert/update/delete to these trees.</p>
<p>Is there anything better? I think so.</p>
<p><span id="more-1192"></span></p>
<p>My way of storing trees started with simple adjacency list. This is simple to write to, and I will try to make selects somewhat simpler. Doing things the other way around (starting with simple selects, and complicated writes, and then making writes simpler is next to impossible for me).</p>
<p>So, I start with this schema:</p>
<p><code>CREATE TABLE objects (<br />
    id             SERIAL,<br />
    codename       TEXT NOT NULL UNIQUE,<br />
    printable_name TEXT,<br />
    some_property  INT4,<br />
    PRIMARY KEY (id)<br />
);</code></p>
<p>It is simple table which store &#8220;objects", where each object has unique codename, some printable_name, and some_property.</p>
<p>Both printable_name and some_property are actually irrelevant, but I just wanted to show some data in it to make it easier for you to follow.</p>
<p>Now, we need to add tree information.</p>
<p><code>ALTER TABLE objects add column parent_id INT4 references objects (id);</code></p>
<p>Our test table looks now like this:</p>
<p><code>                             Table "public.objects"<br />
     Column     |  Type   |                      Modifiers<br />
----------------+---------+------------------------------------------------------<br />
 id             | integer | not null default nextval('objects_id_seq'::regclass)<br />
 codename       | text    | not null<br />
 printable_name | text    |<br />
 some_property  | integer |<br />
 parent_id      | integer |<br />
Indexes:<br />
    "objects_pkey" PRIMARY KEY, btree (id)<br />
    "objects_codename_key" UNIQUE, btree (codename)<br />
Foreign-key constraints:<br />
    "objects_parent_id_fkey" FOREIGN KEY (parent_id) REFERENCES objects(id)<br />
Referenced by:<br />
  "objects_parent_id_fkey" IN objects FOREIGN KEY (parent_id) REFERENCES objects(id)</code></p>
<p>Nothing really fancy here.</p>
<p>Now. Let's add functionality <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>First is very simple, and it's actually foundation for further work: let's add ability to select (without any kind of loops or recursiveness) to select all parents and/or all children of given node.</p>
<p>To do it, I will need to add new table:</p>
<p><code>CREATE TABLE objects_tree (<br />
    id        SERIAL PRIMARY KEY,<br />
    parent_id INT4 NOT NULL REFERENCES objects (id) ON DELETE CASCADE,<br />
    child_id  INT4 NOT NULL REFERENCES objects (id) ON DELETE CASCADE,<br />
    depth     INT4 NOT NULL,<br />
    UNIQUE (parent_id, child_id)<br />
);</code></p>
<p>You might ask: what's depth? This is number of levels which separate 2 objects. You will see in examples (in a minute) how it works.</p>
<p>OK. I will use this table to store information about all parents of given node. Of course I will not require application to fill this table &#8211; this would defeat one of the main purposes of new structure: easy writes.</p>
<p>So, if I can't use application to fill this table, I have to use triggers. Luckily this is pretty simple. I will write it as 2 separate triggers to make it easier to understand.</p>
<p>First I will write the simpler one: for inserts:</p>
<p><code>CREATE OR REPLACE FUNCTION tree_objects_ai() RETURNS TRIGGER AS<br />
$BODY$<br />
DECLARE<br />
BEGIN<br />
    INSERT INTO objects_tree (parent_id, child_id, depth) VALUES (NEW.id, NEW.id, 0);<br />
    INSERT INTO objects_tree (parent_id, child_id, depth) SELECT x.parent_id, NEW.id, x.depth + 1 FROM objects_tree x WHERE x.child_id = NEW.parent_id;<br />
    RETURN NEW;<br />
END;<br />
$BODY$<br />
LANGUAGE 'plpgsql';<br />
CREATE TRIGGER tree_objects_ai AFTER INSERT ON objects FOR EACH ROW EXECUTE PROCEDURE tree_objects_ai();</code></p>
<p>What does it do?</p>
<p>Let's iterate:</p>
<ul>
<li>it inserts row, where both parent_id and child_id are set to the same value (id of newly inserted object), and depth is set to 0 (as both child and parent are on the same level) &#8211; why we need this record &#8211; I'll show you a bit later</li>
<li>and now, in second insert we copy all rows that our parent had as its parents, but we modify child_id in these rows to be id of currently inserted row, and increase depth</li>
</ul>
<p>Does it sound complicated? Maybe a simple example will clear all doubt:</p>
<p>I insert 2 top-level nodes:</p>
<p><code>INSERT INTO objects (id, codename) VALUES (1, 'a');<br />
INSERT INTO objects (id, codename) VALUES (2, 'b');</code></p>
<p>Content of object_tree is pretty simple, and quite obvious:</p>
<p><code> id | parent_id | child_id | depth<br />
----+-----------+----------+-------<br />
  1 |         1 |        1 |     0<br />
  2 |         2 |        2 |     0<br />
(2 rows)</code></p>
<p>Now, I insert 2 records, directly &#8220;below" just-inserted objects:</p>
<p><code>INSERT INTO objects (id, codename, parent_id) VALUES (3, 'c', 1);<br />
INSERT INTO objects (id, codename, parent_id) VALUES (4, 'd', 2);</code></p>
<p>Object_tree contains now:</p>
<p><code> id | parent_id | child_id | depth<br />
----+-----------+----------+-------<br />
  1 |         1 |        1 |     0<br />
  2 |         2 |        2 |     0<br />
  3 |         3 |        3 |     0<br />
  4 |         1 |        3 |     1<br />
  5 |         4 |        4 |     0<br />
  6 |         2 |        4 |     1<br />
(6 rows)</code></p>
<p>Which is not really interesting, as exactly the same information is in objects table.</p>
<p>But what happens when I insert object which is child of <b>not</b> top-level object?</p>
<p><code>INSERT INTO objects (id, codename, parent_id) VALUES (5, 'e', 3);<br />
SELECT * FROM objects_tree;<br />
 id | parent_id | child_id | depth<br />
----+-----------+----------+-------<br />
  1 |         1 |        1 |     0<br />
  2 |         2 |        2 |     0<br />
  3 |         3 |        3 |     0<br />
  4 |         1 |        3 |     1<br />
  5 |         4 |        4 |     0<br />
  6 |         2 |        4 |     1<br />
  7 |         5 |        5 |     0<br />
  8 |         3 |        5 |     1<br />
  9 |         1 |        5 |     2<br />
(9 rows)</code></p>
<p>Now it shows some useful information. For the first time we have available piece of information which is not directly accessible from objects table, row with information about (parent_id, child_id, depth) = (1, 5, 2).</p>
<p>As you see, the object_tree table grows pretty fast. Or it looks like it. This is true, every object in this table will have N rows in this table, where N is object level (starting from 1 for top-level objects). If this is a problem for you &#8211; I think nested sets might be better for you. For me &#8211; additional data doesn't really matter, as each object usually already has a lot of data, and some additional integers don't bother me.</p>
<p>Now for update trigger.</p>
<p><code>CREATE OR REPLACE FUNCTION tree_objects_au() RETURNS TRIGGER AS<br />
$BODY$<br />
DECLARE<br />
BEGIN<br />
    IF NOT OLD.parent_id IS DISTINCT FROM NEW.parent_id THEN<br />
        RETURN NEW;<br />
    END IF;<br />
    IF OLD.parent_id IS NOT NULL THEN<br />
        DELETE FROM objects_tree WHERE id in (<br />
            SELECT r2.id FROM objects_tree r1 join objects_tree r2 on r1.child_id = r2.child_id<br />
            WHERE r1.parent_id = NEW.id AND r2.depth &gt; r1.depth<br />
        );<br />
    END IF;<br />
    IF NEW.parent_id IS NOT NULL THEN<br />
        INSERT INTO objects_tree (parent_id, child_id, depth)<br />
            SELECT r1.parent_id, r2.child_id, r1.depth + r2.depth + 1<br />
        FROM<br />
            objects_tree r1,<br />
            objects_tree r2<br />
        WHERE<br />
            r1.child_id = NEW.parent_id AND<br />
            r2.parent_id = NEW.id;<br />
    END IF;<br />
    RETURN NEW;<br />
END;<br />
$BODY$<br />
LANGUAGE 'plpgsql';<br />
CREATE TRIGGER tree_objects_au AFTER UPDATE ON objects FOR EACH ROW EXECUTE PROCEDURE tree_objects_au();</code></p>
<p>Now, let's check 2 possible scenarios:</p>
<p>Moving some child object to become top-level object:</p>
<p><code>UPDATE objects SET parent_id = NULL WHERE id = 3;<br />
SELECT * FROM objects;<br />
 id | codename | printable_name | some_property | parent_id<br />
----+----------+----------------+---------------+-----------<br />
  1 | a        | [null]         |        [null] |    [null]<br />
  2 | b        | [null]         |        [null] |    [null]<br />
  3 | c        | [null]         |        [null] |    [null]<br />
  4 | d        | [null]         |        [null] |         2<br />
  5 | e        | [null]         |        [null] |         3<br />
(5 rows)<br />
SELECT * FROM objects_tree;<br />
 id | parent_id | child_id | depth<br />
----+-----------+----------+-------<br />
  1 |         1 |        1 |     0<br />
  2 |         2 |        2 |     0<br />
  3 |         3 |        3 |     0<br />
  5 |         4 |        4 |     0<br />
  6 |         2 |        4 |     1<br />
  7 |         5 |        5 |     0<br />
  8 |         3 |        5 |     1<br />
(7 rows)</code></p>
<p>This looks OK.</p>
<p>Now, let's move some top-level object to become child object:</p>
<p><code>UPDATE objects SET parent_id = 5 WHERE id = 2;<br />
SELECT * FROM objects;<br />
 id | codename | printable_name | some_property | parent_id<br />
----+----------+----------------+---------------+-----------<br />
  1 | a        | [null]         |        [null] |    [null]<br />
  2 | b        | [null]         |        [null] |         5<br />
  3 | c        | [null]         |        [null] |    [null]<br />
  4 | d        | [null]         |        [null] |         2<br />
  5 | e        | [null]         |        [null] |         3<br />
(5 rows)<br />
SELECT * FROM objects_tree ORDER BY depth;<br />
 id | parent_id | child_id | depth<br />
----+-----------+----------+-------<br />
  1 |         1 |        1 |     0<br />
  2 |         2 |        2 |     0<br />
  3 |         3 |        3 |     0<br />
  5 |         4 |        4 |     0<br />
  7 |         5 |        5 |     0<br />
  8 |         3 |        5 |     1<br />
 10 |         5 |        2 |     1<br />
  6 |         2 |        4 |     1<br />
 11 |         3 |        2 |     2<br />
 12 |         5 |        4 |     2<br />
 13 |         3 |        4 |     3<br />
(11 rows)</code></p>
<p>OK. And the last way to update: move some child object under new parent:</p>
<p><code>UPDATE objects SET parent_id = 1 WHERE id = 5;<br />
SELECT * FROM objects;<br />
 id | codename | printable_name | some_property | parent_id<br />
----+----------+----------------+---------------+-----------<br />
  1 | a        | [null]         |        [null] |    [null]<br />
  2 | b        | [null]         |        [null] |         5<br />
  3 | c        | [null]         |        [null] |    [null]<br />
  4 | d        | [null]         |        [null] |         2<br />
  5 | e        | [null]         |        [null] |         1<br />
(5 rows)<br />
SELECT * FROM objects_tree ORDER BY depth;<br />
 id | parent_id | child_id | depth<br />
----+-----------+----------+-------<br />
  1 |         1 |        1 |     0<br />
  2 |         2 |        2 |     0<br />
  3 |         3 |        3 |     0<br />
  5 |         4 |        4 |     0<br />
  7 |         5 |        5 |     0<br />
 10 |         5 |        2 |     1<br />
 14 |         1 |        5 |     1<br />
  6 |         2 |        4 |     1<br />
 12 |         5 |        4 |     2<br />
 15 |         1 |        2 |     2<br />
 16 |         1 |        4 |     3<br />
(11 rows)</code></p>
<p>Looks like working.</p>
<p>Now, I promised that I will tell you why we need record with depth 0 and why we need depth column.</p>
<p>Let's assume our objects are categories. And we have some products in these categories. Like this:</p>
<p><code>CREATE TABLE products (<br />
    id          SERIAL PRIMARY KEY,<br />
    category_id INT4 NOT NULL REFERENCES objects (id),<br />
    ...<br />
);</code></p>
<p>It is quite common to ask database for all products in given category and it's subcategories.</p>
<p>Now, I can simply:</p>
<p><code>SELECT<br />
    p.*<br />
FROM<br />
    products p<br />
    join objects_tree c on p.category_id = c.child_id<br />
WHERE<br />
    c.parent_id = &lt;SOME_ID&gt;;</code></p>
<p>If I hadn't add these &#8220;depth=0&#8243; rows, I would have to write it as:</p>
<p><code>SELECT<br />
    p.*<br />
FROM<br />
    products p<br />
    join objects_tree c on p.category_id = c.child_id<br />
WHERE<br />
    c.parent_id = &lt;SOME_ID&gt;<br />
UNION ALL<br />
SELECT<br />
    *<br />
FROM<br />
    products<br />
WHERE<br />
    category_id = &lt;SOME_ID&gt;;</code></p>
<p>Ouch.</p>
<p>Second, absolutely unnecessary scan (indexable of course, but unnecessary anyway) of products table.</p>
<p>Plus &#8211; it is not as simple to write as the first query, and my goal was to make it as simple as possible.</p>
<p>And why do we need depth column?</p>
<p>Let's stay with this categories example. When user is <i>in</i> some category, we would like to show him <i>path</i> to this category. So he could easily move to some parent category.</p>
<p>Now, it's pretty simple:</p>
<p><code>SELECT<br />
    o.*<br />
FROM<br />
    objects o<br />
    join objects_tree t on o.id = t.parent_id<br />
WHERE<br />
    t.child_id = 4<br />
ORDER BY<br />
    t.depth DESC;</code></p>
<p>Try to do it without depth column <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  of course you could assume that lower id means category higher in hierarchy, but since one can move objects in tree freely, there is no guarantee that this will be always true.</p>
<p>Now.</p>
<p>As for moving objects in tree freely.</p>
<p>We should forbid moves that would create loops:</p>
<p><code>CREATE OR REPLACE FUNCTION tree_objects_bu() RETURNS TRIGGER AS<br />
$BODY$<br />
DECLARE<br />
BEGIN<br />
    IF NEW.id &lt;&gt; OLD.id THEN<br />
        RAISE EXCEPTION 'Changing ids is forbidden.';<br />
    END IF;<br />
    IF NOT OLD.parent_id IS DISTINCT FROM NEW.parent_id THEN<br />
        RETURN NEW;<br />
    END IF;<br />
    IF NEW.parent_id IS NULL THEN<br />
        RETURN NEW;<br />
    END IF;<br />
    PERFORM 1 FROM objects_tree WHERE ( parent_id, child_id ) = ( NEW.id, NEW.parent_id );<br />
    IF FOUND THEN<br />
        RAISE EXCEPTION 'Update blocked, because it would create loop in tree.';<br />
    END IF;<br />
    RETURN NEW;<br />
END;<br />
$BODY$<br />
LANGUAGE 'plpgsql';<br />
CREATE TRIGGER tree_objects_bu BEFORE UPDATE ON objects FOR EACH ROW EXECUTE PROCEDURE tree_objects_bu();</code></p>
<p>As you might noticed &#8211; I also added condition that would fail the update in case id got changed. Changing of ids is complicated task, and I think it shouldn't be done. If you don't like this &#8211; you can easily remove 3 lines from the function.</p>
<p>Now, when I try to create loop in tree:</p>
<p><code>UPDATE objects SET parent_id = 4 WHERE id = 1;<br />
ERROR:  Update blocked, because it would create loop in tree.</code></p>
<p>Great.</p>
<p>Now. Another task for our tree. Let's say we want to generate urls for categories based on their codenames and position in tree.</p>
<p>For this I will need another field in objects table. This field will never be null, but I can't make it &#8220;not null", as this would force application to put some data there.</p>
<p>So, lets:</p>
<p><code>ALTER TABLE objects add column tree_path TEXT;</code></p>
<p>Just to remind you, now the objects table looks like this:</p>
<p><code>                             Table "public.objects"<br />
     Column     |  Type   |                      Modifiers<br />
----------------+---------+------------------------------------------------------<br />
 id             | integer | not null default nextval('objects_id_seq'::regclass)<br />
 codename       | text    | not null<br />
 printable_name | text    |<br />
 some_property  | integer |<br />
 parent_id      | integer |<br />
 tree_path      | text    |<br />
Indexes:<br />
    "objects_pkey" PRIMARY KEY, btree (id)<br />
    "objects_codename_key" UNIQUE, btree (codename)<br />
Foreign-key constraints:<br />
    "objects_parent_id_fkey" FOREIGN KEY (parent_id) REFERENCES objects(id)<br />
Referenced by:<br />
  "objects_parent_id_fkey" IN objects FOREIGN KEY (parent_id) REFERENCES objects(id)<br />
  "objects_tree_child_id_fkey" IN objects_tree FOREIGN KEY (child_id) REFERENCES objects(id) ON DELETE CASCADE<br />
  "objects_tree_parent_id_fkey" IN objects_tree FOREIGN KEY (parent_id) REFERENCES objects(id) ON DELETE CASCADE<br />
Triggers:<br />
    tree_objects_ai AFTER INSERT ON objects FOR EACH ROW EXECUTE PROCEDURE tree_objects_ai()<br />
    tree_objects_au AFTER UPDATE ON objects FOR EACH ROW EXECUTE PROCEDURE tree_objects_au()<br />
    tree_objects_bu BEFORE UPDATE ON objects FOR EACH ROW EXECUTE PROCEDURE tree_objects_bu()</code></p>
<p>And now we have to fill the information in this column.</p>
<p>2 simple (or not so simple) triggers:</p>
<p><code>CREATE OR REPLACE FUNCTION tree_path_objects_bi() RETURNS TRIGGER AS<br />
$BODY$<br />
DECLARE<br />
BEGIN<br />
    IF NEW.parent_id IS NULL THEN<br />
        NEW.tree_path := NEW.codename;<br />
    ELSE<br />
        SELECT tree_path || '/' || NEW.codename INTO NEW.tree_path FROM objects WHERE id = NEW.parent_id;<br />
    END IF;<br />
    RETURN NEW;<br />
END;<br />
$BODY$<br />
LANGUAGE 'plpgsql';<br />
CREATE TRIGGER tree_path_objects_bi BEFORE INSERT ON objects FOR EACH ROW EXECUTE PROCEDURE tree_path_objects_bi();</code></p>
<p><code>CREATE OR REPLACE FUNCTION tree_path_objects_bu() RETURNS TRIGGER AS<br />
$BODY$<br />
DECLARE<br />
    replace_from TEXT := '^';<br />
    replace_to   TEXT := '';<br />
BEGIN<br />
    IF NOT OLD.parent_id IS distinct FROM NEW.parent_id THEN<br />
        RETURN NEW;<br />
    END IF;<br />
    IF OLD.parent_id IS NOT NULL THEN<br />
        SELECT '^' || tree_path || '/' INTO replace_from FROM objects WHERE id = OLD.parent_id;<br />
    END IF;<br />
    IF NEW.parent_id IS NOT NULL THEN<br />
        SELECT tree_path || '/' INTO replace_to FROM objects WHERE id = NEW.parent_id;<br />
    END IF;<br />
    NEW.tree_path := regexp_replace( NEW.tree_path, replace_from, replace_to );<br />
    UPDATE objects SET tree_path = regexp_replace(tree_path, replace_from, replace_to ) WHERE id in (SELECT child_id FROM objects_tree WHERE parent_id = NEW.id AND depth &gt; 0);<br />
    RETURN NEW;<br />
END;<br />
$BODY$<br />
LANGUAGE 'plpgsql';<br />
CREATE TRIGGER tree_path_objects_bu BEFORE UPDATE ON objects FOR EACH ROW EXECUTE PROCEDURE tree_path_objects_bu();</code></p>
<p>Now, let's delete all rows, and reinsert first 5 rows:</p>
<p><code>DELETE FROM objects;<br />
INSERT INTO objects (id, codename, parent_id) VALUES (1, 'a', NULL), (2, 'b', NULL), (3, 'c', 1), (4, 'd', 2), (5, 'e', 3);<br />
SELECT * FROM objects;<br />
 id | codename | printable_name | some_property | parent_id | tree_path<br />
----+----------+----------------+---------------+-----------+-----------<br />
  1 | a        | [null]         |        [null] |    [null] | a<br />
  2 | b        | [null]         |        [null] |    [null] | b<br />
  3 | c        | [null]         |        [null] |         1 | a/c<br />
  4 | d        | [null]         |        [null] |         2 | b/d<br />
  5 | e        | [null]         |        [null] |         3 | a/c/e<br />
(5 rows)</code></p>
<p>Now, lets do some changes:</p>
<p><code>UPDATE objects SET parent_id = NULL WHERE id = 3;<br />
UPDATE objects SET parent_id = 5 WHERE id = 2;<br />
UPDATE objects SET parent_id = 1 WHERE id = 5;<br />
SELECT * FROM objects;<br />
 id | codename | printable_name | some_property | parent_id | tree_path<br />
----+----------+----------------+---------------+-----------+-----------<br />
  1 | a        | [null]         |        [null] |    [null] | a<br />
  3 | c        | [null]         |        [null] |    [null] | c<br />
  2 | b        | [null]         |        [null] |         5 | a/e/b<br />
  4 | d        | [null]         |        [null] |         2 | a/e/b/d<br />
  5 | e        | [null]         |        [null] |         1 | a/e<br />
(5 rows)</code></p>
<p>Looks cool. What's more &#8211; you can do something like this:</p>
<p><code>SELECT id, tree_path, codename, parent_id FROM objects ORDER BY tree_path;<br />
 id | tree_path | codename | parent_id<br />
----+-----------+----------+-----------<br />
  1 | a         | a        |    [null]<br />
  5 | a/e       | e        |         1<br />
  2 | a/e/b     | b        |         5<br />
  4 | a/e/b/d   | d        |         2<br />
  3 | c         | c        |    [null]<br />
(5 rows)</code></p>
<p>which perhaps doesn't look impressive, but let's add some more records:</p>
<p><code>INSERT INTO objects (id, codename, parent_id) VALUES (6, 'f', 3), (7, 'g', 3), (8, 'h', 6), (9, 'i', 7), (10, 'j', 8);<br />
SELECT id, tree_path, codename, parent_id FROM objects ORDER BY tree_path;<br />
 id | tree_path | codename | parent_id<br />
----+-----------+----------+-----------<br />
  1 | a         | a        |    [null]<br />
  5 | a/e       | e        |         1<br />
  2 | a/e/b     | b        |         5<br />
  4 | a/e/b/d   | d        |         2<br />
  3 | c         | c        |    [null]<br />
  6 | c/f       | f        |         3<br />
  8 | c/f/h     | h        |         6<br />
 10 | c/f/h/j   | j        |         8<br />
  7 | c/g       | g        |         3<br />
  9 | c/g/i     | I        |         7<br />
(10 rows)</code></p>
<p>Nice. But what if I'd like to have c/g <b>before</b> c/f ?</p>
<p>This will require input from user/application &#8211; saying what order should we have.</p>
<p>Now. We'd like to keep it as simple as possible, both in selects and in writes. To make it as simple we will make this field unique. We could make it unique in pair (parent_id, ordering), but then moving objects in tree would become difficult.</p>
<p>So, next modification of our table:</p>
<p><code>ALTER TABLE objects add ordering INT4 UNIQUE;</code></p>
<p>Now. This field really shouldn't be null &#8211; otherwise we could get 2 elements with null ordering, and we wouldn't be able to unambiguously order them.</p>
<p>So, let's:</p>
<p><code>UPDATE objects SET ordering = id;<br />
ALTER TABLE objects ALTER column ordering SET NOT NULL;</code></p>
<p>Now. It's great that we have this field, but sorting with it will be at the very least tedious.</p>
<p>What I mean. While getting all children of given object, ordered, is simple:</p>
<p><code>select * from objects where parent_id = 3 order by ordering;</code></p>
<p>There is next-to-no way to get it properly sorted for whole tree at once.</p>
<p>To allow sorting of whole tree (or just some branch) we need to add new column, also trigger-filled, which will be used for sorting. This field will be globally unique (just like tree_path):</p>
<p><code>ALTER TABLE objects add column ordering_path TEXT UNIQUE;</code></p>
<p>This field will be filled by these triggers:</p>
<p><code>CREATE OR REPLACE FUNCTION tree_ordering_path_objects_bi() RETURNS TRIGGER AS<br />
$BODY$<br />
DECLARE<br />
BEGIN<br />
    IF NEW.parent_id IS NULL THEN<br />
        NEW.ordering_path := to_char(NEW.ordering, '000000000000');<br />
    ELSE<br />
        SELECT ordering_path || '/' || to_char(NEW.ordering, '000000000000') INTO NEW.ordering_path FROM objects WHERE id = NEW.parent_id;<br />
    END IF;<br />
    RETURN NEW;<br />
END;<br />
$BODY$<br />
LANGUAGE 'plpgsql';<br />
CREATE TRIGGER tree_ordering_path_objects_bi BEFORE INSERT ON objects FOR EACH ROW EXECUTE PROCEDURE tree_ordering_path_objects_bi();</code></p>
<p><code>CREATE OR REPLACE FUNCTION tree_ordering_path_objects_bu() RETURNS TRIGGER AS<br />
$BODY$<br />
DECLARE<br />
BEGIN<br />
    IF OLD.ordering = NEW.ordering THEN<br />
        RETURN NEW;<br />
    END IF;<br />
    IF NEW.parent_id IS NULL THEN<br />
        NEW.ordering_path := to_char(NEW.ordering, '000000000000');<br />
    ELSE<br />
        SELECT ordering_path || '/' || to_char(NEW.ordering, '000000000000') INTO NEW.ordering_path FROM objects WHERE id = NEW.parent_id;<br />
    END IF;<br />
    UPDATE objects SET ordering_path = regexp_replace(ordering_path, '^' || OLD.ordering_path, NEW.ordering_path )<br />
        WHERE id in (SELECT child_id FROM objects_tree WHERE parent_id = NEW.id AND depth &gt; 0);<br />
    RETURN NEW;<br />
END;<br />
$BODY$<br />
LANGUAGE 'plpgsql';<br />
CREATE TRIGGER tree_ordering_path_objects_bu BEFORE UPDATE ON objects FOR EACH ROW EXECUTE PROCEDURE tree_ordering_path_objects_bu();</code></p>
<p>Now, to show how it all works, I will delete all content from objects, add new data:</p>
<p><code>DELETE FROM objects;<br />
INSERT INTO objects (id, codename, parent_id, ordering) VALUES<br />
    (1, 'a', NULL, 100),<br />
    (2, 'b', NULL, 200),<br />
    (3, 'c', 1, 300),<br />
    (4, 'd', 2, 400),<br />
    (5, 'e', 3, 500),<br />
    (6, 'f', 3, 600),<br />
    (7, 'g', 3, 700),<br />
    (8, 'h', 6, 800),<br />
    (9, 'i', 7, 900),<br />
    (10, 'j', 8, 1000);</code></p>
<p>And how it looks in table?</p>
<p><code>SELECT id, tree_path, ordering_path, ordering FROM objects ORDER BY ordering_path;<br />
 id | tree_path |                             ordering_path                             | ordering<br />
----+-----------+-----------------------------------------------------------------------+----------<br />
  1 | a         |  000000000100                                                         |      100<br />
  3 | a/c       |  000000000100/ 000000000300                                           |      300<br />
  5 | a/c/e     |  000000000100/ 000000000300/ 000000000500                             |      500<br />
  6 | a/c/f     |  000000000100/ 000000000300/ 000000000600                             |      600<br />
  8 | a/c/f/h   |  000000000100/ 000000000300/ 000000000600/ 000000000800               |      800<br />
 10 | a/c/f/h/j |  000000000100/ 000000000300/ 000000000600/ 000000000800/ 000000001000 |     1000<br />
  7 | a/c/g     |  000000000100/ 000000000300/ 000000000700                             |      700<br />
  9 | a/c/g/i   |  000000000100/ 000000000300/ 000000000700/ 000000000900               |      900<br />
  2 | b         |  000000000200                                                         |      200<br />
  4 | b/d       |  000000000200/ 000000000400                                           |      400<br />
(10 rows)</code></p>
<p>So, now let's test some updates:</p>
<p><code>UPDATE objects SET ordering = 550 WHERE id = 7;<br />
SELECT id, tree_path, ordering_path, ordering FROM objects ORDER BY ordering_path;<br />
 id | tree_path |                             ordering_path                             | ordering<br />
----+-----------+-----------------------------------------------------------------------+----------<br />
  1 | a         |  000000000100                                                         |      100<br />
  3 | a/c       |  000000000100/ 000000000300                                           |      300<br />
  5 | a/c/e     |  000000000100/ 000000000300/ 000000000500                             |      500<br />
  7 | a/c/g     |  000000000100/ 000000000300/ 000000000550                             |      550<br />
  9 | a/c/g/i   |  000000000100/ 000000000300/ 000000000550/ 000000000900               |      900<br />
  6 | a/c/f     |  000000000100/ 000000000300/ 000000000600                             |      600<br />
  8 | a/c/f/h   |  000000000100/ 000000000300/ 000000000600/ 000000000800               |      800<br />
 10 | a/c/f/h/j |  000000000100/ 000000000300/ 000000000600/ 000000000800/ 000000001000 |     1000<br />
  2 | b         |  000000000200                                                         |      200<br />
  4 | b/d       |  000000000200/ 000000000400                                           |      400<br />
(10 rows)</code></p>
<p><code>UPDATE objects SET ordering = 50 WHERE id = 2;<br />
SELECT id, tree_path, ordering_path, ordering FROM objects ORDER BY ordering_path;<br />
 id | tree_path |                             ordering_path                             | ordering<br />
----+-----------+-----------------------------------------------------------------------+----------<br />
  2 | b         |  000000000050                                                         |       50<br />
  4 | b/d       |  000000000050/ 000000000400                                           |      400<br />
  1 | a         |  000000000100                                                         |      100<br />
  3 | a/c       |  000000000100/ 000000000300                                           |      300<br />
  5 | a/c/e     |  000000000100/ 000000000300/ 000000000500                             |      500<br />
  7 | a/c/g     |  000000000100/ 000000000300/ 000000000550                             |      550<br />
  9 | a/c/g/i   |  000000000100/ 000000000300/ 000000000550/ 000000000900               |      900<br />
  6 | a/c/f     |  000000000100/ 000000000300/ 000000000600                             |      600<br />
  8 | a/c/f/h   |  000000000100/ 000000000300/ 000000000600/ 000000000800               |      800<br />
 10 | a/c/f/h/j |  000000000100/ 000000000300/ 000000000600/ 000000000800/ 000000001000 |     1000<br />
(10 rows)</code></p>
<p><code>UPDATE objects SET ordering = 5 WHERE id = 1;<br />
SELECT id, tree_path, ordering_path, ordering FROM objects ORDER BY ordering_path;<br />
 id | tree_path |                             ordering_path                             | ordering<br />
----+-----------+-----------------------------------------------------------------------+----------<br />
  1 | a         |  000000000005                                                         |        5<br />
  3 | a/c       |  000000000005/ 000000000300                                           |      300<br />
  5 | a/c/e     |  000000000005/ 000000000300/ 000000000500                             |      500<br />
  7 | a/c/g     |  000000000005/ 000000000300/ 000000000550                             |      550<br />
  9 | a/c/g/i   |  000000000005/ 000000000300/ 000000000550/ 000000000900               |      900<br />
  6 | a/c/f     |  000000000005/ 000000000300/ 000000000600                             |      600<br />
  8 | a/c/f/h   |  000000000005/ 000000000300/ 000000000600/ 000000000800               |      800<br />
 10 | a/c/f/h/j |  000000000005/ 000000000300/ 000000000600/ 000000000800/ 000000001000 |     1000<br />
  2 | b         |  000000000050                                                         |       50<br />
  4 | b/d       |  000000000050/ 000000000400                                           |      400<br />
(10 rows)</code></p>
<p>OK. So now we have trees with easy way to sort elements in them.</p>
<p>That basically concludes this post, as a last thing.</p>
<p>At one of companies I worked for we had this problem of getting 2nd level element in tree, that would be parent of given object.</p>
<p>For example, let's assume you have geographical tree. Top-level elements are countries, 2nd level are states, 3rd level are cities, 4th level are districts, and 5th level are streets.</p>
<p>Now, somebody tells you &#8211; I have this street with id 123, and I want to know in which state (or city or whatever) it is.</p>
<p>With standard adjacency-list way &#8211; oops, welcome loops. With nested sets &#8211; it's simpler, but you will be looking at some subselects.</p>
<p>And here? It's pretty simple:</p>
<p><code>select o.*<br />
from objects o join objects_tree t on o.id = t.parent_id<br />
where t.child_id = 123<br />
order by t.depth desc<br />
limit 1 offset 1;</code></p>
<p>If I would add &#8220;tree_level" (also calculated on triggers of course) to objects_tree table, I could even do it without order/limit.</p>
<p>Now. At the end &#8211; you might be scared by amount of triggers in this code. Yes. There are some. You could easily get rid of some of them by simply bundling functionalities in single trigger.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">26 comments <a href='http://www.depesz.com/2008/04/11/my-take-on-trees-in-sql/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-25797" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-25797" title="">#</a></span> <a href='http://justatheory.com/' rel='external nofollow' class='url'>Theory</a></div>  <div class="date">Apr 11, 2008</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/397f829eea921e02e35c37c22f9e6d3b?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Great post, depesz, as usual. Thanks so much for putting this together! Properly creating tree structures in the database has been an abiding interest of mine since we created category trees in [Bricolage](<a href="http://bricolage.cc/" rel="nofollow">http://bricolage.cc/</a> &#8220;Bricolage CMS&#8221;) back in 2000. This seems like a *really* good solution, and easy to do, too.</p>
<p>I do have a few questions and comments, though, if you&#8217;ll indulge me.</p>
<p>* In the first trigger, you have this `INSERT` statement:</p>
<p>    INSERT INTO objects_tree (parent_id, child_id, depth)<br />
    SELECT x.parent_id, NEW.id, x.depth + 1<br />
      FROM objects_tree x WHERE x.child_id = NEW.parent_id</p>
<p>Is there not a race condition in that <code>x.depth + 1</code> bit? What if another process updates x.depth before this one commits? That&#8217;s possible, no? If so, you&#8217;d need to lock those rows by putting a `FOR UPDATE` clause in that query. But maybe I&#8217;m missing something here?</p>
<p>* I think you omitted an `ON DELETE` trigger, yes?</p>
<p>* I really like the `IS DISTINCT FROM` clause. I never noticed it before! Personally, however, I&#8217;d find this easier to read:</p>
<p>  IF OLD.parent_id IS NOT DISTINCT FROM NEW.parent_id THEN</p>
<p>Than this:</p>
<p>  IF NOT OLD.parent_id IS DISTINCT FROM NEW.parent_id THEN</p>
<p>At least in English.</p>
<p>* For the loop prevention, should you not also have a trigger to prevent loops on `INSERT`?</p>
<p>* I didn&#8217;t really follow the whole &#8220;ordering&#8221; column bit. Maybe it&#8217;s just because I always think of a file system when looking at this problem, so having the &#8220;tree_path&#8221; column always suits that need. So the ordering stuff seems like an extra layer for which I&#8217;m not sure of the use case.</p>
<p>* What would a &#8220;tree_level&#8221; column do in that last example? Maybe that&#8217;s for another post?</p>
<p>Anyway, thanks again for the great post, and for tolerating my wheedling. <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" /> </p>
<p>—Theory</p>
	</li>
		
		
			
<li class="mycomment" id="comment-25799" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-25799" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Apr 11, 2008</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Theory:</p>
<p>1. Race condition in INSERT. Technically &#8211; yes. But it would require nearly simultaneous addition to tree and tree modification (element moved).<br />
   I could get rid of the issue by issuing SELECT &#8230; FOR UPDATE first, but I think the risk is not high enough to justify additional workload for locking.</p>
<p>2. ON DELETE triggers are not necessary because I created FOREIGN KEYS with &#8220;ON DELETE CASCADE&#8221; option.</p>
<p>3. The problem is IS NOT DISTINCT FROM is that it wasn&#8217;t available from beginning (if we count beginning as the time when IS DISTINCT FROM was available). So I got used to use &#8220;NOT&#8221; before condition.</p>
<p>4. Loops on INSERT &#8211; I don&#8217;t think it is possible to add a loop with insert.</p>
<p>5. Ordering stuff in file system case is absolutely obsolete. But it is of great use in E-commerce solutions. Without it we would be forced to use alphabetical sorts. But somebody might want to have &#8220;Health care products&#8221; before &#8220;Car care products&#8221; on his website <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>6. If I had tree_level column I would be able to write the query like this:</p>
<p><code>select o.*<br />
from objects o join objects_tree t on o.id = t.parent_id<br />
where t.child_id = 123 and o.tree_level = 2;</code></p>
<p>Benefit from this might be not obvious at the first sight, so if You don&#8217;t see it (the benefit) explanation: query with order/limit/offset cannot be easily joined with something else.</p>
	</li>
		
		
			
<li class="odd" id="comment-25800" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-25800" title="">#</a></span> xor</div>  <div class="date">Apr 11, 2008</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/83630c19c70dea3bc5a670ccb3fc3912?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>This is my version of tree structure un functions for tree structure representation <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  I use these structure and functions for classifiers&#8230; (only 1 table for all simple classifiers). In this case Update and Delete are standart SQL query, there not need any triggers&#8230;<br />
&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>
<p>CREATE TABLE &#8220;public&#8221;.&#8221;tree&#8221; (<br />
  &#8220;id&#8221; SERIAL,<br />
  &#8220;_id&#8221; INTEGER,<br />
  &#8220;name&#8221; VARCHAR(100),<br />
  CONSTRAINT &#8220;tree_pkey&#8221; PRIMARY KEY(&#8220;id&#8221;),<br />
  CONSTRAINT &#8220;tree__id_fk&#8221; FOREIGN KEY (&#8220;_id&#8221;)<br />
    REFERENCES &#8220;public&#8221;.&#8221;tree&#8221;(&#8220;id&#8221;)<br />
    ON DELETE RESTRICT<br />
    ON UPDATE CASCADE<br />
    NOT DEFERRABLE<br />
) WITHOUT OIDS;</p>
<p>/* &#8212; sample data &#8211;<br />
INSERT INTO &#8220;public&#8221;.&#8221;tree&#8221; (&#8220;id&#8221;, &#8220;_id&#8221;, &#8220;name&#8221;) VALUES (1, NULL, &#8216;a_name&#8217;);<br />
INSERT INTO &#8220;public&#8221;.&#8221;tree&#8221; (&#8220;id&#8221;, &#8220;_id&#8221;, &#8220;name&#8221;) VALUES (2, NULL, &#8216;b_name&#8217;);<br />
INSERT INTO &#8220;public&#8221;.&#8221;tree&#8221; (&#8220;id&#8221;, &#8220;_id&#8221;, &#8220;name&#8221;) VALUES (3, 1, &#8216;aa_name&#8217;);<br />
INSERT INTO &#8220;public&#8221;.&#8221;tree&#8221; (&#8220;id&#8221;, &#8220;_id&#8221;, &#8220;name&#8221;) VALUES (4, 2, &#8216;bb_name&#8217;);<br />
INSERT INTO &#8220;public&#8221;.&#8221;tree&#8221; (&#8220;id&#8221;, &#8220;_id&#8221;, &#8220;name&#8221;) VALUES (6, 3, &#8216;aaa2_name&#8217;);<br />
INSERT INTO &#8220;public&#8221;.&#8221;tree&#8221; (&#8220;id&#8221;, &#8220;_id&#8221;, &#8220;name&#8221;) VALUES (5, 3, &#8216;aaa1_name&#8217;);<br />
INSERT INTO &#8220;public&#8221;.&#8221;tree&#8221; (&#8220;id&#8221;, &#8220;_id&#8221;, &#8220;name&#8221;) VALUES (7, 4, &#8216;bbb_name&#8217;);<br />
*/</p>
<p>CREATE TYPE &#8220;public&#8221;.&#8221;t_tree_level&#8221; AS (<br />
  &#8220;id&#8221; INTEGER,<br />
  &#8220;_id&#8221; INTEGER,<br />
  &#8220;name&#8221; VARCHAR,<br />
  &#8220;level&#8221; INTEGER<br />
);</p>
<p>/* returns tree child rows + depth */<br />
CREATE OR REPLACE FUNCTION &#8220;public&#8221;.&#8221;get_tree&#8221; (root integer, depth integer) RETURNS SETOF &#8220;public&#8221;.&#8221;t_tree_level&#8221; AS<br />
$body$<br />
DECLARE<br />
       tempRow1 t_tree_level%ROWTYPE;<br />
       tempRow2 t_tree_level%ROWTYPE;<br />
BEGIN</p>
<p>     FOR tempRow1 IN<br />
         SELECT id, _id, name, depth<br />
         FROM tree<br />
         WHERE _id = root<br />
         ORDER BY name<br />
     LOOP<br />
         RETURN NEXT tempRow1;</p>
<p>            FOR tempRow2 IN<br />
                SELECT id, _id, name, level<br />
                FROM get_tree(tempRow1.id, depth+1)<br />
            LOOP<br />
                RETURN NEXT tempRow2;<br />
            END LOOP;<br />
     END LOOP;<br />
RETURN;</p>
<p>END;<br />
$body$<br />
LANGUAGE &#8216;plpgsql&#8217; VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;</p>
<p>/* returns full tree */<br />
CREATE OR REPLACE FUNCTION &#8220;public&#8221;.&#8221;get_tree&#8221; () RETURNS SETOF &#8220;public&#8221;.&#8221;t_tree_level&#8221; AS<br />
$body$<br />
DECLARE<br />
       tempRow  t_tree_level%ROWTYPE;<br />
       tempRow1 t_tree_level%ROWTYPE;<br />
BEGIN<br />
     FOR tempRow IN<br />
         SELECT *<br />
         FROM tree<br />
         WHERE _id is null<br />
     LOOP<br />
         tempRow.level=0;<br />
         RETURN NEXT tempRow;</p>
<p>            FOR tempRow1 IN<br />
                SELECT id, _id, name, level<br />
                FROM get_tree(tempRow.id,tempRow.level+1)<br />
            LOOP<br />
                RETURN NEXT tempRow1;<br />
            END LOOP;</p>
<p>     END LOOP;<br />
     RETURN;<br />
END;<br />
$body$<br />
LANGUAGE &#8216;plpgsql&#8217; VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;</p>
<p>/* tree table with sample data  */<br />
SELECT * FROM tree;<br />
id	_id	name<br />
1		a_name<br />
2		b_name<br />
3	1	aa_name<br />
4	2	bb_name<br />
5	3	aaa1_name<br />
6	3	aaa2_name<br />
7	4	bbb_name</p>
<p>/* ordered tree with child_id (id) parent_id (_id), name and level (depth) */<br />
SELECT * FROM get_tree();<br />
id	_id	name	    level<br />
1		a_name	    0<br />
3	1	aa_name	    1<br />
5	3	aaa1_name   2<br />
6	3	aaa2_name   2<br />
2		b_name	    0<br />
4	2	bb_name	    1<br />
7	4	bbb_name    2</p>
<p>/* select part of tree */<br />
SELECT * FROM get_tree(2,1); /* parent_id=2 AND level/depth starts with=1 */<br />
id	_id	name	level<br />
4	2	bb_name    1<br />
7	4	bbb_name   2</p>
	</li>
		
		
			
<li class="mycomment" id="comment-25801" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-25801" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Apr 11, 2008</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@xor:<br />
This is pretty standard adjacency list approach. It is simple, but I don&#8217;t like it because it requires loops to get data.</p>
	</li>
		
		
			
<li class="odd" id="comment-25802" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-25802" title="">#</a></span> <a href='http://127.0.0.1/' rel='external nofollow' class='url'>Jorge L. Borges</a></div>  <div class="date">Apr 11, 2008</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/c030bf5a43e74b545f63b02cd37d01e2?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hello Hubert.<br />
This&#8217;s not the first time I read something really interesting in your web site.<br />
At least in my not short experience trees are much less often modified than traversed.<br />
Maybe one can focus more on &#8220;faster to execute&#8221; solutions than &#8220;easier to write&#8221; solutions. Yours seems to match both and makes it more interesting than others&#8217;.<br />
Thanks a lot for this anything but a small gem!</p>
	</li>
		
		
			
<li class="odd" id="comment-25812" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-25812" title="">#</a></span> xor</div>  <div class="date">Apr 12, 2008</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/83630c19c70dea3bc5a670ccb3fc3912?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>depesz you rigth about loops (i&#8217;m  also did&#8217;t like these loops), but sometimes, when row count in table is not large then this way is ok. Or sometimes when we know max_depth (and it is less than e.g. 5), then we can write static view with subqueries and result is similar. Your case is good for fast tree table reading <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  but when depth larger than 10 levels, then there is 10 times more rows&#8230; but if we look from performance &#8211; your solution is faster (in my mind)!<br />
Thanks! <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
	</li>
		
		
				
<li class="odd" id="comment-25834" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-25834" title="">#</a></span> quaker</div>  <div class="date">Apr 15, 2008</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d052248b1aa4498281ec6c79fdd2c7f9?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Great article. I was fighting with porting your solution to MySQL (I&#8217;ve inherited one project based on that database). In two words: big pain. With newest Mysql (5.0.51a):<br />
- i can&#8217;t raise exception &#8211; patch i pending, but time when it will be in mainline is uncertain (there are some dirty hacks, like assigning variable to integer to raise exception), i&#8217;ve to drop code that checked for infinite loops in trigger,<br />
- i can&#8217;t do simple UPDATE same_table SET col = value WHERE id IN (SELECT id FROM same_table WHERE &#8230;) &#8211; you can&#8217;t update table which is used in subselect, you must create temporary tables from select and then use it in update, temporary tables don&#8217;t disapear after trigger finishes/transaction commits, have to drop it by myself,<br />
- auto_increment value for column is assigned after BEFORE trigger, in BEFORE trigger is just 0, completely useless,<br />
- you can&#8217;t create before update triger on table same_table and then in it run update on the same table (even with WHERE securing your code from entering infinite loop), have to replace BEFORE UPDATE trigger with &#8220;stored procedure&#8221;, that worked.<br />
- regexp replace not exists in mysql, have to done dirty hacking with insert() function (not insert statement!),</p>
<p>I&#8217;m glad that such databases as PostgreSQL exists, and I can use in other projects.</p>
	</li>
		
		
					
<li class="odd" id="comment-26593" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-26593" title="">#</a></span> Ergo</div>  <div class="date">Sep 5, 2008</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d44b9ffbf34205a415062d08bd2a833f?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>There a small thing missing in one of the triggers:<br />
in tree_ordering_path_bu() there is:</p>
<p>IF OLD.ordering = NEW.ordering THEN&#8230;<br />
and there should be<br />
IF OLD.ordering = NEW.ordering AND OLD.parent_id = NEW.parent_id THEN&#8230;</p>
<p>cause when one is moving branches from one place to another, there may be no need to change the ordering, in that situation trigger was not relfecting the new ordering path that needed to be generated on element move without ordering change.</p>
	</li>
		
		
			
<li class="odd" id="comment-28331" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-28331" title="">#</a></span> Jenny</div>  <div class="date">Oct 28, 2009</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/bbc6e90e45ac205d0ebb544b8928f294?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>This is something I&#8217;ve been needing to do for years with my company website. This is by far the best solution I&#8217;ve found &#8212; much easier to understand than nested sets. And you&#8217;ve even solved the user-defined ordering issue! Thanks for posting your solution in such detail &#8212; you&#8217;ve laid out everything I need to implement this.</p>
	</li>
		
		
			
<li class="odd" id="comment-30068" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30068" title="">#</a></span> Mark Lawrence</div>  <div class="date">Jul 28, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/a83859e873fc4b8e07bb16bccf26bac6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I&#8217;ve just uploaded to CPAN (the Comprehensive Perl Archive Network) SQL::Tree &#8211; a module and associated command-line tool (sqltree) to automatically generate the implementation you&#8217;ve described here for any given table and column names. While writing this I also ended up porting things to SQLite.</p>
<p>The distribution can be downloaded (shortly) from here:</p>
<p>  <a href="http://search.cpan.org/~mlawren/SQL-Tree-0.01/" rel="nofollow">http://search.cpan.org/~mlawren/SQL-Tree-0.01/</a></p>
<p>or installed using the standard Perl cpan/cpanm tools. </p>
<p>The name SQL::Tree is simply what made sense to me, as you didn&#8217;t define one for your method in this article. If you think of something better I&#8217;m open to change.</p>
<p>Regards,<br />
Mark.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-30069" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30069" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jul 28, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Mark:<br />
Great. Thanks. Will test in free time.</p>
	</li>
		
		
			
<li class="odd" id="comment-30216" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30216" title="">#</a></span> Flip</div>  <div class="date">Aug 30, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Nice Job!</p>
<p>One thing still is tricky, at least to me. Is it possible to find the ID of, say, a/b/c/d/e/f without a &#8216;tree_path&#8217; column?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-30217" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30217" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Aug 30, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Flip:<br />
Sure, but it will make the query more complex.<br />
You can easily just use &#8220;array_agg&#8221; on nodes, ordered by depth, and compare it with given array which will contain path to node you&#8217;re looking for.</p>
	</li>
		
		
			
<li class="odd" id="comment-30218" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30218" title="">#</a></span> Flip</div>  <div class="date">Aug 30, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Thanks for the quick answer.</p>
<p>Of course the query would be a bit more complex, but using your solution at least doesn&#8217;t require heavy loops.</p>
<p>Thanks again!</p>
	</li>
		
		
			
<li class="odd" id="comment-30245" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30245" title="">#</a></span> Anonymous</div>  <div class="date">Sep 7, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/76af6f5412b08f14761a25a8e6fd8457?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>just a quick question. What if you wished to delete a row that had children. The triggers would currently reject the delete as a foreign key constraint. Can you alter the triggers to delete all the children or update the children that had the parent deleted to a new parent? </p>
<p>I have implemented this in a test environment but because I am not good at triggers I am struggling with a more intelligent delete.</p>
<p>This is a great approach, well done.</p>
<p>Thanks</p>
<p>rob</p>
	</li>
		
		
			
<li class="mycomment" id="comment-30246" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30246" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Sep 7, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Anonymous:<br />
well, it&#8217;s all possible. deleting all children or reattaching children &#8211; from trigger or from custom function.</p>
<p>Personally, I think that the cleaner solution is to prevent deletes if there are children, and so force earlier move of children wherever you want.</p>
	</li>
		
		
			
<li class="odd" id="comment-30708" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30708" title="">#</a></span> Marcin</div>  <div class="date">Dec 8, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/1a612e961c3e25d61009e380b549ff9b?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>What&#8217;s your approach to importing denormalized table representing tree structure (eg. from spreadsheet) to the 2-table structure you proposed?<br />
Is it better to write some VBA macro or import whole table into Postgres and then process data?</p>
<p>Thank!</p>
	</li>
		
		
			
<li class="mycomment" id="comment-30709" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30709" title="">#</a></span> <a href='http://depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Dec 8, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Marcin:<br />
it depends only on what&#8217;s available, and what is your favorite tool.</p>
	</li>
		
		
			
<li class="odd" id="comment-31874" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-31874" title="">#</a></span> Bald</div>  <div class="date">Dec 16, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Adjacency list in MySQL: <a href="http://4programmers.net/Z_pogranicza/Zaawansowane_drzewa_w_MySQL" rel="nofollow">http://4programmers.net/Z_pogranicza/Zaawansowane_drzewa_w_MySQL</a> (in polish)</p>
	</li>
		
		
			
<li class="odd" id="comment-34133" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-34133" title="">#</a></span> Wes Cravens</div>  <div class="date">Sep 20, 2011</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/b3ef5a549cf6608446a75692941708fe?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Do you know if this structure/technique has any heritage?  If not, do you mind if I use it in talks with reference and attribution as the &#8216;Depesz Tree&#8217;?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-34134" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-34134" title="">#</a></span> <a href='http://depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Sep 20, 2011</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Wes:<br />
I am not aware of any similar structure. We did develop it with colleagues at a company I worked several years ago, but we were not basing our work on any external materials.<br />
I do not object &#8211; it&#8217;s fine. I&#8217;m just not entirely sure if it&#8217;s worth being called specialized method &#8211; technically it&#8217;s adjacency list + some redundant info set with triggers.</p>
	</li>
		
		
			
<li class="odd" id="comment-34137" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-34137" title="">#</a></span> Wes Cravens</div>  <div class="date">Sep 20, 2011</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/b3ef5a549cf6608446a75692941708fe?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>&#8216;Trigger Tree&#8217; sounds better anyway. <img src="http://www.depesz.com/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley" />  In any case it&#8217;s very good.</p>
<p>Thanks!</p>
	</li>
		
		
			
<li class="odd" id="comment-39134" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-39134" title="">#</a></span> nagaraju</div>  <div class="date">Apr 1, 2013</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Excellent article i will use this solution to my project</p>
	</li>
		
		
		
	</ol>
	
	

	<ol class="bob">

	<li style="background:transparent;padding-left:0;"><h2>3 Trackback(s)</h2></li>
	

	<li id="comment-25828">
		Apr 14, 2008: DbRunas - My take on trees in SQL			</li>
	
		

	<li id="comment-26133">
		May 15, 2008: <a href='http://kod34fr33.wordpress.com/2008/05/06/adjacency-list-tree-on-mysql/' rel='external nofollow' class='url'>Adjacency list tree on Mysql &laquo; My Koding Playground</a>			</li>
	
		

	<li id="comment-26134">
		May 15, 2008: We&#8217;re Not Freak &raquo; Blog Archive &raquo; Adjacency list tree on MySQL			</li>
	
		

	</ol>

	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="1192" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="8b2d0e0e92" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="134"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">339 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">314 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">272 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">212 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">160 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">153 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">137 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">134 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">133 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">107 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

