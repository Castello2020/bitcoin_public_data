http://www.depesz.com/2010/06/15/to-rule-or-not-to-rule-that-is-the-question/
HTTP/1.1 200 OK
Server: nginx
Date: Tue, 22 Jul 2014 07:18:48 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=1723>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; To rule or not to rule &#8211; that is the question</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; To rule or not to rule &#8211; that is the question Comments Feed" href="http://www.depesz.com/2010/06/15/to-rule-or-not-to-rule-that-is-the-question/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2010/06/15/to-rule-or-not-to-rule-that-is-the-question/' />
<link rel='shortlink' href='http://www.depesz.com/?p=1723' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-1723">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2010/06/15/to-rule-or-not-to-rule-that-is-the-question/" rel="bookmark" title="Permanent Link to To rule or not to rule &#8211; that is the question">To rule or not to rule &#8211; that is the question</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>June 15th, 2010 by depesz | Tags: <a href="http://www.depesz.com/tag/benchmark/" rel="tag">benchmark</a>, <a href="http://www.depesz.com/tag/comparison/" rel="tag">comparison</a>, <a href="http://www.depesz.com/tag/opinion/" rel="tag">opinion</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/rule/" rel="tag">rule</a>, <a href="http://www.depesz.com/tag/rules/" rel="tag">rules</a>, <a href="http://www.depesz.com/tag/trigger/" rel="tag">trigger</a>, <a href="http://www.depesz.com/tag/triggers/" rel="tag">triggers</a> |  <a href="http://www.depesz.com/2010/06/15/to-rule-or-not-to-rule-that-is-the-question/#comments" title="Comment on To rule or not to rule &#8211; that is the question">26 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>Every now and then there is someone on IRC, mailing lists, or private contact which asks about <a href="http://www.postgresql.org/docs/current/interactive/sql-createrule.html">rules</a>.</p>
<p>My answer virtually always is: don't use rules. If you think that they solve your problem, think again. Why?</p>
<p><span id="more-1723"></span></p>
<p>Rules have been controversial for a very long time. I remember Jan Wieck talking on PostgreSQL conference in Poland years ago (I think it was 2000, but I'm not 100% sure), and saying stuff about rewrite or deprecating rule subsystem (sorry, it was <b>long</b> time ago, and my memory is not super sharp, so I don't recall his exact words).</p>
<p>Some people want to remove rules in their whole. Some just don't like to use them. Some like and do use them. Some overview about positions can be found in <a href="http://archives.postgresql.org/pgsql-hackers/2009-10/msg00249.php">thread</a> on pgsql-hackers mailing list.</p>
<p>So. What is the main point against rules? That they are very complicated, and not immediately understandable by even the most seasoned DBAs.</p>
<p>What escapes most people is that rules are not conditional engine to run another queries, but a way to modify queries and/or add more queries to flow.</p>
<p>Let's see an example. This (well, similar, not exactly the same letter-for-letter) was actually posted once on #postgresql on IRC. Someone wanted to use rules as insert-or-update. Test code:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span> test <span style="color: #66cc66;">&#40;</span>
    id       INT4 <span style="color: #993333; font-weight: bold;">PRIMARY</span> <span style="color: #993333; font-weight: bold;">KEY</span><span style="color: #66cc66;">,</span>
    some_val INT4 <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span>
<span style="color: #66cc66;">&#41;</span>;
&nbsp;
<span style="color: #993333; font-weight: bold;">CREATE</span> RULE whatever <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #993333; font-weight: bold;">ON</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">TO</span> test
    <span style="color: #993333; font-weight: bold;">WHERE</span> <span style="color: #993333; font-weight: bold;">exists</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test <span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>id <span style="color: #66cc66;">&#41;</span>
        DO INSTEAD <span style="color: #993333; font-weight: bold;">UPDATE</span> test <span style="color: #993333; font-weight: bold;">SET</span> some_val <span style="color: #66cc66;">=</span> some_val <span style="color: #66cc66;">+</span> <span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>id;</pre></td></tr></table></div>

<p>So. After creation, and while having test table empty, I issued:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">,</span> some_val<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>What's the content of test table? If you know &#8211; congratulations. Most of people will not grasp at first why it's:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"># <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test;
 id <span style="color: #66cc66;">|</span> some_val
<span style="color: #808080; font-style: italic;">----+----------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span>        <span style="color: #cc66cc;">2</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>After 2nd insert with id = 1, some_val will get incremented to 3, correctly. But why is initial value in some_val == 2?</p>
<p>That's because this &#8220;WHERE" clause from rule is added to original query, and then second query is being run. Like this:</p>
<p>original query:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">,</span> some_val<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>becomes:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">,</span> some_val<span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">WHERE</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #66cc66;">&#40;</span>
        <span style="color: #993333; font-weight: bold;">EXISTS</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test <span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">UPDATE</span> test
<span style="color: #993333; font-weight: bold;">SET</span> some_val <span style="color: #66cc66;">=</span> some_val <span style="color: #66cc66;">+</span> <span style="color: #cc66cc;">1</span>
<span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> <span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">AND</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">EXISTS</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test <span style="color: #993333; font-weight: bold;">WHERE</span> id <span style="color: #66cc66;">=</span> <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Another problem. Let's assume we want to use rules to provide audit of changes in table.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span> test <span style="color: #66cc66;">&#40;</span>
    id           SERIAL <span style="color: #993333; font-weight: bold;">PRIMARY</span> <span style="color: #993333; font-weight: bold;">KEY</span><span style="color: #66cc66;">,</span>
    created      TIMESTAMPTZ <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span><span style="color: #66cc66;">,</span>
    some_value   <span style="color: #993333; font-weight: bold;">FLOAT</span>
<span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span> test_log <span style="color: #66cc66;">&#40;</span>
    lid          SERIAL <span style="color: #993333; font-weight: bold;">PRIMARY</span> <span style="color: #993333; font-weight: bold;">KEY</span><span style="color: #66cc66;">,</span>
    lrecorded    TIMESTAMPTZ<span style="color: #66cc66;">,</span>
    loperation   TEXT<span style="color: #66cc66;">,</span>
    t_id         INT4<span style="color: #66cc66;">,</span>
    t_created    TIMESTAMPTZ<span style="color: #66cc66;">,</span>
    t_some_value <span style="color: #993333; font-weight: bold;">FLOAT</span>
<span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">CREATE</span> RULE whatever <span style="color: #993333; font-weight: bold;">AS</span>
    <span style="color: #993333; font-weight: bold;">ON</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">TO</span> test
    DO ALSO
        <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test_log <span style="color: #66cc66;">&#40;</span> lrecorded<span style="color: #66cc66;">,</span> loperation<span style="color: #66cc66;">,</span> t_id<span style="color: #66cc66;">,</span> t_created<span style="color: #66cc66;">,</span> t_some_value <span style="color: #66cc66;">&#41;</span>
        <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> now<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'INSERT'</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>id<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>created<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>some_value <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Looks simple, and cannot go wrong. Right? Let's see:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"># <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span> created<span style="color: #66cc66;">,</span> some_value <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'1410-07-15 12:34:56'</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">123</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #cc66cc;">0</span> <span style="color: #cc66cc;">1</span>
&nbsp;
# <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test;
 id <span style="color: #66cc66;">|</span>          created          <span style="color: #66cc66;">|</span> some_value
<span style="color: #808080; font-style: italic;">----+---------------------------+------------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">1410</span><span style="color: #66cc66;">-</span>07<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">12</span>:<span style="color: #cc66cc;">34</span>:<span style="color: #cc66cc;">56</span><span style="color: #66cc66;">+</span>01:<span style="color: #cc66cc;">24</span> <span style="color: #66cc66;">|</span>        <span style="color: #cc66cc;">123</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
# <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test_log;
 lid <span style="color: #66cc66;">|</span>           lrecorded           <span style="color: #66cc66;">|</span> loperation <span style="color: #66cc66;">|</span> t_id <span style="color: #66cc66;">|</span>         t_created         <span style="color: #66cc66;">|</span> t_some_value
<span style="color: #808080; font-style: italic;">-----+-------------------------------+------------+------+---------------------------+--------------</span>
   <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2010</span><span style="color: #66cc66;">-</span>06<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">11</span>:<span style="color: #cc66cc;">45</span>:<span style="color: #cc66cc;">56.221673</span><span style="color: #66cc66;">+</span>02 <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">INSERT</span>     <span style="color: #66cc66;">|</span>    <span style="color: #cc66cc;">2</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">1410</span><span style="color: #66cc66;">-</span>07<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">12</span>:<span style="color: #cc66cc;">34</span>:<span style="color: #cc66cc;">56</span><span style="color: #66cc66;">+</span>01:<span style="color: #cc66cc;">24</span> <span style="color: #66cc66;">|</span>          <span style="color: #cc66cc;">123</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>So, everything is right, and the rule is OK? No.</p>
<p>Let's imagine that someone would like to enter random some_value:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"># <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span> created<span style="color: #66cc66;">,</span> some_value <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #ff0000;">'1410-07-15 12:34:56'</span><span style="color: #66cc66;">,</span> random<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">*</span> <span style="color: #cc66cc;">500000</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #cc66cc;">0</span> <span style="color: #cc66cc;">1</span>
&nbsp;
# <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test;
 id <span style="color: #66cc66;">|</span>          created          <span style="color: #66cc66;">|</span>    some_value
<span style="color: #808080; font-style: italic;">----+---------------------------+------------------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">1410</span><span style="color: #66cc66;">-</span>07<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">12</span>:<span style="color: #cc66cc;">34</span>:<span style="color: #cc66cc;">56</span><span style="color: #66cc66;">+</span>01:<span style="color: #cc66cc;">24</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">273576.067527756</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
# <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test_log;
 lid <span style="color: #66cc66;">|</span>           lrecorded           <span style="color: #66cc66;">|</span> loperation <span style="color: #66cc66;">|</span> t_id <span style="color: #66cc66;">|</span>         t_created         <span style="color: #66cc66;">|</span>   t_some_value
<span style="color: #808080; font-style: italic;">-----+-------------------------------+------------+------+---------------------------+------------------</span>
   <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2010</span><span style="color: #66cc66;">-</span>06<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">11</span>:<span style="color: #cc66cc;">47</span>:<span style="color: #cc66cc;">46.501995</span><span style="color: #66cc66;">+</span>02 <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">INSERT</span>     <span style="color: #66cc66;">|</span>    <span style="color: #cc66cc;">2</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">1410</span><span style="color: #66cc66;">-</span>07<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">12</span>:<span style="color: #cc66cc;">34</span>:<span style="color: #cc66cc;">56</span><span style="color: #66cc66;">+</span>01:<span style="color: #cc66cc;">24</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">408030.828461051</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Oops?! some_value and t_some_value are not the same.</p>
<p>Well. Someone can say &#8211; sure, it's random, and nobody sane uses random. Despite the fact that this claim is quite funny, let's change the example. Let's assume we want <b>exact</b> created value in test table. now() as you perhaps know returns value that is time of start of transaction, and within transaction it's constant.</p>
<p>So, if a transaction would take 1 hour, insert to test table, that would use now(), would insert not-really correct &#8220;created" timestamp. But we can use clock_timestamp() which returns always <b>current</b> time:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"># <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">INTO</span> test <span style="color: #66cc66;">&#40;</span> created<span style="color: #66cc66;">,</span> some_value <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">VALUES</span> <span style="color: #66cc66;">&#40;</span> clock_timestamp<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'123'</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #cc66cc;">0</span> <span style="color: #cc66cc;">1</span>
&nbsp;
# <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test;
 id <span style="color: #66cc66;">|</span>            created            <span style="color: #66cc66;">|</span> some_value
<span style="color: #808080; font-style: italic;">----+-------------------------------+------------</span>
  <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2010</span><span style="color: #66cc66;">-</span>06<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">11</span>:<span style="color: #cc66cc;">51</span>:<span style="color: #cc66cc;">25.833451</span><span style="color: #66cc66;">+</span>02 <span style="color: #66cc66;">|</span>        <span style="color: #cc66cc;">123</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
# <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> test_log;
 lid <span style="color: #66cc66;">|</span>           lrecorded           <span style="color: #66cc66;">|</span> loperation <span style="color: #66cc66;">|</span> t_id <span style="color: #66cc66;">|</span>           t_created           <span style="color: #66cc66;">|</span> t_some_value
<span style="color: #808080; font-style: italic;">-----+-------------------------------+------------+------+-------------------------------+--------------</span>
   <span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2010</span><span style="color: #66cc66;">-</span>06<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">11</span>:<span style="color: #cc66cc;">51</span>:<span style="color: #cc66cc;">25.741417</span><span style="color: #66cc66;">+</span>02 <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">INSERT</span>     <span style="color: #66cc66;">|</span>    <span style="color: #cc66cc;">2</span> <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">2010</span><span style="color: #66cc66;">-</span>06<span style="color: #66cc66;">-</span><span style="color: #cc66cc;">15</span> <span style="color: #cc66cc;">11</span>:<span style="color: #cc66cc;">51</span>:<span style="color: #cc66cc;">25.833638</span><span style="color: #66cc66;">+</span>02 <span style="color: #66cc66;">|</span>          <span style="color: #cc66cc;">123</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Well, difference of 0.0002s is negligible. Right? Sure. But what will happen if this small difference will happen on midnight, thus falsifying day of operation? Or month? Or year?</p>
<p>Sure. It's still possible to <i>avoid</i> this kind of problems by not using volatile functions as source of data. Right. So, let's also say goodbye to sequences, and a lot of other interesting functionality in PostgreSQL.</p>
<p>Next example came from mail, and is really interesting in terms of what happens when people use techniques which they don't really understand (if you are this person &#8211; please do not feel offended &#8211; I just needed an example for this post).</p>
<p>This person, has table with some columns, and tried to use trigger, which does something essentially like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="plsql" style="font-family:monospace;"><span style="color: #00F;">CREATE</span> <span style="color: #00F;">OR</span> <span style="color: #000;">REPLACE</span> <span style="color: #00F;">FUNCTION</span> whatever<span style="color: #00F;">&#40;</span><span style="color: #00F;">&#41;</span> RETURNS <span style="color: #00F;">TRIGGER</span> <span style="color: #00F;">AS</span>
$BODY$
<span style="color: #00F;">BEGIN</span>
    <span style="color: #00F;">IF</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>some_field <span style="color: #00F;">=</span> <span style="color: #F00;">'T'</span> <span style="color: #00F;">THEN</span>
        <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>some_other_field <span style="color: #00F;">:=</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>another_field<span style="color: #00F;">;</span>
    <span style="color: #00F;">ELSIF</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>some_value <span style="color: #00F;">=</span> <span style="color: #F00;">'F'</span> <span style="color: #00F;">THEN</span>
        <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>some_other_field <span style="color: #00F;">:=</span> <span style="color: #00F;">-</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>another_field<span style="color: #00F;">;</span>
    <span style="color: #00F;">ELSE</span>
        <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>some_other_field <span style="color: #00F;">:=</span> <span style="color: #800;">0</span><span style="color: #00F;">;</span>
    <span style="color: #00F;">END</span> <span style="color: #00F;">IF</span><span style="color: #00F;">;</span>
    <span style="color: #00F;">RETURN</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">;</span>
<span style="color: #00F;">END</span><span style="color: #00F;">;</span>
$BODY$
LANGUAGE <span style="color: #F00;">'plpgsql'</span><span style="color: #00F;">;</span>
<span style="color: #00F;">CREATE</span> <span style="color: #00F;">TRIGGER</span> xxx BEFORE <span style="color: #00F;">INSERT</span> <span style="color: #00F;">ON</span> some_table <span style="color: #00F;">FOR</span> EACH <span style="color: #00F;">ROW</span> <span style="color: #00F;">EXECUTE</span> <span style="color: #00F;">PROCEDURE</span> whatever<span style="color: #00F;">&#40;</span><span style="color: #00F;">&#41;</span><span style="color: #00F;">;</span></pre></td></tr></table></div>

<p>Simple and to the point.</p>
<p>But this guy also wanted to use rule. So he created this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> RULE whatever <span style="color: #993333; font-weight: bold;">AS</span>
    <span style="color: #993333; font-weight: bold;">ON</span> <span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #993333; font-weight: bold;">TO</span> some_table
        DO ALSO
            <span style="color: #993333; font-weight: bold;">UPDATE</span> some_table
            <span style="color: #993333; font-weight: bold;">SET</span> some_other_field <span style="color: #66cc66;">=</span> <span style="color: #66cc66;">&#40;</span>
                <span style="color: #993333; font-weight: bold;">CASE</span>
                <span style="color: #993333; font-weight: bold;">WHEN</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>some_other_field<span style="color: #66cc66;">=</span><span style="color: #ff0000;">'T'</span> <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>another_field<span style="color: #66cc66;">&#41;</span>
                <span style="color: #993333; font-weight: bold;">WHEN</span> <span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>some_other_field<span style="color: #66cc66;">=</span><span style="color: #ff0000;">'F'</span> <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">-</span><span style="color: #993333; font-weight: bold;">NEW</span><span style="color: #66cc66;">.</span>another_field<span style="color: #66cc66;">&#41;</span>
            <span style="color: #993333; font-weight: bold;">ELSE</span>
                <span style="color: #cc66cc;">0</span>
            <span style="color: #993333; font-weight: bold;">END</span>
;</pre></td></tr></table></div>

<p>And he doesn't understand why it's slower.</p>
<p>Well. For starters &#8211; rule approach runs <b>2</b> queries, when trigger based only one. Second &#8211; because it does insert and then update &#8211; it will effectively bloat the table.</p>
<p>And this also doesn't even considers what happens if value in &#8220;another_field" is passed as function call, where function can be volatile, or simply take non trivial amount of time.</p>
<p>One last note. I was pointed to <a href="http://filip.rembialkowski.net/postgres-partitioning-performance-rules-vs-triggers/">test made by my friend</a> &#8211; which shows that for simple partitioning rules are faster.</p>
<p>I took a look at it. And the numbers don't really add up. I'm talking about &#8220;Partitioning with no dynamic routing".</p>
<p>I copied Filip script to my desktop, and ran them. Results:</p>
<ul>
<li>rule based approach: 445.540 ms</li>
<li>trigger based approach: 5966.436 ms</li>
</ul>
<p>This is even worse than what Filip reported. But then I took a look at <a href="http://filip.rembialkowski.net/pliki/partitioning/partitioning_triggers.sql">the trigger</a>, and noticed (sorry Filip), that it's absolutely horrific. With this code, it's no wonder it behaves so bad.</p>
<p>So, I changes the trigger function to:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="plsql" style="font-family:monospace;"><span style="color: #00F;">CREATE</span> <span style="color: #00F;">OR</span> <span style="color: #000;">REPLACE</span> <span style="color: #00F;">FUNCTION</span> trg_mainlog_partitioner<span style="color: #00F;">&#40;</span><span style="color: #00F;">&#41;</span> RETURNS <span style="color: #00F;">TRIGGER</span> <span style="color: #00F;">AS</span> $$
<span style="color: #00F;">DECLARE</span>
    use_sql TEXT<span style="color: #00F;">;</span>
<span style="color: #00F;">BEGIN</span>·
    <span style="color: #00F;">IF</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>sel <span style="color: #00F;">&lt;</span> <span style="color: #800;">1</span> <span style="color: #00F;">OR</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>sel <span style="color: #00F;">&gt;</span> <span style="color: #800;">1000</span> <span style="color: #00F;">THEN</span>
        <span style="color: #00F;">RAISE</span> <span style="color: #00F;">EXCEPTION</span> <span style="color: #F00;">'trg_mainlog_partitioner error: mainlog.sel value NOT supported: %'</span><span style="color: #00F;">,</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>sel<span style="color: #00F;">;</span>
    <span style="color: #00F;">END</span> <span style="color: #00F;">IF</span><span style="color: #00F;">;</span>
    use_sql <span style="color: #00F;">:=</span> <span style="color: #F00;">'INSERT INTO mainlog_p'</span> <span style="color: #00F;">||</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>sel <span style="color: #00F;">||</span> <span style="color: #F00;">' (id, sel, tm, info) VALUES ($1, $2, $3, $4)'</span><span style="color: #00F;">;</span>
    <span style="color: #00F;">execute</span> use_sql USING <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>id<span style="color: #00F;">,</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>sel<span style="color: #00F;">,</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>tm<span style="color: #00F;">,</span> <span style="color: #00F;">NEW</span><span style="color: #00F;">.</span>info<span style="color: #00F;">;</span>
    <span style="color: #00F;">RETURN</span> <span style="color: #00F;">NULL</span><span style="color: #00F;">;</span>
<span style="color: #00F;">END</span><span style="color: #00F;">;</span>
$$ language plpgsql<span style="color: #00F;">;</span></pre></td></tr></table></div>

<p>The change is simple &#8211; instead of 1000 IF/ELSIF branches, I just make 1 IF for sanity check, and then I build dynamic query.</p>
<p>Result &#8211; the same insert took only 649.677 ms.</p>
<p>While it's still longer than rules based approach, I believe this is mostly irrelevant, as the difference is small, and what's more important &#8211; this test inserted 10000 rows with single insert command. Which is best situation for rule. But in standard systems &#8211; it's not that common. I would much more expect 10000 insert statements, than single 10k-row insert, except perhaps some data migration processes.</p>
<p>Just out of curiosity, I decided to test it.</p>
<p>Loaded Filip rules to one database, and my trigger to another, and then ran this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">$ <span style="color: #c20cb9; font-weight: bold;">perl</span> <span style="color: #660033;">-e</span> <span style="color: #ff0000;">'
    for my $i (1..1000) {
        for (1..10) {
            printf &quot;INSERT INTO mainlog(sel,info) VALUES (%u, %u);\n&quot;, $i, $i;
        }
    }'</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #000000; font-weight: bold;">time</span> psql <span style="color: #660033;">-d</span> partitioning_triggers
..... <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">10000</span> lines of INSERT <span style="color: #000000;">0</span> <span style="color: #000000;">0</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>
0.11user 0.07system <span style="color: #000000;">1</span>:02.76elapsed <span style="color: #000000;">0</span><span style="color: #000000; font-weight: bold;">%</span>CPU <span style="color: #7a0874; font-weight: bold;">&#40;</span>0avgtext+0avgdata 6368maxresident<span style="color: #7a0874; font-weight: bold;">&#41;</span>k
0inputs+0outputs <span style="color: #7a0874; font-weight: bold;">&#40;</span>0major+491minor<span style="color: #7a0874; font-weight: bold;">&#41;</span>pagefaults 0swaps</pre></td></tr></table></div>

<p>And then I ran the same, but to database with rules:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="bash" style="font-family:monospace;">$ <span style="color: #c20cb9; font-weight: bold;">perl</span> <span style="color: #660033;">-e</span> <span style="color: #ff0000;">'
    for my $i (1..1000) {
        for (1..10) {
            printf &quot;INSERT INTO mainlog(sel,info) VALUES (%u, %u);\n&quot;, $i, $i;
        }
    }'</span> <span style="color: #000000; font-weight: bold;">|</span> <span style="color: #000000; font-weight: bold;">time</span> psql <span style="color: #660033;">-d</span> partitioning_rules
..... <span style="color: #7a0874; font-weight: bold;">&#40;</span><span style="color: #000000;">10000</span> lines of INSERT <span style="color: #000000;">0</span> <span style="color: #000000;">0</span><span style="color: #7a0874; font-weight: bold;">&#41;</span>
0.10user 0.07system <span style="color: #000000;">5</span>:36.86elapsed <span style="color: #000000;">0</span><span style="color: #000000; font-weight: bold;">%</span>CPU <span style="color: #7a0874; font-weight: bold;">&#40;</span>0avgtext+0avgdata 6368maxresident<span style="color: #7a0874; font-weight: bold;">&#41;</span>k
0inputs+0outputs <span style="color: #7a0874; font-weight: bold;">&#40;</span>0major+491minor<span style="color: #7a0874; font-weight: bold;">&#41;</span>pagefaults 0swaps</pre></td></tr></table></div>

<p>Whoa. Now the proportion reversed, and rules are 5 times worse than trigger. Why is it so?</p>
<p>With out 1000-partition system, each insert is changed by rules into over 1000 inserts. Nearly all of them (all except one) will not insert anything, but still have to be evaluated!.</p>
<p>With trigger based approach, we simply run some procedural, precompiled code to check partitioning criteria, and then run another query via EXECUTE. It's just faster.</p>
<p>So. To wrap it all: I believe that one shouldn't use rules. They are complex, and lead to not easy to find out errors. They can cause table bloat, and they are slower than triggers for not-trivially-small scales of partitioning.</p>
<p>There are some cases when rules don't have alternative (like David Fetter <a href="http://archives.postgresql.org/pgsql-hackers/2009-10/msg00249.php">pointed</a>) &#8211; namely: writable views. There has been some work put to it, but as of now &#8211; it inevitable &#8211; if you want writable views &#8211; you have to use rules. Just ask yourself &#8211; are you really so smart, that you can write rules which will be without problems/restrictions on input data/table bloat? And will <b>all</b> your successors taking care of this particular database as smart as you?</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">26 comments <a href='http://www.depesz.com/2010/06/15/to-rule-or-not-to-rule-that-is-the-question/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-29897" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29897" title="">#</a></span> <a href='http://filip.rembialkowski.net' rel='external nofollow' class='url'>Filip</a></div>  <div class="date">Jun 15, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/3c7762851de72b8505fa70cae4eb7c83?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>my &#8220;rules vs triggers&#8221; post was updated in answer to your critic <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-29899" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29899" title="">#</a></span> <a href='http://www.vnode.ch' rel='external nofollow' class='url'>Marc Balmer</a></div>  <div class="date">Jun 15, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/0a72844b35614f3d549956f9132f9e5a?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I actually like the DO INSTEAD stuff a lot. It allows me to transparently do magic stuff like automatic historisation of changed data etc. So an. UPDATE turns into a COPY THE OLD DATA, INSERT THE CHANGED DATA. Allowed us to do amazing stuff for the official ship register of Switzerland.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29900" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29900" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 15, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Marc:<br />
I understand that rules let people do cool stuff. But in my personal opinion &#8211; drawbacks are more substantial than gains.<br />
Of course &#8211; this applies to &#8220;general situation&#8221;. In specific cases you might be put in situation when you simply don&#8217;t have choice, or, in this particular case, benefits are more important.</p>
	</li>
		
		
			
<li class="odd" id="comment-29901" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29901" title="">#</a></span> <a href='http://drcoddwasright.blogspot.com/' rel='external nofollow' class='url'>Robert Young</a></div>  <div class="date">Jun 15, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/93d81f304dd98d305b33bd3c089727f6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>From Troels database comparison:</p>
<p>Postgres -</p>
<p>Has views. Breaks that standard by not allowing updates to views; offers the non-standard &#8216;rules&#8217;-system as a work-around.</p>
<p>So, the reason DBA&#8217;s don&#8217;t like &#8216;em is they&#8217;re way non-standard, and many DBA&#8217;s have to deal with multiple database engines; The Big Three behave mostly OK together at the SQL level (not so much at the config/tuning level, though).  Has been so from the beginning (was Stonebraker&#8217;s idea, IIRC).  Getting to SQL-92 would be good; SQL-99 would be better.  And even The Big Three differ on what&#8217;s an updateable view, and SQL-2008 has some rules for them, but I&#8217;ve not seen them.</p>
<p>Your first example is, essentially, the MERGE verb (OK, not -99 but -2003, that&#8217;s still 7 years ago).</p>
<p>If one wishes to make BCNF databases, while isolating client code from the schema, views are essential.  While better than MySql, by a mile, PostgreSQL does need to become at least -99 compliant if it wants to be a threat to The Big Three.</p>
<p>Among Big Three developers, triggers are often disliked, if they run at row level.  My docs tell me that PostgreSQL has STATEMENT syntax, but not statement implementation.  Having that would be a Good Thing.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29902" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29902" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 15, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Robert:<br />
First &#8211; I&#8217;m not sure what you mean by &#8216;has statement syntax, but not statement implementation&#8217;.</p>
<p>I&#8217;m also not sure what you mean by &#8216;the big three&#8217; &#8211; oracle/mssql/ ?</p>
<p>Personally I don&#8217;t really car about &#8220;standard&#8221;. The reason is very simple &#8211; while it&#8217;s nice to have standard &#8211; even the simplest things are done differently &#8211; limit/offset for example.</p>
<p>My point is &#8211; I, as dba, don&#8217;t like rules because they are tricky, and often can lead to problems which are hard to detect. Standard compliance is &#8220;nice to have&#8221;, but definitely not on my list of priorities.</p>
	</li>
		
		
			
<li class="odd" id="comment-29903" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29903" title="">#</a></span> Stephen Denne</div>  <div class="date">Jun 15, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2b3217a892341e28d299627a00030534?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Does the whatever rule on some_table update every row in some_table?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29904" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29904" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 15, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Stephen:<br />
yes.<br />
as far as I know, it was intentional &#8211; i.e. the table contains only one row.</p>
	</li>
		
		
			
<li class="odd" id="comment-29905" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29905" title="">#</a></span> <a href='http://drcoddwasright.blogspot.com/' rel='external nofollow' class='url'>Robert Young</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/93d81f304dd98d305b33bd3c089727f6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Depesz:</p>
<p>Trigger (CREATE) syntax can be by ROW or by STATEMENT.  PostgreSQL, according to the docs I&#8217;ve seen, accepts STATEMENT, but always executes by ROW; this is a performance issue for triggers which affect multiple rows.</p>
<p>DB2 is the third Big Three.</p>
<p>Rules exist in PostgreSQL because, mostly, the SQL standard syntax isn&#8217;t implemented.  The Big Three get closer to implementing the standard.  Going One&#8217;s Own Way is otherwise referred to as Vendor Lock In.  While not perfect, the SQL standards, given that SQL is the product not of Codd but Chamberlin (he now does XQuery), have gotten closer to what Codd meant.  The 2008 standard being closer to what Codd proved:  all views are updateable.</p>
<p>If you don&#8217;t like Rules, but want their semantics, then implementing the standard is the answer.  Is it not the case that only view implementation requires rules, all else can be done with triggers?</p>
	</li>
		
		
			
<li class="odd" id="comment-29907" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29907" title="">#</a></span> Teoś</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>1. Trigger is a function and calling the function costs time, unless it is plain SQL which is inlined (is it?)<br />
C.f. Pavel Steule blog:<a href="http://okbob.blogspot.com/2009/12/how-dont-write-plpgsql-functions.html" rel="nofollow">http://okbob.blogspot.com/2009/12/how-dont-write-plpgsql-functions.html</a><br />
But trigger *must* be PL/pgSQL which is makes it a performance drawback. A logical way for the RULE to act would be on the syntactic level (i.e. before execution). 2. Of course multiple evaluation of inserted values, shown in examples above is against any logic and seems to be rather a bug than a feature.<br />
3. There is no big sense in ON INSERT DO ALSO UPDATE type of rule. What would make sense is ON INSERT DO INSTEAD INSERT (and subsequent instructions) &#8211; which was my intention. Unfortunately this is prohibited as this leads to an infinite recursion of rules that do insert which calls the rule, which does insert etc etc. I don&#8217;t buy this explanation. It seems simple to verify if the rule was already applied to this query or not. This does not seem to be a breach of the concept of RULE, whereas in current form &#8211; it simply not logical. Instead of rewriting the rule we are forced to use the mechanism of double write which results in doubled resources consumption.</p>
	</li>
		
		
			
<li class="odd" id="comment-29908" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29908" title="">#</a></span> Teoś</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Of course Steule =&gt; Stehule in above.</p>
	</li>
		
		
			
<li class="odd" id="comment-29909" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29909" title="">#</a></span> Marko Tiikkaja</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/29cd5820544cc4803d6e4e50d254cf54?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Robert Young:</p>
<p>&#8220;Trigger (CREATE) syntax can be by ROW or by STATEMENT. PostgreSQL, according to the docs I’ve seen, accepts STATEMENT, but always executes by ROW; this is a performance issue for triggers which affect multiple rows.&#8221;</p>
<p>Maybe it&#8217;s time for you to take another look at the docs.  Statement-level triggers were added in 7.4; that&#8217;s almost 7 years ago.</p>
<p>&#8220;The 2008 standard being closer to what Codd proved: all views are updateable.&#8221;</p>
<p>I haven&#8217;t read the spec, but I very much doubt that.  Think aggregates, for example.</p>
	</li>
		
		
			
<li class="odd" id="comment-29910" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29910" title="">#</a></span> Teoś</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Of course triggers have larger capabilities than rules but they are heavier at the same time.<br />
Somebody even suggested rewriting time-critical parts to plain C. <a href="http://database.itags.org/postgresql/55687/" rel="nofollow">http://database.itags.org/postgresql/55687/</a><br />
I don&#8217;t know if this is really the best solution to all trigger/rule problems.</p>
	</li>
		
		
			
<li class="odd" id="comment-29911" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29911" title="">#</a></span> <a href='http://drcoddwasright.blogspot.com/' rel='external nofollow' class='url'>Robert Young</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/93d81f304dd98d305b33bd3c089727f6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>According to &#8220;SQL in a Nutshell&#8221;, pg. 212, PostgreSQL doesn&#8217;t enforce statement level triggers.  If that&#8217;s known to be true that statement level is enforced, then let them know.  It seems unlikely they would make the straightforward assertion without testing, it seems to me.</p>
	</li>
		
		
			
<li class="odd" id="comment-29912" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29912" title="">#</a></span> <a href='http://drcoddwasright.blogspot.com/' rel='external nofollow' class='url'>Robert Young</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/93d81f304dd98d305b33bd3c089727f6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>OK, my bad.  The book, although recent, refers to 7.0.</p>
	</li>
		
		
			
<li class="odd" id="comment-29914" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29914" title="">#</a></span> gapsf</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>What about SELECT rules?<br />
For example, for access control, I want to check and change SELECTs on the fly.<br />
And I need a mechanism to rewrite and describe rewriting rules (for SELECTs too).<br />
The mechanism should allow to setup rewrite rules  and rewrite query (syntax tree) before the optimizer.<br />
For example, to filter out certain records from a query on a particular algorithm.<br />
It should be faster than using a stored procedure to &#8220;decide&#8221; what records filter out.</p>
<p>For example:<br />
Instead of<br />
&#8220;SELECT * FROM some_table WHERE call_to_some_procedure();&#8221; (wich slow)<br />
it will be possible to generate modifier<br />
and every DML will be modified before the execution by automatically adding modifier into WHERE clause on the fly.</p>
<p>What do you think about this technique?<br />
Is it possible in PostgreSQL?</p>
	</li>
		
		
			
<li class="odd" id="comment-29915" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29915" title="">#</a></span> Jona</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/689142481648f7794b6dce0cfca016b6?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>GAPSF, I believe what you&#8217;re looking for is &#8220;row level security&#8221; or what Oracle calls Virtual Private Databases.<br />
Josh Berkus has previously stated that it should be possible to implement this type of feature using rules but I haven&#8217;t seen an example of this.<br />
See also: <a href="http://it.toolbox.com/blogs/database-soup/thinking-about-row-level-security-part-1-30732" rel="nofollow">http://it.toolbox.com/blogs/database-soup/thinking-about-row-level-security-part-1-30732</a></p>
<p>Personally I&#8217;d like to see an example of how to use rules to rewrite:<br />
SELECT * FROM Log.Transaction_Tbl WHERE clientid = 1<br />
to become:<br />
SELECT T.* FROM Log.Transaction_Tbl T<br />
INNER JOIN User.Access_Tbl A ON T.clientid = A.clientid<br />
WHERE T.clientid = 1 AND A.userid = [A GLOBAL VARIABLE OR OTHER IDENTIFIER PREFERABLY SET ONCE / AT CONNECTION TIME, "CURRENT_ROLE" COULD BE AN OPTION]</p>
<p>There&#8217;s a PostGreSQL project named Veil which attempts to solve this, but it seems overly complicated and maintenance heavy for simple use cases like my example.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29916" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29916" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@gapsf:<br />
you can easily do it with views. So there is no point in bringing rules just to do it.</p>
<p>anyway &#8211; select rules and views are virtually the same thing, so there is not much point in discussing which one is better.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29917" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29917" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Robert Young:</p>
<p>thanks for clarification on big-3.</p>
<p>As for statement triggers, i think Marko explained it well, and the fact that the book is based on PostgreSQL 7.0 means that it&#8217;s virtually useless now &#8211; at least when it comes to talking about PostgreSQL. 7.0 was released in 2000, and in this 10 years PostgreSQL has really moved ahead. A lot.</p>
<p>As for what rukles are required for &#8211; currently (afaik) views are internally done using the same mechanism as rules, but this is virtually irrelevant, as select rules are very different beasts than modification rules.</p>
<p>The only modification thing that rules are now technically required are writable views. And yet &#8211; I&#8217;m happily *not* using writable views just to avoid using rules and their restrictions.</p>
	</li>
		
		
			
<li class="odd" id="comment-29918" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29918" title="">#</a></span> Marko Tiikkaja</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/29cd5820544cc4803d6e4e50d254cf54?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Jona:</p>
<p>You can do that relatively easily with a view and a custom GUC.  It will require a C-language module to implement the GUC, but the code should be straightforward.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29919" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29919" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Teoś:</p>
<p>ad &#8220;trigger is a function and calling&#8221;.</p>
<p>sure. but showing degenerated example on how *not* to write function, as general excuse to never write a function is pretty bad argument. I don&#8217;t like Stalin, and he was Russian, so all Russians must be bad people? There is no logic in it.</p>
<p>ad &#8220;There is no big sense in ON INSERT DO ALSO UPDATE type of rule.&#8221;<br />
there would be a lot of sense in such rules, if the rule system would work on values, and not parameters as passed to query, but you&#8217;re right &#8211; the rule in my post did not make sense. But it was example I got.<br />
besides, I think I explained &#8211; trigger in this case would be *much* more efficient, if only for not bloating the table.</p>
<p>ad &#8220;triggers &#8230; than rules &#8230; but they are heavier&#8221;<br />
as I showed in partitioning example &#8211; this is *far* from true. what&#8217;s more &#8211; trigger is guaranteed to provide correct values, which (again: as I showed) rules simply cannot do in some cases.<br />
of course I can forbid usage of random/clock_timestamp in my application, but what about *every* volatile function?</p>
<p>Anyway &#8211; you seem to be sticking to the idea of using rules. Fine. There are also others who use them &#8211; you can view the thread I linked. I just don&#8217;t think that usage of views is OK for most of the people. And I still don&#8217;t see any valid excuse (except for writable views, which as I said, I don&#8217;t use) to use rules, instead of something that gives you correct results.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-29920" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29920" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Marko:<br />
You don&#8217;t need C to add custom GUC. What would you need C for in this case?</p>
	</li>
		
		
			
<li class="odd" id="comment-29922" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29922" title="">#</a></span> Teoś</div>  <div class="date">Jun 16, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Depesz</p>
<p>I&#8217;m not glued to rules in general. I&#8217;m not trying to prove that they are better and that they should be used instead of triggers. I only see a good place where rules could be used if they only worked properly. </p>
<p>I&#8217;m also not against writing functions. I&#8217;m only saying that calling functions has its cost and they should be avoided if not required for some reason. I remember a statement &#8220;do not write functions &lt; 100 lines&quot; (but I don&#039;t remember which PostgreSQL guru posted this). This does not come from a fear for unknown but from practice: I recently compared query results between 100k inline conversions (of type y=ax+b) and conversions using PL/pgSQL functions and the inline version was by order of magnitude faster.</p>
<p>Concerning the &quot;weight&quot; of triggers and rules: I think that you use an argument pars pro toto. If in this example rules were slower than triggers it does not mean that in general they are slower. In ON INSERT &#8230; UPDATE &#8211; yes, two times slower (but if INSTEAD INSERT &#8211; INSERT type was allowed this would look different) but why in general case?<br />
Rewriting the query &#8211; if properly done &#8211; should be faster than calling the trigger function once per row to do the same job. Maybe the idea is right but the implementation is wrong? </p>
<p>Of course the problem of volatile functions in rules is clearly an error and an important fact so thank you for pointing this. And if it is implemented along the definition it probably means that the definition is wrong.</p>
<p>Anyway, thanks for the job.</p>
	</li>
		
		
			
<li class="odd" id="comment-29958" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-29958" title="">#</a></span> janus</div>  <div class="date">Jun 23, 2010</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/add043573df3902416e30ba38983568f?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@gapsf: been there, done that, works fine &#8211; even with inserts, updates and deletes.</p>
<p>Yet I&#8217;m really looking forward to a native RLS implementation.</p>
	</li>
		
		
			
<li class="odd" id="comment-30005" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30005" title="">#</a></span> Teoś</div>  <div class="date">Jul 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f88c3e5c47aae8fbdb462b7f9ce0311d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Dear Depesz.I have seen exactly your side effect error implemented today and the guys who discuss why is the sequence updated twice. The problem is real. Are you 100% sure that it is by design and should not be reported as error?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-30006" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-30006" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jul 2, 2010</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Yes. Rules rewrite query. Which causes this kinds of problems. But since they have been in here for a long time so change of the way they work is very, very unlikely.</p>
	</li>
		
		
			
<li class="odd" id="comment-36191" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-36191" title="">#</a></span> <a href='http://www.saurik.com/' rel='external nofollow' class='url'>Jay Freeman (saurik)</a></div>  <div class="date">Sep 2, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2aeddf3522b96c79031ae5e460bd9b40?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>In the example with the transaction log, in addition to the usage of the random function being problematic, the t_id field was actually being logged incorrectly for the same reason; I point this out only because that means the &#8220;before we try to break it with a call to random&#8221; example is already broken (which caused me to get confused while reading the transition between the first and second example) ;P.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="1723" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="9eb486b621" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="233"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">2 comments</span> | <span class="wpp-views">633 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">4 comments</span> | <span class="wpp-views">615 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">264 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">205 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">144 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">142 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">128 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">126 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">113 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">100 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

