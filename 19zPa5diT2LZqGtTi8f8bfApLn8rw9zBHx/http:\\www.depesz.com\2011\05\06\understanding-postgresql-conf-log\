http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/
HTTP/1.1 200 OK
Server: nginx
Date: Thu, 24 Jul 2014 08:23:46 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2162>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; Understanding postgresql.conf : log*</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; Understanding postgresql.conf : log* Comments Feed" href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2162' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2162">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" rel="bookmark" title="Permanent Link to Understanding postgresql.conf : log*">Understanding postgresql.conf : log*</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>May 6th, 2011 by depesz | Tags: <a href="http://www.depesz.com/tag/debug_pretty_print/" rel="tag">debug_pretty_print</a>, <a href="http://www.depesz.com/tag/debug_print_parse/" rel="tag">debug_print_parse</a>, <a href="http://www.depesz.com/tag/debug_print_plan/" rel="tag">debug_print_plan</a>, <a href="http://www.depesz.com/tag/debug_print_rewritten/" rel="tag">debug_print_rewritten</a>, <a href="http://www.depesz.com/tag/logging/" rel="tag">logging</a>, <a href="http://www.depesz.com/tag/logging_collector/" rel="tag">logging_collector</a>, <a href="http://www.depesz.com/tag/log_checkpoints/" rel="tag">log_checkpoints</a>, <a href="http://www.depesz.com/tag/log_connections/" rel="tag">log_connections</a>, <a href="http://www.depesz.com/tag/log_destination/" rel="tag">log_destination</a>, <a href="http://www.depesz.com/tag/log_directory/" rel="tag">log_directory</a>, <a href="http://www.depesz.com/tag/log_disconnections/" rel="tag">log_disconnections</a>, <a href="http://www.depesz.com/tag/log_duration/" rel="tag">log_duration</a>, <a href="http://www.depesz.com/tag/log_error_verbosity/" rel="tag">log_error_verbosity</a>, <a href="http://www.depesz.com/tag/log_executor_stats/" rel="tag">log_executor_stats</a>, <a href="http://www.depesz.com/tag/log_filename/" rel="tag">log_filename</a>, <a href="http://www.depesz.com/tag/log_hostname/" rel="tag">log_hostname</a>, <a href="http://www.depesz.com/tag/log_line_prefix/" rel="tag">log_line_prefix</a>, <a href="http://www.depesz.com/tag/log_lock_waits/" rel="tag">log_lock_waits</a>, <a href="http://www.depesz.com/tag/log_min_duration_statement/" rel="tag">log_min_duration_statement</a>, <a href="http://www.depesz.com/tag/log_min_error_statement/" rel="tag">log_min_error_statement</a>, <a href="http://www.depesz.com/tag/log_min_messages/" rel="tag">log_min_messages</a>, <a href="http://www.depesz.com/tag/log_parser_stats/" rel="tag">log_parser_stats</a>, <a href="http://www.depesz.com/tag/log_planner_stats/" rel="tag">log_planner_stats</a>, <a href="http://www.depesz.com/tag/log_rotation_age/" rel="tag">log_rotation_age</a>, <a href="http://www.depesz.com/tag/log_rotation_size/" rel="tag">log_rotation_size</a>, <a href="http://www.depesz.com/tag/log_statement/" rel="tag">log_statement</a>, <a href="http://www.depesz.com/tag/log_statement_stats/" rel="tag">log_statement_stats</a>, <a href="http://www.depesz.com/tag/log_temp_files/" rel="tag">log_temp_files</a>, <a href="http://www.depesz.com/tag/log_timezone/" rel="tag">log_timezone</a>, <a href="http://www.depesz.com/tag/log_truncate_on_rotation/" rel="tag">log_truncate_on_rotation</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/silent_mode/" rel="tag">silent_mode</a>, <a href="http://www.depesz.com/tag/syslog_facility/" rel="tag">syslog_facility</a>, <a href="http://www.depesz.com/tag/syslog_ident/" rel="tag">syslog_ident</a>, <a href="http://www.depesz.com/tag/understanding/" rel="tag">understanding</a> |  <a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/#comments" title="Comment on Understanding postgresql.conf : log*">6 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>After loooong pause, adding next (well, second) post to the &#8220;<a href="http://www.depesz.com/index.php/tag/understanding/">series</a>&#8220;. This time, I'd like to describe how logging works. And I don't mean binary logging (WAL), but the log for us, humans, to read.</p>
<p>Before I will go to the postgresql.conf options, let me first describe what happens when PostgreSQL wants to log something.</p>
<p><span id="more-2162"></span></p>
<p><em>All examples below are done using PostgreSQL 9.0.4.</em></p>
<p>When I'll just create new <em>$PGDATA</em>, with default settings, PostgreSQL is configured to log everything simply by spitting it out to STDERR. Which can be seen when starting it:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">14:21:50 depesz@blob ~
=$ pg_ctl -D data start
server starting
&nbsp;
14:21:54 depesz@blob ~
=$ LOG:  database system was shut down at 2011-04-30 14:21:35 CEST
LOG:  database system is ready to accept connections
LOG:  autovacuum launcher started</pre></td></tr></table></div>

<p>(the lines with timestamp and &#8216;depesz@blob' are my prompt).</p>
<p>As you can see I got 2nd prompt, and then I got 3 LOG lines. If I'll connect to this Pg instance, from another console, and run something which will generate error:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">=$ psql -d postgres -c 'select 1/0'
ERROR:  division by zero</pre></td></tr></table></div>

<p>On the first console I will get additional lines saying:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">ERROR:  division by zero
STATEMENT:  select 1/0</pre></td></tr></table></div>

<p>This is the basic mode for PostgreSQL. Just spit everything to STDERR, and don't bother doing anything about it.</p>
<p>Pg_ctl has support for redirecting the logs, thanks to its -l option:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">14:25:08 depesz@blob ~
=$ pg_ctl -D data -l server.log start
server starting
&nbsp;
14:25:16 depesz@blob ~
=$ psql -d postgres -c 'select 1/0'
ERROR:  division by zero
&nbsp;
14:25:32 depesz@blob ~
=$ cat server.log 
LOG:  database system was shut down at 2011-04-30 14:25:07 CEST
LOG:  database system is ready to accept connections
LOG:  autovacuum launcher started
ERROR:  division by zero
STATEMENT:  select 1/0</pre></td></tr></table></div>

<p>(yes, I stopped Pg first, before starting it again).</p>
<p>As you can see now the log is not outputted to STDERR (aside form &#8220;server starting" message, which we will discuss later).</p>
<p>This is done in the simplest possible way: before actually running postgres it opens the log for writing, and redirects STDOUT and STDERR there. So, it's virtually the same as:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">=$ pg_ctl -D data start &amp;gt;&amp;gt; server.log 2&amp;gt;&amp;1</pre></td></tr></table></div>

<p>Now, that we know what happens <b>by default</b> we can dig deeper into configuration, to see what's really happening.</p>
<p>First option that we need to know/understand is <em>log_destination</em>. It has 3 different possible values:</p>
<ul>
<li>stderr &#8211; default, logs go STDERR, unmodified</li>
<li>syslog &#8211; logs go to syslog (system logging daemon &#8211; every Unix has one, as far as I know)</li>
<li>csvlog &#8211; logs are saved to .csv files, but that's a bit more complex, will come to it later</li>
</ul>
<p>What does stderr we already know. What about syslog? Well. When using syslog, start of PostgreSQL, and all other messages are sent to the syslog daemon, which can then be configured to do something with them.</p>
<p>Generally, what's important &#8211; when logging to syslog there are 2 additional parameters:</p>
<ul>
<li>syslog_facility</li>
<li>syslog_ident</li>
</ul>
<p>Syslog_facility can be assumed to be &#8220;category of source". Some syslogd configurations choose different logfile based on facility, so it's pretty common to use it for directing logs to different files. Unfortunately list of possible facilities is closed, and not really big: LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7 (there are also other facilities, but PostgreSQL can't log with them).</p>
<p>Syslog_ident is free text description of what program logged given line.</p>
<p>My setup of syslogd, logs messages to files named like facility, so I have every facility separately. With default settings, start of PostgreSQL, and 1/0 division logged to local0.log file:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">=# cat local0.log 
Apr 30 14:34:19 blob postgres[29901]: [1-1] LOG:  database system was shut down at 2011-04-30 14:26:55 CEST
Apr 30 14:34:19 blob postgres[29900]: [1-1] LOG:  database system is ready to accept connections
Apr 30 14:34:19 blob postgres[29904]: [1-1] LOG:  autovacuum launcher started
Apr 30 14:35:03 blob postgres[30116]: [2-1] ERROR:  division by zero
Apr 30 14:35:03 blob postgres[30116]: [2-2] STATEMENT:  select 1/0</pre></td></tr></table></div>

<p>If i'll change syslog_facility to LOCAL6, and syslog_ident to whatever, the same test (pg start + 1/0 division), will change the logfile, and logged content will look like:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">=# cat local6.log 
Apr 30 14:41:42 blob whatever[30547]: [1-1] LOG:  database system was shut down at 2011-04-30 14:41:18 CEST
Apr 30 14:41:42 blob whatever[30546]: [1-1] LOG:  database system is ready to accept connections
Apr 30 14:41:42 blob whatever[30550]: [1-1] LOG:  autovacuum launcher started
Apr 30 14:41:45 blob whatever[30553]: [2-1] ERROR:  division by zero
Apr 30 14:41:45 blob whatever[30553]: [2-2] STATEMENT:  select 1/0</pre></td></tr></table></div>

<p>As you can see instead of &#8220;postgres" I now have &#8220;whatever" &#8211; which is pretty cool, if you're into using syslog, and you have more than one PostgreSQL instance on single server.</p>
<p>Syslog has many cool features (like sending logs to external machine, over TCP or UDP), but I'm not really liking it. Reasons:</p>
<ul>
<li>It's overhead. Instead of just doing write() to file, the data has to be sent to another process, which applies some rules to find where to log it, and then finally do the write.</li>
<li>I don't like syslog log format</li>
</ul>
<p>But, if you need stuff like sending logs to remote machine &#8211; syslog is the best option (well, without writing your own software).</p>
<p>Now, let's come back to csvlog. To use it, as comments in postgresql.conf say, we have to enable &#8220;logging_collector".</p>
<p>So, let's revert log_destination to stderr, and enable logging_collector.</p>
<p>Quick Pg stop/start, and 1/0 division, and we see &#8230; so, what do we see?</p>
<p>First of all, we see that there is another child process for postmaster:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">=$ ps f -C postgres
  PID TTY      STAT   TIME COMMAND
31255 pts/0    S      0:00 /opt/pgsql-9.0.4/bin/postgres -D data
&lt;b&gt;31256 ?        Ss     0:00  \_ postgres: logger process             &lt;/b&gt;
31258 ?        Ss     0:00  \_ postgres: writer process             
31259 ?        Ss     0:00  \_ postgres: wal writer process         
31260 ?        Ss     0:00  \_ postgres: autovacuum launcher process   
31261 ?        Ss     0:00  \_ postgres: stats collector process</pre></td></tr></table></div>

<p>Starting Pg still shows &#8220;server started" line, but that's all. And logs are now handled fully by PostgreSQL itself.</p>
<p>With default configuration, they are stored in <em>$PGDATA</em>/pg_log directory, and log file name is based on when Pg was started. So now it is:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">=$ cat data/pg_log/postgresql-2011-04-30_145020.log 
LOG:  database system was shut down at 2011-04-30 14:50:19 CEST
LOG:  database system is ready to accept connections
LOG:  autovacuum launcher started
ERROR:  division by zero
STATEMENT:  select 1/0</pre></td></tr></table></div>

<p>Of course name of the file can be changed, but that's not the point for now. This is STDERR logging, with turned on logging_collector. And since we have logging_collector, we can also test csvlog. So, pg_ctl stop, s/stderr/csvlog, start, 1/0 division later we see:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">14:54:36 depesz@blob ~
=$ ls -l data/pg_log/
total 4
-rw------- 1 depesz depesz 630 2011-04-30 14:54 postgresql-2011-04-30_145436.csv
-rw------- 1 depesz depesz   0 2011-04-30 14:54 postgresql-2011-04-30_145436.log
&nbsp;
14:54:39 depesz@blob ~
=$ cat data/pg_log/postgresql-2011-04-30_145436.csv
2011-04-30 14:54:36.296 CEST,,,31579,,4dbffb0c.7b5b,1,,2011-04-30 14:54:36 CEST,,0,LOG,00000,&amp;quot;database system was shut down at 2011-04-30 14:54:34 CEST&amp;quot;,,,,,,,,,&amp;quot;&amp;quot;
2011-04-30 14:54:36.339 CEST,,,31577,,4dbffb0b.7b59,1,,2011-04-30 14:54:35 CEST,,0,LOG,00000,&amp;quot;database system is ready to accept connections&amp;quot;,,,,,,,,,&amp;quot;&amp;quot;
2011-04-30 14:54:36.339 CEST,,,31582,,4dbffb0c.7b5e,1,,2011-04-30 14:54:36 CEST,,0,LOG,00000,&amp;quot;autovacuum launcher started&amp;quot;,,,,,,,,,&amp;quot;&amp;quot;
2011-04-30 14:54:36.957 CEST,&amp;quot;depesz&amp;quot;,&amp;quot;postgres&amp;quot;,31586,&amp;quot;[local]&amp;quot;,4dbffb0c.7b62,1,&amp;quot;SELECT&amp;quot;,2011-04-30 14:54:36 CEST,2/3,0,ERROR,22012,&amp;quot;division by zero&amp;quot;,,,,,,&amp;quot;select 1/0&amp;quot;,,,&amp;quot;psql&amp;quot;</pre></td></tr></table></div>

<p>As you can see 2 files were created. .log, which is empty, and .csv.</p>
<p>.log is usually empty. There are some cases when there is something logged there, but these are usually hard-core critical errors related (as far as I recall) with starting PostgreSQL.</p>
<p>The csv file on the other hand is interesting. It contains a lot of information that wasn't previously visible/logged.</p>
<p>This file format, has been designed to contain all necessary information, and be easily loadable to PostgreSQL itself. The whole procedure and table schema (where to load the log to) is described nicely in <a href="http://www.postgresql.org/docs/9.0/interactive/runtime-config-logging.html#RUNTIME-CONFIG-LOGGING-CSVLOG">the fine manual</a>.</p>
<p>But, since we're humans, and not servers ourselves, we prefer formats a bit easier on our eyes. That's why, I generally use normal STDERR log_destination, but logging_collector set to true, to I can use some more of PostgreSQL magic. What magic?</p>
<p>For starters, I can change log_directory, to make it log someplace else.</p>
<p>log_directory, unless it starts with / &#8211; is assumed to be inside datadir. Which is helpful in some cases, and problematic in other. If it's problematic in yours, just do:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">log_directory = '/var/log/postgresql'</pre></td></tr></table></div>

<p>and be happy :).</p>
<p>Next possibility is to use automatic log rotation &#8211; without logrotate, or PostgreSQL restarts/reloads.</p>
<p>PostgreSQL supports 2 modes for rotation:</p>
<ul>
<li>time based</li>
<li>size based</li>
</ul>
<p>Time based log rotation works like this. There is option log_rotation_age, which takes integer representing number of minutes, but can also handle some common units: ms (milliseconds), s (seconds), min (minutes), h (hours), and d (days). Honestly &#8211; Never tried any other aside from &#8220;h" and &#8220;d".</p>
<p>This means that whenever given time passes, new log file is created, and entries are written there (but check the details on log_filename below).</p>
<p>Size based rotation is also simple &#8211; you specify value (for log_rotation_size guc) that, after the log is that big, PostgreSQL will switch to next log file name.</p>
<p>Default values are '1 day' for time based, and '10 MB' for size, which means that PostgreSQL will change (well, technically try to change) log file whenever date changes or when current logfile is over 10MB.</p>
<p>Now, I wrote about &#8220;trying to change". Why? It's simple, and related to another log_ guc, that is log_filename.</p>
<p>log_filename, is not really file name &#8211; it's more of a template. By default it is: <em>postgresql-%Y-%m-%d_%H%M%S.log</em>.</p>
<p>What these %* things mean? These are actually standard escapes related to <a href="http://man.cx/strftime">strftime function</a>.</p>
<p>So, assuming that today is 30th of April, and it's 3:40pm and 25 seconds, logfile created now would be named <em>postgresql-2011-04-30_154025.log</em>.</p>
<p>And there is a potential problem.</p>
<p>For example, if you'll make your PostgreSQL, not contain anything date/time related &#8211; then no log rotation will ever happen &#8211; because when PostgreSQL will try to rotate the file, it will get the same file name.</p>
<p>The same thing happens in less obvious case &#8211; let's say that you got tired of those 6 digits (time) at the end, and you changed your log_filename to <em>postgresql-%Y-%m-%d.log</em>, while keeping log_rotation_age at 1 day, and log_rotation_size 10MB. What that means? That means that you effectively turned off size based log rotation. Because when log will be 10MB, and PostgreSQL will try to rotate it, it will get the same filename.</p>
<p>Of course there is also log_truncate_on_rotation option. When set, PostgreSQL will truncate existing logfile before switching to it. With this you can still have logfile rotation, even when your log_filename seems to prevent it &#8211; at the cost of losing older data.</p>
<p>This option (i.e. log_truncate_on_rotation) is pretty commonly used to keep only fixed set of log files. For example, if we'll set PostgreSQL like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">log_truncate_on_rotation = on
log_filename = 'postgresql-%a.log'
log_rotation_age = '1d'</pre></td></tr></table></div>

<p>(%a is abbreviated week day name), we will have situation, where PostgreSQL will keep 7 log files:</p>
<ul>
<li>postgresql-Mon.log</li>
<li>postgresql-Tue.log</li>
<li>postgresql-Wed.log</li>
<li>postgresql-Thu.log</li>
<li>postgresql-Fri.log</li>
<li>postgresql-Sat.log</li>
<li>postgresql-Sun.log</li>
</ul>
<p>And when day changes, it will clear week-old log file, and write to it.</p>
<p>Similar situation can be done to keep last month worth of logs, or even last day, in 24 files, per hour.</p>
<p>Having written about it all, before I will move to describe what get's logged, and how, let me mention one more option.</p>
<p>There is option called &#8220;silent_mode".</p>
<p>This is used to prevent PostgreSQL from printing to STDERR information about errors that prevent it from starting.</p>
<p>Normal errors &#8211; even fatal, are normally logged to log files, but if I'll do something that makes Pg unable to start, I will get information about it on the screen regardless of log_destination:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">15:27:39 depesz@blob ~
=$ pg_ctl -D data/ start
server starting
&nbsp;
15:27:49 depesz@blob ~
=$ LOG:  could not bind IPv6 socket: Permission denied
HINT:  Is another postmaster already running on port 80? If not, wait a few seconds and retry.
LOG:  could not bind IPv4 socket: Permission denied
HINT:  Is another postmaster already running on port 80? If not, wait a few seconds and retry.
WARNING:  could not create listen socket for &amp;quot;localhost&amp;quot;
FATAL:  could not create any TCP/IP sockets</pre></td></tr></table></div>

<p>In this example I tried to make PostgreSQL listen on port 80, which wouldn't work, but caused pg to abort startup.</p>
<p>If I'll enable silent_mode, those messages will <b>not</b> be sent to terminal.</p>
<p>You might ask &#8211; but why it sends to terminal, when I have perfectly good logging setup?</p>
<p>Reason is very simple &#8211; increased visibility. Since Pg didn't start &#8211; we should know about it immediately, and not only after some time, when something else will break.</p>
<p>If you are sure that your setup is OK, you might turn on silent_mode, but on the other hand &#8211; it doesn't break anything, so why touch it?</p>
<p>Before I will move to next segment, let me show my favorite settings:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">log_destination = stderr
logging_collector = on
log_directory = 'pg_log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_truncate_on_rotation = off
log_rotation_age = '1d'
log_rotation_size = '100MB'</pre></td></tr></table></div>

<p>Thanks to this, I get all logs (i.e. no previous log get truncated), I have full history of logs (which I then, with cronjob) compress, and archive, and logs are partitioned in files 100MB at most, so it's easy to view them with virtually any pager or even editor.</p>
<p>Now. On to logs content.</p>
<p>First option that we have is log_min_messages. It's named similarly to client_min_messages, so it's easy to confuse, but they are slightly different.</p>
<p>This option is basically &#8220;debug level". You choose which messages should be logged. All levels:</p>
<ul>
<li>debug5</li>
<li>debug4</li>
<li>debug3</li>
<li>debug2</li>
<li>debug1</li>
<li>info</li>
<li>notice</li>
<li>warning</li>
<li>error</li>
<li>log</li>
<li>fatal</li>
<li>panic</li>
</ul>
<p>(client_min_messages has less levels to choose from, and has different priority of &#8220;log" level).</p>
<p>When you set log_min_messages to some level, it means that all messages of this level, and <b>all levels more important</b> will get logged.</p>
<p>This means that setting it to &#8220;panic" will get you <em>only</em> panic, but setting it to debug5 will get you <em>everything</em>.</p>
<p>So, let's see it. log_min_messages debug5, and simple query: &#8220;select * from pg_class order by relname limit 3&#8243;. Logs got:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">DEBUG:  StartTransactionCommand
DEBUG:  StartTransaction
DEBUG:  name: unnamed; blockState:       DEFAULT; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children: 
DEBUG:  CommitTransactionCommand
DEBUG:  CommitTransaction
DEBUG:  name: unnamed; blockState:       STARTED; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children:</pre></td></tr></table></div>

<p>Nothing really cool, but just then the autovacuum kicked in, and I got:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">DEBUG:  InitPostgres
DEBUG:  my backend id is 3
DEBUG:  StartTransaction
DEBUG:  name: unnamed; blockState:       DEFAULT; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children: 
DEBUG:  CommitTransaction
DEBUG:  name: unnamed; blockState:       STARTED; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children: 
DEBUG:  autovacuum: processing database &amp;quot;postgres&amp;quot;
DEBUG:  StartTransaction
DEBUG:  name: unnamed; blockState:       DEFAULT; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children: 
DEBUG:  pg_statistic: vac: 0 (threshold 118), anl: 0 (threshold 84)
DEBUG:  pg_type: vac: 0 (threshold 107), anl: 0 (threshold 79)
DEBUG:  pg_attribute: vac: 0 (threshold 437), anl: 0 (threshold 244)
DEBUG:  pg_authid: vac: 0 (threshold 50), anl: 0 (threshold 50)
DEBUG:  pg_proc: vac: 0 (threshold 501), anl: 0 (threshold 276)
DEBUG:  pg_class: vac: 0 (threshold 101), anl: 0 (threshold 75)
DEBUG:  pg_index: vac: 0 (threshold 70), anl: 0 (threshold 60)
DEBUG:  pg_operator: vac: 0 (threshold 191), anl: 0 (threshold 120)
DEBUG:  pg_database: vac: 0 (threshold 50), anl: 0 (threshold 50)
DEBUG:  pg_opclass: vac: 0 (threshold 72), anl: 0 (threshold 61)
DEBUG:  pg_am: vac: 0 (threshold 51), anl: 0 (threshold 50)
DEBUG:  pg_amop: vac: 0 (threshold 121), anl: 0 (threshold 86)
DEBUG:  pg_amproc: vac: 0 (threshold 100), anl: 0 (threshold 75)
DEBUG:  pg_aggregate: vac: 0 (threshold 74), anl: 0 (threshold 62)
DEBUG:  pg_rewrite: vac: 0 (threshold 67), anl: 0 (threshold 59)
DEBUG:  pg_namespace: vac: 0 (threshold 51), anl: 0 (threshold 51)
DEBUG:  pg_tablespace: vac: 0 (threshold 50), anl: 0 (threshold 50)
DEBUG:  pg_cast: vac: 0 (threshold 88), anl: 0 (threshold 69)
DEBUG:  CommitTransaction
DEBUG:  name: unnamed; blockState:       STARTED; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children: 
DEBUG:  shmem_exit(0): 8 callbacks to make
DEBUG:  proc_exit(0): 2 callbacks to make
DEBUG:  exit(0)
DEBUG:  shmem_exit(-1): 0 callbacks to make
DEBUG:  proc_exit(-1): 0 callbacks to make
DEBUG:  reaping dead processes
DEBUG:  server process (PID 3041) exited with exit code 0</pre></td></tr></table></div>

<p>Generally &#8211; unless you are PostgreSQL developer (i.e. working on making it even better database) &#8211; in which case you don't need to read this blogpost &#8211; you don't need those DEBUG lines.</p>
<p>As for other levels:</p>
<ul>
<li>INFO &#8211; as far as I can tell PostgreSQL itself uses it only in some cases with notify/listen</li>
<li>NOTICE &#8211; well, this are used for example when you create a table, with PRIMARY KEY, and it notifies you about index creation for the table</li>
<li>WARNING &#8211; all kinds of warnings, the most common one is about using escapes (\ character) in strings</li>
<li>ERROR &#8211; all cases which cause Pg to break transaction. Deadlocks, bad values, constraint violations and so on</li>
<li>LOG &#8211; used to log information about special event (checkpoint, connections)</li>
<li>FATAL &#8211; errors which cause Pg session that caused it to abort. For example &#8211; bad password given when authenticating</li>
<li>PANIC &#8211; errors which cause <b>all</b> Pg sessions to be aborted. You don't want this.</li>
</ul>
<p>Please remember that any level can be also generated from PL functions, with RAISE (or it's equivalent) command, like with:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">RAISE LOG <span style="color: #ff0000;">'Calculated income for user % is %'</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">user</span><span style="color: #66cc66;">.</span>id<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">user</span><span style="color: #66cc66;">.</span>income;</pre></td></tr></table></div>

<p>Default setting of &#8220;warning" is pretty good idea. Unless you really, truly need more information. I wouldn't suggest to change to higher log level (like error) because you will be missing information on some things that might be wrong.</p>
<p>Next setting, similar when it comes to accepted values is <i>log_min_error_statement</i> with default of &#8220;error".</p>
<p>This setting means that whenever there is line logged with given log level (or more severe) the statement that caused it should be logged too.</p>
<p>Let's see how it works. Since I have it set to error &#8211; it will not log statements for NOTICES, even if i'll log them. So:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">log_min_messages = notice
log_min_error_statement = error</pre></td></tr></table></div>

<p>First, I ran:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">table</span> x <span style="color: #66cc66;">&#40;</span>id serial <span style="color: #993333; font-weight: bold;">primary</span> <span style="color: #993333; font-weight: bold;">key</span> <span style="color: #66cc66;">&#41;</span>;
NOTICE:  <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span> will <span style="color: #993333; font-weight: bold;">create</span> implicit <span style="color: #993333; font-weight: bold;">sequence</span> <span style="color: #ff0000;">&quot;x_id_seq&quot;</span> <span style="color: #993333; font-weight: bold;">for</span> serial <span style="color: #993333; font-weight: bold;">column</span> <span style="color: #ff0000;">&quot;x.id&quot;</span>
NOTICE:  <span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span> <span style="color: #66cc66;">/</span> <span style="color: #993333; font-weight: bold;">PRIMARY</span> <span style="color: #993333; font-weight: bold;">KEY</span> will <span style="color: #993333; font-weight: bold;">create</span> implicit <span style="color: #993333; font-weight: bold;">index</span> <span style="color: #ff0000;">&quot;x_pkey&quot;</span> <span style="color: #993333; font-weight: bold;">for</span> <span style="color: #993333; font-weight: bold;">table</span> <span style="color: #ff0000;">&quot;x&quot;</span>
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span></pre></td></tr></table></div>

<p>In logs I got only:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">NOTICE:  CREATE TABLE will create implicit sequence &quot;x_id_seq&quot; for serial column &quot;x.id&quot;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index &quot;x_pkey&quot; for table &quot;x&quot;</pre></td></tr></table></div>

<p>But when I'll do something that will generate error:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">/</span><span style="color: #cc66cc;">0</span>;
ERROR:  division <span style="color: #993333; font-weight: bold;">by</span> zero</pre></td></tr></table></div>

<p>Logs get:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">ERROR:  division by zero
STATEMENT:  select 1/0;</pre></td></tr></table></div>

<p>Generally I would say that it makes sense to log statement for all logged messages, so log_min_messages should be the same as log_min_error_statement. Of course &#8211; you might have different opinion, I'm just stating my preference.</p>
<p>Without it, based on details, I will get all warnings logged, but without query that caused them which makes finding the warning and fixing it much harder.</p>
<p>Now, how about actually logging normal queries?</p>
<p>To set it all we have 3 settings:</p>
<ul>
<li>log_statement</li>
<li>log_duration</li>
<li>log_min_duration_statement</li>
</ul>
<p>First of them, log_statement, is a yes/no setting for logging all queries (or some subset of queries, based on the type).</p>
<p>Possible options as: none (default), no queries are logged <b>because</b> of log_statement, as log_min_duration_statement can override it.</p>
<p>On the other end of scale we can set log_statement to &#8216;all', so that it will log every single query.</p>
<p>In between on none and all we have two more settings: &#8220;ddl" &#8211; which means that it will log all queries that change database schema (create, drop, alter), and &#8220;mod" &#8211; which logs also queries that change data (updates, inserts, deletes).</p>
<p>One thing that you have to know/understand &#8211; decision whether it should be logged is based on analysis of the query user sent. So, if I'll set log_statement to &#8220;mod", and then issue:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> x <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">values</span> <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">DEFAULT</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #cc66cc;">0</span> <span style="color: #cc66cc;">1</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">create</span> <span style="color: #993333; font-weight: bold;">function</span> q <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">returns</span> void <span style="color: #993333; font-weight: bold;">as</span> $$
<span style="color: #66cc66;">&gt;&gt;</span> <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> x <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">values</span> <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">DEFAULT</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&gt;&gt;</span> $$ <span style="color: #993333; font-weight: bold;">language</span> <span style="color: #993333; font-weight: bold;">sql</span>;
<span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> q<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
   q    
<span style="color: #808080; font-style: italic;">--------</span>
&nbsp;
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>In logs I will see only:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">LOG:  statement: insert into x (id) values (DEFAULT);
LOG:  statement: create function q () returns void as $$
        insert into x (id) values (DEFAULT);
        $$ language sql;</pre></td></tr></table></div>

<p>That is &#8211; I didn't get information about insert that happened inside q() function, or even that the function got called.</p>
<p>Next option is log_duration. It's a simple on/off switch which lets you log time that it took PostgreSQL to process every query. Every. Single. Query.</p>
<p>What's even worse &#8211; since it just logs time, you don't really get much of an info. With log_duration turned on, after running:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #cc66cc;">1</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>? 
<span style="color: #808080; font-style: italic;">----------</span>
        <span style="color: #cc66cc;">1</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #66cc66;">&#40;</span>depesz@<span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">local</span><span style="color: #66cc66;">&#93;</span>:<span style="color: #cc66cc;">5900</span><span style="color: #66cc66;">&#41;</span> <span style="color: #cc66cc;">12</span>:<span style="color: #cc66cc;">27</span>:<span style="color: #cc66cc;">39</span> <span style="color: #66cc66;">&#91;</span>postgres<span style="color: #66cc66;">&#93;</span> 
$ <span style="color: #993333; font-weight: bold;">select</span> pg_sleep<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;
 pg_sleep 
<span style="color: #808080; font-style: italic;">----------</span>
&nbsp;
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #66cc66;">&#40;</span>depesz@<span style="color: #66cc66;">&#91;</span><span style="color: #993333; font-weight: bold;">local</span><span style="color: #66cc66;">&#93;</span>:<span style="color: #cc66cc;">5900</span><span style="color: #66cc66;">&#41;</span> <span style="color: #cc66cc;">12</span>:<span style="color: #cc66cc;">27</span>:<span style="color: #cc66cc;">43</span> <span style="color: #66cc66;">&#91;</span>postgres<span style="color: #66cc66;">&#93;</span> 
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #cc66cc;">2</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>? 
<span style="color: #808080; font-style: italic;">----------</span>
        <span style="color: #cc66cc;">2</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>I got in logs:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">LOG:  duration: 0.398 ms
LOG:  duration: 1001.620 ms
LOG:  duration: 0.088 ms</pre></td></tr></table></div>

<p>Which (given lack of statements) doesn't really tell me much. Of course I could log all statements, and then pair statement with time (using something which I'll describe later). Or just log some statements, pair those with times, and ignore other times.</p>
<p>Generally, in real life I've not seen a sensible use-case for log_duration (which doesn't mean that there aren't any, it's just that I haven't stumbled upon them yet).</p>
<p>The last, and (in my opinion) the best option to control printing queries and their time is log_min_duration_statement.</p>
<p>This options takes integer argument, which is interpreted as time in milliseconds. Every query that runs for this number of milliseconds (or longer) finishes &#8211; it get's logged.</p>
<p>Let's see it in action: setting to 50 (50 ms), and running:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> pg_sleep<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">0.5</span><span style="color: #66cc66;">&#41;</span>;
 pg_sleep 
<span style="color: #808080; font-style: italic;">----------</span>
&nbsp;
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #cc66cc;">1</span>;
 ?<span style="color: #993333; font-weight: bold;">column</span>? 
<span style="color: #808080; font-style: italic;">----------</span>
        <span style="color: #cc66cc;">1</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> pg_sleep<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">0.25</span><span style="color: #66cc66;">&#41;</span>;
 pg_sleep 
<span style="color: #808080; font-style: italic;">----------</span>
&nbsp;
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>I got in logs:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">LOG:  duration: 501.378 ms  statement: select pg_sleep(0.5);
LOG:  duration: 250.391 ms  statement: select pg_sleep(0.25);</pre></td></tr></table></div>

<p>Please note that select 1 was not logged &#8211; it was simply too fast.</p>
<p>One important note though, quite obvious, but perhaps not at the first sight.</p>
<p>log_statement logs query when it starts &#8211; i.e. as soon as it hits the db server, it will get logged.</p>
<p>log_min_duration_statement logs the query only after it ended (because it needs the time it took to run).</p>
<p>So, if you have long running query <b>now</b>, don't look for it in logs, unless you have log_statement configured so that it should get logged by it.</p>
<p>There is also one more note. Please see that the format of logged messages for log_min_duration_statement is:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">duration: &quot;time-in-ms&quot; ms  statement: &quot;query&quot;</pre></td></tr></table></div>

<p>It's not always like this. If the query happened to be logged by log_statement before, it will <b>not</b> be included in the line emitted by log_min_duration_statement:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">&gt;</span>$ <span style="color: #993333; font-weight: bold;">select</span> name<span style="color: #66cc66;">,</span> setting <span style="color: #993333; font-weight: bold;">from</span> pg_settings <span style="color: #993333; font-weight: bold;">where</span> name <span style="color: #993333; font-weight: bold;">in</span> <span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'log_min_duration_statement'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'log_duration'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'log_statement'</span><span style="color: #66cc66;">&#41;</span>;
            name            <span style="color: #66cc66;">|</span> setting 
<span style="color: #808080; font-style: italic;">----------------------------+---------</span>
 log_duration               <span style="color: #66cc66;">|</span> off
 log_min_duration_statement <span style="color: #66cc66;">|</span> <span style="color: #cc66cc;">50</span>
 log_statement              <span style="color: #66cc66;">|</span> <span style="color: #993333; font-weight: bold;">mod</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">3</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">insert</span> <span style="color: #993333; font-weight: bold;">into</span> x <span style="color: #66cc66;">&#40;</span>id<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">select</span> generate_series<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">10</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">500000</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #993333; font-weight: bold;">INSERT</span> <span style="color: #cc66cc;">0</span> <span style="color: #cc66cc;">499991</span></pre></td></tr></table></div>

<p>Logged:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">LOG:  statement: insert into x (id) select generate_series(10,500000);
LOG:  duration: 5134.431 ms</pre></td></tr></table></div>

<p>That is &#8211; PostgreSQL remembered that query was already logged, so it didn't pollute the logs with redundant info.</p>
<p>Same thing happens with log_duration &#8211; if log_duration notices that log_min_duration_statement already logged time, it doesn't add another line with repeated time.</p>
<p>So, with all this settings, one can easily setup Pg that it will log all modifications (for audit purposes), plus, for performance-analysis reason, all queries longer than some time. This some time will vary from situation to situation, but generally in case of web apps, you shouldn't have queries running for over 100ms. On the other hand in case of data warehouses queries running couple of hours can be seen as normal.</p>
<p>Now, you could notice one important thing in all previous examples. The logs are without any time marks or any other meta information &#8211; I mean in the stderr mode (either with or without logging_collector). It's because PostgreSQL is very flexible about what you can log with all your lines.</p>
<p>There is option: log_line_prefix, which contains format string for prefix that will be used for every logged message.</p>
<p>Possible options:</p>
<ul>
<li>%a &#8211; application name</li>
<li>%u &#8211; user name</li>
<li>%d &#8211; database name</li>
<li>%r &#8211; remote host and port</li>
<li>%h &#8211; remote host</li>
<li>%p &#8211; process ID</li>
<li>%t &#8211; timestamp without milliseconds</li>
<li>%m &#8211; timestamp with milliseconds</li>
<li>%i &#8211; command tag</li>
<li>%e &#8211; SQL state</li>
<li>%c &#8211; session ID</li>
<li>%l &#8211; session line number</li>
<li>%s &#8211; session start timestamp</li>
<li>%v &#8211; virtual transaction ID</li>
<li>%x &#8211; transaction ID (0 if none)</li>
<li>%q &#8211; stop here in non-session processes</li>
<li>%% &#8211; &#8216;%'</li>
</ul>
<p>That's a lot of possibilities.</p>
<p>A bit more detailed description: application_name is new option in 9.0, described with a bit more details in my <a href="http://www.depesz.com/index.php/2009/12/29/waiting-for-8-5-application-name-reporting/">previous</a> blogpost.</p>
<p>user name &#8211; it will be either name of logged in user, or empty string if there is no logged user for this line (for example messages generated by connections, before authentication, or autovacuum, or checkpoints).</p>
<p>database name &#8211; name of database that given session is connected to. Again &#8211; can be empty if there is no database selected yet.</p>
<p>remote host and port &#8211; it either contains string [local] if the connection is over unix socket, or it contains ip address of client, together with port number it used to connect to postgresql (not the port PostgreSQL is listening on, but the port that got opened for the connection on the other end).</p>
<p>process ID &#8211; basically PID of backend process.</p>
<p>command tag &#8211; name of the command that is being run &#8211; ALTER, SELECT, UPDATE and so on. Just the command itself. In case of not-query lines (like connection information) it contains some other defined strings (for example: &#8220;authentication" when authenticating user).</p>
<p>SQL state &#8211; error code (from <a href="http://www.postgresql.org/docs/current/interactive/errcodes-appendix.html">this list</a>). 0000 means everything is OK.</p>
<p>Session ID &#8211; strange string, like: &#8220;4dc132c9.5a49&#8243; which contains (encoded) session start time, and backend pid.</p>
<p>Session line number &#8211; sequential number, for given session, which line it is. Every line get's it incremented by 1, which can easily show if some log lines were removed.</p>
<p>Session start timestamp &#8211; timestamp, with 1-second precision, with information when current session started.</p>
<p>Virtual transaction ID &#8211; value like &#8220;2/4&#8243; &#8211; not really useful unless you need some debugging of PostgreSQL code itself.</p>
<p>Transaction ID &#8211; since PostgreSQL 8.3 (I think), Not every command/query gets automatically assigned transaction ID. If the query doesn't change anything, and it's not in a long transaction &#8211; the transaction ID is &#8220;0&#8243;, which just means that there is no transaction ID given. But when transaction ID is finally given (for example because you're changing stuff in DB), it is just integer.</p>
<p>%q is used to make the line prefix different for session backends (i.e. normal ones), and non-sessions &#8211; like autovacuum, or background writer.</p>
<p>%% is used if you'd like to have &#8220;%" character somewhere in your line prefix.</p>
<p>Final note on log_line_prefix: usually people add timestamp at the beginning, with %t. While it look ok, it makes certain analysis impossible, so please, use %m instead &#8211; it will show the same timestamp, but with better precision.</p>
<p>My favorite log_line_prefix is &#8216;%m %u@%d %p %r &#8216;. Please note the trailing space. If I'll not add it, log line will look like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 13:18:38.227 CEST depesz@postgres 28202 [local]LOG:  duration: 100.956 ms  statement: select pg_sleep(0.1);</pre></td></tr></table></div>

<p>With this space however it will be:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 13:19:20.467 CEST depesz@postgres 28454 [local] LOG:  duration: 100.991 ms  statement: select pg_sleep(0.1);</pre></td></tr></table></div>

<p>(note the space separating [local] from &#8220;LOG:").</p>
<p>Now, that we have logging configured we can add some more information to it.</p>
<p>First &#8211; log_connections &#8211; for every connection it logs 2 lines:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 13:27:11.168 CEST [unknown]@[unknown] 31367  LOG:  connection received: host=[local]
2011-05-01 13:27:11.169 CEST depesz@postgres 31367 [local] LOG:  connection authorized: user=depesz database=postgres</pre></td></tr></table></div>

<p>First show when the connection was received, and second shows which user logged in, and which database it connected to.</p>
<p>In case I didn't log (bad password for example, I'll get:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 13:30:33.227 CEST [unknown]@[unknown] 32604  LOG:  connection received: host=127.0.0.1 port=60868
2011-05-01 13:30:33.227 CEST depesz@postgres 32604 127.0.0.1(60868) FATAL:  password authentication failed for user &quot;depesz&quot;</pre></td></tr></table></div>

<p>Next, log_disconnections, after every session disconnects, it shows some summary information, like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 13:30:19.826 CEST depesz@postgres 32167 [local] LOG:  disconnection: session time: 0:00:58.917 user=depesz database=postgres host=[local]</pre></td></tr></table></div>

<p>log_hostname turns on internal rev-dns queries. Which means that instead of having IP logged, I will have hostname, like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 13:33:34.088 CEST depesz@postgres 1202 blob(60888) LOG:  connection authorized: user=depesz database=postgres</pre></td></tr></table></div>

<p>If you're on Linux, and you have update_process_title enabled, it will also show hostname instead of ip in process title:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">  PID CMD
 1634 postgres: depesz postgres blob(60895) idle</pre></td></tr></table></div>

<p>vs.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">  PID CMD
 1705 postgres: depesz postgres 127.0.0.1(37213) idle</pre></td></tr></table></div>

<p>While it might look nice, please remember that it adds additional cost to connections (dns query), which I personally don't think is worth it.</p>
<p>On the other hand, follow 3 settings should be (in my, not so humble, opinion) turned on by default:</p>
<ul>
<li>log_checkpoints &#8211; whenever checkpoint happens, it will log two lines &#8211; when it starts, and when it ends. It looks like this:

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 13:34:07.167 CEST @ 32084  LOG:  checkpoint starting: time
2011-05-01 13:36:04.422 CEST @ 32084  LOG:  checkpoint complete: wrote 586 buffers (19.1%); 0 transaction log file(s) added, 0 removed, 0 recycled; write=116.957 s, sync=0.087 s, total=117.254 s</pre></td></tr></table></div>

<p>Of course these lines can be separated by some other, but they provide important insight into how checkpoints are working, and if they are too big of a burden for other work.</li>
<li>log_lock_waits &#8211; logs every lock that backend was waiting too long for. Too long is defined as &#8211; longer than deadlock_timeout (1 second by default). To make it happen, let's do:

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #66cc66;">//</span> <span style="color: #993333; font-weight: bold;">Session</span> <span style="color: #cc66cc;">1</span>:
$ <span style="color: #993333; font-weight: bold;">begin</span>;
<span style="color: #993333; font-weight: bold;">BEGIN</span>
&nbsp;
<span style="color: #66cc66;">*</span>$ <span style="color: #993333; font-weight: bold;">truncate</span> x;
<span style="color: #993333; font-weight: bold;">TRUNCATE</span> <span style="color: #993333; font-weight: bold;">TABLE</span>
&nbsp;
<span style="color: #66cc66;">//</span> <span style="color: #993333; font-weight: bold;">and</span> keep it <span style="color: #993333; font-weight: bold;">open</span>
&nbsp;
<span style="color: #66cc66;">//</span> <span style="color: #993333; font-weight: bold;">Session</span> <span style="color: #cc66cc;">2</span>:
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> x;
<span style="color: #66cc66;">//</span> it waits now <span style="color: #993333; font-weight: bold;">for</span> a <span style="color: #993333; font-weight: bold;">lock</span>
&nbsp;
<span style="color: #66cc66;">//</span> wait couple <span style="color: #993333; font-weight: bold;">of</span> seconds
&nbsp;
<span style="color: #66cc66;">//</span> <span style="color: #993333; font-weight: bold;">Session</span> <span style="color: #cc66cc;">2</span>:
<span style="color: #66cc66;">*</span>$ <span style="color: #993333; font-weight: bold;">ROLLBACK</span>;
<span style="color: #993333; font-weight: bold;">ROLLBACK</span>;
&nbsp;
<span style="color: #66cc66;">//</span> <span style="color: #993333; font-weight: bold;">Session</span> <span style="color: #cc66cc;">1</span>:
<span style="color: #66cc66;">//</span> Finished<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">and</span> gave me the <span style="color: #993333; font-weight: bold;">count</span></pre></td></tr></table></div>

<p>After all of this, in logs I saw:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 13:47:23.900 CEST depesz@postgres 6507 [local] STATEMENT:  $ select count(*) from x;
2011-05-01 13:47:27.040 CEST depesz@postgres 6507 [local] LOG:  process 6507 still waiting for AccessShareLock on relation 16386 of database 11874 after 1000.027 ms at character 22
2011-05-01 13:47:27.040 CEST depesz@postgres 6507 [local] STATEMENT:  select count(*) from x;
2011-05-01 13:48:09.006 CEST depesz@postgres 6507 [local] LOG:  process 6507 acquired AccessShareLock on relation 16386 of database 11874 after 42966.114 ms at character 22
2011-05-01 13:48:09.006 CEST depesz@postgres 6507 [local] STATEMENT:  select count(*) from x;
2011-05-01 13:48:09.612 CEST depesz@postgres 6507 [local] LOG:  duration: 43585.964 ms  statement: select count(*) from x;</pre></td></tr></table></div>

<p>Please note that I got information after the query has been waiting for 1 second, and then another one when it finally got the lock, after 43 seconds.</li>
<li>log_temp_files &#8211; numeric value, in kilobytes, means &#8211; log information about every temporary file that get's created that is of this size, or larger. Personally I set it to 0, to get information about all temporary files. Please note that it's not related to temp tables. Temporary files are created by PostgreSQL when it deals with memory intensive operations (sort/hash/group) which do not fit in memory that it can use &#8211; limited by work_mem GUC.
<p>For example. My work_mem is 1MB. So when I'll sort some dataset larger than this, it will use temporary files. Quick test:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">select</span> i <span style="color: #993333; font-weight: bold;">from</span> generate_series<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">1000000</span><span style="color: #66cc66;">&#41;</span> i <span style="color: #993333; font-weight: bold;">order</span> <span style="color: #993333; font-weight: bold;">by</span> i <span style="color: #993333; font-weight: bold;">desc</span> <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">500000</span> offset <span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span> x;
 <span style="color: #993333; font-weight: bold;">count</span>  
<span style="color: #808080; font-style: italic;">--------</span>
 <span style="color: #cc66cc;">500000</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Since it had to sort 1 million integers it used temporary files. And the logs confirm:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">LOG:  temporary file: path &quot;base/pgsql_tmp/pgsql_tmp6507.3&quot;, size 14008320
STATEMENT:  select count(*) from (select i from generate_series(1,1000000) i order by i desc limit 500000 offset 0) x;
LOG:  temporary file: path &quot;base/pgsql_tmp/pgsql_tmp6507.2&quot;, size 14000000
STATEMENT:  select count(*) from (select i from generate_series(1,1000000) i order by i desc limit 500000 offset 0) x;
LOG:  duration: 1385.628 ms  statement: select count(*) from (select i from generate_series(1,1000000) i order by i desc limit 500000 offset 0) x;</pre></td></tr></table></div>

<p>(removed prefixes here as they are useless in this case).</p>
<p>As we can see PostgreSQL had actually to create 2 temporary files, with total size of ~ 28MB. That's not much, but if I'd set larger work_mem:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">set</span> work_mem <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'10MB'</span>;
<span style="color: #993333; font-weight: bold;">SET</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">from</span> <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">select</span> i <span style="color: #993333; font-weight: bold;">from</span> generate_series<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">1000000</span><span style="color: #66cc66;">&#41;</span> i <span style="color: #993333; font-weight: bold;">order</span> <span style="color: #993333; font-weight: bold;">by</span> i <span style="color: #993333; font-weight: bold;">desc</span> <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">500000</span> offset <span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span> x;</pre></td></tr></table></div>

<p>Logs show immediately:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">LOG:  temporary file: path &quot;base/pgsql_tmp/pgsql_tmp6507.5&quot;, size 13950976
STATEMENT:  select count(*) from (select i from generate_series(1,1000000) i order by i desc limit 500000 offset 0) x;
LOG:  duration: 1112.501 ms  statement: select count(*) from (select i from generate_series(1,1000000) i order by i desc limit 500000 offset 0) x;</pre></td></tr></table></div>

<p>Only one temp file, with size being only ~ 14MB.</p>
<p>Sizes of temporary files vary, but generally &#8211; when Pg is creating them, you know that you can make the query faster by giving it more memory.</li>
</ul>
<p>Now, to the last two (log_*) options in postgresql.conf &#8220;What to log" section.</p>
<p>log_timezone. Never saw anyone using it, but generally it lets you have the logs with timestamps that are logged in different timezone than the server is.</p>
<p>For example, When I log something now, I get:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 14:02:51.158 CEST [unknown]@[unknown] 12104  LOG:  connection received: host=[local]</pre></td></tr></table></div>

<p>But when I'll set log_timezone to &#8216;America/New_York', I will get:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 08:03:53.938 EDT [unknown]@[unknown] 12476  LOG:  connection received: host=[local]</pre></td></tr></table></div>

<p>I think that it could be useful in some cases, but timezones are confusing enough without using non-server timezone in server logs.</p>
<p>Last &#8220;what to log" (log_*) option is &#8220;log_error_verbosity". It has 3 settings: terse, default and verbose. I think it will be best to show the difference. So I created view on table x, and then tried to drop table x, with modified verbosity. Results:</p>
<ul>
<li>log_error_verbosity = &#8216;terse':

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">ERROR:  cannot drop table x because other objects depend on it
STATEMENT:  drop table x;</pre></td></tr></table></div>

</li>
<li>log_error_verbosity = &#8216;default':

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">ERROR:  cannot drop table x because other objects depend on it
DETAIL:  view a depends on table x
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
STATEMENT:  drop table x;</pre></td></tr></table></div>

</li>
<li>log_error_verbosity = &#8216;verbose':

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">LOG:  00000: statement: drop table x;
LOCATION:  exec_simple_query, postgres.c:900
ERROR:  2BP01: cannot drop table x because other objects depend on it
DETAIL:  view a depends on table x
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
LOCATION:  reportDependentObjects, dependency.c:914
STATEMENT:  drop table x;</pre></td></tr></table></div>

</li>
</ul>
<p>Generally, for logs, I think that you might go with default &#8211; mostly because it shows &#8220;DETAIL" line, which is quite often very important.</p>
<p>Within the &#8220;What to log" section of postgresql.conf, there are also four debug_* options.</p>
<p>One of them &#8211; debug_pretty_print doesn't log anything, but changes what is being logged by the other three.</p>
<p>The other three (debug_print_parse, debug_print_rewritten and debug_print_plan) log internal representation of query tree after parse, rewrite (for example if views are used), and then final plan for query. But not in a form for the normal people.</p>
<p>For example. Data logged for query &#8220;SELECT 1&#8243; looks like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 08:20:33.236 EDT depesz@postgres 18322 [local] LOG:  parse tree:
2011-05-01 08:20:33.236 EDT depesz@postgres 18322 [local] DETAIL:     {QUERY 
           :commandType 1 
           :querySource 0 
           :canSetTag true 
           :utilityStmt &amp;lt;&gt; 
           :resultRelation 0 
           :intoClause &amp;lt;&gt; 
           :hasAggs false 
           :hasWindowFuncs false 
           :hasSubLinks false 
           :hasDistinctOn false 
           :hasRecursive false 
           :hasForUpdate false 
           :cteList &amp;lt;&gt; 
           :rtable &amp;lt;&gt; 
           :jointree 
              {FROMEXPR 
              :fromlist &amp;lt;&gt; 
              :quals &amp;lt;&gt;
              }
           :targetList (
              {TARGETENTRY 
              :expr 
                 {CONST 
                 :consttype 23 
                 :consttypmod -1 
                 :constlen 4 
                 :constbyval true 
                 :constisnull false 
                 :location 7 
                 :constvalue 4 [ 1 0 0 0 0 0 0 0 ]
                 }
              :resno 1 
              :resname ?column? 
              :ressortgroupref 0 
              :resorigtbl 0 
              :resorigcol 0 
              :resjunk false
              }
           )
           :returningList &amp;lt;&gt; 
           :groupClause &amp;lt;&gt; 
           :havingQual &amp;lt;&gt; 
           :windowClause &amp;lt;&gt; 
           :distinctClause &amp;lt;&gt; 
           :sortClause &amp;lt;&gt; 
           :limitOffset &amp;lt;&gt; 
           :limitCount &amp;lt;&gt; 
           :rowMarks &amp;lt;&gt; 
           :setOperations &amp;lt;&gt;
           }</pre></td></tr></table></div>

<p>Rewritten query is in this case the same, and plan looks like:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 08:20:33.236 EDT depesz@postgres 18322 [local] STATEMENT:  select 1;
2011-05-01 08:20:33.236 EDT depesz@postgres 18322 [local] LOG:  plan:
2011-05-01 08:20:33.236 EDT depesz@postgres 18322 [local] DETAIL:     {PLANNEDSTMT 
           :commandType 1 
           :hasReturning false 
           :canSetTag true 
           :transientPlan false 
           :planTree 
              {RESULT 
              :startup_cost 0.00 
              :total_cost 0.01 
              :plan_rows 1 
              :plan_width 0 
              :targetlist (
                 {TARGETENTRY 
                 :expr 
                    {CONST 
                    :consttype 23 
                    :consttypmod -1 
                    :constlen 4 
                    :constbyval true 
                    :constisnull false 
                    :location 7 
                    :constvalue 4 [ 1 0 0 0 0 0 0 0 ]
                    }
                 :resno 1 
                 :resname ?column? 
                 :ressortgroupref 0 
                 :resorigtbl 0 
                 :resorigcol 0 
                 :resjunk false
                 }
              )
              :qual &amp;lt;&gt; 
              :lefttree &amp;lt;&gt; 
              :righttree &amp;lt;&gt; 
              :initPlan &amp;lt;&gt; 
              :extParam (b)
              :allParam (b)
              :resconstantqual &amp;lt;&gt;
              }
           :rtable &amp;lt;&gt; 
           :resultRelations &amp;lt;&gt; 
           :utilityStmt &amp;lt;&gt; 
           :intoClause &amp;lt;&gt; 
           :subplans &amp;lt;&gt; 
           :rewindPlanIDs (b)
           :rowMarks &amp;lt;&gt; 
           :relationOids &amp;lt;&gt; 
           :invalItems &amp;lt;&gt; 
           :nParamExec 0
           }</pre></td></tr></table></div>

<p>This would finish this blogpost, if it wasn't for 4 options in &#8220;Statistics Monitoring" section.</p>
<p>These options, while not useful on a daily basis, prove extremely useful when testing some strangely slow queries.</p>
<p>First of all: log_parser_stats. If I'll turn it on, and issue relatively simple query:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">SELECT</span> n<span style="color: #66cc66;">.</span>nspname <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #ff0000;">&quot;Schema&quot;</span><span style="color: #66cc66;">,</span>
  c<span style="color: #66cc66;">.</span>relname <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #ff0000;">&quot;Name&quot;</span><span style="color: #66cc66;">,</span>
  <span style="color: #993333; font-weight: bold;">CASE</span> c<span style="color: #66cc66;">.</span>relkind <span style="color: #993333; font-weight: bold;">WHEN</span> <span style="color: #ff0000;">'r'</span> <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #ff0000;">'table'</span> <span style="color: #993333; font-weight: bold;">WHEN</span> <span style="color: #ff0000;">'v'</span> <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #ff0000;">'view'</span> <span style="color: #993333; font-weight: bold;">WHEN</span> <span style="color: #ff0000;">'i'</span> <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #ff0000;">'index'</span> <span style="color: #993333; font-weight: bold;">WHEN</span> <span style="color: #ff0000;">'S'</span> <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #ff0000;">'sequence'</span> <span style="color: #993333; font-weight: bold;">WHEN</span> <span style="color: #ff0000;">'s'</span> <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #ff0000;">'special'</span> <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #ff0000;">&quot;Type&quot;</span><span style="color: #66cc66;">,</span>
  pg_catalog<span style="color: #66cc66;">.</span>pg_get_userbyid<span style="color: #66cc66;">&#40;</span>c<span style="color: #66cc66;">.</span>relowner<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #ff0000;">&quot;Owner&quot;</span>
<span style="color: #993333; font-weight: bold;">FROM</span> pg_catalog<span style="color: #66cc66;">.</span>pg_class c
     <span style="color: #993333; font-weight: bold;">LEFT</span> <span style="color: #993333; font-weight: bold;">JOIN</span> pg_catalog<span style="color: #66cc66;">.</span>pg_namespace n <span style="color: #993333; font-weight: bold;">ON</span> n<span style="color: #66cc66;">.</span>oid <span style="color: #66cc66;">=</span> c<span style="color: #66cc66;">.</span>relnamespace
<span style="color: #993333; font-weight: bold;">WHERE</span> c<span style="color: #66cc66;">.</span>relkind <span style="color: #993333; font-weight: bold;">IN</span> <span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'r'</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">'v'</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">'S'</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">''</span><span style="color: #66cc66;">&#41;</span>
      <span style="color: #993333; font-weight: bold;">AND</span> n<span style="color: #66cc66;">.</span>nspname <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #ff0000;">'pg_catalog'</span>
      <span style="color: #993333; font-weight: bold;">AND</span> n<span style="color: #66cc66;">.</span>nspname <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #ff0000;">'information_schema'</span>
      <span style="color: #993333; font-weight: bold;">AND</span> n<span style="color: #66cc66;">.</span>nspname !~ <span style="color: #ff0000;">'^pg_toast'</span>
  <span style="color: #993333; font-weight: bold;">AND</span> pg_catalog<span style="color: #66cc66;">.</span>pg_table_is_visible<span style="color: #66cc66;">&#40;</span>c<span style="color: #66cc66;">.</span>oid<span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">ORDER</span> <span style="color: #993333; font-weight: bold;">BY</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">,</span><span style="color: #cc66cc;">2</span>;</pre></td></tr></table></div>

<p>In my logs it added:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 08:32:38.146 EDT depesz@postgres 22944 [local] LOG:  PARSER STATISTICS
2011-05-01 08:32:38.146 EDT depesz@postgres 22944 [local] DETAIL:  ! system usage stats:
        !       0.000230 elapsed 0.000000 user 0.000000 system sec
        !       [0.000000 user 0.000000 sys total]
        !       0/0 [0/0] filesystem blocks in/out
        !       0/94 [0/782] page faults/reclaims, 0 [0] swaps
        !       0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
        !       0/0 [2/0] voluntary/involuntary context switches
2011-05-01 08:32:38.147 EDT depesz@postgres 22944 [local] LOG:  PARSE ANALYSIS STATISTICS
2011-05-01 08:32:38.147 EDT depesz@postgres 22944 [local] DETAIL:  ! system usage stats:
        !       0.000844 elapsed 0.000000 user 0.000000 system sec
        !       [0.000000 user 0.000000 sys total]
        !       0/0 [0/0] filesystem blocks in/out
        !       0/155 [0/941] page faults/reclaims, 0 [0] swaps
        !       0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
        !       0/0 [2/0] voluntary/involuntary context switches
2011-05-01 08:32:38.147 EDT depesz@postgres 22944 [local] LOG:  REWRITER STATISTICS
2011-05-01 08:32:38.147 EDT depesz@postgres 22944 [local] DETAIL:  ! system usage stats:
        !       0.000007 elapsed 0.000000 user 0.000000 system sec
        !       [0.000000 user 0.000000 sys total]
        !       0/0 [0/0] filesystem blocks in/out
        !       0/2 [0/943] page faults/reclaims, 0 [0] swaps
        !       0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
        !       0/0 [2/0] voluntary/involuntary context switches</pre></td></tr></table></div>

<p>That's a lot of information. What's worse &#8211; it's not really well documented. The best thing I could find was <a href="http://git.postgresql.org/gitweb?p=postgresql.git;a=blob;f=src/backend/tcop/postgres.c;h=a07661f02abdd08e1e4d0af7d45735e810d5cb7c;hb=HEAD#l4210">source</a>.</p>
<p>But. Even without it, we see information about time elapsed in parser itself, in parser analytics, and in rewriter. Wee if there were any IO operations, how many context switches happened and other information that can be useful for pinpointing problems (I saw a query once that had parsing time ~ 50% of whole query time.</p>
<p>When I enable log_planner_stats, and run the same query I get:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 08:41:22.779 EDT depesz@postgres 26153 [local] LOG:  PLANNER STATISTICS
2011-05-01 08:41:22.779 EDT depesz@postgres 26153 [local] DETAIL:  ! system usage stats:
        !       0.000925 elapsed 0.000000 user 0.000000 system sec
        !       [0.000000 user 0.000000 sys total]
        !       0/0 [0/224] filesystem blocks in/out
        !       0/163 [0/1188] page faults/reclaims, 0 [0] swaps
        !       0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
        !       0/0 [1/0] voluntary/involuntary context switches</pre></td></tr></table></div>

<p>and with log_executor_stats:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 08:42:21.000 EDT depesz@postgres 26476 [local] LOG:  EXECUTOR STATISTICS
2011-05-01 08:42:21.000 EDT depesz@postgres 26476 [local] DETAIL:  ! system usage stats:
        !       0.001363 elapsed 0.000000 user 0.000000 system sec
        !       [0.000000 user 0.000000 sys total]
        !       0/0 [0/224] filesystem blocks in/out
        !       0/86 [0/1293] page faults/reclaims, 0 [0] swaps
        !       0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
        !       0/0 [1/0] voluntary/involuntary context switches</pre></td></tr></table></div>

<p>The last of those options is log_statement_stats. It cannot be enabled together with any other log_*_stats (the other 3 can be combined), but when I'll disable all others, and enable just log_statement_stats, I get:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">2011-05-01 08:45:38.840 EDT depesz@postgres 27689 [local] LOG:  QUERY STATISTICS
2011-05-01 08:45:38.840 EDT depesz@postgres 27689 [local] DETAIL:  ! system usage stats:
        !       0.003925 elapsed 0.000000 user 0.000000 system sec
        !       [0.000000 user 0.000000 sys total]
        !       0/0 [0/224] filesystem blocks in/out
        !       0/526 [0/1293] page faults/reclaims, 0 [0] swaps
        !       0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent
        !       0/0 [1/0] voluntary/involuntary context switches</pre></td></tr></table></div>

<p>This is global information per query. We don't know how much time was spent in any of the modules (parser, planner, executor), but we see the global information.</p>
<p>The cool thing about log_*_stats is that while it's too much information to run by default on any production server, it can be changed on-the-fly, per session (as long as you have superuser account). So when you'll see some weirdly slow query, even on production, you can connect with psql, set some log_*_stats to true (it will not change the value of the gucs for other sessions), and run the query to get more data. And all other connections/backends will be working as normal without flooding logs with this additional info.</p>
<p>And that's all folks.</p>
<p>Of course &#8211; remember that a lot of things can be set per user or per database. For example &#8211; you might have general situation where you don't care about queries, but one particular database is very important, and should be fast, so you do:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">ALTER</span> <span style="color: #993333; font-weight: bold;">DATABASE</span> important <span style="color: #993333; font-weight: bold;">SET</span> log_min_duration_statement <span style="color: #66cc66;">=</span> <span style="color: #cc66cc;">30</span>;</pre></td></tr></table></div>

<p>And all new connections to this database will log all queries over 30ms.</p>
<p>If you need more details &#8211; please check <a href="http://www.postgresql.org/docs/9.0/interactive/runtime-config-logging.html">the fine manual</a>.</p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">6 comments <a href='http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-33427" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-33427" title="">#</a></span> pg_alchemist</div>  <div class="date">May 13, 2011</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e4426b9692f1f755bb3957ecd16de686?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I was waiting for this series <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />    Brilliant article yet again depesz. Thanks much.  I really would love  to see your script that you use  to archive your  100MB logs though.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-33428" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-33428" title="">#</a></span> <a href='http://depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">May 13, 2011</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@pg_alchemist:</p>
<p>Her you go &#8211; it&#8217;s free to use/modify:</p>
<p><a href="https://labs.omniti.com/labs/pgtreats/browser/trunk/tools/archive_logs.sh" rel="nofollow">https://labs.omniti.com/labs/pgtreats/browser/trunk/tools/archive_logs.sh</a></p>
	</li>
		
		
			
<li class="odd" id="comment-33431" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-33431" title="">#</a></span> pg_alchemist</div>  <div class="date">May 16, 2011</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/e4426b9692f1f755bb3957ecd16de686?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Thanks a lot Depesz!</p>
	</li>
		
		
			
<li class="odd" id="comment-35434" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35434" title="">#</a></span> <a href='http://www.siniduwork.com' rel='external nofollow' class='url'>Groum Workalemahu</a></div>  <div class="date">Apr 19, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/9c275a0b66fc9655a804a4e59509e339?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>It is an excellent article we are using Ubuntu and postgres  to develop a data base for mobile payment system and we have had some issues on monitoring the performances of the database your article helped us a lot Thank you .</p>
<p>                    siniduwork scientific computing</p>
	</li>
		
		
			
<li class="odd" id="comment-35526" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35526" title="">#</a></span> Oscar Jacuinde</div>  <div class="date">May 20, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/aa28e15de7bb56bcdd2a089bacc94e9d?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Good article!, I needed to learn how to log bad querys in a server that we are developing some jsp apps, now i can see what errors we have in our query :D, were n00bs btw too <img src="http://www.depesz.com/wp-includes/images/smilies/icon_razz.gif" alt=":P" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="mycomment" id="comment-40545" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-40545" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 20, 2013</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Sorry, had to block comments in here. For some reason it became very popular post for spammers.</p>
	</li>
		
		
		
	</ol>
	
	
	

	<p id="comments-closed">Sorry, comments swith off.</p>
</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">334 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">311 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">255 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">205 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">151 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">144 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">128 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">128 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">126 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/11/14/how-i-learned-to-stop-worrying-and-love-the-triggers/" title="How I Learned to Stop Worrying and Love the Triggers" class="wpp-post-title" target="_self">How I Learned to Stop Worrying and Love the Triggers</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">100 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --></div>

</body>
</html>

