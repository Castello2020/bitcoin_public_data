http://www.depesz.com/2012/06/25/how-to-get-shortest-connection-between-two-cities/
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 23 Jul 2014 08:01:56 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/5.5.12-1
X-Pingback: http://www.depesz.com/xmlrpc.php
Link: <http://www.depesz.com/?p=2482>; rel=shortlink

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="coder" content="MHweb.pl" />
<title>select * from depesz;  &raquo; Blog Archive   &raquo; How to get shortest connection between two cities</title>
<meta name="generator" content="WordPress 3.9.1" /> <!-- leave this for stats -->
<link rel="stylesheet" href="http://www.depesz.com/wp-content/themes/depesz/style.css" type="text/css" media="screen" />
<!-- <link rel="stylesheet" href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/style1.css" type="text/css" media="screen" /> -->

<link rel="alternate" type="application/rss+xml" title="select * from depesz; RSS Feed" href="http://www.depesz.com/feed/" />
<link rel="pingback" href="http://www.depesz.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="select * from depesz; &raquo; How to get shortest connection between two cities Comments Feed" href="http://www.depesz.com/2012/06/25/how-to-get-shortest-connection-between-two-cities/feed/" />
<link rel='stylesheet' id='cookie-style-css'  href='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.css?ver=3.9.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.depesz.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-popular-posts-css'  href='http://www.depesz.com/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3' type='text/css' media='all' />
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery.js?ver=1.11.0'></script>
<script type='text/javascript' src='http://www.depesz.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var user_options = {"messageContent":"In order for this site to work properly, and in order to evaluate and improve the site we need to store small files (called cookies) on your computer.<br\/> Over 90% of all websites do this, however, since the 25th of May 2011 we are required by EU regulations to obtain your consent first. What do you say?","redirectLink":"http:\/\/google.com","okText":"That's fine","notOkText":"I don't agree","cookieName":"jsCookiewarning29Check","ajaxUrl":"http:\/\/www.depesz.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/cookie-warning/cookiewarning.js?ver=3.9.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.depesz.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.depesz.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 3.9.1" />
<link rel='canonical' href='http://www.depesz.com/2012/06/25/how-to-get-shortest-connection-between-two-cities/' />
<link rel='shortlink' href='http://www.depesz.com/?p=2482' />

<link rel="stylesheet" href="http://www.depesz.com/wp-content/plugins/dd-formmailer/dd-formmailer.css" type="text/css" media="screen" />
<style type="text/css">

</style>
<!--[if lte IE 7]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie.css" rel="stylesheet" type="text/css" /><![endif]-->
<!--[if lte IE 6]><link href="http://mhweb.pl/work/wp/wp-content/themes/blue-box/ie6.css" rel="stylesheet" type="text/css" /><![endif]-->
</head>
<body>
<div id="box">
	<div id="up">
		<div id="logo"></div>
		<div id="menu">

			<div class="lc"></div>
			
			<div class="main">
				<div id="nav">
					<ul class="nav">
					<li class="first"><a href="http://www.depesz.com">Blog</a></li>
					<li class="page_item page-item-1947"><a href="http://www.depesz.com/projects/">Projects</a></li>
<li class="page_item page-item-1618"><a href="http://www.depesz.com/contact/">Contact</a></li>
					</ul>
				</div>
			</div>

			<div class="rc"></div>

		</div>
	</div>

	<div id="top_cont"></div>
	<div id="mainbck">



	<div id="content">

	
		<div class="entry">
			<div class="post" id="post-2482">
				<div class="topek">
					<div class="name">
						<a href="http://www.depesz.com/2012/06/25/how-to-get-shortest-connection-between-two-cities/" rel="bookmark" title="Permanent Link to How to get shortest connection between two cities">How to get shortest connection between two cities</a><div class="rss-img"><a href="http://www.depesz.com/feed/">&nbsp;&nbsp;</a></div>
					</div>

					<small>June 25th, 2012 by depesz | Tags: <a href="http://www.depesz.com/tag/distance/" rel="tag">distance</a>, <a href="http://www.depesz.com/tag/graph/" rel="tag">graph</a>, <a href="http://www.depesz.com/tag/postgresql/" rel="tag">postgresql</a>, <a href="http://www.depesz.com/tag/recursive/" rel="tag">recursive</a>, <a href="http://www.depesz.com/tag/ticket-to-ride/" rel="tag">ticket to ride</a>, <a href="http://www.depesz.com/tag/tnt/" rel="tag">tnt</a>, <a href="http://www.depesz.com/tag/with-recursive/" rel="tag">with recursive</a> |  <a href="http://www.depesz.com/2012/06/25/how-to-get-shortest-connection-between-two-cities/#comments" title="Comment on How to get shortest connection between two cities">30 comments &#187;</a></small>
<br><small><big>Did it help? If yes - maybe you can help me? Donate BTC to <a href="https://blockchain.info/address/19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx">19zPa5diT2LZqGtTi8f8bfApLn8rw9zBHx</a></big></small>
				</div>
				
				<div class="the">
					<p>Yesterday, on <a href="irc://irc.freenode.net/#postgresql">#postgresql on irc</a> some guy asked:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="text" style="font-family:monospace;">22:28 &lt; rafasc&gt; i am trying to use plpgsql to find the shortest path between two cities, each pair of cities has one or more edges, each edge has a different wheight.
22:28 &lt; rafasc&gt; Is there a easy way to compute the shortest path between two cities?</pre></td></tr></table></div>

<p>Well, I was not really in a mood to solve it, so I just told him to try with recursive queries, and went on my way.</p>
<p>But I thought about it. And decided to see if I can write the query.</p>
<p><span id="more-2482"></span></p>
<p>To get some test data, I created two simple tables:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ \d cities
   <span style="color: #993333; font-weight: bold;">Table</span> <span style="color: #ff0000;">&quot;public.cities&quot;</span>
 <span style="color: #993333; font-weight: bold;">Column</span> │ <span style="color: #993333; font-weight: bold;">Type</span> │ Modifiers
────────┼──────┼───────────
 city   │ text │ <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span>
Indexes:
    <span style="color: #ff0000;">&quot;cities_pkey&quot;</span> <span style="color: #993333; font-weight: bold;">PRIMARY</span> <span style="color: #993333; font-weight: bold;">KEY</span><span style="color: #66cc66;">,</span> btree <span style="color: #66cc66;">&#40;</span>city<span style="color: #66cc66;">&#41;</span>
Referenced <span style="color: #993333; font-weight: bold;">by</span>:
    <span style="color: #993333; font-weight: bold;">TABLE</span> <span style="color: #ff0000;">&quot;routes&quot;</span> <span style="color: #993333; font-weight: bold;">CONSTRAINT</span> <span style="color: #ff0000;">&quot;routes_from_city_fkey&quot;</span> <span style="color: #993333; font-weight: bold;">FOREIGN</span> <span style="color: #993333; font-weight: bold;">KEY</span> <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">REFERENCES</span> cities<span style="color: #66cc66;">&#40;</span>city<span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">TABLE</span> <span style="color: #ff0000;">&quot;routes&quot;</span> <span style="color: #993333; font-weight: bold;">CONSTRAINT</span> <span style="color: #ff0000;">&quot;routes_to_city_fkey&quot;</span> <span style="color: #993333; font-weight: bold;">FOREIGN</span> <span style="color: #993333; font-weight: bold;">KEY</span> <span style="color: #66cc66;">&#40;</span>to_city<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">REFERENCES</span> cities<span style="color: #66cc66;">&#40;</span>city<span style="color: #66cc66;">&#41;</span>
&nbsp;
$ \d routes
      <span style="color: #993333; font-weight: bold;">Table</span> <span style="color: #ff0000;">&quot;public.routes&quot;</span>
  <span style="color: #993333; font-weight: bold;">Column</span>   │  <span style="color: #993333; font-weight: bold;">Type</span>   │ Modifiers
───────────┼─────────┼───────────
 from_city │ text    │ <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span>
 to_city   │ text    │ <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span>
 <span style="color: #993333; font-weight: bold;">length</span>    │ <span style="color: #993333; font-weight: bold;">integer</span> │ <span style="color: #993333; font-weight: bold;">not</span> <span style="color: #993333; font-weight: bold;">null</span>
Indexes:
    <span style="color: #ff0000;">&quot;routes_pkey&quot;</span> <span style="color: #993333; font-weight: bold;">PRIMARY</span> <span style="color: #993333; font-weight: bold;">KEY</span><span style="color: #66cc66;">,</span> btree <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">,</span> to_city<span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">Check</span> constraints:
    <span style="color: #ff0000;">&quot;routes_check&quot;</span> <span style="color: #993333; font-weight: bold;">CHECK</span> <span style="color: #66cc66;">&#40;</span>from_city <span style="color: #66cc66;">&lt;</span> to_city<span style="color: #66cc66;">&#41;</span>
Foreign<span style="color: #66cc66;">-</span><span style="color: #993333; font-weight: bold;">key</span> constraints:
    <span style="color: #ff0000;">&quot;routes_from_city_fkey&quot;</span> <span style="color: #993333; font-weight: bold;">FOREIGN</span> <span style="color: #993333; font-weight: bold;">KEY</span> <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">REFERENCES</span> cities<span style="color: #66cc66;">&#40;</span>city<span style="color: #66cc66;">&#41;</span>
    <span style="color: #ff0000;">&quot;routes_to_city_fkey&quot;</span> <span style="color: #993333; font-weight: bold;">FOREIGN</span> <span style="color: #993333; font-weight: bold;">KEY</span> <span style="color: #66cc66;">&#40;</span>to_city<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">REFERENCES</span> cities<span style="color: #66cc66;">&#40;</span>city<span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>Data in them is very simple:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> cities <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">5</span>;
      city
────────────────
 Vancouver
 Calgary
 Winnipeg
 Sault St Marie
 Montreal
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">5</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
$ <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">from</span> routes <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">5</span>;
 from_city │  to_city  │ <span style="color: #993333; font-weight: bold;">length</span>
───────────┼───────────┼────────
 Calgary   │ Vancouver │      <span style="color: #cc66cc;">3</span>
 Seattle   │ Vancouver │      <span style="color: #cc66cc;">1</span>
 Portland  │ Seattle   │      <span style="color: #cc66cc;">1</span>
 Calgary   │ Seattle   │      <span style="color: #cc66cc;">4</span>
 Calgary   │ Helena    │      <span style="color: #cc66cc;">4</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">5</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>In case you wonder &#8211; the data represents base map for &#8220;Ticket to Ride" game &#8211; awesome thing, and if you haven't played it &#8211; get it, and play.</p>
<p><a href="/wp-content/uploads/2012/06/Ticket_to_ride.png"><img src="/wp-content/uploads/2012/06/Ticket_to_ride-small.png" width="400" height="300" alt="Ticket to Ride - US Map"/></a></p>
<p>This map was part of <a href="http://arstechnica.com/gaming/2011/05/review-ticket-to-ride-on-ipad-a-high-quality-port-of-board-game/">review</a> of the game on <a href="http://arstechnica.com">ars technica</a>.</p>
<p>But anyway. So, I have 36 cities, and 78 unique paths between them, each with length information. So, with this I should be able to find the shortest path.</p>
<p>One word of warning though &#8211; the fact that it's possible to do in database, doesn't mean it's good idea. Personally, I think that it should be done in some standalone application, which would use some smarter algorithms, extensive cache, and so on. But &#8211; this is just a proof of concept, and the data size that I'm working on is small enough that it shouldn't matter.</p>
<p>Each route is stored only once in routes. So I'll start by duplicating the rows, so I will have them written &#8220;in both directions":</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">VIEW</span> all_routes <span style="color: #993333; font-weight: bold;">AS</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span> from_city<span style="color: #66cc66;">,</span> to_city<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">FROM</span> routes
    <span style="color: #993333; font-weight: bold;">UNION</span> <span style="color: #993333; font-weight: bold;">ALL</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span> to_city<span style="color: #66cc66;">,</span> from_city<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">FROM</span> routes</pre></td></tr></table></div>

<p>This will save me some typing later on.</p>
<p>First, let's start with some small route, but one that will show that it actually works &#8211; Duluth-Toronto is great example.</p>
<p>Reason is very simple, We have these 3 routes:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">   from_city    │    to_city     │ <span style="color: #993333; font-weight: bold;">length</span>
────────────────┼────────────────┼────────
 Duluth         │ Sault St Marie │      <span style="color: #cc66cc;">3</span>
 Sault St Marie │ Toronto        │      <span style="color: #cc66cc;">2</span>
 Duluth         │ Toronto        │      <span style="color: #cc66cc;">6</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">3</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>There is a direct connection (length 6), but it's actually cheaper to go via Sault St Marie, with total length of 5!</p>
<p><em>Here is a pause, of ~ 1 hour when I tried to write a query to solve my problem. And I failed. Kind of.</em></p>
<p>Query that would return the data is relatively simple:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">WITH</span> RECURSIVE
    multiroutes <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
        <span style="color: #993333; font-weight: bold;">SELECT</span>
            from_city<span style="color: #66cc66;">,</span>
            to_city<span style="color: #66cc66;">,</span>
            ARRAY<span style="color: #66cc66;">&#91;</span> from_city<span style="color: #66cc66;">,</span> to_city <span style="color: #66cc66;">&#93;</span> <span style="color: #993333; font-weight: bold;">as</span> full_route<span style="color: #66cc66;">,</span>
            <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">as</span> total_length
        <span style="color: #993333; font-weight: bold;">FROM</span>
            all_routes
        <span style="color: #993333; font-weight: bold;">WHERE</span>
            from_city <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'Duluth'</span>
        <span style="color: #993333; font-weight: bold;">UNION</span> <span style="color: #993333; font-weight: bold;">ALL</span>
        <span style="color: #993333; font-weight: bold;">SELECT</span>
            m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
            n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
            m<span style="color: #66cc66;">.</span>full_route <span style="color: #66cc66;">||</span> n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
            m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span>
        <span style="color: #993333; font-weight: bold;">FROM</span>
            multiroutes m
            <span style="color: #993333; font-weight: bold;">join</span> all_routes n <span style="color: #993333; font-weight: bold;">ON</span> m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> n<span style="color: #66cc66;">.</span>from_city
        <span style="color: #993333; font-weight: bold;">WHERE</span>
            n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #993333; font-weight: bold;">ALL</span><span style="color: #66cc66;">&#40;</span> m<span style="color: #66cc66;">.</span>full_route <span style="color: #66cc66;">&#41;</span>
    <span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span>
<span style="color: #993333; font-weight: bold;">FROM</span> multiroutes
<span style="color: #993333; font-weight: bold;">WHERE</span> to_city <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'Toronto'</span>
<span style="color: #993333; font-weight: bold;">ORDER</span> <span style="color: #993333; font-weight: bold;">BY</span> total_length <span style="color: #993333; font-weight: bold;">desc</span> <span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">1</span>;</pre></td></tr></table></div>

<p>But the problem is &#8211; it's extremely slow. And uses a lot of resources, which made OOM killer in my desktop to kill it (yes, stupid OOM killer).</p>
<p>I tried to implement simple pruning of searched paths if they are longer than current shortest on given route, but I couldn't find a way to do it &#8211; it seems to require subselect, and subselects referring to recursive queries, are not allowed within the recursive query itself.</p>
<p><em>(I think that perhaps RhodiumToad (on irc) can do it in a single query, but I'm far away from his level of skills, so I had to pass)</em></p>
<p>Does that mean it can't be done in database? No.</p>
<p>Luckily, we have functions. And functions can be rather smart.</p>
<p>To make the function simpler to use and write, I defined a type:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">TYPE</span> route_dsc <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #66cc66;">&#40;</span>
    from_city     TEXT<span style="color: #66cc66;">,</span>
    to_city       TEXT<span style="color: #66cc66;">,</span>
    full_route    TEXT<span style="color: #66cc66;">&#91;</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">,</span>
    total_length  INT4
<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>This is a quite easy way to encapsulate all information about a single route as somewhat scalar value.</p>
<p>Now, I can write the function:</p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
</pre></td><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">CREATE</span> <span style="color: #993333; font-weight: bold;">OR</span> <span style="color: #993333; font-weight: bold;">REPLACE</span> <span style="color: #993333; font-weight: bold;">FUNCTION</span>
    get_shortest_route<span style="color: #66cc66;">&#40;</span> p_from TEXT<span style="color: #66cc66;">,</span> p_to TEXT <span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">RETURNS</span> SETOF route_dsc <span style="color: #993333; font-weight: bold;">AS</span>
$$
<span style="color: #993333; font-weight: bold;">DECLARE</span>
    sanity_count   INT4;
    final_routes   route_dsc<span style="color: #66cc66;">&#91;</span><span style="color: #66cc66;">&#93;</span>;
    current_routes route_dsc<span style="color: #66cc66;">&#91;</span><span style="color: #66cc66;">&#93;</span>;
    r              route_dsc;
<span style="color: #993333; font-weight: bold;">BEGIN</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">count</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">*</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">INTO</span> sanity_count
        <span style="color: #993333; font-weight: bold;">FROM</span> cities
        <span style="color: #993333; font-weight: bold;">WHERE</span> city <span style="color: #993333; font-weight: bold;">in</span> <span style="color: #66cc66;">&#40;</span>p_from<span style="color: #66cc66;">,</span> p_to<span style="color: #66cc66;">&#41;</span>;
    <span style="color: #993333; font-weight: bold;">IF</span> sanity_count <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #cc66cc;">2</span> <span style="color: #993333; font-weight: bold;">THEN</span>
        raise exception <span style="color: #ff0000;">'These are NOT two, distinct, correct city names.'</span>;
    <span style="color: #993333; font-weight: bold;">END</span> <span style="color: #993333; font-weight: bold;">IF</span>;
&nbsp;
    current_routes :<span style="color: #66cc66;">=</span> array<span style="color: #66cc66;">&#40;</span>
        <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">,</span> to_city<span style="color: #66cc66;">,</span> ARRAY<span style="color: #66cc66;">&#91;</span>from_city<span style="color: #66cc66;">,</span> to_city<span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">&#41;</span>
        <span style="color: #993333; font-weight: bold;">FROM</span> all_routes
        <span style="color: #993333; font-weight: bold;">WHERE</span> from_city <span style="color: #66cc66;">=</span> p_from
    <span style="color: #66cc66;">&#41;</span>;
    final_routes :<span style="color: #66cc66;">=</span> current_routes;
&nbsp;
    LOOP
        current_routes :<span style="color: #66cc66;">=</span> array<span style="color: #66cc66;">&#40;</span>
            <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#40;</span>
                c<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
                a<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
                c<span style="color: #66cc66;">.</span>full_route <span style="color: #66cc66;">||</span> a<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
                c<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> a<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">&#41;</span>
            <span style="color: #993333; font-weight: bold;">FROM</span>
                unnest<span style="color: #66cc66;">&#40;</span> current_routes <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> c
                <span style="color: #993333; font-weight: bold;">join</span> all_routes a <span style="color: #993333; font-weight: bold;">on</span> c<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> a<span style="color: #66cc66;">.</span>from_city
            <span style="color: #993333; font-weight: bold;">WHERE</span>
                a<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #993333; font-weight: bold;">all</span><span style="color: #66cc66;">&#40;</span> c<span style="color: #66cc66;">.</span>full_route <span style="color: #66cc66;">&#41;</span>
                <span style="color: #993333; font-weight: bold;">AND</span>
                c<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> a<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #66cc66;">&lt;=</span> least<span style="color: #66cc66;">&#40;</span>
                    <span style="color: #993333; font-weight: bold;">coalesce</span><span style="color: #66cc66;">&#40;</span>
                        <span style="color: #66cc66;">&#40;</span>
                            <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">min</span><span style="color: #66cc66;">&#40;</span>l<span style="color: #66cc66;">.</span>total_length<span style="color: #66cc66;">&#41;</span>
                            <span style="color: #993333; font-weight: bold;">FROM</span> unnest<span style="color: #66cc66;">&#40;</span> final_routes <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> l
                            <span style="color: #993333; font-weight: bold;">WHERE</span> <span style="color: #66cc66;">&#40;</span> l<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span> l<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">=</span> <span style="color: #66cc66;">&#40;</span>c<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span> p_to<span style="color: #66cc66;">&#41;</span>
                        <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
                        c<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> a<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span>
                    <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
                    <span style="color: #993333; font-weight: bold;">coalesce</span><span style="color: #66cc66;">&#40;</span>
                        <span style="color: #66cc66;">&#40;</span>
                            <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #993333; font-weight: bold;">min</span><span style="color: #66cc66;">&#40;</span>l<span style="color: #66cc66;">.</span>total_length<span style="color: #66cc66;">&#41;</span>
                            <span style="color: #993333; font-weight: bold;">FROM</span> unnest<span style="color: #66cc66;">&#40;</span> final_routes <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> l
                            <span style="color: #993333; font-weight: bold;">WHERE</span> <span style="color: #66cc66;">&#40;</span> l<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span> l<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">=</span> <span style="color: #66cc66;">&#40;</span>c<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span> a<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">&#41;</span>
                        <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
                        c<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> a<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span>
                    <span style="color: #66cc66;">&#41;</span>
                <span style="color: #66cc66;">&#41;</span>
        <span style="color: #66cc66;">&#41;</span>;
        EXIT <span style="color: #993333; font-weight: bold;">WHEN</span> current_routes <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'{}'</span>;
        final_routes :<span style="color: #66cc66;">=</span> final_routes <span style="color: #66cc66;">||</span> current_routes;
    <span style="color: #993333; font-weight: bold;">END</span> LOOP;
    <span style="color: #993333; font-weight: bold;">RETURN</span> query
        <span style="color: #993333; font-weight: bold;">WITH</span> rr <span style="color: #993333; font-weight: bold;">as</span> <span style="color: #66cc66;">&#40;</span>
            <span style="color: #993333; font-weight: bold;">SELECT</span>
                from_city<span style="color: #66cc66;">,</span>
                to_city<span style="color: #66cc66;">,</span>
                full_route<span style="color: #66cc66;">,</span>
                total_length<span style="color: #66cc66;">,</span>
                dense_rank<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
                    <span style="color: #993333; font-weight: bold;">over</span> <span style="color: #66cc66;">&#40;</span>partition <span style="color: #993333; font-weight: bold;">BY</span> from_city<span style="color: #66cc66;">,</span> to_city <span style="color: #993333; font-weight: bold;">ORDER</span> <span style="color: #993333; font-weight: bold;">BY</span> total_length<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> rank
            <span style="color: #993333; font-weight: bold;">FROM</span> unnest<span style="color: #66cc66;">&#40;</span> final_routes <span style="color: #66cc66;">&#41;</span>
            <span style="color: #993333; font-weight: bold;">WHERE</span> from_city <span style="color: #66cc66;">=</span> p_from <span style="color: #993333; font-weight: bold;">AND</span> to_city <span style="color: #66cc66;">=</span> p_to
        <span style="color: #66cc66;">&#41;</span>
        <span style="color: #993333; font-weight: bold;">SELECT</span> from_city<span style="color: #66cc66;">,</span> to_city<span style="color: #66cc66;">,</span> full_route<span style="color: #66cc66;">,</span> total_length <span style="color: #993333; font-weight: bold;">FROM</span> rr <span style="color: #993333; font-weight: bold;">where</span> rank <span style="color: #66cc66;">=</span> <span style="color: #cc66cc;">1</span>;
    <span style="color: #993333; font-weight: bold;">RETURN</span>;
<span style="color: #993333; font-weight: bold;">END</span>;
$$ <span style="color: #993333; font-weight: bold;">language</span> plpgsql;</pre></td></tr></table></div>

<p>Looks huge, but in fact it's only because there are many queries inside. So, let's see what the function does:</p>
<ul>
<li>lines 1-4 &#8211; standard preamble with function name, 2 arguments (cities we want to connect), and information that we will be returning set of records based on the type I just defined. In here you might wonder &#8211; why set of? We want just the shortest route. Yes, that's correct but it's perfectly possible (and very common) that there are many rows with the same, minimal length. So, instead of picking one randomly &#8211; I will return them all.</li>
<li>lines 6-9 &#8211; variable declarations, not really interesting</li>
<li>lines 11-16 &#8211; sanity check. Simple verification that both given names are city names, and that they are different.</li>
<li>lines 18-22 &#8211; I build current_routes based on all routes coming from source city. For example, If I'd call the function to find me route from Duluth to Toronto, the array would get these rows:

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">SELECT</span> from_city<span style="color: #66cc66;">,</span> to_city<span style="color: #66cc66;">,</span> ARRAY<span style="color: #66cc66;">&#91;</span>from_city<span style="color: #66cc66;">,</span> to_city<span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">length</span>
<span style="color: #993333; font-weight: bold;">FROM</span> all_routes
<span style="color: #993333; font-weight: bold;">WHERE</span> from_city <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'Duluth'</span>;
 from_city │    to_city     │           array           │ <span style="color: #993333; font-weight: bold;">length</span>
───────────┼────────────────┼───────────────────────────┼────────
 Duluth    │ Helena         │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Helena<span style="color: #66cc66;">&#125;</span>           │      <span style="color: #cc66cc;">6</span>
 Duluth    │ Winnipeg       │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Winnipeg<span style="color: #66cc66;">&#125;</span>         │      <span style="color: #cc66cc;">4</span>
 Duluth    │ Sault St Marie │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Sault St Marie&quot;</span><span style="color: #66cc66;">&#125;</span> │      <span style="color: #cc66cc;">3</span>
 Duluth    │ Toronto        │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Toronto<span style="color: #66cc66;">&#125;</span>          │      <span style="color: #cc66cc;">6</span>
 Duluth    │ Omaha          │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Omaha<span style="color: #66cc66;">&#125;</span>            │      <span style="color: #cc66cc;">2</span>
 Duluth    │ Chicago        │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Chicago<span style="color: #66cc66;">&#125;</span>          │      <span style="color: #cc66cc;">3</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">6</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

</li>
<li>line 23 &#8211; I copy current_routes to &#8220;final_routes". current_routes contains only routes that the loop below has to work on, but final routes &#8211; is an array of all routes that will be used for finding final solution</li>
<li>lines 25-59 &#8211; basically infinite loop (of course with proper exit condition), which recursively finds routes:
<ul>
<li>lines 26-56 &#8211; core of the function. This query builds new list of routes, based on what's in current_routes, with following criteria:
<ul>
<li>new route must be from a city that is at the end of some route in &#8220;current_routes" (i.e. it's next segment for multi-city route</li>
<li>added (to route) city cannot be already in full_route (there is no point in revisiting cities when we're looking for shortest path</li>
<li>new total length of route (i.e. some route from current_routes + new segment) has to be shorter (or the same) as existing shortest path between these two cities. By &#8220;these" I mean original &#8220;from" city, and newly added &#8220;to" city. So, if we already have a route between cities &#8220;a" and &#8220;b" that is &#8220;10&#8243; long, there is no point in adding new route that is &#8220;20&#8243; long.</li>
<li>similar condition as above, but checking against already found <em>requested</em> route &#8211; i.e. route between cities user requested in passing arguments</li>
<li>above two criteria make sense only if there are matching routes already in final_routes &#8211; hence the need for coalesce()</li>
</ul>
<p>            All such routes are stored in current_routes for future checking</li>
<li>line 57 &#8211; if the query above didn't return any routes &#8211; we're done, can exit the loop</li>
<li>line 58 &#8211; if there are some routes &#8211; add them to final_routes, and repeat the loop</li>
</ul>
</li>
<li>lines 60-72 &#8211; return of the important data. I take all the routes in final_routes, from there, pick only the ones that match from_city/to_city with parameters given on function call, and then I use dense_rank() to find all records that have minimal total_length. All these records will get returned.</li>
</ul>
<p>If that's complex, let me show you an example. What is stored, in which variable, at which step, when finding the route from Duluth to Toronto.</p>
<ul>
<li>after line 23 in function, both current_routes and final_routes contain:<br />
<table class="normal">
<thead>
<tr>
<th>from_city</th>
<th>to_city</th>
<th>total_length</th>
<th>full_route</th>
</tr>
</thead>
<tbody>
<tr>
<td>Duluth</td>
<td>Helena</td>
<td>6</td>
<td>{Duluth,Helena}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Winnipeg</td>
<td>4</td>
<td>{Duluth,Winnipeg}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Sault St Marie</td>
<td>3</td>
<td>{Duluth,"Sault St Marie"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Toronto</td>
<td>6</td>
<td>{Duluth,Toronto}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Omaha</td>
<td>2</td>
<td>{Duluth,Omaha}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Chicago</td>
<td>3</td>
<td>{Duluth,Chicago}</td>
</tr>
</tbody>
</table>
</li>
<li>First run of the main recursive query &#8211; at line 57 current_routes are:<br />
<table class="normal">
<thead>
<tr>
<th>from_city</th>
<th>to_city</th>
<th>total_length</th>
<th>full_route</th>
</tr>
</thead>
<tbody>
<tr>
<td>Duluth</td>
<td>Toronto</td>
<td>5</td>
<td>{Duluth,"Sault St Marie",Toronto}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Pittsburg</td>
<td>6</td>
<td>{Duluth,Chicago,Pittsburg}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Saint Louis</td>
<td>5</td>
<td>{Duluth,Chicago,"Saint Louis"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Denver</td>
<td>6</td>
<td>{Duluth,Omaha,Denver}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Kansas City</td>
<td>3</td>
<td>{Duluth,Omaha,"Kansas City"}</td>
</tr>
</tbody>
</table>
<p>    and since it's obviously not empty set &#8211; it continues.<br/><br />
    Please note that it didn't (for example) add route Duluth &#8211; Helena &#8211; Seattle (which is correct route, as you can see on the image above). Reason is very simple &#8211; we already found one route Duluth &#8211; Toronto, and its length is 6, so adding new route which is longer than this &#8211; doesn't make sense.
    </li>
<li>At line 58 final_routes are set to:<br />
<table class="normal">
<thead>
<tr>
<th>from_city</th>
<th>to_city</th>
<th>total_length</th>
<th>full_route</th>
</tr>
</thead>
<tbody>
<tr>
<td>Duluth</td>
<td>Helena</td>
<td>6</td>
<td>{Duluth,Helena}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Winnipeg</td>
<td>4</td>
<td>{Duluth,Winnipeg}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Sault St Marie</td>
<td>3</td>
<td>{Duluth,"Sault St Marie"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Toronto</td>
<td>6</td>
<td>{Duluth,Toronto}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Omaha</td>
<td>2</td>
<td>{Duluth,Omaha}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Chicago</td>
<td>3</td>
<td>{Duluth,Chicago}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Toronto</td>
<td>5</td>
<td>{Duluth,"Sault St Marie",Toronto}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Pittsburg</td>
<td>6</td>
<td>{Duluth,Chicago,Pittsburg}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Saint Louis</td>
<td>5</td>
<td>{Duluth,Chicago,"Saint Louis"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Denver</td>
<td>6</td>
<td>{Duluth,Omaha,Denver}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Kansas City</td>
<td>3</td>
<td>{Duluth,Omaha,"Kansas City"}</td>
</tr>
</tbody>
</table>
<p>    Which is simply previous final_routes with added new 5.
    </li>
<li>After next iteration of the loop, based on 5-element current_routes, we got only two new routes:<br />
<table class="normal">
<thead>
<tr>
<th>from_city</th>
<th>to_city</th>
<th>total_length</th>
<th>full_route</th>
</tr>
</thead>
<tbody>
<tr>
<td>Duluth</td>
<td>Oklahoma City</td>
<td>5</td>
<td>{Duluth,Omaha,"Kansas City","Oklahoma City"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Saint Louis</td>
<td>5</td>
<td>{Duluth,Omaha,"Kansas City","Saint Louis"}</td>
</tr>
</tbody>
</table>
<p>    And of course they got added to final_routes.
    </li>
<li>another iteration of the loop, based on current_routes with just two elements &#8211; didn't return any rows. There simply is no way to extend routes &#8220;Duluth-Omaha-Kansas City" or &#8220;Duluth-Omaha-Saint Louis" in a way that wouldn't extend already found route &#8220;Duluth-Sault St Marie-Toronto" with length 5.</li>
<li>Since this iteration of loop didn't find anything, loop exits, and the final_routes contains:<br />
<table class="normal">
<thead>
<tr>
<th>from_city</th>
<th>to_city</th>
<th>total_length</th>
<th>full_route</th>
</tr>
</thead>
<tbody>
<tr>
<td>Duluth</td>
<td>Helena</td>
<td>6</td>
<td>{Duluth,Helena}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Winnipeg</td>
<td>4</td>
<td>{Duluth,Winnipeg}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Sault St Marie</td>
<td>3</td>
<td>{Duluth,"Sault St Marie"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Toronto</td>
<td>6</td>
<td>{Duluth,Toronto}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Omaha</td>
<td>2</td>
<td>{Duluth,Omaha}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Chicago</td>
<td>3</td>
<td>{Duluth,Chicago}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Toronto</td>
<td>5</td>
<td>{Duluth,"Sault St Marie",Toronto}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Pittsburg</td>
<td>6</td>
<td>{Duluth,Chicago,Pittsburg}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Saint Louis</td>
<td>5</td>
<td>{Duluth,Chicago,"Saint Louis"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Denver</td>
<td>6</td>
<td>{Duluth,Omaha,Denver}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Kansas City</td>
<td>3</td>
<td>{Duluth,Omaha,"Kansas City"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Oklahoma City</td>
<td>5</td>
<td>{Duluth,Omaha,"Kansas City","Oklahoma City"}</td>
</tr>
<tr>
<td>Duluth</td>
<td>Saint Louis</td>
<td>5</td>
<td>{Duluth,Omaha,"Kansas City","Saint Louis"}</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>Based on the final_routes above, query in lines 61-72 calculates correct answer, and shows it.</p>
<p>OK. So it works. But how slow it is?</p>
<p>First, let's start with very simple example &#8211; Atlanta &#8211; Nashville. These two cities are connected using a single one-element route. Call to function:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> get_shortest_route<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'Atlanta'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Nashville'</span><span style="color: #66cc66;">&#41;</span>;
 from_city │  to_city  │     full_route      │ total_length
───────────┼───────────┼─────────────────────┼──────────────
 Atlanta   │ Nashville │ <span style="color: #66cc66;">&#123;</span>Atlanta<span style="color: #66cc66;">,</span>Nashville<span style="color: #66cc66;">&#125;</span> │            <span style="color: #cc66cc;">1</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">Time</span>: <span style="color: #cc66cc;">1.045</span> ms</pre></td></tr></table></div>

<p>What about the Duluth-Toronto?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> get_shortest_route<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'Duluth'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Toronto'</span><span style="color: #66cc66;">&#41;</span>;
 from_city │ to_city │            full_route             │ total_length
───────────┼─────────┼───────────────────────────────────┼──────────────
 Duluth    │ Toronto │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Sault St Marie&quot;</span><span style="color: #66cc66;">,</span>Toronto<span style="color: #66cc66;">&#125;</span> │            <span style="color: #cc66cc;">5</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">1</span> <span style="color: #993333; font-weight: bold;">row</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">Time</span>: <span style="color: #cc66cc;">2.239</span> ms</pre></td></tr></table></div>

<p>Something longer perhaps:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> get_shortest_route<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'Duluth'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Los Angeles'</span><span style="color: #66cc66;">&#41;</span>;
 from_city │   to_city   │                                  full_route                                   │ total_length
───────────┼─────────────┼───────────────────────────────────────────────────────────────────────────────┼──────────────
 Duluth    │ Los Angeles │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Omaha<span style="color: #66cc66;">,</span>Denver<span style="color: #66cc66;">,</span>Phoenix<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Los Angeles&quot;</span><span style="color: #66cc66;">&#125;</span>                                   │           <span style="color: #cc66cc;">14</span>
 Duluth    │ Los Angeles │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Omaha<span style="color: #66cc66;">,</span>Denver<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Santa Fe&quot;</span><span style="color: #66cc66;">,</span>Phoenix<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Los Angeles&quot;</span><span style="color: #66cc66;">&#125;</span>                        │           <span style="color: #cc66cc;">14</span>
 Duluth    │ Los Angeles │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Omaha<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Kansas City&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Oklahoma City&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Santa Fe&quot;</span><span style="color: #66cc66;">,</span>Phoenix<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Los Angeles&quot;</span><span style="color: #66cc66;">&#125;</span> │           <span style="color: #cc66cc;">14</span>
 Duluth    │ Los Angeles │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Helena<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Salt Lake City&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Las Vegas&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Los Angeles&quot;</span><span style="color: #66cc66;">&#125;</span>                    │           <span style="color: #cc66cc;">14</span>
 Duluth    │ Los Angeles │ <span style="color: #66cc66;">&#123;</span>Duluth<span style="color: #66cc66;">,</span>Omaha<span style="color: #66cc66;">,</span>Denver<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Salt Lake City&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Las Vegas&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Los Angeles&quot;</span><span style="color: #66cc66;">&#125;</span>              │           <span style="color: #cc66cc;">14</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">5</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span></pre></td></tr></table></div>

<p>And how about a cross country?</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;">$ <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> get_shortest_route<span style="color: #66cc66;">&#40;</span><span style="color: #ff0000;">'Vancouver'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Miami'</span><span style="color: #66cc66;">&#41;</span>;
 from_city │ to_city │                                      full_route                                      │ total_length
───────────┼─────────┼──────────────────────────────────────────────────────────────────────────────────────┼──────────────
 Vancouver │ Miami   │ <span style="color: #66cc66;">&#123;</span>Vancouver<span style="color: #66cc66;">,</span>Calgary<span style="color: #66cc66;">,</span>Helena<span style="color: #66cc66;">,</span>Omaha<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Kansas City&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Saint Louis&quot;</span><span style="color: #66cc66;">,</span>Nashville<span style="color: #66cc66;">,</span>Atlanta<span style="color: #66cc66;">,</span>Miami<span style="color: #66cc66;">&#125;</span> │           <span style="color: #cc66cc;">23</span>
 Vancouver │ Miami   │ <span style="color: #66cc66;">&#123;</span>Vancouver<span style="color: #66cc66;">,</span>Seattle<span style="color: #66cc66;">,</span>Helena<span style="color: #66cc66;">,</span>Omaha<span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Kansas City&quot;</span><span style="color: #66cc66;">,</span><span style="color: #ff0000;">&quot;Saint Louis&quot;</span><span style="color: #66cc66;">,</span>Nashville<span style="color: #66cc66;">,</span>Atlanta<span style="color: #66cc66;">,</span>Miami<span style="color: #66cc66;">&#125;</span> │           <span style="color: #cc66cc;">23</span>
<span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">2</span> <span style="color: #993333; font-weight: bold;">rows</span><span style="color: #66cc66;">&#41;</span>
&nbsp;
<span style="color: #993333; font-weight: bold;">Time</span>: <span style="color: #cc66cc;">62.507</span> ms</pre></td></tr></table></div>

<p>The longer the road the more time it takes to find it. Which is pretty understandable.</p>
<p>So, to wrap it. It can be done in database. It is not as slow as I expected. <em>I</em> wasn't able to find a way to do it without functions, but it might be possible for someone smarter than me.</p>
<p>And I still don't think it's a good idea to put this logic in database.</p>
<p><!-- vim: set spell spelllang=en_US ft=xhtml: --></p>

									</div>
			</div>
		</div>
			
		<div class="comm">
			
<!-- You can start editing here. -->

<div class="bobcomments">




	<ol class="commentlist">

	<li class="commenthead"><h3 id="comments">30 comments <a href='http://www.depesz.com/2012/06/25/how-to-get-shortest-connection-between-two-cities/feed/'><div class="rss-img"></div></a></h3></li>
	
			
<li class="odd" id="comment-35640" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35640" title="">#</a></span> J. Prevost</div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2b14ece5773f901b09597493fabfcfcd?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Could you share the TTR route data for testing?  I suspect your problem is that you used &#8220;UNION ALL&#8221; instead of &#8220;UNION&#8221; in your recursive query.  But I&#8217;m too lazy to enter all that data by hand.  <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="mycomment" id="comment-35641" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35641" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p><a href="http://www.depesz.com/wp-content/uploads/2012/06/ttr.dump.gz" rel="nofollow">http://www.depesz.com/wp-content/uploads/2012/06/ttr.dump.gz</a></p>
	</li>
		
		
			
<li class="odd" id="comment-35642" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35642" title="">#</a></span> <a href='http://thedutras.blogspot.com/' rel='external nofollow' class='url'>Leandro DUTRA</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d0a764171d584e0a0ddb8346637c34da?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Isn’t ðis easier &amp; faster wiþ recursive WITH queries?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35643" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35643" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Leonadro:<br />
did you read the blogpost?<br />
I wrote, at least twice, that I tried, but couldn&#8217;t make it. If you can provide such query &#8211; I will gladly see/review it.</p>
	</li>
		
		
			
<li class="odd" id="comment-35644" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35644" title="">#</a></span> <a href='http://blog.frosties.org/' rel='external nofollow' class='url'>Thomas Reiss</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/323bee84e310502d08ac0670deb97562?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hell,</p>
<p>You will find a query implementing such thing with WITH RECURSIVE in the .zip file available here: <a href="http://www.postgresql-sessions.org/_media/requetes_sessions_postgresql.zip" rel="nofollow">http://www.postgresql-sessions.org/_media/requetes_sessions_postgresql.zip</a></p>
<p>It was done by my ex-coworker Jean-Michel Souchard.</p>
	</li>
		
		
			
<li class="odd" id="comment-35645" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35645" title="">#</a></span> <a href='http://blog.frosties.org/' rel='external nofollow' class='url'>Thomas Reiss</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/323bee84e310502d08ac0670deb97562?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hello&#8230; sorry for the typo&#8230;</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35646" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35646" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Thomas:</p>
<p>downloaded, and grep&#8217;ped for RECURSIVE &#8211; but it&#8217;s not in english, so I can&#8217;t really find out which of the queries you have in mind.</p>
	</li>
		
		
			
<li class="odd" id="comment-35647" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35647" title="">#</a></span> <a href='http://blog.frosties.org/' rel='external nofollow' class='url'>Thomas Reiss</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/323bee84e310502d08ac0670deb97562?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>There&#8217;s a SQL file with Dijkstra in its filename <img src="http://www.depesz.com/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-35648" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35648" title="">#</a></span> J. Prevost</div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2b14ece5773f901b09597493fabfcfcd?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hmm.  Indeed, after working over this, there&#8217;s no way to do it with recursive queries.  The problem is that the key piece of information that lets you cut you search short is knowing the best currently-known length for a given route.  And that sort of information simply isn&#8217;t available via WITH RECURSIVE, since that mechanism works purely iteratively based on either UNION or UNION ALL.</p>
<p>Interestingly, you *can* use the same iterative technique to solve the problem directly, much like you might have done before WITH RECURSIVE to generate transitive closures:</p>
<p>create temporary table full_routes (<br />
  from_city text, to_city text, length numeric, path text[]<br />
);</p>
<p>&#8211; base case</p>
<p>insert into full_routes<br />
select r.from_city, r.to_city, r.length, array [ r.from_city, r.to_city ]<br />
  from all_routes r;</p>
<p>&#8211; repeat the following two steps until insertion inserts zero rows</p>
<p>&#8211; add new routes only if they are shorter than the current route<br />
insert into full_routes<br />
select f.from_city, r.to_city, f.length + r.length, f.path || r.to_city<br />
  from all_routes r, full_routes f<br />
  where r.from_city = f.to_city<br />
    and r.to_city  all ( f.path )<br />
    and f.length + r.length  (select min(f2.length) from full_routes f2<br />
                where f.from_city = f2.from_city<br />
                  and f.to_city = f2.to_city);</p>
<p>This method *is* able to use the length to decide when to stop, and therefore generates many many less possible routes than recursive method, which must keep going and going, generating many billions of paths and running out of memory.  (There are only 1616 shortest paths between cities, counting both directions of each route, but you can easily demonstrate that the recursive query generates at least millions by running the query with progressively higher LIMIT clauses.)</p>
<p>I&#8217;m rather sad to see that WITH RECURSIVE can&#8217;t be used to run something as simple as a depth-first search with weighted edges.  I hadn&#8217;t realized it was that limited.  But, at least it does take care of some basic graph problems.</p>
	</li>
		
		
			
<li class="odd" id="comment-35649" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35649" title="">#</a></span> J. Prevost</div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2b14ece5773f901b09597493fabfcfcd?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>After puzzling over the link from Mr. Reiss: This file appears to implement exactly the same method that is included in the blog post above, and on a sufficiently connected  graph  it would fail the same way. It must enumerate every possible path through the graph before eliminating any.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35650" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35650" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Thomas:<br />
Got your translation in mail &#8211; still &#8211; the query uses columns which I don&#8217;t quite understand (cp_deb/cp_fin).</p>
<p>Plus &#8211; this is *very* slow. For the 12 edges it has it takes over 2ms to calculate on my machine.</p>
<p>Maybe I&#8217;m doing something wrong &#8211; but can you try to modify the query, and run it on my dataset (it&#8217;s linked in a comment) to try to find the routes Duluth-Toronto and Vancouver-Miami?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35651" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35651" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Thomas:</p>
<p>re the comment from J. Prevost &#8211; are you sure this is different approach? If what J. Prevost wrote is true &#8211; well, I did it, and it works, but it&#8217;s too slow for any use.</p>
<p>The major problem is that there is no logic to prune obviously wrong routes.</p>
	</li>
		
		
			
<li class="odd" id="comment-35652" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35652" title="">#</a></span> J. Prevost</div>  <div class="date">Jun 25, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/2b14ece5773f901b09597493fabfcfcd?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I think the cp_deb and cp_fin are simply secondary parts of the keys for locations.  The point of departure and the destination are specified by (ville_deb, cp_deb) and (ville_fin, cp_fin), respectively.</p>
	</li>
		
		
			
<li class="odd" id="comment-35657" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35657" title="">#</a></span> Mark Guyatt</div>  <div class="date">Jun 26, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/6fdf3ca368618c0ee324cdf081101bcc?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Hi Depesz,</p>
<p>I often read your blog and I had a little think about this.  I&#8217;m not very experienced with CTEs/Window functions let alone the recursive form, but after loading your generously keyed data, I came up with this (seems quick to me)</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">WITH</span> RECURSIVE
findpath <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
  <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #ff0000;">'Vancouver'</span>::text <span style="color: #993333; font-weight: bold;">AS</span> from_city<span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Miami'</span>::text <span style="color: #993333; font-weight: bold;">AS</span> to_city
<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
multiroutes <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
  <span style="color: #993333; font-weight: bold;">select</span>
    m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
    m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
    ARRAY<span style="color: #66cc66;">&#91;</span>m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span> m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">&#93;</span> <span style="color: #993333; font-weight: bold;">AS</span> full_route<span style="color: #66cc66;">,</span>
    <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">AS</span> total_length<span style="color: #66cc66;">,</span>
    m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">AS</span> solved<span style="color: #66cc66;">,</span>
    <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">CASE</span> <span style="color: #993333; font-weight: bold;">WHEN</span> m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">ELSE</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">END</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> min_solve
  <span style="color: #993333; font-weight: bold;">FROM</span> findpath f
  <span style="color: #993333; font-weight: bold;">JOIN</span> all_routes m <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">&#41;</span>
  <span style="color: #993333; font-weight: bold;">UNION</span> <span style="color: #993333; font-weight: bold;">ALL</span>
  <span style="color: #993333; font-weight: bold;">SELECT</span>
    m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
    n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
    m<span style="color: #66cc66;">.</span>full_route <span style="color: #66cc66;">||</span> n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
    m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">,</span>
    n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">AS</span> solved<span style="color: #66cc66;">,</span>
    <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">CASE</span> <span style="color: #993333; font-weight: bold;">WHEN</span> n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">THEN</span> m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">ELSE</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">END</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> min_solve
  <span style="color: #993333; font-weight: bold;">FROM</span> findpath f
  <span style="color: #993333; font-weight: bold;">JOIN</span> multiroutes m <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">&#41;</span>
  <span style="color: #993333; font-weight: bold;">JOIN</span> all_routes n <span style="color: #993333; font-weight: bold;">ON</span> m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> n<span style="color: #66cc66;">.</span>from_city <span style="color: #993333; font-weight: bold;">AND</span> <span style="color: #993333; font-weight: bold;">NOT</span> m<span style="color: #66cc66;">.</span>solved <span style="color: #993333; font-weight: bold;">AND</span> n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #993333; font-weight: bold;">ALL</span><span style="color: #66cc66;">&#40;</span> m<span style="color: #66cc66;">.</span>full_route<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AND</span> <span style="color: #66cc66;">&#40;</span>m<span style="color: #66cc66;">.</span>min_solve <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">OR</span> m<span style="color: #66cc66;">.</span>min_solve <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">AND</span> m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #66cc66;">&lt;=</span> m<span style="color: #66cc66;">.</span>min_solve<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
solution <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
  <span style="color: #993333; font-weight: bold;">SELECT</span>
    m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
    m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
    m<span style="color: #66cc66;">.</span>full_route<span style="color: #66cc66;">,</span>
    m<span style="color: #66cc66;">.</span>total_length<span style="color: #66cc66;">,</span>
	<span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span>m<span style="color: #66cc66;">.</span>total_length<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> best_length
  <span style="color: #993333; font-weight: bold;">FROM</span> multiroutes m <span style="color: #993333; font-weight: bold;">JOIN</span> findpath f <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>to_city<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> solution <span style="color: #993333; font-weight: bold;">WHERE</span> total_length <span style="color: #66cc66;">=</span> best_length;</pre></td></tr></table></div>

<p>I&#039;m using:<br />
PostgreSQL 9.1.4 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3, 64-bit</p>
	</li>
		
		
			
<li class="odd" id="comment-35658" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35658" title="">#</a></span> Mark Guyatt</div>  <div class="date">Jun 26, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/6fdf3ca368618c0ee324cdf081101bcc?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Seems it removed my  from between n.to_city and ALL</p>
	</li>
		
		
			
<li class="odd" id="comment-35665" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35665" title="">#</a></span> <a href='http://pgolub.wordpress.com' rel='external nofollow' class='url'>Pavel Golub</a></div>  <div class="date">Jun 26, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Great post! </p>
<p>PS Hubert, which SQL highlighter do you use for your posts?</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35667" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35667" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 26, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Pavel:<br />
WP-Syntax plugin. It uses GeSHi, afaik.</p>
	</li>
		
		
			
<li class="odd" id="comment-35668" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35668" title="">#</a></span> <a href='http://www.joelonsql.com/' rel='external nofollow' class='url'>Joel Jacobson</a></div>  <div class="date">Jun 26, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/4ad2f4c966a16020b0c5dee627718b78?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Mark:<br />
Is there a  (not equal to) missing between &#8220;n.to_city&#8221; and &#8220;ALL( m.full_route)&#8221; in your query? I added it and then it works. Where should the &#8220;from between n.to_city and ALL&#8221; be inserted? That&#8217;s not valid syntax either, perhaps it removed some characters in your comment?</p>
<p>Your query takes 2264ms while Depesz function for the same route takes 71ms, not that fast, but it works.</p>
	</li>
		
		
			
<li class="odd" id="comment-35695" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35695" title="">#</a></span> Stephen Mather</div>  <div class="date">Jun 27, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/872c3984fe0bf0b61f82d3ddfcd23346?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Have you tried pgRouting?  It has shortest path and traveling salesman.</p>
	</li>
		
		
			
<li class="odd" id="comment-35697" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35697" title="">#</a></span> <a href='http://www.joelonsql.com/' rel='external nofollow' class='url'>Joel Jacobson</a></div>  <div class="date">Jun 27, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/4ad2f4c966a16020b0c5dee627718b78?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Stephen Mather:<br />
pgRouting relies on C functions, the implementation is not in SQL or PL/pgSQL.</p>
	</li>
		
		
			
<li class="odd" id="comment-35700" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35700" title="">#</a></span> Tzvi R.</div>  <div class="date">Jun 27, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/?d=identicon&amp;s=64' class='avatar avatar-64 photo avatar-default' height='64' width='64' />		<p>Hi Depesz,</p>
<p>Apparently I was trying an approach very similar to yours. Even without having a sub-query to get the best distance so far, this is still useful since it prunes all the edges after the destination is matched.</p>
<p>with recursive t(src, dest, edge, route, distance, best_distance)<br />
as<br />
(<br />
	&#8211; Source city, Target City, Current City (initially the Source City), Cumulative route (initially only Source City), Cumulative Distance, Best Distance<br />
	select &#8216;a&#8217;, &#8216;e&#8217;, &#8216;a&#8217;, &#8216;{&#8220;a&#8221;}&#8217;::text[], 0, 2147483647<br />
	union all<br />
	select t.src, t.dest, r.city2, route || array[r.city2], t.distance + r.distance,<br />
		case when t.dest = r.city2 then least(t.distance + r.distance, t.best_distance) else t.best_distance end<br />
	from t<br />
	join test.route2 r on r.city1 = t.edge and not(r.city2 = any(route)) and t.distance + r.distance &lt; best_distance<br />
)<br />
select *<br />
from t<br />
where t.route[array_upper(t.route, 1)] = &#039;e&#039;  &#8212; Compare to Destination City<br />
order by distance asc<br />
limit 1;</p>
<p>Where the data is created using this:</p>
<p>create table test.route<br />
(<br />
	city1 text,<br />
	city2 text,<br />
	distance int<br />
);</p>
<p>insert into test.route values<br />
	(&#039;a&#039;, &#039;b&#039;, 5),<br />
	(&#039;b&#039;, &#039;c&#039;, 4),<br />
	(&#039;b&#039;, &#039;h&#039;, 2),<br />
	(&#039;c&#039;, &#039;h&#039;, 3),<br />
	(&#039;c&#039;, &#039;d&#039;, 5),<br />
	(&#039;d&#039;, &#039;e&#039;, 3),<br />
	(&#039;e&#039;, &#039;f&#039;, 2),<br />
	(&#039;e&#039;, &#039;a&#039;, 5),<br />
	(&#039;f&#039;, &#039;g&#039;, 1),<br />
	(&#039;f&#039;, &#039;a&#039;, 2);</p>
<p>create view test.route2<br />
as<br />
select city1, city2, distance<br />
from test.route<br />
union all<br />
select city2, city1, distance<br />
from test.route;</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35706" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35706" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 27, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Mark:</p>
<p>ok. got the time to analyze your query.</p>
<p>It&#8217;s really nice, but with larger datasets the performance will degrade.</p>
<p>Reason is very simple &#8211; min_solve doesn&#8217;t propagate to next iterations of the recursive query.</p>
<p>It can be easily visible when you&#8217;ll change findpath CTE to be:</p>
<p>SELECT &#8216;Helena&#8217;::TEXT as from_city, &#8216;Toronto&#8217;::TEXT as to_city</p>
<p>and then make the final query, instead of querying solution:</p>
<p>SELECT * FROM multiroutes WHERE 2 = array_upper(full_route, 1) ORDER BY full_route;</p>
<p>then run the query, increment &#8220;2=&#8221;, rerun, and so on.</p>
<p>With 3= &#8211; we see that all rows have min_solve = 12.</p>
<p>with 4= &#8211; it correctly finds shorter path &#8211; 11 elements.</p>
<p>but then &#8211; 5= min_solve is again null.</p>
<p>Of course your condition in join in multiroute CTE did excellent job at filtering out paths &#8211; so it can actually finish finding even longest paths in my TTR example, but if the map was larger &#8211; it would lag pretty badly.</p>
<p>We can see, that when searching for Duluth-Toronto, final multiroute CTE contains 125 routes.<br />
On the other hand &#8211; my function, for the same path, has at most 13.</p>
<p>A bit longer trip &#8211; Helena-Toronto &#8211; your query considers 304 paths, function &#8211; 47.</p>
<p>For the long, cross-continent route &#8211; Vancouver-Miami &#8211; query considers 27677 routes, function &#8211; 243.</p>
<p>Still &#8211; all that aside &#8211; I bow before your skill &#8211; it is great application of window functions and CTE.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35707" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35707" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 27, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Tzvi:</p>
<p>I reformatted your query, and modified it so that it works not against your test table, but against the tables that I used in this blogpost:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">with</span> recursive t<span style="color: #66cc66;">&#40;</span>src<span style="color: #66cc66;">,</span> dest<span style="color: #66cc66;">,</span> edge<span style="color: #66cc66;">,</span> route<span style="color: #66cc66;">,</span> <span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">,</span> best_length<span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">as</span>
<span style="color: #66cc66;">&#40;</span>
    <span style="color: #808080; font-style: italic;">-- Source city, Target City, Current City (initially the Source City), Cumulative route (initially only Source City), Cumulative length, Best length</span>
    <span style="color: #993333; font-weight: bold;">select</span> <span style="color: #ff0000;">'Duluth'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Toronto'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Duluth'</span><span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'{Duluth}'</span>::text<span style="color: #66cc66;">&#91;</span><span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">0</span><span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">2147483647</span>
    <span style="color: #993333; font-weight: bold;">union</span> <span style="color: #993333; font-weight: bold;">all</span>
    <span style="color: #993333; font-weight: bold;">select</span> t<span style="color: #66cc66;">.</span>src<span style="color: #66cc66;">,</span> t<span style="color: #66cc66;">.</span>dest<span style="color: #66cc66;">,</span> r<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span> route <span style="color: #66cc66;">||</span> array<span style="color: #66cc66;">&#91;</span>r<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">&#93;</span><span style="color: #66cc66;">,</span> t<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #66cc66;">+</span> r<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">case</span> <span style="color: #993333; font-weight: bold;">when</span> t<span style="color: #66cc66;">.</span>dest <span style="color: #66cc66;">=</span> r<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">then</span> least<span style="color: #66cc66;">&#40;</span>t<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #66cc66;">+</span> r<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">,</span> t<span style="color: #66cc66;">.</span>best_length<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">else</span> t<span style="color: #66cc66;">.</span>best_length <span style="color: #993333; font-weight: bold;">end</span>
    <span style="color: #993333; font-weight: bold;">from</span> t
        <span style="color: #993333; font-weight: bold;">join</span> all_routes r <span style="color: #993333; font-weight: bold;">on</span> r<span style="color: #66cc66;">.</span>from_city <span style="color: #66cc66;">=</span> t<span style="color: #66cc66;">.</span>edge <span style="color: #993333; font-weight: bold;">and</span> <span style="color: #993333; font-weight: bold;">not</span><span style="color: #66cc66;">&#40;</span>r<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> any<span style="color: #66cc66;">&#40;</span>route<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">and</span> t<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #66cc66;">+</span> r<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #66cc66;">&lt;</span> best_length
<span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">select</span> <span style="color: #66cc66;">*</span>
<span style="color: #993333; font-weight: bold;">from</span> t
<span style="color: #993333; font-weight: bold;">where</span> t<span style="color: #66cc66;">.</span>route<span style="color: #66cc66;">&#91;</span>array_upper<span style="color: #66cc66;">&#40;</span>t<span style="color: #66cc66;">.</span>route<span style="color: #66cc66;">,</span> <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#93;</span> <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'e'</span> <span style="color: #808080; font-style: italic;">-- Compare to Destination City</span>
<span style="color: #993333; font-weight: bold;">order</span> <span style="color: #993333; font-weight: bold;">by</span> <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">asc</span>
<span style="color: #993333; font-weight: bold;">limit</span> <span style="color: #cc66cc;">1</span>;</pre></td></tr></table></div>

<p>Result &#8211; definitely not good. Started it, and killed after ~ 10 seconds, with no results. Sorry &#8211; it might behave nicely when you have 10 routes, but it doesn&#8217;t work when you have more.</p>
	</li>
		
		
			
<li class="odd" id="comment-35711" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35711" title="">#</a></span> Mark Guyatt</div>  <div class="date">Jun 28, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/6fdf3ca368618c0ee324cdf081101bcc?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Well, I had a little bit more of a think about it, and whilst not as few paths as the function solution, there is a significant reduction in the search tree.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">WITH</span> RECURSIVE
findpath <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #ff0000;">'Vancouver'</span>::text <span style="color: #993333; font-weight: bold;">AS</span> from_city<span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Miami'</span>::text <span style="color: #993333; font-weight: bold;">AS</span> to_city
<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
multiroutes <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span>
        m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
        ARRAY<span style="color: #66cc66;">&#91;</span>m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span> m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">&#93;</span> <span style="color: #993333; font-weight: bold;">AS</span> full_route<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">AS</span> total_length<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">AS</span> solved<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">CASE</span> <span style="color: #993333; font-weight: bold;">WHEN</span> m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">ELSE</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">END</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> min_solve<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">AS</span> best_to_length
    <span style="color: #993333; font-weight: bold;">FROM</span> findpath f
        <span style="color: #993333; font-weight: bold;">JOIN</span> all_routes m <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">UNION</span> <span style="color: #993333; font-weight: bold;">ALL</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span>
        m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
        n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>full_route <span style="color: #66cc66;">||</span> n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">,</span>
        n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">AS</span> solved<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">CASE</span> <span style="color: #993333; font-weight: bold;">WHEN</span> n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">THEN</span> m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">ELSE</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">END</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> min_solve<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span>m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span>PARTITION <span style="color: #993333; font-weight: bold;">BY</span> n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> best_to_length
    <span style="color: #993333; font-weight: bold;">FROM</span> findpath f
        <span style="color: #993333; font-weight: bold;">JOIN</span> multiroutes m <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">&#41;</span>
        <span style="color: #993333; font-weight: bold;">JOIN</span> all_routes n <span style="color: #993333; font-weight: bold;">ON</span> m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> n<span style="color: #66cc66;">.</span>from_city <span style="color: #993333; font-weight: bold;">AND</span> n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #993333; font-weight: bold;">ALL</span><span style="color: #66cc66;">&#40;</span> m<span style="color: #66cc66;">.</span>full_route<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AND</span> <span style="color: #66cc66;">&#40;</span>m<span style="color: #66cc66;">.</span>min_solve <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">OR</span> m<span style="color: #66cc66;">.</span>min_solve <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">AND</span> m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #66cc66;">&lt;=</span> m<span style="color: #66cc66;">.</span>min_solve<span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">WHERE</span> <span style="color: #993333; font-weight: bold;">NOT</span> m<span style="color: #66cc66;">.</span>solved
        <span style="color: #993333; font-weight: bold;">AND</span> m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">=</span> m<span style="color: #66cc66;">.</span>best_to_length
<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
solution <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span>
        m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>full_route<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>total_length<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span>m<span style="color: #66cc66;">.</span>total_length<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> best_length
    <span style="color: #993333; font-weight: bold;">FROM</span> multiroutes m <span style="color: #993333; font-weight: bold;">JOIN</span> findpath f <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>to_city<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> solution <span style="color: #993333; font-weight: bold;">WHERE</span> total_length <span style="color: #66cc66;">=</span> best_length;</pre></td></tr></table></div>

<p>The main difference here is the tracking of the best path length for the to_city in the multiroutes CTE and using that to limit which new paths are added to the search tree.  This brings the intermediate search space down to approx 2300 rows instead of the nearly 28000.  It also reduced my execution time from 1300ms down to 200ms (warm).</p>
<p>It has been an interesting exercise in using SQL to solve a problem.</p>
	</li>
		
		
			
<li class="mycomment" id="comment-35715" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35715" title="">#</a></span> <a href='http://www.depesz.com/' rel='external nofollow' class='url'>depesz</a></div>  <div class="date">Jun 28, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/d5ecebb85919589a7cbf7f90eb34eacf?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>@Mark:</p>
<p>WOW again. This query ran for me, for the Vancouver-Miami route in 21ms (my function needed ~70!). And this is done while still taking into consideration 2282 routes (10 times as many as function).</p>
<p>But &#8211; as good as it is, I think I found a way to make it faster:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="sql" style="font-family:monospace;"><span style="color: #993333; font-weight: bold;">WITH</span> RECURSIVE
findpath <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #ff0000;">'Vancouver'</span>::text <span style="color: #993333; font-weight: bold;">AS</span> from_city<span style="color: #66cc66;">,</span> <span style="color: #ff0000;">'Miami'</span>::text <span style="color: #993333; font-weight: bold;">AS</span> to_city
<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
multiroutes <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span>
        m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
        ARRAY<span style="color: #66cc66;">&#91;</span>m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span> m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">&#93;</span> <span style="color: #993333; font-weight: bold;">AS</span> full_route<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">AS</span> total_length<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">AS</span> solved<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">CASE</span> <span style="color: #993333; font-weight: bold;">WHEN</span> m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">THEN</span> <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">ELSE</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">END</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> min_solve<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">AS</span> best_to_length
    <span style="color: #993333; font-weight: bold;">FROM</span> findpath f
        <span style="color: #993333; font-weight: bold;">JOIN</span> all_routes m <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">UNION</span> <span style="color: #993333; font-weight: bold;">ALL</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span>
        m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
        n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>full_route <span style="color: #66cc66;">||</span> n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">,</span>
        n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">AS</span> solved<span style="color: #66cc66;">,</span>
        least<span style="color: #66cc66;">&#40;</span>
            m<span style="color: #66cc66;">.</span>min_solve<span style="color: #66cc66;">,</span>
            <span style="color: #993333; font-weight: bold;">min</span><span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">case</span> <span style="color: #993333; font-weight: bold;">when</span> n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> f<span style="color: #66cc66;">.</span>to_city <span style="color: #993333; font-weight: bold;">then</span> m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #993333; font-weight: bold;">else</span> <span style="color: #993333; font-weight: bold;">null</span> <span style="color: #993333; font-weight: bold;">end</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">over</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
        <span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">as</span> min_solve<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span>m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span>PARTITION <span style="color: #993333; font-weight: bold;">BY</span> n<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> best_to_length
    <span style="color: #993333; font-weight: bold;">FROM</span> findpath f
        <span style="color: #993333; font-weight: bold;">JOIN</span> multiroutes m <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>from_city<span style="color: #66cc66;">&#41;</span>
        <span style="color: #993333; font-weight: bold;">JOIN</span> all_routes n <span style="color: #993333; font-weight: bold;">ON</span> m<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">=</span> n<span style="color: #66cc66;">.</span>from_city <span style="color: #993333; font-weight: bold;">AND</span> n<span style="color: #66cc66;">.</span>to_city <span style="color: #66cc66;">&lt;&gt;</span> <span style="color: #993333; font-weight: bold;">ALL</span><span style="color: #66cc66;">&#40;</span> m<span style="color: #66cc66;">.</span>full_route<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AND</span> <span style="color: #66cc66;">&#40;</span>m<span style="color: #66cc66;">.</span>min_solve <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">OR</span> m<span style="color: #66cc66;">.</span>min_solve <span style="color: #993333; font-weight: bold;">IS</span> <span style="color: #993333; font-weight: bold;">NOT</span> <span style="color: #993333; font-weight: bold;">NULL</span> <span style="color: #993333; font-weight: bold;">AND</span> m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">+</span> n<span style="color: #66cc66;">.</span><span style="color: #993333; font-weight: bold;">length</span> <span style="color: #66cc66;">&lt;=</span> m<span style="color: #66cc66;">.</span>min_solve<span style="color: #66cc66;">&#41;</span>
    <span style="color: #993333; font-weight: bold;">WHERE</span> <span style="color: #993333; font-weight: bold;">NOT</span> m<span style="color: #66cc66;">.</span>solved
        <span style="color: #993333; font-weight: bold;">AND</span> m<span style="color: #66cc66;">.</span>total_length <span style="color: #66cc66;">=</span> m<span style="color: #66cc66;">.</span>best_to_length
<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">,</span>
solution <span style="color: #993333; font-weight: bold;">AS</span> <span style="color: #66cc66;">&#40;</span>
    <span style="color: #993333; font-weight: bold;">SELECT</span>
        m<span style="color: #66cc66;">.</span>from_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>to_city<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>full_route<span style="color: #66cc66;">,</span>
        m<span style="color: #66cc66;">.</span>total_length<span style="color: #66cc66;">,</span>
        <span style="color: #993333; font-weight: bold;">MIN</span><span style="color: #66cc66;">&#40;</span>m<span style="color: #66cc66;">.</span>total_length<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">OVER</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> best_length
    <span style="color: #993333; font-weight: bold;">FROM</span> multiroutes m <span style="color: #993333; font-weight: bold;">JOIN</span> findpath f <span style="color: #993333; font-weight: bold;">USING</span> <span style="color: #66cc66;">&#40;</span>to_city<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#41;</span>
<span style="color: #993333; font-weight: bold;">SELECT</span> <span style="color: #66cc66;">*</span> <span style="color: #993333; font-weight: bold;">FROM</span> solution <span style="color: #993333; font-weight: bold;">WHERE</span> total_length <span style="color: #66cc66;">=</span> best_length;</pre></td></tr></table></div>

<p>Took (best result); 9.5ms for Vancouver-Miami, and it considered only 847 routes.</p>
<p>The difference is usage of least() for calculation of min_solve to prevent reappearance of &#8220;null&#8221; in min_solve column for next iterations of loop.</p>
	</li>
		
		
			
<li class="odd" id="comment-35720" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35720" title="">#</a></span> Mark Guyatt</div>  <div class="date">Jun 29, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/6fdf3ca368618c0ee324cdf081101bcc?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I always forget about least and greatest <img src="http://www.depesz.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
	</li>
		
		
			
<li class="odd" id="comment-35938" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35938" title="">#</a></span> <a href='http://victusspiritus.com' rel='external nofollow' class='url'>Mark Essel</a></div>  <div class="date">Jul 18, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/43c427f1fe62eb5f74fe6782a257f2ac?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Now how do I get the query code in iterative commits between Mark and Depesz into a github repo (just starting out learning SQL queries, but am familiar with Dikstra&#8217;s alg and A*s</p>
<p>Splendid post and comments</p>
	</li>
		
		
			
<li class="odd" id="comment-35939" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35939" title="">#</a></span> <a href='http://www.victusspiritus.com' rel='external nofollow' class='url'>Mark Essel</a></div>  <div class="date">Jul 18, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/43c427f1fe62eb5f74fe6782a257f2ac?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>I&#8217;ll attempt to do justice to the post and the iterative query updates at <a href="https://github.com/victusfate/FriendlySQL" rel="nofollow">https://github.com/victusfate/FriendlySQL</a></p>
	</li>
		
		
			
<li class="odd" id="comment-35940" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35940" title="">#</a></span> <a href='http://www.victusspiritus.com' rel='external nofollow' class='url'>Mark Essel</a></div>  <div class="date">Jul 18, 2012</div></div>
				<img alt='' src='http://0.gravatar.com/avatar/43c427f1fe62eb5f74fe6782a257f2ac?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Ok you can see the relative commits and history of the query here (the diff view was helpful to me since I&#8217;m not as quick to notice differences in the text/comments)</p>
<p>Mark Guyatt&#8217;s first version:<br />
<a href="https://github.com/victusfate/FriendlySQL/blob/8b74560661f4ba8efc1ee70d3c7f9e3fd282f1c7/MarkGuyattDepeszShortestPathQuery.sql" rel="nofollow">https://github.com/victusfate/FriendlySQL/blob/8b74560661f4ba8efc1ee70d3c7f9e3fd282f1c7/MarkGuyattDepeszShortestPathQuery.sql</a></p>
<p>Mark&#8217;s second version after Depesz comments:<br />
<a href="https://github.com/victusfate/FriendlySQL/commit/69b3ee56f04fc825d5e6cbbd9adabba23984d1e2" rel="nofollow">https://github.com/victusfate/FriendlySQL/commit/69b3ee56f04fc825d5e6cbbd9adabba23984d1e2</a></p>
<p>Depesz updates:<br />
<a href="https://github.com/victusfate/FriendlySQL/commit/abba78b6b42608994383759eb07a06c610b0741d" rel="nofollow">https://github.com/victusfate/FriendlySQL/commit/abba78b6b42608994383759eb07a06c610b0741d</a></p>
	</li>
		
		
			
<li class="odd" id="comment-35946" onMouseOver="this.style.background='#dcdcdc'" onMouseOut="this.style.background='#e9e9e9'">

		<div class="name"><div class="title"><span class="bu"><a href="#comment-35946" title="">#</a></span> <a href='http://telos.co.nz' rel='external nofollow' class='url'>James Moriarty</a></div>  <div class="date">Jul 19, 2012</div></div>
				<img alt='' src='http://1.gravatar.com/avatar/f1cc70c45ba7c0ef2af982701e71fdd5?s=64&amp;d=identicon&amp;r=X' class='avatar avatar-64 photo' height='64' width='64' />		<p>Very cool.</p>
	</li>
		
		
		
	</ol>
	
	
	

	
	
	<form action="http://www.depesz.com/wp-comments-post.php" method="post" id="commentform">

	<h2 id="respond">Leave a comment</h2>

		
	
		<label for="author">Name</label>
		<input type="text" name="author" id="author" value="" size="22" tabindex="2" />
				
		<label for="email">E-mail</label>
		<input type="text" name="email" id="email" value="" tabindex="3" size="22" />		
		
		<label for="url">Website</label>
		<input type="text" name="url" id="url" value="" size="22" tabindex="4" />
	
	
		<label for="text">Your text</label>
		<textarea name="comment" id="comment" cols="5" rows="10" tabindex="5"></textarea>

		<input name="submit" type="submit" id="submit" tabindex="6" value="Submit comment" />
		<input type="hidden" name="comment_post_ID" value="2482" />
	
	<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="30b00bf3f0" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="116"/></p>
	</form>


</div>
		</div>
	
	
	</div>
<div id="sidebar">
<div class="rsidebar">
		<ul>
			<li id="search-3" class="widget widget_search"><h2 class="widgettitle">Search</h2>
<form method="get" id="searchform" action="http://www.depesz.com/">
<input name="s" id="s" type="text" value="Write your text. Press the button!" onfocus="if (this.value == 'Write your text. Press the button!') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Write your text. Press the button!';}" tabindex="1"/>
<input type="submit" id="searchsubmit" value="" />
</form>
<br /><br />
<div id="podzialka"></div></li>
<li id="linkcat-659" class="widget widget_links"><h2 class="widgettitle">Follow me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.depesz.com/comments/feed/">Comments RSS</a></li>
<li><a href="http://depesz.com/feed/">Posts RSS</a></li>

	</ul>
</li>


<!-- Wordpress Popular Posts Plugin v3.0.3 [W] [weekly] [views] [regular] -->
<li id="wpp-3" class="widget popular-posts">
<h2 class="widgettitle">Popular Posts</h2>

<ul class="wpp-list">
<li><a href="http://www.depesz.com/2014/07/15/waiting-for-9-5-psql-show-tablespace-size-in-db/" title="Waiting for 9.5 &#8211; psql: Show tablespace size in \db+" class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; psql: Show tablespace size in \db+</a>  <span class="post-stats"><span class="wpp-comments">3 comments</span> | <span class="wpp-views">590 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/07/14/waiting-for-9-5-implement-import-foreign-schema/" title="Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA." class="wpp-post-title" target="_self">Waiting for 9.5 &#8211; Implement IMPORT FOREIGN SCHEMA.</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">369 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/" title="Why is UPSERT so complicated?" class="wpp-post-title" target="_self">Why is UPSERT so complicated?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">254 views</span></span> </li>
<li><a href="http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/" title="CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03" class="wpp-post-title" target="_self">CHAR(x) vs. VARCHAR(x) vs. VARCHAR vs. TEXT &#8211; UPDATED 2010-03-03</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">199 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/05/06/understanding-postgresql-conf-log/" title="Understanding postgresql.conf : log*" class="wpp-post-title" target="_self">Understanding postgresql.conf : log*</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">153 views</span></span> </li>
<li><a href="http://www.depesz.com/2012/06/09/how-much-ram-is-postgresql-using/" title="How much RAM is PostgreSQL using?" class="wpp-post-title" target="_self">How much RAM is PostgreSQL using?</a>  <span class="post-stats"><span class="wpp-comments">1 comment</span> | <span class="wpp-views">134 views</span></span> </li>
<li><a href="http://www.depesz.com/2008/05/05/error-operator-does-not-exist-integer-text-how-to-fix-it/" title="&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?" class="wpp-post-title" target="_self">&#8220;ERROR:  operator does not exist: integer = text&#8221; how to fix it?</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">126 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/07/14/write-ahead-log-understanding-postgresql-conf-checkpoint_segments-checkpoint_timeout-checkpoint_warning/" title="Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning" class="wpp-post-title" target="_self">Write Ahead Log + Understanding postgresql.conf: checkpoint_segments, checkpoint_timeout, checkpoint_warning</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">123 views</span></span> </li>
<li><a href="http://www.depesz.com/2014/01/29/getting-count-of-distinct-elements-per-group-in-postgresql/" title="Getting count of distinct elements, per group, in PostgreSQL." class="wpp-post-title" target="_self">Getting count of distinct elements, per group, in PostgreSQL.</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">119 views</span></span> </li>
<li><a href="http://www.depesz.com/2011/03/07/waiting-for-9-1-foreach-in-array/" title="Waiting for 9.1 &#8211; FOREACH IN ARRAY" class="wpp-post-title" target="_self">Waiting for 9.1 &#8211; FOREACH IN ARRAY</a>  <span class="post-stats"><span class="wpp-comments">0 comments</span> | <span class="wpp-views">102 views</span></span> </li>

</ul>
</li>

<!-- End Wordpress Popular Posts Plugin v3.0.3 -->
<li id="linkcat-4" class="widget widget_links"><h2 class="widgettitle">postgresql</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://www.postgresql.org/docs/current/interactive/index.html">Documentation</a></li>
<li><a href="http://explain.depesz.com/">Explain Analyze analyzer</a></li>
<li><a href="irc://irc.freenode.net/#postgresql">IRC help channel</a></li>
<li><a href="http://archives.postgresql.org/">Mailing Lists search</a></li>
<li><a href="http://planet.postgresql.org/">PG Planet</a></li>
<li><a href="http://www.postgresql.org/" title="strona domowa postgresqla">PostgreSQL Home Page</a></li>

	</ul>
</li>

<li id="linkcat-376" class="widget widget_links"><h2 class="widgettitle">About me</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://search.cpan.org/~depesz/">CPAN</a></li>
<li><a href="https://github.com/depesz/">GitHub</a></li>
<li><a href="http://linkedin.com/in/depesz">Linked In</a></li>
<li><a href="http://www.depesz.com/toyota-gt86/">Samochód</a></li>

	</ul>
</li>

<li id="theme-switcher" class="widget widget_themeswitcher"><h2 class="widgettitle">Theme</h2>
<ul id="themeswitcher">
<li>
       <select style="width:140px" name="themeswitcher" onchange="location.href='http://www.depesz.com/index.php?wptheme=' + this.options[this.selectedIndex].value;">
               <option value="AS 400">AS 400</option>
               <option value="GrayGA">GrayGA</option>
               <option value="Twenty Eleven">Twenty Eleven</option>
               <option value="Twenty Fourteen">Twenty Fourteen</option>
               <option value="Twenty Ten">Twenty Ten</option>
               <option value="Twenty Thirteen">Twenty Thirteen</option>
               <option value="Twenty Twelve">Twenty Twelve</option>
               <option value="WordPress Classic">WordPress Classic</option>
               <option value="WordPress Default">WordPress Default</option>
               <option value="Wordpress Depesz" selected="selected">Wordpress Depesz</option>
       </select>
</li>
</ul></li>
		</ul>
</div>
		
</div>



<div id="space"></div>
</div>
<div id="bottom">
	<div class="navigation">			
					</div>
</div>

<!-- Powered by WPtouch: 3.4.4 --><script type='text/javascript' src='http://www.depesz.com/wp-content/plugins/akismet/_inc/form.js?ver=3.0.1'></script>
</div>

</body>
</html>

