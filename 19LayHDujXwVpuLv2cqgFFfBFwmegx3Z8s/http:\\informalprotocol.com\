http://informalprotocol.com/
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Tue, 22 Jul 2014 11:20:24 GMT
Content-Type: text/html
Connection: close
Set-Cookie: __cfduid=d222025c5556d866c6373effc5e176d2f1406028024739; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.informalprotocol.com; HttpOnly
Last-Modified: Wed, 12 Feb 2014 18:47:03 GMT
Vary: Accept-Encoding
CF-RAY: 14df3fb29e810098-IAD
Content-Encoding: gzip


<!DOCTYPE HTML>
<html>
<head>
	<meta charset="utf-8">
	<title>Informal Protocol</title>
	<meta name="author" content="Steve Streza">

	
	<meta name="description" content="Ash Furrow wrote an article arguing that Apple needed to replace Objective-C with something else. The crux of the argument is that programming &hellip;">
	
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

	<link href="/atom.xml" rel="alternate" title="Informal Protocol" type="application/atom+xml">
	<link rel="canonical" href="">
	<link href="/favicon.png" rel="shortcut icon">
	<link href="/stylesheets/screen.css?d=1350634552" media="screen, projection" rel="stylesheet" type="text/css">
	<!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
	
</head>


<body>
	<header id="header" class="inner"><h1><img src="/images/header_image.png" style="width: 43px; height: 22px; margin-right: 12px;" /><a href="/">Informal Protocol</a></h1>
<nav id="main-nav"><ul class="main">
	<li><a href="/">Blog</a></li>
	<li><a href="/blog/archives">Archives</a></li>
</ul>
</nav>
<nav id="mobile-nav">
	<div class="alignleft menu">
		<a class="button">Menu</a>
		<div class="container"><ul class="main">
	<li><a href="/">Blog</a></li>
	<li><a href="/blog/archives">Archives</a></li>
</ul>
</div>
	</div>
	<div class="alignright search">
		<a class="button"></a>
		<div class="container">
			<form action="http://google.com/search" method="get">
				<input type="text" name="q" results="0">
				<input type="hidden" name="q" value="site:informalprotocol.com/">
			</form>
		</div>
	</div>
</nav>
<nav id="sub-nav" class="alignright">
	<div class="social">
		
		
		
		
		
		
		
		
		<a class="rss" href="/atom.xml" title="RSS">RSS</a>
		
	</div>
	<form class="search" action="http://google.com/search" method="get">
		<input class="alignright" type="text" name="q" results="0">
		<input type="hidden" name="q" value="site:informalprotocol.com/">
	</form>
</nav>

</header>
	
		
	
	<div id="content" class="inner">


    <article class="post">
	<h1 class="title">
		<a href="/2014/02/replacing-cocoa/">Replacing Objective-C and Cocoa</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2014/02/replacing-cocoa/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>Ash Furrow wrote an article arguing that Apple needed to <a href="http://ashfurrow.com/blog/we-need-to-replace-objective-c">replace Objective-C with something else</a>. The crux of the argument is that programming languages have moved to higher levels of abstraction over time, edging further away from direct hardware access. By the time such a transition were completed (say within 10 years), using C-based languages will seem as archaic as using assembly. Ash then lays out features he would like to see in such a language.</p>

<p>Replacing something as fundamental to a platform as its language is no small feat. Apple did this once before with Cocoa and the compatibility bridge of Carbon when moving from OS 9 to OS X, and its migration took 12 years to be fully finished in public API. Developers fought this change for many years before Cocoa became the de-facto standard. So a migration to something newer cannot be a cavalier move done to embrace trends; it must be done with a clear purpose that fixes common issues in the thing it replaces, and it must set a foundation upon which to build at least a decade or two of software. And it must coexist with that which came before it. With the OS X transition, Apple didn&#8217;t just have a new language; they had a whole new operating system. It came with entirely different ways of handling memory, threading, files, and graphics. It delivered frameworks that were way more usable than their predecessors. It wasn&#8217;t just a new programming language; it was a revolution in how we built software.</p>

<p>That&#8217;s what it should take to inspire a radical change in developer tools - improvements on an order of magnitude in building software, making it easier to solve hard problems, and fixing issues in common coding standards that have arisen through heavy use. This goes beyond just a programming language; it will require new frameworks and design patterns to really bring about the benefit. Apple owns their developer technologies stack; from compilation with LLVM, to language features in Objective-C, to framework features in Cocoa, to web technologies in WebKit. When you have control of all of these pieces, the problems at the top of the stack can be addressed at the bottom, and vice-versa.</p>

<p>Here are some things I&#8217;d love to see in a next-generation developer platform.</p>

<ul>
<li><strong>Concurrency.</strong> Apple added one of the biggest breakthroughs in libdispatch, a far superior method of handling concurrency and flow control than any system based on threads. A new language should add the kinds of concurrency control in libdispatch as primitives to the language itself, so that everything from the bottom up can use it. Basically if they use the word &#8220;thread&#8221; anywhere in the API, they blew it. If we can kill the concept of a god main thread as well, all the better.</li>
<li><strong>Functional processing.</strong> Functional languages like Haskell have significant benefits by keeping most data immutable and changing it with transformation functions. This has significant benefits in reducing bugs, creating less error-prone code, and most importantly reducing the kind of bottlenecks that kill concurrency like locks. We&#8217;ve got the CPU cycles for it.</li>
<li><strong>&#8230;but keep it imperative.</strong> Pretty much anybody who can code can write imperative code. Purely functional languages are not heavily used, and until they are, it&#8217;s just not realistic to expect everyone to figure this out.</li>
<li><strong>Strong types and duck invocations.</strong> One of the biggest causes of crashes I&#8217;ve seen in Cocoa has been because someone passed something they shouldn&#8217;t have to a method. <code>id</code> in Objective-C can be useful, but it has been abused by developers who take shortcuts that end up biting them in the ass. Strong typing means that passing the wrong thing is an error. It&#8217;s worth the headache. Standardize on method names, so that design patterns emerge naturally. If an object responds to a <code>toString()</code> function, let me call it without having an interface or protocol set up for it.</li>
<li><strong>One style to rule them all.</strong> Remember getting angry about dot-notation? Let&#8217;s avoid that. Whatever systems exist for common problem should have exactly one way to solve it, and that solution should be simple. While we&#8217;re at it, let&#8217;s take a cue from languages like Python and make syntatical style choices hard rules, so that we all (humans and IDEs) just learn them and get on with it without arguing about tabs or spaces. Then getting rid of braces and semicolons becomes much easier to do.</li>
<li><strong>Compiled.</strong> Code compiled up front is always going to be faster.</li>
<li><strong>Secure.</strong> 10 years ago, our lives lived on one PC. Now we have multiple devices tracking everything about our lives. Every machine is an attack vector for all of our highly personal data. Security should be the default. Subprocesses with strong sandboxes and privilege separation should be the default, encryption should be easy, and establishing trust will be necessary. Privacy controls for people should guide most of these decisions.</li>
<li><strong>Modular.</strong> Open source has changed how we develop apps. Instead of developers writing everything themselves only on a monolithic framework, apps now include source code written by dozens of developers building tiny, reusable components. <a href="http://cocoapods.org/">CocoaPods</a> is now a thing. Most modern languages have package management as a feature, because it makes it faster to prototype and build software.</li>
<li><strong>Move beyond C.</strong> No pointers. No <code>main()</code>. No manual memory management. ARC was a massive improvement in how we deal with memory, but there are still issues with hard-to-debug circular references and zeroing weak references. This should be easier, more obvious, and easier to debug.</li>
<li><strong>&#8230;but let me get back to it.</strong> Decades of code have been built on C, so we should be able to get back to it. Most higher-level languages include some form of <a href="http://en.wikipedia.org/wiki/Foreign_function_interface">foreign function interface</a> to get to lower-level bits of code. Just keep it in an isolated sandbox so it doesn&#8217;t crash the app.</li>
<li><strong>Interoperable.</strong> Apps should be able to talk to each other, and pass data between each other, through standardized interfaces. If the language (or at the very least the libraries) support this, we can build more powerful apps, and do a better job applying security practices.</li>
<li><strong>Introspective.</strong> Getting into the guts of a program at runtime can have some powerful benefits. We should be able to fiddle with the internals of our software. Most of the rules laid out here should be bendable. But to keep the integrity of the system in place, this API should be difficult to use.</li>
<li><strong>More sophisticated UI.</strong> In 2014, most displays showing Apple software sit between 4 inches and 13 inches. In the next ten years, that may span from 1 inch watch displays to 60 inch TVs. Concurrent graphics rendering and better support for remote screens a la AirPlay Mirroring should be APIs we can use.</li>
<li><strong>Powerful networking.</strong> If I asked you to name an app you use regularly that didn&#8217;t talk to the Internet, you&#8217;d probably have a hard time answering. Networking should be easy, powerful, secure, extensible, and designed to withstand failures.</li>
<li><strong>Easy data modeling/storage.</strong> Core Data remains a wonderful tool for development, but it was designed for an era long past, not for the present. Getting a stack running correctly has been a pain since the framework&#8217;s inception, and that&#8217;s before you try shuffling data into it from, say, a JSON-based web service. A new system built with concurrency and interaction with remote services is essential.</li>
<li><strong>Social.</strong> The <a href="http://www.youtube.com/watch?v=9hUIxyE2Ns8&amp;t=2m07s">Internet communications devices</a> we all carry know all kinds of stuff about our friends and families. Apps should be able to move content between people in ways that are easier than sticking a photo in an email.</li>
<li><strong>Real-time communication.</strong> Moving data quickly between components, apps, devices, and services is super important. To create the illusion that everything works together seamlessly, this needs to be real-time with as little latency as possible. The OS can do this better than any developer can.</li>
<li><strong>Design to fail.</strong> Most apps crash because the developer did something dumb. As someone who has caused thousands of crashes on devices, I&#8217;m as guilty as anyone. Because in today&#8217;s programming environment, accounting for failure is hard. Every consideration of any new language and its resulting libraries should be designed to make it easy to notice and catch problems quickly. Crashes are not always avoidable, but if you make it simple to handle, they become much more manageable.</li>
</ul>


<p>To summarize: a new developer platform includes a language designed for concurrency and safety, tools better tuned for writing/reading/debugging code, and powerful frameworks for building apps that can easily talk to our friends, apps, services, and devices. Such a platform would be very well suited for the current hardware we own (laptops, phones, tablets, TVs) and can expand to other device categories like smart watches, cars, appliances, and office tools. It would help us make better, safer, more secure, and more stable software.</p>

<p>When Apple came out with Cocoa in 2000 and improved it over the early 2000s, their pitch was that it enabled indie developers and small development shops to build software of a class previously attainable only by large companies like Adobe and Microsoft. This was a big part of what inspired me to begin teaching myself how to write Mac apps. In the years that have followed, the demands of modern Internet apps have exploded, and we are back at a stage of competitive complexity. A new developer platform could once again level the playing field and inspire a new generation of developers to aim high.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2014-02-12T10:00:00-08:00" pubdate data-updated="true">Feb 12<span>th</span>, 2014</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2013/09/discounted-app-upgrades-suck/">Discounted App Upgrades Are a Terrible, Complex, Outdated Idea</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2013/09/discounted-app-upgrades-suck/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>Much ado has been made about the idea of App Store apps getting discounted upgrades, where you buy an app once, and then pay a discounted amount for an upgrade. This idea is not new; for many years, developers sold apps under a model known as shareware. In an era when software was harder to use and people feared viruses, this model thrived among technically-savvy people who tended to spend more money on technology. The generally-accepted model in the Apple world has a fair bit of complexity, involving trials (some time-based, some feature-restricted), serial numbers or license files, and periodic requests for more money. Then the App Store came and replaced it outright with a new, simpler model that favors a traditional retail-style system of cheap software that you pay for once. It&#8217;s far more straightforward and easier to understand; if you want the app, you buy it, and then you own it.</p>

<p>Developers who have thrived under the old model have complained for a long time that they want discounted upgrades to make a return to iOS. Along with it comes the added complexity of managing different tiers of ownership, both technically and mentally. Apple has not offered this, instead opting to make major updates available as a separate, standalone app that existing users pay for in full, as was done recently with Logic Pro X. To me, this is far and away a better and simpler approach to handling upgrades in an era when non-technical people buy software.</p>

<br />


<h1>Consider Apple&#8217;s Perspective</h1>

<p>To properly understand why Apple hasn&#8217;t enabled discounted upgrades, it&#8217;s worth viewing Apple&#8217;s decisions through a very simple lens - they want current and future customers to buy iPhones, iPads, and Macs. In a decision between what will benefit a developer and what will benefit a customer, Apple will pick the customer, every time. Apple advertises that their devices are not mere cell phones or devices with fast web browsers; they have the App Store, a powerful destination for people to find apps to solve problems and games to entertain. With hundreds of thousands of apps and games on Apple&#8217;s stores, no matter how niche the tool you need is or what genre of video games you enjoy playing, there&#8217;s an app for that.</p>

<p>When a new customer brings that iPhone home, they want their device to live up to that expectation by filling it up with apps, and to do so without costing them a fortune. Apple loves that apps are free or cheap, because it makes it easy for customers to try out new things with low risk and high reward. In a sense, the race to the bottom on app prices is great for Apple, even if it&#8217;s not great for developers. But despite prices being terribly low, it hasn&#8217;t stopped growth. There are more developers building on iOS than there ever were. Apple&#8217;s not hurting for apps or developers, as they&#8217;re flowing under natural momentum. Aside from massive brands like Facebook and Angry Birds, no one specific app is really <em>needed</em>. Nature abhors a vacuum, and app opportunities will arise and be fulfilled by someone in the network.</p>

<p>Discounted upgrades throw a wrench into the works. A discounted upgrade is essentially a developer telling an existing customer that they have to pay more money to continue receiving new features and bug fixes. Were they to be implemented into the existing App Store update infrastructure, you&#8217;d be told there&#8217;s an update, and if you didn&#8217;t want it, you&#8217;d have to have some way of hiding that update (and then getting it back later if you wanted to upgrade after all). But you, the customer, would be responsible for shutting off something you didn&#8217;t even necessarily want in the first place. Discounted upgrades add a whole lot of complexity to a simple, habitual process, and it <strong>gives the customer absolutely no value</strong>. Contrast this with a separate product in the App Store, where it is opt-in, and looks and feels like you&#8217;re buying a separate thing, and the process is dramatically simpler. You buy a thing, and you buy another thing. You don&#8217;t buy a thing in various states of upgrade-ness.</p>

<p>So Apple likes cheap, straightforward purchases and free stuff because it&#8217;s a selling point on why you should buy an iPhone. A discounted upgrade complicates many parts of an app&#8217;s life span for a customer. But even if they didn&#8217;t, there&#8217;s an even stronger reason for Apple to maintain the status quo of separate products for major updates, one with a decade-long history of prior art on the Mac.</p>

<br />


<h1>Developers Suck at Discounted Upgrades</h1>

<p>One example of a long-standing Mac shareware developer is the Omni Group. Here is a company that has thrived for almost two decades on the shareware model. Just yesterday, they released an update to their popular Mac app, <a href="http://www.omnigroup.com/blog/omnigraffle-6-is-here">OmniGraffle</a>. OmniGraffle has existed since long before the Mac App Store, and is a wonderful app well deserving of its praise. However, like many shareware apps of the era before the Mac App Store, they offer upgrade pricing, and are unfortunately a perfect case study in all the ways you can get the user experience of an upgrade wrong.</p>

<p>When you open the app, OmniGraffle prompts you with a dialog box asking you if you want to upgrade to the latest update. They show a <a href="https://files.app.net/ptdfc5uy.png">long list of new features</a> that sound great, but with not a single mention that this is a discounted upgrade. A customer who decides they want these features clicks through, and (in this case) get taken to the OmniGraffle website listing more of those features, but there is again no mention of upgrade pricing. You click the download link, install the update, and it suddenly says you&#8217;re in trial mode. <em>Edit: The update for OmniGraffle 6 is installed alongside 5; it doesn&#8217;t replace the existing app. But both apps <a href="https://files.app.net/pttxgVsq.png">show the same display name, with no difference in icon</a>, making it difficult to tell which app is the update.</em> If they uninstalled the existing app and want to undo this process, they have to find the old version, buried as the 5th question on their <a href="http://www.omnigroup.com/support/omnigraffle">support page</a> and listed in a <a href="http://www.omnigroup.com/ftp/pub/software/MacOSX/10.6/">large FTP index</a> with files that end in extensions like <code>tbz2</code>.</p>

<p>If you know that this particular update will involve upgrade pricing, you&#8217;re at least in a position to have already decided to pay to upgrade or not. But if you just opened the app to work, consider the emotional roller-coaster this process puts you through. The customer enters an app to solve a problem, to get their work done. Suddenly they&#8217;re offered the delight of having more features and capabilities to solve their problem in a better way. They put their problem on hold to install your update, and when they&#8217;re finished, they&#8217;re confused at why the product they already paid for is demanding more money, and worried that they can&#8217;t get the old app back. Getting back to the old app involves many weird and non-obvious hurdles.</p>

<p>Omni makes this app available via the Mac App Store, making for a comparable user experience. For the App Store version, release notes and update information are shown through the Mac App Store. But for this major version update, the old app is replaced with a new, separate product that must be bought in its entirety. They&#8217;re free to buy it or ignore it, at their own pace. The new app sits next to the old one, not replacing it. No customer is ever asked to enter a serial number or download a license file (let alone store it somewhere for future reference if they buy a new computer). The only downside is that the customer is asked to pay the same amount of money for the new thing, instead of getting a discount. But as <a href="http://carpeaqua.com/2013/09/05/trials-and-upgrades-are-still-dead/">Justin Williams points out</a>, this is basically the only industry where this phenomenon happens.
Omni is so fundamentally glued to the old shareware model that they came up with <a href="http://www.omnigroup.com/blog/omnikeymaster-upgrade-pricing-for-mac-app-store-customers">this thing</a>, the OmniKeyMaster, which is basically a piece of software that converts licenses from one store to licenses in another store, so you could buy a cheaper upgrade from the other store (and of course, <a href="http://www.omnigroup.com/blog/update-no-upgrade-pricing-for-mac-app-store-purchases">Apple made them kill it</a> almost immediately). Their customers were asked to figure out what their license was and why it mattered for them to save a few bucks on an upgrade.</p>

<p>I&#8217;m not picking on Omni because I harbor any animosity or negative thoughts to what they do (and I do sincerely apologize to Omni for singling them out, as they were a convenient example while writing this). They build amazing, <a href="http://www.omnigroup.com/about/">award-winning</a> software and their apps are worthy of all the praise they get. They&#8217;re one of the best developers on the Mac building stuff outside of the App Store. But they got their discounted upgrade experience completely and totally wrong. Their process assumes you will pay them to upgrade; they have no incentive to make keeping the product you have easy or enjoyable. And they&#8217;re not alone. Lots of apps fail at the process of making a discounted app upgrade a positive experience. If the best of the best can get this process so wrong, why should Apple trust the shifty ones already gaming the App Store to get it right?</p>

<br />


<h1>Market Conditions</h1>

<p>It&#8217;s not surprising that old hats have had trouble adapting. Many companies have tried to desperately cling to the old ways of doing business, holding on with a few key products or failing outright and going out of business. Many other companies have emerged, finding tremendous success in taking advantage of the rules and human behaviors to maximize profit or growth. While it&#8217;s hardly a healthy market for small developers, it&#8217;s the only market we have to work with if we want to target iOS devices, and one of two on the Mac. But it&#8217;s not our market; all markets are owned, controlled, and directed by buyers and not sellers. Developers are sellers; we must adapt to the market and its rules.</p>

<p>Developers can move their product beyond the App Store, and sell subscription-based services, though you&#8217;re likely to experience more resistance with customers having to pay regularly. They can also move towards a model driven by in-app purchases, where you provide some functionality for free (or cheap) in the App Store, and then let them add more features. Apple seems to be wanting developers to move further in the latter direction. A wonderful case study in this is the iPad app <a href="http://www.fiftythree.com/paper">Paper</a>, which gives you basic tools for free and charges in-app purchases for more advanced ones. It&#8217;s worth noting that Apple lauded that app with both App of the Year and an Apple Design Award.</p>

<p>Humans are predictable, as are their reactions to your moves in a marketplace. Want to keep people happy? Don&#8217;t violate your customers&#8217; expectations. Don&#8217;t surprise your customers by asking for money after they&#8217;ve already paid you. Don&#8217;t make your customers feel like they&#8217;re missing out on a deal by offering a time-based discount. If you must break these rules, do it while treating your customers with respect and honesty. Take care to make sure they have a pleasant way to not pay you, to keep things as they have always had them. Software shouldn&#8217;t feel like ransom. You can fly fast and loose with these rules if your target market is people with disposable income who look past sleights because they want to support developers (and if you have these customers, cherish them, because they are exceptions). But average people don&#8217;t care about your livelihood. They care about solving their problem. Despite this, they will be more likely to treat you with respect if you show them the same.</p>

<p><em>But my company depends on discounted upgrade revenue!</em> On the Mac, you can still rely on this model, but there&#8217;s a reason that developers want their apps through the App Store. It&#8217;s a far smoother process for them. By relying on a different model, you&#8217;re complicating the buying process and probably losing customers. Just please, spend some time making sure the upgrade process is good for your users, not just for you.</p>

<p><em>But I want to reward my loyal customers!</em> By giving your customers a discount on something they have to pay for again, you&#8217;re not rewarding them. You&#8217;re punishing them less. If you want to reward your existing customers, give them something extra instead.</p>

<p><em>But I get one-star reviews when I release separate paid apps!</em> You made the decision to ask people who have already paid you to pay you again. You also picked the prices. People do have the right to be mad when a company asks them for more money, and sometimes will take that energy to reviews, because they know you&#8217;re paying attention to them. And you do control how existing customers learn how the updates work. Confuse them to make them mad. Make them mad to get spiteful reviews. Unfair? Perhaps, but again, it&#8217;s not your market. As a side note, reduce this issue by making sure your updates are actually worth paying for (and your iOS 7 reskin probably isn&#8217;t).</p>

<p><em>But my customers won&#8217;t find out about the separate app!</em> Your app is an updateable piece of intelligence. Before your big update goes out, plan for it and add some announcement UI in your app that you can trigger over the Internet. With new features in StoreKit, you can directly link to the new app, and close the sale directly in the app.</p>

<p><em>But people have no right to complain about an update that costs 99 cents/$2/$3/etc. when their iPhone cost hundreds of dollars!</em> This privileged point of view comes from people who love supporting developers and who have spare money. And while it&#8217;s noble, it doesn&#8217;t reflect how most customers think about apps. The toothpaste isn&#8217;t going back in the tube here; people are now used to free and cheap apps with updates. Your app isn&#8217;t why they bought an iPhone; it&#8217;s an accessory, one that can be discarded as easily as an iPhone bumper.</p>

<p>Discounted upgrades offer nothing but complexity to Apple and to end users. Short of some UI breakthrough we haven&#8217;t thought of yet, they aren&#8217;t coming. The standard of separate, standalone apps has been established, by third-party developers and by Apple themselves. Having separate apps offers UI benefits, less stress, and no perceived bait-and-switch to end users. The only people who benefit from discounted upgrades are developers who have customers who eagerly pay for upgrades. We had that during the Mac. It&#8217;s far from the reality of what we have today. The market has spoken; shareware is dead. Let&#8217;s go build something new.</p>

<p><em>Once again, my sincere apologies for singling out Omni in this post. They were a convenient and lazy target for me because of their recent app update. Their apps are great and you should <a href="https://store.omnigroup.com/">buy them</a>.</em></p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2013-09-26T02:48:00-07:00" pubdate data-updated="true">Sep 26<span>th</span>, 2013</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2013/08/devcenter-dot-me/">DevCenter.me</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2013/08/devcenter-dot-me/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>In 2013, developers rely on web-based services to get much of their work done. Whether it&#8217;s looking up server API documentation, provisioning iOS devices, or registering API keys, a part of a developer&#8217;s day involves going to a website and looking something up. And that means keeping track of how to find all of these disparate websites. The problem is that there&#8217;s no real standard way or schema to get to them. Each service has a different URL for their developer site. Some examples:</p>

<ul>
<li>iOS: http://developer.apple.com/devcenter/ios/</li>
<li>Android: http://developer.android.com/</li>
<li>Chrome: https://developers.google.com/chrome/</li>
<li>Dropbox: https://www.dropbox.com/developers</li>
<li>Twitter: https://dev.twitter.com/</li>
<li>Instagram: http://instagram.com/developer/</li>
<li>Windows: http://msdn.microsoft.com/en-us/windows</li>
<li>Heroku: https://devcenter.heroku.com/</li>
<li>Twilio: http://www.twilio.com/docs/api</li>
<li>Amazon Web Services: http://aws.amazon.com/documentation/</li>
</ul>


<p>There&#8217;s 10 different examples, each with completely different URL structures. If you have to interact with more than a few of these, it becomes impossible to keep track of them all in your head. Now, you could rely on bookmarks or web searches, but these aren&#8217;t as fast as just typing a URL into your browser or using a shortcut in an app like <a href="http://alfredapp.com">Alfred</a>. Speaking from my own experience, for the sites I can keep in my head, I&#8217;ll type part of the URL and hope that the browser&#8217;s URL autocomplete will finish the job, simply because it&#8217;s usually more efficient. But as a human, sometimes I&#8217;m wrong, which wastes time. Wouldn&#8217;t it be great if there was a simple, consistent URL structure for all these different sites?</p>

<p>So I built <a href="http://devcenter.me/">DevCenter.me</a> to do this. <a href="http://devcenter.me/">DevCenter.me</a> is a directory of developer sites that can be accessed via consistent URLs that either you or your browser can remember. Each developer site can be accessed via one or more shortcuts (for example, <a href="http://ios.devcenter.me/">ios</a> for the iOS developer center, or <a href="http://app.net.devcenter.me/">app.net</a> or <a href="http://adn.devcenter.me/">adn</a> for App.net) through either of two different URL structures: <code>shortcut.devcenter.me</code> or <code>devcenter.me/shortcut</code>. These shortcuts are designed to be memorized. Frequently used shortcuts will end up getting persisted in your web browser&#8217;s URL field (the service sends a 302 temporary redirect, not a permanent one, so your browser will probably still cache it). After a few uses, you can just type <code>fb</code> into your browser&#8217;s URL field, and it will automatically recognize you&#8217;re typing <code>fb.devcenter.me</code>, taking you to the right site in just a few keys.</p>

<p><a href="http://devcenter.me/">DevCenter.me</a> was designed to be a productivity tool for developers. There&#8217;s a <a href="http://devcenter.me/sites.json">full list</a> of sites and their shortcuts available in JSON, as well as on the <a href="http://devcenter.me/">website</a> (with shortcuts shown by pressing the option key). You can even download an <a href="http://devcenter.me/files/devcenter.me.alfredworkflow">Alfred extension</a> to open a site via one of these shortcuts (shout out to <a href="http://twitter.com/ws">Will Smidlein</a> for writing this, as well as providing the <a href="https://twitter.com/ws/status/364184535799300097">motiviational</a> <a href="https://twitter.com/ws/status/364184945956106240">tweets</a> to write this service). And if a site is missing. you can fork the <a href="http://meta.devcenter.me/">project on GitHub</a>, add it to the list, and submit a pull request. When I initially published the project, there were 10 sites. As of this writing less than 12 hours later, there are 56, and undoubtedly more pull requests for me to merge in. That&#8217;s really cool to see, and I hope people keep submitting requests for more sites.</p>

<p>I built <a href="http://devcenter.me/">DevCenter.me</a> because keeping track of all these websites was a thorn in my side; wasted memory space in my head. Accessing developer sites may not be a world-changing problem, but saving a few seconds a few times a day adds up over time. A better solution keeps you focused on what you&#8217;re actually trying to do rather than requiring you to keep estoeric URLs in your head. I hope it finds value as a tool for lots of developers.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2013-08-07T02:44:00-07:00" pubdate data-updated="true">Aug 7<span>th</span>, 2013</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2013/07/thoughts-on-the-dropbox-datastore/">Thoughts on the Dropbox Datastore API</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2013/07/thoughts-on-the-dropbox-datastore/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>As I&#8217;ve stated before, <a href="http://informalprotocol.com/2012/11/your-app-needs-to-sync/">your app needs to sync</a>. This has not gone unnoticed by the startup world, who are offering more and more options for developers to build sync into their apps. Today, Dropbox announced a new <a href="https://www.dropbox.com/developers/blog/43/the-datastore-api-a-new-way-to-store-and-sync-app-data">datastore API</a>, a system for syncing application data (that isn&#8217;t file-based) into and out of Dropbox.</p>

<p>At first glance, this looks like a wonderful solution. You get a drop-in component on iOS, Android, or the web to put your app&#8217;s data into the cloud, with very little thought by you. Data gets stored offline automatically. It even handles merging and conflicts quietly in the background. Pretty great, right?</p>

<p>I hope that the Dropbox Datastore API can deliver on these promises. I don&#8217;t think they&#8217;re necessarily impossible problems to solve. But these are the exact same problems that Core Data + iCloud claims to solve, and between iOS 5 and iOS 6, iCloud hasn&#8217;t been able to deliver on that promise. This certainly doesn&#8217;t mean Dropbox can&#8217;t, or that the Datastore API has problems. Dropbox is certainly well versed in the concept of syncing blobs of data between multiple systems, silently and effectively, as that&#8217;s what they&#8217;ve been doing for the last five years. But this solution should be approached skeptically and carefully.</p>

<p>Before you ship your app built with the Dropbox Datastore, these claims should be tested thoroughly. Test data sync across 1, 2, 3, 8 different devices. Test it offline. Introduce conflicts. Save data offline. Try multiple conflicts. Create conflicts on one machine while offline, etc. There&#8217;s a lot of ways a magic sync solution can fail.</p>

<p>Of course, the benefits to a drop-in solution are immense. You don&#8217;t have to write sync logic. You don&#8217;t have to wake up at 4 AM because your MongoDB process randomly died, taking your server API out with it. You don&#8217;t need to handle the differences in online and offline state. You know there&#8217;s a company whose goal it is to solve this problem for you; that&#8217;s their job.</p>

<p>Just be careful. When it comes to any tool that claims to be a cure-all, make sure it does the job.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2013-07-09T12:43:00-07:00" pubdate data-updated="true">Jul 9<span>th</span>, 2013</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2013/03/bitcoin/">Beginner&#8217;s Guide to Bitcoin</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2013/03/bitcoin/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>In the last few years, an interesting alternative to paper currency has risen in the form of Bitcoin. I started paying attention to Bitcoin two years ago, and have owned some ever since. I&#8217;ve purchased physical and digital goods with it, as well as traded it for cash. It&#8217;s particularly intriguing to me because it maintains the core properties of economic models while creating a system of inflation guided by encryption algorithms rather than humans. And it&#8217;s grown in huge popularity over that time, with a net worldwide worth of <a href="https://blockchain.info/charts/market-cap">over $750 million USD</a> at the time of this writing.</p>

<p>Many people have asked me about Bitcoin, so here&#8217;s a basic introduction to what Bitcoin is and how it works.</p>

<p><em>Note: I am neither a lawyer nor an accountant. This should not be construed as legal or financial advice. If you use the information in this post, you agree that it is at your own risk.</em></p>

<h2>What is Bitcoin?</h2>

<p>A currency can be thought of as a limited supply of <em>something that can be traded. In the case of the US dollar, that </em>something* is paper bills and metal coins, each of which has a value to the total limited supply of all money. The limited nature of a currency is where it gets the value; the idea being that we all collectively trust some entity to manage the supply of the currency. In the case of the US dollar, the Federal Reserve manages the supply against the full faith and credit of the United States.</p>

<p>Bitcoin is a type of currency that is managed not by people, but by cryptography. Transferring currency between people involves computing some work and signing it with a public key. Volunteers verify the transactions using really hard math problems. Every few minutes, a small amount of Bitcoins is given randomly to a miner, slowly and steadily inflating the amount of currency in the system and giving incentive for people to verify the transactions. The history of all transactions are publicly available, but the addresses are basically random data, making transactions hard to identify. The result of this is a system where the supply grows at a well-defined rate that everyone can see. It also means transactions are fairly anonymous, verified by others, and irreversible.</p>

<h2>How do you get Bitcoins?</h2>

<p>There are two primary ways to get Bitcoins. But before this, you need a program called a <a href="http://bitcoin.org/en/choose-your-wallet">Bitcoin wallet</a>, which tracks the Bitcoins you have, and manages your addresses. You can get a Bitcoin wallet for pretty much any desktop OS, for <a href="https://play.google.com/store/apps/details?id=de.schildbach.wallet&amp;hl=en">Android</a>, or you can use a hosted site like <a href="https://mtgox.com">Mt. Gox</a> or <a href="https://coinbase.com/">Coinbase</a> (though remember, these sites are hosting your money, so take precautions here). Your wallet manages some <strong>extremely sensitive</strong> data, and so you should take care to keep it safe and backed up, or you can lose your Bitcoins forever.</p>

<p>The easiest way is the same as with any other currency - by receiving them from someone else. To do this, you create an address with your Bitcoin wallet that you can give to others; for example, my address is <code>19LayHDujXwVpuLv2cqgFFfBFwmegx3Z8s</code>. You give this address to someone, and they send a certain amount of Bitcoins (or fractions of Bitcoins) to that address. This transaction is submitted into the Internet, where other people verify the transaction to prove that the person actually owns those Bitcoins. Once enough people have verified the transaction, the coins are considered &#8220;transferred&#8221;, and they&#8217;re yours. There are <a href="https://en.bitcoin.it/wiki/Category:Exchanges">several exchanges</a> to trade Bitcoins with others for other currencies (I use Mt. Gox), though there are often times difficulties in transferring US dollars to one of these (as PayPal and the credit card vendors don&#8217;t let you use them for buying Bitcoins). You can also find people who will trade informally in places like <a href="http://bitcoin-otc.com/">#bitcoin-otc on Freenode IRC</a>.</p>

<p>The other way is a process called <strong>mining</strong>, which involves running a program (a <strong>miner</strong>) which helps verify transactions on the network. This program verifies other people&#8217;s transactions by processing really hard math problems. The result of verifying these transactions, however, is the chance for free money. Every few minutes, a new block of Bitcoins is &#8220;found&#8221; by a miner, and they get to keep them. Additionally, when other people transfer Bitcoins, they can optionally include a &#8220;transaction fee&#8221;, which goes to a miner. One problem with this is that finding Bitcoins is difficult to do, because so many other people are trying to do the same. To mitigate this, many people join a <a href="https://en.bitcoin.it/wiki/Comparison_of_mining_pools">mining pool</a>, where any Bitcoins found are distributed among the whole pool. Some people go so far as to build custom computers to do Bitcoin mining at scale, and there are <a href="https://en.bitcoin.it/wiki/Mining_hardware_comparison">hardware lists</a> that talk about how to get the most bang for your buck.</p>

<h2>What do you do with Bitcoins?</h2>

<p>You spend them, of course! An incomplete list of vendors to spend Bitcoin at can be found on the <a href="https://en.bitcoin.it/wiki/Trade">Bitcoin wiki</a>. You can buy all kinds of things with Bitcoins, like food, clothes, services, toys, books, and even <a href="http://www.belgianflavours.com/us/">beer</a>. Many sites will trade by the market value, meaning that they&#8217;ll sell something for either $20 via PayPal or $20 at market rate in Bitcoin (so if a Bitcoin cost $1, that would cost 20 BTC).</p>

<p>You can also treat Bitcoins as a commodity and do forex (currency) trading. So if you buy 10 Bitcoin at $1 and sell them at $2, you&#8217;ve made a profit of $10. The markets for this tend to fluctuate quite a bit; the month prior to writing this, the value has increased from $30 to peak at $75. But what goes up must come down; in 2011 the USD to BTC exchange rate plummeted from a peak of $33 to $2.51 and took a long time to recover. The volatility means that you could have huge gains, but also catastrophic losses.</p>

<h2>Is it safe?</h2>

<p>I&#8217;ll divide safe into four areas here: value stability, information security, identity, and legality.</p>

<p>You want a currency to be fairly stable in value, meaning that huge swings don&#8217;t happen (or at least are rare). Otherwise it&#8217;s difficult to put faith in the currency. As of right now, there are still large swings in value that make it difficult to be reliable. It&#8217;s certainly more volatile than most paper currencies. So if you&#8217;re looking for a safe bet to put your savings into, this isn&#8217;t it. The volatility could be desirable if you&#8217;re looking for short-term gains, but not for your life savings. Treat it like a gamble.</p>

<p>The Bitcoin protocol has some smartly designed security features. It uses similar encryption to what your computer uses when talking to your bank&#8217;s website, and if hackers figure out how to beat that, we&#8217;ll all have bigger problems than our Bitcoins being hacked. It relies on a massive network of volunteers verifying transactions and reaching consensus; the only way to work around this is to build a network more powerful than all the world&#8217;s supercomputers combined. And it relies on problems that are computationally complex as to require significant time from would-be hackers. The combined result of these layers of security is a system that has only had <a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-5139">one major security flaw</a> over two years ago (and hackers have a huge financial incentive to break this system, so you can bet they&#8217;re trying). Where hackers have found successes is in attacking online wallet services and exchanges. You should be very careful if you store your Bitcoins in one of these.</p>

<p>Your identity is never attached to a transaction or address. Each transaction, however, is <a href="http://blockchain.info">publicly available</a> and has a history. If you share an address and receive Bitcoins from it, and that address is Googleable, your name might be found attached to some Bitcoin. But purely from the network layer, transactions are anonymous. They&#8217;re just heavily recorded.</p>

<p>As of this writing, there&#8217;s no laws that I know of against owning or trading Bitcoins. There are very few regulations; the only one I know of was actually just <a href="http://gizmodo.com/5991951/bitcoin-and-other-virtual-currencies-finally-get-some-regulation">implemented today</a>. That also means there&#8217;s little safeguards in terms of risk or fraud. Tax implications are also unclear, but you probably should just file it as income. Talk to your accountant and your lawyer, because I am neither.</p>

<h2>Should I use it?</h2>

<p>Bitcoin is definitely not the easiest thing to use. But there are plenty of things you can buy with it, so it&#8217;s a viable currency for many things. And it&#8217;s an interesting market for speculation. If you want to buy things online and prefer to avoid PayPal or giving out a credit card, it&#8217;s a nice alternative that is basically digital cash.</p>

<p><em>If you get into Bitcoin because of this article, feel free to send some Bitcoin as a thanks to my address: <code>19LayHDujXwVpuLv2cqgFFfBFwmegx3Z8s</code></em></p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2013-03-22T02:41:00-07:00" pubdate data-updated="true">Mar 22<span>nd</span>, 2013</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2013/03/project-amy/">Project Amy</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2013/03/project-amy/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>At the last App.net hackathon, I unveiled <a href="http://informalprotocol.com/2012/10/apparchy/">Apparchy</a>, a proxy server that converts your App.net timelines into data that looks like the Twitter API, which you could then connect to via Twitter&#8217;s official iOS apps to post and view to and from App.net. This was a really cool hack, but it suffered from many problems. It relied on a proxy server, which had issues relating to security and privacy, as well as being a single point of failure. If the proxy server went down, everyone&#8217;s app broke. Apparchy itself was built to work with Twitter&#8217;s official apps, which use a LOT of private methods on Twitter&#8217;s server API, and those private APIs changed often from release to release, meaning the app would break if you updated it. It was a big pain to set up, taking many steps that were easy to get wrong. But perhaps the most important and the most philosophical problem that plagued Apparchy was that the early adopter audience of App.net were not the kind of people who embraced Twitter&#8217;s official apps. They used Tweetbot or Twitterrific or some other app because it was better suited for their needs or looked better or some other reason.</p>

<p>Even with all these problems, it was fun and fascinating to make. Going into this weekend&#8217;s App.net hackathon, I wanted to top it. How? By building something that was just as mindblowingly cool, that also fixed all of those problems.</p>

<p>Since the last hackathon four or five months ago, App.net has been <em>hustling</em> on getting new APIs out, having added the <a href="http://blog.app.net/2012/12/13/app-net-messaging-api-now-available/">Messaging API</a> and the <a href="http://blog.app.net/2013/01/28/announcing-the-app-net-file-api/">Files API</a>, among other things. I&#8217;ve been dreaming for years of a better chat app with first-class, bulletproof file transfer support, and App.net has all the ingredients for a killer implementation. Similarly, for over a year, I&#8217;ve been sitting on the knowledge of the existence of the <a href="http://developer.apple.com/library/mac/#documentation/AppleApplications/Reference/IMServicePluginFrameworkRef/_index.html%23//apple_ref/doc/uid/TP40009478">IMServicePlugIn framework</a>, waiting for an opportunity to use it for something.</p>

<p>And thus, <a href="https://alpha.app.net/projectamy">#ProjectAmy</a> was born. App.net messaging integrated natively into Messages for the Mac.</p>

<p>Here&#8217;s how to set it up. If you&#8217;re running Mountain Lion, <a href="https://files.app.net/1/10610/a-mfGCDN0u15pYVfDtI2tVMBDaQJBLcCU1Bpjrf9ERBar8TSua1ibkrWD9mwz7AHifUTbFCDHM2OKrJlwS4vdDtUekw6KJXZPWGOwfgFCdVZ5kVcDH39ovxAaUomUNo3vHL2_KFVB-yjCwbsg1Ga6NylkKCdwxti3SY4BlmbsUZQ">download the Amy installer</a> and run it. Once it has finished installing, open Messages&#8217; Preferences and add an account. A new option for App.net will appear: pick it and enter your username and password for App.net. Add the account and you&#8217;re done.</p>

<p>The people you follow will be shown in your buddy list. Double clicking one will open a new chat window and start a new private messaging session like you would see on <a href="https://omega.app.net/">Omega</a>. Sending and receiving messages happen very fast, usually within a second. You can drag files into the chat window, and they will upload to your account&#8217;s App.net file storage and be sent as part of a message. Similarly, if you attach a file elsewhere, it will let you download it directly from Messages - and if that file is an image, including animated GIFs, those images will appear inline like they would with AIM or iMessage. If you subscribe to group chats or <a href="http://patter-app.net/">Patter chat rooms</a>, those will appear as well. It&#8217;s very nicely integrated.</p>

<p>Project Amy tops what I did with Apparchy. It deeply integrates App.net into a major app. It doesn&#8217;t rely on a proxy server (or in fact communicate with any API except for App.net), so there&#8217;s no concerns about privacy and far less issues with stability. It uses 100% public, documented APIs that are exposed, so updates will not break the plugin (in theory). It&#8217;s super simple to set up; just run the installer and add your account information. And it is an integration in an app used by millions of people, with a wide intersection of the people who use App.net. It fixes all of the problems, makes Messages more useful, and makes App.net more useful.</p>

<p>That said, this initial release is a beta. There are bugs and I&#8217;ll be working on fixing them over time. But in the last few weeks as I&#8217;ve developed it, it&#8217;s vastly changed how I use PMs on App.net. I use it a lot more, and respond to people a lot more frequently and much more quickly. I hope every Mac-using App.net user downloads it and installs it.</p>

<p>You can <a href="https://files.app.net/1/10610/a-mfGCDN0u15pYVfDtI2tVMBDaQJBLcCU1Bpjrf9ERBar8TSua1ibkrWD9mwz7AHifUTbFCDHM2OKrJlwS4vdDtUekw6KJXZPWGOwfgFCdVZ5kVcDH39ovxAaUomUNo3vHL2_KFVB-yjCwbsg1Ga6NylkKCdwxti3SY4BlmbsUZQ">download the Project Amy beta for free</a> from my App.net file storage. I hope you like it!</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2013-03-03T10:31:00-08:00" pubdate data-updated="true">Mar 3<span>rd</span>, 2013</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/projects/'>projects</a>


</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2013/02/files-as-ui-vs-api/">Files as UI vs API</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2013/02/files-as-ui-vs-api/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>Rene Ritchie on <a href="http://www.imore.com/stuck-between-dropbox-was-and-icloud-isnt-yet">iCloud vs. Dropbox</a>:</p>

<blockquote><p>For all Dropbox&#8217;s automagical-ness, it&#8217;s a relic of the past. It&#8217;s a file system. It&#8217;s a hierarchy. It&#8217;s a folder sync. It&#8217;s a bunch of encrypted data stored on Amazon&#8217;s S3 network.</p>

<p>As much as iCloud is the right idea still not realized, Dropbox is the wrong thing done brilliantly well. And at the end of the day, that still amounts to the wrong thing.</p></blockquote>

<p>There&#8217;s an important distinction here, and that&#8217;s separating <em>files as UI</em> from <em>files as API</em>. iOS (and, to a lesser but growing extent, Mac OS) has proven the value that users should not have to manage their own file system, that files as UI is a poorer user experience. You shouldn&#8217;t have to worry about where photos are stored in your photo library; iPhoto will manage collections of photos for you and they get stored on your disk somewhere. Apps can present organizational context that files cannot, letting one photo be in your library, your photo stream, an event, multiple albums, and with multiple people, all without having to exist in folders representing each of these collections. This is a good thing, it&#8217;s a significant advancement forward in human/computer interaction design, and it&#8217;s the model that computing on all platforms will be following going forward.</p>

<p>Files as API, however, are as important as ever. Besides being organizational chaos for a user to manage, a file system can be thought of as a structured way of mapping lots of pieces of separate data to a physical disk. Apps can store whatever data they want into a file, and the OS figures out how to actually store it. It&#8217;s a system that works very well. Using the iPhoto example, those photos may be interacted with in one or many collections with a smarter and more appropriate UI, but that photo is still being stored as a file somewhere on disk.</p>

<p>So while the UI has transcended the need for users to use the Finder for organization, the underlying data still relies on files, which is still the best way to save large amounts of disparate data. Just about every abstraction on files (e.g. databases or object stores) ultimately ends up writing files to the file system. Developers are still heavily reliant on files as API, even if we&#8217;ve moved beyond needing or wanting them in UI.</p>

<p>Besides the key/value store (which I believe uses a different syncing mechanism), iCloud advertises three mechanisms for syncing data - the file store, the document store, and the Core Data store. All of these are actually based on the same syncing mechanism for syncing files (a &#8220;document&#8221; refers to something like a Pages document, which is stored on disk as a folder with multiple files for separate images, text, and metadata; Core Data store refers to database-style apps that have lots of little pieces of data and maybe some files that go along with them). With iCloud, developers get a folder that the user never ever sees called a &#8220;container&#8221; to move files to and from the cloud. And it&#8217;s this basic file/folder synching mechanism that is apparently flawed, as there have been many reports of iCloud-based apps that have had problems, whether they&#8217;re based on Core Data, on documents, or on other storage with files.</p>

<p>Dropbox, on the other hand, was designed around files, both from a UI point of view and an API point of view. This means their file syncing is very, very good. If a file gets put into a Dropbox somewhere, it ends up everywhere quickly, basically with absolute reliability (short of network errors). If you&#8217;re building an app that <a href="http://informalprotocol.com/2012/11/your-app-needs-to-sync/">needs to sync</a>, that kind of reliability is <em>exactly</em> what you&#8217;re looking for. And you&#8217;re already using files to store stuff. The Dropbox file UI side of things is optional for users; they have to seek it out, either on the website or by having one of the Dropbox apps - there&#8217;s nothing stopping you from having a Dropbox account purely for syncing data, without ever installing the Mac app or viewing a directory on the web site. But their syncing of files works. Apps can build better UI on those files whether they&#8217;re stored locally, stored in Dropbox, or stored in iCloud. But Dropbox has proven it&#8217;s reliability, and iCloud hasn&#8217;t.</p>

<p>So while there is an argument to be made that Dropbox&#8217;s UI is a relic, its value as a syncing engine is still huge, precisely because it&#8217;s built around the paradigm of files, a paradigm we have decades of experience working with.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2013-02-10T13:20:00-08:00" pubdate data-updated="true">Feb 10<span>th</span>, 2013</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/12/the-ragequit/">The Ragequit</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/12/the-ragequit/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>Every few weeks, some tech company is in the fire over changes to their rules. This week it&#8217;s Instagram, but who knows who it&#8217;ll be next week. They put out some change to their terms of service that claims new or changed rights over what they can do, someone notices, bloggers and headline-hungry tech reporters find it, and suddenly we have us a news cycle. In 2012, the truth is not the actual truth, but that which is tweetable. People circulate headlines speculating on what the new terms <em>mean</em>, a few rounds of telephone go by at the speed of light, and pretty soon the company in question is the most evil entity on earth for the next two or three days.</p>

<p>This nuclear chain reaction cascades, and eventually people get mad; so mad, they decide to pull off a move that could never have existed in the pre-Internet era: the <strong>ragequit</strong>. A ragequit consists of three parts - backing up your account data (usually), deleting your account, and then talking very loudly about it on social media. Usually this decision is made within hours of the change going <s>viral</s> public. Its intent is to send a message that says that these changes are not OK, and if you&#8217;re going to make them, I&#8217;ll just take my ball and go home, so you should fix them.</p>

<p>In a way, the ragequit is fascinating to observe in human nature. In just a few hours, someone can go from ignorance to apathy to fear to anger, and let this rush of emotions dictate a permanent decision. We&#8217;ve now moved to a point where software is so disposable that we will spend months and years putting our life into it and throw it away at the first sign of perceived injustice against ourselves. It&#8217;s equally curious how people think a few scattered deleted accounts will end up persuading the company to see the error in their ways, as opposed to all the monstrous bad press being simultaneously thrown at them.</p>

<p>One of the most infamous incidents of the ragequit happened in 2010 when Facebook announced a <a href="http://venturebeat.com/2010/05/31/quit-facebook-day-flops-as-only-1-in-15000-pledge-to-quit/">number of changes</a> to their privacy options and policies. As with all things Facebook and privacy (hence Instagram and privacy), people got mad and deleted their accounts en masse. Did it work? Well, no. Facebook didn&#8217;t even bother to dignify the effort with a response. They likely picked up more new users that day than they lost from ragequitters. That was two and a half years ago, and it&#8217;s not like Facebook&#8217;s privacy controls have gotten any better. The whole thing was a futile effort that made some people feel good, and effected no change.</p>

<p>Nobody has ever been called noble or admirable for knee-jerk removing part of their online presence. Those who do it are never celebrated for it beyond the moment, and many times end up crawling back, tail between the legs, and resuming their use of the service. So remember, if you&#8217;re thinking of pulling off the ragequit, it probably won&#8217;t do anything but make you feel better in the moment. The company might end up backpedaling, the story ends, and suddenly you&#8217;re looking for a new photo-sharing app.</p>

<p>And yes, I am entirely guilty of the ragequit in the past.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-12-20T01:12:00-08:00" pubdate data-updated="true">Dec 20<span>th</span>, 2012</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/11/your-app-needs-to-sync/">Your App Needs to Sync</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/11/your-app-needs-to-sync/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>In the last few years, we&#8217;ve seen a pretty significant shift in how we use computers. We&#8217;ve gone from primarily using one Internet-enabled device (the PC) to using two (PC + phone) to using three (PC + phone + tablet), and who knows what else we&#8217;ll add in the next couple years. Not only are we looking up our data and documents on all these devices, we&#8217;re creating data and documents on them, and the time we&#8217;re spending to do it on the PC is getting smaller. Effortless and ubiquitous access to data is increasingly important to people.</p>

<p>If your app deals with user&#8217;s data, building cloud sync into your app should not be a feature you bolt on to an app - it is <strong>the</strong> feature. It&#8217;s why you will beat competitors or lose hard to them. It&#8217;s what will make your app feel effortless, thoughtless, and magical. It&#8217;s what will gain a user&#8217;s trust, and once you have that, they will sing your app&#8217;s praises and never give it up. But to earn that trust, you have to account for sync at every step of the design and engineering of your app.</p>

<p>Developers have a number of choices as to how to build an app around sync. You can use iCloud, you can use a hosted service like Parse, or you can build a custom sync service for your app. Each solution has trade offs. So what should you optimize for?</p>

<p>The reality is that every app is different, and each sync system must cater to the data that is syncing. While it is certainly the most work, it&#8217;s my belief that you should optimize for control. You should have total and complete control over when and how your app syncs its data. You should be handling errors and conflicts, not abstracting them behind black-box middleware. Without this level of integration, you&#8217;re bound to a system that can fail unreliably, leaving users to figure out what went wrong. And when they try, it&#8217;ll be your app that feels broken.</p>

<p>When you build it all yourself, you have absolute ownership over everything. When you decide your app should sync, it will. When you get the data, you can update the UI immediately. When there&#8217;s a problem or a network error, it&#8217;s not lost in some abstraction; it&#8217;s your code that can hear about it and deal with it or tell the user. You know when everything is working and when it isn&#8217;t. And if you know, you can empower the user to make decisions and set their expectations.</p>

<p>iCloud&#8217;s biggest problem is that it goes out of its way to obscure a lot of this detail from you. Their pitch is that creating apps with the document system and putting them in iCloud means they will all sync magically and you don&#8217;t have to worry and <em>we&#8217;ll handle it for you thank you very much</em>. But the reality of syncing data is that it&#8217;s tough, and network availability is not always reliable or fast (especially on mobile). You have to write a lot of nonobvious code to handle updates and problems. Building for iCloud once means you limit yourself to only Apple devices; you can never get that data synced to an Android device or make it accessible via the web (short of later building your own system, updating your apps, and making them push iCloud-stored data to your own server). And iCloud has not exactly gained notoriety for its stability or its <a href="http://www.macstories.net/stories/iclouds-first-six-months-the-developers-weigh-in/">friendliness to developers</a>. The only real debugging tools you have are a web app that lets you see what&#8217;s in an iCloud folder and some rather verbose logging flags you can turn on that tell you some stuff about the syncing process. In other words, it&#8217;s not easy. I&#8217;ve tried to integrate iCloud no less than 6 times in various app prototypes, and every single time I&#8217;ve ran from it.</p>

<p><em>Note: I don&#8217;t mean this to denigrate the work of the iCloud team. What they&#8217;re doing is immensely difficult, and I have great respect for that team for trying to solve a problem of this magnitude in a way amenable to every app. But sympathy is not something you can build a business on.</em></p>

<p>Of course, the downside to the DIY solution is that it&#8217;s <strong>really, really hard</strong>. On top of building the app itself, you now have to build a database for data and the other half of a sync engine. You have to worry about security of users&#8217; data. You have to back all this stuff up somewhere. You need a fallback strategy for when your main server has a problem. You have to know how to scale to lots of users and know what the hell terms like <a href="http://en.wikipedia.org/wiki/Partition_(database)">parititoning</a> and <a href="http://en.wikipedia.org/wiki/Shard_(database_architecture)">sharding</a> mean. Oh, and you have to know how to keep a server running and accessible. But the upsides are really valuable. You have limitless flexibility and control in what you use and how you use it. If something is running slow, you can fix it. You can compress your data into pushing everything important in a single network request in the most optimized form imaginable (which is a huge win for how fast your app syncs). You can manage your costs in a much more straightforward way. If you want to add some more advanced network features, like real-time sync, just do it. You own the whole stack, you can build what you want. You just have to build it.</p>

<p>Both extremes have upsides and downsides. And any system is a balance of tradeoffs. There is a middle ground in the form of services like <a href="http://parse.com/">Parse</a> which handle a backend for you. You can push whatever data you want into their system and get it back later. You can build your own sync engine hooked up to their APIs. As you develop your app, you can update your data models without any effort. Their errors are well defined in documentation and you can handle them appropriately. But you are limited by what they can do (which is admittedly a lot, but not everything). No real-time updates, for example. You are limited in how you can package your data, making it tough to optimize network traffic. And as you grow, you&#8217;re bound by their pricing model, which can get far more expensive than hosting it yourself. And while the possibility is remote, they could disappear or get acquired by someone and shut the product down, leaving you to scramble to build the server stuff yourself in a tiny window of time.</p>

<p>In the end, it&#8217;s all about tradeoffs. If you have the technical chops and the time to build, run, and maintain servers, a self-assembled system will give you the most flexibility, best power, and lowest cost. If you are talented only in building apps, learning how to run a server is absolutely not a bad skill to have, but requires a different engineering mindset that takes time and experience to learn. In the meantime, a system like Parse is your best bet. iCloud, while a beautiful idea, is not production-ready for most apps, will cause endless headaches, and will lock you in to forever developing apps only for Apple products.</p>

<p>But whatever you decide, you need sync in your app. And you need to think about it at the beginning, not at the end.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-11-27T22:04:00-08:00" pubdate data-updated="true">Nov 27<span>th</span>, 2012</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/hopes-for-the-ipad-mini/">Hopes for the iPad Mini</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/hopes-for-the-ipad-mini/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>When I got my first-gen iPad, I stopped using it regularly within a few weeks. It was just too heavy, too big, too thick to really consider using as a replacement for a laptop, or to bring with me places. It&#8217;s too heavy to hold for a sustained period of time. In many ways, the iPad mini is what I really wanted the iPad itself to be, and how I want to use it. Smaller, thinner, and lighter than a laptop. Easy to carry everywhere. More immersive than an iPhone. It&#8217;s much better suited for the couch, bed, hammock, bus, or car. It&#8217;s the size of a book but the weight of a pad of paper.</p>

<p>Today, most iPhone apps are meant to be used in portrait (if not exclusively, then at least primarily). The OS goes out of its way to enforce this; the home screen is in portrait, and locking the orientation restricts you to portrait (even in cases like video and the camera where it makes no sense). On iPad, you can orient the device any way you like, including for the homescreen and orientation lock, but I&#8217;d wager that most people use it primarily in landscape. The narrower edge design of the iPad mini seems to encourage more portrait use, which means there may be an awkward early adopter period of apps that aren&#8217;t as useful on the mini because they are optimized for landscape over portrait. One possible benefit of the smaller size and the portrait emphasis is that maybe, just maybe, scaled-up iPhone apps won&#8217;t look as comically bad on the mini (and don&#8217;t scoff, as there are hundreds of thousands of apps that aren&#8217;t optimized for iPad). Who knows.</p>

<p>Last week I said I <a href="http://informalprotocol.com/2012/10/ipad-mini/">wasn&#8217;t going to buy one</a> until I tried it out and felt the size. Oops. I guess we&#8217;ll see how it feels when I get mine on Friday.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-31T17:52:00-07:00" pubdate data-updated="true">Oct 31<span>st</span>, 2012</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/managing-dependencies-with-cocoapods/">Managing Dependencies With CocoaPods</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/managing-dependencies-with-cocoapods/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>Dealing with dependencies in Objective-C has always been a tedious process. You typically do some <code>git submodule</code> stuff, import their Xcode project into yours, add a dependency, add a linker target, set some compiler flags, etc., or you include the project&#8217;s <code>.h</code> and <code>.m</code> files manually. Then you end up running into problems because the header paths are wrong, or you forgot to add some linker flags that include categories, or some other problem. If that project requires ARC or iOS 6, you have to figure that out and set it up to be consistent with your project. Then, when you need to upgrade the library, you need to make sure all these steps still work, and hope nothing new got added that might break. It&#8217;s a very error prone process. Now, being a stubborn developer that&#8217;s always done it this way, I&#8217;ve been wary of any tools to automate this process, as I usually think I can handle it myself, and I&#8217;m usually wrong. Other languages have had package managers to solve this problem, so why not Objective-C?</p>

<p><a href="http://cocoapods.org/">CocoaPods</a> tries to solve this problem by automating the process of fetching dependencies (and recursively fetching their subdependencies), adding them to an Xcode project, managing paths for everything, adding any extra compiler or linker flags, copying in any resources (images, nibs, sounds, or whatever else), and building it into your project. The end result is a very simple process of defining your dependencies in a file (called a <code>Podfile</code>), running a command line process, and then just building your app and referencing those dependencies. If you need to update dependencies or add new ones, just add them to the <code>Podfile</code> and run the command line process again. It&#8217;s very simple, and a far cry from managing all this stuff yourself. And, as of this writing, there are over 600 projects you can include in your app.</p>

<p>Under the hood, CocoaPods is creating an Xcode project which builds a static library, <code>libPods.a</code>, consisting of all your dependencies. It adds this project to an Xcode workspace and makes your project dependent on <code>libPods.a</code> using an Xcode config file. It then rewrites your Xcode project to link <code>libPods.a</code> and copy resources, and set some paths to variables included from the config file. It even detects if your project uses ARC, and sets flags appropriately. The result is that the majority of changes to your project are minimal, but instead reference a project that is under the control of CocoaPods, and as such it can be changed while rarely affecting your project. It&#8217;s a well thought out system.</p>

<p>To get started, you need to install the CocoaPods gem with a <code>gem install cocoapods</code> at the command line. Then, in the root of your Xcode project, add a <code>Podfile</code> that lists your dependencies and your deployment target. For this example, we&#8217;ll target an iOS 6 app that depends on the <code>AFNetworking</code> and <code>FormatterKit</code> projects. You can search for more projects on <a href="http://cocoapods.org/">CocoaPods.org</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;6.0&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;AFNetworking&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="s1">&#39;FormatterKit&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.1&#39;</span>
</span></code></pre></div></figure>


<p><em>Note: CocoaPods uses <a href="http://semver.org">semantic versioning</a> to determine how to handle version numbers. The version string can either be a specific version, or can include an operator that tells CocoaPods to pick a version for you. The <code>~&gt;</code> operator says, for version X.Y.Z, &#8220;use any version matching X.Y.*&#8221;, but you can also use <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, or <code>&lt;=</code> which do what you expect.</em></p>

<p>Once you have this in place, run <code>pod install</code>. This command will:</p>

<ul>
<li>download the <code>podspec</code> (a manifest listing instructions on the project&#8217;s requirements and build instructions) for each dependency you list, and those for any subdependencies</li>
<li>check the requirements for each <code>podspec</code> to ensure that your project meets the minimum requirements (so a Mac project won&#8217;t be added to an iOS app, or a project that only works on iOS 6 will not work on iOS 5)</li>
<li>set up a new <code>xcodeproj</code> with a static library target for all the source files in the dependency tree</li>
<li>set up an <code>xcworkspace</code> if you don&#8217;t already have one</li>
<li>add the Pods <code>xcodeproj</code> to this new <code>xcworkspace</code></li>
<li>create an <code>xcconfig</code>file that includes header paths for all dependencies</li>
<li>change your <code>xcodeproj</code> to use the <code>xcconfig</code> file for header and linker paths</li>
<li>add the <code>libPods.a</code> library to the Link Bundle With Libraries phase of your &#8216;xcodeproj&#8217;</li>
<li>add a new Copy Pods Resources script phase to copy any resources to your bundle</li>
</ul>


<p>Once this is in place, you can build and run. Unless there are any problems with the dependencies, Xcode will compile all the dependencies and link them into your app. It&#8217;s very important that you use the <code>xcworkspace</code>, so Xcode knows how to build the Pods project correctly. You can then <code>#include &lt;AFNetworking/AFNetworking.h&gt;</code> to begin using the code. That&#8217;s it!</p>

<p>I&#8217;ve started using CocoaPods on a project and have been enjoying using it over managing dependencies myself. I haven&#8217;t seen any reason to believe this would be more problematic than doing it all myself, but there are plenty of benefits. Dependencies can be kept up to date much more easily, and their inclusion process is much more strictly defined (and automated). For many projects, it&#8217;s far more likely to get the setup process right than I am, and it&#8217;s faster to get set up. I recommend checking it out for your projects.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-29T23:13:00-07:00" pubdate data-updated="true">Oct 29<span>th</span>, 2012</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/objective-c/'>Objective-C</a>


</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/letterpress/">Letterpress Review</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/letterpress/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>About a week ago, Loren Brichter <a href="http://www.atebits.com/news/atebits-2-0/">teased</a> a new game that was about to be released. Wednesday, it went live as <a href="http://www.atebits.com/letterpress/">Letterpress</a>, an unique and easy-to-learn multiplayer word game. It uses Game Center&#8217;s turn-based system (similar to what plus+ and OpenFeint had before it) to save and push game state between players, whether the other person has the game open or not. It has a very clean, simple visual style not unlike Microsoft&#8217;s Metro with a twist of aesthetic of the old Mac&#8217;s System 7 - simple colors, squares, circles, lines, and clean typography. It looks and works great.</p>

<p>The game itself is very well designed. You make words from any of the 25 tiles on the board. Playing a word turns all the tiles to your color. Surrounding a tile you own with one on each of the four sides &#8220;shields&#8221; it such that it can&#8217;t be taken until one of the surrounding tiles is taken. Any letter can be played in any turn. Whoever has the most tiles when they&#8217;re all captured is the winner.</p>

<p>My favorite thing about this game is its free-to-play nature. It removes the barrier entirely to invite someone new to play. If you are only interested in playing with a significant other, you don&#8217;t have to wrestle with the idea that this game might not be for you; just try it. If you like it, and want to expand beyond two games or choose a different theme, it&#8217;s a 99 cent upgrade. This is freemium done absolutely right, and shows how you can use the tool without seeming like a scumbag trying to nickel-and-dime people out of their cash.</p>

<p>For a 1.0, it&#8217;s very polished, but there are a few quirks. I&#8217;ve got a LOT of games running at the same time, some with very close friends, some with random Internet people. I&#8217;d love to be able to &#8220;pin&#8221; certain people to the top of the list, so that when they&#8217;ve made their move, they would immediately move to the top, and I could play their games faster. There also needs to be a better way to setup a rematch; Game Center&#8217;s UI is not forgiving in this matter. The dependence on Game Center has been Letterpress&#8217; most crippling restriction so far, with a number of server outages in the two days its been out. And the board could use a better algorithm for laying out tiles in the grid, because a game with six Z&#8217;s and one vowel is not very fun. But these are minor nits that get solved with time or a rematch.</p>

<p>I&#8217;ve been hooked on Letterpress since it came out, and you should be too. Get it <a href="https://itunes.apple.com/us/app/letterpress-word-game/id526619424?mt=8">free</a> from the App Store.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-25T09:00:00-07:00" pubdate data-updated="true">Oct 25<span>th</span>, 2012</time></div>
	<div class="tags">

</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/ipad-mini/">iPad Mini</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/ipad-mini/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>The iPad mini is basically a small iPad 2. It has an upgraded camera, improved wireless, and a 15% higher density screen. But the screen is only as good as the original iPhone, and it&#8217;s running the same 19-month-old A5 processor (which is no slouch, but is hardly state-of-the-art). This is the same chip used in the latest iPod touch, but has more pixels to drive. I wouldn&#8217;t be surprised if, even with the non-Retina display, this device feels a little sluggish compared to an iPhone 5, or even a 4S.</p>

<p>The mini certainly fills a need; the current iPad is too large to be truly portable, but is smaller than every notebook you can buy. The iPad has definitely been the dominant player in the 10-inch tablet market, but the 7-inch tablet market has been growing. The leading competition in the 7-inch tablet space is the Nexus 7 (which is a very capable tablet), which will probably end up in a respectable #2 place by the end of 2012 in the area of several million units. It makes sense that Apple would want to try to hold on to the top seat.</p>

<p>The $329 base price point, however, is a strange and awkward place to start the lineup. Not only is this $130 more expensive than the Nexus 7, it misses the psychological barrier of getting under $300. This propagates through the upgraded models as well, and causing a weird staggering effect. In fact, adding in the iPad 2&#8217;s and the iPad 4&#8217;s price points, we get this pricing chart of 13 prices spread out over 14 models:</p>

<table>
    <tr>
        <th>Price</th>
        <th>Model</th>
        <th>Storage</th>
        <th>Cell Data</th>
    </tr>
    <tr>
        <td>$329</td>
        <td>iPad mini</td>
        <td>16 GB</td>
        <td>None</td>
    </tr>
    <tr>
        <td>$399</td>
        <td>iPad 2</td>
        <td>16 GB</td>
        <td>None</td>
    </tr>
    <tr>
        <td>$429</td>
        <td>iPad mini</td>
        <td>32 GB</td>
        <td>None</td>
    </tr>
    <tr>
        <td>$459</td>
        <td>iPad mini</td>
        <td>16 GB</td>
        <td>4G</td>
    </tr>
    <tr>
        <td>$499</td>
        <td>iPad 4</td>
        <td>16 GB</td>
        <td>None</td>
    </tr>
    <tr>
        <td>$529</td>
        <td>iPad mini</td>
        <td>64 GB</td>
        <td>None</td>
    </tr>
    <tr>
        <td>$529</td>
        <td>iPad 2</td>
        <td>16 GB</td>
        <td>3G</td>
    </tr>
    <tr>
        <td>$559</td>
        <td>iPad mini</td>
        <td>32 GB</td>
        <td>4G</td>
    </tr>
    <tr>
        <td>$599</td>
        <td>iPad 4</td>
        <td>32 GB</td>
        <td>None</td>
    </tr>
    <tr>
        <td>$629</td>
        <td>iPad 4</td>
        <td>16 GB</td>
        <td>4G</td>
    </tr>
    <tr>
        <td>$659</td>
        <td>iPad mini</td>
        <td>64 GB</td>
        <td>4G</td>
    </tr>
    <tr>
        <td>$699</td>
        <td>iPad 4</td>
        <td>64 GB</td>
        <td>None</td>
    </tr>
    <tr>
        <td>$729</td>
        <td>iPad 4</td>
        <td>32 GB</td>
        <td>4G</td>
    </tr>
    <tr>
        <td>$829</td>
        <td>iPad 4</td>
        <td>64 GB</td>
        <td>4G</td>
    </tr>
</table>


<p>While there are some overarching rules (e.g. if you want more space, or you want 4G data, you&#8217;re paying more), there&#8217;s no consistency when you move up or down by one price point. If you were thinking of spending an extra $30, you suddenly have a lot more variables to consider. Perhaps Apple did this to maybe get a few extra dollars out of the customer, but my hunch is that it&#8217;ll have the opposite effect. Say you walk into the Apple Store to buy a base model iPad 4 at $499. If you wanted to spend a little more, you could get a slower iPad with 3G, or a smaller iPad with a lot of space you don&#8217;t know if you need. On the other hand you could get the iPad mini with the exact same storage, a smaller screen, and 4G data, all while walking out of the store with $40 in your pocket. It&#8217;s not a hard conclusion to draw.</p>

<p>In the end, Apple will sell a zillion of them, and they&#8217;ll work fine. In a year, Apple will announce the next iPad mini, which will probably include a Retina display, a more modern chipset, and probably a price drop to $299 as well. It just feels like they&#8217;re holding some of that stuff back from this version, and it doesn&#8217;t seem like price is the motivating factor.</p>

<p>Personally I&#8217;m waiting to get one until I actually hold it and try to fit it into my large-but-not-iPad-large jacket pocket. The true test of a device like the iPad mini is its portability. The Nexus 7 fits my jacket, but barely. Hopefully the iPad mini fits as well.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-24T01:20:00-07:00" pubdate data-updated="true">Oct 24<span>th</span>, 2012</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/technology/'>Technology</a>


</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/apparchy/">Apparchy</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/apparchy/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>When Twitter&#8217;s mobile apps were still Tweetie, they had a screen which let you change the API root. So if your API method is named <code>1/statuses/update.json</code>, you add that to the end of the API root, giving you a URL that looks like <code>https://api.twitter.com/1/statuses/update.json</code>. If you change it to <code>http://foo.com/bar/</code>, then the API&#8217;s URL becomes <code>http://foo.com/bar/1/statuses/update.json</code>. You could use this if you were in a network where Twitter&#8217;s API was blocked, but you had a proxy server which wasn&#8217;t, you could still connect. Soon after, <a href="http://en.blog.wordpress.com/2009/12/12/twitter-api/">WordPress</a> and <a href="http://staff.tumblr.com/post/287703110/api">Tumblr</a> built versions of their API which supported the Twitter API, so you could use those services from within Tweetie. Then Twitter bought Tweetie and moved everyone to OAuth.</p>

<p>A couple weeks ago, I noticed that this was still present in Twitter&#8217;s official apps. I&#8217;ve been a big fan of <a href="http://alpha.app.net/stevestreza">App.net</a> since it came out, whose API is different than Twitter&#8217;s, but not terribly so. I thought it might be interesting to try to build an &#8220;API translator&#8221; which pulled the App.net streams and posts into the Twitter app. The team behind App.net had a hackathon this weekend, and I had my project.</p>

<p>Today I shipped the first alpha of <a href="https://apparchy.net/">Apparchy</a>, which turns Twitter&#8217;s official iOS apps into App.net clients. You sign up for a free account on apparchy.net, add your app.net account, and then log into the Twitter app with your Apparchy username and password. Then, the Twitter app will start loading data from app.net through the Apparchy API. You can view your stream, your mentions, your profile, your followers, and your friends, as well as post, reply, star, and repost. It&#8217;s not entirely complete, and some parts of the app will have no data or return nothing, but the core experience is pretty good.</p>

<p>Apparchy implements Twitter&#8217;s OAuth security, and sends all data over HTTPS, so the process is as secure as any other call through Twitter. Apparchy doesn&#8217;t touch the Twitter API at all, and so it&#8217;s not bound by any of Twitter&#8217;s terms of service, should they be applicable. The only way this will get shut down is if Twitter removes the ability to change the API root in an update to their app (which doesn&#8217;t sound likely, from what I&#8217;ve heard).</p>

<p>Apparchy is what is possible when you have open APIs like App.net&#8217;s and standards for how to handle server communication. It took a lot of research and trial/error to get it to work, but it works very well. I had a blast building this, and hope that it can be used for a long time. If you have an App.net account, give it a try for free at <a href="https://apparchy.net">Apparchy.net</a>.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-21T17:48:00-07:00" pubdate data-updated="true">Oct 21<span>st</span>, 2012</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/projects/'>Projects</a>


</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/wii-u-chat-how-not-to-design-features/">Wii U Chat: How Not to Design Features</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/wii-u-chat-how-not-to-design-features/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>The Wii U includes an unusual controller, the GamePad, that looks and acts like a small tablet with physical controls (or a large PlayStation Vita). Besides the conventional array of game controls like two analog sticks and a bunch of hardware buttons, the controller includes a microphone, speakers, a headphone port, a screen, and a front-facing camera. There is also a more conventional, Xbox-like controller called the Pro controller which has none of those inputs.</p>

<p>Kyle Orland of Ars Technica wrote <a href="http://arstechnica.com/gaming/2012/10/nintendo-reveals-baffling-solution-for-wii-us-in-game-chat/">this piece</a> on Nintendo&#8217;s &#8220;solution&#8221; for in-game voice chat in their upcoming Wii U console. Nintendo decided to add in-game chat to the Wii U, which is something you&#8217;ve been able to do for almost a decade on other gaming platforms. But here&#8217;s the catch: those ports on the GamePad won&#8217;t work with it. You have to buy a standalone headset and plug it in to your GamePad to get it to work. Even stranger, the Pro controller doesn&#8217;t have the port you need to even use it. Furthermore, unlike Xbox and PlayStation, this support is not baked into the system as a whole, but will be opt-in for whatever games choose to spend the time, money, and energy to support it.</p>

<p>When you design a feature into anything, some percentage of people will use it, some won&#8217;t. The more barriers you place between the person and what they try to do, the more of them will give up. Design involves removing the barriers between the person and the solution to their problem. I reach for my iPhone over my Vita because my iPhone is usually closer. I reach for my Vita over my Xbox because the Vita is self-contained and doesn&#8217;t make me change my TV&#8217;s inputs. I reach for my Xbox controller over my Mac laptop with Windows on it because my Xbox doesn&#8217;t make me log out of everything I&#8217;m doing and restart. These barriers may be small and subtle, but people choose the path of least resistance to solve their problems, and barriers act as resistance.</p>

<blockquote><p>Frankly, this kind of half-assed solution for a voice chat feature - voice chat, mind you, being an integral part of mutliplayer gaming for many - just increases our concern that Nintendo is still struggling to get online functionality right this time around.</p></blockquote>

<p>Inexplicably, Nintendo chose to add all kinds of barriers to this one solution - how to talk to your friends while playing games. I can&#8217;t tell if this was done intentionally or as just a gaffe in design. Either way, what does it say of the rest of the Wii U? And what other features are going to suffer as a result of focusing on something they don&#8217;t care so much about?</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-19T00:50:00-07:00" pubdate data-updated="true">Oct 19<span>th</span>, 2012</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/design/'>Design</a>


</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/apple-buying-color-tragically-makes-sense/">Apple Buying Color Tragically Makes Sense</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/apple-buying-color-tragically-makes-sense/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>This afternoon, Matthew Panzarino and Ken Yeung of The Next Web posted about a <a href="http://thenextweb.com/insider/2012/10/18/color-gets-acquired-by-apple-rumor/">potential acquisition</a> of the poster childs of startup excess, Color. A gut reaction of stunned disbelief is not unreasonable here, after a string of flopped products and tales of the CEO splitting for Maui. But after the shock comes intrigue. The Next Web rarely posts rumors of acquisitions unless they&#8217;ve triple checked everything. So if we assume it&#8217;s true, the question remains, why?</p>

<p>$41 million means you can make extremely compelling offers to the best engineers. Daniel Jalkut found that some of that cash went to paying for <a href="http://bitsplitting.org/2012/10/18/color-inside-the-lines/">a number of tech patents</a> as well. These patents relate to their technologies in grouping people together by their location and sharing content between them. These engineers spent the last year and a half tuning these algorithms, even if they weren&#8217;t used by people very much. Part of the reason Color was such a flop was because everyone had to use it for you to want to use it. That&#8217;s not an easy sell, especially in an environment like iOS where a person has to actively be using your app in order for it to provide value to others.</p>

<p>But let&#8217;s imagine a world where this stuff is built into the heart of iOS. There may not have been a lot of people who used Color, but there are a lot of people who use iOS devices, and suddenly Apple has solved the chicken-and-egg problem of availability. The solution Color offered can become much more useful if offered by Apple, who can break any of the rules they impose on 3rdparty developers. If you go to a barbeque or a concert, and everyone&#8217;s taking pictures and video, your iPhone will know that all these photos relate to the same event, and can group things together. It can tie in data from your address book to determine who the people around you are, and if you know them. You can create Photo Streams of events with everyone&#8217;s (or just your friends&#8217;) photos. Maybe this would integrate with the calendar, or even Facebook, to automatically associate photos and videos with events. (It&#8217;s worth noting that Google recently introduced <a href="http://www.wired.com/gadgetlab/2011/07/everything-you-need-to-know-about-google-plus-and-photos/">a very similar feature</a> to Google+ and Android.) And who knows, maybe in some weird way, this could become an aid to Apple&#8217;s troubled Maps, providing some kind of functionality like Street View or Microsoft&#8217;s <a href="http://photosynth.net">Photosynth</a>.</p>

<p>So maybe it makes sense that Apple might acquire this company for their expertise. Sure, they could do it all themselves, but Apple tends to buy companies with expertise in areas Apple wants to do better in. And buying the company outright gets you the engineers and saves you from the patent lawsuits. But if Color managed to &#8220;succeed&#8221;, it&#8217;s for many of the wrong reasons. Making it via a ton of money, a few unused apps, a pile of patents built on stale prior art, and a pool of developers to focus on a niche set of knowledge is a role of research departments within companies like Apple. If this were a model for the industry, we&#8217;d be looking at apps that have no real utility to people built by companies that focus on compartmentalizing knowledge and locking it off for others to use, all in the hopes that a cell phone maker has a bunch of cash to throw at you for the next new feature. That&#8217;s not a bright future. So while this may make sense for Apple, Color, and for iOS users, it sets an uncomfortable precedent. Hopefully it won&#8217;t change the idea of the overfunded startup into a model to be emulated.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-17T22:42:00-07:00" pubdate data-updated="true">Oct 17<span>th</span>, 2012</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/opinion/'>Opinion</a>


</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/declaring-blocks-in-objective-c/">Declaring Blocks in Objective-C</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/declaring-blocks-in-objective-c/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>Blocks in Objective-C are super useful for making your object-oriented code a bit more functional. But as blocks are an extension to the C language, they have to play by the rules of C, so the syntax is a little obscure, and the documentation can be a little hard to find. So here&#8217;s a guide on how to declare blocks so you can use them in various scenarios.</p>

<p>The standard way of declaring a block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='objective-c'><span class='line'><span class="n">returnType</span> <span class="p">(</span><span class="o">^</span><span class="n">variableName</span><span class="p">)(</span><span class="n">parameters</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">handler</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">thing1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">thing2</span><span class="p">);</span> <span class="c1">// call with handler(@&quot;foo&quot;, 42);</span>
</span><span class='line'><span class="kt">int</span>  <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">);</span> <span class="c1">// call with: int value = block(@&quot;foo&quot;);</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="n">doSomething</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// call with: BOOL response = doSomething();</span>
</span></code></pre></div></figure>


<p>The order here is return type, then the block name, then the parameters, or void if you have none. Counterintuitively, the variable name is NOT the last thing on the list. It comes after the <code>^</code> which accompanies blocks. Parentheses are significant, so don&#8217;t forget them. You can also add or remove whitespace between anything. When declaring a block like this, you can supply names for the parameters, or omit them. They&#8217;re a good thing to add, though; if you use Xcode to autocomplete one of these, it will include the parameter names in the autocompleted method call, and omit them (leading to compile errors you have to manually fix) if you don&#8217;t.</p>

<p>If you find yourself using a block type in more than one place, you can make it a typedef. Xcode even has a handy autocomplete for this, by typing <code>typedefBlock</code> and autocompleting, you&#8217;ll get a template that is way easier to use than remembering all this stuff. Then you can reference it like any other typedef. Again, parentheses are significant, whitespace is not.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='objective-c'><span class='line'><span class="k">typedef</span> <span class="n">returnType</span> <span class="p">(</span><span class="o">^</span><span class="n">typedefName</span><span class="p">)(</span><span class="n">parameters</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyBlockType</span><span class="p">)</span>      <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">thing1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">thing2</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span>  <span class="p">(</span><span class="o">^</span><span class="n">MyOtherBlockType</span><span class="p">)</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="n">MyThirdBlockType</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span></code></pre></div></figure>


<p><strong>Properties:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">handler</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">param1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">param2</span><span class="p">);</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="n">doSomething</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">MyBlockType</span> <span class="n">aBlock</span><span class="p">;</span>
</span></code></pre></div></figure>


<p><strong>Instance Variables:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">MyBlockThing</span> : <span class="nc">NSObject</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">handler</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">thing1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">thing2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span>  <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="n">doSomething</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">MyBlockType</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></div></figure>


<p><strong>Stack Variables:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">handler</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">thing1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">thing2</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">thing1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">thing2</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="kt">int</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">thing1</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="n">doSomething</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="c1">// note: the (void) is optional here</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">MyBlockType</span> <span class="n">aBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">param1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">param2</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// do something;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">handler</span><span class="p">(</span><span class="s">@&quot;foo&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">block</span><span class="p">(</span><span class="s">@&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">response</span> <span class="o">=</span> <span class="n">doSomething</span><span class="p">();</span>
</span><span class='line'>  <span class="n">aBlock</span><span class="p">(</span><span class="s">@&quot;foo&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></div></figure>


<p><strong>C Function Parameters:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='objective-c'><span class='line'><span class="kt">void</span> <span class="n">doSomethingWithBlock1</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)(</span><span class="kt">char</span> <span class="o">*</span><span class="n">thing1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">thing2</span><span class="p">));</span>
</span><span class='line'><span class="kt">void</span> <span class="n">doSomethingWithBlock2</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)(</span><span class="kt">char</span> <span class="o">*</span><span class="p">));</span>
</span><span class='line'><span class="kt">void</span> <span class="n">doSomethingWithBlock3</span><span class="p">(</span><span class="n">bool</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)(</span><span class="kt">void</span><span class="p">));</span>
</span><span class='line'><span class="kt">void</span> <span class="n">doSomethingWithBlock4</span><span class="p">(</span><span class="n">MyBlockType</span> <span class="n">block</span><span class="p">);</span>
</span></code></pre></div></figure>


<p><strong>Objective-C Method Parameters:</strong></p>

<p>Note: When writing method signatures that include blocks, you do NOT include the name after the <code>^</code> declaration. Instead, you include it like any other Objective-C method parameter name, just outside of the type&#8217;s parentheses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomethingWithBlock1:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">thing1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">thing2</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomethingWithBlock2:</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomethingWithBlock3:</span><span class="p">(</span><span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomethingWithBlock4:</span><span class="p">(</span><span class="n">MyBlockType</span><span class="p">)</span><span class="nv">block</span><span class="p">;</span>
</span></code></pre></div></figure>


<p>So there you have it. Those are the most common cases for declaring Objective-C blocks. Go forth and do evil with them. For more information on blocks, see Apple&#8217;s <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html">Blocks Programming Guide</a> and Apple&#8217;s <a href="http://developer.apple.com/library/ios/#featuredarticles/Short_Practical_Guide_Blocks/_index.html">Short Practical Guide to Blocks</a>.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-16T22:06:00-07:00" pubdate data-updated="true">Oct 16<span>th</span>, 2012</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/objective-c/'>Objective-C</a>


</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/async-dot-js/">async.js</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/async-dot-js/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>One of JavaScript&#8217;s greatest strengths is its extremely powerful <code>function</code> syntax. You can use it to encapsulate portions of code, large or small, and pass these invocations around as any other object. node.js takes this and builds an entire API on top of it. This power is great, but unchecked, it can lead to convoluted and complex code, the &#8220;callback spaghetti&#8221; problem. Here&#8217;s a sample JavaScript function which chains together some asynchronous APIs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doSomething</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">foo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">// handle the error</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">doAnotherThing</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>                  <span class="c1">// handle the error</span>
</span><span class='line'>              <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                  <span class="nx">doAThirdThing</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">baz</span><span class="p">){</span>
</span><span class='line'>                      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>                          <span class="c1">// handle the error</span>
</span><span class='line'>                      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                          <span class="c1">// finish</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                  <span class="p">});</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></div></figure>


<p>async.js tries to fix this by providing APIs for structuring these steps in a more logical fashion while keeping the asynchronous design pattern that works so well. It offers a number of control flow management tools for running asynchronous operations serially, in parallel, or in a &#8220;waterfall&#8221; (where if any step has an error, the operation doesn&#8217;t continue). It also works with arrays, and can iterate over items, run map/reduce/filter operations, and sort arrays. It does all of this asynchronously, and returns the data in a structured manner. So the above code looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
</span><span class='line'>      <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">doSomething</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">foo</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">callback</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="kd">function</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">doAnotherThing</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">bar</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">callback</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="kd">function</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">doAThirdThing</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">baz</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">callback</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">baz</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">baz</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">// one of the steps had an error and failed early</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="c1">// finish</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></div></figure>


<p>While the resulting code may be a little longer in terms of lines, it has a much more clearly defined structure, and the error cases are handled in one place, not three. This makes the code much more readable and maintainable. I love this pattern so much, I&#8217;ve begun porting it to Objective-C as <a href="http://github.com/amazingsyco/IIIAsync">IIIAsync</a>. If you&#8217;re a JavaScript developer, and you use <code>function</code> for its more advanced use cases, you want to use async.js.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-16T01:03:00-07:00" pubdate data-updated="true">Oct 16<span>th</span>, 2012</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/javascript/'>JavaScript</a>


</div>
	
</div>
</article>


    <article class="post">
	<h1 class="title">
		<a href="/2012/10/starting-over/">Starting Over</a>
		<div class="pocket-button" style="display: inline-block; float: right;">
			<a href="https://getpocket.com/save" data-pocket-label="pocket" data-pocket-align="right" data-pocket-count="horizontal" data-save-url="http://informalprotocol.com/2012/10/starting-over/" class="pocket-btn" data-lang="en"></a>
			<script type="text/javascript">!function(d,i){if(!d.getElementById(i)){var j=d.createElement("script");j.id=i;j.src="https://widgets.getpocket.com/v1/j/btn.js?v=1";var w=d.getElementById(i);d.body.appendChild(j);}}(document,"pocket-btn-js");</script>
		</div>
	</h1>
	<a href="http://informalprotocol.com/" rel="author" style="display: none">by Steve Streza</a>
	<div class="entry-content">
		<p>Starting over is often a difficult, but necessary, way to revitalize yourself. When I was in middle school, I wrote a column in my school&#8217;s student newspaper talking about video games. I&#8217;ve been writing since before I was coding, but lately the coding has superceded the importance of writing in my life. I haven&#8217;t been content with this for a long time, and have been trying a variety of strategies to make myself write more. My personal blog, <a href="http://stevestreza.com/">SteveStreza.com</a>, has acted somewhat as the outlet for this, and it has succeeded in getting me to write long-form articles, but it has largely failed at producing shorter and more frequent content. But the opposite side of that is a lack of focus and a burden of further long-form content. I love writing, but the hole in what I have been writing has been bothering me for awhile.</p>

<p>So today, I&#8217;m beginning a new experiment, <a href="http://informalprotocol.com/">Informal Protocol</a>. This new blog is focused around the topics of development, design, tech, and culture. The goal is to keep most articles at 5 paragraphs or fewer, and to have at least one new post a day. But as the name implies, this is an informal protocol, and won&#8217;t always be followed. Quantity and quality will have peaks and valleys, and the focus may skew one way or another. It&#8217;s wholly possible the direction may drift and this becomes something else entirely. But hey, sometimes you just have to give it a shot.</p>

<p>Informal Protocol is an experiment. Like all experiments, it may fail. But sometimes you have to just jump face first into a new adventure and start over. If you would like to join me on this adventure, you can follow new posts via <a href="http://informalprotocol.com/atom.xml">RSS</a>, <a href="http://alpha.app.net/InformalProtocol">App.net</a>, or <a href="http://twitter.com/InformalProto">Twitter</a>.</p>

		
		
	</div>


<div class="meta">
	<div class="date">








  


<time datetime="2012-10-15T23:58:00-07:00" pubdate data-updated="true">Oct 15<span>th</span>, 2012</time></div>
	<div class="tags">


	<a class='category' href='/blog/categories/meta/'>Meta</a>


</div>
	
</div>
</article>

<nav id="pagenavi">
    
    
    <div class="center"><a href="/blog/archives">Blog Archives</a></div>
</nav></div>
	<footer id="footer" class="inner">Copyright &copy; 2014

    Steve Streza


<!-- Vinyl Scratch is best pony. --></footer>
	<script src="/javascripts/slash.js"></script>
<script src="/javascripts/jquery.fancybox.pack.js"></script>
<script type="text/javascript">
(function($){
	$('.fancybox').fancybox();
})(jQuery);
</script> <!-- Delete or comment this line to disable Fancybox -->





<script type="text/javascript">
  var _gauges = _gauges || [];
  (function() {
    var t   = document.createElement('script');
    t.type  = 'text/javascript';
    t.async = true;
    t.id    = 'gauges-tracker';
    t.setAttribute('data-site-id', '507d1b14f5a1f576dc00001d');
    t.src = '//secure.gaug.es/track.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(t, s);
  })();
</script>
</body>
</html>
