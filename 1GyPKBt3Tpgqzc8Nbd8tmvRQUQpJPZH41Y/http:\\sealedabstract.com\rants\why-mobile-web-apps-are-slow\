http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/
HTTP/1.0 200 OK
X-Powered-By: PHP/5.4.4-14+deb7u12
X-Pingback: http://sealedabstract.com/xmlrpc.php
Content-Type: text/html; charset=UTF-8
Link: <http://wp.me/p3wh58-rD>; rel=shortlink
Connection: close
Date: Fri, 11 Jul 2014 02:01:45 GMT
Server: lighttpd/1.4.31

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html
xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><link
rel='stylesheet' href='http://sealedabstract.com/wp-content/plugins/wp-minify/min/?f=wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css,wp-content/plugins/wp-to-twitter/css/twitter-feed.css,wp-content/plugins/jetpack/modules/widgets/widgets.css&amp;m=1400665139' type='text/css' media='screen' /> <script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/wp-minify/min/?f=wp-content/themes/inki_v.2.1/js/jquery-1.3.2.min.js,wp-content/themes/inki_v.2.1/js/global.js,wp-content/themes/inki_v.2.1/js/superfish.js,wp-includes/js/jquery/jquery.js,wp-includes/js/jquery/jquery-migrate.min.js,wp-content/plugins/akismet/_inc/form.js&amp;m=1400665128'></script> <meta
http-equiv="content-type" content="text/html; charset=UTF-8" /><title>Why mobile web apps are slow | Sealed Abstract</title><meta
name="generator" content="WordPress 3.9.1" /><link
rel="shortcut icon" href="favicon.ico" /><link
rel="stylesheet" type="text/css" media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/inki-styles.php?bg=drk&amp;type=plt" /> <!--[if IE]><link
rel="stylesheet" type="text/css"  media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/ie.css" /> <![endif]--> <!--[if IE 6]><style type="text/css" media="screen">div, img { behavior: url(http://sealedabstract.com/wp-content/themes/inki_v.2.1/js/iepngfix.php) } /* Fix PNG alpha-transparency in IE6 */</style><link
rel="stylesheet" type="text/css"  media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/ie6.css" /> <![endif]--><link
rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://sealedabstract.com/feed/" /><link
rel="alternate" type="text/xml" title="RSS .92" href="http://sealedabstract.com/feed/rss/" /><link
rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://sealedabstract.com/feed/atom/" /><link
rel="pingback" href="http://sealedabstract.com/xmlrpc.php" /><link
rel="alternate" type="application/rss+xml" title="Sealed Abstract &raquo; Why mobile web apps are slow Comments Feed" href="http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/feed/" /><link
rel="EditURI" type="application/rsd+xml" title="RSD" href="http://sealedabstract.com/xmlrpc.php?rsd" /><link
rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://sealedabstract.com/wp-includes/wlwmanifest.xml" /><link
rel='prev' title='Hey programmers, we need to talk.' href='http://sealedabstract.com/rants/hey-programmers-we-need-to-talk/' /><link
rel='next' title='Discussion Group Signup' href='http://sealedabstract.com/rssonly/discussion-group-signup/' /><meta
name="generator" content="WordPress 3.9.1" /><link
rel='shortlink' href='http://wp.me/p3wh58-rD' /><style type='text/css'>#wpadminbar .quicklinks li#wp-admin-bar-clickystats {
					height: 28px
				}
				#wpadminbar .quicklinks li#wp-admin-bar-clickystats a {
					height: 28px;
					padding: 0
				}
				#wpadminbar .quicklinks li#wp-admin-bar-clickystats a img {
					padding: 4px 5px;
					height: 20px;
					width: 99px;
				}</style><style type='text/css'>img#wpstats{display:none}</style><meta
name="description" content="I've had an unusual number of interesting conversations spin out of my previous article documenting that mobile web apps are slow. This has sparked some" /><meta
name="keywords" content="iphone,long articles,native apps,web apps,rants" /><link
rel="canonical" href="http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/" /> <style type="text/css" id="syntaxhighlighteranchor"></style></head><body><div><a
name="top"></a></div><div
id="top-wrapper"></div><div
id="page-wrapper"><div
id="header-wrapper"><div
id="header-container"><div
id="header-top"> <a
id="logo" href="http://sealedabstract.com"> <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/theme-logo.png"
style="left:68px;bottom:20px"
alt=""
title=""
/> </a><h3 id="strapline" style="left:280px; bottom:-10px;"> I write software <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/ornament-1.png" alt="" /></h3><div
id="search"><form
id="search-form" action="http://sealedabstract.com/" method="get"><div> <input
class="textfield" name="s" maxlength="35" type="text" id="search-field" value="search" onclick="value=''" /> <input
class="submit" type="submit" value="search" id="search-btn" /></div></form></div></div><div
id="top-nav-container"><ul
id="top-nav" class="topnav root"><li
class=" root"><a
href="http://sealedabstract.com" title="home">home</a></li><li
class="cat-item cat-item-17 root"><a
href="http://sealedabstract.com/category/business/" title="View all posts filed under business">business</a></li><li
class="cat-item cat-item-5 root"><a
href="http://sealedabstract.com/category/code/" title="View all posts filed under Code">Code</a></li><li
class="cat-item cat-item-9 root"><a
href="http://sealedabstract.com/category/iphone/" title="View all posts filed under iphone">iphone</a></li><li
class="cat-item cat-item-8 root"><a
href="http://sealedabstract.com/category/rants/" title="View all posts filed under rants">rants</a></li><li
class="page_item page-item-2048 root"><a
href="http://sealedabstract.com/things-im-working-on/">Things I&#x2019;m working on</a></li></ul> <a
href="http://sealedabstract.com/feed/rss/" id="rss-txt-link">RSS Feed</a> <a
href="http://sealedabstract.com/feed/rss/" id="rss-icon"><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/rss-icon.png" alt="" /></a></div></div></div><div
id="content-wrapper"><div
id="content-container" class="container_14 clearfix"><div
class="grid_10 content-column"  style="width: 1080px"><div
class="grid_10 alpha omega" id="post-title-box"><div
class="grid_3 alpha"> &nbsp;</div><div
class="grid_7 omega"><h1 id="title"><a
href="http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/">Why mobile web apps are slow</a></h1></div></div><div
class="grid_10 alpha omega clearfix" id="post-box" style="width: 1080px"><div
class="grid_3 alpha" id="meta"> <span
id="date">09 July 2013</span> <span
id="post-author"><em>by</em> <a
href="http://sealedabstract.com/author/admin/" title="Posts by Drew Crawford" rel="author">Drew Crawford</a></span> <span
id="cat-header">Published in:</span> <span
id="cat-links"><a
href="http://sealedabstract.com/category/iphone/" title="View all posts in iphone" rel="category tag">iphone</a>, <a
href="http://sealedabstract.com/category/rants/" title="View all posts in rants" rel="category tag">rants</a></span> <span
id="tags-header">Tags:</span><span
id="tags-links"><a
href="http://sealedabstract.com/tag/iphone/" rel="tag">iphone</a>, <a
href="http://sealedabstract.com/tag/long-articles/" rel="tag">long articles</a>, <a
href="http://sealedabstract.com/tag/native-apps/" rel="tag">native apps</a>, <a
href="http://sealedabstract.com/tag/web-apps/" rel="tag">web apps</a></span> <span
id="comments-link"><a
href="http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/#comments" rel="nofollow" class="post-comments">450 comments <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/comments-icon.png" alt="" /></a></span></div><div
class="grid_7 omega" id="post" style="width: 675px"><p>I&#8217;ve had an unusual number of interesting conversations spin out of my previous article documenting that <a
href="http://sealedabstract.com/rants/mobile-web-apps-are-slow/" title="Mobile web apps are slow">mobile web apps are slow</a>.  This has sparked some discussion, both online and IRL.  But sadly, the discussion has not been as&#8230; <em>fact-based</em> as I would like.</p><p>So what I&#8217;m going to do in this post is try to bring some actual <em>evidence</em> to bear on the problem, instead of just doing the shouting match thing.  You&#8217;ll see benchmarks, you&#8217;ll hear from experts, you&#8217;ll even read honest-to-God <em>journal papers</em> on point.  <strong>There are&#8211;and this is not a joke&#8211;over 100 citations in this blog post.</strong> I&#8217;m not going to guarantee that this article will convince you, nor even that absolutely everything in here is totally correct&#8211;it&#8217;s impossible to do in an article this size&#8211;but I can guarantee this is the most complete and comprehensive treatment of the idea that many iOS developers have&#8211;that mobile web apps are slow and will continue to be slow for the forseeable future.</p><p>Now I am going to warn you&#8211;this is a very freaking long article, weighing in at very nearly 10k words.  That is by design.  I have recently come out in favor of articles that are good <a
href="http://sealedabstract.com/rants/hey-programmers-we-need-to-talk/">over articles that are popular</a>. This is my attempt at the former, and my attempt to practice what I have previously preached: that we should incentivize good, evidence-based, interesting discussion and discourage writing witty comments.</p><p>I write in part because this topic has been discussed&#8211;endlessly&#8211;in soundbyte form.  This is not Yet Another Bikeshed Article, so if you are looking for that 30-second buzz of &#8220;no really, web apps suck!&#8221; vs &#8220;No they don&#8217;t!&#8221; this is not the article for you.  (<a
onclick="javascript:pageTracker._trackPageview('/outgoing/daringfireball.net/2013/04/web_apps_native_apps');"  href="http://daringfireball.net/2013/04/web_apps_native_apps">Go</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.wired.com/insights/2012/11/native-apps-vs-mobile-web/');"  href="http://www.wired.com/insights/2012/11/native-apps-vs-mobile-web/">read</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.businessinsider.com/battle-between-html5-vs-native-apps-2013-5');"  href="http://www.businessinsider.com/battle-between-html5-vs-native-apps-2013-5">one</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.businessinsider.com/html5-vs-native-apps-for-mobile-2013-4?op=1');"  href="http://www.businessinsider.com/html5-vs-native-apps-for-mobile-2013-4?op=1">of</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/venturebeat.com/2013/04/17/linkedin-mobile-web-breakup/');"  href="http://venturebeat.com/2013/04/17/linkedin-mobile-web-breakup/">these</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/mashable.com/2012/09/12/web-vs-native-apps/');"  href="http://mashable.com/2012/09/12/web-vs-native-apps/">oh</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/paidcontent.org/2013/04/17/the-definitive-answer-of-web-or-apps-as-the-future-of-mobile-content-it-depends/');"  href="http://paidcontent.org/2013/04/17/the-definitive-answer-of-web-or-apps-as-the-future-of-mobile-content-it-depends/">no</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.forbes.com/sites/ciocentral/2013/01/23/html5-vs-native-mobile-apps-myths-and-misconceptions/');"  href="http://www.forbes.com/sites/ciocentral/2013/01/23/html5-vs-native-mobile-apps-myths-and-misconceptions/">make</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.guardian.co.uk/media-network/media-network-blog/2013/feb/07/html5-native-apple-android-strategy');"  href="http://www.guardian.co.uk/media-network/media-network-blog/2013/feb/07/html5-native-apple-android-strategy">it</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.mobpartner.com/2013/04/16/mobile-web-native-applications/');"  href="http://blog.mobpartner.com/2013/04/16/mobile-web-native-applications/">stop</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.themusicvoid.com/2013/04/mobile-content-battle-native-apps-vs-html5-the-browser/');"  href="http://www.themusicvoid.com/2013/04/mobile-content-battle-native-apps-vs-html5-the-browser/">can&#8217;t</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/searchcloudapplications.techtarget.com/feature/Mobile-cloud-apps-vs-native-apps-The-developers-perspective');"  href="http://searchcloudapplications.techtarget.com/feature/Mobile-cloud-apps-vs-native-apps-The-developers-perspective">breathe</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/news.ycombinator.com/item?id=4838302');"  href="https://news.ycombinator.com/item?id=4838302">not</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/news.ycombinator.com/item?id=2507453');"  href="https://news.ycombinator.com/item?id=2507453">HN</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/news.ycombinator.com/item?id=4834234');"  href="https://news.ycombinator.com/item?id=4834234">too</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/news.ycombinator.com/item?id=1012559');"  href="https://news.ycombinator.com/item?id=1012559">I</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/reefpoints.dockyard.com/2011/11/10/mobile-web-apps.html');"  href="http://reefpoints.dockyard.com/2011/11/10/mobile-web-apps.html">can&#8217;t</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/lists.w3.org/Archives/Public/public-coremob/2012Sep/0021.html');"  href="http://lists.w3.org/Archives/Public/public-coremob/2012Sep/0021.html">do</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/reefpoints.dockyard.com/2011/11/10/mobile-web-apps.html');"  href="http://reefpoints.dockyard.com/2011/11/10/mobile-web-apps.html">this</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/venturebeat.com/2011/11/09/mobile-web/');"  href="http://venturebeat.com/2011/11/09/mobile-web/">anymore</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.guardian.co.uk/technology/blog/2011/nov/03/will-html5-replace-native-apps');"  href="http://www.guardian.co.uk/technology/blog/2011/nov/03/will-html5-replace-native-apps">please</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story');"  href="http://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story">just</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.tobie.me/post/31366970040/when-im-introspective-about-the-last-few-years-i');"  href="http://blog.tobie.me/post/31366970040/when-im-introspective-about-the-last-few-years-i">stop</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.suthakamal.com/2012/08/go-native-html5-is-going-to-lag-for.html');"  href="http://blog.suthakamal.com/2012/08/go-native-html5-is-going-to-lag-for.html">so</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.ericsink.com/entries/html5_vs_native_apps.html');"  href="http://www.ericsink.com/entries/html5_vs_native_apps.html">many</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/hnpod.com/episodes/html5-vs-native-apps');"  href="http://hnpod.com/episodes/html5-vs-native-apps">opinions</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/designmind.frogdesign.com/blog/unraveling-html5-vs-native.html');"  href="http://designmind.frogdesign.com/blog/unraveling-html5-vs-native.html">so</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/techcrunch.com/2011/02/09/html5-versus-native-apps/');"  href="http://techcrunch.com/2011/02/09/html5-versus-native-apps/">few</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/news.ycombinator.com/item?id=5254289');"  href="https://news.ycombinator.com/item?id=5254289">facts</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/thenextweb.com/dd/2013/03/18/accounting-software-startup-xero-ditches-html5-in-favor-of-native-ios-and-android-apps/');"  href="http://thenextweb.com/dd/2013/03/18/accounting-software-startup-xero-ditches-html5-in-favor-of-native-ios-and-android-apps/">I</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.deck.cc/native_vs_html5_mobile_applications.html');"  href="http://www.deck.cc/native_vs_html5_mobile_applications.html">can</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/gkosev.blogspot.com/2012/08/why-native-development-sucks-and-html5.html');"  href="http://gkosev.blogspot.com/2012/08/why-native-development-sucks-and-html5.html">go</a> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/news.ycombinator.com/item?id=1903074');"  href="https://news.ycombinator.com/item?id=1903074">on</a>).  On the other hand, as best as I can tell, <em>there is no comprehensive, informed, reasonable discussion of this topic happening anywhere</em>. It may prove to be a very stupid idea, but this article is my attempt to talk reasonably about a topic that has so far spawned 100% unreasonable flamewar-filled bikeshed discussions. In my defense, I have chosen to believe the problem has more to do with people who <em>can</em> discuss better and simply <em>don&#8217;t</em>, than anything to do with the subject matter. I suppose we&#8217;ll find out.</p><p>So if you are trying to figure out exactly <em>what brand of crazy</em> all your native developer friends are on for continuing to write the evil native applications on the cusp of the open web revolution, or <em>whatever</em>, then bookmark this page, make yourself a cup of coffee, clear an afternoon, find a comfy chair, and then we&#8217;ll both be ready.</p><h2>A quick review</h2><p>My <a
href="http://sealedabstract.com/rants/mobile-web-apps-are-slow/" title="Mobile web apps are slow">previous blog post documented</a>, based on SunSpider benchmarks, that the state of the world, today, is that mobile web apps are slow.</p><blockquote><p>Now, if what you mean by “web app” is “website with a button or two”, you can tell all the fancypants benchmarks like SunSpider to take a hike.  But if you mean “light word processing, light photo editing, local storage, and animations between screens” then you don’t want to be doing that in a web app on ARM unless you have a death wish.</p></blockquote><p>You should really go read that article, but I will show you the benchmark anyway: <a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/01/Screen-Shot-2013-01-05-at-3.59.05-AM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/01/Screen-Shot-2013-01-05-at-3.59.05-AM.png"><img
class="alignnone size-full wp-image-1574" alt="Screen Shot 2013-01-05 at 3.59.05 AM" src="http://sealedabstract.com/wp-content/uploads/2013/01/Screen-Shot-2013-01-05-at-3.59.05-AM.png" width="700" /></a></p><p>Essentially there are three categories of criticism about this benchmark:</p><ol><li>The fact that JS is slower than native code is not news: everybody learned this in CS1 when they talked about compiled vs JIT vs interpreted languages.  The question is whether it is appreciably slower in some way that actually matters for the kind of software you are writing, and benchmarks like these fail to address that problem one way or the other.</li><li>Yes JS is slower and yes it matters, but it keeps getting faster and so one day soon we will find ourselves in case #1 where it is no longer appreciably slower, so start investing in JS now.</li><li>I write Python/PHP/Ruby server-side code and I have no idea what you guys keep going on about.  I know that my servers are faster than your mobile devices, but surely if I am pretty comfortable supporting X,000 users using an <strong>actually</strong> interpreted language, you guys can figure out how to support a single user in a language with a high-performance JIT?  How hard can it be?</li></ol><p>I have the rather lofty goal of refuting all three claims in this article: yes, JS is slow in a way that actually matters, no, it will not get appreciably faster in the near future, and no, your experience with server-side programming does not adequately prepare you to &#8220;think small&#8221; and correctly reason about mobile performance.</p><p>But the real elephant in the room here is that in all these articles on this subject, rarely does anyone actually quantify <strong>how slow</strong> JS is or provide any sort of <strong>actually useful standard of comparison</strong>.  (You know&#8230; <em>slow relative to what?</em>)  To correct this, I will develop, in this article, not just <strong>one</strong> useful equivalency for JavaScript performance&#8211;but <strong>three of them</strong>.  So I&#8217;m not only going to argue the &#8220;traditional hymns&#8221; of &#8220;wa wa JS is slow for arbitrary case&#8221;, but I&#8217;m going to quantify exactly how slow it is, and compare it to a wide variety of things in your real-life programming experience so that, when you are faced with your own platform decision, you can do your own back-of-the-napkin math on whether or not JavaScript is feasible for solving your own particular problem.</p><h2>Okay, but how does JS performance compare to native performance exactly?</h2><p>It&#8217;s a good question.  To answer it, I grabbed an <a
onclick="javascript:pageTracker._trackPageview('/outgoing/benchmarksgame.alioth.debian.org/u32/program.php?test=spectralnorm&amp;lang=v8&amp;id=2');"  href="http://benchmarksgame.alioth.debian.org/u32/program.php?test=spectralnorm&amp;lang=v8&amp;id=2">arbitrary benchmark</a> from The Benchmarks Game.  I then found an older C program that does the same benchmark (older since the newer ones have a lot of x86-specific intrinsics).  Then benchmarked Nitro against LLVM on my trusty iPhone 4S.  All the code is <a
onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/drewcrawford/bench');"  href="https://github.com/drewcrawford/bench">up on GitHub</a>.</p><p>Now this is all very arbitrary&#8211;but the code you&#8217;re running in real life is equally arbitrary.  If you want a better experiment, go run one.  This is just the experiment I ran, because there aren&#8217;t any other experiments that compare LLVM to Nitro that exist.</p><p>Anyway, in this synthetic benchmark, LLVM is consistently 4.5x faster than Nitro:</p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-5.32.06-AM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-5.32.06-AM.png"><img
class="alignnone  wp-image-1716" alt="Screen Shot 2013-05-14 at 5.32.06 AM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-5.32.06-AM.png" width="694" height="422" /></a></p><p>So if you are wondering &#8220;How much faster is my CPU-bound function in native code instead of Nitro JS&#8221; the answer is about 5x faster. This result is roughly consistent with the Benchmarks Game&#8217;s results with x86/GCC/V8.  <a
onclick="javascript:pageTracker._trackPageview('/outgoing/benchmarksgame.alioth.debian.org/u32/benchmark.php?test=all&amp;lang=v8&amp;lang2=gcc&amp;data=u32');"  href="http://benchmarksgame.alioth.debian.org/u32/benchmark.php?test=all&amp;lang=v8&amp;lang2=gcc&amp;data=u32">They claim</a> that GCC/x86 is generally between 2x and 9x faster than V8/x86.  So the result seems in the right ballpark, and also seems consistent no matter if you are on ARM or x86.</p><h1>But isn&#8217;t 1/5 performance good enough for anyone?</h1><p>It&#8217;s good enough on x86.  How CPU-intensive is rendering a spreadsheet, really?  It&#8217;s not really that hard. Problem is, ARM isn&#8217;t x86.</p><p><a
onclick="javascript:pageTracker._trackPageview('/outgoing/browser.primatelabs.com/geekbench2/compare/1952237/1952292');"  href="http://browser.primatelabs.com/geekbench2/compare/1952237/1952292">According to GeekBench</a>, the latest MBP against the latest iPhone is a full factor of 10 apart.  So that&#8217;s okay&#8211;spreadsheets really aren&#8217;t that hard.  We can live with 10% performance. But then you want to divide <strong>that</strong> by five?  Woah there buddy.  Now we&#8217;re down to 2% of desktop performance.  (I&#8217;m playing fast-and-loose with the units, but we&#8217;re dealing with orders of magnitude here.  Close enough.)</p><p>Okay, but how hard is word processing, <em>really</em>?  Couldn&#8217;t we do it on like an m68k with one coprocessor tied behind its back? Well, this is an answerable question.  You may not recall, but Google Docs&#8217; realtime collaboration was not, in fact, a launch feature.  They did a massive rewrite that added it in <a
onclick="javascript:pageTracker._trackPageview('/outgoing/googledocs.blogspot.com/2010/04/new-google-docs.html');"  href="http://googledocs.blogspot.com/2010/04/new-google-docs.html">April 2010. </a> Let&#8217;s see what browser performance <a
onclick="javascript:pageTracker._trackPageview('/outgoing/lowlymarine.blogspot.com/2010/06/brief-browser-battle-sunspider.html');"  href="http://lowlymarine.blogspot.com/2010/06/brief-browser-battle-sunspider.html">looked like in 2010</a>. <a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/BrowserCompChart1-9-6-107.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/BrowserCompChart1-9-6-107.png"><img
class="alignnone  wp-image-1717" alt="BrowserCompChart1 9-6-10[7]" src="http://sealedabstract.com/wp-content/uploads/2013/05/BrowserCompChart1-9-6-107.png" width="731" height="440" /></a></p><p>What should be plainly obvious from this chart is that the iPhone 4S is not at all competitive with web browsers around the time that Google Docs did real-time collaboration.  Well, it&#8217;s competitive with IE8.  Congratulations on that.</p><p>Let&#8217;s look at another serious JavaScript application: Google Wave.  Wave never supported IE8&#8211;<a
onclick="javascript:pageTracker._trackPageview('/outgoing/googlewavedev.blogspot.com/2009/09/google-wave-in-internet-explorer.html');"  href="http://googlewavedev.blogspot.com/2009/09/google-wave-in-internet-explorer.html">according to Google</a>&#8211;because it was too slow.</p><div
id="attachment_1718" class="wp-caption alignnone size-full wp-image-1718"style="width:400px"><img
class="size-full wp-image-1718" alt="Notice how all these browsers bench faster than the iPhone 4S?" src="http://sealedabstract.com/wp-content/uploads/2013/05/cf-in-ie.png" width="400" height="312" /><p
class="wp-caption-text">Notice how all these browsers bench faster than the iPhone 4S?</p></div><p>Notice how all the supported browsers bench below 1000, and the one that scores 3800 is excluded for being too slow?  The iPhone benches 2400.  It, just like IE8, isn&#8217;t fast enough to run Wave.</p><p>Just to be clear: <strong>is possible to do real-time collaboration on on a mobile device</strong>.  It just isn&#8217;t possible to do it <strong>in JavaScript</strong>.  The performance gap between native and web apps is comparable to the performance gap between FireFox and IE8, which is <strong>too large a gap for serious work</strong>.</p><h3>But I thought V8 / modern JS had near-C performance?</h3><p><span
style="text-decoration: underline;">It depends on </span><strong><span
style="text-decoration: underline;">what you mean by &#8220;near&#8221;</span>.  </strong>If your C program executes in 10ms, then a 50ms JavaScript program would be &#8220;near-C&#8221; speed.  If your C program executes in 10 seconds, a 50-second JavaScript program, for most ordinary people would probably <strong>not</strong> be near-C speed.</p><h2>The hardware angle</h2><p>But a factor of 5 is okay <strong>on x86</strong>, because x86 is ten times faster than ARM just to start with.  You have a lot of headroom. The solution is obviously just to make ARM 10x faster, so it is competitive with x86, and then we can get desktop JS performance without doing any work!</p><p>Whether or not this works out kind of hinges on your faith in Moore&#8217;s Law in the face of trying to power a chip on a 3-ounce battery.  I am not a hardware engineer, but I once worked for a major semiconductor company, and the people there tell me that these days performance is mostly a function of your <em>process</em> (e.g., the thing they measure in &#8220;nanometers&#8221;).   The iPhone 5&#8242;s impressive performance is due in no small part to a process shrink from 45nm to 32nm &#8212; a reduction of about a third.  But to do it again, Apple would have to shrink to a 22nm process.  </p><p>Just for reference, Intel&#8217;s Bay Trail&#8211;the x86 Atom version of 22nm&#8211;<em>doesn&#8217;t currently exist</em>.  And Intel had to invent a <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.intel.com/content/www/us/en/energy/intel-22nm-3-d-tri-gate-transistor-technology.html');"  href="http://www.intel.com/content/www/us/en/energy/intel-22nm-3-d-tri-gate-transistor-technology.html">whole new kind of transistor</a> since the ordinary kind doesn&#8217;t work at 22nm scale.  Think they&#8217;ll license it to ARM?  Think again. There are only a handful of 22nm fabs that people are even <em>seriously thinking about building</em> in the world, and most of them are controlled by Intel.</p><p>In fact, ARM seems on track to do a 28nm process shrink in the next year or so (watch the A7), and meanwhile Intel is on track to do 22nm and maybe even 20nm just a little further out.  On purely a hardware level, it seems much more likely to me that an x86 chip with x86-class performance will be put in a smartphone long before an ARM chip with x86-class performance can be shrunk.  </p><p>Update from an ex-Intel engineer who e-mailed me:</p><blockquote><p>I&#8217;m an ex-Intel engineer, worked on the mobile microprocessor line and later on the Atoms. For what it&#8217;s worth, my incredibly biased opinion is that it&#8217;s going to be easier for x86 to get into a phone envelope with the &#8220;feature toolbox&#8221; from the larger cores than it will be for ARM to grow up to x86 performance levels designing such features from scratch.</p></blockquote><p>Update from a robotics engineer who e-mailed me:</p><blockquote><p>You are perfectly right that these will not bring ultra major performance boost and that Intel may have a higher performing mobile CPU a few years from now. In fact, mobile CPUs is currently hitting the same type of limit that desktop CPUs hit when they reached ~3GHz : Increasing clock speed further is not feasible without increasing power a lot, same will be true for next process nodes although they should be able to increase IPC a bit (10-20% maybe). When they faced that limit, desktop CPUs started to become dual and quad cores, but mobile SoC are already dual and quad so there is no easy boost.</p></blockquote><p>So Moore&#8217;s Law might be right after all, but it is right in a way that would require the entire mobile ecosystem to transition to x86. It&#8217;s not entirely impossible&#8211;it&#8217;s been <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.businessinsider.com/the-care-and-keeping-of-apples-super-secret-project-marklar-2012-6');"  href="http://www.businessinsider.com/the-care-and-keeping-of-apples-super-secret-project-marklar-2012-6">done once before</a>.  But it was done at a time when yearly sales were around <a
onclick="javascript:pageTracker._trackPageview('/outgoing/switchtoamac.com/site/apple-reports-2006-fourth-quarter-earnings-mac-sales-rise-30-percent.html');"  href="http://switchtoamac.com/site/apple-reports-2006-fourth-quarter-earnings-mac-sales-rise-30-percent.html">a million units</a>, and now they are selling 62 million <a
onclick="javascript:pageTracker._trackPageview('/outgoing/techcrunch.com/2012/03/07/tim-cook-talks-ios-device-stats-315-million-sold-62-million-in-q4-alone/');"  href="http://techcrunch.com/2012/03/07/tim-cook-talks-ios-device-stats-315-million-sold-62-million-in-q4-alone/">per quarter.</a>  It was done with an off-the-shelf virtualization environment that could emulate the old architecture at about <a
onclick="javascript:pageTracker._trackPageview('/outgoing/guides.macrumors.com/Rosetta_Performance_Benchmarks');"  href="http://guides.macrumors.com/Rosetta_Performance_Benchmarks">60% speed</a>, meanwhile the performance of today&#8217;s hypothetical research virtualization systems for optimized (O3) ARM code are <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.cs.princeton.edu/~thhung/pubs/odes08.pdf');"  href="http://www.cs.princeton.edu/~thhung/pubs/odes08.pdf">closer to 27%</a>.</p><p>If you believe JavaScript performance is going to get there eventually, really the hardware path is the best path.  Either Intel will have a viable iPhone chip in 5 years (likely) and Apple will switch (unlikely), or perhaps ARM will sort themselves out over the next decade.  (Go talk to 10 hardware engineers to get 10 opinions on the viability of that.)  But a decade is a long time, from my chair, for something that <em>might pan out.</em></p><p>I&#8217;m afraid my knowledge of the hardware side runs out here. What I <em>can</em> tell you is this: if you want to believe that ARM will close the gap with x86 in the next 5 years, the first step is to find somebody who works on ARM or x86 (e.g., the sort of person who would actually know) to agree with you. I have consulted many such qualified engineers for this article, and they have all declined to take the position on record. This suggests to me that the position is not any good.</p><h2>The software angle</h2><p>Here is where a lot of competent software engineers stumble.  The thought process goes like this&#8211;JavaScript has gotten faster!  It will continue to get faster!</p><p>The first part is true.  JavaScript has gotten a <strong>lot</strong> faster.  But we&#8217;re now at Peak JavaScript.  It doesn&#8217;t get much faster from here.</p><p>Why?  Well the first part is that most of the improvements to JavaScript over its history have actually been of the <strong>hardware</strong> sort.  Jeff Atwood <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.codinghorror.com/blog/2007/12/the-great-browser-javascript-showdown.html');"  href="http://www.codinghorror.com/blog/2007/12/the-great-browser-javascript-showdown.html">writes</a>:</p><blockquote><p>I found that the performance of JavaScript improved a hundredfold between 1996 and 2006. If Web 2.0 is built on a backbone of JavaScript, it&#8217;s largely possible only because of those crucial Moore&#8217;s Law performance improvements.</p></blockquote><p>If we attribute JS&#8217;s speedup to hardware generally, JS&#8217;s (hardware) performance improvement <strong>does not predict future software improvement</strong>.  This is why, if you want to believe that JS is going to get faster, by far the most likely way is by the hardware getting faster, because that is what the historical trend says.</p><p>What about JITs though?  V8, Nitro/SFX, TraceMonkey/IonMonkey, Chakra, and the rest?  Well, they were kind of a big deal when they came out&#8211;although not as big of a deal as you might think.  V8 was released in September 2008.  I dug up a copy of Firefox 3.0.3 from around the same time:</p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-6.41.48-PM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-6.41.48-PM.png"><img
class="alignnone  wp-image-1719" alt="Screen Shot 2013-05-14 at 6.41.48 PM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-6.41.48-PM.png" width="577" height="400" /></a></p><p>Don&#8217;t get me wrong, a 9x improvement in performance is nothing to sneeze at&#8211;after all, it&#8217;s nearly the difference between ARM and x86.  That said, the performance between Chrome 8 and Chrome 26 is a flatline, because nothing terribly important has happened since 2008.   The other browser vendors have caught up&#8211;some slower, some faster&#8211;but nobody has really improved the speed of actual CPU code since.</p><h1>Is JavaScript improving?</h1><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-3.59.04-AM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-3.59.04-AM.png"><img
alt="Screen Shot 2013-05-14 at 3.59.04 AM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-3.59.04-AM.png" width="667" height="471" /></a></p><p>Here&#8217;s <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.webkit.org/perf/sunspider-1.0/sunspider-1.0/results.html?%7B%22v%22:%20%22sunspider-1.0%22,%20%223d-cube%22:%5B21,15,14,19,26,15,21,36,16,14%5D,%223d-morph%22:%5B18,9,21,38,9,20,35,9,20,22%5D,%223d-raytrace%22:%5B11,8,8,8,10,11,11,11,11,12%5D,%22access-binary-trees%22:%5B2,1,1,2,1,1,2,2,1,1%5D,%22access-fannkuch%22:%5B11,11,11,11,10,11,11,10,11,12%5D,%22access-nbody%22:%5B11,33,9,10,9,10,10,10,11,10%5D,%22access-nsieve%22:%5B4,3,3,3,3,3,4,4,3,3%5D,%22bitops-3bit-bits-in-byte%22:%5B2,2,2,2,1,1,2,2,2,1%5D,%22bitops-bits-in-byte%22:%5B4,5,5,4,4,4,4,4,4,4%5D,%22bitops-bitwise-and%22:%5B7,8,7,8,7,7,8,7,8,8%5D,%22bitops-nsieve-bits%22:%5B7,8,7,7,7,9,7,8,7,7%5D,%22controlflow-recursive%22:%5B2,2,2,2,2,1,2,2,1,2%5D,%22crypto-aes%22:%5B4,5,5,6,7,8,7,7,7,6%5D,%22crypto-md5%22:%5B3,4,3,3,3,4,3,3,4,3%5D,%22crypto-sha1%22:%5B3,4,4,6,5,4,6,3,4,4%5D,%22date-format-tofte%22:%5B19,10,9,7,10,8,8,21,20,9%5D,%22date-format-xparb%22:%5B10,9,11,9,13,26,10,10,10,9%5D,%22math-cordic%22:%5B8,10,9,21,19,8,21,8,8,10%5D,%22math-partial-sums%22:%5B11,24,9,10,11,10,11,10,11,22%5D,%22math-spectral-norm%22:%5B3,3,4,3,4,4,4,4,4,4%5D,%22regexp-dna%22:%5B10,10,10,9,10,12,10,10,10,9%5D,%22string-base64%22:%5B5,4,5,28,4,5,15,5,4,5%5D,%22string-fasta%22:%5B10,32,10,10,32,10,11,12,35,29%5D,%22string-tagcloud%22:%5B19,19,32,19,20,30,18,44,18,19%5D,%22string-unpack-code%22:%5B33,24,23,25,24,23,25,25,24,23%5D,%22string-validate-input%22:%5B6,9,5,6,8,6,7,6,8,8%5D%7D');"  href="http://www.webkit.org/perf/sunspider-1.0/sunspider-1.0/results.html?%7B%22v%22:%20%22sunspider-1.0%22,%20%223d-cube%22:%5B21,15,14,19,26,15,21,36,16,14%5D,%223d-morph%22:%5B18,9,21,38,9,20,35,9,20,22%5D,%223d-raytrace%22:%5B11,8,8,8,10,11,11,11,11,12%5D,%22access-binary-trees%22:%5B2,1,1,2,1,1,2,2,1,1%5D,%22access-fannkuch%22:%5B11,11,11,11,10,11,11,10,11,12%5D,%22access-nbody%22:%5B11,33,9,10,9,10,10,10,11,10%5D,%22access-nsieve%22:%5B4,3,3,3,3,3,4,4,3,3%5D,%22bitops-3bit-bits-in-byte%22:%5B2,2,2,2,1,1,2,2,2,1%5D,%22bitops-bits-in-byte%22:%5B4,5,5,4,4,4,4,4,4,4%5D,%22bitops-bitwise-and%22:%5B7,8,7,8,7,7,8,7,8,8%5D,%22bitops-nsieve-bits%22:%5B7,8,7,7,7,9,7,8,7,7%5D,%22controlflow-recursive%22:%5B2,2,2,2,2,1,2,2,1,2%5D,%22crypto-aes%22:%5B4,5,5,6,7,8,7,7,7,6%5D,%22crypto-md5%22:%5B3,4,3,3,3,4,3,3,4,3%5D,%22crypto-sha1%22:%5B3,4,4,6,5,4,6,3,4,4%5D,%22date-format-tofte%22:%5B19,10,9,7,10,8,8,21,20,9%5D,%22date-format-xparb%22:%5B10,9,11,9,13,26,10,10,10,9%5D,%22math-cordic%22:%5B8,10,9,21,19,8,21,8,8,10%5D,%22math-partial-sums%22:%5B11,24,9,10,11,10,11,10,11,22%5D,%22math-spectral-norm%22:%5B3,3,4,3,4,4,4,4,4,4%5D,%22regexp-dna%22:%5B10,10,10,9,10,12,10,10,10,9%5D,%22string-base64%22:%5B5,4,5,28,4,5,15,5,4,5%5D,%22string-fasta%22:%5B10,32,10,10,32,10,11,12,35,29%5D,%22string-tagcloud%22:%5B19,19,32,19,20,30,18,44,18,19%5D,%22string-unpack-code%22:%5B33,24,23,25,24,23,25,25,24,23%5D,%22string-validate-input%22:%5B6,9,5,6,8,6,7,6,8,8%5D%7D">Chrome v8</a> on my Mac (the earliest one that still ran, Dec 2010.)  Now here&#8217;s<a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.webkit.org/perf/sunspider-1.0/sunspider-1.0/results.html?%7B%22v%22:%20%22sunspider-1.0%22,%20%223d-cube%22:%5B11,8,47,7,19,12,19,13,16,8%5D,%223d-morph%22:%5B7,7,8,7,43,7,41,14,7,7%5D,%223d-raytrace%22:%5B9,14,10,10,9,10,9,14,9,12%5D,%22access-binary-trees%22:%5B2,5,1,2,2,2,2,4,2,2%5D,%22access-fannkuch%22:%5B12,12,12,12,12,12,12,8,13,13%5D,%22access-nbody%22:%5B10,42,7,4,4,22,6,6,21,7%5D,%22access-nsieve%22:%5B2,2,2,8,2,3,2,2,33,4%5D,%22bitops-3bit-bits-in-byte%22:%5B2,2,1,2,1,1,1,1,1,1%5D,%22bitops-bits-in-byte%22:%5B5,4,5,4,4,4,4,4,4,4%5D,%22bitops-bitwise-and%22:%5B3,4,4,3,3,4,4,3,4,4%5D,%22bitops-nsieve-bits%22:%5B6,6,6,41,6,6,5,6,6,6%5D,%22controlflow-recursive%22:%5B2,2,3,2,3,2,3,2,3,3%5D,%22crypto-aes%22:%5B13,6,9,5,5,6,6,7,7,8%5D,%22crypto-md5%22:%5B6,8,5,5,4,5,5,5,6,5%5D,%22crypto-sha1%22:%5B10,5,5,5,6,6,5,6,6,6%5D,%22date-format-tofte%22:%5B47,9,9,9,11,8,8,8,9,10%5D,%22date-format-xparb%22:%5B10,10,9,12,15,14,14,10,14,11%5D,%22math-cordic%22:%5B3,3,4,3,4,4,3,3,3,7%5D,%22math-partial-sums%22:%5B11,13,9,8,17,12,18,9,12,11%5D,%22math-spectral-norm%22:%5B2,3,3,5,6,3,7,2,3,2%5D,%22regexp-dna%22:%5B8,8,12,8,40,7,31,9,7,13%5D,%22string-base64%22:%5B4,4,10,4,5,5,6,5,5,10%5D,%22string-fasta%22:%5B10,10,46,10,11,10,9,11,11,38%5D,%22string-tagcloud%22:%5B25,24,23,27,23,23,22,24,27,26%5D,%22string-unpack-code%22:%5B23,40,24,23,29,22,28,32,37,22%5D,%22string-validate-input%22:%5B14,12,14,7,7,18,8,7,37,14%5D%7D');"  href="http://www.webkit.org/perf/sunspider-1.0/sunspider-1.0/results.html?%7B%22v%22:%20%22sunspider-1.0%22,%20%223d-cube%22:%5B11,8,47,7,19,12,19,13,16,8%5D,%223d-morph%22:%5B7,7,8,7,43,7,41,14,7,7%5D,%223d-raytrace%22:%5B9,14,10,10,9,10,9,14,9,12%5D,%22access-binary-trees%22:%5B2,5,1,2,2,2,2,4,2,2%5D,%22access-fannkuch%22:%5B12,12,12,12,12,12,12,8,13,13%5D,%22access-nbody%22:%5B10,42,7,4,4,22,6,6,21,7%5D,%22access-nsieve%22:%5B2,2,2,8,2,3,2,2,33,4%5D,%22bitops-3bit-bits-in-byte%22:%5B2,2,1,2,1,1,1,1,1,1%5D,%22bitops-bits-in-byte%22:%5B5,4,5,4,4,4,4,4,4,4%5D,%22bitops-bitwise-and%22:%5B3,4,4,3,3,4,4,3,4,4%5D,%22bitops-nsieve-bits%22:%5B6,6,6,41,6,6,5,6,6,6%5D,%22controlflow-recursive%22:%5B2,2,3,2,3,2,3,2,3,3%5D,%22crypto-aes%22:%5B13,6,9,5,5,6,6,7,7,8%5D,%22crypto-md5%22:%5B6,8,5,5,4,5,5,5,6,5%5D,%22crypto-sha1%22:%5B10,5,5,5,6,6,5,6,6,6%5D,%22date-format-tofte%22:%5B47,9,9,9,11,8,8,8,9,10%5D,%22date-format-xparb%22:%5B10,10,9,12,15,14,14,10,14,11%5D,%22math-cordic%22:%5B3,3,4,3,4,4,3,3,3,7%5D,%22math-partial-sums%22:%5B11,13,9,8,17,12,18,9,12,11%5D,%22math-spectral-norm%22:%5B2,3,3,5,6,3,7,2,3,2%5D,%22regexp-dna%22:%5B8,8,12,8,40,7,31,9,7,13%5D,%22string-base64%22:%5B4,4,10,4,5,5,6,5,5,10%5D,%22string-fasta%22:%5B10,10,46,10,11,10,9,11,11,38%5D,%22string-tagcloud%22:%5B25,24,23,27,23,23,22,24,27,26%5D,%22string-unpack-code%22:%5B23,40,24,23,29,22,28,32,37,22%5D,%22string-validate-input%22:%5B14,12,14,7,7,18,8,7,37,14%5D%7D"> v26</a>.  </p><p>Can&#8217;t spot the difference?  That&#8217;s because there isn&#8217;t one.  <strong>Nothing terribly important has happened to CPU-bound JavaScript lately.</strong></p><p>If the web feels faster to you than it did in 2010, that is probably because you&#8217;re running a faster computer, but it has nothing to do with improvements to Chrome.</p><p><strong>Update</strong> Some smart people have pointed out that SunSpider isn&#8217;t a good benchmark these days (but have declined to provide any actual numbers or anything). In the interests of having a reasonable conversation, I ran Octane (a Google benchmark) on some old versions of Chrome, and it does show some improvement:</p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/07/Screen-Shot-2013-07-09-at-3.59.43-PM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/07/Screen-Shot-2013-07-09-at-3.59.43-PM.png"><img
src="http://sealedabstract.com/wp-content/uploads/2013/07/Screen-Shot-2013-07-09-at-3.59.43-PM.png" alt="Octane on V8, 2011 to 2013" width="700" class="alignnone size-full wp-image-1928" /></a></p><p>In my opinion, this magnitude of performance gain over this period is much too small to support the claim that JS will close the gap in any reasonable amount of time. However, I think it&#8217;s fair to say that I overstated the case a bit&#8211;<em>something</em> is happening in CPU-bound JavaScript. But to me, these numbers confirm the larger hypothesis: these gains are not the order-of-magnitude that will close the gap with native code, in any reasonable amount of time. You need to get to 2x-9x across the board to compete with LLVM. These improvements are good, but they&#8217;re not that good. <strong>End update</strong></p><p>The thing is, JITing JavaScript was a 60-year old idea with 60 years of research, and literally thousands of implementations for every conceivable programming language demonstrating that it was a good idea.  But now that we&#8217;ve done it, we&#8217;ve run out of 60-year-old ideas.  That&#8217;s all, folks.  Show&#8217;s over.  Maybe we can grow another good idea in the next 60 years.</p><h1>But Safari is supposedly faster than before?</h1><p>But if this is all true, how come we keep hearing about all the great performance improvements in JavaScript? It seems every other week, somebody is touting huge speedups in some benchmark. Here is Apple claiming a staggering 3.8x speedup on JSBench:</p><div
id="attachment_1913" class="wp-caption alignnone size-full wp-image-1913"style="width:465px"><img
src="http://sealedabstract.com/wp-content/uploads/2013/07/Screen-Shot-2013-07-08-at-11.45.38-PM.png" alt="Is Safari 7 3.8x faster than the other guys?" width="465" height="324" class="size-full wp-image-1913" /><p
class="wp-caption-text">]<a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/07/Screen-Shot-2013-07-08-at-11.45.38-PM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/07/Screen-Shot-2013-07-08-at-11.45.38-PM.png">56</a> Is Safari 7 3.8x faster than the other guys?</p></div><p>Perhaps conveniently for Apple, this version of Safari is currently under NDA, so nobody is able to publish independent numbers on Safari performance one way or the other. But let me make some observations on this kind of claim that&#8217;s purely on the basis of publicly available information.</p><p>I find it interesting, first, that Apple&#8217;s public claims on JSBench are much higher than their claims for traditional benchmarks like SunSpider. Now JSBench <a
onclick="javascript:pageTracker._trackPageview('/outgoing/sss.cs.purdue.edu/projects/dynjs/jsbench-oopsla-2011.pdf');"  href="http://sss.cs.purdue.edu/projects/dynjs/jsbench-oopsla-2011.pdf">has some cool names behind it</a> including Brenden Eich, the creator of JavaScript. But unlike traditional benchmarks, the way JSBench works isn&#8217;t by writing a program that factors integers or something. Instead, JSBench automatically scrapes whatever Amazon, Facebook, and Twitter serve up, and builds benchmarks out of that. If you are writing a web browser that (let&#8217;s be honest) most people use to browse Facebook, I can see how having a benchmark that&#8217;s literally Facebook is very useful. On the other hand, if you are writing a spreadsheet program, or a game, or an image filter application, it seems to me that a traditional benchmark with e.g. integer arithmetic and md5 hashing is going to be much more predictive for you than seeing how fast Facebook&#8217;s analytics code can run.</p><p>The other important fact is that an improvement on SunSpider, as Apple claims, does not necessarily mean anything else improves. In the very paper that introduces Apple&#8217;s preferred benchmark, Eich et al write the following:</p><blockquote><p>The graph clearly shows that, according to SunSpider, the performance of Firefox improved over 13× between version 1.5 and version 3.6. Yet when we look at the performance improvements on amazon they are a more modest 3×. And even more interestingly, in the last two years, gains on amazon have flattened. Suggesting that some of the optimizations that work well on Sun Spider do little for amazon. [sic]</p></blockquote><p><em>In this very paper</em>, the creator of JavaScript and one of the top architects for Mozilla openly admits that nothing at all has happened to the performance of Amazon&#8217;s JavaScript in two years, and nothing terribly exciting has <em>ever</em> happened. This is your clue that the marketing guys have oversold things just a bit over the years.</p><p>(They go on to argue, essentially, that benchmarking Amazon is a better predictor for running Amazon than benchmarking SunSpider [uh... obvious...], and is therefore good to do for web browsers which people use to visit Amazon. But none of this will help you write a photo processing application.)</p><p>But at any rate, what I can tell you, from publicly available information, is that Apple&#8217;s claims of 3.8x faster whatever does not necessarily translate into anything useful to you. I can also tell you that if I had benchmarks that refuted Apple&#8217;s claims of beating Chrome, I would not be allowed to publish them.</p><p>So let&#8217;s just conclude this section by saying that just because somebody has a bar chart that shows their web browser is faster does not necessarily mean JS as a whole is getting any faster.</p><p>But there is a bigger problem.</p><h2>Not designed for performance</h2><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/JavaScript-the-good-parts.jpg');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/JavaScript-the-good-parts.jpg"><img
class="alignnone size-full wp-image-1741" alt="JavaScript-the-good-parts" src="http://sealedabstract.com/wp-content/uploads/2013/05/JavaScript-the-good-parts.jpg" width="600" height="450" /></a></p><p>This is from <a
onclick="javascript:pageTracker._trackPageview('/outgoing/herbsutter.com/2012/04/02/reader-qa-when-will-better-jits-save-managed-code/');"  href="http://herbsutter.com/2012/04/02/reader-qa-when-will-better-jits-save-managed-code/">Herb Sutter</a>, one of the big names in modern C++:</p><blockquote><p>This is a 199x/200x meme that’s hard to kill – “just wait for the next generation of (JIT or static) compilers and then managed languages will be as efficient.” Yes, I fully expect C# and Java compilers to keep improving – both JIT and NGEN-like static compilers. But no, they won’t erase the efficiency difference with native code, for two reasons. First, JIT compilation isn’t the main issue. The root cause is much more fundamental: <strong>Managed languages made deliberate design tradeoffs to optimize for programmer productivity even when that was fundamentally in tension with, and at the expense of, performance efficiency</strong>&#8230; In particular, managed languages chose to incur costs even for programs that don’t need or use a given feature; the major examples are assumption/reliance on always-on or default-on garbage collection, a virtual machine runtime, and metadata. But there are other examples; for instance, managed apps are built around virtual functions as the default, whereas C++ apps are built around inlined functions as the default, and an ounce of inlining prevention is worth a pound of devirtualization optimization cure.</p></blockquote><p>This quote was <a
onclick="javascript:pageTracker._trackPageview('/outgoing/tirania.org/blog/archive/2012/Apr-04.html');"  href="http://tirania.org/blog/archive/2012/Apr-04.html">endorsed</a> by Miguel de Icaza of Mono, who is on the very short list of &#8220;people who maintain a major JIT compiler&#8221;.  He said:</p><blockquote><p>This is a pretty accurate statement on the difference of the mainstream VMs for managed languages (.NET, Java and Javascript). Designers of managed languages have chosen the path of safety over performance for their designs.</p></blockquote><p>Or, you could talk to <a
onclick="javascript:pageTracker._trackPageview('/outgoing/vimeo.com/61044810');"  href="http://vimeo.com/61044810">Alex Gaynor</a>, who maintains an optimizing JIT for Ruby and contributes to the optimizing JIT for Python:</p><blockquote><p>It&#8217;s the curse of these really high-productivity dynamic languages.  They make creating hash tables incredibly easy.  And that&#8217;s an incredibly good thing, because I think C programmers probably underuse hash tables, because they&#8217;re a pain.  For one you don&#8217;t have one built in.  For two, when you try to use one, you just hit pain left and right.  By contrast, Python, Ruby, JavaScript people, we overuse hashtables because they&#8217;re so easy&#8230; And as a result, people don&#8217;t care&#8230;</p></blockquote><p><a
onclick="javascript:pageTracker._trackPageview('/outgoing/gist.github.com/paulmillr/1208618');"  href="https://gist.github.com/paulmillr/1208618">Google</a> seems to think that JavaScript is facing a performance wall:</p><blockquote><p>Complex web apps&#8211;the kind that Google specializes in&#8211;are struggling against the platform and working with a language that cannot be tooled and has inherent performance problems.</p></blockquote><p>Lastly, hear it from the horse&#8217;s mouth.  One of <a
onclick="javascript:pageTracker._trackPageview('/outgoing/catwell.info');"  href="http://catwell.info">my readers</a> pointed me to <a
onclick="javascript:pageTracker._trackPageview('/outgoing/lambda-the-ultimate.org/node/3851#comment-57671');"  href="http://lambda-the-ultimate.org/node/3851#comment-57671">this comment </a>by Brendan Eich.  You know, the guy who invented JavaScript.</p><blockquote><p>One thing Mike didn&#8217;t highlight: <strong>get a simpler language</strong>. Lua is much simpler than JS. This means you can make a simple interpreter that runs fast enough to be balanced with respect to the trace-JITted code [unlike with JS].</p></blockquote><p>and a little further down:</p><blockquote><p>On the differences between JS and Lua, you can say it&#8217;s all a matter of proper design and engineering (what isn&#8217;t?), but intrinsic complexity differences in degree still cost. You can push the hard cases off the hot paths, certainly, but they take their toll. <strong>JS has more and harder hard cases than Lua.</strong> One example: Lua (without explicit metatable usage) has nothing like JS&#8217;s prototype object chain.</p></blockquote><p>Of the people who actually do relevant work: the view that JS in particular, or dynamic languages in general, will catch up with C, is <em>very much the minority view</em>.  There are a few stragglers here and there, and there is also no real consensus what to do about it, or if anything should be done about it at all.  But as to the question of whether, from a language perspective, in general, the JITs will catch up&#8211;the answer from the people working on them is &#8220;no, not without changing either the language or the APIs.&#8221;</p><p>But there is an even bigger problem.</p><h2>All about garbage collectors</h2><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/highest-paying-dirty-job-1.jpg');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/highest-paying-dirty-job-1.jpg"><img
class="alignnone size-full wp-image-1742" alt="highest-paying-dirty-job-1" src="http://sealedabstract.com/wp-content/uploads/2013/05/highest-paying-dirty-job-1.jpg" width="400" height="266" /></a></p><p>You see, the CPU problem, and all the CPU-bound benchmarks, and all the CPU-bound design decisions&#8211;that&#8217;s really only half the story.  The other half is memory.  And it turns out, the memory problem is so vast, that the whole CPU question is just the tip of the iceberg. In fact, arguably, that entire CPU discussion is a red herring.  <strong>What you are about to read should change the whole way you think about mobile software development</strong>.</p><p>In 2012, Apple did a curious thing (well, unless you are John Gruber and <a
onclick="javascript:pageTracker._trackPageview('/outgoing/daringfireball.net/linked/2011/09/19/the-unfamiliar');"  href="http://daringfireball.net/linked/2011/09/19/the-unfamiliar">saw it coming</a>).  They pulled garbage collection out of OSX.  Seriously, go <a
onclick="javascript:pageTracker._trackPageview('/outgoing/developer.apple.com/legacy/library/documentation/Cocoa/Conceptual/GarbageCollection/GarbageCollection.pdf');"  href="https://developer.apple.com/legacy/library/documentation/Cocoa/Conceptual/GarbageCollection/GarbageCollection.pdf">read the programming guide</a>.  It has a big fat &#8220;(Not Recommended)&#8221; right in the title. If you come from Ruby, or Python, or JavaScript, or Java, or C#, or really any language since the 1990s, this should strike you as <strong>really odd</strong>.  But it probably doesn&#8217;t affect you, because you probably don&#8217;t write ObjC for Mac, so meh, click the next link on HN.  But still, it seems <em>strange</em>.  After all, GC has been around, it&#8217;s been <strong>proven</strong>.  Why in the world would you <em>deprecate</em> it?  Here&#8217;s what Apple had to say:</p><blockquote><p>We feel so strongly about ARC being the right approach to memory management that we have decided to deprecate Garbage Collection in OSX.  - Session 101, Platforms Kickoff, 2012, ~01:13:50</p></blockquote><p>The part that the transcript doesn&#8217;t tell you is that <strong>the audience broke out into applause upon hearing this statement</strong>. Okay, now this is <strong>really freaking weird</strong>.  You mean to tell me that there&#8217;s a room full of developers <strong>applauding the return</strong> to the pre-garbage collection chaos?  Just <em>imagine</em> the pin drop if Matz announced the deprecation of GC at RubyConf.  And these guys are <strong>happy</strong> about it?  Weirdos.</p><p>Rather than write off the Apple fanboys as a cult, this <em>very odd</em> reaction should clue you in <strong>that there is more going on here than meets the eye</strong>.  And this &#8220;more going on&#8221; bit is the subject of our next line of inquiry.</p><p>So the thought process goes like this:  <strong>Pulling a working garbage collector out of a language is totally crazy, amirite?</strong>  One simple explanation is that perhaps ARC is just a special Apple marketing term for a fancypants kind of garbage collector, and so what these developers are, in fact applauding&#8211;is an <em>upgrade</em> rather than a <em>downgrade</em>.  In fact, this is a belief that a lot of iOS noobs have.</p><h3>ARC is not a garbage collector</h3><p>So to all the people who think ARC is some kind of garbage collector, I just want to beat your face in with the following Apple slide:</p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-9.44.43-PM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-9.44.43-PM.png"><img
class="alignnone  wp-image-1720" alt="Screen Shot 2013-05-14 at 9.44.43 PM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-9.44.43-PM.png" width="685" height="431" /></a></p><p>This has nothing to do with the <a
onclick="javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Reference_counting#Use_in_garbage_collection');"  href="http://en.wikipedia.org/wiki/Reference_counting#Use_in_garbage_collection">similarly-named garbage collection algorithm</a>.  It isn&#8217;t GC, it isn&#8217;t anything like GC, it performs nothing like GC, it does not have the power of GC, it does not break retain cycles, it does not sweep anything, it does not scan anything.  Period, end of story, not garbage collection.</p><p>The myth somehow grew legs when a lot of the documentation was under NDA (but the <a
onclick="javascript:pageTracker._trackPageview('/outgoing/clang.llvm.org/docs/AutomaticReferenceCounting.html');"  href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html">spec was available</a>, so that&#8217;s no excuse) and as a result the blogosphere <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.google.com/search?client=safari&amp;rls=en&amp;q=ios+5+garbage+collection&amp;ie=UTF-8&amp;oe=UTF-8#client=safari&amp;rls=en&amp;sclient=psy-ab&amp;q=%22ios+5%22+%22garbage+collection%22&amp;oq=%22ios+5%22+%22garbage+collection%22&amp;gs_l=serp.3..0i30j0i7i30l2j0i7i5i10i30.4068.5462.5.6004.2.2.0.0.0.0.222.309.1j0j1.2.0...0.0...1c.1.12.psy-ab.54dZ4wfYjzs&amp;pbx=1&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.46471029,d.eWU&amp;fp=7bc92cb06490597b&amp;biw=1920&amp;bih=960');"  href="https://www.google.com/search?client=safari&amp;rls=en&amp;q=ios+5+garbage+collection&amp;ie=UTF-8&amp;oe=UTF-8#client=safari&amp;rls=en&amp;sclient=psy-ab&amp;q=%22ios+5%22+%22garbage+collection%22&amp;oq=%22ios+5%22+%22garbage+collection%22&amp;gs_l=serp.3..0i30j0i7i30l2j0i7i5i10i30.4068.5462.5.6004.2.2.0.0.0.0.222.309.1j0j1.2.0...0.0...1c.1.12.psy-ab.54dZ4wfYjzs&amp;pbx=1&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.46471029,d.eWU&amp;fp=7bc92cb06490597b&amp;biw=1920&amp;bih=960">has widely reported it to be true</a>.  It&#8217;s not.  Just stop.</p><h3>GC is not as feasible as your experience leads you to believe</h3><p>So here&#8217;s what Apple has to say about ARC vs GC, when pressed:</p><blockquote><p>At the top of your wishlist of things we could do for you is bringing garbage collection to iOS. And that is exactly what we are not going to do… Unfortunately garbage collection has a suboptimal impact on performance. Garbage can build up in your applications and increase the high water mark of your memory usage. And the collector tends to kick in at undeterministic times which can lead to very high CPU usage and stutters in the user experience. And that&#8217;s why GC has not been acceptable to us on our mobile platforms. In comparison, manual memory management with retain/release is harder to learn, and quite frankly it&#8217;s a bit of a pain in the ass. But it produces better and more predictable performance, and that&#8217;s why we have chosen it as the basis of our memory management strategy. Because out there in the real world, high performance and stutter-free user experiences are what matters to our users. ~Session 300, Developer Tools Kickoff, 2011, 00:47:49</p></blockquote><p>But that&#8217;s totally crazy, amirite?  Just for starters:</p><ol><li><span
style="line-height: 13px;">It probably flies in the face of your entire career of experiencing the performance impact of GCed languages on the desktop and server</span></li><li>Windows Mobile, Android, MonoTouch, and the whole rest of them seem to be getting along fine with GC</li></ol><p>So let&#8217;s take them in turn.</p><h3>GC on mobile is not the same animal as GC on the desktop</h3><p>I know what you&#8217;re thinking.  You&#8217;ve been a Python developer for N years.  It&#8217;s 2013.  Garbage collection is a totally solved problem.</p><p><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www-cs.canisius.edu/~hertzm/gcmalloc-oopsla-2005.pdf');"  href="http://www-cs.canisius.edu/~hertzm/gcmalloc-oopsla-2005.pdf">Here is the paper</a> you were looking for.  <strong>Turns out it&#8217;s not so solved</strong>: <a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-10.15.29-PM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-10.15.29-PM.png"><img
class="alignnone size-full wp-image-1721" alt="Screen Shot 2013-05-14 at 10.15.29 PM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-14-at-10.15.29-PM.png" width="652" height="483" /></a></p><p><strong>If you remember nothing else from this blog post,</strong> <em><span
style="text-decoration: underline;"><strong>remember this chart</strong></span></em>.  The Y axis is time spent collecting garbage.  The X axis is &#8220;relative memory footprint&#8221;.  Relative to what?  Relative to the <strong>minimum amount of memory required</strong>.</p><p>What this chart says is &#8220;As long as you have about 6 times as much memory as you really need, you&#8217;re fine.  <strong>But woe betide you if you have less than 4x the required memory</strong>.&#8221; But don&#8217;t take my word for it:</p><blockquote><p>In particular, when garbage collection has five times as much memory as required, its runtime performance matches or slightly exceeds that of explicit memory management. However, garbage collection’s performance degrades substantially when it must use smaller heaps. With three times as much memory, it runs 17% slower on average, and with twice as much memory, it runs 70% slower. Garbage collection also is more susceptible to paging when physical memory is scarce. In such conditions, all of the garbage collectors we examine here <strong>suffer order-of-magnitude performance penalties relative to explicit memory management</strong>.</p></blockquote><p>Now let&#8217;s compare with explicit memory management strategies:</p><blockquote><p>These graphs show that, for reasonable ranges of available memory (but not enough to hold the entire application), <strong>both explicit memory managers substantially outperform all of the garbage collectors</strong>. For instance, pseudoJBB running with 63MB of available memory and the Lea allocator completes in 25 seconds. With the same amount of available memory and using GenMS, it takes <strong>more than ten times longer to complete</strong> (255 seconds). We see similar trends across the benchmark suite. The most pronounced case is 213 javac: at 36MB with the Lea allocator, total execution time is 14 seconds, while with GenMS, total execution time is 211 seconds, over a 15-fold increase.</p></blockquote><p>The ground truth is that <span
style="text-decoration: underline;">in a memory constrained environment</span><strong> </strong>garbage collection performance degrades exponentially.  If you write Python or Ruby or JS that runs on desktop computers, it&#8217;s possible that <strong>your entire experience is in the right hand of the chart</strong>, and you can go your whole life without ever experiencing a slow garbage collector.  Spend some time on the left side of the chart and see what the rest of us deal with.</p><h3>How much memory is available on iOS?</h3><p>It&#8217;s hard to say exactly.  The physical memory on the devices vary pretty considerably&#8211;from 512MB on the iPhone 4 up to 1GB on the iPhone 5.  But a lot of that is reserved for the system, and still more of it is reserved for multitasking.  Really the only way to find out is to try it under various conditions.  Jan Ilavsky <a
onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/split82/iOSMemoryBudgetTest');"  href="https://github.com/split82/iOSMemoryBudgetTest">helpfully wrote a utility</a> to do it, but it seems that nobody publishes any statistics.  That changes today.</p><p>Now it&#8217;s important to do this under &#8220;normal&#8221; conditions (whatever that means), because if you do it from a fresh boot or back-to-back, you will get better results since you don&#8217;t have pages open in Safari and such.  So I literally grabbed devices under the &#8220;real world&#8221; condition of lying around my apartment somewhere to run this benchmark.</p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Photo-May-14-10-53-53-PM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Photo-May-14-10-53-53-PM.png"><img
class="alignnone size-medium wp-image-1723" alt="Photo May 14, 10 53 53 PM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Photo-May-14-10-53-53-PM-200x300.png" width="200" height="300" /></a><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Photo-May-14-10-51-13-PM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Photo-May-14-10-51-13-PM.png"><img
class="alignnone size-medium wp-image-1722" alt="Photo May 14, 10 51 13 PM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Photo-May-14-10-51-13-PM-225x300.png" width="225" height="300" /></a></p><p>You can click through to see the detailed results but essentially on the iPhone 4S, you start getting warned around 40MB and you get killed around 213MB.  On the iPad 3, you get warned around 400MB and you get killed around 550MB.  Of course, these are just my numbers&#8211;if your users are listening to music or running things in the background, you may have considerably less memory than you do in my results, but this is a start. This seems like a lot (213mb should be enough for everyone, right?) but as a practical matter it isn&#8217;t.  For example, the iPhone 4S snaps photos at 3264&#215;2448 resolution.   That&#8217;s over 30 megabytes of bitmap data per photo.  That&#8217;s a warning for having <strong>just two photos in memory</strong> and you get killed for having <strong>7 photos in RAM</strong>.  Oh, you were going to write a for loop that iterated over an album?  Killed.</p><p>It&#8217;s important to emphasize too that as a practical matter you often have the same photo in memory multiple places.  For example, if you are taking a photo, you have 1) The camera screen that shows you what the camera sees, 2) the photo that the camera actually took, 3) the buffer that you&#8217;re trying to fill with compressed JPEG data to write to disk, 4) the version of the photo that you&#8217;re preparing for display in the next screen, and 5) the version of the photo that you&#8217;re uploading to some server.  </p><p>At some point it will occur to you that keeping 30MB buffers open to display a photo thumbnail is a really bad idea, so you will introduce 6) the buffer that is going to hold a smaller photo suitable for display in the next screen, 7) the buffer that resizes the photo in the background because it is too slow to do it in the foreground.  And then you will discover that you really need five different sizes, and thus begins the slow descent into madness.  It&#8217;s not uncommon to hit memory limits dealing just with a <strong>single photograph</strong> in a real-world application. But don&#8217;t take my word for it:</p><blockquote><p>The worst thing that you can do as far as your memory footprint is to cache images in memory.  When an image is drawn into a bitmap context or displayed to a screen, we actually have to decode that image into a bitmap.  That bitmap is 4 bytes per pixel, no matter how big the original image was.  And as soon as we&#8217;ve decoded it once, that bitmap is attached to the image object, and will then persist for the lifetime of the object.  So if you&#8217;re putting images into a cache, and they ever get displayed, you&#8217;re now holding onto that entire bitmap until you release it.  So never put UIImages or CGImages into a cache, unless you have a very clear (and hopefully very short-term) reason for doing so.  - Session 318, iOS Performance In Depth, 2011</p></blockquote><p>Don&#8217;t even take his word for it!  The amount of memory you allocate yourself is just the tip of the iceberg.  No honest, here&#8217;s the actual iceberg slide from Apple.  Session 242, iOS App Performance &#8211; Memory, 2012:</p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Screen-Shot-2013-05-15-at-5.39.12-AM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-15-at-5.39.12-AM.png"><img
class="alignnone size-medium wp-image-1733" alt="Screen Shot 2013-05-15 at 5.39.12 AM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Screen-Shot-2013-05-15-at-5.39.12-AM-300x187.png" width="300" height="187" /></a></p><p>And you&#8217;re burning the candle from both ends.  Not only is it much harder to deal with photos if you have 213MB of usable RAM than it is on a desktop.  But there is also a lot more demand to write photo-processing applications, <strong>because your desktop does not have a great camera attached to it that fits in your pocket</strong>.</p><p>Let&#8217;s take another example.  On the iPad 3, you are driving a display that probably has more pixels in it than the display on your desktop (it&#8217;s between 2K and 4K resolution, in the ballpark with pro cinema).  Each frame that you show on that display is a 12MB bitmap.  If you&#8217;re going to be a good memory citizen you can store roughly 45 frames of uncompressed video or animation buffer in memory at a time, which is about 1.5 seconds at 30fps, or .75 seconds at the system&#8217;s 60Hz.  Accidentally buffer a second of full-screen animation?  App killed.  And it&#8217;s worth pointing out, <a
onclick="javascript:pageTracker._trackPageview('/outgoing/stackoverflow.com/questions/9997882/detecting-the-airplay-latency');"  href="http://stackoverflow.com/questions/9997882/detecting-the-airplay-latency">the latency of AirPlay is 2 seconds</a>, so for any kind of media application, you are actually <strong>guaranteed to not have enough memory</strong>.</p><p>And we are in roughly the same situation here that we are in with the multiple copies of the photos.  For example, <a
onclick="javascript:pageTracker._trackPageview('/outgoing/developer.apple.com/library/ios/#qa/qa1708/_index.html');"  href="http://developer.apple.com/library/ios/#qa/qa1708/_index.html">Apple says</a> that &#8220;Every UIView is backed with a CALayer and images as layer contents remain in memory as long as the CALayer stays in the hierarchy.&#8221;  What this means, essentially, is that there can be many intermediate renderings&#8211;essentially copies&#8211;of your view hierarchy that are stored in memory.  </p><p>And there are also things like clipping rects, and backing stores.  It&#8217;s a remarkably efficient architecture as far as CPU time goes, but it achieves that performance essentially at the cost of gobbling as much memory as possible.  iOS is <em>not architected to be low-memory&#8211;it&#8217;s optimized to be fast</em>. Which just doesn&#8217;t mix with garbage collection.</p><p>We are also in the same situation about burning the candle from both ends.  Not only are you in an incredibly memory-constrained environment for doing animations.  But there is also a huge demand to do super high-quality video and animation, because this awful, memory-constrained environment is literally the only form factor in which a consumer-class pro-cinema-resolution display can be purchased. If you want to write software that runs on a comparable display, you have to convince somebody to shell out <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.cdw.com/shop/products/HP-ZR2740w-LED-monitor-27in-Smart-Buy/2501971.aspx');"  href="http://www.cdw.com/shop/products/HP-ZR2740w-LED-monitor-27in-Smart-Buy/2501971.aspx">$700</a> just for the monitor. Or, they could spend $500, and get an iPad, with the computer already built in.</p><h3>Will we get more memory? (UPDATE)</h3><p>Some smart people have said &#8220;OK, you talk a lot about how we won&#8217;t get faster CPUs. But we can get more memory, right? It happened on desktop.&#8221;</p><p>One problem with this theory is that with ARM the memory <strong>is on the processor itself</strong>. It&#8217;s called <a
onclick="javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Package_on_package');"  href="http://en.wikipedia.org/wiki/Package_on_package">package on package</a>. So the problems with getting more memory on ARM are actually <em>very analogous</em> to the problems of improving the CPU, because at the end of the day it boils down to the same thing: packing more transistors on the CPU package. Memory transistors are a little easier to work with, because they are uniform, so it&#8217;s not quite as hard. But it&#8217;s still hard.</p><p>If you look at iFixit&#8217;s <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.ifixit.com/Teardown/Apple+A6+Teardown/10528/2');"  href="http://www.ifixit.com/Teardown/Apple+A6+Teardown/10528/2">picture of the A6</a>, you see that at the moment almost 100% of the top silicon on the CPU die is memory. What this means is that <strong>to have more memory, you need either a process shrink or a bigger die</strong>. In fact, if you normalize for process size, the &#8220;die&#8221; gets bigger every time there&#8217;s a memory upgrade:</p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/07/tumblr_mcaie92rL11qbs1hto1_400.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/07/tumblr_mcaie92rL11qbs1hto1_400.png"><img
src="http://sealedabstract.com/wp-content/uploads/2013/07/tumblr_mcaie92rL11qbs1hto1_400.png" alt="normalized die size for iPhone chips" width="366" height="363" class="alignnone size-full wp-image-1931" /></a></p><p>Silicon is an imperfect material, and bigger &#8220;good&#8221; pieces are exponentially expensive. They are also harder to keep cool and harder to fit in small devices. And they also have a lot of overlap with the problem of making better CPUs, because that is exactly what memory is: a top layer of CPU silicon that needs more transistors.</p><p>What I <strong>don&#8217;t</strong> know is why, in the face of these problems with PoP, manufacturers continue to use package-on-package delivery for system memory. I haven&#8217;t found an ARM engineer who can explain it to me yet. Perhaps one will show up in the comments. It may be that we could move away from PoP architecture and toward separate memory modules like you have in computers. But I suspect that it is not feasible, for the simple reason that breaking the memory into separate modules would almost certainly be cheaper to manufacture than bigger chips or process shrinks, yet every single manufacturer keeps doing process shrinks or bigger chips rather than moving memory modules off the die.</p><p>However, some smart engineers have e-mailed me to fill in some blanks.</p><p>An ex-Intel engineer:</p><blockquote><p>As for PoP memory, it&#8217;s a huge boost for latency and eases routing concerns. But I&#8217;m not an ARM guy, can&#8217;t say if that&#8217;s the full story.</p></blockquote><p>A robotics engineer:</p><blockquote><p>When PoP memory will not be enough, &#8220;3D&#8221; memory will be able to &#8220;give enough memory for everybody&#8221; : chips of memory stacked together as they are manufactured, with possibility to place 10+ layers of 1GB RAM in the same volume as current hardware. But : cost will be higher, frequency or voltage will have to drop to stay in the power limit.</p><p>Mobile RAM bandwidth will not continue to increase as much as it did recently. Bandwidth is limited by the number of lines linking the SoC and the RAM package. Currently, most of the periphery of high performing SoC is used for RAM bus lines. The middle of SoC can&#8217;t be used to add RAM lines due to the way the packages are stacked. Next big improvement will come from single package highly integrated SoC &amp; memory : SoC &amp; memory will be engineered together and stacked in the same package, allowing for much smaller, denser and numerous RAM lines (more bandwidth), more freedom for SoC design and possibly lower RAM voltage. With this type of design, bigger caches may be a possibility as some RAM may be put in the SoC die with even higher bandwidth.</p></blockquote><h3>But then how does Mono/Android/Windows Mobile do it?</h3><p>There are really two answers to this question.  The first answer we can see from the chart.  If you find yourself with 6 times as much memory as you need, garbage collection is actually going to be pretty fast.  So for example, if you are writing a text editor, you might realistically be able to do everything you want in only 35MB, which is 1/6th the amount of memory before my iPhone 4S crashes.  And you might write that text editor in Mono, see reasonable performance, and conclude from this exercise that garbage collectors are perfectly fine for this task, and you&#8217;d be right.</p><p>Yeah but Xamarin has <a
onclick="javascript:pageTracker._trackPageview('/outgoing/xamarin.com/apps/app/infinite_flight_app');"  href="http://xamarin.com/apps/app/infinite_flight_app">flight simulators in the showcase</a>!  So clearly, the idea that garbage collectors are infeasible for larger apps flies in the face of real-life, large, garbage-collected mobile apps.  <a
onclick="javascript:pageTracker._trackPageview('/outgoing/conversations.nokia.com/2012/06/01/interview-with-matthieu-laban-infinite-flight-ceo/');"  href="http://conversations.nokia.com/2012/06/01/interview-with-matthieu-laban-infinite-flight-ceo/">Or does it</a>?</p><blockquote><p>What sort of problems do you have to overcome when developing/maintaining this game? “Performance has been a big issue and continues to be one of the biggest problems we have across platforms. The original Windows Phone devices were pretty slow and we had to spend a lot of time optimising the app to get a descent frame rate. Optimisations were done both on the flight sim code as well as the 3D engine. The biggest bottlenecks were <strong>garbage collection</strong> and the weaknesses of the GPU.”</p></blockquote><p>Totally unprompted, the developers bring up garbage collection as the biggest bottleneck.  When the people <span
style="text-decoration: underline;">in your showcase</span> are complaining, that would be <strong>a clue</strong>. But maybe Xamarin is an outlier.  Let&#8217;s <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.war-worlds.com/blog/2012/06/on-android-garbage-collection-can-kill-you');"  href="http://www.war-worlds.com/blog/2012/06/on-android-garbage-collection-can-kill-you">check in</a> on the Android developers:</p><blockquote><p>Now, keep in mind these are running my Galaxy Nexus &#8212; not a slow device by any stretch of the imagination. <em>But check out the rendering times!</em> While I was able to render these images in a couple of hundred milliseconds on my desktop, they were taking almost <strong>two orders of magnitude longer on the device</strong>! Over 6 seconds for the &#8220;inferno&#8221;? Crazy!  &#8230; That&#8217;s 10-15 times the garbage collector would run to generate one image.</p></blockquote><p>Another <a
onclick="javascript:pageTracker._trackPageview('/outgoing/nhenze.net/?p=349');"  href="http://nhenze.net/?p=349">one</a>:</p><blockquote><p>If you want to process camera images on Android phones for real-time object recognition or content based Augmented Reality <strong>you probably heard about</strong> the Camera Preview Callback memory Issue. Each time your Java application gets a preview image from the system a new chunk of memory is allocated. When this memory chunk gets freed again by the Garbage Collector the system freezes for 100ms-200ms. This is especially bad if the system is under heavy load (I do object recognition on a phone – hooray it eats as much CPU power as possible). If you browse through Android’s 1.6 source code you realize that this is only because the wrapper (that protects us from the native stuff) allocates a new byte array each time a new frame is available. <strong>Build-in native code can, of course, avoid this issue</strong>.</p></blockquote><p>Or, we can consult <a
onclick="javascript:pageTracker._trackPageview('/outgoing/stackoverflow.com/questions/2484079/how-can-i-avoid-garbage-collection-delays-in-java-games-best-practices');"  href="http://stackoverflow.com/questions/2484079/how-can-i-avoid-garbage-collection-delays-in-java-games-best-practices">Stack Overflow</a>:</p><blockquote><p>I&#8217;m performance tuning interactive games in Java for the Android platform. Once in a while there is a hiccup in drawing and interaction for garbage collection. Usually it&#8217;s less than one tenth of a second, but sometimes it can be as large as 200ms on very slow devices&#8230; If I ever want trees or hashes in an inner loop I know that I need to be careful or even reimplement them instead of using the Java Collections framework since I can&#8217;t afford the extra garbage collection.</p></blockquote><p>Here&#8217;s the &#8220;accepted answer&#8221;, 27 votes:</p><blockquote><p>I&#8217;ve worked on Java mobile games&#8230; The best way to avoid GC&#8217;ing objects (which in turn shall trigger the GC at one point or another and shall kill your game&#8217;s perfs) is simply to avoid creating them in your main game loop in the first place. There&#8217;s no &#8220;clean&#8221; way to deal with this&#8230; <strong>Manual tracking of objects, sadly</strong>. This how it&#8217;s done on most current well-performing Java games that are out on mobile devices.</p></blockquote><p>Let&#8217;s check in with <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.crazybob.org/2011/12/truth-about-android-ios-ui-performance.html#1303002139217506150');"  href="http://blog.crazybob.org/2011/12/truth-about-android-ios-ui-performance.html#1303002139217506150">Jon Perlow</a> of Facebook:</p><blockquote><p>GC is a huge performance problem for developing smooth android applications. At Facebook, one of the biggest performance problems we deal with is GCs pausing the UI thread. When dealing with lots of Bitmap data, GCs are frequent and hard to avoid. A single GC often results in dropped frames. Even if a GC only blocks the UI thread for a few milliseconds, it can significantly eat into the 16ms budget for rendering a frame.</p></blockquote><p>Okay, let&#8217;s check in with a <a
onclick="javascript:pageTracker._trackPageview('/outgoing/geekswithblogs.net/mikebmcl/archive/2010/07/30/wp7-xna-the-gc-and-you-and-silverlight-too.aspx');"  href="http://geekswithblogs.net/mikebmcl/archive/2010/07/30/wp7-xna-the-gc-and-you-and-silverlight-too.aspx">Microsoft MVP</a>:</p><blockquote><p>Normally your code will complete just fine within the 33.33 milliseconds, thereby maintaining a nice even 30FPS&#8230; However when the GC runs, it eats into that time. If you’ve kept the heap nice and simple &#8230;, the GC will run nice and fast and this likely won’t matter. But keeping a simple heap that the GC can run through quickly is a <strong>difficult programming task that requires a lot of planning and/or rewriting and even then isn’t fool proof</strong> (sometimes you just have a lot of stuff on the heap in a complex game with many assets). Much simpler, assuming you can do it, is to limit or <strong>even eliminate all allocations during gameplay</strong>.</p></blockquote><p>With garbage collection, <strong>the winning move is not to play</strong>.  A weaker form of this &#8220;the winning move is not to play&#8221; philosophy is <a
onclick="javascript:pageTracker._trackPageview('/outgoing/developer.android.com/training/articles/perf-tips.html');"  href="http://developer.android.com/training/articles/perf-tips.html">embedded in the official Android documentation</a>:</p><blockquote><p>Object creation is never free. A generational garbage collector with per-thread allocation pools for temporary objects can make allocation cheaper, but allocating memory is always more expensive than not allocating memory. As you allocate more objects in your app, you will force a periodic garbage collection, creating little &#8220;hiccups&#8221; in the user experience. The concurrent garbage collector introduced in Android 2.3 helps, but unnecessary work should always be avoided. Thus, you should avoid creating object instances you don&#8217;t need to&#8230; Generally speaking, avoid creating short-term temporary objects if you can. Fewer objects created mean less-frequent garbage collection, which has a direct impact on user experience.</p></blockquote><p>Still not convinced?  Let&#8217;s ask an <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blogs.msdn.com/b/abhinaba/archive/2009/03/02/back-to-basics-generational-garbage-collection.aspx');"  href="http://blogs.msdn.com/b/abhinaba/archive/2009/03/02/back-to-basics-generational-garbage-collection.aspx">actual Garbage Collection engineer</a>. Who writes garbage collectors. For mobile devices. For a living. You know, the person whose <em>job it is</em> to know this stuff.</p><blockquote><p>However, with WP7 the capability of the device in terms of CPU and memory drastically increased. Games and large Silverlight applications started coming up which used close to 100mb of memory. As memory increases the number of references those many objects can have also <strong>increases exponentially</strong>. In the scheme explained above the GC has to traverse each and every object and their reference to mark them and later remove them via sweep. So the GC time also increases drastically and becomes a function of the net workingset of the application. This results in very large pauses in case of large XNA games and SL applications which finally manifests as long startup times (as GC runs during startup) or glitches during the game play/animation.</p></blockquote><p>Still not convinced?  Chrome <a
onclick="javascript:pageTracker._trackPageview('/outgoing/v8.googlecode.com/svn/branches/bleeding_edge/benchmarks/spinning-balls/index.html');"  href="http://v8.googlecode.com/svn/branches/bleeding_edge/benchmarks/spinning-balls/index.html">has a benchmark</a> that measures GC performance.  Let&#8217;s see how it does&#8230;</p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2013/05/Photo-May-15-2-19-26-AM.png');"  href="http://sealedabstract.com/wp-content/uploads/2013/05/Photo-May-15-2-19-26-AM.png"><img
class="alignnone  wp-image-1730" alt="Photo May 15, 2 19 26 AM" src="http://sealedabstract.com/wp-content/uploads/2013/05/Photo-May-15-2-19-26-AM-1024x768.png" width="717" height="538" /></a></p><p>That is a <strong>lot</strong> of GC pauses.  Granted, this is a stress test&#8211;but still.  You really want to wait a full second to render that frame?  I think you&#8217;re nuts.</p><h3>Look, that&#8217;s a lot of quotes, I&#8217;m not reading all that.  Get to the point.</h3><p>Here&#8217;s the point: memory management is <strong>hard</strong> on mobile.  iOS has formed a culture around doing most things manually and trying to make the compiler do some of the easy parts.  Android has formed a culture around improving a garbage collector that they try very hard not to use in practice.  But either way, everybody spends a lot of time thinking about memory management when they write mobile applications.  There&#8217;s just no substitute for <strong>thinking about memory</strong>.  Like, a <em><span
style="text-decoration: underline;"><strong>lot</strong></span></em>.</p><p>When JavaScript people or Ruby people or Python people hear &#8220;garbage collector&#8221;, they understand it to mean &#8220;<em>silver bullet</em> garbage collector.&#8221;  They mean &#8220;garbage collector that frees me from thinking about managing memory.&#8221;  But there&#8217;s no silver bullet on mobile devices. <strong>Everybody thinks about memory on mobile, whether they have a garbage collector or not</strong>.  The only way to get &#8220;silver bullet&#8221; memory management is the same way we do it on the desktop&#8211;by having 10x more memory than your program really needs.</p><p>JavaScript&#8217;s whole design is based around not worrying about memory.  <a
onclick="javascript:pageTracker._trackPageview('/outgoing/groups.google.com/forum/?fromgroups=#!topic/chromium-extensions/XcS-RuQ0EWo');"  href="https://groups.google.com/forum/?fromgroups=#!topic/chromium-extensions/XcS-RuQ0EWo">Ask the Chromium developers</a>:</p><blockquote><p>is there any way to force the chrome js engine to do Garbage Collection?  In general, no, by design.</p></blockquote><p>The ECMAScript <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf');"  href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf">specification</a> does not contain the word &#8220;allocation&#8221;, the only reference to &#8220;memory&#8221; essentially says that the entire subject is &#8220;host-defined&#8221;.  </p><p>The ECMA 6 wiki has <a
onclick="javascript:pageTracker._trackPageview('/outgoing/wiki.ecmascript.org/doku.php?id=strawman:gc_semantics&amp;s=garbage+collector');"  href="http://wiki.ecmascript.org/doku.php?id=strawman:gc_semantics&amp;s=garbage+collector">several pages of draft proposal</a> that boil down to, and I am not kidding,</p><blockquote><p>&#8220;the garbage collector MUST NOT collect any storage that then becomes needed to continue correct execution of the program&#8230; All objects which are not transitively strongly reachable from roots SHOULD eventually be collected, if needed to prevent the program execution from failing due to memory exhaustion.&#8221;</p></blockquote><p>Yes, they actually are thinking about specifying this: a garbage collector should not collect things that it should not collect, but it should collect things it needs to collect.  <a
onclick="javascript:pageTracker._trackPageview('/outgoing/xkcd.com/703/');"  href="http://xkcd.com/703/">Welcome to tautology club</a>.  But perhaps more relevant to our purpose is this quote:</p><blockquote><p>However, there is no spec of how much actual memory any individual object occupies, <span
style="text-decoration: underline;"><strong>nor is there likely to be</strong></span>. Thus we never have any guarantee when any program may exhaust its actual raw memory allotment, so all lower bound expectations are not precisely observable.</p></blockquote><p>In English: the philosophy of JavaScript (to the extent that it has any philosophy) is that <strong>you should not be able to observe what is going on in system memory, full stop</strong>.  This is so <strong>unbelievably</strong> out of touch with how real people write mobile applications, I can&#8217;t even find the words to express it to you.  I mean, in iOS world, we don&#8217;t believe in garbage collectors, and we think the Android guys are nuts.  I suspect that the Android guys think the iOS guys are nuts for manual memory management.  But you know what the two, cutthroat opposition camps can agree about?  <strong>The JavaScript folks are really nuts</strong>.  There is absolutely zero chance that you can write reasonable mobile code without worrying about what is going on in system memory, in some capacity.  None. And so putting the whole question of SunSpider benchmarks and CPU-bound stuff fully aside, we arrive at the conclusion that <strong>JavaScript, at least as it stands today, is fundamentally opposed to the think-about-memory-philosophy that is absolutely required for mobile software development</strong>.  </p><p>As long as people keep wanting to push mobile devices into these video and photo applications where desktops haven&#8217;t even been, and as long as mobile devices have a lot less memory to work with, the problem is just intractable.  You need <em>serious, formal memory management guarantees</em> on mobile.  And JavaScript, <strong>by design, refuses</strong> to provide them.</p><h2>Suppose it did</h2><p>Now you might say, &#8220;Okay. The JS guys are off in Desktop-land and are out of touch with mobile developers&#8217; problems. But suppose they were convinced. Or, suppose somebody who actually <em>was</em> in touch with mobile developers&#8217; problems forked the language. Is there something that can be done about it, in theory?&#8221;</p><p>I am not sure if it is solvable, but I can put some bounds on the problem. There is another group that has tried to fork a dynamic language to meet the needs of mobile developers&#8211;and <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.rubymotion.com');"  href="http://www.rubymotion.com">it&#8217;s called RubyMotion</a>.</p><p>So these are smart people, who know a lot about Ruby. And these <em>Ruby</em> people decided that garbage collection for their fork was A Bad Idea. (Hello GC advocates? Can you hear me?). So they have a thing that is a lot like ARC that they use instead, that they have sort of grafted on to the language. Turns out it <a
onclick="javascript:pageTracker._trackPageview('/outgoing/joshsymonds.com/blog/2013/06/26/why-im-not-using-rubymotion-in-production/');"  href="http://joshsymonds.com/blog/2013/06/26/why-im-not-using-rubymotion-in-production/">doesn&#8217;t work</a>:</p><blockquote><p>Summary: lots of people are experiencing memory-related issues that are a result of RM-3 or possibly some other difficult-to-identify problem with RubyMotion’s memory management, and they’re coming forward and talking about them.</p></blockquote><p>Ben Sheldon <a
onclick="javascript:pageTracker._trackPageview('/outgoing/groups.google.com/forum/#!topic/rubymotion/x6-9c__IHH0');"  href="https://groups.google.com/forum/#!topic/rubymotion/x6-9c__IHH0">weighs in</a>:</p><blockquote><p>It&#8217;s not just you. I&#8217;m experiencing these memory-related types of crashes (like SIGSEGV and SIGBUS) with about 10-20% of users in production.</p></blockquote><p>There&#8217;s some skepticism about whether the problem is tractable:</p><blockquote><p>I raised the question about RM-3 on the recent Motion Meetup and Laurent/Watson both responded (Laurent on camera, Watson in IRC). Watson mentioned that RM-3 is the toughest bug to fix, and Laurent discussed how he tried a few approaches but was never happy with them. Both devs are smart and strong coders, so I take them at their word.</p></blockquote><p>There&#8217;s some skepticism about whether the compiler can even solve it in theory:</p><blockquote><p>For a long while, I believed blocks could simply be something handled specifically by the compiler, namely the contents of a block could be statically analyzed to determine if the block references variables outside of its scope. For all of those variables, I reasoned, the compiler could simply retain each of them upon block creation, and then release each of them upon block destruction. This would tie the lifetime of the variables to that of the block (not the &#8216;complete&#8217; lifetime in some cases, of course). One problem: instance_eval. The contents of the block may or may not be used in a way you can expect ahead of time.</p></blockquote><p>RubyMotion also has <a
onclick="javascript:pageTracker._trackPageview('/outgoing/hipbyte.myjetbrains.com/youtrack/issue/RM-32');"  href="http://hipbyte.myjetbrains.com/youtrack/issue/RM-32">the opposite problem</a>: it leaks memory. And maybe it has other problems. Nobody really knows if the crashes and leaks have 2 causes, or 200 causes. All we know is that people report both. A lot.</p><p>So anyway, here&#8217;s where we&#8217;re at: some of the best Ruby developers in the world have forked the language specifically for use on mobile devices, and they have designed a system that both crashes and leaks, which is the complete set of memory errors that you could possibly experience. So far they have not been able to do anything about it, although they have undoubtedly been trying very hard. Oh, and they are reporting that they &#8220;personally tried a few times to fix it, but wasn&#8217;t able to come with a good solution that would also perserve performance.&#8221;</p><p>I&#8217;m not saying forking JavaScript to get reasonable memory performance is impossible. I&#8217;m just saying there&#8217;s a lot of evidence that suggests the problem is <em>really hard</em>.</p><p>Update: A Rust contributor weighs in:</p><blockquote><p>I&#8217;m a contributor to the Rust project, whose goal is zero-overhead memory safety. We support GC&#8217;d objects via &#8220;@-boxes&#8221; (the type declaration is &#8220;@T&#8221; for any type T), and one thing we have been struggling with recently is that GC <em>touches everything in a language</em>. If you want to support GC but not require it, you need to very carefully design your language to support zero-overhead non-GC&#8217;d pointers. It&#8217;s a very non-trivial problem, and <strong>I don&#8217;t think it can be solved by forking JS</strong>.</p></blockquote><h3>Okay but what about asm.js</h3><p>asm.js is kind of interesting because it provides a JavaScript model that doesn&#8217;t, strictly speaking, rely on garbage collection.  So in theory, with the right web browser, with the right APIs, it could be <em>okay</em>. The question is, &#8220;will we get the right browser?&#8221;</p><p>Mozilla is obviously sold on the concept, being the authors of the technology, and their implementation is landing later this year. Chrome&#8217;s reaction has been more mixed.  It obviously competes with Google&#8217;s other proposals&#8211;Dart and PNaCl.  There&#8217;s a <a
onclick="javascript:pageTracker._trackPageview('/outgoing/code.google.com/p/v8/issues/detail?id=2599');"  href="http://code.google.com/p/v8/issues/detail?id=2599">bug open about it</a>, but one of the V8 hackers <a
onclick="javascript:pageTracker._trackPageview('/outgoing/mrale.ph/blog/2013/03/28/why-asmjs-bothers-me.html');"  href="http://mrale.ph/blog/2013/03/28/why-asmjs-bothers-me.html">doesn&#8217;t like it</a>.  With regard to the Apple camp, as best as I can tell, the WebKit folks are <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.google.com/search?client=safari&amp;rls=en&amp;q=site:https://lists.webkit.org/pipermail/webkit-dev/+%22asm.js%22&amp;ie=UTF-8&amp;oe=UTF-8');"  href="https://www.google.com/search?client=safari&amp;rls=en&amp;q=site:https://lists.webkit.org/pipermail/webkit-dev/+%22asm.js%22&amp;ie=UTF-8&amp;oe=UTF-8">completely silent</a>.  IE?  I wouldn&#8217;t get my hopes up.</p><p>Anyway, it&#8217;s not really clear why this is the One True Fixed JavaScript that will clearly beat all the competing proposals.  In addition, if it did win&#8211;it really wouldn&#8217;t be JavaScript.  After all, the whole reason it&#8217;s viable is that it potentially pries away that pesky garbage collector.  Thus it could be viable with a C/C++ frontend, or some other manual-memory language.  But it&#8217;s definitely not the same dynamic language we know and love today.</p><h1>Slow relative to WHAT</h1><p>One of the problems with these &#8220;X is slow&#8221; vs &#8220;X is not slow&#8221; articles is that nobody ever really states what their frame of reference is.  If you&#8217;re a web developer, &#8220;slow&#8221; means something different than if you&#8217;re a high-performance cluster developer, means something different if you&#8217;re an embedded developer, etc.  Now that we&#8217;ve been through the trenches and done the benchmarks, I can give you <strong>three frames of reference</strong> that are both <strong>useful</strong> and <strong>approximately correct</strong>.</p><p><strong>If you are a web developer</strong>, think about the iPhone 4S Nitro as IE8, as it benchmarks in the same class.  That gets you in the correct frame of mind to write code for it.  JS should be used very sparingly, or you will face numerous platform-specific hacks to make it perform.  Some apps will just not be cost-effective to write for it, even though it&#8217;s a popular browser.</p><p><strong>If you are an x86 C/C++ developer</strong>, think about the iPhone 4S web development as a C environment that runs at 1/50th the speed of its desktop counterpart.  Per the benchmarks, you incur a 10x performance penalty for being ARM, and another 5x performance penalty for being JavaScript. Now weigh the pros and cons of working in a non-JavaScript environment that is merely 10x slower than the desktop.</p><p><strong>If you are a Java, Ruby, Python, C# developer</strong>, think about iPhone 4S web development in the following way.  It&#8217;s a computer that runs 10x slower than you expect (since ARM) and performance degrades exponentially if your memory usage goes above 35MB at any point, because that is how garbage collectors behave on the platform.  Also, you get killed if at any point you allocate 213MB.  And nobody will give you any information about this at runtime &#8220;by design&#8221;.  Oh, and people keep asking you to write high-memory photo-processing and video applications in this environment.</p><h1>This is a really long article</h1><p>So here&#8217;s what you should remember:</p><ul><li><span
style="line-height: 13px;">Javascript is too slow for mobile app use in 2013 (e.g., for photo editing etc.).  </span><ul><li><span
style="line-height: 13px;">It&#8217;s slower than native code by about 5</span></li><li>It&#8217;s comparable to IE8</li><li>It&#8217;s slower than x86 C/C++ by about 50</li><li>It&#8217;s slower than server-side Java/Ruby/Python/C# by a factor of about 10 if your program fits in 35MB, and it degrades exponentially from there</li></ul></li><li>The most viable path for it to get faster is by pushing the hardware to desktop-level performance.  This might be viable long-term, but it&#8217;s looking like a pretty long wait.</li><li>The language itself doesn&#8217;t seem to be getting faster these days, and people who are working on it are saying that with the current language and APIs, it will never be as fast as native code</li><li>Garbage collection is exponentially bad in a memory-constrained environment.  It is way, way worse than it is in desktop-class or server-class environments.</li><li>Every competent mobile developer, whether they use a GCed environment or not, spends a great deal of time thinking about the memory performance of the target device</li><li>JavaScript, as it currently exists, is fundamentally opposed to even allowing developers to think about the memory performance of the target device</li><li>If they did change their minds and allowed developers to think about memory, experience suggests this is a technically hard problem.</li><li>asm.js show some promise, but even if they win you will be using C/C++ or similar &#8220;backwards&#8221; language as a frontend, rather than something dynamic like JavaScript</li></ul><h1>Let&#8217;s raise the level of discourse</h1><p>I have no doubt that I am about to receive a few hundred emails that quote one of these &#8220;bullet points&#8221; and disagree with them, without either reference to any of the actual longform evidence that I&#8217;ve provided&#8211;or really an appeal to any evidence at all, other than &#8220;one time I wrote a word processor and it was fine&#8221; or &#8220;some people I&#8217;ve never met wrote a flight simulator and have never e-mailed me personally to talk about their performance headaches.&#8221;  I will delete those e-mails.</p><p>If we are going to make any progress on the mobile web, or on native apps, or really on anything at all&#8211;we need to have conversations that at least <strong>appear</strong> to have a plausible basis in <em>facts of some kind</em>&#8211;benchmarks, journals, quotes from compiler authors, whatever.  There have been enough HN comments about &#8220;I wrote a web app one time and it was fine&#8221;.  There has been enough bikeshedding about whether Facebook was right or wrong to choose HTML5 or native apps knowing what they would have known then what they could have known now.</p><p>The task that remains for us is to <strong>quantify specifically</strong> how both the mobile web and the native ecosystem can get better, and then, you know, do something about it.  You know&#8211;what software developers <em>do</em>.</p><hr
/><p>Thanks for making it all the way to the end of this article! If you enjoyed this read, <strong>you should <a
onclick="javascript:pageTracker._trackPageview('/outgoing/twitter.com/drewcrawford');"  href="http://twitter.com/drewcrawford">follow me on Twitter (@drewcrawford)</a></strong>, <a
onclick="javascript:pageTracker._trackPageview('/mailto/drew@sealedabstract.com');"  href="mailto:drew@sealedabstract.com">send me an email</a>, subscribe via RSS, or leave a comment, and share my writing with your friends. It takes many, many hours to write and research this sort of article, and all I get in return are the kind words of my readers. I have many articles of similar depth at various stages of composition, and when I know that people enjoy them it motivates me to invest the time. Thanks for being such a great audience!</p> <b>Like this post?</b> Contribute to the coffee fund so I can write more like it. <script src="http://coinwidget.com/widget/coin.js"></script> <script>CoinWidgetCom.go({
	wallet_address: "1GyPKBt3Tpgqzc8Nbd8tmvRQUQpJPZH41Y"
	, currency: "bitcoin"
	, counter: "count"
	, alignment: "bl"
	, qrcode: true
	, auto_show: false
	, lbl_button: "Donate"
	, lbl_address: "My Bitcoin Address:"
	, lbl_count: "donations"
	, lbl_amount: "BTC"
});</script></div><div
id="comments"><div
class="" id="comments-heading-box"><h3>Comments</h3></div><ol
id="commentlist" class="commentlist"><li
class="comment even thread-even depth-1" id="li-comment-9202"><div
class="comment" id="comment-9202"><div
class="comment-author"> <span
class="author">Michael Alan Jones</span> <img
alt='' src='http://1.gravatar.com/avatar/35f92dcefe3bd5d1a94dd36dd81050f3?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 23rd Jul 2013 at 10:18 am</span><p>Way back in the day, I wrote an article on how the Apple Newton worked, employing the ARM CPU.  The ARM was focused on instantaneous wake-up from sleep and very low power usage (i.e., running for weeks on AA cells).  Apple knew that Intel&#8217;s CPU was faster, but it required more volts. I have been looking for that article.</p><p>Also, at our dotcom, I ported video surveillance software from VB5 to C++, and the difference in performance was:</p><p>VB5  –&gt;  4 cameras at 30fps (x 2 for motion detection) = 240 fps processed, frames dropped, crashing</p><p>C++  –&gt; 32 cameras at 30fps (x 2 for motion detection) = 1920 fps processed, reliably</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9207"><div
class="comment" id="comment-9207"><div
class="comment-author"> <span
class="author">Massimiliano Mantione</span> <img
alt='' src='http://1.gravatar.com/avatar/3ddfaf88650f774397afe43da84d72c9?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 23rd Jul 2013 at 1:38 pm</span><p>Disclaimer: I work in the V8 team at Google so I should know something about compiling Javascript to native code.</p><p>First of all, your article is way, way better than almost anything else you can read on the subject.<br
/> It is factual, well researched, and you also show to take honest criticism and new facts into account (like when you accepted that Sunspider is not a real world benchmark and inserted results from Octane instead).</p><p>However, IMHO there are a few facts and trends that could &#8220;shift the balance&#8221; a bit.</p><p>For instance, while it is true that producing optimized machine code when JIT compiling Javascript, is <em>hard</em>, JIT compilers <em>are</em> getting better at it over time.<br
/> And what is written in a few comments, that even accessing a float in an array in Javascript requires a lot of memory dereferences, is simply not true: if the code is performance critical and it is reasonably written the JIT complier can see what&#8217;s going on and it will produce code very similar to the one that would be produced by a C++ compiler.</p><p>Then, Javascript is evolving and there are concrete proposals for adding types to it. This would make the JIT&#8217;s job easier (in producing optimized code).</p><p>Finally, GC techniques are evolving, and fast, and browser makers see the current problems and are focusing on reducing latencies across the board. It is amazing the kind of performance improvements you can obtain just making the GC smarter, and this is happening continuously, right now.</p><p>The bottom line for me is: right now of course there&#8217;s not comparison between Javascript on the desktop and on a mobile platform.<br
/> And it will likely be impossible to close the gap because modern desktops will become even faster.<br
/> But my impression (likely biased) is that mobile browsers will become &#8220;fast enough for many useful things&#8221; in way less than five years.<br
/> And if the application developer is careful enough, he can code the performance critical sections in a performance-conscious style, even now.<br
/> Typed arrays make dealing with data buffers very similar to what you would do in C++, WebGL offloads graphics processing to the GPU anyway, and even for classical &#8220;data structures&#8221; (classes &amp; co.) it is possible to write clean Javascript code that allows the JIT to lay out every field in memory just like fields of C structs.</p><p>So, of course a good C++ programmer will write more efficient code (hey, we are writing the JIT in C++ after all!).<br
/> My point is simply that Javascript could become &#8220;good enough&#8221; faster than you estimated.</p><p>Thanks again for the good article!<br
/> _ Massi</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9208"><div
class="comment" id="comment-9208"><div
class="comment-author"> <span
class="author">Andreas Huber</span> <img
alt='' src='http://0.gravatar.com/avatar/a923a3e27878c70af057e0a2c002eed3?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 23rd Jul 2013 at 3:14 pm</span><p>@Drew Crawford:<br
/> With regards to GC you paint a picture that is at least outdated if not plain wrong:</p><p>You quote Apple on automatic reference counting (ARC) as follows:</p><blockquote><p> &#8230; But it produces better and more predictable performance, and<br
/> that’s why we have chosen it as the basis of our memory management<br
/> strategy. Because out there in the real world, high performance and<br
/> stutter-free user experiences are what matters to our users.</p></blockquote><p>You then cite an OOPSLA paper from 2005 (!) that compares a program employing GC to the same program managing memory manually, I quote:</p><blockquote><p> What this chart says is “As long as you have about 6 times as much<br
/> memory as you really need, you’re fine. But woe betide you if you<br
/> have less than 4x the required memory.”</p></blockquote><p>First of all, the 6 times figure is clearly a worst case. The best GC algorithms studied in the paper have a memory overhead of ~2.5x. Secondly, it is important to note that the paper compares <em>manual</em> memory management (i.e. calling new and delete directly) with GC. You never say this explicitly but I would bet that many readers will take away from the article that ARC is universally better than any GC algorithm. This is clearly not the case. Compared to managing memory manually, reference counting also introduces a significant overhead, namely the need to update the reference count with atomic operations. It is therefore not surprising that the OOPSLA paper also contains this statement:</p><blockquote><p> For example, on the gc-bench benchmark, the performance of the Boost<br
/> “intrusive pointer” that embeds reference-counting within an<br
/> existing class is up to twice as slow as the Boehm-Demers-Weiser<br
/> collector.</p></blockquote> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9322"><div
class="comment" id="comment-9322"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.oob.gr');"  href='http://www.oob.gr' rel='external nofollow' class='url'>Michael Demetriou</a></span> <img
alt='' src='http://1.gravatar.com/avatar/37aa174be4e465c92878c5b47868ff06?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 25th Jul 2013 at 12:28 pm</span><p>You are indeed stating facts and this is undeniable. There are, however a few things you didn&#8217;t touch.<br
/> * Not all applications are intensive photo and video manipulation. And even those who are, 90% of the code is doing mundane things like showing standard controls on the screen, saving files or calling system calls like, open with gallery or share to facebook. The developer does not need to bother with manual memory management for all those things except for the memory intensive parts. Thus javascript is okay for 90% of the code, and you can use native code for the rest 10%. That is why many recent toolkits like GTK3 and Qt use javascript for the UI and leave the hard work for C or C++. That is also the reason that Mozilla developed asm.js so that the FirefoxOS developer does have an alternative when things start to get hard. Lastly it is the reason that Chrome allows applications to run native code.<br
/> * Comparing the iPhone 4S of to IE8 is unfair. It performs twice as fast as an IE8 of an overclocked 3GHz i5 of 2010. I bet that google deprecated IE8 because the average computer of 2010 was probably a 1.3GHz single core laptop. On that PC (I don&#8217;t have one now to benchmark) I bet that the iPhone has comparable performance to FF3.6.<br
/> * The same goes for ARM vs x86. I&#8217;m not by any means a hardware designer, but the core 2 solo 1.2Ghz and Atom 330 have about the same performance (x86) according to <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.notebookcheck.net/Mobile-Processors-Benchmarklist.2436.0.html');"  href="http://www.notebookcheck.net/Mobile-Processors-Benchmarklist.2436.0.html" rel="nofollow">http://www.notebookcheck.net/Mobile-Processors-Benchmarklist.2436.0.html</a><br
/> and according to this<br
/> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.anandtech.com/show/4134/the-brazos-review-amds-e350-supplants-ion-for-miniitx/6');"  href="http://www.anandtech.com/show/4134/the-brazos-review-amds-e350-supplants-ion-for-miniitx/6" rel="nofollow">http://www.anandtech.com/show/4134/the-brazos-review-amds-e350-supplants-ion-for-miniitx/6</a><br
/> the 330 has 1306ms in sunspider, about the same as the TI OMAP 4430 and much more than the three digit iPhone 5 number. At the same clock speeds the architectures seem to have comparable performance. Of course it takes five years to be able to be able to match the same clock speeds and lower the power consumption enough to be able to put a CPU in a phone.<br
/> This does not invalidate your point that a pc is 10x faster than a phone, it just addresses an unfair (IMO) attribution of the speed difference to architecture. We don&#8217;t know if there was a 35W TDP ARM processor sized like a stamp if it maybe could be competitive to an intel one.</p><p>What I&#8217;m saying is that dissing HTML5 applications as slow is as wrong as saying they are fast enough. They are very good for some usecases, mainly for the cross-platform compatibility, and for those things that you do need the grunt, lower level solutions are emerging. The same happens with android java, python, winphone8 and it is proven to work.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9374"><div
class="comment" id="comment-9374"><div
class="comment-author"> <span
class="author">Rich</span> <img
alt='' src='http://0.gravatar.com/avatar/e3ec39948aca0fe41ac29e3e9f8a2649?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Fri 26th Jul 2013 at 6:12 am</span><p>The OOPSLA paper is a good one, but you have to understand its shortcomings in order to get the most out of it.</p><p>One is that it compares GC to the best possible manual memory management (not ref counting) &#8211; ie. to a programmer who is so good they always free memory precisely at the point where it is no longer used, not a line of code later.</p><p>The other is that it assumes the manual memory management is free of cost.  However no malloc/free implementation comes for free.  They all have considerable internal overheads, even if you don&#8217;t get to see them as clearly as you might see GC pauses when writing a high-end game.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9405"><div
class="comment" id="comment-9405"><div
class="comment-author"> <span
class="author">matucker</span> <img
alt='' src='http://1.gravatar.com/avatar/9d98a2ff540e04acb71dc2dfb1824253?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Fri 26th Jul 2013 at 4:39 pm</span><p>Great article!  I recently abandoned HTML5/JS mobile app development due to serious performance issues &amp; buggy behavior.  I started reading this article because I&#8217;m thinking of making another run at it.  It&#8217;d be so sweet to code once &amp; run on either Android or iOS devices.  Ummm, what to do: give up on the run anywhere dream?  ;}</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9429"><div
class="comment" id="comment-9429"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/soundwandapp.com');"  href='http://soundwandapp.com' rel='external nofollow' class='url'>Hari Karam Singh</a></span> <img
alt='' src='http://0.gravatar.com/avatar/c2e85a0fc7cf02be17f5cd6020b11599?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 27th Jul 2013 at 4:48 am</span><p>Fantastic article.  I definitely prefer &#8220;good&#8221; to &#8220;popular&#8221; <img
src="http://sealedabstract.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p><p>What about the affect of the GPU?  To what extent is this and drawing related issues outside of the V8 engine, for example, the cause of perceived slow performance?</p><p>I had an interesting issue with a web app I recently built: initially the loading screen involved a simple animation of a large, hi-def semi-transparent background image.  I started with Safari as my test browser and all was smooth.  When I later looked at Chrome it was severely stuttery.  Both are running the same JS engine right? Maybe there are significant performance gains to be made in how the browsers integrate the JS engine particularly wrt the graphics rendering?</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9430"><div
class="comment" id="comment-9430"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/soundwandapp.com');"  href='http://soundwandapp.com' rel='external nofollow' class='url'>Hari Karam Singh</a></span> <img
alt='' src='http://0.gravatar.com/avatar/c2e85a0fc7cf02be17f5cd6020b11599?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 27th Jul 2013 at 5:03 am</span><p>Fantastic article.  Thank you for all this information.  It&#8217;s useful to have some facts to support subjection statements about &#8220;cross-platform&#8221; versus native&#8230;</p><p>I&#8217;m curious about to what extent GPU performance and the <em>integration</em> of the JS engine especially wrt graphics rendering might hide unreleased performance gains?</p><p>I recently built a web/mobile app which initially had an animation of a couple large, hi-def, semi-transparent background images as the opening sequence.  I began construction in Safari and all was well.  When I later checked in Chrome it was very stuttery.  Both are running the same JS engine right?   A lot of the perceived performance woes in mobile JS frameworks is in the delayed response between UI events and graphics updates&#8230;</p><p>Thank again!<br
/> Hari Karam Singh<br
/> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/soundwandapp.com');"  href="http://soundwandapp.com" rel="nofollow">http://soundwandapp.com</a></p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9431"><div
class="comment" id="comment-9431"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.mathewporter.co.uk');"  href='http://www.mathewporter.co.uk' rel='external nofollow' class='url'>Mathew Porter</a></span> <img
alt='' src='http://1.gravatar.com/avatar/b6b8cab3e206d739432c52b3e73de373?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 27th Jul 2013 at 5:11 am</span><p>Very thorough post, native apps seem to have the performance at the moment but with the emergance of FireFox OS its nice to see where things will go.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9549"><div
class="comment" id="comment-9549"><div
class="comment-author"> <span
class="author">Peter K</span> <img
alt='' src='http://1.gravatar.com/avatar/1544312f3deaa0403b11fce202dd62cb?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Mon 29th Jul 2013 at 5:22 am</span><p>Great article &#8212; I wonder how many GC&#8217;s occurred during the course of writing it. <img
src="http://sealedabstract.com/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" /></p><p>I am in the process of identifying memory issues on an Enterprise scale Java web based app and it is suffering from gobbling up tons of memory.  The issue will never go away, unless memory can be obtained from oxygen.</p><p>After moving to ARC from manual memory management, I can see your point more and more &#8211; there still are memory concerns, ARC does not save the day.</p><p>One thing that developers are not really taught is being a good memory citizen!  It is only when you have broken the law, that the silicon police come to arrest you and crash your car.</p><p>Great job !</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9573"><div
class="comment" id="comment-9573"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.informatik.uni-marburg.de/~pgiarrusso/');"  href='http://www.informatik.uni-marburg.de/~pgiarrusso/' rel='external nofollow' class='url'>Paolo G. Giarrusso</a></span> <img
alt='' src='http://0.gravatar.com/avatar/a3a676c96a88feb813010e67af012ca0?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Mon 29th Jul 2013 at 1:44 pm</span><p>We must distinguish two things. One is one, naively implemented automatic reference counting for all objects (as done for instance in Python), including, say, boxed primitives. That one has too much overhead.<br
/> Another thing is reference counting only for the objects whose allocation point is hard to predict. The latter approach is used in the Linux kernel (for objects shared among threads) because it does provide acceptable performance, and I think Apple&#8217;s ARC sits somewhere in the middle.<br
/> In this direction, I&#8217;m hoping that Azul&#8217;s GC could be ported to the ARM architecture &#8211; they provide low-overhead real-time GC:<br
/> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.azulsystems.com/');"  href="http://www.azulsystems.com/" rel="nofollow">http://www.azulsystems.com/</a></p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9620"><div
class="comment" id="comment-9620"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.kiutalk.de');"  href='http://www.kiutalk.de' rel='external nofollow' class='url'>Heiko Specht</a></span> <img
alt='' src='http://0.gravatar.com/avatar/c8df60116df78de01ff484c54886e68e?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 30th Jul 2013 at 9:20 am</span><p>This is really a long article &#8211; thanks a lot for that. From my perspective one significant portion is missing: TCP and all the intermittend parties handling / modifying the Content which is delivered to the app. (Summary: Latency).</p><p>Greetings<br
/> Heiko</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9728"><div
class="comment" id="comment-9728"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.excelsiorjet.com');"  href='http://www.excelsiorjet.com' rel='external nofollow' class='url'>Dmitry Leskov</a></span> <img
alt='' src='http://1.gravatar.com/avatar/32ebc0e34a23d6969a8c5a4e3330cec7?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 01st Aug 2013 at 6:15 am</span><p>Writing an article like this is indeed a huge piece of work.</p><p>It is a pity that you have not had the time to dig a bit deeper and had to rely on a research article from 2005 to back your claims regarding the memory requirements imposed by today&#8217;s Garbage Collectors.</p><p>We&#8217;ve reproduced a couple of experiments from that article and drawn up to date charts for you:</p><p><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.excelsior-usa.com/blog/java/5plus-garbage-collectors/');"  href="http://www.excelsior-usa.com/blog/java/5plus-garbage-collectors/" rel="nofollow">http://www.excelsior-usa.com/blog/java/5plus-garbage-collectors/</a></p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9732"><div
class="comment" id="comment-9732"><div
class="comment-author"> <span
class="author">Jon E</span> <img
alt='' src='http://1.gravatar.com/avatar/f4502400cebe1f07194b765e96dc66cb?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 01st Aug 2013 at 7:54 am</span><p>Thanks for the article.  After reading this, my three big take-aways are:</p><p>1) Renew efforts to write code in a GC friendly manner (though it makes my head spin)</p><p>2) Avoid gratuitous use of photos in mobile development</p><p>3) Hold on to my Intel stock</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9748"><div
class="comment" id="comment-9748"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.sencha.com');"  href='http://www.sencha.com' rel='external nofollow' class='url'>Michael Mullany</a></span> <img
alt='' src='http://1.gravatar.com/avatar/7b16b6c353a6bc7b76df45feb0399068?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 01st Aug 2013 at 3:45 pm</span><p>Drew. We took the liberty of rebutting much of your article with lots of statistics and benchmarks, in our own very detailed blog post. Enjoy&gt;&gt;</p><p><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.sencha.com/blog/5-myths-about-mobile-web-performance/');"  href="http://www.sencha.com/blog/5-myths-about-mobile-web-performance/" rel="nofollow">http://www.sencha.com/blog/5-myths-about-mobile-web-performance/</a></p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9782"><div
class="comment" id="comment-9782"><div
class="comment-author"> <span
class="author">Jason</span> <img
alt='' src='http://1.gravatar.com/avatar/d38db91d2ec8de606ac8e3e46f8bab49?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Fri 02nd Aug 2013 at 3:45 am</span><p>An interesting point is about the performance of &#8216;Amazon JavaScript&#8217;. In the blog post <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.xero.com/2012/12/shut-up-and-code/');"  href="http://blog.xero.com/2012/12/shut-up-and-code/" rel="nofollow">http://blog.xero.com/2012/12/shut-up-and-code/</a> devs showed with &#8220;Fastbook&#8221; that implementation is a critical factor. Any language and platform you sometimes have to optimise. JavaScript/HTML5 may require more elbow grease than many.</p><p>BTW I do follow your line of argument and accept the intent behind it, however the &#8220;x86 is faster than ARM&#8221; meme is just inaccurate enough to be irritating.  I follow Anandtech for my H/W info and they are saying (since March 2013)  &#8220;For the first time, we’re seeing Intel lose its performance edge to Cortex-A15 based SoCs, but for now Clover Trail [Intel x86] is still competitive from both compute and power efficiency standpoints. &#8221;</p><p>Where will next leap in HTML5  performance come from? Keep an eye on Blink <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.chromium.org/blink');"  href="http://www.chromium.org/blink" rel="nofollow">http://www.chromium.org/blink</a> example  &#8220;Finally we’d like to explore even larger ideas like moving the entire Document Object Model (DOM) into JavaScript. This has the potential to make JavaScript DOM access dramatically faster,&#8230;&#8221;  Many HTML5 bottlenecks are around DOM manipulation and only a bit of JavaScript performance.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9796"><div
class="comment" id="comment-9796"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/neit.co');"  href='http://neit.co' rel='external nofollow' class='url'>Nathaniel Velez</a></span> <img
alt='' src='http://0.gravatar.com/avatar/ad27b24a88e7c5f70abaf28380d39f32?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Fri 02nd Aug 2013 at 11:46 am</span><p>I am currently in the process of wotking on an update to the HTML5 version  my web app for school management (www.skiffer.net). Although most of the focus on web-app performance has been on the performance of javascript and garbage collection, my experience tells me that in many types of applications the main bottleneck is CSS and HTML not JS.</p><p>A well performing JS app fallow diferent design patterns than native apps. Since always available Internet connection is expected in webapps by users, the computational heavy lifting can be done on the server, thus the webapp becomes a Thin client, and thats fine for many tipes of apps.</p><p>HTML documents can become complex very easily if the designer/programer is not carefull and CSS rule matching and execution can be very expensive as well. DOM Manipulation is expensive as well as object creation/destruction. But those limitations can be overcome by better algorithms in the case of HTML reflowing and CSS rule matching and rendering can become better thru hardware acceleration. In many cases you can design full apps that recycle all your objects and you completily avoid GC related problems (I learned this the hard way on my days as a Flash Developer)</p><p>Animations that use CSS transforms and transitions are quite smooth today, even on mobile devices. But if your animation requires a reflow, like changing the dimensions of a DIV that requires a recalculation of the layout of its content, then things get really slow and buggy.  The other big limitation is not baing able to easily remove elements from the DOM during CSS animations (CSS Transitions dont work with the display:none property). This makes it tricky to design fluid interfaces that effectivly remove/place objects to the display which can result on apps with large memory footprints since brosers thend to cache displayed objects as bitmaps on memory (I am sure is more complex than this, but this seems like a simple explanation of what is actually happenning). This is the main cause from my experience of Mobile Safari crashes.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9803"><div
class="comment" id="comment-9803"><div
class="comment-author"> <span
class="author">Random Reader</span> <img
alt='' src='http://1.gravatar.com/avatar/1b98b8d7cadcad95a40a745231d5a6e4?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Fri 02nd Aug 2013 at 3:40 pm</span><p>@Andreas: I&#8217;m not sure why you&#8217;re focusing on ARC particularly &#8211; this was not a GC versus ARC article so much as GC versus not GC. ARC is just one example of &#8220;not GC&#8221;.<br
/> In any case, 2x as slow but <em>predictable</em> will in many cases be preferable to 2x as fast but <em>unpredictable</em> &#8211; and that&#8217;s before you factor in the memory footprint which, as the article points out, is very very important in mobile.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-9824"><div
class="comment" id="comment-9824"><div
class="comment-author"> <span
class="author">Don</span> <img
alt='' src='http://1.gravatar.com/avatar/1919b10e4f52e00a8b1345972561b63c?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 03rd Aug 2013 at 5:38 am</span><p>It seems RubyMotion guys (mostly) fixed the memory-related bug not long ago. <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.rubymotion.com/post/56232015979/new-in-rubymotion-blocks-rewrite-retain-cycle');"  href="http://blog.rubymotion.com/post/56232015979/new-in-rubymotion-blocks-rewrite-retain-cycle" rel="nofollow">http://blog.rubymotion.com/post/56232015979/new-in-rubymotion-blocks-rewrite-retain-cycle</a></p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-9854"><div
class="comment" id="comment-9854"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.simontimms.com');"  href='http://blog.simontimms.com' rel='external nofollow' class='url'>Simon</a></span> <img
alt='' src='http://1.gravatar.com/avatar/932a90d841204bed64a5165e591c5332?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 03rd Aug 2013 at 8:41 pm</span><p>Thanks for taking the time to write out this article. There are certainly a lot of things to think about when developing mobile applications. I&#8217;m, for the most part, a web developer and was pretty excited in Sencha or PhoneGap or whatever it is called this week. I&#8217;m not totally dissuaded by this article but that is largely because the applications I would be building are not of the sort which you would consider to be a real application. For that purpose speed of development is far more important than any sort of frame rate. I will still spend more time thinking about performance that I would have before reading this article. I&#8217;ll think about recycling DOM nodes and perhaps avoiding heavy weight MVVM libraries like Angular.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-10119"><div
class="comment" id="comment-10119"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/programmizm.sourceforge.net');"  href='http://programmizm.sourceforge.net' rel='external nofollow' class='url'>paul</a></span> <img
alt='' src='http://0.gravatar.com/avatar/64a0e209a74957e3c4691536420feee0?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 08th Aug 2013 at 3:57 pm</span><p>nice article<br
/> now i know EXACTLY why GC performs worse than manual memory management and have explcicit arguments to throw in the face when arguing about why GC sucks<br
/> in the end GC MAY have some applications, but definitely not in a high performance/resource constrained application</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-10256"><div
class="comment" id="comment-10256"><div
class="comment-author"> <span
class="author">Chinmay Thosar</span> <img
alt='' src='http://0.gravatar.com/avatar/c303b479f10c4dd2102731e539066b88?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 10th Aug 2013 at 10:45 pm</span><p>This is one of the best articles ive read in a while in general.<br
/> I read this on a sunday morning and didnt just skip through it like many of my friends did . From what I understand after reading this is that Apple made a smart move of switching to ARC early on rather than going forward and hitting a wall . Google will definitely improve their GC in the future . But what remains to be seen is what changes in the web apps world . Maybe somebody will have a smart solution for short term . Because as you can see Apple are already rolling out their iWork web apps to desktop users. I wont be surprised if they have small builds of these Web Apps for iOS devices too .</p><p>As far ARM performance is concerned , its surprising that people are considering ARM in ultrabooks like MBA . The x86 Haswell processors are great and we might be looking at very low TDP x86 from intel in as few as 2-3 years that could go into mobile devices (mostly android to start with).<br
/> These processors could show some serious performance promises when it comes to Javascript . And it would also benefit Androids GC overall .</p><p>But thanks for writing this . It took me an hour to read so im assuming it must have taken you hours to write. It does add a lot to my understanding .. Cheers !</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-10260"><div
class="comment" id="comment-10260"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.edval.com.au');"  href='http://www.edval.com.au' rel='external nofollow' class='url'>Chris Cooper</a></span> <img
alt='' src='http://0.gravatar.com/avatar/a7b8dbfb646d8c63fb1bafd91a7f96a4?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sun 11th Aug 2013 at 12:16 am</span><p>Fantastic reading. Well researched and referenced. Appears unbiased and factual. Congratulations for adding useful knowledge value to the big web, in a way that makes sense.</p><p>We use HTML5 and GWT and love it, works well, but found your material relevant and interesting. Thanks for giving me some light reading this afternoon!</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-10277"><div
class="comment" id="comment-10277"><div
class="comment-author"> <span
class="author">John</span> <img
alt='' src='http://0.gravatar.com/avatar/0b220fa4c0b59e883f360979ee745d63?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sun 11th Aug 2013 at 11:02 am</span><p>On a point of fact: You refer to Python as if it does not also use reference counting. In fact, Python &#8211; in its vanilla CPython flavour &#8211; is based on reference counting, with gc as something of an add-on to deal better with reference cycles.  I used Python for some time before the garbage collector was introduced.  Before that, one would take care to manually break reference cycles (or not create them in the first place).  In fact, people still do when they&#8217;re concerned with performance.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-10353"><div
class="comment" id="comment-10353"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/sibers.com');"  href='http://sibers.com' rel='external nofollow' class='url'>Andrey Gavrilov</a></span> <img
alt='' src='http://1.gravatar.com/avatar/d90612de2ddb9348f1347e0780efbbe0?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 13th Aug 2013 at 2:38 am</span><p>@Andreas Huber:<br
/> While your points are completely valid, it&#8217;s important to note that there are different algorithms for reference counting algorithms and some have quite good performance.</p><p>And it&#8217;s important to note that reference counting performance loss is scattered through the program lifecycle and predictable. Unless algorithm involves periodical scanning to prevent reference cycles (and as far as I know, Cocoa uses weak references instead), the reference count update operations and object destruction are performed only in those parts of the code which do any reference updates. So, even if overall performance is lower, there are no &#8220;freezes&#8221;.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-10367"><div
class="comment" id="comment-10367"><div
class="comment-author"> <span
class="author">Raghu Mendru</span> <img
alt='' src='http://0.gravatar.com/avatar/8ad83b7563763d817fcb3b27bcaaea5e?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 13th Aug 2013 at 5:13 am</span><p>Appreciate the effort put in to produce such a factual article.</p><p>However, the takeaway from this article with regards to &#8220;why mobile web apps are slower than mobile native apps&#8221; is very limited. I also feel that the reasons explained here for the slowness are incomplete. They are very narrowed down to: (a) native code is compiled and the javascript is not (b) native code offers control on memory management and javascript doesn&#8217;t. If the iOS apps do not use ARC or the other OS apps that do not provide explicit memory management unlike C, C++, the point (b) is insignificant. That leaves with only (a) complied vs interpreted/JITed.</p><p>It would have been better if the articles at least mentions the other equally important aspects of mobile web apps (such as rendering, the browser environment, the network speed, etc) that contribute to the &#8220;slowness&#8221; of mobile web app.</p><p>I must admit, that I was glued until I finished the reading the article and all the comments.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-10374"><div
class="comment" id="comment-10374"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.EscuelaDavinci.net');"  href='http://www.EscuelaDavinci.net' rel='external nofollow' class='url'>Mariano Gomez Bidondo</a></span> <img
alt='' src='http://1.gravatar.com/avatar/116636aa332645e66dfb0dac9d8fef85?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 13th Aug 2013 at 8:21 am</span><p>Dear Drew,<br
/> Thanks a lot for this increible article! It will be a obligatory reading to my students in my class of web develpment with Apache Flex.<br
/> Talkng about Apache Flex, do you have some coments or experience with that plattaform?</p><p>Regards,<br
/> Mariano<br
/> PD: Sorry for my terrible english.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-10419"><div
class="comment" id="comment-10419"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/workhorsy.org');"  href='http://workhorsy.org' rel='external nofollow' class='url'>Matt Jones</a></span> <img
alt='' src='http://1.gravatar.com/avatar/1b03474429f0514c12e657cc02200fc6?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 13th Aug 2013 at 7:20 pm</span><p>I generally agree with your observations here.</p><p>My conclusion is that javascript is trying to be shoe horned into a space that should be kept for native code with ARC / manual memory management.</p><p>I think a simple solution would be to have two vms/languages in the browser. One that is like PNacl and one that is like javascript. Not necessarily those specific platforms. But ones that are similar.</p><p>This way you can write your intensive code in a native language with manual memory management or a reference counter. And the remainder of the code in a script language that won&#8217;t matter if it needs to GC a lot.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-10498"><div
class="comment" id="comment-10498"><div
class="comment-author"> <span
class="author">Drew F</span> <img
alt='' src='http://0.gravatar.com/avatar/6c2bac7518ad5640cac5904e10c14022?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 14th Aug 2013 at 6:55 pm</span><p>I feel like surfing the net has gotten slower in general. A lot of websites I go to now take forever to load they have so much apps / junk in them. I know, call me crazy. But I have been on this  dang thing before yahoo, going back to archie and gopher for searching.</p><p>I just started noticing it 8-9 months ago. It&#8217;s no big mystery why google fiber needs / has to be faster. And it&#8217;s not isolated to just one machine. I have access to the best of the best working for the state of texas here in austin.</p><p>Like I said, you can call me crazy, but i know I&#8217;m not. Even on a super fast machine I have had websites hangup on me. SERIOUSLY while something takes forever to load.  I was excited to see this article. Thought I was the only one who noticed.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-10505"><div
class="comment" id="comment-10505"><div
class="comment-author"> <span
class="author">John Foster</span> <img
alt='' src='http://1.gravatar.com/avatar/d48ca7aabfcca9bc779cc6dfb963e64b?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 14th Aug 2013 at 9:12 pm</span><p>Thank you for doing all this research and digesting all the information into a well organized presentation. You gave me a lot to think about and saved me a lot of time.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-10574"><div
class="comment" id="comment-10574"><div
class="comment-author"> <span
class="author">Miranda Folio</span> <img
alt='' src='http://1.gravatar.com/avatar/75ce09fe69debef75df9636da96fbced?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 15th Aug 2013 at 11:48 pm</span><p>For what it’s worth, the blogger to whom this article cited on RubyMotion’s trouble with retrofitting ARC onto Ruby has posted an update: the bugs he discussed have been fixed, which is good news in general. It seems like the problem wasn’t that intractable in the end, although it was definitely very difficult, and still suggestive of the trouble one would have retrofitting ARC onto JavaScript.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-10657"><div
class="comment" id="comment-10657"><div
class="comment-author"> <span
class="author">AppsGeek</span> <img
alt='' src='http://1.gravatar.com/avatar/fb9498b88df3ed45a0283e21ed76fd2d?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Mon 19th Aug 2013 at 9:51 am</span><p>This article is valuable for the information it contributes to the Native vs. Web apps debate, but it is so difficult to read. So verbose. I had to jump lines to cut to the crux, get your argument, and the useful facts.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-10690"><div
class="comment" id="comment-10690"><div
class="comment-author"> <span
class="author">Asheesh</span> <img
alt='' src='http://1.gravatar.com/avatar/9c4e3ee92b3520a3484c9b165f07fb90?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 22nd Aug 2013 at 9:34 am</span><p>Excellent Article, Drew. The numbers you&#8217;ve mentioned are great. They truly reflect the state of the art about using javascript for developing mobile apps. I agree that javascript based mobile apps for some kinds (CPU intensive like games, memory intensive like photo editiong etc) will have trouble if we go the javascript route, but there&#8217;s always another set of apps, that can be done using it. So, essentially, it&#8217;s a trade-off, but your article will truly enlighten people about making the right choice in their endeavor of writing an app.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-10694"><div
class="comment" id="comment-10694"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/infusionsoft.com');"  href='http://infusionsoft.com' rel='external nofollow' class='url'>SarahJane</a></span> <img
alt='' src='http://1.gravatar.com/avatar/32cff9839bfa9f0514fda94309e124f8?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 22nd Aug 2013 at 1:06 pm</span><p>Thank you for taking the time to tediously research and compose this article. I&#8217;m new to the mobile world and have only read tidbits of the mindless shouting match over mobile web apps and JS. This was by far the most informative and thoughtful piece I&#8217;ve read on the matter. Also, your writing style is delightful. <img
src="http://sealedabstract.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> Keep it classy.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-10822"><div
class="comment" id="comment-10822"><div
class="comment-author"> <span
class="author">Constantin</span> <img
alt='' src='http://1.gravatar.com/avatar/1e6e0b8583d6e536ec32edd7f36d93a1?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 29th Aug 2013 at 10:43 am</span><p>I think, you&#8217;re not so fair about asm.js. Most platforms are supporting Firefox (PC, Mac, Android, Firefox OS, Sailfish OS). On Android, asm.js is even faster than Dalvik apps!<br
/> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.mozilla.org/javascript/2013/08/01/staring-at-the-sun-dalvik-vs-spidermonkey/');"  href="https://blog.mozilla.org/javascript/2013/08/01/staring-at-the-sun-dalvik-vs-spidermonkey/" rel="nofollow">https://blog.mozilla.org/javascript/2013/08/01/staring-at-the-sun-dalvik-vs-spidermonkey/</a></p><p>And on the other platforms, you get at least compatibility and quite okay speeds. So asm.js is definitely a very good option compared to writing a native app for eight different OSes.</p><p>Also, if you think, C++ is more of a &#8220;backward&#8221; language than Objective C, feel free to use the Objective C frontend of LLVM to generate asm.js code, or write asm.js code directly.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-11038"><div
class="comment" id="comment-11038"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/owensoft.net');"  href='http://owensoft.net' rel='external nofollow' class='url'>owen</a></span> <img
alt='' src='http://1.gravatar.com/avatar/969c8e81506d6be7ff47b96f5ac7270e?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 11th Sep 2013 at 10:11 am</span><p>well done article.  Smartphones are the E-machines of today.  Look at pictures, take photos, check email and play a few 5 minute games.  Done.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-11081"><div
class="comment" id="comment-11081"><div
class="comment-author"> <span
class="author">Stefan Herold</span> <img
alt='' src='http://1.gravatar.com/avatar/3817bd13d5c29b806772b60416bb563b?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 17th Sep 2013 at 1:46 pm</span><p>Hey Drew,</p><p>I really don&#8217;t like reading long articles or texts. But I found yours really really exciting, comprehensive and even funny. OK I am an iOS developer for some years now, maybe thats the reason. But the most important fact is &#8211; that I am very thankful of &#8211; that there are people like you who take hours writing that incredibly interesting and important kind of articles. This is really worth sharing and citing in scientific works dealing with mobile development today.</p><p>Thank you very much!<br
/> Stefan</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-11504"><div
class="comment" id="comment-11504"><div
class="comment-author"> <span
class="author">Alexander Trefz</span> <img
alt='' src='http://0.gravatar.com/avatar/4a632aa7d5702a40d669cc9a20f61c92?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Fri 13th Dec 2013 at 9:32 am</span><p>First of all i want to tell you that your article is awesome.<br
/> Second and last of all, i just want to inform you about this: <a
onclick="javascript:pageTracker._trackPageview('/outgoing/docs.google.com/presentation/d/1YtfurcyKFS0hxPOnC3U6JJroM8aRP49Yf0QWznZ9jrk/preview');"  href="https://docs.google.com/presentation/d/1YtfurcyKFS0hxPOnC3U6JJroM8aRP49Yf0QWznZ9jrk/preview" rel="nofollow">https://docs.google.com/presentation/d/1YtfurcyKFS0hxPOnC3U6JJroM8aRP49Yf0QWznZ9jrk/preview</a> It is a Slidedeck about how Reference Counting was so painful under the hood of Chrome that they are actually putting a GC in place for the C++ Engine parts.</p> <span
class="reply"></span></div></div></li></ol><div
id="comments-nav"><div
id="older-comments"><a
href="http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/comment-page-6/#comments" >&laquo; Previous comments</a></div><div
id="newer-comments"></div></div><div
id="respond"> <a
rel="nofollow" id="cancel-comment-reply-link" href="/rants/why-mobile-web-apps-are-slow/#respond" style="display:none;">Click here to cancel reply.</a><h3>Add comment</h3><form
action="http://sealedabstract.com/wp-comments-post.php" method="post" id="commentform"><div
class="form-element"> <label
for="author">Your name*</label> <input
type="text" class="textfield" name="author" id="author" value="" size="22" tabindex="1" aria-required='true' /></div><div
class="form-element"> <label
for="email">Your email address* &nbsp; <em
class="small">(will not be published)</em></label> <input
type="text" class="textfield" name="email" id="email" value="" size="22" tabindex="2" aria-required='true' /></div><div
class="form-element"> <label
for="url">Your website</label> <input
type="text" class="textfield" name="url" id="url" value="" size="22" tabindex="3" /></div><div
class="form-element"> <label
for="comment">Your comment</label><div
id="comment-text-wrapper"><textarea name="comment" id="comment" cols="65" rows="10" tabindex="4"></textarea></div></div><div
class="form-element"><input
class="submit" type="submit" id="comment-submit" value="submit comment" tabindex="5" /></div><p
style="display: none;"><input
type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="e5288db1b2" /></p><p
class="comment-subscription-form"><input
type="checkbox" name="subscribe_comments" id="subscribe_comments" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;" /> <label
class="subscribe-label" id="subscribe-label" for="subscribe_comments">Notify me of follow-up comments by email.</label></p><p
class="comment-subscription-form"><input
type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;" /> <label
class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of new posts by email.</label></p><p
style="display: none;"><input
type="hidden" id="ak_js" name="ak_js" value="143"/></p><div><input
type='hidden' name='comment_post_ID' value='1713' id='comment_post_ID' /> <input
type='hidden' name='comment_parent' id='comment_parent' value='0' /></div></form></div></div></div></div></div></div><div
id="footer-wrapper"><div
id="footer-nav" class="clearfix"> <a
href="#top" id="back-to-top-link-left"><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/arrow-up.png" alt="" /> Back to top</a> <a
href="#top" id="back-to-top-link-right">Back to top <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/arrow-up.png" alt="" /></a></div><div
id="footer" class="container_14 clearfix"><ul
id="footer-sidebar" class="sidebar"><li
id="tag_cloud-3" class="widget widget-1 widget_tag_cloud"><h2><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-left.png" class="ornament" alt="" /> Tags <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-right.png" class="ornament" alt="" /></h2><div
class="tagcloud"><a
href='http://sealedabstract.com/tag/app-store/' class='tag-link-12' title='1 topic' style='font-size: 8pt;'>app store</a> <a
href='http://sealedabstract.com/tag/arduino/' class='tag-link-7' title='1 topic' style='font-size: 8pt;'>arduino</a> <a
href='http://sealedabstract.com/tag/hardware/' class='tag-link-6' title='1 topic' style='font-size: 8pt;'>hardware</a> <a
href='http://sealedabstract.com/tag/hn/' class='tag-link-23' title='1 topic' style='font-size: 8pt;'>HN</a> <a
href='http://sealedabstract.com/tag/incentives/' class='tag-link-25' title='1 topic' style='font-size: 8pt;'>incentives</a> <a
href='http://sealedabstract.com/tag/iphone/' class='tag-link-9' title='2 topics' style='font-size: 22pt;'>iphone</a> <a
href='http://sealedabstract.com/tag/law/' class='tag-link-15' title='1 topic' style='font-size: 8pt;'>law</a> <a
href='http://sealedabstract.com/tag/linux/' class='tag-link-11' title='1 topic' style='font-size: 8pt;'>linux</a> <a
href='http://sealedabstract.com/tag/long-articles/' class='tag-link-26' title='1 topic' style='font-size: 8pt;'>long articles</a> <a
href='http://sealedabstract.com/tag/mips/' class='tag-link-10' title='1 topic' style='font-size: 8pt;'>mips</a> <a
href='http://sealedabstract.com/tag/native-apps/' class='tag-link-28' title='1 topic' style='font-size: 8pt;'>native apps</a> <a
href='http://sealedabstract.com/tag/notifo/' class='tag-link-13' title='1 topic' style='font-size: 8pt;'>notifo</a> <a
href='http://sealedabstract.com/tag/programmers/' class='tag-link-24' title='1 topic' style='font-size: 8pt;'>programmers</a> <a
href='http://sealedabstract.com/tag/rants/' class='tag-link-8' title='1 topic' style='font-size: 8pt;'>rants</a> <a
href='http://sealedabstract.com/tag/steve-jobs/' class='tag-link-16' title='1 topic' style='font-size: 8pt;'>steve jobs</a> <a
href='http://sealedabstract.com/tag/web-apps/' class='tag-link-27' title='1 topic' style='font-size: 8pt;'>web apps</a> <a
href='http://sealedabstract.com/tag/wifi/' class='tag-link-14' title='1 topic' style='font-size: 8pt;'>wifi</a></div></li><li
id="text-4" class="widget widget-2 widget_text"><h2><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-left.png" class="ornament" alt="" /> Subscribe via e-mail <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-right.png" class="ornament" alt="" /></h2><div
class="textwidget"><div
id="mc_embed_signup"><form
action="http://drewcrawfordapps.us1.list-manage2.com/subscribe/post?u=e78fe221beda78f7524116d70&amp;id=3d9fd4c03f" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank"><h2>Subscribe via e-mail</h2><div
class="mc-field-group"> <label
for="mce-EMAIL">Email Address <span
class="asterisk">*</span> </label> <input
type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL"></div><div
id="mce-responses" class="clear"><div
class="response" id="mce-error-response" style="display:none"></div><div
class="response" id="mce-success-response" style="display:none"></div></div><div><input
type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div></form></div></div></li></ul></div></div></div><div
id="bottom-wrapper"><div
id="bottom-container"><div
id="bottom-left-col">Copyright © 2011 Drew Crawford, All Rights Reserved</div><div
id="bottom-right-col">Powered by WordPress</div></div></div>
 <script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> <script type="text/javascript">var pageTracker = _gat._getTracker("UA-8841539-1");
pageTracker._initData();
pageTracker._trackPageview();</script><p align='center'><small>Page optimized by <a href='http://omninoggin.com/wordpress-plugins/wp-minify-wordpress-plugin/' title='WP Minify WordPress Plugin' style='text-decoration:none;'>WP Minify</a> <a href='http://omninoggin.com/' title='WordPress Plugin' style='text-decoration:none;'>WordPress Plugin</a></small></p>	<div style="display:none">
	<div class="grofile-hash-map-35f92dcefe3bd5d1a94dd36dd81050f3">
	</div>
	<div class="grofile-hash-map-3ddfaf88650f774397afe43da84d72c9">
	</div>
	<div class="grofile-hash-map-a923a3e27878c70af057e0a2c002eed3">
	</div>
	<div class="grofile-hash-map-37aa174be4e465c92878c5b47868ff06">
	</div>
	<div class="grofile-hash-map-e3ec39948aca0fe41ac29e3e9f8a2649">
	</div>
	<div class="grofile-hash-map-9d98a2ff540e04acb71dc2dfb1824253">
	</div>
	<div class="grofile-hash-map-c2e85a0fc7cf02be17f5cd6020b11599">
	</div>
	<div class="grofile-hash-map-88d26c0a62d86011529418755ec11303">
	</div>
	<div class="grofile-hash-map-b6b8cab3e206d739432c52b3e73de373">
	</div>
	<div class="grofile-hash-map-1544312f3deaa0403b11fce202dd62cb">
	</div>
	<div class="grofile-hash-map-a3a676c96a88feb813010e67af012ca0">
	</div>
	<div class="grofile-hash-map-c8df60116df78de01ff484c54886e68e">
	</div>
	<div class="grofile-hash-map-32ebc0e34a23d6969a8c5a4e3330cec7">
	</div>
	<div class="grofile-hash-map-f4502400cebe1f07194b765e96dc66cb">
	</div>
	<div class="grofile-hash-map-7b16b6c353a6bc7b76df45feb0399068">
	</div>
	<div class="grofile-hash-map-d38db91d2ec8de606ac8e3e46f8bab49">
	</div>
	<div class="grofile-hash-map-ad27b24a88e7c5f70abaf28380d39f32">
	</div>
	<div class="grofile-hash-map-1b98b8d7cadcad95a40a745231d5a6e4">
	</div>
	<div class="grofile-hash-map-1919b10e4f52e00a8b1345972561b63c">
	</div>
	<div class="grofile-hash-map-932a90d841204bed64a5165e591c5332">
	</div>
	<div class="grofile-hash-map-64a0e209a74957e3c4691536420feee0">
	</div>
	<div class="grofile-hash-map-c303b479f10c4dd2102731e539066b88">
	</div>
	<div class="grofile-hash-map-a7b8dbfb646d8c63fb1bafd91a7f96a4">
	</div>
	<div class="grofile-hash-map-0b220fa4c0b59e883f360979ee745d63">
	</div>
	<div class="grofile-hash-map-d90612de2ddb9348f1347e0780efbbe0">
	</div>
	<div class="grofile-hash-map-8ad83b7563763d817fcb3b27bcaaea5e">
	</div>
	<div class="grofile-hash-map-116636aa332645e66dfb0dac9d8fef85">
	</div>
	<div class="grofile-hash-map-1b03474429f0514c12e657cc02200fc6">
	</div>
	<div class="grofile-hash-map-6c2bac7518ad5640cac5904e10c14022">
	</div>
	<div class="grofile-hash-map-d48ca7aabfcca9bc779cc6dfb963e64b">
	</div>
	<div class="grofile-hash-map-75ce09fe69debef75df9636da96fbced">
	</div>
	<div class="grofile-hash-map-fb9498b88df3ed45a0283e21ed76fd2d">
	</div>
	<div class="grofile-hash-map-9c4e3ee92b3520a3484c9b165f07fb90">
	</div>
	<div class="grofile-hash-map-32cff9839bfa9f0514fda94309e124f8">
	</div>
	<div class="grofile-hash-map-1e6e0b8583d6e536ec32edd7f36d93a1">
	</div>
	<div class="grofile-hash-map-969c8e81506d6be7ff47b96f5ac7270e">
	</div>
	<div class="grofile-hash-map-3817bd13d5c29b806772b60416bb563b">
	</div>
	<div class="grofile-hash-map-4a632aa7d5702a40d669cc9a20f61c92">
	</div>
	</div>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shCore.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushAS3.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushBash.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushColdFusion.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushClojure.js?ver=20090602'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCpp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCSharp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCss.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushDelphi.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushDiff.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushErlang.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushFSharp.js?ver=20091003'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushGroovy.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJava.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJavaFX.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJScript.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushLatex.js?ver=20090613'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushMatlabKey.js?ver=20091209'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushObjC.js?ver=20091207'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPerl.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPhp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPlain.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPowerShell.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPython.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushR.js?ver=20100919'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushRuby.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushScala.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushSql.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushVb.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushXml.js?ver=2.1.364'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/styles/shCore.css?ver=2.1.364";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/styles/shThemeDefault.css?ver=2.1.364";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.clipboardSwf = 'http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/clipboard.swf';
	SyntaxHighlighter.config.strings.expandSource = 'show source';
	SyntaxHighlighter.config.strings.viewSource = 'view source';
	SyntaxHighlighter.config.strings.copyToClipboard = 'copy to clipboard';
	SyntaxHighlighter.config.strings.copyToClipboardConfirmation = 'The code is in your clipboard now';
	SyntaxHighlighter.config.strings.print = 'print';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201428'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
	<!-- Clicky Web Analytics - http://getclicky.com, WordPress Plugin by Yoast - http://yoast.com/wordpress/clicky/ -->
			<script type='text/javascript'>
			function clicky_gc(name) {
				var ca = document.cookie.split(';');
				for (var i in ca) {
					if (ca[i].indexOf(name + '=') != -1) {
						return decodeURIComponent(ca[i].split('=')[1]);
					}
				}
				return '';
			}
			var username_check = clicky_gc('comment_author_7cd4b35511ed5e8fcb32a61b3fd1c995');
			if (username_check) var clicky_custom_session = { username: username_check };
		</script>
		<script type="text/javascript">
		var clicky = { log: function () {
			return true;
		}, goal           : function () {
			return true;
		}};
		var clicky_site_id = 96821;
		(function () {
			var s = document.createElement('script');
			s.type = 'text/javascript';
			s.async = true;
			s.src = '//static.getclicky.com/js';
			( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild(s);
		})();
	</script>
	<noscript><p><img alt="Clicky" width="1" height="1"
	                  src="//in.getclicky.com/96821ns.gif" /></p></noscript>
	<!-- End Clicky Tracking -->

	<script src="http://stats.wordpress.com/e-201428.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0',blog:'52021170',post:'1713',tz:'-5'});
	var load_cmc = function(){linktracker_init(52021170,1713,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script>
<!--[if IE 6]>
  <script type="text/javascript" src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/js/iepngfix_tilebg.js"></script>
<![endif]-->




</body>
</html>
