http://sealedabstract.com/code/you-should-use-core-data/
HTTP/1.0 200 OK
X-Powered-By: PHP/5.4.4-14+deb7u12
X-Pingback: http://sealedabstract.com/xmlrpc.php
Content-Type: text/html; charset=UTF-8
Link: <http://wp.me/p3wh58-mI>; rel=shortlink
Connection: close
Date: Tue, 22 Jul 2014 07:18:48 GMT
Server: lighttpd/1.4.31

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html
xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><link
rel='stylesheet' href='http://sealedabstract.com/wp-content/plugins/wp-minify/min/?f=wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css,wp-content/plugins/wp-to-twitter/css/twitter-feed.css,wp-content/plugins/jetpack/modules/widgets/widgets.css&amp;m=1400665139' type='text/css' media='screen' /> <script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/wp-minify/min/?f=wp-content/themes/inki_v.2.1/js/jquery-1.3.2.min.js,wp-content/themes/inki_v.2.1/js/global.js,wp-content/themes/inki_v.2.1/js/superfish.js,wp-includes/js/jquery/jquery.js,wp-includes/js/jquery/jquery-migrate.min.js,wp-content/plugins/akismet/_inc/form.js&amp;m=1400665128'></script> <meta
http-equiv="content-type" content="text/html; charset=UTF-8" /><title>You should use Core Data | Sealed Abstract</title><meta
name="generator" content="WordPress 3.9.1" /><link
rel="shortcut icon" href="favicon.ico" /><link
rel="stylesheet" type="text/css" media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/inki-styles.php?bg=drk&amp;type=plt" /> <!--[if IE]><link
rel="stylesheet" type="text/css"  media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/ie.css" /> <![endif]--> <!--[if IE 6]><style type="text/css" media="screen">div, img { behavior: url(http://sealedabstract.com/wp-content/themes/inki_v.2.1/js/iepngfix.php) } /* Fix PNG alpha-transparency in IE6 */</style><link
rel="stylesheet" type="text/css"  media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/ie6.css" /> <![endif]--><link
rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://sealedabstract.com/feed/" /><link
rel="alternate" type="text/xml" title="RSS .92" href="http://sealedabstract.com/feed/rss/" /><link
rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://sealedabstract.com/feed/atom/" /><link
rel="pingback" href="http://sealedabstract.com/xmlrpc.php" /><link
rel="alternate" type="application/rss+xml" title="Sealed Abstract &raquo; You should use Core Data Comments Feed" href="http://sealedabstract.com/code/you-should-use-core-data/feed/" /><link
rel="EditURI" type="application/rsd+xml" title="RSD" href="http://sealedabstract.com/xmlrpc.php?rsd" /><link
rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://sealedabstract.com/wp-includes/wlwmanifest.xml" /><link
rel='prev' title='The problem with &#8220;never&#8221;' href='http://sealedabstract.com/rants/the-problem-with-never/' /><link
rel='next' title='Let&#8217;s talk about Sparrow' href='http://sealedabstract.com/rants/lets-talk-about-sparrow/' /><meta
name="generator" content="WordPress 3.9.1" /><link
rel='shortlink' href='http://wp.me/p3wh58-mI' /><style type='text/css'>#wpadminbar .quicklinks li#wp-admin-bar-clickystats {
					height: 28px
				}
				#wpadminbar .quicklinks li#wp-admin-bar-clickystats a {
					height: 28px;
					padding: 0
				}
				#wpadminbar .quicklinks li#wp-admin-bar-clickystats a img {
					padding: 4px 5px;
					height: 20px;
					width: 99px;
				}</style><style type='text/css'>img#wpstats{display:none}</style><meta
name="description" content="In collecting feedback on my previous post discussing the new hotness of NSIncrementalDataStore, I seem to have unexpectedly lit a fuse. On the one hand, th" /><meta
name="keywords" content="code,iphone" /><link
rel="canonical" href="http://sealedabstract.com/code/you-should-use-core-data/" /> <style type="text/css" id="syntaxhighlighteranchor"></style></head><body><div><a
name="top"></a></div><div
id="top-wrapper"></div><div
id="page-wrapper"><div
id="header-wrapper"><div
id="header-container"><div
id="header-top"> <a
id="logo" href="http://sealedabstract.com"> <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/theme-logo.png"
style="left:68px;bottom:20px"
alt=""
title=""
/> </a><h3 id="strapline" style="left:280px; bottom:-10px;"> I write software <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/ornament-1.png" alt="" /></h3><div
id="search"><form
id="search-form" action="http://sealedabstract.com/" method="get"><div> <input
class="textfield" name="s" maxlength="35" type="text" id="search-field" value="search" onclick="value=''" /> <input
class="submit" type="submit" value="search" id="search-btn" /></div></form></div></div><div
id="top-nav-container"><ul
id="top-nav" class="topnav root"><li
class=" root"><a
href="http://sealedabstract.com" title="home">home</a></li><li
class="cat-item cat-item-17 root"><a
href="http://sealedabstract.com/category/business/" title="View all posts filed under business">business</a></li><li
class="cat-item cat-item-5 root"><a
href="http://sealedabstract.com/category/code/" title="View all posts filed under Code">Code</a></li><li
class="cat-item cat-item-9 root"><a
href="http://sealedabstract.com/category/iphone/" title="View all posts filed under iphone">iphone</a></li><li
class="cat-item cat-item-8 root"><a
href="http://sealedabstract.com/category/rants/" title="View all posts filed under rants">rants</a></li><li
class="page_item page-item-2048 root"><a
href="http://sealedabstract.com/things-im-working-on/">Things I&#x2019;m working on</a></li></ul> <a
href="http://sealedabstract.com/feed/rss/" id="rss-txt-link">RSS Feed</a> <a
href="http://sealedabstract.com/feed/rss/" id="rss-icon"><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/rss-icon.png" alt="" /></a></div></div></div><div
id="content-wrapper"><div
id="content-container" class="container_14 clearfix"><div
class="grid_10 content-column"  style="width: 1080px"><div
class="grid_10 alpha omega" id="post-title-box"><div
class="grid_3 alpha"> &nbsp;</div><div
class="grid_7 omega"><h1 id="title"><a
href="http://sealedabstract.com/code/you-should-use-core-data/">You should use Core Data</a></h1></div></div><div
class="grid_10 alpha omega clearfix" id="post-box" style="width: 1080px"><div
class="grid_3 alpha" id="meta"> <span
id="date">06 July 2012</span> <span
id="post-author"><em>by</em> <a
href="http://sealedabstract.com/author/admin/" title="Posts by Drew Crawford" rel="author">Drew Crawford</a></span> <span
id="cat-header">Published in:</span> <span
id="cat-links"><a
href="http://sealedabstract.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a
href="http://sealedabstract.com/category/iphone/" title="View all posts in iphone" rel="category tag">iphone</a></span> <span
id="comments-link"><a
href="http://sealedabstract.com/code/you-should-use-core-data/#comments" rel="nofollow" class="post-comments">16 comments <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/comments-icon.png" alt="" /></a></span></div><div
class="grid_7 omega" id="post" style="width: 675px"><p>In collecting feedback on my previous post discussing the <a
title="NSIncrementalStore – The future of web services in iOS / Mac OS X" href="http://sealedabstract.com/code/nsincrementalstore-the-future-of-web-services-in-ios-mac-os-x/">new hotness of NSIncrementalDataStore</a>, I seem to have unexpectedly lit a fuse.  On the one hand, that blog post has spawned a dozen new projects and has kept my inbox unusually full.  On the other hand, it met an unexpected amount of resistance&#8211;not just to the new workflow for networked models introduced in iOS 5, but the use of Core Data <strong><em>at all</em></strong>.  As I&#8217;ve discussed this with more and more developers, I&#8217;ve found a lot of prevailing myths.  Among them, Core Data is designed for <strong>something</strong>&#8211;not really sure <em>what</em>&#8211;but whatever it is, it&#8217;s a lot more complicated than what I need to do in <em>my</em> project.  <em>I just want to save some entities to disk</em>.  It shouldn&#8217;t take a wheelbarrow of NSManagedSomethingSomethings and programming guides in the hundreds of pages to solve <em>that</em> problem!</p><h2>Two kinds of development</h2><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2012/05/3phod5.jpg');"  href="http://sealedabstract.com/wp-content/uploads/2012/05/3phod5.jpg"><img
class="alignnone size-full wp-image-1409" title="3phod5" src="http://sealedabstract.com/wp-content/uploads/2012/05/3phod5.jpg" alt="" width="320" height="240" /></a></p><p><a
onclick="javascript:pageTracker._trackPageview('/downloads/wp-content/uploads/2012/05/3phoc1.jpg');"  href="http://sealedabstract.com/wp-content/uploads/2012/05/3phoc1.jpg"><img
class="alignnone size-full wp-image-1410" title="3phoc1" src="http://sealedabstract.com/wp-content/uploads/2012/05/3phoc1.jpg" alt="" width="320" height="240" /></a></p><p>I think this pretty much sums up the key objection to CoreData.  Many developers originally migrate from somewhere like Ruby or Python with a library ecosystem that is pretty reasonable.  And so the initial approach is something like &#8220;We need networking?  Okay, let&#8217;s install ASIHTTP!&#8221; (If this is you, the original author of ASIHTTPRequest <a
onclick="javascript:pageTracker._trackPageview('/outgoing/allseeing-i.com/[request_release];');"  href="http://allseeing-i.com/[request_release];">no longer recommends its use</a>.  Clue.)  Let&#8217;s rope in Three20!  Maybe KIF!  And DDLog, or maybe Lumberjack!  Okay, now just write some glue code!</p><p>For endlessly-debated reasons, this pattern isn&#8217;t viable on iOS for anything beyond very simple applications, despite being a core tenet of other software ecosystems.  For starters, iOS lacks any kind of reasonable package management (yes, I&#8217;ve heard of CocoaPods, that&#8217;s a talk for another day), continuous integration that provides some semblance of test coverage for your library is <a
title="iOS Continuous Testing Talk" href="http://sealedabstract.com/code/ios-continuous-testing-talk/">difficult to put it mildly</a>, building &#8220;real&#8221; libraries is <a
onclick="javascript:pageTracker._trackPageview('/outgoing/stackoverflow.com/questions/4733847/can-create-dynamic-library-for-ios');"  href="http://stackoverflow.com/questions/4733847/can-create-dynamic-library-for-ios">forbidden</a>, faking it requires <a
onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/kstenerud/iOS-Universal-Framework');"  href="https://github.com/kstenerud/iOS-Universal-Framework">patched versions of XCode</a> that break under key corner cases, installing complicated libraries requires a <a
onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/square/KIF');"  href="https://github.com/square/KIF">lot of documentation</a> and often &#8220;works for me&#8221; and not anyone else on your team, there is a <a
onclick="javascript:pageTracker._trackPageview('/outgoing/developer.apple.com/library/mac/#qa/qa2006/qa1490.html');"  href="https://developer.apple.com/library/mac/#qa/qa2006/qa1490.html">known bug in LLVM since the dark ages</a> that prevents some libraries from working correctly out of the box, and the popular workaround <a
onclick="javascript:pageTracker._trackPageview('/outgoing/blog.binaryfinery.com/universal-static-library-problem-in-iphone-sd');"  href="http://blog.binaryfinery.com/universal-static-library-problem-in-iphone-sd">causes a lot of problems </a>when using lots of libraries.  To put it mildly, the toolchain and ecosystem is openly hostile to library use.  As a result, plenty of smart people have run into one or two or six of these, and have started to carefully watch the number of libraries they let into an application.</p><p>So most competent iOS developers have this unusually heightened spidey sense that tingles every time you try and talk them into using a library.  Why mess with all that dependency BS when we can just roll our own?  And so people joke about the wheelbarrow of NSManagedSomethingSomethings like, you know, who needs <em>that</em>.  It&#8217;s just a plain terrible library, and we only have a few free library slots, that are reserved for more deserving contestants.</p><p>If you had a time machine, you could travel back to the year 2000, when <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.joelonsoftware.com/printerFriendly/articles/fog0000000069.html');"  href="http://www.joelonsoftware.com/printerFriendly/articles/fog0000000069.html">Joel wrote</a>:</p><blockquote><p>&#8220;It&#8217;s a big hairy mess,&#8221; they will tell you. &#8220;I&#8217;d like nothing better than to throw it out and start over.&#8221;</p><p>Why is it a mess?</p><p>&#8220;Well,&#8221; they say, &#8220;look at this function. It is two pages long! None of this stuff belongs in there! I don&#8217;t know what half of these API calls are for.&#8221;</p></blockquote><p>It&#8217;s incredible how well that article has aged.  It could easily be a criticism of Core Data today.  Joel goes on to write:</p><blockquote><p>Back to that two page function. Yes, I know, it&#8217;s just a simple function to display a window, but it has grown little hairs and stuff on it and nobody knows why. Well, I&#8217;ll tell you why: those are bug fixes. One of them fixes that bug that Nancy had when she tried to install the thing on a computer that didn&#8217;t have Internet Explorer. Another one fixes that bug that occurs in low memory conditions. Another one fixes that bug that occurred when the file is on a floppy disk and the user yanks out the disk in the middle. That LoadLibrary call is ugly but it makes the code work on old versions of Windows 95.</p></blockquote><p>Joel is saying that code is hairy because <strong>real problems are hard</strong>.  I&#8217;m arguing that <strong>CoreData is hairy because it solves real problems</strong>.  There is no universe in which you are going to avoid writing a big hairy mess because you understand how to structure real-world data access for Mac and iOS applications better than Apple.  None.  CoreData is used across tens of thousands of applications inside and outside of Cupertino because it&#8217;s <em>good</em>.  It solves problems your software actually has.</p><h2>CoreData solves hard problems</h2><p>Here are some things you probably haven&#8217;t thought about when architecting your so-called data stack:</p><ul><li>Handling future changes to the data schema</li><li>Bi-directional synchronization with servers</li><li>Bi-directional synchronization with peers (e.g. iPad &lt;-&gt; iPhone)</li><li>Undo support</li><li>Multithreading long-running operations, and synchronizing data between multiple threads</li><li>Operating on a device with memory and/or time constraints, and the flexibility to tune the time/memory tradeoff a bit without rewriting all the existing code</li><li>Notifying faraway code about changes to objects so that they can refresh or update at appropriate intervals</li></ul><p>Just to be clear: if your requirements never change and you never update your applications, you never interact with remote objects, your users never make mistakes, your data operations are all instantaneous, your users all run 12-core Mac Pros, and you only have one view, Core Data is definitely <em>not</em> the correct tool for you.  Go, write your own data stack, and be merry.  The rest of us should be using Core Data.</p><p>Also to be clear, using CoreData here and there does not magically solve all your thread synchronization problems, or build a complete sync engine for you.  It&#8217;s not some magical dust you sprinkle on and life is sunshine and rainbows.  Multithreading is still one of the most challenging problems in all of computer programming.  But, if you&#8217;re going to be at the front lines of combat, you might as well be using military standard issue equipment, not <a
onclick="javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/The_Hunting_of_the_Snark#Hidden_meanings.3F');"  href="https://en.wikipedia.org/wiki/The_Hunting_of_the_Snark#Hidden_meanings.3F">forks and hope and railway-shares</a>.  Use the same tools that other people use to solve hard problems.</p><p>There is a huge temptation to believe that we &#8220;just&#8221; need to read and write a few objects from disk.  After all:  undo support was never mentioned in the specification, and we barely have enough time to write a single-threaded application!  Yet.  Just you wait.  There are three things of which we can be certain: death, taxes, and requirements creep.  Core Data encapsulates a lot of the data-related tasks that are common to Cocoa applications, and as such, encapsulates much of the hidden requirements that your users <em>expect but haven&#8217;t told you about yet</em>.  I give you <em>perhaps</em> until beta before your app has creeped to more than 60% of these.  Just give in and make the jump at the beginning.</p><h2>CoreData is Cocoa for Models</h2><p>Cocoa is a pretty big learning curve, no?  The initial hurdles are learning MVC and learning not to subclass for everything like you do in Java.  Then it&#8217;s delegation, the view hierarchy, and other intermediate topics.</p><p>Have you ever stopped to think about how complicated a UIButton is?  I mean, you have, obviously, the usual stuff with <em>views</em> and <em>windows</em> and <em>frames</em> and <em>bounds</em>.  Mix in some UIControl stuff with target/action patterns.  But there&#8217;s a lot of complexity that is specific to <em>buttons</em>.  How should a button react when you touch down on it?  (iOS draws some shading by default).  Does it make sense to customize this behavior for some kinds of buttons?  What happens if a button is <em>selected</em> (an application-specific button state, like the toggle position of a switch or the check/unchecked property of a checkbox) and you touch inside it?  What about when it is disabled?    Are <em>selected</em> and <em>highlighted</em> and <em>disabled</em> mutually exclusive, or do we consider a button to have many different kinds of &#8220;highlighted&#8221; states?   How should we handle UIControlStateSelected (which is often application-specific) any differently from UIControlStateApplication?  And to further confuse you, the state of a button may or may not be a bitmask field in practice, depending on how you read the documentation.  Is a button in a single state or is it in multiple states?  We&#8217;re just scratching the surface.  Does it make sense for a button of type UIButtonTypeInfoDark to even have a size?  How should it behave to setFrame?  Why is this so <em>hard</em>?  I just want to detect a tap on the screen!</p><p>Now consider something that&#8217;s <em>actually a little bit complicated</em>, like UITableView.  I actually got it out and counted&#8211;the documentation that is <strong>unique to table views</strong> and <strong>unique to iOS</strong> runs to <strong>168 pages </strong>(and it&#8217;s <em>dwarfed</em> by the Mac documentation).  That&#8217;s <em>crazy</em>!  Why should I even use dequeueReusableCellWithIdentifier?  Why should I implement heightForRowAtIndexPath?  Why are the data source and the delegate different?  Why do I need to call deselectCellForRowAtIndexPath?  Why is this so freaking hard when all I want to do is display some rects the user can tap on?</p><p>Or my personal favorite: why do we have these conventions for user interface animations?  <a
onclick="javascript:pageTracker._trackPageview('/outgoing/watchingapple.com/2009/11/a-closer-look-at-iphone-transition-animations/');"  href="http://watchingapple.com/2009/11/a-closer-look-at-iphone-transition-animations/">Why can&#8217;t I just roll my own</a>?  (Answer: because realistic animations are hard.)</p><p>And so developers, kicking and screaming, eventually settle on the idea that Cocoa is in fact not arbitrarily terrible, and that things are this way because users want certain things that are just plain difficult to deliver, you&#8217;re a bit overoptimistic with your estimates, and that these Cocoa APIs really are very good solutions to the problems users typically ask you to solve.  And nobody seriously advocates let&#8217;s drop Cocoa and roll our own UI library.  (Well, except for the gaming developers.  And let&#8217;s face it, gaming developers are crazy.)</p><p>Core Data is basically Cocoa for models.  Apple has been shipping software with the MVC pattern for a very long time.  They have invented a set of primitives that are <em>really freaking good</em>.  Good for large applications, small applications, simple applications, complicated applications, in a box, with a fox, etc.</p><p>I think that a big part of the problem is that it is easier (but not <em>easy</em>) to see what it means for a framework that pushes pixels to be good than for a framework that emits SQL queries to be good.  A framework that automatically shades our button image when we click on it seems like a good framework, intuitively.  dequeueReusableCellWithIdentifier seems like a bad pattern at first, but you can <em>see the effects</em> of doing thing the other way, and it&#8217;s <em>bad</em>.  So even if it&#8217;s not <em>immediately</em> evident, it&#8217;s <strong>eventually</strong> evident.</p><p>The benefits of a data framework that you don&#8217;t use is <strong>never</strong> evident, so you have a whole category of people who just never have an opportunity to evaluate it on a real project.  Then you have another group of people who give it a &#8220;fair shot&#8221; of one project&#8211;you remember when you got Cocoa on the first try?&#8211;and then curse it forever.  I was being recruited for a job once where the interviewer suddenly went on a tirade that CoreData was &#8220;not multithreaded&#8221; and was &#8220;slow&#8221; and that they were moving their code to SQLite immediately, because of all the &#8220;problems&#8221; they were experiencing with a fairly mundane data entry application.  Uh&#8230; what?</p><p>I&#8217;ve actually discovered that asking questions about the data model is a pretty good filter for joining a Cocoa project.  If it&#8217;s backed by CoreData, you&#8217;re talking to a programmer that has <em>at least</em> earned the &#8220;read a programming book and wants to try something new&#8221; badge.  If the models are backed by SQLite, or a home-grown stack, or by no stack, the badness is basically unbounded.  (Of course it <em>can</em> be very good&#8211;I&#8217;ve been in a few good SQLite projects.  It just probably isn&#8217;t.)</p><h2>But, there are times not to use CoreData, right?</h2><p>Of course there are.  But they&#8217;re strange.</p><p>For example, Brent Simmons has a really fantastic article documenting his <a
onclick="javascript:pageTracker._trackPageview('/outgoing/inessential.com/2010/02/26/on_switching_away_from_core_data');"  href="http://inessential.com/2010/02/26/on_switching_away_from_core_data">switch away from CoreData</a> for Net NewsWire.  It ends like this:</p><blockquote><p>My warning: you probably don’t need to switch away from Core Data. It’s the right answer almost every time.</p></blockquote><p>If you go through that article you discover that there&#8217;s probably nothing he&#8217;s running into that applies to you.  It&#8217;s a corner case.  Corner cases exist, and if you&#8217;re in one, don&#8217;t use Core Data.</p><p>Most of the criticism, though, is of <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.manton.org/2010/02/i_dont_use.html');"  href="http://www.manton.org/2010/02/i_dont_use.html">this variety</a>:</p><blockquote><p>If I had been writing that post I probably wouldn&#8217;t have praised Core Data as much as he did, although admittedly because I rarely use it, and not at all in any shipping applications. Its approach always seemed slightly wrong to me.</p><p>My main reason for sticking with SQL directly is that I know by coding at this lower level — with my own lightweight model objects on top of FMDB and utility methods for working with the Clipstart database — that if something is slow it&#8217;s my fault. I can fix things that are my fault. I can&#8217;t fix fundamental design problems in Apple&#8217;s code.</p></blockquote><p>I don&#8217;t want to be too hard on Manton&#8211;I&#8217;m sure he&#8217;s a nice guy, seems local too&#8211;but the politest way to characterize that comment is <em>willful ignorance</em>.  iOS and Mac development is chock full of Apple magic that he has no visibility into&#8211;what makes Core Data different from the rest of Cocoa?  What are these fundamental design issues that cannot be corrected?  He proudly publishes that he has never tried it long enough to know.</p><p>I have heard a lot of people with this same general sentiment &#8212; &#8220;I haven&#8217;t really tried it and it <em>sucks</em>!&#8221;&#8211;which is just not a very rational sentiment, just for starters.  Don&#8217;t get me wrong, there are a set of things that are reasonable to bash without really giving a fair shake.  I&#8217;m just saying that the technology that underlies iCal, Mail, Contacts, iCloud, iMovie, and half a dozen other multi-million dollar software projects that you use daily is probably not in that set.</p><h2>I&#8217;m still not convinced</h2><p>Let me let Apple do the talking:</p><blockquote><p>There are a number of reasons why it may be appropriate for you to use Core Data. One of the simplest metrics is that, with Core Data, the amount of code you write to support the model layer of your application is typically 50% to 70% smaller as measured by lines of code. This is primarily due to the features listed above—the features Core Data provides are features you don’t have to implement yourself. Moreover they’re features you don’t have to test yourself, and in particular you don’t have to optimize yourself.</p><p>Core Data has a mature code base whose quality is maintained through unit tests, and is used daily by millions of customers in a wide variety of applications. The framework has been highly optimized over several releases. It takes advantage of information provided in the model and runtime features not typically employed in application-level code. Moreover, in addition to providing excellent security and error-handling, it offers best memory scalability of any competing solution. Put another way: you could spend a long time carefully crafting your own solution optimized for a particular problem domain, and not gain any performance advantage over what Core Data offers for free for any application.</p></blockquote><p>I think this point needs to be stressed:  <strong>Apple&#8217;s high-level APIs can be much faster than &#8216;optimized&#8217; code at lower levels</strong>.  CoreData is quite often going to be faster than whatever SQL you write manually.</p><p>I should add to this, Core Data is not the only high-level API that is so good it regularly outperforms people trying to work at a lower level.  <a
onclick="javascript:pageTracker._trackPageview('/outgoing/stackoverflow.com/questions/8035673/most-efficient-way-to-draw-part-of-an-image-in-ios');"  href="http://stackoverflow.com/questions/8035673/most-efficient-way-to-draw-part-of-an-image-in-ios">UIImageView</a> is another case, where it is literally the fastest way to put an image on the screen you will ever come up with.  I can&#8217;t count the number of times that I&#8217;ve seen smart people reject CALayer or UIView-based approaches to drawing, opting instead to drop to Quartz or CGContext&#8230; only to have it run much slower than the naive view implementation, which is very often emitting hand-optimized GPU assembler as part of its implementation.  High-level doesn&#8217;t always mean slower; in fact it often means faster if the API boys have done their homework.</p><p>And that 50-70% figure is taken from actual Apple codebases that were migrated to CoreData.  Real numbers, from real applications.  That you probably have installed.</p><h2>So why not use Core Data?</h2><p>Well, I don&#8217;t think there is a <em>real</em> reason not to use Core Data for virtually any project of any size.</p><p>But if there are plenty of reasons why it has an (undeserved) bad rap.  These include:</p><ul><li>Programmer naiveté.  <em>My</em> application isn&#8217;t going to be complicated enough to warrant it.  I <em>just</em> need to save some objects to disk.</li><li>Expectations that are not in line with learning to use other large frameworks (Cocoa).  I used it on a half a project and it turned out to be a lot of work!</li><li>Willful ignorance.  I don&#8217;t have any idea what I&#8217;m talking about, but it sounds like a bad idea to me!  Paint the bike shed red.</li></ul><div>And ultimately, it may go back to Spolsky&#8217;s insight from 2000.  Reading code is hard.  Writing code is easy.  Why learn when we can re-invent?</div><div></div><div>Cocoa as a discipline has formed a hefty set of best practices:  NSNotificationCenter <a
onclick="javascript:pageTracker._trackPageview('/outgoing/alanquatermain.me/post/1686415314/an-nsnotification-blocks-gotcha');"  href="http://alanquatermain.me/post/1686415314/an-nsnotification-blocks-gotcha">with blocks</a> is bad, <a
onclick="javascript:pageTracker._trackPageview('/outgoing/developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingMethods.html#//apple_ref/doc/uid/20001282-BCIGIJJF');"  href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingMethods.html#//apple_ref/doc/uid/20001282-BCIGIJJF">verbose names</a> are good, <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.friday.com/bbum/2011/12/18/retaincount-is-useless/');"  href="http://www.friday.com/bbum/2011/12/18/retaincount-is-useless/">retainCount is useless</a>, and about a <a
onclick="javascript:pageTracker._trackPageview('/outgoing/stackoverflow.com/questions/155964/what-are-best-practices-that-you-use-when-writing-objective-c-and-cocoa');"  href="http://stackoverflow.com/questions/155964/what-are-best-practices-that-you-use-when-writing-objective-c-and-cocoa">bajillion other best practices</a>.  It&#8217;s time that we added to the list, if you are saving more than 3 objects to disk without linking to CoreData.framework, you&#8217;re <em>doing it wrong</em>.</div> <b>Like this post?</b> Contribute to the coffee fund so I can write more like it. <script src="http://coinwidget.com/widget/coin.js"></script> <script>CoinWidgetCom.go({
	wallet_address: "1GyPKBt3Tpgqzc8Nbd8tmvRQUQpJPZH41Y"
	, currency: "bitcoin"
	, counter: "count"
	, alignment: "bl"
	, qrcode: true
	, auto_show: false
	, lbl_button: "Donate"
	, lbl_address: "My Bitcoin Address:"
	, lbl_count: "donations"
	, lbl_amount: "BTC"
});</script></div><div
id="comments"><div
class="" id="comments-heading-box"><h3>Comments</h3></div><ol
id="commentlist" class="commentlist"><li
class="comment even thread-even depth-1" id="li-comment-7607"><div
class="comment" id="comment-7607"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/philjordan.eu/');"  href='http://philjordan.eu/' rel='external nofollow' class='url'>Phil Jordan</a></span> <img
alt='' src='http://0.gravatar.com/avatar/806f1ee8727720d5184b037b1d24ed06?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 6:28 am</span><p>You&#8217;re almost certainly right that Core Data is excellent. My main problem with it is its opacity: the documentation is typical Apple fare: covers the basics, but doesn&#8217;t give a deep insight that will help you when you run into weird situations. I&#8217;ve not read the dedicated books on the topic, but from my research (reviews, Amazon &#8220;look inside&#8221;) they seem to be barely more than regurgitated Apple docs, aside from some optimisation tips. Maybe my impression of the books is wrong and there are some excellent ones.</p><p>I should probably mention my level of exposure to Core Data: I&#8217;ve used Core Data in a small and simple CRUD OS X app and spent some time researching it before deciding against using it in an iOS app (back on iOS 4).</p><p>The OSX app really was extremely simple, but we still managed to run into all sorts of weird cases that are either not covered by CD at all or just not documented. Most of these were probably just unexpected Bindings/KVO/CD interplay. It&#8217;s unfortunate that the documentation for these systems is pretty much completely separate yet you end up using them in a deeply integrated way doesn&#8217;t help.</p><p>For example, it seemed reasonable to us to have a Cocoa sheet for creating a new instance of one of the more complex entities that encapsulated a bit of logic to derive some data. For such an instance to make sense, we needed to get all the data for it in one go, and then only run the logic for creating the object once the user was ready. The Bindings/KVO/CD triad doesn&#8217;t seem to be ready for this case at all, as it always wants you to create the object and insert it into the managed object context first. This of course causes it to appear in other views, even though it&#8217;s not &#8220;ready&#8221;. You can work around this of course, but we didn&#8217;t find a solution we were really happy with.</p><p>The iOS app wasn&#8217;t a straightforward CRUD situation, although the data model was heavily relational. Most of the data was read-only, generated in a web app back-end, to be pushed out to mobile clients for offline use. Lots of image data, which pushed it up into the dozens of megabytes; the data changed somewhat frequently but the extent of the changes was usually small, so we wanted to avoid redownloading the whole database every time. Parallel to this were two types of object which WERE mutable on the client, but were only stored locally. I ended up using two SQLite databases, one big one opened in read-only mode, generated on the server, and a small read-write one. For JOINs, I also ATTACHed the local one to the big database&#8217;s session. We made binary diffs between versions of the readonly database and had the client download those and patch them locally.</p><p>I&#8217;m still not sure to this day if Core Data would have (a) worked in that situation or (b) saved me any effort. The main risks I saw were:</p><p>- Generating a Core Data store outside the Apple ecosystem (the source of the data was an existing webapp running on a Linux server). I&#8217;m sure the SQLite schema isn&#8217;t too hard to copy, but I didn&#8217;t find any attempts from Apple whatsoever to aid or document this kind of interop.</p><p>- Efficient syncing of the server-generated data and combining it with local changes. Maybe this is solved with CD from iOS5, I haven&#8217;t looked into it. If that&#8217;s iCloud-only that&#8217;s a dealbreaker yet again though.</p><p>So I think it comes down to the fact that Core Data is just a bit too opaque and thus a rather risky proposition. I mean, it&#8217;s a lot more documented than a lot of third-party libraries, but crucially, those third-party libraries let me look at the source code (and modify it) when the documentation fails and I get stuck.</p><p>So although Core Data probably does more, better, its opacity is a liability. And unlike almost everything else about Apple&#8217;s libraries, Core Data is an all-or-nothing proposition. If whatever UIKit component isn&#8217;t working for you on a screen, you can roll your own FOR THAT SCREEN. If you run into an unfixable problem with Core Data, you either have to work around it, or migrate the whole data model for your app out of it. That&#8217;s a big risk.</p><p>I&#8217;ll certainly still re-evaluate Core Data for new apps, but I think you&#8217;re glossing over some important reasons not to use it.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-7608"><div
class="comment" id="comment-7608"><div
class="comment-author"> <span
class="author">Andy</span> <img
alt='' src='http://1.gravatar.com/avatar/3b1e3faef1818532eb29e2b8c48513f3?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 7:12 am</span><p>I have pretty much the same sentiment regarding Core Data, it was somehow a little bit hard to get started, but after I managed to understand how it actually works, I really just forgot about the existence of SQLITE, and I tell you, I have a pretty neat case scenario where I was about to drop Core Data because it just didn&#8217;t &#8220;do&#8221; what I wanted. Of course, after some more research, I was able to pull that requirement I had, out of it. Its really a great tool, and if you don&#8217;t use it, really, you are doing something wrong, to quote the author <img
src="http://sealedabstract.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p><p>Thanks Drew !</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-7609"><div
class="comment" id="comment-7609"><div
class="comment-author"> <span
class="author">Palo</span> <img
alt='' src='http://0.gravatar.com/avatar/6560d611fbd08d5f36270248438eb2c2?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 7:22 am</span><p>H there and thanks for the great article!!</p><p>One question: I&#8217;ve always heard that CoreData isn&#8217;t a relational database, that is it&#8217;s not easy to perform my complicated SQL queries with it.</p><p>I mean, is it simple to execute a complicated query and get back the result set in form of an NSDictionary as FMDB does?</p><p>Because if it&#8217;s not, then many application should stick with FMDB.</p><p>What do you think about it?</p><p>Thank you very much!</p><p>Paolo</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-7610"><div
class="comment" id="comment-7610"><div
class="comment-author"> <span
class="author">Santiago Lema</span> <img
alt='' src='http://0.gravatar.com/avatar/ea8fd1d89b151a5921acf49d69a10ffc?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 8:45 am</span><p>Great post. Definitely encouraged me to try CoreData for a future project.</p><p>I&#8217;d add an obvious argument to your list at the end: using CoreData doesn&#8217;t sound good if you need to port the app to a non apple platform. If you need to ensure it behaves the same way on Android and iOS then you&#8217;d use SQLite.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-7611"><div
class="comment" id="comment-7611"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.RyanMan.com');"  href='http://www.RyanMan.com' rel='external nofollow' class='url'>Ryan Poolos</a></span> <img
alt='' src='http://0.gravatar.com/avatar/21704f466a6471215318482292a41138?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 9:13 am</span><p>Excellent arguments.</p><p>I used every one of these excuses to steer away from Core Data over the past. But 2 months ago I had a project that simply HAD to have Core Data because I was not about to hand roll any SQLite backends.</p><p>Short story, and barely 100 lines of a code later Core Data has magically saved the day and fit in perfectly in a multithreaded, feature creeped, relational model application.</p><p>I don&#8217;t think I&#8217;ll ever build an app without Core Data again.</p> <span
class="reply"></span></div></div></li><li
class="comment byuser comment-author-admin bypostauthor odd alt thread-odd thread-alt depth-1" id="li-comment-7612"><div
class="comment" id="comment-7612"><div
class="comment-author"> <span
class="author">Drew Crawford</span> <img
alt='' src='http://0.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 11:48 am</span><p>Hi Phil,</p><p>Core Data is not opaque at all.  If you haven&#8217;t found good documentation, you haven&#8217;t looked hard enough.  It&#8217;s been in production since the Next days (e.g. decades), much longer than, say, SQLite.  There are many, many, good books and WWDC talks that delve deeply into internals.</p><p>There are two things you can do in your situation: either set a boolean flag that means &#8220;really created&#8221;, or you could use two MOC/store pairs: one for &#8220;inserted&#8221; and one as a staging area.</p><p>For read-only data, SQLite isn&#8217;t such a bad idea as an interchange format with a web service.  So you might have gotten away with an SQLite dump for the read-only stuff plus CD for the read-write stuff.  You should also look into NSIncrementalStore for web service data communication, see my earlier post.  CD&#8217;s web service integration is a lot more advanced than SQLite&#8217;s (that is, it is not nonexistent).</p><p>> If you run into an unfixable problem with Core Data, you either have to work around it, or migrate the whole data model for your app out of it. That’s a big risk.</p><p>Well, first of all, I&#8217;ve never run into this kind of issue.  But you completely can migrate out on a model-by-model basis if you want to.  From application code they&#8217;re just Cocoa objects.  So you can move back and forth between NSKeyedArchiver (or whatever) without any change to the view or controller code.  Assuming, of course, you&#8217;re practicing good MVC.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-7613"><div
class="comment" id="comment-7613"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/philjordan.eu/');"  href='http://philjordan.eu/' rel='external nofollow' class='url'>Phil Jordan</a></span> <img
alt='' src='http://0.gravatar.com/avatar/806f1ee8727720d5184b037b1d24ed06?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 2:32 pm</span><p>Drew, any chance you could recommend some of those &#8220;many, many good books&#8221;? Maybe it&#8217;s just the recent iOS book goldrush that has produced a bunch of bad books on the subject.</p><p>Also, I can&#8217;t help pointing out the irony in &#8221; If you haven’t found good documentation, you haven’t looked hard enough,&#8221; as a follow-up to &#8220;NSIncrementalStore is perhaps the best-kept secret in iOS 5.  It doesn’t show up in any advertising materials, barely rates a passing mention in WWDC tech talks, and has the world’s shortest programming guide, at only a few pages.  It is so well hidden that I only discovered it very recently.&#8221; (from the NSIncrementalDataStore post) <img
src="http://sealedabstract.com/wp-includes/images/smilies/icon_smile.gif" alt=":-)" class="wp-smiley" /></p><p>Re: WWDC &#8211; noted; if I embark on another project that&#8217;s a Core Data candidate, I&#8217;ll look through the archives.</p><p>Re &#8220;staging&#8221; objects &#8211; yeah, those are the two solutions we encountered. Both give me the creeps as dirty, dirty hacks. The flag doesn&#8217;t scale as suddenly the whole rest of the app needs to know about this implementation detail. The solution with two MOCs is far from obvious. Maybe it&#8217;s documented somewhere, I don&#8217;t know, but I eventually found it in some mailing list post from the early 2000s.</p><p>For the hybrid read-only SQLite &amp; read-write CD: does that permit some kind of efficient cross-database JOINs, like raw SQLite does?</p><p>&gt; &#8220;Well, first of all, I’ve never run into this kind of issue. But you completely can migrate out on a model-by-model basis if you want to. &#8221;</p><p>That isn&#8217;t a real solution though, is it? If you can&#8217;t run queries across your whole data model, that makes it fairly useless. So you&#8217;re basically stuck with going the whole hog.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-7614"><div
class="comment" id="comment-7614"><div
class="comment-author"> <span
class="author">Frank</span> <img
alt='' src='http://0.gravatar.com/avatar/09b0ddcdf9cf9137d9f7323dcf4bae35?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 3:20 pm</span><p>I used SQLite because I had to build the same functionality into both an iPhone app and an Android app. Even though I knew I&#8217;d have to rewrite the code in Java, I figured that having the same database schema, the same SQL queries, and the same function calls across both platforms would be beneficial. Was I wrong?</p> <span
class="reply"></span></div></div></li><li
class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="li-comment-7618"><div
class="comment" id="comment-7618"><div
class="comment-author"> <span
class="author">Drew Crawford</span> <img
alt='' src='http://0.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 10:43 pm</span><p>@Frank, I think if you have a lot of queries that you can share e.g. in a text file that is shared between both platforms, you can potentially get some reduced maintenance burden because new features over here can be more easily ported over there.</p><p>But, you have to balance this against, for example, having to roll your own undo support, additional time to performance tune, and so on.  There is a class of applications for which this tradeoff is a net positive, but I would say probably not the majority.</p> <span
class="reply"></span></div></div></li><li
class="comment byuser comment-author-admin bypostauthor odd alt thread-odd thread-alt depth-1" id="li-comment-7619"><div
class="comment" id="comment-7619"><div
class="comment-author"> <span
class="author">Drew Crawford</span> <img
alt='' src='http://0.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Sat 07th Jul 2012 at 11:29 pm</span><p>@Phil,</p><p>Pro Core Data by Privat is the bible these days, Zarra&#8217;s book is dated but still very good.</p><p>Claiming that CD&#8217;s documentation is bad because NSIncrementalStore&#8217;s documentation is bad is like claiming UIKit&#8217;s documentation is bad because UITextInputStringTokenizer&#8217;s documentation is bad.  Both classes are advanced tools for solving advanced problems, and a are a small part of a much larger whole.  I wrote the NSIncrementalStore post to tell the advanced CD guys &#8220;Hey, you should take a look at this!&#8221;.  But my discussions with people IRL has often devolved to &#8220;Why should I be using CD anyway?&#8221;, so it occurred to me that there needed to be a more surfacey discussion of why CD is a good idea to begin with before delving into the One True Architecture conversation.</p><p>> The solution with two MOCs is far from obvious.</p><p>&#8220;Obvious&#8221; is subjective.  Obvious <em>to you</em>.  I came up with it in 30 seconds.  (I&#8217;m also a CD veteran.)</p><p>A lot of the things we programmers do:  Cocoa, MVC, ARC, autolayout, UITableView, git, are all &#8220;far from obvious&#8221;.  But they are still incredibly powerful tools to solve incredibly common problems.  For something that is a critical part of the toolbelt, &#8220;obvious&#8221; is not the right criteria.  A Keurig coffee maker with one button is great if you just need some coffee, but if you make coffee for a living, you need an expensive espresso machine with the levers and analog pressure meters and hoses and that.  I write models code for a living, and anyone in that position needs actual professional-grade tools.  Pro tools are not obvious.  They are not easy to pick up.  They are <strong>good</strong>.  Core Data is good.  That&#8217;s the claim.  Not that it&#8217;s easy.</p><p>> So you’re basically stuck with going the whole hog.</p><p>This is true in the sense that it is true for any database.  It makes just as much sense to blame SQLite for its failure to interface with your CD models as it does to blame CD for failure to integrate with your SQLite models.  I don&#8217;t know what this has to do with one or the other.</p><p>Actually, that was a complete lie.  You can do cross-domain joins with NSIncrementalStore (but this is &#8220;advanced&#8221;, and might take me an afternoon).  So in a very serious sense, CD is better able to do cross-domain queries with an arbitrary alternate database than SQLite is able to do the same with an arbitrary alternate database.  The solution isn&#8217;t &#8220;obvious&#8221;, but it&#8217;s a lot easier than it would be cross-joining (say) SQLite with MySQL.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-7641"><div
class="comment" id="comment-7641"><div
class="comment-author"> <span
class="author">Carl</span> <img
alt='' src='http://0.gravatar.com/avatar/4ef1917b920bb010e6ee3d61659f82f7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Thu 19th Jul 2012 at 7:03 am</span><p>thx for the nice article.</p><p>i only dismiss CD when i have heavy usage of (INSERT OR REPLACE/UPDATE) and DELETE FROM table;.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-7678"><div
class="comment" id="comment-7678"><div
class="comment-author"> <span
class="author">Michael</span> <img
alt='' src='http://0.gravatar.com/avatar/c50a36fe49910e903fb60ecb6d4b1395?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Fri 10th Aug 2012 at 1:12 am</span><p>- Bi-directional synchronization with servers<br
/> - Bi-directional synchronization with peers</p><p>How does CoreData solve that? Are you referring to the willSave notifications which allows you to implement a synching framework? Or is there built in functionality you are referring to.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-7735"><div
class="comment" id="comment-7735"><div
class="comment-author"> <span
class="author">Anubis</span> <img
alt='' src='http://1.gravatar.com/avatar/b76e8280066f1fcc9c11dfbf8cdbe906?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Fri 28th Sep 2012 at 5:39 am</span><p>Hi, nice site and articles.<br
/> With my feelings i&#8217;am sitting between the two kamps. I&#8217;am convinsed that I need CD, but it feels difficult. Like the questions of michael. You claim it is something normal, but for me/us it is hard to figure it out the CD way. Btw I have a sync lib not using CD, but its old. So I need to step up to CD. Also interacting with two different stores in one app, for me it feels like hell. Maybe you can write an article about those two, sync and two stores.<br
/> Thank you</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-7813"><div
class="comment" id="comment-7813"><div
class="comment-author"> <span
class="author">green_knight</span> <img
alt='' src='http://1.gravatar.com/avatar/93647b32b29cf7301e5766dddebda9a4?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 23rd Jan 2013 at 9:34 am</span><p>Wonderful article, thanks.</p><p>(Brief intro: I&#8217;m a long-time Filemaker developer (20+ years), just beginning OS X/iOS development, so I&#8217;m definitely thinking beyond my current skills).</p><p>The application I&#8217;m working on right now seems destined for Core Data &#8211; it has a very strong database component. Unfortunately it&#8217;s a complex scheme that needs a great deal of flexibility &#8211; users will want to rethink their classification and the fields they use frequently as their datasets grow and the addition of custom fields is a necessary feature.</p><p>Let&#8217;s call my base object a &#8216;record&#8217;.</p><p>Ordinarily I&#8217;d create a Record class and use an NSMutableDictionary to hold the fields for each record so users can make changes on the fly.<br
/> Since CoreData does not allow the editing of attributes at runtime, a &#8216;record&#8217; entity with attributes (instead of keys) doesn&#8217;t fulfill my needs. I could stick &#8216;userDefinableField1-n&#8217; into the model, but that would just mean that most of my users will wish they had n+1 fields to work with. Also, users may want fields for different purposes, including attributed text, numbers, and images, so providing one potential attribute would not be enough.</p><p>At this point, I cannot see a way to implement this aspect of my application using CoreData. The idea of having all my data in one big lump in the database and fetched using predicates makes me shudder (though maybe that&#8217;s the way to deal with this?) and documentation, including Zarra&#8217;s book (which I find somewhat prolematic) don&#8217;t give much help with this. At the same time, the model seems almost trivial to design using subclasses of NSObject and I&#8217;m still at the time in my programming career where I go &lt;handwave&gt; I&#8217;ll solve the problem of performance optimisation later, I just want something that works so I can move on&lt;waves hands again&gt; (this might give you some insight why people don&#8217;t use Core Data).</p> <span
class="reply"></span></div></div></li><li
class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="li-comment-7860"><div
class="comment" id="comment-7860"><div
class="comment-author"> <span
class="author">Drew Crawford</span> <img
alt='' src='http://0.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 26th Mar 2013 at 2:41 am</span><blockquote><p>Since CoreData does not allow the editing of attributes at runtime,</p></blockquote><p>It does, although it&#8217;s not something I would recommend trying as a first project.  You&#8217;re way outside of xcdatamodeld land at that point.</p><p>But then again, I wouldn&#8217;t recommend it as your first sqlite / MySQL project either, or for that matter for their first custom database implementation.  So we&#8217;re at solution parity here.</p><p>I think the real problem that you face is that arbitrary schema changes are arbitrarily complicated.  How do you write queries for arbitrary schemas?  How do you do migrations when the schemas change?  There are (hopefully!) simple solutions in your specific case, but there are no solutions in the arbitrary case, and you have presented an arbitrary problem.  And whether the solutions to your problems are simple or hard doesn&#8217;t have much to do with what storage technology you use, as it&#8217;s either simple or it&#8217;s hard for all the reasonable contenders.</p><p>If you <em>really</em> need user-configured arbitrary schema support, you are reading the wrong article.  The real problem you face is designing a user interface that sufficiently empowers mobile users to edit their schemas.  To the best of my knowledge, this is a completely unsolved problem, even by companies where databases are the core business and are quite motivated to study it.  That&#8217;s where the focus should be, and your data layer should be whatever crazy implementation that lets you iterate the UI prototype the fastest.  Once you&#8217;ve got that solution proven is the time to look at how anything is stored.</p> <span
class="reply"></span></div></div></li></ol><div
id="respond"> <a
rel="nofollow" id="cancel-comment-reply-link" href="/code/you-should-use-core-data/#respond" style="display:none;">Click here to cancel reply.</a><h3>Add comment</h3><form
action="http://sealedabstract.com/wp-comments-post.php" method="post" id="commentform"><div
class="form-element"> <label
for="author">Your name*</label> <input
type="text" class="textfield" name="author" id="author" value="" size="22" tabindex="1" aria-required='true' /></div><div
class="form-element"> <label
for="email">Your email address* &nbsp; <em
class="small">(will not be published)</em></label> <input
type="text" class="textfield" name="email" id="email" value="" size="22" tabindex="2" aria-required='true' /></div><div
class="form-element"> <label
for="url">Your website</label> <input
type="text" class="textfield" name="url" id="url" value="" size="22" tabindex="3" /></div><div
class="form-element"> <label
for="comment">Your comment</label><div
id="comment-text-wrapper"><textarea name="comment" id="comment" cols="65" rows="10" tabindex="4"></textarea></div></div><div
class="form-element"><input
class="submit" type="submit" id="comment-submit" value="submit comment" tabindex="5" /></div><p
style="display: none;"><input
type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="551c4e3de0" /></p><p
class="comment-subscription-form"><input
type="checkbox" name="subscribe_comments" id="subscribe_comments" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;" /> <label
class="subscribe-label" id="subscribe-label" for="subscribe_comments">Notify me of follow-up comments by email.</label></p><p
class="comment-subscription-form"><input
type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;" /> <label
class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of new posts by email.</label></p><p
style="display: none;"><input
type="hidden" id="ak_js" name="ak_js" value="250"/></p><div><input
type='hidden' name='comment_post_ID' value='1408' id='comment_post_ID' /> <input
type='hidden' name='comment_parent' id='comment_parent' value='0' /></div></form></div></div></div></div></div></div><div
id="footer-wrapper"><div
id="footer-nav" class="clearfix"> <a
href="#top" id="back-to-top-link-left"><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/arrow-up.png" alt="" /> Back to top</a> <a
href="#top" id="back-to-top-link-right">Back to top <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/arrow-up.png" alt="" /></a></div><div
id="footer" class="container_14 clearfix"><ul
id="footer-sidebar" class="sidebar"><li
id="tag_cloud-3" class="widget widget-1 widget_tag_cloud"><h2><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-left.png" class="ornament" alt="" /> Tags <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-right.png" class="ornament" alt="" /></h2><div
class="tagcloud"><a
href='http://sealedabstract.com/tag/app-store/' class='tag-link-12' title='1 topic' style='font-size: 8pt;'>app store</a> <a
href='http://sealedabstract.com/tag/arduino/' class='tag-link-7' title='1 topic' style='font-size: 8pt;'>arduino</a> <a
href='http://sealedabstract.com/tag/hardware/' class='tag-link-6' title='1 topic' style='font-size: 8pt;'>hardware</a> <a
href='http://sealedabstract.com/tag/hn/' class='tag-link-23' title='1 topic' style='font-size: 8pt;'>HN</a> <a
href='http://sealedabstract.com/tag/incentives/' class='tag-link-25' title='1 topic' style='font-size: 8pt;'>incentives</a> <a
href='http://sealedabstract.com/tag/iphone/' class='tag-link-9' title='2 topics' style='font-size: 22pt;'>iphone</a> <a
href='http://sealedabstract.com/tag/law/' class='tag-link-15' title='1 topic' style='font-size: 8pt;'>law</a> <a
href='http://sealedabstract.com/tag/linux/' class='tag-link-11' title='1 topic' style='font-size: 8pt;'>linux</a> <a
href='http://sealedabstract.com/tag/long-articles/' class='tag-link-26' title='1 topic' style='font-size: 8pt;'>long articles</a> <a
href='http://sealedabstract.com/tag/mips/' class='tag-link-10' title='1 topic' style='font-size: 8pt;'>mips</a> <a
href='http://sealedabstract.com/tag/native-apps/' class='tag-link-28' title='1 topic' style='font-size: 8pt;'>native apps</a> <a
href='http://sealedabstract.com/tag/notifo/' class='tag-link-13' title='1 topic' style='font-size: 8pt;'>notifo</a> <a
href='http://sealedabstract.com/tag/programmers/' class='tag-link-24' title='1 topic' style='font-size: 8pt;'>programmers</a> <a
href='http://sealedabstract.com/tag/rants/' class='tag-link-8' title='1 topic' style='font-size: 8pt;'>rants</a> <a
href='http://sealedabstract.com/tag/steve-jobs/' class='tag-link-16' title='1 topic' style='font-size: 8pt;'>steve jobs</a> <a
href='http://sealedabstract.com/tag/web-apps/' class='tag-link-27' title='1 topic' style='font-size: 8pt;'>web apps</a> <a
href='http://sealedabstract.com/tag/wifi/' class='tag-link-14' title='1 topic' style='font-size: 8pt;'>wifi</a></div></li><li
id="text-4" class="widget widget-2 widget_text"><h2><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-left.png" class="ornament" alt="" /> Subscribe via e-mail <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-right.png" class="ornament" alt="" /></h2><div
class="textwidget"><div
id="mc_embed_signup"><form
action="http://drewcrawfordapps.us1.list-manage2.com/subscribe/post?u=e78fe221beda78f7524116d70&amp;id=3d9fd4c03f" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank"><h2>Subscribe via e-mail</h2><div
class="mc-field-group"> <label
for="mce-EMAIL">Email Address <span
class="asterisk">*</span> </label> <input
type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL"></div><div
id="mce-responses" class="clear"><div
class="response" id="mce-error-response" style="display:none"></div><div
class="response" id="mce-success-response" style="display:none"></div></div><div><input
type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div></form></div></div></li></ul></div></div></div><div
id="bottom-wrapper"><div
id="bottom-container"><div
id="bottom-left-col">Copyright © 2011 Drew Crawford, All Rights Reserved</div><div
id="bottom-right-col">Powered by WordPress</div></div></div>
 <script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> <script type="text/javascript">var pageTracker = _gat._getTracker("UA-8841539-1");
pageTracker._initData();
pageTracker._trackPageview();</script><p align='center'><small>Page optimized by <a href='http://omninoggin.com/wordpress-plugins/wp-minify-wordpress-plugin/' title='WP Minify WordPress Plugin' style='text-decoration:none;'>WP Minify</a> <a href='http://omninoggin.com/' title='WordPress Plugin' style='text-decoration:none;'>WordPress Plugin</a></small></p>	<div style="display:none">
	<div class="grofile-hash-map-806f1ee8727720d5184b037b1d24ed06">
	</div>
	<div class="grofile-hash-map-3b1e3faef1818532eb29e2b8c48513f3">
	</div>
	<div class="grofile-hash-map-6560d611fbd08d5f36270248438eb2c2">
	</div>
	<div class="grofile-hash-map-4d7d7fc4f5777b56a488ad9b2e43126c">
	</div>
	<div class="grofile-hash-map-21704f466a6471215318482292a41138">
	</div>
	<div class="grofile-hash-map-a838c63b9093a77fb88231d65effa3b3">
	</div>
	<div class="grofile-hash-map-09b0ddcdf9cf9137d9f7323dcf4bae35">
	</div>
	<div class="grofile-hash-map-4ef1917b920bb010e6ee3d61659f82f7">
	</div>
	<div class="grofile-hash-map-c50a36fe49910e903fb60ecb6d4b1395">
	</div>
	<div class="grofile-hash-map-43938c68c1fe07072e97b6840db281fa">
	</div>
	<div class="grofile-hash-map-93647b32b29cf7301e5766dddebda9a4">
	</div>
	</div>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shCore.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushAS3.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushBash.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushColdFusion.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushClojure.js?ver=20090602'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCpp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCSharp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCss.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushDelphi.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushDiff.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushErlang.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushFSharp.js?ver=20091003'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushGroovy.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJava.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJavaFX.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJScript.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushLatex.js?ver=20090613'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushMatlabKey.js?ver=20091209'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushObjC.js?ver=20091207'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPerl.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPhp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPlain.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPowerShell.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPython.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushR.js?ver=20100919'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushRuby.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushScala.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushSql.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushVb.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushXml.js?ver=2.1.364'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/styles/shCore.css?ver=2.1.364";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/styles/shThemeDefault.css?ver=2.1.364";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.clipboardSwf = 'http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/clipboard.swf';
	SyntaxHighlighter.config.strings.expandSource = 'show source';
	SyntaxHighlighter.config.strings.viewSource = 'view source';
	SyntaxHighlighter.config.strings.copyToClipboard = 'copy to clipboard';
	SyntaxHighlighter.config.strings.copyToClipboardConfirmation = 'The code is in your clipboard now';
	SyntaxHighlighter.config.strings.print = 'print';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
	<!-- Clicky Web Analytics - http://getclicky.com, WordPress Plugin by Yoast - http://yoast.com/wordpress/clicky/ -->
			<script type='text/javascript'>
			function clicky_gc(name) {
				var ca = document.cookie.split(';');
				for (var i in ca) {
					if (ca[i].indexOf(name + '=') != -1) {
						return decodeURIComponent(ca[i].split('=')[1]);
					}
				}
				return '';
			}
			var username_check = clicky_gc('comment_author_7cd4b35511ed5e8fcb32a61b3fd1c995');
			if (username_check) var clicky_custom_session = { username: username_check };
		</script>
		<script type="text/javascript">
		var clicky = { log: function () {
			return true;
		}, goal           : function () {
			return true;
		}};
		var clicky_site_id = 96821;
		(function () {
			var s = document.createElement('script');
			s.type = 'text/javascript';
			s.async = true;
			s.src = '//static.getclicky.com/js';
			( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild(s);
		})();
	</script>
	<noscript><p><img alt="Clicky" width="1" height="1"
	                  src="//in.getclicky.com/96821ns.gif" /></p></noscript>
	<!-- End Clicky Tracking -->

	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0',blog:'52021170',post:'1408',tz:'-5'});
	var load_cmc = function(){linktracker_init(52021170,1408,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script>
<!--[if IE 6]>
  <script type="text/javascript" src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/js/iepngfix_tilebg.js"></script>
<![endif]-->




</body>
</html>
