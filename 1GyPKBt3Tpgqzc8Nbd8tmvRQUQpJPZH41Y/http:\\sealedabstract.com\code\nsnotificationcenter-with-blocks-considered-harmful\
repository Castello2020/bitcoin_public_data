http://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/
HTTP/1.0 200 OK
X-Powered-By: PHP/5.4.4-14+deb7u12
X-Pingback: http://sealedabstract.com/xmlrpc.php
Content-Type: text/html; charset=UTF-8
Link: <http://wp.me/p3wh58-xp>; rel=shortlink
Connection: close
Date: Tue, 22 Jul 2014 17:25:56 GMT
Server: lighttpd/1.4.31

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html
xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><link
rel='stylesheet' href='http://sealedabstract.com/wp-content/plugins/wp-minify/min/?f=wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css,wp-content/plugins/wp-to-twitter/css/twitter-feed.css,wp-content/plugins/jetpack/modules/widgets/widgets.css&amp;m=1400665139' type='text/css' media='screen' /> <script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/wp-minify/min/?f=wp-content/themes/inki_v.2.1/js/jquery-1.3.2.min.js,wp-content/themes/inki_v.2.1/js/global.js,wp-content/themes/inki_v.2.1/js/superfish.js,wp-includes/js/jquery/jquery.js,wp-includes/js/jquery/jquery-migrate.min.js,wp-content/plugins/akismet/_inc/form.js&amp;m=1400665128'></script> <meta
http-equiv="content-type" content="text/html; charset=UTF-8" /><title>NSNotificationCenter with blocks considered harmful | Sealed Abstract</title><meta
name="generator" content="WordPress 3.9.1" /><link
rel="shortcut icon" href="favicon.ico" /><link
rel="stylesheet" type="text/css" media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/inki-styles.php?bg=drk&amp;type=plt" /> <!--[if IE]><link
rel="stylesheet" type="text/css"  media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/ie.css" /> <![endif]--> <!--[if IE 6]><style type="text/css" media="screen">div, img { behavior: url(http://sealedabstract.com/wp-content/themes/inki_v.2.1/js/iepngfix.php) } /* Fix PNG alpha-transparency in IE6 */</style><link
rel="stylesheet" type="text/css"  media="screen" href="http://sealedabstract.com/wp-content/themes/inki_v.2.1/css/ie6.css" /> <![endif]--><link
rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://sealedabstract.com/feed/" /><link
rel="alternate" type="text/xml" title="RSS .92" href="http://sealedabstract.com/feed/rss/" /><link
rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://sealedabstract.com/feed/atom/" /><link
rel="pingback" href="http://sealedabstract.com/xmlrpc.php" /><link
rel="alternate" type="application/rss+xml" title="Sealed Abstract &raquo; NSNotificationCenter with blocks considered harmful Comments Feed" href="http://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/feed/" /><link
rel="EditURI" type="application/rsd+xml" title="RSD" href="http://sealedabstract.com/xmlrpc.php?rsd" /><link
rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://sealedabstract.com/wp-includes/wlwmanifest.xml" /><link
rel='prev' title='The part of the FISC NSA decision you missed' href='http://sealedabstract.com/rants/the-part-of-the-fisc-nsa-decision-you-missed/' /><link
rel='next' title='How in-app purchase is not really destroying the games industry' href='http://sealedabstract.com/iphone/how-in-app-purchase-is-not-really-destroying-the-games-industry/' /><meta
name="generator" content="WordPress 3.9.1" /><link
rel='shortlink' href='http://wp.me/p3wh58-xp' /><style type='text/css'>#wpadminbar .quicklinks li#wp-admin-bar-clickystats {
					height: 28px
				}
				#wpadminbar .quicklinks li#wp-admin-bar-clickystats a {
					height: 28px;
					padding: 0
				}
				#wpadminbar .quicklinks li#wp-admin-bar-clickystats a img {
					padding: 4px 5px;
					height: 20px;
					width: 99px;
				}</style><style type='text/css'>img#wpstats{display:none}</style><meta
name="description" content="So back in the dark ages, we registered to receive notifications like this: #!!{&quot;brush&quot;:&quot;objc&quot;, &quot;gutter&quot;:&quot;false&quot;} - In other words, the target-action" /><meta
name="keywords" content="code,iphone,rants" /><link
rel="canonical" href="http://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/" /> <style type="text/css" id="syntaxhighlighteranchor"></style></head><body><div><a
name="top"></a></div><div
id="top-wrapper"></div><div
id="page-wrapper"><div
id="header-wrapper"><div
id="header-container"><div
id="header-top"> <a
id="logo" href="http://sealedabstract.com"> <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/theme-logo.png"
style="left:68px;bottom:20px"
alt=""
title=""
/> </a><h3 id="strapline" style="left:280px; bottom:-10px;"> I write software <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/ornament-1.png" alt="" /></h3><div
id="search"><form
id="search-form" action="http://sealedabstract.com/" method="get"><div> <input
class="textfield" name="s" maxlength="35" type="text" id="search-field" value="search" onclick="value=''" /> <input
class="submit" type="submit" value="search" id="search-btn" /></div></form></div></div><div
id="top-nav-container"><ul
id="top-nav" class="topnav root"><li
class=" root"><a
href="http://sealedabstract.com" title="home">home</a></li><li
class="cat-item cat-item-17 root"><a
href="http://sealedabstract.com/category/business/" title="View all posts filed under business">business</a></li><li
class="cat-item cat-item-5 root"><a
href="http://sealedabstract.com/category/code/" title="View all posts filed under Code">Code</a></li><li
class="cat-item cat-item-9 root"><a
href="http://sealedabstract.com/category/iphone/" title="View all posts filed under iphone">iphone</a></li><li
class="cat-item cat-item-8 root"><a
href="http://sealedabstract.com/category/rants/" title="View all posts filed under rants">rants</a></li><li
class="page_item page-item-2048 root"><a
href="http://sealedabstract.com/things-im-working-on/">Things I&#x2019;m working on</a></li></ul> <a
href="http://sealedabstract.com/feed/rss/" id="rss-txt-link">RSS Feed</a> <a
href="http://sealedabstract.com/feed/rss/" id="rss-icon"><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/rss-icon.png" alt="" /></a></div></div></div><div
id="content-wrapper"><div
id="content-container" class="container_14 clearfix"><div
class="grid_10 content-column"  style="width: 1080px"><div
class="grid_10 alpha omega" id="post-title-box"><div
class="grid_3 alpha"> &nbsp;</div><div
class="grid_7 omega"><h1 id="title"><a
href="http://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/">NSNotificationCenter with blocks considered harmful</a></h1></div></div><div
class="grid_10 alpha omega clearfix" id="post-box" style="width: 1080px"><div
class="grid_3 alpha" id="meta"> <span
id="date">19 November 2013</span> <span
id="post-author"><em>by</em> <a
href="http://sealedabstract.com/author/admin/" title="Posts by Drew Crawford" rel="author">Drew Crawford</a></span> <span
id="cat-header">Published in:</span> <span
id="cat-links"><a
href="http://sealedabstract.com/category/code/" title="View all posts in Code" rel="category tag">Code</a>, <a
href="http://sealedabstract.com/category/iphone/" title="View all posts in iphone" rel="category tag">iphone</a>, <a
href="http://sealedabstract.com/category/rants/" title="View all posts in rants" rel="category tag">rants</a></span> <span
id="comments-link"><a
href="http://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/#comments" rel="nofollow" class="post-comments">9 comments <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/comments-icon.png" alt="" /></a></span></div><div
class="grid_7 omega" id="post" style="width: 675px"><p>So back in the dark ages, we registered to receive notifications like this:</p><pre class="brush: objc; gutter: false; notranslate">-[NSNotificationCenter  addObserver:selector:name:object:]
</pre><p>In other words, the <em>target-action</em> pattern. When the notification is received, call <em>this</em> selector (action) on <em>this</em> target. And all was well.</p><p>Then in iOS 4, blocks (closures) were added to iOS. And it was the hip cool thing to add block versions of everything. Blocks in a box! Blocks in their socks! After all, the NSNotification (observer) pattern is <em>sort of</em> deferred execution, <em>right</em>?</p><p>So a blocks-based API was added to NSNotificationCenter. Here it is:</p><pre class="brush: objc; gutter: false; notranslate">-[NSNotificationCenter addObserverForName:object:queue:usingBlock:]
</pre><p>This turned out to be a <em>terrible</em> idea. This could be, I think, the <strong>single biggest API blunder</strong> in iOS. (Except maybe iCloud Core Data.) I have debugged issues that were root-caused to this misleading API <em>more than ten times</em>. I have lost <em>more than four weeks</em> to this API. I have <em>no less than six</em> radars open about it.</p><p>All of this is <em>in spite of the fact</em> that it is banned from any codebase I work on.</p><p>For those who accuse me of drinking the Apple kool-aid, rest assured, there is nothing pro-Apple in this blog post. Read on for 2500 words of pure complaining.</p><h1>So how bad could it be?</h1><p>We’re going to be good little TDD citizens for the duration of this blog post, so let me show you the test first:</p><pre class="brush: objc; notranslate">- (void)testExample
{
    for(int i =0; i &lt; 5; i++) {
        YourAttempt *attempt1 = [[YourAttempt alloc] init];
        [[NSNotificationCenter defaultCenter] postNotificationName:notificationName object:nil];
        XCTAssertEqual(counter, i+1, @"Unexpected value for counter.");
        XCTAssertEqual(1, attempt1.localCounter, @"Unexpected value for localCounter.");
    }
}
</pre><p>So this test is trivial:</p><ul><li>We create an Attempt object</li><li>We post a notification</li><li>We check that the notification increases our global <code>counter</code> variable.</li><li>We check that the notification increases the object&#8217;s <code>localCounter</code> variable.</li></ul><p>Now at this point you’re probably saying: “This looks sort of simple.” If that is you, just skip the rest of this blog post, pull down <a
onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/drewcrawford/NSNoficationCenter_With_Blocks');"  href="https://github.com/drewcrawford/NSNoficationCenter_With_Blocks">the GitHub repository</a>, type your solution into YourAttempt.m, and press Command-U. But not until you&#8217;re really, <em>really</em> sure it&#8217;s right. Don&#8217;t worry, I&#8217;ll wait. It&#8217;ll be more fun if you fail first.</p><p>Still reading? You lazy bum. Making me do all the work.</p><h1>If at first you don&#8217;t succeed</h1><p>Our first attempt really is trivial:</p><pre class="brush: objc; first-line: 11; gutter: 1; tab-size: 4; toolbar: 1; notranslate">@interface Attempt1() {
}
@end
@implementation Attempt1
-(id)init {
    if (self = [super init]) {
        [[NSNotificationCenter defaultCenter] addObserverForName:notificationName object:nil queue:nil usingBlock:^(NSNotification *note) {
            int oldCounterValue = counter;
            counter++;
            self.localCounter++;
            NSAssert(counter==oldCounterValue+1, @"Atomicity guarantee violated.");
        }];
    }
    return self;
}
@end
</pre><p>That should do the trick! Except:</p><pre class="brush: plain; notranslate">"3" is not equal to "2" - Unexpected value for counter.
"6" is not equal to "3" - Unexpected value for counter.
"10" is not equal to "4" - Unexpected value for counter.
"15" is not equal to "5" - Unexpected value for counter.
</pre><p>Can you figure out what’s going on here? We’re looking for 1,2,3,4,5 in our counter —but we’re getting 1,3,6,10,15. So why those numbers?</p><p>Well, that sequence is called the <a
onclick="javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/Triangular_number');"  href="http://en.wikipedia.org/wiki/Triangular_number">triangular numbers</a>. And that pattern is a <em>dead giveaway</em>. See, the first time we post the notification, it runs once. So our counter is 1. But the second time, it runs twice. So our counter is 3. And the third time, it runs thrice. Now our counter is six.</p><p>Now you might say: &#8220;So <em>what</em> if my notification runs a few times too many? I&#8217;m not stupid enough to use global variables.&#8221; Well, maybe. If you&#8217;re using things like the camera, the microphone, anything in your app delegate, etc., then you <em>are</em>, actually, using global variables. But forget about that for a minute&#8211;imagine what would happen if we picked a function at random from your codebase and ran it <em>twice</em> instead of once. What would happen? We could try to insert two objects into your database, or delete an object twice. We could pop an extra view controller. We could repeat your online purchase. Who knows?</p><p>In fact, the <em>really dangerous thing</em> about this bug is that <em>practically anything can happen</em>. This bug can present as <em>any bug</em>. <strong>Any bug report you get</strong> can be this bug. That&#8217;s bad. That&#8217;s <em>really</em> bad. And that&#8217;s why I have spent <em>so much time</em> on bugs that turned out to be this one. Just to give some real-life bug reports:</p><ul><li>&#8220;Whenever I try to take a picture, the lens doesn&#8217;t open.&#8221;</li><li>&#8220;If I go to Screen A, leave it, and come back, the button on Screen B does something really strange.&#8221;</li><li>&#8220;After I pick a photo from my photo library, the app works fine. For about 20 seconds. Then it crashes. But I can only reproduce this once per testing session. I have to wait until tomorrow to catch it again.&#8221;</li></ul><p>Do these sound like repeated notification bugs? No. <em>That&#8217;s why it&#8217;s so scary.</em></p><p>So: let&#8217;s not get notifications twice. Well, obviously! We forgot to unregister for the notification. Let’s do that.</p><h1>A very selfish attempt</h1><pre class="brush: objc; first-line: 12; gutter: 1; highlight: [13,19,28,29,30]; notranslate">@interface Attempt2() {
    id cleanupObj;
}
@end
@implementation Attempt2
-(id)init {
    if (self = [super init]) {
        cleanupObj = [[NSNotificationCenter defaultCenter] addObserverForName:notificationName object:nil queue:nil usingBlock:^(NSNotification *note) {
            int oldCounterValue = counter;
            counter++;
            self.localCounter++;
            NSAssert(counter==oldCounterValue+1, @"Atomicity guarantee violated.");
        }];
    }
    return self;
}
- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:cleanupObj];
}
@end
</pre><p>Run that and… bam! We’re done!</p><pre class="brush: plain; notranslate">"3" is not equal to "2" - Unexpected value for counter.
"6" is not equal to "3" - Unexpected value for counter.
"10" is not equal to "4" - Unexpected value for counter.
"15" is not equal to "5" - Unexpected value for counter.
</pre><p>…what? The exact same result? What’s going on here?</p><p>Well, the same thing as last time. Even though we have written code in our dealloc to remove our <code>Attempt</code> from the notification, the notification keeps getting called. So why? Did we get the syntax wrong or something?</p><p>No, the syntax is fine. What’s wrong is that <strong>dealloc never gets called</strong>. Why not?</p><p>Well, when you declare a block, the compiler goes in and scans what the block does. This is because if you write some code like <code>id x = @(42);</code> and then declare a block that uses x, that block might long outlive the variable x. So x needs to stick around at least as long as the block does.</p><p>So the culprit here is that our block contains the expression</p><pre class="brush: objc; gutter: false; notranslate">self.localCounter++;
</pre><p>which is syntactically equivalent to</p><pre class="brush: objc; gutter: false; notranslate">[self setLocalCounter:[self localCounter]+1];
</pre><p>Which contains not one, but <strong>two</strong> references to self. So the block, as soon as it is declared, acquires an owning reference to self, because the block needs <code>self</code> to run. And since <code>NSNotificationCenter</code> owns the block, and the block owns <code>self</code>, <code>self</code> will never be deallocated. <em>Ever</em>.</p><p>Hey, you want to know what else is scary? This code builds cleanly. Not a peep from the compiler; not a peep from Clang Static Analyzer. In fact, <em>every buggy code listing you see in this post</em> gets a clean bill of health from both. This is <em>in spite of the fact</em> that LLVM has a warning for <em>this very bug</em>. You might have seen it:</p><blockquote><p>Capturing self strongly in this block is likely to lead to a retain cycle</p></blockquote><p>Clang is just not powerful enough, in its present form, to find this type of bug. Consider yourself alarmed.</p><p>Well, the solution is trivial: we just remove <code>self</code> from our block.</p><h1>Practicing selflessness</h1><pre class="brush: objc; first-line: 11; gutter: 1; highlight: [21]; tab-size: 4; toolbar: 1; notranslate">@interface Attempt3() {
    id cleanupObj;
}
@end
@implementation Attempt3
-(id)init {
    if (self = [super init]) {
        cleanupObj = [[NSNotificationCenter defaultCenter] addObserverForName:notificationName object:nil queue:nil usingBlock:^(NSNotification *note) {
            int oldCounterValue = counter;
            counter++;
            _localCounter++;
            NSAssert(counter==oldCounterValue+1, @"Atomicity guarantee violated.");
        }];
    }
    return self;
}
- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:cleanupObj];
}
@end
</pre><p>And… tada!</p><pre class="brush: plain; notranslate">"3" is not equal to "2" - Unexpected value for counter.
"6" is not equal to "3" - Unexpected value for counter.
"10" is not equal to "4" - Unexpected value for counter.
"15" is not equal to "5" - Unexpected value for counter.
</pre><p>Wait, <strong>still</strong>?</p><p>Yeah, still. So this is actually the same problem as before, it’s just implicit. You see, if we’re going to keep the <code>_localCounter</code> ivar around, we also have to keep <code>self</code> around <em>to put it in</em>.</p><p>Thus sayeth the <a
onclick="javascript:pageTracker._trackPageview('/outgoing/ios/documentation/Cocoa/Conceptual/Blocks/Articles/bxVariables.html');"  href="xcdoc://ios/documentation/Cocoa/Conceptual/Blocks/Articles/bxVariables.html">documentation</a>:</p><blockquote><p>When a block is copied, it creates strong references to object variables used within the block. If you use a block within the implementation of a method [and] you access an instance variable by reference, a strong reference is made to self</p></blockquote><p>The documentation goes on to suggest:</p><blockquote><p>To override this behavior for a particular object variable, you can mark it with the <code>__block</code> storage type modifier.</p></blockquote><p>Ah, so that should be straightforward! We’ll just mark the <code>_localCounter</code> with <code>__block</code>.</p><h1>It’s a <code>__block</code> party</h1><pre class="brush: objc; first-line: 11; gutter: 1; highlight: [13]; tab-size: 4; toolbar: 1; notranslate">@interface Attempt4() {
    id cleanupObj;
    __block int _localCounter;
}
@end
@implementation Attempt4
-(id)init {
    if (self = [super init]) {
        cleanupObj = [[NSNotificationCenter defaultCenter] addObserverForName:notificationName object:nil queue:nil usingBlock:^(NSNotification *note) {
            int oldCounterValue = counter;
            counter++;
            _localCounter++;
            NSAssert(counter==oldCounterValue+1, @"Atomicity guarantee violated.");
        }];
    }
    return self;
}
- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:cleanupObj];
}
@end
</pre><p>How bad could it be?</p><pre class="brush: plain; notranslate">"3" is not equal to "2" - Unexpected value for counter.
"6" is not equal to "3" - Unexpected value for counter.
"10" is not equal to "4" - Unexpected value for counter.
"15" is not equal to "5" - Unexpected value for counter.
</pre><p>Hmm… ok, now you’re just <em>messing with me</em>, Apple. You’ve <strong>told me</strong> doing this would solve my problem. What gives?</p><p>What gives is that this documentation flits back and forth between whether or not it’s talking about an <strong>object</strong> variable, as opposed to, I guess, the other kind. See:</p><blockquote><p>it creates strong references to <strong>object variables</strong> used within the block… If you access an instance <strong>variable</strong> by reference, a strong reference is made to self;… To override this behavior for a particular <strong>object</strong> variable, you can mark it with the __block storage type modifier.</p></blockquote><p>In other words, at the beginning and (crucially) the workaround, they’re talking about <strong>object</strong> variables. Meanwhile what we’re using is just an integer.</p><p>OK so maybe we can convert our code to use an object variable, and then the workaround will work?</p><h1>When the documentation fails</h1><pre class="brush: objc; first-line: 11; gutter: 1; highlight: [13,22,28,28,29,30,31,32,33]; tab-size: 4; toolbar: 1; notranslate">@interface Attempt5() {
    id cleanupObj;
    __block NSNumber *counterObj;
}
@end
@implementation Attempt5
-(id)init {
    if (self = [super init]) {
        cleanupObj = [[NSNotificationCenter defaultCenter] addObserverForName:notificationName object:nil queue:nil usingBlock:^(NSNotification *note) {
            int oldCounterValue = counter;
            counter++;
            counterObj = @(counterObj.intValue + 1);
            NSAssert(counter==oldCounterValue+1, @"Atomicity guarantee violated.");
        }];
    }
    return self;
}
- (void)setLocalCounter:(int)localCounter {
    counterObj = @(localCounter);
}
- (int)localCounter {
    return counterObj.intValue;
}
- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:cleanupObj];
}
@end
</pre><p>And with a Cmd-U, we&#8217;ll get&#8230;</p><pre class="brush: plain; notranslate">"3" is not equal to "2" - Unexpected value for counter.
"6" is not equal to "3" - Unexpected value for counter.
"10" is not equal to "4" - Unexpected value for counter.
"15" is not equal to "5" - Unexpected value for counter.
</pre><p>Seriously? How did this get through QA? Did anyone even test this? What sort of person even <em>wrote</em> this documentation?</p><p>Well, the sort of person who doesn&#8217;t read <em>compiler specifications</em>. Noobs. Because, in-between WWDC videos, documentation, sample code, and you know, <em>actually writing code</em>, I’ll bet you have nothing better to do than browse random technical specs on clang.org.</p><p>Because a 27-page document that doesn&#8217;t even rate a mention in the <a
onclick="javascript:pageTracker._trackPageview('/outgoing/clang.llvm.org/docs/index.html');"  href="http://clang.llvm.org/docs/index.html">Clang documentation table of contents</a> very clearly states buried in the middle of <a
onclick="javascript:pageTracker._trackPageview('/outgoing/clang.llvm.org/docs/AutomaticReferenceCounting.html#id50');"  href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#id50">Section 7.5</a>:</p><blockquote><p>The inference rules apply equally to &#95;&#95;block variables, which is a shift in semantics from non-ARC, where &#95;&#95;block variables did not implicitly retain during capture.</p></blockquote><p>Go ahead and try to make sense of that sentence, I dare you.</p><p>No? So essentially this is compilerese for “We changed it.”</p><p>Back in the Land Before ARC, the use of <code>__block</code> would prevent a block from retaining a variable. However in the ARC world, we have a whole constellation of memory keywords: <code>__strong</code>, <code>__weak</code>, <code>__autoreleasing</code>, <code>__unsafe_unretained</code>… And so when they introduced these, they decided to <em>divorce</em> <code>__block</code> from the memory keywords, so you could have, say, <code>__unsafe_unretained __block id foo;</code> if you like. And just like every other kind of variable, the default, implicit memory keyword for <code>__block</code> is <code>__strong</code>.</p><p>So <em>that’s</em> why it doesn’t work. Now, you might say, let’s just declare <code>__counterObj</code> as memory type <code>__weak</code>. But of course, then it would have <em>no</em> strong reference, and vanish into the æther. Nor can we create a weak reference to our counter object immediately prior to the block and use that, because we must eventually set our counter to a new value.</p><p>So instead we will improvise:</p><h1>Your invariants may vary</h1><pre class="brush: objc; first-line: 11; gutter: 1; highlight: [18,23]; tab-size: 4; toolbar: 1; notranslate">@interface Attempt6() {
    id cleanupObj;
}
@end
@implementation Attempt6
-(id)init {
    if (self = [super init]) {
        __weak Attempt6 *mySelf = self;
        cleanupObj = [[NSNotificationCenter defaultCenter] addObserverForName:notificationName object:nil queue:nil usingBlock:^(NSNotification *note) {
            int oldCounterValue = counter;
            counter++;
            NSAssert(counter==oldCounterValue+1, @"Atomicity guarantee violated.");
            mySelf.localCounter++;
        }];
    }
    return self;
}
- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:cleanupObj];
}
@end
</pre><p>There are a lot of things not to like about this solution: it relies on using a public interface to access our own members, for example. So any notification you process will need to use an API with public scope visibility, which means you will have to expose one. And hope that nobody uses it.</p><p>But anyway, it should work, right? (Or have you figured out this gimmick by now?)</p><pre class="brush: plain; notranslate">"3" is not equal to "2" - Unexpected value for counter.
"6" is not equal to "3" - Unexpected value for counter.
"10" is not equal to "4" - Unexpected value for counter.
"15" is not equal to "5" - Unexpected value for counter.
</pre><p><strong>SERIOUSLY. MUST. KILL. COMPILER.</strong></p><p>OK, what is wrong here? I’ll give you a hint: if you test in Release mode, it works fine. It only fails in Debug mode.</p><p>Give up?</p><p>Here’s the answer:</p><pre class="brush: objc; gutter: false; notranslate">NSAssert(counter==oldCounterValue+1, @"Atomicity guarantee violated.");
</pre><p>See, NSAssert is a macro. A macro that expands to this:</p><pre class="brush: objc; highlight: [5]; notranslate">do {
    __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS
    if (!(condition)) {
        [[NSAssertionHandler currentHandler] handleFailureInMethod:_cmd
        object:self file:[NSString stringWithUTF8String:__FILE__]
            lineNumber:__LINE__ description:(desc), ##__VA_ARGS__];
    }               \
        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
} while(0)
</pre><p>See there? Big fat <code>self</code>. Ergo, retain cycle, ergo test failure.</p><h1>The Final Solution</h1><p>Here’s the final answer, using the lesser-known <code>NSCAssert</code> function. Which, by the way, is not supposed to be used in Objective-C:</p><blockquote><p>This macro should be used <em>only within C functions.</em></p></blockquote><p>But hey, we’ve already demonstrated that this documentation is buggier than MobileMe on launch day.</p><pre class="brush: objc; first-line: 11; gutter: 1; highlight: [22]; tab-size: 4; toolbar: 1; notranslate">@interface Attempt7() {
    id cleanupObj;
}
@end
@implementation Attempt7
-(id)init {
    if (self = [super init]) {
        __weak Attempt7 *mySelf = self;
        cleanupObj = [[NSNotificationCenter defaultCenter] addObserverForName:notificationName object:nil queue:nil usingBlock:^(NSNotification *note) {
            int oldCounterValue = counter;
            counter++;
            NSCAssert(counter==oldCounterValue+1, @"Atomicity guarantee violated.");
            mySelf.localCounter++;
        }];
    }
    return self;
}
- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:cleanupObj];
}
@end
</pre><p>So now looking at a working implementation, is this the sort of thing you would come up with left to your own devices? I’m guessing no.</p><h1>And you’re in good company</h1><p>The documentation lists no fewer than <strong>six</strong> sample code projects underneath the Notifications-with-blocks API. And <strong>five out of six Apple model projects</strong> are wrong. Let that sink in.</p><ul><li>AVCam &#8211; On line 89 of AVCamCaptureManager.m, Apple uses the syntax <code>__block id weakSelf = self;</code>, apparently under the impression that this breaks the reference cycle. No instance of this class can ever be deallocated. A GitHub search reveals some 77 repositories contain some version of this class.</li><li>AVLoupe &#8211; In this project, Apple straight-up never removes the observer from the NSNotificationCenter. How’s <em>that</em> for sample code?</li><li>AVMovieExporter’s VideoLibrary crashes on dealloc for unrelated reasons. Bonus points are awarded for a novel use of <code>__unsafe_unretained __block</code> to work around the retain cycle that will cause an <code>EXC_BAD_ACCESS</code> crash if the retain cycle is broken and a notification is subsequently posted.</li><li>AudioTapProcessor &#8211; boldly using self inside the block. Bonus points awarded for attempting to remove the observer in <code>viewDidUnload</code> in spite of the fact that <code>viewDidUnload</code> is never called in iOS 7, which was in beta 5 when this code was published. In fairness, it might work on iOS 6. I didn&#8217;t test it.</li><li>TaggedLocations (a.k.a. SimpleCoreDataRelationships) is the only project I can’t find anything wrong with. So good job, anonymous developer of this sample project, you’re in the top 13% of Cocoa engineers at Apple.</li></ul><h1>Killing the beast</h1><p>For the rest of us, just stay <em>far away</em> from this API. <code>cd</code> into your code&#8217;s directory and type this to find out how bad your codebase is:</p><pre class="brush: bash; gutter: false; notranslate">grep -R "addObserverForName:.*object:.*queue:.*usingBlock.*" --include="*.m" .
</pre><p>This API is banned from my codebases. There is certain third-party code where I will tolerate grandfathering it in, but not without a thorough audit. And the audit, unfortunately, usually finds something.</p><h1>Alternatives</h1><p>Nick Lockwood has been working on an alternative API <a
onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/nicklockwood/FXNotifications');"  href="https://github.com/nicklockwood/FXNotifications">over here</a>.</p><p><a
onclick="javascript:pageTracker._trackPageview('/outgoing/jwilling.com');"  href="http://jwilling.com">Jonathan Willing</a> has an alternative API <a
onclick="javascript:pageTracker._trackPageview('/outgoing/github.com/jwilling/NSNotificationCenter-JNWBlocks');"  href="https://github.com/jwilling/NSNotificationCenter-JNWBlocks">over here</a>.</p> <b>Like this post?</b> Contribute to the coffee fund so I can write more like it. <script src="http://coinwidget.com/widget/coin.js"></script> <script>CoinWidgetCom.go({
	wallet_address: "1GyPKBt3Tpgqzc8Nbd8tmvRQUQpJPZH41Y"
	, currency: "bitcoin"
	, counter: "count"
	, alignment: "bl"
	, qrcode: true
	, auto_show: false
	, lbl_button: "Donate"
	, lbl_address: "My Bitcoin Address:"
	, lbl_count: "donations"
	, lbl_amount: "BTC"
});</script></div><div
id="comments"><div
class="" id="comments-heading-box"><h3>Comments</h3></div><ol
id="commentlist" class="commentlist"><li
class="comment even thread-even depth-1" id="li-comment-11225"><div
class="comment" id="comment-11225"><div
class="comment-author"> <span
class="author">Marc</span> <img
alt='' src='http://0.gravatar.com/avatar/e1ada25c28306075a80e9f8673cce57e?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Tue 19th Nov 2013 at 10:59 pm</span><p>&#8220;AVCam – On line 89 of AVCamCaptureManager.m, Apple uses the syntax __block id weakSelf = self;, apparently under the impression that this breaks the reference cycle. No instance of this class can ever be deallocated. A GitHub search reveals some 77 repositories contain some version of this class&#8221;</p><p>If you do weakSelf = nil; inside the block after you are done it will break the retain cycle. You have to be careful if you use dispatch_asyncs that reference the weakSelf, make sure to nil it out inside the dispatch and not right after it.</p><p>Apple sample code is generally of low quality and should not be trusted.</p><p>Thank you for the warning about NSAssert, most of us did not see that one coming&#8230;</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-11226"><div
class="comment" id="comment-11226"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.lilback.com/');"  href='http://www.lilback.com/' rel='external nofollow' class='url'>Mark Lilback</a></span> <img
alt='' src='http://1.gravatar.com/avatar/d0f622051018990eed97e43f67c27962?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 20th Nov 2013 at 12:12 am</span><p>The use of __weak is documented in Apple&#8217;s &#8220;Transitioning to ARC Release Notes&#8221; and has been since ARC was first released. There are lots of easy to understand examples. That was fine when ARC came out, but they really should have copied or linked to that from somewhere else.</p><p>Since I first started iOS programming, I&#8217;ve been using ZAssert<br
/> <a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.cimgf.com/2010/05/02/my-current-prefix-pch-file/');"  href="http://www.cimgf.com/2010/05/02/my-current-prefix-pch-file/" rel="nofollow">http://www.cimgf.com/2010/05/02/my-current-prefix-pch-file/</a> by Marcus Zarra. It doesn&#8217;t reference self.</p><p>I would consider the real bug to be on NSAssert, which should not reference self. Or be documented to not be used in a block.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-11227"><div
class="comment" id="comment-11227"><div
class="comment-author"> <span
class="author">Shripada</span> <img
alt='' src='http://0.gravatar.com/avatar/43152fb01448271745384a0ea0103b01?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 20th Nov 2013 at 12:17 am</span><p>Nice article!.  Retain cycle with blocks is a subtle trap to figure out and fix and this NSNotificationCenter API takes it to new heights!.  I wonder why LLVM automatically create weak references to &#8216;self&#8217; within a block by default. Not sure if it is too difficult for LLVM folks to bring it in.</p><p>Thanks<br
/> Shripada</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-11228"><div
class="comment" id="comment-11228"><div
class="comment-author"> <span
class="author">Aaron Sarazan</span> <img
alt='' src='http://0.gravatar.com/avatar/6adc6ab076fa0dbd18371f5e95941fa1?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 20th Nov 2013 at 12:59 am</span><p>Fyi, you don&#8217;t have to maintain a public interface to access that variable in mySelf. You can just deref it with the arrow operator as such: mySelf-&gt;_localCounter++;</p><p>The rest of this is terrifying.</p> <span
class="reply"></span></div></div></li><li
class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="li-comment-11229"><div
class="comment" id="comment-11229"><div
class="comment-author"> <span
class="author">Drew Crawford</span> <img
alt='' src='http://0.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 20th Nov 2013 at 1:00 am</span><p>You can only deref with the arrow operator if the ivar is declared @public.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-11230"><div
class="comment" id="comment-11230"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/nevyn.nu/');"  href='http://nevyn.nu/' rel='external nofollow' class='url'>Joachim Bengtsson</a></span> <img
alt='' src='http://0.gravatar.com/avatar/4878c6b30b4b2ea6577be7b41d1415ca?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 20th Nov 2013 at 1:17 am</span><p>Aaron: Actually you can&#8217;t, because you can&#8217;t dereference a weak pointer (it might become nil at any point, so it&#8217;s always unsafe to dereference it). However, inside the block you can create a strong reference, and dereference THAT one only if it is not nil.</p><p>__weak __typeof(self) weakSelf = self;<br
/> [something doSomething:^{<br
/> __strong __typeof(weakSelf) strongSelf = weakSelf;<br
/> if(strongSelf)<br
/> strongSelf-&gt;_ivar++;<br
/> }];</p><p>Also, this whole blog article is rather over the top. Yes, memory management in blocks is difficult. That&#8217;s the price to pay for not having a garbage collector. That doesn&#8217;t mean you can just ignore the rules, and it doesn&#8217;t mean that block-using APIs are bad. It just means you don&#8217;t know how to use blocks. (and I know you don&#8217;t know how to use block because you made an instance variable __block. That doesn&#8217;t even mean anything. And you didn&#8217;t do what the documentation said &#8212; it implied that you should&#8217;ve made the reference to self weak, not the reference to the ivar.)</p><p>It&#8217;s also worth to note that if you don&#8217;t unregister from notifications with the target-action API, you&#8217;ll crash. There&#8217;s plenty of code using that API incorrectly too, and that&#8217;s just as bad.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-11231"><div
class="comment" id="comment-11231"><div
class="comment-author"> <span
class="author">Aaron Daub</span> <img
alt='' src='http://1.gravatar.com/avatar/99e1d0a8b5989f59835d57ebd6ef2070?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 20th Nov 2013 at 1:43 am</span><p>It looks like you can -&gt; down to private/protected ivars but Xcode doesn&#8217;t like it when you dereference a weak pointer with -&gt;.</p><p>You have to create a strong variable within the block that&#8217;s a copy of the weak reference, and dereference that.</p> <span
class="reply"></span></div></div></li><li
class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-11232"><div
class="comment" id="comment-11232"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/nevyn.nu/');"  href='http://nevyn.nu/' rel='external nofollow' class='url'>Joachim Bengtsson</a></span> <img
alt='' src='http://0.gravatar.com/avatar/4878c6b30b4b2ea6577be7b41d1415ca?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Wed 20th Nov 2013 at 1:46 am</span><blockquote><p> I wonder why LLVM automatically create weak references to ‘self’ within a block by default. Not sure if it is too difficult for LLVM folks to bring it in.</p></blockquote><p>Because that would be at least as wrong. All Objective-C object references are captured strongly, that&#8217;s the API contract. If self was special cased to be weak, this would break:</p><p>[[thing sendRequest:r withCallback:^(id value) {<br
/> [self parseValue:value];<br
/>   [self save];<br
/> }];</p><p>Since self is captured strongly, we&#8217;re guaranteed to live at least as long as this request, even if all other references to the self object have been released except this block, so that we can definitely handle the response unless the request is explicitly cancelled.</p><p>Special casing self to be weak wouldn&#8217;t help in this situation, either:</p><p>id manager = &#8230;;<br
/> [manager onFailure:^{<br
/> [manager cleanup];<br
/> }];</p><p>Retain cycle!</p><p>So maybe we can go so far as to say all objc values should be captured weakly?</p><p>NSArray *array = @[@1];<br
/> [thing sendRequest:r withCallback:^(id response){<br
/> [response doSomethingWithNonNilObject:array];<br
/> }];</p><p>Nope, crash.</p><p>So, the current behavior of strong capture of every Objective-C object is the sanest solution, but is problematic since we don&#8217;t have garbage collection to take care of cycles. Harsh life as a programmer. We have to learn our tools very thoroughly and learn how to handle these cases correctly instead. ARC made life easier but it&#8217;s not a panacea.</p> <span
class="reply"></span></div></div></li><li
class="comment even thread-even depth-1" id="li-comment-11440"><div
class="comment" id="comment-11440"><div
class="comment-author"> <span
class="author"><a
onclick="javascript:pageTracker._trackPageview('/outgoing/www.movenote.com');"  href='http://www.movenote.com' rel='external nofollow' class='url'>Aapo Kuuselo</a></span> <img
alt='' src='http://1.gravatar.com/avatar/91e706c894ff755891aff516790e2547?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' /></div><div
class="comment-text"> <span
class="date">Mon 09th Dec 2013 at 6:45 pm</span><p>&#8220;On line 89 of AVCamCaptureManager.m, Apple uses the syntax __block id weakSelf = self;, apparently under the impression that this breaks the reference cycle. No instance of this class can ever be deallocated. A GitHub search reveals some 77 repositories contain some version of this class.&#8221;</p><p>Yeah, I&#8217;ve noticed!</p><p>Had to go into my code base and dig this one up. I added this kind of hacky piece of code and call it manually to make the damned AVCamCaptureManager dealloc:</p><p>(void) removeLeakyObservers<br
/> {<br
/> NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];<br
/> [notificationCenter removeObserver:[self deviceConnectedObserver]];<br
/> [notificationCenter removeObserver:[self deviceDisconnectedObserver]];<br
/> }</p><p>And thanks for this dive into the (at least for me) good old weakSelf &amp; strongSelf dance that came as a little nasty side effect of ARC&#8217;s new way of handling variables defined as __block. Though the ARC documentation does describe (with examples) this well, it is a nasty little change in the way things worked earlier.</p> <span
class="reply"></span></div></div></li></ol><div
id="respond"> <a
rel="nofollow" id="cancel-comment-reply-link" href="/code/nsnotificationcenter-with-blocks-considered-harmful/#respond" style="display:none;">Click here to cancel reply.</a><h3>Add comment</h3><form
action="http://sealedabstract.com/wp-comments-post.php" method="post" id="commentform"><div
class="form-element"> <label
for="author">Your name*</label> <input
type="text" class="textfield" name="author" id="author" value="" size="22" tabindex="1" aria-required='true' /></div><div
class="form-element"> <label
for="email">Your email address* &nbsp; <em
class="small">(will not be published)</em></label> <input
type="text" class="textfield" name="email" id="email" value="" size="22" tabindex="2" aria-required='true' /></div><div
class="form-element"> <label
for="url">Your website</label> <input
type="text" class="textfield" name="url" id="url" value="" size="22" tabindex="3" /></div><div
class="form-element"> <label
for="comment">Your comment</label><div
id="comment-text-wrapper"><textarea name="comment" id="comment" cols="65" rows="10" tabindex="4"></textarea></div></div><div
class="form-element"><input
class="submit" type="submit" id="comment-submit" value="submit comment" tabindex="5" /></div><p
style="display: none;"><input
type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="6294641e3d" /></p><p
class="comment-subscription-form"><input
type="checkbox" name="subscribe_comments" id="subscribe_comments" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;" /> <label
class="subscribe-label" id="subscribe-label" for="subscribe_comments">Notify me of follow-up comments by email.</label></p><p
class="comment-subscription-form"><input
type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;" /> <label
class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of new posts by email.</label></p><p
style="display: none;"><input
type="hidden" id="ak_js" name="ak_js" value="145"/></p><div><input
type='hidden' name='comment_post_ID' value='2071' id='comment_post_ID' /> <input
type='hidden' name='comment_parent' id='comment_parent' value='0' /></div></form></div></div></div></div></div></div><div
id="footer-wrapper"><div
id="footer-nav" class="clearfix"> <a
href="#top" id="back-to-top-link-left"><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/arrow-up.png" alt="" /> Back to top</a> <a
href="#top" id="back-to-top-link-right">Back to top <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/arrow-up.png" alt="" /></a></div><div
id="footer" class="container_14 clearfix"><ul
id="footer-sidebar" class="sidebar"><li
id="tag_cloud-3" class="widget widget-1 widget_tag_cloud"><h2><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-left.png" class="ornament" alt="" /> Tags <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-right.png" class="ornament" alt="" /></h2><div
class="tagcloud"><a
href='http://sealedabstract.com/tag/app-store/' class='tag-link-12' title='1 topic' style='font-size: 8pt;'>app store</a> <a
href='http://sealedabstract.com/tag/arduino/' class='tag-link-7' title='1 topic' style='font-size: 8pt;'>arduino</a> <a
href='http://sealedabstract.com/tag/hardware/' class='tag-link-6' title='1 topic' style='font-size: 8pt;'>hardware</a> <a
href='http://sealedabstract.com/tag/hn/' class='tag-link-23' title='1 topic' style='font-size: 8pt;'>HN</a> <a
href='http://sealedabstract.com/tag/incentives/' class='tag-link-25' title='1 topic' style='font-size: 8pt;'>incentives</a> <a
href='http://sealedabstract.com/tag/iphone/' class='tag-link-9' title='2 topics' style='font-size: 22pt;'>iphone</a> <a
href='http://sealedabstract.com/tag/law/' class='tag-link-15' title='1 topic' style='font-size: 8pt;'>law</a> <a
href='http://sealedabstract.com/tag/linux/' class='tag-link-11' title='1 topic' style='font-size: 8pt;'>linux</a> <a
href='http://sealedabstract.com/tag/long-articles/' class='tag-link-26' title='1 topic' style='font-size: 8pt;'>long articles</a> <a
href='http://sealedabstract.com/tag/mips/' class='tag-link-10' title='1 topic' style='font-size: 8pt;'>mips</a> <a
href='http://sealedabstract.com/tag/native-apps/' class='tag-link-28' title='1 topic' style='font-size: 8pt;'>native apps</a> <a
href='http://sealedabstract.com/tag/notifo/' class='tag-link-13' title='1 topic' style='font-size: 8pt;'>notifo</a> <a
href='http://sealedabstract.com/tag/programmers/' class='tag-link-24' title='1 topic' style='font-size: 8pt;'>programmers</a> <a
href='http://sealedabstract.com/tag/rants/' class='tag-link-8' title='1 topic' style='font-size: 8pt;'>rants</a> <a
href='http://sealedabstract.com/tag/steve-jobs/' class='tag-link-16' title='1 topic' style='font-size: 8pt;'>steve jobs</a> <a
href='http://sealedabstract.com/tag/web-apps/' class='tag-link-27' title='1 topic' style='font-size: 8pt;'>web apps</a> <a
href='http://sealedabstract.com/tag/wifi/' class='tag-link-14' title='1 topic' style='font-size: 8pt;'>wifi</a></div></li><li
id="text-4" class="widget widget-2 widget_text"><h2><img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-left.png" class="ornament" alt="" /> Subscribe via e-mail <img
src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/images/curl-black-right.png" class="ornament" alt="" /></h2><div
class="textwidget"><div
id="mc_embed_signup"><form
action="http://drewcrawfordapps.us1.list-manage2.com/subscribe/post?u=e78fe221beda78f7524116d70&amp;id=3d9fd4c03f" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank"><h2>Subscribe via e-mail</h2><div
class="mc-field-group"> <label
for="mce-EMAIL">Email Address <span
class="asterisk">*</span> </label> <input
type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL"></div><div
id="mce-responses" class="clear"><div
class="response" id="mce-error-response" style="display:none"></div><div
class="response" id="mce-success-response" style="display:none"></div></div><div><input
type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div></form></div></div></li></ul></div></div></div><div
id="bottom-wrapper"><div
id="bottom-container"><div
id="bottom-left-col">Copyright © 2011 Drew Crawford, All Rights Reserved</div><div
id="bottom-right-col">Powered by WordPress</div></div></div>
 <script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> <script type="text/javascript">var pageTracker = _gat._getTracker("UA-8841539-1");
pageTracker._initData();
pageTracker._trackPageview();</script><p align='center'><small>Page optimized by <a href='http://omninoggin.com/wordpress-plugins/wp-minify-wordpress-plugin/' title='WP Minify WordPress Plugin' style='text-decoration:none;'>WP Minify</a> <a href='http://omninoggin.com/' title='WordPress Plugin' style='text-decoration:none;'>WordPress Plugin</a></small></p>	<div style="display:none">
	<div class="grofile-hash-map-e1ada25c28306075a80e9f8673cce57e">
	</div>
	<div class="grofile-hash-map-d0f622051018990eed97e43f67c27962">
	</div>
	<div class="grofile-hash-map-43152fb01448271745384a0ea0103b01">
	</div>
	<div class="grofile-hash-map-6adc6ab076fa0dbd18371f5e95941fa1">
	</div>
	<div class="grofile-hash-map-a838c63b9093a77fb88231d65effa3b3">
	</div>
	<div class="grofile-hash-map-4878c6b30b4b2ea6577be7b41d1415ca">
	</div>
	<div class="grofile-hash-map-99e1d0a8b5989f59835d57ebd6ef2070">
	</div>
	<div class="grofile-hash-map-91e706c894ff755891aff516790e2547">
	</div>
	</div>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shCore.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushAS3.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushBash.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushColdFusion.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushClojure.js?ver=20090602'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCpp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCSharp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushCss.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushDelphi.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushDiff.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushErlang.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushFSharp.js?ver=20091003'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushGroovy.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJava.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJavaFX.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushJScript.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushLatex.js?ver=20090613'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushMatlabKey.js?ver=20091209'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushObjC.js?ver=20091207'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPerl.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPhp.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPlain.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPowerShell.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushPython.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushR.js?ver=20100919'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushRuby.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushScala.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushSql.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushVb.js?ver=2.1.364'></script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/shBrushXml.js?ver=2.1.364'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/styles/shCore.css?ver=2.1.364";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/styles/shThemeDefault.css?ver=2.1.364";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.clipboardSwf = 'http://sealedabstract.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter2/scripts/clipboard.swf';
	SyntaxHighlighter.config.strings.expandSource = 'show source';
	SyntaxHighlighter.config.strings.viewSource = 'view source';
	SyntaxHighlighter.config.strings.copyToClipboard = 'copy to clipboard';
	SyntaxHighlighter.config.strings.copyToClipboardConfirmation = 'The code is in your clipboard now';
	SyntaxHighlighter.config.strings.print = 'print';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.all();
</script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201430'></script>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?ver=2014Julaa'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type='text/javascript' src='http://sealedabstract.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=3.9.1'></script>
	<!-- Clicky Web Analytics - http://getclicky.com, WordPress Plugin by Yoast - http://yoast.com/wordpress/clicky/ -->
			<script type='text/javascript'>
			function clicky_gc(name) {
				var ca = document.cookie.split(';');
				for (var i in ca) {
					if (ca[i].indexOf(name + '=') != -1) {
						return decodeURIComponent(ca[i].split('=')[1]);
					}
				}
				return '';
			}
			var username_check = clicky_gc('comment_author_7cd4b35511ed5e8fcb32a61b3fd1c995');
			if (username_check) var clicky_custom_session = { username: username_check };
		</script>
		<script type="text/javascript">
		var clicky = { log: function () {
			return true;
		}, goal           : function () {
			return true;
		}};
		var clicky_site_id = 96821;
		(function () {
			var s = document.createElement('script');
			s.type = 'text/javascript';
			s.async = true;
			s.src = '//static.getclicky.com/js';
			( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild(s);
		})();
	</script>
	<noscript><p><img alt="Clicky" width="1" height="1"
	                  src="//in.getclicky.com/96821ns.gif" /></p></noscript>
	<!-- End Clicky Tracking -->

	<script src="http://stats.wordpress.com/e-201430.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.0',blog:'52021170',post:'2071',tz:'-5'});
	var load_cmc = function(){linktracker_init(52021170,2071,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script>
<!--[if IE 6]>
  <script type="text/javascript" src="http://sealedabstract.com/wp-content/themes/inki_v.2.1/js/iepngfix_tilebg.js"></script>
<![endif]-->




</body>
</html>
