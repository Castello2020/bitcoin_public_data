http://www.gwern.net/Archiving%20URLs
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Wed, 23 Jul 2014 15:51:26 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Set-Cookie: __cfduid=d530c1309ee69d64f1ffc1ef6799d9f1a1406130686208; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.gwern.net; HttpOnly
x-amz-id-2: 7tmHKG8gFQUoPS3o+ULZL9TgZEVEGQvIVHWOZJsyseVxcU+IKIiDhGNd5Qf22pg8
x-amz-request-id: 4012815728B033E1
x-amz-meta-s3cmd-attrs: uid:1000/gname:gwern/uname:gwern/gid:1000/mode:33152/mtime:1405188796/atime:1405188794/ctime:1405188796
Cache-Control: max-age=604800, public
Last-Modified: Sat, 12 Jul 2014 18:22:52 GMT
CF-RAY: 14e90a14c7cd02b8-IAD
Content-Encoding: gzip

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<meta name="generator" content="hakyll"/>
<meta name="google-site-verification" content="BOhOQI1uMfsqu_DopVApovk1mJD5ZBLfan0s9go3phk"/>
<meta name="author" content="gwern"/>
<meta name="description" content="Archiving the Web, because nothing lasts forever - pulling together all the previous archive tools."/>
<meta name="dc.date.issued" content="10 Mar 2011"/>
<meta name="dcterms.modified" content="25 Jun 2014"/>
<title>Archiving URLs</title>
<link rel="stylesheet" type="text/css" href="./static/css/default.css"/>
<link href="./atom.xml" type="application/atom+xml" rel="alternate" title="Sitewide ATOM/RSS Feed"/>
<link rel="shortcut icon" type="image/x-icon" href="./static/img/favicon.ico"/>
</head>
<body>
 
<div class="indent_class1"></div>
<div id="main">
<div id="sidebar">
<div id="logo"><img alt="Logo: a Gothic/Fraktur blackletter capital G/ùï≤" height="36" src="./images/logo.png" width="32"/></div>
<div id="sidebar-links">
<p>
<a href="./index" title="index: categorized list of articles">Home</a>
<a href="./About" title="Site ideals, source, content, traffic, examples, license">Site</a>
<a href="./Links" title="Who am I online, what have I done, what am I like? Contact information; sites I use; things I've worked on">Me</a>
</p>
<hr/>
<div id="sidebar-news">
<p>
<a href="./Changelog" title="What's new or updated">New:</a>
<a href="./atom.xml" type="application/atom+xml" rel="alternate" title="Sitewide ATOM/RSS Feed">RSS</a>
<a href="http://eepurl.com/Kc155" title="Monthly mailing list: signup form">MAIL</a>
</p>
<hr/>
</div>
<div id="cse-sitesearch">
<script>
            (function() {
            var cx = '009114923999563836576:dv0a4ndtmly';
            var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;
            gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);
            })();
          </script>
<div style="width:0px;overflow:hidden;height:0px;">
<gcse:search></gcse:search>
</div>
<form id="searchbox_009114923999563836576:dv0a4ndtmly">
<input value="009114923999563836576:dv0a4ndtmly" name="cx" type="hidden"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input id="q" style name="q" size="5" type="text" placeholder="search"/>
</form>
</div>
</div>
<hr/>
<div id="metadata">
<div id="abstract"><em>Archiving the Web, because nothing lasts forever - pulling together all the previous archive tools.</em></div>
<br/>
<div id="tags"><i><a href="./tags/Haskell">Haskell</a>, <a href="./tags/archiving">archiving</a></i></div>
<br/>
<div id="page-created">created:
<br/>
<i>10 Mar 2011</i></div>
<div id="last-modified">modified:
<br/>
<i>25 Jun 2014</i></div>
<br/>
<div id="version">status:
<br/>
<i>finished</i></div>
<br/>
<div id="epistemological-status"><a href="./About#belief-tags" title="Explanation of 'belief' metadata">belief:</a>
<br/>
<i>highly likely</i>
</div>
<hr/>
</div>
<div id="donations">
<div id="bitcoin-donation-address">
<a href="http://en.wikipedia.org/wiki/Bitcoin">‡∏ø</a>: 18qCaJR3DRWFgdbNcr6TXkGfa2fQ5LLsvn
</div>
<div id="paypal">
<form style="display: inline" action="https://www.paypal.com/cgi-bin/webscr" method="post" onClick="_gaq.push(['_trackEvent', 'Click', 'PayPalClicked', '']);">
<div class="form-type">
<input type="hidden" name="cmd" value="_s-xclick"/>
<input type="hidden" name="hosted_button_id" value="8GSLCWGCC6AF8"/>
<input type="image" src="http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif" name="submit" alt="Help support my writings!"/>
</div>
</form>
</div>
<div id="Gittip">
<script data-gittip-username="gwern" data-gittip-widget="button" src="//gttp.co/v1.js"></script>
</div>
</div>
</div>
 
<div id="adsense">
<a href="http://41j.com/ads/ad.html"><img alt="Advertisement for 'HTerm, The Graphical Terminal'" src="http://41j.com/ads/ad.png" height="90" width="728"></a>
</div>
<div id="header">
<h1>Archiving URLs</h1>
</div>
<div id="content">
<div id="TOC"><ul>
<li><a href="#link-rot">Link rot</a></li>
<li><a href="#detection">Detection</a></li>
<li><a href="#prevention">Prevention</a><ul>
<li><a href="#remote-caching">Remote caching</a></li>
<li><a href="#local-caching">Local caching</a><ul>
<li><a href="#url-sources">URL sources</a></li>
</ul></li>
</ul></li>
<li><a href="#reacting-to-broken-links">Reacting to broken links</a></li>
<li><a href="#external-links">External links</a></li>
<li><a href="#appendices">Appendices</a><ul>
<li><a href="#filter-urls"><code>filter-urls</code></a></li>
<li><a href="#sort---key-compression-trick"><code>sort --key</code> compression trick</a><ul>
<li><a href="#locality">Locality</a></li>
<li><a href="#web-archives">Web archives</a></li>
<li><a href="#separate-mirrors">Separate mirrors</a></li>
<li><a href="#alternatives">Alternatives</a></li>
<li><a href="#external-links-1">External links</a></li>
</ul></li>
</ul></li>
</ul></div>
<blockquote>
<p>‚ÄúDecay is inherent in all compound things. Work out your own salvation with diligence.‚Äù ‚ÄìLast words of the Buddha</p>
</blockquote>
<p>Given my interest in <a href="About#long-content">long term content</a> and extensive linking, <a href="http://en.wikipedia.org/wiki/link%20rot" title="Wikipedia: link rot">link rot</a> is an issue of deep concern to me. I need backups not just for my files<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, but for the web pages I read and use - they‚Äôre all part of my <a href="http://en.wikipedia.org/wiki/exomind" title="Wikipedia: exomind">exomind</a>. It‚Äôs not much good to have an extensive essay on some topic where half the links are dead and the reader can neither verify my claims nor get context for my claims.</p>
<section id="link-rot" class="level1">
<h1>Link rot</h1>
<p>The dimension of digital decay is dismal and distressing. <a href="http://en.wikipedia.org/wiki/Link%20rot%23Prevalence" title="Wikipedia: Link rot#Prevalence">Wikipedia</a>:</p>
<blockquote>
<p>In a 2003 experiment, <a href="http://www2003.org/cdrom/papers/refereed/p097/P97%20sources/p97-fetterly.html">Fetterly et al.</a> discovered that about one link out of every 200 disappeared each week from the Internet. <a href="http://iwaw.europarchive.org/05/papers/iwaw05-mccown1.pdf">McCown et al. (2005)</a> discovered that half of the URLs cited in <a href="http://en.wikipedia.org/wiki/D-Lib%20Magazine" title="Wikipedia: D-Lib Magazine">D-Lib Magazine</a> articles were no longer accessible 10 years after publication [the irony!], and other studies have shown link rot in academic literature to be even worse (<a href="http://www.spinellis.gr/pubs/jrnl/2003-CACM-URLcite/html/urlcite.html">Spinellis, 2003</a>, <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.97.9695&amp;rep=rep1&amp;type=pdf">Lawrence et al., 2001</a>). <a href="http://www.dlib.org/dlib/january02/nelson/01nelson.html">Nelson and Allen (2002)</a> examined link rot in digital libraries and found that about 3% of the objects were no longer accessible after one year.</p>
</blockquote>
<p><a href="http://en.wikipedia.org/wiki/Bruce%20Schneier" title="Wikipedia: Bruce Schneier">Bruce Schneier</a> remarks that one friend experienced 50% linkrot in one of his pages over less than 9 years (not that the situation was any better <a href="http://www.pantos.org/atw/35654.html">in 1998</a>), and that his own blog posts link to news articles that go dead in days<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>; the <a href="http://en.wikipedia.org/wiki/Internet%20Archive" title="Wikipedia: Internet Archive">Internet Archive</a> has estimated the average lifespan of a Web page at <a href="https://web.archive.org/web/20071019225237/http://www.wired.com/culture/lifestyle/news/2001/10/47894" title="Wayback Goes Way Back on Web">100 days</a>. A <em><a href="http://en.wikipedia.org/wiki/Science%20%28journal%29" title="Wikipedia: Science (journal)">Science</a></em> study looked at articles in prestigious journals; they didn‚Äôt use many Internet links, but when they did, 2 years later ~13% were dead<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>. The French company Linterweb studied external links on the <a href="http://en.wikipedia.org/wiki/French%20Wikipedia" title="Wikipedia: French Wikipedia">French Wikipedia</a> before setting up <a href="http://www.wikiwix.com/">their cache</a> of French external links, and found - back in 2008 - already <a href="http://fr.wikipedia.org/wiki/Utilisateur:Pmartin/Cache">5% were dead</a>. (The English Wikipedia has seen a 2010-2011 spike from a few thousand dead links to <a href="http://en.wikipedia.org/wiki/File%3AArticles-w-Dead-Links-Jan-2011.png" title="Wikipedia: File:Articles-w-Dead-Links-Jan-2011.png">~110,000</a> out of <a href="http://en.wikipedia.org/wiki/Wikipedia%20talk%3AWikiProject%20External%20links%2FWebcitebot2%23Summary" title="Wikipedia: Wikipedia talk:WikiProject External links/Webcitebot2#Summary">~17.5m live links</a>.) The dismal studies <a href="http://jnci.oxfordjournals.org/content/96/12/969.full" title="'Internet Citations in Oncology Journals: A Vanishing Resource?', Hester et al 2004">just</a> <a href="./docs/2007-dimitrova.pdf" title="'The half-life of internet references cited in communication journals', Dimitrova &amp; Bugeja 2007">go</a> <a href="./docs/2008-wren.pdf" title="'URL decay in MEDLINE - a 4-year follow-up study', Wren 2008">on</a> <a href="http://archderm.ama-assn.org/cgi/reprint/142/9/1147.pdf" title="'Uniform Resource Locator Decay in Dermatology Journals: Author Attitudes and Preservation Practices', Wren et al 2006">and</a> <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2213465/" title="'The Prevalence and Inaccessibility of Internet References in the Biomedical Literature at the Time of Publication', Aronsky et al 2007">on</a> <a href="http://yjolt.org/sites/default/files/Something_Rotten_in_Legal_Citation.pdf" title="'Something Rotten in the State of Legal Citation: the Life Span of a United States Supreme Court Citation Containing an Internet Link (1996-2010)', Liebler &amp; Liebert 2013">and</a> <a href="http://www.fasebj.org/content/19/14/1943.full" title="'Unavailability of online supplementary scientific information from articles published in major journals', Evangelou et al 2005">on</a> (<a href="http://ijism.ricest.ac.ir/ojs/index.php/ijism/article/download/49/53" title="'Availability and Half-life of Web References Cited in Information Research Journal: A Citation Study', Moghaddam et al 2012">and</a> <a href="http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2329161" title="'Perma: Scoping and Addressing the Problem of Link and Reference Rot in Legal Citations', Zittrain &amp; Albert 2013">on</a>). Even in a highly stable, funded, curated environment, link rot happens anyway. For example, about <a href="http://arxiv.org/pdf/1209.3026v1.pdf" title="'Losing My Revolution: How Many Resources Shared on Social Media Have Been Lost?', SalahEldeen &amp; Nelson 2012">11% of Arab Spring-related tweets</a> were gone within a year (even though Twitter is - currently - still around).</p>
<p>My specific target date is 2070, 60 years from now. As of 10 March 2011, <code>gwern.net</code> has around 6800 external links (with around 2200 to non-Wikipedia websites)<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>. Even at the lowest estimate of 3% annual linkrot, few will survive to 2070. If each link has a 97% chance of surviving each year, then the chance a link will be alive in 2070 is <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mn>0</mn><mo>.</mo><msup><mn>97</mn><mrow><mn>2070</mn><mo>‚àí</mo><mn>2011</mn></mrow></msup><mo>=</mo><mspace width="0.333em"></mspace><mn>0</mn><mo>.</mo><mn>16</mn></mrow></math> (or to put it another way, an 84% chance any given link <em>will</em> die). The 95% <a href="http://en.wikipedia.org/wiki/confidence%20interval" title="Wikipedia: confidence interval">confidence interval</a> for such a <a href="http://en.wikipedia.org/wiki/binomial%20distribution" title="Wikipedia: binomial distribution">binomial distribution</a> says that of the 2200 non-Wikipedia links, ~336-394 will survive to 2070<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>. If we try to predict using a more reasonable estimate of 50% linkrot, then an average of 0 links will survive (<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mn>0</mn><mo>.</mo><msup><mn>50</mn><mrow><mn>2070</mn><mo>‚àí</mo><mn>2011</mn></mrow></msup><mo>√ó</mo><mn>2200</mn><mo>=</mo><mn>1</mn><mo>.</mo><mn>735</mn><mo>√ó</mo><msup><mn>10</mn><mrow><mo>‚àí</mo><mn>16</mn></mrow></msup><mo>√ó</mo><mn>2200</mn><mo>‚âÉ</mo><mn>0</mn></mrow></math>). It would be a good idea to simply assume that <em>no</em> link will survive.</p>
<p>With that in mind, one can consider remedies. (If we lie to ourselves and say it won‚Äôt be a problem in the future, then we guarantee that it <em>will</em> be a problem. <a href="http://wiki.lesswrong.com/wiki/Litany_of_Gendlin">‚ÄúPeople can stand what is true, for they are already enduring it.‚Äù</a>)</p>
</section>
<section id="detection" class="level1">
<h1>Detection</h1>
<blockquote>
<p>With every new spring<br/>the blossoms speak not a word<br/>yet expound the Law ‚Äì<br/>knowing what is at its heart<br/>by the scattering storm winds.<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a></p>
</blockquote>
<p>The first remedy is to learn about broken links as soon as they happen, which allows one to react quickly and scrape archives or search engine caches (<a href="http://www.cs.odu.edu/~fmccown/research/lazy/">‚Äòlazy preservation‚Äô</a>). I currently use <a href="http://wummel.github.io/linkchecker/"><code>linkchecker</code></a> to spider gwern.net looking for broken links. <code>linkchecker</code> is run in a <a href="http://en.wikipedia.org/wiki/cron" title="Wikipedia: cron">cron</a> job like so:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">@monthly</span> linkchecker --check-extern --timeout=35 --no-warnings --file-output=html \
                      <span class="kw">--ignore-url</span>=^mailto --ignore-url=^irc --ignore-url=http://.*\.onion \
                      <span class="kw">--ignore-url</span>=paypal.com --ignore-url=web.archive.org \
                     <span class="kw">http</span>://www.gwern.net</code></pre>
<p>Just this command would turn up many false positives. For example, there would be several hundred warnings on Wikipedia links because I link to redirects; and <code>linkchecker</code> respects <a href="http://en.wikipedia.org/wiki/robots.txt" title="Wikipedia: robots.txt">robots.txt</a>s which forbid it to check liveness, but emits a warning about this. These can be suppressed by editing <code>~/.linkchecker/linkcheckerrc</code> to say <code>ignorewarnings=http-moved-permanent,http-robots-denied</code> (the available warning classes are listed in <code>linkchecker -h</code>).</p>
<p>The quicker you know about a dead link, the sooner you can look for replacements or its new home.</p>
</section>
<section id="prevention" class="level1">
<h1>Prevention</h1>
<section id="remote-caching" class="level2">
<h2>Remote caching</h2>
<p>We can ask a third party to keep a cache for us. There are several <a href="http://en.wikipedia.org/wiki/archive%20site" title="Wikipedia: archive site">archive site</a> possibilities:</p>
<ol type="1">
<li>the <a href="http://en.wikipedia.org/wiki/Internet%20Archive" title="Wikipedia: Internet Archive">Internet Archive</a></li>
<li><a href="http://en.wikipedia.org/wiki/WebCite" title="Wikipedia: WebCite">WebCite</a></li>
<li><a href="http://perma.cc/">Perma.cc</a></li>
<li>Linterweb‚Äôs WikiWix<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>.</li>
<li><a href="http://www.peeep.us/">Peeep.us</a></li>
<li><a href="http://archive.is/">Archive.is</a></li>
<li><a href="https://pinboard.in/">Pinboard</a> (with the $25/yr archiving option<a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a>)</li>
<li><a href="http://hiyo.jp/">Hiyo.jp</a> &amp; <a href="http://megalodon.jp/">Megalodon.jp</a> (may be difficult to use)</li>
</ol>
<p>There are other options but they are not available like Google<a href="#fn9" class="footnoteRef" id="fnref9"><sup>9</sup></a> or various commercial/government archives<a href="#fn10" class="footnoteRef" id="fnref10"><sup>10</sup></a></p>
 
<p>(An example would be <a href="http://bits.blogs.nytimes.com/2010/12/07/palm-is-far-from-game-over-says-former-chief/" title="Palm Is Far From 'Game Over', Says Former Chief"><code>bits.blogs.nytimes.com/2010/12/07/palm-is-far-from-game-over-says-former-chief/</code></a> being archived at <a href="http://webcitation.org/5ur7ifr12"><code>webcitation.org/5ur7ifr12</code></a>.)</p>
<p>My first program in this vein of thought was a bot which fired off WebCite and Internet Archive/Alexa requests: <a href="haskell/Wikipedia%20Archive%20Bot">Wikipedia Archiving Bot</a>, quickly followed up by a <a href="haskell/Wikipedia%20RSS%20Archive%20Bot">RSS version</a>. (Or you could install the <a href="http://en.wikipedia.org/wiki/Alexa%20Toolbar" title="Wikipedia: Alexa Toolbar">Alexa Toolbar</a> to get automatic submission to the Internet Archive, if you have ceased to care about privacy.)</p>
<p>The core code was quickly adapted into a <a href="http://hackage.haskell.org/package/gitit" title="Hackage: gitit">gitit</a> wiki plugin which hooked into the save-page functionality and tried to archive every link in the newly-modified page, <a href="https://github.com/jgm/gitit/blob/master/plugins/Interwiki.hs">Interwiki.hs</a></p>
<p>Finally, I wrote <a href="http://hackage.haskell.org/package/archiver" title="Hackage: archiver">archiver</a>, a daemon which watches<a href="#fn11" class="footnoteRef" id="fnref11"><sup>11</sup></a>/reads a text file. (Source is available via <code>git clone https://github.com/gwern/archiver-bot.git</code>.)</p>
<p>The library half of <code>archiver</code> is a simple wrapper around the appropriate HTTP requests; the executable half reads a specified text file and loops as it (slowly) fires off requests and deletes the appropriate URL.</p>
<p>That is, <code>archiver</code> is a daemon which will process a specified text file, each line of which is a URL, and will one by one request that the URLs be archived or spidered</p>
<p>Usage of <code>archiver</code> might look like <code>archiver ~/.urls.txt <a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="fb9c8c9e8995bb9c8c9e8995d5959e8f">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script></code>. In the past, <code>archiver</code> would sometimes crash for unknown reasons, so I usually wrap it in a <code>while</code> loop like so: <code>while true; do archiver ~/.urls.txt <a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="73140416011d33140416011d5d1d1607">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script>; done</code>. If I wanted to put it in a detached <a href="http://en.wikipedia.org/wiki/GNU%20screen" title="Wikipedia: GNU screen">GNU screen</a> session: <code>screen -d -m -S &quot;archiver&quot; sh -c 'while true; do archiver ~/.urls.txt <a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="8ee9f9ebfce0cee9f9ebfce0a0e0ebfa">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script>; done'</code>. Finally, rather than start it manually, I use a cron job to start it at boot, for a final invocation of</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">@reboot</span> sleep 4m <span class="kw">&amp;&amp;</span> <span class="kw">screen</span> -d -m -S <span class="st">&quot;archiver&quot;</span> sh -c <span class="st">'while true; do archiver ~/.urls.txt <a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="e68191839488d4a68191839488c8888392">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script> \</span>
<span class="st">        &quot;cd ~/www &amp;&amp; nice -n 20 ionice -c3 torify wget --unlink --limit-rate=20k --page-requisites --timestamping \</span>
<span class="st">        -e robots=off --reject .iso,.exe,.gz,.xz,.rar,.7z,.tar,.bin,.zip,.jar,.flv,.mp4,.avi,.webm \</span>
<span class="st">        --user-agent='</span>Firefox/4.9<span class="st">'&quot; 200; done'</span></code></pre>
</section>
<section id="local-caching" class="level2">
<h2>Local caching</h2>
<p>Remote archiving, while convenient, has a major flaw: the archive services cannot keep up with the growth of the Internet and are woefully incomplete. I experience this regularly, where a link on <code>gwern.net</code> goes dead and I cannot find it in the Internet Archive or WebCite, and it is a general phenomenon: <a href="http://arxiv.org/pdf/1212.6177v1.pdf" title="How Much of the Web Is Archived?">Ainsworth et al 2012</a> find &lt;35% of common Web pages ever copied into an archive service, and typically only one copy exists.</p>
<p>On a roughly monthly basis, I run a shell script named, imaginatively enough, <code>local-archiver</code>:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/sh</span>
<span class="kw">set</span> <span class="kw">-e</span>

<span class="kw">cp</span> <span class="kw">`find</span> ~/.mozilla/ -name <span class="st">&quot;places.sqlite&quot;</span><span class="kw">`</span> ~/
<span class="kw">sqlite3</span> places.sqlite <span class="st">&quot;SELECT url FROM moz_places, moz_historyvisits \</span>
<span class="st">                       WHERE moz_places.id = moz_historyvisits.place_id \</span>
<span class="st">                             and visit_date &gt; strftime('%s','now','-1.5 month')*1000000 ORDER by \</span>
<span class="st">                       visit_date;&quot;</span> <span class="kw">|</span> <span class="kw">filter-urls</span> <span class="kw">&gt;&gt;</span> ~/.tmp
<span class="kw">rm</span> ~/places.sqlite
<span class="kw">split</span> -l500 ~/.tmp ~/.tmp-urls
<span class="kw">rm</span> ~/.tmp

<span class="kw">cd</span> ~/www/
<span class="kw">for</span> <span class="kw">file</span> in ~/.tmp-urls*<span class="kw">;</span>
 <span class="kw">do</span> <span class="kw">(wget</span> --unlink --continue --page-requisites --timestamping --input-file <span class="ot">$file</span> <span class="kw">&amp;&amp;</span> <span class="kw">rm</span> <span class="ot">$file</span> <span class="kw">&amp;)</span>;
<span class="kw">done</span>

<span class="kw">find</span> ~/www -size +4M -delete</code></pre>
<p>The code is not the prettiest, but it‚Äôs fairly straightforward:</p>
<ul>
<li>the script grabs my Firefox browsing history by extracting it from the history SQL database file<a href="#fn12" class="footnoteRef" id="fnref12"><sup>12</sup></a>, and feeds the URLs into <a href="http://en.wikipedia.org/wiki/wget" title="Wikipedia: wget">wget</a></li>
<li>The script <code>split</code>s the long list of URLs into a bunch of files and runs that many <code>wget</code>s because <code>wget</code> apparently has no way of simultaneously downloading from multiple domains.</li>
<li><p>The <a href="#filter-urls"><code>filter-urls</code></a> command is another shell script, which removes URLs I don‚Äôt want archived. This script is a hack which looks like this:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/sh</span>
<span class="kw">set</span> <span class="kw">-e</span>
<span class="kw">cat</span> /dev/stdin <span class="kw">|</span> <span class="kw">sed</span> -e <span class="st">&quot;s/#.*//&quot;</span> <span class="kw">|</span> <span class="kw">sed</span> -e <span class="st">&quot;s/&amp;sid=.*$//&quot;</span> <span class="kw">|</span> <span class="kw">sed</span> -e <span class="st">&quot;s/\/$//&quot;</span> <span class="kw">|</span> <span class="kw">grep</span> -v -e 4chan -e reddit ...</code></pre></li>
</ul>
<p>A local copy is not the best resource - what if a link goes dead in a way your tool cannot detect so you don‚Äôt <em>know</em> to put up your copy somewhere? But it solves the problem pretty decisively.</p>
<p><code>archiver</code> has an extra feature where any third argument is treated as an arbitrary <code>sh</code> command to run after each URL is archived, to which is appended said URL. You might use this feature if you wanted to load each URL into Firefox, or append them to a log file, or simply download or archive the URL in some other way.</p>
<p>For example, in conjunction with the big <code>local-archiver</code> runs, I have <code>archiver</code> run <code>wget</code> on each individual URL: <code>screen -d -m -S &quot;archiver&quot; sh -c 'while true; do archiver ~/.urls.txt <a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="781f0f1d0a16381f0f1d0a1656161d0c">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script> &quot;cd ~/www &amp;&amp; wget --unlink --continue --page-requisites --timestamping -e robots=off --reject .iso,.exe,.gz,.xz,.rar,.7z,.tar,.bin,.zip,.jar,.flv,.mp4,.avi,.webm --user-agent='Firefox/3.5' 120&quot;; done'</code>.</p>
<p>Alternately, you might use <code>curl</code> or a specialized archive downloader like the Internet Archive‚Äôs crawler <a href="http://crawler.archive.org/">Heritrix</a>.</p>
<p>The space consumed by such a backup is not that bad; only 30-50 gigabytes for a year of browsing, and less depending on how hard you prune the downloads. (More, of course, if you use <code>linkchecker</code> to archive entire sites and not just the pages you visit.) Storing this is quite viable in the long term; while page sizes have <a href="http://www.websiteoptimization.com/speed/tweak/average-web-page/">increased 7x</a> between 2003 and 2011 and pages average around 400kb<a href="#fn13" class="footnoteRef" id="fnref13"><sup>13</sup></a>, <a href="http://en.wikipedia.org/wiki/Kryder%27s%20law" title="Wikipedia: Kryder‚Äôs law">Kryder‚Äôs law</a> has also been operating and has increased disk capacity by ~128x - in 2011, $80 will buy you at least <a href="http://forre.st/storage#hdd">2 terabytes</a>, that works out to 4 cents a gigabyte or 80 cents for the low estimate for downloads; that is much better than the $25 annual fee that somewhere like <a href="http://pinboard.in/upgrade/">Pinboard</a> charges. Of course, you need to back this up yourself. We‚Äôre relatively fortunate here - most Internet documents are ‚Äòborn digital‚Äô and easy to migrate to new formats or inspect in the future. We can download them and worry about how to view them only when we need a particular document, and Web browser backwards-compatibility already stretches back to files written in the early 1990s. (Of course, we‚Äôre probably screwed if we discover the content we wanted was presented only in Adobe Flash or as an inaccessible ‚Äòcloud‚Äô service.) In contrast, if we were trying to preserve programs or software libraries instead, we would face a much more formidable task in keeping a working ladder of binary-compatible virtual machines or interpreters<a href="#fn14" class="footnoteRef" id="fnref14"><sup>14</sup></a>. The situation with <a href="http://www.davidbordwell.net/blog/2012/02/13/pandoras-digital-box-pix-and-pixels/" title="Pandora's digital box: Pix and pixels">digital movie preservation</a> hardly bears thinking on.</p>
<p>There are ways to cut down on the size; if you tar it all up and run <a href="http://en.wikipedia.org/wiki/7-Zip" title="Wikipedia: 7-Zip">7-Zip</a> with maximum compression options, you could probably compact it to 1/5th the size. I found that the uncompressed files could be reduced by around 10% by using <a href="http://en.wikipedia.org/wiki/fdupes" title="Wikipedia: fdupes">fdupes</a> (<a href="http://netdial.caribe.net/~adrian2/fdupes.html">homepage</a>) to look for duplicate files and turning the duplicates into a space-saving <a href="http://en.wikipedia.org/wiki/hard%20link" title="Wikipedia: hard link">hard link</a> to the original with a command like <code>fdupes --recurse --hardlink ~/www/</code>. (Apparently there are a <em>lot</em> of bit-identical JavaScript (eg. <a href="http://en.wikipedia.org/wiki/JQuery" title="Wikipedia: JQuery">JQuery</a>) and images out there.)</p>
<section id="url-sources" class="level3">
<h3>URL sources</h3>
<section id="browser-history" class="level4">
<h4>Browser history</h4>
<p>There are a number of ways to populate the source text file. For example, I have a script <code>firefox-urls</code>:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/sh</span>
<span class="kw">set</span> <span class="kw">-e</span>

<span class="kw">cp</span> --force <span class="kw">`find</span> ~/.mozilla/firefox/ -name <span class="st">&quot;places.sqlite&quot;</span><span class="kw">|sort|head</span> -1<span class="kw">`</span> ~/
<span class="kw">sqlite3</span> -batch places.sqlite <span class="st">&quot;SELECT url FROM moz_places, moz_historyvisits \</span>
<span class="st">                       WHERE moz_places.id = moz_historyvisits.place_id and \</span>
<span class="st">                       visit_date &gt; strftime('%s','now','-1 day')*1000000 ORDER by \</span>
<span class="st">                       visit_date;&quot;</span> <span class="kw">|</span> <span class="kw">filter-urls</span>
<span class="kw">rm</span> ~/places.sqlite</code></pre>
<p>(<code>filter-urls</code> is the same script as in <code>local-archiver</code>. If I don‚Äôt want a domain locally, I‚Äôm not going to bother with remote backups either. In fact, because of WebCite‚Äôs rate-limiting, <code>archiver</code> is almost perpetually back-logged, and I <em>especially</em> don‚Äôt want it wasting time on worthless links like <a href="http://en.wikipedia.org/wiki/4chan" title="Wikipedia: 4chan">4chan</a>.)</p>
<p>This is called every hour by <code>cron</code>:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">@hourly</span> firefox-urls <span class="kw">&gt;&gt;</span> ~/.urls.txt</code></pre>
<p>This gets all visited URLs in the last time period and prints them out to the file for archiver to process. Hence, everything I browse is backed-up through <code>archiver</code>.</p>
<p>Non-Firefox browsers can be supported with similar strategies; for example, Zachary Vance‚Äôs Chromium scripts likewise extracts URLs from Chromium‚Äôs <a href="https://github.com/vanceza/rip-chrome-history">SQL history</a> &amp; <a href="https://github.com/vanceza/export-chrome-bookmarks">bookmarks</a>.</p>
</section>
<section id="document-links" class="level4">
<h4>Document links</h4>
<p>More useful perhaps is a script to extract external links from Markdown files and print them to standard out: <a href="haskell/link-extractor.hs">link-extractor.hs</a></p>
<p>So now I can take <code>find . -name &quot;*.page&quot;</code>, pass the 100 or so Markdown files in my wiki as arguments, and add the thousand or so external links to the archiver queue (eg. <code>find . -name &quot;*.page&quot; -type f -print0 | xargs -0 runhaskell haskell/link-extractor.hs | filter-urls &gt;&gt; ~/.urls.txt</code>); they will eventually be archived/backed up.</p>
</section>
<section id="website-spidering" class="level4">
<h4>Website spidering</h4>
<p>Sometimes a particular website is of long-term interest to one even if one has not visited <em>every</em> page on it; one could manually visit them and rely on the previous Firefox script to dump the URLs into <code>archiver</code> but this isn‚Äôt always practical or time-efficient. <code>linkchecker</code> inherently spiders the websites it is turned upon, so it‚Äôs not a surprise that it can build a <a href="http://en.wikipedia.org/wiki/site%20map" title="Wikipedia: site map">site map</a> or simply spit out all URLs on a domain; unfortunately, while <code>linkchecker</code> has the ability to output in a remarkable variety of formats, it cannot simply output a newline-delimited list of URLs, so we need to post-process the output considerably. The following is the shell one-liner I use when I want to archive an entire site (note that this is a bad command to run on a large or heavily hyper-linked site like the English Wikipedia or <a href="http://lesswrong.com">LessWrong</a>!); edit the target domain as necessary:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">linkchecker</span> --check-extern -odot --complete -v --ignore-url=^mailto --no-warnings http://www.longbets.org
    <span class="kw">|</span> <span class="kw">fgrep</span> http
    <span class="kw">|</span> <span class="kw">fgrep</span> -v -e <span class="st">&quot;label=&quot;</span> -e <span class="st">&quot;-&gt;&quot;</span> -e <span class="st">'&quot; ['</span> -e <span class="st">'&quot; ]'</span> -e <span class="st">&quot;/ &quot;</span>
    <span class="kw">|</span> <span class="kw">sed</span> -e <span class="st">&quot;s/href=</span><span class="dt">\&quot;</span><span class="st">//&quot;</span> -e <span class="st">&quot;s/</span><span class="dt">\&quot;</span><span class="st">,//&quot;</span> -e <span class="st">&quot;s/ //&quot;</span>
    <span class="kw">|</span> <span class="kw">filter-urls</span>
    <span class="kw">|</span> <span class="kw">sort</span> --unique <span class="kw">&gt;&gt;</span> ~/.urls.txt</code></pre>
<p>When <code>linkchecker</code> does not work, one alternative is to do a <code>wget --mirror</code> and extract the URLs from the filenames - list all the files and prefix with a ‚Äúhttp://‚Äù etc.</p>
</section>
</section>
</section>
</section>
<section id="reacting-to-broken-links" class="level1">
<h1>Reacting to broken links</h1>
<p><code>archiver</code> combined with a tool like <code>link-checker</code> means that there will rarely be any broken links on <code>gwern.net</code> since one can either find a live link or use the archived version. In theory, one has multiple options now:</p>
<ol start="0" type="1">
<li>Search for a copy on the live Web</li>
<li>link the Internet Archive copy</li>
<li>link the WebCite copy</li>
<li>link the WikiWix copy</li>
<li><p>use the <code>wget</code> dump</p>
<p>If it‚Äôs been turned into a full local file-based version with <code>--convert-links --page-requisites</code>, one can easily convert the dump into something like a standalone PDF suitable for public distribution. (A PDF is easier to store and link than the original directory of bits and pieces or other HTML formats like a ZIP archive of said directory.)</p>
<p>I use <a href="http://code.google.com/p/wkhtmltopdf/"><code>wkhtmltopdf</code></a> which does a good job; an example of a dead webpage with no Internet mirrors is <code>http://www.aeiveos.com/~bradbury/MatrioshkaBrains/MatrioshkaBrainsPaper.html</code> which can be found at <a href="./docs/1999-bradbury-matrioshkabrains.pdf">1999-bradbury-matrioshkabrains.pdf</a>, or Sternberg et al‚Äôs 2001 review <a href="./docs/dnb/2001-sternberg.pdf">‚ÄúThe Predictive Value of IQ‚Äù</a>.</p></li>
</ol>
</section>
<section id="external-links" class="level1">
<h1>External links</h1>
<ul>
<li><a href="http://www.archive-it.org/">Archive-It</a> -(by the Internet Archive)</li>
<li><p><a href="http://pinboard.in/">Pinboard</a></p>
<ul>
<li><a href="http://blog.pinboard.in/2010/11/bookmark_archives_that_don_t/">‚ÄúBookmark Archives That Don‚Äôt‚Äù</a></li>
</ul></li>
<li><a href="http://samsaffron.com/archive/2012/06/07/testing-3-million-hyperlinks-lessons-learned#comment-31366">‚ÄúTesting 3 million hyperlinks, lessons learned‚Äù</a>, Stack Exchange</li>
<li><a href="./docs/2011-muflax-backup.pdf">‚ÄúBackup All The Things‚Äù</a>, muflax</li>
<li><p><a href="https://news.ycombinator.com/item?id=6504331">Hacker News discussion</a></p></li>
</ul>
</section>
<section id="appendices" class="level1">
<h1>Appendices</h1>
<section id="filter-urls" class="level2">
<h2><code>filter-urls</code></h2>
<p>A raw dump of URLs, while certainly archivable, will typically result in a very large mirror of questionable value (is it really necessary to archive Google search queries or Wikipedia articles? usually, no) and worse, given the rate-limiting necessary to store URLs in the Internet Archive or other services, may wind up delaying the archiving of the important links &amp; risking their total loss. Disabling the remote archiving is unacceptable, so the best solution is to simply take a little time to manually blacklist various domains or URL patterns.</p>
<p>This blacklisting can be as simple as a command like <code>filter-urls | grep -v en.bwikipedia.org</code>, but can be much more elaborate. The following shell script is the skeleton of my own custom blacklist, derived from manually filtering through several years of daily browsing as well as spiders of <a href="http://lesswrong.com/lw/7kg/rationalist_sites_worth_archiving/" title="Rationalist sites worth archiving?">dozens of websites</a> for various people &amp; purposes, demonstrating a variety of possible techniques: regexps for domains &amp; file-types &amp; query-strings, <code>sed</code>-based rewrites, fixed-string matches (both blacklists and whitelists), etc:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="co">#!/bin/sh</span>

<span class="co"># USAGE: `filter-urls` accepts on standard input a list of newline-delimited URLs or filenames,</span>
<span class="co"># and emits on standard output a list of newline-delimited URLs or filenames.</span>
<span class="co">#</span>
<span class="co"># This list may be shorter and entries altered. It tries to remove all unwanted entries, where 'unwanted'</span>
<span class="co"># is a highly idiosyncratic list of regexps and fixed-string matches developed over hundreds of thousands</span>
<span class="co"># of URLs/filenames output by my daily browsing, spidering of interesting sites, and requests</span>
<span class="co"># from other people to spider sites for them.</span>
<span class="co">#</span>
<span class="co"># You are advised to test output to make sure it does not remove</span>
<span class="co"># URLs or filenames you want to keep. (An easy way to test what is removed is to use the `comm` utility.)</span>
<span class="co">#</span>
<span class="co"># For performance, it does not sort or remove duplicates from output; both can be done by</span>
<span class="co"># piping `filter-urls` to `sort --unique`.</span>

<span class="kw">set</span> <span class="kw">-e</span>

<span class="kw">cat</span> /dev/stdin \
    <span class="kw">|</span> <span class="kw">sed</span> -e <span class="st">&quot;s/#.*//&quot;</span> -e <span class="st">'s/&gt;$//'</span> -e <span class="st">&quot;s/&amp;sid=.*$//&quot;</span> -e <span class="st">&quot;s/\/$//&quot;</span> -e <span class="st">'s/$/\n/'</span> -e <span class="st">'s/\?sort=.*$//'</span> \
      <span class="kw">-e</span> <span class="st">'s/^[ \t]*//'</span> -e <span class="st">'s/utm_source.*//'</span> -e <span class="st">'s/https:\/\//http:\/\//'</span> -e <span class="st">'s/\?showComment=.*//'</span> \
    <span class="kw">|</span> <span class="kw">grep</span> <span class="st">&quot;\.&quot;</span> \
    <span class="kw">|</span> <span class="kw">fgrep</span> -v <span class="st">&quot;*&quot;</span> \
    <span class="kw">|</span> <span class="kw">egrep</span> -v -e <span class="st">'\/\.rss$'</span> -e <span class="st">&quot;\.tw$&quot;</span> -e <span class="st">&quot;//%20www\.&quot;</span> -e <span class="st">&quot;/file-not-found&quot;</span> -e <span class="st">&quot;258..\.com/$&quot;</span> \
       <span class="kw">-e</span> <span class="st">&quot;3qavdvd&quot;</span> -e <span class="st">&quot;://avdvd&quot;</span> -e <span class="st">&quot;\.avi&quot;</span> -e <span class="st">&quot;\.com\.tw&quot;</span> -e <span class="st">&quot;\.onion&quot;</span> -e <span class="st">&quot;\?fnid\=&quot;</span> -e <span class="st">&quot;\?replytocom=&quot;</span> \
       <span class="kw">-e</span> <span class="st">&quot;^lesswrong.com/r/discussion/comments$&quot;</span> -e <span class="st">&quot;^lesswrong.com/user/gwern$&quot;</span> \
       <span class="kw">-e</span> <span class="st">&quot;^webcitation.org/query$&quot;</span> \
       <span class="kw">-e</span> <span class="st">&quot;ftp.*&quot;</span> -e <span class="st">&quot;6..6\.com&quot;</span> -e <span class="st">&quot;6..9\.com&quot;</span> -e <span class="st">&quot;6??6\.com&quot;</span> -e <span class="st">&quot;7..7\.com&quot;</span> -e <span class="st">&quot;7..8\.com&quot;</span> -e <span class="st">&quot;7..\.com&quot;</span> \
       <span class="kw">-e</span> <span class="st">&quot;78..\.com&quot;</span> -e <span class="st">&quot;7??7\.com&quot;</span> -e <span class="st">&quot;8..8\.com&quot;</span> -e <span class="st">&quot;8??8\.com&quot;</span> -e <span class="st">&quot;9..9\.com&quot;</span> -e <span class="st">&quot;9??9\.com&quot;</span> \
       <span class="kw">-e</span> gold.*sell -e vip.*club \
    <span class="kw">|</span> <span class="kw">fgrep</span> -v -e <span class="st">&quot;#!&quot;</span> -e <span class="st">&quot;.bin&quot;</span> -e <span class="st">&quot;.mp4&quot;</span> -e <span class="st">&quot;.swf&quot;</span> -e <span class="st">&quot;/mediawiki/index.php?title=&quot;</span> -e <span class="st">&quot;/search?q=cache:&quot;</span> \
      <span class="kw">-e</span> <span class="st">&quot;/wiki/Special:Block/&quot;</span> -e <span class="st">&quot;/wiki/Special:WikiActivity&quot;</span> -e <span class="st">&quot;Special%3ASearch&quot;</span> \
      <span class="kw">-e</span> <span class="st">&quot;Special:Search&quot;</span> -e <span class="st">&quot;__setdomsess?dest=&quot;</span>

<span class="co"># prevent URLs from piling up at the end of the file</span>
<span class="kw">echo</span> <span class="st">&quot;&quot;</span></code></pre>
<p><code>filter-urls</code> can be used on one‚Äôs local archive to save space by deleting files which may be downloaded by <code>wget</code> as dependencies. For example:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">find</span> ~/www <span class="kw">|</span> <span class="kw">sort</span> --unique <span class="kw">&gt;&gt;</span> full.txt <span class="kw">&amp;&amp;</span> <span class="kw">\</span>
    <span class="kw">find</span> ~/www <span class="kw">|</span> <span class="kw">filter-urls</span> <span class="kw">|</span> <span class="kw">sort</span> --unique <span class="kw">&gt;&gt;</span> trimmed.txt
<span class="kw">comm</span> -23 full.txt trimmed.txt <span class="kw">|</span> <span class="kw">xargs</span> -d <span class="st">&quot;\n&quot;</span> rm
<span class="kw">rm</span> full.txt trimmed.txt</code></pre>
<p>This shrunk my archive by 9GB from 65GB to 56GB, although at the cost of some archiving fidelity by removing many filetypes like CSS or JavaScript or GIF images.</p>
</section>
<section id="sort---key-compression-trick" class="level2">
<h2><code>sort --key</code> compression trick</h2>
<p>One way to look at data compression is as a form of intelligence (see the <a href="http://en.wikipedia.org/wiki/Hutter%20Prize" title="Wikipedia: Hutter Prize">Hutter Prize</a> &amp; <a href="http://arxiv.org/abs/1104.5466" title="Notes on a New Philosophy of Empirical Science">Burfoot 2011</a>): a compression tool like <a href="http://en.wikipedia.org/wiki/xz" title="Wikipedia: xz"><code>xz</code></a> is being asked to predict what the next bit of the original file is, and the better its predictions, the less data needs to be stored to correct its mistaken predictions (‚ÄúI know how to spell ‚Äòbanana‚Äô, I just don‚Äôt know when to stop‚Äù). The smarter the program is, the better its compression will be; but on the flip side, you can also improve the compression ratio by giving it a little help and organizing the data into an equivalent form the program can understand better - for example, by using the <a href="http://en.wikipedia.org/wiki/Burrows-Wheeler%20transform" title="Wikipedia: Burrows-Wheeler transform">Burrows-Wheeler transform</a>. Or by preserving spatial locality: keeping similar data together, and not dispersing it all over. (This also explains why multimedia files barely compress: because the lossy encodings are the product of decades of work specialized to the particular domain of audio or images or video, and a general-purpose lossless compression would have to be <em>very</em> intelligent, on par with <a href="http://en.wikipedia.org/wiki/PAQ" title="Wikipedia: PAQ">PAQ</a>, to beat them at their own game.) Files on one topic should be compressed together.</p>
<section id="locality" class="level3">
<h3>Locality</h3>
<p>Spatial locality can be subtle. For example, natural language text, though not structured line-by-line as visibly as a dictionary, is still far from random and has many local correlations a compression tool might be able to pick up. If this is true, we would expect that with a sufficiently smart compressor, a text file would compress better in its natural form than if it were randomly shuffled. Is this the case, or are compression utilities are too stupid to see any different between random lines and English prose? Taking 14M of text from <code>gwern.net</code>, we can see for ourselves:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="co"># uncompressed</span>
$ <span class="kw">cat</span> *.page */*.page */*/*.page <span class="kw">|</span>                                                 <span class="kw">wc</span> --bytes
<span class="kw">13588814</span>

<span class="co"># compressed, files in lexicographic order</span>
$ <span class="kw">cat</span> *.page */*.page */*/*.page <span class="kw">|</span>                      <span class="kw">xz</span> -9 --extreme --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">3626732</span>
<span class="co"># compressed, all lines sorted alphabetically</span>
$ <span class="kw">cat</span> *.page */*.page */*/*.page <span class="kw">|</span> <span class="kw">sort</span>               <span class="kw">|</span> <span class="kw">xz</span> -9 --extreme --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">3743756</span>
<span class="co"># compressed, all lines randomly shuffled except for non-unique lines sorted together</span>
$ <span class="kw">cat</span> *.page */*.page */*/*.page <span class="kw">|</span> <span class="kw">sort</span> --random-sort <span class="kw">|</span> <span class="kw">xz</span> -9 --extreme --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">3831740</span>
<span class="co"># compressed, all lines randomly shuffled</span>
$ <span class="kw">cat</span> *.page */*.page */*/*.page <span class="kw">|</span> <span class="kw">shuf</span>               <span class="kw">|</span> <span class="kw">xz</span> -9 --extreme --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">3862632</span></code></pre>
 
<p>The unmolested text compresses to 3.626M, but the <em>same</em> text randomly shuffled is 3.862M! I also included an intermediate form of randomization: despite the name, the <code>--random-sort</code> option to <code>sort</code> is not actually a random shuffle but a random <em>hash</em> (this is not documented in the man page, though it is in the info page) and so any repeated non-unique lines will be sorted together (allowing for some easy duplication deletion), and so we would expect the only-partial randomization of <code>--random-sort</code> to maybe perform a bit better than the true random shuffle of <code>shuf</code>. And it does.</p>
</section>
<section id="web-archives" class="level3">
<h3>Web archives</h3>
<p>Spatial locality also applies to our web archiving. If you are mirroring websites, or otherwise compiling a lot of directories with redundant data on a file-by-file level, there‚Äôs a cute trick to massively improve your compression ratios: don‚Äôt sort the usual lexicographic way, but sort by a subdirectory. (I learned about this trick a few years ago while messing around with archiving my home directory using <code>find</code> and <code>tar</code>.) This is one of the issues with archiving gigabytes of crawls from thousands of domains: URLs have a historical oddity where they are not consistently hierarchical. URLs were originally modeled after hierarchical Unix filesystems; this page, for example, lives at the name <code>/home/gwern/wiki/Archiving URLs.page</code>, which follows a logical left-to-right pattern of increasing narrowness. If one lists my entire filesystem in lexicographic order, all the files in <code>/home/gwern/</code> will be consecutive, and the files in <code>wiki/</code> will be consecutive, and so on. unfortunately, the top level of URLs breaks this scheme - one does not visit <code>https://com/google/mail/?shva=1#search/l%3aunread</code>, one visits <code>https://mail.google.com/mail/?shva=1#search/l%3aunread</code>; one does not visit <code>http://net/www/gwern/Archiving%20URLs</code> but <code>http://www.gwern.net/Archiving%20URLs</code>. So if I download <code>a.google.com</code> and then later <code>z.google.com</code>, a lexicographic list of downloaded files will separate the files as much as possible (even though they are semantically probably similar). A quick example from my current WWW archive:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash">$ <span class="kw">ls</span>
<span class="kw">...</span>
<span class="kw">typemoon.wikia.com/</span>
<span class="kw">tytempletonart.wordpress.com/</span>
<span class="kw">ubc-emotionlab.ca/</span>
<span class="kw">ubook.info/</span>
<span class="kw">ucblibrary3.berkeley.edu/</span>
<span class="kw">uhaweb.hartford.edu/</span>
<span class="kw">ujsportal.pacourts.us/</span>
<span class="kw">ukpmc.ac.uk/</span>
<span class="kw">uk.reuters.com/</span>
<span class="kw">ultan.org.uk/</span>
<span class="kw">...</span></code></pre>
<p>The directories are indeed sorted, but aside from the initial 2 letters or so, look nothing like each other: a Wikia subdomain rubs shoulders with a WordPress blog, a <code>.ca</code> domain is between a <code>.com</code>, a <code>.info</code>, and a <code>.edu</code> (with a <code>.us</code> and <code>.uk</code> thrown in for variety), and so on. Is there any way to sort these directories with a bit of parsing thrown in? For example, maybe we could reverse each line? Some web browsers store URLs reversed right-to-left to enable more efficient database operations, as do Google‚Äôs <a href="http://en.wikipedia.org/wiki/BigTable" title="Wikipedia: BigTable">BigTable</a> systems<a href="#fn15" class="footnoteRef" id="fnref15"><sup>15</sup></a> (to assist their relatively weak compression utility <a href="http://en.wikipedia.org/wiki/Snappy%20%28software%29" title="Wikipedia: Snappy (software)">Snappy</a>). Turns out GNU <a href="http://en.wikipedia.org/wiki/sort%20%28Unix%29" title="Wikipedia: sort (Unix)"><code>sort</code></a> already supports something similar, the <code>--key</code> &amp; <code>--field-separator</code> options; the man page is not very helpful but the <a href="http://en.wikipedia.org/wiki/info%20%28Unix%29" title="Wikipedia: info (Unix)">info</a> page tells us:</p>
<pre><code>'-t SEPARATOR'
'--field-separator=SEPARATOR'
     Use character SEPARATOR as the field separator when finding the
     sort keys in each line.  By default, fields are separated by the
     empty string between a non-blank character and a blank character.
     By default a blank is a space or a tab, but the 'LC_CTYPE' locale
     can change this.

     That is, given the input line ' foo bar', 'sort' breaks it into
     fields ' foo' and ' bar'.  The field separator is not considered
     to be part of either the field preceding or the field following,
     so with 'sort -t &quot; &quot;' the same input line has three fields: an
     empty field, 'foo', and 'bar'.  However, fields that extend to the
     end of the line, as '-k 2', or fields consisting of a range, as
     '-k 2,3', retain the field separators present between the
     endpoints of the range.


'-k POS1[,POS2]'
'--key=POS1[,POS2]'
     Specify a sort field that consists of the part of the line between
     POS1 and POS2 (or the end of the line, if POS2 is omitted),
     _inclusive_.

     Each POS has the form 'F[.C][OPTS]', where F is the number of the
     field to use, and C is the number of the first character from the
     beginning of the field.  Fields and character positions are
     numbered starting with 1; a character position of zero in POS2
     indicates the field's last character.  If '.C' is omitted from
     POS1, it defaults to 1 (the beginning of the field); if omitted
     from POS2, it defaults to 0 (the end of the field).  OPTS are
     ordering options, allowing individual keys to be sorted according
     to different rules; see below for details.  Keys can span multiple
     fields.

     Example:  To sort on the second field, use '--key=2,2' ('-k 2,2').
     See below for more notes on keys and more examples.  See also the
     '--debug' option to help determine the part of the line being used
     in the sort.</code></pre>
<p>Hence, we can do better by ordering <code>sort</code> to break on the dots and focus on the second part of a URL, like so:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash">$ <span class="kw">ls</span> <span class="kw">|</span> <span class="kw">sort</span> --key=2 --field-separator=<span class="st">&quot;.&quot;</span>
<span class="kw">...</span>
<span class="kw">uhaweb.hartford.edu/</span>
<span class="kw">adsabs.harvard.edu/</span>
<span class="kw">chandra.harvard.edu/</span>
<span class="kw">cmt.harvard.edu/</span>
<span class="kw">dash.harvard.edu/</span>
<span class="kw">gking.harvard.edu/</span>
<span class="kw">isites.harvard.edu/</span>
<span class="kw">...</span></code></pre>
<p>There‚Äôs many possible ways to sort, though. So I took my WWW archive as of 15 June 2014, optimized all PNGs &amp; JPEGs with <code>optipng</code> &amp; <code>jpegoptim</code>, ran all the files through <code>filter-urls</code> &amp; deleted the ones which failed (this took out all of the JS files, which is fine since I don‚Äôt think those are useful for archival purposes), and was left with ~86.5GB of files. Then I tested out several ways of sorting the filenames to see what gave the best compression on my corpus.</p>
<p>First, I establish the baseline:</p>
<ol type="1">
<li><p>Size of uncompressed unsorted tarball, which eliminates filesystem overhead and tells us how much compression is really saving:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">cd</span> ~/www/ <span class="kw">&amp;&amp;</span> <span class="kw">find</span> ./ -type f -print0 <span class="kw">|</span> <span class="kw">tar</span> c --to-stdout --no-recursion --null --files-from - <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">86469734400</span>
<span class="kw">1x</span></code></pre></li>
<li><p>Size of sorted tarball:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">cd</span> ~/www/ <span class="kw">&amp;&amp;</span> <span class="kw">find</span> . -type f -print0 <span class="kw">|</span> <span class="kw">sort</span> --zero-terminated <span class="kw">|</span> <span class="kw">\</span>
             <span class="kw">tar</span> c --to-stdout --no-recursion --null --files-from - <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">86469734400</span>
<span class="kw">1x</span></code></pre>
<p>So sorting a tarball doesn‚Äôt give any benefits. This is mostly as I expected, since <code>tar</code> is only supposed to produce a linear archive packing together all the specified files and otherwise preserve them exactly. I thought there might have been some sort of consolidation of full path-names which might yield a small space savings, but apparently not.</p></li>
</ol>
<p>Now we can begin sorting before compression. I thought of 6 approaches; in decreasing order of final archive (smaller=better):</p>
<ol type="1">
<li><p>Sort by file names, simply by reversing, sorting, unreverse (<code>foo.png ... bar.png</code> reverses to <code>gnp.oof ... gnp.rab</code>, which then sort together, and then losslessly reverse back to <code>bar.png / foo.png / ...</code>):</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">cd</span> ~/www/ <span class="kw">&amp;&amp;</span> <span class="kw">find</span> . -type f <span class="kw">|</span> <span class="kw">rev</span> <span class="kw">|</span> <span class="kw">sort</span> <span class="kw">|</span> <span class="kw">rev</span> <span class="kw">|</span> <span class="kw">\</span>
             <span class="kw">tar</span> c --to-stdout --no-recursion --files-from - <span class="kw">|</span> <span class="kw">xz</span> -9 --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">24970605748</span>
<span class="kw">0.2887x</span></code></pre>
(Note that <code>find</code>+<code>rev</code> doesn‚Äôt correctly handle filenames with the wrong/non-UTF-8 encoding; I ultimately used brute force in the form of <a href="http://linux.die.net/man/1/detox"><code>detox</code></a> to find all the non-UTF-8 files and rename them.)</li>
<li><p>Compress tarball, but without any sorting (files are consumed in the order <code>find</code> produces them in the filesystem):</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">cd</span> ~/www/ <span class="kw">&amp;&amp;</span> <span class="kw">find</span> . -type f -print0 <span class="kw">|</span> <span class="kw">\</span>
             <span class="kw">tar</span> c --to-stdout --no-recursion --null --files-from - <span class="kw">|</span> <span class="kw">xz</span> -9 --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">24268747400</span>
<span class="kw">0.2806x</span></code></pre></li>
<li><p>Sort by file suffixes, trying to parsing the filenames first:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">cd</span> ~/www/ <span class="kw">&amp;&amp;</span> <span class="kw">find</span> . -type f -printf <span class="st">'%f/%p\n'</span> <span class="kw">|</span> <span class="kw">sort</span> --field-separator=<span class="st">&quot;.&quot;</span> --key=2  <span class="kw">|</span> <span class="kw">cut</span> -f2- -d/ <span class="kw">|</span> <span class="kw">\</span>
             <span class="kw">tar</span> c --to-stdout --no-recursion --files-from - <span class="kw">|</span> <span class="kw">xz</span> -9 --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">24097155132</span>
<span class="kw">0.2786x</span></code></pre></li>
<li><p>Sort normally, in lexicographic order (subdomain, domain, TLD, subdirectories &amp; files etc):</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">cd</span> ~/www/ <span class="kw">&amp;&amp;</span> <span class="kw">find</span> . -type f -print0 <span class="kw">|</span> <span class="kw">sort</span> --zero-terminated <span class="kw">|</span> <span class="kw">\</span>
    <span class="kw">tar</span> c --to-stdout --no-recursion --null --files-from - <span class="kw">|</span> <span class="kw">xz</span> -9 --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">23967317664</span>
<span class="kw">0.2771x</span></code></pre></li>
<li>Sort by middle of domain: <sub>~</sub>{.Bash} cd ~/www/ &amp;&amp; find . -type f -print0 | sort ‚Äìzero-terminated ‚Äìkey=3 ‚Äìfield-separator=‚Äú.‚Äù |<br/> tar c ‚Äìto-stdout ‚Äìno-recursion ‚Äìnull ‚Äìfiles-from - | xz -9 ‚Äìstdout | wc ‚Äìbytes 23946061272 0.2769x <sub>~</sub></li>
<li><p>Sort by first subdirectory (if there‚Äôs a bunch of <code>foo.com/wp-content/*</code> &amp; <code>bar.com/wp-content/*</code> files, then the <code>/wp-content/</code> files will all sort together regardless of ‚Äúf‚Äù and ‚Äúb‚Äù being far from each other; similarly for <code>domain.com/images/</code>, <code>domain.com/css/</code> etc):</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">cd</span> ~/www/ <span class="kw">&amp;&amp;</span> <span class="kw">find</span> . -type f -print0 <span class="kw">|</span> <span class="kw">sort</span> --zero-terminated --key=3 --field-separator=<span class="st">&quot;/&quot;</span>  <span class="kw">|</span> <span class="kw">\</span>
             <span class="kw">tar</span> c --to-stdout --no-recursion --null --files-from - <span class="kw">|</span> <span class="kw">xz</span> -9 --stdout <span class="kw">|</span> <span class="kw">wc</span> --bytes
<span class="kw">23897682908</span>
<span class="kw">0.2763x</span></code></pre></li>
</ol>
<p>Surprisingly, #1, reversing filenames in order to sort on the suffixes, turns out to be even worse than not sorting at all. The improved attempt to sort on filetypes doesn‚Äôt do much better, although it at least beats the baseline of no-sorting; it may be that to get a compression win real semantic knowledge of filetypes will be needed (perhaps calling <code>file</code> on every file and sorting by the detected filetype?). The regular sort also performs surprisingly well, but my intuitions win for once and it‚Äôs beaten by my previous strategy of sorting by the middle of domains. Finally, the winner is a bit of a surprise too, a sort I only threw in out of curiosity because I noticed blogs tend to have similar site layouts.</p>
<p>In this case, the best version saved <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mn>24268747400</mn><mo>‚àí</mo><mn>23897682908</mn><mo>=</mo><mn>371064492</mn></mrow></math> or 371MB over the unsorted version. Not as impressive as in the next use case, but enough to show this seems like a real gain</p>
</section>
<section id="separate-mirrors" class="level3">
<h3>Separate mirrors</h3>
<p>Top-level domains are not the only thing we might want to sort differently on. To take my mirrors of black-market drug sites such as <a href="./Silk%20Road">Silk Road</a>: I download a site each time as a separate <code>wget</code> run in a timestamped folder. So in my Silk Road 2 folder, I have both <code>2013-12-25/</code> &amp; <code>2014-01-15/</code>. These share many similar &amp; identical files so they compress together with <code>xz</code> down from 1.8GB to 0.3GB.</p>
<p>But they <em>could</em> compress even better: the similar files may be thousands of files and hundreds of megabytes away by alphabetical or file-inode order, so even with a very large window and a top-notch compressor, it will fail to spot many long-range redundancies. In between <code>2013-12-25/default.css</code> and <code>2014-01-15/default.css</code> is going to be all sorts of files which have nothing to do with CSS, like <code>2014-01-16/items/2-grams-of-pure-vanilla-ketamine-powder-dutchdope?vendor_feedback_page=5</code> and <code>2014-01-16/items/10-generic-percocet-10-325-plus-1-30mg-morphine</code>. You see the problem.</p>
<p>Because we sort the files by ‚Äòall files starting with ‚Äú2013‚Äù‚Äô and then ‚Äòall files starting ‚Äú2014‚Äù‚Äô, we lose all proximity. If instead, we could sort by subfolder and only then by the top-level folder, then we‚Äôd have everything line up nicely. Fortunately, we already know how to do this! Reuse the sort-key trick, specify ‚Äú/‚Äù as the delimiter to parse on, and the nth field to sort on. We feed it a file list, tell it to break filenames by ‚Äú/‚Äù, and then to sort on a lower level, and if we did it right, we will indeed get output like <code>2013-12-25/default.css</code> just before <code>2014-01-15/default.css</code>, which will do wonders for our compression, and which will pay ever more dividends as we accumulate more partially-redundant mirrors.</p>
<p>Here is an example of output for my Pandora mirrors, where, due to frequent rumors of its demise triggering mirroring on my part, I have 5 full mirrors at the time of testing; and naturally, if we employ the sort-key trick (<code>find . -type f | sort --key=3 --field-separator=&quot;/&quot;</code>), we find a lot of similar-sounding files:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">./2014-01-15/profile/5a66e5238421f0422706b267b735d2df/6</span>
<span class="kw">./2014-01-16/profile/5a9df4f5482d55fb5a8997c270a1e22d</span>
<span class="kw">./2013-12-25/profile/5a9df4f5482d55fb5a8997c270a1e22d/1</span>
<span class="kw">./2014-01-15/profile/5a9df4f5482d55fb5a8997c270a1e22d.1</span>
<span class="kw">./2013-12-25/profile/5a9df4f5482d55fb5a8997c270a1e22d/2</span>
<span class="kw">./2014-01-15/profile/5a9df4f5482d55fb5a8997c270a1e22d.2</span>
<span class="kw">./2013-12-25/profile/5a9df4f5482d55fb5a8997c270a1e22d/3</span>
<span class="kw">./2014-01-15/profile/5a9df4f5482d55fb5a8997c270a1e22d/4</span>
<span class="kw">./2014-01-15/profile/5a9df4f5482d55fb5a8997c270a1e22d/5</span>
<span class="kw">./2014-01-15/profile/5a9df4f5482d55fb5a8997c270a1e22d/6</span>
<span class="kw">./2013-12-25/profile/5abb81db167294478a23ca110284c587</span>
<span class="kw">./2013-12-25/profile/5acc44d370e305e252dd4e2b91fda9d0/1</span>
<span class="kw">./2014-01-15/profile/5acc44d370e305e252dd4e2b91fda9d0.1</span>
<span class="kw">./2013-12-25/profile/5acc44d370e305e252dd4e2b91fda9d0/2</span>
<span class="kw">./2014-01-15/profile/5acc44d370e305e252dd4e2b91fda9d0.2</span></code></pre>
<p>Note the interleaving of 5 different mirrors, impossible in a normal left-to-right alphabetical sort. You can bet that these 4 files (in 15 versions) are going to compress much better than if they were separated by a few thousand other profile pages.</p>
<p>So here‚Äôs an example invocation (doing everything in pipelines to avoid disk IO):</p>
<pre class="sourceCode R"><code class="sourceCode r">find . -type f -print0 |<span class="st"> </span>sort --zero-terminated --key=<span class="dv">3</span> --field-separator=<span class="st">&quot;/&quot;</span>
 |<span class="st"> </span>tar --no-recursion --null --files-from -<span class="st"> </span>-c
 |<span class="st"> </span>xz -<span class="dv">9</span> --extreme --stdout
 &gt;<span class="st"> </span>../mirror.tar.xz</code></pre>
<p>Used on my two Silk Road 2 mirrors which together weigh 1800M, a normal run without the <code>--key</code>/<code>--field-separator</code> options, as mentioned before, yields a 308M archive. That‚Äôs not too bad. Certainly much better than hauling around almost 2GB. However - if I switch to the sort-key trick, however, the archive is now 271M, or 37M less. Same compression algorithm, same files, same unpacked results, same speed, just 2 little obscure <code>sort</code> options‚Ä¶ and I get an archive 87% the size of the original.</p>
<p>Not impressed? Well, I did say that the advantage increases with the number of mirrors to extract redundancy from. With only 2 mirrors, the SR2 results can‚Äôt be too impressive. How about the Pandora mirrors? 5 of them gives the technique more scope to shine. And as expected, it‚Äôs even more impressive when I compare the Pandora archives: 71M vs 162M. The sort-keyed archive is 44% of the regular archive!</p>
</section>
<section id="alternatives" class="level3">
<h3>Alternatives</h3>
<p>The sort-key trick is most useful when we can infer a lot of spatial locality just from parts of the file names, it‚Äôs not a panacea. There are other approaches:</p>
<ol type="1">
<li>if we have multiple temporally-ordered datasets and we don‚Äôt mind making it more difficult to access older copies, it may be simpler to store the data as a DVCS like <a href="http://en.wikipedia.org/wiki/Git%20%28software%29" title="Wikipedia: Git (software)">git</a> where each dataset is a large patch</li>
<li><p>sort files by minimizing binary differences between them using Timm S. M√ºller‚Äôs <a href="http://neoscientists.org/~tmueller/binsort/"><code>binsort</code></a> utility</p>
<p>The default optimization setting of <code>-o15</code> underperforms the sort-key trick on both the SR2 and Pandora datasets by 5-10MB, and a higher setting like <code>-o1000</code> is best. Note that <code>binsort</code> is <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow></math> in number of files, so it‚Äôs limited to sorting &lt;10,000 files. An example pipeline for compressing posts from the Silk Road forums regarding <a href="http://www.reddit.com/r/SilkRoad/comments/1yzndq/a_trip_down_memory_lane_vladimir_limetless_and/">a minor Ponzi scheme there</a>, since the filenames offer little guidance for a semantically-meaningful sort:</p>
<pre class="sourceCode Bash"><code class="sourceCode bash"><span class="kw">find</span> dkn255hz262ypmii.onion/ -type f -exec fgrep -i -l vladimir  <span class="dt">{}</span> <span class="dt">\;</span> <span class="kw">&gt;&gt;</span> ponzi.txt
<span class="kw">find</span> dkn255hz262ypmii.onion/ -type f -exec fgrep -i -l Limetless <span class="dt">{}</span> <span class="dt">\;</span> <span class="kw">&gt;&gt;</span> ponzi.txt

<span class="kw">mkdir</span> ponzi/ <span class="kw">&amp;&amp;</span> <span class="kw">cp</span> <span class="kw">`cat</span> ponzi.txt<span class="kw">`</span> ponzi/
<span class="kw">~/bin/binsort/binsort</span> -t 6 -o 1000 ponzi/ <span class="kw">&gt;</span> ponzi-list.txt
<span class="kw">cat</span> ponzi-list.txt <span class="kw">|</span> <span class="kw">tar</span> --no-recursion --files-from - -c <span class="kw">|</span> <span class="kw">xz</span> -9 --extreme --stdout <span class="kw">&gt;</span> ~/srf1-ponzi.tar.xz</code></pre>
(Embarrassingly, <code>binsort</code> seems to underperform on this dataset: the files are 380M uncompressed, 3.536M sort-keyed, and 3.450M sorted.)</li>
<li><p>if we know there are many duplicates but they are far apart by a lexicographic sort and we don‚Äôt have any good way to sort filenames and a lot of RAM, we can try out a compression tool which specifically looks for long-range redundancies throughout the entire bitstream, such as <a href="http://en.wikipedia.org/wiki/rzip" title="Wikipedia: rzip"><code>lrzip</code></a> (<a href="http://ck.kolivas.org/apps/lrzip/">homepage</a>/<a href="https://wiki.archlinux.org/index.php/Lrzip">Arch wiki</a>. <code>lrzip</code> is packaged in Debian and should be at least as good as <code>xz</code> since it too uses LZMA; but it is an obscure tool which is not a default install on Linux distributions like <code>xz</code> is, and this makes distributing archives to other people difficult.</p></li>
</ol>
</section>
<section id="external-links-1" class="level3">
<h3>External links</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/357560/sorting-multiple-keys-with-unix-sort">‚ÄúSorting multiple keys with Unix <code>sort</code>‚Äù</a></li>
<li><a href="http://simhash.googlecode.com/svn/trunk/paper/SimHashWithBib.pdf" title="Sadowski &amp; Levin 2007">‚ÄúSimHash: Hash-based Similarity Detection‚Äù</a> (see also <a href="http://en.wikipedia.org/wiki/MinHash" title="Wikipedia: MinHash">MinHash</a>)</li>
</ul>
</section>
</section>
</section>
<section class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I use <a href="http://duplicity.nongnu.org/"><code>duplicity</code></a> &amp; <a href="http://www.nongnu.org/rdiff-backup/"><code>rdiff-backup</code></a> to backup my entire home directory to a cheap 1.5TB hard drive (bought from Newegg using <code>forre.st</code>‚Äôs <a href="http://forre.st/storage#hdd">‚ÄúStorage Analysis - GB/$ for different sizes and media‚Äù</a> price-chart); a limited selection of folders are backed up to <a href="http://www.tarsnap.com/">Tarsnap</a>.</p>
<p>I used to semiannually tar up my important folders, add <a href="http://en.wikipedia.org/wiki/PAR2" title="Wikipedia: PAR2">PAR2</a> redundancy, and burn them to DVD, but that‚Äôs no longer really feasible; if I ever get a Blu-ray burner, I‚Äôll resume WORM backups. (Magnetic media doesn‚Äôt strike me as reliable over many decades, and it would ease my mind to have optical backups.)<a href="#fnref1">‚Ü©</a></p></li>
<li id="fn2"><p><a href="https://web.archive.org/web/20121108093008/http://www.wired.com/politics/security/commentary/securitymatters/2008/02/securitymatters_0221">‚ÄúWhen the Internet Is My Hard Drive, Should I Trust Third Parties?‚Äù</a>, <em>Wired</em>:</p>
<blockquote>
<p>Bits and pieces of the web disappear all the time. It‚Äôs called ‚Äòlink rot‚Äô, and we‚Äôre all used to it. A friend saved 65 links in 1999 when he planned a trip to Tuscany; only half of them still work today. In my own blog, essays and news articles and websites that I link to regularly disappear ‚Äì sometimes within a few days of my linking to them.</p>
</blockquote>
<a href="#fnref2">‚Ü©</a></li>
<li id="fn3"><p><a href="http://scimaps.org/exhibit/docs/dellawalle.pdf">‚ÄúGoing, Going, Gone: Lost Internet References‚Äù</a>; abstract:</p>
<blockquote>
<p>The extent of Internet referencing and Internet reference activity in medical or scientific publications was systematically examined in more than 1000 articles published between 2000 and 2003 in the New England Journal of Medicine, The Journal of the American Medical Association, and Science. Internet references accounted for 2.6% of all references (672/25548) and in articles 27 months old, 13% of Internet references were inactive.</p>
</blockquote>
<a href="#fnref3">‚Ü©</a></li>
<li id="fn4"><p>By 6 January 2013, the number has increased to ~12000 external links, ~7200 to non-Wikipedia domains.<a href="#fnref4">‚Ü©</a></p></li>
<li id="fn5"><p>If each link has a fixed chance of dying in each time period, such as 3%, then the total risk of death is an <a href="http://en.wikipedia.org/wiki/exponential%20distribution" title="Wikipedia: exponential distribution">exponential distribution</a>; over the time period 2011-2070 the cumulative chance it will beat each of the 3% risks is 0.1658. So in 2070, how many of the 2200 links will have beat the odds? Each link is independent, so they are like flipping a biased coin and form a <a href="http://en.wikipedia.org/wiki/binomial%20distribution" title="Wikipedia: binomial distribution">binomial distribution</a>. The binomial distribution, being discrete, has no easy equation, so we just ask R how many links survive at the 5th percentile/quantile (a lower bound) and how many survive at the 95th percentile (an upper bound):</p>
<pre class="sourceCode R"><code class="sourceCode r"><span class="kw">qbinom</span>(<span class="kw">c</span>(<span class="fl">0.05</span>, <span class="fl">0.95</span>), <span class="dv">2200</span>, <span class="fl">0.97</span>^(<span class="dv">2070-2011</span>))
[<span class="dv">1</span>] <span class="dv">336</span> <span class="dv">394</span>

<span class="co"># the 50% annual link rot hypothetical:</span>
<span class="kw">qbinom</span>(<span class="kw">c</span>(<span class="fl">0.05</span>, <span class="fl">0.50</span>), <span class="dv">2200</span>, <span class="fl">0.50</span>^(<span class="dv">2070-2011</span>))
[<span class="dv">1</span>] <span class="dv">0</span> <span class="dv">0</span></code></pre>
<a href="#fnref5">‚Ü©</a></li>
<li id="fn6"><p>Sh≈çtetsu; 101, ‚ÄòBuddhism related to Blossoms‚Äô; <a href="http://www.amazon.com/Unforgotten-Dreams-Steven-D-Carter/dp/0231105762/?tag=gwernnet-20"><em>Unforgotten Dreams: Poems by the Zen monk Sh≈çtetsu</em></a>; trans. Steven D. Carter, ISBN 0-231-10576-2<a href="#fnref6">‚Ü©</a></p></li>
<li id="fn7"><p>Which I suspect is only accidentally ‚Äògeneral‚Äô and would shut down access if there were some other way to ensure that Wikipedia external links still got archived.<a href="#fnref7">‚Ü©</a></p></li>
<li id="fn8"><p>Since Pinboard is a bookmarking service more than an archive site, I asked whether treating it as such would be acceptable and Maciej said ‚ÄúYour current archive size, growing at 20 GB a year, should not be a problem. I‚Äôll put you on the heavy-duty server where my own stuff lives.‚Äù<a href="#fnref8">‚Ü©</a></p></li>
<li id="fn9"><p>Google Cache is generally recommended only as a last ditch resort because pages expire quickly from it. Personally, I‚Äôm convinced that Google would never just delete colossal amounts of Internet data - this is Google, after all, the epitome of storing unthinkable amounts of data - and that Google Cache merely ceases to make public its copies. And to request a Google spider visit, one has to solve a CAPTCHA - so that‚Äôs not a scalable solution.<a href="#fnref9">‚Ü©</a></p></li>
<li id="fn10"><p>Which would not be publicly accessible or submittable; I know they exist, but because they hide themselves, I know only from random comments online eg. <a href="https://news.ycombinator.com/item?id=2880427">‚Äúyears ago a friend of mine who I‚Äôd lost contact with caught up with me and told me he found a cached copy of a website I‚Äôd taken down in his employer‚Äôs equivalent to the Wayback Machine. His employer was a branch of the federal government.‚Äù</a>.<a href="#fnref10">‚Ü©</a></p></li>
<li id="fn11"><p><a href="http://hackage.haskell.org/package/archiver-0.1">Version 0.1</a> of my <code>archiver</code> daemon didn‚Äôt simply read the file until it was empty and exit, but actually watched it for modifications with <a href="http://en.wikipedia.org/wiki/inotify" title="Wikipedia: inotify">inotify</a>. I removed this functionality when I realized that the required WebCite choking (just one URL every ~25 seconds) meant that <code>archiver</code> would <em>never</em> finish any reasonable workload.<a href="#fnref11">‚Ü©</a></p></li>
<li id="fn12"><p>Much easier than it was in the past; <a href="http://en.wikipedia.org/wiki/Jamie%20Zawinski" title="Wikipedia: Jamie Zawinski">Jamie Zawinski</a> records his travails with the <em>previous</em> Mozilla history format in the aptly-named <a href="http://www.jwz.org/blog/2004/03/when-the-database-worms-eat-into-your-brain/">‚Äúwhen the database worms eat into your brain‚Äù</a>.<a href="#fnref12">‚Ü©</a></p></li>
<li id="fn13"><p>An older <a href="https://code.google.com/speed/articles/web-metrics.html">2010 Google article</a> put the average at 320kb, but that was an average over the entire Web, including all the old content.<a href="#fnref13">‚Ü©</a></p></li>
<li id="fn14"><p>Already one runs old games like the classic <a href="http://en.wikipedia.org/wiki/LucasArts%20adventure%20games" title="Wikipedia: LucasArts adventure games">LucasArts adventure games</a> in emulators of the DOS operating system like <a href="http://en.wikipedia.org/wiki/DOSBox" title="Wikipedia: DOSBox">DOSBox</a>; but those emulators will not always be maintained. Who will emulate the emulators? Presumably in 2050, one will instead emulate some ancient but compatible OS - Windows 7 or Debian 6.0, perhaps - and inside <em>that</em> run DOSBox (to run the DOS which can run the game).<a href="#fnref14">‚Ü©</a></p></li>
<li id="fn15"><p><a href="http://research.google.com/archive/bigtable-osdi06.pdf">‚ÄúBigTable: A Distributed Storage System for Structured Data‚Äù</a>, Chang et al 2006:</p>
<blockquote>
<p>BigTable maintains data in lexicographic order by row key. The row range for a table is dynamically partitioned. Each row range is called a <em>tablet</em>, which is the unit of distribution and load balancing. As a result, reads of short row ranges are efficient and typically require communication with only a small number of machines. Clients can exploit this property by selecting their row keys so that they get good locality for their data accesses. For example, in Webtable, pages in the same domain are grouped together into contiguous rows by reversing the hostname components of the URLs. For example, we store data for <code>maps.google.com/index.html</code> under the key <code>com.google.maps/index.html</code>. Storing pages from the same domain near each other makes some host and domain analyses more efficient.</p>
</blockquote>
<a href="#fnref15">‚Ü©</a></li>
</ol>
</section>
</div>
</div>
<div id="footer">
<p>Still bored? Then try my <a href="https://plus.google.com/103530621949492999968/posts" title="Google+ posts">Google+ news feed</a>.</p>
<a href="https://docs.google.com/spreadsheet/viewform?formkey=dE5GLWpfX3RhX1c2Q1phcEo3U3VDVEE6MQ">Send anonymous feedback</a>
<br/>
<div id="license">
<p xmlns:dct="http://purl.org/dc/terms/" xmlns:vcard="http://www.w3.org/2001/vcard-rdf/3.0#">
<a rel="license" href="http://creativecommons.org/publicdomain/zero/1.0/">
<img src="http://i.creativecommons.org/p/zero/1.0/88x31.png" style="border-style: none;" alt="CC0" height="31" width="88"/>
</a>
</p>
</div>
</div>
 
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
 
<script type="text/javascript" src="./static/js/footnotes.js"></script>
 
<script type="text/javascript" src="./static/js/abalytics.js"></script>
<script type="text/javascript">
      window.onload = function() {
      ABalytics.applyHtml();
      };
    </script>
 
<script id="googleAnalytics" type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-18912926-1']);

      ABalytics.init({
      indent: [
      {
      name: "none",
      "indent_class1": "<style>p + p { text-indent: 0.0em; margin-top: 0 }</style>"
      },
      {
      name: "indent0.1",
      "indent_class1": "<style>p + p { text-indent: 0.1em; margin-top: 0 }</style>"
      },
      {
      name: "indent0.5",
      "indent_class1": "<style>p + p { text-indent: 0.5em; margin-top: 0 }</style>"
      },
      {
      name: "indent1.0",
      "indent_class1": "<style>p + p { text-indent: 1.0em; margin-top: 0 }</style>"
      },
      {
      name: "indent1.5",
      "indent_class1": "<style>p + p { text-indent: 1.5em; margin-top: 0 }</style>"
      },
      {
      name: "indent2.0",
      "indent_class1": "<style>p + p { text-indent: 2.0em; margin-top: 0 }</style>"
      }
      ],
      }, _gaq);

      _gaq.push(['_trackPageview']);
      (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>
 
<script id="outboundLinkTracking" type="text/javascript">
      $(function() {
      $("a").on('click',function(e){
      var url = $(this).attr("href");
      if (e.currentTarget.host != window.location.host) {
      _gat._getTrackerByName()._trackEvent("Outbound Links", e.currentTarget.host.replace(':80',''), url, 0);
      if (e.metaKey || e.ctrlKey || (e.button == 1)) {
      var newtab = true;
      }
      if (!newtab) {
      e.preventDefault();
      setTimeout('document.location = "' + url + '"', 100);
      }
      }
      });
      });
    </script>
 
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
 
<script type="text/javascript" src="./static/js/footnotes.js"></script>
 
<script type="text/javascript" src="./static/js/tablesorter.js"></script>
<script type="text/javascript" id="tablesorter">
      $(document).ready(function() {
      $("table").tablesorter();
      }); </script>
 
<div id="disqus_thread"></div>
<script type="text/javascript">
      if (document.title != 'Essays') { <!-- avoid Disqus comments on front page -->
      (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = 'http://disqus.com/forums/gwern/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
      var disqus_shortname = 'gwern';
      (function () {
      var s = document.createElement('script'); s.async = true;
      s.src = 'http://disqus.com/forums/gwern/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
      }());
      }</script>
<noscript><p>Enable JavaScript for Disqus comments</p></noscript>
</body>
</html>

