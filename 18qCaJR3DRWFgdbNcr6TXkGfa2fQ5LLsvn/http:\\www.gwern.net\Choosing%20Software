http://www.gwern.net/Choosing%20Software
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Thu, 24 Jul 2014 12:59:13 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Set-Cookie: __cfduid=dfee1675c90357b9e8665156daa964a0e1406206753746; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.gwern.net; HttpOnly
x-amz-id-2: AuxKHSBAGSWx5mRXVV9c54twUlzgVcC3QuR6xTk8Alwadcz32SEG+0OIbB7T/MLu
x-amz-request-id: F5F35167BFB33C62
x-amz-meta-s3cmd-attrs: uid:1000/gname:gwern/uname:gwern/gid:1000/mode:33152/mtime:1405188835/atime:1405188835/ctime:1405188835
Cache-Control: max-age=604800, public
Last-Modified: Sat, 12 Jul 2014 18:26:45 GMT
CF-RAY: 14f04b32ed770097-IAD
Content-Encoding: gzip

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<meta name="generator" content="hakyll"/>
<meta name="google-site-verification" content="BOhOQI1uMfsqu_DopVApovk1mJD5ZBLfan0s9go3phk"/>
<meta name="author" content="gwern"/>
<meta name="description" content="Criteria making software useful long-term &amp; worth learning in detail"/>
<meta name="dc.date.issued" content="26 Sep 2008"/>
<meta name="dcterms.modified" content="01 Dec 2013"/>
<title>Choosing Software</title>
<link rel="stylesheet" type="text/css" href="./static/css/default.css"/>
<link href="./atom.xml" type="application/atom+xml" rel="alternate" title="Sitewide ATOM/RSS Feed"/>
<link rel="shortcut icon" type="image/x-icon" href="./static/img/favicon.ico"/>
</head>
<body>
 
<div class="indent_class1"></div>
<div id="main">
<div id="sidebar">
<div id="logo"><img alt="Logo: a Gothic/Fraktur blackletter capital G/ùï≤" height="36" src="./images/logo.png" width="32"/></div>
<div id="sidebar-links">
<p>
<a href="./index" title="index: categorized list of articles">Home</a>
<a href="./About" title="Site ideals, source, content, traffic, examples, license">Site</a>
<a href="./Links" title="Who am I online, what have I done, what am I like? Contact information; sites I use; things I've worked on">Me</a>
</p>
<hr/>
<div id="sidebar-news">
<p>
<a href="./Changelog" title="What's new or updated">New:</a>
<a href="./atom.xml" type="application/atom+xml" rel="alternate" title="Sitewide ATOM/RSS Feed">RSS</a>
<a href="http://eepurl.com/Kc155" title="Monthly mailing list: signup form">MAIL</a>
</p>
<hr/>
</div>
<div id="cse-sitesearch">
<script>
            (function() {
            var cx = '009114923999563836576:dv0a4ndtmly';
            var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;
            gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);
            })();
          </script>
<div style="width:0px;overflow:hidden;height:0px;">
<gcse:search></gcse:search>
</div>
<form id="searchbox_009114923999563836576:dv0a4ndtmly">
<input value="009114923999563836576:dv0a4ndtmly" name="cx" type="hidden"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input id="q" style name="q" size="5" type="text" placeholder="search"/>
</form>
</div>
</div>
<hr/>
<div id="metadata">
<div id="abstract"><em>Criteria making software useful long-term &amp; worth learning in detail</em></div>
<br/>
<div id="tags"><i><a href="./tags/Haskell">Haskell</a>, <a href="./tags/predictions">predictions</a></i></div>
<br/>
<div id="page-created">created:
<br/>
<i>26 Sep 2008</i></div>
<div id="last-modified">modified:
<br/>
<i>01 Dec 2013</i></div>
<br/>
<div id="version">status:
<br/>
<i>in progress</i></div>
<br/>
<div id="epistemological-status"><a href="./About#belief-tags" title="Explanation of 'belief' metadata">belief:</a>
<br/>
<i>possible</i>
</div>
<hr/>
</div>
<div id="donations">
<div id="bitcoin-donation-address">
<a href="http://en.wikipedia.org/wiki/Bitcoin">‡∏ø</a>: 18qCaJR3DRWFgdbNcr6TXkGfa2fQ5LLsvn
</div>
<div id="paypal">
<form style="display: inline" action="https://www.paypal.com/cgi-bin/webscr" method="post" onClick="_gaq.push(['_trackEvent', 'Click', 'PayPalClicked', '']);">
<div class="form-type">
<input type="hidden" name="cmd" value="_s-xclick"/>
<input type="hidden" name="hosted_button_id" value="8GSLCWGCC6AF8"/>
<input type="image" src="http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif" name="submit" alt="Help support my writings!"/>
</div>
</form>
</div>
<div id="Gittip">
<script data-gittip-username="gwern" data-gittip-widget="button" src="//gttp.co/v1.js"></script>
</div>
</div>
</div>
 
<div id="adsense">
<a href="http://41j.com/ads/ad.html"><img alt="Advertisement for 'HTerm, The Graphical Terminal'" src="http://41j.com/ads/ad.png" height="90" width="728"></a>
</div>
<div id="header">
<h1>Choosing Software</h1>
</div>
<div id="content">
<div id="TOC"><ul>
<li><a href="#maintenance">Maintenance</a></li>
<li><a href="#extensible">Extensible</a></li>
<li><a href="#comprehensibility">Comprehensibility</a></li>
<li><a href="#popularity">Popularity</a></li>
<li><a href="#efficiency">Efficiency</a></li>
<li><a href="#short-configurations">Short configurations</a></li>
<li><a href="#take-one-leave-one">Take one, leave one</a></li>
</ul></div>
<p>It‚Äôs not always clear what software to pick in the open source world.</p>
<p>For some tasks, the choice is easy since there‚Äôs one dominating player - for web browsing you will almost certainly want to go with Mozilla Firefox when in X.org, and ELinks when on the command-line.</p>
<p>But with other applications, the array of choices is quite astounding. For an editor, Vim or Emacs or‚Ä¶ For a shell, do you use Bash, Fish, Zsh, Tcsh, Ksh, or what? Each option has many complex pros and cons, and often partisans have strong feelings about the issues.</p>
<p>Myself? I‚Äôve found it useful to try and classify all the options by a few considerations. Since we‚Äôre interested in Unix applications, one can safely say that we‚Äôre all ‚Äúpower users‚Äù and are interested in the best we can get. So the first desiderata is that:</p>
<section id="maintenance" class="level1">
<h1>Maintenance</h1>
<ul>
<li>It should be <strong>maintained</strong>.</li>
</ul>
<p>Life is too short to waste dealing with unmaintained software. Such software is probably already ridden with bit rot, and it may well have been abandoned for a reason.</p>
<p>The point of a program is to make something easier or to do something you could not do before; programs are generally hard enough to use as it is, and a package being unmaintained almost guarantees that you will spend more time on it than an equivalent maintained package. There are usually plenty of choices, so go use one of them.</p>
<p>A commitment to maintenance is also a useful thing. Take GNU Emacs, or the GNU command line utilities in general. There are quite a few of them, they are complex and powerful, and take a while to learn. To profitably use them, you will need to invest time - I had learned enough about the Coreutils to use them comfortably within a few months, and GNU Emacs took about half a year to really learn to any satisfactory degree. Other alternatives like ‚Äònano‚Äô would have taken less time to learn, but the GNU tools offered me more power.</p>
<p>More importantly, the whole reason I was willing to spend so much time learning Emacs was because Emacs has a <em>history</em>. It was begun in 1984 and has been in constant development in the more than 2 decades since. It is likely to continue to be developed for decades (if only by the <a href="http://en.wikipedia.org/wiki/Doomsday%20Argument" title="Wikipedia: Doomsday Argument">Doomsday Argument</a>) by the same gnarled old hackers who wrote it originally.</p>
<p>Even better, it has the institutional support of being the GNU Project‚Äôs official text editor. In other words, learning Emacs is indeed a steep price to pay but that‚Äôs alright since it is entirely plausible that you could be using it for the rest of your computing life. Six months of not particularly productive text editing may sound like a lot, but when set against 20 or 30 years of use, the productivity gains seem worthwhile.</p>
<p>Being maintained is just the most basic criterion though, and many tools will meet that basic level. Unmaintained projects tend to be forgotten, and you usually won‚Äôt see them discussed in lists of projects, so in a sense you can just assume tools are maintained. The second, more difficult feature is:</p>
</section>
<section id="extensible" class="level1">
<h1>Extensible</h1>
<ul>
<li>It should be <strong>extensible</strong>.</li>
</ul>
<p>There are very few tools which you will want to use, now and forever, exactly the way they come. Even a command as humble as ‚Äòcat‚Äô nevertheless has &gt;9 options! For something as complex as a browser or text editor, you <em>will</em> want to customize and most probably extend it. Rather than using nasty hacks to get around this fact, just use a tool which can at least be scripted.</p>
<ul>
<li>However, scripting isn‚Äôt always the best way. Probably the best way is the Emacs-style program architecture<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>: a simple, efficient, and performant core which supports a panoply of extensions - the sum of which is the application. If the bulk of the application is being written as extensions, you get numerous benefits which include:
<ol type="i">
<li>Modularity; and the ability to disable whatever you do not need (with attendant benefits in performance, reliability, and security)</li>
<li>Ease of extension. Obviously, since the developers would have striven to make the large body of code - which they will spend most of their time editing - clean and easy to change. If you <em>have</em> to do everything in Perl or Emacs Lisp, for example, you are obviously going to have nice libraries and features to use. These features and libraries will also be available to you.</li>
<li>Portability. The small core is all that needs to be ported, sometimes. Portability is always a good thing.</li>
<li>Features. Emacs contains the proverbial kitchen sink; Irssi has more extensions and skins than I can count; and Firefox has precisely 2.89 million add-ons. If users can add features without waiting for the official developers and release cycles, they will. And odds are pretty good they may have already done exactly what you needed, or solved a need you didn‚Äôt even realize you had.</li>
</ol></li>
</ul>
<p>It‚Äôs lovely to be able to make use of other people‚Äôs extensions in your shiny new toy, but do you know what to do with it now? Obviously:</p>
</section>
<section id="comprehensibility" class="level1">
<h1>Comprehensibility</h1>
<ul>
<li>You should be able to <strong>understand</strong> it.</li>
</ul>
<p>This is a valuable property for a number of reasons also. An example I like to use is the XMonad tiled windowing manager for X. Before, I had used Ratpoison and StumpWM, but I was never really satisfied because I didn‚Äôt understand C or Common Lisp so many things were and remained a mystery to me. This made extending them, debugging them, even just reading the documentation to use them - it made them all more difficult than they had to be.</p>
<p>With XMonad, I understand most of it. I see how the extensions work, and have written my own. The imperfect mirror of the documentation does not confuse, as I can easily turn to the code which is the ultimate documentation. This point ties into the first and second points. If you understand the code and the architecture, then you are in a much better position to extend it, and potentially maintain it.</p>
<p>This goes back to the first point; you should never need to maintain it, but given your investment in it, you may want to and it‚Äôs better to be able to maintain it to the degree you need it to function - sometimes maintenance is just a matter of updating a few files or the packaging system.</p>
</section>
<section id="popularity" class="level1">
<h1>Popularity</h1>
<ul>
<li>Try to use <strong>standard</strong> stuff.</li>
</ul>
<p>For example, Bash is by all the former criterion a good choice for one‚Äôs shell. It is maintained by the GNU Project, it is certainly extensible and powerful, and it‚Äôs relatively understandable. But the really nice thing about Bash is how very standard it is: every Linux distribution includes Bash, and even set it as the default shell.</p>
<p>And if an operating system doesn‚Äôt run Bash as default, it is basically guaranteed that Bash will run on it (or there will at least be shells with Bash-compatibility). This is an advantage you should not underestimate. Because of this ubiquity, there are powerful network effects operating in favor of Bash guaranteeing that it will be useful for you for a very long time. Standard means you will be able to get your hands on it, standard means there will be documentation and people working to solve bugs and other people taking advantage of the extensibility, and so on. Standard means that new implementations and forks are that much easier. Standard means many things, but from a user‚Äôs perspective, standard is generally a good thing for software and languages to be.</p>
<p>The final major consideration was left to last. It should come as no surprise to modern programmer - sinfully awash amongst high-level garbage-collected interpreted languages as they are - that the least important factor to consider is the level of:</p>
</section>
<section id="efficiency" class="level1">
<h1>Efficiency</h1>
<ul>
<li><strong>efficiency</strong> of a program.</li>
</ul>
<p>This is the final concern because applications spend little time doing inefficient things. The rationale here is that, perhaps Emacs may be somewhat slower than a less capable or portable editor - but you will not save <em>so</em> much time on quicker screen updates &amp;etc. as to make up for real hours lost in porting the other editor or working around its lack of features (see <a href="http://en.wikipedia.org/wiki/Amdahl%27s%20Law" title="Wikipedia: Amdahl‚Äôs Law">Amdahl‚Äôs Law</a>).</p>
<p>There are other concerns here: it is easier to make an extensible/powerful/portable editor more efficient in the bottlenecks than it is to hack in those features to an efficient editor never intended for those features<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>. But if you are truly faced with two choices - each of whom seems equally solidly maintained, extensible, standard, etc. - then go with the more efficient one. After all, efficiency is a virtue and does make the experience more pleasant and gives you the option of using it on slower computers.</p>
<p>Alas, just marking down these features doesn‚Äôt solve every problem. For example, choosing between Vim and Emacs was easy for me - Vim‚Äôs supposed efficiency didn‚Äôt (in my reckoning) outweigh the increased standardness and comprehensibility of Emacs. Or take Bash compared with Zsh. Bash is clearly more standard and is clearly better maintained, being even older than Zsh and the official shell of the GNU Project, and it is probably marginally more efficient. But I nevertheless chose to switch to Zsh.</p>
<p>Why? I just liked it better. It has more features, yes (but not significantly more); it has Bash compatibility (sure, but not as good as the real thing); it makes my configuration files cleaner and easier to maintain, sure (but they were difficult to convert, and are now no longer quite so portable). Basically every point adumbrated argues strongly for Bash and at best, weakly for Zsh. But I liked it better, and in the end that matters.</p>
</section>
<section id="short-configurations" class="level1">
<h1>Short configurations</h1>
<p>What other things should we keep in mind? Well, as time passes, I‚Äôve found configuration files tend to grow. A good thing to do when a configuration file has grown particularly elaborate is to simplify it.</p>
<p>Slim it done, remove everything you haven‚Äôt needed in the last several months. If you still have a huge file, see whether a large chunk of it makes sense to split out.</p>
<p>For example, for the Zsh I have: <code>~/.zshenv</code>, for environmental variables and shell settings that all Zsh invocations need; <code>~/.zaliases</code>, hand-written aliases and functions; <code>~/.ztypos</code>, containing all aliases automatically written to correct typographical errors I have made in the past; <code>~/.zlogout</code> and <code>~/.zprofile</code>, for logout/login stuff; and finally, <code>~/.zshrc</code>, which contains everything needed for pleasant interactive use. Clearly it‚Äôd be absurd and extremely awkward to stuff all of that into a single file, as well as potentially slow.</p>
<p>But suppose you have removed cruft, written stuff as well and concisely as you could, and split files out, and you still have too much? Now it comes time to give back to the free software community. Consider carefully your settings: perhaps they are very common and you could file a bug suggesting they be made the default? That would then be a line you could remove. Or perhaps you have on your hands a <em>de facto</em> useful extension to the program you could package up and offer online somewhere, or even offer to the developers as something to add to all the other extensions included by default.</p>
</section>
<section id="take-one-leave-one" class="level1">
<h1>Take one, leave one</h1>
<p>There is one last piece of advice:</p>
<ul>
<li>For every new tree planted, let one be uprooted.</li>
</ul>
<p>This is a good rule to follow with all possessions. If you buy a new pair of shoes, give away or junk the old pair which you no longer need or can use. If you purchase a new book, sell or donate that old one you will never read again. If you add one program to your system, try to remove another - perhaps one you never used, or perhaps one made redundant by the new one. If you install ELinks, remove Lynx.</p>
<p>Redundancy wastes resources, it imposes mental burdens, it increases inertia and resistance to change. The more stuff you have that you do not need, the <a href="http://www.ribbonfarm.com/2011/06/16/the-las-vegas-rules-ii-stuff-science/">stupider your possessions get</a>. If you have a room bursting at the gills: you cannot freely travel. You cannot easily change your place of residence. You are no longer sure what do you and do not have, you are increasingly mentally stressed. You literally can no longer freely move about. In extreme cases, people have been known to die because they refused to let go of things<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>.</p>
<p>Try to keep matters elegant and uncluttered. There is a difference between elegance and competence - and this difference makes all the difference in the world.</p>
 
</section>
<section class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>For my purposes, the many variants such as the XMonad model are immaterial. Yes, it is a very interesting model (the program compiles a fresh binary with the user‚Äôs new config hardwired in, serializes out the current global state, and restarts itself with the new binary and passes it the serialized state) - but the details of how the extensibility is accomplished are only important if the method is crappy and unreliable.<a href="#fnref1">‚Ü©</a></p></li>
<li id="fn2"><p>As a bigoted Emacs user, I of course see Vim as the classic example of attempting to shoehorn in a feature like a first-class extension language - with humorous results!<a href="#fnref2">‚Ü©</a></p></li>
<li id="fn3"><p>Often due to mental disease; see <a href="http://en.wikipedia.org/wiki/Compulsive%20hoarding" title="Wikipedia: Compulsive hoarding">Pathological hoarding</a><a href="#fnref3">‚Ü©</a></p></li>
</ol>
</section>
</div>
</div>
<div id="footer">
<p>Still bored? Then try my <a href="https://plus.google.com/103530621949492999968/posts" title="Google+ posts">Google+ news feed</a>.</p>
<a href="https://docs.google.com/spreadsheet/viewform?formkey=dE5GLWpfX3RhX1c2Q1phcEo3U3VDVEE6MQ">Send anonymous feedback</a>
<br/>
<div id="license">
<p xmlns:dct="http://purl.org/dc/terms/" xmlns:vcard="http://www.w3.org/2001/vcard-rdf/3.0#">
<a rel="license" href="http://creativecommons.org/publicdomain/zero/1.0/">
<img src="http://i.creativecommons.org/p/zero/1.0/88x31.png" style="border-style: none;" alt="CC0" height="31" width="88"/>
</a>
</p>
</div>
</div>
 
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
 
<script type="text/javascript" src="./static/js/footnotes.js"></script>
 
<script type="text/javascript" src="./static/js/abalytics.js"></script>
<script type="text/javascript">
      window.onload = function() {
      ABalytics.applyHtml();
      };
    </script>
 
<script id="googleAnalytics" type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-18912926-1']);

      ABalytics.init({
      indent: [
      {
      name: "none",
      "indent_class1": "<style>p + p { text-indent: 0.0em; margin-top: 0 }</style>"
      },
      {
      name: "indent0.1",
      "indent_class1": "<style>p + p { text-indent: 0.1em; margin-top: 0 }</style>"
      },
      {
      name: "indent0.5",
      "indent_class1": "<style>p + p { text-indent: 0.5em; margin-top: 0 }</style>"
      },
      {
      name: "indent1.0",
      "indent_class1": "<style>p + p { text-indent: 1.0em; margin-top: 0 }</style>"
      },
      {
      name: "indent1.5",
      "indent_class1": "<style>p + p { text-indent: 1.5em; margin-top: 0 }</style>"
      },
      {
      name: "indent2.0",
      "indent_class1": "<style>p + p { text-indent: 2.0em; margin-top: 0 }</style>"
      }
      ],
      }, _gaq);

      _gaq.push(['_trackPageview']);
      (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>
 
<script id="outboundLinkTracking" type="text/javascript">
      $(function() {
      $("a").on('click',function(e){
      var url = $(this).attr("href");
      if (e.currentTarget.host != window.location.host) {
      _gat._getTrackerByName()._trackEvent("Outbound Links", e.currentTarget.host.replace(':80',''), url, 0);
      if (e.metaKey || e.ctrlKey || (e.button == 1)) {
      var newtab = true;
      }
      if (!newtab) {
      e.preventDefault();
      setTimeout('document.location = "' + url + '"', 100);
      }
      }
      });
      });
    </script>
 
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
 
<script type="text/javascript" src="./static/js/footnotes.js"></script>
 
<script type="text/javascript" src="./static/js/tablesorter.js"></script>
<script type="text/javascript" id="tablesorter">
      $(document).ready(function() {
      $("table").tablesorter();
      }); </script>
 
<div id="disqus_thread"></div>
<script type="text/javascript">
      if (document.title != 'Essays') { <!-- avoid Disqus comments on front page -->
      (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = 'http://disqus.com/forums/gwern/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
      var disqus_shortname = 'gwern';
      (function () {
      var s = document.createElement('script'); s.async = true;
      s.src = 'http://disqus.com/forums/gwern/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
      }());
      }</script>
<noscript><p>Enable JavaScript for Disqus comments</p></noscript>
</body>
</html>

