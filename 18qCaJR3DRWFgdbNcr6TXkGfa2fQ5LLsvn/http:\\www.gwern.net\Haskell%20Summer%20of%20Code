http://www.gwern.net/Haskell%20Summer%20of%20Code
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Wed, 23 Jul 2014 22:09:24 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Set-Cookie: __cfduid=de23c1d8cf0639d444320ac5cb575e06b1406153364515; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.gwern.net; HttpOnly
x-amz-id-2: 1UCBfImmNpluPRcW5nRYFgCud33AAiVBJrSB9eV2CTyS/RzmZ9F/6wK5GHRNMb/u
x-amz-request-id: 7BAC25A28AA2A6AF
x-amz-meta-s3cmd-attrs: uid:1000/gname:gwern/uname:gwern/gid:1000/mode:33152/mtime:1405188878/atime:1405188876/ctime:1405188878
Cache-Control: max-age=604800, public
Last-Modified: Sat, 12 Jul 2014 18:30:21 GMT
CF-RAY: 14eb33c037b502b8-IAD
Content-Encoding: gzip

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<meta name="generator" content="hakyll"/>
<meta name="google-site-verification" content="BOhOQI1uMfsqu_DopVApovk1mJD5ZBLfan0s9go3phk"/>
<meta name="author" content="gwern"/>
<meta name="description" content="A retrospective of 8 years of SoC, and lessons learned"/>
<meta name="dc.date.issued" content="11 Feb 2009"/>
<meta name="dcterms.modified" content="03 Jun 2014"/>
<title>Summers of Code, 2006-2013</title>
<link rel="stylesheet" type="text/css" href="./static/css/default.css"/>
<link href="./atom.xml" type="application/atom+xml" rel="alternate" title="Sitewide ATOM/RSS Feed"/>
<link rel="shortcut icon" type="image/x-icon" href="./static/img/favicon.ico"/>
</head>
<body>
 
<div class="indent_class1"></div>
<div id="main">
<div id="sidebar">
<div id="logo"><img alt="Logo: a Gothic/Fraktur blackletter capital G/ùï≤" height="36" src="./images/logo.png" width="32"/></div>
<div id="sidebar-links">
<p>
<a href="./index" title="index: categorized list of articles">Home</a>
<a href="./About" title="Site ideals, source, content, traffic, examples, license">Site</a>
<a href="./Links" title="Who am I online, what have I done, what am I like? Contact information; sites I use; things I've worked on">Me</a>
</p>
<hr/>
<div id="sidebar-news">
<p>
<a href="./Changelog" title="What's new or updated">New:</a>
<a href="./atom.xml" type="application/atom+xml" rel="alternate" title="Sitewide ATOM/RSS Feed">RSS</a>
<a href="http://eepurl.com/Kc155" title="Monthly mailing list: signup form">MAIL</a>
</p>
<hr/>
</div>
<div id="cse-sitesearch">
<script>
            (function() {
            var cx = '009114923999563836576:dv0a4ndtmly';
            var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;
            gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);
            })();
          </script>
<div style="width:0px;overflow:hidden;height:0px;">
<gcse:search></gcse:search>
</div>
<form id="searchbox_009114923999563836576:dv0a4ndtmly">
<input value="009114923999563836576:dv0a4ndtmly" name="cx" type="hidden"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input id="q" style name="q" size="5" type="text" placeholder="search"/>
</form>
</div>
</div>
<hr/>
<div id="metadata">
<div id="abstract"><em>A retrospective of 8 years of SoC, and lessons learned</em></div>
<br/>
<div id="tags"><i><a href="./tags/Haskell">Haskell</a>, <a href="./tags/predictions">predictions</a></i></div>
<br/>
<div id="page-created">created:
<br/>
<i>11 Feb 2009</i></div>
<div id="last-modified">modified:
<br/>
<i>03 Jun 2014</i></div>
<br/>
<div id="version">status:
<br/>
<i>finished</i></div>
<br/>
<div id="epistemological-status"><a href="./About#belief-tags" title="Explanation of 'belief' metadata">belief:</a>
<br/>
<i>highly likely</i>
</div>
<hr/>
</div>
<div id="donations">
<div id="bitcoin-donation-address">
<a href="http://en.wikipedia.org/wiki/Bitcoin">‡∏ø</a>: 18qCaJR3DRWFgdbNcr6TXkGfa2fQ5LLsvn
</div>
<div id="paypal">
<form style="display: inline" action="https://www.paypal.com/cgi-bin/webscr" method="post" onClick="_gaq.push(['_trackEvent', 'Click', 'PayPalClicked', '']);">
<div class="form-type">
<input type="hidden" name="cmd" value="_s-xclick"/>
<input type="hidden" name="hosted_button_id" value="8GSLCWGCC6AF8"/>
<input type="image" src="http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif" name="submit" alt="Help support my writings!"/>
</div>
</form>
</div>
<div id="Gittip">
<script data-gittip-username="gwern" data-gittip-widget="button" src="//gttp.co/v1.js"></script>
</div>
</div>
</div>
 
<div id="adsense">
<a href="http://41j.com/ads/ad.html"><img alt="Advertisement for 'HTerm, The Graphical Terminal'" src="http://41j.com/ads/ad.png" height="90" width="728"></a>
</div>
<div id="header">
<h1>Summers of Code, 2006-2013</h1>
</div>
<div id="content">
<div id="TOC"><ul>
<li><a href="#example-retrospective-debian">Example retrospective: Debian</a></li>
<li><a href="#judging-haskell-socs">Judging Haskell SoCs</a><ul>
<li><a href="#haskell-retrospective">Haskell retrospective</a><ul>
<li><a href="#section">2006</a></li>
<li><a href="#section-1">2007</a></li>
<li><a href="#section-2">2008</a></li>
<li><a href="#section-3">2009</a></li>
<li><a href="#section-4">2010</a></li>
<li><a href="#section-5">2011</a></li>
<li><a href="#section-6">2012</a></li>
<li><a href="#section-7">2013</a></li>
<li><a href="#lessons-learned">Lessons learned</a></li>
<li><a href="#future-soc-proposals">Future SoC proposals</a></li>
</ul></li>
</ul></li>
<li><a href="#see-also-2">See Also</a></li>
<li><a href="#external-links">External links</a></li>
</ul></div>
<blockquote>
<p>A compilation of Haskell-related student projects 2006-2013, with evaluations of their usefulness to the Haskell community, thoughts on what makes a good project, and predictions for 2011-2013.</p>
</blockquote>
<p>As part of Google‚Äôs <a href="http://en.wikipedia.org/wiki/Google%20Summer%20of%20Code" title="Wikipedia: Google Summer of Code">Summer of Code</a> program, they sponsor 5-10 SoC <a href="http://hackage.haskell.org/trac/summer-of-code/">projects for Haskell</a>.</p>
<p>The Haskell Summer of Codes have often produced excellent results, but how excellent is excellent? Are there any features or commonalities between successful projects or unsuccessful ones?</p>
<section id="example-retrospective-debian" class="level1">
<h1>Example retrospective: Debian</h1>
<p>In 2009, a blogger &amp; Debian developer wrote <a href="https://web.archive.org/web/20111109010423/http://www.milliways.fr/2009/01/20/debian-2008-where-now-1/" title="Debian Summer of Code '08: Where are they now (part 1/3)">a</a> <a href="https://web.archive.org/web/20111219163427/http://www.milliways.fr/2009/01/28/debian-2008-where-now-2/" title="Debian Summer of Code '08: Where are they now (part 2/3)">four</a> <a href="https://web.archive.org/web/20111219163434/http://www.milliways.fr/2009/02/01/debian-2008-where-now-2-5/" title="Debian Summer of Code '08: Where are they now (part 2.5/3)">part</a> <a href="https://web.archive.org/web/20111219153333/http://www.milliways.fr/2009/02/02/debian-2008-where-now-3/" title="Debian Summer of Code '08: Where are they now (part 3/3)">retrospective</a> series on the 2008 Debian Summer of Code projects. The results are interesting: some projects were a failure and the relevant student drifted away and had little to do with Debian again; and some were great successes. I don‚Äôt discern any particular lessons there, except perhaps one against hubris or filling unclear needs. I decided to compile my own series of retrospectives on the Haskell Summers of Code.</p>
</section>
<section id="judging-haskell-socs" class="level1">
<h1>Judging Haskell SoCs</h1>
<p><a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2011" title="How Google Summer of Code Works">Google describes</a> SoC as</p>
<blockquote>
<p>‚Äú‚Ä¶a global program that offers students stipends to write code for open source projects. We have worked with the open source community to identify and fund exciting projects for the upcoming summer.‚Äù</p>
</blockquote>
<p><a href="https://developers.google.com/open-source/soc/">or</a></p>
<blockquote>
<p>‚Äú‚Ä¶a global program that offers student developers stipends to write code for various open source software projects. We have worked with several open source, free software, and technology-related groups to identify and fund several projects over a three month period. Since its inception in 2005, the program has brought together over 4500 successful student participants and over 3000 mentors from over 100 countries worldwide, all for the love of code. Through Google Summer of Code, accepted student applicants are paired with a mentor or mentors from the participating projects, thus gaining exposure to real-world software development scenarios and the opportunity for employment in areas related to their academic pursuits. In turn, the participating projects are able to more easily identify and bring in new developers. Best of all, more source code is created and released for the use and benefit of all.‚Äù</p>
</blockquote>
<p>It is intended to produce source code for the ‚Äòuse and benefit of all‚Äô; it is not meant to produce academic papers, code curiosities, forgotten blog posts, groundwork for distant projects, but ‚Äòexciting‚Äô new production code. This is the perspective I take in trying to assess SoC projects: did it ship <em>anything</em>? If standalone, are the results in active use by more than a few developers or other codebases? If a modification to an existing codebase, was it merged and now is actively maintained<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>? And so on. Sterling Clover argues that this is far too demanding and does not consider whether an involved student is energized by his contribution to go on and contribute still more<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>; I disagree about the former, and I have not done the latter because it would be too labor-intensive to track down every student and assess their later contributions, which would involve still more subjective appraisals<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>. (Perhaps in the future I or another Haskeller will do that.)</p>
<section id="haskell-retrospective" class="level2">
<h2>Haskell retrospective</h2>
<p>Haskell wasn‚Äôt part of the first Summer of Code in 2005, but it was accepted for 2006. We start there</p>
<section id="section" class="level3">
<h3>2006</h3>
<p>The 2006 <a href="http://hackage.haskell.org/trac/summer-of-code/wiki/SoC2006">homepage</a> lists the following projects:</p>
<ul>
<li><p><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/61">‚ÄúFast Mutable Collection Types for Haskell‚Äù</a>; Caio Marcelo de Oliveira Filho, mentored by Audrey Tang</p>
<strong>Unsuccessful</strong>. This ultimately resulted in the <a href="http://hackage.haskell.org/package/HsJudy" title="Hackage: HsJudy">HsJudy</a> library (‚Äòfast mutable collection‚Äô here meaning ‚Äòarray‚Äô). HsJudy was apparently used in Pugs at one time, but no more.</li>
<li><p><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/44">‚ÄúPort Haddock to use GHC‚Äù</a>; David Waern, mentored by Simon Marlow</p>
<strong>Successful</strong>. Haddock has used the GHC API ever since.<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a></li>
<li><p><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/54">‚ÄúA model for client-side scripts with HSP‚Äù</a>; Joel Bj√∂rnson, mentored by Niklas Broberg</p>
<strong>Successful?</strong> Was initially unsuccessful, but seems to‚Äôve been picked up again.</li>
<li><p>‚ÄúGHCi based debugger for Haskell‚Äù; Jos√© Iborra L√≥pez, mentored by David Himmelstrup</p>
<strong>Successful</strong>. The <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-debugger.html">GHCi debugger</a> was accepted into GHC HEAD, and is in production use.</li>
<li><p><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/30">‚ÄúHaskellNet‚Äù</a>; Jun Mukai, mentored by Shae Erisson</p>
<strong>Unsuccessful</strong>. HaskellNet is dead, was noted to be <a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1574">‚Äúuncompleted‚Äù</a>, and none of it has propagated elsewhere. (I‚Äôm not entirely sure what happened with the HaskellNet code - I know of <a href="http://patch-tag.com/r/wrwills/HaskellNet/home">two</a> <a href="http://stuff.mit.edu/afs/sipb/project/suez/src/haskell/haskellnet/">repos</a>, but that‚Äôs about it.) Shae tells me that this poor uptake is probably due to a lack of advertising, and not any actual defect in the HaskellNet code.</li>
<li><p><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1545">‚ÄúLanguage.C - a C parser written in Haskell‚Äù</a>; Marc van Woerkom, mentored by Manuel Chakravarty</p>
<strong>Unsuccessful</strong>. According to <a href="http://web.archive.org/web/20130128085020/http://www.haskell.org/pipermail/haskell-cafe/2007-February/022509.html" title="[Haskell-cafe] Summer of Code">Don Stewart‚Äôs outline</a> of the 2006 SoC, this project was not completed.</li>
<li><p><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/81">‚ÄúImplement a better type checker for Yhc‚Äù</a>; Leon P Smith, mentored by Malcolm Wallace</p>
<strong>Unsuccessful</strong>. See the Language.C SoC</li>
<li><p><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/3">‚ÄúThin out cabal-get and integrate in GHC‚Äù</a>; Paolo Martini, mentored by Isaac Jones</p>
<strong>Successful</strong>. Code lives on as <a href="http://haskell.org/haskellwiki/cabal-install" title="Hawiki: cabal-install">cabal-install</a>, which we all know and love.</li>
<li><p>‚ÄúStorable a =&gt; ByteString a‚Äù; Spencer Janssen, mentored by Don Stewart</p>
<p><strong>Successful</strong>? (Again, per Don.) Currently exists as <a href="http://hackage.haskell.org/package/storablevector" title="Hackage: storablevector">storablevector</a>, with <a href="http://bifunctor.homelinux.net/~roel/cgi-bin/hackage-scripts/revdeps/storablevector-0.2.7#indirect">20 reverse dependencies</a>.</p></li>
</ul>
<p>4 successful; 2 unsuccessful; and 2 failures.</p>
</section>
<section id="section-1" class="level3">
<h3>2007</h3>
<p>The <a href="http://hackage.haskell.org/trac/summer-of-code/wiki/SoC2007">2007 homepage</a> lists:</p>
<ul>
<li><p><a href="http://replay.waybackmachine.org/20071203063254/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=647C914C97658198">‚ÄúDarcs conflict handling‚Äù</a>; Jason Dagit, mentored by David Roundy</p>
<strong>Successful</strong>. The work was successful in almost completely getting rid of the exponential conflict bug, and has been in released Darcs for years</li>
<li><p><a href="http://replay.waybackmachine.org/20071201141912/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=D505A03B8B64C3BF">‚ÄúAutomated building of packages and generation of Haddock documentation‚Äù</a>; Sascha B√∂hme, mentored by Ross Paterson</p>
<strong>Successful</strong>. The auto build and doc generation are long-standing and very useful parts of Hackage.</li>
<li><p><a href="http://replay.waybackmachine.org/20071203042207/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=AB859DA837B7BDCD">‚ÄúRewrite the typechecker for YHC and nhc98‚Äù</a>; Mathieu Boespflug, mentored by Malcolm Wallace</p>
<strong>Successful</strong>? According to the TMR writeup, the type-checker code has made it into YHC. (I add a question mark because YHC is so little used.)</li>
<li><p><a href="http://replay.waybackmachine.org/20071201115804/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=21BCDEABD117783D">‚ÄúCabal Configurations‚Äù</a>; Thomas Schilling, mentored by Michael Isaac Jones</p>
<strong>Successful</strong>. Cabal configurations are very useful for enabling/disabling things and are extremely common in the wild.</li>
<li><p><a href="http://replay.waybackmachine.org/20071201121817/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=637BFC2B6B13D512">‚ÄúUpdate the Hat tracer‚Äù</a>; Kenn Knowles, mentored by Malcolm Wallace</p>
<strong>Unsuccessful</strong>. The update apparently happened, since the <a href="http://www.cs.york.ac.uk/fp/ART/">Hat homepage</a> says ‚ÄúVersion 2.06 released 2nd Oct 2008‚Äù, but it is <a href="http://www.cs.york.ac.uk/fp/ART/download.html">described</a> as unmaintained, and I can‚Äôt seem to find any examples of people actually using Hat.</li>
<li><p><a href="http://replay.waybackmachine.org/20071201123144/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=B97EF4562EF3B244">‚ÄúGeneralizing Parsec to ParsecT and arbitrary input (ByteStrings)‚Äù</a>; Paolo Martini, mentored by Philippa Jane Cowderoy</p>
<strong>Successful?</strong>. The performance is still so terrible that few people use it.</li>
<li><p><a href="http://replay.waybackmachine.org/20090504093628/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=D0137F8B637176F1">‚ÄúShared Libraries for GHC‚Äù</a>; Clemens Fruhwirth, mentored by Simon Marlow</p>
<strong>Successful</strong>. The situation is unclear to me, but I know that for some period dynamic linking worked for some platforms. However, it‚Äôs 2010 and I still have static linking, although GHC 6.12 apparently gets dynamic linking; so I‚Äôm going to chalk this one up as a mixed success.</li>
<li><p><a href="http://replay.waybackmachine.org/20080204074446/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=D4DEE221DAC4E810">‚ÄúLibcurl‚Äù</a>; Mieczys≈Çaw BƒÖk, mentored by Bryan O‚ÄôSullivan</p>
<strong>Unknown</strong> The archived homepage <a href="http://web.archive.org/web/20070706103752/http://varsztat.com/projects/curl/">homepage</a> and <a href="http://web.archive.org/web/20070708071534/varsztat.com/projects/curl/darcs/">repository</a> indicate that the package name was <a href="http://hackage.haskell.org/package/curl" title="Hackage: curl">curl</a> and indeed a <a href="http://en.wikipedia.org/wiki/cURL" title="Wikipedia: cURL">curl</a> binding of that name exists - but none of the metadata points to BƒÖk as either author or maintainer; if it is the same package, it is pretty successful with <a href="http://sparky.haskell.org:8080/package/curl/reverse/all">158 reverse dependencies</a></li>
<li><p><a href="http://replay.waybackmachine.org/20070813151006/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=152CF82F48143D59">‚ÄúExtending GuiHaskell: An IDE for Haskell Hackers‚Äù</a>; Asumu Takikawa, mentored by Neil David Mitchell</p>
<p><strong>Unsuccessful</strong>. GuiHaskell does not exist in any usable form. (The homepage summarizes the situation thusly: <a href="http://www-users.cs.york.ac.uk/~ndm/guihaskell/">‚Äú<strong>Warning</strong>: This project is fragile, unfinished, and I do not recommend that anyone tries using it.‚Äù</a>)</p></li>
</ul>
<p>6 successes; 2 unsuccessful; 1 unknown.</p>
<section id="see-also" class="level4">
<h4>See also</h4>
<ul>
<li><a href="http://haskell.org/haskellwiki/The%20Monad%20Reader" title="Hawiki: The Monad Reader">The Monad.Reader‚Äôs</a> <a href="http://www.haskell.org/wikiupload/5/5d/TMR-Issue9.pdf">issue 9</a> covers 3 2007 SoC projects</li>
<li><a href="http://www.serpentine.com/blog/2007/04/12/haskellorg-and-googles-summer-of-code/">‚ÄúHaskell.org and Google‚Äôs Summer of Code‚Äù</a> -(Bryan O‚ÄôSullivan; 12 April 2007)</li>
</ul>
</section>
</section>
<section id="section-2" class="level3">
<h3>2008</h3>
<p>The <a href="http://hackage.haskell.org/trac/summer-of-code/wiki/SoC2008">2008 homepage</a> isn‚Äôt kind enough to list all the projects, but it does tell us that only 7 projects were accepted by Google.</p>
<p>So we can work from the <a href="http://code.google.com/p/google-summer-of-code-2008-haskell/downloads/list">code.google.com</a> page which lists 6:</p>
<ul>
<li><p>‚ÄúC99 Parser/Pretty-Printer‚Äù; by Benedikt Huber, mentored by Iavor Diatchki</p>
<strong>Successful</strong>. The first try failed, but the second won through, and now people are doing things like <a href="http://corp.galois.com/blog/2008/9/17/parsing-the-linux-kernel-with-haskell-experience-with-langua.html">parsing the Linux kernel</a> with it.</li>
<li><p><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1560">‚ÄúGMap - Fast composable maps‚Äù</a>; by Jamie Brandon. mentored by Adrian Charles Hey</p>
<strong>Unsuccessful</strong>. GMap is on <a href="http://hackage.haskell.org/packages/archive/pkg-list.html">Hackage</a>, but there are <a href="http://sparky.haskell.org:8080/package/gmap/reverse/all">0 users</a> after 3 years.</li>
<li><p>‚ÄúHaskell API Search‚Äù; Neil Mitchell, mentored by Niklas Broberg</p>
<strong>Successful</strong>. The improved performance and search capability have made it into <a href="http://hackage.haskell.org/package/hoogle" title="Hackage: hoogle">Hoogle</a> releases, and Hoogle is one of the more popular Haskell applications (with <a href="http://neilmitchell.blogspot.com/2011/01/hoogle-at-17-million-searches.html">1.7m web searches</a>).</li>
<li><p><a href="http://replay.waybackmachine.org/20080616045128/http://code.google.com/soc/2008/haskell/appinfo.html?csaid=56D60241D77CA94C">‚ÄúCabal ‚Äòmake-like‚Äô dependency framework‚Äù</a>; Andrea Vezzosi, mentored by Duncan Coutts</p>
<strong>Unsuccessful</strong>. (<a href="http://code.haskell.org/~Saizan/cabal/">His code</a> <a href="http://code.haskell.org/hbuild/">wound</a> <a href="http://web.archive.org/web/20110901054201/http://vezzosi.blogspot.com/2008/09/even-if-this-blog-has-been-silent-since.html" title="Results from GSoC">up</a> becoming <a href="https://web.archive.org/web/20111206064418/http://hackage.haskell.org/trac/hackage/wiki/HBuild">hbuild</a>, which is not on Hackage or apparently used by anyone.)</li>
<li><p><a href="http://replay.waybackmachine.org/20080501130545/http://code.google.com/soc/2008/haskell/appinfo.html?csaid=69C2ABD1E013EE0C">‚ÄúGHC plugins‚Äù</a>; Maximilian Conroy Bolingbroke, mentored by Sean Seefried</p>
<strong>Unsuccessful</strong>? As of <a href="http://www.haskell.org/pipermail/glasgow-haskell-users/2010-January/018293.html" title="GHC core plugins">January 2010</a>, the patch adding plugins functionality has yet to be accepted &amp; applied; as of February 2011, the <a href="http://hackage.haskell.org/trac/ghc/ticket/3843">ticket</a> remains open and the code unmerged. The code is apparently not yet bitrotten by the passage of 3 years but how long can its luck last? The code was finally merged in 4 August 2011; <a href="http://hackage.haskell.org/trac/ghc/wiki/NewPlugins">the docs</a> do not list any users.</li>
<li><p>‚ÄúData parallel physics engine‚Äù; Roman Cheplyaka, mentored by Manuel M. T. Chakravarty</p>
<strong>Unsuccessful</strong>. It seems to be finished but no use made of the actual engine that I can see mentioned on the <a href="http://physics-dph.blogspot.com/">engine‚Äôs blog</a>. (I would give reverse dependency statistics, but <a href="http://haskell.org/haskellwiki/Hpysics" title="Hawiki: Hpysics">Hpysics</a> seems to have never been uploaded to Hackage.)</li>
<li><p>‚ÄúGHC API‚Äù; Thomas Schilling, mentored by Simon Marlow  </p>
<p><strong>Unsuccessful</strong>. Schilling‚Äôs fixes went in, but they were in general minor changes (like adding the GHC monad) or bug-fixes; the GHC API remains a mess.</p></li>
</ul>
<p>2 successful, 5 unsuccessful.</p>
<section id="don-stewarts-view" class="level4">
<h4>Don Stewart‚Äôs view</h4>
<p><a href="http://www.haskell.org/pipermail/haskell-cafe/2009-February/055531.html">Don Stewart writes</a> in reply to the foregoing:</p>
<blockquote>
<p>‚ÄúWe explicitly pushed harder in 2008 to clarify and simplify the goals of the projects, ensure adequate <em>prior Haskell experience</em> and to focus on libraries and tools that directly benefit the community.</p>
<p>And our success rate was much higher.</p>
<p>So: look for things that benefit the largest number of Haskell developers and users, and from students with proven Haskell development experience. You can‚Äôt learn Haskell from zero on the job, during SoC.&quot;</p>
</blockquote>
</section>
<section id="see-also-1" class="level4">
<h4>See also</h4>
<ul>
<li>The Monad.Reader‚Äôs <a href="http://www.haskell.org/wikiupload/f/f0/TMR-Issue12.pdf">Issue 12</a></li>
</ul>
</section>
</section>
<section id="section-3" class="level3">
<h3>2009</h3>
<p>5 projects were <a href="http://socghop.appspot.com/org/home/google/gsoc2009/haskell">accepted</a> this year; Darcs tried to apply in its own right was rejected.</p>
<p>In general, these looked good. Most of them will be widely useful ‚Äì especially the Darcs and Haddock SoCs ‚Äì or address longstanding complaints (many criticisms of laziness revolve around how unpredictable it makes memory consumption). The only one that bothers me is the EclipseFP project. I‚Äôm not sure Eclipse is common enough among Haskellers or potential Haskellers to warrant the effort<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a>, but at least the project is focused on improving an existing plugin than writing one from scratch. The 5 were:</p>
<ul>
<li><p><a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022467805">‚ÄúOptimising Darcs for medium to large repositories‚Äù</a>; by Petr Roƒçkai; mentored by <a href="http://erickow.com/">Eric Kow</a></p>
<strong>Unknown</strong>. <a href="http://hackage.haskell.org/package/hashed-storage">hashed-storage</a> exists and is used in Darcs, but from watching the bugtracker traffic, it‚Äôs unclear whether Darcs saw a net gain from it.</li>
<li><p><a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022467962">‚Äúhaskell-src-exts -&gt; haskell-src‚Äù</a>; by Niklas Broberg; mentored by Neil Mitchell</p>
<strong>Successful</strong>. Niklas added a large number of <a href="http://google-summer-of-code-2009-haskell.googlecode.com/files/Niklas_Broberg.tar.gz">patches</a> but it‚Äôs unclear to mean what practical benefit it adds besides handling comments now (which was useful for hlint). Speaking practically, <a href="http://sparky.haskell.org:8080/package/haskell-src/reverse/all">haskell-src</a> has 104 reverse dependencies, and <a href="http://sparky.haskell.org:8080/package/haskell-src-exts/reverse/all">haskell-src-exts</a> has 223; so the latter seems to have indeed surpassed its predecessor.</li>
<li><p><a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022468112">‚ÄúHaddock improvements‚Äù</a>; by Isaac Dupree; mentored by David Waern</p>
<strong>Successful?</strong>. Dupree‚Äôs <a href="http://google-summer-of-code-2009-haskell.googlecode.com/files/IsaacA_Dupree.tar.gz">patches</a> have been applied to head and apparently make cross-package links <a href="http://haddock2009.wordpress.com/category/cross-package-documentation/">usually work</a>.</li>
<li><p><a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022468245">‚ÄúImproving space profiling experience‚Äù</a>; by Gergely Patai; mentored by Johan Tibell</p>
<strong>Successful</strong>. <a href="http://www.haskell.org/haskellwiki/Hp2any">hp2any</a> seems quite alive and usable.</li>
<li><p><a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022468390">‚ÄúExtend EclipseFP functionality for Haskell‚Äù</a>; by Thomas ten Cate; mentored by Thomas Schilling</p>
<p><strong>Unsuccessful</strong>. See <a href="http://eclipsefp.wordpress.com/2009/08/25/endgame/">Cate‚Äôs summing-up</a>.</p></li>
</ul>
<p>3 successful, 1 unknown, 1 unsuccessful.</p>
</section>
<section id="section-4" class="level3">
<h3>2010</h3>
<p><a href="http://donsbot.wordpress.com/2010/04/26/the-7-haskell-projects-in-the-google-summer-of-code/">7 projects</a> were accepted:</p>
<ul>
<li><p><a href="http://webcitation.org/6FTUJT4sx">Improvements to Cabal‚Äôs test support</a>; Thomas Tuegel, mentored by Johan Tibell</p>
<strong>Successful</strong>? The functionality is now in a released version of <code>cabal-install</code> and a number of packages use the provided test syntax.<a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a>  </li>
<li><p><a href="http://cogracenotes.wordpress.com/hackage-proposal/">Infrastructure for a more social Hackage 2.0</a>; Matthew Gruen, mentored by Edward Kmett</p>
<strong>Unknown</strong>. <a href="http://cogracenotes.wordpress.com/">Gruen‚Äôs blog</a> was last updated October 2010, and Hackage still hasn‚Äôt switched over and gotten the new features &amp; benefit of the rewrite. But the code exists and there is a running <a href="http://sparky.haskell.org:8080/">public demo</a>, so this may yet be a success.</li>
<li><p><a href="http://webcitation.org/6JQ1LLFnH">A high performance HTML generation library</a>; Jasper Van der Jeugt, mentored by Simon Meier</p>
<strong>Successful</strong> <a href="http://hackage.haskell.org/package/blaze-html" title="Hackage: blaze-html">blaze-html</a> has been released and is actively developed; version 0.4.0.0 has <a href="http://sparky.haskell.org:8080/package/blaze-html/reverse/all">50 total reverse dependencies</a> and <a href="http://hackage.haskell.org/package/blaze-builder" title="Hackage: blaze-builder">blaze-builder</a> has <a href="http://sparky.haskell.org:8080/package/blaze-builder/reverse/all">97 reverse dependencies</a> though there‚Äôs much overlap. (This site is built on <a href="http://hackage.haskell.org/package/hakyll" title="Hackage: hakyll">hakyll</a>, which uses blaze-html.)</li>
<li><p><a href="http://web.archive.org/web/20100501033720/http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2010/haskell/t127230760615">Improvements to the GHC LLVM backend</a>; Alp Mestanogullari, mentored by Maximilian Bolingbroke</p>
<p><strong>Unsuccessful</strong>. Dan Peebles in #haskell says that Alp‚Äôs SoC never got off the ground when his computer died at the beginning of the summer; with nothing written or turned in, this can‚Äôt be considered a successful SoC, exactly. But could it have been?</p>
The LLVM backend is still on track to become the default GHC backend<a href="#fn7" class="footnoteRef" id="fnref7"><sup>7</sup></a>, suggesting that it‚Äôs popular in GHC HQ (and the <a href="http://disciple.ouroborus.net/">DDC</a> dialect), and it seems to also be popular among <a href="http://www.reddit.com/r/haskell/search?q=LLVM&amp;restrict_sr=on">Haskell bloggers</a>. The scope is restricted to taking a working backend and optimizing it. In general, it seems like a decent SoC proposal, and better than the next one:</li>
<li><p><a href="http://www2.dcc.ufmg.br/laboratorios/llp/wiki/doku.php?id=marco_soc">Implementing the Immix Garbage Collection Algorithm</a>; Marco T√∫lio Gontijo e Silva, mentored by Simon Marlow</p>
<p><strong>Unsuccessful</strong>. The GHC repository history, as of 4 February, contains no patches adding Immix GC. Silva writes in his blog‚Äôs <a href="http://marcotmarcot.wordpress.com/2010/08/20/immix-on-ghc-summer-of-code-final-report/">SoC summary</a> that ‚ÄúAlthough the implementation is not mature enough to be included in the repository, I‚Äôm happy with the state it is now. I think it‚Äôs a good start, and I plan to keep working on it.‚Äù (His <a href="http://marcot.eti.br/blog/">new blog</a>, begun in August 2010, contains no mention of Immix work.) The <a href="http://hackage.haskell.org/trac/ghc/wiki/Commentary/Rts/Storage/GC/Immix">GHC wiki</a> says that ‚Äúit‚Äôs functional, doesn‚Äôt have known bugs and gets better results than the default GC in the nofib suite. On the other hand, it gets worse results than the default GC for the nofib/gc suite.‚Äù Marco said in a <a href="http://www.gwern.net/Haskell%20Summer%20of%20Code#comment-143756091">Disqus comment</a> on this page:</p>
<blockquote>
<p>Hi. I wondered about continuing my work on the Immix GC collector, but Simon Marlow, my mentor, thought it was not a good idea to invest more effort on Immix. So I dropped it, and started working on other things. Greetings.</p>
</blockquote></li>
<li><p><a href="http://darcs.net/GSoC/2010-Cache">‚ÄúImproving Darcs Performance‚Äù</a>; Adolfo Builes, mentored by Eric Kow</p>
<strong>Successful</strong>. This replaced a previous proposal to write a Haskell binding to the <a href="http://en.wikipedia.org/wiki/GObject" title="Wikipedia: GObject">GObject</a> library, which never started. Looking through the Darcs repository history, I see a number of new tests related to the global cache, but no major edits to cache-related modules. The Darcs wiki reports it as a successful and closing some bugs.</li>
<li><p><a href="http://web.archive.org/web/20110319011101/http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2010/haskell/t127230760775">Improving Darcs‚Äôs network performance</a>; Alexey Levan, mentored by Petr Rockai</p>
<p><strong>Successful</strong>. Levan divided his SoC into 2 parts, improving Darcs‚Äôs performance in fetching the many small files that make up a repository‚Äôs revision history, and writing ‚Äòa smart server that can provide clients with only files they need in one request‚Äô. The ‚Äòsmart server‚Äô seems to have been abandoned as not being worthwhile, but the fetching idea was implemented and will be in the <a href="http://blog.darcs.net/2010/11/coming-in-darcs-28-new-features.html">2.8 release</a>.</p>
<p>The <a href="http://wiki.darcs.net/Internals/OptimizeHTTP">basic idea</a> is to combine all the small files into a single <a href="http://en.wikipedia.org/wiki/tar%20%28file%20format%29" title="Wikipedia: tar (file format)">tarball</a> which can be downloaded at full speed, and avoid the latency of many roundtrips. The 2.8 release description claims that when <code>darcs optimize --http</code> was used on the Darcs repository, a full download went from 40 minutes to 3 minutes. This feature would not be enabled by default, but the gain for larger repositories would be large enough that I feel comfortable classifying it as a successful SoC.</p></li>
</ul>
<section id="predicting-2010-results" class="level4">
<h4>Predicting 2010 results</h4>
<p>Borrowing from our <a href="#lessons-learned">3 cardinal sins</a> of SoCs, and per my usual practice of testing my understanding by <a href="Prediction%20markets#calibration">making predictions</a>, what predictions do I make about the 2010 SoCs?</p>
<p>Most of the 7 SoCs are laudably focused on an existing application. You don‚Äôt need to justify a speedup of normal Darcs operations because there‚Äôs an installed base of Darcs users that will benefit; a new GC for GHC or a LLVM backend will benefit every Haskeller; better Cabal support for testing may go unused by many package authors who either have no tests or don‚Äôt want to bother - but a fair number will bother, and it will get maintained as part of Cabal, and similarly for the Hackage 2.0 project.</p>
<p>The Immix GC strikes me as a very challenging summer project; a GC is one of the most low-level pieces of a functional language and is intertwined with all sorts of code and considerations. It would not surprise me if that project wound up just getting a little closer to a working Immix GC but not producing a production-quality GC scheduled to come to compilers near you.</p>
<p>2 in particular concern me as potentially falling prey to sins #2 &amp; 3: the GObject-binder tool, and the high-performance HTML library:</p>
<ol type="1">
<li>Let‚Äôs assume that the HTML library does wind up as being faster than existing libraries, and as useful - that compromises don‚Äôt destroy its utility. Who will use it? It will almost surely have an API different enough from existing libraries that a conversion will be painful. There are roughly 42 users of the existing <a href="http://bifunctor.homelinux.net/~roel/cgi-bin/hackage-scripts/package/xhtml">xhtml</a>-generating library; will their authors wish to embrace a cutting-edge infant library? Is HTML generation even much of a bottleneck for them? (Speaking just for Gitit, Pandoc and its HTML generation are not usually a bottleneck.)</li>
<li>The case against the GObject project makes itself; GTK2Hs isn‚Äôt as widely used as one would expect, and this seems to be due to the difficulty of installation and its general complexity. So there are few users of existing libraries; would there be more users for those libraries no one has bothered to bind nor yet clamored for? (This project might fall afoul of sin #1, but I do not know how difficult the GObject data is to interpret.)</li>
</ol>
</section>
<section id="results" class="level4">
<h4>2010 results</h4>
<p>As of February 2010, I grade the 7 SoC for 2010 as follows: 4 successes, 1 unknown, and 2 unsuccessful. (One unknown, Hackage 2.0, will probably turn out to be a success if it ever goes live as the main Hackage site; as of 1 January 2013, it has not.) As one would hope, the results seem to be better than the results for 2008 or 2009.</p>
<p>Of my original predictions, I think I was right about the Immix GC &amp; GObject &amp; Darcs optimizations, semi-right about Hackage 2.0 &amp; Cabal testing support, somewhat wrong about the LLVM work, and completely wrong about the HTML/<code>blaze</code> SoC. (I am not sure why I was wrong about the last, and don‚Äôt judge myself harshly for not predicting the <a href="http://en.wikipedia.org/wiki/exogenous" title="Wikipedia: exogenous">exogenous</a> failure of the LLVM SoC.)</p>
</section>
</section>
<section id="section-5" class="level3">
<h3>2011</h3>
<p><a href="http://webcitation.org/6AMifPmeW">Haskell.org</a> got 7 projects again for 2011. They are:</p>
<ol type="1">
<li><p><a href="http://webcitation.org/6AMIWPTNl">‚ÄúImprove EclipseFP‚Äù</a>; Alejandro Serrano, mentored by Thomas Schilling</p>
<blockquote>
‚ÄúEclipse is one of the most popular IDEs in our days. EclipseFP is a project developing a plug-in for it that supports Haskell. Now, it has syntax highlighting, integration of GHCi and supports some properties of Cabal files. My idea is to extend the set of tools available, at least with:
<ul>
<li>Autocompletion and better links to documentation,</li>
<li>A way to run unit tests within Eclipse,</li>
<li>More support for editing Cabal files visually, including a browser of the available packages.&quot;</li>
</ul>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/pastorn/1">‚ÄúSimplified OpenGL bindings‚Äù</a>; Alexander G√∂ransson, mentored by Jason Dagit</p>
<blockquote>
<p>‚ÄúModernize and simplify OpenGL bindings for Haskell. Focus on safety, shaders and simplicity.‚Äù</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/anklesaria/1">‚ÄúInterpreter Support for the Cabal-Install Build Tool‚Äù</a>; anklesaria, by Duncan Coutts</p>
<blockquote>
<p>‚ÄúThis project aims to provide cabal-install with an ‚Äò<a href="http://en.wikipedia.org/wiki/Read-eval-print%20loop" title="Wikipedia: Read-eval-print loop">repl</a>‚Äô [<a href="https://github.com/haskell/cabal/issues/375" title="'cabal ghci' mode"><code>cabal ghci</code></a>?] command by adding to the Cabal API. This would allow package developers to use GHCi and Hugs from within packages requiring options and preprocessing from Cabal.‚Äù</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2011/jaspervdj/15001">‚ÄúConvert the <code>text</code> package to use UTF-8 internally‚Äù</a>; Jasper Van der Jeugt, by Edward Kmett (<a href="http://jaspervdj.be/files/text.html">detailed proposal</a>)</p>
<blockquote>
‚ÄúFor Haskell projects handling Unicode text, the <code>text</code> library offers both speed and simplicity-of-use. When it was written, benchmarks indicated that UTF-16 would be a good choice for the internal encoding in the library. However, these (rather artificial) benchmarks were did not take into account the time taken to
<ol type="1">
<li>decode the ‚ÄòReal World‚Äô data and</li>
<li>encode it to write it back.</li>
</ol>
I propose to
<ol type="1">
<li>benchmark and</li>
<li>convert the library to UTF-8 if it is a faster choice for ‚ÄòReal World‚Äô-applications.&quot;</li>
</ol>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2011/refold/31001">‚ÄúBuild multiple Cabal packages in parallel‚Äù</a>; Mikhail Glushenkov, by Johan Tibell</p>
<blockquote>
<p>‚ÄúCabal is a system for building and packaging Haskell libraries and programs. This project‚Äôs aim is to augment Cabal with support for building packages in parallel. Many developers have multi-core machines, but Cabal runs the build process in a single thread, only making use of one core. If the build process could be parallelized, build times could be cut by perhaps a factor of 2-8, depending on the number of cores and opportunity of parallel execution available.‚Äù</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/owst/1">‚ÄúDarcs Bridge‚Äù</a>; Owen Stephens, by Ganesh Sittampalam</p>
<blockquote>
<p>‚ÄúMy proposed project is to create a generic bridge that will enable easy interoperability and synchronisation between Darcs and other VCSs. The bridge will be designed to be generic, but the focus of this project will be Darcs2 ‚Üî Git and Darcs2 ‚Üî Darcs1. The bridge should allow loss-less, correct conversion to and from Darcs repositories, allowing users to use the tool that suits them and their project best, be that Darcs as it currently exists, or another tool.‚Äù</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/mornfall/1">‚ÄúDarcs: primitive patches version 3‚Äù</a> (<a href="https://web.archive.org/web/20121115215114/http://web.mornfall.net/blog/soc_reloaded%3A_darcs_primitive_patches_version_3.html">expanded blog description</a>); Petr Roƒçkai, by Eric Kow</p>
<blockquote>
<p>‚ÄúDarcs, a revision control system, uses so-called patches to represent changes to individual version-controlled files, where the ‚Äòprimitive‚Äô patches are the lowest level of this representation, capturing notions like ‚Äòhunks‚Äô (akin to what <code>diff(1)</code> produces), token replace and file and directory addition/removal. I propose to implement a different representation of these primitive patches, hoping to improve both performance and flexibility of darcs and to facilitate future development.‚Äù</p>
</blockquote></li>
</ol>
<section id="predicting-2011-results" class="level4">
<h4>Predicting 2011 results</h4>
<p>Which seem like good selections for SoC, and which seem less appropriate?</p>
<ol type="1">
<li>#1 is the <em>second</em> EclipseFP SoC, after a failed <a href="#section-3">2009</a> attempt; why should we think this one will do better?</li>
<li>With #2, the fear is that the result will not be used; there is an OpenGL binding already, after all, and I haven‚Äôt heard that there are very many people who want to do OpenGL graphics but were deterred by complexity or danger in it.</li>
<li><code>cabal ghci</code> is a long-requested Cabal feature, and it sounds as if all the groundwork and experimentation has been done. I have no problem with this one.</li>
<li>Benchmarking sounds quite doable, and <code>text</code> is increasingly used; but if I had to criticize it, I would criticize it for <em>under</em>ambition, for sounding too modest and not a good use of a slot.</li>
<li>#5 is a second crack at the parallel compilation problem (building on a <a href="#section-2">2008</a> SoC) and is troubling in the same way the EclipseFP SoC is.</li>
<li>There are multiple existing Darcs-&gt;other VCS programs, so the task is quite doable. An escape hatch would be very valuable for users (even if rarely used).</li>
<li><p>This one sounds tremendously speculative to me.</p>
<p>I respect Roƒçkai &amp; Kow, but in idling on <code>#darcs</code> and reading the occasional Darcs-related emails &amp; Reddit posts, I don‚Äôt know of any fully worked out design for said patch design, which makes it a challenging theoretical problem (patch theory being general &amp; powerful), a major implementation issue (since the existing primitive patches are naturally assumed all throughout the Darcs codebase), and difficult to verify that it will not backfire on users or legacy repositories. All in all, #7 sounds like the sort of project where the <em>best</em> case scenario is a repository branch/fork somewhere that few besides the author understands, which is better on some usecases and worse on others, but not actually in general use. That might be a success by the Darcs‚Äôs team‚Äôs lights, but not in the sense I have been using in this history.</p></li>
</ol>
<p>To summarize my feelings:</p>
<ul>
<li>#1 seems a bit doubtful but is more likely to succeed (because presumably most of the heavy lifting was done previously).</li>
<li>I predict #2 &amp; #7 will likely fail</li>
<li>I would be mildly surprised if <em>both</em> #3 &amp; #5 succeed - since they‚Äôre challenging and long-request Cabal features - but I expect at least one of them to succeed. Which, I am not sure.</li>
<li>I expect with confidence that #4 &amp; #6 will succeed.</li>
</ul>
</section>
<section id="results-1" class="level4">
<h4>2011 results</h4>
<ol type="1">
<li><p>‚ÄúImprove EclipseFP‚Äù; Alejandro Serrano, mentored by Thomas Schilling</p>
<strong>Successful</strong>. The <a href="http://serras-haskell-gsoc.blogspot.com/2011/08/end-of-summer.html">coding</a> was finished, to the author‚Äôs apparent satisfaction, and the work was included in the <a href="http://jpmoresmau.blogspot.com/2011/09/eclipsefp-210-released.html">2.1.0</a> release.</li>
<li><p>‚ÄúSimplified OpenGL bindings‚Äù; Alexander G√∂ransson, mentored by Jason Dagit</p>
<strong>Unsuccessful</strong>. Jason Dagit says Alexander never started for unknown personal reasons and so no work was ever done (no <code>OpenGLRawNice</code> library exists, a post-August 2011 Google search for ‚ÄúAlexander G√∂ransson OpenGL‚Äù is dry, nothing on Hackage seems to mention OpenGL 4.0 support, etc.).</li>
<li><p>‚ÄúInterpreter Support for the Cabal-Install Build Tool‚Äù; anklesaria, by Duncan Coutts</p>
<strong>Unsuccessful</strong>? anklesaria‚Äôs final post, <a href="http://lambdasandwich.blogspot.com/2011/08/ending-gsoc.html">‚ÄúEnding GSoC‚Äù</a>, says the work is done and provide a repository with patches by <code><a class="__cf_email__" href="http://www.cloudflare.com/email-protection" data-cfemail="65040816041c25040816041c4b0b0011">[email&nbsp;protected]</a><script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script></code> - but no patches by that email appear in the Cabal repository as of 10 December 2011; nor does there appear to be any discussion in the <a href="http://www.haskell.org/pipermail/cabal-devel/">cabal-dev ML</a> archives.</li>
<li><p>‚ÄúConvert the <code>text</code> package to use UTF-8 internally‚Äù; Jasper Van der Jeugt, by Edward Kmett</p>
<strong>Successful</strong>. Jasper published 2 posts on benchmarking the converted <code>text</code> against the original (<a href="http://jaspervdj.be/posts/2011-07-10-text-utf8-initial-results.html">‚ÄúText/UTF-8: Initial results‚Äù</a> &amp; <a href="http://jaspervdj.be/posts/2011-08-09-text-utf8-memory-usage.html">‚ÄúText/UTF-8: Studying memory usage‚Äù</a>); discussing the results in <a href="http://jaspervdj.be/posts/2011-08-19-text-utf8-the-aftermath.html">‚ÄúText/UTF-8: Aftermath‚Äù</a>, the upshot is that the conversion has a real but small advantage, potentially would cause interoperability problems, requires considerable testing, and won‚Äôt be merged in (the fork will be maintained against hopes of future GHC optimizations). Jaspers says the benefits wound up being a bigger &amp; cleaner test/benchmark suite, and some optimizations made for the UTF-8 version can be applied to the original. Since Edward Kmett <a href="http://jaspervdj.be/posts/2011-08-19-text-utf8-the-aftermath.html#comment-291037007">seems pleased</a>, I have marked it a success (although I remain dubious about whether it was a good SoC).</li>
<li><p>‚ÄúBuild multiple Cabal packages in parallel‚Äù; Mikhail Glushenkov, by Johan Tibell</p>
<strong>Successful</strong> Glushenkov reported in <a href="http://coldwa.st/e/blog/2011-08-22-GSoC-Final.html">‚ÄúParallelising cabal-install: Results‚Äù</a> that the patches were done and people could play with his repository; the comments report that it works and does offer speedups. However, as before, no patch by him appears in the mainline Cabal, and the last discussion was 6 November 2011 where <a href="https://github.com/haskell/cabal/issues/440#issuecomment-5892025">he provides a patch bundle</a>. No one commented; Mikhail says the patches may be ‚Äútoo invasive‚Äù and need reworking before merging.<a href="#fn8" class="footnoteRef" id="fnref8"><sup>8</sup></a> The code was ultimately released as part of <a href="http://web.archive.org/web/20130128085047/http://www.haskell.org/pipermail/haskell-cafe/2012-October/103746.html" title="[Haskell-cafe] ANN: cabal-install-1.16.0 (and Cabal-1.16.0.1)">cabal-install 1.16</a> and is reportedly working well.</li>
<li><p>‚ÄúDarcs Bridge‚Äù; Owen Stephens, by Ganesh Sittampalam</p>
<strong>Successful</strong>? Owen‚Äôs <a href="http://blog.owenstephens.co.uk/blog/tags/gsoc.html">blog posts</a> conclude with <a href="http://blog.owenstephens.co.uk/blog/2011/09/03/gsoc_darcs_bridge__results.html">‚ÄúGSoC: Darcs Bridge - Results‚Äù</a> summarizing the final features: he succeeded in most of the functionality. Brent Yorgey tells me that he has successfully used the tool to convert repositories to put onto Github, but says there are ‚Äúsome critical bugs‚Äù and use is still ‚Äúclunky‚Äù (eg. currently requiring Darcs HEAD; see the usage guide on the <a href="http://wiki.darcs.net/DarcsBridgeUsage">Darcs wiki</a>). Whether the bugs will be fixed and the package polished to the point where it will be widely used remains to be seen.</li>
<li><p>‚ÄúDarcs: primitive patches version 3‚Äù; Petr Roƒçkai, by Eric Kow</p>
<p><strong>Unsuccessful</strong>. Roƒçkai wrote two posts (<a href="https://web.archive.org/web/20121111075143/http://web.mornfall.net/blog/soc_reloaded%3A_progress_1.html">‚Äúsoc reloaded: progress 1‚Äù</a> &amp; <a href="https://web.archive.org/web/20121114134706/http://web.mornfall.net/blog/soc_reloaded%3A_outcomes.html">‚Äúsoc reloaded: Outcomes‚Äù</a>). This seems to have turned out as I predicted above:</p>
<blockquote>
<p>‚ÄúSince my last report, I have decided to turn somewhat more radical again. The original plan was to stick with the darcs codebase and do most (all) of the work within that, based primarily on writing tests for the testsuite and not exposing anything of the new functionality in a user-visible fashion. I changed my mind about this. The main reason was that the test environment, as it is, makes certain properties hard to express: a typical test-suite works with assertions (HUnit) and invariants (QuickCheck). In this environment, expressing ideas like ‚Äòthe displayed patches are aesthetically pleasing‚Äô or ‚Äòthe files in the repository have reasonable shape‚Äô is impractical at best. An alternative would have been to make myself a playground using the darcs library to expose the new code. But the fact is, our current codebase is entrenched in all kinds of legacy issues, like handling filenames and duplicated code. It makes the experimenter‚Äôs life harder than necessary, and it also involves rebuilding a whole lot of code that I never use, over and over. All in all, I made a somewhat bold decision to cut everything that lived under <code>Darcs.Patch</code> (plus a few dependencies, as few as possible) into a new library, which I named <code>patchlib</code>, in the best tradition of <code>cmdlib</code>, <code>pathlib</code> and <code>fslib</code>. At that point, I also removed custom file path handling from that portion of code, removed the use of a custom <code>Printer</code> (a pretty-printer implementation) module and a made few other incompatible changes.‚Äù</p>
</blockquote>
<p>The remaining work?</p>
<blockquote>
<p>‚ÄúThe obvious future work lies in the conflict handling. There are two main options in this regard: either re-engineer a patch-level, commute-based representation of conflicts (in the spirit of mergers and conflictors), as V3 ‚Äòcomposite‚Äô patches, or alternatively, use a non-patch based mechanism for tracking conflicts and resolutions. It‚Äôs still somewhat early to decide which is a better choice, and they come with different trade-offs. Nevertheless, the decision, and the implementation, constitute a major step towards darcs 3. The other major piece of work that remains is the repository format: in this area, I have done some research in both the previous and this year‚Äôs project, but there are no definitive answers, even less an implementation. I think we now have a number of good ideas on how to approach this. We do need to sort out a few issues though, and the decision on the conflict layer also influences the shape of the repository.</p>
<p>Each of these two open problems is probably about the size of an ambitious SoC project. On top of that, a lot of integration work needs to happen to actually make real use of the advancements. We shall see how much time and resources can be found for advancing this cause, but I am relatively optimistic: the primitive level has turned out fairly well, and to me it seems that shedding the shackles of legacy code sprawl can boost the project as a whole significantly forward.&quot;</p>
</blockquote>
<p>As I wrote before, the Darcs team will disagree with my assessment, but I believe marking it ‚ÄòUnsuccessful‚Äô is most consistent with how all previous SoCs have been judged<a href="#fn9" class="footnoteRef" id="fnref9"><sup>9</sup></a>.</p></li>
</ol>
<p>So of the 7 2011 SoCs:</p>
<ul>
<li>3 were unsuccessful (2 possibly not)</li>
<li>4 were successful (1 possibly not)</li>
</ul>
<p>My predictions were in general accurate; I remained hopeful that at least one of the Cabal SoCs would be merged in, which would give me a clean sweep and also render the final 2011 SoC record as good as the 2010 SoC record. (The parallel build was eventually merged in during 2012.)</p>
<p>It troubles me that the Cabal SoCs took so long to be merged in (if at all), in line with the historical trend for big Cabal SoC improvements to be partially done but never go into production. Duncan Coutts <a href="http://www.reddit.com/r/haskell/comments/n82ln/summer_of_code_2011_retrospective/c377srp#siteTable_t3_n82ln">says</a> they are in the queue, but if neither gets merged in before the 2012 SoC starts, the lesson seems to be that Cabal is too dangerous and uncertain to waste SoCs on.</p>
</section>
</section>
<section id="section-6" class="level3">
<h3>2012</h3>
<p>In <a href="http://www.google-melange.com/gsoc/org/google/gsoc2012/haskell">2012</a>, Haskell.org was bumped to 8 slots:</p>
<ol type="1">
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2012/bsrkaditya/28002">‚ÄúPatch Index Optimization for Darcs‚Äù</a> (<a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/bsrkaditya/14002">proposal</a>); BSRK Aditya, mentored by Eric Kow</p>
<blockquote>
<p>The goal of this project is to speed up the darcs changes and darcs annotate commands using a cache called ‚Äú<a href="http://wiki.darcs.net/Ideas/PatchIndex">patch index</a>‚Äù. The slow speed of these commands is one of the major user grievance in darcs. Patch-Index data structures can quickly identify the patches that modified a given file.</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2012/dmcgill/18001">‚ÄúScoutess - a build manager for cabal projects‚Äù</a>; DMcGill, mentored by Alp Mestanogullari</p>
<blockquote>
<p>Scoutess is a tool for package maintainers and automates a lot of the hassle of dealing with dependencies and multiple versions of libraries. It will create a sandboxed environment simulating a fresh Haskell Platform install, attempt to build your project using Cabal and highlight any problems while also tracking changes or updates to dependencies located in remote repositories so these can be tested against as well.</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2012/lorehead/36001">‚ÄúImplement Concurrent Hash-table / Hash map‚Äù</a> (<a href="https://web.archive.org/web/20130102200035/http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/lorehead/1">proposal</a>); Loren Davis, mentored by Ryan Newton</p>
<blockquote>
<p>Concurrent data structures for Haskell are currently a work in progress, and are necessary for parallel and high-performance computing. A few data structures, such as wait-free lists, already have Haskell implementations. One that does not yet is a thread-safe hash table. I propose to implement one as a library available under the new BSD license.</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2012/mdittmer/18001">‚ÄúAccelerating Haskell Application Development‚Äù</a>; mdittmer, mentored by Michael Snoyman</p>
<blockquote>
<p>A project for improving performance of ‚Äúlively developer mode‚Äù environments that require fast rebuild-and-redeploy routines.</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2012/refold/64002">‚ÄúSandboxed builds and isolated environments for Cabal‚Äù</a>; Mikhail Glushenkov, mentored by Johan Tibell</p>
<blockquote>
<p>The aim of this project is to integrate support for sandboxed builds into Cabal, a system for building Haskell projects. There are several different third-party implementations of this functionality already available, but it would be beneficial (from the points of ease of use and focusing the community efforts) to have a unified and polished solution integrated into Cabal itself. Additionally, this project is a step in the direction of solving the infamous ‚Äúdependency hell‚Äù problem of Cabal.</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2012/phischu/19001">‚ÄúEnable GHC to use multiple instances of a package for compilation‚Äù</a> (<a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/phischu/1">proposal</a>); Philipp Schuster, mentored by Andres L√∂h</p>
<blockquote>
<p>People are running into dependency hell when installing Haskell packages. I want to help move in the direction of solving it.</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2012/shapr/18001">‚Äúmultiuser browser-based interactive ghci, hpaste.org meets tryhaskell.org, for improved teaching of those new to Haskell.‚Äù</a> (<a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2012/shapr/1">proposal</a>); Shae Erisson, mentored by Heinrich Apfelmus</p>
<blockquote>
<p>Many new users learn Haskell from the <code>#haskell</code> IRC channel. <code>lambdabot</code>‚Äôs <code>mueval</code> is good for interactive teaching, but only allows short code snippets. <code>hpaste</code> allows large snippets to be shared, but not into an interactive <code>ghci</code>. Chris Done‚Äôs <a href="http://www.tryhaskell.org">Try Haskell!</a> allows larger snippets to be loaded, but is not explicitly multi-user. If Try Haskell! allowed multiple users to view the same interpreter state, and allowed users to paste in new code, teaching and debugging would be much easier for people new to Haskell.</p>
</blockquote></li>
<li><p><a href="http://www.google-melange.com/gsoc/project/google/gsoc2012/shayannajd/18001">‚ÄúHaskell-Type-Exts‚Äù</a>; Shayan Najd, mentored by Niklas Broberg</p>
<blockquote>
<p>Following the proposal by Niklas Broberg [0], I am highly eager to expand the existing typechecker [1] for Haskell-Src-Exts [2] to support most of the features available in Haskell 2010 with the major extensions like GADTs, RankNTypes and Type-Functions. It is done by following the guidelines of ‚ÄúTyping Haskell in Haskell‚Äù [3] as the basis; adding support for RankNTypes [5]; and then introducing GADTs and Type-Functions by local assumptions [4]. [0] http://hackage.haskell.org/trac/summer-of-code/ticket/1620 [1] http://hackage.haskell.org/package/haskell-src-exts [2] http://hackage.haskell.org/package/haskell-type-exts [3] M. P. Jones. Typing Haskell in Haskell [4] D. Vytiniotis, S. Peyton Jones, T. Schrijvers, M. Sulzmann. OutsideIn(X) - Modular type inference with local assumptions</p>
</blockquote></li>
</ol>
<section id="predictions" class="level4">
<h4>2012 predictions</h4>
<p>Instead of qualitative predictions this year, I will <a href="Prediction%20markets">record probabilities</a> on <a href="http://predictionbook.com/">PredictionBook.com</a>; all predictions assume delivery, but some need different judgment criteria.</p>
<ol type="1">
<li><p><a href="http://predictionbook.com/predictions/6682">80%</a></p>
<p>According to the proposal, the core patch index code has already been implemented &amp; benchmarked by the student, who has worked on Darcs before (<a href="http://blog.darcs.net/2012/04/darcs-hacking-sprint-7-report.html">flying 9 hours into England</a> for a hacking meetup). The rest of the work sounds reasonable, and the project is not overreaching at all. I fully expect this to work out (even if <code>darcs annotate</code> is not a command I use every month, much less day). The main risk seems to be life events, but SoCs failing due to personal issues are relatively rare and affect &lt;20% of past projects.</p>
This SoC will be judged successful if it is in Darcs HEAD, or at least scheduled for application, by my usual deadline: 1 January 2013.</li>
<li><p><a href="http://predictionbook.com/predictions/6683">40%</a></p>
<p>No proposal was publicly available. I am not familiar with DMcGill, and Googling for Haskell material related to ‚ÄúMcGill‚Äù, I don‚Äôt see any past work. It sounds relatively ambitious in the short abstract - replicating <code>cabal-dev</code> and adding in considerable other functionality? I‚Äôve previously noticed that Cabal-related SoCs seem to be unusually blighted. Adding that all up, I am left with dubious feelings.</p>
Judgment: tools are always hard to judge. This one will be the usual subjective ‚Äúis it being used by a good fraction of its potential userbase?‚Äù criteria.</li>
<li><p><a href="http://predictionbook.com/predictions/6684">60%</a></p>
<p>The student has completed a SoC before, and is a graduate student in an AI/machine learning program; both of which bode well for him completing another SoC. I‚Äôm not actually sure how many Haskell applications need a concurrent hashtable - the existing <a href="http://hackage.haskell.org/package/hashtables">hashtables</a> package has <a href="http://packdeps.haskellers.com/reverse/hashtables">3 users</a>, and <code>base</code>‚Äôs ‚ÄúData.HashTable‚Äù module is used by perhaps 10-20 code repositories (judging from grepping through my local archive).</p>
It is unreasonable to expect it to supersede <code>base</code>, which has had something like a decade to gain users, but equaling the obscure <code>hashtables</code> package seems reasonable. Judgment will be whether there are &gt;=3 reverse dependencies.</li>
<li><p><a href="http://predictionbook.com/predictions/6685">40%</a></p>
<p>As stated, I have no idea what this SoC is about. I don‚Äôt know the student, although Snoyman seems to write a great deal of code and successful code at that, which is a good sign - if he agreed to mentor it, surely the idea can‚Äôt be <em>that</em> bad?</p>
Since I don‚Äôt know what it is, I cannot specify a judgment criteria in advance.</li>
<li><p><a href="http://predictionbook.com/predictions/6686">75%</a></p>
<p>Both student &amp; mentor are experienced Haskell hackers, and have worked with the Cabal codebase. As the abstract says, sandboxed builds are not a novel feature. <code>cabal-dev</code> is popular among developers, so it stands to reason that a polished version inside Cabal itself would be even more popular. I see little reason this could not be successful, aside from the general challenge of working with Cabal.</p>
Judgment; sandboxed build functionality in Cabal HEAD or scheduled to be applied soon.</li>
<li><p><a href="http://predictionbook.com/predictions/6687">65%</a></p>
Judgment similar to above: patches scheduled for GHC HEAD or already applied.</li>
<li><p><a href="http://predictionbook.com/predictions/6688">80%</a></p>
<p>Shae is an experienced Haskeller &amp; professional developer (to the extent I was very surprised to hear that he had applied). The proposal seems like a very reasonable addition, and I do not think it is too difficult to modify the <code>mueval</code> codebase<a href="#fn10" class="footnoteRef" id="fnref10"><sup>10</sup></a>.</p>
Judgment: whether multi-user sessions have gone live.</li>
<li><p><a href="http://predictionbook.com/predictions/6689">55%</a></p>
<p>Here again I regret the absence of a public proposal. I‚Äôm not sure how useful this one is, how hard it is, or how much progress the prototype library <a href="http://hackage.haskell.org/package/haskell-type-exts">on Hackage</a> represents, nor do I know any comparable libraries I could check for a reverse dependency count. I don‚Äôt know the student, but Broberg is a capable Haskeller.</p>
<p>Judgment criteria: punting to checking for &gt;=3 reverse-dependencies/users.</p></li>
</ol>
</section>
<section id="results-2" class="level4">
<h4>2012 results</h4>
<p>As of 1 January 2013:</p>
<ol type="1">
<li><p>Darcs patch index</p>
Merged into Darcs HEAD without apparent issue (<a href="http://darcs.net/Ideas/PatchIndex">documentation</a>). Project was <strong>successful</strong>.</li>
<li><p>scoutess: As of <a href="http://projectscoutess.blogspot.com/2012/08/mission-report.html">August 15</a>, McGillicuddy was reporting that scoutess was complete (<a href="http://hub.darcs.net/alp/scoutess/changes">repository</a>). In Haskell-cafe, there is one off-hand mention of scoutess by someone using a different continuous integration program; there are a few discussions on Reddit of progress but the most <a href="http://www.reddit.com/r/haskell/comments/12lyr3/overveiw_of_current_scoutess_architecture_and/">recent post</a> is a theoretical discussion of scoutess‚Äôs architecture. There are no tools or libraries depending on it in Hackage because scoutess has never been uploaded to Hackage. Indeed, as far as I can tell, no one is actually using it, and stepcut agreed with this assessment when I asked him.</p>
I specified in April 2012 that my judgment criterion would be ‚Äúis scoutess being used by a good fraction of its potential userbase?‚Äù; in this light, scoutess was <strong>unsuccessful</strong>.</li>
<li><p>concurrent hashtable/hashmap</p>
Edward Kmett tells me that Loren ran into personal issues and was removed from SoC by the midpoint with no delivered library. <strong>Unsuccessful</strong>.</li>
<li><p>‚ÄúAccelerating Haskell Application Development‚Äù</p>
Edward Kmett tells me that the student left for a job around the midpoint and was removed from SoC at the last milestone. <strong>Unsuccessful</strong>. <a href="http://www.reddit.com/r/haskell/comments/15sjur/summer_of_code_2012_retrospective/c7pheka">eegreg</a> argues that while incomplete, the first goal of the SoC (a file-watching library) has since been fulfilled and the library been put to use by the <a href="http://www.yesodweb.com/">Yesod ecosystem of Web libraries &amp; applications</a>.</li>
<li><p>Sandboxed builds</p>
Completed and in Cabal HEAD; per my criteria, this is <strong>successful</strong>.</li>
<li><p>Multiple packages support in GHC</p>
The latest information I can find is a <a href="http://hackage.haskell.org/trac/ghc/wiki/Commentary/GSoCMultipleInstances">GHC documentation page</a> which summarizes the material as: ‚ÄúIt is possible to install multiple instances of the same package version with my forks of cabal and ghc. Quite a few problems remain.‚Äù A <a href="http://www.haskell.org/wikiupload/5/50/Hiw2012-philipp-schuster.pdf" title="'Making cabal-install non-destructive'; Philipp Schuster, Andres Loh September 12, 2012">set of slides</a> says ‚ÄúQuite a few problems remain therefore nothing is merged yet.‚Äù The code is not in HEAD for either Cabal or GHC, and given the many problems, may never be. <strong>Unsuccessful</strong>.</li>
<li><p>Better tryhaskell.org</p>
Erisson <a href="http://ghclive.wordpress.com/2012/08/20/ghclive-project-escapes/">finished in August</a> with a <a href="http://hackage.haskell.org/package/ghclive">Hackage upload</a> and some <a href="http://www.scannedinavian.com/~shae/ghclive.pdf" title="Web based teaching through real-time collaboration with ghcLiVE">nice slides</a>. Unfortunately, there is no live server where one can actually <em>use</em> ghcLiVE; someone suggested that Erisson might‚Äôve given up on the sandboxing aspects which would have made it usable on the public Internet (per his original proposal). One wonders how many people will ever use it, given how much Haskell instruction is done remotely, but maybe it would be useful in offline university classes. In any case, my criterion was clear: ‚Äúwhether multi-user sessions have gone live‚Äù; and so despite my high hopes, I must mark this <strong>unsuccessful</strong>. (<a href="http://www.reddit.com/r/haskell/comments/15sjur/summer_of_code_2012_retrospective/c7pejlq">Edward Kmett</a> disagrees with this assessment; Erisson sort of agrees and disagrees<a href="#fn11" class="footnoteRef" id="fnref11"><sup>11</sup></a>.)</li>
<li><p>Haskell type-checker library</p>
<p>This one is a little confusing. The Hackage library remains untouched since April 2012, although there is a <a href="http://cleantypecheck.wordpress.com/2012/09/05/hte-v-haskell-2010-at-github/">largely complete library</a> (main missing feature is records support, which is important but not a huge gap) available on <a href="https://github.com/shayan-najd/HTE">Github</a>. Another <a href="http://cleantypecheck.wordpress.com/2012/09/17/hiw-2012-haskell-suite/">blog post implies</a> that it is but a small part of a grander research scheme entirely, and that my reverse dependencies judgment criteria is simply off-base entirely although it suggests the SoC was unsuccessful. (The alternative, looking at whether it is pushed to the HEAD of <code>haskell-type-exts</code>, would also suggest unsuccessful.) I am not sure whether this should be considered successful or unsuccessful.</p></li>
</ol>
<p>To summarize:</p>
<ol type="1">
<li>unclear: 1</li>
<li>successful: 2</li>
<li>unsuccessful: 5</li>
</ol>
<p>2 of the 5 unsuccessful projects were due to problems on the student‚Äôs end (hashtable, ‚Äúaccelerating‚Äù); 2 were too ambitious in general (scoutess, multiple-packages); and the last 1 was not too ambitious but in my opinion was left somewhat incomplete (ghcLiVE).</p>
<p>How successful were my predictions? Employing a proper <a href="http://en.wikipedia.org/wiki/scoring%20rule" title="Wikipedia: scoring rule">scoring rule</a> (log scoring; for additional discussion of scoring rules, see <a href="2012%20election%20predictions" title="Go to wiki page: 2012%20election%20predictions">2012 election predictions</a>) and comparing against a 50-50 random guesser where &gt;0 means I outperformed the random guesser<a href="#fn12" class="footnoteRef" id="fnref12"><sup>12</sup></a>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">logBinaryScore <span class="fu">=</span> sum <span class="fu">.</span> map (\(p,result) <span class="ot">-&gt;</span> <span class="kw">if</span> result <span class="kw">then</span> <span class="dv">1</span> <span class="fu">+</span> logBase <span class="dv">2</span> p <span class="kw">else</span> <span class="dv">1</span> <span class="fu">+</span> logBase <span class="dv">2</span> (<span class="dv">1</span><span class="fu">-</span>p))
logBinaryScore [(<span class="dv">0</span><span class="fu">.</span><span class="dv">80</span>, <span class="dt">True</span>), (<span class="dv">0</span><span class="fu">.</span><span class="dv">40</span>, <span class="dt">False</span>), (<span class="dv">0</span><span class="fu">.</span><span class="dv">60</span>, <span class="dt">False</span>), (<span class="dv">0</span><span class="fu">.</span><span class="dv">40</span>, <span class="dt">False</span>),
                (<span class="dv">0</span><span class="fu">.</span><span class="dv">75</span>, <span class="dt">True</span>), (<span class="dv">0</span><span class="fu">.</span><span class="dv">65</span>, <span class="dt">False</span>), (<span class="dv">0</span><span class="fu">.</span><span class="dv">80</span>, <span class="dt">False</span>)]
<span class="fu">~&gt;</span>
<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">3693261451031018</span></code></pre>
<p>I performed worse than random, in part because 2012 was such a bad year. In particular, I placed great weight on Erisson succeeding (without that prediction, I would score 0.95). In retrospect, I am also disappointed that I assigned the GHC project a high as 65% when I knew GHC projects are as dangerous as Cabal projects and the multiple packages work was a lot of low-level problems with minimal foregoing work.</p>
</section>
</section>
<section id="section-7" class="level3">
<h3>2013</h3>
<p>For <a href="https://www.google-melange.com/gsoc/org/google/gsoc2013/haskell">2013</a>, Haskell.org/Darcs picked up a full 11 slots:</p>
<ol type="1">
<li><p><a href="http://darcs.net/GSoC/2013-Darcsden">‚ÄúEnhancing Darcsden‚Äù</a>; BSRK Aditya, mentored by Ganesh Sittampalam</p>
<blockquote>
<p>The goal of this project is to increase the functionality of Darcsden. Darcsden is an open source repository hosting platform for darcs, written in Haskell. The main features are authentication from Github/OpenID, Password Recovery, Editing repository files online, and Comparison between a repository and its forks.</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/project/google/gsoc2013/adamgundry/23001">‚ÄúOverloaded record fields for GHC‚Äù</a>; Adam Gundry, mentored by Simon Peyton Jones</p>
<blockquote>
<p>Haskell‚Äôs record system lacks support for overloaded field names. This leads to unnecessarily cluttered code and inhibits code reuse. I propose to implement support for overloaded field names and polymorphic record projection as a GHC extension, with the aim to ultimately add them to the language standard in a future revision. This relatively straightforward change would remove a significant source of frustration for Haskell programmers‚Ä¶.By September 23 I will have the final implementation on a GHC branch ready to merge into HEAD‚Ä¶The biggest risk to the project is that it may prove controversial, as has been seen by arguments over previous attempts to solve this problem. However, I am optimistic that sufficient consensus can be reached, as much of the disagreement is about syntax or implementation details rather than the user-visible aspects of the extension</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/project/google/gsoc2013/difrumin/18001">‚Äúinteractive-diagrams and a paste site with the ability for dynamic rendering of diagrams‚Äù</a>; Dan Frumin, mentored by Luite Stegeman</p>
<blockquote>
<p>I want to build an active-diagrams library for compiling diagrams code into active HTML + JS widgets. The diagrams are active in the sense that user can interact with them: for example, a result of type <code>(Bool -&gt; Diagram)</code> should be compiled to a widget that renders a diagram depending on the state of the checkbox. In addition, a pastebin site should be built, that can be used as an interactive scratchpad, where diagrams code can be automatically compiled and the graphical output shown along. This is useful for sharing graphical experiments, teaching beginners and so on. The rendered diagram, together with its interactive capabilities, should be easily embedded in third-party blogs, websites.</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/project/google/gsoc2013/fuuzetsu/16001">‚ÄúHaddock extension for Pandoc compatibility‚Äù</a>; F≈´zetsu [Mateusz Kowalczyk?], mentored by Simon Hengel (<a href="http://www.haskell.org/pipermail/haskell-cafe/2013-April/107389.html">further discussion</a>)</p>
<blockquote>
<p>Project aiming to extend Haddock to a point where writing reader and writer modules for Pandoc is possible. The general goal is to allow for documentation writing in different formats, including the ever popular Markdown.</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/jbracker/1">‚ÄúPort Charts to use Diagrams‚Äù</a>; jbracker, mentored by Tim Docker</p>
<blockquote>
<p>Right now the Charts library uses Cairo as backend. Cairo can be difficult to build on platforms other then Linux. Goal of the project would be to port the Charts library to be independent of the used backend. Like that it can support to use Diagrams as backend. Diagrams supports a variety of backends (SVG, Postscript, Cairo (Optional!), Tikz, Gtk), some of which are written platform independent. As Diagrams is easy to install on every platform supported by Haskell, so will the Charts Library built upon Diagrams. This will make it easy for Haskellers to add charting capabilities to their own applications and libraries in a manner portable across all platforms without any pain.</p>
</blockquote></li>
<li><p><a href="http://darcs.net/GSoC/2013-BetterRecord">‚ÄúBetter <code>record</code> command for darcs‚Äù</a>; Jos√© Neder, mentored by Guillaume Hoffmann</p>
<blockquote>
<p>The objective of this project is to improve the <code>darcs record</code> command implementing several options‚Ä¶Diffing two given files can produce various correct outputs, depending on the algorithm used. The standard diff algorithm (used in darcs and many other places) has been criticized to sometimes produce counterintuitive diffs. We would like to try out the <a href="http://www.owenstephens.co.uk/programming/2010/12/24/scala-patience-diff.html">‚Äúpatience diff‚Äù</a> algorithm (<a href="http://bugs.darcs.net/issue346">Issue 346</a>), which seems to produce more interesting chunks when used on source code. One downside of patience diff is that it may be slower than classic diff, so performance will have to be evaluated.</p>
<p>Moreover, just as the existing flag <code>--look-for-adds</code> proposes adding unversioned files to the new patch, we could use a <code>--look-for-moves</code> flag, which would be handful when one wants to record a file move after having done the move, ie, without using <code>darcs move</code> (<a href="http://bugs.darcs.net/issue642">Issue 642</a>). Another cool flag would be <code>--look-for-replaces</code>, which would detect token renaming when one forgets about using <code>darcs replace</code> (<a href="http://bugs.darcs.net/issue2209">Issue 2209</a>).</p>
<p>If time allows, a <code>--provide-primitive-patches</code> would be useful for darcs to be called by another program that provides the changes to record. For instance, a web interface providing a simple on-line code edit feature a la GitHub.</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/project/google/gsoc2013/marcospividori/45001">‚ÄúCommunicating with mobile devices‚Äù</a>; Marcos Pividori, mentored by Michael Snoyman (<a href="http://www.haskell.org/pipermail/haskell-cafe/2013-May/108038.html" title="[Haskell-cafe] Google Summer of Code Proposal - Communicating with mobile devices">further discussion</a>)</p>
<blockquote>
<p>The aim of this project is to develop a server-side library in Haskell for sending push notifications to devices running different OS, such as Android, iOS, Windows Phone, BlackBerry, and so on. And, once we have this libraries, investigate the possibility of maintaining a ‚Äúback and forth‚Äù communication between a server and mobile devices and develop a library to handle this.</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/project/google/gsoc2013/mr_/23001">‚ÄúImprove the feedback of the cabal-install dependency solver‚Äù</a>; Martin, mentored by Andres L√∂h</p>
<blockquote>
<p>The dependency solver can be a mysterious piece of the installation process. I want to give the user the possibility to see what is happening and also give them a better chance to understand what happened if something does not just work. Further, I would like to enable them to use that information to fix the installation in some cases.</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/refold/71002">‚ÄúParallelise <code>cabal build</code>‚Äù</a>; Mikhail Glushenkov, mentored by Johan Tibell</p>
<blockquote>
<p>This project aims to add support for module-level parallel builds to Cabal, a system for building and packaging Haskell libraries and programs. I suggest a novel solution for this problem in the context of GHC/Cabal that, unlike existing approaches, will make a more effective use of multi-core CPUs.</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/parcs/1">‚ÄúExtending GHC to support building modules in parallel‚Äù</a>; Patrick Palka, mentored by Thomas Schilling</p>
<blockquote>
<p>The aim of this project is to implement native support for building modules in parallel in GHC. This entails making the compilation pipeline thread-safe, and writing a parallel compilation driver next to the existing sequential driver. Focus will be placed on correctness and deterministic output, with speed a latent concern. Nothing in the user‚Äôs end should change other than there being a new <code>-j</code> flag that specifies the number of modules to build in parallel. The cabal-install project should be augmented with the ability to use this new <code>-j</code> flag to speed up builds, alongside its existing package-level parallelization.</p>
</blockquote></li>
<li><p><a href="https://www.google-melange.com/gsoc/project/google/gsoc2013/ofan/44001">‚ÄúHaskell Qt Binding Generator‚Äù</a>; Zhengliang Feng, mentored by Carter Schonwald &amp; Ian-Woo Kim</p>
<blockquote>
<p>This project aims to provide a generation tool that creating Qt bindings automatically for Haskell and make generation as much automation as possible. It parses Qt header files and generates corresponding Qt-style Haskell interfaces (type classes, data types).</p>
</blockquote>
<p>The mentor <a href="http://www.haskell.org/pipermail/haskell-cafe/2013-August/109548.html" title="[Haskell-cafe] [ANNOUNCE] fficxx : haskell-C++ FFI binding generator">clarified in August 2013</a>:</p>
<blockquote>
<p>Speaking as the principle mentor on the relevant GSOC project (Ian is also co-mentoring, so he can correct me if I‚Äôm wrong anywhere): The QT binding project is a <em>subproject</em> of the <em>GSoC project</em> whose principal focus for the summer is making a swig + fficxx based C++ FFI wrapper for haskell. The GSoC core project is moving apace, and will likely be usable by the close of the summer. Realistically, the QT bit is gold plating / a nontrivial demo use case. Currently its unclear if we‚Äôll have time to get the QT ball rolling, but a lot of the support tooling for that subproject should be done by the close of the summer!</p>
</blockquote></li>
</ol>
<section id="predictions-1" class="level4">
<h4>2013 predictions</h4>
<p>Compiling the 2006-2012 results, I get an overall base-rate of 47% successful, 40% unsuccessful, &amp; 13% unknown projects. With this base rate in mind, I predicted thusly:</p>
<ol type="1">
<li>Darcsden: <a href="http://predictionbook.com/predictions/20625">65%</a></li>
<li>Overloaded records: <a href="http://predictionbook.com/predictions/20626">40%</a></li>
<li>interactive-diagrams: <a href="http://predictionbook.com/predictions/20627">35%</a></li>
<li>Pandoc Haddock: <a href="http://predictionbook.com/predictions/20628">55%</a></li>
<li>Charts on Diagrams: <a href="http://predictionbook.com/predictions/20629">75%</a></li>
<li>`darcs record: <a href="http://predictionbook.com/predictions/20630">65%</a></li>
<li>mobile push: <a href="http://predictionbook.com/predictions/20631">25%</a></li>
<li>dependency-solver error-messages: <a href="http://predictionbook.com/predictions/20632">40%</a></li>
<li>Parallel build: <a href="http://predictionbook.com/predictions/20633">33%</a></li>
<li>Parallel modules: <a href="http://predictionbook.com/predictions/20634">33%</a></li>
<li>Qt binding generator: <a href="http://predictionbook.com/predictions/20635">40%</a></li>
</ol>
</section>
<section id="results-3" class="level4">
<h4>2013 results</h4>
<p>As of 8 January 2014:</p>
<ol type="1">
<li>Darcsden: checking the <a href="http://hub.darcs.net/simon/darcsden">Darcsden HEAD</a> repository, I see patches by BSRK Aditya adding what looks like GitHub support, a repository comparison feature, resetting passwords, and file editing. I haven‚Äôt actually verified that the additions are usable, but I have no reason to be that suspicious and so I will mark this SoC <strong>successful</strong>.</li>
<li><p>Overloaded record fields for GHC: Gundry finished work on the extension apparently successfully, and submitted his patches in September 2013. The <code>ghc-devs</code> mailing list discussion petered out, though, and <a href="http://www.well-typed.com/blog/84">in November 2013</a> Gundry explained:</p>
<blockquote>
<p>Unfortunately, the extension will not be ready for GHC 7.8, to allow time for the design to settle and the codebase changes to mature. However, it should land in HEAD soon after the 7.8 release is cut, so the adventurous are encouraged to build GHC and try it out. Feedback from users will let us polish the design before it is finally released in 7.10‚Ä¶ Keep an eye out for the extension to land in GHC HEAD later this year, and please try it out and give your feedback!</p>
</blockquote>
However, GHC 7.8 apparently took longer to release than expected and so Gundry‚Äôs work still has not been merged by 2014. Duncan Coutts and Gundry both seem optimistic that it would get added <em>eventually</em>, but nevertheless, 4 months after being finished, it had not been merged into GHC HEAD and fails my original judgment criterion, rendering it <strong>unsuccessful?</strong> This is definitely a SoC to revisit in the future to check out whether it ultimately got merged in or was abandoned to bitrot.</li>
<li>Interactive diagrams: Frumin‚Äôs <a href="https://parenz.wordpress.com/2013/09/25/gsoc-2013-an-afterword/">summation post</a> links to his <a href="http://paste.hskll.org/">working pastebin</a>. I am surprised, but it‚Äôs definitely there. So, marking this one <strong>successful</strong>.</li>
<li>Haddock extension for Pandoc compatibility: this SoC was turned into a <a href="https://gist.github.com/Fuuzetsu/81253ba7d0c51ac88052">rather different project</a>; it still involved Haddock, but not Pandoc. Unclear what happened - most of the submitted patches do not seem to have been applied to the Github repository for Haddock. Fuuzetsu tells me in an email on 8 January 2014 that the GHC integration had trouble and this delayed incorporation, but that he was actively working on getting the patches in &amp; was optimistic that they would be ‚Äúvery soon‚Äù and ‚Äúat worst before the end of the week‚Äù. So this is a very similar situation as Gundry‚Äôs overloaded record field patches: the work has not been merged into GHC HEAD (technically failing my criterion of ‚Äúmerged by 2014‚Äù), but the student is confident that it will be soon and apparently it was merged 12 January 2014 (so I will probably revise the judgment in the future). <strong>Unsuccessful?</strong></li>
<li>Port Diagrams to use Charts: the latest version recommends using the Charts backend, and Bracker <a href="https://groups.google.com/d/msg/diagrams-discuss/p1vDRo6ldWw/WNZ5GWvTPVwJ" title="[GSoC 2013] Porting Charts to Diagrams - Final Report">declared on <code>diagrams-discuss</code></a> the project ‚Äúa full success‚Äù. Marking <strong>successful</strong>.</li>
<li>‚ÄúBetter <code>record</code> command for darcs‚Äù: a check of the Darcs HEAD &amp; issue 346 indicates that patience diff made it in, and likewise <code>--look-for-moves</code>, so per my criteria of 2 out of 3, marking <strong>successful</strong>.</li>
<li>‚ÄúCommunicating with mobile devices‚Äù: I specified in my original prediction the usual default criterion of looking for ‚â•<em>n</em> reverse dependencies, in this case, ‚â•3. The author‚Äôs <a href="http://gsoc2013cwithmobiledevices.blogspot.com.ar/">blog</a> &amp; <a href="https://github.com/MarcosPividori/GSoC-Communicating-with-mobile-devices">Github repository</a> indicate he released a trio of packages; checking the reverse dependencies for <a href="http://packdeps.haskellers.com/reverse/push-notify"><code>push-notify</code></a>/<a href="http://packdeps.haskellers.com/reverse/push-notify-ccs"><code>push-notify-ccs</code></a>/, I see 0 reverse dependencies not to each other (and <a href="http://hackage.haskell.org/package/push-notify">Hackage indicates 15 total downloads of <code>push-notify</code></a> as of 13 January 2014, suggesting that there‚Äôs not a lot of demand we‚Äôre missing by looking at reverse dependencies). Marking <strong>unsuccessful</strong>.</li>
<li>‚ÄúImprove the feedback of the cabal-install dependency solver‚Äù: Ruderer‚Äôs code appears to have not been merged into Cabal HEAD as of 13 January 2014 and there‚Äôs nothing on his blog or the <code>cabal-dev</code> mailing list indicating any work towards getting the code merged in. <strong>Unsuccessful</strong>.</li>
<li>‚ÄúParallelise <code>cabal build</code>‚Äù: judging from the <a href="https://github.com/haskell/cabal/issues/976">bug report discussion</a>, merging has gotten bogged down in discussion over <a href="https://github.com/haskell/cabal/pull/1572">pull #1572</a>/<a href="https://github.com/haskell/cabal/issues/1529">bug #1529</a>. Hopefully the work will get merged in, but it has not yet, so this is another <strong>unsuccessful?</strong></li>
<li>‚ÄúExtending GHC to support building modules in parallel‚Äù: <a href="https://ghc.haskell.org/trac/ghc/ticket/910">bug #910</a> was closed after the patches were merged in. Looks like parallelizing GHC was <em>finally</em> done and I can mark this <strong>successful</strong>!</li>
<li><p>‚ÄúHaskell Qt Binding Generator‚Äù: a little confusing, but Feng‚Äôs final submission is a tarball providing some source code and a Cabal file naming it to be <code>fficxx-swig</code>; which is not on Hackage at all nor does it have any reverse dependencies. I thought perhaps it was intended to be merged into <code>fficxx</code> (written by Feng‚Äôs co-mentor Kim), but a check of the <a href="https://github.com/wavewave/fficxx/graphs/contributors"><code>fficxx</code> contributors</a> shows only Ian-Woo Kim as author. A google of ‚Äúfficxx-swig‚Äù turned up something more useful, a <a href="https://github.com/ofan/hqt"><code>hqt</code> repository</a> by <a href="https://github.com/ofan">ofan/Ryan Feng</a>, which is described as ‚Äú<code>hqt</code> is a set of tools that generate bindings from Qt library to Haskell automatically. The goal of this project is to make a usable and stable tool that can generate bindings for general C++ libraries.‚Äù Perhaps <em>this</em> is what I should be looking at? But <code>hqt</code> turns out to also not be on Hackage, not have any reverse dependencies, and not even be mentioned in a google of <code>hqt site:haskell.org</code>. (A google of <code>haskell &quot;hqt&quot;</code> did turn up an interesting result, though: <a href="https://github.com/oqc/hqt">‚Äúhqt - Haskell Quran Toolkit ‚Äì A Haskell library for dealing with Quran texts.‚Äù</a> How about that?) Given the complete absence of evidence that anyone is using <code>hqt</code> in any way, I‚Äôm going to have to mark this one <strong>unsuccessful</strong>.</p></li>
</ol>
<p>The quick overview is 5 successful, 6 unsuccessful, so very similar to historical base-rates. Things get a little rosier when I note that 3 of the unsuccessful and 0 of the successful had to be given question marks because the project seemed to succeed but it was still uncertain whether the work would be integrated with HEAD, so if all 3 get merged, then we‚Äôd really have 8 successes and 3 failures, which seems like a reasonable rate.</p>
<p>How did my predictions do? The simplest scoring is simply to ask how often I assigned &gt;50% to a success or &lt;50% to a failure; ignoring the question-marks, I then got 8/11. More sophisticated is a log scoring rule taking into account my confidence, and comparing it to a random guesser of 47% (the rough base-rate for success in past years)</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> logScore <span class="fu">=</span> sum <span class="fu">.</span> map (\(result,p) <span class="ot">-&gt;</span> <span class="kw">if</span> result <span class="kw">then</span> log p <span class="kw">else</span> log (<span class="dv">1</span><span class="fu">-</span>p))
logScore [(<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">65</span>), (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">40</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">35</span>), (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">55</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">75</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">65</span>),
          (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">25</span>), (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">40</span>), (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">33</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">33</span>), (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">40</span>)]
<span class="fu">~&gt;</span> <span class="fu">-</span><span class="dv">6</span><span class="fu">.</span><span class="dv">326876860221628</span>
<span class="kw">let</span> br <span class="fu">=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">47</span> <span class="kw">in</span> logScore [(<span class="dt">True</span>,br), (<span class="dt">False</span>,br), (<span class="dt">True</span>,br), (<span class="dt">False</span>,br), (<span class="dt">True</span>,br), (<span class="dt">True</span>,br),
                           (<span class="dt">False</span>,br), (<span class="dt">False</span>,br), (<span class="dt">False</span>,br), (<span class="dt">True</span>,br), (<span class="dt">False</span>,br)]
<span class="fu">~&gt;</span> <span class="fu">-</span><span class="dv">7</span><span class="fu">.</span><span class="dv">5843825560059805</span></code></pre>
<p>Since smaller is worse under a log score, I managed to beat the base-rate. What happens if I decide to flip all 3 question-marks into successes (the best-case scenario for them)?</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">logScore [(<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">65</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">40</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">35</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">55</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">75</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">65</span>),
          (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">25</span>), (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">40</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">33</span>), (<span class="dt">True</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">33</span>), (<span class="dt">False</span>,<span class="dv">0</span><span class="fu">.</span><span class="dv">40</span>)]
<span class="fu">~&gt;</span> <span class="fu">-</span><span class="dv">7</span><span class="fu">.</span><span class="dv">239856330792127</span></code></pre>
<p>I still beat the base-rate but by a trivial amount. The problem here is that while I was accurate enough in predicting on the 2 Darcs-related projects and the FFI one, I gave the Cabal/GHC-related project low probabilities, and them flipping into success punishes my score. As is correct: I <em>am</em> surprised that those succeeded, and my predictions reflected my expectations. Was I wrong to be pessimistic about them and to be surprised by their success? Should I have expected them to succeed, perhaps under a theory like ‚Äúthird time‚Äôs the charm‚Äù? Thinking back, I don‚Äôt think so. I didn‚Äôt have any particular reason to think that this time would be different, or that a special push was going to be made, or that some critical point had been passed. I think that if one just takes enough whacks at a hard nut, it‚Äôll crack eventually, and this year was GHC/Cabal parallelism‚Äôs time to crack.</p>
</section>
</section>
<section id="lessons-learned" class="level3">
<h3>Lessons learned</h3>
<p>So, what lessons can we learn from the past years of SoCs? It seems to me like there are roughly 3 groups of explanations for failure. They are:</p>
<ol type="1">
<li><em>Hubris</em>. GuiHaskell is probably a good example; it is essentially a bare-bones IDE, from its description. It is expecting a bit much of a single student in a single summer to write <em>that</em>!</li>
<li><em>Unclear use</em>. HsJudy is my example here. There are already so many arrays and array types in Haskell! What does HsJudy bring to the table that justifies a FFI dependency? Who‚Äôs going to use it? Pugs initially did apparently, but perhaps that‚Äôs just because it was there - when I looked at Pugs/HsJudy in 2007, certainly Pugs had no need of it. (The data parallel physics engine is probably another good example. Is it just a benchmark for the GHC developers? Is it intended for actual games? If the former, why is it a SoC project, and if the latter, isn‚Äôt that a little hubristic?)</li>
<li><em>Lack of propaganda</em>. One of the reasons Don Stewart‚Äôs bytestring library is so great is his relentless evangelizing, which convinces people to actually take the effort to learn and use Bytestrings; eventually by network effects, the whole Haskell community is affected &amp; improved<a href="#fn13" class="footnoteRef" id="fnref13"><sup>13</sup></a>. Some of these SoC projects suffer from a distinct lack of community buy-in - who used HaskellNet? Who used Hat when it was updated? Indifference can be fatal, and can defeat the point of a project. What good is a library that no one uses? These aren‚Äôt academic research projects which accomplish their task just by existing, after all. They‚Äôre supposed to be useful to real Haskellers.</li>
</ol>
</section>
<section id="future-soc-proposals" class="level3">
<h3>Future SoC proposals</h3>
<p>There are 2 major collections of ideas for future SoC projects, aside from the general frustrations expressed in the <a href="http://nickknowlson.com/blog/2011/09/12/haskell-survey-categorized-weaknesses/">annual survey</a>:</p>
<ul>
<li>The <a href="http://www.reddit.com/r/haskell_proposals/top/?t=all">Haskell proposals</a> <a href="http://www.urlesque.com/2011/01/06/whats-a-subreddit-how-reddit-works/">subreddit</a>, with ideas ranked by popularity</li>
<li>the <a href="http://hackage.haskell.org/trac/summer-of-code/report/1">Haskell Summer of Code</a> <a href="http://en.wikipedia.org/wiki/trac" title="Wikipedia: trac">trac</a></li>
<li><p>Johann Tibell:</p>
<ul>
<li><a href="http://blog.johantibell.com/2011/03/summer-of-code-project-suggestions.html">2011 suggestions</a></li>
<li><a href="http://blog.johantibell.com/2013/04/haskellorg-gsoc-ideas.html">2013</a></li>
<li><a href="http://blog.johantibell.com/2014/03/google-summer-of-code-projects.html">2014</a></li>
</ul></li>
</ul>
<p>Let‚Äôs look at the first 12 and see whether they‚Äôre good ideas, bad ideas, or indifferent.</p>
<ol type="1">
<li><a href="http://www.reddit.com/r/haskell_proposals/comments/7ihso/an_arm_port_of_ghc_that_works_so_we_can_program/">port GHC to the ARM architecture</a>: It would be a good thing if we could easily compile our Haskell programs for ARM, which is used in many cellphones, but an even better idea would <a href="http://www.reddit.com/r/haskell_proposals/comments/b7ol7/use_the_llvm_backend_to_turn_ghc_into_a/">using the LLVM backend</a> to <a href="http://en.wikipedia.org/wiki/crosscompile" title="Wikipedia: crosscompile">crosscompile</a>. It would be somewhat tricky, but LLVM already has fairly solid <a href="http://web.archive.org/web/20100412152035/http://wiki.llvm.org/HowTo:_LLVM-based_cross_compiler">cross-compilation support</a>, and making GHC capable of using it seems like a reasonable project for a student to tackle.</li>
<li><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1579">‚ÄúImplement overlap and exhaustiveness checking for pattern matching‚Äù</a>: this seems both quite challenging and also a specialized use. I use <a href="http://haskell.org/haskellwiki/Generalised_algebraic_datatype">GADTs</a> rarely, but I suspect that those writing GADT code rarely make overlap or omission errors.</li>
<li><a href="http://www.reddit.com/r/haskell_proposals/comments/d1ksj/incremental_garbage_collection_so_i_can_make_some/">Incremental garbage collection</a>: this <em>may</em> be a good idea depending on how much of the code was already written. But I fear that this would go the way of the Immix GC SoC and would be a bad idea.</li>
<li><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1584">‚ÄúThreadScope with custom probes‚Äù</a>: I don‚Äôt understand the description and can‚Äôt judge it.</li>
<li><a href="http://www.reddit.com/r/haskell_proposals/comments/b8rlh/a_simple_sane_comprehensive_datetime_api/">‚ÄúA simple, sane, comprehensive Date/Time API‚Äù</a>: having puzzled over date-time libraries before, I‚Äôm all for this one! It‚Äôs a well-defined problem, within the scope of a summer, and meets a need. Its only problem is that it doesn‚Äôt sound sexy or cool.</li>
<li><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1585">‚ÄúCombine Threadscope with Heap Profiling Tools‚Äù</a>: Uncertain. Going by the <a href="http://www.galois.com/~dons/arch-haskell-status.html">Arch download statistics</a>, Threadscope is downloaded more often than one would expect, so perhaps integration would be useful.</li>
<li><a href="http://www.reddit.com/r/haskell_proposals/comments/7qnwq/haddock_with_embedded_wiki_feature_a_la_rwh_so_we/">‚ÄúHaddock with embedded wiki feature, a la RWH, so we can collaborate on improving the documentation‚Äù</a>: This is a bad idea mostly because there are so many diverging ideas and possible implementations - it‚Äôs just not clear what one would do. Is it some sort of Haddock server? A Gitit wiki with clever hooks? Some lightweight in-browser editor combined with Darcs?</li>
<li><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1122">‚ÄúHTTP Library Replacement‚Äù</a>: A good idea, assuming the linked attempts and alternate libraries haven‚Äôt already solved the issue.</li>
<li><a href="http://www.reddit.com/r/haskell_proposals/comments/biaew/using_type_inference_to_highlight_code_properly/">‚ÄúUsing Type Inference to Highlight Code <em>Properly</em>‚Äù</a>: The difficult part is accessing the type information of an identifier inside a GHCi sessions - a problem probably already solved by <a href="http://hackage.haskell.org/package/scion" title="Hackage: scion">scion</a>. Colorizing the display of a snippet is trivial. So this would make a bad SoC.</li>
<li><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1536">‚ÄúTransformation and Optimisation Tool‚Äù</a>: This initially sounds attractive, but previous refactoring tools have been ignored. The tools that have gotten uptake are things like GHC‚Äôs <code>-Wall</code> (which warns about possible semantic issues) and <a href="http://hackage.haskell.org/package/hlint" title="Hackage: hlint">hlint</a> (which warns about style issues and redundancy with standard library functions) - not like Hera.</li>
<li><a href="http://www.reddit.com/r/haskell_proposals/comments/98vxo/webkitbased_browser_written_in_haskell_similar_in/">‚ÄúWebkit-based browser written in Haskell, similar in [plugin] architecture to Xmonad‚Äù</a>: This is probably the worst single idea in the whole bunch. A web browser these days is an entire operating system, but worse, one in which one must supply and maintain the userland as well; it is a thankless task that will not benefit the Haskell community (except incidentally through supporting libraries), nor a task it is uniquely equipped for. It is an infinite time sink - the only thing worse than this SoC failing would be it succeeding!</li>
<li><a href="http://hackage.haskell.org/trac/summer-of-code/ticket/1537">‚ÄúAdd NVIDIA CUDA backend for Data Parallel Haskell‚Äù</a>: <a href="http://haskell.org/haskellwiki/GHC%2FData%20Parallel%20Haskell" title="Hawiki: GHC/Data Parallel Haskell">DPH</a> is rarely used; a CUDA backend would be even more rarely utilized; <a href="http://en.wikipedia.org/wiki/CUDA" title="Wikipedia: CUDA">CUDA</a> has a reputation for being difficult to coax performance out of; and difficulties would likely be exacerbated by the usual Haskell issues with space usage &amp; laziness. (DPH/CUDA use unboxed strict data, but there are interface issues with the rest of the boxed lazy Haskell universe.) All in all, there are better SoCs<a href="#fn14" class="footnoteRef" id="fnref14"><sup>14</sup></a>.</li>
</ol>
</section>
</section>
</section>
<section id="see-also-2" class="level1">
<h1>See Also</h1>
<p>It‚Äôs difficult to quantify how ‚Äòuseful‚Äô a package is; it‚Äôs easier to punt and ask instead how ‚Äòpopular‚Äô it is. There are a few different sources we can appeal to:</p>
<ol type="1">
<li><p>Package downloads:</p>
<ol type="i">
<li>Don Stewart provides, for <a href="http://en.wikipedia.org/wiki/Arch%20Linux" title="Wikipedia: Arch Linux">Arch Linux</a>, <a href="http://www.galois.com/~dons/arch-haskell-status.html">a status page</a> which includes Arch download numbers</li>
<li>The <a href="http://popcon.debian.org/">Debian</a> (and <a href="http://popcon.ubuntu.com/">Ubuntu</a>) Popularity Contest offers limited popularity data; eg. <a href="http://qa.debian.org/popcon.php?package=xmonad">xmonad</a></li>
<li>some 2006-2009 <a href="http://corp.galois.com/blog/2009/3/23/one-million-haskell-downloads.html">Hackage statistics</a> are available by <a href="http://www.galois.com/~dons/hackage/hackage.html">month</a> &amp; <a href="http://www.galois.com/~dons/hackage/popularity.html">ranking</a>; live Hackage statistics is an open <a href="https://github.com/haskell/cabal/issues/155">bug report</a> which will be closed by Matthew Gruen‚Äôs Hackage 2.0 (2010 SoC)</li>
</ol></li>
<li><p><a href="https://web.archive.org/web/20100324194403/http://hackage.haskell.org/trac/hackage/ticket/576">Reverse dependencies</a> can be examined several ways:</p>
<ol type="i">
<li><a href="http://packdeps.haskellers.com/">Hackage Dependency Monitor</a></li>
<li><a href="http://hackage.haskell.org/package/cabal-query" title="Hackage: cabal-query">cabal-query</a></li>
<li><a href="https://github.com/sol/HackageOneFive">HackageOneFive</a></li>
</ol></li>
<li><p>Searching for mentions, blog posts, and unreleased packages elsewhere; key sites to search include:</p>
<ol type="i">
<li><a href="http://www.reddit.com/r/haskell/">Haskell subreddit</a></li>
<li><a href="https://github.com/">Github</a></li>
<li><a href="http://code.google.com/">Google Code</a></li>
<li><code>haskell.org</code>, and specifically the <a href="http://haskell.org/haskellwiki/index.php?title=&amp;search=&amp;fulltext=Search">Haskell wiki</a> &amp; <a href="http://dir.gmane.org/index.php?prefix=gmane.comp.lang.haskell">mailing lists</a></li>
</ol></li>
</ol>
</section>
<section id="external-links" class="level1">
<h1>External links</h1>
<ul>
<li><a href="http://www.haskell.org/haskellwiki/Google_summer_of_code">Haskell wiki</a></li>
<li><a href="http://redmonk.com/dberkholz/2012/07/10/how-to-recruit-open-source-contributors/">‚ÄúHow to recruit open-source contributors‚Äù</a> -(Gentoo developer Donnie Berkholz on increasing GSoC-&gt;regular developer yields)</li>
<li><a href="http://www.haskell.org/pipermail/haskell-cafe/2013-June/108581.html" title="[Haskell-cafe] [haskell.org Google Summer of Code 2013] Approved Projects">Writing a good Haskell SoC application</a> (by mentor Edward Kmett)</li>
<li><p>Discussion:</p>
<ul>
<li><a href="http://www.haskell.org/pipermail/haskell-cafe/2009-February/subject.html#55500">2009</a></li>
<li><a href="http://www.reddit.com/r/haskell/comments/fid5w/haskell_summers_of_code_retrospective_updated_for/">2010</a></li>
<li><a href="http://www.reddit.com/r/haskell/comments/n82ln/summer_of_code_2011_retrospective/">2011</a></li>
<li><a href="http://www.reddit.com/r/haskell/comments/15sjur/summer_of_code_2012_retrospective/">2012</a></li>
<li><a href="http://www.reddit.com/r/haskell/comments/1v80ld/summer_of_code_2013_retrospective/">2013</a></li>
</ul></li>
</ul>
</section>
<section class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>The Haskell ecosystem evolves fast, and strong static typing means that a package can quickly cease to be compilable if not maintained.<a href="#fnref1">‚Ü©</a></p></li>
<li id="fn2"><p>From the 11 February 2011 Haskell-cafe thread, <a href="http://www.haskell.org/pipermail/haskell-cafe/2011-February/089183.html">‚ÄúHaskell Summers of Code retrospective (updated for 2010)‚Äù</a>:</p>
<blockquote>
<p>There was some discussion of this on <a href="http://www.reddit.com/r/haskell/comments/fid5w/haskell_summers_of_code_retrospective_updated_for/">Reddit</a>. Below is a slightly cleaned-up version of my comments there.</p>
<p>I really appreciate this roundup. But I think the bar is set somewhat too high for success. A success in this framework seems to be a significant and exciting improvement for the entire Haskell community. And there have certainly been a number of those. But there are also projects that are well done, produce results that live on, but which aren‚Äôt immediately recognizable as awesome new things. Furthermore, GSoc explicitly lists a goal as inspiring young developers towards ongoing community involvement/open source development, and these notes don‚Äôt really take that into account.</p>
<p>For example, I don‚Äôt know of any direct uptake of the code from the HaskellNet project, but the author did go on to write a small textbook on Haskell in Japanese. As another example, Roman (of Hpysics [sic]) has, as I understand it, been involved in a Russian language functional programming magazine.</p>
<p>So I think there needs to be a slightly more granular scale that can capture some of these nuances. Perhaps something like the following:</p>
<ul>
<li>[ ] Student completed (i.e.¬†got final payment)</li>
<li>[ ] Project found use (i.e.¬†as a lib has at least one consumer, or got merged into a broader codebase)</li>
<li>[ ] Project had significant impact (i.e.¬†wide use/noticeable impact)</li>
<li>[ ] Student continued to participate/make contributions to Haskell community</li>
</ul>
<p>A few more detailed comments about projects that weren‚Äôt necessarily slam dunks, but were at the least, in my estimation, modest successes:</p>
<ol type="1">
<li>GHC-plugins ‚Äì Not only was the work completed and does it stand a chance of being merged, but it explored the design space in a useful way for future GHC development, and was part of Max becoming more familiar with GHC internals. Since then he‚Äôs contributed a few very nice and useful patches to GHC, including, as I recall, the magnificent TupleSections extension.</li>
<li>GHC refactoring ‚Äì It seems unfair to classify work that was taken into the mainline as unsuccessful. The improvement weren‚Äôt large, but my understanding is that they were things that we wanted to happen for GHC, and that were quite time consuming because they were cross-cutting. So this wasn‚Äôt exciting work, but it was yeoman‚Äôs work helpful in taking the GHC API forward. It‚Äôs still messy, I‚Äôm given to understand, and it still breaks between releases, but it has an increasing number of clients lately, as witnessed by discussions on -cafe.</li>
<li>Darcs performance ‚Äì by the account of Eric Kow &amp; other core darcs guys, the hashed-storage stuff led to large improvements (and not only in performance)<a href="http://blog.darcs.net/2010/11/coming-in-darcs-28-read-only-support.html">[2]</a> ‚Äì the fact that there‚Äôs plenty more to be done shouldn‚Äôt be counted as a mark against it.</li>
</ol>
</blockquote>
<p>Further criticisms by <a href="http://www.reddit.com/r/haskell/comments/15sjur/summer_of_code_2012_retrospective/c7pfrro">sclv from 2013</a>:</p>
<blockquote>
<p>I no longer think these summaries are even modestly useful, because the judgement criteria are too harsh and too arbitrary. They reflect a bias towards ‚Äúsuccess‚Äù of a gsoc project as something measurable directly measurable in uptake and users within a relatively short span of time.</p>
<p>GSoC projects are chosen, on the other hand, with an eye towards long-term payoff in Haskell infrastructure.</p>
<p>The criteria that would yield us ‚Äúhigh success‚Äù projects in the sense judged here would also yield us projects that weren‚Äôt very interesting, useful, or important.</p>
</blockquote>
<a href="#fnref2">‚Ü©</a></li>
<li id="fn3"><p>For example, how long must a student ‚Äòcontinue to participate/make contributions to Haskell community‚Äô? Spencer Janssen, a successful 2006 SoC student, went on to be one of the 2 main developers on the popular <a href="http://en.wikipedia.org/wiki/Xmonad" title="Wikipedia: Xmonad">Xmonad</a> window manager, but then wound down his Haskell contributions and stopped entirely ~2009 (much to my dismay as an Xmonad developer). Is he a success for SoC?<a href="#fnref3">‚Ü©</a></p></li>
<li id="fn4"><p>I can hear the wankers in the peanut gallery - ‚ÄúYeah, and it‚Äôs been buggy ever since!‚Äù Hush you. (<a href="http://www.haskell.org/pipermail/haskell-cafe/2009-February/055500.html">Waern‚Äôs reply</a>.)<a href="#fnref4">‚Ü©</a></p></li>
<li id="fn5"><p>In the <a href="http://blog.johantibell.com/2010/08/results-from-state-of-haskell-2010.html">2010 survey</a> of Haskellers, 3% reported ever using Eclipse for Haskell programming. In the <a href="http://blog.johantibell.com/2011/08/results-from-state-of-haskell-2011.html">2011 survey</a>, 4% did.<a href="#fnref5">‚Ü©</a></p></li>
<li id="fn6"><p>As of 18 March 2011, I have local copies of 8 repositories which seem to make use of the new syntax: <code>angle, cabal, concurrent-extra, hashable, rrt, safeint, spatialIndex, unordered-containers, wai-app-static</code>.<a href="#fnref6">‚Ü©</a></p></li>
<li id="fn7"><p>A development that surprises me, since I had been under the impression that most GHC work ultimately winds up being scrapped or abandoned like <a href="http://web.archive.org/web/20120609122549/http://www.liskell.org/">Liskell</a> or <a href="http://www.haskell.org/haskellwiki/Research_papers/Parallelism_and_concurrency#Mobile_Haskell">Mobile Haskell</a>.<a href="#fnref7">‚Ü©</a></p></li>
<li id="fn8"><p>11 December 2011, <a href="https://plus.google.com/u/0/103530621949492999968/posts/J4HYwwmTuk2">Google+</a>:</p>
<blockquote>
<p>‚ÄúRegarding the parallel cabal-install patches - Duncan is concerned that my changes are too invasive. I hope to get them merged in during the next few months after some reworking (we‚Äôre currently discussing what needs to be done).‚Äù</p>
</blockquote>
<a href="#fnref8">‚Ü©</a></li>
<li id="fn9"><p>From <a href="http://irclog.perlgeek.de/darcs/2011-04-26">my conversation in <code>#darcs</code></a> with Eric Kow and other Darcs developers:</p>
<pre><code>&lt; kowey&gt; mornfall [Petr Roƒçkai] and I did discuss the proposal beforehand... one
         thing to clear up first of all is that this is very specifically about the primitive
         patch level and not a wider patch theory project
&lt; kowey&gt; the difference being that it's easier to do in a SoC project
&lt; owst&gt; Also, mornfall has the advantage of being very experienced with the Darcs
        code-base, and its concepts - he's not going to require time to &quot;get used to it&quot;
        so I'd argue he's certainly not the average SoC student...
&lt; kowey&gt; I think mornfall has also put a good show of effort into thinking about
         (A) building off previous thinking on the matter (see his proposal),
         (B) fitting into the Darcs agenda -- particularly in aiming for this work to happen in mainline
             with the help of recent refactors and also to result in some cleanups and
         (C) making the project telescope
&lt; gwern&gt; owst: well, in a sense, that's a negative for the project as well as a positive implementation-wise
         - SoCs are in part about bringing new people into communities
&lt; kowey&gt; by telescope I mean, have a sane ordering of can-do to would-be-awesome
&lt; Heffalump&gt; gwern: yeah, though the Haskell mentors didn't see it that way
&lt; kowey&gt; (the mental image being that you can collapse a telescope)
&lt; gwern&gt; owst: I didn't mention that because I'm trying to not be unrelentingly negative,
         and because investigating backgrounds of everyone would require hours of work
&lt; kowey&gt; (sorry, I misread and see now that gwern did catch that this was primpatch specific)
&lt; owst&gt; gwern: in part, but not in full - they are ultimately also about &quot;getting code written&quot; for a project
        and that's certainly going to happen for mornfall's project!
&lt; gwern&gt; owst: that's the same reason I don't also judge SoCs by whether the student continued on
         in the community - because it'd be too damn much work
&lt; owst&gt; gwern: sure, I thought as much.
&lt; gwern&gt; owst: even though the student's future work would probably flip a number of projects from failure
         to success and vice-versa
         (eg. what has Spencer Janssen been doing lately? how many of the SoC students you see on the page
         did that and have not
         been heard from since like Mun of Frag?)
&lt; gwern&gt; so, I just judge on whether the code gets used a lot and whether it did something valuable
&lt; kowey&gt; it's a project that has long-term value for Darcs
&lt; kowey&gt; I think I agree with the last line of your prediction, &quot;That might be a success by the
         Darcs's team's lights, but not in the sense I have been using in this history.&quot;
&lt; kowey&gt; although I'm certainly hoping for something better in the middle bit: code that winds up in
         darcs mainline plus specifications on the wiki</code></pre>
<a href="#fnref9">‚Ü©</a></li>
<li id="fn10"><p>I wrote <code>mueval</code> but tryhaskell.org uses a fork which takes expressions over a pipe as opposed to being a one-shot CLI tool.<a href="#fnref10">‚Ü©</a></p></li>
<li id="fn11"><p>On <a href="https://plus.google.com/u/0/103530621949492999968/posts/V96rYrcm4jp">Google+</a>:</p>
<blockquote>
<p>Ah, ghcLiVE isn‚Äôt designed to have a server hosted, it‚Äôs designed to run outside a sandbox. Not that I would mark this successful myself, but mostly because it uses Yesod and cabal dependency hell means very few people ended up using it‚Ä¶I‚Äôd like to port ghclive to scotty, which has far fewer build dependencies, I think people would actually use it thenÔªø</p>
</blockquote>
<a href="#fnref11">‚Ü©</a></li>
<li id="fn12"><p>Guessing 50% simplifies the calculation, and isn‚Äôt too far off: Doing a quick sum of all the non-2012 successful/unsuccessful ratings, I get a chance of being successful at <code>(4+6+2+3+3+4) / ((4+2+5+1+2+4) + (4+6+2+3+3+4)) = 0.55</code>, which isn‚Äôt terribly different from a guess of 0.5.<a href="#fnref12">‚Ü©</a></p></li>
<li id="fn13"><p>Many good and worthwhile projects suffer this fate because of their academic origins. There‚Äôs no reward for someone who creates a great technique or library and gets the wider community to adopt it as standard. As far as the Haskell community is concerned, one Don Stewart is worth more than a dozen of Oleg Kiselyov; <a href="http://okmij.org/ftp/">Oleg‚Äôs work</a> is mindblowingly awesome in both quantity and quality, everyone acknowledges, but how often does anyone actually <em>use</em> any of it?</p>
<p>(<a href="http://okmij.org/ftp/Streams.html">Iteratees</a> may be the exception; although there are somewhere upwards of <a href="https://john-millikin.com/articles/understanding-iteratees/">5 implementations</a> as of 2010 by Oleg and others leading to a veritable <a href="http://ro-che.info/ccc/15.html">Tower of Iteratee</a> situation, the original <a href="http://hackage.haskell.org/package/iteratee" title="Hackage: iteratee">iteratee</a> has picked up <a href="http://bifunctor.homelinux.net/~roel/cgi-bin/hackage-scripts/revdeps/iteratee#direct">4 reverse dependencies</a>, its most popular successor <a href="http://sparky.haskell.org:8080/package/enumerator/reverse">33</a> and iteratees in general may one day become as widely used as bytestrings.)<a href="#fnref13">‚Ü©</a></p></li>
<li id="fn14"><p>Liam O‚ÄôConnor <a href="http://www.reddit.com/r/haskell/comments/fid5w/haskell_summers_of_code_retrospective_updated_for/c1gutlo">begs to</a> <a href="http://www.reddit.com/r/haskell/comments/1v80ld/summer_of_code_2013_retrospective/cepod0s">differ</a> on the value of a DPH or CUDA SoC, arguing they are definitely unnecessary and even a ‚Äúterrible‚Äù idea.<a href="#fnref14">‚Ü©</a></p></li>
</ol>
</section>
</div>
</div>
<div id="footer">
<p>Still bored? Then try my <a href="https://plus.google.com/103530621949492999968/posts" title="Google+ posts">Google+ news feed</a>.</p>
<a href="https://docs.google.com/spreadsheet/viewform?formkey=dE5GLWpfX3RhX1c2Q1phcEo3U3VDVEE6MQ">Send anonymous feedback</a>
<br/>
<div id="license">
<p xmlns:dct="http://purl.org/dc/terms/" xmlns:vcard="http://www.w3.org/2001/vcard-rdf/3.0#">
<a rel="license" href="http://creativecommons.org/publicdomain/zero/1.0/">
<img src="http://i.creativecommons.org/p/zero/1.0/88x31.png" style="border-style: none;" alt="CC0" height="31" width="88"/>
</a>
</p>
</div>
</div>
 
<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
 
<script type="text/javascript" src="./static/js/footnotes.js"></script>
 
<script type="text/javascript" src="./static/js/abalytics.js"></script>
<script type="text/javascript">
      window.onload = function() {
      ABalytics.applyHtml();
      };
    </script>
 
<script id="googleAnalytics" type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-18912926-1']);

      ABalytics.init({
      indent: [
      {
      name: "none",
      "indent_class1": "<style>p + p { text-indent: 0.0em; margin-top: 0 }</style>"
      },
      {
      name: "indent0.1",
      "indent_class1": "<style>p + p { text-indent: 0.1em; margin-top: 0 }</style>"
      },
      {
      name: "indent0.5",
      "indent_class1": "<style>p + p { text-indent: 0.5em; margin-top: 0 }</style>"
      },
      {
      name: "indent1.0",
      "indent_class1": "<style>p + p { text-indent: 1.0em; margin-top: 0 }</style>"
      },
      {
      name: "indent1.5",
      "indent_class1": "<style>p + p { text-indent: 1.5em; margin-top: 0 }</style>"
      },
      {
      name: "indent2.0",
      "indent_class1": "<style>p + p { text-indent: 2.0em; margin-top: 0 }</style>"
      }
      ],
      }, _gaq);

      _gaq.push(['_trackPageview']);
      (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>
 
<script id="outboundLinkTracking" type="text/javascript">
      $(function() {
      $("a").on('click',function(e){
      var url = $(this).attr("href");
      if (e.currentTarget.host != window.location.host) {
      _gat._getTrackerByName()._trackEvent("Outbound Links", e.currentTarget.host.replace(':80',''), url, 0);
      if (e.metaKey || e.ctrlKey || (e.button == 1)) {
      var newtab = true;
      }
      if (!newtab) {
      e.preventDefault();
      setTimeout('document.location = "' + url + '"', 100);
      }
      }
      });
      });
    </script>
 
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
 
<script type="text/javascript" src="./static/js/footnotes.js"></script>
 
<script type="text/javascript" src="./static/js/tablesorter.js"></script>
<script type="text/javascript" id="tablesorter">
      $(document).ready(function() {
      $("table").tablesorter();
      }); </script>
 
<div id="disqus_thread"></div>
<script type="text/javascript">
      if (document.title != 'Essays') { <!-- avoid Disqus comments on front page -->
      (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = 'http://disqus.com/forums/gwern/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
      var disqus_shortname = 'gwern';
      (function () {
      var s = document.createElement('script'); s.async = true;
      s.src = 'http://disqus.com/forums/gwern/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
      }());
      }</script>
<noscript><p>Enable JavaScript for Disqus comments</p></noscript>
</body>
</html>

