HTTP/1.0 200 OK
Date: Tue, 22 Jul 2014 15:25:44 GMT
Content-Type: application/atom+xml; charset=UTF-8
Server: GSE
Cache-Control: public, must-revalidate, proxy-revalidate, max-age=1
Vary: Accept-Encoding
Expires: Tue, 22 Jul 2014 15:25:45 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
ETag: W/"376b3a42-8833-4eef-8773-3a2db7468061"
Last-Modified: Mon, 12 May 2014 12:55:35 GMT
X-Frame-Options: SAMEORIGIN
Alternate-Protocol: 80:quic

<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-3669809752172683097</id><updated>2014-05-12T05:55:35.919-07:00</updated><category term="linux"/><category term="linkage"/><category term="ubuntu"/><category term="howto"/><category term="firmware"/><category term="revision control"/><category term="emacs"/><category term="hardware"/><category term="verification"/><category term="philosopy"/><category term="backup"/><category term="olpc"/><category term="django"/><category term="family"/><category term="windows"/><category term="meta"/><category term="python"/><category term="eda"/><category term="mac"/><category term="mandriva"/><category term="mercurial"/><category term="firefox"/><category term="games"/><category term="git"/><category term="gnome"/><category term="maps"/><category term="portland"/><category term="samba"/><category term="bitcoin"/><category term="dns"/><category term="hiking"/><category term="lart"/><category term="music"/><category term="sql"/><title type='text'>Cyclopedia Square</title><subtitle type='html'></subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default?alt=atom'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default?alt=atom&amp;start-index=26&amp;max-results=25'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>174</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-6082462228704773264</id><published>2014-04-30T07:03:00.000-07:00</published><updated>2014-04-30T07:03:05.158-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="linkage"/><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>A Quick Look at svlib</title><content type='html'>I just took a quick look at &lt;a href=&quot;http://www.verilab.com/resources/svlib/&quot;&gt;svlib&lt;/a&gt; from Verilab. &amp;nbsp;Very cool. &amp;nbsp;It&#39;s a library for SystemVerilog that gives you file globbing, regular expressions, a better string class, simple ini config file parsing (with yaml support promised for the future!), and more. &amp;nbsp;It was announced back in March and it took me this long to getting around to reading about it. &amp;nbsp;Hopefully it doesn&#39;t take me that long to actually try it out :-)&lt;br /&gt;
&lt;br /&gt;
They welcome feedback so brace yourself, here it comes. &amp;nbsp;First of all it&#39;s open source (Apache license) which is excellent. &amp;nbsp;It&#39;s open source &lt;b&gt;and&lt;/b&gt; it has documentation. &amp;nbsp;Amazing! &amp;nbsp;:-) &amp;nbsp;It is not currently developed openly though. &amp;nbsp;Could we get a github, bitbucket, or sourceforge project going? &amp;nbsp;Our industry (design verification) desperately needs to admit and recognize that we are software developers. &amp;nbsp;I mean no, we are verifiers! &amp;nbsp;Bug finders! &amp;nbsp;It just so happens that writing software is the primary technique we use to verify designs and find bugs (hence the need for svlib). &amp;nbsp;We need to get better at writing software. &amp;nbsp;Open Source projects are a great way for us to help each other develop those skills. &amp;nbsp;The paper and presentation talk about the trade-offs and design considerations that were considered by the svlib authors as they wrote svlib. &amp;nbsp;How much better would it be for all of us to be able to see and participate in the discussions that led to the particular design of something like svlib?&lt;br /&gt;
&lt;br /&gt;
Second item of feedback. &amp;nbsp;Recommending people do an import svlib_pkg::* is no surprise, but it&#39;s still bad. &amp;nbsp;C++ and Python programmers long ago realized how bad their equivalents are: using namespace &lt;some_namespace&gt; and from &lt;some_module&gt; import *. &amp;nbsp;We SystemVerilog programmers need to realize this too. &amp;nbsp;Brian Hunter makes the case for SystemVerilog in his seminal &lt;a href=&quot;http://www.vmmcentral.org/vmartialarts/2012/05/namespaces-build-order-and-chickens/&quot;&gt;Namespaces, Build Order, and Chickens&lt;/a&gt; video. &amp;nbsp;You can see the reasoning for &lt;a href=&quot;https://www.google.com/search?q=using+namespace+std+bad&amp;amp;oq=using+namespace+std+bad&quot;&gt;C++&lt;/a&gt; and &lt;a href=&quot;https://www.google.com/search?q=python+import+star+bad&quot;&gt;Python&lt;/a&gt; all over the internet. &amp;nbsp;As I have made this argument people have pointed out how awkward the alternative svlib_pkg::foo looks in your code. &amp;nbsp;A big thing that would help with that is to drop the _pkg suffix. &amp;nbsp;We don&#39;t need that suffix, it&#39;s like doing &lt;a href=&quot;http://photos1.blogger.com/blogger2/1715/1669/1600/larson-oct-1987.gif&quot;&gt;this&lt;/a&gt;. svlib::foo is not that bad and clearly shows exactly where foo came from.&lt;/some_module&gt;&lt;/some_namespace&gt;&lt;br /&gt;
&lt;br /&gt;
Third item of feedback. &amp;nbsp;It was bold and probably justified to put this all together in a single library named svlib. &amp;nbsp;It probably simplified some things and expedited getting the code working and out the door. &amp;nbsp;Those are good things. &amp;nbsp;Long-term though, I think we&#39;ll be better served if this were split into multiple smaller libraries. &amp;nbsp;Maybe one for regexes alone, one for os/system interactions, one for ini parsing, and so forth. &amp;nbsp;Python and its libraries are good examples to follow here. &amp;nbsp;If you make the project open I promise to help out with this where I can and I&#39;m sure others would too.&lt;br /&gt;
&lt;br /&gt;
Those concerns aside, svlib is a great thing to happen to the SystemVerilog community and hopefully just the start of better things to come. &amp;nbsp;Collaboration and sharing of libraries and tools like this will help our entire industry grow and and progress.</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/6082462228704773264/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=6082462228704773264' title='7 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6082462228704773264'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6082462228704773264'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2014/04/a-quick-look-at-svlib.html' title='A Quick Look at svlib'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-7124628488925488082</id><published>2014-02-27T16:16:00.000-08:00</published><updated>2014-02-27T16:16:48.033-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>Avoiding Verilog&#39;s Non-determinism, Part 2</title><content type='html'>&lt;p&gt;At the end of my &lt;a href=&quot;http://bryan-murdock.blogspot.com/2014/02/avoiding-verilogs-non-determinism-part-1.html&quot;&gt;last post&lt;/a&gt; I promised I would have another non-determinism (AKA, race condition) example from recent real-life experience.  Here it comes.&lt;/p&gt;&lt;p&gt;Before I show you any code I want to explain how this race condition was introduced.  We had a signal in an interface that needed to be widened.  We had a function in some simulation-only code that looked at part of that signal and didn&#39;t care about the new bits that were added.  The engineer who widened the signal decided not to change the function and instead added a new variable and assigned (using the &lt;code&gt;assign&lt;/code&gt; keyword) the bits of interest from the newly widened signal to this new variable.  He then passed this new variable to the original function in place of the original newly-widened one.  Seems reasonable, right?  Well, after he made that change some tests started failing and after some digging it began to look like a race condition, but it wasn&#39;t obvious where the race was coming from.  The problem was that &lt;code&gt;assign&lt;/code&gt; statement, because &lt;code&gt;assign&lt;/code&gt; creates yet another process.  The original newly widened signal was given a value in one process and the &lt;code&gt;assign&lt;/code&gt;ed variable got updated in a separate process.  There was now a race between those two values (the newly-widened one and the &lt;code&gt;assign&lt;/code&gt;ed one) to get to the third process that consumed them (the process that includes the previously mentioned function).&lt;/p&gt;&lt;p&gt;Got all that?  Here&#39;s the boiled-down code that illustrates what was going on:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;module top;
   reg [3:0] foo;
   wire foo_0;
   reg ready;
   
   assign foo_0 = foo[0];

   initial begin
      #10;
      foo = &#39;h0;
      ready = 0;
      #10;
      foo = &#39;hf;
      ready = 1;
      #10;
      foo = &#39;h0;
      ready = 0;
   end

   initial begin
      forever begin
         @(ready);
         $display(&quot;foo[0]: &#39;b%0b&quot;, foo[0]);
         $display(&quot;foo_0:  &#39;b%0b&quot;, foo_0);
         $display(&quot;------------&quot;);
      end
   end
endmodule&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And of course, &lt;a href=&quot;http://www.edaplayground.com/x/2G9&quot;&gt;an EDA Playground version&lt;/a&gt; that you can play with.  See the differences with different simulators?  It was interesting that GPL Cver and Veriwell give the same results as the simulator I use at work (Cadence): the value of &lt;code&gt;foo_0&lt;/code&gt; is always a step behind the value of &lt;code&gt;foo[0]&lt;/code&gt;.  Also interesting that if I change the wire to a reg Cadence changes and gives the same results as Modelsim and Icarus (plain verilog won&#39;t allow that to be a reg, that&#39;s why I made it a wire for EDA Playground), which was not the behavior I was getting in the larger production testbench code (&lt;code&gt;foo_0&lt;/code&gt; was a step behind there).  Non-determinism in the flesh.&lt;/p&gt;&lt;p&gt;The solution was to get rid of the new variable (&lt;code&gt;foo_0&lt;/code&gt;) and the &lt;code&gt;assign&lt;/code&gt; and just pass the &lt;code&gt;foo&lt;/code&gt; to the function.  Modifying the function to deal with a wider &lt;code&gt;foo&lt;/code&gt; wasn&#39;t too difficult and the race between &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;foo_0&lt;/code&gt; was eliminated.  Easy, right?  Trust me, fixing the problem wasn&#39;t the hard part. Identifying the root cause was much, much harder.&lt;/p&gt;&lt;p&gt;I&#39;m understanding &lt;a href=&quot;http://www.jandecaluwe.com/&quot;&gt;Jan Decaluwe&lt;/a&gt;&#39;s concerns with Verilog more and more as I encounter and dig into these race conditions.  I think before reading &lt;a href=&quot;http://www.sigasi.com/tag/janhdl&quot;&gt;his blog entries&lt;/a&gt; on Sigasi I thought concurrency and non-determinism had to go hand in hand.  My embedded software background and experience with real-life concurrency was a large contributer to that opinion: isn&#39;t Verilog just modeling concurrency accurately when it&#39;s non-deterministic?  Jan&#39;s point, I believe, is that the pain of this &quot;accurate&quot; modeling doesn&#39;t really buy you anything, and because processes in Verilog spring up and multiply almost (ok, definitely) without you noticing it can be very difficult to have them communicate reliably.  In software like C you know exactly when you are creating another thread but in Verilog it is not so obvious.  RTL Verilog has it easy because you can follow a basic (if over-restrictive) guideline (synchronize to the same clock and use non-blocking assignments in clocked processes), but in higher-level simulation-only code I don&#39;t know of an easy guideline you can follow.  I guess the guideline is this: learn what creates a process and think about values racing from one process to another.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/7124628488925488082/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=7124628488925488082' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/7124628488925488082'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/7124628488925488082'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2014/02/avoiding-verilogs-non-determinism-part-2.html' title='Avoiding Verilog&#39;s Non-determinism, Part 2'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-6868832874428455623</id><published>2014-02-26T14:31:00.000-08:00</published><updated>2014-02-27T16:20:14.593-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>Avoiding Verilog&#39;s Non-determinism, Part 1</title><content type='html'>&lt;p&gt;In my &lt;a href=&quot;/2014/02/is-verilogs-non-determinism-really.html&quot;&gt;last post&lt;/a&gt; we looked at some example code that showed off Verilog&#39;s non-determinism.  Here it is again (you can actually run it on multiple simulators &lt;a href=&quot;http://www.edaplayground.com/x/23V&quot;&gt;here on EDA Playground&lt;/a&gt;):&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;module top;
   reg ready;
   integer result;

   initial begin
      #10;
      ready &lt;= 1;
      result &lt;= 5;
   end

   initial begin
      @(posedge ready);
      if(result == 5) begin
       $display(&quot;result was ready&quot;);
      end
      else begin
       $display(&quot;result was not ready&quot;);
      end
   end   
endmodule&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just to review from last time, the problem is that sometimes the &lt;code&gt;@(posedge ready)&lt;/code&gt; will trigger before &lt;code&gt;result&lt;/code&gt; has the value 5 and sometimes it will trigger after &lt;code&gt;result&lt;/code&gt; has the value 5.  We have called this non-determinism but a more common term for it is, race condition.  There is a race between the values of &lt;code&gt;ready&lt;/code&gt; and &lt;code&gt;result&lt;/code&gt; making it to that second process (the second initial block).  If &lt;code&gt;result&lt;/code&gt; is updated first (wins the race) then everything runs as the writer of the code intended.  If &lt;code&gt;ready&lt;/code&gt; is updated first (wins the race) then the result will not actually be ready when the writer of the code intended.&lt;/p&gt;&lt;p&gt;Now the question is, is there a way to write this code so that there is no race condition?  Well, first of all I surveyed my body of work on simulation-only code and didn&#39;t find very many uses of non-blocking assignments like that.  The common advice in the Verilog world is to use non-blocking assignments in clocked always blocks not in &quot;procedural&quot; code like this.  If we change the above to use blocking instead of non-blocking assignments, does that fix the problem?  Here&#39;s what the new first initial block looks like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;   initial begin
      #10;
      ready = 1;
      result = 5;
   end&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can &lt;a href=&quot;http://www.edaplayground.com/x/27N&quot;&gt;try it on EDA Playground&lt;/a&gt; and see that it still behaves the same as it did before except for with GPL Cver.  With non-blocking assignments you get &quot;result was not ready&quot; with Cver and now you get &quot;result was ready.&quot;  That doesn&#39;t give me a lot of warm fuzzy feelings though.  In fact, looking at that code makes me feel worse.  If I&#39;m thinking procedurally it looks totally backwards to set &lt;code&gt;ready&lt;/code&gt; to one &lt;em&gt;before&lt;/em&gt; assigning the value to &lt;code&gt;result&lt;/code&gt;.  My instinct would be to write the first initial block like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;   initial begin
      #10;
      ready = 1;
      result = 5;
   end&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Is that better for avoiding race conditions?  If I take the explanation for why race-conditions exist in Verilog from Jan Decaluwe&#39;s &lt;a href=&quot;http://www.sigasi.com/content/vhdls-crown-jewel&quot;&gt;VHDL&#39;s Crown Jewel&lt;/a&gt; post at face value, I think it actually is.  That post explains that right after the first assignment (signal value update, if we use Jan&#39;s wording) in the first initial block Verilog &lt;em&gt;could&lt;/em&gt; decide to trigger the second process (the second initial block).  That case causes problems in the original code because the first assignment is to &lt;code&gt;ready&lt;/code&gt; and &lt;code&gt;result&lt;/code&gt; doesn&#39;t yet have its updated value.  With the assignments re-ordered as above even if the second initial block is activated after the first assignment it will not try to read the value of &lt;code&gt;result&lt;/code&gt;.  It will just block waiting for a &lt;code&gt;posedge ready&lt;/code&gt; (which will happen next).  Race condition:  eliminated.  Here is &lt;a href=&quot;http://www.edaplayground.com/x/2Qv&quot;&gt;the full fixed code example on EDA Playground&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Strangely enough, I spent the day yesterday debugging and fixing a race condition in our production testbench code here at work.  It was very different from this one, so don&#39;t get too confident after reading this single blog post.  I was able to boil the problem from yesterday down into another small example and so my next post will show off that code and how I eliminated that particular race.&lt;/p&gt;&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;: As promised &lt;a href=&quot;http://bryan-murdock.blogspot.com/2014/02/avoiding-verilogs-non-determinism-part-2.html&quot;&gt;another example of a race condition&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/6868832874428455623/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=6868832874428455623' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6868832874428455623'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6868832874428455623'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2014/02/avoiding-verilogs-non-determinism-part-1.html' title='Avoiding Verilog&#39;s Non-determinism, Part 1'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-1217918533498489322</id><published>2014-02-22T10:30:00.002-08:00</published><updated>2014-02-26T14:34:23.372-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="firmware"/><category scheme="http://www.blogger.com/atom/ns#" term="hardware"/><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>Is Verilog&#39;s Non-determinism Really a Problem?</title><content type='html'>&lt;p&gt;A series of blog posts by &lt;a href=&quot;http://www.jandecaluwe.com/&quot;&gt;Jan Decaluwe&lt;/a&gt; criticize Verilog for being &quot;non-deterministic&quot; and therefore fundamentally broken.&lt;/p&gt;&lt;a href=&quot;http://www.sigasi.com/content/fixing-verilog-easy&quot;&gt;This one&lt;/a&gt; has a code example that illustrates the fact.  During a lively Twitter conversation about it I fleshed out the example and put it on &lt;a href=&quot;http://www.edaplayground.com/x/23V&quot;&gt;EDA Playground&lt;/a&gt; so we could all view it and, even better, run it with all the simulators that EDA Playground provides and see what actually happens.  &lt;a href=&quot;http://www.edaplayground.com/x/23V&quot;&gt;Click here&lt;/a&gt; to see and run the example code yourself.&lt;/p&gt;&lt;p&gt;If you run the example you&#39;ll see that it behaves the same for all the simulators available on EDA Playground, except one.  Jan explains that they are all compliant with the Verilog specification because the specification allows for either behavior.  Jan expertly explains in &lt;a href=&quot;http://www.sigasi.com/content/vhdls-crown-jewel&quot;&gt;this post&lt;/a&gt; how that can be.&lt;/p&gt;&lt;p&gt;Despite these clear examples and explanations I&#39;m left with the feeling of, why should I care?  Apparently a lot of other users of the Verilog language have the same feeling as me.  I tried to see Jan&#39;s point and ask some honest questions in comments and on Twitter and I learned some more.  My first question is, if we were to try and synthesize his example Verilog code, what kind of hardware would we get?  Wouldn&#39;t it be non-deterministic in exactly the same way as the Verilog code?  And therefore wouldn&#39;t the non-deterministic Verilog be an accurate model and not a sign of Verilog&#39;s brokenness?  The tweets I got in reply agreed that nobody would design hardware like this and so that&#39;s a non-issue.  See:&lt;/p&gt;&lt;br /&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/bdmurdock&quot;&gt;@bdmurdock&lt;/a&gt; &lt;a href=&quot;https://twitter.com/jandecaluwe&quot;&gt;@jandecaluwe&lt;/a&gt; &lt;a href=&quot;https://twitter.com/FeltonChris&quot;&gt;@FeltonChris&lt;/a&gt; it&amp;#39;s an aysnc circuit so all bets are off anyway without metaflops. No-one would design like that&lt;/p&gt;&amp;mdash; Paul Marriott (@pmarriott) &lt;a href=&quot;https://twitter.com/pmarriott/statuses/436622248133144576&quot;&gt;February 20, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/bdmurdock&quot;&gt;@bdmurdock&lt;/a&gt; &lt;a href=&quot;https://twitter.com/jandecaluwe&quot;&gt;@jandecaluwe&lt;/a&gt; &lt;a href=&quot;https://twitter.com/pmarriott&quot;&gt;@pmarriott&lt;/a&gt; No - this particular case is for testbench and modeling can cause issues not knowing what a sim may do&lt;/p&gt;&amp;mdash; Christopher Felton (@FeltonChris) &lt;a href=&quot;https://twitter.com/FeltonChris/statuses/436621463794483200&quot;&gt;February 20, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;In other words, if you are writing your Verilog in normal RTL style then the non-determinism is &lt;em&gt;not&lt;/em&gt; a problem.  When writing Verilog that will not be synthesized (simulation-only code) people rightfully abandon the restrictions of RTL.  As Chris pointed out, people could then fall into the trap of writing code like this example.  I believe that&#39;s true, so let&#39;s look more closely at this example and see what&#39;s going on.&lt;/p&gt;&lt;p&gt;Each initial block is a process executing concurrently.  The first process assigns a value to result and signals the second process that result can be read by assigning a value of one to ready.  The second process blocks until the value of ready changes from zero to one.  It then immediately reads the value of result.  Now, I have some extensive experience writing embedded C-code with multiple threads and processes.  In that world you would be insane to synchronize two threads using simple shared variables like this.  That&#39;s because, similar to Verilog, you can&#39;t predict when your two threads will be scheduled and run by the OS, when interrupts will occur, and so forth.  Instead you would use a synchronization construct provided by the operating system such as a semaphore or mailbox.  So again I ask, why do we care about this Verilog non-determinism?  Isn&#39;t it just the same as in other software environments?&lt;/p&gt;&lt;p&gt;I think the answer to my own question might be, no it&#39;s not the same in plain Verilog.  Sure, SystemVerilog added semaphores and mailboxes (for just this reason, I assume) but plain Verilog does not have those.  Using shared variables is the only way to synchronize and share information between processes (really?).  If I&#39;m not wrong then that is indeed a problem for those who want to write Verilog code at a higher level of abstraction than RTL.  In fact, I&#39;m starting to wonder about the body of verification code that my team has written at work.  Do we have any cases of code like this that could suffer from Verilog&#39;s non-deterministic behavior?  We are using SystemVerilog and the UVM with its TLM interfaces that give you safe ways to communicate between processes so probably not, but I can imagine where someone could be tempted to work outside the nice safe structure of the UVM.&lt;/p&gt;&lt;p&gt;I&#39;m hopeful that others will read this and chime in with any needed clarifications, corrections, and help.  I have some ideas for modifying the example code to make it safer that I will explore in a separate blog entry.  Stay tuned.&lt;/p&gt;&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt; I have written &lt;a href=&quot;http://bryan-murdock.blogspot.com/2014/02/avoiding-verilogs-non-determinism-part-1.html&quot;&gt;the follow-on post&lt;/a&gt; that shows the fix for this particular code example.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/1217918533498489322/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=1217918533498489322' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/1217918533498489322'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/1217918533498489322'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2014/02/is-verilogs-non-determinism-really.html' title='Is Verilog&#39;s Non-determinism Really a Problem?'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-5302550389337434995</id><published>2013-08-02T12:09:00.001-07:00</published><updated>2013-08-02T12:09:08.803-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>SVUnit Upgrade</title><content type='html'>&lt;p&gt;Being a relatively early adopter of &lt;a href=&quot;http://www.agilesoc.com/open-source-projects/svunit/&quot;&gt;svunit&lt;/a&gt; (for unit testing SystemVerilog code), I had a fair amount of code written to work with the early 0.X versions of svunit.  The maintainers of svunit have made some good progress and are now on version 2.3 (as of writing this).  My old tests don&#39;t work with the new version of the framework, but I figured out how to update them.  Just in case anyone else is in the same predicament, I will share the steps I took to fix things:&lt;/p&gt;&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;In the *_unit_test.sv file:&lt;br /&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;remove typedef class c_&amp;lt;UUT&amp;gt;_unit_test&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;keep the module &amp;lt;UUT&amp;gt;_unit_test declaration, but delete everything in the module except for the string name&amp;#x2026; and any interface declarations you may have added&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;delete the c_&amp;lt;UUT&amp;gt;_unit_test class declaration&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;add svunit_testcase svunit_ut; under the string name&amp;#x2026;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Now that this is a module and not a class, tasks and functions declared in here might need to have the automatic keyword added to the declaration in order to behave the same&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;change function new&amp;#x2026; to function void build();&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;change super.new(name); to svunit_ut = new(name);&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;inside task setup, change super.setup(); to svunit_ut.setup();&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;inside task teardown, change super.teardown(); to svunit_ut.teardown();&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;remove (&amp;lt;testname&amp;gt;) from all `SVTEST_END macros (it no longer takes an argument)&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;change last line of file from endclass to endmodule&lt;br /&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That should be it.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/5302550389337434995/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=5302550389337434995' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/5302550389337434995'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/5302550389337434995'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2013/08/svunit-upgrade.html' title='SVUnit Upgrade'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-2731731820320775769</id><published>2013-06-28T10:41:00.000-07:00</published><updated>2013-07-01T08:18:03.807-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="git"/><category scheme="http://www.blogger.com/atom/ns#" term="mercurial"/><category scheme="http://www.blogger.com/atom/ns#" term="revision control"/><title type='text'>Git Branches Are Not Branches</title><content type='html'>&lt;p&gt;Git branches have confused me (someone who uses mercurial a lot and git a little) for a while, I have finally realized why.  The problem is that git branch is a poorly chosen name for the thing that they really are.  You see, all the changeset history in git is stored as a Directed Acyclic Graph (DAG).  The code history might be simple and linear which will make the DAG have a simple path like so (o&#39;s are nodes in the graph, called changesets, -&#39;s are references from one node to another, with time progressing from left to right):&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;o-o-o-o-o&lt;/pre&gt;&lt;p&gt;Or the code history and corresponding DAG could be more complicated:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;                 o-o-o
                /     
    o-o-o     o-o-o-o-o
   /     \   /         \
o-o-o-o-o-o-o-o-o-o-----o-o
&lt;/pre&gt;&lt;p&gt;Most English language speakers would agree that those parts of the DAG (code history) where a node has two children (representing two parallel lines of development) are called, branches.  The above example has four branches in the history, four branches in the DAG, right?  The confusion with git branches, however, is that the above diagram may actually represent a git repository with only one git branch, and the diagram above that with the linear history could represent a git repository with any number git branches.  A git branch is not a branch in the DAG representation of the changeset history.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;The reason this is possible is because a git branch is actually just a label attached to a changeset.  It&#39;s just a name associated with a node in the DAG, and you can add labels to any node you want.  You can also delete these labels any time you want as well.  I believe the git developers chose to use the term branch for these labels because the labels are primarily used to keep track of DAG branches, but in practice the overloading of the term causes a lot of confusion.  When a git users says he&#39;s deleting a branch, he&#39;s really just deleting the label on the branch in the DAG.  When a git user shows you a linear history like in the first diagram and then starts talking about the branches contained in that history, he&#39;s really just talking about the different labels applied to various changesets in that history.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;Labels such as these are very common in computer programs and there are a number of common English terms that convey a much more clear picture of their function and purpose: label, tag, pointer, and bookmark come to mind.  There are &lt;a href=&quot;http://think-like-a-git.net/&quot;&gt;pages and pages of explanation on the internet&lt;/a&gt; that try to explain and clarify what git branches are and what you can and can&#39;t do with them, when, I believe, using a better name would alleviate the need for most of that.  Personally, I now just say label or tag or bookmark in my head whenever I read branch in a git context and things are much less confusing.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;I hope that helps someone besides me who is learning git.  Next week I&#39;ll talk about how the git index is nothing like an index :-)&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;(By the way, if you have a choice in which to use, mercurial works about the same as git and has better names for things)&lt;br /&gt;
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/2731731820320775769/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=2731731820320775769' title='11 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/2731731820320775769'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/2731731820320775769'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2013/06/git-branches-are-not-branches.html' title='Git Branches Are Not Branches'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>11</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-7748602474566956351</id><published>2013-06-11T15:21:00.000-07:00</published><updated>2013-07-16T15:26:03.913-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>SystemVerilog Constraint Gotcha</title><content type='html'>&lt;p&gt;I found another one (I guess I still need to order &lt;a href=&quot;http://www.amazon.com/Verilog-SystemVerilog-Gotchas-Common-Coding/dp/1441944028&quot;&gt;that book&lt;/a&gt;).  In using the UVM, I have some sequences randomizing other sub sequences.  I really want it to work like this (simplified, non-UVM) example:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;class&lt;/span&gt; Foo;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;rand&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; bar;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;display&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;bar: %0d&quot;&lt;/span&gt;, bar);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endclass&lt;/span&gt;

&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;class&lt;/span&gt; Bar;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; bar;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;body&lt;/span&gt;();
      Foo foo = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;();
      bar = 3;
      foo.&lt;span style=&quot;color: #008b00;&quot;&gt;display&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000;&quot;&gt;assert&lt;/span&gt;(foo.&lt;span style=&quot;color: #008b00;&quot;&gt;randomize&lt;/span&gt;() &lt;span style=&quot;color: #8b0000;&quot;&gt;with&lt;/span&gt; {bar == &lt;span style=&quot;color: #8b0000;&quot;&gt;this&lt;/span&gt;.bar;});
      foo.&lt;span style=&quot;color: #008b00;&quot;&gt;display&lt;/span&gt;();
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endclass&lt;/span&gt;

&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   Bar bar;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      bar = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;();
      bar.&lt;span style=&quot;color: #008b00;&quot;&gt;body&lt;/span&gt;();
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;See the problem there?  Here&#39;s what prints out when you run the above:&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;bar: 0
bar: -1647275392
&lt;/pre&gt;&lt;p&gt;foo.bar is not constrained to be 3 like you might expect.  That&#39;s because this.bar refers to bar that is a member of class Foo, not bar that&#39;s a member of class Bar.  As far as I can tell, there is no way to refer to bar that is a member of Bar in the constraint.  I guess Foo could have a reference back up to Bar, but that&#39;s really awkward.  Has anyone else run into this?  How do you deal with it?&lt;/p&gt;&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;: Thank you to Mihai Oncica for pointing out that the local keyword with the scope resolution operator can be used to solve this problem.  Here is the now working code example:&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;class&lt;/span&gt; Foo;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;rand&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; bar;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;display&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;bar: %0d&quot;&lt;/span&gt;, bar);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endclass&lt;/span&gt;

&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;class&lt;/span&gt; Bar;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; bar;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;body&lt;/span&gt;();
      Foo foo = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;();
      bar = 3;
      foo.&lt;span style=&quot;color: #008b00;&quot;&gt;display&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000;&quot;&gt;assert&lt;/span&gt;(foo.&lt;span style=&quot;color: #008b00;&quot;&gt;randomize&lt;/span&gt;() &lt;span style=&quot;color: #8b0000;&quot;&gt;with&lt;/span&gt; {bar == &lt;span style=&quot;color: #8b0000;&quot;&gt;local&lt;/span&gt;::bar;});
      foo.&lt;span style=&quot;color: #008b00;&quot;&gt;display&lt;/span&gt;();
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endclass&lt;/span&gt;

&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   Bar bar;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      bar = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;();
      bar.&lt;span style=&quot;color: #008b00;&quot;&gt;body&lt;/span&gt;();
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;And here is the result:&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;bar: 0
bar: 3
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/7748602474566956351/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=7748602474566956351' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/7748602474566956351'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/7748602474566956351'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2013/06/systemverilog-constraint-gotcha.html' title='SystemVerilog Constraint Gotcha'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-7347930656136460535</id><published>2013-04-20T07:42:00.003-07:00</published><updated>2013-04-20T11:19:42.202-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="bitcoin"/><category scheme="http://www.blogger.com/atom/ns#" term="linkage"/><category scheme="http://www.blogger.com/atom/ns#" term="meta"/><title type='text'>No More Ads, Send Tips with Bitcoin</title><content type='html'>Summary: ads are gone, send me bitcoin to say thanks instead.&lt;br /&gt;
&lt;br /&gt;
I have always kept notes for myself to remind myself how to do various things.  I have also kept a journal since a very young age where I often include opinions and thoughts on various matters.  At some point, years ago, I got the idea that I should post some of the notes and thoughts in case they would help someone else.  That requires a lot more work than just typing stuff quickly into a text file, though, so I needed a little more motivation.  I mean, sharing and helping others is great motivation, but when I read about Adsense from Google, and how Google could show people links to products and services related to my posts, and I could make a few bucks if people thought those links were useful and clicked on them, and how it could help out the people providing those products and services as well, it felt like this great intertwined synergy of helping people out and possibly even gaining some monetary reward as well.  And it sort of worked.  I put some effort into this blog and my Adsense account started slowly accumulating some credits.&lt;br /&gt;
&lt;br /&gt;
The one downside was, well, advertising.  It&#39;s often more annoying than helpful.  Google&#39;s adds were the least annoying I&#39;ve seen, but still not always that great.  To be honest, this blog isn&#39;t updated enough and isn&#39;t high traffic enough that I&#39;m really sending a lot of business anyone&#39;s way, and I&#39;m not making any kind of real money at all with the adds.  I&#39;ve thought about this on and off over the years, but haven&#39;t changed anything, until now.  What happened is, I finally read up on this crazy thing I&#39;d seen mentioned on &lt;a href=&quot;http://slashdot.org/&quot;&gt;Slashdot&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt; called &lt;a href=&quot;https://www.weusecoins.com/&quot;&gt;bitcoin&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
The notion of a digital currency seemed ludicrous when I first read headlines and article summaries about it, and so I ignored it for a while.  Now, the more I read about it, the more it makes sense, and the more excited I get about it.  You really should go to &lt;a href=&quot;https://www.weusecoins.com/&quot;&gt;We Use Coins&lt;/a&gt; and learn more, they can explain it better than me.  The relevant part of bitcoin to this post is that it is super easy to send money from one person to another with bitcoin.  No banks, escrow services, or credit cards are required.  If you want to donate money to me to say thank you it&#39;s as simple as firing up your bitcoin wallet software and sending coins to this address: 15RNcXeuhjQRKnfLGyVZxpeER8MUmrYLMq.  It&#39;s a lot like cash that way, only you don&#39;t have be standing next to the person you want to pay in order to make the transaction.  Way cool.  Liberating, in fact.  That&#39;s what really appeals to me.  The lack of central control, and the ease and freedom it provides.  Nothing crazy about that.&lt;br /&gt;
&lt;br /&gt;
Now, I didn&#39;t just put that bitcoin address in the sidebar of my blog, I used a &lt;a href=&quot;https://coinbase.com/&quot;&gt;Coinbase&lt;/a&gt; payment button.  Coinbase is an online wallet, which is a little more convenient (but less decentralized and free) than running the bitcoin software on your own machine (of course, you can do both).  The cool thing the button of theirs provides is a unique bitcoin address for every transaction.  That just makes the payments more anonymous.  I could have written software to generate those addresses and the button myself, but I&#39;m OK with letting them handle that for me.  At least for now as I&#39;m testing the bitcoin waters.</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/7347930656136460535/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=7347930656136460535' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/7347930656136460535'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/7347930656136460535'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2013/04/no-more-ads-send-tips-with-bitcoin.html' title='No More Ads, Send Tips with Bitcoin'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-1385815532727505725</id><published>2013-04-12T08:20:00.000-07:00</published><updated>2013-04-12T08:21:39.554-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="linkage"/><category scheme="http://www.blogger.com/atom/ns#" term="sql"/><title type='text'>List Foreign Keys in Your Postgresql Database</title><content type='html'>&lt;p&gt;I wanted to know which tables referenced a certain other table in my database, but being a very occasional user of SQL, I didn&#39;t know where to begin to find that.  Fortunately, the internet had &lt;a href=&quot;http://www.postgresql.org/message-id/22895.1226088573@sss.pgh.pa.us&quot;&gt;the answer&lt;/a&gt;, from &lt;a href=&quot;https://en.wikipedia.org/wiki/Tom_Lane_(computer_scientist)&quot;&gt;Tom Lane&lt;/a&gt; himself actually.  Just run this query on your Postgresql database:&lt;/p&gt;&lt;code&gt;&lt;pre&gt;select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = &#39;f&#39;) ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid;
&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;That shows all foreign key relationships in your database.  If you just want to see which tables reference a particular table, do this (replace my_table and my_referenced_column with the table column you want to see the references to):&lt;/p&gt;&lt;code&gt;&lt;pre&gt;select confrelid::regclass, af.attname as fcol,
       conrelid::regclass, a.attname as col
from pg_attribute af, pg_attribute a,
  (select conrelid,confrelid,conkey[i] as conkey, confkey[i] as confkey
   from (select conrelid,confrelid,conkey,confkey,
                generate_series(1,array_upper(conkey,1)) as i
         from pg_constraint where contype = &#39;f&#39;) ss) ss2
where af.attnum = confkey and af.attrelid = confrelid and
      a.attnum = conkey and a.attrelid = conrelid 
  AND confrelid::regclass = &#39;my_table&#39;::regclass AND af.attname = &#39;my_referenced_column&#39;;
&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;I love that I can get personal attention from the main developers of software tools that I use.  Even if it was really only personal for the original person who asked the question :-)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/1385815532727505725/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=1385815532727505725' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/1385815532727505725'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/1385815532727505725'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2013/04/list-foreign-keys-in-your-postgresql.html' title='List Foreign Keys in Your Postgresql Database'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-761717284478724751</id><published>2013-03-15T15:10:00.000-07:00</published><updated>2014-02-26T08:44:08.123-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="eda"/><category scheme="http://www.blogger.com/atom/ns#" term="linkage"/><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>Free Verilog Simulators</title><content type='html'>At &lt;a href=&quot;http://dvcon.org/2013_home&quot;&gt;DVCon 2013&lt;/a&gt; I asked &lt;a href=&quot;http://www.coolverification.com/&quot;&gt;JL Gray&lt;/a&gt;&#39;s panel if we would ever have Free tools, like the software world.  None of panelists seemed to think so, one of the panelists, a Mentor employee, scoffed, &quot;you get what you pay for with free tools.&quot;  Never mind that their (and Cadence&#39;s and Synopsys&#39;s) products are very likely developed with tools that contain millions of lines of Free software.&lt;br /&gt;
&lt;br /&gt;
So, to work towards answering my own question, I spent a little time and looked for Free/Open Source verilog simulators.  Here&#39;s what I found:&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;https://sites.google.com/site/iverilog/&quot;&gt;Icarus Verilog&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://sourceforge.net/projects/gplcver/&quot;&gt;GPL Cver&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://sourceforge.net/projects/pvsim/&quot;&gt;PVSim Verilog Simulator&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://sourceforge.net/projects/veriwell/&quot;&gt;VeriWell Verilog Simulator&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
I have personally used Icarus and Cver before, but not very extensively. &amp;nbsp;They were usable and seemed pretty complete, for Verilog. &amp;nbsp;None of the above claim any support of SystemVerilog except for Icarus. &amp;nbsp;The Icarus developer at one point expressed&amp;nbsp;abhorrence&amp;nbsp;at SystemVerilog but it seems support for some parts of the language have been added.&lt;br /&gt;
&lt;br /&gt;
PVSim and VeriWell were new to me. &amp;nbsp;I&#39;ll give them a try, hopefully soon, and post more information.&lt;br /&gt;
&lt;br /&gt;
Another one that should be mentioned is &lt;a href=&quot;http://www.veripool.org/wiki/verilator&quot;&gt;Verilator&lt;/a&gt;. &amp;nbsp;I have downloaded and played with this one too. &amp;nbsp;It only supports synthesizable Verilog, so have fun writting a testbench. &amp;nbsp;I think the intent is for you to write your testbench in C++, so if you like that idea than this could be a good one to try too.&lt;br /&gt;
&lt;br /&gt;
Did I miss any?&lt;br /&gt;
&lt;br /&gt;
UPDATE: All of these (except Verilator) plus a host of other free EDA tools are available to easily try out at &lt;a href=&quot;http://www.edaplayground.com/&quot;&gt;EDA Playground&lt;/a&gt;.  Go there now, it&#39;s a fun place to play.&lt;br /&gt;
&lt;br /&gt;
</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/761717284478724751/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=761717284478724751' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/761717284478724751'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/761717284478724751'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2013/03/free-verilog-simulators.html' title='Free Verilog Simulators'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-7575829082720758327</id><published>2012-12-21T14:06:00.001-08:00</published><updated>2012-12-21T14:07:13.444-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>SystemVerilog String Literal &quot;Gotcha&quot;</title><content type='html'>&lt;p&gt;I just ran into another fun SystemVerilog Gotcha. Look this code over and see what you think should happen:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;string&lt;/span&gt; foo[&lt;span style=&quot;color: #8b0000;&quot;&gt;byte&lt;/span&gt;];
   &lt;span style=&quot;color: #8b0000;&quot;&gt;byte&lt;/span&gt; bar;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;%0d&quot;&lt;/span&gt;, &lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;a string&quot;&lt;/span&gt; == foo[&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;not a byte&quot;&lt;/span&gt;]);
      foo[&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;e&quot;&lt;/span&gt;] = &lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;a string&quot;&lt;/span&gt;;
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;%0d&quot;&lt;/span&gt;, &lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;a string&quot;&lt;/span&gt; == foo[&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;not a byte&quot;&lt;/span&gt;]);
      bar = &lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;not a byte&quot;&lt;/span&gt;;
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;bar: %0s&quot;&lt;/span&gt;, bar);
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;Compile error, right?  You can&#39;t index into an associative array with a string when it is declared to take a byte, can you?  And you can&#39;t assign a string to a variable of type byte, right?&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;Ha!  This actually compiles and runs without any errors or warnings.  String literals are packed arrays of bytes and they are automatically truncated to the width of the thing they are being assigned to.  Here&#39;s the output from running the above code:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;0
1
bar: e
&lt;/pre&gt;&lt;p&gt;After my last blog post I was informed that there&#39;s a book that has 101 SystemVerilog Gotchas in it.  I didn&#39;t believe it, but I think I&#39;m starting to see how it could be possible.&lt;br /&gt;
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/7575829082720758327/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=7575829082720758327' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/7575829082720758327'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/7575829082720758327'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2012/12/systemverilog-string-literal-gotcha.html' title='SystemVerilog String Literal &quot;Gotcha&quot;'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-6989630358702620256</id><published>2012-11-14T10:11:00.000-08:00</published><updated>2012-12-21T14:07:04.902-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>SystemVerilog Fork Disable &quot;Gotchas&quot;</title><content type='html'>&lt;div id=&quot;content&quot;&gt;&lt;p&gt;This is a long post with a lot of SystemVerilog code.  The purpose of this entry is to hopefully save you from beating your head against the wall trying to figure out some of the subtleties of SystemVerilog processes (basically, threads).  Subtleties like these are commonly referred to in the industry as &quot;Gotchas&quot; which makes them sound so playful and fun, but they really aren&#39;t either.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;I encourage you to run these examples with your simulator (if you have access to one) so that a) you can see the results first hand and better internalize what&#39;s going on, and b) you can tell me in the comments if this code works fine for you and I&#39;ll know I should go complain to my simulator vendor.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;OK, I&#39;ll start with a warm-up that everyone who writes any Verilog or SystemVerilog at all should be aware of, tasks are static by default.  If you do this:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;waited %0d, then did stuff&quot;&lt;/span&gt;, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join&lt;/span&gt; 
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;both do_stuff calls will wait for 5 time units, and you see this:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;waited 5, then did stuff
waited 5, then did stuff
&lt;/pre&gt;&lt;p&gt;I suppose being static by default is a performance/memory-use optimization, but it&#39;s guaranteed to trip up programmers who started with different languages.  The fix is to make the task &quot;automatic&quot; instead of static:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;automatic&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;waited %0d, then did stuff&quot;&lt;/span&gt;, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join&lt;/span&gt; 
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;And now you get what you expected:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;waited 5, then did stuff
waited 10, then did stuff
&lt;/pre&gt;&lt;p&gt;Now let&#39;s get a little more tricky.  Say you want to only wait until one of the forked processes finishes, so you do this:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;automatic&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;waited %0d, then did stuff&quot;&lt;/span&gt;, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_any&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;fork has been joined&quot;&lt;/span&gt;);
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;You&#39;ll get this output:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;waited 5, then did stuff
fork has been joined
waited 10, then did stuff
&lt;/pre&gt;&lt;p&gt;That&#39;s fine, but that extra action from the slower do_stuff after the fork-join_any block has finished might not be what you wanted.  You can name the fork block and disable it to take care of that, like so:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;automatic&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;waited %0d, then did stuff&quot;&lt;/span&gt;, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; : do_stuff_fork
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_any&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;fork has been joined&quot;&lt;/span&gt;);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;disable&lt;/span&gt; do_stuff_fork;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;Unless your simulator, like mine, &quot;in the current release&quot; will not disable sub-processes created by a fork-join_any statement.  Bummer.  It&#39;s OK, though, because SystemVerilog provides a disable fork statement that disables all active threads of a calling process (if that description doesn&#39;t already make you nervous, just wait).  Simply do this:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;automatic&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;waited %0d, then did stuff&quot;&lt;/span&gt;, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; : do_stuff_fork
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_any&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;fork has been joined&quot;&lt;/span&gt;);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;disable&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt;;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;And you get:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;waited 5, then did stuff
fork has been joined
&lt;/pre&gt;&lt;p&gt;Nothing wrong there.  Now let&#39;s say you have a class that is monitoring a bus.  Using a classes are cool because if you have two buses you can create two instances of your monitor class, one for each bus.  We can expand our code example to approximate this scenario, like so:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;class&lt;/span&gt; a_bus_monitor;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; id;
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; id_in);
      id = id_in;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;automatic&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d waited %0d, then did stuff&quot;&lt;/span&gt;, id, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; : do_stuff_fork
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10 + id);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5 + id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_any&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d fork has been joined&quot;&lt;/span&gt;, id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;disable&lt;/span&gt; do_stuff_fork;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endclass&lt;/span&gt; 
 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   a_bus_monitor abm1;
   a_bus_monitor abm2;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      abm1 = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(1);
      abm2 = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(2);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         abm2.&lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
         abm1.&lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;main fork has been joined&quot;&lt;/span&gt;);
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;Note that I went back to disabling the fork by name instead of using the disable fork statement.  This is to illustrate another gotcha.  That disable call will disable both instances of the fork, monitor 1&#39;s instance &lt;b&gt;and&lt;/b&gt; monitor 2&#39;s.  You get this output:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;monitor 1 waited 6, then did stuff
monitor 1 fork has been joined
monitor 2 fork has been joined
main fork has been joined
&lt;/pre&gt;&lt;p&gt;Because disabling by name is such a blunt instrument, poor monitor 2 never got a chance.  Now, if you turn the disable into a disable fork, like so:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;class&lt;/span&gt; a_bus_monitor;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; id;
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; id_in);
      id = id_in;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;automatic&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d waited %0d, then did stuff&quot;&lt;/span&gt;, id, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; : do_stuff_fork
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10 + id);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5 + id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_any&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d fork has been joined&quot;&lt;/span&gt;, id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;disable&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt;;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endclass&lt;/span&gt; 
 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   a_bus_monitor abm1;
   a_bus_monitor abm2;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      abm1 = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(1);
      abm2 = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(2);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         abm2.&lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
         abm1.&lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;main fork has been joined&quot;&lt;/span&gt;);
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;You get what you expect:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;monitor 1 waited 6, then did stuff
monitor 1 fork has been joined
monitor 2 waited 7, then did stuff
monitor 2 fork has been joined
main fork has been joined
&lt;/pre&gt;&lt;p&gt;It turns out that, like when you disable something by name, disable fork is a pretty blunt tool also.  Remember my ominous parenthetical &quot;just wait&quot; above?  Here it comes.  Try adding another fork like this (look for the fork_something task call):&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;class&lt;/span&gt; a_bus_monitor;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; id;
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; id_in);
      id = id_in;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;fork_something&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         &lt;span style=&quot;color: #8b0000;&quot;&gt;# 300&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d: you&#39;ll never see this&quot;&lt;/span&gt;, id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_none&lt;/span&gt; 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;automatic&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d waited %0d, then did stuff&quot;&lt;/span&gt;, id, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
      &lt;span style=&quot;color: #008b00;&quot;&gt;fork_something&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; : do_stuff_fork
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10 + id);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5 + id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_any&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d fork has been joined&quot;&lt;/span&gt;, id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;disable&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt;;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endclass&lt;/span&gt; 
 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   a_bus_monitor abm1;
   a_bus_monitor abm2;
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      abm1 = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(1);
      abm2 = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(2);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         abm2.&lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
         abm1.&lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;main fork has been joined&quot;&lt;/span&gt;);
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;The output you get is:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;monitor 1 waited 6, then did stuff
monitor 1 fork has been joined
monitor 2 waited 7, then did stuff
monitor 2 fork has been joined
main fork has been joined
&lt;/pre&gt;&lt;p&gt;Yup, fork_something&#39;s fork got disabled too.  How do you disable only the processes inside the fork you want?  You have to wrap your fork-join_any inside of a fork-join, of course.  That makes sure that there aren&#39;t any other peers or child processes for disable fork to hit.  Here&#39;s the zoomed in view of that (UPDATE: added missing begin...end for outer fork):&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
   &lt;span style=&quot;color: #008b00;&quot;&gt;fork_something&lt;/span&gt;();
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; : do_stuff_fork
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10 + id);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5 + id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_any&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d fork has been joined&quot;&lt;/span&gt;, id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;disable&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt;;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;And now you get what you expect:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;example&quot;&gt;monitor 2 fork has been joined
monitor 1 fork has been joined
monitor 1 waited 6, then did stuff
monitor 2 waited 7, then did stuff
main fork has been joined
monitor 1 waited 11, then did stuff
monitor 2 waited 12, then did stuff
monitor 2: you&#39;ll never see this
monitor 1: you&#39;ll never see this
&lt;/pre&gt;&lt;p&gt;So, wrap your fork-join_any inside a fork-join or else it&#39;s, &quot;Gotcha!!!&quot;  (I can almost picture the SystemVerilog language designers saying that out loud, with maniacal expressions on their faces).&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;But wait, I discovered something even weirder.  Instead of making that wrapper fork, you can just move the fork_something() call after the disable fork call and then it doesn&#39;t get disabled (you actually see the &quot;you&#39;ll never see this&quot; message, try it).  So, you might think, just reordering your fork and disable fork calls and that will fix your problem.  It will, &lt;b&gt;unless&lt;/b&gt; (I learned by sad experience) the monitor task is being repeatedly called inside a forever loop.  Here&#39;s a simplification of the code that really inspired me to write this all up:&lt;br /&gt;
&lt;/p&gt;&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;class&lt;/span&gt; a_bus_monitor;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; id;
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; id_in);
      id = id_in;
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;fork_something&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         &lt;span style=&quot;color: #8b0000;&quot;&gt;# 30&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d: you&#39;ll never see this&quot;&lt;/span&gt;, id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_none&lt;/span&gt; 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endfunction&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;automatic&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(&lt;span style=&quot;color: #8b0000;&quot;&gt;int&lt;/span&gt; wait_time);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;#wait_time&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d waited %0d, then did stuff&quot;&lt;/span&gt;, id, wait_time);
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; &lt;span style=&quot;color: #27408b; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #27408b; font-style: italic;&quot;&gt;do_stuff&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;monitor_subtask&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; : do_stuff_fork
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(10 + id);
         &lt;span style=&quot;color: #008b00;&quot;&gt;do_stuff&lt;/span&gt;(5 + id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_any&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;monitor %0d fork has been joined&quot;&lt;/span&gt;, id);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;disable&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt;;
      &lt;span style=&quot;color: #008b00;&quot;&gt;fork_something&lt;/span&gt;();
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;task&lt;/span&gt; &lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;forever&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
         &lt;span style=&quot;color: #008b00;&quot;&gt;monitor_subtask&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endtask&lt;/span&gt; 
 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endclass&lt;/span&gt; 
 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;module&lt;/span&gt; top;
   a_bus_monitor abm1;
   a_bus_monitor abm2;
 
   &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;initial&lt;/span&gt; &lt;span style=&quot;color: #8b0000;&quot;&gt;begin&lt;/span&gt; 
      abm1 = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(1);
      abm2 = &lt;span style=&quot;color: #8b0000;&quot;&gt;new&lt;/span&gt;(2);
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;fork&lt;/span&gt; 
         abm2.&lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
         abm1.&lt;span style=&quot;color: #008b00;&quot;&gt;monitor&lt;/span&gt;();
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;join_none&lt;/span&gt; 
      &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$display&lt;/span&gt;(&lt;span style=&quot;color: #8b7500;&quot;&gt;&quot;main fork has been joined&quot;&lt;/span&gt;);
      &lt;span style=&quot;color: #8b0000;&quot;&gt;# 60&lt;/span&gt; &lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;$finish&lt;/span&gt;;
   &lt;span style=&quot;color: #8b0000;&quot;&gt;end&lt;/span&gt; 
&lt;span style=&quot;color: #8b0000; font-weight: bold;&quot;&gt;endmodule&lt;/span&gt; 
&lt;/pre&gt;&lt;p&gt;The fork inside the fork_something task will get disabled before it can do its job, even though it&#39;s after the disable fork statement.  Gotcha!!!  Muhahahah!&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;My advice?  Just always wrap any disable fork calls inside a fork-join.&lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/6989630358702620256/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=6989630358702620256' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6989630358702620256'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6989630358702620256'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2012/11/systemverilog-fork-disable-gotchas.html' title='SystemVerilog Fork Disable &quot;Gotchas&quot;'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-2398150893508114972</id><published>2012-05-30T09:00:00.000-07:00</published><updated>2012-12-21T14:07:25.317-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>EDA Marketing Problem</title><content type='html'>I started out trying to write an eloquent essay on the merits of different ways of sharing new ideas and information in order to further the art of digital design verification (in other words, how to market this stuff), but I couldn&#39;t make it sound right.  Instead, let me just point to some recent examples:&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;Good examples&lt;/h3&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.vmmcentral.org/vmartialarts/2012/05/namespaces-build-order-and-chickens/?goback=%2Egde_1410987_member_115390751&quot;&gt;Namespaces, Build Order, and Chickens&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://www.youtube.com/playlist?list=PL7FE0CE1170C06FDE&quot;&gt;Cadence&#39;s UVM video series&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
These are brief and to-the-point.  If you have a question, they quickly give you answer.  If you are taking 2 or 3 minutes to browse the internet while waiting for a simulation to finish, maybe even on your phone while you take a little time away from your desk, you can get all the info in that time.  Perfect.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;Examples of Ideas That Could be Marketed Better&lt;/h3&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.verilab.com/resources/papers-and-presentations/#SNUG+Europe+2012%3A+I+Spy+with+My+VPI+-+Monitoring+signals+by+name%2C+for+the+UVM+register+package+and+more&quot;&gt;Monitoring signals by name, for the UVM register package and more&lt;/a&gt; &lt;br /&gt;
&lt;br /&gt;
and:&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;www.verilab.com/blog/2012/03/dvcon-2012-a-30-minute-guide-to-continuous-integration/&quot;&gt;A 30 Minute Project Makeover Using Continuous Integration&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
First of all, kudos to Verilab for sharing ideas, knowledge, and source code as much they do.  The next section of this document could be, &lt;em&gt;Example of People that Don&#39;t Share Knowledge At All&lt;/em&gt; and it would be huge, but, you know, there&#39;d be nothing to link to.  So, I do not intend to disparage or discourage, rather to point out some areas for improvement.  With both of these gems, first of all, I wasn&#39;t even sure what exactly I should link to.  The PDF directly?  The paragraph of text introducing the link to the PDF?  Or should I link to the blog entry that links to the introduction text that links to the PDF?  Next, the length.  The first is a 20 page PDF, the second is 7 pages.  If you really want to spread knowledge and advance the art, get to the good stuff quickly!  My simulations don&#39;t take &lt;em&gt;that&lt;/em&gt; long to run.  I was about to say more on this, but I&#39;m going to follow my own advice. I&#39;ll expound in the comments if you ask me to.  Finally, PDFs.  Really?  This is the internet.  Use html.  Everything can reformat and display html nicely enough, desktops, laptops, phones.  Even printers.  PDFs, not so much.&lt;br /&gt;
&lt;br /&gt;
In conclusion, I love that people in the EDA world, and in verification specifically, are sharing more and more information on the internet.  It can be even more effective and help advance the art further if we do so in a modern internet-y way using good marketing techniques.&lt;br /&gt;
</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/2398150893508114972/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=2398150893508114972' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/2398150893508114972'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/2398150893508114972'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2012/05/eda-marketing-problem.html' title='EDA Marketing Problem'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-1939756718577079886</id><published>2012-05-29T10:39:00.001-07:00</published><updated>2012-12-21T14:08:20.037-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="python"/><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>Environment Manager for More than Just Python</title><content type='html'>This whole virtualenv thing is pretty cool, but it has always seemed too specific to Python for me.  Let me see if I can explain.  At first I had no use for virtualenv whatsoever, I could just sudo apt-get install python-whatever and get what I needed.  As my distro got older and I didn&#39;t want to update my whole system, I started using virtualenv and pip to install and manage python packages instead of apt.  It&#39;s great, except that the postgresql packages that came with my distro were getting crusty too.  Because postgresql is not a python package, I get no help from virtualenv.  Does anyone else have this problem?  How do you deal with it?&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
This reminds me of a very old problem from the chip design (EDA, ASIC design, whatever you want to call it) world.  To design chips you buy licenses for expensive simulators and synthesis tools, and those tools are constantly being revved, fixing old bugs, introducing new features, and unfortunately, introducing new bugs.  Because of that you never ever upgrade from one version to the next, you always install a whole new copy of each version, and then you manipulate your PATH and other environment variables that the tools use according to which version you want to experiment with today.  I once worte a tool that&#39;s not too different from virtualenv if you squint a little, but it was more generic for managing your unix environment in general.  It was great for dealing with all the versions of chip design tools we used.  Unfortunately it&#39;s locked inside the company I wrote it for.  I have since discovered that an open source project very similar to the one I wrote &lt;a href=&quot;http://modules.sourceforge.net/&quot;&gt;exists&lt;/a&gt;, but it uses far too much tcl ;-)&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
I started an open source project to try and tackle this again (before I had used virtualenv, actually), and I have wondered if it could solve this general problem for not just python.  It&#39;s pretty raw, but you can see it &lt;a href=&quot;https://bitbucket.org/krupan/albion&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
If you browsed around that project, you can see I haven&#39;t gone very far with it.  It works for me, but it needs some love to make it easier for others to get up an running with it.  I&#39;m more than open to questions on how to install and use it, feedback on the design and usage model, and to contributions from others.</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/1939756718577079886/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=1939756718577079886' title='7 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/1939756718577079886'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/1939756718577079886'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2012/05/environment-manager-for-more-than-just.html' title='Environment Manager for More than Just Python'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-5551851878485191762</id><published>2012-05-10T08:27:00.004-07:00</published><updated>2012-05-10T08:32:39.259-07:00</updated><title type='text'>Mercurial Now Has commit --amend</title><content type='html'>Mercurial &lt;a href=&quot;http://mercurial.selenic.com/wiki/WhatsNew#Mercurial_2.2.1_.282012-05-03.29&quot;&gt;2.2.1&lt;/a&gt; is out, and, among other new features and improvements, the commit command now has a &lt;code&gt;--amend&lt;/code&gt; option.  Git has had this for a while.  Before 2.2 you could get the same functionality in Mercurial by using the mq extension, but it took at least 3 commands (qimport, qrefresh, qfinish).  It&#39;s nice that you can do it with just one command now.  Mercurial&#39;s relatively new &lt;a href=&quot;/2012/02/mercurial-as-of-21-now-has-phases.html&quot;&gt;phases&lt;/a&gt; come into play with &lt;code&gt;--amend&lt;/code&gt; in that, by default, they will prevent you from amending a commit that has been pushed to or pulled from a remote repository.  It&#39;s a nice little safety net to have, and of course you can override that behavior if you need.&lt;br /&gt;
&lt;br /&gt;
It&#39;s nice to see this incredibly capable and easy-to-use tool get even better.</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/5551851878485191762/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=5551851878485191762' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/5551851878485191762'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/5551851878485191762'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2012/05/mercurial-now-has-commit-amend.html' title='Mercurial Now Has commit --amend'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-8894167722391348584</id><published>2012-02-06T11:10:00.000-08:00</published><updated>2012-02-06T11:24:47.561-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="git"/><category scheme="http://www.blogger.com/atom/ns#" term="mercurial"/><category scheme="http://www.blogger.com/atom/ns#" term="revision control"/><title type='text'>Mercurial (as of 2.1) Now Has Phases</title><content type='html'>&lt;p&gt;In &lt;a href=&quot;/2012/01/what-is-so-wrong-with-mercurials-named.html&quot;&gt;my last post&lt;/a&gt; I pondered (ranted?) on the reluctance of Mercurial people to edit repository history, especially as compared to git people.  Today I noticed that Mercurial 2.1 has been released, and it has a new feature that makes editing your local repository much safer, &lt;a href=&quot;http://www.logilab.org/blogentry/88203&quot;&gt;phases&lt;/a&gt; (more detail &lt;a href=&quot;http://mercurial.selenic.com/wiki/Phases&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To me this looks like a really cool idea.  Phases explicitly mark changesets as either public (have been pushed or pulled, and should not be edited) or draft (still local to your repository and can be freely edited).  Changesets are given a phase automatically behind the scenes (though you can override this, of course), and history editing tools respect phases so that now it is even harder to shoot yourself in the foot when editing your repository history with tools like rebase or mq.&lt;/p&gt;

&lt;p&gt;There is also one more phase, secret, that can be enabled for use with patches in your Mercurial Queues.  Secret changesets will not be pushed, pulled, or cloned (or even show up in the output of incoming or outgoing).  That&#39;s a nice touch too.&lt;/p&gt;

&lt;p&gt;I wonder if git will ever pick this idea up?  Git users seem to already be pretty comfortable with history editing procedures, but I have also read (old?) debates about when it is a good idea and when it is definitely a bad idea to use rebase with git repositories.  It seems like phases could clear up confusion in the git world too.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/8894167722391348584/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=8894167722391348584' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/8894167722391348584'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/8894167722391348584'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2012/02/mercurial-as-of-21-now-has-phases.html' title='Mercurial (as of 2.1) Now Has Phases'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-5610089624746416208</id><published>2012-01-16T08:49:00.001-08:00</published><updated>2012-01-16T10:10:49.887-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="mercurial"/><category scheme="http://www.blogger.com/atom/ns#" term="revision control"/><title type='text'>What Is So Wrong With Mercurial&#39;s Named Branches?</title><content type='html'>&lt;p&gt;I just installed the very latest version of mercurial, &lt;a href=&quot;http://mercurial.selenic.com/wiki/WhatsNew#Mercurial_2.0.2_.282012-01-01.29&quot;&gt;2.0.2&lt;/a&gt;.  It added a new little feature that warns you when you create a branch.  Huh?  This is what it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hg branch foo
marked working directory as branch foo
(branches are permanent and global, did you want a bookmark?)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Really?  Have we let the git advocates push us this far?  Do we really need to start discouraging named branches?&lt;/p&gt;

&lt;p&gt;I googled around to see if I could find where the self-hate for mercurial&#39;s named branches is coming from and I found things like &lt;a href=&quot;http://mercurial.selenic.com/wiki/BranchingExplained&quot;&gt;this&lt;/a&gt;, &quot;it is almost never a good idea to use this facility for short-term branching, since branches created this way are inherently &#39;eternal&#39;.&quot;  (those quotes around eternal are good, actually, but you didn&#39;t explain why they should be there), and &lt;a href=&quot;http://ghostinthecode.posterous.com/choosing-how-to-branch-in-mercurial&quot;&gt;this&lt;/a&gt;, &quot;you can never really delete branches (since that would mean altering older commits).&quot;  (editing history, oh noes!), and others like this.  And these were all written by apparent mercurial supporters!  I understand when a git developer writes misinformation about mercurial and uses it to try and make git look better (that&#39;s only human), but we mercurial users should know not to listen to it!&lt;/p&gt;

&lt;p&gt;Here&#39;s what I think is going wrong.  Git users love flexibility.  The love it so much that they even include modifying their local repository history right into their standard workflow.  git rebase is a core command.  From what I can gather, even though mercurial now (as of years ago, actually) has powerful rebase and patch queue extensions, mercurial users still get the heebie-jeebies when they think about modifying repository history.  This is where the git envy comes from.  You see, git useres can alter their branch names, or even delete branch names without using scary rebase.  Fact is, though, git could adopt mercurial-style named branches and git users would rebase them away or rename them with rebase willy-nilly just like they do with everything else that they deem needs editing in their history.  The fact that git users can rename or delete their branches without using rebase is almost completely incidental.  If you allow the use of rebase or patch queues, mercurial named branches are &lt;em&gt;not&lt;/em&gt; any more permanent than any other changeset in the repository history.  Mercurial bookmarks allow mercurial users flexibility around branch names without needing to resort to scary history editing extensions, and that makes us happy, but I don&#39;t think that we should talk down mercurial named branches.  There are times when you want the branch name associated with a commit to be just as &quot;permanent&quot; as the commit is.  Let us do that without dumb warnings that make named branches sound like a bad idea.&lt;/p&gt;

&lt;p&gt;The only other argument people may have against mercurial&#39;s named branches is the possibility of name collisions.  As if that&#39;s something that&#39;s really hard to deal with.  Anyone who has written a fair amount of C code (I&#39;m looking at you, git developers) knows how to prefix a name to get poor-man&#39;s namespaces.  Alternatively, many projects require an issue tracker number in a feature-branch or bugfix-branch name.  Name collision problem solved.&lt;/p&gt;

&lt;p&gt;In conclusion, mercurial named branches are fine.  Use them more.  Use rebase and/or patch queues[1] to rename or delete the branches when necessary.  If that really bothers you, you have bookmarks now, but don&#39;t go all git-apologetic on named branches.  Mercurial is every bit as awesome as git.&lt;/p&gt;

&lt;p&gt;1.  Before you push to a publicly accesible repository, of course.  Ask a git user why that&#39;s important.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/5610089624746416208/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=5610089624746416208' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/5610089624746416208'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/5610089624746416208'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2012/01/what-is-so-wrong-with-mercurials-named.html' title='What Is So Wrong With Mercurial&#39;s Named Branches?'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-8961132772561617293</id><published>2011-12-13T10:12:00.000-08:00</published><updated>2011-12-13T10:20:46.035-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="emacs"/><category scheme="http://www.blogger.com/atom/ns#" term="mac"/><title type='text'>Make Terminal.app Useful for Emacs</title><content type='html'>&lt;p&gt;Running emacs -nw in Terminal.app on my Mac has been pretty frustrating, until today.  To fix the experience, download and install &lt;a href=&quot;http://pqrs.org/macosx/keyremap4macbook/&quot;&gt;KeyRemap4MacBook&lt;/a&gt; (I sure hope it&#39;s not malware).  Click on &quot;Change Key.&quot;  Scroll down until you find &quot;For Applications.&quot;  Expand that to &quot;Enable at only Terminal&quot; and select &quot;Change Command_L to Option_l.&quot;  Expand &quot;Change Slash(/) Key&quot; and select &quot;Control+Slash(/) to Control+Underscore(_).&quot;  You might also want to select &quot;Switch next and prev tab in terminal with shift and arrows (like Gnome term).&quot;&lt;/p&gt;

&lt;p&gt;All better.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/8961132772561617293/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=8961132772561617293' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/8961132772561617293'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/8961132772561617293'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2011/12/make-terminalapp-useful-for-emacs.html' title='Make Terminal.app Useful for Emacs'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-6935304314577911025</id><published>2011-06-14T09:44:00.000-07:00</published><updated>2011-08-16T08:43:19.161-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="linux"/><category scheme="http://www.blogger.com/atom/ns#" term="philosopy"/><title type='text'>The Dark Cockpit Theory</title><content type='html'>&lt;p&gt;A co-worker who is annoyed with the verbosity of our verilog simulations just asked me if I subscribed to the Dark Cockpit Theory.  I immediately replied, &quot;no.&quot;  I&#39;ve had this argument a number of times with other engineers and I have already decided that more information is better than less.  I had to google &quot;dark cockpit theory&quot; later because I&#39;d never heard of it referred to that.  For me it has always been &lt;a href=&quot;http://www.faqs.org/docs/artu/ch01s06.html&quot;&gt;the UNIX &quot;Rule of Silence&quot;&lt;/a&gt;.  Same idea, I think.&lt;/p&gt;

&lt;p&gt;Just to be clear, I do like the Rule of Silence when it&#39;s software that I trust isn&#39;t going to do weird things or silently hang.  There isn&#39;t a lot of code that I trust that much, though, and if it&#39;s software I don&#39;t trust, I want to know what it&#39;s doing, or at least that it&#39;s doing &lt;em&gt;something&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As I thought about this more, it&#39;s the same with people.  When a person you trust is doing something for you, they can go do it without giving you any intermediate status reports.  That&#39;s easier and more efficient for both of you.  When someone you don&#39;t trust is working for you, you want to hear from them often, so you know they are staying on task and doing things right.  Right?&lt;/p&gt;

&lt;p&gt;The big argument about overly noisy simulations or software is that you can&#39;t find the important messages in all the noise.  I just don&#39;t understand this argument when it&#39;s coming from fellow software engineers.  Especially UNIX/Linux users.  We read obtuse source code all day long, and we confidently use tools like grep or the search features of vim or emacs to help us.  These same tools can search through program output.  UNIX shells have built-in ways to redirect program output to files if you don&#39;t want to watch it all scroll by.  If you really don&#39;t like it send it to /dev/null!  Use the tools of the trade.  Usually what people are complaining about is that the message &lt;em&gt;they&lt;/em&gt; want to see isn&#39;t the &lt;em&gt;only&lt;/em&gt; one being printed.  Tough!  You are a UNIX user, pipe the output through grep.  Take 20 minutes and write a script to filter the output if you need.  You write code for a living, you know how to do these things.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/6935304314577911025/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=6935304314577911025' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6935304314577911025'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6935304314577911025'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2011/06/dark-cockpit-theory.html' title='The Dark Cockpit Theory'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-3171281171822754860</id><published>2011-04-29T12:19:00.001-07:00</published><updated>2011-05-07T08:22:47.643-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="revision control"/><title type='text'>Incremental Merge with Mercurial</title><content type='html'>&lt;p&gt;I just learned how to merge incrementally with Mercurial.  I wasn&#39;t really even aware of what that means until I learned about it.  Most people use a graphical diff/merge tool with Mercurial such as &lt;a href=&quot;http://kdiff3.sourceforge.net/&quot;&gt;kdiff3&lt;/a&gt;, and for a good reason.  Resolving merge conflicts any other way is much more difficult.  Normally when you run &lt;code&gt;hg merge&lt;/code&gt; it merges all the files right then, and pops up your graphical merge tool right when conflicts occur.  You can leave the gui window up and sort of ignore it for a while, but then you wonder what happens if your computer loses power or you need to reboot for some reason.  Will your working copy be left in some weird state?  What if you have already spent a lot of time resolving tricky conflicts on a previous file, you&#39;d hate to lose that work.  Or what if you know one particular file is going to be onerous and you&#39;d like to resolve conflicts there first?  Wouldn&#39;t it be nice if Mercurial could just present you a list of files with conflicts and let you deal with them on your own time and in the order that you choose?  It turns out, Mercurial can do just that.  Here&#39;s how:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hg merge --tool internal:merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first command tells mercurial to use its (not so smart) non-interactive merge tool.  If it comes across a conflict it inserts markers into your files.  As an alternative you can specify the &lt;code&gt;internal:dump&lt;/code&gt; merge tool.  Instead of putting markers into your files, it creates three new files with a &lt;code&gt;.other&lt;/code&gt;, &lt;code&gt;.local&lt;/code&gt;, and &lt;code&gt;.base&lt;/code&gt; extension, which are a little easier to use if you want to do some manual inspection of the various versions.  The cool thing, in either case, is you don&#39;t &lt;em&gt;have&lt;/em&gt; to do anything manual.  First things first though.  You can now see which files have merge conflicts by typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hg resolve --list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those with a &lt;code&gt;U&lt;/code&gt; in front of them have unresolved conflicts and need some attention.  Those with &lt;code&gt;R&lt;/code&gt; in front are just fine.  Here&#39;s the best part.  To resolve the conflicts for a given file using your favorite diff/merge tool, and I&#39;ll use kdiff3 as an example, type this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hg resolve --tool kdiff3 filename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The file is merged with kdiff3 (or your tool of choice) just like it would have been with a regular &lt;code&gt;hg merge&lt;/code&gt; command.  In the case of kdiff3, it&#39;s smarter than the internal Mercurial merge tool and it may resolve the conflicts without popping up a window and asking for your help.  Be happy when that happens.&lt;/p&gt;

&lt;p&gt;You can also just manually edit the files to resolve the conflicts.  If you do that, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hg resolve -m filename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to let Mercurial know you&#39;ve taken care of it.  Once you see all &lt;code&gt;R&lt;/code&gt; files when you type &lt;code&gt;hg resolve --list&lt;/code&gt; you&#39;re all done.  You can run your tests and then commit the merge.&lt;/p&gt;

&lt;p&gt;This isn&#39;t very useful for simple merges, but for big complicated merges (where, maybe, you have waited too long and two branches have diverged &lt;em&gt;a lot&lt;/em&gt;), this is a really nice technique.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/3171281171822754860/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=3171281171822754860' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/3171281171822754860'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/3171281171822754860'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2011/04/incremental-merge-with-mercurial.html' title='Incremental Merge with Mercurial'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-1391448149428348217</id><published>2010-12-14T19:02:00.000-08:00</published><updated>2010-12-14T19:02:00.356-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="eda"/><category scheme="http://www.blogger.com/atom/ns#" term="linux"/><category scheme="http://www.blogger.com/atom/ns#" term="verification"/><title type='text'>A UNIX/Linux Environment Manager</title><content type='html'>&lt;p&gt;I have written A UNIX/Linux environment manager that allows on-the-fly configuration of your shell environment.  It&#39;s called, &lt;a href=&quot;http://bitbucket.org/krupan/albion/&quot;&gt;albion&lt;/a&gt;.  Using albion, environment variables, aliases, functions, and so forth can be changed without requiring you to do the tedious log-out-and-log-back-in-again routine. Simply type &#39;albion load &lt;environment-name&gt;&#39; and your shell environment will be reconfigured according to the specification in your environment file. It should work with any POSIXy shell (bash, ksh, zsh, etc.)&lt;/p&gt;

&lt;p&gt;Albion is similar to the &lt;a href=&quot;http://modules.sourceforge.net/&quot;&gt;Environment Modules Project&lt;/a&gt;, however, environment configuration files (configs) are written in standard shell language, not tcl. Another improvement over modules is that when unloaded, the effect of the configs is correctly undone, even if the configs have changed or been deleted after loading. The main albion tool is written in Python, with some supporting pieces written in POSIX shell code.&lt;/p&gt;

&lt;p&gt;albion is currently alpha quality. The core functionality seems to be working just fine, but has only been tested in a bash shell environment. There is very little documentation, and it could use an install script to make getting started easier.  The code is &lt;a href=&quot;http://bitbucket.org/krupan/albion/&quot;&gt;available on bitbucket&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/1391448149428348217/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=1391448149428348217' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/1391448149428348217'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/1391448149428348217'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2010/12/unixlinux-environment-manager.html' title='A UNIX/Linux Environment Manager'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-179516258916309439</id><published>2010-10-21T08:32:00.000-07:00</published><updated>2010-10-21T08:46:55.710-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="linux"/><category scheme="http://www.blogger.com/atom/ns#" term="ubuntu"/><title type='text'>How to Disable Ubuntu command-not-found</title><content type='html'>&lt;p&gt;Ubuntu, in all its helpfulness, has a feature that tries to guess what you mean when you type commands at the bash prompt.  If you type a command that&#39;s found, it runs it, of course.  If you type a command that it can&#39;t find, it takes a moment to search available packages for install and suggest what you might do to make that command available.  It sometimes looks like this:

&lt;pre&gt;&lt;code&gt;$ foo
No command &#39;foo&#39; found, did you mean:
 Command &#39;xoo&#39; from package &#39;xoo&#39; (universe)
 Command &#39;fop&#39; from package &#39;fop&#39; (universe)
 Command &#39;fox&#39; from package &#39;objcryst-fox&#39; (universe)
 Command &#39;zoo&#39; from package &#39;zoo&#39; (universe)
 Command &#39;goo&#39; from package &#39;goo&#39; (universe)
foo: command not found
&lt;/code&gt;&lt;/pre&gt;

It&#39;s great when you have a new system and you haven&#39;t yet installed everything you need.  Type &lt;code&gt;emacs&lt;/code&gt; before emacs has been installed, and it will helpfully tell you the exact command to use to install it.  After a while, though, you have all the packages you need, and the only time you see this feature in action is when you mistype something.  When this happens to me, all the package suggestions and apt-get commands are just annoying.  This, for example, is not helpful:

&lt;pre&gt;&lt;code&gt;$ les foo.txt
The program &#39;les&#39; is currently not installed.  You can install it by typing:
sudo apt-get install atm-tools
les: command not found
&lt;/code&gt;&lt;/pre&gt;

I&#39;d much rather see this quick, short message so that I can get on with fixing my mistake by adding another &#39;s&#39;:

&lt;pre&gt;&lt;code&gt;$ les foo.txt
-bash: les: command not found
&lt;/code&gt;&lt;/pre&gt;

I finally found &lt;a href=&quot;http://techthrob.com/2010/06/04/how-to-disable-command-not-found-in-ubuntu/comment-page-1/#comment-12448&quot;&gt;how to fix it&lt;/a&gt;.  Put this line in your &lt;code&gt;.bashrc&lt;/code&gt;:

&lt;pre&gt;&lt;code&gt;unset command_not_found_handle&lt;/code&gt;&lt;/pre&gt;

Much better.</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/179516258916309439/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=179516258916309439' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/179516258916309439'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/179516258916309439'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2010/10/how-to-disable-ubuntu-command-not-found.html' title='How to Disable Ubuntu command-not-found'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-6340277618022645653</id><published>2010-10-17T20:30:00.001-07:00</published><updated>2010-10-21T14:45:19.505-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="emacs"/><category scheme="http://www.blogger.com/atom/ns#" term="linkage"/><category scheme="http://www.blogger.com/atom/ns#" term="revision control"/><title type='text'>My .emacs is now in Mercurial</title><content type='html'>&lt;title&gt;&lt;/title&gt;
&lt;p&gt;A while ago I decided to start maintaining my .emacs file under revision control.  I picked git because it seemed like the cool thing to do.  I put it &lt;a href=&quot;http://gitorious.org/bryan-s-dot-emacs&quot;&gt;on gitorious&lt;/a&gt; so that I could easily sync it with my home and work machines, and it was public in the off chance that it might help out some other emacs user.  Today I &lt;a href=&quot;http://stackoverflow.com/questions/491554/how-do-i-convert-a-git-repository-to-mercurial&quot;&gt;converted&lt;/a&gt; it from git to mercurial, because for some reason&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hg incoming&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is more intuitive and easier for me to remember than&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git fetch &amp;&amp; git log ..origin/master&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Maybe I&#39;m weird that way.  Anyway, the new repo is &lt;a href=&quot;http://bitbucket.org/krupan/bryans-dot-emacs/&quot;&gt;on bitbucket&lt;/a&gt;.  That is all.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/6340277618022645653/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=6340277618022645653' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6340277618022645653'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/6340277618022645653'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2010/10/my-emacs-is-now-in-mercurial.html' title='My .emacs is now in Mercurial'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-611976618923845622</id><published>2010-10-08T14:08:00.001-07:00</published><updated>2010-10-08T14:15:37.540-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="emacs"/><category scheme="http://www.blogger.com/atom/ns#" term="linkage"/><category scheme="http://www.blogger.com/atom/ns#" term="linux"/><title type='text'>Email with Thunderbird, Compose with Emacs</title><content type='html'>&lt;p&gt;My Mac let&#39;s me use emacs keyboard shortcuts everywhere.  I&#39;m really sad that I don&#39;t get that in Linux.  How the universe ever got into this state is beyond my comprehension.  Mail.App has gotten me hooked on emacs keybindings when typing emails especially.&lt;/p&gt;

&lt;p&gt;The solution in Linux, it turns out, is to just use emacs.  I already have &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/4125/&quot;&gt;It&#39;s All Text&lt;/a&gt; for Firefox, with emacsclient as the editor.  I just found &lt;a href=&quot;http://globs.org/articles.php?lng=en&amp;pg=2&quot;&gt;External Editor&lt;/a&gt; for Thunderbird, with emacsclient as the editor and &lt;a href=&quot;http://os.inf.tu-dresden.de/~mp26/emacs.shtml&quot;&gt;tbemail-mode&lt;/a&gt; for extra goodness.  I think that&#39;ll do.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/611976618923845622/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=611976618923845622' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/611976618923845622'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/611976618923845622'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2010/10/email-with-thunderbird-compose-with.html' title='Email with Thunderbird, Compose with Emacs'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3669809752172683097.post-4533358563376976029</id><published>2010-09-30T08:14:00.000-07:00</published><updated>2010-09-30T14:54:07.170-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="linkage"/><category scheme="http://www.blogger.com/atom/ns#" term="revision control"/><title type='text'>Mercurial is Teh Awesome</title><content type='html'>&lt;p&gt;My team at work recently switched from Subversion to Mercurial for revision control.  That&amp;#8217;s no small feat for a hardware design team (see: &lt;a href=&quot;/2009/07/averse-to-change.html&quot;&gt;Averse to Change&lt;/a&gt;).  It helps a little that we are mainly FPGA people (a lot &amp;#8220;softer&amp;#8221; than an ASIC), but there are still definitely hardware attitudes about change.  Our software partners made the change a while ago, so they already had some process and infrastructure set up that made it easier for us, plus they could point out from real experience that it was an easy transition with many benefits.  That helped a lot.&lt;/p&gt;

 &lt;p&gt;I took the lead on making the change for our team (is it true everywhere that on a digital design team, the verification engineers are the de-facto &amp;#8220;tool guys&amp;#8221; as well?).  I studied up on how exactly mercurial works.  I mean, I had the basic idea down since I&amp;#8217;ve been toying with the fancy new revision control tools for a &lt;a href=&quot;/2007/03/cutting-edge-revision-control.html&quot;&gt;while now&lt;/a&gt;, but I didn&amp;#8217;t really reach enlightenment until a few months ago when I read Steve Losh&amp;#8217;s &lt;a href=&quot;http://stevelosh.com/blog/2009/08/a-guide-to-branching-in-mercurial/&quot;&gt;A Guide to Branching in Mercurial&lt;/a&gt;.  I highly recommend it.  My team now makes heavy use of named branches in Mercurial.  Turns out we used branches a fair amount in Subversion and so the named branch workflow was a good fit for us.  The fact that everyone had felt the pain of merging svn branches helped to motivate the switch to mercurial as well.&lt;/p&gt;

 &lt;p&gt;I used the hg convert extension to copy all of our history and a few important branches from subversion to mercurial.  Besides the output of &lt;code&gt;hg help convert&lt;/code&gt;, my old friend Rock&amp;#8217;s &lt;a href=&quot;http://rock.hymasfamily.org/blog/2010/04/08/branches-subversion-conversion/&quot;&gt;Branches – Subversion Conversion to Mercurial, Part 2&lt;/a&gt; helped me understand that process.  Creating splicemaps to get merge information from subversion to mercurial was an important concept.  I was confused on the syntax for a bit (convert could use some better error messages), but I figured it out eventually.  The branchmaps were cool too, because we did have a badly named branch in subversion that we were able to give a better name in the conversion process.&lt;/p&gt;

 &lt;p&gt;It&amp;#8217;s amazing what a good revision control tool does to you.  With old clumsy revision control my mode of operation was just stashing changes to files, mainly so that I could hopefully go back to something that was working if needed.  It was just a big undo button, in a way.  I started noticing our very smart Linux kernel hacker software guys talking about linear history and clean cohesive changesets.  Changesets where only one feature or bug was affected at at time.  Changesets that showed a clear step-by-step process to completing a feature or fix.  They scoffed at commits with messages like, &amp;#8220;checkpoint: it compiles now.&amp;#8221;  At first I thought, &amp;#8220;snobs,&amp;#8221; but then I realized that mercurial provides tools that actually make it pretty easy to mess with your changes before pushing them to a public repository.  And why not?  When you are working in your own private local repository, why shouldn&#39;t you make sure everything looks neat and polished before going public with it?  I started playing with the rebase and histedit mercurial extensions.  Most of the software guys here swear by mercurial patch queues, but that just sounded archaic and complicated to me.  I had some limited success with histedit, but recently I had another epiphany.  Patch queues are actually pretty amazing.  Again, Steve Losh helped with &lt;a href=&quot;http://stevelosh.com/blog/2010/08/a-git-users-guide-to-mercurial-queues/&quot;&gt;A Git User’s Guide to Mercurial Queues&lt;/a&gt;, but also just trying them out and seeing how nicely integrated with mercurial they are really helped a lot.  I hadn&amp;#8217;t realized that they were actually pretty darn easy to use, and so very flexible.&lt;/p&gt;

&lt;p&gt;With Mercurial, revision control is no longer just a place to stash code, it&amp;#8217;s a code editing tool all of it&amp;#8217;s own.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://bryan-murdock.blogspot.com/feeds/4533358563376976029/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3669809752172683097&amp;postID=4533358563376976029' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/4533358563376976029'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3669809752172683097/posts/default/4533358563376976029'/><link rel='alternate' type='text/html' href='http://bryan-murdock.blogspot.com/2010/09/mercurial-is-teh-awesome.html' title='Mercurial is Teh Awesome'/><author><name>Bryan</name><uri>http://www.blogger.com/profile/11394436715172971234</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry></feed>
