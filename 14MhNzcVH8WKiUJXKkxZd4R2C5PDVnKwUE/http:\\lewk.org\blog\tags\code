http://lewk.org/blog/tags/code
HTTP/1.1 200 OK
Server: nginx
Date: Thu, 24 Jul 2014 06:25:24 GMT
Content-Type: text/html
Content-Length: 315078
Connection: close
Vary: Accept-Encoding

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta name="description" content="" />
<meta name="keywords" content="lewk,blog,code,programming,python,linux,fedora,music" />
<link rel="alternate" type="application/rss+xml" title="RSS" href="http://lewk.org/rss">
<meta name="author" content="Luke Macken" />
<script type="text/javascript" src="http://www.linkedin.com/js/public-profile/widget-os.js"></script>
<style type="text/css">
<!--
/* 1024px - An open source xhtml/css website template by Andreas Viklund - http://andreasviklund.com .
Free to use in any way and for any purpose as long as the proper credits are given to the original designer.
Version: 1.2, April 20, 2006 */

/* Ported to Pyblosxom by Jennifer Ennis - http://foobar.us/~zaylea */

/******** General tags ********/
body{
font:76% Verdana,Tahoma,Arial,sans-serif;
color:#404040;
line-height:1.2em;
margin:0 auto;
padding:0;
}

a{
text-decoration:none;
color:#4088b8;
font-weight:bold;
}

a:hover{text-decoration:underline;}
a img{border:0;}
p{margin:0 0 18px 10px;}
ul,ol,dl{font-size:0.9em; margin:2px 0 16px 35px;}
ul ul,ol ol{margin:4px 0 4px 35px;}

h1{
font-size:4.2em;
letter-spacing:-5px;
margin:0 0 30px 25px;
color:#4088b8;
}

h1 a{text-transform:none; color:#4088b8;}

h2{
font-size:1.4em;
color:#4088b8;
border-bottom:4px solid #dadada;
padding:0 2px 2px 5px;
margin:0 0 10px 0;
letter-spacing:-1px;
}

h3{
font-size:1.2em;
font-weight:bold;
color:#4088b8;
border-bottom:1px solid #dadada;
margin:10px 0 8px 0;
padding:1px 2px 2px 3px;
}

blockquote{
font-size:1.3em;
overflow: auto;
border:1px solid #dadada;
margin:20px 10px;
padding:8px;
}

/******** Main wrap ********/
#wrap{
color:#404040;
width:970px;
margin:10px auto;
padding:0;
}

#header{margin:0;}

#toplinks{text-align:right; padding:5px 2px 2px 3px;}

#slogan{
font-size:1.5em;
color:#808080;
font-weight:bold;
letter-spacing:-1px;
margin:15px 0px 20px 35px;
line-height:1.2em;
}

/******** sidebar ********/
#sidebar{
float:left;
width:195px;
margin:0 0 5px 0;
padding:1px 0 0 0;
}

#sidebar ul{
list-style:none;
font-size:0.9em;
margin:0;
padding:0 0 15px 10px;
}

#sidebar li{
list-style:none;
margin:0 0 4px 0;
padding:0;
}

#sidebar li a{
font-size:1.2em;
font-weight:bold;
padding:2px;
}

#sidebar ul ul{
margin:4px 0 3px 15px;
line-height:1.2em;
padding:0;
}

#sidebar ul ul li a{font-weight:normal;}
#sidebar h2{margin:3px 0px 8px 0px;}

/******** Content variations ********/
#content{
line-height:1.5em;
width:750px;
float:right;
text-align:left;
margin:0;
padding:0;
}

#contentalt{
line-height:1.5em;
width:750px;
float:left;
text-align:left;
padding:0;
margin-right:20px;
}

#content h3, #contentalt h3{margin:10px 0 8px;}

/******** Footer ********/
#footer{
clear:both;
text-align:right;
color:#808080;
font-size:0.9em;
border-top:4px solid #dadada;
margin:0 auto;
padding:8px 0;
line-height:1.6em;
}

#footer p{margin:0; padding:0;}
#footer a{color:#808080;}

/******** Various classes ********/
.box{
color:#ffffff;
font-size:0.9em;
background-color:#4088b8;
border:1px solid #c8c8c8;
line-height:1.3em;
padding:5px 5px 5px 8px;
}

.box a{color:#f0f0f0;}
.left{float:left; margin:0 15px 4px 0;}
.right{float:right; margin:0 0 4px 15px;}
.textright{text-align:right;}
.readmore{text-align:right; margin:-10px 10px 12px 0;}

.center{text-align:center;}
.blue{color:#4088b8;}
.big{font-size:1.3em;}
.small{font-size:0.8em;}
.bold{font-weight:bold;}

.clear{clear:both;}
.hide{display:none;}
.fade{color:#c8c8c8;}
.gray{color:#808080;}

.photo{
border:1px solid #bababa;
padding:2px;
background-color:#ffffff;
margin:6px 18px 2px 5px;
}

#tagcloud a.smallestTag { color: #4088b8; font-size: xx-small; }
#tagcloud a.smallTag    { color: #4088b8; font-size: x-small; }
#tagcloud a.mediumTag   { color: #4088b8; font-size: small; }
#tagcloud a.bigTag      { color: #4088b8; font-size: medium; }
#tagcloud a.biggestTag  { color: #4088b8; font-size: medium; }
#tagcloud a.hugeTag     { color: #4088b8; font-size: large; }
#tagcloud a.hugestTag   { color: #4088b8; font-size: large; }
#tagcloud a.mostHugeTag { color: #4088b8; font-size: x-large; }

.codeblock { font-family: monospace;}
.Special { color: #dc322f; }          
.Constant { color: #2aa198; }
.Type { color: #b58900; }
.Identifier { color: #268bd2; }
.Normal { color: #93a1a1;}
.Statement { color: #719e07; }

-->
</style>
<title>l e w k . o r g : tags/code   </title>
</head>

<body>
<div id="wrap">

<div id="header">
    <p id="toplinks"><br/></p>
    <!-- <p id="toplinks">Skip to: <a href="#content">Content</a> | <a href="#sidebar">Navigation</a> | <a href="#footer">Footer</a></p> -->

    <h1><a href="http://lewk.org/blog">l e w k <span class="fade">. o r g</span></a></h1>
<p id="slogan"></p>
</div>

<div id="content">

<div align="right" class="pager"></div>
<h2>Mon, 16 Jun 2014</h2><h3><a name="bodhi2-fad" href="http://lewk.org/blog/bodhi2-fad">Bodhi2 Fedora Activity Day</a></h3>
<p><img src="https://admin.fedoraproject.org/updates/static/images/bodhi-icon-48.png" align="right"/>

<p> The <a
href="https://fedoraproject.org/wiki/FAD_Bodhi2_Taskotron_2014">Bodhi2/Taskotron
Fedora Activity Day</a> happened earlier this month! A bunch of us gathered in
Denver for a few days and worked on some of our critical releng &amp; qa
infrastructure. The hackfest was held in a conference room in my
apartment building, which worked out quite nicely for the amount of
people that we had. The hotel was right up the road, and we were able to
walk to a lot of awesome spots, like the <a href="http://www.the-1up.com/">1UP Barcade</a> :).
</p>

<p>
It was great to have folks from various corners of <a target="_blank"
href="http://fedoraproject.org">Fedora</a> together in the same room for a few
days. As it is, we get a lot done remotely, but being able to leverage the
high-bandwidth face-to-face time is extremely valuable, especially when coming
to consensus on difficult architectural decisions. We used <a
href="https://fedoraproject.org/wiki/Gobby?rd=Communicate/GobbyHowTo">Gobby</a>
to collaborate on a long list of action items, and chipped away most of it.
Thankfully, Bodhi has enough layers that we were all able to split up and dive
into different corners of the code without stepping on each others' toes.
</p>

<p> Up until now, our releng stack in staging has always been less than useful.
We've never able to do a full build->update->push->run, and have had to rely on
<a href="http://www.quickmeme.com/img/5b/5b00ceff39354b1104c5c27ae62d46a61431247d74c01b1645aa6eeae13ea175.jpg">testing certain codepaths in production</a>. Not only that, but Bodhi's
"masher" never really had proper unit tests, so pushing out major changes to
that stack has always been quite unpleasant. Thankfully, <a target="_blank"
href="http://www.scrye.com/wordpress/nirik/">Kevin</a> and <a target="_blank"
href="https://fedoraproject.org/wiki/User:Ausil">Dennis</a> worked on our
staging setup and made it so we can actually use it. I made a lot of headway on
porting the Bodhi masher to a new <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/bodhi/masher.py">fedmsg-driven
architecture</a>, while writing <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/bodhi/tests/test_masher.py">unit
tests</a> for it along the way. I'm hopeful that we can write tests for every
part of the "push" process, and then optimize the hell out of it :) </p>

<p>
While <a target="_blank"
href="https://fedoraproject.org/wiki/User:Bochecha">Mathieu</a> and I mainly
focused on back-end hacking, <a target="_blank"
href="http://threebean.org">Ralph</a> and <a target="_blank"
href="http://elrod.me/">Ricky</a> made some fantastic headway on the
front-end. Ralph started working on the revamped New Update Form, which is
already significantly better than the original. The idea here is that the
maintainer should only need to provide the package name(s), and Bodhi will
automatically find the corresponding candidate builds, related bugs, and
eventually it will pull in all candidate deps as well (or tell if you if any
need to be rebuilt). It would also be very convenient to be able to "push this
entire stack again". Ideally, I'd love to make it so that folks maintaining
large stacks, like GNOME, shouldn't need to use a Google doc to coordinate
their mega-updates ;)
</p>

<p>
Ralph also started revamping the new karma system (check out his screencast <a
href="http://threebean.org/blog/bodhi2-karma-system-preview/">here</a>).
We don't have any of the policy in place to enforce it yet, but eventually
we'd like the maintainers to be able to define custom policy constraints
for their updates. For example, you could say "only allow this update to
go to the stable repo once this specific bug or test case has been
confirmed as fixed/passing".
</p>

<p>
Ricky made lots of improvements to the <a href="http://bodhi.dev.fedoraproject.org/releases/F19">Release profiles</a> and Updates/Comments/User pages, which are all looking great. He also created a Bodhi news feed on
the front page using the fedmsg <a target="_blank"
href="https://apps.fedoraproject.org/datagrepper">datagrepper</a> widget that
<a href="http://threebean.org/blog/a-fedmsg-widget-for-your-site/">Ralph
blogged about</a> recently.

Other front-end improvements include <a
target="_blank" href="http://libravatar.org">libravatar</a> support for all
users, proper markdown rendering with previews and image support, and of course
a konami code easter-egg ;)
</p>


<p>
I was going to post a bunch of screenshots here, but Ralph just deployed a
development instance of Bodhi2 that folks can play around with
instead: <a href="http://bodhi.dev.fedoraproject.org">http://bodhi.dev.fedoraproject.org</a>
(it's a dev instance, so don't expect it to always be up/functional).
</p>

<p>
Some other corners of Bodhi that have seen improvements recently:
</p>

<p>
The API. The Bodhi webapp is written in Python using the excellent <a
href="http://docs.pylonsproject.org/en/latest/docs/pyramid.html">Pyramid</a>
web framework. On top of that we are using <a
href="https://github.com/mozilla-services/cornice">Cornice</a>, which
makes it really easy to build &amp; document standards-compliant web <a
href="https://github.com/fedora-infra/bodhi/tree/pyramid/bodhi/services">services</a>
with Pyramid. Thanks to <a
href="http://docs.pylonsproject.org/projects/colander/en/latest/">colander</a>
validation/deserialization <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/bodhi/schemas.py">schemas</a>
and our custom <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/bodhi/security.py#L28">ACLs</a>
and <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/bodhi/validators.py">validators</a>,
we are able to write <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/bodhi/services/updates.py#L60">dead-simple
views</a> that can safely assume that all of the data we are dealing with is
valid and in the right format, and that the user has the appropriate
permissions. Cornice also has a <a
href="http://cornice.readthedocs.org/en/latest/sphinx.html">Sphinx plugin</a>
that auto-generates our <a href="http://bodhi.dev.fedoraproject.org/static/docs/">API documentation</a>.
So not only do we now have a semi-RESTful standards-compliant self-documenting API, but Ralph also added a support for
rendering almost every service as an RSS feed as well.
</p>

<p>
Regarding the Bodhi <a
href="https://github.com/fedora-infra/python-fedora/blob/develop/fedora/client/bodhi.py">Python
APIs</a>, I've begun porting them to the new <a
href="https://github.com/fedora-infra/python-fedora/blob/develop/fedora/client/baseclient.py">python-fedora
OpenIDBaseClient</a> (see <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/bodhi/client.py">bodhi/client.py</a>).
Since a large percentage of the API usage is through the current python-fedora
BodhiClient, I'd like to try our best to maintain compatibility--at least for a
version or two with deprecation warnings if we have to. 
I am really looking forward to finally being able to trash our old <a target="_blank" href="http://turbogears.org/">TurboGears1</a> FAS visit/identity layer in favor of <a href="https://github.com/FedOAuth/FedOAuth">FedOAuth</a>.
</p>

<p>
On top of the Python API lies the bodhi-client. I recently ported the
basic functionality over using the <a href="http://click.pocoo.org/">click</a> module,
which makes it really easy to write complex command-line tools (see <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/bodhi/cli.py">bodhi/cli.py</a>).
Since the current bodhi-client is an absolute mess, this is one area that I'm
actually okay with breaking backwards-compatibility to a certain extent. Having
a proper command structure, similar to the <a target="_blank"
href="http://koji.fedoraproject.org/koji/">Koji</a> cli, is well worth some cli
flag changes in my opinion.
</p>

<p>
In a similar fashion, Mathieu implemented a great <a
href="https://github.com/fedora-infra/bodhi/blob/pyramid/tools/managereleases.py">release
management tool</a> for Bodhi admins. Currently, creating a release and
changing it's pre-release status involves using the <a
href="https://fedorahosted.org/bodhi/wiki/Administration">TurboGears Python
shell</a>, creating SQLObject instances by hand, editing config files, etc.
This tool will make it dead simple for releng to create new releases and manage
all of the pre-GA state changes that happen along the way.
</p>

<p>
Performance was another key area of development. The app is fairly snappy
now, but there is still a <em>ton</em> of room for improvement. The <a
href="http://docs.pylonsproject.org/projects/pyramid-debugtoolbar/en/latest/#the-toolbar">pyramid-debugtoolbar</a>
has been amazingly useful for us so far. It let's us analyze every SQL
statement made, it does full-stack profiling, and it lets us execute commands
in every layer of a traceback. Along with that, Ralph added a <a
target="_blank" href="http://sqlalchemy.org">SQLAlchemy</a> event hook to our
unit tests to ensure that certain changes don't drastically change how many SQL
statements are getting executed. With regard to Masher performance, there is
still a lot of low-hanging fruit there. We saw a drastic boost in mash speed
recently when Kevin discovered that a couple of releng machines weren't using <a
target="_blank" href="http://www.linux-kvm.org/page/Virtio">virtio</a>. 
This brought the mash time of EPEL5 updates from 45 minutes down to around 15.
In the new version of the masher, updates are grouped by tag and then processed in a
separate threads. Security updates and critical bugfixes will take priority
over enhancements, and there are also things that we can do to make the bits
hit the mirrors faster once we're done mashing.
</p>

<p>
Another corner of Bodhi that was the topic of discussion was around
notifications. Bodhi currently sends way too much email, most of which I'm
assuming gets ignored. There are a couple of mails that are a bit more
important, like the update announcement emails that get sent to <a
href="https://admin.fedoraproject.org/mailman/listinfo/package-announce">package-announce</a>,
and the updates-testing digest that goes to the <a
href="https://admin.fedoraproject.org/mailman/listinfo/test">test-list</a>.
The consensus that we came to was that we are going to attempt to use <a
href="https://apps.fedoraproject.org/notifications">FMN</a> to allow
people to configure what messages they want to receive, and where (IRC, email,
etc). This alleviates the need to build an email layer into Bodhi2, and
allows us to focus on publishing fedmsgs only, letting FMN do the rest.
</p>

<p>
As far as the transition to Bodhi2 goes, we're going to try our best to not
break the world in the process. Ralph mentioned the potential timeline in his
<a href="http://threebean.org/blog/bodhi2-fad-hollaback/">blog post</a>, and
we still have lots of work to do before then. In order to help ease this
transition, I created a wiki page to track the <a
href="https://fedoraproject.org/wiki/Bodhi/Consumers">consumers of Bodhi's
APIs</a>, so we can make the appropriate changes to those codebases before
launch. Please feel free to update it with any that I left out. 
</p>

<p>
Overall, it was a very successful <a target="_blank"
href="https://fedoraproject.org/wiki/Fedora_Activity_Day_-_FAD">FAD</a>. We got
a ton of stuff done, ate a bunch of great food, and had a lot of fun in the
process. I didn't cover everything that we worked on, so checkout the blog posts from <a
href="http://threebean.org/blog/bodhi2-fad-hollaback/">threebean</a>, <a
href="http://blog.fedora-fr.org/bochecha/post/2014/06/Bodhi-2-FAD">bochecha</a>,
and <a
href="http://www.scrye.com/wordpress/nirik/2014/06/05/bodhi2-taskotron-fad-day-1/">nirik</a>
for more details on other things that got done. If you're interested in getting
involved with Bodhi2, <a href="https://github.com/fedora-infra/bodhi">grab
the code</a>, checkout the <a
href="https://github.com/fedora-infra/bodhi/issues?labels=&milestone=&page=1&state=open">open
issues</a>, and hop in #fedora-apps on Freenode.
</p>
<p>
Also, I'll be giving a presentation at <a href="https://fedoraproject.org/wiki/Flock_2014">Flock</a> in Prague this year on "Evolving the Fedora Updates process", which will cover the history of pushing updates as well as an in-depth dive into the new bodhi2 stack.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 16:49 | <a href="http://lewk.org/blog/bodhi2-fad">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/bodhi2-fad.html#comment_anchor">0 comments</a>
</p>
<h2>Thu, 07 Mar 2013</h2><h3><a name="fedmsg-notify" href="http://lewk.org/blog/fedmsg-notify">Keeping your finger on the pulse of the Fedora community</a></h3>
<p>
<p>
<img src="http://www.fedmsg.com/en/latest/_static/fedmsg.png" align="right" title="Hop on the bus!"/>

For those who haven't been keeping up with all of the awesome code <a
href="http://threebean.org/blog">Ralph Bean</a> has been churning out lately,
be sure to checkout <a href="http://fedmsg.com">fedmsg.com</a>. Hop on <a
href="http://webchat.freenode.net/?channels=fedora-fedmsg">#fedora-fedmsg</a>
on Freenode or load up <a href="https://apps.fedoraproject.org/busmon">busmon</a> to see it in action.
Not all of the Fedora Infrastructure services currently fire off fedmsgs, but we're <a
href="http://fedmsg.readthedocs.org/en/latest/status/">getting very close</a>.

</p>
<p>
This technology is built on top of <a href="http://github.com/mokshaproject">Moksha</a>, which I created many
years ago while writing the first version of the <a
href="https://fedorahosted.org/fedoracommunity/">fedoracommunity</a> app.
It's come a long way since then, and now can speak <a
href="http://zeromq.org">&Oslash;MQ</a> over WebSockets, as well as <a
href="http://amqp.org">AMQP</a> and <a href="stomp.codehaus.org">STOMP</a> over <a href="http://orbited2.org">Orbited</a>. Now the time has finally come
to bring Moksha to the desktop!
</p>

<p>
<h3>
    Introducing fedmsg-notify
</h3>

<a href="http://github.com/fedora-infra/fedmsg-notify">fedmsg-notify</a> lets
you get realtime desktop notifications of activity within the Fedora community.
It allows you to tap into the firehose of contributions as they happen and
filter them to your liking.  It works with any window manager that supports
the <a
href="https://developer.gnome.org/notification-spec/">notification-spec</a>,
however I've only seen the gravatars show up using GNOME.
</p>

<p>
<center><img src="http://lewk.org/img/fedmsg-notify-0-crop.png"></center>
</p>

<p>
For <a href="https://www.gnome.org/gnome-3">GNOME Shell</a> users, you can
[optionally] install <code><a
href="https://github.com/lmacken/gnome-shell-extension-fedmsg">gnome-shell-extension-fedmsg</a></code>,
and then enable it with the <code>gnome-tweak-tool</code> or by running
<code>`gnome-shell-extension-tool -e fedmsg@lmacken-redhat.com`</code> (and
        then hit alt+f2 and type 'r' to reload the shell). You will then be graced with the presence of The Bus:
</p>
<p>
<center><img src="http://lewk.org/img/gnome-shell-extension-fedmsg.png"></center>
</p>

<p>
For those who aren't running GNOME shell, you can simply <code>yum install
fedmsg-notify</code>, and then run <code>fedmsg-notify-config</code>, or
launch it from your Settings menu. Due to a dependency on Twisted's
gtk3reactor, fedmsg-notify is currently only available on Fedora 18 and newer.
</p>

<p>
<center>
    <img src="http://lewk.org/img/fedmsg-notify-config-0.png"/>
</center>

</p>
<p>
The first tab shows you all services that are currently hooked into fedmsg. As
we add new ones, the gui will automatically display them. These services are
defined in the <a
    href="https://github.com/fedora-infra/fedmsg_meta_fedora_infrastructure">fedmsg_meta_fedora_infrastructure</a>
package.
</p>

<p>
<center>
    <img src="http://lewk.org/img/fedmsg-notify-config-1.png"/>
</center>

</p>
<p>
The Advanced tab lets you further customize what messages you want to see. The "Bugs that you
have encountered" option will display all messages that reference any Bugzilla
numbers for crashes that you have hit locally with <a
    href="http://abrt.fedorahosted.org">ABRT</a>. The other filters involve
querying your local yum database or the <a href="https://admin.fedoraproject.org/pkgdb">PackageDB</a>.
</p>

<h3>Under the hood</h3>

<p>
The fedmsg-notify-daemon itself is fairly minimal (see <a
href="https://github.com/fedora-infra/fedmsg-notify/blob/develop/fedmsg_notify/daemon.py">daemon.py</a>).
At it's core, it's just a <a href="http://twistedmatrix.com">Twisted</a>
reactor that consumes &Oslash;MQ messages. <a
href="http://mokshaproject.net">Moksha</a> does all of the heavy lifting behind
the scenes, so all we really have to do is specify a <code>topic</code> to subscribe to and define a <code>consume</code> method
that gets called with each message. This is essentially just a basic <a
href="http://moksha.readthedocs.org/en/latest/main/Consumers/">Moksha
Consumer</a> with some fedmsg + DBus glue.
</p>

<code class="codeblock"><blockquote><pre>
<span class="Statement">class</span> <span class="Identifier">FedmsgNotifyService</span>(dbus<span class="Normal">.</span>service<span class="Normal">.</span>Object, fedmsg<span class="Normal">.</span>consumers<span class="Normal">.</span>FedmsgConsumer):
    topic = <span class="Constant">'org.fedoraproject.*'</span>

    <span class="Statement">def</span> <span class="Identifier">consume</span>(<span class="Type">self</span>, msg): <span class="Normal">&#8230;</span>
</pre></blockquote></code>

<p>
The daemon will automatically startup upon login, or will get activated by DBus
when enabled via the GUI. When a message arrives, it filters it accordingly,
downloads &amp; caches the icons, [optionally] relays the message over DBus, and then
displays the notification on your desktop.
</p>

<p>
The API for writing custom filters is dead simple (see <a
    href="https://github.com/fedora-infra/fedmsg-notify/blob/develop/fedmsg_notify/filters.py">filters.py</a>).
Here is an example of one:

<code class="codeblock"><blockquote><pre>
<span class="Statement">class</span> <span class="Identifier">MyPackageFilter</span>(Filter):
    <span class="Constant">&quot;&quot;&quot; Matches messages regarding packages that a given user has ACLs on &quot;&quot;&quot;</span>
    __description__ = <span class="Constant">'Packages that these users maintain'</span>
    __user_entry__ = <span class="Constant">'Usernames'</span>

    <span class="Statement">def</span> <span class="Identifier">__init__</span>(<span class="Type">self</span>, settings):
        <span class="Type">self</span><span class="Normal">.</span>usernames = settings<span class="Normal">.</span>replace(<span class="Constant">','</span>, <span class="Constant">' '</span>)<span class="Normal">.</span>split()
        <span class="Type">self</span><span class="Normal">.</span>packages = <span class="Identifier">set</span>()
        reactor<span class="Normal">.</span>callInThread(<span class="Type">self</span><span class="Normal">.</span>_query_pkgdb)

    <span class="Statement">def</span> <span class="Identifier">_query_pkgdb</span>(<span class="Type">self</span>):
        <span class="Statement">for</span> username <span class="Statement">in</span> <span class="Type">self</span><span class="Normal">.</span>usernames:
            log<span class="Normal">.</span>info(<span class="Constant">&quot;Querying the PackageDB for </span><span class="Special">%s</span><span class="Constant">'s packages&quot;</span> % username)
            <span class="Statement">for</span> pkg <span class="Statement">in</span> PackageDB()<span class="Normal">.</span>user_packages(username)[<span class="Constant">'pkgs'</span>]:
                <span class="Type">self</span><span class="Normal">.</span>packages<span class="Normal">.</span>add(pkg[<span class="Constant">'name'</span>])

    <span class="Statement">def</span> <span class="Identifier">match</span>(<span class="Type">self</span>, msg, processor):
        packages = processor<span class="Normal">.</span>packages(msg)
        <span class="Statement">for</span> package <span class="Statement">in</span> <span class="Type">self</span><span class="Normal">.</span>packages:
            <span class="Statement">if</span> package <span class="Statement">in</span> packages:
                <span class="Statement">return</span> <span class="Type">True</span>
</pre></blockquote></code>

The <code>fedmsg-notify-config</code> interface (see <a
    href="https://github.com/fedora-infra/fedmsg-notify/blob/develop/fedmsg_notify/gui.py">gui.py</a>),
automatically introspects the filters and populates the Advanced tab with the
appropriate labels, switches, and text entries.
</p>


<p>
<h3>Consuming fedmsg over DBus</h3>

Let's say you want to write an application that listens to fedmsg, but you
don't want to deal with spinning up your own connection, or you're not using
Python, etc. For these cases, fedmsg-notify supports relaying messages over DBus. This
functionality can be enabled by running `<code>gsettings set
org.fedoraproject.fedmsg.notify emit-dbus-signals true</code>`. You can then
easily listen for the <code>MessageReceived</code> DBus signal, like so:

<code class="codeblock"><blockquote><pre>
<span class="Statement">import</span> json, dbus

<span class="Statement">from</span> gi<span class="Normal">.</span>repository <span class="Statement">import</span> GObject
<span class="Statement">from</span> dbus<span class="Normal">.</span>mainloop<span class="Normal">.</span>glib <span class="Statement">import</span> DBusGMainLoop

<span class="Statement">def</span> <span class="Identifier">consume</span>(topic, body):
    <span class="Statement">print</span>(topic)
    <span class="Statement">print</span>(json<span class="Normal">.</span>loads(body))

DBusGMainLoop(set_as_default=<span class="Type">True</span>)
bus = dbus<span class="Normal">.</span>SessionBus()
bus<span class="Normal">.</span>add_signal_receiver(consume, signal_name=<span class="Constant">'MessageReceived'</span>,
                        dbus_interface=<span class="Constant">'org.fedoraproject.fedmsg.notify'</span>,
                        path=<span class="Constant">'/org/fedoraproject/fedmsg/notify'</span>)
loop = GObject<span class="Normal">.</span>MainLoop()
loop<span class="Normal">.</span>run()
</pre></blockquote></code>
</p>

<h3> Contributing </h3>

<p>
If you're interested in helping out with any layer of the fedmsg stack, hop
in <a href="http://webchat.freenode.net/?channels=fedora-apps">#fedora-apps</a>, and
fork it on GitHub:
</p>
<p>
    <ul>
        <li>
        <a href="https://github.com/lmacken/gnome-shell-extension-fedmsg">lmacken/gnome-shell-extension-fedmsg</a><br/>
        </li>
        <li>
        <a href="https://github.com/fedora-infra/fedmsg-notify">fedora-infra/fedmsg-notify</a><br/>
        </li>
        <li>
        <a href="https://github.com/fedora-infra/fedmsg_meta_fedora_infrastructure">fedora-infra/fedmsg_meta_fedora_infrastructure</a><br/>
        </li>
        <li>
        <a href="https://github.com/fedora-infra/fedmsg">fedora-infra/fedmsg</a><br/>
        </li>
        <li>
        <a href="https://github.com/mokshaproject/moksha">mokshaproject/moksha</a><br/>
        </li>
    </ul>
</p>
<p>
<b>Hop on the bus!</b>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 17:30 | <a href="http://lewk.org/blog/fedmsg-notify">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/fedmsg" rel="tag">fedmsg</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/fedmsg-notify.html#comment_anchor">4 comments</a>
</p>
<h2>Sat, 21 Apr 2012</h2><h3><a name="quantumrandom" href="http://lewk.org/blog/quantumrandom">Wielding the ANU Quantum Random Number Generator</a></h3>
<p>
<p>
<img src="http://qrng.anu.edu.au/Pictures/laser.png" align="right" width="250"/>

Last week <a href="http://sciencedaily.com" target="_blank">Science Daily</a> published an article that caught my attention titled <a
href="http://www.sciencedaily.com/releases/2012/04/120413161235.htm" target="_blank">'Sounds
of Silence' Proving a Hit: World's Fastest Random Number Generator</a>.

The tl;dr is that researchers at the <a
    href="http://photonics.anu.edu.au/qoptics/index.php" target="_blank">ANU ARC Centre of
    Excellence for Quantum Computation and Communication Technology</a> created
a blazing fast random number generator based on quantum fluctuations in a
vacuum.  Thankfully, these awesome scientists are <a
    href="http://qrng.anu.edu.au" target="_blank">giving their data away for free</a>,
and they even provide a <a href="https://qrng.anu.edu.au/API/api-demo.php" target="_blank">JSON
    API</a>.
</p>

<p>
In an effort to make it simple to leverage this data, I created a new project: <a
href="http://j.mp/quantumrandom" target="_blank">quantumrandom</a>.
It provides a <code>qrandom</code> command-line tool, a Python API, and
also a <code>/dev/qrandom</code> Linux character device.
</p>

<h3>Installing</h3>
<code><blockquote><pre>
$ virtualenv env
$ source env/bin/activate
$ pip install quantumrandom
</pre></blockquote></code>

<h3>Using the command-line tool</h3>
<code><blockquote><pre>
$ qrandom --int --min 5 --max 15
7
$ qrandom --binary
���I�%��e(�1��c��Ee�4�������j�Կ��=�^H�c�u
oq��G��Z�^���fK�0_��h��s�b��AE=�rR~���(�^
+a�a̙�IB�,S�!ꀔd�2H~�X�Z����R��.f
...
$ qrandom --hex
1dc59fde43b5045120453186d45653dd455bd8e6fc7d8c591f0018fa9261ab2835eb210e8
e267cf35a54c02ce2a93b3ec448c4c7aa84fdedb61c7b0d87c9e7acf8e9fdadc8d68bcaa5a
...
</pre></blockquote></code>

<h3>Creating /dev/qrandom</h3>

<p>
quantumrandom comes equipped with a multi-threaded character device in
userspace. When read from, this device fires up a bunch of threads to fetch
data. Not only can you utilize this as a rng, but you can also feed this data
back into your system's entropy pool.
</p>
<p>
In order to build it's dependencies, you'll need the following packages installed:
<code>svn gcc-c++ fuse-devel gccxml libattr-devel</code>. On Fedora 17 and
newer, you'll also need the <code>kernel-modules-extra</code> package installed
for the <code>cuse</code> module.
</p>

<code><blockquote><pre>
pip install ctypeslib hg+https://cusepy.googlecode.com/hg
sudo modprobe cuse
sudo chmod 666 /dev/cuse
qrandom-dev -v
sudo chmod 666 /dev/qrandom
</pre></blockquote></code>

By default it will use 3 threads, which can be changed by passing '<code>-t #</code>' into the <code>qrandom-dev</code>.

<h3>Testing the randomness for <a href="https://en.wikipedia.org/wiki/FIPS_140-2" target="_blank">FIPS 140-2</a> compliance</h3>
<code><blockquote><pre>
$ cat /dev/qrandom | rngtest --blockcount=1000
rngtest: bits received from input: 20000032
rngtest: FIPS 140-2 successes: 1000
rngtest: FIPS 140-2 failures: 0
rngtest: FIPS 140-2(2001-10-10) Monobit: 0
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 0
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=17.696; avg=386.711; max=4882812.500)Kibits/s
rngtest: FIPS tests speed: (min=10.949; avg=94.538; max=161.640)Mibits/s
rngtest: Program run time: 50708319 microseconds
</pre></blockquote></code>

<h3>Adding entropy to the Linux random number generator</h3>

<code><blockquote><pre>
sudo rngd --rng-device=/dev/qrandom --random-device=/dev/random --timeout=5 --foreground
</pre></blockquote></code>

<h3>Monitoring your available entropy levels</h3>
<code><blockquote><pre>
watch -n 1 cat /proc/sys/kernel/random/entropy_avail
</pre></blockquote></code>

<h3>Python API</h3>

<p>
The quantumrandom Python module contains a low-level <code>get_data</code>
function, which is modelled after the ANU Quantum Random Number Generator's JSON
API. It returns variable-length lists of either <code>uint16</code> or
<code>hex16</code> data.
<code><blockquote><pre>
>>> quantumrandom.get_data(data_type='uint16', array_length=5)
[42796, 32457, 9242, 11316, 21078]
>>> quantumrandom.get_data(data_type='hex16', array_length=5, block_size=2)
['f1d5', '0eb3', '1119', '7cfd', '64ce']
</pre></blockquote></code>
</p>

<p>
Based on this <code>get_data</code> function, quantumrandom also provides a
bunch of higher-level helper functions that make easy to perform a variety of
tasks.
</p>

<code><blockquote><pre>
>>> quantumrandom.randint(0, 20)
5
>>> quantumrandom.hex()[:10]
'8272613343'
>>> quantumrandom.binary()[0]
'\xa5'
>>> len(quantumrandom.binary())
10000
>>> quantumrandom.uint16()
numpy.array([24094, 13944, 22109, 22908, 34878, 33797, 47221, 21485, 37930, ...], dtype=numpy.uint16)
>>> quantumrandom.uint16().data[:10]
'\x87\x7fY.\xcc\xab\xea\r\x1c`'
</pre></blockquote></code>

<p>
<center>
<table>
<tr>
<td><img src="http://150.203.48.55/Pictures/PXI.jpg" width="250"/></td>
<td><img src="http://qrng.anu.edu.au/Pictures/optics.jpg" width="250"/></td>
</tr>
</table>
</center>
</p>

<p>
<strong>Follow quantumrandom on GitHub: <a href="http://j.mp/quantumrandom" target="_blank">https://github.com/lmacken/quantumrandom</a></strong>
</p>
<script type="text/javascript"
src="http://www.reddit.com/static/button/button1.js"></script>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 16:30 | <a href="http://lewk.org/blog/quantumrandom">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/Linux" rel="tag">Linux</a>, <a href="http://lewk.org/blog/tags/random" rel="tag">random</a>, <a href="http://lewk.org/blog/tags/science" rel="tag">science</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/quantumrandom.html#comment_anchor">6 comments</a>
</p>
<h2>Sat, 07 May 2011</h2><h3><a name="leafy-miracle" href="http://lewk.org/blog/leafy-miracle">Red Hat OpenShift Express & The Leafy Miracle</a></h3>
<p><p>

<a href="http://redhat.com">Red Hat</a> made a lot of awesome announcements
this week at <a href="http://www.redhat.com/summit/">The Red Hat Summit</a>, one of which being <a href="http://openshift.redhat.com/app/">OpenShift</a>.
</p>

<p>
I had the opportunity to play with the internal beta for a little while now,
and I must say that as a developer I am extremely impressed with the service.
Just being able to <code>git push</code> my code into to the cloud drastically simplifies
large-scale software deployment, and makes it so I don't even have
to leave my development environment.
</p>

<p>
    I figured out a way to get <a href="http://turbogears.org">TurboGears2</a> and <a href="http://pylonsproject.com">Pyramid</a> running on OpenShift Express, and documented it <a href="https://www.redhat.com/openshift/blogs/deploying-turbogears2-python-web-framework-using-express">here</a> and <a href="https://www.redhat.com/openshift/blogs/deploying-a-pyramid-application-in-a-virtual-python-wsgi-environment-on-red-hat-openshift-expr">here</a>. After that, I proceeded to write my very first Pyramid application.
</p>

<p>
    <b>[ The Leafy Miracle ]</b><br/>

<p>
    In memory of the proposed [and <a href="http://lewk.org/beefy.txt">rejected</a>] Fedora 16 codename "<a href="http://beefymiracle.org">Beefy Miracle</a>", this little app
is called "Leafy Miracle".
</p>

<center>
    <b style="font-size: 1.4em"><a href="http://leafy-miracle.rhcloud.com">leafy-miracle.rhcloud.com</a></b>
<br/>
<br/>
</center>

<center>
    <a href="http://leafy-miracle.rhcloud.com"><img src="http://lewk.org/img/leafy.png" border="0"/></a>
<br/><a href="http://pylonsproject.org/projects/pyramid/about"><img src="http://docs.pylonsproject.org/_images/pyramid_105x28_white.png" border="0"/></a>
</center>
</p>
<b>[ Features & Tech ]</b><br/>

<p>
<ul>
<li>Written in <a href="http://python.org">Python</a> using the <a href="http://pylonsproject.org">Pyramid</a> web framework</li>
<li><a href="http://sqlalchemy.org">SQLAlchemy</a> database model of <a href="http://yum.baseurl.org">Yum</a> Categories, Groups, Packages, Dependencies, and Dependants</li>
<li>Interactive graph widget, using <a href="http://toscawidgets.org/documentation/tw2.core">ToscaWidgets2</a> and the <a href="http://thejit.org">JavaScript InfoVis Toolkit</a></li>
<li>Package mouse-over menus linking to downloads (<a href="https://admin.fedoraproject.org/community">community</a>), code (<a href="http://pkgs.fedoraproject.org/gitweb">gitweb</a>), bugs (<a href="http://bugzilla.redhat.com">bugzilla</a>), acls (<a href="https://admin.fedoraproject.org/pkgdb">pkgdb</a>), builds (<a href="http://koji.fedoraproject.org/koji">koji</a>) and updates (<a href="https://admin.fedoraproject.org/updates">bodhi</a>).</li>
<li>Deep linking, which allows you to use the browser back/forward buttons while navigating the tree, as well as share or bookmark links to specific nodes</li>
<li>Search bar with auto-completion of packages, categories, and groups</li>
<li><a href="http://jquery.com">jQuery</a> under the hood, powering the widgets</li>
</ul>
</p>

<b>[ Running ]</b><br/>

<blockquote><code><pre>
sudo yum -y install python-virtualenv
git clone git://fedorapeople.org/~lmacken/leafymiracle && cd leafymiracle
virtualenv env && source env/bin/activate
python setup.py develop
python leafymiracle/populate.py
paster serve development.ini
</pre>
</code>
</blockquote>

<b>[ Code ]</b><br/>

<p>
<blockquote><code>
        git clone <a href="http://fedorapeople.org/gitweb?p=lmacken/public_git/leafymiracle;a=summary">git://fedorapeople.org/~lmacken/leafymiracle</a>
</code></blockquote>
</p>

<b>[ Props ]</b><br/>
<br/>
<p>
    Mad props go out to <a href="https://threebean.wordpress.com">RJ Bean</a>, who helped me write this app.  He is
responsible for writing a ton of amazing Python widgets for various
JavaScript visualization libraries.  You can see some demos of them
here: <a
href="http://tw2-demos.threebean.org/">tw2-demos.threebean.org</a>.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 20:20 | <a href="http://lewk.org/blog/leafy-miracle">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Red Hat" rel="tag">Red Hat</a>, <a href="http://lewk.org/blog/tags/OpenShift" rel="tag">OpenShift</a>, <a href="http://lewk.org/blog/tags/Cloud" rel="tag">Cloud</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/Pyramid" rel="tag">Pyramid</a>, <a href="http://lewk.org/blog/tags/ToscaWidgets" rel="tag">ToscaWidgets</a>, <a href="http://lewk.org/blog/tags/jQuery" rel="tag">jQuery</a>, <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a>, <a href="http://lewk.org/blog/tags/Yum" rel="tag">Yum</a>, <a href="http://lewk.org/blog/tags/InfoVis" rel="tag">InfoVis</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/leafy-miracle.html#comment_anchor">0 comments</a>
</p>
<h2>Thu, 24 Mar 2011</h2><h3><a name="clone-all-my-fedora-pkgs" href="http://lewk.org/blog/clone-all-my-fedora-pkgs">git clone all of your Fedora packages</a></h3>
<p><p>
After doing a fresh <a href="http://fedoraproject.org">Fedora 15</a> install on
my laptop last night, I wanted to quickly clone all of the packages that I
maintain. Here is a single command that does the job:
</p>

<code>
<blockquote>
python -c "import pyfedpkg; from fedora.client.pkgdb import PackageDB; [pyfedpkg.clone(pkg['name'], '$USER') for pkg in PackageDB().user_packages('$USER')['pkgs']]"
</blockquote>
</code>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 16:10 | <a href="http://lewk.org/blog/clone-all-my-fedora-pkgs">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/clone-all-my-fedora-pkgs.html#comment_anchor">4 comments</a>
</p>
<h2>Sun, 13 Mar 2011</h2><h3><a name="photobooth.py" href="http://lewk.org/blog/photobooth.py">Fedora Photobooth @ SXSW</a></h3>
<p><center><img src="http://lewk.org/img/photobooth1.jpg" align="right"/></center>
<p>
    This is the first year that Fedora will have a booth at <a href="http://www.sxsw.com">SXSW</a>! Sadly, I am not going to be attending since it conflicts with <a href="http://us.pycon.org">PyCon</a>.  However,
my code will be running at our booth. Usually the Fedora booth at conferences is comprised of a bunch of flyers, media, swag, and some people to help answer questions and tell the Fedora story. However at SXSW, things are going to be a little different.
</p>
<p>
Aside from the <a href="http://mairin.wordpress.com/2011/03/11/flyers-about-free-open-source-software-for-sxsw-creatives/">amazing flyers</a> that Máirín created, there will also be a <a href="http://fedoraproject.org/wiki/SXSW_2011#Photobooth">Fedora Photobooth</a>. Someone (probably Spot or Jared) will be dressed in a full Tux costume, and people can come and get their photo taken with them.  Spot came to me the other day and asked if I could write some code to streamline the whole process.
</p>
<p>
An hour or so later, photobooth.py was born. There are definitely lots of improvements that can be made, but here is what it currently does in its initial incarnation:
</p>
<ul>
	<li>Uses gphoto2 to automatically detect your camera</li>
	<li>When Enter is pressed, it snaps a photo and downloads it locally</li>
	<li>A Fedora watermark is applied to the bottom right corner of the image</li>
	<li>The photo is uploaded to a server</li>
	<li>A QRCode is generated that points to the image URL</li>
	<li>A TinyURL is generated for the image</li>
	<li>HTML is generated that shows the image, the QRCode, and TinyURL</li>
	<li>The page is then displayed in the web browser</li>
</ul>
<b>In Action</b>
<br/>
See Mo's blog for photos of this code in action at the Fedora SXSW booth!
<blockquote>
* <a href="http://mairin.wordpress.com/2011/03/14/sxsw-expo-day-1-from-the-show-floor/">SXSW Expo Day 1 from the show floor</a><br/>
* <a href="http://mairin.wordpress.com/2011/03/15/sxsw-expo-day-2/">SXSW Expo Day 2</a><br/>
* <a href="http://mairin.wordpress.com/2011/03/16/a-beefy-miraculous-day-at-sxsw-expo-day-3/">A Beefy, Miraculous Day at SXSW (Expo Day 3)</a><br/>
</blockquote>

<br/>
<center><img src="http://lewk.org/img/photobooth0.jpg"/></center>
<br/>

<b>The Code</b>

<br/>
I threw this in a git repo and tossed it up on GitHub:

<blockquote>
	<a href="http://github.com/lmacken/photobooth.py">github.com/lmacken/photobooth.py</a>
</blockquote>
<blockquote>

<style type="text/css">
<!--
/*pre { font-family: monospace; color: #657b83; background-color: #fdf6e3; }*/
pre { font-family: monospace; color: #657b83;}
.Special { color: #dc322f; }
.Type { color: #b58900; }
.Statement { color: #719e07; }
.Identifier { color: #268bd2; }
.Constant { color: #2aa198; }
.PreProc { color: #cb4b16; }
.Comment { color: #93a1a1; font-style: italic; }
-->
</style>
</head>
<body>
<pre>
<span class="Comment">#!/usr/bin/python</span>
<span class="Comment"># photobooth.py - version 0.3</span>
<span class="Comment"># Requires: python-imaging, qrencode, gphoto2, surl</span>
<span class="Comment"># Author: Luke Macken &lt;lmacken@redhat.com&gt;</span>
<span class="Comment"># License: GPLv3</span>

<span class="PreProc">import</span> os
<span class="PreProc">import</span> surl
<span class="PreProc">import</span> Image
<span class="PreProc">import</span> subprocess

<span class="PreProc">from</span> uuid <span class="PreProc">import</span> uuid4
<span class="PreProc">from</span> os.path <span class="PreProc">import</span> join, basename, expanduser

<span class="Comment"># Where to spit out our qrcode, watermarked image, and local html</span>
out = expanduser(<span class="Constant">'~/Desktop/sxsw'</span>)

<span class="Comment"># The watermark to apply to all images</span>
watermark_img = expanduser(<span class="Constant">'~/Desktop/fedora.png'</span>)

<span class="Comment"># This assumes ssh-agent is running so we can do password-less scp</span>
ssh_image_repo = <span class="Constant">'fedorapeople.org:~/public_html/sxsw/'</span>

<span class="Comment"># The public HTTP repository for uploaded images</span>
http_image_repo = <span class="Constant">'<a href="http://lmacken.fedorapeople.org/sxsw/">http://lmacken.fedorapeople.org/sxsw/</a>'</span>

<span class="Comment"># Size of the qrcode pixels</span>
qrcode_size = <span class="Constant">10</span>

<span class="Comment"># Whether or not to delete the photo after uploading it to the remote server</span>
delete_after_upload = <span class="Identifier">True</span>

<span class="Comment"># The camera configuration</span>
<span class="Comment"># Use gphoto2 --list-config and --get-config for more information</span>
gphoto_config = {
    <span class="Constant">'/main/imgsettings/imagesize'</span>: <span class="Constant">3</span>, <span class="Comment"># small</span>
    <span class="Constant">'/main/imgsettings/imagequality'</span>: <span class="Constant">0</span>, <span class="Comment"># normal</span>
    <span class="Constant">'/main/capturesettings/zoom'</span>: <span class="Constant">70</span>, <span class="Comment"># zoom factor</span>
}

<span class="Comment"># The URL shortener to use</span>
shortener = <span class="Constant">'tinyurl.com'</span>

<span class="Statement">class</span> <span class="Identifier">PhotoBooth</span>(<span class="Identifier">object</span>):

    <span class="Statement">def</span> <span class="Identifier">initialize</span>(self):
        <span class="Constant">&quot;&quot;&quot; Detect the camera and set the various settings &quot;&quot;&quot;</span>
        cfg = [<span class="Constant">'--set-config=%s=%s'</span> % (k, v) <span class="Statement">for</span> k, v <span class="Statement">in</span> gphoto_config.items()]
        subprocess.call(<span class="Constant">'gphoto2 --auto-detect '</span> +
                        <span class="Constant">' '</span>.join(cfg), shell=<span class="Identifier">True</span>)

    <span class="Statement">def</span> <span class="Identifier">capture_photo</span>(self):
        <span class="Constant">&quot;&quot;&quot; Capture a photo and download it from the camera &quot;&quot;&quot;</span>
        filename = join(out, <span class="Constant">'%s.jpg'</span> % <span class="Identifier">str</span>(uuid4()))
        cfg = [<span class="Constant">'--set-config=%s=%s'</span> % (k, v) <span class="Statement">for</span> k, v <span class="Statement">in</span> gphoto_config.items()]
        subprocess.call(<span class="Constant">'gphoto2 '</span> +
                        <span class="Constant">'--capture-image-and-download '</span> +
                        <span class="Constant">'--filename=&quot;%s&quot; '</span> % filename,
                        shell=<span class="Identifier">True</span>)
        <span class="Statement">return</span> filename

    <span class="Statement">def</span> <span class="Identifier">process_image</span>(self, filename):
        <span class="Statement">print</span> <span class="Constant">&quot;Processing %s...&quot;</span> % filename
        <span class="Statement">print</span> <span class="Constant">&quot;Applying watermark...&quot;</span>
        image = self.watermark(filename)
        <span class="Statement">print</span> <span class="Constant">&quot;Uploading to remote server...&quot;</span>
        url = self.upload(image)
        <span class="Statement">print</span> <span class="Constant">&quot;Generating QRCode...&quot;</span>
        qrcode = self.qrencode(url)
        <span class="Statement">print</span> <span class="Constant">&quot;Shortening URL...&quot;</span>
        tiny = self.shorten(url)
        <span class="Statement">print</span> <span class="Constant">&quot;Generating HTML...&quot;</span>
        html = self.html_output(url, qrcode, tiny)
        subprocess.call(<span class="Constant">'firefox &quot;%s&quot;'</span> % html, shell=<span class="Identifier">True</span>)
        <span class="Statement">print</span> <span class="Constant">&quot;Done!&quot;</span>

    <span class="Statement">def</span> <span class="Identifier">watermark</span>(self, image):
        <span class="Constant">&quot;&quot;&quot; Apply a watermark to an image &quot;&quot;&quot;</span>
        mark = Image.<span class="Identifier">open</span>(watermark_img)
        im = Image.<span class="Identifier">open</span>(image)
        <span class="Statement">if</span> im.mode != <span class="Constant">'RGBA'</span>:
            im = im.convert(<span class="Constant">'RGBA'</span>)
        layer = Image.new(<span class="Constant">'RGBA'</span>, im.size, (<span class="Constant">0</span>,<span class="Constant">0</span>,<span class="Constant">0</span>,<span class="Constant">0</span>))
        position = (im.size[<span class="Constant">0</span>] - mark.size[<span class="Constant">0</span>], im.size[<span class="Constant">1</span>] - mark.size[<span class="Constant">1</span>])
        layer.paste(mark, position)
        outfile = join(out, basename(image))
        Image.composite(layer, im, layer).save(outfile)
        <span class="Statement">return</span> outfile

    <span class="Statement">def</span> <span class="Identifier">upload</span>(self, image):
        <span class="Constant">&quot;&quot;&quot; Upload this image to a remote server &quot;&quot;&quot;</span>
        subprocess.call(<span class="Constant">'scp &quot;%s&quot; %s'</span> % (image, ssh_image_repo), shell=<span class="Identifier">True</span>)
        <span class="Statement">if</span> delete_after_upload:
            os.unlink(image)
        <span class="Statement">return</span> http_image_repo + basename(image)

    <span class="Statement">def</span> <span class="Identifier">qrencode</span>(self, url):
        <span class="Constant">&quot;&quot;&quot; Generate a QRCode for a given URL &quot;&quot;&quot;</span>
        qrcode = join(out, <span class="Constant">'qrcode.png'</span>)
        subprocess.call(<span class="Constant">'qrencode -s %d -o &quot;%s&quot; %s'</span> % (
            qrcode_size, qrcode, url), shell=<span class="Identifier">True</span>)
        <span class="Statement">return</span> qrcode

    <span class="Statement">def</span> <span class="Identifier">shorten</span>(self, url):
        <span class="Constant">&quot;&quot;&quot; Generate a shortened URL &quot;&quot;&quot;</span>
        <span class="Statement">return</span> surl.services.supportedServices()[shortener].get({}, url)

    <span class="Statement">def</span> <span class="Identifier">html_output</span>(self, image, qrcode, tinyurl):
        <span class="Constant">&quot;&quot;&quot; Output HTML with the image, qrcode, and tinyurl &quot;&quot;&quot;</span>
        html = <span class="Constant">&quot;&quot;&quot;</span>
<span class="Constant">            &lt;html&gt;</span>
<span class="Constant">              &lt;center&gt;</span>
<span class="Constant">                &lt;table&gt;</span>
<span class="Constant">                  &lt;tr&gt;</span>
<span class="Constant">                    &lt;td colspan=&quot;2&quot;&gt;</span>
<span class="Constant">                        &lt;b&gt;&lt;a href=&quot;%(tinyurl)s&quot;&gt;%(tinyurl)s&lt;/a&gt;&lt;/b&gt;</span>
<span class="Constant">                    &lt;/td&gt;</span>
<span class="Constant">                  &lt;/tr&gt;</span>
<span class="Constant">                  &lt;tr&gt;</span>
<span class="Constant">                    &lt;td&gt;&lt;img src=&quot;%(image)s&quot; border=&quot;0&quot;/&gt;&lt;/td&gt;</span>
<span class="Constant">                    &lt;td&gt;&lt;img src=&quot;%(qrcode)s&quot; border=&quot;0&quot;/&gt;&lt;/td&gt;</span>
<span class="Constant">                  &lt;/tr&gt;</span>
<span class="Constant">                &lt;/table&gt;</span>
<span class="Constant">              &lt;/center&gt;</span>
<span class="Constant">          &lt;/html&gt;</span>
<span class="Constant">        &quot;&quot;&quot;</span> % {<span class="Constant">'image'</span>: image, <span class="Constant">'qrcode'</span>: qrcode, <span class="Constant">'tinyurl'</span>: tinyurl}
        outfile = join(out, basename(image) + <span class="Constant">'.html'</span>)
        output = <span class="Identifier">file</span>(outfile, <span class="Constant">'w'</span>)
        output.write(html)
        output.close()
        <span class="Statement">return</span> outfile

<span class="Statement">if</span> __name__ == <span class="Constant">&quot;__main__&quot;</span>:
    photobooth = PhotoBooth()
    <span class="Statement">try</span>:
        photobooth.initialize()
        <span class="Statement">while</span> <span class="Identifier">True</span>:
            <span class="Identifier">raw_input</span>(<span class="Constant">&quot;Press enter to capture photo.&quot;</span>)
            filename = photobooth.capture_photo()
            photobooth.process_image(filename)
    <span class="Statement">except</span> <span class="Type">KeyboardInterrupt</span>:
        <span class="Statement">print</span> <span class="Constant">&quot;</span><span class="Special">\n</span><span class="Constant">Exiting...&quot;</span>
</pre>


</blockquote>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 02:57 | <a href="http://lewk.org/blog/photobooth.py">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/SXSW" rel="tag">SXSW</a> </span> | <a href="http://lewk.org/blog/photobooth.py.html#comment_anchor">21 comments</a>
</p>
<h2>Wed, 16 Feb 2011</h2><h3><a name="FUDCon2011Tempe" href="http://lewk.org/blog/FUDCon2011Tempe">FUDCon 2011 Tempe</a></h3>
<p><p>
I meant to get this summary out the door weeks ago, however, I didn't want to distract from my post-FUDCon productivity :)
<br/>
<br/>
Another FUDCon has come and gone. This time it was in gorgeous Tempe, Arizona.
It was my first time in AZ, and I must say that I was thoroughly impressed.  It
was truly a great location for FUDCon.  Thanks to the epic snowstorm of doom, I
also was stuck there for a few extra days
</p>

<p>
    <a href="http://lewk.org/img/fudstream.png"><img src="http://lewk.org/img/fudstream-thumb.png" align="right" border="0" /></a>
<b>Live Widgetry</b><br/>

    Before the conference I decided to throw together a little <a href="http://tinyurl.com/fudstream">live widget</a> that
scrolls all of the new identi.ca posts tagged with #FUDCon. Thanks to the mad design
skillz of mizmo, and the feed aggregation and real-time web sockets of 
<a href="http://moksha.fedorahosted.org">Moksha</a>, I was able to throw it
together pretty quickly.  I plan on taking this code and integrating it in the
existing <a href="https://admin.fedoraproject.org/community">fedoracommunity dashboard</a> and hooking up many different fedora-related feeds to it.
</p>

<h3>Sessions</h3>
<p>
<b>AutoQA</b><br/>
Day 1 of the FUDCon sessions were quite interesting.  I got a chance to learn a
bit more about the exciting <a href="http://autoqa.fedorahosted.org">AutoQA project</a>, which is coming along
nicely.  You'll be seeing AutoQA commenting on bodhi updates soon
enough.
</p>

<p>
<b>Security Lab</b><br/>
I caught <a href="http://fedoraproject.org/wiki/JoergSimon">Joerg Simon</a>'s session on the <a href="https://fedorahosted.org/security-spin/">Fedora Security Lab</a>.
It was exciting to see how the Security Spin has evolved ever since
<a href="http://lewk.org/blog/securitylivecd">I created it back in 2007</a> for a project in my forensics class.  It was also interesting to learn more about <a href="http://www.isecom.org/osstmm/">OSSTMM</a>.
</p>

<p>
<b>Spins</b><br/>
The next session I attended was about the future of <a
href="http://spins.fedoraproject.org">spins</a>.  Almost everyone
agreed that Spins are useful and a valuable part of Fedora.  The problems seem
to mostly lie in governance/policy and a lack of communication and coordination
between the Spins SIG and QA/Releng/Infrastructure.  Once of my ideas below may
help with this a little bit.
</p>

<h3>The Next Big Project</h3>
<p>
Day 2 was comprised of more sessions, including my team's "Next Big Project" proposals.
Of course, the <a href="http://fedoraproject.org/wiki/Fedora_RPG">Fedora RPG</a> that Spot and Mo talked about was definitely a hot topic, and got a lot of people excited.
<br/><br/>
I talked about a handful of project ideas that I would like to work on in the
future (actually, I have code written for most of them already).  Here is a
quick rundown:
</p>

<p>
    <b>Real-time Infrastructure</b><br/>
I want to see us deploy an AMQP message broker inside our production
infrastructure.  Then, we hook up all of our existing services and have them
fire off messages when various events occur (koji builds, bodhi updates,
pkgdb additions/removals/changes, git hooks, planet feeds, wiki edits, etc).
From here, using some realtime web technology that <a href="http://moksha.fedorahosted.org">we created</a>, we could easily
expose these message queues via a live dashboard that lets you filter and navigate
the stream of activity, along with providing real-time metrics.  We can also create
desktop notification widgets, so you can get popup bubbles for things that you
care about.
<br/>
<br/>
This is also key to the whole RPG as well.  In order to build a game based on
Fedora workflows, we need an underlying expert system that knows what actions can be taken within fedora, how they are accomplished, and who is getting them done.
</p>

<p>
<b>Meeting app</b><br/>
Currently after a meeting, our Meetbot
spits out the logs and an overview in txt/html/rst to a directory on <a
href="http://meetbot.fedoraproject.org/">meetbot.fedoraproject.org</a>.
Trying to track down who agreed to what when, or even to see what a given
team has been up to over the past couple of months, is very tedious.
<br/>
<br/>
The data is there, now we just need to make it useful.  I would love to see a
frontend for this sytem that tracked meetings by team/people/topics/projects, kept track
of actions and held people accountable for what they say they are going to do
(and make it easy for people to say "I need help with this", or "I don't have
time to finish this"), making it simple to go from an #idea in a meeting to
implementation.  There is so much great data in these logs, and I think we can
do some awesome things with it.
</p>

<p>
    <b>Improved upstream monitoring</b><br/>
Most Fedora developers probably don't even know that we already have an <a href="http://fedoraproject.org/wiki/Upstream_Release_Monitoring">Upstream release monitoring</a> service buried in the wiki.
I added almost every package I maintain to it, and it will automatically open a bug when a new upstream version is released.  Extremely useful.
<br/>
<br/>
I wouldn't call this a "big" project, but I would like to see us integrate this
service into our existing infrastructure.  We could potentially store this
per-package upstream data in the pkgdb/bodhi, and when a new release comes out
write some code to automatically try doing a simple specfile bump, throw a
scratch build at koji, run it through AutoQA, queue up for testing in bodhi,
etc.  Ideally, this would minimize the massive amounts of effort that our
maintainers have to do to keep our packages up to speed with upstream.
</p>

<p>
    <b>Discussions app</b><br/>
Last year, Máirín Duffy and I came up with some <a href="https://mairin.wordpress.com/2010/03/16/a-rich-web-interface-for-mailing-lists/">interesting ideas</a> for improving our mailing lists.  I would like to make this a reality.
Since then, I have already written code that can successfully parse all of
fedora-devel.mbox (sounds much easier than it really is), populate it into a
SQLAlchemy database model, expose a JSON API for quering, and visualize threads
and various statistics with a basic widget.
</p>

<p>
<b>Spin Master</b><br/>
One of the biggest problems with spins that we have right now is that there is
no easy way to track how they are evolving.  I would like to see us create a
system that took the nightly spins and analyzed them, tracking what packages
have been added/removed, which packages have grown/shrunk, etc.  We could
potentially get AutoQA involved here and make sure all spins pass a certain
level of sanity checks before they can even be released.  There are scripts
floating around that can do a lot of this already -- but I want to streamline
it and build a frontend.
</p>

<p>
<b>Source-level package diff viewer</b><br/>
Fedora churns at such a fast pace, yet I can only imagine that a small subset
of maintainers actually look at the complete code changes between upstream
package releases.  The recent sourceforge intrusion should be seen as a reality
check to us distributions, and I think we need to step up our game quite a bit
to ensure we don't let any malicious code slip into Fedora.
<br/>
<br/>
I would like to see a web/cli interface for viewing full source diffs of
package updates in Fedora, allowing people to annotate/flag lines of code.
Having more eyes view the code changes that go into our distribution is
definitely a Good Thing, not just for Fedora, but for Open Source in general.
</p>

<h3>Hackfests</h3>
<p>
Now, on to my favorite part of any conference -- The Hackfests.
First off, I felt that the hackfests were a bit unorganized this year.
There was no opportunity to pitch hackfests, and it was not easy to figure out
who was doing what in which rooms.
Anyway, I had a fairly productive day of hacking...
</p>

<p>
<b>bodhi</b><br/>
I integrated our package test cases into bodhi, which will now query the wiki for tests and display them in your updates, like so:
<center>
<img src="http://lewk.org/img/bodhi-test-cases.png"/>
</center>
Thanks to <a href="http://fedoraproject.org/wiki/User:Jlaska">James Laska</a>
for the code to query the wiki, and to <a href="http://ianweller.org/">Ian
    Weller</a> for python-simplemediawiki API.
<br/>
<br/>
I also sat down with <a href="http://mairin.wordpress.com/">Máirín Duffy</a> and talked about <a href="https://fedoraproject.org/wiki/Bodhi/2.0">Bodhi v2.0</a> interaction design.  We discussed what actions we want people to take when they arrive at bodhi's homepage, which essentially boils down to submitting, searching, browsing, and testing updates.  Mo quickly threw together an awesome mockup that portrays some of our initial ideas.
<br/>
<br/>
<center>
    <a href="http://lewk.org/img/bodhi-20-frontpage.png"><img src="http://lewk.org/img/bodhi-20-frontpage-thumb.png" border="0"/></a>
</center>
<br/>
</p>

<p>
<b>Fedora Community Discussions</b><br/>
As mentioned above, I have already started implementing the mailing list interface that mizmo and I designed last year.  I worked with <a href="http://screwyouenterpriseedition.blogspot.com/">Casey Dahlin</a> during the hackfests and helped him get a working <a href="http://fedoracommunity.fedorahosted.org">fedoracommunity</a>/<a href="http://moksha.fedorahosted.org">moksha</a> development environment up and running and become familiar with the existing code.
<br/>
<br/>
Even though he wasn't at FUDCon, Jan Hutar has also been working on a couple of
great graphs/grids of mailing list statistics for fedoracommunity as well.
We'll be hacking away at this stuff over the next few months, so stay tuned.
</p>

<p>
<b>kernel EFI framebuffer</b><br/>
I spun up a quick kernel patch to enable the EFI framebuffer on a
handfull of Macs.  I already wrote a patch that got <a href="http://lkml.org/lkml/2010/9/2/30">applied upstream</a> that enables this framebuffer on 14 different mac models, but this new patch adds 5 more.  A lot of people, especially Sugar on a Stick users, are
desperate to get Fedora running on their mactel machines (assuming found in
may school labs), so I spun up a fresh
livecd with my kernel patch for testing.  See <a href="https://bugzilla.redhat.com/show_bug.cgi?id=528232">Bug #528232</a> for more information.
</p>

<p>
<b>liveusb-creator</b><br/>
I did a bunch of work on porting the liveusb-creator from HAL to UDisks.
Thankfully, Ubuntu's cleverly-named "usb-creator" already has UDisks support,
so I've been happily borrowing ideas from their code :)
<br/>
<br/>
I also had some great discussions with <a href="http://fedoraproject.org/wiki/User:Pbrobinson">Peter Robinson</a> and <a href="http://www.codewiz.org/">Bernie Innocenti</a>
about solving the persistent overlay problem with our Live USBs.  Right now, they
are essentially a ticking time bomb, and real world LiveUSB use-cases are
getting bit by this all of the time.  Over the past few years, the "solution"
has been to "wait for unionfs to get merged into the kernel".  However, there
are a variety of other potential solutions that we are going to look into as well.
</p>

<p>
<b>Pyramid</b><br/>

The future of Python web development is extremely exciting, innovative, and still evolving at a rapid pace.  As a <a href="http://turbogears.org">TurboGears</a> developer, I'm still very impressed with TG2, which along with TG1 will be supported for a long time to come -- but I'm also very eager for the next generation framework that has just emerged.

<br/>
<br/>
Recently, the <a href="http://pylonshq.com">Pylons</a> project has merged with <a href="http://bfg.repoze.org/">repoze.bfg</a> to form <a href="http://docs.pylonsproject.org">Pyramid</a>, which just released version 1.0.
I'm quite amazed by the quality of the code, docs, and tests, and benchmarks
already show it blowing rails/django/tg/pylons out of the water.  I'm looking
forward to the PyCon sprints, where all 3 communitites are going to be
sitting at the same table working together on this project.
<br/>
<br/>
So while I was stuck in Tempe during the snow storm, I wrote 7 RPMs for Pyramid and it's dependencies, which are currently <a href="https://bugzilla.redhat.com/showdependencytree.cgi?id=674692">waiting to be reviewed</a>.  I plan on writing <a href="https://fedoraproject.org/wiki/Bodhi/2.0">Bodhi v2.0</a> using Pyramid, so if this is something that interests you, let me know (and start reading the 600+ pages of docs ;)
</p>

<p>
    <b>Good times</b><br/>
Technical stuff aside, I had a blast at FUDCon, and I feel like it was one of
the best.  FUDPub was great, as usual. I
played a lot of poker [poorly], ate a lot of tasty food, and had some great conversations.  I had caught a cold prior to coming to FUDCon, so instead of nursing it with
some nyquil and sleep, I decided to try to nurse it with a bottle of Jack,
which turned out to be a bad idea.
<br/>
<br/>
Also, no FUDCon would be complete without mentioning <a
    href="http://thegreatestgameyouwilleverplay.com">TheGreatestGameYouWillEverPlay.com</a>.
Once the hackfests started winding down, I gave a quick session on nethack,
where I tought people various ways to steal from shops, using a bunch of screecasts that I had on my laptop.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 21:55 | <a href="http://lewk.org/blog/FUDCon2011Tempe">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/FUDCon" rel="tag">FUDCon</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/FUDCon2011Tempe.html#comment_anchor">0 comments</a>
</p>
<h2>Thu, 06 Jan 2011</h2><h3><a name="liveusb-creator-3.9.3" href="http://lewk.org/blog/liveusb-creator-3.9.3">liveusb-creator 3.9.3 windows release</a></h3>
<p><img src="https://fedorahosted.org/liveusb-creator/attachment/wiki/img/fedorausb.png?format=raw" align="right" />
<p>
I spent the majority of yesterday at a DOS prompt.  Thankfully, it wasn't
as painful as it sounds, as git, vim and Python make Windows development
quite tolerable.
</p>
<p>
Anyway, I was finally able to track down and fix a couple of major bugs in the
liveusb-creator on Windows XP and 7, and I pushed out a new build
yesterday with the following changes:
</p>

<p>
<ul>
  <li>Rebuilt with Python 2.7 and the latest PyQt4/pywin32/py2exe/NSIS</li>
  <li>Update to syslinux 4.03 in our Windows package, which works with Fedora 14</li>
  <li>Determine if we are running with admin privs, and warn otherwise</li>
  <li>Fix how and where we put our error logs</li>
  <li>Update our list of Fedora & Sugar releases</li>
  <li>Download releases to Downloads or My Documents</li>
  <li>Various Windows path-related fixes</li>
  <li>Translation updates</li>
</ul>
</p>

<p>
Windows users, download it here: <a href="http://liveusb-creator.fedorahosted.org">http://liveusb-creator.fedorahosted.org</a>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 15:34 | <a href="http://lewk.org/blog/liveusb-creator-3.9.3">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/liveusb-creator" rel="tag">liveusb-creator</a>, <a href="http://lewk.org/blog/tags/LiveUSB" rel="tag">LiveUSB</a> </span> | <a href="http://lewk.org/blog/liveusb-creator-3.9.3.html#comment_anchor">7 comments</a>
</p>
<h2>Tue, 08 Jun 2010</h2><h3><a name="bodhi-stats-20100608" href="http://lewk.org/blog/bodhi-stats-20100608">Fedora Updates Report</a></h3>
<p><p>
<img src="https://admin.fedoraproject.org/updates/static/images/bodhi-icon-48.png" align="right"/>
I recently wrote some code to generate detailed statistics of Fedora & EPEL
updates within <a href="https://fedorahosted.org/bodhi">bodhi</a>.  Eventually
this will be auto-generated and exposed within bodhi itself, but for now here are the initial metrics.
</p>
<p>
This report definitely conveys the shortcomings in how we currently utilize
bodhi for "testing" updates, however, it does show us
improving with each release.  For Fedora 13, we implemented the <a
    href="http://fedoraproject.org/wiki/No_Frozen_Rawhide_Proposal">No Frozen
    Rawhide</a> process with improved <a
    href="http://fedoraproject.org/wiki/Critical_Path_Packages_Proposal">Critical
    Path</a> policies, which were definitely a success.  With these enhanced procedures, along with the upcoming implementation of <a href="https://fedorahosted.org/autoqa/">AutoQA</a> and the new <a
    href="https://fedoraproject.org/wiki/Package_update_acceptance_criteria">Package
    update acceptance criteria</a>, I think we'll see these numbers drastically improve in the future.
</p>
<p>
You can find the code that generates these statistics here: <a href="https://fedorahosted.org/bodhi/browser/bodhi/tools/metrics.py">metrics.py</a>, <a href="https://fedorahosted.org/bodhi/browser/bodhi/tools/log_stats.py">log_stats.py</a>.  If you have any ideas or suggestions for different types of metrics to generate, or if you find any bugs in my code, please let me know.
</p>
<p>
<blockquote>
<code>
<pre>
Bodhi Statistics Report (Generated on June 8th, 2010)
=====================================================

Out of 17412 total updates, 2958 received feedback (16.99%)
Out of 1045 total unique karma submitters, the top 30 are:
 * notting (424)
 * mclasen (366)
 * jkeating (321)
 * adamwill (283)
 * cwickert (161)
 * rdieter (159)
 * pbrobinson (141)
 * kevin (141)
 * cweyl (122)
 * tomspur (119)
 * mtasaka (110)
 * xake (97)
 * cschwangler (86)
 * kwright (84)
 * peter (83)
 * hadess (80)
 * michich (72)
 * tagoh (69)
 * pfrields (69)
 * bpepple (69)
 * iarnell (68)
 * lkundrak (66)
 * shinobi (65)
 * sundaram (64)
 * spot (62)
 * pravins (62)
 * markmc (62)
 * thomasj (61)
 * smooge (60)
 * fab (59)

================================================================================
     Fedora 13
================================================================================

 * 3562 updates
 * 3065 stable updates
 * 427 testing updates
 * 62 pending updates
 * 8 obsolete updates
 * 2371 bugfix updates (66.56%)
 * 745 enhancement updates (20.92%)
 * 89 security updates (2.50%)
 * 357 newpackage updates (10.02%)
 * 410 critical path updates (11.51%)
 * 333 critical path updates approved
 * 1155 updates received feedback (32.43%)
 * 12120 +0 comments
 * 2477 +1 comments
 * 155 -1 comments
 * 595 unique authenticated karma submitters
 * 133 anonymous users gave feedback (1.57%)
 * 2261 out of 3562 updates went through testing (63.48%)
 * 1317 testing updates were pushed *without* karma (58.25%)
 * 21 critical path updates pushed *without* karma
 * Time spent in testing:
   * mean = 11 days
   * median = 9 days
   * mode = 7 days
 * 4 updates automatically unpushed due to karma (0.11%)
   * 0 of which were critical path updates
 * 231 updates automatically pushed due to karma (6.49%)
   * 2 of which were critical path updates
 * Time spent in testing of updates that were pushed by karma:
   * mean = 11 days
   * median = 7 days
   * mode = 7 days
 * Time spent in testing of updates that were unpushed by karma:
   * mean = 9 days
   * median = 5 days
   * mode = 5 days
 * 2445 packages updated (top 10 shown)
    * selinux-policy: 13
    * jd: 12
    * openoffice.org: 12
    * gdb: 12
    * ibus-pinyin: 11
    * nautilus: 10
    * kernel: 10
    * evolution: 9
    * libfm: 9
    * libmx: 9

================================================================================
     Fedora 12
================================================================================

 * 4844 updates
 * 4291 stable updates
 * 371 testing updates
 * 113 pending updates
 * 69 obsolete updates
 * 2905 bugfix updates (59.97%)
 * 1054 enhancement updates (21.76%)
 * 201 security updates (4.15%)
 * 684 newpackage updates (14.12%)
 * 407 critical path updates (8.40%)
 * 960 updates received feedback (19.82%)
 * 16311 +0 comments
 * 1899 +1 comments
 * 554 -1 comments
 * 758 unique authenticated karma submitters
 * 576 anonymous users gave feedback (5.33%)
 * 2873 out of 4844 updates went through testing (59.31%)
 * 2138 testing updates were pushed *without* karma (74.42%)
 * 188 critical path updates pushed *without* karma
 * Time spent in testing:
   * mean = 14 days
   * median = 13 days
   * mode = 17 days
 * 12 updates automatically unpushed due to karma (0.25%)
   * 4 of which were critical path updates
 * 133 updates automatically pushed due to karma (2.75%)
   * 13 of which were critical path updates
 * Time spent in testing of updates that were pushed by karma:
   * mean = 11 days
   * median = 7 days
   * mode = 7 days
 * Time spent in testing of updates that were unpushed by karma:
   * mean = 9 days
   * median = 5 days
   * mode = 5 days
 * 2902 packages updated (top 10 shown)
    * qbittorrent: 25
    * gdb: 25
    * selinux-policy: 22
    * kernel: 15
    * xorg-x11-server: 14
    * ibus: 13
    * jd: 13
    * abrt: 11
    * gvfs: 11
    * gtk2: 11

================================================================================
     Fedora 11
================================================================================

 * 6987 updates
 * 6381 stable updates
 * 183 testing updates
 * 99 pending updates
 * 324 obsolete updates
 * 3649 bugfix updates (52.23%)
 * 1566 enhancement updates (22.41%)
 * 350 security updates (5.01%)
 * 1422 newpackage updates (20.35%)
 * 383 critical path updates (5.48%)
 * 729 updates received feedback (10.43%)
 * 23427 +0 comments
 * 1197 +1 comments
 * 448 -1 comments
 * 782 unique authenticated karma submitters
 * 481 anonymous users gave feedback (3.58%)
 * 4129 out of 6987 updates went through testing (59.10%)
 * 3620 testing updates were pushed *without* karma (87.67%)
 * 278 critical path updates pushed *without* karma
 * Time spent in testing:
   * mean = 15 days
   * median = 14 days
   * mode = 17 days
 * 7 updates automatically unpushed due to karma (0.10%)
   * 0 of which were critical path updates
 * 64 updates automatically pushed due to karma (0.92%)
   * 11 of which were critical path updates
 * Time spent in testing of updates that were pushed by karma:
   * mean = 11 days
   * median = 7 days
   * mode = 7 days
 * Time spent in testing of updates that were unpushed by karma:
   * mean = 9 days
   * median = 5 days
   * mode = 5 days
 * 3787 packages updated (top 10 shown)
    * libguestfs: 30
    * jd: 24
    * selinux-policy: 23
    * kdebase-workspace: 19
    * kernel: 18
    * gdb: 16
    * dovecot: 16
    * qemu: 16
    * kdebase-runtime: 16
    * kdenetwork: 16

================================================================================
     Fedora EPEL 5
================================================================================

 * 1572 updates
 * 1255 stable updates
 * 198 testing updates
 * 43 pending updates
 * 76 obsolete updates
 * 734 bugfix updates (46.69%)
 * 236 enhancement updates (15.01%)
 * 93 security updates (5.92%)
 * 509 newpackage updates (32.38%)
 * 20 critical path updates (1.27%)
 * 103 updates received feedback (6.55%)
 * 6076 +0 comments
 * 156 +1 comments
 * 19 -1 comments
 * 243 unique authenticated karma submitters
 * 41 anonymous users gave feedback (1.22%)
 * 1176 out of 1572 updates went through testing (74.81%)
 * 1092 testing updates were pushed *without* karma (92.86%)
 * 19 critical path updates pushed *without* karma
 * Time spent in testing:
   * mean = 24 days
   * median = 18 days
   * mode = 16 days
 * 0 updates automatically unpushed due to karma (0.00%)
   * 0 of which were critical path updates
 * 10 updates automatically pushed due to karma (0.64%)
   * 0 of which were critical path updates
 * Time spent in testing of updates that were pushed by karma:
   * mean = 11 days
   * median = 7 days
   * mode = 7 days
 * Time spent in testing of updates that were unpushed by karma:
   * mean = 9 days
   * median = 5 days
   * mode = 5 days
 * 1060 packages updated (top 10 shown)
    * libguestfs: 26
    * znc: 10
    * vrq: 8
    * cherokee: 8
    * 389-ds-base: 8
    * viewvc: 8
    * 389-admin: 7
    * pki-ca: 7
    * wordpress-mu: 7
    * Django: 7

================================================================================
     Fedora EPEL 4
================================================================================

 * 447 updates
 * 359 stable updates
 * 40 testing updates
 * 11 pending updates
 * 37 obsolete updates
 * 222 bugfix updates (49.66%)
 * 68 enhancement updates (15.21%)
 * 40 security updates (8.95%)
 * 117 newpackage updates (26.17%)
 * 5 critical path updates (1.12%)
 * 11 updates received feedback (2.46%)
 * 1592 +0 comments
 * 11 +1 comments
 * 2 -1 comments
 * 85 unique authenticated karma submitters
 * 2 anonymous users gave feedback (0.24%)
 * 320 out of 447 updates went through testing (71.59%)
 * 311 testing updates were pushed *without* karma (97.19%)
 * 5 critical path updates pushed *without* karma
 * Time spent in testing:
   * mean = 18 days
   * median = 16 days
   * mode = 16 days
 * 0 updates automatically unpushed due to karma (0.00%)
   * 0 of which were critical path updates
 * 1 updates automatically pushed due to karma (0.22%)
   * 0 of which were critical path updates
 * Time spent in testing of updates that were pushed by karma:
   * mean = 11 days
   * median = 7 days
   * mode = 7 days
 * Time spent in testing of updates that were unpushed by karma:
   * mean = 9 days
   * median = 5 days
   * mode = 5 days
 * 313 packages updated (top 10 shown)
    * cherokee: 8
    * globus-common: 7
    * R: 6
    * voms: 6
    * globus-gsi-proxy-ssl: 5
    * globus-openssl-module: 5
    * globus-gsi-proxy-core: 5
    * bitlbee: 5
    * flashrom: 5
    * viewvc: 5
</blockquote>
</code>
</pre>

</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 20:41 | <a href="http://lewk.org/blog/bodhi-stats-20100608">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/metrics" rel="tag">metrics</a> </span> | <a href="http://lewk.org/blog/bodhi-stats-20100608.html#comment_anchor">0 comments</a>
</p>
<h2>Tue, 25 May 2010</h2><h3><a name="liveusb-creator-trojan" href="http://lewk.org/blog/liveusb-creator-trojan">liveusb-creator trojan in the wild</a></h3>
<p><p>
<img src="https://fedorahosted.org/liveusb-creator/attachment/wiki/img/fedorausb.png?format=raw" align="right"/>
I've been noticing many different copies of my Windows <a href="http://liveusb-creator.fedorahosted.org">liveusb-creator</a> popping up on various sketchy-looking download sites.  The majority of these copies contain a variant of the <a href="http://en.wikipedia.org/wiki/Vundo">Vundo</a> Trojan.

<blockquote><i>"Vundo, or the Vundo Trojan (also known as Virtumonde  or Virtumondo and sometimes referred to as MS Juan) is a Trojan horse that is known to cause popups and advertising for rogue antispyware programs, and sporadically other misbehavior including performance degradation and denial of service with some websites including Google  and Facebook."</i></blockquote>
</p>
<p>
So, if you downloaded a copy of the Windows liveusb-creator from anywhere other than
<a href="https://fedorahosted.org/liveusb-creator">https://fedorahosted.org/liveusb-creator</a> -- you could be infected.  Apparently
the latest variation of this trojan is undetectable by most antivirus
(although, clamav was able to recognize the one that I found), so you
may need to look around for some of the common symptoms.  There is apparently a
tool that will remove this trojan which can be found <a
href="http://vundofix.atribune.org">here</a>, however I have not tested it and
cannot vouch for its validity.
</p>
<p>
If anyone was actually hit by this, I'd be interested to hear about
it.<br/><br/>  Also,
to state the blatantly obvious: <b>only download the liveusb-creator from the <a href="https://fedorahosted.org/liveusb-creator">homepage</a>!</b>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 21:11 | <a href="http://lewk.org/blog/liveusb-creator-trojan">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/virus" rel="tag">virus</a>, <a href="http://lewk.org/blog/tags/liveusb-creator" rel="tag">liveusb-creator</a> </span> | <a href="http://lewk.org/blog/liveusb-creator-trojan.html#comment_anchor">4 comments</a>
</p>
<h2>Sat, 27 Mar 2010</h2><h3><a name="fedoracommunity-statistics" href="http://lewk.org/blog/fedoracommunity-statistics">Fedora Community Statistics</a></h3>
<p><p>
<a href="http://fedoracommunity.fedorahosted.org"><img src="http://fedorapeople.org/groups/designteam/Projects/Fedora%20Community/Fedora%20Community%20Banners/fedora-community-plain.png" align="right"/></a>
    I'm pleased to announce that version 0.4.0 of the <a href="http://fedoracommunity.fedorahosted.org">Fedora Community</a> dashboard has just hit <a href="https://admin.fedoraproject.org/community">production</a>.  Along with the usual batch of bugfixes, this release
contains a new '<a href="https://admin.fedoraproject.org/community/statistics">Statistics</a>' section that contains metrics from a variety of different pieces of Fedora Infrastructure.
</p>
<p>
    Thanks goes to <a href="http://ianweller.org/">Ian Weller</a> for the wiki stats, <a href="http://skvidal.wordpress.com/">Seth Vidal</a> for the torrent
    stats, and <a href="http://www.domsch.com/">Matt Domsch</a> & <a href="http://jspaleta.livejournal.com/">Jef Spaleta</a> for the map generation code.  I ended up writing the updates
metrics, package stats, and users/mirrors widgets.  Enjoy!
</p>

<p>
    <center>
<a href="https://admin.fedoraproject.org/community/statistics/users"><img src="http://lmacken.fedorapeople.org/img/fedoracommunity-userstats.png"/></a>
<br/>
<a href="https://admin.fedoraproject.org/community/statistics/mirrors"><img src="http://lmacken.fedorapeople.org/img/fedoracommunity-mirrorstats.png"/></a>
<br/>
<a href="https://admin.fedoraproject.org/community/statistics/packages"><img src="http://lmacken.fedorapeople.org/img/fedoracommunity-packagestats.png"/></a>
<br/>
<a href="https://admin.fedoraproject.org/community/statistics/accounts"><img src="http://lmacken.fedorapeople.org/img/fedoracommunity-accountstats.png"/></a>
<br/>
<a href="https://admin.fedoraproject.org/community/statistics/updates"><img src="http://lmacken.fedorapeople.org/img/fedoracommunity-updatestats.png"/></a>
<br/>
<a href="https://admin.fedoraproject.org/community/statistics/wiki"><img src="http://lmacken.fedorapeople.org/img/fedoracommunity-wikistats.png"/></a>
<br/>
<a href="https://admin.fedoraproject.org/community/statistics/torrents"><img src="http://lmacken.fedorapeople.org/img/fedoracommunity-torrentstats.png"/></a>
</center>

</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 03:48 | <a href="http://lewk.org/blog/fedoracommunity-statistics">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/metrics" rel="tag">metrics</a> </span> | <a href="http://lewk.org/blog/fedoracommunity-statistics.html#comment_anchor">4 comments</a>
</p>
<h2>Mon, 18 Jan 2010</h2><h3><a name="nose-0.11" href="http://lewk.org/blog/nose-0.11">nose 0.11</a></h3>
<p>
<p>
I know nose 0.11 is <a href="http://groups.google.com/group/nose-announce/browse_thread/thread/7c031dad4f53509a">old news</a>, but I've only recently discovered it's new <a href="http://somethingaboutorange.com/mrl/projects/nose/0.11.1/doc_tests/test_multiprocess/multiprocess.html">multiprocess module</a>.
</p>

<p>
<blockquote>
<code>
<pre>
lmacken@tomservo ~/bodhi $ nosetests
................................................................................................
----------------------------------------------------------------------
Ran 96 tests in 725.111s

OK

lmacken@tomservo ~/bodhi $ nosetests --processes=50
................................................................................................
----------------------------------------------------------------------
Ran 96 tests in 10.915s

OK
</pre>
</code>
</blockquote>
</p>

<p>
Nose 0.11 is already in rawhide, and will soon be in <a
href="https://admin.fedoraproject.org/updates/python-nose-0.11.1-1.fc12">updates-testing</a>.
</p>

<p>
<i>Note to self (and others): Buy the nose developers beer at PyCon next
month</i>
</p>

</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 22:58 | <a href="http://lewk.org/blog/nose-0.11">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a>, <a href="http://lewk.org/blog/tags/nose" rel="tag">nose</a> </span> | <a href="http://lewk.org/blog/nose-0.11.html#comment_anchor">4 comments</a>
</p>
<h2>Thu, 10 Dec 2009</h2><h3><a name="FUDCon-2009-Toronto" href="http://lewk.org/blog/FUDCon-2009-Toronto">FUDCon Toronto 2009</a></h3>
<p><img src="http://fedoraproject.org/w/uploads/4/49/FUDCon_F13_logo.png" align="right"/>
<p>
Another <a href="http://fedoraproject.org/wiki/FUDCon">FUDCon</a> is in the books, this time in Toronto.  It was great to catch up
with many people, put faces to some names, and meet a bunch of new contributors.
I gave a session on <a href="http://moksha.fedorahosted.org">Moksha</a>, which
I'll talk about below, and was also on the Fedora Infrastructure panel
discussion.
<p>
My goal this FUDCon wasn't to crank out a ton of code, but to focus on
gathering and prioritizing requirements and to help others be productive.
Here are some of the projects I focused on.
</p>
<h3>Moksha</h3>
<p>
<a href="http://moksha.fedorahosted.org">Moksha</a> is a project I created a little over a year ago, which is the base of a
couple of other applications I've been working on as well: <a
href="https://admin.fedoraproject.org/community">Fedora Community</a> and <a
href="http://civx.us">CIVX</a>.  I'll be blogging about these in more detail later.
</p>
<p>
One of the main themes of FUDCon this year was <a href="https://fedoraproject.org/wiki/Messaging_SIG">Messaging</a> (<a href="http://www.amqp.org/">AMQP</a>), and Moksha
is a large part of this puzzle, as it allows you to wield AMQP within web
applications.  During my session the demo involved busting open a terminal,
creating a consumer that reacts to all messages, creating a message producer,
and then creating a live chat widget -- all of which hooked up to Fedora's AMQP
broker.
</p>
<p>
I'll be turning my slides into an article, so expect a full blog post
explaining the basics soon.  In the mean time, I found <a
href="http://pseudogen.blogspot.com/2009/12/fudcon-day-one-awesomeness-that-is.html">Adam Miller's</a> description to be extremely amusing:
</p>
<p>
<blockquote>
"I walked into a session called "Moksha and Fedora
Community -- Real-time web apps with Python and AMQP" which blew my mind. This
is Web3.0 (not by definition, but that's what I'm calling it), Luke Macken and
J5 completely just stepped over web2.0 and said "pffft, childs play" (well not
really but in my mind I assume it went something like that). This session
showed off technology that allows real time message passing in a web browser as
well as "native" support for standard protocols. The project page is
<a href="https://fedorahosted.org/moksha/">https://fedorahosted.org/moksha/</a> and I think everyone on the planet should take
some time to go there and enjoy the demo, prepare to have your mind blown. Oh,
and I also irc transcribed that one as well
<a href="http://meetbot.fedoraproject.org/fudcon-room-3/2009-12-05/fudcon-room-3.2009-12-05-22.07.log.html">http://meetbot.fedoraproject.org/fudcon-room-3/2009-12-05/fudcon-room-3.2009-12-05-22.07.log.html</a> ... presentation slides found:
<a href="http://lmacken.fedorapeople.org/moksha-FUDConToronto-2009.odp">http://lmacken.fedorapeople.org/moksha-FUDConToronto-2009.odp</a>"
</blockquote>
</p>

</p>
<h3>Fedora Community</h3>
<p>
So after we released v1.0 of Fedora Community for F12, all of us
went off in seperate directions to hack on various things.  <a href="http://www.j5live.com">J5</a> wrote <a href="https://fedorahosted</a>.org/kamaloka-js/">AMQP
javascript bindings</a>, which I then integrated into Moksha.  <a href="http://mairin.wordpress.com">Máirín Duffy</a> built a <a href="http://mairin.wordpress.com/2009/10/17/open-source-portable-usability-testing-lab-part-2-the-parts">portable usability lab</a> and has been doing great research on the usability of the project.  And I dove back into Moksha to solidify the platform.
</p>
<p>
After we deploy our AMQP broker for Fedora, and once we have start adding <a href="https://fedoraproject.org/wiki/Messaging_SIG#Shims">shims</a>
into our existing infrastructure, we'll then be able to start creating live widgets and message consumers that can react to events, allowing us to wield Fedora in real-time.  This will let us to keep our fingers on the pulse of Fedora,
automate and facilitate tedious tasks, and gather metrics as things happen.
</p>
<p>
During the hackfests I also did some work on our current Fedora Community
deployment.  Over the past few weeks some of our widgets randomly died, and we
haven't been receiving proper error messages.  So, I successfully hooked up
<a href="http://pypi.python.org/pypi/WebError">WebError</a> and the team is now getting traceback emails, which will help us fix
problems much faster (or at least nag the hell out of us about them).
</p>
<p>
I also worked with <a href="http://ianweller.org/">Ian Weller</a> on the new Statistics section of the dashboard,
which has yet to hit production.  Ian and I wrote Wiki metrics, <a href="http://skvidal.wordpress.com/">Seth Vidal</a> wrote BitTorrent
metrics, and I wrote Bodhi metrics.  We've also got <a href="http://fedoraproject.org/wiki/Statistics">many more</a> to come.  My main concern
was a blocker issue that we were hitting with our <a href="http://code.google.com/p/flot/">flot</a> graphs when you quickly
bounce between tabs.  I ended up "fixing" the bug, so I'll be pushing what we
have of the stats branch into production in the near future.
</p>
<h3>TurboGears2</h3>
<p>

<a href="http://www.turbogears.org">TurboGears</a> has definitely been our favorite web framework within Fedora's
Infrastructure for many years now.  TurboGears2, a complete re-invention of
itself, has been released recently, and is catching on *very* quickly in the
community.  Tons of people are working on awesome new apps, and loving
every minute of it.  I was also able to convert a rails hacker over to it,
after he was able to quickly dive into one of the tutorials with ease.  See
my <a href="http://lewk.org/blog/TurboGears2-in-Fedora">previous blog
post</a> about getting up and running with TG2 in Fedora/EPEL.

</p>

<h3>python-fedora</h3>
<p>
One of my main tasks during the hackfests was to pull the authentication layer
in Fedora Community that authenticates against the Fedora Account System, and
port it over to python-fedora, so we can use it in any TurboGears2 application.
I committed the initial port to python-fedora-devel, and have started working
on integrating it into a default TG2 quickstart and document the process.
There are still a couple of minor things I want to fix/clean up before
releasing it, so expect a blog about it soon.
</p>

<h3><a href="http://bodhi.fedorahosted.org">Bodhi</a></h3>
<p>

It seems like yesterday that I was an intern at Red Hat working on an internal
updates system for Fedora Core.  Coming up on 5 years later, and I am now working on my 3rd
implementation of an updates system, Bodhi v2.0.  What's wrong with the current
Bodhi you ask?  Well, if you talk to any user of it, you'll probably get a
pretty long list.  Bodhi is the first TurboGears application written & deployed
in Fedora Infrastructure, and uses the vanilla components (SQLObject, kid,
CherryPy2).  The TG1 stack has been holding up quite nicely over the years,
and is still supported upstream, but bodhi's current implemention and design
does not make it easy to grow.
</p>
<p>
Bodhi v2.0 will be implemented in TurboGears2, using SQLAlchemy for an ORM,
Mako for templates, and ToscaWidgets2 for re-usable widgets.  It will be
hook-based and plugin-driven, and will be completely distribution agnostic.
Another important goal will be AMQP message-bus integration, which will allow
other services or users to react to various events inside of the system as they
happen.
</p>
<p>
So far I've ported the old DB model from SQLObject to SQLAlchemy, and have
begun porting the old unit tests, and writing new ones.  Come the new year,
I'll be giving this much more of my focus.
</p>
<p>
During the hackfests I got a chance to talk to <a
href="http://www.ausil.us/">Dennis Gilmore</a> about various
improvements that we need to make with regard to the update push process.  It
was also great to talk to many different users of bodhi, who expressed various
concerns, some of which I've already fixed.  I also got a chance to talk to
<a href="https://fedoraproject.org/wiki/User:Laxathom">Xavier Lamien</a> about deploying Bodhi for <a href="http://rpmfusion.org">rpmfusion</a>.  On the bus ride home I
helped explain to <a href="http://blog.melchua.com/">Mel</a> how Bodhi & Koji fit into the big picture of things.
</p>
<p>
During the BarCamp sessions I also attended a session about the <a
href="http://fedoraproject.org/wiki/Desktop/Whiteboards/UpdateExperience">Update
Experience</a>, where we discussed many important issues surrounding updates.
</p>
<h3>liveusb-creator</h3>
<p>

So I got a chance to finally meet <a href="http://fedoraproject.org/wiki/User:Sdz">Sebastian Dziallas</a>, of <a href="http://wiki.sugarlabs.org/go/Sugar_on_a_Stick">Sugar on a Stick</a> fame,
and was able to fix a few liveusb-creator issues on his laptop.  I ended up
pushing out a new release a couple of days ago that contains some of those
fixes, along with a new version of Sugar on a Stick.
</p>
<p>
The liveusb-creator has been catching a lot of press recently (see the <a href="http://liveusb-creator.fedorahosted.org">front page</a> for a list).  Not only did it have a 2 page spread in Linux Format, but it was also featured in this weeks Wired.com article <a href="http://www.wired.com/geekdad/2009/12/new-sugar-on-a-stick-brings-much-needed-improvements/comment-page-1/#comment-31925">New Sugar on a Stick Brings Much Needed Improvements</a>.  Rock.
</p>
<h3>Python</h3>
<p>
There was lot of brainstorming done by <a href="http://dmalcolm.livejournal.com/">Dave Malcolm</a>, <a href="http://cgwalters.livejournal.com">Colin Walters</a>, <a href="http://www.advogato.org/person/badger/">Toshio Kuratomi</a>, <a href="http://codewiz.org/">Bernie Innocenti</a>, I, and many others about various improvements that we could make to the Python interpreter.  From speeding up startup time by doing some clever caching to potentially creating a new optimized compiled binary format.  We also looked into how WebError/abrt gather tracebacks, and discussed ways of enabling interactive traceback debugging for vanilla processes, without requiring a layer of WSGI middleware.
</p>
<p>
There was also work done on <a href="http://lwn.net/Articles/365689">adding
SystemTap probes to Python</a>, which is very exciting.  There are <a href="https://fedoraproject.org/wiki/Features/SystemtapStaticProbes#Python">many ideas</a> for various probe points, including one that I blogged about <a href="http://lewk.org/blog/python-dictionary-optimizations">previously</a>.
</p>
<h3>Intel iMac8,1 support</h3>
<p>

My iMac sucks at Linux.  This has been something
that has been nagging me for a long time, and I've been slowly trying to chip away at
the problems.  First, I've been doing work on a Mac port of the liveusb-creator.  I also
started to work on a <a
href="http://lmacken.fedorapeople.org/patches/linux-2.6.31-efifb-iMac.patch">kernel
patch</a> for getting the EFI framebuffer working, and discussed how to do it
with ajax and pjones.  The screen doesn't display anything after grub, and
since we don't know the base address of the framebuffer, it involves writing
code to iterate over memory trying to find some common pixel patterns.  I'm
still trying to wrap my head around all of it, but I'll probably end up just buying them
beer to fix it for me.
</p>
<p>
<h3>Thincrust</h3>

<a href="http://thincrust.net">Thincrust</a> is a project that I've been excited about for a while, and I
actually have some appliances deployed in a production cloud.  I was able to
run some ideas for various virtual appliances by one of the authors over some
beers.  Some pre-baked virtual appliances that you can easily throw into a
cloud that I would like to see:
</p>
<p>
<ul>
    <li><a href="http://wsgi.org">WSGI</a> appliance</li>
    <li>TurboGears2, Pylons, Django, etc.</li>
    <li>Moksha - Real-time web application in a box</li>
    <li>func, certmaster, puppetmaster</li>
    <li>Intrusion detection system</li>
    <li>Many more that I can't think of right now</li>
</ul>
<p>
<h3>dogtail</h3>

I'm glad to see that <a href="https://fedorahosted.org/dogtail">dogtail</a> is
still exciting people in the community.  It still has a lot of potential to
improve not only the way we test graphical software, but we also discussed ways
of using it to teach people and automate various desktop tasks. What if you
logged in after a fresh install and got the following popup bubble:
</p>
<p>
<b>Hi, welcome to Fedora, what can I help you do today?</b>
<ul>
        <li>Installing new software</li>
        <li>Setting up an email client</li>
        <li>Using and RSS news reader</li>
        <li>More...</li>
</ul>
</p>
<p>
Each task would then allow Fedora to take the wheel and walk the user through
various steps.  I had this idea a while ago, when dogtail first came out, and I still
think it would be totally awesome.  Anyway, this was not a focus of the
hackfests, but merely a conversation that I had while walking to lunch :)
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 17:49 | <a href="http://lewk.org/blog/FUDCon-2009-Toronto">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/FUDCon" rel="tag">FUDCon</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/liveusb-creator" rel="tag">liveusb-creator</a>, <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a>, <a href="http://lewk.org/blog/tags/Moksha" rel="tag">Moksha</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a> </span> | <a href="http://lewk.org/blog/FUDCon-2009-Toronto.html#comment_anchor">9 comments</a>
</p>
<h2>Mon, 09 Nov 2009</h2><h3><a name="liveusb-creator-3.8.6" href="http://lewk.org/blog/liveusb-creator-3.8.6">New liveusb-creator release!</a></h3>
<p><p>

<img
src="https://fedorahosted.org/liveusb-creator/attachment/wiki/img/fedorausb.png?format=raw" align="right" />

So I've gotten some pretty inspiring feedback from various users of the
liveusb-creator recently, so I decided to put some cycles into it this weekend and
crank out another release.

<blockquote><code>
"As a non-Linux person, Live-USB Creator has improved the quality of my life measurably!" --Dr. Arthur B. Hunkins
</code></blockquote>

Yesterday I released version 3.8.6 of the liveusb-creator.  Changes in this
release include:
<br/>
<ul>
<li>Added the F12 beta release</li>
<li>Updated to the latest Sugar on a Stick v2 beta snapshot (<a href="https://bugzilla.redhat.com/show_bug.cgi?id=522240">#522240</a>)</li>
<li>Made our automatic device detection code more robust (<a href="https://bugzilla.redhat.com/show_bug.cgi?id=519134">#519134</a>)</li>
<li>Fixed encoding of unicode strings from exceptions (<a href="https://bugzilla.redhat.com/show_bug.cgi?id=471367">#471367</a>)</li>
<li>Made our Linux device detection more robust (<a href="https://bugzilla.redhat.com/show_bug.cgi?id=517053">#517053</a>)</li>
<li>Intel Mac EFI directory preparation (<a href="https://bugzilla.redhat.com/show_bug.cgi?id=526825">#526825</a>) thanks to Matt Domsch</li>
<li>Made our windows device detection more robust</li>
<li>Added a --device-checksum options, which calculates the checksum of the entire device.</li>
<li>Added a --liveos-checksum option, which takes the checksum of all LiveOS files, and then generate a checksum of the checksums</li>
<li>Added a --hash option for configuring the hash for the above checksum features</li>
<li>Made the LiveUSBCreator.bootable_partition method a little more robust</li>
<li>Better handling of file descriptors</li>
<li>Some Windows-specific optimizations & fixes</li>
<li>Fixed a bug with the overlay size on sticks with not much free space</li>
<li>Handle device paths containing spaces when running extlinux (<a href="https://bugzilla.redhat.com/show_bug.cgi?id=490843">#490843</a>)</li>
<li>Remove some duplicate po files (<a href="https://bugzilla.redhat.com/show_bug.cgi?id=516841">#516841</a>)</li>
<li>Many translation updates</li>
</ul>

<b>Windows</b>
<br/>
<a href="https://fedorahosted.org/releases/l/i/liveusb-creator/liveusb-creator-3.8.6.zip">https://fedorahosted.org/releases/l/i/liveusb-creator/liveusb-creator-3.8.6.zip</a>

<br/>
<br/>
<b>Fedora</b>

<br/>
<a
href="https://admin.fedoraproject.org/updates/liveusb-creator-3.8.6-1.fc11">https://admin.fedoraproject.org/updates/liveusb-creator-3.8.6-1.fc11</a>
<br/>
<a
href="https://admin.fedoraproject.org/updates/liveusb-creator-3.8.6-1.fc12">https://admin.fedoraproject.org/updates/liveusb-creator-3.8.6-1.fc12</a>
<br/>
<br/>

<b>Source</b>

<br/>
<a href="https://fedorahosted.org/releases/l/i/liveusb-creator/liveusb-creator-3.8.6.tar.bz2">https://fedorahosted.org/releases/l/i/liveusb-creator/liveusb-creator-3.8.6.tar.bz2</a>
<br/>
<br/>

<b>Trac</b>
<br/>
<a
href="http://liveusb-creator.fedorahosted.org">http://liveusb-creator.fedorahosted.org</a>


</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 02:39 | <a href="http://lewk.org/blog/liveusb-creator-3.8.6">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/liveusb-creator" rel="tag">liveusb-creator</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/liveusb-creator-3.8.6.html#comment_anchor">1 comments</a>
</p>
<h2>Fri, 10 Jul 2009</h2><h3><a name="bodhi-epel" href="http://lewk.org/blog/bodhi-epel">Bodhi EPEL support!</a></h3>
<p><p>
<img src="https://admin.fedoraproject.org/updates/static/images/bodhi-icon-48.png" align="right"/>
It's been a long time coming, but the <a href="http://fedoraproject.org/wiki/EPEL">Extra Packages for Enterprise Linux (EPEL)</a> project is finally utilizing the <a href="http://koji.fedorahosted.org">Koji</a> build system and the <a href="http://bodhi.fedorahosted.org">Bodhi</a> updates system.
</p>
<p>
So I spent the past week hacking on EPEL support in <a href="http://bodhi.fedorahosted.org">bodhi</a>.  This was not a trivial task, and took <a href="https://fedorahosted.org/bodhi/timeline">more work than expected</a>.  Overall, it was a very beneficial experience, as I was able to hack in some higher level abstractions and also remove a lot of Fedora-specific assumptions in the code.  Most of the changes were what I would normally call "hacks", mainly because I wanted to do it without changing the database schema.  However, this gives me a much clearer picture as to what we need from the Bodhi v2.0 model.  Anyway, 28 bodhi upgrades later, and everything seems to be working fine.
</p>
<p>
The inevitable TurboGears2 rewrite/port of Bodhi is a little further down the
road.  I've already ported the original model from SQLObject to SQLAlchemy, but
the templates, controllers, and widgets still need to be ported.  If you're
interested in helping make bodhi suck less, then please come talk to me :)
</p>
<p>
Anyway, developers can now submit their EPEL updates <a href="http://bodhi.fedoraproject.org">here</a>, or by running `make update` in their EL CVS branches.  Admins can read the <a href="https://fedoraproject.org/wiki/Bodhi_Infrastructure_SOP">Bodhi SOP</a> to learn how to push updates.
</p>
<p>
The workflow is far from perfect, but there has been some recent discussions as
to how we want EPEL to be treated differently compared to Fedora updates.  If
you have suggestions or comments, discussions should take place on <a
href="http://www.redhat.com/mailman/listinfo/epel-devel-list">epel-devel-list</a>.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 19:06 | <a href="http://lewk.org/blog/bodhi-epel">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a> </span> | <a href="http://lewk.org/blog/bodhi-epel.html#comment_anchor">3 comments</a>
</p>
<h2>Tue, 27 Jan 2009</h2><h3><a name="bodhi-push-process" href="http://lewk.org/blog/bodhi-push-process">bodhi updates push process</a></h3>
<p><img src="https://admin.fedoraproject.org/updates/static/images/bodhi-icon-48.png" align="right"/>

<p>
<a href="http://bodhi.fedorahosted.org">Bodhi</a>'s push process is something
that is usually quite opaque to Fedora package maintainers.  Once an update
request goes into bodhi, the developer sits back and waits for the update to go
to where it needs to go.  The ball is then in releng's court, as they must
sign the packages, and tell bodhi to begin the push.  From there, bodhi
does it's thing for a while, and then updates magically end up on our users machines. Yay!
</p>

<p>
Pushing updates used to take the better part of a day, mostly due to dumb code
and lots of filesystem churn over NFS.  Thankfully, a lot of the code is now
much smarter, and people like jkeating and mmcgrath have been helping to
address the NFS & infrastructure bottlenecks.
</p>

<p>
Hopefully I can help shed some light on one of the dark corners of bodhi known
as The Masher.  Here are some statistics of the last updates push that happened
earlier today.
<p>

<p>
<center>
<table border=1>
<tr> <td>Initial push request from releng</td><td></td> </tr>
<tr> <td>Check koji tag / bodhi status consistency</td><td>38s</td> </tr>
<tr> <td>Move all of the build tags in Koji</td>  <td>9m32s</td> </tr>
<tr> <td>Update the comps CVS module </td> <td>11s</td> </tr>
<tr> <td>Mash f9-updates-testing </td> <td>4m16s</td> </tr>
<tr> <td>Mash f9-updates </td> <td>1h3m8s</td> </tr>
<tr> <td>Mash f10-updates-testing </td> <td>12m43s</td> </tr>
<tr> <td>Mash f10-updates </td> <td>37m51s</td> </tr>
<tr> <td>Set update ids, state modifications, updates-testing digest generation</td> <td>1m57s</td> </tr>
<tr> <td>Generate updateinfo.xml </td> <td>5m55s</td> </tr>
<tr> <td>Repo sanity checks & symlinking to go live </td> <td>1m4s</td> </tr>
<tr> <td>Cache latest repodata, and remove old </td> <td>1m14s</td> </tr>
<tr> <td>Wait for updates to hit the master mirror </td> <td>1h1s</td> </tr>
<tr> <td>Send update notices, update/close bugs, notify developers/commenters </td> <td>11m11s</td> </tr>
<tr><td><b>Total</b></td><td><b>3h49m42s</b></td></tr>
</table>
</center>
</p>
<br/>
<p>
So we've obviously made some great improvements here, and once the signing
server is deployed, you can probably expect a much more frequent/consistent flow of updates.
However, I definitely think there is still a lot of low-hanging fruit in this
process, and many steps can probably be done in parallel.  We're going to be
adding <a
href="http://fedoraproject.org/wiki/Releases/FeaturePresto">DeltaRPM</a>
generation into the mix in the near future, so I'll give an update a bit later
with some details as to how that effects the process.
</p>
<p>
Anyway... if you know Python, and enjoy optimizing code -- come talk to me :)
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 05:15 | <a href="http://lewk.org/blog/bodhi-push-process">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/metrics" rel="tag">metrics</a> </span> | <a href="http://lewk.org/blog/bodhi-push-process.html#comment_anchor">0 comments</a>
</p>
<h2>Wed, 31 Dec 2008</h2><h3><a name="liveusb-creator-3.0" href="http://lewk.org/blog/liveusb-creator-3.0">liveusb-creator 3.0</a></h3>
<p><img src="https://fedorahosted.org/liveusb-creator/attachment/wiki/img/fedorausb.png?format=raw" align="right"/>
<p>
I'm pleased to announce version 3.0 of the <a href="http://liveusb-creator.fedorahosted.org">liveusb-creator</a>.  Aside from the usual batch of bug fixes and code improvements, this release also contains a variety of enhancements:
</p>
<p>
<ul>
<li>Fedora 10 support</li>
<li>Add a touch of <a href="http://sugarlabs.org">Sugar</a> to your USB key with the <a href="https://www.redhat.com/archives/fedora-announce-list/2008-October/msg00012.html">Sugar Spin 0.82-2</a>!</li>
<li>Ability to create OLPC-bootable live USB sticks or SD cards with the new `--xo` option</li>
<li>Translations! (Thanks to the incredible <a href="http://translate.fedoraproject.org">Transifex</a>)<ul>
    <li>Greek translation (Nikos Charonitakis)</li>
    <li>Slovak translation (Ondrej Sulek)</li>
    <li>Catalan translation (Xavier Conde)</li>
    <li>French translation (PabloMartin-Gomez)</li>
    <li>Serbian (Milos Komarcevic)</li>
    <li>Chinese (sainrysec)</li>
    <li>Brazilian Portuguese translation (Igor Pires Soares)</li>
    <li>Spanish translation (Domingo Becker)</li>
    <li>Malay translation (Sharuzzaman Ahmat Raslan)</li>
    <li>German Translation (Marcus Nitzschke, Fabian Affolter)</li>
    <li>Polish translation (Piotr Drąg)</li>
    <li>Portuguese translation (Valter Fukuoka)</li>
    <li>Czech translation (Adam Pribyl)</li>
    </li>
  </ul>
</ul>
</p>
<p>
For Fedora 9 and 10 users, you can currently find the <a href="https://admin.fedoraproject.org/updates/liveusb-creator">liveusb-creator-3.0</a> in the updates-testing repository.  Feedback is appreciated!
</p>
<p>
There are still many more great features in the pipeline, so <a href="https://fedorahosted.org/liveusb-creator/timeline">stay tuned</a>!
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 23:19 | <a href="http://lewk.org/blog/liveusb-creator-3.0">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/LiveUSB" rel="tag">LiveUSB</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a> </span> | <a href="http://lewk.org/blog/liveusb-creator-3.0.html#comment_anchor">2 comments</a>
</p>
<h3><a name="tamefox-part2" href="http://lewk.org/blog/tamefox-part2">Taming the fox (part 2)</a></h3>
<p><p>
So, in my <a href="http://lewk.org/blog/tamefox">previous post</a> I wrote a script that uses xdotool to put firefox to
sleep when it does not have focus.  The implementation was pretty
straight-forward, but not optimal.  Thanks to some help from <a href="http://semicomplete.com">Jordan Sissel</a>, I threw
together a Python script that accomplishes this goal much more effectively, using the python-xlib module instead of xdotool.
</p>
<blockquote></code>
<a href="http://lmacken.fedorapeople.org/tamefox.py">http://lmacken.fedorapeople.org/tamefox.py</a>
</code>
</blockquote>

<blockquote><code>
<font color="#cd00cd">import</font>&nbsp;os<br>
<font color="#cd00cd">from</font>&nbsp;signal <font
color="#cd00cd">import</font>&nbsp;SIGSTOP, SIGCONT<br>
<font color="#cd00cd">from</font>&nbsp;Xlib <font
color="#cd00cd">import</font>&nbsp;X, display, Xatom<br>
<br>
<font color="#0000ff"><b>def</b></font>&nbsp;<font
color="#008b8b">watch</font>(properties):<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font
color="#000000">&quot;&quot;&quot;</font></span><font color="#00cd00">&nbsp;A
generator that yields events for a list of X properties </font><span
style="background-color: #ffffff"><font
color="#000000">&quot;&quot;&quot;</font></span><br>
&nbsp;&nbsp;&nbsp;&nbsp;dpy = display.Display()<br>
&nbsp;&nbsp;&nbsp;&nbsp;screens = dpy.screen_count()<br>
&nbsp;&nbsp;&nbsp;&nbsp;atoms = {}<br>
&nbsp;&nbsp;&nbsp;&nbsp;wm_pid = dpy.get_atom(<span style="background-color:
#ffffff"><font color="#000000">'</font></span><font
color="#00cd00">_NET_WM_PID</font><span style="background-color:
#ffffff"><font color="#000000">'</font></span>)<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>for</b></font>&nbsp;property
<font color="#0000ff"><b>in</b></font>&nbsp;properties:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atomid =
dpy.get_atom(property, only_if_exists=True)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>if</b></font>&nbsp;atomid != X.NONE:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atoms[atomid]
= property<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>for</b></font>&nbsp;num <font
color="#0000ff"><b>in</b></font>&nbsp;range(screens):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;screen = dpy.screen(num)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;screen.root.change_attributes(event_mask=X.PropertyChangeMask)<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>while</b></font>&nbsp;True:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev = dpy.next_event()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>if</b></font>&nbsp;ev.type == X.PropertyNotify:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>if</b></font>&nbsp;ev.atom <font
color="#0000ff"><b>in</b></font>&nbsp;atoms:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data
= ev.window.get_full_property(ev.atom, 0)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id
= int(data.value.tolist()[0])<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window
= dpy.create_resource_object(<span style="background-color: #ffffff"><font
color="#000000">'</font></span><font color="#00cd00">window</font><span
style="background-color: #ffffff"><font color="#000000">'</font></span>,
id)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
window.id == 0: continue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pid
= int(window.get_full_property(wm_pid, 0).value.tolist()[0])<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title
= window.get_full_property(Xatom.WM_NAME, 0).value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>yield</b></font>&nbsp;atoms[ev.atom], title, pid, data<br>
<br>
<font color="#0000ff"><b>def</b></font>&nbsp;<font
color="#008b8b">tamefox</font>():<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font
color="#000000">&quot;&quot;&quot;</font></span><font
color="#00cd00">&nbsp;Puts firefox to sleep when it loses focus </font><span
style="background-color: #ffffff"><font
color="#000000">&quot;&quot;&quot;</font></span><br>
&nbsp;&nbsp;&nbsp;&nbsp;alive = True<br>
&nbsp;&nbsp;&nbsp;&nbsp;ff_pid = None<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>for</b></font>&nbsp;property,
title, pid, event <font color="#0000ff"><b>in</b></font>&nbsp;watch([<span
style="background-color: #ffffff"><font color="#000000">'</font></span><font
color="#00cd00">_NET_ACTIVE_WINDOW</font><span style="background-color:
#ffffff"><font color="#000000">'</font></span>]):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>if</b></font>&nbsp;title.endswith(<span
style="background-color: #ffffff"><font color="#000000">'</font></span><font
color="#00cd00">Firefox</font><span style="background-color: #ffffff"><font
color="#000000">'</font></span>) <font
color="#0000ff"><b>or</b></font>&nbsp;title.endswith(<span
style="background-color: #ffffff"><font color="#000000">'</font></span><font
color="#00cd00">Vimperator</font><span style="background-color: #ffffff"><font
color="#000000">'</font></span>):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ff_pid
= pid<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>if</b></font>&nbsp;<font
color="#0000ff"><b>not</b></font>&nbsp;alive:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color:
#ffffff"><font color="#000000">'</font></span><font color="#00cd00">Waking up
firefox</font><span style="background-color: #ffffff"><font
color="#000000">'</font></span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.kill(ff_pid,
SIGCONT)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alive
= True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>elif</b></font>&nbsp;ff_pid <font
color="#0000ff"><b>and</b></font>&nbsp;alive <font
color="#0000ff"><b>and</b></font>&nbsp;<font
color="#0000ff"><b>not</b></font>&nbsp;title.startswith(<span
style="background-color: #ffffff"><font color="#000000">'</font></span><font
color="#00cd00">Opening</font><span style="background-color: #ffffff"><font
color="#000000">'</font></span>) <font
color="#0000ff"><b>and</b></font>&nbsp;<font color="#ff1493">\</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title
<font color="#0000ff"><b>not</b></font>&nbsp;<font
color="#0000ff"><b>in</b></font>&nbsp;(<span style="background-color:
#ffffff"><font color="#000000">'</font></span><font
color="#00cd00">Authentication Required</font><span style="background-color:
#ffffff"><font color="#000000">'</font></span>, <span style="background-color:
#ffffff"><font color="#000000">'</font></span><font
color="#00cd00">Confirm</font><span style="background-color: #ffffff"><font
color="#000000">'</font></span>, <span style="background-color: #ffffff"><font
color="#000000">'</font></span><font color="#00cd00">Alert</font><span
style="background-color: #ffffff"><font color="#000000">'</font></span>):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font
color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color:
#ffffff"><font color="#000000">'</font></span><font color="#00cd00">Putting
firefox to sleep</font><span style="background-color: #ffffff"><font
color="#000000">'</font></span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.kill(ff_pid,
SIGSTOP)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alive
= False<br>
<br>
<font color="#0000ff"><b>if</b></font>&nbsp;__name__ == <span
style="background-color: #ffffff"><font color="#000000">'</font></span><font
color="#00cd00">__main__</font><span style="background-color: #ffffff"><font
color="#000000">'</font></span>:<br>
&nbsp;&nbsp;&nbsp;&nbsp;tamefox()<br>

</code></blockquote>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 07:03 | <a href="http://lewk.org/blog/tamefox-part2">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/hacks" rel="tag">hacks</a> </span> | <a href="http://lewk.org/blog/tamefox-part2.html#comment_anchor">8 comments</a>
</p>
<h3><a name="tamefox" href="http://lewk.org/blog/tamefox">Taming the fox</a></h3>
<p><p>
As with most people these days, I have firefox running at all times.  I also usually have about 50-100 tabs open (how I manage that insanity should probably be left for it's own blog post).  When I'm not actively using it, firefox "idles" about as well as an ADHD kid after a case of Red Bull, and ends up waking my kernel up hundreds of times a second.  When I'm hacking in vim, do I really want or need javascript/flash/animations/etc to be running?  Probably not...
</p>
<p>
So tonight I threw together a little <a href="http://lewk.org/tamefox">script</a> to "solve" this "problem".
</p>
<blockquote><code>
<font color="#0000ff">#!/bin/bash</font><br>
<font color="#0000ff"># A tool for putting firefox to sleep when it does not have focus.</font><br>
<font color="#008b8b">alive</font>=<font color="#ff00ff">1</font><br>
<font color="#a52a2a"><b>while </b></font><font color="#a52a2a"><b>true</b></font><font color="#a52a2a"><b>;</b></font><font color="#a52a2a"><b>&nbsp;</b></font><font color="#a52a2a"><b>do</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>if </b></font>xwininfo -id <font color="#a020f0">$(</font><font color="#6a5acd">xdotool getactivewindow</font><font color="#a020f0">)</font>&nbsp;<font color="#a52a2a"><b>|</b></font>&nbsp;<font color="#a52a2a"><b>egrep</b></font>&nbsp;<font color="#a52a2a"><b>-q</b></font>&nbsp;<font color="#a52a2a"><b>'</b></font><font color="#ff00ff">(Firefox|Vimperator)</font><font color="#a52a2a"><b>'</b></font>&nbsp;<font color="#a52a2a"><b>;</b></font>&nbsp;<font color="#a52a2a"><b>then</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>if </b></font><font color="#a52a2a"><b>[</b></font>&nbsp;<font color="#a52a2a"><b>!</b></font>&nbsp;<font color="#a020f0">$alive</font>&nbsp;<font color="#a52a2a"><b>]</b></font><font color="#a52a2a"><b>;</b></font>&nbsp;<font color="#a52a2a"><b>then</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>kill</b></font>&nbsp;-CONT <font color="#6a5acd">`pidof firefox`</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008b8b">alive</font>=<font color="#ff00ff">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>fi</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>else</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>if </b></font><font color="#a52a2a"><b>[</b></font>&nbsp;<font color="#a020f0">$alive</font>&nbsp;<font color="#a52a2a"><b>]</b></font><font color="#a52a2a"><b>;</b></font>&nbsp;<font color="#a52a2a"><b>then</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>kill</b></font>&nbsp;-STOP <font color="#6a5acd">`pidof firefox`</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008b8b">alive</font>=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>fi</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>fi</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>sleep</b></font>&nbsp;<font color="#ff00ff">1</font><br>
<font color="#a52a2a"><b>done</b></font><br>
</code></blockquote>
</p>
<p>
Obviously the most efficient way to do this would be to hook into X's focus
events, but I'm lazy...
<br/>
<b>*UPDATE*:</b> I got un-lazy and implemented a better version using the python-xlib module.  See <a href="http://lewk.org/blog/tamefox-part2">Taming the fox (part 2).</a>
</p>
<p>
This script uses <a href="http://www.semicomplete.com/projects/xdotool/">xdotool</a>, which I just packaged and pushed into <a href="https://bugzilla.redhat.com/show_bug.cgi?id=478502">review</a> for Fedora. (<b>update</b>: Oops, looks like xdotool is already in Fedora :)
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 04:23 | <a href="http://lewk.org/blog/tamefox">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/hacks" rel="tag">hacks</a> </span> | <a href="http://lewk.org/blog/tamefox.html#comment_anchor">10 comments</a>
</p>
<h2>Sun, 14 Dec 2008</h2><h3><a name="wiki" href="http://lewk.org/blog/wiki">>>> from fedora.client import Wiki</a></h3>
<p><p>
I created a simple Python API for interacting with <a href="http://fedoraproject.org/wiki">Fedora's MediaWiki</a> a while back, in an attempt to gather various metrics.  I just went ahead and committed it to the <a href="http://fedorahosted.org/python-fedora">python-fedora</a> modules.  Here is how to use it:
</p>

<blockquote><code>
<font face="monospace">
&gt;&gt;&gt; <font color="#cd00cd">from</font>&nbsp;fedora.client <font color="#cd00cd">import</font>&nbsp;Wiki<br>

&gt;&gt;&gt; wiki = Wiki()<br>
&gt;&gt;&gt; wiki.print_recent_changes()<br>
From 2008-12-07 20:59:01.187363 to 2008-12-14 20:59:01.187363<br>
500 wiki changes in the past week<br>
<br>
== Most active wiki users ==<br>
&nbsp;Bbbush............................................ 230<br>
&nbsp;Konradm........................................... 25<br>
&nbsp;Duffy............................................. 22<br>
&nbsp;Jreznik........................................... 21<br>
&nbsp;Ianweller......................................... 14<br>
&nbsp;Jjmcd............................................. 14<br>
&nbsp;Geroldka.......................................... 10<br>
&nbsp;Gdk............................................... 9<br>
&nbsp;Anouar............................................ 7<br>
&nbsp;Gomix............................................. 6<br>
<br>
== Most edited pages ==<br>
&nbsp;Features/KDE42.................................... 21<br>
&nbsp;SIGs/SciTech/SAGE................................. 15<br>
&nbsp;FUDCon/FUDConF11.................................. 14<br>
&nbsp;Special:Log/upload................................ 13<br>
&nbsp;How to be a release notes beat writer............. 12<br>
&nbsp;Special:Log/move.................................. 11<br>
&nbsp;Design/SETroubleshootUsabilityImprovements........ 10<br>
&nbsp;PackageMaintainers/FEver.......................... 9<br>
&nbsp;User:Gomix........................................ 6<br>
&nbsp;Zh/主要配置文件..................................... 5<br>
<br>
&gt;&gt;&gt; <font color="#0000ff"><b>for</b></font>&nbsp;event <font color="#0000ff"><b>in</b></font>&nbsp;wiki.send_request(<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">api.php</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>, req_params={<br>
...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">action</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>: <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">query</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>,<br>
...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">list</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>: <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">logevents</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>,<br>
...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">format</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>: <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">json</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>,<br>
...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">query</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>][<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">logevents</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>]:<br>
...&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">%-10s %-15s %s</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;% (event[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">action</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>], event[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">user</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>], event[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">title</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>])<br>
... <br>
patrol&nbsp;&nbsp;&nbsp;&nbsp; Ianweller&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User:Ianweller/How to create a contributor business card<br>
move&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nippur&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REvanderLuit<br>
patrol&nbsp;&nbsp;&nbsp;&nbsp; Ianweller&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Project Leader<br>
move&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ianweller&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FPL<br>
upload&nbsp;&nbsp;&nbsp;&nbsp; Anouar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Image:AnouarAbtoy.JPG<br>
move&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Liangsuilong&nbsp;&nbsp;&nbsp;&nbsp;ZH/Docs/FetionOnFedora<br>
move&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Liangsuilong&nbsp;&nbsp;&nbsp;&nbsp;FetionOnFedora<br>
patrol&nbsp;&nbsp;&nbsp;&nbsp; Ianweller&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User:Ianweller<br>
</font>
</blockquote></code>

<p>
It uses the <a href="http://lmacken.fedorapeople.org/python-fedora/client.html">fedora.client.BaseClient</a>, which is a class that simplifies interacting with
arbitrary web services.  <a href="http://advogato.org/person/badger/">Toshio</a> and I created it a while back as a the core client for talking with our various TurboGears-based <a href="http://lmacken.fedorapeople.org/python-fedora/service.html">Fedora Services</a> (<a href="http://fedorahosted.org/bodhi">bodhi</a>, <a href="http://fedorahosted.org/packagedb">pkgdb</a>, <a href="http://fedorahosted.org/fas">fas</a>, <a href="http://fedoraproject.org/wiki/Infrastructure/Services">etc.</a>), but it has now seemed to morph into a much more flexible client for talking JSON with web applications.
</p>
<blockquote><code>
<!-- GPLv2, yo. //-->
<font face="monospace">
<font color="#cd00cd">from</font>&nbsp;datetime <font color="#cd00cd">import</font>&nbsp;datetime, timedelta<br>
<font color="#cd00cd">from</font>&nbsp;collections <font color="#cd00cd">import</font>&nbsp;defaultdict<br>
<font color="#cd00cd">from</font>&nbsp;fedora.client <font color="#cd00cd">import</font>&nbsp;BaseClient<br>
<br>
<font color="#0000ff"><b>class</b></font>&nbsp;<font color="#008b8b">Wiki</font>(BaseClient):<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>def</b></font>&nbsp;<font color="#008b8b">__init__</font>(self, base_url=<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00"><a href="http://fedoraproject.org/w/">http://fedoraproject.org/w/</a></font><span style="background-color: #ffffff"><font color="#000000">'</font></span>, *args, **kwargs):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(Wiki, self).__init__(base_url, *args, **kwargs)<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>def</b></font>&nbsp;<font color="#008b8b">get_recent_changes</font>(self, now, then, limit=500):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font color="#000000">&quot;&quot;&quot;</font></span><font color="#00cd00">&nbsp;Get recent wiki changes from `now` until `then` </font><span style="background-color: #ffffff"><font color="#000000">&quot;&quot;&quot;</font></span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = self.send_request(<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">api.php</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>, req_params={<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">list</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;&nbsp;&nbsp;&nbsp;: <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">recentchanges</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">action</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;&nbsp;: <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">query</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">format</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;&nbsp;: <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">json</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">rcprop</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;&nbsp;: <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">user|title</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">rcend</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;&nbsp; : then.isoformat().split(<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">.</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>)[0] + <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">Z</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">rclimit</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;: limit,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>if</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">error</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;<font color="#0000ff"><b>in</b></font>&nbsp;data:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>raise</b></font>&nbsp;Exception(data[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">error</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>][<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">info</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>])<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>return</b></font>&nbsp;data[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">query</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>][<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">recentchanges</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>def</b></font>&nbsp;<font color="#008b8b">print_recent_changes</font>(self, days=7, show=10):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;now = datetime.utcnow()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then = now - timedelta(days=days)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">&quot;</font></span><font color="#00cd00">From %s to %s</font><span style="background-color: #ffffff"><font color="#000000">&quot;</font></span>&nbsp;% (then, now)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changes = self.get_recent_changes(now=now, then=then)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num_changes = len(changes)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">&quot;</font></span><font color="#00cd00">%d wiki changes in the past week</font><span style="background-color: #ffffff"><font color="#000000">&quot;</font></span>&nbsp;% num_changes<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;users = defaultdict(list) <font color="#ee0000"># {username: [change,]}</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pages = defaultdict(int)&nbsp;&nbsp;<font color="#ee0000"># {pagename: # of edits}</font><br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>for</b></font>&nbsp;change <font color="#0000ff"><b>in</b></font>&nbsp;changes:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;users[change[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">user</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>]].append(change[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">title</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>])<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pages[change[<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">title</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>]] += 1<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#ff1493">\n</font><font color="#00cd00">== Most active wiki users ==</font><span style="background-color: #ffffff"><font color="#000000">'</font></span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for user, changes in sorted(users.items(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmp=<font color="#0000ff"><b>lambda</b></font>&nbsp;x, y: cmp(len(x[1]), len(y[1])),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reverse=True)[:show]:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">&nbsp;%-50s %d</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;% ((<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">%s</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;% user).ljust(50, <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">.</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>), len(changes))<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#ff1493">\n</font><font color="#00cd00">== Most edited pages ==</font><span style="background-color: #ffffff"><font color="#000000">'</font></span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for page, num in sorted(pages.items(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmp=<font color="#0000ff"><b>lambda</b></font>&nbsp;x, y: cmp(x[1], y[1]),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reverse=True)[:show]:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">&nbsp;%-50s %d</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;% ((<span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">%s</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>&nbsp;% page).ljust(50, <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">.</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>), num)<br>
<br>
</font>
</blockquote></code>

<p>
I added a Wiki.login method to the latest version, but it isn't quite working
yet.  This is due to some <a href="https://fedorahosted.org/python-fedora/ticket/11">minor limitations</a> in the ProxyClient, so we currently cannot handle
authenticated requests.  However, this shouldn't be very difficult to implement.
The reason for this is that we need to be able to run authenticated queries as
a 'bot' account in order to mitigate the 500 entry API return limit.
</p>

<p>
This module makes it easy to talk to <a href="http://en.wikipedia.org/w/api.php">MediaWiki's API</a>, so if you do anything cool with it feel free to send patches <a href="https://fedorahosted.org/python-fedora/newticket">here</a>.  It's currently not being shipped in a python-fedora release, so you'll have to grab the code from Bazaar:
<code><blockquote>
bzr branch bzr://bzr.fedorahosted.org/bzr/python-fedora/python-fedora-devel
</blockquote></code>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 23:12 | <a href="http://lewk.org/blog/wiki">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a> </span> | <a href="http://lewk.org/blog/wiki.html#comment_anchor">13 comments</a>
</p>
<h2>Sat, 13 Dec 2008</h2><h3><a name="time-in-testing" href="http://lewk.org/blog/time-in-testing">Time spent in updates-testing purgatory</a></h3>
<p><img src="https://admin.fedoraproject.org/updates/static/images/bodhi-icon-48.png" align="right"/>
<p> <a href="http://fedoraproject.org/wiki/WillWoods">Will Woods</a> asked me on IRC earlier today how easy it would be to determine
the amount of time Fedora updates spend in testing within <a
href="http://fedorahosted.org/bodhi">bodhi</a>.  It turned out to be fairly
easy to calculate, so I thought I would share the code and results.  </p>

<p>
<blockquote><code>
    <font face="monospace">
<font color="#cd00cd">from</font>&nbsp;datetime <font color="#cd00cd">import</font>&nbsp;timedelta<br>
<font color="#cd00cd">from</font>&nbsp;bodhi.model <font color="#cd00cd">import</font>&nbsp;PackageUpdate<br>
<br>
deltas = []<br>
occurrences = {}<br>
accumulative = timedelta()<br>
<br>
<font color="#0000ff"><b>for</b></font>&nbsp;update <font color="#0000ff"><b>in</b></font>&nbsp;PackageUpdate.select():<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>for</b></font>&nbsp;comment <font color="#0000ff"><b>in</b></font>&nbsp;update.comments:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>if</b></font>&nbsp;comment.text == <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">This update has been pushed to testing</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>for</b></font>&nbsp;othercomment <font color="#0000ff"><b>in</b></font>&nbsp;update.comments:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>if</b></font>&nbsp;othercomment.text == <span style="background-color: #ffffff"><font color="#000000">'</font></span><font color="#00cd00">This update has been pushed to stable</font><span style="background-color: #ffffff"><font color="#000000">'</font></span>:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta = othercomment.timestamp - comment.timestamp<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deltas.append(delta)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;occurrences[delta.days] = occurrences.setdefault(delta.days, 0) + 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;accumulative += deltas[-1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>break</b></font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff"><b>break</b></font><br>
<br>
deltas.sort()<br>
all = PackageUpdate.select().count()<br>
percentage = int(float(len(deltas)) / float(all) * 100)<br>
mode = sorted(occurrences.items(), cmp=<font color="#0000ff"><b>lambda</b></font>&nbsp;x, y: cmp(x[1], y[1]))[-1][0]<br>
<br>
<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">&quot;</font></span><font color="#00cd00">%d out of %d updates went through testing (%d%%)</font><span style="background-color: #ffffff"><font color="#000000">&quot;</font></span>&nbsp;% (len(deltas), all, percentage)<br>
<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">&quot;</font></span><font color="#00cd00">mean = %d days</font><span style="background-color: #ffffff"><font color="#000000">&quot;</font></span>&nbsp;% (accumulative.days / len(deltas))<br>
<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">&quot;</font></span><font color="#00cd00">median = %d days</font><span style="background-color: #ffffff"><font color="#000000">&quot;</font></span>&nbsp;% deltas[len(deltas) / 2].days<br>
<font color="#0000ff"><b>print</b></font>&nbsp;<span style="background-color: #ffffff"><font color="#000000">&quot;</font></span><font color="#00cd00">mode = %d days</font><span style="background-color: #ffffff"><font color="#000000">&quot;</font></span>&nbsp;% mode<br>
</font>
</code></blockquote>
</p>
<hr width="40%"/>
<p><b>
<blockquote><code>
4878 out of 10829 updates went through testing (45%)<br/>
mean = 17 days<br/>
median = 11 days<br/>
mode = 6 days<br/>
</code></blockquote>
</b></p>

<p> So, it seems that the majority of updates leave updates-testing in less
than a week.  This is interesting when taking into consideration the testing workflow
mechanisms that bodhi employs.  An update can go from testing to stable in two
ways: 1) The update's karma can reach an optional stable threshold, and
automatically get pushed to the stable repository based on positive community
feedback.  2) The developer can request that the update be marked as stable.
After an update sits in testing for two weeks, bodhi will send the developer
nagmail, which seems to help mitigate stale updates.  When initially deploying
bodhi, I thought that we would get bogged down with a ton of stale testing updates and would
have to implement a timeout to have them automatically get marked
as stable.  This is still a viable option (which would require FESCo
rubberstamping), but I'm quite surprised to see how effective this
community-driven workflow is already.  Now we just need to encourage more people to use it :)
</p>
<p>
Due to the limitations of the current model I couldn't figure out an easy way
to determine which updates were marked as stable by positive community
feedback.  This issue will be assessed with the long-awaited SQLAlchemy
port that I will hopefully finish up at some point early next year.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 08:13 | <a href="http://lewk.org/blog/time-in-testing">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a> </span> | <a href="http://lewk.org/blog/time-in-testing.html#comment_anchor">1 comments</a>
</p>
<h2>Tue, 28 Oct 2008</h2><h3><a name="tg2onFedora" href="http://lewk.org/blog/tg2onFedora">TurboGears2 on Fedora</a></h3>
<p><p>
So, I was finally able to force myself to take a break from hacking
on a few different TG2 applications to actually sit down and package
everything up, submit it all for review, and make sure everything
Just Works on Fedora.
</p>
<p>
You can start playing with <a href="http://turbogears.org/2.0">TurboGears2</a> by throwing my <a
href="http://lmacken.fedorapeople.org/tg2.repo">tg2.repo</a> file in
/etc/yum.repos.d, and then by installing the <b>TurboGears2</b>
package.  It should work fine alongside of any existing TurboGears
1.x installs, however it will pull in SQLAlchemy 0.5, which may
or may not cause problems with older models.  Once installed, checkout the fantastic <a href="http://turbogears.org/2.0/docs">TurboGears2 documentation</a> for details on diving into the framework.
</p>
<p>
I already have two TurboGears2 applications currently in production, and have had nothing but amazing experiences with the new stack.  I still love working on my older TG1.0 apps (such as <a href="http://bodhi.fedorahosted.org">bodhi</a>), which will still be supported for a long time, but with the ridiculous amounts of power that WSGI/Pylons/Paste/SQLAlchemy/ToscaWidgets/Mako gives you, I'm extremely tempted to start porting :)
</p>
<p>
Aside from testing the packages, you can also help by <a
href="http://fedoraproject.org/wiki/Packaging/ReviewGuidelines">reviewing</a>
various parts of the stack so we can get them into Fedora as soon as possible.  The
TG2 dependency tree of pending reviews can be found <a
href="https://bugzilla.redhat.com/showdependencytree.cgi?id=468230&hide_resolved=1">here</a>.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 06:18 | <a href="http://lewk.org/blog/tg2onFedora">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a> </span> | <a href="http://lewk.org/blog/tg2onFedora.html#comment_anchor">1 comments</a>
</p>
<h2>Wed, 10 Sep 2008</h2><h3><a name="bodhi-0.5" href="http://lewk.org/blog/bodhi-0.5">bodhi 0.5!</a></h3>
<p><p>
<img src="https://admin.fedoraproject.org/updates/static/images/bodhi-icon-48.png" align="right"/>
<p>
As many have already noticed, I performed a large bodhi upgrade recently.  A
few weeks ago, during The Incident, I was forced to perform what was originally
going to be a week long bodhi migration and upgrade, overnight.  During the
past two weeks I've pushed out 24 revisions of bodhi to our infrastructure,
fixing various show-stoppers, and helping to make sure that updates got out the door.
</p>
<p>
One of the most noticable changes is that bodhi is much more responsive.
Previously, bodhi was a single python process, running on a single server.
This single server was also responsible for composing the updates repositories,
and rawhide, among lots of other bodhi-related churn.  This lead to much pain
and suffering for all.
</p>
<p>
The bodhi deployment has since changed.  All bodhi requests are now load
balanced to a bunch of app servers, each running mod_wsgi with multiple bodhi
processes, each with multiple threads.  All of the hard work is now done on an
isolated releng server.  This separate bodhi "masher" is now responsible for
composing repositories, updating bugs, generating update notices, sending
emails, extended metadata generation, and calculating metrics.  I also added
support for inter-bodhi communication, which allows our bodhi web frontends to
kick off push requests to our bodhi-masher instance.
</p>
<p>
Some of the new features in this release:
<ul>
<li>A much more flexible karma automatism scheme. Stable/unstable karma
  thresholds are now fully configurable</li>
<li>Support for bug aliases</li>
<li>A 'newpackage' update type</li>
<li>Newer updates which obsolete older ones will now inherit their bugs and notes.</li>
<li>A shiny new API in the fedora.client.bodhi module</li>
<li>Lots of improved releng and security team support, making our lives little easier</li>
<li>An improved `make update` template (be sure to update your Makefile.common)</li>
<li>Some new bodhi-client features</li>
<li>Creating updates for multiple releases using a single form
  Note: This is not perfect yet.  You can use the "New Update Form" to add any
  number of builds for any number of releases, but bodhi will still create a
  single update for each.  This issue will be resolved in the next major bodhi
  release, which will contain a full model redesign.</li>
<li>updateinfo.xml generation takes about 20 seconds, instead of 20 minutes.</li>
<li>A lot of metrics enhancements</li>
<li>A ton of bug and usability fixes</li>
</ul>
</p>
<p>
Bodhi is far from being feature complete.  Some new features in the pipeline:
<ul>
<li>DeltaRPM generation</li>
<li>Security issue (CVE) tracking and triaging</li>
<li>Dependency closure verification, utilizing the power of rpmgrok.</li>
<li>A complete remodeling from SQLObject to SQLAlchemy, which is almost complete,
  will give us a lot more flexibility, speed, and power over our update model.
  This will also allow for things such as having multi-builds for multiple
  releases in a single update.</li>
</ul>
</p>
<p>
As always,
<ul>
<li>File tickets <a href="https://fedorahosted.org/bodhi/newticket">here</a></li>
<li>Help out <a href="https://fedorahosted.org/bodhi/report/1">here</a></li>
<li>Subscribe to the bodhi mailing list <a href="https://fedorahosted.org/mailman/listinfo/bodhi">here</a></li>
<li>You can always find bodhi <a
href="http://bodhi.fedoraproject.org">here</a></li>
</ul>
</p>
<p>
Also, if you're currently having issues with the bodhi client, a fixed version
will be going out with the next batch of updates.  For the impatient, you can
pull fixed versions from koji (also, make sure your Makefile.common is up to
date):
</p>
<code><blockquote><pre>
    koji download-build --arch=noarch python-fedora-0.3.5-1.fc10
    koji download-build --arch=noarch bodhi-0.5.2-1.fc9
</pre></blockquote></code>

</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 21:20 | <a href="http://lewk.org/blog/bodhi-0.5">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/bodhi-0.5.html#comment_anchor">1 comments</a>
</p>
<h2>Wed, 16 Jul 2008</h2><h3><a name="python-dictionary-optimizations" href="http://lewk.org/blog/python-dictionary-optimizations">Python dictionary optimizations</a></h3>
<p><p>
In my recent journey through the book <a
href="http://www.amazon.com/Beautiful-Code-Leading-Programmers-Practice/dp/0596510047">Beautiful Code</a>, I came across a
chapter devoted to Python's dictionary implementation.  I found the whole thing
quite facinating, due to the sheer simplicity and power of the design.  The
author mentions various special-case optimizations that the Python developers
cater for in the CPython dictionary implementation, which I think are valuable
to share.
</p>
<p>
<b>Key lookups</b><br/>
In CPython, all PyDictObject's are optimized for dictionaries
containing only string keys.  This seems like a very common use case that is
definitely worth catering for.  The key lookup function pointer looks like this:
</p>
<code><blockquote><pre>
struct PyDictObject {
    PyDictEntry *(*ma_lookup)(PyDictObject *mp, PyObject *key, long hash);
    ...
</pre></blockquote></code>
<p>
<b>ma_lookup</b> is initially set to the <b>lookdict_string</b> function
(renamed to <b>lookdict_unicode</b> in 3.0), which assumes that both the keys
in the dictionary and the key being searched for are standard
PyStringObject's.  It is then able to make a couple of optimiziations, such as
mitigating various error checks, since string-to-string comparison never raise
exceptions.  There is also no need for rich object comparisons either, which
means we avoid calling <b>PyObject_RichCompareBool</b>, and always use
<b>_PyString_Eq</b> directly.
</p>
<p>
This string-optimized key lookup function is utilized until you search for a
non-string key.  When lookdict_string detects this, it permanently changes the
ma_lookup function to a slower, more generic lookdict function.  Here is an
example of how to trigger this degradation:
</p>
<code><blockquote><pre>
>>> d = {'foo': 'bar'}
>>> d.get(1) # Congratulations, your dictionary is now slower...
>>> d.get(u'foo') # Yes, even unicode objects trigger this degradation as well
</pre></blockquote></code>
<p>
Jython does not contain this optimization, however, it does have a
string-specialized map object, org.python.core.PyStringMap, which is used for
the __dict__ underpinning of all class instances and modules.  User code that
creates a dictionary utilizes a different class, org.python.core.PyDictionary,
which is a heavyweight object that uses the java.util.Hashtable along with some
extra indirection, allowing it to be subclassed.
</p>
<p>
<b>Small dictionaries</b><br/>
Python's dictionary makes an effort to never be more than 2/3rds full.  Since the
default size of dict is 8, this allows you to have 5 active entries in your
dict while avoiding an additional malloc.  Dictionaries used for keyword
arguments are usually within this limit, and thus are fairly efficient (along
with the fact that they most likely come from a pool of cached unused dicts).
This also can help improve cache locality.  For example, the PyDictObject
structure uses 124 bytes of space (on x86 w/gcc) and therefore can fit into two
64-byte cache lines.
</p>
<p>
So, the moral of the story: use dictionaries with string-only keys, and only
look for string keys within them.  If you can keep them small enough to
avoid the extra malloc (<= 5), bonus.  As expected, things get better in
Python 3.0, as unicode keys will no longer slow your dictionary down.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 15:39 | <a href="http://lewk.org/blog/python-dictionary-optimizations">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/python-dictionary-optimizations.html#comment_anchor">4 comments</a>
</p>
<h2>Tue, 27 May 2008</h2><h3><a name="openbox" href="http://lewk.org/blog/openbox">New openbox hotness in Fedora</a></h3>
<p><p>
I've been a huge fan of the *box window managers for a long time --
<a href="http://icculus.org/openbox/index.php/Main_Page">openbox</a> being my favorite, due to it's extremely minimal nature.
Thanks to the help of Fedora openbox maintainer Miroslav Lichvar,
the <a href="http://lewk.org/blog/securitylivecd">dynamic pipe
menu</a> that I wrote a while back is now integrated into Fedora's
openbox package.  This means that you no longer need to hack XML 
files to make your menu useful.  Here is what it looks like "out of the box":
</p>
<center><img src="/img/obfedora.png" /></center>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 19:57 | <a href="http://lewk.org/blog/openbox">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/openbox" rel="tag">openbox</a> </span> | <a href="http://lewk.org/blog/openbox.html#comment_anchor">1 comments</a>
</p>
<h2>Sat, 17 May 2008</h2><h3><a name="liveusb-creator-2.0" href="http://lewk.org/blog/liveusb-creator-2.0">Fedora LiveUSB Creator v2.0!</a></h3>
<p><img src="http://lewk.org/img/liveusb-creator.png" align="right"/>
<p>
The <a href="http://liveusb-creator.fedorahosted.org">liveusb-creator</a> is a cross-platform tool for easily installing live operating systems on to USB flash drives.  Today I released version 2.0, which brings you a brand new graphical interface and a bunch of new features, including:
</p>
<p>
<ul>
    <li>Persistent overlay creation.  This lets you to allocate extra space on your USB stick, allowing you to save files and make modifications to your live operating system that will persist after you reboot.  This essentially lets you carry your own personalized Fedora with you at all times</li>
    <li>Supports downloading various Fedora releases, including <a href="http://docs.fedoraproject.org/release-notes/"><b>Fedora 9!</a></b></li>
  <li>SHA1 checksum verification of known releases, to ensure that you've downloaded the correct bits</li>
  <li>Face-melting hotness</li>
</ul>
</p>
<p>
<b>Download:</b> <a href="https://fedorahosted.org/liveusb-creator">liveusb-creator-2.5.zip</a> (8.8mb)
</p>
<p>
This release is for Windows-only at the moment.  Linux support is nearing completion, and will exist in later versions.  In the mean time, there are already <a href="http://fedoraproject.org/wiki/FedoraLiveCD/USBHowTo">tools available</a> for creating persistent LiveUSB keys with Fedora.
</p>
<p>
If you would like to help contribute to the liveusb-creator, see the <a href="https://fedorahosted.org/liveusb-creator/wiki/Development">Developers Guide</a> for more information.  If you encounter problems with the tool, please file bug reports <a href="https://fedorahosted.org/liveusb-creator/newticket"><b>here</b></a>.
</p>
<p>
For those interested in trying out this program, but don't have a USB stick, you can buy one <a href="http://astore.amazon.com/lu0b-20/102-6952499-3975331?_encoding=UTF8&node=2">here</a>.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 15:10 | <a href="http://lewk.org/blog/liveusb-creator-2.0">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/LiveUSB" rel="tag">LiveUSB</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/liveusb-creator-2.0.html#comment_anchor">13 comments</a>
</p>
<h3><a name="liveusb-creator-2.4" href="http://lewk.org/blog/liveusb-creator-2.4">liveusb-creator v2.4</a></h3>
<p><img src="https://fedorahosted.org/liveusb-creator/attachment/wiki/img/fedorausb.png?format=raw" align="right"/>
<p>
Last night I released v2.4 of the <a href="http://fedorahosted.org/liveusb-creator">liveusb-creator</a>, which fixes a bunch of bugs and is much more robust.
</p>
<p>
Someone wrote a pretty cool <a href="http://digg.com/linux_unix/Linux_On_A_Stick_Fedora_9_Puts_Your_Desktop_on_a_USB_Drive">article</a> about the liveusb-creator on Lifehacker the other day, which made it to the front page of digg last night.  <a href="http://digg.com/linux_unix/Linux_On_A_Stick_Fedora_9_Puts_Your_Desktop_on_a_USB_Drive">Digg it up!</a>
</p>
<center>
<script type="text/javascript">
digg_url = 'http://digg.com/linux_unix/Linux_On_A_Stick_Fedora_9_Puts_Your_Desktop_on_a_USB_Drive';
</script>
<script src="http://digg.com/tools/diggthis.js" type="text/javascript"></script>
</center>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 15:10 | <a href="http://lewk.org/blog/liveusb-creator-2.4">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/LiveUSB" rel="tag">LiveUSB</a>, <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/liveusb-creator-2.4.html#comment_anchor">7 comments</a>
</p>
<h2>Mon, 24 Mar 2008</h2><h3><a name="PyCon2008" href="http://lewk.org/blog/PyCon2008">PyCon 2008</a></h3>
<p><p>
I was in Chicago last week for <a href="http://us.pycon.org/2008/about/">PyCon
2008</a>. It was my first time in the windy city, and I must say that I was
thoroughly impressed.  As expected in any city, we got a chance to see a lady
get her purse snattched, and a mentally unstable gentleman on the train yelling
profanities at god.  Anyway, the conference itself was extremely well done, and
tons of awesome innovation happened at the sprints afterwords.
</p>
<p>
<b>Day 1: Tutorials</b><br>
8+ hours of TurboGears/Pylons/WSGI tutorials.  Awesome.  I'm really
excited with what is in the works for TurboGears2.  By wielding Pylons, the
TG2 team was able to completely re-write their framework with minimal amounts
of code, while at the same time, gaining a *ton* of new features
and some amazing middleware.  Mark Ramm and Ben Bangert took turns walking us through the
deep internals of their frameworks, while also giving some examples how to use
them.
</p>
<p>
<b>Sessions</b><br>
During the 3-day conference portion of PyCon, there was a vast plethora of
incredibly interesting sessions and conversations.  You can find a schedule of
the talks and some slides <a
href="http://us.pycon.org/2008/conference/schedule/">here</a>.  Everything was
video taped as well, so the sessions should be making their way on to YouTube
hopefully at some point soon.
</p>
<p>
Here are some things that caught my attention while I was there.
<p>
<b>WSGI</b><br>
Defined by Phillip J. Eby in <a href="http://www.python.org/dev/peps/pep-0333/">PEP-333</a>, the Web Server Gateway Interface is a simple interface between web servers, applications, and frameworks.  Or, as explained by Ian Bicking: WSGI is a series of Tubes.  The basic idea is that it lets you connect a bunch of different applications together into a functioning whole.

Since TurboGears2 is based on Pylons, it will be a full blown WSGI application out the box, loaded with lots of useful middleware (WebError, Routes, Sessions, Caching, etc), and will allow you to use any WSGI server that you wish (Paste, CherryPy, orbited, mod_wsgi, etc).

An example of a basic Hello World WSGI application:
<blockquote><code>
<body bgcolor="#ffffff" text="#000000"><font face="monospace">
<font color="#a52a2a"><b>def</b></font>&nbsp;<font color="#008b8b">wsgi_app</font>(environ, start_response):<br>
&nbsp;&nbsp;&nbsp;&nbsp;start_response('<font color="#ff00ff">200 OK</font>', [('<font color="#ff00ff">content-type</font>', '<font color="#ff00ff">text/html</font>')])<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>return</b></font>&nbsp;['<font color="#ff00ff">Hello world!</font>']<br>
</font>
</code></blockquote>
</p>
<p>
So, what is WSGI middleware?  Well, it's essentially the WSGI equivalent of a python decorator, but instead of wrapping one function in another, you're wrapping one web-app in another.  You can see a list of some existing WSGI middleware <a href="http://www.wsgi.org/wsgi/Middleware_and_Utilities">here</a>.
</p>
<p>
<b>virtualenv</b><br>
With so many new shiny python programs to play with, I really tried to resist
the urge to easy_install everything into my global Python site-packages so I
could tinker with things.  This is generally a Bad Thing in a distribution, as
easy_install not only installs things behind your package managers back,
but it also lacks the ability to uninstall anything with it, unless you want to take <a
href="http://zedshaw.com/blog/index.html?bear">Zed's easy_fucking_uninstall</a>
approach ;) During the TurboGears tutorial, I was introduced to a tool call
virtualenv, which will setup a virtual python environment in which you can
easy_install as many eggs as you want without worrying about butchering
your site-packages.
</p>
<blockquote><code>
    $ easy_install virtualenv<br>
    $ virtualenv --no-site-packages foo<br>
    $ cd foo; source bin/activate<br>
    $ easy_install &lt;shiny python programs&gt;<br>
</code></blockquote>
<p>
<b>nose</b><br>
I've been in love with <a
href="http://somethingaboutorange.com/mrl/projects/nose/">nose</a> since day
one, but realized that I haven't been utilizing it to it's fullest abilities.
I blogged in the <a href="http://lewk.org/blog/tags/nose">past</a> about nose's
profiler plugin.  Come to find out, nose offers a lot more plugins that can
seriously help make your life easier:
<blockquote><code>
$ nosetests --pdb --pdb-failures<br>
.............................................................&gt; /home/lmacken/tg1.1/turbogears/turbogears/identity/tests/test_visit.py(92)test_cookie_permanent()<br>
-&gt; assert abs(should_expire - expires) < 3<br>
(Pdb) locals()<br>
{'morsel': &lt;Morsel: tg-visit='452c94de3900fc2adff2cd6b0b0f04c4533e3e9e'&gt;, 'self': &lt;turbogears.identity.tests.test_visit.TestVisit testMethod=test_cookie_permanent&gt;, 'expires': 1206228604.0, 'should_expire': 1206232205.0, 'permanent': False}<br>
(Pdb) 
</code></blockquote>
</p>
<p>
You can also measure code coverage during your unit test execution using the '--with-coverage' option, which utilizes <a href="http://nedbatchelder.com/code/modules/coverage.html">coverage.py</a>.
</p>
<p>
<b>SQLAlchemy</b><br>
Also known as "the greatest object-relational-mapper created for any language. ever.", 0.4 has seen vast improvements since 0.3.  Among them, a new <a
href="http://www.sqlalchemy.org/docs/04/plugins.html#plugins_declarative">declarative
API</a> is now available that essentially lets you define your class, Table and
mapper constructs "at once" under a single class declaration (giving you a
similar ActiveMapper feel like SQLObject or Elixir).
<blockquote><code>		
<font color="#a020f0">from</font>&nbsp;sqlalchemy.ext.declarative <font color="#a020f0">import</font>&nbsp;declarative_base<br>
<br>
engine = create_engine('<font color="#ff00ff">sqlite://</font>')<br>
Base = declarative_base(engine)<br>
<br>
<font color="#a52a2a"><b>class</b></font>&nbsp;<font color="#008b8b">SomeClass</font>(Base):<br>
&nbsp;&nbsp;&nbsp;&nbsp;__tablename__ = '<font color="#ff00ff">some_table</font>'<br>
&nbsp;&nbsp;&nbsp;&nbsp;id = Column('<font color="#ff00ff">id</font>', Integer, primary_key=True)<br>
&nbsp;&nbsp;&nbsp;&nbsp;name =&nbsp;Column('<font color="#ff00ff">name</font>', String(50))<br>
</code></blockquote>
</p>
<p>
<b>Unicode, demystified.</b><br>
By far, the most frustrating problems I've ever encountered in Python have been
unicode related.  I was fortunate enough to catch Kumar McMillan's
presentation, "Unicode in Python, Completely Demystified".  This presentation
helped enlighten many on the concept of unicode, clear up many misconceptions,
and explain how to handle it properly in Python.  Check out <a
href="http://farmdev.com/talks/unicode">his slides</a> for more details, but
the general idea here is to follow these three rules:
<ul>
    <li>decode early</li>
    <li>unicode everywhere</li>
    <li>encode late</li>
</ul>
His solution to decoding to unicode turns out to be quite elegant compared to
some nasty try/except UnicodeDecodeError blocks that I have written in the past
;)
<blockquote><code>
<font color="#a52a2a"><b>def</b></font>&nbsp;<font color="#008b8b">to_unicode_or_bust</font>(obj, encoding='<font color="#ff00ff">utf-8</font>'):<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>if</b></font>&nbsp;isinstance(obj, basestring):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>if</b></font>&nbsp;<font color="#a52a2a"><b>not</b></font>&nbsp;isinstance(obj, unicode):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj = unicode(obj, encoding)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>return</b></font>&nbsp;obj<br>
</code></blockquote>
</p>
<p>
Later that night I went and shined some light on some dark corners of
certain projects that I've been working on to try and handle unicode
the Right Way.
</p>
<p>
<b>Grassyknoll</b><br>
After the code sprints, I got a chance to see these guys show off their hard
work.  <a href="http://code.google.com/p/grassyknoll/">grassyknoll</a> is a
search engine written in Python.  With the ability to handle multiple backends,
frontends, and wire formats, grassyknoll has a ton of potential to
revolutionize the open source search engine.  There has been recent talk in
Fedora land about what kind of search engine to use, and I think grassyknoll is
definitley a viable option.
</p>
<p>
<b>Packaging BOF</b><br>
Toshio, Spot, and I attended a Packaging BOF where we discussed our
experiences with distutils and setuptools with a bunch of people from various
companies and distros.  This then sparked discussions on python-dev and the
distutils-sig mailing lists.  You can also find the details of the BOF session
on the <a href="http://wiki.python.org/moin/PackagingBOF">Python wiki</a>.  There
is definitely a lot of energy behind this, so hopefully we'll see some good changes
in setuptools in the near future that will make our lives as distro packagers much easier :)
</p>
<p>
<p>
<b>Orbited</b><br>
Orbited is an HTTP daemon that is optimized for long-lasting comet
connections.  This allows you to write real-time web applications with
ease.  For example, embeding an irc channel anywhere:
<p>
<iframe style="width:695px;height:390px;scrolling:no;border:0px;"
src="http://fedora.orbited.org:8000/static/chat.html?channel=fedora-devel"></iframe></center>
</p>
<p>
You can also use orbited as a WSGI server!  Toshio did some brief benchmarking
of of CherryPy{2,3}, Paste, and Orbited WSGI servers, and orbited seemed to be
the clear winner in all scenerios.  There is a good chance that we will be using
orbited to handle our comet widgets within MyFedora :)
</p>
</p>
<b>Code Sprints</b><br>
I stayed the entire time for the code sprints, and mainly focused on
TurboGears hacking.
This is what I ended up working on:
<ul>
<li>Added SQLAlchemy support to turbogears.testutil.DBTest (<a
   href="http://trac.turbogears.org/ticket/1764">Ticket #1764</a>).
 		When you inherit from this class, it will automatically set up and tear down your SQLObject
 		or SQLAlchemy database before and after each of your unit tests.</li>
<li>Added a <a href="http://code.google.com/p/twtools/source/browse/trunk/toscawidgets/widgets/twtools/jquery/flot.py">FlotWidget</a>
using <a href="http://toscawidgets.org">ToscaWidgets</a> to <a
href="http://code.google.com/p/twtools/">twTools</a> This widget
allows you to create attractive graphs with ease.</li>
<li>Made the TurboGears2 templating engine configurable (<a
   href="http://trac.turbogears.org/ticket/1680">Ticket #1680</a>).
   Things were hardcoded to use genshi; this is no longer the case.</li>
<li>WebTest integration for unit test (<a
   href="http://trac.turbogears.org/ticket/1762">Ticket #1762</a>).  I
   wrote a some high level unit testing classes that wrap a <a href="http://pythonpaste.org/webtest/">WebTest</a> object
   around your WSGI app.  This gives you an extremely powerful API to
   write "framework independent" unit tests.  The WebTest.get/post
   methods simply return <a href="http://pythonpaste.org/webob/">WebOb</a> objects, which allow for drastic
   simplification of your unittests.  This also helped decouple the TG
   testutils from using CherryPy internals (one step closer to CherryPy3
   support in TurboGears).  As <a href="http://groups.google.com/group/turbogears-trunk/browse_thread/thread/62f781b69f469b8f?hl=en">I mentioned</a> on the TurboGears-trunk list,
   these changes will make writing unit tests a breeze: </li>
<blockquote><code>
<font color="#a52a2a"><b>class</b></font>&nbsp;<font color="#008b8b">TestPages</font>(testutil.DBWebTest):<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>def</b></font>&nbsp;<font color="#008b8b">test_forbidden</font>(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.app.get('<font color="#ff00ff">/hot_action</font>', status=403)<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>def</b></font>&nbsp;<font color="#008b8b">test_webob_response</font>(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user = User(user_name=u&quot;<font color="#ff00ff">test</font>&quot;, password=u&quot;<font color="#ff00ff">test</font>&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.login_user(user)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res = self.app.get('<font color="#ff00ff">/hot_action</font>')<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>assert</b></font>&nbsp;&quot;<font color="#ff00ff">Hot WSGI action</font>&quot;&nbsp;<font color="#a52a2a"><b>in</b></font>&nbsp;res<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>assert</b></font>&nbsp;res.namespace['<font color="#ff00ff">tg_flash</font>'] == u'<font color="#ff00ff">Hot WSGI action</font>'&nbsp;<br>
</code></blockquote>
The WebTest integration is planned to hit in the TurboGears 1.1 release, deprecating testutils.{call,create_request}.
</ul>
</p>
<p>
Want to read more blog posts about PyCon 2008?  You can find links to lots of PyCon related posts <a href="http://nxsy.org/blog/archives/2008/03/18/pycon-2008-blog-coverage-outstanding">here</a> and on <a href="http://planet.python.org/">Planet Python</a>.
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 22:05 | <a href="http://lewk.org/blog/PyCon2008">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/PyCon2008.html#comment_anchor">1 comments</a>
</p>
<h2>Mon, 11 Feb 2008</h2><h3><a name="liveusb-creator" href="http://lewk.org/blog/liveusb-creator">Creating live Fedora USB sticks, in Windows!</a></h3>
<p><p>
<img
src="https://fedorahosted.org/liveusb-creator/attachment/wiki/img/fedorausb.png?format=raw" align="right" />
Last weekend I sat down and developed the <a href="http://fedorahosted.org/liveusb-creator">liveusb-creator</a>, a tool for creating live Fedora USB sticks from Windows.  It will automatically detect all removable drives, find your ISO, extract it to your USB key, modify the syslinux.cfg, and install the bootloader.  Technical details aside for a moment, the end-user workflow turns out to be something like this:
</p>

<ul>
    <li><a href="http://fedoraproject.org/get-fedora">Get Fedora</a> Live Media.</li>
    <li>Download and extract <a href="http://lmacken.fedorapeople.org/liveusb-creator/liveusb-creator-1.0.zip">liveusb-creator.zip</a></li>
    <li>Drag your Fedora Live media into the liveusb-creator directory</li>
    <li>Double click 'liveusb-creator.exe'</li>
</ul>

<p>
At the moment it is a simple a console application that asks the user if it has any questions (by default it won't), and then gets the job done.  So shortly after <a href="https://www.redhat.com/archives/fedora-devel-list/2008-February/msg00087.html">announcing</a> this tool, I started throwing together a graphical interface using PyGTK.  While I was doing this, <a href="http://kushaldas.in/?p=208">Kushal Das</a> was on the other side of the planet working on a PyQT version :)  It turns out his code is much cleaner than my gtk implementation, so I went ahead and committed it.  Furthermore, I'm pretty excited to get a chance to play with The Other widget toolkit for once ;)
</p>

<p>
So, detecting removable devices and such is <a href="https://fedorahosted.org/liveusb-creator/browser/liveusb/creator.py#L117">*trivial*</a> in Windows using the powerfully-undocumented win32api Python module (after playing a few rounds of "match the return code to the enum", of course).  Ideally, I want this tool to work in both Linux and Windows, so I redesigned the code quite a bit, broke it out into various modules, and recently started working on the Linux side of things.  At this point in time, there is now <a href="https://fedorahosted.org/liveusb-creator/browser/liveusb/creator.py">code</a> that detects removable drives using dbus and HAL.  I still have a bunch of sanity checking and other bits to write, but progress is definitely being made.  In the mean time for Linux users, see the <a href="http://fedoraproject.org/wiki/FedoraLiveCD/USBHowTo">USBHowTo</a> for creating a live USB stick using the livecd-iso-to-disk tool.
</p>

<p>
If you're interested in helping out with the liveusb-creator, you can get ahold of the source code using git:
<code><blockquote>
git clone git://git.fedorahosted.org/git/liveusb-creator.git
</code></blockquote>

If you encounter any problems, please create a new ticket at the <a href="https://fedorahosted.org/liveusb-creator/">liveusb-creator trac</a>.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 14:38 | <a href="http://lewk.org/blog/liveusb-creator">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/LiveUSB" rel="tag">LiveUSB</a>, <a href="http://lewk.org/blog/tags/Windows" rel="tag">Windows</a>, <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/liveusb-creator.html#comment_anchor">132 comments</a>
</p>
<h2>Tue, 05 Feb 2008</h2><h3><a name="f8-f9alpha-livediff" href="http://lewk.org/blog/f8-f9alpha-livediff">F8 -> F9 Alpha Live Diff</a></h3>
<p><p>
Fedora 9 Alpha is <a href="http://fedoraproject.org/wiki/Releases/9/Schedule">scheduled</a> to be released today!  Not only did I spin the live bits for this alpha, I also generated some statistics as to what changed in this release since Fedora 8.

Here are the livecd diffs for all of our spins.

<ul>
<li><a href="http://lmacken.fedorapeople.org/f8-f9alpha-live-diff/F9-Alpha-Developer-20080129.0.diff.html">F9-Alpha-Developer-20080129.0.diff</a></li>
<li><a href="http://lmacken.fedorapeople.org/f8-f9alpha-live-diff/F9-Alpha-FEL-i686-20080129.0.diff.html">F9-Alpha-FEL-i686-20080129.0.diff</a></li>
<li><a href="http://lmacken.fedorapeople.org/f8-f9alpha-live-diff/F9-Alpha-games-i686-20080129.0.diff.html">F9-Alpha-games-i686-20080129.0.diff</a></li>
<li><a href="http://lmacken.fedorapeople.org/f8-f9alpha-live-diff/F9-Alpha-i686-20080129.0.diff.html">F9-Alpha-i686-20080129.0.diff</a></li>
<li><a href="http://lmacken.fedorapeople.org/f8-f9alpha-live-diff/F9-Alpha-KDE-i686-20080129.0.diff.html">F9-Alpha-KDE-i686-20080129.0.diff</a></li>
<li><a href="http://lmacken.fedorapeople.org/f8-f9alpha-live-diff/F9-Alpha-KDE-x86_64-20080129.0.diff.html">F9-Alpha-KDE-x86_64-20080129.0.diff</a></li>
<li><a href="http://lmacken.fedorapeople.org/f8-f9alpha-live-diff/F9-Alpha-x86_64-20080129.0.diff.html">F9-Alpha-x86_64-20080129.0.diff</a></li>
</ul>

Below are the details as to what changed in our default GNOME desktop spin since Fedora 8.

<code><blockquote style="line-height: 0.8em">
<font face="monospace">
<font color="#2e8b57"><b>--- F8-Live-i686-20080204.0.iso (694M)</b></font><br>
<font color="#2e8b57"><b>+++ F9-Alpha-i686-20080129.0.iso (698M)</b></font><br>
<font color="#008b8b">+ new package libgdiplus-devel: 8584</font><br>
<font color="#008b8b">+ new package xorg-x11-server-common: 38863</font><br>

<font color="#008b8b">+ new package PolicyKit-gnome-libs: 40188</font><br>
<font color="#008b8b">+ new package kerneloops: 52570</font><br>
<font color="#008b8b">+ new package swfdec-gtk: 55786</font><br>
<font color="#008b8b">+ new package gnome-panel-libs: 56936</font><br>
<font color="#008b8b">+ new package swfdec-mozilla: 75911</font><br>
<font color="#008b8b">+ new package libconfig: 120055</font><br>
<font color="#008b8b">+ new package obex-data-server: 136538</font><br>
<font color="#008b8b">+ new package at-spi-python: 170868</font><br>
<font color="#008b8b">+ new package ncurses-base: 176949</font><br>

<font color="#008b8b">+ new package pixman: 209556</font><br>
<font color="#008b8b">+ new package scim-python: 247730</font><br>
<font color="#008b8b">+ new package libcurl: 258148</font><br>
<font color="#008b8b">+ new package libggz: 289477</font><br>
<font color="#008b8b">+ new package hfsutils: 362228</font><br>
<font color="#008b8b">+ new package libmtp: 398952</font><br>
<font color="#008b8b">+ new package xorg-x11-drv-openchrome: 415754</font><br>
<font color="#008b8b">+ new package ggz-client-libs: 434830</font><br>
<font color="#008b8b">+ new package samyak-fonts: 457144</font><br>

<font color="#008b8b">+ new package perl-Date-Manip: 458629</font><br>
<font color="#008b8b">+ new package libtasn1: 466849</font><br>
<font color="#008b8b">+ new package python-crypto: 571535</font><br>
<font color="#008b8b">+ new package elilo: 613010</font><br>
<font color="#008b8b">+ new package gfs2-utils: 650707</font><br>
<font color="#008b8b">+ new package ncurses-libs: 668620</font><br>
<font color="#008b8b">+ new package swfdec: 958169</font><br>
<font color="#008b8b">+ new package reiserfs-utils: 1022402</font><br>
<font color="#008b8b">+ new package iscsi-initiator-utils: 1138529</font><br>

<font color="#008b8b">+ new package jfsutils: 1138726</font><br>
<font color="#008b8b">+ new package gvfs: 1700127</font><br>
<font color="#008b8b">+ new package totem-pl-parser: 2627745</font><br>
<font color="#008b8b">+ new package xfsprogs: 3408051</font><br>
<font color="#008b8b">+ new package VLGothic-fonts: 3831447</font><br>
<font color="#008b8b">+ new package VLGothic-fonts-proportional: 3831790</font><br>
<font color="#008b8b">+ new package gnome-settings-daemon: 6218660</font><br>
<font color="#008b8b">+ new package mesa-libOSMesa: 7248256</font><br>
<font color="#008b8b">+ new package scim-python-chinese: 7621164</font><br>

<font color="#008b8b">+ new package libgweather: 14592282</font><br>
<font color="#008b8b">+ new package dejavu-fonts: 15593008</font><br>
<font color="#008b8b">+ new package vim-common: 16294034</font><br>
<font color="#008b8b">+ new package xulrunner: 24481155</font><br>
<font color="#008b8b">+ crontabs grew 144 bytes (6.83%) (2107-&gt;2251)</font><br>
<font color="#008b8b">+ libopenraw-gnome grew 348 bytes (7.94%) (4384-&gt;4732)</font><br>
<font color="#008b8b">+ xorg-x11-drv-fbdev grew 380 bytes (1.84%) (20597-&gt;20977)</font><br>

<font color="#008b8b">+ irqbalance grew 400 bytes (1.85%) (21595-&gt;21995)</font><br>
<font color="#008b8b">+ m17n-contrib grew 469 bytes (1.28%) (36757-&gt;37226)</font><br>
<font color="#008b8b">+ pam_ccreds grew 497 bytes (1.49%) (33428-&gt;33925)</font><br>
<font color="#008b8b">+ smolt-firstboot grew 655 bytes (6.01%) (10893-&gt;11548)</font><br>
<font color="#008b8b">+ pcsc-lite-libs grew 848 bytes (2.44%) (34696-&gt;35544)</font><br>
<font color="#008b8b">+ dbus-x11 grew 884 bytes (3.63%) (24353-&gt;25237)</font><br>

<font color="#008b8b">+ numactl grew 896 bytes (1.00%) (89239-&gt;90135)</font><br>
<font color="#008b8b">+ gnome-bluetooth-libs grew 1278 bytes (1.02%) (124866-&gt;126144)</font><br>
<font color="#008b8b">+ xorg-x11-drv-evdev grew 1445 bytes (4.05%) (35642-&gt;37087)</font><br>
<font color="#008b8b">+ m17n-db-hindi grew 1717 bytes (21.74%) (7899-&gt;9616)</font><br>
<font color="#008b8b">+ sysreport grew 1783 bytes (5.30%) (33620-&gt;35403)</font><br>
<font color="#008b8b">+ libpciaccess grew 1796 bytes (7.21%) (24901-&gt;26697)</font><br>

<font color="#008b8b">+ sg3_utils-libs grew 2156 bytes (1.97%) (109392-&gt;111548)</font><br>
<font color="#008b8b">+ pciutils grew 2464 bytes (1.36%) (180975-&gt;183439)</font><br>
<font color="#008b8b">+ setroubleshoot grew 2541 bytes (1.11%) (229578-&gt;232119)</font><br>
<font color="#008b8b">+ gnome-keyring-pam grew 2556 bytes (8.89%) (28760-&gt;31316)</font><br>
<font color="#008b8b">+ libcap grew 2618 bytes (5.79%) (45230-&gt;47848)</font><br>
<font color="#008b8b">+ apr grew 2823 bytes (1.04%) (271801-&gt;274624)</font><br>

<font color="#008b8b">+ bc grew 2861 bytes (1.50%) (190964-&gt;193825)</font><br>
<font color="#008b8b">+ libsepol grew 2992 bytes (1.33%) (224692-&gt;227684)</font><br>
<font color="#008b8b">+ lohit-fonts-telugu grew 3100 bytes (1.78%) (174487-&gt;177587)</font><br>
<font color="#008b8b">+ e2fsprogs-libs grew 3332 bytes (1.33%) (250016-&gt;253348)</font><br>
<font color="#008b8b">+ device-mapper-libs grew 3680 bytes (4.25%) (86516-&gt;90196)</font><br>
<font color="#008b8b">+ glx-utils grew 3704 bytes (10.98%) (33736-&gt;37440)</font><br>

<font color="#008b8b">+ scim-chewing grew 4072 bytes (3.22%) (126383-&gt;130455)</font><br>
<font color="#008b8b">+ dbus-libs grew 4100 bytes (1.63%) (251944-&gt;256044)</font><br>
<font color="#008b8b">+ nash grew 4128 bytes (1.74%) (237698-&gt;241826)</font><br>
<font color="#008b8b">+ libjpeg grew 4420 bytes (1.61%) (275021-&gt;279441)</font><br>
<font color="#008b8b">+ authconfig-gtk grew 4808 bytes (2.75%) (175143-&gt;179951)</font><br>
<font color="#008b8b">+ mkinitrd grew 4854 bytes (4.84%) (100334-&gt;105188)</font><br>

<font color="#008b8b">+ linuxwacom grew 5518 bytes (1.10%) (502293-&gt;507811)</font><br>
<font color="#008b8b">+ desktop-file-utils grew 5523 bytes (4.50%) (122601-&gt;128124)</font><br>
<font color="#008b8b">+ gnome-python2-gnomeprint grew 5547 bytes (1.27%) (437641-&gt;443188)</font><br>
<font color="#008b8b">+ bluez-utils-alsa grew 5856 bytes (13.67%) (42824-&gt;48680)</font><br>
<font color="#008b8b">+ m17n-contrib-telugu grew 6114 bytes (28.08%) (21776-&gt;27890)</font><br>
<font color="#008b8b">+ rsyslog grew 6922 bytes (1.45%) (477587-&gt;484509)</font><br>

<font color="#008b8b">+ ustr grew 7531 bytes (3.12%) (241610-&gt;249141)</font><br>
<font color="#008b8b">+ rhpxl grew 7783 bytes (2.36%) (329907-&gt;337690)</font><br>
<font color="#008b8b">+ xorg-x11-drv-mga grew 8319 bytes (4.91%) (169473-&gt;177792)</font><br>
<font color="#008b8b">+ taglib grew 8368 bytes (1.71%) (489415-&gt;497783)</font><br>
<font color="#008b8b">+ gtk-nodoka-engine grew 8948 bytes (9.32%) (96057-&gt;105005)</font><br>
<font color="#008b8b">+ nscd grew 9484 bytes (6.73%) (140911-&gt;150395)</font><br>

<font color="#008b8b">+ exempi grew 9692 bytes (1.39%) (698782-&gt;708474)</font><br>
<font color="#008b8b">+ gnome-menus grew 9841 bytes (1.57%) (626493-&gt;636334)</font><br>
<font color="#008b8b">+ dbus-glib grew 9970 bytes (2.10%) (473790-&gt;483760)</font><br>
<font color="#008b8b">+ libdhcp6client grew 10524 bytes (6.30%) (166956-&gt;177480)</font><br>
<font color="#008b8b">+ openldap grew 10658 bytes (1.76%) (604986-&gt;615644)</font><br>
<font color="#008b8b">+ nss_ldap grew 12224 bytes (2.17%) (562402-&gt;574626)</font><br>

<font color="#008b8b">+ dmidecode grew 14466 bytes (10.46%) (138266-&gt;152732)</font><br>
<font color="#008b8b">+ NetworkManager-vpnc grew 14477 bytes (4.58%) (316033-&gt;330510)</font><br>
<font color="#008b8b">+ system-config-rootpassword grew 14962 bytes (16.07%) (93118-&gt;108080)</font><br>
<font color="#008b8b">+ gstreamer-python grew 15266 bytes (1.64%) (933175-&gt;948441)</font><br>
<font color="#008b8b">+ rarian grew 15824 bytes (4.99%) (316947-&gt;332771)</font><br>
<font color="#008b8b">+ at-spi grew 16072 bytes (2.38%) (674624-&gt;690696)</font><br>

<font color="#008b8b">+ isomd5sum grew 17146 bytes (36.61%) (46840-&gt;63986)</font><br>
<font color="#008b8b">+ usbutils grew 17192 bytes (19.31%) (89044-&gt;106236)</font><br>
<font color="#008b8b">+ acl grew 17875 bytes (11.97%) (149393-&gt;167268)</font><br>
<font color="#008b8b">+ hicolor-icon-theme grew 17992 bytes (79.30%) (22688-&gt;40680)</font><br>
<font color="#008b8b">+ gnome-python2-desktop grew 18187 bytes (7.44%) (244527-&gt;262714)</font><br>
<font color="#008b8b">+ libdhcp grew 19318 bytes (14.23%) (135727-&gt;155045)</font><br>

<font color="#008b8b">+ which grew 20480 bytes (65.05%) (31485-&gt;51965)</font><br>
<font color="#008b8b">+ NetworkManager-gnome grew 20604 bytes (2.90%) (710665-&gt;731269)</font><br>
<font color="#008b8b">+ pam_krb5 grew 20943 bytes (8.06%) (259736-&gt;280679)</font><br>
<font color="#008b8b">+ system-config-language grew 21674 bytes (8.55%) (253576-&gt;275250)</font><br>
<font color="#008b8b">+ libxcb grew 22328 bytes (5.40%) (413804-&gt;436132)</font><br>
<font color="#008b8b">+ bluez-utils grew 22572 bytes (1.76%) (1280277-&gt;1302849)</font><br>

<font color="#008b8b">+ pygtksourceview grew 23100 bytes (36.06%) (64064-&gt;87164)</font><br>
<font color="#008b8b">+ libgpg-error grew 23525 bytes (12.14%) (193728-&gt;217253)</font><br>
<font color="#008b8b">+ glibmm24 grew 24411 bytes (5.25%) (465396-&gt;489807)</font><br>
<font color="#008b8b">+ fribidi grew 24912 bytes (17.19%) (144894-&gt;169806)</font><br>
<font color="#008b8b">+ gmime grew 24916 bytes (4.24%) (587824-&gt;612740)</font><br>
<font color="#008b8b">+ libuser grew 25215 bytes (1.56%) (1616562-&gt;1641777)</font><br>

<font color="#008b8b">+ httpd grew 28595 bytes (1.12%) (2551734-&gt;2580329)</font><br>
<font color="#008b8b">+ m17n-lib grew 30893 bytes (10.14%) (304750-&gt;335643)</font><br>
<font color="#008b8b">+ rhpl grew 31037 bytes (3.99%) (778235-&gt;809272)</font><br>
<font color="#008b8b">+ libdhcp4client grew 32772 bytes (6.57%) (499144-&gt;531916)</font><br>
<font color="#008b8b">+ bind-utils grew 33408 bytes (10.87%) (307362-&gt;340770)</font><br>
<font color="#008b8b">+ NetworkManager grew 33657 bytes (1.42%) (2377366-&gt;2411023)</font><br>

<font color="#008b8b">+ dbus-python grew 36266 bytes (5.11%) (710089-&gt;746355)</font><br>
<font color="#008b8b">+ gnome-mag grew 36431 bytes (7.21%) (504936-&gt;541367)</font><br>
<font color="#008b8b">+ libXpm grew 37746 bytes (52.09%) (72467-&gt;110213)</font><br>
<font color="#008b8b">+ libgnomekbd grew 38042 bytes (6.68%) (569521-&gt;607563)</font><br>
<font color="#008b8b">+ pm-utils grew 39200 bytes (117.36%) (33402-&gt;72602)</font><br>
<font color="#008b8b">+ nautilus-sendto grew 42489 bytes (16.21%) (262118-&gt;304607)</font><br>

<font color="#008b8b">+ dhclient grew 42699 bytes (8.59%) (497288-&gt;539987)</font><br>
<font color="#008b8b">+ gtksourceview2 grew 42895 bytes (2.00%) (2148753-&gt;2191648)</font><br>
<font color="#008b8b">+ krb5-libs grew 45052 bytes (2.96%) (1522532-&gt;1567584)</font><br>
<font color="#008b8b">+ system-config-printer grew 47675 bytes (5.03%) (948043-&gt;995718)</font><br>
<font color="#008b8b">+ gnutls grew 58282 bytes (5.99%) (972804-&gt;1031086)</font><br>
<font color="#008b8b">+ bluez-gnome grew 60576 bytes (22.56%) (268531-&gt;329107)</font><br>

<font color="#008b8b">+ mono-data grew 61605 bytes (1.21%) (5087435-&gt;5149040)</font><br>
<font color="#008b8b">+ libwnck grew 62234 bytes (5.42%) (1148126-&gt;1210360)</font><br>
<font color="#008b8b">+ gtk2-engines grew 63679 bytes (6.09%) (1045391-&gt;1109070)</font><br>
<font color="#008b8b">+ system-config-users grew 64047 bytes (4.40%) (1455495-&gt;1519542)</font><br>
<font color="#008b8b">+ gnokii grew 68723 bytes (4.36%) (1575916-&gt;1644639)</font><br>
<font color="#008b8b">+ rsync grew 73058 bytes (18.04%) (404896-&gt;477954)</font><br>

<font color="#008b8b">+ hal-info grew 75029 bytes (20.94%) (358305-&gt;433334)</font><br>
<font color="#008b8b">+ mesa-libGLU grew 77812 bytes (17.12%) (454428-&gt;532240)</font><br>
<font color="#008b8b">+ mdadm grew 83417 bytes (4.79%) (1743098-&gt;1826515)</font><br>
<font color="#008b8b">+ shared-mime-info grew 85852 bytes (9.51%) (902332-&gt;988184)</font><br>
<font color="#008b8b">+ compiz-gnome grew 87904 bytes (7.16%) (1227682-&gt;1315586)</font><br>
<font color="#008b8b">+ PolicyKit-gnome grew 89123 bytes (126.49%) (70457-&gt;159580)</font><br>

<font color="#008b8b">+ GConf2 grew 89585 bytes (1.68%) (5342705-&gt;5432290)</font><br>
<font color="#008b8b">+ dhcpv6-client grew 94965 bytes (54.70%) (173599-&gt;268564)</font><br>
<font color="#008b8b">+ system-config-firewall grew 103528 bytes (4.50%) (2300495-&gt;2404023)</font><br>
<font color="#008b8b">+ ntfs-3g grew 107185 bytes (36.31%) (295187-&gt;402372)</font><br>
<font color="#008b8b">+ f-spot grew 110065 bytes (1.44%) (7621883-&gt;7731948)</font><br>
<font color="#008b8b">+ PolicyKit grew 121200 bytes (71.93%) (168495-&gt;289695)</font><br>

<font color="#008b8b">+ gnupg grew 126829 bytes (2.62%) (4841029-&gt;4967858)</font><br>
<font color="#008b8b">+ libgcrypt grew 132376 bytes (38.24%) (346204-&gt;478580)</font><br>
<font color="#008b8b">+ libopenraw grew 136838 bytes (101.68%) (134583-&gt;271421)</font><br>
<font color="#008b8b">+ pykickstart grew 141694 bytes (17.92%) (790784-&gt;932478)</font><br>
<font color="#008b8b">+ gnome-python2-gnomevfs grew 142165 bytes (87.24%) (162958-&gt;305123)</font><br>
<font color="#008b8b">+ shadow-utils grew 144973 bytes (5.29%) (2739389-&gt;2884362)</font><br>

<font color="#008b8b">+ gnome-volume-manager grew 158480 bytes (7.38%) (2146417-&gt;2304897)</font><br>
<font color="#008b8b">+ vbetool grew 162208 bytes (139.43%) (116340-&gt;278548)</font><br>
<font color="#008b8b">+ openssl grew 166448 bytes (4.81%) (3459831-&gt;3626279)</font><br>
<font color="#008b8b">+ libselinux-python grew 171323 bytes (118.46%) (144622-&gt;315945)</font><br>
<font color="#008b8b">+ libsilc grew 180620 bytes (17.41%) (1037560-&gt;1218180)</font><br>
<font color="#008b8b">+ sound-juicer grew 182617 bytes (5.86%) (3114050-&gt;3296667)</font><br>

<font color="#008b8b">+ gnome-system-monitor grew 186353 bytes (3.55%) (5244840-&gt;5431193)</font><br>
<font color="#008b8b">+ gdb grew 193437 bytes (3.11%) (6228176-&gt;6421613)</font><br>
<font color="#008b8b">+ selinux-policy-devel grew 206105 bytes (3.72%) (5545358-&gt;5751463)</font><br>
<font color="#008b8b">+ evolution-data-server grew 208724 bytes (1.89%) (11029422-&gt;11238146)</font><br>
<font color="#008b8b">+ PyOpenGL grew 213779 bytes (4.86%) (4398157-&gt;4611936)</font><br>
<font color="#008b8b">+ tomboy grew 218900 bytes (3.63%) (6022535-&gt;6241435)</font><br>

<font color="#008b8b">+ parted grew 223507 bytes (15.16%) (1474368-&gt;1697875)</font><br>
<font color="#008b8b">+ orca grew 231344 bytes (4.05%) (5718621-&gt;5949965)</font><br>
<font color="#008b8b">+ util-linux-ng grew 245524 bytes (5.17%) (4749959-&gt;4995483)</font><br>
<font color="#008b8b">+ selinux-policy grew 268202 bytes (3.47%) (7731786-&gt;7999988)</font><br>
<font color="#008b8b">+ iso-codes grew 269192 bytes (4.80%) (5605136-&gt;5874328)</font><br>
<font color="#008b8b">+ system-config-date grew 282500 bytes (10.09%) (2798572-&gt;3081072)</font><br>

<font color="#008b8b">+ xorg-x11-drv-ati grew 285328 bytes (35.75%) (798151-&gt;1083479)</font><br>
<font color="#008b8b">+ eog grew 292326 bytes (7.82%) (3740424-&gt;4032750)</font><br>
<font color="#008b8b">+ dbus grew 299134 bytes (58.75%) (509123-&gt;808257)</font><br>
<font color="#008b8b">+ totem grew 321458 bytes (5.87%) (5476956-&gt;5798414)</font><br>
<font color="#008b8b">+ gnome-keyring grew 333541 bytes (32.87%) (1014819-&gt;1348360)</font><br>
<font color="#008b8b">+ glibc grew 347221 bytes (2.59%) (13402107-&gt;13749328)</font><br>

<font color="#008b8b">+ sqlite grew 358672 bytes (76.12%) (471170-&gt;829842)</font><br>
<font color="#008b8b">+ setroubleshoot-server grew 363273 bytes (22.18%) (1637732-&gt;2001005)</font><br>
<font color="#008b8b">+ bind-libs grew 389872 bytes (17.27%) (2258064-&gt;2647936)</font><br>
<font color="#008b8b">+ gcalctool grew 496578 bytes (10.21%) (4862745-&gt;5359323)</font><br>
<font color="#008b8b">+ gnome-panel grew 509960 bytes (4.35%) (11714901-&gt;12224861)</font><br>
<font color="#008b8b">+ ghostscript grew 534784 bytes (1.87%) (28646835-&gt;29181619)</font><br>

<font color="#008b8b">+ rhythmbox grew 678314 bytes (6.41%) (10582223-&gt;11260537)</font><br>
<font color="#008b8b">+ mono-core grew 686301 bytes (2.01%) (34154946-&gt;34841247)</font><br>
<font color="#008b8b">+ nautilus grew 693197 bytes (5.04%) (13751211-&gt;14444408)</font><br>
<font color="#008b8b">+ mono-winforms grew 729754 bytes (7.47%) (9765822-&gt;10495576)</font><br>
<font color="#008b8b">+ totem-mozplugin grew 770229 bytes (136.17%) (565632-&gt;1335861)</font><br>
<font color="#008b8b">+ mono-web grew 797665 bytes (9.85%) (8097242-&gt;8894907)</font><br>

<font color="#008b8b">+ glib2 grew 849381 bytes (29.07%) (2922173-&gt;3771554)</font><br>
<font color="#008b8b">+ gnome-power-manager grew 934030 bytes (8.33%) (11214535-&gt;12148565)</font><br>
<font color="#008b8b">+ nss grew 937664 bytes (44.33%) (2114975-&gt;3052639)</font><br>
<font color="#008b8b">+ libsmbclient grew 1191360 bytes (50.53%) (2357736-&gt;3549096)</font><br>
<font color="#008b8b">+ gnome-games grew 1373569 bytes (4.65%) (29510057-&gt;30883626)</font><br>
<font color="#008b8b">+ kernel grew 2170562 bytes (4.60%) (47161413-&gt;49331975)</font><br>

<font color="#008b8b">+ anaconda grew 2566351 bytes (17.76%) (14448198-&gt;17014549)</font><br>
<font color="#6a5acd">- krb5-auth-dialog shrunk 1 bytes (53674-&gt;53673)</font><br>
<font color="#6a5acd">- libtirpc shrunk 1 bytes (150301-&gt;150300)</font><br>
<font color="#6a5acd">- gmime-sharp shrunk 6 bytes (197336-&gt;197330)</font><br>
<font color="#6a5acd">- gzip shrunk 6 bytes (219689-&gt;219683)</font><br>
<font color="#6a5acd">- gedit shrunk 8 bytes (13487572-&gt;13487564)</font><br>

<font color="#6a5acd">- readline shrunk 8 bytes (350214-&gt;350206)</font><br>
<font color="#6a5acd">- system-config-network shrunk 8 bytes (1905298-&gt;1905290)</font><br>
<font color="#6a5acd">- perl shrunk 14 bytes (31645884-&gt;31645870)</font><br>
<font color="#6a5acd">- ntsysv shrunk 16 bytes (22156-&gt;22140)</font><br>
<font color="#6a5acd">- xdg-utils shrunk 18 bytes (176553-&gt;176535)</font><br>
<font color="#6a5acd">- python-pyblock shrunk 22 bytes (175969-&gt;175947)</font><br>

<font color="#6a5acd">- pavucontrol shrunk 23 bytes (169857-&gt;169834)</font><br>
<font color="#6a5acd">- logrotate shrunk 32 bytes (77454-&gt;77422)</font><br>
<font color="#6a5acd">- libXfont shrunk 32 bytes (456948-&gt;456916)</font><br>
<font color="#6a5acd">- gnome-python2-canvas shrunk 32 bytes (48902-&gt;48870)</font><br>
<font color="#6a5acd">- xorg-x11-drv-vmmouse shrunk 32 bytes (16364-&gt;16332)</font><br>
<font color="#6a5acd">- mono-data-sqlite shrunk 33 bytes (457296-&gt;457263)</font><br>

<font color="#6a5acd">- gnome-pilot shrunk 36 bytes (1930958-&gt;1930922)</font><br>
<font color="#6a5acd">- libflashsupport shrunk 40 bytes (11044-&gt;11004)</font><br>
<font color="#6a5acd">- nautilus-extensions shrunk 48 bytes (31308-&gt;31260)</font><br>
<font color="#6a5acd">- pulseaudio-utils shrunk 56 bytes (234499-&gt;234443)</font><br>
<font color="#6a5acd">- libselinux shrunk 61 bytes (148311-&gt;148250)</font><br>
<font color="#6a5acd">- gimp shrunk 64 bytes (38423455-&gt;38423391)</font><br>

<font color="#6a5acd">- libXrender shrunk 64 bytes (47254-&gt;47190)</font><br>
<font color="#6a5acd">- paps shrunk 64 bytes (51462-&gt;51398)</font><br>
<font color="#6a5acd">- libxkbfile shrunk 96 bytes (146358-&gt;146262)</font><br>
<font color="#6a5acd">- librsvg2 shrunk 120 bytes (337750-&gt;337630)</font><br>
<font color="#6a5acd">- pulseaudio-libs shrunk 128 bytes (343843-&gt;343715)</font><br>
<font color="#6a5acd">- isdn4k-utils shrunk 144 bytes (9789025-&gt;9788881)</font><br>

<font color="#6a5acd">- less shrunk 171 bytes (176124-&gt;175953)</font><br>
<font color="#6a5acd">- pulseaudio shrunk 192 bytes (926686-&gt;926494)</font><br>
<font color="#6a5acd">- xorg-x11-drv-keyboard shrunk 256 bytes (26608-&gt;26352)</font><br>
<font color="#6a5acd">- anacron shrunk 274 bytes (56515-&gt;56241)</font><br>
<font color="#6a5acd">- libgtop2 shrunk 320 bytes (341012-&gt;340692)</font><br>
<font color="#6a5acd">- xorg-x11-drv-cirrus shrunk 355 bytes (77986-&gt;77631)</font><br>

<font color="#6a5acd">- gtkspell shrunk 400 bytes (56779-&gt;56379)</font><br>
<font color="#6a5acd">- pulseaudio-core-libs shrunk 416 bytes (439696-&gt;439280)</font><br>
<font color="#6a5acd">- liberation-fonts shrunk 444 bytes (1865074-&gt;1864630)</font><br>
<font color="#6a5acd">- libpcap shrunk 485 bytes (261897-&gt;261412)</font><br>
<font color="#6a5acd">- nspluginwrapper shrunk 509 bytes (311525-&gt;311016)</font><br>
<font color="#6a5acd">- acpid shrunk 542 bytes (61235-&gt;60693)</font><br>

<font color="#6a5acd">- udev shrunk 601 bytes (654430-&gt;653829)</font><br>
<font color="#6a5acd">- setroubleshoot-plugins shrunk 689 bytes (2422617-&gt;2421928)</font><br>
<font color="#6a5acd">- python-numeric shrunk 1040 bytes (1722779-&gt;1721739)</font><br>
<font color="#6a5acd">- file-libs shrunk 1181 bytes (1669772-&gt;1668591)</font><br>
<font color="#6a5acd">- xorg-x11-drv-vesa shrunk 1208 bytes (26099-&gt;24891)</font><br>
<font color="#6a5acd">- system-config-keyboard shrunk 1259 bytes (182829-&gt;181570)</font><br>

<font color="#6a5acd">- fedora-release shrunk 1450 bytes (46680-&gt;45230)</font><br>
<font color="#6a5acd">- gnome-spell shrunk 1568 bytes (377889-&gt;376321)</font><br>
<font color="#6a5acd">- gparted shrunk 1600 bytes (1569813-&gt;1568213)</font><br>
<font color="#6a5acd">- nspr shrunk 1856 bytes (248628-&gt;246772)</font><br>
<font color="#6a5acd">- dvd+rw-tools shrunk 1860 bytes (283930-&gt;282070)</font><br>
<font color="#6a5acd">- libdrm shrunk 1878 bytes (39456-&gt;37578)</font><br>

<font color="#6a5acd">- at shrunk 1892 bytes (83059-&gt;81167)</font><br>
<font color="#6a5acd">- synaptics shrunk 2072 bytes (113498-&gt;111426)</font><br>
<font color="#6a5acd">- m17n-contrib-hindi shrunk 2162 bytes (16757-&gt;14595)</font><br>
<font color="#6a5acd">- pango shrunk 3747 bytes (862572-&gt;858825)</font><br>
<font color="#6a5acd">- system-config-services shrunk 3768 bytes (561578-&gt;557810)</font><br>
<font color="#6a5acd">- libcdio shrunk 3961 bytes (555394-&gt;551433)</font><br>

<font color="#6a5acd">- audit-libs shrunk 4096 bytes (130447-&gt;126351)</font><br>
<font color="#6a5acd">- atmel-firmware shrunk 4458 bytes (732612-&gt;728154)</font><br>
<font color="#6a5acd">- fontconfig shrunk 4805 bytes (374336-&gt;369531)</font><br>
<font color="#6a5acd">- checkpolicy shrunk 6752 bytes (510825-&gt;504073)</font><br>
<font color="#6a5acd">- ppp shrunk 8123 bytes (841674-&gt;833551)</font><br>
<font color="#6a5acd">- ntp shrunk 8426 bytes (2652615-&gt;2644189)</font><br>

<font color="#6a5acd">- procps shrunk 11625 bytes (374451-&gt;362826)</font><br>
<font color="#6a5acd">- iproute shrunk 11660 bytes (2152986-&gt;2141326)</font><br>
<font color="#6a5acd">- gnome-bluetooth shrunk 12179 bytes (545675-&gt;533496)</font><br>
<font color="#6a5acd">- smolt shrunk 13811 bytes (635219-&gt;621408)</font><br>
<font color="#6a5acd">- b43-fwcutter shrunk 17375 bytes (37123-&gt;19748)</font><br>
<font color="#6a5acd">- im-chooser shrunk 19198 bytes (208789-&gt;189591)</font><br>

<font color="#6a5acd">- evolution shrunk 30364 bytes (38160208-&gt;38129844)</font><br>
<font color="#6a5acd">- ntfsprogs shrunk 33559 bytes (1148797-&gt;1115238)</font><br>
<font color="#6a5acd">- zip shrunk 33692 bytes (302492-&gt;268800)</font><br>
<font color="#6a5acd">- vixie-cron shrunk 46771 bytes (673502-&gt;626731)</font><br>
<font color="#6a5acd">- compiz shrunk 57822 bytes (1846352-&gt;1788530)</font><br>
<font color="#6a5acd">- cups shrunk 73290 bytes (10355510-&gt;10282220)</font><br>

<font color="#6a5acd">- system-config-printer-libs shrunk 88138 bytes (2438676-&gt;2350538)</font><br>
<font color="#6a5acd">- eel2 shrunk 90562 bytes (848996-&gt;758434)</font><br>
<font color="#6a5acd">- yelp shrunk 99732 bytes (2559882-&gt;2460150)</font><br>
<font color="#6a5acd">- xorg-x11-drv-i810 shrunk 249946 bytes (655965-&gt;406019)</font><br>
<font color="#6a5acd">- gtk2 shrunk 308952 bytes (20696815-&gt;20387863)</font><br>
<font color="#6a5acd">- fedora-release-notes shrunk 329470 bytes (12271152-&gt;11941682)</font><br>

<font color="#6a5acd">- firstboot shrunk 356968 bytes (783521-&gt;426553)</font><br>
<font color="#6a5acd">- cairo shrunk 423604 bytes (1623706-&gt;1200102)</font><br>
<font color="#6a5acd">- control-center shrunk 492635 bytes (8945618-&gt;8452983)</font><br>
<font color="#6a5acd">- gnome-media shrunk 782217 bytes (4946507-&gt;4164290)</font><br>
<font color="#6a5acd">- e2fsprogs shrunk 904410 bytes (2366733-&gt;1462323)</font><br>
<font color="#6a5acd">- device-mapper shrunk 917957 bytes (1027430-&gt;109473)</font><br>

<font color="#6a5acd">- gnome-themes shrunk 1007647 bytes (4994173-&gt;3986526)</font><br>
<font color="#6a5acd">- xkeyboard-config shrunk 1188506 bytes (3043679-&gt;1855173)</font><br>
<font color="#6a5acd">- lvm2 shrunk 1386888 bytes (2186994-&gt;800106)</font><br>
<font color="#6a5acd">- xorg-x11-server-Xorg shrunk 1410978 bytes (7431876-&gt;6020898)</font><br>
<font color="#6a5acd">- hwdata shrunk 1768168 bytes (2833960-&gt;1065792)</font><br>
<font color="#6a5acd">- python shrunk 1870258 bytes (18499208-&gt;16628950)</font><br>

<font color="#6a5acd">- xorg-x11-fonts-Type1 shrunk 1919814 bytes (2803806-&gt;883992)</font><br>
<font color="#6a5acd">- ncurses shrunk 2311863 bytes (2562051-&gt;250188)</font><br>
<font color="#6a5acd">- selinux-policy-targeted shrunk 3623635 bytes (27306881-&gt;23683246)</font><br>
<font color="#6a5acd">- gdm shrunk 6450348 bytes (14040436-&gt;7590088)</font><br>
<font color="#6a5acd">- gnome-applets shrunk 8005406 bytes (26478262-&gt;18472856)</font><br>
<font color="#6a5acd">- firefox shrunk 39666395 bytes (42009290-&gt;2342895)</font><br>

<font color="#6a5acd">- removed package fonts-gujarati: 0</font><br>
<font color="#6a5acd">- removed package fonts-korean: 0</font><br>
<font color="#6a5acd">- removed package scim-lang-kannada: 0</font><br>
<font color="#6a5acd">- removed package fonts-arabic: 0</font><br>
<font color="#6a5acd">- removed package fonts-punjabi: 0</font><br>
<font color="#6a5acd">- removed package fonts-oriya: 0</font><br>
<font color="#6a5acd">- removed package fonts-chinese: 0</font><br>
<font color="#6a5acd">- removed package scim-lang-tibetan: 0</font><br>
<font color="#6a5acd">- removed package fonts-kannada: 0</font><br>

<font color="#6a5acd">- removed package fonts-bengali: 0</font><br>
<font color="#6a5acd">- removed package fonts-hebrew: 0</font><br>
<font color="#6a5acd">- removed package fonts-hindi: 0</font><br>
<font color="#6a5acd">- removed package scim-lang-assamese: 0</font><br>
<font color="#6a5acd">- removed package fonts-sinhala: 0</font><br>
<font color="#6a5acd">- removed package scim-lang-sinhalese: 0</font><br>
<font color="#6a5acd">- removed package fonts-tamil: 0</font><br>
<font color="#6a5acd">- removed package fonts-telugu: 0</font><br>
<font color="#6a5acd">- removed package fonts-malayalam: 0</font><br>

<font color="#6a5acd">- removed package m17n-contrib-urdu: 3608</font><br>
<font color="#6a5acd">- removed package m17n-db-assamese: 6079</font><br>
<font color="#6a5acd">- removed package m17n-db-kannada: 7749</font><br>
<font color="#6a5acd">- removed package m17n-contrib-kannada: 8717</font><br>
<font color="#6a5acd">- removed package m17n-contrib-sinhala: 11327</font><br>
<font color="#6a5acd">- removed package m17n-contrib-assamese: 12581</font><br>
<font color="#6a5acd">- removed package m17n-db-sinhala: 14228</font><br>
<font color="#6a5acd">- removed package m17n-db-tibetan: 15214</font><br>
<font color="#6a5acd">- removed package xorg-x11-drv-ark: 18888</font><br>

<font color="#6a5acd">- removed package xorg-x11-drv-tseng: 52907</font><br>
<font color="#6a5acd">- removed package xorg-x11-drv-s3: 58401</font><br>
<font color="#6a5acd">- removed package scim-sinhala: 66881</font><br>
<font color="#6a5acd">- removed package totem-plparser: 70428</font><br>
<font color="#6a5acd">- removed package libbeagle: 94156</font><br>
<font color="#6a5acd">- removed package xorg-x11-drv-avivo: 107204</font><br>
<font color="#6a5acd">- removed package xorg-x11-drv-chips: 154533</font><br>
<font color="#6a5acd">- removed package lohit-fonts-kannada: 210687</font><br>
<font color="#6a5acd">- removed package fuse: 216231</font><br>

<font color="#6a5acd">- removed package beecrypt: 242015</font><br>
<font color="#6a5acd">- removed package lklug-fonts: 333507</font><br>
<font color="#6a5acd">- removed package xorg-x11-drv-via: 363192</font><br>
<font color="#6a5acd">- removed package xorg-x11-fonts-ethiopic: 437981</font><br>
<font color="#6a5acd">- removed package SDL: 495206</font><br>
<font color="#6a5acd">- removed package curl: 514238</font><br>
<font color="#6a5acd">- removed package firstboot-tui: 653472</font><br>
<font color="#6a5acd">- removed package xorg-x11-fonts-truetype: 909077</font><br>
<font color="#6a5acd">- removed package db4o: 1414265</font><br>

<font color="#6a5acd">- removed package jomolhari-fonts: 2293163</font><br>
<font color="#6a5acd">- removed package pwlib: 2423701</font><br>
<font color="#6a5acd">- removed package evince: 3452782</font><br>
<font color="#6a5acd">- removed package aspell-en: 3567971</font><br>
<font color="#6a5acd">- removed package tibetan-machine-uni-fonts: 4529886</font><br>
<font color="#6a5acd">- removed package dejavu-lgc-fonts: 6293390</font><br>
<font color="#6a5acd">- removed package opal: 10988583</font><br>
<font color="#6a5acd">- removed package ekiga: 13323689</font><br>
old has 896 packages<br>

new has 885 packages<br>
</font>
</blockquote></code>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 13:23 | <a href="http://lewk.org/blog/f8-f9alpha-livediff">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/f8-f9alpha-livediff.html#comment_anchor">0 comments</a>
</p>
<h2>Wed, 16 Jan 2008</h2><h3><a name="FUDCon2008" href="http://lewk.org/blog/FUDCon2008">FUDCon</a></h3>
<p><p>
So <a href="http://fedoraproject.org/wiki/FUDCon">FUDCon</a> happened over the weekend in Raleigh, North Carolina.  It was a great chance to meet a bunch of new people, catch up with some old friends, and kick around in the south for a bit.
  I was amazed to see such a huge turnout for the first day of the hackfest.  It was nice to see a ton of new contributors looking to dive in head first into projects.  My goal for the day was to hack on the <a href="http://fedoraproject.org/wiki/MyFedora">MyFedora</a> framework, and solidify our architecture and base widget classes, making it easy to create and display your own widgets.  It's probably safe to say that we exceeded those expectations.
</p>
<p>
I sat down with J5, Toshio, and Douglas Warner, fired up a Gobby instance, and started hacking.  Thanks to the wonders of distributed source control (git!), TurboGears, and Gobby, we were all able to simultaneously run, commit, and hack on the code.  The result of our days work turns out to be a pretty solid architecture for writing, configuring, and displaying reusable Python widgets (based on <a href="http://toscawidgets.org">ToscaWidgets</a>) that can pull from various data sources.  For example, writing a widget to display the latest entries in an RSS feed couldn't really be much easier:
</p>
<blockquote><code>
<font color="#a52a2a"><b>class</b></font>&nbsp;<font color="#008b8b">FedoraPeopleWidget</font>(RSSWidget):<br>
&nbsp;&nbsp;&nbsp;&nbsp;url = '<font color="#ff00ff"><a href="http://planet.fedoraproject.org/rss20.xml">http://planet.fedoraproject.org/rss20.xml</a></font>'<br>
&nbsp;&nbsp;&nbsp;&nbsp;title = '<font color="#ff00ff">Fedora People</font>'<br>
</code></blockquote>
<p>
The next day during the MyFedora session we got a chance to show off some of the work we did, and get some more ideas from various types of contributors.

This project has the potential to make a lot of peoples lives easier, so if you're interested in helping out, grab the code and dive in:
<code>$ git clone git://git.fedorahosted.org/git/myfedora.git</code>
</p>
<p>
Toshio and I gave a session on TurboGears, which seemed to go pretty well.  Lots of good discussion and code examples.  You can checkout the slides for my presentation here: <a href="http://tg.lewk.org">http://tg.lewk.org</a>.
</p>
<p>
I was going to be giving a session on <a href="http://fedorahosted.org/bodhi">bodhi</a>, which we eventually merged with the TurboGears talk.  However, the TG session went a lot longer than expected, and bodhi never emerged.  So, for those who were interested, you can find my bodhi slides <a href="http://lmacken.fedorapeople.org/bodhi.odp">here</a>, and some <a href="http://lmacken.fedorapeople.org/bodhi-FUDCon2007/">transcripts</a> from our last virtual fudcon.
</p>
<p>
The <a href="http://packagekit.org">PackageKit</a> session went well too.  People definitely were interested, and also had some interesting ideas.
</p>
<p>
Saturday night was FUDPub, where we had the back room of the Flying Saucer all to ourselves.  People kept feeding me drinks, and I didn't complain.  Good times :)
</p>
<p>
Sunday was the second day of the hackfests.  I decided to context-switch a bit and get my <a href="http://fedorahosted.org/func">func</a> on.  I wrote a <a href="https://fedorahosted.org/func/changeset/8c4a154f196383f6d0969934e10641e83ac51af4">patch</a> that adds a "mem" method to the ProcessModule that returns per-program memory usage from your minion in the format of <code>[[Private, Shared, Total RAM used, Program], ...]</code>.  This allows you to do something like,

<blockquote><code>
[lmacken@crow ~]$ sudo func "*" call process mem<br/>
on https://tomservo:51234 running process mem ()<br/>
[['16.8 MiB', '6.5 MiB', '23.4 MiB', 'Xorg'],<br/>
&nbsp;['21.7 MiB', '8.3 MiB', '30.1 MiB', 'tomboy'],<br/>
&nbsp;['33.6 MiB', '2.3 MiB', '35.9 MiB', 'ssh (5)'],<br/>
&nbsp;['23.2 MiB', '14.3 MiB', '37.5 MiB', 'deskbar-applet'],<br/>
&nbsp;['139.9 MiB', '9.9 MiB', '149.8 MiB', 'firefox-bin']]
</code></blockquote>
</p>
<p>
I also discussed a potential TurboGears <a href="https://fedorahosted.org/func/wiki/FuncWebNotes">FuncWeb</a> implementation with Michael DeHaan.  I got a chance to create create a skeleton project, and jot some ideas down.  Just as I was about to dive in, I got a phone call notifying me of my flight cancellation.  I then had to immediately sketch off to catch a 2:20pm flight and head back to Boston.
</p>
<p>
Last night I got a little bit A.D.D. and <a href="https://fedorahosted.org/func/changeset/23c9c26d270ff766133e7aeebffc99a35633ef41">re-wrote</a> <a href="https://fedorahosted.org/func/changeset/79d75b06a1bdae8c5c42026de606ed1787be6030">some</a> <a href="https://fedorahosted.org/func/changeset/a433b0073efcbeb2028dceed5105cc40f5936ddf">chunks</a> of the func minion module_loader/server to make <a href="https://fedorahosted.org/func/wiki/HowToWriteAndDistributeNewModules">writing func modules</a> a lot easier.
</p>
<p>
So, the moral of the story is: <b>FUDCon rocks</b>.  Feeding large quantities of geeks caffeine, beer, and barbeque can result in amazing things.
</p>
<p>
Of course there are no ups without downs, so I was stuck dealing with a nasty cold most of the time there, and my laptop power adapter melted as well.  Thankfully, both of those issue have since been resolved  :)</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 17:21 | <a href="http://lewk.org/blog/FUDCon2008">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a>, <a href="http://lewk.org/blog/tags/func" rel="tag">func</a> </span> | <a href="http://lewk.org/blog/FUDCon2008.html#comment_anchor">0 comments</a>
</p>
<h2>Wed, 19 Dec 2007</h2><h3><a name="TurboFlot" href="http://lewk.org/blog/TurboFlot">TurboFlot 0.0.1</a></h3>
<p><p>
In an effort to clean up bodhi's metrics code a bit, I wrote a <a href="http://pypi.python.org/pypi/TurboFlot">TurboFlot</a> plugin that allows you to wield the jQuery plugin <a href="http://code.google.com/p/flot/">flot</a> inside of TurboGears applications.  The code is quite trivial -- it's essentially just a TurboGears JSON proxy to the jQuery flot plugin.  Breaking this code out into it's own widget makes it really easy to generate shiny graphs in a Pythonic fashon, without having to write a line of javascript.
</p>

<center><img src="http://lewk.org/img/TurboFlot.png"/></center>

<p>
Check out the <a href="http://hg.lewk.org/TurboFlot/raw-file/c4d33e5072a0/README">README</a> to see the code for the example above.
</p>

<p>
To use TurboFlot in your own application, you just pass your data and graph options to the widget, and then throw it up to your template.  Read the <a href="http://flot.googlecode.com/svn/trunk/API.txt">flot API documentation</a> for details on all of the arguments.  Here is a simple usage example:

<blockquote>
<code>
flot = TurboFlot([<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'<font color="#ff00ff">data</font>'&nbsp;&nbsp;: [[0, 3], [4, 8], [8, 5], [9, 13]],<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'<font color="#ff00ff">lines</font>'&nbsp;: { '<font color="#ff00ff">show</font>'&nbsp;: True, '<font color="#ff00ff">fill</font>'&nbsp;: True&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;}],<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'<font color="#ff00ff">grid</font>'&nbsp;&nbsp;: { '<font color="#ff00ff">backgroundColor</font>'&nbsp;: '<font color="#ff00ff">#fffaff</font>'&nbsp;},<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'<font color="#ff00ff">yaxis</font>'&nbsp;: { '<font color="#ff00ff">max</font>'&nbsp;: '<font color="#ff00ff">850</font>'&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
)<br>
</code>
</blockquote>

Then, to display the widget in your template, you simply use:
<blockquote>
<code>
${flot.display()}
</code>
</blockquote>
</p>

The code for the widget itself is pretty simple.  It just takes your data and graph options, encodes them as JSON and tosses them at flot.

<blockquote><code>
<font color="#a52a2a"><b>class</b></font>&nbsp;<font color="#008b8b">TurboFlot</font>(Widget):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;&quot;&quot;<br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A TurboGears Flot Widget.</font><br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;</font>&quot;&quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;template = &quot;&quot;&quot;<br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div xmlns:py=&quot;<a href="http://purl.org/kid/ns#">http://purl.org/kid/ns#</a>&quot; id=&quot;turboflot&quot; </font><br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; style=&quot;width:${width};height:${height};&quot;&gt;</font><br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&gt;</font><br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.plot($(&quot;#turboflot&quot;), ${data}, ${options});</font><br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;</font><br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;</font><br>
<font color="#ff00ff">&nbsp;&nbsp;&nbsp;&nbsp;</font>&quot;&quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;params = [&quot;<font color="#ff00ff">data</font>&quot;, &quot;<font color="#ff00ff">options</font>&quot;, &quot;<font color="#ff00ff">height</font>&quot;, &quot;<font color="#ff00ff">width</font>&quot;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;javascript = [JSLink('<font color="#ff00ff">turboflot</font>', '<font color="#ff00ff">excanvas.js</font>'),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSLink(&quot;<font color="#ff00ff">turboflot</font>&quot;, &quot;<font color="#ff00ff">jquery.js</font>&quot;),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSLink(&quot;<font color="#ff00ff">turboflot</font>&quot;, &quot;<font color="#ff00ff">jquery.flot.js</font>&quot;)]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#a52a2a"><b>def</b></font>&nbsp;<font color="#008b8b">__init__</font>(self, data, options={}, height=&quot;<font color="#ff00ff">300px</font>&quot;, width=&quot;<font color="#ff00ff">600px</font>&quot;):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.data = simplejson.dumps(data)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.options = simplejson.dumps(options)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.height = height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.width = width<br>
</code>
</blockquote>

<p>
You can download the latest releases from the Python Package Index:
<blockquote><a href="http://pypi.python.org/pypi/TurboFlot"> http://pypi.python.org/pypi/TurboFlot</a>
</blockquote>

Or you can grab my latest development tree out of mercurial:
<blockquote><a href="http://hg.lewk.org/TurboFlot">http://hg.lewk.org/TurboFlot</a>
</blockquote>
As always, patches are welcome :)
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 20:21 | <a href="http://lewk.org/blog/TurboFlot">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/TurboFlot" rel="tag">TurboFlot</a>, <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a> </span> | <a href="http://lewk.org/blog/TurboFlot.html#comment_anchor">4 comments</a>
</p>
<h2>Sun, 09 Dec 2007</h2><h3><a name="bodhi-metrics" href="http://lewk.org/blog/bodhi-metrics">Fedora update metrics</a></h3>
<p><p>
<img src="/img/metrics.png" align="right" hspace="10"/>
Using <a href="http://code.google.com/p/flot/">flot</a>, a plotting library for <a href="http://jquery.com">jQuery</a>, I <a href="http://hg.fedoraproject.org/hg/hosted/bodhi?cs=b3a62f6ce39a">threw together</a> some shiny <a href="https://admin.fedoraproject.org/updates/metrics"><b>metrics</b></a> for <a href="http://hosted.fedoraproject.org/projects/bodhi">bodhi</a>.  It's pretty amazing to see how a Fedora release evolves over time, with almost as many enhancements as bugfixes.  This could arguably be a bad thing, as our "stable" bits seem to change so much; but it definitely shows how much innovation is happening in Fedora.
</p>
<center>
<img src="/img/f7-updates.png"/>
<img src="/img/security-updates.png"/>
<img src="/img/package-updates.png"/>
<img src="/img/developer-updates.png"/>
</center>
<p>
I should also note that the data on the graphs may look different than the numbers you see next to each category in the bodhi menu.  This is due to the fact that updates may contain multiple builds, and the graphs account for all builds in the system.
</p>
<p>
When I get some free cycles I'd like to generate some metrics from the old updates system for FC4-FC6.  I can imagine that the differences will be pretty drastic, considering how the old updates tool was internal to Red Hat, and that the majority of our top packagers are community folks.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 01:05 | <a href="http://lewk.org/blog/bodhi-metrics">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a>, <a href="http://lewk.org/blog/tags/jQuery" rel="tag">jQuery</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a> </span> | <a href="http://lewk.org/blog/bodhi-metrics.html#comment_anchor">2 comments</a>
</p>
<h2>Tue, 13 Nov 2007</h2><h3><a name="bodhi-client" href="http://lewk.org/blog/bodhi-client">bodhi command-line client</a></h3>
<p><img src="/bodhi.png" align="right" />
<p>
The bodhi-client package should be making its way to an updates-testing
repository near you!  Not only does this command-line tool give developers easier
access to bodhi, but also provides some new features to help people get more
involved with testing updates and providing useful feedback.
</p>
<p>
I wrote up some documentation on various usage examples of the tool, which can
be found on the <a href="https://hosted.fedoraproject.org/projects/bodhi/wiki/CLI">bodhi wiki</a>.  I also submitted a <a href="http://lmacken.fedorapeople.org/patches/Makefile.common-bodhi.patch">Makefile.common patch</a> that,
once applied, will allow you to run `make update` from your package branch.
This will drop you into a new update template, and will then submit your update
straight to bodhi.
</p>
<p>
Some noteworthy features in the bodhi-client, aside from the normal bodhi
functionality:
<ul>
<li>Ability to view all updates-testing packages that you currently have
    installed on your local machine, that you *could* be testing and providing
    useful feedback for
    <ul><li>bodhi --testable</li></ul>
</li>
<li>Ability to view your update candidates (this is a fairly expensive
    operation -- please use sparingly):
    <ul><li>bodhi --candidates</li></ul>
</li>
</ul>
</p>
<p>
I also upgraded our production bodhi instance yesterday, which pulled in a ton of
bugfixes and some new features, such as:
<ul>
<li>Updates by default will now get submitted to into testing.  This can easily
    be modified when using the web form, the bodhi client, and `make update`.
</li>
<li>Thanks to the new <a href="http://fedoraproject.org/wiki/Security/TrackingBugs">security bug tracking policy</a>, we're now tracking CVEs
    using Bugzilla, thus bodhi no longer will ask you for CVE IDs.  The less
    information that the developer has to type, the better.  Read the policy
    for more details.  Bodhi is not yet 100% compliant to the proposed changes,
    as it does not know about parent/tracking bugs, but should be soon.
</li>
<li>If you try and submit an update that is older than something already
    pending/testing, you will be prompted with a dialog that will give you the
    ability to instantly obsolete those updates.
</li>
</ul>
</p>
<p>
As always, patches/questions/criticisms/comments are welcome. You can file
tickets in the <a href="https://hosted.fedoraproject.org/projects/bodhi/newticket">usual place</a>.

Happy hacking!
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 15:42 | <a href="http://lewk.org/blog/bodhi-client">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a> </span> | <a href="http://lewk.org/blog/bodhi-client.html#comment_anchor">2 comments</a>
</p>
<h2>Mon, 01 Oct 2007</h2><h3><a name="nose" href="http://lewk.org/blog/nose">Use your Nose!</a></h3>
<p><p>
Every programmer out there [<i>hopefully</i>] knows that unittests are an essential part of any growing body of code, especially in the open source world.  However, most hackers out either never write test cases (let alone comments), or usually put them off until "later" (aka: never).  Having to deal with Java and JUnit tests in college not only made me not want to write unit tests, but it made me want to kill myself and everyone around me.  Thankfully, I learned Python.
</p>
<p>
So, I just happen to maintain a piece of software in Fedora called <a href="http://somethingaboutorange.com/mrl/projects/nose/">nose</a> (which lives in the python-nose package).  <a href="http://somethingaboutorange.com/mrl/projects/nose/">Nose</a> is a discovery-based unittest extension for Python, and is also a part of the <a href="http://turbogears.org">TurboGears</a> stack.  If you're hacking on a TurboGears project, the turbogears.testutil module provides some incredibly useful features that make writing tests powerfully trivial.
</p>
<p>
For example, in the code below (taken from <a href="https://hosted.fedoraproject.org/projects/bodhi/">bodhi</a>), I create a test case that utilizes a fresh SQLite database in memory.  Inheriting from the the testutil.DBTest parent class, this database will be created and torn down automagically before and after each test case is run -- ensuring that my tests are executed in complete isolation.  With this example, I wrote a test case to ensure that unauthenticated people cannot create a new update.
</p>
<p>
<blockquote>
<code>
<pre>
<strong>import</strong> <font color="#2040a0">urllib</font>, <font color="#2040a0">cherrypy</font>
<strong>from</strong> <font color="#2040a0">turbogears</font> <strong>import</strong> <font color="#2040a0">update_config</font>, <font color="#2040a0">database</font>, <font color="#2040a0">testutil</font>, <font color="#2040a0">url</font>

<font color="#2040a0">update_config</font><font color="4444FF">(</font><font color="#2040a0">configfile</font><font color="4444FF">=</font><font color="#008000">'dev.cfg'</font>, <font color="#2040a0">modulename</font><font color="4444FF">=</font><font color="#008000">'bodhi.config'</font><font color="4444FF">)</font>
<font color="#2040a0">database</font>.<font color="#2040a0">set_db_uri</font><font color="4444FF">(</font><font color="#008000">&quot;sqlite:///:memory:&quot;</font><font color="4444FF">)</font>

<strong>class</strong> <font color="#2040a0">TestControllers</font><font color="4444FF">(</font><font color="#2040a0">testutil</font>.<font color="#2040a0">DBTest</font><font color="4444FF">)</font><font color="4444FF">:</font>

<strong>   <font color="ff0000"> def</font><font color="ff0000"> test_unauthenticated_update</font><font color="2040a0">(self)</font>:
</strong>        <font color="#2040a0">params</font> <font color="4444FF">=</font> <font color="4444FF"><strong>{</strong></font>
                <font color="#008000">'builds'</font>  <font color="4444FF">:</font> <font color="#008000">'TurboGears-1.0.2.2-2.fc7'</font>,
                <font color="#008000">'release'</font> <font color="4444FF">:</font> <font color="#008000">'Fedora 7'</font>,
                <font color="#008000">'type'</font>    <font color="4444FF">:</font> <font color="#008000">'enhancement'</font>,
                <font color="#008000">'bugs'</font>    <font color="4444FF">:</font> <font color="#008000">'1234 5678'</font>,
                <font color="#008000">'cves'</font>    <font color="4444FF">:</font> <font color="#008000">'CVE-2020-0001'</font>,
                <font color="#008000">'notes'</font>   <font color="4444FF">:</font> <font color="#008000">'foobar'</font>
        <font color="4444FF"><strong>}</strong></font>
        <font color="#2040a0">path</font> <font color="4444FF">=</font> <font color="#2040a0">url</font><font color="4444FF">(</font><font color="#008000">'/save?'</font> <font color="4444FF">+</font> <font color="#2040a0">urllib</font>.<font color="#2040a0">urlencode</font><font color="4444FF">(</font><font color="#2040a0">params</font><font color="4444FF">)</font><font color="4444FF">)</font>
        <font color="#2040a0">testutil</font>.<font color="#2040a0">createRequest</font><font color="4444FF">(</font><font color="#2040a0">path</font>, <font color="#2040a0">method</font><font color="4444FF">=</font><font color="#008000">'POST'</font><font color="4444FF">)</font>
        <strong>assert</strong> <font color="#008000">&quot;You must provide your credentials before accessing this resource.&quot;</font> <strong>in</strong> <font color="#2040a0">cherrypy</font>.<font color="#2040a0">response</font>.<font color="#2040a0">body</font><font color="4444FF">[</font><font color="#FF0000">0</font><font color="4444FF">]</font>
</pre>
</code>
</blockquote>

In the above example, the TestControllers class is automatically detected by nose, which then executes each method that begins with the word 'test'.  To run your unittests, just type 'nosetests'.

<blockquote><code><pre>
[lmacken@tomservo bodhi]$ nosetests
.................................
----------------------------------------------------------------------
Ran 33 tests in 16.798s

OK
</pre></code></blockquote>

Now, for the fun part.  Nose comes equipped with a profiling plugin that will profile your test cases using Python's <a href="http://docs.python.org/lib/module-hotshot.html">hotshot</a> module.

So, I went ahead and added a 'profile' target to bodhi's Makefile:

<blockquote><code><pre>
profile:
    nosetests --with-profile --profile-stats-file=nose.prof
    python -c "import hotshot.stats ; stats = hotshot.stats.load('nose.prof') ; stats.sort_stats('time', 'calls') ; stats.print_stats(20)"
</pre></code></blockquote>

Now, typing 'make profile' will execute and profile all of our unit tests, and spit out the top 20 method calls -- ordered by internal time and call count.

<blockquote><code><pre>
[lmacken@tomservo bodhi]$ make profile
nosetests --with-profile --profile-stats-file=nose.prof
.................................
----------------------------------------------------------------------
Ran 33 tests in 42.878s

OK
python -c "import hotshot.stats ; stats = hotshot.stats.load('nose.prof') ; stats.sort_stats('time', 'calls') ; stats.print_stats(20)"
         800986 function calls (702850 primitive calls) in 42.878 CPU seconds

   Ordered by: internal time, call count
   List reduced from 3815 to 20 due to restriction <20>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       14   13.675    0.977   13.675    0.977 /usr/lib/python2.5/socket.py:71(ssl)
       31   10.683    0.345   10.683    0.345 /usr/lib/python2.5/httplib.py:994(_read)
2478/2429    9.297    0.004    9.677    0.004 <string>:1(<module>)
        1    0.604    0.604    0.604    0.604 /usr/lib/python2.5/commands.py:50(getstatusoutput)
     2999    0.536    0.000    0.539    0.000 /usr/lib/python2.5/site-packages/sqlobject/sqlite/sqliteconnection.py:177(_executeRetry)
   105899    0.448    0.000    0.773    0.000 Modules/pyexpat.c:871(Default)
       60    0.327    0.005    1.102    0.018 /usr/lib/python2.5/site-packages/kid/parser.py:343(_buildForeign)
   105899    0.325    0.000    0.325    0.000 /usr/lib/python2.5/site-packages/kid/parser.py:452(_default)
     3396    0.280    0.000    0.420    0.000 /usr/lib/python2.5/site-packages/cherrypy/config.py:107(get)
     2965    0.263    0.000    0.263    0.000 /usr/lib/python2.5/logging/__init__.py:364(formatTime)
44964/6587    0.238    0.000    0.252    0.000 /usr/lib/python2.5/site-packages/kid/parser.py:156(_pull)
       60    0.116    0.002    0.116    0.002 /usr/lib/python2.5/site-packages/kid/compiler.py:38(py_compile)
     8127    0.114    0.000    0.114    0.000 /usr/lib/python2.5/site-packages/cherrypy/_cputil.py:311(lower_to_camel)
     8982    0.110    0.000    0.137    0.000 /usr/lib/python2.5/site-packages/sqlobject/dbconnection.py:902(__getattr__)
13740/4044    0.108    0.000    2.176    0.001 /usr/lib/python2.5/site-packages/kid/parser.py:209(_coalesce)
24353/4026    0.107    0.000    2.143    0.001 /usr/lib/python2.5/site-packages/kid/parser.py:174(_track)
     3170    0.093    0.000    0.398    0.000 /usr/lib/python2.5/logging/__init__.py:405(format)
        1    0.082    0.082    0.082    0.082 /usr/lib/python2.5/site-packages/rpm/__init__.py:5(<module>)
     4777    0.081    0.000    1.320    0.000 /usr/lib/python2.5/site-packages/kid/serialization.py:564(generate)
  759/176    0.074    0.000    0.210    0.001 /usr/lib/python2.5/sre_parse.py:385(_parse)
</pre></code></blockquote>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 14:40 | <a href="http://lewk.org/blog/nose">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a>, <a href="http://lewk.org/blog/tags/nose" rel="tag">nose</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/TurboGears" rel="tag">TurboGears</a> </span> | <a href="http://lewk.org/blog/nose.html#comment_anchor">8 comments</a>
</p>
<h2>Sat, 15 Sep 2007</h2><h3><a name="bodhi-0.2.0" href="http://lewk.org/blog/bodhi-0.2.0">bodhi 0.2.0</a></h3>
<p><p>
<img src="https://admin.fedoraproject.org/updates/static/images/bodhi-icon-48.png" align="right"/>
I'm pleased to announce that bodhi 0.2.0 has been <a href="https://www.redhat.com/archives/fedora-devel-announce/2007-September/msg00008.html">released</a> and <a href="http://bodhi.fedoraproject.org">deployed</a>.
This release has fixed a ton of issues and introduces many new features,
such as:
</p>
<ul>

<li>Multi-build updates.  You can add as many builds to a single update as you
   want.  Bodhi will treat it as a single update, but will still send
   individual update notification mails for each build.</li>
<li>New homepage widget that allows you to keep up with the happenings inside of
   bodhi.  You can see the latest comments, testing/security/stable updates, and
   keep track of your own business.</li>
<li>Enhanced notifications.  If you commented on an update, you'll receive
   notifications when others comment on that update, and when that update is
   modified or changes states.</li>
<li>Automatic closing of bugs is now optional.</li>
<li>Build-completion improvements.  Package names will be automagically
   completed, and if you type '-' after, it will complete versions as
   well.</li>
<li>Positive/negative comments effect an updates 'karma'.  After an update
   achieves a karma of 3, it will automatically be pushed to the stable updates
   repository.  This will hopefully encourage testers to get involved with the
   updates-testing process a bit more, and will add some automation to the
   workflow</li>
<li>Extended metadata (updateinfo.xml.gz) should start appearing in the repodata,
   which will allow tools like pup and the yum-security plugin to take advantage
   of it and do some nifty stuff.</li>
<li>Reminders.  You'll get nagged when your update sits around in testing for too
   long, and so on..</li>
   </ul>
<p>
This release introduces many database changes from the previous version, so it
will be much easier to jump back into the release-early-release often cycle.
</p>
Soon to come: 
<ul>
<li>bodhi command-line client is almost ready to go.  It needs to be polished up
   a bit, but should be released soon.</li>
<li>RSS feeds and public details.</li>
<li>Better build-completion based on koji tags.</li>
<li>More sanity checking (koji buildroot verification, dependency closure,
        etc)</li>
<li>Better handling of obsolete updates</li>
</ul>
<p>
I would also like to thank Till Maas and Tim Lauridsen for taking the time to help out and do some great work.
</p>
<p>
There is still much to be done with bodhi, so if you're interested in
helping out, you can setup a local bodhi development playground with just a few
<a href="https://hosted.fedoraproject.org/projects/bodhi/wiki/Development">commands</a> and dive in.
</p>
<p>
As always, please file any bugs or enhancement requests <a href="https://hosted.fedoraproject.org/projects/bodhi/newticket">here</a>.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 15:44 | <a href="http://lewk.org/blog/bodhi-0.2.0">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/bodhi-0.2.0.html#comment_anchor">0 comments</a>
</p>
<h2>Sat, 19 May 2007</h2><h3><a name="fudcon" href="http://lewk.org/blog/2007/02/11/fudcon">FUDCon 2007</a></h3>
<p><p><div xmlns="http://www.w3.org/1999/xhtml"><p>
So FUDCon went down last weekend, and was an absolute blast.  My plane landed and I went straight to BU and arrived right while people were voting on sessions.  It was great to finally meet and chat with a ton of Fedora hackers that I've been collaborating with for quite some time now.
</p>
<p>
I caught <a href="http://www.gnome.org/~clarkbw/">Bryan Clark</a>'s <b>Mugshot</b> session, where he talked about some future ideas and goals for mugshot.  A potentially badass idea that he mentioned entails monitoring application usage patterns, which could help everyone get a good idea as to what programs are used and how much.  Both great software, and heavily used shitty software, will shine.  This will help the community get a jist of what needs work and what should be focused on / improved.  But it doesn't stop there, another idea mentioned was to have mugshot maintain basic application settings (email, rss, aim, etc) and allow users to be able to load them from anywhere.
</p>
<p>
After FUDCon we headed to the <b>FUDPub</b> where everyone indulged as much free beer/food that our stomachs could[n't] handle.  I got a chance to chat with many people, one being a guy from <a href="http://www.pepper.com/">Pepper</a>, who showed off his Pepper Pad a bit.  I talked with him about how he can get Pepper more involved with Fedora (we have overlaps in terms of infrastructure and such, and can greatly benefit from collaborating (especially on their end, since they are stuck maintaining FC4 which is what their platform is based on)), and get their code out into the public.
</p>
<p>
Saturday night involved our hotel room filled with 10+ fedora hackers, an OLPC, the <a href="http://www.fm3.com.cn/">buddha machine</a>, and a handle of Tanqueray.  Good times ensued (without any ambulance involvement).
</p>
<p>
During the two days of hacking that followed FUDCon, I definitely didn't write as much code as I had hoped, but I got a chance to have some great conversations with a ton of people.
</p>
<p>
Much discussion was had about making Fedora a <b>BugBuddy</b> that can help make it trivial to submit non-useless bug reports:
</p><ul><li>anonymous bug creation against components</li>
	<li>Provide a smolt uuid for complete hardware list of users machine</li>
	<li>Ability to acquire proper debuginfo packages and reproduce useful traceback</li>
	<li>Hash traceback (after cleaning it up a bit) and check it against a Traceback DB to see if there are any bugs already opened for that issue (suggested by Peter Jones during the Fedora QA talk).</li>
</ul>
Ideally, our software should be able to correctly <b>file bugs against itself</b>.

<p>
With the emergence of our shiny new hardware profiler <a href="https://hosted.fedoraproject.org/projects/smolt/wiki"><b>Smolt</b></a>, Fedora users can now anonymously submit hardware information.  Not only is acquiring metrics a good thing, but this could potentially give people the ability to report issues by simply simply referencing a unique id.  This requires some knowledge in Bugzilla, but if we had our own <b>Bugzilla playground</b> we would be able to experiment with features such as the traceback database, and smolt integration.  Our fearless QA leader, Will Woods, began setting up a bugzilla instance for experimenting with the crazy ideas during the hackfest.
</p>
<p>
What seems like a continued effort to make fedora more of a 'Buddy', we also had some discussions about a <b><a href="http://fedoraproject.org/wiki/Releases/FeatureCodecBuddy">CodecBuddy</a></b> that will essentially detect when you first attempt to play a file that requires an evil proprietary codec.  It will then educate the user on the implications of proprietary codecs, provide details on alternative open formats, and let users click on a link to legally acquire this codec, with of course the ability to say "hell no" to sustain your hardcore 100% open source mentality :)
</p>
<p>
Some other cools stuff that I observed go down was a graphical yum repository configuration tool called <a href="http://www.boston.burdell.org/repoman/"><b>repoman</b></a> that Chris Lumens was working on during the hackfest.  The yum guys also got a <a href="http://wiki.linux.duke.edu/YumHackFestFudCon">bunch</a> of stuff done, most importantly adding support to createrepo for inserting sqlite db files into repositories.
</p>
<p>
Many other technical items were discussed, but we also got a chance to step away from the bits for a little while and really talk about the current state of "collaboration" on the internet, and what we'd like to see Fedora do to push the bar in terms of innovation of social collaboration; but that is for another blog post :)
</p></div></p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 19:15 | <a href="http://lewk.org/blog/2007/02/11/fudcon">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/2007/02/11/fudcon.html#comment_anchor">0 comments</a>
</p>
<h3><a name="mutt" href="http://lewk.org/blog/2007/03/06/mutt">Dealing with multiple email addresses in mutt</a></h3>
<p><p><div xmlns="http://www.w3.org/1999/xhtml"><p>
I recently watched Bram Moolenaar's <a href="http://video.google.com/videoplay?docid=2538831956647446078">"7 Habits for Effective Text Editing 2.0"</a> Google Tech Talk presentation, which inspired me to dust off the old vimrc and poke around for a bit.  I tend to live most of my life inside of vim, which is actually a pretty kickass place to live (I even started working on a life.vim script to replace my [excessive] tomboy usage, and add a bit of <a href="http://www.davidco.com/">GTD</a> sauce).
</p>
<p>
I use <a href="http://mutt.org">mutt</a> for my email accounts, and recently made some modifications to my vimrc to help automate a task that utilizes far too many of my keystrokes each day: changing the From field of outgoing messages.
</p>
<blockquote>
<code>
<pre>
<font color="#a52a2a"><b>let</b></font> g:addresses <font color="#a52a2a"><b>=</b></font> [<font color="#ff00ff">'lewk csh rit edu'</font>, <font color="#ff00ff">'lmacken redhat com'</font>, <font color="#ff00ff">'lmacken fedoraproject org'</font>]
<font color="#a52a2a"><b>function</b></font> NextEmailAddress<font color="#a52a2a"><b>()</b></font>
    <font color="#a52a2a"><b>if</b></font> !<font color="#008b8b">exists</font><font color="#a52a2a"><b>(</b></font><font color="#ff00ff">"g:email_idx"</font><font color="#a52a2a"><b>)</b></font>
        <font color="#a52a2a"><b>let</b></font> g:email_idx <font color="#a52a2a"><b>=</b></font> <font color="#ff00ff">0</font>
    <font color="#a52a2a"><b>endif</b></font>
<font color="#a52a2a"><b>    s</b></font><font color="#6a5acd">@</font>^<font color="#6a5acd">\(</font>From:.*&lt;<font color="#6a5acd">\)</font>.*&gt;<font color="#6a5acd">@</font>\=submatch(1) . g:addresses[g:email_idx % len(g:addresses)] . "&gt;"<font color="#6a5acd">@</font>
    <font color="#a52a2a"><b>let</b></font> g:email_idx <font color="#a52a2a"><b>+=</b></font> <font color="#ff00ff">1</font>
<font color="#a52a2a"><b>endfunction</b></font>
<font color="#a52a2a"><b>map</b></font> <font color="#6a5acd">&lt;</font><font color="#6a5acd">silent</font><font color="#6a5acd">&gt;</font> @ :call NextEmailAddress()<font color="#6a5acd">&lt;</font><font color="#6a5acd">CR</font><font color="#6a5acd">&gt;</font>
</pre>
</code>
</blockquote>
<p>
This lets you cycle through your email addresses by pressing '@' when composing a new mail.  From here, my messages go through esmtp, which ships them off to the proper SMTP server based on the identity of the mail.
</p>
<p>
I'd be curious to hear of any other tweaks people have made to their vimrc's to help improve their mutt usage, or of any life-changing hack that saves you tons of keystrokes every day.
</p></div></p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 19:15 | <a href="http://lewk.org/blog/2007/03/06/mutt">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/mutt" rel="tag">mutt</a>, <a href="http://lewk.org/blog/tags/hacks" rel="tag">hacks</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/vim" rel="tag">vim</a> </span> | <a href="http://lewk.org/blog/2007/03/06/mutt.html#comment_anchor">1 comments</a>
</p>
<h3><a name="security-livecd" href="http://lewk.org/blog/2007/03/04/security-livecd">Security LiveCD</a></h3>
<p><p><div xmlns="http://www.w3.org/1999/xhtml"><p>
So last week I created an initial version of a potential <a href="http://fedoraproject.org/wiki/LukeMacken/SecurityLiveCD"><b>Fedora Security LiveCD</b></a> spin.  The goal is to provide a fully functional livecd based on Fedora for use in security auditing, penetration testing, and forensics.  I created it as a bonus project for my Security Auditing class (instead of following the 5-pages of instructions on how to create a Gentoo livecd that she handed out (mad props to <a href="http://fedoraproject.org/wiki/DavidZeuthen">davidz</a> for creating an amazing <a href="http://fedoraproject.org/wiki/FedoraLiveCD">LiveCD tool</a>)), but it has the potential to be extremely useful and also help increase the number and quality of Fedora's security tools.  I threw in all of the tools I could find that already exist in Fedora, but I'm sure I'm missing a bunch, so feel free to send patches or suggestions.  I also added a <a href="http://www.fedoraproject.org/wiki/LukeMacken/SecurityLiveCD#head-e580cc5eb9618467464bc7ab5b3e3f645efe88a4z">Wishlist</a> of packages that I would eventually like to see make their way in Fedora, after the core-&gt;extras merge reviews are done.
</p><p>
I would eventually like to see Fedora offer a LiveCD that puts all of the <a href="http://www.darknet.org.uk/2006/03/10-best-security-live-cd-distros-pen-test-forensics-recovery/">existing linux security livecds</a> to shame.  We have quite a ways to go, but this is a start.  I'm taking a computer forensics class next quarter, so I will be expanding it to fit the needs of our class as well.
</p></div></p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 19:15 | <a href="http://lewk.org/blog/2007/03/04/security-livecd">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/livecd" rel="tag">livecd</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/security" rel="tag">security</a>, <a href="http://lewk.org/blog/tags/Python" rel="tag">Python</a> </span> | <a href="http://lewk.org/blog/2007/03/04/security-livecd.html#comment_anchor">0 comments</a>
</p>
<h3><a name="fedora" href="http://lewk.org/blog/2007/03/12/fedora">Fedora Infrastructure Project notifications and IRC hackery</a></h3>
<p><p><div xmlns="http://www.w3.org/1999/xhtml"><p>
I started a <a href="http://mugshot.org/group?who=yWstkV2xGz93rQ">Fedora Infrastructure mugshot group</a> the other day, and hooked it up to the Timelines of some of our Infrastructure projects that are currently under development: <a href="https://hosted.fedoraproject.org/projects/smolt">smolt</a>, <a href="https://hosted.fedoraproject.org/projects/bodhi">bodhi</a>, <a href="https://hosted.fedoraproject.org/projects/pungi">pungi</a>, <a href="https://hosted.fedoraproject.org/projects/koji">koji</a>, <a href="https://hosted.fedoraproject.org/projects/mirrormanager">mirrormanager</a>, <a href="https://hosted.fedoraproject.org/projects/presto">presto</a>, and <a href="https://hosted.fedoraproject.org/projects/beaker">beaker</a>.  This will keep members of the group notified of code commits, ticket activity, as well as wiki and milestone changes.
</p>
<center><img src="http://lewk.org/img/mugshot.png"/></center>
<p>
Recently, Bugzilla hacker Max Kanat-Alexander setup a new <a href="http://supybot.com/">Supybot</a> IRC bot for us in <code>#fedorabot</code> that spits out Bugzilla activity in real time.  I quickly threw together a <a href="http://hg.lewk.org/fedora-supybot">Fedora plugin</a>  that will allow us to implement some useful functions to help out users and developers.  At the moment, I only created a <code>whoowns</code> command.
</p>
<code><blockquote><pre>
&lt;lmacken&gt; buggbot: whoowns nethack
&lt;buggbot&gt; lmacken: nethack is owned by lmacken@redhat.com
</pre></blockquote></code>
<p>
With Fedora 7 and a bunch of shiny new infrastructure right around the corner, I'm sure we'll be able to do some fun things with this.  If you're interested in hacking on this plugin, you can clone my mercurial repository by doing the following:
</p>

<blockquote><code>
$ hg clone http://hg.lewk.org/fedora-supybot
</code></blockquote></div></p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 19:15 | <a href="http://lewk.org/blog/2007/03/12/fedora">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/mugshot" rel="tag">mugshot</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/2007/03/12/fedora.html#comment_anchor">0 comments</a>
</p>
<h2>Mon, 07 May 2007</h2><h3><a name="bloatware" href="http://lewk.org/blog/2007/03/27/bloatware">bloatware</a></h3>
<p><p><div xmlns="http://www.w3.org/1999/xhtml"><p>
I'm usually not one for unproductive ranting, but I noticed this right after a fresh rawhide bootup...
</p>
<code><blockquote><pre>
[lmacken@tomservo ~]$ sudo ./<a href="http://www.pixelbeat.org/scripts/ps_mem.py">ps_mem.py</a>
 Private  +   Shared  =  RAM used       Program 
[...]
 17.7 MiB +   5.3 MiB =  23.0 MiB       setroubleshootd
 13.4 MiB +  11.2 MiB =  24.6 MiB       /usr/bin/sealer
 51.9 MiB +   2.9 MiB =  54.8 MiB       yum-updatesd
</pre></blockquote></code>
<p>
I'm sorry, but most of my machines don't have this kind of memory to spare.  Is Python to blame?  As far as interpreter overhead, maybe a little bit, or could it be the sheer simplicity and power of the language which is allowing it to be abused?
</p>
<p>
I'd be interested if anyone has any tips/tricks for slimming down Python daemons.<br/>I'd be thankful if someone did something about it.
</p></div></p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 23:25 | <a href="http://lewk.org/blog/2007/03/27/bloatware">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/2007/03/27/bloatware.html#comment_anchor">4 comments</a>
</p>
<h2>Wed, 02 May 2007</h2><h3><a name="fedora-security-liveusb-distro" href="http://lewk.org/blog/2007/05/02/fedora-security-liveusb-distro">Creating a Fedora Security Live USB key</a></h3>
<p><p><p>
Here is how to easily create a <a href="http://fedoraproject.org/wiki/LukeMacken/SecurityLiveCD">security-distribution</a> based on what will eventually be Fedora 7.  This requires that you be running FC7Test* or rawhide, as the livecd-tools are not currently available for FC6.
</p>
<p>
<b>Prepare the USB key</b><br/>
You may not need to do this for some USB sticks, but I had to remove all partitions on my <a href="http://www.sandisk.com/Products/Default.aspx?CatID=1168">Cruzer Micro</a> and format the whole thing as vfat to get it to boot.  Make sure to change <i>/dev/sdd</i> to your USB device.

</p><blockquote><code>
# mkfs.vfat -I /dev/sdd
</code></blockquote>

<b>Spin the livecd</b>
<blockquote><code><pre>
# yum install livecd-tools mercurial
$ hg clone http://hg.lewk.org/security-livecd
$ cd security-livecd
# ./spin-livecd.sh
</pre></code></blockquote>

<p>
<b>Copy the ISO to your USB stick</b>
</p><blockquote><code>
# livecd-iso-to-disk Fedora7-SecurityLiveCD.iso /dev/<usb disk=""/></code></blockquote>

<p>
Interested in helping make the Security LiveCD better?  See the <a href="http://fedoraproject.org/wiki/LukeMacken/SecurityLiveCD">SecurityLiveCD</a> wiki for more information.
</p></p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 06:24 | <a href="http://lewk.org/blog/2007/05/02/fedora-security-liveusb-distro">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/security" rel="tag">security</a>, <a href="http://lewk.org/blog/tags/livecd" rel="tag">livecd</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/2007/05/02/fedora-security-liveusb-distro.html#comment_anchor">43 comments</a>
</p>
<h2>Thu, 15 Feb 2007</h2><h3><a name="bodhi" href="http://lewk.org/blog/2007/01/30/bodhi">bodhi</a></h3>
<p><p><p>
So I've been spending the majority of my free time recently getting the new <a href="http://fedoraproject.org/wiki/Infrastructure/UpdatesSystem">Fedora Updates System</a> ready for Fedora 7, which is quickly approaching.  Since the code is going to exist in multiple instances for different projects (Fedora, RH, etc), and is already fairly modular and distro-independent, I decided it would be best to give the code a new name, and a new home:  <a href="https://hosted.fedoraproject.org/projects/bodhi"><b>Bodhi</b></a> emerged.  Being hardcore into <a href="http://en.wikipedia.org/wiki/Zen">Zen</a> recently, I feel like the name seems to fit the goals of the project nicely.
</p><blockquote><code><i>A Buddhist term for the wisdom by which one attains enlightenment. Bodhi is the opposite of ignorance, the insight into reality which destroys mental afflictions and brings peace.</i></code></blockquote>

<p>
Previously, the updates system code was in CVS, and bugs were to be filed in <a href="https://admin.fedoraproject.org/tickets">OTRS</a>, which ended up being extremely painful to work with.  After switching to our new shiny hosting setup, Bodhi is now using Mercurial for source control, and Trac for managing the project milestones, bugs, and documentation.  Overall, I've been extremely impressed with Mercurial and Trac so far.
</p>
<p>
Here are some screenshots of the current development version.  More screenshots can be found on the <a href="https://hosted.fedoraproject.org/projects/bodhi/wiki">bodhi wiki</a>.
<br/></p><center>
<table><tr><td><a href="https://hosted.fedoraproject.org/projects/bodhi/attachment/wiki/Screenshots/bodhi-new.png"><img src="http://lewk.org/img/bodhi-new.thumb.png"/></a>
</td><td>
<a href="https://hosted.fedoraproject.org/projects/bodhi/attachment/wiki/Screenshots/bodhi-show.png"><img src="http://lewk.org/img/bodhi-show.thumb.png"/></a></td>
</tr><tr><td>
<a href="https://hosted.fedoraproject.org/projects/bodhi/attachment/wiki/Screenshots/bodhi-list.png"><img src="http://lewk.org/img/bodhi-list.thumb.png"/></a>
</td>
<td>
<a href="https://hosted.fedoraproject.org/projects/bodhi/attachment/wiki/Screenshots/bodhi-push.png"><img src="http://lewk.org/img/bodhi-push.thumb.png"/></a></td></tr></table></center>

<p>
<b>So what's going to change for Fedora developers?</b>
Well, currently any [extras] developer can push out updates to their packages for any release with ease (<code>cvs commit &amp;&amp; make tag build</code>).  If your updated package fixes 4 bugs and 2 CVE's, the end user who is blindly installing this update has no idea.  Not only is there no differentiation between bugfix/enhancement/security updates, but none of them go through any sort of QA whatsoever.  This is what bodhi is aiming to change.
</p>
<p>
I've been designing this system completely independent of any Buildsystem (mainly because the <a href="http://fedoraproject.org/wiki/FedoraSummit/NewBuildSystem">unveiling of brew</a> is still churning slowly), so the process of building packages is going to remain the same (for now).  Once your packages is built, you will enter it into bodhi via a web form, or [<a href="https://hosted.fedoraproject.org/projects/bodhi/ticket/5">eventually</a>] a command-line tool (Ideally, I'd like to see the process of preparing/testing/releasing a package to be a single point of interaction; either completely from command-line or in web interface).  From here, your update will undergo various checks (and will eventually dispatch tests to the <a href="https://hosted.fedoraproject.org/projects/beaker">beaker</a> test lab).  If all goes well, your update will get signed and pushed, all referenced Bugzillas will be updated/closed, and an update notification mail will be sent to the appropriate list.
</p>
<p>
<b>updates-testing</b> is currently our "testing" repository that developers can choose to push their updates out to before going to 'final'.  This is not very appealing for devs, as it requires them to 'Move to final' after a certain amount of time when they feel it is necessary, and the system will nag them if they don't.  The updates-testing repo is not widely used, and gives testers no incentive or way to give feedback, other than filing a bug.  One of the <a href="https://hosted.fedoraproject.org/projects/bodhi/ticket/9">goals</a> of bodhi is to require all updates to go through the updates-testing process, and provide a simple interface for developers/testers/users to provide positive/negative feedback regarding an update, and also make it trivial to submit bugs about them as well (we threw around some ideas about making a reusable QA feedback widget for this at a recent <a href="http://fedoraproject.org/wiki/QA/Meetings/20070117">Fedora QA meeting</a>).  After a certain number of positive responses (or after a given length of time with no negative responses), an update will then able to make it's way to the stable updates repository.
</p>
<p>
<b>Hackery</b><br/>
I've written a ton of <a href="https://hosted.fedoraproject.org/projects/bodhi/browser">code</a> so far, but there is still much work to be done to accomplish all of the goals mentioned above.  I layed out a few <a href="https://hosted.fedoraproject.org/projects/bodhi/roadmap">milestones</a> for bodhi, 1.0 being the minimal functionality needed for the release of Fedora 7.  I also added a 1.1 milestone for features that aren't crucial for minimal functionality, but are definitely important, and also a wishlist milestone for features that might be nice to have someday (metrics, rss feeds, etc).
</p>
<p>
With <a href="http://barcamp.org/FudconBoston2007">FUDCon</a> and the <a href="http://fedoraproject.org/wiki/Infrastructure/HackFest2007">Fedora Infrastructure HackFest</a> coming up, I'm encouraging anyone interested to dive in help out in any way they want.  If you can't make it out to Boston, just hop on IRC.  If you would like to see a feature in bodhi, feel free to add a ticket to any of the milestones.
</p>
<p>
This system holds much potential for revolutionizing the way Fedora releases evolve, and how developers and testers interact with it.  Since this is going to be utilized by all package maintainers, it's important that the system is molded to fit the needs of the developers and testers; so if you have any suggestions/improvements/fixes, don't hesitate:  <b>Contribute</b>.
</p></p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 03:12 | <a href="http://lewk.org/blog/2007/01/30/bodhi">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/Fedora" rel="tag">Fedora</a>, <a href="http://lewk.org/blog/tags/bodhi" rel="tag">bodhi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/2007/01/30/bodhi.html#comment_anchor">13 comments</a>
</p>
<h2>Wed, 13 Sep 2006</h2><h3><a name="python_list_generation_optimization" href="http://lewk.org/blog/python_list_generation_optimization">python list generation optimization</a></h3>
<p><p>
Menno Smits recently made some cleanups to <a href="http://linux.duke.edu/projects/yum">yum</a>'s <a href="http://devel.linux.duke.edu/cgi-bin/viewcvs.cgi/yum/yum/rpmsack.py?view=markup">RPMDBPackageSack</a> class.  In a mail to the yum-devel list, Menno <a href="https://lists.dulug.duke.edu/pipermail/yum-devel/2006-September/002566.html">points out</a> that python's list comprehension turns out to be 20% faster than using a <i>for</i> loop while appending items to a list.
</p>
<p>
A simple <a href="https://lists.dulug.duke.edu/pipermail/yum-devel/attachments/20060910/abc0cb8e/listcomp-speed.py">benchmark script</a> shows the speed increase claim to be true.  Menno's script test two different methods, the first being the standard for/list.append() loop.

<code><blockquote><pre>
l1 = []
for x in xrange(LOOPS):
    if x % 2 == 0:
        l1.append(x)
</pre></blockquote></code>
</p>
<p>
The second being list comprehension:

<code><blockquote><pre>
l2 = [x for x in xrange(LOOPS) if x % 2 == 0]
</pre></blockquote></code>
</p>
<p>
Both methods utilize python's <i>xrange</i>, which is a generator object written in pure C, and is faster than the plain old <i>range</i>.  Out of curiosity, I went ahead and modified this script to test a few more methods of generating the same list as above.
</p>
<p>
Using a for loop, and an append function reference:

<code><blockquote><pre>
l3 = []
append = l3.append
for x in xrange(LOOPS):
    if x % 2 == 0:
        append(x)
</pre></blockquote></code>
</p>
<p>
Using the filter/lambda approach:

<code><blockquote><pre>
l4 = filter(lambda x: x % 2 == 0, xrange(LOOPS))
</pre></blockquote></code>
</p>
<p>
Using filter and a function reference to the lambda:

<code><blockquote><pre>
x = lambda x: x % 2 == 0
l5 = filter(x, xrange(LOOPS))
</pre></blockquote></code>
</p>
<p>
The results were actually quite surprising.  Using a <a href="http://www.csh.rit.edu/~lewk/code/listcomp-speed.py">modified version</a> of Menno's script, I came up with these results after 10 iterations.  The percentages are compared to the standard for loop/list.append() method.

<blockquote><pre><h3>
    <b>for loop/append function reference:</b>  23% faster
    <b>list comprehension:</b>  36% faster
    <b>filter/lambda:</b>  40% faster
    <b>filter/reference to lambda:</b>  57% faster
</pre></blockquote></h3>

As it turns out, using the filter/lambda approach seems to shave off <b>~57%</b> of the usual overhead from the for/list.append() approach.
</p>

<p>
Although extremely powerful, filter/map/lambdas tend to compact code, thus making it more difficult to read/maintain.  This reason alone may cause people to completely stay away from them all together.
</p>
<p>
Avoiding powerful language features because of 'readability' can be a mistake in my opinion.  Any competent programmer should have the ability to make their code understandable to anyone -- yes, it may actually require writing comments.  Even the most complex regular expressions can be written so they can be understood easily (see <a href="http://www.onlamp.com/pub/a/onlamp/2003/08/21/regexp.html">Five Habits for Successful Regular Expressions</a>).
</p>
<p>
I still tend to agree with Donald Knuth's statement <i>"Premature optimization is the root of all evil"</i>.  Jumping right into a complex algorithm with maps/filters/lambdas/etc may not be the best idea, and will most likely make it a nightmare to debug down the road.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 19:11 | <a href="http://lewk.org/blog/python_list_generation_optimization">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/yum" rel="tag">yum</a> </span> | <a href="http://lewk.org/blog/python_list_generation_optimization.html#comment_anchor">7 comments</a>
</p>
<h2>Tue, 15 Aug 2006</h2><h3><a name="pup_enhancements" href="http://lewk.org/blog/pup_enhancements">Teaching an old pup some new tricks</a></h3>
<p><p>
    Thanks to the <a href="http://notweak.livejournal.com/145311.html">previously mentioned</a> core update metadata enhancements that I've been working on lately, we are now able to do some pretty neat stuff with our package updating tools.  So last week I cranked out a bunch of code for Fedora's package updater (pup) and it's notification applet (puplet) to utilize this new enhanced metadata and actually provide the user with some useful information.
</p>

<center>
    <a href="http://people.redhat.com/lmacken/img/puplet.png"><img src="http://people.redhat.com/lmacken/img/puplet-small.png" border=0></a>
</center>

<p>
    In order to be able to attach the notification to a status icon, I had to patch libnotify's python bindings to utilize libnotify's notify_notification_attach_to_status_icon function (<a href="http://trac.galago-project.org/attachment/ticket/82/notify-python-0.1.0-attach_to_status_icon.patch">notify-python-0.1.0-attach_to_status_icon.patch</a>).  While poking around with the notify-python code, I tripped over a bug in libnotify that needed to be patched as well (<a href="http://trac.galago-project.org/attachment/ticket/81/libnotify-0.4.2-status-icon.patch">libnotify-0.4.2-status-icon.patch</a>).  I hope to kick off patched versions of libnotify and notify-python for rawhide at some point in the near future, and apply my puplet patch as well (<a href="http://people.redhat.com/lmacken/patches/puplet-bubbly.patch">puplet-bubbly.patch</a>).
</p>

<center>
<a href="http://people.redhat.com/lmacken/img/pup.png"><img src="http://people.redhat.com/lmacken/img/pup-small.png" border=0></a>
</center>

<p>
    For pup, I whipped up a hacked out GtkTextView to display the new update metadata, when it's available (<a href="http://people.redhat.com/lmacken/patches/pup-enhanced-metadata.patch">pup-enhanced-metadata.patch</a>) (the look and feel will most likely change).  Due to the current core/extras dichomoty, this update metadata is only generated for core updates until we get a common core/extras update system in place (I've been working on porting the current update system for core over to <a href="http://turbogears.org">TurboGears</a>, and make it encompass core/extras/legacy updates).  Hopefully by FC7 we will have bridged the core/extras gap completely (optimism++).
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 19:10 | <a href="http://lewk.org/blog/pup_enhancements">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/fedora" rel="tag">fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/pup_enhancements.html#comment_anchor">0 comments</a>
</p>
<h2>Mon, 14 Aug 2006</h2><h3><a name="hdaps+atspi-hotness" href="http://lewk.org/blog/hdaps%2Batspi-hotness">hdaps + atspi hotness</a></h3>
<p><p>
I started playing around with the <a href="http://hdaps.sourceforge.net">hdaps</a> kernel module on my Thinkpad T43 the other day and wrote some <a href="http://hg.lewk.org/hdaps/raw-file/fdf850f620ce/hdaps.py">code</a> to utilize some of the <a href="http://www.analog.com/en/prod/0,2877,ADXL320,00.html">accelerometer</a> data.  With the help of <a href="http://juozasg.livejournal.com/">Juozas</a> and <a href="http://en.wikipedia.org/wiki/AT-SPI">AT-SPI</a>, I wrote a little bit of python that allows you to control your mouse based on your laptops position.  
</p>
<code><blockquote><pre>
#!/usr/bin/env python

import sys, time, math, atspi

SYSFS_POSITION_FILE = "/sys/devices/platform/hdaps/position"

def main():
    theta = 0
    rho = 0
    ev = atspi.EventGenerator()

    while True:
        fd = open(SYSFS_POSITION_FILE, 'r')
        v = fd.readline().strip()
        theta = int(v[1:4])
        rho = int(v[5:8])
        rads = ((theta - 545)/300.0) * math.pi
        ax = math.sin(rads)
        rads = ((rho - 475)/300.0) * math.pi
        ay = math.sin(rads)
        ev.relativeMotion(ax * 10, ay * 10)
        fd.close()
        time.sleep( 0.01 )

if __name__ == '__main__':
    main()
</pre></blockquote></code>
<p>
Extremely useless, I know -- but only in it's current state.  I'm sure some cool desktop enhancements can be thought up using hdaps.  What if you wanted to un-clutter your desktop, so you tilt or laptop to the side and all of your windows slide over to the next virtual desktop?  Sounds pretty badass to me.
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 18:50 | <a href="http://lewk.org/blog/hdaps%2Batspi-hotness">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/hdaps%2Batspi-hotness.html#comment_anchor">0 comments</a>
</p>
<h3><a name="metadata-hotness" href="http://lewk.org/blog/metadata-hotness">fedora update metadata & fastestmirror changes</a></h3>
<p><p>
<b>Fedora update metadata</b><br>
I just committed my <a href="http://linux.duke.edu/projects/metadata/">createrepo</a> <a href="http://people.redhat.com/lmacken/metadata/createrepo-updatemd.patch">update metadata acquisition patch</a> to HEAD which adds support for the -U (--update-info-location) flag.  This feature is going to give mirrors the ability to pull in update metadata [example: <a href="http://lewk.org/httpd-2.0.54-10.3.xml">httpd-2.0.54-10.3.xml</a>] for each corresponding package in the repo.  This will allow tools such as pup to know exactly why an update was released, and present the user with all of the details.

The next step is to setup the infrastructure for the metadata server.  More details to come later.

<br><br>
<b>fastestmirror</b><br>
I gave fastestmirror some love recently and added support for a 'maxhostfileage' option, which lets you specify how many days before it should update the cached mirror speeds file again.
<p>
As the GeoIP package was working it's way through the Fedora Extras review process, Warren <a href="https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=180068#c7">noticed</a> that this package could be used to do aid in smarter mirror selection.  So once the python bindings hit extras, I'm going to start to play around with fastestmirror + GeoIP integration.  Once I get some free time I will probably also look into adding multiple mirror-selection algorithms into fastestmirror: <a href="http://www.maxmind.com/">GeoIP</a>, <a href="https://lists.dulug.duke.edu/pipermail/yum-devel/2005-December/001715.html">bestmirror (repomd.xml validation)</a>, and the original socket-fu technique.
</p>
<p>
I finally found a home for fastestmirror, in the yum-utils cvs repo.  So if you are interested in playing around with the latest version, look no further:
</p>

<a href="http://devel.linux.duke.edu/cgi-bin/viewcvs.cgi/*checkout*/yum-utils/plugins/fastestmirror/fastestmirror.py?content-type=text%2Fplain">http://devel.linux.duke.edu/cgi-bin/viewcvs.cgi/*checkout*/yum-utils/plugins/fastestmirror/fastestmirror.py?content-type=text%2Fplain</a>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 18:50 | <a href="http://lewk.org/blog/metadata-hotness">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/fedora" rel="tag">fedora</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a>, <a href="http://lewk.org/blog/tags/fastestmirror" rel="tag">fastestmirror</a> </span> | <a href="http://lewk.org/blog/metadata-hotness.html#comment_anchor">0 comments</a>
</p>
<h3><a name="firefox-aping" href="http://lewk.org/blog/firefox-aping">firefox's new &lt;a ping&gt; vuln^H^H^H^Hfeature</a></h3>
<p><p>
As seen recently on <a href="http://yro.slashdot.org/article.pl?sid=06/01/18/1427212">slashdot</a>, one of the latest trunk builds of Firefox contains support for the <a href="http://weblogs.mozillazine.org/darin/archives/009594.html"><i>ping</i> attribute</a> on anchor and area tags (<a href="http://whatwg.org/specs/web-apps/current-work/#ping">spec</a>).  Ideally, this feature will allow websites to contain links such as:
<code><blockquote><pre>
&lt;a href="http://foo" ping="http://bar"&gt;biz&lt;/a&gt;
</pre></blockquote></code>
After looking into it a bit more, I found a way to trigger a user's Firefox to SYN flood any given host upon clicking a link.
<code><blockquote><pre>
&lt;script language="JavaScript"&gt;
    document.write('&lt;a href="http://foobar" ping="');
    for (var i = 0; i &lt; 1000; i++)
        document.write('URI ');
    document.write('"&gt;Weeee!&lt;/a&gt;');
&lt;/script&gt;
</pre></blockquote></code>
</p>
When clicked, the link will cause the client to kick 1000 SYN packets over to the specified ping URI without hesitation.  This feature is present in Firefox &gt; 1.6a1, and is enabled by default.  You can disable this in <b>about:config</b> by flipping off the <b>browser.send_pings</b> boolean.
I filed a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=324599">bug</a> upstream about this issue, and supplied a patch to de-dupe the ping URI list (which might actually not be the best solution to this problem (limiting the number of ping URI's, or kill the pings when the page is left, or the stop button is pressed might be better solutions), but it is still under discussion).
</pre></blockquote></code>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 18:49 | <a href="http://lewk.org/blog/firefox-aping">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/security" rel="tag">security</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/firefox-aping.html#comment_anchor">1 comments</a>
</p>
<h3><a name="irssi-notify" href="http://lewk.org/blog/2006/05/19/irssi-notify">irssi notification script</a></h3>
<p><p>
Having finals to deal with next week, I've been trying to avoid things that tend to waste huge amounts of time, such as email and IRC.  So I wrote a little irssi script to pop up notifcation bubbles when people talk to you.
</p>

<center> <img src="/img/irssi-notify.png" /> </center>

<h3>*Update (20090916)*</h3>
Years later, and I can't really vouch for this code anymore, as I don't use
it.  I recommend using it at your own risk, as there could potentially be
security implications, since it is unmaintained.  However, this script was the
catalyst for a variety of improved implementations, such as <a
href="http://code.google.com/p/irssi-libnotify/">irssi-libnotify</a>, <a
href="http://thorstenl.blogspot.com/2007/01/thls-irssi-notification-script.html">fnotify</a>, <a href="http://wahjava.wordpress.com/2008/06/15/irssi-notifications/">irssi-notify</a>, etc.

<p>
<blockquote>
<a href="http://hg.lewk.org/irssi-notify/raw-file/1383b9da7340/notify.pl">notify.pl</a>
<code>
<pre>
<font color="#0000ff">##</font>
<font color="#0000ff">## Put me in ~/.irssi/scripts, and then execute the following in irssi:</font>
<font color="#0000ff">##</font>
<font color="#0000ff">##       /load perl</font>
<font color="#0000ff">##       /script load notify</font>
<font color="#0000ff">##</font>

<font color="#a52a2a"><b>use strict</b></font>;
<font color="#a52a2a"><b>use </b></font>Irssi;
<font color="#a52a2a"><b>use vars</b></font> <font color="#ff00ff">qw(</font><font color="#ff00ff">$VERSION %IRSSI</font><font color="#ff00ff">)</font>;

<font color="#008b8b">$VERSION</font> = <font color="#ff00ff">&quot;</font><font color="#ff00ff">0.01</font><font color="#ff00ff">&quot;</font>;
<font color="#008b8b">%IRSSI</font> = (
    <font color="#ff00ff">authors     </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">Luke Macken</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">contact     </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">lewk@csh.rit.edu</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">name        </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">notify.pl</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">description </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">TODO</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">license     </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">GNU General Public License</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">url         </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff"><a href="http://www.csh.rit.edu/~lewk/code/irssi-notify">http://www.csh.rit.edu/~lewk/code/irssi-notify</a></font><font color="#ff00ff">'</font>,
);

<font color="#a52a2a"><b>sub</b></font><font color="#008b8b"> </font><font color="#008b8b">notify</font><font color="#008b8b"> </font>{
    <font color="#a52a2a"><b>my</b></font> (<font color="#008b8b">$dest</font>, <font color="#008b8b">$text</font>, <font color="#008b8b">$stripped</font>) = <font color="#008b8b">@_</font>;
    <font color="#a52a2a"><b>my</b></font> <font color="#008b8b">$server</font> = <font color="#008b8b">$dest</font>-&gt;{server};

    <font color="#a52a2a"><b>return</b></font> <font color="#a52a2a"><b>if</b></font> (!<font color="#008b8b">$server</font> || !(<font color="#008b8b">$dest</font>-&gt;{level} &amp; MSGLEVEL_HILIGHT));

    <font color="#008b8b">$stripped</font> =~ <font color="#a52a2a"><b>s/</b></font><font color="#6a5acd">[^a-zA-Z0-9 .,!?\@:\>]</font><font color="#a52a2a"><b>//g</b></font>;
    <font color="#a52a2a"><b>system</b></font>(<font color="#ff00ff">&quot;</font><font color="#ff00ff">notify-send -i gtk-dialog-info -t 5000 '</font><font color="#008b8b">$dest</font><font color="#ff00ff">-&gt;{target}' '</font><font color="#008b8b">$stripped</font><font color="#ff00ff">'</font><font color="#ff00ff">&quot;</font>);
}

Irssi::signal_add(<font color="#ff00ff">'</font><font color="#ff00ff">print text</font><font color="#ff00ff">'</font>, <font color="#ff00ff">'</font><font color="#ff00ff">notify</font><font color="#ff00ff">'</font>);
</pre>
</code>
</blockquote>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 06:43 | <a href="http://lewk.org/blog/2006/05/19/irssi-notify">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/irssi" rel="tag">irssi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/2006/05/19/irssi-notify.html#comment_anchor">0 comments</a>
</p>
<h3><a name="irssi-notify" href="http://lewk.org/blog/irssi-notify">irssi notification script</a></h3>
<p><p>
Having finals to deal with next week, I've been trying to avoid things that tend to waste huge amounts of time, such as email and IRC.  So I wrote a little irssi script to pop up notifcation bubbles when people talk to you.
</p>

<center> <img src="/img/irssi-notify.png" /> </center>

<h3>*Update (20090916)*</h3>
Years later, and I can't really vouch for this code anymore, as I don't use
it.  I recommend using it at your own risk, as there could potentially be
security implications, since it is unmaintained.  However, this script was the
catalyst for a variety of improved implementations, such as <a
href="http://code.google.com/p/irssi-libnotify/">irssi-libnotify</a>, <a
href="http://thorstenl.blogspot.com/2007/01/thls-irssi-notification-script.html">fnotify</a>, <a href="http://wahjava.wordpress.com/2008/06/15/irssi-notifications/">irssi-notify</a>, etc.

<p>
<blockquote>
<a href="http://hg.lewk.org/irssi-notify/raw-file/1383b9da7340/notify.pl">notify.pl</a>
<code>
<pre>
<font color="#0000ff">##</font>
<font color="#0000ff">## Put me in ~/.irssi/scripts, and then execute the following in irssi:</font>
<font color="#0000ff">##</font>
<font color="#0000ff">##       /load perl</font>
<font color="#0000ff">##       /script load notify</font>
<font color="#0000ff">##</font>

<font color="#a52a2a"><b>use strict</b></font>;
<font color="#a52a2a"><b>use </b></font>Irssi;
<font color="#a52a2a"><b>use vars</b></font> <font color="#ff00ff">qw(</font><font color="#ff00ff">$VERSION %IRSSI</font><font color="#ff00ff">)</font>;

<font color="#008b8b">$VERSION</font> = <font color="#ff00ff">&quot;</font><font color="#ff00ff">0.01</font><font color="#ff00ff">&quot;</font>;
<font color="#008b8b">%IRSSI</font> = (
    <font color="#ff00ff">authors     </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">Luke Macken</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">contact     </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">lewk@csh.rit.edu</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">name        </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">notify.pl</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">description </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">TODO</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">license     </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff">GNU General Public License</font><font color="#ff00ff">'</font>,
    <font color="#ff00ff">url         </font>=&gt; <font color="#ff00ff">'</font><font color="#ff00ff"><a href="http://www.csh.rit.edu/~lewk/code/irssi-notify">http://www.csh.rit.edu/~lewk/code/irssi-notify</a></font><font color="#ff00ff">'</font>,
);

<font color="#a52a2a"><b>sub</b></font><font color="#008b8b"> </font><font color="#008b8b">notify</font><font color="#008b8b"> </font>{
    <font color="#a52a2a"><b>my</b></font> (<font color="#008b8b">$dest</font>, <font color="#008b8b">$text</font>, <font color="#008b8b">$stripped</font>) = <font color="#008b8b">@_</font>;
    <font color="#a52a2a"><b>my</b></font> <font color="#008b8b">$server</font> = <font color="#008b8b">$dest</font>-&gt;{server};

    <font color="#a52a2a"><b>return</b></font> <font color="#a52a2a"><b>if</b></font> (!<font color="#008b8b">$server</font> || !(<font color="#008b8b">$dest</font>-&gt;{level} &amp; MSGLEVEL_HILIGHT));

    <font color="#008b8b">$stripped</font> =~ <font color="#a52a2a"><b>s/</b></font><font color="#6a5acd">[^a-zA-Z0-9 .,!?\@:\>]</font><font color="#a52a2a"><b>//g</b></font>;
    <font color="#a52a2a"><b>system</b></font>(<font color="#ff00ff">&quot;</font><font color="#ff00ff">notify-send -i gtk-dialog-info -t 5000 '</font><font color="#008b8b">$dest</font><font color="#ff00ff">-&gt;{target}' '</font><font color="#008b8b">$stripped</font><font color="#ff00ff">'</font><font color="#ff00ff">&quot;</font>);
}

Irssi::signal_add(<font color="#ff00ff">'</font><font color="#ff00ff">print text</font><font color="#ff00ff">'</font>, <font color="#ff00ff">'</font><font color="#ff00ff">notify</font><font color="#ff00ff">'</font>);
</pre>
</code>
</blockquote>
</p>
</p>
<br/>
<p style="font-weight: bold" class="small">
posted at: 06:43 | <a href="http://lewk.org/blog/irssi-notify">link</a> | <span class="tags">Tags:  <a href="http://lewk.org/blog/tags/irssi" rel="tag">irssi</a>, <a href="http://lewk.org/blog/tags/code" rel="tag">code</a> </span> | <a href="http://lewk.org/blog/irssi-notify.html#comment_anchor">5 comments</a>
</p>
</div>

<div id="sidebar">

<!-- <h2>Tag Cloud</h2>
<h2></h2>
-->
<br/>
<center>
<div id='tagcloud'><a href='http://lewk.org/blog/tags/jQuery' class='smallTag' alt='There are 2 entries tagged jQuery'>jQuery</a>
<a href='http://lewk.org/blog/tags/Red Hat' class='smallTag' alt='There are 2 entries tagged Red Hat'>Red Hat</a>
<a href='http://lewk.org/blog/tags/code' class='mostHugeTag' alt='There are 50 entries tagged code'>code</a>
<a href='http://lewk.org/blog/tags/Fedora' class='hugestTag' alt='There are 49 entries tagged Fedora'>Fedora</a>
<a href='http://lewk.org/blog/tags/TurboGears' class='mediumTag' alt='There are 11 entries tagged TurboGears'>TurboGears</a>
<a href='http://lewk.org/blog/tags/boston' class='smallTag' alt='There are 3 entries tagged boston'>boston</a>
<a href='http://lewk.org/blog/tags/random' class='smallestTag' alt='There are 1 entries tagged random'>random</a>
<a href='http://lewk.org/blog/tags/openbox' class='smallTag' alt='There are 2 entries tagged openbox'>openbox</a>
<a href='http://lewk.org/blog/tags/irssi' class='smallTag' alt='There are 2 entries tagged irssi'>irssi</a>
<a href='http://lewk.org/blog/tags/vim' class='smallTag' alt='There are 3 entries tagged vim'>vim</a>
<a href='http://lewk.org/blog/tags/hardware' class='smallTag' alt='There are 3 entries tagged hardware'>hardware</a>
<a href='http://lewk.org/blog/tags/ToscaWidgets' class='smallestTag' alt='There are 1 entries tagged ToscaWidgets'>ToscaWidgets</a>
<a href='http://lewk.org/blog/tags/college' class='smallestTag' alt='There are 1 entries tagged college'>college</a>
<a href='http://lewk.org/blog/tags/compression' class='smallestTag' alt='There are 1 entries tagged compression'>compression</a>
<a href='http://lewk.org/blog/tags/mutt' class='smallTag' alt='There are 2 entries tagged mutt'>mutt</a>
<a href='http://lewk.org/blog/tags/linux' class='smallestTag' alt='There are 1 entries tagged linux'>linux</a>
<a href='http://lewk.org/blog/tags/tea' class='smallestTag' alt='There are 1 entries tagged tea'>tea</a>
<a href='http://lewk.org/blog/tags/OLPC' class='smallestTag' alt='There are 1 entries tagged OLPC'>OLPC</a>
<a href='http://lewk.org/blog/tags/l00t' class='smallestTag' alt='There are 1 entries tagged l00t'>l00t</a>
<a href='http://lewk.org/blog/tags/web' class='smallestTag' alt='There are 1 entries tagged web'>web</a>
<a href='http://lewk.org/blog/tags/ code' class='smallestTag' alt='There are 1 entries tagged  code'> code</a>
<a href='http://lewk.org/blog/tags/statistics' class='smallestTag' alt='There are 1 entries tagged statistics'>statistics</a>
<a href='http://lewk.org/blog/tags/open source' class='smallestTag' alt='There are 1 entries tagged open source'>open source</a>
<a href='http://lewk.org/blog/tags/fedora' class='smallTag' alt='There are 2 entries tagged fedora'>fedora</a>
<a href='http://lewk.org/blog/tags/ TurboGears' class='smallTag' alt='There are 2 entries tagged  TurboGears'> TurboGears</a>
<a href='http://lewk.org/blog/tags/Python' class='bigTag' alt='There are 21 entries tagged Python'>Python</a>
<a href='http://lewk.org/blog/tags/encryption' class='smallestTag' alt='There are 1 entries tagged encryption'>encryption</a>
<a href='http://lewk.org/blog/tags/RIT' class='smallTag' alt='There are 6 entries tagged RIT'>RIT</a>
<a href='http://lewk.org/blog/tags/ presentations' class='smallestTag' alt='There are 1 entries tagged  presentations'> presentations</a>
<a href='http://lewk.org/blog/tags/fastestmirror' class='smallestTag' alt='There are 1 entries tagged fastestmirror'>fastestmirror</a>
<a href='http://lewk.org/blog/tags/business' class='smallestTag' alt='There are 1 entries tagged business'>business</a>
<a href='http://lewk.org/blog/tags/music' class='smallTag' alt='There are 6 entries tagged music'>music</a>
<a href='http://lewk.org/blog/tags/TurboFlot' class='smallestTag' alt='There are 1 entries tagged TurboFlot'>TurboFlot</a>
<a href='http://lewk.org/blog/tags/hilarious' class='smallestTag' alt='There are 1 entries tagged hilarious'>hilarious</a>
<a href='http://lewk.org/blog/tags/yum' class='smallestTag' alt='There are 1 entries tagged yum'>yum</a>
<a href='http://lewk.org/blog/tags/halloween' class='smallestTag' alt='There are 1 entries tagged halloween'>halloween</a>
<a href='http://lewk.org/blog/tags/linji' class='smallestTag' alt='There are 1 entries tagged linji'>linji</a>
<a href='http://lewk.org/blog/tags/email' class='smallestTag' alt='There are 1 entries tagged email'>email</a>
<a href='http://lewk.org/blog/tags/InfoVis' class='smallestTag' alt='There are 1 entries tagged InfoVis'>InfoVis</a>
<a href='http://lewk.org/blog/tags/life' class='smallTag' alt='There are 5 entries tagged life'>life</a>
<a href='http://lewk.org/blog/tags/SXSW' class='smallestTag' alt='There are 1 entries tagged SXSW'>SXSW</a>
<a href='http://lewk.org/blog/tags/func' class='smallestTag' alt='There are 1 entries tagged func'>func</a>
<a href='http://lewk.org/blog/tags/ web' class='smallestTag' alt='There are 1 entries tagged  web'> web</a>
<a href='http://lewk.org/blog/tags/LiveUSB' class='smallTag' alt='There are 5 entries tagged LiveUSB'>LiveUSB</a>
<a href='http://lewk.org/blog/tags/Windows' class='smallestTag' alt='There are 1 entries tagged Windows'>Windows</a>
<a href='http://lewk.org/blog/tags/hackery' class='smallTag' alt='There are 2 entries tagged hackery'>hackery</a>
<a href='http://lewk.org/blog/tags/collaboration' class='smallestTag' alt='There are 1 entries tagged collaboration'>collaboration</a>
<a href='http://lewk.org/blog/tags/Linux' class='smallestTag' alt='There are 1 entries tagged Linux'>Linux</a>
<a href='http://lewk.org/blog/tags/TeachingOpenSource' class='smallestTag' alt='There are 1 entries tagged TeachingOpenSource'>TeachingOpenSource</a>
<a href='http://lewk.org/blog/tags/gobby' class='smallTag' alt='There are 2 entries tagged gobby'>gobby</a>
<a href='http://lewk.org/blog/tags/holidays' class='smallestTag' alt='There are 1 entries tagged holidays'>holidays</a>
<a href='http://lewk.org/blog/tags/metrics' class='smallTag' alt='There are 8 entries tagged metrics'>metrics</a>
<a href='http://lewk.org/blog/tags/virus' class='smallestTag' alt='There are 1 entries tagged virus'>virus</a>
<a href='http://lewk.org/blog/tags/bodhi' class='mediumTag' alt='There are 17 entries tagged bodhi'>bodhi</a>
<a href='http://lewk.org/blog/tags/Yum' class='smallestTag' alt='There are 1 entries tagged Yum'>Yum</a>
<a href='http://lewk.org/blog/tags/FUDCon' class='smallTag' alt='There are 2 entries tagged FUDCon'>FUDCon</a>
<a href='http://lewk.org/blog/tags/wtf' class='smallestTag' alt='There are 1 entries tagged wtf'>wtf</a>
<a href='http://lewk.org/blog/tags/thinkpad' class='smallestTag' alt='There are 1 entries tagged thinkpad'>thinkpad</a>
<a href='http://lewk.org/blog/tags/humor' class='smallestTag' alt='There are 1 entries tagged humor'>humor</a>
<a href='http://lewk.org/blog/tags/badass' class='smallestTag' alt='There are 1 entries tagged badass'>badass</a>
<a href='http://lewk.org/blog/tags/hacks' class='smallTag' alt='There are 4 entries tagged hacks'>hacks</a>
<a href='http://lewk.org/blog/tags/honeypot' class='smallestTag' alt='There are 1 entries tagged honeypot'>honeypot</a>
<a href='http://lewk.org/blog/tags/Moksha' class='smallestTag' alt='There are 1 entries tagged Moksha'>Moksha</a>
<a href='http://lewk.org/blog/tags/liveusb-creator' class='smallTag' alt='There are 4 entries tagged liveusb-creator'>liveusb-creator</a>
<a href='http://lewk.org/blog/tags/filesystems' class='smallestTag' alt='There are 1 entries tagged filesystems'>filesystems</a>
<a href='http://lewk.org/blog/tags/Pyramid' class='smallestTag' alt='There are 1 entries tagged Pyramid'>Pyramid</a>
<a href='http://lewk.org/blog/tags/mugshot' class='smallestTag' alt='There are 1 entries tagged mugshot'>mugshot</a>
<a href='http://lewk.org/blog/tags/windows' class='smallestTag' alt='There are 1 entries tagged windows'>windows</a>
<a href='http://lewk.org/blog/tags/science' class='smallestTag' alt='There are 1 entries tagged science'>science</a>
<a href='http://lewk.org/blog/tags/fedmsg' class='smallestTag' alt='There are 1 entries tagged fedmsg'>fedmsg</a>
<a href='http://lewk.org/blog/tags/spam' class='smallestTag' alt='There are 1 entries tagged spam'>spam</a>
<a href='http://lewk.org/blog/tags/hosting' class='smallestTag' alt='There are 1 entries tagged hosting'>hosting</a>
<a href='http://lewk.org/blog/tags/presentations' class='smallTag' alt='There are 2 entries tagged presentations'>presentations</a>
<a href='http://lewk.org/blog/tags/OpenShift' class='smallestTag' alt='There are 1 entries tagged OpenShift'>OpenShift</a>
<a href='http://lewk.org/blog/tags/optimization' class='smallestTag' alt='There are 1 entries tagged optimization'>optimization</a>
<a href='http://lewk.org/blog/tags/ FUDCon' class='smallestTag' alt='There are 1 entries tagged  FUDCon'> FUDCon</a>
<a href='http://lewk.org/blog/tags/nose' class='smallTag' alt='There are 2 entries tagged nose'>nose</a>
<a href='http://lewk.org/blog/tags/benchmarks' class='smallTag' alt='There are 3 entries tagged benchmarks'>benchmarks</a>
<a href='http://lewk.org/blog/tags/livecd' class='smallTag' alt='There are 3 entries tagged livecd'>livecd</a>
<a href='http://lewk.org/blog/tags/security' class='smallTag' alt='There are 6 entries tagged security'>security</a>
<a href='http://lewk.org/blog/tags/ badass' class='smallestTag' alt='There are 1 entries tagged  badass'> badass</a>
<a href='http://lewk.org/blog/tags/concerts' class='smallestTag' alt='There are 1 entries tagged concerts'>concerts</a>
<a href='http://lewk.org/blog/tags/Cloud' class='smallestTag' alt='There are 1 entries tagged Cloud'>Cloud</a>
<a href='http://lewk.org/blog/tags/fishing' class='smallestTag' alt='There are 1 entries tagged fishing'>fishing</a>
</div>
</center>
<br/>
<!--<h2>Pages</h2>
-->

<script src="http://widgets.twimg.com/j/2/widget.js"></script>
<script>
new TWTR.Widget({
  version: 2,
  type: 'profile',
  rpp: 3,
  interval: 6000,
  width: 'auto',
  height: 300,
  theme: {
    shell: {
      background: '#333333',
      color: '#ffffff'
    },
    tweets: {
      background: '#000000',
      color: '#ffffff',
      links: '#4aed05'
    }
  },
  features: {
    scrollbar: false,
    loop: false,
    live: false,
    hashtags: true,
    timestamp: true,
    avatars: false,
    behavior: 'all'
  }
}).render().setUser('lmacken').start();
</script>
<br/>

<h2>Linkage</h2>
<ul>
<li><a href="http://twitter.com/lmacken">Twitter</a></li>
<li><a href="https://github.com/lmacken">GitHub</a></li>
<li><a href="http://soundcloud.com/lewk">SoundCloud</a></li>
<li><a href="http://instagram.com/lmacken">Instagram</a></li>
<li> <a href="http://www.linkedin.com/in/lukemacken">LinkedIn</a></li>
<li><a href="http://pinboard.in/u:lewk">Pinboard</a></li>
<li><a href="http://fedoraproject.org/wiki/LukeMacken">Fedora Profile</a></li>
<li><a href="http://facebook.com/luke.macken">Facebook</a></li>
<li><a href="http://www.freesound.org/people/lewk">Freesound</a></li>
<li> <a href="http://coderwall.com/lmacken">coderwall</a></li>
<li><a href="http://alpha.libre.fm/user/lewk">libre.fm</a> || <a href="http://last.fm/user/lewk">last.fm</a></li>
<li><a href="http://lewk.org/blog">Blog</a>
<ul>
    <li><a href="http://lewk.org/blog/index.rss">RSS <img src="http://lewk.org/feedicon.png"/></a></li>
<!-- <li><a href="http://lewk.org/blog/index.rss20">RSS 2.0</a></li> -->
<li><a href="http://lewk.org/blog/index.atom">Atom <img src="http://lewk.org/feedicon.png"/></a></li>
</ul>
</li>
</ul>

<h2>Projects</h2>
<center>
<script id="fedora-banner" type="text/javascript" src="http://fedoraproject.org/static/js/release-counter-ext.js?lang=en"></script>
<br/>
<a href="https://apps.fedoraproject.org/packages"><img src="http://lmacken.fedorapeople.org/img/fedora-community.png" /></a>
<br/>
<a href="https://fedorahosted.org/liveusb-creator/"><img src="https://fedorahosted.org/liveusb-creator/attachment/wiki/img/liveusb-creator-logo.png?format=raw"/></a>
<br/>
<a href="https://fedorahosted.org/bodhi/"><img src="https://fedorahosted.org/bodhi/attachment/wiki/Screenshots/bodhi.png?format=raw" width="200px" /></a>
<br/>
<a href="http://moksha.fedorahosted.org"><img src="http://lmacken.fedorapeople.org/moksha/_static/moksha.png" /></a>
<br/>
<a href="http://civx.us"><img src="/img/civx.png"/></a>
<br/>
<a href="http://pyrasite.com"><img src="http://pyrasite.com/logo.png"/></a>
</center>

<br/>

<!--
<div id="github-badge"></div>
<script type="text/javascript" charset="utf-8">
  GITHUB_USERNAME="lmacken";
  GITHUB_LIST_LENGTH=30;
  GITHUB_HEAD="div"; // e.g. change to "h2" for wordpress sidebars
  GITHUB_THEME="white"; // try 'black'
  GITHUB_TITLE = "My GitHub repos"
  GITHUB_SHOW_ALL = "Show all"
</script>
<script src="http://drnic.github.com/github-badges/dist/github-badge-launcher.js" type="text/javascript"></script>
-->
<br/>
<a href="http://www.fsf.org/register_form?referrer=12531"><img src="http://static.fsf.org/nosvn/associate/fsf-12531.png" alt="[FSF Associate Member]" /></a>
<br/>
<br/>
<a href="http://www.ohloh.net/accounts/7648?ref=Detailed"><img height='35' width='191' src='http://www.ohloh.net/accounts/7648/widgets/account_detailed.gif' alt="ohloh profile for lewk" /></a>

<br/>
<br/>

<a href='http://coderwall.com/lmacken'>
    <img src='http://api.coderwall.com/lmacken/endorsecount.png' />
</a> 
<br/>
<br/>

<a href="http://flattr.com/thing/641832/lewk-org" target="_blank"><img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a>

<br/>
<br/>

<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
	wallet_address: "14MhNzcVH8WKiUJXKkxZd4R2C5PDVnKwUE"
	, currency: "bitcoin"
	, counter: "amount"
	, alignment: "bl"
	, qrcode: true
	, auto_show: false
	, lbl_button: "Donate"
	, lbl_address: "My Bitcoin Address:"
	, lbl_count: "donations"
	, lbl_amount: "BTC"
});
</script>

	<script src="http://cdn.bitmindo.com/dogecoin.min.js"></script>
	<script>
	  CoinWidgetCom.go({
	    /* make sure you update the wallet_address or you will not get your donations */
	    wallet_address: "D5vkbUzTN8uo5phBCaNuUvXYePDRa6o9JQ"
	    , currency: "dogecoin"
	    , counter: "amount"
	    , alignment: "bl"
	    , qrcode: true
	    , auto_show: false
	    , lbl_button: "Donate"
	    , lbl_address: "Tip Dogecoin to this Address:"
	    , lbl_amount: "DOGE"
	  });
	</script>


<br/>
<br/>

<p>
<span class="gittip-0001" gittip-username="lmacken">
</span>
<script id="gittip-0001"
  src="https://www.gittip.com/assets/widgets/0001.js">
</script>
</p>

<p>
<script type="text/javascript">
this.fsf_widget_size = "thin";
this.fsf_associate_id = "2442";
</script>
<script type="text/javascript" src="http://www.fsf.org/graphics/widget/global/widget.js"></script>
</p>

<h3><a href="http://fedmsg.com">Fedmsg</a></h3>

<style>
#datagrepper-widget img {
    height: 32px;
    width: 32px;
}

#datagrepper-widget .message-card p {
    font-style: bold;
    display: inline;
}
#datagrepper-widget .datetime {
    font-style: italic;
}
</style>
<script id="datagrepper-widget" src="http://lewk.org/datagrepperwidget.js" data-user="lmacken" data-rows_per_page="20"/>


<!--
<h2>Tip Jar</h2>
<center>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="10835212">
<input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donate_SM.gif"
border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
<img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif"
width="1" height="1">
</form>
</center>
<br/>
-->

<!--

<a href="http://profiles.us.playstation.com/playstation/psn/visit/profiles/l3wkx0r"><img src="http://fp.profiles.us.playstation.com/playstation/psn/pid/l3wkx0r.png" width="230" height="155" border="0" /></a><br/><a href="http://www.us.playstation.com/PSN/SignUp">Get your Portable ID!</a>
-->

</center>

</div>

<div id="footer">

<div class="pager"></div>
<br/>

<p><a href="mailto:lewk csh rit edu">Contact me</a> | <a href="#header">Back to top</a><br />
&copy; 2007-2013 Luke Macken</a>
</p>
<br/>
<a href="http://www.webfaction.com/signup?affiliate=derb"><img src="http://blog.webfaction.com/static/visuals/105x22-hosted-bg.png"></a>
<!--BEGIN NAMECHEAP LINK --><a href="Http://www.namecheap.com?aff=25628"><img src="http://files.namecheap.com/graphics/linkus/88x31-2.gif" height="31" width="88" border="0" alt="Namecheap.com - Cheap domain name registration, renewal and transfers - Free SSL Certificates - Web Hosting"></a><!--END NAMECHEAP LINK -->
</div>

</div>

<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-1122486-1";
urchinTracker();
</script>

</body>
</html>

