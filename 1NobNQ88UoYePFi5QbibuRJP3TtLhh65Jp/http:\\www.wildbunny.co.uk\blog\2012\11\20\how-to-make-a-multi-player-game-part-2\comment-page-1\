http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/
HTTP/1.0 200 OK
Date: Wed, 23 Jul 2014 07:23:27 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
Set-Cookie: PHPSESSID=ojdrt70rgt2av3li9so5pm0rf3; path=/
X-Pingback: http://www.wildbunny.co.uk/blog/xmlrpc.php
Link: <http://www.wildbunny.co.uk/blog/?p=1932>; rel=shortlink
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 28346
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8" />
<title>Wildbunny blog</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://www.wildbunny.co.uk/blog/wp-content/themes/twentyten/style.css?v=0" />
<link rel="pingback" href="http://www.wildbunny.co.uk/blog/xmlrpc.php" />

<!-- BEGIN Metadata added by Add-Meta-Tags WordPress plugin
Get the plugin at: http://www.g-loaded.eu/2006/01/05/add-meta-tags-wordpress-plugin/ -->
<meta name="description" content="Hello and welcome back to my blog! This is part 2 in the series where I talk about making a multi-player game. Last time we built a TCP socket server in node.js and we're able to send and receive complex types. Read the first article if you've not already done so here." />
<meta name="keywords" content="as3, json, multi-player, server side, technical, adobe flash, communication, game developement, json, server, tutorial" />
<meta name="blogcatalog" content="9BC10671562" />
<div id="ScribCode634274886"></div>
<!-- END Metadata added by Add-Meta-Tags WordPress plugin -->

<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; Feed" href="http://www.wildbunny.co.uk/blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; Comments Feed" href="http://www.wildbunny.co.uk/blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo;  Comments Feed" href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/feed/" />
<link rel='stylesheet' id='bm-author-donations-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/bitmate-author-donations/style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cntctfrm_stylesheet-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/contact-form-plugin/css/style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cookielawinfo-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/css/cli-style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cookielawinfo-table-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/css/cli-tables.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='oikCSS-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/oik/oik.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='bwlinkCSS-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/oik/bwlink.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp125style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/wp125/wp125.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='thsp-sticky-header-plugin-styles-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/sticky-header/css/public.css?ver=1.0.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='featured-post-css-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/featured-post.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='ws-plugin--s2member-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/s2member/s2member-o.php?ws_plugin__s2member_css=1&#038;qcABC=1&#038;ver=140105-140105-2848662513' type='text/css' media='all' />
<link rel='stylesheet' id='mr_social_sharing-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/style.css?ver=3.8.2' type='text/css' media='all' />
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/swfobj/swfobject.js?ver=2.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/comment-reply.min.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/js/jquery.cookie.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/js/cookielawinfo.js?ver=3.8.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var StickyHeaderParams = {"show_at":"200","hide_if_narrower":"600"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/sticky-header/js/public.js?ver=1.0.0'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/script.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/googleplus.js.php?lang=en_US&#038;ver=3.8.2'></script>
<script type='text/javascript' src='http://apis.google.com/js/plusone.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://connect.facebook.net/en_US/all.js?ver=3.8.2#xfbml=1'></script>
<script type='text/javascript' src='http://platform.twitter.com/widgets.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.wildbunny.co.uk/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.wildbunny.co.uk/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Understanding binary' href='http://www.wildbunny.co.uk/blog/2012/11/07/understanding-binary/' />
<link rel='next' title='How to make a Facebook social game' href='http://www.wildbunny.co.uk/blog/2012/11/30/how-to-make-a-facebook-social-game/' />
<meta name="generator" content="WordPress 3.8.2" />
<link rel='canonical' href='http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comments' />
<link rel='shortlink' href='http://www.wildbunny.co.uk/blog/?p=1932' />
<script type="text/javascript" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/js/bubble.js"></script>
<link rel="stylesheet" type="text/css" href="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/css/style.css" />
<style type="text/css">
<!-- Silverlight WordPress Plugin -->
#silverlightControlHost{height:100%;}
</style>
<!-- Protected by WP-SpamFree v2.1.1.2 :: JS BEGIN -->
<script type="text/javascript" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-spamfree/js/wpsfv2-js.php"></script> 
<!-- Protected by WP-SpamFree v2.1.1.2 :: JS END -->

		<style type="text/css">
			#thsp-sticky-header {
				background-color: #181818;
			}
			#thsp-sticky-header,
			#thsp-sticky-header a {
				color: #f9f9f9 !important;
			}
											</style>
	<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #EAEAEA; }
</style>
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">window.google_analytics_uacct = "ca-pub-4897461488762721";</script>
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-16999711-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
</head>

<body class="single single-post postid-1932 single-format-standard custom-background">
<div id="wrapper" class="hfeed">
	<div id="header">
		<div id="masthead">
			<div id="branding" role="banner">
								<div id="site-title">
					<span>
						<a href="http://www.wildbunny.co.uk/blog/" title="Wildbunny blog" rel="home">Wildbunny blog</a>
					</span>
				</div>
				<div id="site-description">Developer knowledge centre</div>

										<img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/02/bunnyWP1.gif" width="940" height="198" alt="" />
								</div><!-- #branding -->

			<div id="access" role="navigation">
			  				<div class="skip-link screen-reader-text"><a href="#content" title="Skip to content">Skip to content</a></div>
								<div class="menu-header"><ul id="menu-flowhub-header" class="menu"><li id="menu-item-272" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-272"><a href="/blog/">All articles</a></li>
<li id="menu-item-1302" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1302"><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Vector maths</a></li>
<li id="menu-item-319" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-319"><a href="http://www.wildbunny.co.uk/blog/contact-me/">Contact me</a></li>
<li id="menu-item-2072" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2072"><a href="http://www.wildbunny.co.uk/blog/hire-me/">Hire me</a></li>
<li id="menu-item-446" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-446"><a href="http://www.wildbunny.co.uk/blog/membership-sign-up-page/">Subscribe!</a></li>
<li id="menu-item-466" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-466"><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Members</a></li>
<li id="menu-item-1183" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1183"><a href="/blog/buy-source-code">Buy source-code</a></li>
<li id="menu-item-1694" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1694"><a href="http://www.wildbunny.co.uk/blog/privacy-policy/">Privacy policy</a></li>
</ul></div>			</div><!-- #access -->
		</div><!-- #masthead -->
	</div><!-- #header -->

	<div id="main">

		<div id="container">
			<div id="content" role="main">


				<div id="nav-above" class="navigation">
					<div class="nav-previous"><a href="http://www.wildbunny.co.uk/blog/2012/11/07/understanding-binary/" rel="prev"><span class="meta-nav">&larr;</span> Understanding binary</a></div>
					<div class="nav-next"><a href="http://www.wildbunny.co.uk/blog/2012/11/30/how-to-make-a-facebook-social-game/" rel="next">How to make a Facebook social game <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-above -->

				<div id="post-1932" class="post-1932 post type-post status-publish format-standard hentry category-as3 category-json-2 category-multi-player category-server-side category-technical tag-adobe-flash tag-communication tag-game-developement tag-json tag-server tag-tutorial">
					<h1 class="entry-title">How to make a multi-player game � part 2</h1>

					<div class="entry-meta">
						<span class="meta-prep meta-prep-author">Posted on</span> <a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" title="2:59 pm" rel="bookmark"><span class="entry-date">November 20, 2012</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="http://www.wildbunny.co.uk/blog/author/paulfirth/" title="View all posts by Paul Firth">Paul Firth</a></span>					</div><!-- .entry-meta -->

					<div class="entry-content">
						<img width="150" height="99" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/shop-150x99.png" class="attachment-single-post-thumbnail wp-post-image" alt="Avatar customisation in 2D Space MMO" />						
				<!-- Social Sharing Toolkit v2.0.4 | http://www.marijnrongen.com/wordpress-plugins/social_sharing_toolkit/ -->
				<div class="mr_social_sharing_wrapper"><span class="mr_social_sharing"><script type="text/javascript">
							  reddit_url = "http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/";
							  reddit_title = "How to make a multi-player game � part 2";
							</script>
							<script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></span><span class="mr_social_sharing"><a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" data-count="horizontal" data-text="How to make a multi-player game � part 2">Tweet</a></span><span class="mr_social_sharing"><iframe src="https://www.facebook.com/plugins/like.php?locale=en_US&amp;href=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2012%2F11%2F20%2Fhow-to-make-a-multi-player-game-part-2%2F&amp;layout=button_count&amp;show_faces=false&amp;width=90px&amp;height=21px" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></span><span class="mr_social_sharing"><div id="fb-root"></div><fb:send href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" font=""></fb:send></span><span class="mr_social_sharing"><g:plusone size="medium" href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/"></g:plusone></span><span class="mr_social_sharing"><a href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2012%2F11%2F20%2Fhow-to-make-a-multi-player-game-part-2%2F&amp;title=How+to+make+a+multi-player+game+%96+part+2" target="_blank" class="mr_social_sharing_popup_link"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/images/buttons/stumbleupon.png" alt="Submit to StumbleUpon" title="Submit to StumbleUpon"/></a></span></div><p>Hello and welcome back to my blog! This is part 2 in the series where I talk about making a multi-player game.</p>
<p>Last time we built a TCP socket server in node.js and we&#8217;re able to send and receive complex types. <a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/">Read the first article if you&#8217;ve not already done so here</a>.</p>
<p>Here is a <strong>live version</strong> of the game I&#8217;m describing in this series:</p>

    <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="swfobj_0" width="640" height="480">
      <param name="movie" value="/media/multiplayerGame.swf?v=2" />
      <!--[if !IE]>-->
      <object type="application/x-shockwave-flash" data="/media/multiplayerGame.swf?v=2" width="640" height="480">
      <!--<![endif]-->
        
      <!--[if !IE]>-->
      </object>
      <!--<![endif]-->
    </object>

<h2>Clock synchronisation</h2>
<p>It&#8217;s important that both the client and server&#8217;s clocks are synchronised because if there is any time based interpolation, you want both server and client to agree on what time it is and therefore at what position your interpolated object is.</p>
<div id="attachment_1933" style="width: 305px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/figure11.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/figure11.png" alt="" title="figure1" width="295" height="286" class="size-full wp-image-1933" /></a><p class="wp-caption-text">Asteroids on an interpolation orbit</p></div>
<p>I use this technique in <a href="http://2dspacemmo.wildbunny.co.uk">2D Space MMO</a> to ensure the orbiting asteroids are in the same position across all clients and on the server. The asteroids are actually interpolating on an orbit around a central location &#8211; there are no update messages getting sent to correct their positions, the only thing which keeps them synchronised is having the same time value across all clients and server.</p>
<p>Before we can try to synchronise clocks, we need to be sure we&#8217;re using the same concept of time on both server and client. We want to calculate the number of seconds since 1970/01/01, which is the same in both javascript and actionscript:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">time</span> = <span style="color: #000000; font-weight: bold;">new</span> <span style="color: #0066CC;">Date</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>.<span style="color: #0066CC;">getTime</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">/</span><span style="color: #cc66cc;">1000.0</span>;</pre></td></tr></table></div>

<p>The way to synchronise clocks is to first work out how long it takes a message to do a round-trip from client->server->client, like a <a href="http://en.wikipedia.org/wiki/Ping_(networking_utility)">ping</a>, essentially. We do this by sending a message which contains the client&#8217;s local time. The server will then reply with the exact data it received and also an additional parameter which is the time on the server.</p>
<p>When the message arrives back on the client, the client can subtract the old client time in the message from the time &#8216;now&#8217; on the client, thereby arriving at a total round-trip time. Taking half of this round-trip time we arrive at an estimate of the all important <strong>latency</strong> value. Latency is how long it takes for our messages to arrive on the server.</p>
<p>Using the second part of the reply from the server (the server&#8217;s time), we can then compute an offset which will account for any time-zone differences.</p>
<p>In reality we don&#8217;t just do this synchronisation once, because it is subject to error based on the current quality of the connection between the client and the server &#8211; imagine the client is on a 3G network travelling on a train, the round-trip time might vary considerably from attempt to attempt based on the proximity and line of sight to the nearest cell tower. In order to combat this problem, we continuously synchronise and take an average value.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/**
 * Send clock synchronisation message
 */</span>
<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> SyncClocks<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">Message</span>.<span style="color: #006600;">SerialiseAndSend</span><span style="color: #66cc66;">&#40;</span> m_socket, MessageNames.<span style="color: #006600;">kTime</span>, <span style="color: #66cc66;">&#123;</span>m_clientTime:m_LocalTimeSeconds<span style="color: #66cc66;">&#125;</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span>
&nbsp;
<span style="color: #808080; font-style: italic;">/**
 * Get the time on this local machine, in seconds
 */</span>
<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_LocalTimeSeconds<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Number</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #b1b100;">return</span> <span style="color: #000000; font-weight: bold;">new</span> <span style="color: #0066CC;">Date</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>.<span style="color: #0066CC;">getTime</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">/</span><span style="color: #cc66cc;">1000.0</span>;
<span style="color: #66cc66;">&#125;</span>
&nbsp;
<span style="color: #808080; font-style: italic;">/**
 * Syncronise clocks
 * 
 * @param message
 *
 */</span>
<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> TimeMessage<span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">message</span>:MessageContainer <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #000000; font-weight: bold;">var</span> now:<span style="color: #0066CC;">Number</span> = m_LocalTimeSeconds;
	<span style="color: #000000; font-weight: bold;">var</span> clientTime:<span style="color: #0066CC;">Number</span> = <span style="color: #0066CC;">message</span>.<span style="color: #006600;">m_data</span>.<span style="color: #006600;">m_clientTime</span>;
	<span style="color: #000000; font-weight: bold;">var</span> serverTime:<span style="color: #0066CC;">Number</span> = <span style="color: #0066CC;">message</span>.<span style="color: #006600;">m_data</span>.<span style="color: #006600;">m_serverTime</span>;
&nbsp;
	<span style="color: #808080; font-style: italic;">// round trip time in seconds</span>
	<span style="color: #000000; font-weight: bold;">var</span> roundTripSeconds:<span style="color: #0066CC;">Number</span> = now-clientTime;
&nbsp;
	<span style="color: #808080; font-style: italic;">// latency is how long message took to get to server</span>
	<span style="color: #000000; font-weight: bold;">var</span> latency:<span style="color: #0066CC;">Number</span> = roundTripSeconds<span style="color: #66cc66;">/</span><span style="color: #cc66cc;">2</span>;
&nbsp;
	<span style="color: #808080; font-style: italic;">// difference between server time and client time</span>
	<span style="color: #000000; font-weight: bold;">var</span> serverDeltaSeconds:<span style="color: #0066CC;">Number</span> = serverTime-now;
&nbsp;
	<span style="color: #808080; font-style: italic;">// store averages</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_latency<span style="color: #66cc66;">!</span>=<span style="color: #0066CC;">Number</span>.<span style="color: #0066CC;">MAX_VALUE</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		m_latency = <span style="color: #66cc66;">&#40;</span> m_latency+latency <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">*</span><span style="color: #cc66cc;">0.5</span>;
	<span style="color: #66cc66;">&#125;</span>
	<span style="color: #b1b100;">else</span> 
	<span style="color: #66cc66;">&#123;</span>
		m_latency = latency;
	<span style="color: #66cc66;">&#125;</span>
&nbsp;
	<span style="color: #808080; font-style: italic;">// this is the current compenstation</span>
	<span style="color: #000000; font-weight: bold;">var</span> totalDeltaSeconds:<span style="color: #0066CC;">Number</span> = serverDeltaSeconds+m_latency;
	m_timeCompensation = totalDeltaSeconds;
&nbsp;
	<span style="color: #808080; font-style: italic;">// check again in 5 seconds</span>
	setTimeout<span style="color: #66cc66;">&#40;</span> SyncClocks, <span style="color: #cc66cc;">5</span><span style="color: #66cc66;">*</span><span style="color: #cc66cc;">1000</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>In this code I&#8217;m using a <a href="http://en.wikipedia.org/wiki/Moving_average">simple moving average</a>. You might want to do something more advanced like store more data points instead of just the last value and then filter out any outliers by comparing against the median of the dataset.</p>
<div id="attachment_1936" style="width: 340px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/figure21.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/figure21.png" alt="" title="figure2" width="330" height="201" class="size-full wp-image-1936" /></a><p class="wp-caption-text">The latest sample was identified as an outlier and can be discarded</p></div>
<h2>Flash and the socket policy file</h2>
<p>Before we go any further it&#8217;s worth mentioning how Flash works when connecting to a socket server. The Flash client will send a request for a policy file when it first connects to a socket server; this policy file tells Flash which domains and ports the socket server accepts Flash connections on. <a href="http://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7c60.html#WS5b3ccc516d4fbf351e63e3d118a9b90204-7c63">You can read more about socket policy files here</a>.</p>
<p>Flash will send a request which looks like this:</p>
<p><code>&lt;policy-file-request/&gt;</code></p>
<p>It will do this first on port <strong>843</strong> and then on the port you chose to connect with the server.</p>
<p>The server must respond with a valid policy file which <strong>must be terminated</strong> with a <strong>\0</strong> null character. Here is the function I use to form the policy response in node.js:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #006600; font-style: italic;">/**
 * Get the socket policy response for the given port number
 */</span>
<span style="color: #000066; font-weight: bold;">function</span> GetPolicyResponse<span style="color: #009900;">&#40;</span>port<span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
  <span style="color: #000066; font-weight: bold;">var</span> xml <span style="color: #339933;">=</span> <span style="color: #3366CC;">'&lt;?xml version=&quot;1.0&quot;?&gt;<span style="color: #000099; font-weight: bold;">\n</span>&lt;!DOCTYPE cross-domain-policy SYSTEM'</span>
          <span style="color: #339933;">+</span> <span style="color: #3366CC;">' &quot;http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd&quot;&gt;<span style="color: #000099; font-weight: bold;">\n</span>&lt;cross-domain-policy&gt;<span style="color: #000099; font-weight: bold;">\n</span>'</span><span style="color: #339933;">;</span>
&nbsp;
  xml <span style="color: #339933;">+=</span> <span style="color: #3366CC;">'&lt;allow-access-from domain=&quot;*&quot; to-ports=&quot;'</span> <span style="color: #339933;">+</span> port <span style="color: #339933;">+</span> <span style="color: #3366CC;">'&quot;/&gt;<span style="color: #000099; font-weight: bold;">\n</span>'</span><span style="color: #339933;">;</span>
  xml <span style="color: #339933;">+=</span> <span style="color: #3366CC;">'&lt;/cross-domain-policy&gt;<span style="color: #000099; font-weight: bold;">\n</span><span style="color: #000099; font-weight: bold;">\0</span>'</span><span style="color: #339933;">;</span>
&nbsp;
  <span style="color: #000066; font-weight: bold;">return</span> xml<span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>I&#8217;ve found that although the majority of Flash clients do request a policy file, there are some which wont so you have to be able to deal with both cases to be completely robust.</p>
<h2>Synchronising state in a twitch reaction game</h2>
<p>At this point it&#8217;s important to talk about exactly how we can go about designing the system to be responsive enough to handle a twitch reaction game. There are primarily two different ways of synchronising state in a multi-player game (by state I mean position, orientation, velocity and other attributes of in-game objects):</p>
<ul>
<li>Periodically send updates about all objects which have changed state</li>
<li>Send updates only when an event occurs</li>
</ul>
<p>The first method sends data at a fixed interval about all objects which have changed state. This introduces a lag which is equal to the time between state updates, but ensures a steady flow of state information which is not subject to flooding.</p>
<p>The second only sends state when an event occurs, such as a key being pressed. This has minimal lag but can be subject to flooding; for example if the player starts hammering keys.</p>
<p>I chose to use an event based method because the response times are important in a twitch reaction game, and also because it allows me to handle the problem with bullets.</p>
<p><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/2645039-a-smashed-keyboard-with-hammer.jpg"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/2645039-a-smashed-keyboard-with-hammer.jpg" alt="" title="2645039-a-smashed-keyboard-with-hammer" width="400" height="267" class="aligncenter size-full wp-image-1942" /></a></p>
<h3>The problem with bullets</h3>
<p>Imagine if every single bullet fired in game caused a message to be broadcast? This would soon overwhelm the server&#8217;s available bandwidth and start leading to nasty lagging issues. To solve this problem I simply send key-presses from client to server and give the weapon auto-repeat so that the player is either firing or not firing based on which keys are currently down on the client.</p>
<p>If I detect key hammering in the game (which is quite a natural behaviour for this type of game), I put up a message telling the player they can hold down fire instead.</p>
<p>When the player is firing bullets, bullets are emitted at a constant rate on both client and server and there is a synchronised timer which ensures that both client and server fire bullets at the same moment in time.</p>
<p><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/bullets.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/bullets.png" alt="" title="bullets" width="217" height="49" class="aligncenter size-full wp-image-1946" /></a></p>
<h2>Client side prediction and server authority</h2>
<p>Does the client send its state to the server, or does the client send inputs only and simply await the new state from the server?</p>
<p>The former approach is lag free and responsive but presents a serious problem with trust &#8211; the client could have been altered by cheaters to gain an advantage in game. Imagine if the client had authority over kills, for example; an altered client could simply kill everyone else in game by telling the server it had hit everyone a thousand times, or it could upgrade the player with super-speed etc.</p>
<p>The latter avoids these problems but introduces an unacceptable amount of lag which is equal to the message round-trip time.</p>
<p>As I mentioned in the last article, although you don&#8217;t need to worry about cheaters until you actually have a popular game, it&#8217;s worth taking preventative steps ahead of time. The traditional method is to simply have the server be in authority over everything in game and to cope with the lag by doing client side prediction.</p>
<p>Here are some reading materials which cover client-side prediction and complete server authority:</p>
<p><a href="http://gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking/">http://gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking/</a></p>
<p><a href="http://fabiensanglard.net/quakeSource/quakeSourcePrediction.php">http://fabiensanglard.net/quakeSource/quakeSourcePrediction.php</a></p>
<p><a href="https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization">https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization</a></p>
<p>I&#8217;m going to talk about a different method in this article. It has a number of advantages:</p>
<ul>
<li>Incredibly simple to understand and quick to get running</li>
<li>Player never sees their character getting warped around or stuttering due to lag</li>
<li>Enables complex interactions with rigid bodies</li>
<li>Enables the game to be played acceptably over a 3G network</li>
</ul>
<p>This method has server-side authority over everything in game, except the player&#8217;s position and angle, which are client sided. This obviously raises a trust concern with cheaters teleporting around the level, so to mitigate this the server (and other clients) simply clamp the maximum speed of each player. Then if a player teleports, it&#8217;s equivalent to them moving there at normal speed for all other clients and the server, thereby negating the benefit of the cheat.</p>
<p>In order to implement this technique I send the client&#8217;s current position and angle along with key-presses.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">//</span>
<span style="color: #808080; font-style: italic;">// handle player input message sending</span>
<span style="color: #808080; font-style: italic;">//</span>
&nbsp;
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>keysDown <span style="color: #66cc66;">!</span>= m_lastKeysDown<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	m_playerInputDef.<span style="color: #006600;">Initialise</span><span style="color: #66cc66;">&#40;</span>keysDown, m_gameLogic.<span style="color: #006600;">m_ThisPlayer</span>.<span style="color: #006600;">m_Pos</span>, m_gameLogic.<span style="color: #006600;">m_ThisPlayer</span>.<span style="color: #006600;">m_Angle</span><span style="color: #66cc66;">&#41;</span>;
	<span style="color: #0066CC;">Message</span>.<span style="color: #006600;">SerialiseAndSend</span><span style="color: #66cc66;">&#40;</span>m_socket, MessageNames.<span style="color: #006600;">kPlayerInput</span>, m_playerInputDef.<span style="color: #006600;">m_Annon</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
	m_lastKeysDown = keysDown;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>When this data arrives at the server (and the other clients) a delta is computed between the current position and this new broadcast position. A fraction of this delta is then applied each frame to the position and angle, and then the delta is depleted by that amount.</p>
<div id="attachment_1948" style="width: 205px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/figure31.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/figure31.png" alt="" title="figure3" width="195" height="173" class="size-full wp-image-1948" /></a><p class="wp-caption-text">Source moves 50% of the remainging way towards target each time</p></div>
<p>So the correction is applied most at the beginning of its application and least at the end. In fact it never reaches the end, technically.</p>
<p>It should be noted at this point that this is indeed only used for correction purposes; both the client and the server all run the same game code which responds to key-presses. All objects are integrated in the same way across all systems so client and server will be roughly in sync without this correction. The problem is, &#8216;roughly&#8217; is not good enough and they will start to drift off without it.</p>
<h2>The problem with drift</h2>
<p>Although the same game-code runs on client and server, which responds to key-presses in the same way, integrates objects forward in time the same way using the same code, you will still get problems with drift if you do nothing to correct it.</p>
<p>Drift occurs due to a number of factors, the most obvious being accidental differences in the code between client->server, or differing mathematical result of calculations due to hardware or language specific implementation details, or a non identical time-step between client->server.</p>
<p>The other one is due to the unpredictable nature of lag. For example, the client holds down the forward key for 30 ticks and then releases it. That&#8217;s two different messages getting sent from client  to server, one key down and one key up. Due to lag, the server will receive these two messages at some time in the future, the problem isn&#8217;t <strong>that</strong>; the problem is that if the lag changes from key-down to key-up, the number of ticks the server will have the forward key down for could be different than the client!</p>
<div id="attachment_1954" style="width: 379px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/figure42.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/figure42.png" alt="" title="figure4" width="369" height="98" class="size-full wp-image-1954" /></a><p class="wp-caption-text">Difference in key-down duration client-&gt;server due to lag variation</p></div>
<p>In the above example a key is held down for a consistent number of ticks each time, but the lag varies on each attempt resulting in a inconsistent key-down duration on the server. This wouldn&#8217;t be a problem if there was a constant amount of lag, but in reality it varies enough to cause problems.</p>
<p>By sending the client&#8217;s current position and angle with each key-press this drift can be corrected as described before it gets significant.</p>
<h2>Simplicity</h2>
<p>The beauty of this technique is that it&#8217;s incredibly simple. The player&#8217;s position/angle is always slightly ahead of the server because of the nature of this system, so that when the correction deltas are computed they never represent a step backwards in time, like they would with a fully server authoritative technique so always appear smooth and un-jarring.</p>
<p>Of course, this technique does come with its own disadvantages which it is only fair to discuss:</p>
<ul>
<li>If the player is very fast moving, the difference in position on client->server due to lag can be large enough to cause problems with hit-detection</li>
<li>A player with a very laggy connection will appear to behave oddly for all other clients observing</li>
<li>The maximum speed of the player must be clamped to mitigate cheating</li>
</ul>
<!-- Easy AdSense V2.79 -->
<!-- Post[count: 1] -->
<div class="ezAdsense adsense adsense-midtext" style="text-align:center;margin:12px; "><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- medi -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:250px"
     data-ad-client="ca-pub-4897461488762721"
     data-ad-slot="9797433564"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div><p>That being said, from a business point-of-view the thing most likely to stop your game being a success is it not being done in time <strong>or at all</strong>. As long as the compromises are acceptable, any time you can save during development which could be spent on actually making the game better is extremely valuable.</p>
<p>You can read more about my love of simplicity in game development in this article on <a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/">how to make games</a>.</p>
<h2>Integration and the time-step</h2>
<p>I&#8217;ve already mentioned that the client and server must run the same code. It&#8217;s worth talking about the time-step, because although we have a very robust correction system to deal with drift, in reality we want those corrections to be as small as possible.</p>
<p>With a variable time-step, the amount of distance actually moved over a long series of frames will be different each time even with a constant velocity. This is especially noticeable with the jump-height of a character in a platform game; I&#8217;ve seen it be pronounced enough that a character won&#8217;t be able to make a jump in one part of the level which he has no trouble making in another for the same height.</p>
<p><a href="http://gafferongames.com/game-physics/fix-your-timestep/">I&#8217;m using the method Glenn Fiedler recommends near the bottom of his article on the subject</a>.</p>
<h2>Acting on key-presses</h2>
<p>Ok, so lets talk about exactly how I transmit key-presses and what the server does with them.</p>
<p>Firstly, the key-codes from the client&#8217;s keyboard are transformed into in-game actions and packed into a bit-field. You can read more about bit-fields in this article I wrote about <a href="http://www.wildbunny.co.uk/blog/2012/11/07/understanding-binary/">understanding binary</a>.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> keysDown:<span style="color: #0066CC;">int</span> = <span style="color: #cc66cc;">0</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// translate actual keycodes into logical actions</span>
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kLeftArrow</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">||</span> m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kA</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	keysDown <span style="color: #66cc66;">|</span>= Player.<span style="color: #006600;">kLeftD</span>;
<span style="color: #66cc66;">&#125;</span>
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kRightArrow</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">||</span> m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kD</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	keysDown <span style="color: #66cc66;">|</span>= Player.<span style="color: #006600;">kRightD</span>;
<span style="color: #66cc66;">&#125;</span>
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kUpArrow</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">||</span> m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kW</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	keysDown <span style="color: #66cc66;">|</span>= Player.<span style="color: #006600;">kUpD</span>;
<span style="color: #66cc66;">&#125;</span>
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kDownArrow</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">||</span> m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kS</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	keysDown <span style="color: #66cc66;">|</span>= Player.<span style="color: #006600;">kDownD</span>;
<span style="color: #66cc66;">&#125;</span>
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kSpace</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">||</span> m_keyboard.<span style="color: #006600;">IsKeyDown</span><span style="color: #66cc66;">&#40;</span>eKeyCodes.<span style="color: #006600;">kCtrl</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	keysDown <span style="color: #66cc66;">|</span>= Player.<span style="color: #006600;">kSpaceD</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>The advantage of this remapping is that you can easily redefine the controls at a later date with no problems.</p>
<p>On the server, these key-presses are actioned in the same way as they are on the client.</p>
<p>Client:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/**
 * Move the ship forward in time and accept player inputs
 * 
 * @param dt
 */</span>
<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Integrate<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	...
&nbsp;
	<span style="color: #808080; font-style: italic;">// handle player inputs</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> IsKeyDown<span style="color: #66cc66;">&#40;</span> Player.<span style="color: #006600;">kLeftD</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		m_AngularVel -= Player.<span style="color: #006600;">kTurnRate</span><span style="color: #66cc66;">*</span>dt;
	<span style="color: #66cc66;">&#125;</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> IsKeyDown<span style="color: #66cc66;">&#40;</span> Player.<span style="color: #006600;">kRightD</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		m_AngularVel += Player.<span style="color: #006600;">kTurnRate</span><span style="color: #66cc66;">*</span>dt;
	<span style="color: #66cc66;">&#125;</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> IsKeyDown<span style="color: #66cc66;">&#40;</span> Player.<span style="color: #006600;">kUpD</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		m_Vel.<span style="color: #006600;">AddTo</span><span style="color: #66cc66;">&#40;</span> m_Direction.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> Player.<span style="color: #006600;">kAccelerateRate</span><span style="color: #66cc66;">*</span>dt <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
	<span style="color: #66cc66;">&#125;</span>
	<span style="color: #b1b100;">else</span> <span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> IsKeyDown<span style="color: #66cc66;">&#40;</span> Player.<span style="color: #006600;">kDownD</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		m_Vel.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> m_Direction.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> Player.<span style="color: #006600;">kDecelerateRate</span><span style="color: #66cc66;">*</span>dt <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>Server:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #006600; font-style: italic;">/**
 * Move forward in time.
 * 
 * Keep in sync with client!
 */</span>
Integrate<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>dt<span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
	...
&nbsp;
	<span style="color: #006600; font-style: italic;">// handle player inputs</span>
	<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">IsKeyDown</span><span style="color: #009900;">&#40;</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kLeftD</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_angularVel</span> <span style="color: #339933;">-=</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kTurnRate</span><span style="color: #339933;">*</span>dt<span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
	<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">IsKeyDown</span><span style="color: #009900;">&#40;</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kRightD</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_angularVel</span> <span style="color: #339933;">+=</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kTurnRate</span><span style="color: #339933;">*</span>dt<span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
	<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">IsKeyDown</span><span style="color: #009900;">&#40;</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kUpD</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_vel</span>.<span style="color: #660066;">AddTo</span><span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">GetDirection</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">MulScalarTo</span><span style="color: #009900;">&#40;</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kAccelerateRate</span><span style="color: #339933;">*</span>dt <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
	<span style="color: #000066; font-weight: bold;">else</span> <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">IsKeyDown</span><span style="color: #009900;">&#40;</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kDownD</span> <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_vel</span>.<span style="color: #660066;">SubFrom</span><span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">GetDirection</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>.<span style="color: #660066;">MulScalarTo</span><span style="color: #009900;">&#40;</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kDecelerateRate</span><span style="color: #339933;">*</span>dt <span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>The reason these inputs are processed inside the Integrate function is due to the integration method I&#8217;m using, which compensates for frame-rate variation by calling Integrate multiple times per frame depending on the adjusting time-step.</p>
<h2>Other in-game events</h2>
<p>As I mentioned before, everything except player position and orientation is server-sided in this article. As such, events like:</p>
<ul>
<li>Time synchronisation ping</li>
<li>Player takes damage</li>
<li>Player died</li>
<li>Player respawned</li>
<li>Player joined</li>
<li>Player left</li>
</ul>
<p>&#8230;are all handled by the server broadcasting to the clients. Each message has its own message type and the client has a message processing section which deals with the data and actions represented in these messages. </p>
<p>The server has a similar message processing section and deals with messages from the client, which include:</p>
<ul>
<li>Time synchronisation ping</li>
<li>New player ready for world state</li>
<li>Player pressed a key</li>
<li>Player chat message</li>
<li>Player entered his real name</li>
<li>Player connected</li>
<li>Player disconnected</li>
</ul>
<h2>Game state on player join</h2>
<p>In this simple example, when a new player joins the game, the entire game state gets serialised and sent to the joining player and all other players get a message that a new player has joined the game.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #006600; font-style: italic;">/**
 * Process all messages received from all clients!
 */</span>
OnMessage<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>client<span style="color: #339933;">,</span> message<span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
	<span style="color: #000066; font-weight: bold;">var</span> thisPlayer <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_players</span><span style="color: #009900;">&#91;</span>client.<span style="color: #660066;">m_uid</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #000066; font-weight: bold;">switch</span> <span style="color: #009900;">&#40;</span>message.<span style="color: #660066;">n</span><span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		...
&nbsp;
		<span style="color: #000066; font-weight: bold;">case</span> MessageNames.<span style="color: #660066;">kReady</span><span style="color: #339933;">:</span>
		<span style="color: #009900;">&#123;</span>
			<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_numPlayers</span> <span style="color: #339933;">&lt;</span> GameLogicConstants.<span style="color: #660066;">kMaxPlayers</span><span style="color: #009900;">&#41;</span>
			<span style="color: #009900;">&#123;</span>
				<span style="color: #006600; font-style: italic;">//</span>
				<span style="color: #006600; font-style: italic;">// client is ready! serialise the world!</span>
				<span style="color: #006600; font-style: italic;">//</span>
&nbsp;
				<span style="color: #006600; font-style: italic;">// get data for world</span>
				<span style="color: #000066; font-weight: bold;">var</span> world <span style="color: #339933;">=</span> <span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
				<span style="color: #000066; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">var</span> key <span style="color: #000066; font-weight: bold;">in</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_players</span><span style="color: #009900;">&#41;</span>
				<span style="color: #009900;">&#123;</span>
					<span style="color: #000066; font-weight: bold;">var</span> player <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_players</span><span style="color: #009900;">&#91;</span>key<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
					world.<span style="color: #660066;">push</span><span style="color: #009900;">&#40;</span> player.<span style="color: #660066;">GetData</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
				<span style="color: #009900;">&#125;</span>
&nbsp;
				<span style="color: #000066; font-weight: bold;">var</span> defaultName <span style="color: #339933;">=</span> <span style="color: #3366CC;">&quot;Guest&quot;</span><span style="color: #339933;">+</span>utils.<span style="color: #660066;">PadNumber</span><span style="color: #009900;">&#40;</span>client.<span style="color: #660066;">m_uid</span><span style="color: #339933;">,</span> <span style="color: #CC0000;">4</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
				<span style="color: #000066; font-weight: bold;">var</span> newPlayer <span style="color: #339933;">=</span> <span style="color: #000066; font-weight: bold;">new</span> Player<span style="color: #009900;">&#40;</span>client.<span style="color: #660066;">m_socket</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">FindRandomSpawnLocation</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">,</span> client.<span style="color: #660066;">m_uid</span><span style="color: #339933;">,</span> defaultName<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
				<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">AddPlayer</span><span style="color: #009900;">&#40;</span>newPlayer<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
				<span style="color: #006600; font-style: italic;">// new player data for serialisation</span>
				<span style="color: #000066; font-weight: bold;">var</span> pd <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span>m_pos<span style="color: #339933;">:</span>newPlayer.<span style="color: #660066;">m_pos</span><span style="color: #339933;">,</span> m_uid<span style="color: #339933;">:</span>client.<span style="color: #660066;">m_uid</span><span style="color: #339933;">,</span> m_name<span style="color: #339933;">:</span>defaultName<span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
&nbsp;
				<span style="color: #006600; font-style: italic;">// send this data to the client</span>
				Message.<span style="color: #660066;">SerialiseAndSend</span><span style="color: #009900;">&#40;</span>client.<span style="color: #660066;">m_socket</span><span style="color: #339933;">,</span> MessageNames.<span style="color: #660066;">kReady</span><span style="color: #339933;">,</span> <span style="color: #009900;">&#123;</span>m_world<span style="color: #339933;">:</span>world<span style="color: #339933;">,</span> m_you<span style="color: #339933;">:</span>pd<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
				<span style="color: #006600; font-style: italic;">// broadcast new player to all clients, except the one who is ready</span>
				<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_server</span>.<span style="color: #660066;">BroadcastExcept</span><span style="color: #009900;">&#40;</span> MessageNames.<span style="color: #660066;">kCreatePlayer</span><span style="color: #339933;">,</span> pd<span style="color: #339933;">,</span> client.<span style="color: #660066;">m_uid</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
			<span style="color: #009900;">&#125;</span>
		<span style="color: #009900;">&#125;</span>
		...
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>This technique works fine for this simple game, but if you have a much larger world, or many more players it will start to get bulky and expensive on bandwidth. You might want to look at techniques like <a href="http://www.cs.mcgill.ca/~jboula2/thesis.pdf">Interest Management</a> to handle this problem in larger games. I use Interest Management in <a href="http://2dspacemmo.wildbunny.co.uk">2D Space MMO</a>.</p>
<p>Each object in game has a method called <em>GetData</em>() which returns the complete state required to create the object from scratch on the client. Here is what this looks like for the players:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #006600; font-style: italic;">/**
 * Serialise this player
 */</span>
GetData<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
	<span style="color: #000066; font-weight: bold;">return</span> <span style="color: #009900;">&#123;</span>m_mod<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>._super<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">,</span>
		m_uid<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_uid</span><span style="color: #339933;">,</span>
		m_keysDown<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_keysDown</span><span style="color: #339933;">,</span>
		m_lastKeysDown<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_lastKeysDown</span><span style="color: #339933;">,</span>
		m_bulletTimer<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_bulletTimer</span><span style="color: #339933;">,</span>
		m_health<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_health</span><span style="color: #339933;">,</span>
		m_invincibleTimer<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_invincibleTimer</span><span style="color: #339933;">,</span>
		m_kills<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_kills</span><span style="color: #339933;">,</span>
		m_died<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_died</span><span style="color: #339933;">,</span>
		m_name<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_name</span><span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span></pre></td></tr></table></div>

<p>You can see there are the vital details for the player, including his <strong>UID</strong> which uniquely identifies this object on the server, what keys are down now and which were down last frame, the bullet timer which synchronises the firing of bullets between client and server, health, number of kills, number of deaths and his name. The position, angle and velocities are actually stored inside the <em>m_mod </em>member which is inherited from the base class which describes all moving objects.</p>
<p>When the joining client receives and has deserialised this array of world data, the game state is synchronised and any further update in state will be handled by the normal event based messaging system. For the other clients present a more simple set of data is serialised which describes the new player:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #006600; font-style: italic;">// new player data for serialisation</span>
<span style="color: #000066; font-weight: bold;">var</span> pd <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span>m_pos<span style="color: #339933;">:</span>newPlayer.<span style="color: #660066;">m_pos</span><span style="color: #339933;">,</span> m_uid<span style="color: #339933;">:</span>client.<span style="color: #660066;">m_uid</span><span style="color: #339933;">,</span> m_name<span style="color: #339933;">:</span>defaultName<span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span></pre></td></tr></table></div>

<p>Because the joining state of all players is identical, bar the UID, the name and the position, these are the only things which are necessary to serialise to the existing clients. For example, all new players start un-rotated, all have full health, zero kills and have died zero times so there is no need to serialise that data &#8211; new players have defaults for those values.</p>
<h2>Chat</h2>
<p>No multi-player game would be complete without some way for players to chat with each other. Luckily implementing a chat system is very simple; chat messages are read from a text-box on the client, sent to the server and then broadcast to all clients, where upon the message is displayed at the appropriate location in the chat window.</p>
<p>The only thing to worry about is filtering the text for profanity. This can be done on either client or server, I&#8217;ve chosen to implement this on the client. Text must be filtered before being displayed on <strong>reception of the message</strong> rather than <strong>before transmitting it</strong> from the source. The reason is simple: imagine a hacked client exists where the hacker has removed the chat filter; he would be able to type unfiltered messages which then get broadcast to all clients!</p>
<p>Here is a simple chat filter implementation:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/**
 * Replace the given character in the string 
 * @param str
 * @param char
 * @param index
 * @return String
 *
 */</span>
<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> ReplaceChar<span style="color: #66cc66;">&#40;</span>str:<span style="color: #0066CC;">String</span>, char:<span style="color: #0066CC;">String</span>, <span style="color: #0066CC;">index</span>:<span style="color: #0066CC;">int</span><span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">String</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #b1b100;">return</span> str.<span style="color: #0066CC;">substr</span><span style="color: #66cc66;">&#40;</span><span style="color: #cc66cc;">0</span>,<span style="color: #0066CC;">index</span><span style="color: #66cc66;">&#41;</span> + char + str.<span style="color: #0066CC;">substr</span><span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">index</span> + <span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span>
&nbsp;
<span style="color: #808080; font-style: italic;">/**
 * Censor the given text string
 */</span>
<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> Censor<span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">text</span>:<span style="color: #0066CC;">String</span><span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">String</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #b1b100;">for</span> <span style="color: #b1b100;">each</span><span style="color: #66cc66;">&#40;</span><span style="color: #000000; font-weight: bold;">var</span> swear:<span style="color: #0066CC;">String</span> <span style="color: #b1b100;">in</span> m_naughtyWords<span style="color: #66cc66;">&#41;</span> 
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #000000; font-weight: bold;">var</span> done:<span style="color: #0066CC;">Boolean</span> = <span style="color: #000000; font-weight: bold;">false</span>;
&nbsp;
		<span style="color: #b1b100;">while</span> <span style="color: #66cc66;">&#40;</span><span style="color: #000000; font-weight: bold;">false</span> == done<span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// find start location of profanity</span>
			<span style="color: #000000; font-weight: bold;">var</span> lowerString:<span style="color: #0066CC;">String</span> = <span style="color: #0066CC;">text</span>.<span style="color: #0066CC;">toLowerCase</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
			<span style="color: #000000; font-weight: bold;">var</span> startPos:<span style="color: #0066CC;">int</span>=lowerString.<span style="color: #0066CC;">indexOf</span><span style="color: #66cc66;">&#40;</span> swear <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>startPos == -<span style="color: #cc66cc;">1</span><span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// no more occurances</span>
				<span style="color: #b1b100;">break</span>;
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #808080; font-style: italic;">// length is</span>
			<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">length</span>:<span style="color: #0066CC;">int</span> = swear.<span style="color: #0066CC;">length</span>;
			<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">end</span>:<span style="color: #0066CC;">int</span> = startPos+<span style="color: #0066CC;">length</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// replace</span>
			<span style="color: #b1b100;">for</span> <span style="color: #66cc66;">&#40;</span><span style="color: #000000; font-weight: bold;">var</span> i:<span style="color: #0066CC;">int</span>=startPos; i<span style="color: #66cc66;">&lt;</span><span style="color: #0066CC;">end</span>; i++<span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #0066CC;">text</span> = ReplaceChar<span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">text</span>, <span style="color: #ff0000;">&quot;*&quot;</span>, i<span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
&nbsp;
	<span style="color: #b1b100;">return</span> <span style="color: #0066CC;">text</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>It replaces sub-string occurrences of profanity with the asterisk character and returns the filtered string.</p>
<blockquote><p>It&#8217;s worth pointing out that it makes sense to store any data unfiltered (in a database, for example) because you are then free to change the filter and will still have the original data to work with.</p></blockquote>
<p>As well as chat, you can display game events in the chat window, as in this example whereby kill events are displayed with the chat.</p>
<div id="attachment_1963" style="width: 445px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/chat.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/chat.png" alt="" title="chat" width="435" height="83" class="size-full wp-image-1963" /></a><p class="wp-caption-text">Chat text with game events</p></div>
<h2>Bots</h2>
<p>There are two bots in the live demo which accompanies this article, they are server-side bots so are genuinely equivalent to other real players in all things accept their level of skill&#8230; in most cases!</p>
<p>They are handled by creating a fake client for each bot which runs server side. Each bot creates a socketed connection to the server in exactly the same way a genuine client would, but the code the bot runs is comparatively tiny compared to the full client.</p>
<p>Indeed, here is the full code of the bot:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;">require<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'./Scalar'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
require<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'./Player'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
require<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'./Message'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #006600; font-style: italic;">// import node.js net library</span>
<span style="color: #000066; font-weight: bold;">var</span> net <span style="color: #339933;">=</span> require<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'net'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
&nbsp;
<span style="color: #006600; font-style: italic;">/**
 * Class to emulate a client
 */</span>
Bot <span style="color: #339933;">=</span> Class.<span style="color: #660066;">extend</span><span style="color: #009900;">&#40;</span>
<span style="color: #009900;">&#123;</span>
	Init<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>host<span style="color: #339933;">,</span> port<span style="color: #339933;">,</span> uid<span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_host</span> <span style="color: #339933;">=</span> host<span style="color: #339933;">;</span>
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_port</span> <span style="color: #339933;">=</span> port<span style="color: #339933;">;</span>
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_player</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">null</span><span style="color: #339933;">;</span>
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_lastKeysDown</span> <span style="color: #339933;">=</span> <span style="color: #CC0000;">0</span><span style="color: #339933;">;</span>
&nbsp;
		<span style="color: #000066; font-weight: bold;">var</span> scope<span style="color: #339933;">=</span><span style="color: #000066; font-weight: bold;">this</span><span style="color: #339933;">;</span>
&nbsp;
		<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_socket</span> <span style="color: #339933;">=</span> net.<span style="color: #660066;">connect</span><span style="color: #009900;">&#40;</span>port<span style="color: #339933;">,</span> host<span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>
		<span style="color: #009900;">&#123;</span>
			Message.<span style="color: #660066;">SerialiseAndSend</span><span style="color: #009900;">&#40;</span>scope.<span style="color: #660066;">m_socket</span><span style="color: #339933;">,</span> MessageNames.<span style="color: #660066;">kReady</span><span style="color: #339933;">,</span> <span style="color: #009900;">&#123;</span>uid<span style="color: #339933;">:</span>uid<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span><span style="color: #339933;">,</span>
&nbsp;
	Update<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_socket</span> <span style="color: #339933;">&amp;&amp;</span> <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_player</span> <span style="color: #339933;">&amp;&amp;</span> Scalar.<span style="color: #660066;">RandInt</span><span style="color: #009900;">&#40;</span><span style="color: #CC0000;">50</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">==</span><span style="color: #CC0000;">0</span><span style="color: #009900;">&#41;</span>
		<span style="color: #009900;">&#123;</span>
			<span style="color: #000066; font-weight: bold;">var</span> keysDown <span style="color: #339933;">=</span> Scalar.<span style="color: #660066;">RandInt</span><span style="color: #009900;">&#40;</span><span style="color: #CC0000;">15</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
			<span style="color: #006600; font-style: italic;">// always fire</span>
			keysDown <span style="color: #339933;">|=</span> Player.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kSpaceD</span><span style="color: #339933;">;</span>
&nbsp;
			<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_lastKeysDown</span> <span style="color: #339933;">!=</span> keysDown<span style="color: #009900;">&#41;</span>
			<span style="color: #009900;">&#123;</span>
				Message.<span style="color: #660066;">SerialiseAndSend</span><span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_socket</span><span style="color: #339933;">,</span> MessageNames.<span style="color: #660066;">kPlayerInput</span><span style="color: #339933;">,</span>	<span style="color: #009900;">&#123;</span>m_keysDown<span style="color: #339933;">:</span>keysDown<span style="color: #339933;">,</span>
																					m_pos<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_player</span>.<span style="color: #660066;">m_pos</span><span style="color: #339933;">,</span>
																					m_angle<span style="color: #339933;">:</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_player</span>.<span style="color: #660066;">m_angle</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
				<span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">m_lastKeysDown</span> <span style="color: #339933;">=</span> keysDown<span style="color: #339933;">;</span>
			<span style="color: #009900;">&#125;</span>
		<span style="color: #009900;">&#125;</span>
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></td></tr></table></div>

<p>As you can see, the full extent of their AI involves sending a completely random key-state change at a random point at a probability of 1/51! Given how simple this is, I&#8217;m constantly surprised by how realistic they can seem. It goes to show that random events can go a long way toward emulating real behaviour in some cases.</p>
<p>Bots are created when the first player joins the game and are destroyed when there are zero real players left. In a PvP only game, it&#8217;s important to have bots because a lot of the time there wont be that many real players playing, which will lead to a bad play experience and bad reviews.</p>
<h2>Player personalisation</h2>
<p>It&#8217;s very important to be able to let players personalise themselves in a multi-player game. The simplest way to do this is to allow them to enter their own nickname. In this example it&#8217;s handled the same way as any other message; it gets broadcast to all clients who then update their copy of the changed name. The server also stores this new name so that subsequent players will have it serialised to them when they join. The name is displayed on each player after being run through the profanity filter!</p>
<div id="attachment_1970" style="width: 510px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/shop.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/shop.png" alt="" title="shop" width="500" height="331" class="size-full wp-image-1970" /></a><p class="wp-caption-text">Avatar customisation in 2D Space MMO</p></div>
<p>Simple stats tracking can also help make the game more fun, like a way for players to compare themselves against others. In the demo accompanying this article the number in brackets after the player&#8217;s name is the number of times the player has died subtracted from the kill count.</p>
<h2>Version control</h2>
<p>Once you&#8217;ve made your multi-player game and distributed it onto the portals, it&#8217;s very important that you are able to update it and fix any bugs you find without having to manually locate and alter each copy of the game on every portal. You can do this by creating a boot-loader which loads the main part of the game from a fixed location which you control. Of course there are technicalities associated with this, not least of which is browser-caching. You can read more about how to solve this <a href="http://www.wildbunny.co.uk/blog/2012/06/13/flash-portals-and-version-control/">in this article I wrote a while back</a>.</p>
<h2>Buy the source code</h2>
<p>As ever you can buy the source-code accompanying this article! Your purchases help me to be able to continue writing articles like these.</p>
<p>It will give you the complete prototype as shown in playable form above, with both server and client code. You will need either <a href="http://www.flashdevelop.org/">Flash Develop</a> or <a href="http://www.sapphiresteel.com/Products/amethyst-ide/article/amethyst-product-page">Amethyst</a> to build the client-side code and of course you will need <a href="http://nodejs.org/">node.js</a> installed to run the server-side. You will also need <a href="http://www.adobe.com/devnet/flex/flex-sdk-download.html">Flex SDK version 4.5.1 or above</a>. If you would like to edit the assets included with this demo, you will need Adobe Flash CS4+. Note that you cannot build the client side code with only the Flash IDE.</p>
<p>It comes in two versions, a personal edition which you are free to use for your own, non commercial purposes and a commercial version which allows you to use the code in any number of different commercial products or games:</p>
<p>Personal use licence &#8211; USD 49.99<br />
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
 <input type="hidden" name="business" value="paypal@wildbunny.co.uk" />
 <input type="hidden" name="cmd" value="_xclick" />
 <!-- Instant Payment Notification & Return Page Details -->
 <input type="hidden" name="notify_url" value="http://www.wildbunny.co.uk/blog/?s2member_paypal_notify=1" />
 <input type="hidden" name="cancel_return" value="http://www.wildbunny.co.uk/blog/" />
 <input type="hidden" name="return" value="http://www.wildbunny.co.uk/blog/?s2member_paypal_return=1" />
 <input type="hidden" name="rm" value="2" />
 <!-- Configures Basic Checkout Fields -->
 <input type="hidden" name="lc" value="" />
 <input type="hidden" name="no_shipping" value="1" />
 <input type="hidden" name="no_note" value="1" />
 <input type="hidden" name="custom" value="www.wildbunny.co.uk" />
 <input type="hidden" name="currency_code" value="USD" />
 <input type="hidden" name="page_style" value="paypal" />
 <input type="hidden" name="charset" value="utf-8" />
 <input type="hidden" name="item_name" value="Source accompanying How to make a multi-player game - personal" />
 <input type="hidden" name="item_number" value="sp:1735:72" />
 <input type="hidden" name="amount" value="49.99" />
 <!-- Configures s2Member's Unique Invoice ID/Code  -->
 <input type="hidden" name="invoice" value="53cf62f00d13c~54.196.167.69" />
 <!-- Associates Purchase With A User/Member (when/if applicable) -->
 <input type="hidden" name="on0" value="Originating Domain" />
 <input type="hidden" name="os0" value="www.wildbunny.co.uk" />
 <!-- Identifies The Customer's IP Address For Tracking -->
 <input type="hidden" name="on1" value="Customer IP Address" />
 <input type="hidden" name="os1" value="54.196.167.69" />
 <!-- Displays The PayPal Image Button -->
 <input type="image" src="https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif" style="width:auto; height:auto; border:0;" alt="PayPal" />
</form></p>
<p>Commercial use licence &#8211; USD 199.99<br />
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
 <input type="hidden" name="business" value="paypal@wildbunny.co.uk" />
 <input type="hidden" name="cmd" value="_xclick" />
 <!-- Instant Payment Notification & Return Page Details -->
 <input type="hidden" name="notify_url" value="http://www.wildbunny.co.uk/blog/?s2member_paypal_notify=1" />
 <input type="hidden" name="cancel_return" value="http://www.wildbunny.co.uk/blog/" />
 <input type="hidden" name="return" value="http://www.wildbunny.co.uk/blog/?s2member_paypal_return=1" />
 <input type="hidden" name="rm" value="2" />
 <!-- Configures Basic Checkout Fields -->
 <input type="hidden" name="lc" value="" />
 <input type="hidden" name="no_shipping" value="1" />
 <input type="hidden" name="no_note" value="1" />
 <input type="hidden" name="custom" value="www.wildbunny.co.uk" />
 <input type="hidden" name="currency_code" value="USD" />
 <input type="hidden" name="page_style" value="paypal" />
 <input type="hidden" name="charset" value="utf-8" />
 <input type="hidden" name="item_name" value="Source accompanying How to make a multi-player game - commercial" />
 <input type="hidden" name="item_number" value="sp:1972:72" />
 <input type="hidden" name="amount" value="199.99" />
 <!-- Configures s2Member's Unique Invoice ID/Code  -->
 <input type="hidden" name="invoice" value="53cf62f00d5a4~54.196.167.69" />
 <!-- Associates Purchase With A User/Member (when/if applicable) -->
 <input type="hidden" name="on0" value="Originating Domain" />
 <input type="hidden" name="os0" value="www.wildbunny.co.uk" />
 <!-- Identifies The Customer's IP Address For Tracking -->
 <input type="hidden" name="on1" value="Customer IP Address" />
 <input type="hidden" name="os1" value="54.196.167.69" />
 <!-- Displays The PayPal Image Button -->
 <input type="image" src="https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif" style="width:auto; height:auto; border:0;" alt="PayPal" />
</form></p>
<p><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Subscribers can access the source here</a></p>
<p>If it seems expensive, bare in mind that it took a couple of solid weeks of programming to produce, which would have been around $3500 if I were contracted&#8230; Not to mention the many weeks and days it took to arrive at a solution powerful enough to handle a twitch reaction game over a 3G connection!</p>
<p>That&#8217;s all for now! Until next time, have fun!</p>
<p>Cheers, Paul.</p>

				<!-- Social Sharing Toolkit v2.0.4 | http://www.marijnrongen.com/wordpress-plugins/social_sharing_toolkit/ -->
				<div class="mr_social_sharing_wrapper"><span class="mr_social_sharing"><script type="text/javascript">
							  reddit_url = "http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/";
							  reddit_title = "How to make a multi-player game � part 2";
							</script>
							<script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></span><span class="mr_social_sharing"><a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" data-count="horizontal" data-text="How to make a multi-player game � part 2">Tweet</a></span><span class="mr_social_sharing"><iframe src="https://www.facebook.com/plugins/like.php?locale=en_US&amp;href=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2012%2F11%2F20%2Fhow-to-make-a-multi-player-game-part-2%2F&amp;layout=button_count&amp;show_faces=false&amp;width=90px&amp;height=21px" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></span><span class="mr_social_sharing"><div id="fb-root"></div><fb:send href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" font=""></fb:send></span><span class="mr_social_sharing"><g:plusone size="medium" href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/"></g:plusone></span><span class="mr_social_sharing"><a href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2012%2F11%2F20%2Fhow-to-make-a-multi-player-game-part-2%2F&amp;title=How+to+make+a+multi-player+game+%96+part+2" target="_blank" class="mr_social_sharing_popup_link"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/images/buttons/stumbleupon.png" alt="Submit to StumbleUpon" title="Submit to StumbleUpon"/></a></span></div><span style="clear:both;display:none;"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-spamfree/img/wpsf-img.php" width="0" height="0" alt="" style="border-style:none;width:0px;height:0px;display:none;" /></span>											</div><!-- .entry-content -->

					<div id="entry-author-info">
						<div id="author-avatar">
							<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=60&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />						</div><!-- #author-avatar -->
						<div id="author-description">
							<h2>About Paul Firth</h2>
							A games industry veteran of ten years, seven of which spent at Sony Computer Entertainment Europe, he has had key technical roles on triple-A titles like the Bafta Award Winning Little Big Planet (PSP), 24: The Game (PS2), special effects work on Heavenly Sword (PS3), some in-show graphics on the BBC�s version of Robot Wars, the TV show, as well as a few more obscure projects.
&nbsp;
Now joint CEO of Wildbunny, he is able to give himself hiccups simply by coughing.
&nbsp;
1NobNQ88UoYePFi5QbibuRJP3TtLhh65Jp							<div id="author-link">
								<a href="http://www.wildbunny.co.uk/blog/author/paulfirth/">
									View all posts by Paul Firth <span class="meta-nav">&rarr;</span>								</a>
							</div><!-- #author-link	-->
						</div><!-- #author-description -->
					</div><!-- #entry-author-info -->

					<div class="entry-utility">
						This entry was posted in <a href="http://www.wildbunny.co.uk/blog/category/as3/" title="View all posts in AS3" rel="category tag">AS3</a>, <a href="http://www.wildbunny.co.uk/blog/category/json-2/" title="View all posts in JSON" rel="category tag">JSON</a>, <a href="http://www.wildbunny.co.uk/blog/category/multi-player/" title="View all posts in Multi-player" rel="category tag">Multi-player</a>, <a href="http://www.wildbunny.co.uk/blog/category/server-side/" title="View all posts in Server side" rel="category tag">Server side</a>, <a href="http://www.wildbunny.co.uk/blog/category/technical/" title="View all posts in Technical" rel="category tag">Technical</a> and tagged <a href="http://www.wildbunny.co.uk/blog/tag/adobe-flash/" rel="tag">adobe flash</a>, <a href="http://www.wildbunny.co.uk/blog/tag/communication/" rel="tag">communication</a>, <a href="http://www.wildbunny.co.uk/blog/tag/game-developement/" rel="tag">game developement</a>, <a href="http://www.wildbunny.co.uk/blog/tag/json/" rel="tag">json</a>, <a href="http://www.wildbunny.co.uk/blog/tag/server/" rel="tag">server</a>, <a href="http://www.wildbunny.co.uk/blog/tag/tutorial/" rel="tag">tutorial</a>. Bookmark the <a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" title="Permalink to " rel="bookmark">permalink</a>.											</div><!-- .entry-utility -->
				</div><!-- #post-## -->

				<div id="nav-below" class="navigation">
					<div class="nav-previous"><a href="http://www.wildbunny.co.uk/blog/2012/11/07/understanding-binary/" rel="prev"><span class="meta-nav">&larr;</span> Understanding binary</a></div>
					<div class="nav-next"><a href="http://www.wildbunny.co.uk/blog/2012/11/30/how-to-make-a-facebook-social-game/" rel="next">How to make a Facebook social game <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-below -->

				
			<div id="comments">


			<h3 id="comments-title">11 Responses to <em>How to make a multi-player game � part 2</em></h3>


			<ol class="commentlist">
					<li class="comment even thread-even depth-1" id="li-comment-1725">
		<div id="comment-1725">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/60a1f946771ed646a1b6c7e8b0e16937?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.redblobgames.com/' rel='external nofollow' class='url'>Amit Patel</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-1725">
			November 21, 2012 at 3:26 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Great article!</p>
<p>A data storage tip for your readers: if you&#8217;re going to store data the user has entered, think about the &#8216;type&#8217; and the &#8216;filters&#8217; separately. For example, a name might be alphanumeric (type) and no profanity (filters). Before saving on the server, correct the type but don&#8217;t apply the filter. Apply the filter when you&#8217;re displaying it on the client.  That way if you later change the filter, or if you allow users to turn on/off the filter, or you want to display in a different context, you still have the original data and can transform it again.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=1725#respond' onclick='return addComment.moveForm("comment-1725", "1725", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1728">
		<div id="comment-1728">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-1728">
			November 21, 2012 at 9:14 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Amit,</p>
<p>Yes, this is good advice. That&#8217;s why I filter on the client and not the server. I&#8217;ll update the article to reflect that point <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=1728#respond' onclick='return addComment.moveForm("comment-1728", "1728", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-1729">
		<div id="comment-1729">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/c6eec39511b70c86c1a12d4443aa650c?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Spiderpizza</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-1729">
			November 22, 2012 at 12:51 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>You should consider writing a book exclusively about the networking part of multiplayer games (design, development, maintenance etc). Of the dozen game development books  I&#8217;ve seen, the networking part is always lacking, usually textbook copy-pasted and new developers have complained about it to death. The market is there. Capitalize it.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=1729#respond' onclick='return addComment.moveForm("comment-1729", "1729", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1" id="li-comment-1730">
		<div id="comment-1730">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/3f6d8580b1e81581eedfb24182e6a096?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Ryan</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-1730">
			November 22, 2012 at 6:53 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I&#8217;m not sure I fully get the need to sync the clocks. Is it purely to work out the lag?</p>
<p>If the client knows the lag is 250ms and receives a key event from the server, should it skip the player ahead to where it would be if it received the key event 250ms earlier? Or does the drift adjustment account for that?</p>
<p>If drift fixes that, then why do we care about the lag?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=1730#respond' onclick='return addComment.moveForm("comment-1730", "1730", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-1731">
		<div id="comment-1731">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-1731">
			November 22, 2012 at 7:42 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Ryan,</p>
<p>Good question &#8211; the answer is that although the latency value is never used with key-presses it can be very useful in other cases, especially where there is a long-term interpolation taking place. There isn&#8217;t an example of this in the demo, but as I explain in the article I do use it for calculating the positions of the asteroids in 2D Space MMO and I also use it when the UFOs are created; because they move at constant speed in a constant direction their positions would be off if I didn&#8217;t extrapolate their position when the message is received from the server.</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=1731#respond' onclick='return addComment.moveForm("comment-1731", "1731", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-2135">
		<div id="comment-2135">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/dd96d6607c4afddf8b8e75367e5684f9?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Indie 11</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-2135">
			April 2, 2013 at 7:23 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Nice tutorial paul! Can you make a short tutorial on how turn based multiplayer games like worms?Will be easier to understand <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=2135#respond' onclick='return addComment.moveForm("comment-2135", "2135", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-3676">
		<div id="comment-3676">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/c9891546ce5ce5c3c3aadc7ea8c8cfce?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">rikard</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-3676">
			March 4, 2014 at 6:40 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi there! Great article. I&#8217;m trying out your solution to server authority and wondering if you have any suggestions on coping with the difference in velocities (in the integration step) this technique introduces.  </p>
<p>Say we have the following scenario:<br />
player1 &#8212;&#8212;&#8212;&#8211;| keydown |&#8212;&#8212;&#8211;| keyup |&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;&gt;<br />
server   &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;| keydown | &#8212;&#8212;&#8212;&#8212;&#8212;| keyup |&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;&gt;<br />
player2 &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;| keydown | &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;| keyup |&#8212;-&gt;</p>
<p>You mention that sending along the current position mitigates the problem with drift, which would be true if the movement integration had fixed velocities. However, this is rarely the case as any physic /game engine would calculate new velocities for each integration step, for example react to keyboard inputs by gradually increasing the velocity of the player (accelerate). By sending along the current position, you only make sure that the position is corrected, but the difference in time due to a non constant latency would mean the different clients would let the keyboard events &#8220;exist&#8221; and affect velocities differently. </p>
<p>I guess this isn&#8217;t a huge problem if the velocity is clamped at a relatively  small value, but say we have a long acceleration curve before reaching the max velocity, the drift could lead to all sort of problems.</p>
<p>Am I missing something? Looked through the source code and can&#8217;t really find anything that accommodates for this. Or is the effect usually negligible in a real world scenario? Any ideas / suggestions would be greatly appreciated.</p>
<p>Thanks!</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=3676#respond' onclick='return addComment.moveForm("comment-3676", "3676", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-3677">
		<div id="comment-3677">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-3677">
			March 4, 2014 at 7:20 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Rikard,</p>
<p>It really depends on what the range of different velocities are &#8211; if you have a fairly low maximum velocity, as is the case in the demo, this isn&#8217;t a problem. In general its only a problem when the player is doing a lot of velocity changes as it will eventually correct itself anyway.</p>
<p>In the demo the effect is negligible, but you may have very different requirements <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=3677#respond' onclick='return addComment.moveForm("comment-3677", "3677", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-3" id="li-comment-3678">
		<div id="comment-3678">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/c9891546ce5ce5c3c3aadc7ea8c8cfce?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">rikard</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-3678">
			March 4, 2014 at 9:41 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Thanks for the fast response!</p>
<p>I have some slightly different requirements yes (more interaction between players which make things a bit more complicated). I ended up sending along a frame delta (the difference in iterations of the integration loop between the previous and next event) with the events. Then I just integrate the velocities at the receiving end based on the difference between the actual / real frame delta and what&#8217;s already been run. Seems to work.</p>
<p> I should add that I&#8217;m testing with a simulated latency which is probably set to be worse than what most people would experience, so I might be borrowing trouble here <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers!</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=3678#respond' onclick='return addComment.moveForm("comment-3678", "3678", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-3722">
		<div id="comment-3722">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/5a460d97c433d98e256fab4df82c8e56?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">David</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-3722">
			May 4, 2014 at 6:27 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Paul,</p>
<p>Would you be able to provide a detailed step-by-step guide on how to setup a test environment to install and run this game?</p>
<p>I purchased the script <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /> </p>
<p>Many thanks,</p>
<p>David</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=3722#respond' onclick='return addComment.moveForm("comment-3722", "3722", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-3723">
		<div id="comment-3723">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#comment-3723">
			May 4, 2014 at 6:37 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi David,</p>
<p>I recommend becoming familiar with node.js and following their tutorials for setting up a server, then it should be a simple matter to get the client to connect once your server is up and running.</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/?replytocom=3723#respond' onclick='return addComment.moveForm("comment-3723", "3723", "respond", "1932")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
			</ol>



								<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/comment-page-1/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://www.wildbunny.co.uk/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='1932' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
							<script type='text/javascript'>
	<!--
	refJS = escape( document[ 'referrer' ] );
	document.write("<input type='hidden' name='refJS' value='"+refJS+"'>");
	// -->
	</script>
	<p style="font-size:9px;clear:both;">WP-SpamFree by <a rel="nofollow" href="http://www.polepositionmarketing.com/library/wp-spamfree/" title="WP-SpamFree WordPress Anti-Spam Plugin" >Pole Position Marketing</a>

					</form>
							</div><!-- #respond -->
			
</div><!-- #comments -->


			</div><!-- #content -->
		</div><!-- #container -->


		<div id="primary" class="widget-area" role="complementary">
			<ul class="xoxo">

<li id="search-3" class="widget-container widget_search"><h3 class="widget-title">Search</h3><form role="search" method="get" id="searchform" class="searchform" action="http://www.wildbunny.co.uk/blog/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form></li><li id="categories-3" class="widget-container widget_categories"><h3 class="widget-title">Choose a category</h3><select name='cat' id='cat' class='postform' >
	<option value='-1'>Select Category</option>
	<option class="level-0" value="104">Algorithmic trading&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="7">Animal Army&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="35">AS3&nbsp;&nbsp;(19)</option>
	<option class="level-0" value="44">Beginner&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="114">Bitcoin&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="6">Business&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="73">Chip tunes&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="71">Circles&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="40">Collision Detection&nbsp;&nbsp;(8)</option>
	<option class="level-0" value="53">Developer love&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="117">Entity systems&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="103">Finance&nbsp;&nbsp;(6)</option>
	<option class="level-0" value="101">Full games&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="67">Geometry&nbsp;&nbsp;(9)</option>
	<option class="level-0" value="58">Graphics&nbsp;&nbsp;(9)</option>
	<option class="level-0" value="100">JSON&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="42">Ladders and AI&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="96">learning-to-program&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="28">Making angry birds&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="47">Micro-transactions&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="90">Multi-player&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="72">Music&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="118">Optimisation&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="41">Parallax and Tiles&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="65">paypal&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="97">Physics&nbsp;&nbsp;(8)</option>
	<option class="level-0" value="36">Platform game&nbsp;&nbsp;(5)</option>
	<option class="level-0" value="68">Polygons&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="98">Portals&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="52">Promotion&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="93">Self improvement&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="66">Server side&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="99">Silverlight&nbsp;&nbsp;(5)</option>
	<option class="level-0" value="45">Stencyl&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="5">Technical&nbsp;&nbsp;(28)</option>
	<option class="level-0" value="1">Uncategorized&nbsp;&nbsp;(1)</option>
</select>

<script type='text/javascript'>
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "http://www.wildbunny.co.uk/blog/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</li>			</ul>
		</div><!-- #primary .widget-area -->


		<div id="secondary" class="widget-area" role="complementary">
			<ul class="xoxo">
				<li id="user_bio-2" class="widget-container widget_user_bio"><h3 class="widget-title"><div style="text-align:center">About the author</div></h3><div class="ub-grav" style="margin:5px 5px 0px 5px;text-align:center;"><img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=128&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D128&amp;r=G' class='avatar avatar-128 photo' height='128' width='128' /></div>A games industry veteran of ten years, seven of which spent at Sony Computer Entertainment Europe, he has had key technical roles on triple-A titles like the Bafta Award Winning Little Big Planet (PSP), 24: The Game (PS2), special effects work on Heavenly Sword (PS3), some in-show graphics on the BBC�s version of Robot Wars, the TV show, as well as a few more obscure projects.
&nbsp;
Now joint CEO of Wildbunny, he is able to give himself hiccups simply by coughing.
&nbsp;
1NobNQ88UoYePFi5QbibuRJP3TtLhh65Jp
</li><li id="widget_featured-posts-2" class="widget-container widget_featured-posts"><h3 class="widget-title">Featured Posts</h3>	
	<ul id="yiw-featured-post">
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/giantStar.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="How to make a 2d Platform Game &#8211; part 1" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/">How to make a 2d Platform Game &#8211; part 1</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/flashLogo.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="How to make games" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/">How to make games</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/04/real-pong.jpg&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Physics engines for dummies" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/">Physics engines for dummies</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2013/04/17/algorithmic-trading-for-dummies-part-2/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2013/04/stop-loss.jpg&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Algorithmic trading for dummies &#8211; part 2" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2013/04/17/algorithmic-trading-for-dummies-part-2/">Algorithmic trading for dummies &#8211; part 2</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/shop.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="How to make a multi-player game � part 2" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/">How to make a multi-player game � part 2</a>
	       </h4>
	   </li>
	</ul>
	
	</li><li id="advanced-featured-page-widget-3" class="widget-container widget_advanced-featured-page-widget"><h3 class="widget-title">Tutorials with code to buy</h3><div class="post-2295 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-multiplayer-asteroids-engine/" title="Buy multiplayer asteroids engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/multiplayer.jpg" class="attachment-200 by 200 image" alt="multiplayer" /></a></div><!--end post_class()-->

</li><li id="advanced-featured-page-widget-2" class="widget-container widget_advanced-featured-page-widget"><div class="post-2299 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-angrybirds-alike-engine/" title="Buy Angrybirds-alike engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/birds.jpg" class="attachment-200 by 200 image" alt="birds" /></a></div><!--end post_class()-->

</li><li id="advanced-featured-page-widget-4" class="widget-container widget_advanced-featured-page-widget"><div class="post-2301 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-platform-game-engine/" title="Buy platform game engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/platform.png" class="attachment-200 by 200 image" alt="platform" /></a></div><!--end post_class()-->

</li><li id="wp125" class="widget-container wp125_write_ads_widget">
<h3 class="widget-title">Affiliates</h3><div id="wp125adwrap_1c">
<div class="wp125ad odd"><a href="index.php?adclick=10" title="plus500" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2013/03/plus500-200x200.gif" alt="plus500" /></a></div>
<div class="wp125ad even"><a href="https://www.cavirtex.com/Z/50680" title="cavirtex" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/03/caVirtex.gif" alt="cavirtex" /></a></div>
<div class="wp125ad odd"><a href="http://www.freelancer.co.uk/affiliates/wildbunny2/" title="freelancer" rel="nofollow"target='_blank'><img src="/images/freelancer.png" alt="freelancer" /></a></div>
<div class="wp125ad even"><a href="http://www.shareasale.com/r.cfm?b=531904&u=949687&m=41388&urllink=&afftrack=" title="wp engine" rel="nofollow"target='_blank'><img src="http://www.shareasale.com/image/41388/sas_banner_250x250.jpg" alt="wp engine" /></a></div>
<div class="wp125ad odd"><a href="http://www.wildbunny.co.uk/blog/advertise-here/" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/images/blankAdvert.png" alt="" /></a></div>
</div>
</li><li id="ezadswidget-4" class="widget-container ezAdsWidget"><h3 class="widget-title">My MetaTrader 5 products</h3><!-- Easy AdSense V2.79 -->
<!-- Widg[count: 2] -->
<div class="ezAdsense adsense adsense-widget"><div style="text-align:center;margin:0px; "><div style="width:350px">
<a target="_blank" href="http://mql5.com/dzz" title="Download VWAP technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/925/mid" alt="Buy VWAP customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/e08" title="Download Average Spread technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/951/mid" alt="Buy Average Spread customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/e09" title="Download Bid Ask Volumes technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/950/mid" alt="Buy Bid Ask Volumes customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/po9" title="Download Market Activity technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/963/mid" alt="Buy Market Activity customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/poa" title="Download Precision Scalper trading system from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/972/mid" alt="Buy Precision Scalper trading application in the store of automated robot systems" width="400" height="60"></a>
</div></div></div></li>			</ul>
		</div><!-- #secondary .widget-area -->

	</div><!-- #main -->

	<div id="footer" role="contentinfo">
		<div id="colophon">



			<div id="site-info">
				<a href="http://www.wildbunny.co.uk/blog/" title="Wildbunny blog" rel="home">
					Wildbunny blog				</a>
			</div><!-- #site-info -->

			<div id="site-generator">
								<a href="http://wordpress.org/"
						title="Semantic Personal Publishing Platform" rel="generator">
					Proudly powered by WordPress.				</a>
			</div><!-- #site-generator -->

		</div><!-- #colophon -->
	</div><!-- #footer -->

</div><!-- #wrapper -->

		
		<script type="text/javascript">
			//<![CDATA[
			jQuery(document).ready(function() {
				var a = '<div id="cookie-law-info-bar"><span>This website uses cookies to improve your experience. We\'ll assume you\'re ok with this, but you can opt-out if you wish.<a href=\"#\" id=\"cookie_action_close_header\"  class=\"medium cli-plugin-button cli-plugin-main-button\" >Accept</a> <a href=\"http://www.wildbunny.co.uk/blog/privacy-policy/\" id=\"CONSTANT_OPEN_URL\" target=\"_new\"  class=\"cli-plugin-main-link\"  >Read More</a></span></div>';
				var b = '{"animate_speed_hide":"500","animate_speed_show":"500","background":"#fff","border":"#444","border_on":true,"button_1_button_colour":"#000","button_1_button_hover":"#000000","button_1_link_colour":"#fff","button_1_as_button":true,"button_2_button_colour":"#333","button_2_button_hover":"#292929","button_2_link_colour":"#444","button_2_as_button":false,"font_family":"inherit","notify_animate_hide":true,"notify_animate_show":false,"notify_div_id":"#cookie-law-info-bar","notify_position_horizontal":"right","notify_position_vertical":"bottom","showagain_tab":false,"showagain_background":"#fff","showagain_border":"#000","showagain_div_id":"#cookie-law-info-again","showagain_x_position":"50%","text":"#000"}';
				cli_show_cookiebar(a,b);
				
							});
			//]]>
		</script>
		
		 
			<a id="FollowMeTabLeftLg" onClick="showFollowMe()" href="#" style="border-bottom:none;"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/leftlg.gif" border="0" /></a>	

<div id="FollowMeBubbleBG" style="visibility:hidden;"></div>
<div id="FollowMeBubble" style="visibility:hidden;border-bottom:none;">


<div class="top" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_top.gif');width:329px;height:60px;float:left;display:block;border-bottom:none;">
<a id="close" onClick="hideFollowMe()" href="#" style="border-bottom:none"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/close.png" border="0" /> </a>
<!-- <a id="grab" target="_blank" title="grab this" href="http://www.ignitesocialmedia.com/tools/follow-me/"><span>grab this</span></a>--></div>
<div class="mid" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_mid.gif');width:329px;background-repeat:repeat-y;float:left;">
<div id="stretch">
<span><a title="
Twitter" target="_blank" href="http://twitter.com/paul_m_firth" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
twitter.png" border="0" alt="
Twitter" /> 
Twitter</a></span>
<span><a title="
Facebook" target="_blank" href="http://www.facebook.com/WildbunnyLtd" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
facebook.png" border="0" alt="
Facebook" /> 
Facebook</a></span>
<span><a title="
RSS" target="_blank" href="http://wildbunny.co.uk/blog/feed" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
rss.png" border="0" alt="
RSS" /> 
RSS</a></span>
</div></div>
<div class="bottom" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_bottom.gif');height:34px;width:329px;clear:both;float:left;">
<a id="grab" target="_blank" title="grab this" style="border-bottom:none;" href="http://www.ignitesocialmedia.com/tools/follow-me/"><span>grab this</span></a>
</div>
<div class="grab" style="width:329px;clear:both;float:left;"><a style="border-bottom:none;" href="http://www.ignitesocialmedia.com/tools/follow-me/"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_grab.gif" /></a></div>
</div>







<div id="thsp-sticky-header">
	<div id="thsp-sticky-header-inner">
		<div id="thsp-sticky-header-title">
			<a href="http://www.wildbunny.co.uk/blog" title="Developer knowledge centre">Wildbunny blog</a>
		</div>
		
		<ul id="thsp-sticky-header-menu" class="menu"><li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-272"><a href="/blog/">All articles</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1302"><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Vector maths</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-319"><a href="http://www.wildbunny.co.uk/blog/contact-me/">Contact me</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2072"><a href="http://www.wildbunny.co.uk/blog/hire-me/">Hire me</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-446"><a href="http://www.wildbunny.co.uk/blog/membership-sign-up-page/">Subscribe!</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-466"><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Members</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1183"><a href="/blog/buy-source-code">Buy source-code</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1694"><a href="http://www.wildbunny.co.uk/blog/privacy-policy/">Privacy policy</a></li>
</ul>	</div><!-- #thsp-sticky-header-inner -->
</div><!-- #thsp-sticky-header --><script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/s2member/s2member-o.php?ws_plugin__s2member_js_w_globals=1&#038;qcABC=1&#038;ver=140105-140105-2848662513'></script>

			<!-- SwfObj: Register SWFs on this page. -->
			<script type="text/javascript">
					swfobject.registerObject("swfobj_0", "8.0.0", "http://www.wildbunny.co.uk/blog/wp-content/plugins/swfobj/expressInstall.swf");
			</script>
</body>
</html>

