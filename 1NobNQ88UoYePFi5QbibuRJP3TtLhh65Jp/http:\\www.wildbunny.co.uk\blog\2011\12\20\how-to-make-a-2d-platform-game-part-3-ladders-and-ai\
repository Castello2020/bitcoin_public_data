http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/
HTTP/1.0 200 OK
Date: Thu, 24 Jul 2014 14:39:30 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
Set-Cookie: PHPSESSID=654r4tht6bikpsrsnc7qlnu6t7; path=/
X-Pingback: http://www.wildbunny.co.uk/blog/xmlrpc.php
Link: <http://www.wildbunny.co.uk/blog/?p=829>; rel=shortlink
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 26668
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8" />
<title>How to make a 2d Platform Game &#8211; part 3 ladders and AI | Wildbunny blog</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://www.wildbunny.co.uk/blog/wp-content/themes/twentyten/style.css?v=0" />
<link rel="pingback" href="http://www.wildbunny.co.uk/blog/xmlrpc.php" />

<!-- BEGIN Metadata added by Add-Meta-Tags WordPress plugin
Get the plugin at: http://www.g-loaded.eu/2006/01/05/add-meta-tags-wordpress-plugin/ -->
<meta name="description" content="Hello and welcome back to my blog! This is part 3 in a series of articles where I talk about how to go about making a 2d platform game like this one:  Click the game to give it focus..." />
<meta name="keywords" content="as3, ladders and ai, platform game, technical, adobe flash, ai, bounding box, game developement, platform game, platformer, tutorial" />
<meta name="blogcatalog" content="9BC10671562" />
<div id="ScribCode634274886"></div>
<!-- END Metadata added by Add-Meta-Tags WordPress plugin -->

<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; Feed" href="http://www.wildbunny.co.uk/blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; Comments Feed" href="http://www.wildbunny.co.uk/blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; How to make a 2d Platform Game &#8211; part 3 ladders and AI Comments Feed" href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/feed/" />
<link rel='stylesheet' id='bm-author-donations-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/bitmate-author-donations/style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cntctfrm_stylesheet-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/contact-form-plugin/css/style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cookielawinfo-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/css/cli-style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cookielawinfo-table-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/css/cli-tables.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='oikCSS-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/oik/oik.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='bwlinkCSS-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/oik/bwlink.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp125style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/wp125/wp125.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='thsp-sticky-header-plugin-styles-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/sticky-header/css/public.css?ver=1.0.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='featured-post-css-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/featured-post.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='ws-plugin--s2member-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/s2member/s2member-o.php?ws_plugin__s2member_css=1&#038;qcABC=1&#038;ver=140105-140105-2848662513' type='text/css' media='all' />
<link rel='stylesheet' id='mr_social_sharing-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/style.css?ver=3.8.2' type='text/css' media='all' />
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/swfobj/swfobject.js?ver=2.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/comment-reply.min.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/js/jquery.cookie.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/js/cookielawinfo.js?ver=3.8.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var StickyHeaderParams = {"show_at":"200","hide_if_narrower":"600"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/sticky-header/js/public.js?ver=1.0.0'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/script.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/googleplus.js.php?lang=en_US&#038;ver=3.8.2'></script>
<script type='text/javascript' src='http://apis.google.com/js/plusone.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://connect.facebook.net/en_US/all.js?ver=3.8.2#xfbml=1'></script>
<script type='text/javascript' src='http://platform.twitter.com/widgets.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.wildbunny.co.uk/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.wildbunny.co.uk/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='How to make a 2d platform game &#8211; part 2 collision detection' href='http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/' />
<link rel='next' title='How to make games' href='http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/' />
<meta name="generator" content="WordPress 3.8.2" />
<link rel='canonical' href='http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/' />
<link rel='shortlink' href='http://www.wildbunny.co.uk/blog/?p=829' />
<script type="text/javascript" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/js/bubble.js"></script>
<link rel="stylesheet" type="text/css" href="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/css/style.css" />
<style type="text/css">
<!-- Silverlight WordPress Plugin -->
#silverlightControlHost{height:100%;}
</style>
<!-- Protected by WP-SpamFree v2.1.1.2 :: JS BEGIN -->
<script type="text/javascript" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-spamfree/js/wpsfv2-js.php"></script> 
<!-- Protected by WP-SpamFree v2.1.1.2 :: JS END -->

		<style type="text/css">
			#thsp-sticky-header {
				background-color: #181818;
			}
			#thsp-sticky-header,
			#thsp-sticky-header a {
				color: #f9f9f9 !important;
			}
											</style>
	<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #EAEAEA; }
</style>
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">window.google_analytics_uacct = "ca-pub-4897461488762721";</script>
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-16999711-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
</head>

<body class="single single-post postid-829 single-format-standard custom-background">
<div id="wrapper" class="hfeed">
	<div id="header">
		<div id="masthead">
			<div id="branding" role="banner">
								<div id="site-title">
					<span>
						<a href="http://www.wildbunny.co.uk/blog/" title="Wildbunny blog" rel="home">Wildbunny blog</a>
					</span>
				</div>
				<div id="site-description">Developer knowledge centre</div>

										<img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/02/bunnyWP1.gif" width="940" height="198" alt="" />
								</div><!-- #branding -->

			<div id="access" role="navigation">
			  				<div class="skip-link screen-reader-text"><a href="#content" title="Skip to content">Skip to content</a></div>
								<div class="menu-header"><ul id="menu-flowhub-header" class="menu"><li id="menu-item-272" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-272"><a href="/blog/">All articles</a></li>
<li id="menu-item-1302" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1302"><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Vector maths</a></li>
<li id="menu-item-319" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-319"><a href="http://www.wildbunny.co.uk/blog/contact-me/">Contact me</a></li>
<li id="menu-item-2072" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2072"><a href="http://www.wildbunny.co.uk/blog/hire-me/">Hire me</a></li>
<li id="menu-item-446" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-446"><a href="http://www.wildbunny.co.uk/blog/membership-sign-up-page/">Subscribe!</a></li>
<li id="menu-item-466" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-466"><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Members</a></li>
<li id="menu-item-1183" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1183"><a href="/blog/buy-source-code">Buy source-code</a></li>
<li id="menu-item-1694" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1694"><a href="http://www.wildbunny.co.uk/blog/privacy-policy/">Privacy policy</a></li>
</ul></div>			</div><!-- #access -->
		</div><!-- #masthead -->
	</div><!-- #header -->

	<div id="main">

		<div id="container">
			<div id="content" role="main">


				<div id="nav-above" class="navigation">
					<div class="nav-previous"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/" rel="prev"><span class="meta-nav">&larr;</span> How to make a 2d platform game &#8211; part 2 collision detection</a></div>
					<div class="nav-next"><a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/" rel="next">How to make games <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-above -->

				<div id="post-829" class="post-829 post type-post status-publish format-standard hentry category-as3 category-ladders-and-ai category-platform-game category-technical tag-adobe-flash tag-ai tag-bounding-box tag-game-developement tag-platform-game-2 tag-platformer tag-tutorial">
					<h1 class="entry-title">How to make a 2d Platform Game &#8211; part 3 ladders and AI</h1>

					<div class="entry-meta">
						<span class="meta-prep meta-prep-author">Posted on</span> <a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/" title="3:21 pm" rel="bookmark"><span class="entry-date">December 20, 2011</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="http://www.wildbunny.co.uk/blog/author/paulfirth/" title="View all posts by Paul Firth">Paul Firth</a></span>					</div><!-- .entry-meta -->

					<div class="entry-content">
						<img width="106" height="150" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeletonLand.png" class="attachment-single-post-thumbnail wp-post-image" alt="Lands anim" />						
				<!-- Social Sharing Toolkit v2.0.4 | http://www.marijnrongen.com/wordpress-plugins/social_sharing_toolkit/ -->
				<div class="mr_social_sharing_wrapper"><span class="mr_social_sharing"><script type="text/javascript">
							  reddit_url = "http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/";
							  reddit_title = "How to make a 2d Platform Game – part 3 ladders and AI";
							</script>
							<script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></span><span class="mr_social_sharing"><a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/" data-count="horizontal" data-text="How to make a 2d Platform Game – part 3 ladders and AI">Tweet</a></span><span class="mr_social_sharing"><iframe src="https://www.facebook.com/plugins/like.php?locale=en_US&amp;href=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2011%2F12%2F20%2Fhow-to-make-a-2d-platform-game-part-3-ladders-and-ai%2F&amp;layout=button_count&amp;show_faces=false&amp;width=90px&amp;height=21px" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></span><span class="mr_social_sharing"><div id="fb-root"></div><fb:send href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/" font=""></fb:send></span><span class="mr_social_sharing"><g:plusone size="medium" href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/"></g:plusone></span><span class="mr_social_sharing"><a href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2011%2F12%2F20%2Fhow-to-make-a-2d-platform-game-part-3-ladders-and-ai%2F&amp;title=How+to+make+a+2d+Platform+Game+%E2%80%93+part+3+ladders+and+AI" target="_blank" class="mr_social_sharing_popup_link"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/images/buttons/stumbleupon.png" alt="Submit to StumbleUpon" title="Submit to StumbleUpon"/></a></span></div><p>Hello and welcome back to my blog!</p>
<p>This is part 3 in a series of articles where I talk about how to go about making a 2d platform game like this one:</p>
<p>
    <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="swfobj_0" width="640" height="360">
      <param name="movie" value="http://www.wildbunny.co.uk/media/platformer.swf?v=0" />
      <!--[if !IE]>-->
      <object type="application/x-shockwave-flash" data="http://www.wildbunny.co.uk/media/platformer.swf?v=0" width="640" height="360">
      <!--<![endif]-->
        
      <!--[if !IE]>-->
      </object>
      <!--<![endif]-->
    </object>
<br />
Click the game to give it focus&#8230; Apologies for the programmer art, and my level design (not my best qualities!)</p>
<p><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/">Here is the previous article</a> in case you missed it.</p>
<p>In this particular episode I&#8217;m going to talk about the horror of Ladders and the joy of AI.</p>
<h2>Ladders</h2>
<p>Ok, so ladders are a complete pain in the ass on all fronts! The reason being is that they represent a discontinuity in control mechanism and physics response.</p>
<p>The player must transition from walking along in an environment where they experience gravity and can jump to one where they do not and cannot jump. On top of that, you have several different methods of starting the climb:</p>
<ul>
<li>Walking along the floor and joining the bottom of a ladder</li>
<li>Walking along the top of a platform and joining the top of a ladder</li>
<li>Landing on the middle of the ladder after falling or doing a jump</li>
</ul>
<div id="attachment_832" style="width: 394px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladder.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladder.png" alt="" title="ladder" width="384" height="64" class="size-full wp-image-832" /></a><p class="wp-caption-text">The Horror</p></div>
<p>So why have these distinctions?</p>
<h3>Walking along the floor and joining the bottom of a ladder</h3>
<p>You don&#8217;t want to walk past the bottom of a ladder and automatically start climbing it, so that means you must have a special case for being at the bottom of the ladder and pressing up (which would normally have jumped you).</p>
<h3>Walking along the top of a platform and joining the top of a ladder</h3>
<p>Again, you don&#8217;t want to start climbing down a ladder just by walking over the very top of one, or indeed by landing on the top, so you need a special case for pressing down while being on the top of the ladder. Additionally, this is made even more of a pain because this is the only instance in the game where the player can pass down through a platform (in order to join the ladder).</p>
<h3>Landing on the middle of the ladder after falling or doing a jump</h3>
<p>I did wrestle with this idea and for a while I had it set so you couldn&#8217;t land on the middle of a ladder but after a while of playing I realised this was going to be too fiddly for the player and might lead to a bad play experience. Landing on the middle of the ladder is tricky because it has to act exactly like a platform, but a platform which exists at whatever pixel you land. Also, it represents yet another transition from normal falling to ladder climbing.</p>
<h3>Ladder tile types</h3>
<p>I have two different tiles which represent a ladder:</p>
<div id="attachment_835" style="width: 74px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladderMid.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladderMid.png" alt="" title="ladderMid" width="64" height="64" class="size-full wp-image-835" /></a><p class="wp-caption-text">The middle</p></div>
<p>The middle section and:</p>
<div id="attachment_836" style="width: 74px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladderTop.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladderTop.png" alt="" title="ladderTop" width="64" height="64" class="size-full wp-image-836" /></a><p class="wp-caption-text">The top</p></div>
<p>The top part. The top part is special since it acts like a jump through platform and a ladder, depending on where the player is in relation to it.</p>
<h3>Solving the problem</h3>
<p>In order to address each of these issues I found I needed to track a fair amount of state and transitions between state.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	...
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Player <span style="color: #0066CC;">extends</span> Character
	<span style="color: #66cc66;">&#123;</span>
		...
&nbsp;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_collideLadder:uint;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_oldCollideLadder:uint;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_climbLadder:<span style="color: #0066CC;">Boolean</span>;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_onLadderTop:<span style="color: #0066CC;">Boolean</span>;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_disableLadderTopCollision:<span style="color: #0066CC;">Boolean</span>;
&nbsp;
		...
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>


<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_collideLadder:uint;</pre></td></tr></table></div>

<p>The variable <em>m_collideLadder</em> is updated every frame and represents the ladder tile type that the player is currently colliding with (i.e. player&#8217;s centre point is within the AABB of the tile). It can either be <em>eTileTypes.kLadderMid</em>, <em>eTileTypes.kLadderTop</em>, or <em>eTileTypes.kInvalid</em> when not colliding with a ladder tile.</p>
<p>In addition I have:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_oldCollideLadder:uint;</pre></td></tr></table></div>

<p>This tracks the last state of <em>m_collideLadder</em>, so whenvever <em>m_collideLadder </em>changes, the previous state is stored in <em>m_oldCollideLadder</em>. This allows me to detect transitions between colliding with the ladder and not.</p>
<p>In particular the case where the player lands on the middle of a ladder by falling or jumping looks like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	...
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Player <span style="color: #0066CC;">extends</span> Character
	<span style="color: #66cc66;">&#123;</span>
		...
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Special implementation for the player</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> PostCollisionCode<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">super</span>.<span style="color: #006600;">PostCollisionCode</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// if we're not colliding with the ladder or we're on the ground, we're not climbing the ladder</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">!</span>m_collideLadder <span style="color: #66cc66;">||</span> m_OnGround <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				m_climbLadder = <span style="color: #000000; font-weight: bold;">false</span>;
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #808080; font-style: italic;">// if we fall onto the top of a ladder, we start climbing it</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_oldCollideLadder==eTileTypes.<span style="color: #006600;">kEmpty</span> <span style="color: #66cc66;">&amp;&amp;</span> Map.<span style="color: #006600;">IsTileLadder</span><span style="color: #66cc66;">&#40;</span>m_collideLadder<span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&amp;&amp;</span> <span style="color: #66cc66;">!</span>m_OnGround <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				m_climbLadder = <span style="color: #000000; font-weight: bold;">true</span>;
				m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kLandAnim <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">!</span>m_OnGround<span style="color: #66cc66;">&amp;&amp;</span>m_OnGroundLast <span style="color: #66cc66;">&amp;&amp;</span> m_vel.<span style="color: #006600;">m_y</span> <span style="color: #66cc66;">&gt;</span> <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kFallAnim <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
		...
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>You should be able to see that part where this transition is picked up, and the <em>kLandAnim </em>animation gets played.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_climbLadder:<span style="color: #0066CC;">Boolean</span>;</pre></td></tr></table></div>

<p>This is set when the player is confirmed as climbing the ladder; in this event a special case control mechanism will take over from the normal gravity/friction behaviour which actually enables the climbing itself.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_onLadderTop:<span style="color: #0066CC;">Boolean</span>;</pre></td></tr></table></div>

<p>This is set by the collision system when the player is confirmed as being on the top of a ladder &#8211; this has a dual purpose; it lets me have a special case so I can apply the same collision logic as I would do when standing on a jump-through platform and it also allows me to detect the down arrow in the player input control mechanism as an indication that the player wants to join the ladder at the top.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_disableLadderTopCollision:<span style="color: #0066CC;">Boolean</span>;</pre></td></tr></table></div>

<p>This is set when joining the ladder at the top and allows the collision system to ignore the ladder top tile until the player is confirmed as having his centre point in the AABB of any ladder tile. This causes the player to fall briefly down until they start colliding with the middle of the ladder tile, where collision is then re-enabled.</p>
<h3>Special ladder physics</h3>
<p>I covered the regular collision response code in the last article (the part where friction is applied etc). When <em>m_climbLadder </em>is set, this code is ignored and some new code takes over.</p>
<p>The player has a special variable called <em>m_velTarget </em>which is 0,0 by default and only comes into use when we&#8217;re confirmed as being on a ladder. This gets set to the maximum player speed in the X or Y axis inside the player input system when the player is moving left/right or up/down and is on a ladder.</p>
<p>The main body of the code tries to alter the player&#8217;s actual velocity (which is <em>Player.m_vel</em>) towards this new target velocity, and to prevent the player from arriving at the target velocity too quickly there is a special <em>Player.kLadderStayStrength</em> constant. This prevents the ladder movement from contrasting with the player&#8217;s movement in the rest of the game.</p>
<p>The full code looks like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	...
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Player <span style="color: #0066CC;">extends</span> Character
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Special case code for the player colliding with different tile types</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> InnerCollide<span style="color: #66cc66;">&#40;</span>tileAabb:AABB, tileType:<span style="color: #0066CC;">int</span>, dt:<span style="color: #0066CC;">Number</span>, i:<span style="color: #0066CC;">int</span>, j:<span style="color: #0066CC;">int</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			...
&nbsp;
			<span style="color: #b1b100;">else</span> <span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> Map.<span style="color: #006600;">IsTileLadder</span><span style="color: #66cc66;">&#40;</span> tileType <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">//</span>
				<span style="color: #808080; font-style: italic;">// Are we colliding with the top of a ladder?</span>
				<span style="color: #808080; font-style: italic;">//</span>
&nbsp;
				<span style="color: #000000; font-weight: bold;">var</span> checkLadderMiddle:<span style="color: #0066CC;">Boolean</span> = <span style="color: #000000; font-weight: bold;">false</span>;
&nbsp;
				<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> Map.<span style="color: #006600;">IsTileLadderTop</span><span style="color: #66cc66;">&#40;</span> tileType <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&amp;&amp;</span> <span style="color: #66cc66;">!</span>m_disableLadderTopCollision <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					m_onLadderTop = Collide.<span style="color: #006600;">AabbVsAabbTopPlane</span><span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">this</span>, tileAabb, m_contact, i, j, m_map <span style="color: #66cc66;">&#41;</span>;
&nbsp;
					<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_onLadderTop <span style="color: #66cc66;">&#41;</span>
					<span style="color: #66cc66;">&#123;</span>
						CollisionResponse<span style="color: #66cc66;">&#40;</span> m_contact.<span style="color: #006600;">m_normal</span>, m_contact.<span style="color: #006600;">m_dist</span>, dt <span style="color: #66cc66;">&#41;</span>;
					<span style="color: #66cc66;">&#125;</span>
					<span style="color: #b1b100;">else</span> 
					<span style="color: #66cc66;">&#123;</span>
						checkLadderMiddle = <span style="color: #000000; font-weight: bold;">true</span>;
					<span style="color: #66cc66;">&#125;</span>
				<span style="color: #66cc66;">&#125;</span>
				<span style="color: #b1b100;">else</span> 
				<span style="color: #66cc66;">&#123;</span>
					checkLadderMiddle = <span style="color: #000000; font-weight: bold;">true</span>;
				<span style="color: #66cc66;">&#125;</span>
&nbsp;
				<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>checkLadderMiddle<span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #808080; font-style: italic;">//</span>
					<span style="color: #808080; font-style: italic;">// check to see if we're colliding with the middle of a ladder</span>
					<span style="color: #808080; font-style: italic;">//</span>
&nbsp;
					<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>Collide.<span style="color: #006600;">PointInAabb</span><span style="color: #66cc66;">&#40;</span>m_Pos, tileAabb<span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
					<span style="color: #66cc66;">&#123;</span>
						m_collideLadder = tileType;
						m_disableLadderTopCollision = <span style="color: #000000; font-weight: bold;">false</span>;
&nbsp;
						<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_climbLadder <span style="color: #66cc66;">&#41;</span>
						<span style="color: #66cc66;">&#123;</span>
							<span style="color: #808080; font-style: italic;">// remove a portion of the total velocity of the character</span>
							<span style="color: #000000; font-weight: bold;">var</span> delta:Vector2 = m_velTarget.<span style="color: #006600;">Sub</span><span style="color: #66cc66;">&#40;</span> m_vel <span style="color: #66cc66;">&#41;</span>;
&nbsp;
							<span style="color: #000000; font-weight: bold;">var</span> len:<span style="color: #0066CC;">Number</span> = delta.<span style="color: #006600;">m_Len</span>;
							<span style="color: #000000; font-weight: bold;">var</span> change:Vector2 = delta;
							<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> len<span style="color: #66cc66;">&gt;</span>kLadderStayStrength <span style="color: #66cc66;">&#41;</span>
							<span style="color: #66cc66;">&#123;</span>
								<span style="color: #808080; font-style: italic;">// limit the amount we can remove velocity by</span>
								change.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> kLadderStayStrength<span style="color: #66cc66;">/</span>len <span style="color: #66cc66;">&#41;</span>;
							<span style="color: #66cc66;">&#125;</span>
&nbsp;
							m_vel.<span style="color: #006600;">AddTo</span><span style="color: #66cc66;">&#40;</span> change <span style="color: #66cc66;">&#41;</span>;
						<span style="color: #66cc66;">&#125;</span>
					<span style="color: #66cc66;">&#125;</span>
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			...
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>The relevant part is at the bottom. </p>
<p>What&#8217;s going on in the above code? Well, once we&#8217;re inside the condition:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_climbLadder <span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span></pre></td></tr></table></div>

<p>then we&#8217;re actually doing the ladder physics. First of all we work out the difference between our current velocity and the desired velocity:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> delta:Vector2 = m_velTarget.<span style="color: #006600;">Sub</span><span style="color: #66cc66;">&#40;</span> m_vel <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Then, if the length of this vector is longer than our ladder stay strength amount (i.e. the movement is too much to do in one frame), we have to clamp the movement so its just as much as we&#8217;re allowed to move by the constant <em>kLadderStayStrength</em>:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> change:Vector2 = delta;
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> len<span style="color: #66cc66;">&gt;</span>kLadderStayStrength <span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #808080; font-style: italic;">// limit the amount we can remove velocity by</span>
	change.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> kLadderStayStrength<span style="color: #66cc66;">/</span>len <span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>Once this has been clamped we add this delta to our velocity vector and we&#8217;re done:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">m_vel.<span style="color: #006600;">AddTo</span><span style="color: #66cc66;">&#40;</span> change <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Once the player stops colliding with a ladder tile, the normal collision resolution code takes over again and we&#8217;re done with ladders completely!</p>
<h2>The joy of AI</h2>
<p>I really enjoyed working on the AI for this demo because it went so amazingly smoothly, nearly everything I wanted to try worked first time. It was refreshing after all the messing around with the ladder stuff; you learn to enjoy these small victories after you&#8217;ve been programming for a while because they&#8217;re so rare <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Lets have another look at the class hierarchy I showed in the last article:</p>
<div id="attachment_846" style="width: 410px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/aiHierarchy.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/aiHierarchy.png" alt="" title="aiHierarchy" width="400" height="249" class="size-full wp-image-846" /></a><p class="wp-caption-text">AI Hierarchy</p></div>
<p>The complete AI hierarchy is shown as the yellow branch which inherits from <em>Character</em>.</p>
<h3>Enemy, the base class</h3>
<p>Ok, so lets have a look at the base class which all enemies derive from:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">display</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Geometry</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Graphics</span>.<span style="color: #006600;">AnimationController</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">System</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">Level</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Enemy <span style="color: #0066CC;">extends</span> Character
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// animation names</span>
		<span style="color: #0066CC;">private</span> const kHitAnim:<span style="color: #0066CC;">String</span> = <span style="color: #ff0000;">&quot;hitAnim&quot;</span>;
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Simple constructor</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> Enemy<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// aways go to the left by default;</span>
			m_vel.<span style="color: #006600;">m_x</span> = -m_WalkSpeed;
&nbsp;
			m_animationController.<span style="color: #006600;">PlayLooping</span><span style="color: #66cc66;">&#40;</span> kWalkAnim <span style="color: #66cc66;">&#41;</span>;
			m_animationController.<span style="color: #006600;">GotoRandomFrameInCurrentAnim</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Simple update function</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Update<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_hurtTimer <span style="color: #66cc66;">&gt;</span> <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				m_hurtTimer--;
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #0066CC;">super</span>.<span style="color: #006600;">Update</span><span style="color: #66cc66;">&#40;</span> dt <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Hurt this enemy, player was at hurtPos</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Hurt<span style="color: #66cc66;">&#40;</span> hurtPos:Vector2 <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_hurtTimer==<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				m_hurtTimer = kEnemyHurtFrames;
&nbsp;
				m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kHitAnim <span style="color: #66cc66;">&#41;</span>;
				m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> DeleteEnemy <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Animation callback used to delete this enemy and spawn a pick-up</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> DeleteEnemy<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// mark this enemy as dead, it will be deleted</span>
			m_dead = <span style="color: #000000; font-weight: bold;">true</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// spawn a pickup</span>
			m_platformer.<span style="color: #006600;">SpawnMo</span><span style="color: #66cc66;">&#40;</span> DiamondPickupFla, m_pos.<span style="color: #006600;">Clone</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>, <span style="color: #000000; font-weight: bold;">true</span> <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// What speed should this guy walk at?</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		protected <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_WalkSpeed<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Number</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">throw</span> <span style="color: #000000; font-weight: bold;">new</span> NotImplementedException;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Does he kill on touch?</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_KillsOnTouch<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">throw</span> <span style="color: #000000; font-weight: bold;">new</span> NotImplementedException;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>It requires any concrete implementations to define a couple of attributes: <em>m_WalkSpeed </em>and <em>m_KillsOnTouch</em>. <em>m_WalkSpeed </em> is used in the constructor and as the name suggests is the speed at which the enemy walks. <em>m_KillsOnTouch</em> is used in the collision detection system and defines whether this particular enemy will kill the player on touch.</p>
<p>All enemies are required to provide a couple of animations with specific names which are referenced in this base class (or in <em>Character </em>from which this derives): </p>
<div id="attachment_848" style="width: 195px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/starFrames.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/starFrames.png" alt="" title="starFrames" width="185" height="48" class="size-full wp-image-848" /></a><p class="wp-caption-text">Star walk anim</p></div>
<ul>
<li>&#8216;walkAnim&#8217; &#8211; the walk animation this enemy has</li>
<li>&#8216;hitAnim&#8217; &#8211; the animation to play when this enemy is punched by the player</li>
</ul>
<p>The individual enemy types may well provide additional animations, but the above is the bare minimum.</p>
<p>The other function worth mentioning is <em>Hurt()</em> which is actually defined in <em>Character</em>. This is overridden here with a custom implementation which counts down a few frames, then triggers the &#8216;hitAnim&#8217; and attaches a callback which will happen when the animation is done playing; this marks the enemy for deletion and also spawns a pick-up where the enemy was at the time.</p>
<h3>Simple enemy</h3>
<p>This is another shared, non-concrete class which encompasses the behaviour of two of the enemy types.</p>
<div id="attachment_855" style="width: 239px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/simpleEnemy.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/simpleEnemy.png" alt="" title="simpleEnemy" width="229" height="100" class="size-full wp-image-855" /></a><p class="wp-caption-text">Simple enemies</p></div>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">display</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Geometry</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Graphics</span>.<span style="color: #006600;">AnimationController</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">System</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Physics</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> SimpleEnemy <span style="color: #0066CC;">extends</span> Enemy
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> SimpleEnemy<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">super</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Simple update function which just checks for kReverseDirection markers</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Update<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_hurtTimer == <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// form AABB for character</span>
				<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">min</span>:Vector2 = m_pos.<span style="color: #006600;">Sub</span><span style="color: #66cc66;">&#40;</span> m_halfExtents <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">max</span>:Vector2 = m_pos.<span style="color: #0066CC;">Add</span><span style="color: #66cc66;">&#40;</span> m_halfExtents <span style="color: #66cc66;">&#41;</span>;
&nbsp;
				m_map.<span style="color: #006600;">DoActionToTilesWithinAabb</span><span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">min</span>, <span style="color: #0066CC;">max</span>, InnerCollide, dt <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #0066CC;">super</span>.<span style="color: #006600;">Update</span><span style="color: #66cc66;">&#40;</span> dt <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Is the current tile a reverse direction maker? If so, change direction</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> InnerCollide<span style="color: #66cc66;">&#40;</span> tileAabb:AABB, tileType:<span style="color: #0066CC;">int</span>, dt:<span style="color: #0066CC;">Number</span>, i:<span style="color: #0066CC;">int</span>, j:<span style="color: #0066CC;">int</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> tileType==eTileTypes.<span style="color: #006600;">kReverseDirection</span> <span style="color: #66cc66;">&amp;&amp;</span> MoveableObject.<span style="color: #006600;">HeadingTowards</span><span style="color: #66cc66;">&#40;</span>tileAabb.<span style="color: #006600;">m_Centre</span>, <span style="color: #0066CC;">this</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// toggle direction</span>
				m_vel.<span style="color: #006600;">m_x</span> <span style="color: #66cc66;">*</span>= -<span style="color: #cc66cc;">1</span>;
				<span style="color: #0066CC;">this</span>.<span style="color: #006600;">scaleX</span> <span style="color: #66cc66;">*</span>= -<span style="color: #cc66cc;">1</span>;
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// This enemy type is always updated, this is to stop them from bunching up </span>
		<span style="color: #808080; font-style: italic;">/// due to the off-screen deactivation code</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_ForceUpdate<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #000000; font-weight: bold;">true</span>;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>Their basic behaviour is to head in a constant direction until they encounter a special marker type which indicates they should reverse direction. This marker type is always mapped in the middle collision layer in the map along with all other AI stuff. </p>
<div id="attachment_856" style="width: 70px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/changeDirection.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/changeDirection.png" alt="" title="changeDirection" width="60" height="31" class="size-full wp-image-856" /></a><p class="wp-caption-text">Change direction marker</p></div>
<p>The marker itself gets a special tile (shown above) so the mapper (i.e me) can see where I&#8217;ve placed it in the map. At runtime, these tiles are turned invisible, or rather they don&#8217;t actually have any visual data exported with them.</p>
<div id="attachment_876" style="width: 559px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/mappyAiMarkers.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/mappyAiMarkers.png" alt="" title="mappyAiMarkers" width="549" height="258" class="size-full wp-image-876" /></a><p class="wp-caption-text">AI markers as seen in Mappy</p></div>
<!-- Easy AdSense V2.79 -->
<!-- Post[count: 1] -->
<div class="ezAdsense adsense adsense-midtext" style="text-align:center;margin:12px; "><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- medi -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:250px"
     data-ad-client="ca-pub-4897461488762721"
     data-ad-slot="9797433564"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div><p>The above shows them in a level in Mappy.</p>
<p>The relevant code is for this behaviour is:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
<span style="color: #808080; font-style: italic;">/// Simple update function which just checks for kReverseDirection markers</span>
<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Update<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_hurtTimer == <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// form AABB for character</span>
		<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">min</span>:Vector2 = m_pos.<span style="color: #006600;">Sub</span><span style="color: #66cc66;">&#40;</span> m_halfExtents <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">max</span>:Vector2 = m_pos.<span style="color: #0066CC;">Add</span><span style="color: #66cc66;">&#40;</span> m_halfExtents <span style="color: #66cc66;">&#41;</span>;
&nbsp;
		m_map.<span style="color: #006600;">DoActionToTilesWithinAabb</span><span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">min</span>, <span style="color: #0066CC;">max</span>, InnerCollide, dt <span style="color: #66cc66;">&#41;</span>;
	<span style="color: #66cc66;">&#125;</span>
&nbsp;
	<span style="color: #0066CC;">super</span>.<span style="color: #006600;">Update</span><span style="color: #66cc66;">&#40;</span> dt <span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>&#8230;which forms an AABB for the extents of the character and then calls out to the collision system to return all tiles which intersect with this AABB. The collision system then calls back to my callback function <em>InnerCollide</em>:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
<span style="color: #808080; font-style: italic;">/// Is the current tile a reverse direction maker? If so, change direction</span>
<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
protected override <span style="color: #000000; font-weight: bold;">function</span> InnerCollide<span style="color: #66cc66;">&#40;</span> tileAabb:AABB, tileType:<span style="color: #0066CC;">int</span>, dt:<span style="color: #0066CC;">Number</span>, i:<span style="color: #0066CC;">int</span>, j:<span style="color: #0066CC;">int</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> tileType==eTileTypes.<span style="color: #006600;">kReverseDirection</span> <span style="color: #66cc66;">&amp;&amp;</span> MoveableObject.<span style="color: #006600;">HeadingTowards</span><span style="color: #66cc66;">&#40;</span>tileAabb.<span style="color: #006600;">m_Centre</span>, <span style="color: #0066CC;">this</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// toggle direction</span>
		m_vel.<span style="color: #006600;">m_x</span> <span style="color: #66cc66;">*</span>= -<span style="color: #cc66cc;">1</span>;
		<span style="color: #0066CC;">this</span>.<span style="color: #006600;">scaleX</span> <span style="color: #66cc66;">*</span>= -<span style="color: #cc66cc;">1</span>;
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>&#8230;this checks the tile type being collided with is of type <em>eTileTypes.kReverseDirection</em>, if so and if the enemy is heading towards this tile then we toggle the enemy&#8217;s direction and also have him face the opposite way. That last condition (which checks the enemy&#8217;s direction) is very important, otherwise it could be that the enemy is still going to be colliding with the same change direction marker next frame; this would lead to a very confused enemy who would toggle direction constantly. </p>
<p>For reference, here is the utility function to work out if an object is heading towards a point (in the X axis):</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
<span style="color: #808080; font-style: italic;">/// Is the given candidate heading towards towardsPoint? </span>
<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> HeadingTowards<span style="color: #66cc66;">&#40;</span> towardsPoint:Vector2, candidate:MoveableObject <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #000000; font-weight: bold;">var</span> deltaX:<span style="color: #0066CC;">Number</span> = towardsPoint.<span style="color: #006600;">m_x</span>-candidate.<span style="color: #006600;">m_Pos</span>.<span style="color: #006600;">m_x</span>;
	<span style="color: #000000; font-weight: bold;">var</span> headingTowards:<span style="color: #0066CC;">Boolean</span> = deltaX<span style="color: #66cc66;">*</span>candidate.<span style="color: #006600;">m_Vel</span>.<span style="color: #006600;">m_x</span><span style="color: #66cc66;">&gt;</span><span style="color: #cc66cc;">0</span>;
&nbsp;
	<span style="color: #b1b100;">return</span> headingTowards;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>I&#8217;ve found this useful in a couple of places.</p>
<h3>Star</h3>
<p>This is where we really start to feel the benefit of all this abstraction.</p>
<div id="attachment_860" style="width: 192px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/star.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/star.png" alt="" title="star" width="182" height="194" class="size-full wp-image-860" /></a><p class="wp-caption-text">Star</p></div>
<p>Here is the complete implementation of this enemy:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Star <span style="color: #0066CC;">extends</span> SimpleEnemy
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #0066CC;">private</span> const kWalkSpeed:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">40</span>;
		<span style="color: #0066CC;">private</span> const kWalkAnimMultiplier:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">0.125</span>;
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> Star<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">super</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Simple accessor</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_WalkSpeed<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Number</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> kWalkSpeed;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Simple accessor</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_AnimSpeedMultiplier<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Number</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> kWalkAnimMultiplier;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Kills on touch</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_KillsOnTouch<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #000000; font-weight: bold;">true</span>;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>As you can see, he is nothing more than three simple accessors which don&#8217;t even require an explanation! All the functionality is performed by the classes he derives from.</p>
<h3>Ladybird</h3>
<p>This one is a little more complex because he has a special behaviour where he pauses, plays an anim, emits another object, player another anim and then resumes his original motion.</p>
<div id="attachment_861" style="width: 196px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladybird.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladybird.png" alt="" title="ladybird" width="186" height="134" class="size-full wp-image-861" /></a><p class="wp-caption-text">Ladybird</p></div>
<blockquote><p>Side note: I have no idea why we call this creature a &#8216;ladybird&#8217; in the uk &#8211; logic dictates that &#8216;ladybug&#8217; (the american name) is surely more fitting!</p></blockquote>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Physics</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> LadyBird <span style="color: #0066CC;">extends</span> SimpleEnemy
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// animation names</span>
		<span style="color: #0066CC;">private</span> const kFireInAnim:<span style="color: #0066CC;">String</span> = <span style="color: #ff0000;">&quot;fireInAnim&quot;</span>;
		<span style="color: #0066CC;">private</span> const kFireOutAnim:<span style="color: #0066CC;">String</span> = <span style="color: #ff0000;">&quot;fireOutAnim&quot;</span>;
&nbsp;
		<span style="color: #0066CC;">private</span> const kWalkSpeed:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">40</span>;
		<span style="color: #0066CC;">private</span> const kWalkAnimMultiplier:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">1</span>;
		<span style="color: #0066CC;">private</span> const kFireSpikesDelay:<span style="color: #0066CC;">int</span> = <span style="color: #cc66cc;">60</span>;
		<span style="color: #0066CC;">private</span> const kTriggerTimerRadius:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">200</span>;
&nbsp;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_fireSpikesCounter:<span style="color: #0066CC;">int</span>;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_originalXVel:<span style="color: #0066CC;">Number</span>;
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> LadyBird<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">super</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
			m_fireSpikesCounter = kFireSpikesDelay;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Update<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">super</span>.<span style="color: #006600;">Update</span><span style="color: #66cc66;">&#40;</span> dt <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #000000; font-weight: bold;">var</span> withinRadius:<span style="color: #0066CC;">Boolean</span> = m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>.<span style="color: #006600;">Sub</span><span style="color: #66cc66;">&#40;</span> m_pos <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">m_Len</span><span style="color: #66cc66;">&lt;</span>kTriggerTimerRadius;
			<span style="color: #000000; font-weight: bold;">var</span> facingPlayer:<span style="color: #0066CC;">Boolean</span> = MoveableObject.<span style="color: #006600;">HeadingTowards</span><span style="color: #66cc66;">&#40;</span> m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>, <span style="color: #0066CC;">this</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>withinRadius <span style="color: #66cc66;">&amp;&amp;</span> facingPlayer <span style="color: #66cc66;">&amp;&amp;</span> m_hurtTimer==<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// every so often, we spawn some spikes</span>
				<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_fireSpikesCounter<span style="color: #66cc66;">&gt;</span><span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					m_fireSpikesCounter--;
				<span style="color: #66cc66;">&#125;</span>
				<span style="color: #b1b100;">else</span> <span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>m_animationController.<span style="color: #006600;">m_Playing</span> == kWalkAnim<span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #808080; font-style: italic;">// begin a series of callbacks which eventually plays the spawn anim</span>
					m_animationController.<span style="color: #006600;">StopAtEnd</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
					m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> WaitTillEndOfAnim <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> WaitTillEndOfAnim<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kFireInAnim <span style="color: #66cc66;">&#41;</span>;
			m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> SpawnSpikes <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// pause motion</span>
			m_originalXVel = m_vel.<span style="color: #006600;">m_x</span>;
&nbsp;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_hurtTimer==<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				m_vel.<span style="color: #006600;">m_x</span> = <span style="color: #cc66cc;">0</span>;
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> SpawnSpikes<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #000000; font-weight: bold;">var</span> velX:<span style="color: #0066CC;">Number</span> = -<span style="color: #0066CC;">this</span>.<span style="color: #006600;">scaleX</span><span style="color: #66cc66;">*</span>kWalkSpeed<span style="color: #66cc66;">*</span><span style="color: #cc66cc;">2</span>;
&nbsp;
			<span style="color: #000000; font-weight: bold;">var</span> spikes:Character = Character<span style="color: #66cc66;">&#40;</span>m_platformer.<span style="color: #006600;">SpawnMo</span><span style="color: #66cc66;">&#40;</span> LadySpikesFla, m_pos.<span style="color: #006600;">Clone</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>, <span style="color: #000000; font-weight: bold;">true</span>, velX <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// put behind us in display list order</span>
			m_platformer.<span style="color: #006600;">setChildIndex</span><span style="color: #66cc66;">&#40;</span> spikes, m_platformer.<span style="color: #006600;">getChildIndex</span><span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">this</span> <span style="color: #66cc66;">&#41;</span>-<span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kFireOutAnim <span style="color: #66cc66;">&#41;</span>;
			m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> ResumeNormalAnim <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> ResumeNormalAnim<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			m_animationController.<span style="color: #006600;">PlayLooping</span><span style="color: #66cc66;">&#40;</span> kWalkAnim <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// reset counter</span>
			m_fireSpikesCounter = kFireSpikesDelay;
&nbsp;
			<span style="color: #808080; font-style: italic;">// resume motion</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_hurtTimer==<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				m_vel.<span style="color: #006600;">m_x</span> = m_originalXVel;
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_WalkSpeed<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Number</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> kWalkSpeed;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_AnimSpeedMultiplier<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Number</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> kWalkAnimMultiplier;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// </span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_KillsOnTouch<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #000000; font-weight: bold;">false</span>;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>Lets have a look at the main update loop:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
<span style="color: #808080; font-style: italic;">/// </span>
<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Update<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">super</span>.<span style="color: #006600;">Update</span><span style="color: #66cc66;">&#40;</span> dt <span style="color: #66cc66;">&#41;</span>;
&nbsp;
	<span style="color: #000000; font-weight: bold;">var</span> withinRadius:<span style="color: #0066CC;">Boolean</span> = m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>.<span style="color: #006600;">Sub</span><span style="color: #66cc66;">&#40;</span> m_pos <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">m_Len</span><span style="color: #66cc66;">&lt;</span>kTriggerTimerRadius;
	<span style="color: #000000; font-weight: bold;">var</span> facingPlayer:<span style="color: #0066CC;">Boolean</span> = MoveableObject.<span style="color: #006600;">HeadingTowards</span><span style="color: #66cc66;">&#40;</span> m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>, <span style="color: #0066CC;">this</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>withinRadius <span style="color: #66cc66;">&amp;&amp;</span> facingPlayer <span style="color: #66cc66;">&amp;&amp;</span> m_hurtTimer==<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// every so often, we spawn some spikes</span>
		<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_fireSpikesCounter<span style="color: #66cc66;">&gt;</span><span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			m_fireSpikesCounter--;
		<span style="color: #66cc66;">&#125;</span>
		<span style="color: #b1b100;">else</span> <span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>m_animationController.<span style="color: #006600;">m_Playing</span> == kWalkAnim<span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// begin a series of callbacks which eventually plays the spawn anim</span>
			m_animationController.<span style="color: #006600;">StopAtEnd</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
			m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> WaitTillEndOfAnim <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>So, what&#8217;s going in here? Firstly we do some simple maths to determine whether the player is within some radius of the enemy. We also work out if the enemy is facing the player (after all, no point trying to attack the player if he&#8217;s behind you). If both of these conditions are true we decrement a counter, once this counter gets to 0, we trigger a sequence of animations via callbacks:</p>
<p>The first simply waits until the end of the current anim &#8211; this is to make sure the animation frames match up; since I designed the anims to follow on from each other.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
<span style="color: #808080; font-style: italic;">/// </span>
<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> WaitTillEndOfAnim<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kFireInAnim <span style="color: #66cc66;">&#41;</span>;
	m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> SpawnSpikes <span style="color: #66cc66;">&#41;</span>;
&nbsp;
	<span style="color: #808080; font-style: italic;">// pause motion</span>
	m_originalXVel = m_vel.<span style="color: #006600;">m_x</span>;
&nbsp;
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_hurtTimer==<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		m_vel.<span style="color: #006600;">m_x</span> = <span style="color: #cc66cc;">0</span>;
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>When the above callback is called, we trigger the actual animation for spawning the spikes. This is done so the player knows to prepare themselves to get out of the way. I also pause the motion of the creature at this point, taking a note of what its original motion was so I can restore it afterwards.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
<span style="color: #808080; font-style: italic;">/// </span>
<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> SpawnSpikes<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #000000; font-weight: bold;">var</span> velX:<span style="color: #0066CC;">Number</span> = -<span style="color: #0066CC;">this</span>.<span style="color: #006600;">scaleX</span><span style="color: #66cc66;">*</span>kWalkSpeed<span style="color: #66cc66;">*</span><span style="color: #cc66cc;">2</span>;
&nbsp;
	<span style="color: #000000; font-weight: bold;">var</span> spikes:Character = Character<span style="color: #66cc66;">&#40;</span>m_platformer.<span style="color: #006600;">SpawnMo</span><span style="color: #66cc66;">&#40;</span> LadySpikesFla, m_pos.<span style="color: #006600;">Clone</span><span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>, <span style="color: #000000; font-weight: bold;">true</span>, velX <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
	<span style="color: #808080; font-style: italic;">// put behind us in display list order</span>
	m_platformer.<span style="color: #006600;">setChildIndex</span><span style="color: #66cc66;">&#40;</span> spikes, m_platformer.<span style="color: #006600;">getChildIndex</span><span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">this</span> <span style="color: #66cc66;">&#41;</span>-<span style="color: #cc66cc;">1</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
	m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kFireOutAnim <span style="color: #66cc66;">&#41;</span>;
	m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> ResumeNormalAnim <span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<div id="attachment_863" style="width: 199px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladySpikes.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/ladySpikes.png" alt="" title="ladySpikes" width="189" height="195" class="size-full wp-image-863" /></a><p class="wp-caption-text">Spawned spikes</p></div>
<p>Once the spawn spikes animation has finished, I actually spawn a new object, which is another very simple class which obeys gravity and does full collision but also kills on touch. I make sure it heads in the same direction that the original enemy is facing, make sure it appears behind this enemy and lastly play the fired animation which sets up the synchronisation to match with the frame the normal animation ended on.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
<span style="color: #808080; font-style: italic;">/// </span>
<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> ResumeNormalAnim<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	m_animationController.<span style="color: #006600;">PlayLooping</span><span style="color: #66cc66;">&#40;</span> kWalkAnim <span style="color: #66cc66;">&#41;</span>;
&nbsp;
	<span style="color: #808080; font-style: italic;">// reset counter</span>
	m_fireSpikesCounter = kFireSpikesDelay;
&nbsp;
	<span style="color: #808080; font-style: italic;">// resume motion</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_hurtTimer==<span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
        	m_vel.<span style="color: #006600;">m_x</span> = m_originalXVel;
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>Once the previous animation has finished, the firing action is complete, so we resume playing the regular walk animation, reset the counter and restore the original motion of the enemy.</p>
<h3>The brain</h3>
<p>This enemy type has a pretty simple behaviour as well: it kills on touch and it will move for a while, then pause for a while and then carry on. When it starts to move it heads towards wherever the player was at the time.</p>
<div id="attachment_865" style="width: 181px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/brain.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/brain.png" alt="" title="brain" width="171" height="240" class="size-full wp-image-865" /></a><p class="wp-caption-text">The brain</p></div>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Brain <span style="color: #0066CC;">extends</span> Enemy
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #0066CC;">private</span> const kWalkSpeed:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">80</span>;
&nbsp;
		<span style="color: #0066CC;">private</span> const kThinkSeconds:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">2</span>;
		<span style="color: #0066CC;">private</span> const kMoveSeconds:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">1</span>;
&nbsp;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_thinkTimer:<span style="color: #0066CC;">Number</span>;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_moveTimer:<span style="color: #0066CC;">Number</span>;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_think:<span style="color: #0066CC;">Boolean</span>;
&nbsp;
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> Brain<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			m_thinkTimer = Scalar.<span style="color: #006600;">RandBetween</span><span style="color: #66cc66;">&#40;</span> <span style="color: #cc66cc;">0</span>, kThinkSeconds <span style="color: #66cc66;">&#41;</span>;
			m_think = <span style="color: #000000; font-weight: bold;">true</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Pause, then target the player and move for a bit, repeat</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;	</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Update<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">super</span>.<span style="color: #006600;">Update</span><span style="color: #66cc66;">&#40;</span> dt <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_think <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #808080; font-style: italic;">// have we gone past our think timer limit?</span>
					<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_thinkTimer<span style="color: #66cc66;">&gt;</span><span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
					<span style="color: #66cc66;">&#123;</span>
						<span style="color: #808080; font-style: italic;">// toggle modes</span>
						m_think = <span style="color: #000000; font-weight: bold;">false</span>;
&nbsp;
						<span style="color: #808080; font-style: italic;">// work out a new target velocity</span>
						m_vel = m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>.<span style="color: #006600;">Sub</span><span style="color: #66cc66;">&#40;</span> m_pos <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">UnitTo</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> kWalkSpeed <span style="color: #66cc66;">&#41;</span>;
&nbsp;
						<span style="color: #808080; font-style: italic;">// reset this timer</span>
						m_moveTimer = kMoveSeconds;
					<span style="color: #66cc66;">&#125;</span>
&nbsp;
					m_thinkTimer -= dt;
				<span style="color: #66cc66;">&#125;</span>
				<span style="color: #b1b100;">else</span> 
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #808080; font-style: italic;">// have we gone past our move timer limit?</span>
					<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_moveTimer<span style="color: #66cc66;">&gt;</span><span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
					<span style="color: #66cc66;">&#123;</span>
						<span style="color: #808080; font-style: italic;">// toggle modes</span>
						m_think = <span style="color: #000000; font-weight: bold;">true</span>;
&nbsp;
						<span style="color: #808080; font-style: italic;">// stop moving</span>
						m_vel.<span style="color: #0066CC;">Clear</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
						<span style="color: #808080; font-style: italic;">// reset this timer</span>
						m_thinkTimer = kThinkSeconds;
					<span style="color: #66cc66;">&#125;</span>
&nbsp;
					m_moveTimer -= dt;
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Simple accessor</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;	</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_WalkSpeed<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Number</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> kWalkSpeed;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Simple accessor</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_KillsOnTouch<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #000000; font-weight: bold;">true</span>;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>All the magic is within the <em>Update </em>function. As you can see there are a couple of simple timers which tick down depending on what mode the enemy is currently in (either <em>m_think==true</em> or not). When the think timer becomes less than 0, the enemy toggles modes and picks a direction to move.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">// work out a new target velocity</span>
m_vel = m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>.<span style="color: #006600;">Sub</span><span style="color: #66cc66;">&#40;</span> m_pos <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">UnitTo</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> kWalkSpeed <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>This new direction takes the form of a velocity. This velocity is based on the vector from the enemy to the player, which is then made unit length and scaled by the <em>kWalkSpeed </em>of the enemy. This will cause the enemy to move in the direction of the player at a constant speed. Once he gets there he kills on touch.</p>
<h3>The skeleton</h3>
<p>This is the final AI character and has the most complex behaviour of them all.</p>
<div id="attachment_867" style="width: 187px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeleton.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeleton.png" alt="" title="skeleton" width="177" height="259" class="size-full wp-image-867" /></a><p class="wp-caption-text">Skeleton</p></div>
<p>Its all driven via the animations though, which makes it rather flexible.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #006600;">Vector2</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Skeleton <span style="color: #0066CC;">extends</span> Enemy
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// animation names</span>
		<span style="color: #0066CC;">private</span> const kJumpAnim:<span style="color: #0066CC;">String</span> = <span style="color: #ff0000;">&quot;jumpAnim&quot;</span>;
		<span style="color: #0066CC;">private</span> const kDeadlyAnim:<span style="color: #0066CC;">String</span> = <span style="color: #ff0000;">&quot;deadlyAnim&quot;</span>;
&nbsp;
		<span style="color: #0066CC;">private</span> const kJumpStrength:<span style="color: #0066CC;">Number</span> = <span style="color: #cc66cc;">800</span>;
&nbsp;
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">var</span> m_jumping:<span style="color: #0066CC;">Boolean</span>;
&nbsp;
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> Skeleton<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">super</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			ResetJumpSequence<span style="color: #66cc66;">&#40;</span><span style="color: #000000; font-weight: bold;">null</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Stand still, play walk anim</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;</span>
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> ResetJumpSequence<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span>  <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// stand still</span>
			m_vel.<span style="color: #006600;">m_x</span> = <span style="color: #cc66cc;">0</span>;
			m_jumping = <span style="color: #000000; font-weight: bold;">false</span>;
&nbsp;
			m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kWalkAnim <span style="color: #66cc66;">&#41;</span>;
			m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> PlayJumpAnim <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Play the jump anim</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;	</span>
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> PlayJumpAnim<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kJumpAnim <span style="color: #66cc66;">&#41;</span>;
			m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> JumpTowardPlayer <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Actually jump towards the player</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;	</span>
		<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> JumpTowardPlayer<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// work out a new target velocity</span>
				<span style="color: #000000; font-weight: bold;">var</span> targetPos:Vector2 = m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>.<span style="color: #0066CC;">Add</span><span style="color: #66cc66;">&#40;</span> Vector2.<span style="color: #006600;">RandomRadius</span><span style="color: #66cc66;">&#40;</span> <span style="color: #cc66cc;">100</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #000000; font-weight: bold;">var</span> playerUnitDirection:Vector2 = targetPos.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> m_pos <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">UnitTo</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
				<span style="color: #808080; font-style: italic;">// must jump upwards!</span>
				playerUnitDirection.<span style="color: #006600;">m_y</span> = -<span style="color: #cc66cc;">2</span>;
&nbsp;
				<span style="color: #808080; font-style: italic;">// re-normalise</span>
				playerUnitDirection.<span style="color: #006600;">UnitTo</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
				<span style="color: #808080; font-style: italic;">// jump towards player</span>
				m_vel.<span style="color: #006600;">AddTo</span><span style="color: #66cc66;">&#40;</span> playerUnitDirection.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> kJumpStrength <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
				m_jumping = <span style="color: #000000; font-weight: bold;">true</span>;
&nbsp;
				m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> <span style="color: #000000; font-weight: bold;">null</span> <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Check for landing, play the deadly animation when landed</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;	</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> Update<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #0066CC;">super</span>.<span style="color: #006600;">Update</span><span style="color: #66cc66;">&#40;</span> dt <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_jumping <span style="color: #66cc66;">&amp;&amp;</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_OnGround<span style="color: #66cc66;">&amp;&amp;!</span>m_OnGroundLast <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #808080; font-style: italic;">// landed!</span>
					m_animationController.<span style="color: #006600;">PlayOnce</span><span style="color: #66cc66;">&#40;</span> kDeadlyAnim <span style="color: #66cc66;">&#41;</span>;
					m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> ResetJumpSequence <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Apply collision detection only when not hurt</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_HasWorldCollision<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Apply gravity only when not hurt</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_ApplyGravity<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Apply friction only when not hurt</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_ApplyFriction<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Doesn't walk</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;	</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_WalkSpeed<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Number</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #cc66cc;">0</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Force update when jumping so he's not left in mid air when going off screen</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_ForceUpdate<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #0066CC;">super</span>.<span style="color: #006600;">m_ForceUpdate</span> <span style="color: #66cc66;">||</span> m_jumping;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
		<span style="color: #808080; font-style: italic;">/// Only kills on touch when the deadly anim is playing</span>
		<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_KillsOnTouch<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> m_animationController.<span style="color: #006600;">m_Playing</span>==kDeadlyAnim;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>Like in the case of the <em>LadyBird </em>there are a number of animations which all lead on from each other when played in sequence:</p>
<div id="attachment_867" style="width: 187px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeleton.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeleton.png" alt="" title="skeleton" width="177" height="259" class="size-full wp-image-867" /></a><p class="wp-caption-text">Walk anim</p></div>
<p>(His eyes just move left to right)</p>
<div id="attachment_870" style="width: 410px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeletonJump.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeletonJump.png" alt="" title="skeletonJump" width="400" height="275" class="size-full wp-image-870" /></a><p class="wp-caption-text">Prepare and then jump anim</p></div>
<p>(Prepares to and then finally jumps &#8211; to give the player fair warning)</p>
<div id="attachment_871" style="width: 229px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeletonLand.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/skeletonLand.png" alt="" title="skeletonLand" width="219" height="308" class="size-full wp-image-871" /></a><p class="wp-caption-text">Lands anim</p></div>
<p>(Lands and deadly spikes protrude &#8211; he will kill on touch at this point)</p>
<p>The only part of the code which needs a special mention is where the skeleton is choosing which direction to jump in:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &gt;summary&lt;</span>
<span style="color: #808080; font-style: italic;">/// Actually jump towards the player</span>
<span style="color: #808080; font-style: italic;">/// &gt;/summary&lt;	</span>
<span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> JumpTowardPlayer<span style="color: #66cc66;">&#40;</span> animName:<span style="color: #0066CC;">String</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// work out a new target velocity</span>
		<span style="color: #000000; font-weight: bold;">var</span> targetPos:Vector2 = m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>.<span style="color: #0066CC;">Add</span><span style="color: #66cc66;">&#40;</span> Vector2.<span style="color: #006600;">RandomRadius</span><span style="color: #66cc66;">&#40;</span> <span style="color: #cc66cc;">100</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #000000; font-weight: bold;">var</span> playerUnitDirection:Vector2 = targetPos.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> m_pos <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">UnitTo</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
		<span style="color: #808080; font-style: italic;">// must jump upwards!</span>
		playerUnitDirection.<span style="color: #006600;">m_y</span> = -<span style="color: #cc66cc;">2</span>;
&nbsp;
		<span style="color: #808080; font-style: italic;">// re-normalise</span>
		playerUnitDirection.<span style="color: #006600;">UnitTo</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
		<span style="color: #808080; font-style: italic;">// jump towards player</span>
		m_vel.<span style="color: #006600;">AddTo</span><span style="color: #66cc66;">&#40;</span> playerUnitDirection.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> kJumpStrength <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
		m_jumping = <span style="color: #000000; font-weight: bold;">true</span>;
&nbsp;
		m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> <span style="color: #000000; font-weight: bold;">null</span> <span style="color: #66cc66;">&#41;</span>;
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>The code picks a random position around the player:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">// work out a new target velocity</span>
<span style="color: #000000; font-weight: bold;">var</span> targetPos:Vector2 = m_platformer.<span style="color: #006600;">m_Player</span>.<span style="color: #006600;">m_Pos</span>.<span style="color: #0066CC;">Add</span><span style="color: #66cc66;">&#40;</span> Vector2.<span style="color: #006600;">RandomRadius</span><span style="color: #66cc66;">&#40;</span> <span style="color: #cc66cc;">100</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>This was done to stop multiple skeletons from landing in the exact same spot too much, which looked unnatural. Then, this target position is turned into a unit length direction vector, which points from the skeleton towards the player:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> playerUnitDirection:Vector2 = targetPos.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> m_pos <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">UnitTo</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>But of course when jumping, one must always jump upwards, so I simply set the y axis of the vector to be -2. This then breaks the unit length constraint, so I have to renormalise again:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">// must jump upwards!</span>
playerUnitDirection.<span style="color: #006600;">m_y</span> = -<span style="color: #cc66cc;">2</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// re-normalise</span>
playerUnitDirection.<span style="color: #006600;">UnitTo</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>The reason it was -2 and not -1 or some other number is that this forces the final vector to be mostly pointing upwards with just a little side to side motion. If I&#8217;d chosen -1, it would have been a more even spread. </p>
<blockquote><p>You can use normalisation like this to create different spread patterns, whereby a random unit vector is added to a known fixed direction vector, then renormalised. I&#8217;ve used this technique in the past to create an emission spread for a particle system which needed to emit particles in a cone formation; it was random point in a unit sphere plus some predefined forward direction (scaled as appropriate) and then renormalised.
</p></blockquote>
<p>Then I actually perform the jump by setting the skeleton&#8217;s velocity and clear the animation callback to reset the sequence:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">// jump towards player</span>
m_vel.<span style="color: #006600;">AddTo</span><span style="color: #66cc66;">&#40;</span> playerUnitDirection.<span style="color: #006600;">MulScalarTo</span><span style="color: #66cc66;">&#40;</span> kJumpStrength <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
m_jumping = <span style="color: #000000; font-weight: bold;">true</span>;
&nbsp;
m_animationController.<span style="color: #006600;">SetEndOfAnimCallback</span><span style="color: #66cc66;">&#40;</span> <span style="color: #000000; font-weight: bold;">null</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<h2>And that&#8217;s it!</h2>
<div id="attachment_873" style="width: 610px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/allAi.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/allAi.png" alt="" title="allAi" width="600" height="200" class="size-full wp-image-873" /></a><p class="wp-caption-text">The motley crew</p></div>
<p>That concludes my series on how to make a 2d platformer, I hope you&#8217;ve enjoyed reading it!</p>
<p>As ever, if you want, you can buy the source-code for the entire game (or even try a version <strong>for free</strong>), including all the assets and levels you see above. It will require Adobe Flash CS4+, the <a href="http://opensource.adobe.com/wiki/display/flexsdk/Download+Flex+4">Adobe Flex Compiler 4.0+</a> and either <a href="http://www.sapphiresteel.com/Products/amethyst-ide/article/amethyst-product-page">Amethyst</a>, or <a href="http://www.flashdevelop.org/wikidocs/index.php?title=Main_Page">Flash Develop</a> to get it to build. And you&#8217;ll want <a href="http://tilemap.co.uk/mappy.php">Mappy </a> or some alternative in order to create your own levels!</p>
<p>Following on from feedback from the Angry Birds article, I&#8217;ve included a Flash Develop project as well as an Amethyst project inside the .zip file, to help you get started more quickly, no matter which development environment you have.</p>
<p>You are free to use it for whatever purposes you see fit, even for commercial games or in multiple projects, the only thing I ask is that you don&#8217;t spread/redistribute the source-code around. Please note that you will need some programming and design skills in order to make the best use of this!</p>
<p><a href="http://www.wildbunny.co.uk/blog/how-to-make-a-platform-game-source-code-options/">Go to the source-code option page</a> to choose the version you&#8217;d like &#8211; from <strong>completely free</strong> to the full version!</p>
<p><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Subscribers can access the source here</a></p>
<p>Until next time, Have fun!</p>
<p>Cheers, Paul.</p>

				<!-- Social Sharing Toolkit v2.0.4 | http://www.marijnrongen.com/wordpress-plugins/social_sharing_toolkit/ -->
				<div class="mr_social_sharing_wrapper"><span class="mr_social_sharing"><script type="text/javascript">
							  reddit_url = "http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/";
							  reddit_title = "How to make a 2d Platform Game – part 3 ladders and AI";
							</script>
							<script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></span><span class="mr_social_sharing"><a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/" data-count="horizontal" data-text="How to make a 2d Platform Game – part 3 ladders and AI">Tweet</a></span><span class="mr_social_sharing"><iframe src="https://www.facebook.com/plugins/like.php?locale=en_US&amp;href=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2011%2F12%2F20%2Fhow-to-make-a-2d-platform-game-part-3-ladders-and-ai%2F&amp;layout=button_count&amp;show_faces=false&amp;width=90px&amp;height=21px" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></span><span class="mr_social_sharing"><div id="fb-root"></div><fb:send href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/" font=""></fb:send></span><span class="mr_social_sharing"><g:plusone size="medium" href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/"></g:plusone></span><span class="mr_social_sharing"><a href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2011%2F12%2F20%2Fhow-to-make-a-2d-platform-game-part-3-ladders-and-ai%2F&amp;title=How+to+make+a+2d+Platform+Game+%E2%80%93+part+3+ladders+and+AI" target="_blank" class="mr_social_sharing_popup_link"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/images/buttons/stumbleupon.png" alt="Submit to StumbleUpon" title="Submit to StumbleUpon"/></a></span></div><span style="clear:both;display:none;"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-spamfree/img/wpsf-img.php" width="0" height="0" alt="" style="border-style:none;width:0px;height:0px;display:none;" /></span>											</div><!-- .entry-content -->

					<div id="entry-author-info">
						<div id="author-avatar">
							<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=60&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />						</div><!-- #author-avatar -->
						<div id="author-description">
							<h2>About Paul Firth</h2>
							A games industry veteran of ten years, seven of which spent at Sony Computer Entertainment Europe, he has had key technical roles on triple-A titles like the Bafta Award Winning Little Big Planet (PSP), 24: The Game (PS2), special effects work on Heavenly Sword (PS3), some in-show graphics on the BBC�s version of Robot Wars, the TV show, as well as a few more obscure projects.
&nbsp;
Now joint CEO of Wildbunny, he is able to give himself hiccups simply by coughing.
&nbsp;
1NobNQ88UoYePFi5QbibuRJP3TtLhh65Jp							<div id="author-link">
								<a href="http://www.wildbunny.co.uk/blog/author/paulfirth/">
									View all posts by Paul Firth <span class="meta-nav">&rarr;</span>								</a>
							</div><!-- #author-link	-->
						</div><!-- #author-description -->
					</div><!-- #entry-author-info -->

					<div class="entry-utility">
						This entry was posted in <a href="http://www.wildbunny.co.uk/blog/category/as3/" title="View all posts in AS3" rel="category tag">AS3</a>, <a href="http://www.wildbunny.co.uk/blog/category/platform-game/ladders-and-ai/" title="View all posts in Ladders and AI" rel="category tag">Ladders and AI</a>, <a href="http://www.wildbunny.co.uk/blog/category/platform-game/" title="View all posts in Platform game" rel="category tag">Platform game</a>, <a href="http://www.wildbunny.co.uk/blog/category/technical/" title="View all posts in Technical" rel="category tag">Technical</a> and tagged <a href="http://www.wildbunny.co.uk/blog/tag/adobe-flash/" rel="tag">adobe flash</a>, <a href="http://www.wildbunny.co.uk/blog/tag/ai/" rel="tag">AI</a>, <a href="http://www.wildbunny.co.uk/blog/tag/bounding-box/" rel="tag">bounding box</a>, <a href="http://www.wildbunny.co.uk/blog/tag/game-developement/" rel="tag">game developement</a>, <a href="http://www.wildbunny.co.uk/blog/tag/platform-game-2/" rel="tag">platform game</a>, <a href="http://www.wildbunny.co.uk/blog/tag/platformer/" rel="tag">platformer</a>, <a href="http://www.wildbunny.co.uk/blog/tag/tutorial/" rel="tag">tutorial</a>. Bookmark the <a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/" title="Permalink to How to make a 2d Platform Game &#8211; part 3 ladders and AI" rel="bookmark">permalink</a>.											</div><!-- .entry-utility -->
				</div><!-- #post-## -->

				<div id="nav-below" class="navigation">
					<div class="nav-previous"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/" rel="prev"><span class="meta-nav">&larr;</span> How to make a 2d platform game &#8211; part 2 collision detection</a></div>
					<div class="nav-next"><a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/" rel="next">How to make games <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-below -->

				
			<div id="comments">


			<h3 id="comments-title">14 Responses to <em>How to make a 2d Platform Game &#8211; part 3 ladders and AI</em></h3>


			<ol class="commentlist">
					<li class="comment even thread-even depth-1" id="li-comment-1050">
		<div id="comment-1050">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/18e7945108d79cfec2656cdf4d799786?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://sudoit.org' rel='external nofollow' class='url'>Chuck</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1050">
			December 21, 2011 at 3:59 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Awesome write-up, man. And it comes at a time where I was *really* wanting to make a game of some sort too.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1050#respond' onclick='return addComment.moveForm("comment-1050", "1050", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1051">
		<div id="comment-1051">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1051">
			December 21, 2011 at 4:15 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>No problem &#8211; happy to help <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1051#respond' onclick='return addComment.moveForm("comment-1051", "1051", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-1053">
		<div id="comment-1053">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/a2728f91bcbe3460f0e15fe4ef263dfe?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1053">
			December 22, 2011 at 11:48 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I&#8217;m glad you are updating this blog again. Your writeups are thorough and enjoyably detailed.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1053#respond' onclick='return addComment.moveForm("comment-1053", "1053", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1054">
		<div id="comment-1054">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1054">
			December 22, 2011 at 12:23 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Thank you <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1054#respond' onclick='return addComment.moveForm("comment-1054", "1054", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/' rel='external nofollow' class='url'>How to make a 2d platform game &#8211; part 2 collision detection | Paul&#039;s blog@Wildbunny</a></p>
	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-1077">
		<div id="comment-1077">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/5dc010c2ca773f7c2129bd1d78b4bd89?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.ladders-online.com' rel='external nofollow' class='url'>Ladders</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1077">
			January 5, 2012 at 1:57 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Fair play to you the game playes great. It reminds me a lot of Tresure Island Dizzy.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1077#respond' onclick='return addComment.moveForm("comment-1077", "1077", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/' rel='external nofollow' class='url'>How to make games | Paul&#039;s blog@Wildbunny</a></p>
	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-1453">
		<div id="comment-1453">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/fadd981085bacd832676e2b3858c64dc?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Abbas</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1453">
			May 31, 2012 at 9:39 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>hi paul,<br />
i kinda completed my game, but i couldn&#8217;t manage to understand how the 2 background images work (furthest one is drawn with respect to the map, and its fixed) but the mid-ground image is definitely not the same.</p>
<p>here is the game link:<br />
<a href="http://www.vistamoda.com/index.php/have-fun/54-grant-the-warrior-ant" rel="nofollow">http://www.vistamoda.com/index.php/have-fun/54-grant-the-warrior-ant</a></p>
<p>(i posted the link earlier but the game then was the infrastructure)</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1453#respond' onclick='return addComment.moveForm("comment-1453", "1453", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-1471">
		<div id="comment-1471">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/91f9ffbcfc283bab2919f3fc837859cb?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Leyla</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1471">
			June 15, 2012 at 11:18 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I&#8217;m so lost. I don&#8217;t get where these codes are supposed to go when pasted into layers or objects. Which codes get the AI scripts? Where exactly does all that hit detection script go? A particular layer, perhaps? If so, which one? I keep reading and re-reading, but I&#8217;m just not seeing it. I understand the dynamics of what the codes are meant to accomplish, even when reading it from the script, but I don&#8217;t get where they are placed. Please, help&#8230;</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1471#respond' onclick='return addComment.moveForm("comment-1471", "1471", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1475">
		<div id="comment-1475">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1475">
			June 20, 2012 at 11:41 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Leyla,</p>
<p>They go inside the structure of the engine which powers the platform game. You can get an idea of the big picture by downloading the free version and taking a look:</p>
<p><a href="http://www.wildbunny.co.uk/blog/how-to-make-a-platform-game-source-code-options/" rel="nofollow">http://www.wildbunny.co.uk/blog/how-to-make-a-platform-game-source-code-options/</a></p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1475#respond' onclick='return addComment.moveForm("comment-1475", "1475", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-1588">
		<div id="comment-1588">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/f0b57ef829ebb8f69a6197cf78e4cf2a?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.ladders-direct.com/' rel='external nofollow' class='url'>fibreglass steps</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1588">
			September 15, 2012 at 4:27 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hahaha wow this is a funny game. The visual effects are really great and  the way that character punches is hilarious.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1588#respond' onclick='return addComment.moveForm("comment-1588", "1588", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1" id="li-comment-1656">
		<div id="comment-1656">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/859d9af08b4874b81fdf459601f07dc8?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">mark</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1656">
			November 1, 2012 at 12:53 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi I was wondering how do you make the door to the next level. I cant get my &#8220;doors&#8221; to unload the current level and load a new one.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1656#respond' onclick='return addComment.moveForm("comment-1656", "1656", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-1658">
		<div id="comment-1658">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-1658">
			November 1, 2012 at 10:07 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Mark,</p>
<p>Are you using my source or is this your own stuff?</p>
<p>In my stuff I have a special tile which represents a door. When its collided with I set a timer and when that expires I just load the new map, with the same code which loaded the original map.</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=1658#respond' onclick='return addComment.moveForm("comment-1658", "1658", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-3713">
		<div id="comment-3713">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/15417eb99c56f2df32292ba9e8a90d7f?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Josh Smithers</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/comment-page-1/#comment-3713">
			April 26, 2014 at 10:54 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Excellent article thanks! If anybody&#8217;s interested in developing flash games I would also recommend reading <a href="http://www.scratchpad-cloud.com/blogs.htm" rel="nofollow">http://www.scratchpad-cloud.com/blogs.htm</a> as it talks through how Flash games enemy artificial intelligence works.  Really helpful like this article.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/?replytocom=3713#respond' onclick='return addComment.moveForm("comment-3713", "3713", "respond", "829")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
			</ol>



								<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://www.wildbunny.co.uk/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='829' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
							<script type='text/javascript'>
	<!--
	refJS = escape( document[ 'referrer' ] );
	document.write("<input type='hidden' name='refJS' value='"+refJS+"'>");
	// -->
	</script>
	<p style="font-size:9px;clear:both;">WP-SpamFree by <a rel="nofollow" href="http://www.polepositionmarketing.com/library/wp-spamfree/" title="WP-SpamFree WordPress Anti-Spam Plugin" >Pole Position Marketing</a>

					</form>
							</div><!-- #respond -->
			
</div><!-- #comments -->


			</div><!-- #content -->
		</div><!-- #container -->


		<div id="primary" class="widget-area" role="complementary">
			<ul class="xoxo">

<li id="search-3" class="widget-container widget_search"><h3 class="widget-title">Search</h3><form role="search" method="get" id="searchform" class="searchform" action="http://www.wildbunny.co.uk/blog/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form></li><li id="categories-3" class="widget-container widget_categories"><h3 class="widget-title">Choose a category</h3><select name='cat' id='cat' class='postform' >
	<option value='-1'>Select Category</option>
	<option class="level-0" value="104">Algorithmic trading&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="7">Animal Army&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="35">AS3&nbsp;&nbsp;(19)</option>
	<option class="level-0" value="44">Beginner&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="114">Bitcoin&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="6">Business&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="73">Chip tunes&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="71">Circles&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="40">Collision Detection&nbsp;&nbsp;(8)</option>
	<option class="level-0" value="53">Developer love&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="117">Entity systems&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="103">Finance&nbsp;&nbsp;(6)</option>
	<option class="level-0" value="101">Full games&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="67">Geometry&nbsp;&nbsp;(9)</option>
	<option class="level-0" value="58">Graphics&nbsp;&nbsp;(9)</option>
	<option class="level-0" value="100">JSON&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="42">Ladders and AI&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="96">learning-to-program&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="28">Making angry birds&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="47">Micro-transactions&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="90">Multi-player&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="72">Music&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="118">Optimisation&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="41">Parallax and Tiles&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="65">paypal&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="97">Physics&nbsp;&nbsp;(8)</option>
	<option class="level-0" value="36">Platform game&nbsp;&nbsp;(5)</option>
	<option class="level-0" value="68">Polygons&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="98">Portals&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="52">Promotion&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="93">Self improvement&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="66">Server side&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="99">Silverlight&nbsp;&nbsp;(5)</option>
	<option class="level-0" value="45">Stencyl&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="5">Technical&nbsp;&nbsp;(28)</option>
	<option class="level-0" value="1">Uncategorized&nbsp;&nbsp;(1)</option>
</select>

<script type='text/javascript'>
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "http://www.wildbunny.co.uk/blog/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</li>			</ul>
		</div><!-- #primary .widget-area -->


		<div id="secondary" class="widget-area" role="complementary">
			<ul class="xoxo">
				<li id="user_bio-2" class="widget-container widget_user_bio"><h3 class="widget-title"><div style="text-align:center">About the author</div></h3><div class="ub-grav" style="margin:5px 5px 0px 5px;text-align:center;"><img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=128&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D128&amp;r=G' class='avatar avatar-128 photo' height='128' width='128' /></div>A games industry veteran of ten years, seven of which spent at Sony Computer Entertainment Europe, he has had key technical roles on triple-A titles like the Bafta Award Winning Little Big Planet (PSP), 24: The Game (PS2), special effects work on Heavenly Sword (PS3), some in-show graphics on the BBC�s version of Robot Wars, the TV show, as well as a few more obscure projects.
&nbsp;
Now joint CEO of Wildbunny, he is able to give himself hiccups simply by coughing.
&nbsp;
1NobNQ88UoYePFi5QbibuRJP3TtLhh65Jp
</li><li id="widget_featured-posts-2" class="widget-container widget_featured-posts"><h3 class="widget-title">Featured Posts</h3>	
	<ul id="yiw-featured-post">
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/shop.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="How to make a multi-player game � part 2" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/">How to make a multi-player game � part 2</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/flashLogo.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="How to make games" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/">How to make games</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2013/04/17/algorithmic-trading-for-dummies-part-2/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2013/04/stop-loss.jpg&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Algorithmic trading for dummies &#8211; part 2" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2013/04/17/algorithmic-trading-for-dummies-part-2/">Algorithmic trading for dummies &#8211; part 2</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2012/11/01/10-steps-to-becoming-a-better-programmer/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/stencylRules.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="10 steps to becoming a better programmer" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2012/11/01/10-steps-to-becoming-a-better-programmer/">10 steps to becoming a better programmer</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/04/real-pong.jpg&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Physics engines for dummies" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/">Physics engines for dummies</a>
	       </h4>
	   </li>
	</ul>
	
	</li><li id="advanced-featured-page-widget-3" class="widget-container widget_advanced-featured-page-widget"><h3 class="widget-title">Tutorials with code to buy</h3><div class="post-2295 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-multiplayer-asteroids-engine/" title="Buy multiplayer asteroids engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/multiplayer.jpg" class="attachment-200 by 200 image" alt="multiplayer" /></a></div><!--end post_class()-->

</li><li id="advanced-featured-page-widget-2" class="widget-container widget_advanced-featured-page-widget"><div class="post-2299 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-angrybirds-alike-engine/" title="Buy Angrybirds-alike engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/birds.jpg" class="attachment-200 by 200 image" alt="birds" /></a></div><!--end post_class()-->

</li><li id="advanced-featured-page-widget-4" class="widget-container widget_advanced-featured-page-widget"><div class="post-2301 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-platform-game-engine/" title="Buy platform game engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/platform.png" class="attachment-200 by 200 image" alt="platform" /></a></div><!--end post_class()-->

</li><li id="wp125" class="widget-container wp125_write_ads_widget">
<h3 class="widget-title">Affiliates</h3><div id="wp125adwrap_1c">
<div class="wp125ad odd"><a href="index.php?adclick=10" title="plus500" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2013/03/plus500-200x200.gif" alt="plus500" /></a></div>
<div class="wp125ad even"><a href="https://www.cavirtex.com/Z/50680" title="cavirtex" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/03/caVirtex.gif" alt="cavirtex" /></a></div>
<div class="wp125ad odd"><a href="http://www.freelancer.co.uk/affiliates/wildbunny2/" title="freelancer" rel="nofollow"target='_blank'><img src="/images/freelancer.png" alt="freelancer" /></a></div>
<div class="wp125ad even"><a href="http://www.shareasale.com/r.cfm?b=531904&u=949687&m=41388&urllink=&afftrack=" title="wp engine" rel="nofollow"target='_blank'><img src="http://www.shareasale.com/image/41388/sas_banner_250x250.jpg" alt="wp engine" /></a></div>
<div class="wp125ad odd"><a href="http://www.wildbunny.co.uk/blog/advertise-here/" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/images/blankAdvert.png" alt="" /></a></div>
</div>
</li><li id="ezadswidget-4" class="widget-container ezAdsWidget"><h3 class="widget-title">My MetaTrader 5 products</h3><!-- Easy AdSense V2.79 -->
<!-- Widg[count: 2] -->
<div class="ezAdsense adsense adsense-widget"><div style="text-align:center;margin:0px; "><div style="width:350px">
<a target="_blank" href="http://mql5.com/dzz" title="Download VWAP technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/925/mid" alt="Buy VWAP customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/e08" title="Download Average Spread technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/951/mid" alt="Buy Average Spread customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/e09" title="Download Bid Ask Volumes technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/950/mid" alt="Buy Bid Ask Volumes customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/po9" title="Download Market Activity technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/963/mid" alt="Buy Market Activity customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/poa" title="Download Precision Scalper trading system from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/972/mid" alt="Buy Precision Scalper trading application in the store of automated robot systems" width="400" height="60"></a>
</div></div></div></li>			</ul>
		</div><!-- #secondary .widget-area -->

	</div><!-- #main -->

	<div id="footer" role="contentinfo">
		<div id="colophon">



			<div id="site-info">
				<a href="http://www.wildbunny.co.uk/blog/" title="Wildbunny blog" rel="home">
					Wildbunny blog				</a>
			</div><!-- #site-info -->

			<div id="site-generator">
								<a href="http://wordpress.org/"
						title="Semantic Personal Publishing Platform" rel="generator">
					Proudly powered by WordPress.				</a>
			</div><!-- #site-generator -->

		</div><!-- #colophon -->
	</div><!-- #footer -->

</div><!-- #wrapper -->

		
		<script type="text/javascript">
			//<![CDATA[
			jQuery(document).ready(function() {
				var a = '<div id="cookie-law-info-bar"><span>This website uses cookies to improve your experience. We\'ll assume you\'re ok with this, but you can opt-out if you wish.<a href=\"#\" id=\"cookie_action_close_header\"  class=\"medium cli-plugin-button cli-plugin-main-button\" >Accept</a> <a href=\"http://www.wildbunny.co.uk/blog/privacy-policy/\" id=\"CONSTANT_OPEN_URL\" target=\"_new\"  class=\"cli-plugin-main-link\"  >Read More</a></span></div>';
				var b = '{"animate_speed_hide":"500","animate_speed_show":"500","background":"#fff","border":"#444","border_on":true,"button_1_button_colour":"#000","button_1_button_hover":"#000000","button_1_link_colour":"#fff","button_1_as_button":true,"button_2_button_colour":"#333","button_2_button_hover":"#292929","button_2_link_colour":"#444","button_2_as_button":false,"font_family":"inherit","notify_animate_hide":true,"notify_animate_show":false,"notify_div_id":"#cookie-law-info-bar","notify_position_horizontal":"right","notify_position_vertical":"bottom","showagain_tab":false,"showagain_background":"#fff","showagain_border":"#000","showagain_div_id":"#cookie-law-info-again","showagain_x_position":"50%","text":"#000"}';
				cli_show_cookiebar(a,b);
				
							});
			//]]>
		</script>
		
		 
			<a id="FollowMeTabLeftLg" onClick="showFollowMe()" href="#" style="border-bottom:none;"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/leftlg.gif" border="0" /></a>	

<div id="FollowMeBubbleBG" style="visibility:hidden;"></div>
<div id="FollowMeBubble" style="visibility:hidden;border-bottom:none;">


<div class="top" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_top.gif');width:329px;height:60px;float:left;display:block;border-bottom:none;">
<a id="close" onClick="hideFollowMe()" href="#" style="border-bottom:none"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/close.png" border="0" /> </a>
<!-- <a id="grab" target="_blank" title="grab this" href="http://www.ignitesocialmedia.com/tools/follow-me/"><span>grab this</span></a>--></div>
<div class="mid" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_mid.gif');width:329px;background-repeat:repeat-y;float:left;">
<div id="stretch">
<span><a title="
Twitter" target="_blank" href="http://twitter.com/paul_m_firth" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
twitter.png" border="0" alt="
Twitter" /> 
Twitter</a></span>
<span><a title="
Facebook" target="_blank" href="http://www.facebook.com/WildbunnyLtd" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
facebook.png" border="0" alt="
Facebook" /> 
Facebook</a></span>
<span><a title="
RSS" target="_blank" href="http://wildbunny.co.uk/blog/feed" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
rss.png" border="0" alt="
RSS" /> 
RSS</a></span>
</div></div>
<div class="bottom" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_bottom.gif');height:34px;width:329px;clear:both;float:left;">
<a id="grab" target="_blank" title="grab this" style="border-bottom:none;" href="http://www.ignitesocialmedia.com/tools/follow-me/"><span>grab this</span></a>
</div>
<div class="grab" style="width:329px;clear:both;float:left;"><a style="border-bottom:none;" href="http://www.ignitesocialmedia.com/tools/follow-me/"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_grab.gif" /></a></div>
</div>







<div id="thsp-sticky-header">
	<div id="thsp-sticky-header-inner">
		<div id="thsp-sticky-header-title">
			<a href="http://www.wildbunny.co.uk/blog" title="Developer knowledge centre">Wildbunny blog</a>
		</div>
		
		<ul id="thsp-sticky-header-menu" class="menu"><li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-272"><a href="/blog/">All articles</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1302"><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Vector maths</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-319"><a href="http://www.wildbunny.co.uk/blog/contact-me/">Contact me</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2072"><a href="http://www.wildbunny.co.uk/blog/hire-me/">Hire me</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-446"><a href="http://www.wildbunny.co.uk/blog/membership-sign-up-page/">Subscribe!</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-466"><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Members</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1183"><a href="/blog/buy-source-code">Buy source-code</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1694"><a href="http://www.wildbunny.co.uk/blog/privacy-policy/">Privacy policy</a></li>
</ul>	</div><!-- #thsp-sticky-header-inner -->
</div><!-- #thsp-sticky-header --><script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/s2member/s2member-o.php?ws_plugin__s2member_js_w_globals=1&#038;qcABC=1&#038;ver=140105-140105-2848662513'></script>

			<!-- SwfObj: Register SWFs on this page. -->
			<script type="text/javascript">
					swfobject.registerObject("swfobj_0", "8.0.0", "http://www.wildbunny.co.uk/blog/wp-content/plugins/swfobj/expressInstall.swf");
			</script>
</body>
</html>

