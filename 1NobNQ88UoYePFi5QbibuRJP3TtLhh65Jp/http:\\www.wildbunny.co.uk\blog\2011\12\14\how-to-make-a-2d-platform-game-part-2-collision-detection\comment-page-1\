http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/
HTTP/1.0 200 OK
Date: Wed, 23 Jul 2014 07:23:35 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
Set-Cookie: PHPSESSID=9hbooj15rptqkkbllibc9vaqc1; path=/
X-Pingback: http://www.wildbunny.co.uk/blog/xmlrpc.php
Link: <http://www.wildbunny.co.uk/blog/?p=742>; rel=shortlink
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 33321
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8" />
<title>How to make a 2d platform game &#8211; part 2 collision detection | Wildbunny blog</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://www.wildbunny.co.uk/blog/wp-content/themes/twentyten/style.css?v=0" />
<link rel="pingback" href="http://www.wildbunny.co.uk/blog/xmlrpc.php" />

<!-- BEGIN Metadata added by Add-Meta-Tags WordPress plugin
Get the plugin at: http://www.g-loaded.eu/2006/01/05/add-meta-tags-wordpress-plugin/ -->
<meta name="description" content="Hello and welcome back to my blog! In this series of articles, I'm talking about the technology behind a platform game. If you missed part 1 you can check it out here. The language is actionscript 3.0, but the techniques are applicable to all languages." />
<meta name="keywords" content="as3, collision detection, platform game, technical, bounding box, collision detection, contact, continuous, game developement, physics, platform game, simulation, tiles, tutorial" />
<meta name="blogcatalog" content="9BC10671562" />
<div id="ScribCode634274886"></div>
<!-- END Metadata added by Add-Meta-Tags WordPress plugin -->

<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; Feed" href="http://www.wildbunny.co.uk/blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; Comments Feed" href="http://www.wildbunny.co.uk/blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; How to make a 2d platform game &#8211; part 2 collision detection Comments Feed" href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/feed/" />
<link rel='stylesheet' id='bm-author-donations-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/bitmate-author-donations/style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cntctfrm_stylesheet-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/contact-form-plugin/css/style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cookielawinfo-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/css/cli-style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cookielawinfo-table-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/css/cli-tables.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='oikCSS-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/oik/oik.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='bwlinkCSS-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/oik/bwlink.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp125style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/wp125/wp125.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='thsp-sticky-header-plugin-styles-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/sticky-header/css/public.css?ver=1.0.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='featured-post-css-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/featured-post.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='ws-plugin--s2member-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/s2member/s2member-o.php?ws_plugin__s2member_css=1&#038;qcABC=1&#038;ver=140105-140105-2848662513' type='text/css' media='all' />
<link rel='stylesheet' id='mr_social_sharing-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/style.css?ver=3.8.2' type='text/css' media='all' />
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/swfobj/swfobject.js?ver=2.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/comment-reply.min.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/js/jquery.cookie.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/js/cookielawinfo.js?ver=3.8.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var StickyHeaderParams = {"show_at":"200","hide_if_narrower":"600"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/sticky-header/js/public.js?ver=1.0.0'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/script.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/googleplus.js.php?lang=en_US&#038;ver=3.8.2'></script>
<script type='text/javascript' src='http://apis.google.com/js/plusone.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://connect.facebook.net/en_US/all.js?ver=3.8.2#xfbml=1'></script>
<script type='text/javascript' src='http://platform.twitter.com/widgets.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.wildbunny.co.uk/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.wildbunny.co.uk/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='How to make a 2d Platform Game &#8211; part 1' href='http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/' />
<link rel='next' title='How to make a 2d Platform Game &#8211; part 3 ladders and AI' href='http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/' />
<meta name="generator" content="WordPress 3.8.2" />
<link rel='canonical' href='http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comments' />
<link rel='shortlink' href='http://www.wildbunny.co.uk/blog/?p=742' />
<script type="text/javascript" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/js/bubble.js"></script>
<link rel="stylesheet" type="text/css" href="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/css/style.css" />
<style type="text/css">
<!-- Silverlight WordPress Plugin -->
#silverlightControlHost{height:100%;}
</style>
<!-- Protected by WP-SpamFree v2.1.1.2 :: JS BEGIN -->
<script type="text/javascript" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-spamfree/js/wpsfv2-js.php"></script> 
<!-- Protected by WP-SpamFree v2.1.1.2 :: JS END -->

		<style type="text/css">
			#thsp-sticky-header {
				background-color: #181818;
			}
			#thsp-sticky-header,
			#thsp-sticky-header a {
				color: #f9f9f9 !important;
			}
											</style>
	<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #EAEAEA; }
</style>
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">window.google_analytics_uacct = "ca-pub-4897461488762721";</script>
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-16999711-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
</head>

<body class="single single-post postid-742 single-format-standard custom-background">
<div id="wrapper" class="hfeed">
	<div id="header">
		<div id="masthead">
			<div id="branding" role="banner">
								<div id="site-title">
					<span>
						<a href="http://www.wildbunny.co.uk/blog/" title="Wildbunny blog" rel="home">Wildbunny blog</a>
					</span>
				</div>
				<div id="site-description">Developer knowledge centre</div>

										<img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/02/bunnyWP1.gif" width="940" height="198" alt="" />
								</div><!-- #branding -->

			<div id="access" role="navigation">
			  				<div class="skip-link screen-reader-text"><a href="#content" title="Skip to content">Skip to content</a></div>
								<div class="menu-header"><ul id="menu-flowhub-header" class="menu"><li id="menu-item-272" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-272"><a href="/blog/">All articles</a></li>
<li id="menu-item-1302" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1302"><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Vector maths</a></li>
<li id="menu-item-319" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-319"><a href="http://www.wildbunny.co.uk/blog/contact-me/">Contact me</a></li>
<li id="menu-item-2072" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2072"><a href="http://www.wildbunny.co.uk/blog/hire-me/">Hire me</a></li>
<li id="menu-item-446" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-446"><a href="http://www.wildbunny.co.uk/blog/membership-sign-up-page/">Subscribe!</a></li>
<li id="menu-item-466" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-466"><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Members</a></li>
<li id="menu-item-1183" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1183"><a href="/blog/buy-source-code">Buy source-code</a></li>
<li id="menu-item-1694" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1694"><a href="http://www.wildbunny.co.uk/blog/privacy-policy/">Privacy policy</a></li>
</ul></div>			</div><!-- #access -->
		</div><!-- #masthead -->
	</div><!-- #header -->

	<div id="main">

		<div id="container">
			<div id="content" role="main">


				<div id="nav-above" class="navigation">
					<div class="nav-previous"><a href="http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/" rel="prev"><span class="meta-nav">&larr;</span> How to make a 2d Platform Game &#8211; part 1</a></div>
					<div class="nav-next"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/" rel="next">How to make a 2d Platform Game &#8211; part 3 ladders and AI <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-above -->

				<div id="post-742" class="post-742 post type-post status-publish format-standard hentry category-as3 category-collision-detection-platform-game category-platform-game category-technical tag-bounding-box tag-collision-detection tag-contact tag-continuous tag-game-developement tag-physics tag-platform-game-2 tag-simulation tag-tiles tag-tutorial">
					<h1 class="entry-title">How to make a 2d platform game &#8211; part 2 collision detection</h1>

					<div class="entry-meta">
						<span class="meta-prep meta-prep-author">Posted on</span> <a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/" title="4:40 pm" rel="bookmark"><span class="entry-date">December 14, 2011</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="http://www.wildbunny.co.uk/blog/author/paulfirth/" title="View all posts by Paul Firth">Paul Firth</a></span>					</div><!-- .entry-meta -->

					<div class="entry-content">
						<img width="150" height="128" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision3.png" class="attachment-single-post-thumbnail wp-post-image" alt="Figure 4" />						
				<!-- Social Sharing Toolkit v2.0.4 | http://www.marijnrongen.com/wordpress-plugins/social_sharing_toolkit/ -->
				<div class="mr_social_sharing_wrapper"><span class="mr_social_sharing"><script type="text/javascript">
							  reddit_url = "http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/";
							  reddit_title = "How to make a 2d platform game – part 2 collision detection";
							</script>
							<script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></span><span class="mr_social_sharing"><a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/" data-count="horizontal" data-text="How to make a 2d platform game – part 2 collision detection">Tweet</a></span><span class="mr_social_sharing"><iframe src="https://www.facebook.com/plugins/like.php?locale=en_US&amp;href=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2011%2F12%2F14%2Fhow-to-make-a-2d-platform-game-part-2-collision-detection%2F&amp;layout=button_count&amp;show_faces=false&amp;width=90px&amp;height=21px" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></span><span class="mr_social_sharing"><div id="fb-root"></div><fb:send href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/" font=""></fb:send></span><span class="mr_social_sharing"><g:plusone size="medium" href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/"></g:plusone></span><span class="mr_social_sharing"><a href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2011%2F12%2F14%2Fhow-to-make-a-2d-platform-game-part-2-collision-detection%2F&amp;title=How+to+make+a+2d+platform+game+%E2%80%93+part+2+collision+detection" target="_blank" class="mr_social_sharing_popup_link"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/images/buttons/stumbleupon.png" alt="Submit to StumbleUpon" title="Submit to StumbleUpon"/></a></span></div><p>Hello and welcome back to my blog!</p>
<p>In this series of articles, I&#8217;m talking about the technology behind a platform game.</p>
<p>If you missed part 1 you can <a href="http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/">check it out here</a>.</p>
<p>The language is actionscript 3.0, but the techniques are applicable to all languages.</p>
<p>In this particular article I&#8217;m going to talk about the physics, collision detection and AI aspects of the game.</p>
<div id="attachment_784" style="width: 330px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/screenShot.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/screenShot.png" alt="" title="screenShot" width="320" height="180" class="size-full wp-image-784" /></a><p class="wp-caption-text">The Game</p></div>
<p>There is a playable version at the bottom of the post, for those with Flash support in browser.</p>
<h2>Class hierarchy</h2>
<p>It makes sense at this point to talk about the class hierarchy I&#8217;ve used in the game, to represent everything which moves:</p>
<div id="attachment_745" style="width: 411px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/classHierachy.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/classHierachy.png" alt="" title="classHierachy" width="401" height="249" class="size-full wp-image-745" /></a><p class="wp-caption-text">Figure 1</p></div>
<p><em>Figure 1</em> shows the class hierarchy &#8211; at the very top sits <em>MoveableObject</em>, which is where all the generic collision detection and response gets done; I say generic because the player does specialised work to handle things like ladders etc.</p>
<p>Each level in the hierarchy represents separate functionality; for example, <em>Character </em>contains the <em>AnimationController </em>which handles playing the various different animations for each character, <em>SimpleEnemy </em>represents a certain class of enemy character which does no collision detection with the world, and obeys special position markers when it encounters them. The <em>Diamond</em> pickup is a simple object which has no AI, and just collides with the world, so it inherits from the base class, since that&#8217;s all the functionality it needs.</p>
<p>This may seem like a lot of extra complexity for such a simple game, but it really makes adding new enemy types very easy indeed, and simplifies the debugging process because there is so much code shared between each object.</p>
<blockquote><p>If I had to give one piece of advice from 10 years of game development it would be this: avoid code duplication at all costs. It leads to slow development and bug city whereby you fix a bug in one location, and then forget to fix it in the other duplicated locations.</p></blockquote>
<p><em>MoveableObject</em> has certain properties which it requires be implemented by any class which inherits from it:</p>
<ul>
<li>m_HasWorldCollision &#8211; whether full collision detection should be performed</li>
<li>m_ApplyGravity &#8211; whether gravity should be applied</li>
<li>m_ApplyFriction &#8211; whether the world collision should apply friction</li>
</ul>
<p>That way, and child class can chose what elements of collision detection it wants enabled.</p>
<p>Consider the following snippet from the <em>Skeleton </em>character:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Characters</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #006600;">Vector2</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Skeleton <span style="color: #0066CC;">extends</span> Enemy
	<span style="color: #66cc66;">&#123;</span>
		...
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Apply collision detection only when not hurt</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_HasWorldCollision<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Apply gravity only when not hurt</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_ApplyGravity<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Apply friction only when not hurt</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		protected override <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_ApplyFriction<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #66cc66;">!</span>IsHurt<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		...
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>Its been set up to only do collision detection, apply gravity or friction when its not been &#8216;hurt&#8217; (i.e punched by the player), this allows it to have the same behaviour as all other creatures when the player kills them.</p>
<h2>Physics</h2>
<p>Ok, so lets talk about the simple physics inside <em>MoveableObject</em>. Every <em>MoveableObject</em> has a position, a velocity and a radius.</p>
<p>This radius comes from the Flash IDE &#8211; an object instance called &#8216;m_flaCollision&#8217; is checked for in the constructor of <em>MoveableObject</em>, and is a requirement, so the physics engine knows what the object&#8217;s radius is. This radius is then turned into an AABB of size radius x radius, because the collision shapes are all AABBs.</p>
<p>Position is the position of the object in world space (i.e. pixels) and velocity is pixels/second. The update loop for <em>MoveableObject</em> looks like this:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Physics</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">display</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #006600;">Vector2</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">System</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Geometry</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Graphics</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">Level</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> MoveableObject <span style="color: #0066CC;">extends</span> <span style="color: #0066CC;">MovieClip</span> <span style="color: #0066CC;">implements</span> IAABB, ICircle
	<span style="color: #66cc66;">&#123;</span>
		...
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Apply gravity, do collision and integrate position</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> Update<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_ApplyGravity <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				m_vel.<span style="color: #006600;">AddYTo</span><span style="color: #66cc66;">&#40;</span> Constants.<span style="color: #006600;">kGravity</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
				<span style="color: #808080; font-style: italic;">// clamp max speed</span>
				m_vel.<span style="color: #006600;">m_y</span> = <span style="color: #0066CC;">Math</span>.<span style="color: #0066CC;">min</span><span style="color: #66cc66;">&#40;</span> m_vel.<span style="color: #006600;">m_y</span>, Constants.<span style="color: #006600;">kMaxSpeed</span><span style="color: #66cc66;">*</span><span style="color: #cc66cc;">2</span> <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_HasWorldCollision <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// do complex world collision</span>
				Collision<span style="color: #66cc66;">&#40;</span> dt <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #808080; font-style: italic;">// integrate position</span>
			m_pos.<span style="color: #006600;">MulAddScalarTo</span><span style="color: #66cc66;">&#40;</span> m_vel.<span style="color: #0066CC;">Add</span><span style="color: #66cc66;">&#40;</span>m_posCorrect<span style="color: #66cc66;">&#41;</span>, dt <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// force the setter to act</span>
			m_Pos = m_pos;
			m_posCorrect.<span style="color: #0066CC;">Clear</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		...
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>This is the part which actually calls out to the various features of <em>MoveableObject</em> and depends on the child class&#8217;s implementation of those properties I discussed earlier. Child classes call out to this function from their own Update() which contains their specific logic.</p>
<p>This is just your basic physics set-up:</p>
<ul>
<li>Add gravity</li>
<li>Do collision detection</li>
<li>Integrate position</li>
</ul>
<p>This is basically all we need for the game as it stands.</p>
<h2>Collision detection</h2>
<p>When writing the demo above, I did a lot of research on collision detection techniques for platform games because I knew that back in the 1980s when these games first came out, there were no floating point units and collision detection research was in its infancy, so there must be some really easy tricks you can do to get a great result nice and simply.</p>
<blockquote><p>Update: I wish I&#8217;d found <a href="http://games.greggman.com/game/programming_m_c__kids/">this article</a> before I started writing this, its about how the original developers of M.C.Kids on the SNES handled tile based collision detection. In summary its kind of similar to the article I reference below, in that it used collision points, only it goes into more detail about all the ins and outs of the technique.</p></blockquote>
<p><a href="http://www.hobbygamedev.com/int/platformer-game-source-in-processing/">This article</a> contains the most detailed explanation that I could find, but on implementing it I found there were a few things I didn&#8217;t like; the author advocates using a number of predefined points around the player to help detect collisions and to judge what to do next, like this:</p>
<div id="attachment_743" style="width: 74px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/run-collide.gif"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/run-collide.gif" alt="" title="run-collide" width="64" height="80" class="size-full wp-image-743" /></a><p class="wp-caption-text">Points around player</p></div>
<p>The author writes: </p>
<blockquote><p>If the point we check on top goes inside a solid block, we move the player downward so that the top point is just below the block it bumped into. If either right point goes inside a solid block, we move the player left until the offending point is just left of the block it bumped into, and so on&#8230;</p>
<p>Another benefit of detecting player collision using six points in that hexagon configuration is that if the player is jumping horizontally and the feet hit a corner, the player is automatically bumped up onto the surface; if the player falling vertically hits a corner off-center, or steps off a ledge, the player slides off away from the wall. (Try this! It feels much better than it would if the player behaved as a boxy rectangle.)</p></blockquote>
<p>However, I found that the last part he mentions about the player being automatically bumped onto the surface was very jarring and often left me wondering what had happened while playing the game. I also found that it didn&#8217;t help me when the player was moving quickly and became embedded inside a block, because with all points inside the block, there was no clearly correct way to resolve. Also, the amount of code I found I needed was getting excessive so I decided to discard this method &#8211; maybe it would have been better if my player character was taller like in his example.</p>
<h3>A new way and tiles as a broad-phase</h3>
<p>Obviously I needed a new way, but first lets talk about the tile coordinate system and how it makes collision detection nice and easy.</p>
<div id="attachment_751" style="width: 386px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision1.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision1.png" alt="" title="tileCollision1" width="376" height="323" class="size-full wp-image-751" /></a><p class="wp-caption-text">Figure 2</p></div>
<p>Consider <em>Figure 2</em> in which the tile coordinates have been numbered 0-6 in the X axis, and 0-5 in the Y. This shows a typical scenario where the player character (shown in red) is jumping up and will hit the green platform at some point between the current frame and the next frame (the player&#8217;s velocity is shown as the arrow). In order for the collision system to know which tiles need checking against the player, its a simple matter to enclose the player&#8217;s range of motion within an axis aligned bounding box, or AABB.</p>
<div id="attachment_752" style="width: 386px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision2.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision2.png" alt="" title="tileCollision2" width="376" height="323" class="size-full wp-image-752" /></a><p class="wp-caption-text">Figure 3</p></div>
<p><em>Figure 3</em> shows this bounding box overlaid on the scene in blue. If we take that bounding box and highlight every tile which intersects with it, we now know which tiles we need to consider for collision detection against the player.</p>
<div id="attachment_753" style="width: 386px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision3.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision3.png" alt="" title="tileCollision3" width="376" height="323" class="size-full wp-image-753" /></a><p class="wp-caption-text">Figure 4</p></div>
<p><em>Figure 4</em> shows the relevant tiles highlighted in yellow.</p>
<p>Because there is a direct 1->1 mapping between world coordinates and tile coordinates, it becomes incredibly easy to get access to the tiles in order to perform fine grained collision detection against. This is in essence what a broad-phase collision detection system does, and its refreshing to see it arise naturally as a direct consequence of using a tile engine in the first place.</p>
<h3>The new way</h3>
<p>Because we don&#8217;t want the player (or any other fast moving object) passing though platforms if they move too quickly, the fine grained collision detection system, or <em>narrow phase</em>, must be good enough to prevent this from happening.</p>
<p>I&#8217;m going to use a technique I first talked about a while back, called <a href="http://www.wildbunny.co.uk/blog/2011/03/25/speculative-contacts-an-continuous-collision-engine-approach-part-1/">Speculative Contacts</a>. Don&#8217;t worry if it sounds horribily complex, its actually rather simple. </p>
<p>All it requires to work is a function which can return the distance between any two objects.</p>
<h3>The collision shape</h3>
<p>Before I go into the details, its important that I talk about how the choice of collision shape will affect the feel of the game. I started out with a circle to represent moving objects, but I soon realised this wasn&#8217;t going to work.</p>
<div id="attachment_756" style="width: 160px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/circleRoll.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/circleRoll.png" alt="" title="circleRoll" width="150" height="102" class="size-full wp-image-756" /></a><p class="wp-caption-text">Figure 5</p></div>
<p>The reason is obvious looking at <em>Figure 5</em>; circles tend to roll smoothly off the edges of objects when placed right on them, which is exactly what you don&#8217;t want happening when you&#8217;re lining yourself up for a jump.</p>
<div id="attachment_757" style="width: 162px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/aabbRoll.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/aabbRoll.png" alt="" title="aabbRoll" width="152" height="107" class="size-full wp-image-757" /></a><p class="wp-caption-text">Figure 6</p></div>
<p>A better choice is the <em>AABB</em>, which naturally cannot rotate and therefore will allow objects to perch right on the edge of platforms without falling off them, as shown in <em>Figure 6</em>.</p>
<h3>Distance function</h3>
<p>In order to implement <a href="http://www.wildbunny.co.uk/blog/2011/03/25/speculative-contacts-an-continuous-collision-engine-approach-part-1/">Speculative Contacts</a> in this case, we need a distance function which will give us distance between two AABBs.</p>
<p>In order to achieve this we turn to the a technique from the <a href="http://www.pfirth.co.uk/minkowski.html">Minkowski Difference</a>. If we shrink one AABB down to a point, and grow the other one by the extents (width and height) of the first, the problem becomes one of finding the distance between the point and the new AABB.</p>
<div id="attachment_764" style="width: 339px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/aabbDistance1.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/aabbDistance1.png" alt="" title="aabbDistance1" width="329" height="296" class="size-full wp-image-764" /></a><p class="wp-caption-text">Figure 7</p></div>
<p><em>Figure 7</em>: In order to find the distance <em>d</em>, between AABBs <em>A</em> and <em>B</em>&#8230;</p>
<div id="attachment_765" style="width: 339px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/aabbDistance2.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/aabbDistance2.png" alt="" title="aabbDistance2" width="329" height="306" class="size-full wp-image-765" /></a><p class="wp-caption-text">Figure 8</p></div>
<p><em>Figure 8</em>: We shrink <em>B</em> down to a point and expand <em>A</em> by the extents of <em>B</em>, then we can use a simple distance from AABB to point function.</p>
<h3>Distance from AABB to point</h3>
<p>We actually only need the closest distance in each axis for our purposes, so we&#8217;re ignoring the case where the corner of the AABB is the closest to the point.</p>
<div id="attachment_767" style="width: 296px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/pointAabbDistance1.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/pointAabbDistance1.png" alt="" title="pointAabbDistance1" width="286" height="238" class="size-full wp-image-767" /></a><p class="wp-caption-text">Figure 9</p></div>
<p><em>Figure 9</em>: To find the distance between AABB <em>A </em>and point <em>B</em> we calculate the vector from <em>A</em>-><em>B</em>, <em>D </em>and then take the <em>Major Axis</em> of this vector. That is, the signed, unit length vector in which the only coordinate filled in represents the largest coordinate of the original vector.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
<span style="color: #808080; font-style: italic;">/// Get the largest coordinate and return a signed, unit vector containing only that coordinate</span>
<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">get</span> m_MajorAxis<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>:Vector2
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">Math</span>.<span style="color: #0066CC;">abs</span><span style="color: #66cc66;">&#40;</span> m_x <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&gt;</span><span style="color: #0066CC;">Math</span>.<span style="color: #0066CC;">abs</span><span style="color: #66cc66;">&#40;</span> m_y <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #b1b100;">return</span> <span style="color: #000000; font-weight: bold;">new</span> Vector2<span style="color: #66cc66;">&#40;</span> Scalar.<span style="color: #006600;">Sign</span><span style="color: #66cc66;">&#40;</span>m_x<span style="color: #66cc66;">&#41;</span>, <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>;
	<span style="color: #66cc66;">&#125;</span>
	<span style="color: #b1b100;">else</span> 
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #b1b100;">return</span> <span style="color: #000000; font-weight: bold;">new</span> Vector2<span style="color: #66cc66;">&#40;</span> <span style="color: #cc66cc;">0</span>, Scalar.<span style="color: #006600;">Sign</span><span style="color: #66cc66;">&#40;</span>m_y<span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<div id="attachment_768" style="width: 296px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/pointAabbDistance2.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/pointAabbDistance2.png" alt="" title="pointAabbDistance2" width="286" height="325" class="size-full wp-image-768" /></a><p class="wp-caption-text">Figure 10</p></div>
<p><em>Figure 10</em>: The <em>Major Axis</em> has now become the plane normal for our collision. We can calculate the position of the plane by scaling this normal by the half extents of <em>A </em>and adding on the position of <em>A </em>in world space). The distance <em>d</em>, from point <em>B </em>to this new plane is the final distance between point and AABB, and thus the distance between two AABBs.</p>
<h3>Speculative Contacts</h3>
<!-- Easy AdSense V2.79 -->
<!-- Post[count: 1] -->
<div class="ezAdsense adsense adsense-midtext" style="text-align:center;margin:12px; "><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- medi -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:250px"
     data-ad-client="ca-pub-4897461488762721"
     data-ad-slot="9797433564"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div><p>Now we have all the tools we need to get this technique working!</p>
<div id="attachment_753" style="width: 386px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision3.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tileCollision3.png" alt="" title="tileCollision3" width="376" height="323" class="size-full wp-image-753" /></a><p class="wp-caption-text">Figure 4</p></div>
<p>Looking back at Figure 4 again, all we have to do now is to query the map to see if any of those tiles highlighted in yellow are collidable and if so, we must calculate the distance to each one and the normal as we did above.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Physics</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">display</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #006600;">Vector2</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">System</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Geometry</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Graphics</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">Level</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> MoveableObject <span style="color: #0066CC;">extends</span> <span style="color: #0066CC;">MovieClip</span> <span style="color: #0066CC;">implements</span> IAABB, ICircle
	<span style="color: #66cc66;">&#123;</span>
		...
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Do collision detection and response for this object</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		protected <span style="color: #000000; font-weight: bold;">function</span> Collision<span style="color: #66cc66;">&#40;</span> dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// where are we predicted to be next frame?</span>
			<span style="color: #000000; font-weight: bold;">var</span> predictedPos:Vector2 = Platformer.<span style="color: #006600;">m_gTempVectorPool</span>.<span style="color: #006600;">AllocateClone</span><span style="color: #66cc66;">&#40;</span> m_pos <span style="color: #66cc66;">&#41;</span>.<span style="color: #006600;">MulAddScalarTo</span><span style="color: #66cc66;">&#40;</span> m_vel, dt <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// find min/max</span>
			<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">min</span>:Vector2 = m_pos.<span style="color: #0066CC;">Min</span><span style="color: #66cc66;">&#40;</span> predictedPos <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">max</span>:Vector2 = m_pos.<span style="color: #0066CC;">Max</span><span style="color: #66cc66;">&#40;</span> predictedPos <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// extend by radius</span>
			<span style="color: #0066CC;">min</span>.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> m_halfExtents <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #0066CC;">max</span>.<span style="color: #006600;">AddTo</span><span style="color: #66cc66;">&#40;</span> m_halfExtents <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// extend a bit more - this helps when player is very close to boundary of one map cell</span>
			<span style="color: #808080; font-style: italic;">// but not intersecting the next one and is up a ladder</span>
			<span style="color: #0066CC;">min</span>.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> Constants.<span style="color: #006600;">kExpand</span> <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #0066CC;">max</span>.<span style="color: #006600;">AddTo</span><span style="color: #66cc66;">&#40;</span> Constants.<span style="color: #006600;">kExpand</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			PreCollisionCode<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			m_map.<span style="color: #006600;">DoActionToTilesWithinAabb</span><span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">min</span>, <span style="color: #0066CC;">max</span>, InnerCollide, dt <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			PostCollisionCode<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Inner collision response code</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		protected <span style="color: #000000; font-weight: bold;">function</span> InnerCollide<span style="color: #66cc66;">&#40;</span>tileAabb:AABB, tileType:<span style="color: #0066CC;">int</span>, dt:<span style="color: #0066CC;">Number</span>, i:<span style="color: #0066CC;">int</span>, j:<span style="color: #0066CC;">int</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// is it collidable?</span>
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> Map.<span style="color: #006600;">IsTileObstacle</span><span style="color: #66cc66;">&#40;</span> tileType <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// standard collision responce</span>
				<span style="color: #000000; font-weight: bold;">var</span> collided:<span style="color: #0066CC;">Boolean</span> = Collide.<span style="color: #006600;">AabbVsAabb</span><span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">this</span>, tileAabb, m_contact, i, j, m_map <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> collided <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					CollisionResponse<span style="color: #66cc66;">&#40;</span> m_contact.<span style="color: #006600;">m_normal</span>, m_contact.<span style="color: #006600;">m_dist</span>, dt <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
			<span style="color: #b1b100;">else</span> <span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> Map.<span style="color: #006600;">IsJumpThroughPlatform</span><span style="color: #66cc66;">&#40;</span> tileType <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">||</span> Map.<span style="color: #006600;">IsTileLadderTop</span><span style="color: #66cc66;">&#40;</span>tileType<span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// these type of platforms are handled separately since you can jump through them</span>
				collided = Collide.<span style="color: #006600;">AabbVsAabbTopPlane</span><span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">this</span>, tileAabb, m_contact <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> collided <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					CollisionResponse<span style="color: #66cc66;">&#40;</span> m_contact.<span style="color: #006600;">m_normal</span>, m_contact.<span style="color: #006600;">m_dist</span>, dt <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
		...
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>The above snippet shows the relevant code in the <em>MoveabeObject </em>class. The function <em>Collision</em> is the entry point.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #0066CC;">Level</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Geometry</span>.<span style="color: #006600;">AABB</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">System</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #006600;">Vector2</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Map
	<span style="color: #66cc66;">&#123;</span>
		...
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Call out to the action for each tile within the given world space bounds</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> DoActionToTilesWithinAabb<span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">min</span>:Vector2, <span style="color: #0066CC;">max</span>:Vector2, action:<span style="color: #000000; font-weight: bold;">Function</span>, dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// round down</span>
			<span style="color: #000000; font-weight: bold;">var</span> minI:<span style="color: #0066CC;">int</span> = WorldCoordsToTileX<span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">min</span>.<span style="color: #006600;">m_x</span><span style="color: #66cc66;">&#41;</span>;
			<span style="color: #000000; font-weight: bold;">var</span> minJ:<span style="color: #0066CC;">int</span> = WorldCoordsToTileY<span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">min</span>.<span style="color: #006600;">m_y</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// round up</span>
			<span style="color: #000000; font-weight: bold;">var</span> maxI:<span style="color: #0066CC;">int</span> = WorldCoordsToTileX<span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">max</span>.<span style="color: #006600;">m_x</span>+<span style="color: #cc66cc;">0.5</span><span style="color: #66cc66;">&#41;</span>;
			<span style="color: #000000; font-weight: bold;">var</span> maxJ:<span style="color: #0066CC;">int</span> = WorldCoordsToTileY<span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">max</span>.<span style="color: #006600;">m_y</span>+<span style="color: #cc66cc;">0.5</span><span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">for</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #000000; font-weight: bold;">var</span> i:<span style="color: #0066CC;">int</span> = minI; i<span style="color: #66cc66;">&lt;</span>=maxI; i++ <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #b1b100;">for</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #000000; font-weight: bold;">var</span> j:<span style="color: #0066CC;">int</span> = minJ; j<span style="color: #66cc66;">&lt;</span>=maxJ; j++ <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #808080; font-style: italic;">// generate aabb for this tile</span>
					FillInTileAabb<span style="color: #66cc66;">&#40;</span> i, j, m_aabbTemp <span style="color: #66cc66;">&#41;</span>;
&nbsp;
					<span style="color: #808080; font-style: italic;">// call on the mid-ground map (ladders and special objects)</span>
					action<span style="color: #66cc66;">&#40;</span> m_aabbTemp, GetMidgroundTile<span style="color: #66cc66;">&#40;</span> i, j <span style="color: #66cc66;">&#41;</span>, dt, i, j <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #b1b100;">for</span> <span style="color: #66cc66;">&#40;</span> i = minI; i<span style="color: #66cc66;">&lt;</span>=maxI; i++ <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #b1b100;">for</span> <span style="color: #66cc66;">&#40;</span> j = minJ; j<span style="color: #66cc66;">&lt;</span>=maxJ; j++ <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #808080; font-style: italic;">// generate aabb for this tile</span>
					FillInTileAabb<span style="color: #66cc66;">&#40;</span> i, j, m_aabbTemp <span style="color: #66cc66;">&#41;</span>;
&nbsp;
					<span style="color: #808080; font-style: italic;">// call the delegate on the main collision map</span>
					action<span style="color: #66cc66;">&#40;</span> m_aabbTemp, GetTile<span style="color: #66cc66;">&#40;</span> i, j <span style="color: #66cc66;">&#41;</span>, dt, i, j <span style="color: #66cc66;">&#41;</span>;
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		...
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>The above snippet shows the code which actually does the looping over the tiles in the map shown in <em>Figure 4</em>. You can see that I do two loops, one for the mid-ground tiles and one for the foreground. This is primarily because of ladders which are currently mapped in the mid-ground layer. I would like to explore mapping them solely in foreground in a future version, though as it would make the code smaller.</p>
<p>The interesting thing about <em>Speculative Contacts</em> is that they do no work if they&#8217;re not required to &#8211; so, for all the yellow tiles in <em>Figure 4</em> we calculate the distance to each one and the normal at that point, but the function <em>CollisionResponse </em>doesn&#8217;t do anything unless the following condition is true:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> nv:<span style="color: #0066CC;">Number</span> = m_vel.<span style="color: #006600;">Dot</span><span style="color: #66cc66;">&#40;</span> normal <span style="color: #66cc66;">&#41;</span> + separation<span style="color: #66cc66;">/</span>dt;
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span>nv <span style="color: #66cc66;">&lt;</span> <span style="color: #cc66cc;">0</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
    <span style="color: #808080; font-style: italic;">// do something</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>What this is saying is: if the projection of the velocity of the object onto the contact normal (i.e. the velocity in the normal direction) is less than the closest distance between the objects (divided by the timestep, to convert to the same units), then do nothing. I.e. if the objects can not touch between this frame and next, do nothing.</p>
<div id="attachment_773" style="width: 374px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/figure6.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/figure6.png" alt="" title="figure6" width="364" height="184" class="size-full wp-image-773" /></a><p class="wp-caption-text">Figure 11</p></div>
<p><em>Figure 11</em> show this in diagram form, <em>A </em>is heading towards <em>B </em>and the projected velocity is shown (<em>v.n</em>) but is shorter than the distance between objects <em>d</em> and so no collision is possible.</p>
<p>There is one important caveat to mention, in that if the objects are moving fast enough, <em>ghost collisions</em> are possible &#8211; whereby one object will appear to hit an object that it shouldn&#8217;t have. This occurs because the <em>CollisionResponse </em> code only knows about the infinite plane of the collision point and not the actual geometry (for performance reasons), so a fast moving object will sometimes hit the empty space next to the surface of the object rather than passing through. However, this is not a noticeable artefact in the game shown on this page, particularly because the maximum speed of all objects is clamped.</p>
<h3>Internal edges</h3>
<p>One of the problems that a lot of collision detection systems face is that of internal edges and unfortunately, this game is no different.</p>
<div id="attachment_788" style="width: 309px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/internalEdges.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/internalEdges.png" alt="" title="internalEdges" width="299" height="181" class="size-full wp-image-788" /></a><p class="wp-caption-text">Figure 12</p></div>
<p>In <em>Figure 12</em>, the red ball will be judged for collision against the blue block, and the distance function will return the unit vector N as the closest direction, this is correct in isolation, but considering there are other blocks on either side and this is in fact one continuous surface, problems arise. If nothing is done to prevent this, the player will get stuck on the gap between blocks and will even be able to stand the gaps between vertical blocks.</p>
<div id="attachment_789" style="width: 190px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/internalEdgesStandOnBlockGap.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/internalEdgesStandOnBlockGap.png" alt="" title="internalEdgesStandOnBlockGap" width="180" height="181" class="size-full wp-image-789" /></a><p class="wp-caption-text">Player stands on the gap between blocks</p></div>
<h3>Solution</h3>
<p>To prevent this from happening, I have some special code in the collision detection system which checks for internal edges.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Geometry</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">System</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Geometry</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Characters</span>.<span style="color: #006600;">Character</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">Level</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">eTileTypes</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Platformer</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Constants</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Collide
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Helper function which checks for internal edges</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">private</span> <span style="color: #000000; font-weight: bold;">function</span> IsInternalCollision<span style="color: #66cc66;">&#40;</span> tileI:<span style="color: #0066CC;">int</span>, tileJ:<span style="color: #0066CC;">int</span>, normal:Vector2, map:Map <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">Boolean</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #000000; font-weight: bold;">var</span> nextTileI:<span style="color: #0066CC;">int</span> = tileI+normal.<span style="color: #006600;">m_x</span>;
			<span style="color: #000000; font-weight: bold;">var</span> nextTileJ:<span style="color: #0066CC;">int</span> = tileJ+normal.<span style="color: #006600;">m_y</span>;
&nbsp;
			<span style="color: #000000; font-weight: bold;">var</span> currentTile:uint = map.<span style="color: #006600;">GetTile</span><span style="color: #66cc66;">&#40;</span> tileI, tileJ <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #000000; font-weight: bold;">var</span> nextTile:uint = map.<span style="color: #006600;">GetTile</span><span style="color: #66cc66;">&#40;</span> nextTileI, nextTileJ <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #000000; font-weight: bold;">var</span> internalEdge:<span style="color: #0066CC;">Boolean</span> = Map.<span style="color: #006600;">IsTileObstacle</span><span style="color: #66cc66;">&#40;</span>nextTile<span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">return</span> internalEdge;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		...
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>What this does is to simply check the map to see if there is another collide-able tile &#8216;next to&#8217; the current one. &#8216;Next to&#8217; is defined as one tile along from the current one in the direction of the collision normal. If there is a tile there which is an obstacle, this collision is marked as an internal edge and the system discards it.</p>
<p>Going back to <em>Figure 12</em>, the block which is checked is the one pointed to by the normal, this is a collide-able block and so the collision is discarded correctly.</p>
<h3>Jump-through platforms</h3>
<p>Some types of platform game are built of completely solid platforms which you cannot jump through, but others like <a href="http://en.wikipedia.org/wiki/The_New_Zealand_Story">The Newzealand Story</a> and <a href="http://en.wikipedia.org/wiki/Rainbow_Islands:_The_Story_of_Bubble_Bobble_2">Rainbow Islands</a> are built entirely of platforms that the player can jump through.</p>
<p>To make this game engine as flexible as possible I wanted to support both.</p>
<p>In order to achieve this I needed a distance function which would give me the distance between an point and just the top plane of another (remember we shrunk down one AABB to a point and grew the other). Even still, I only want to consider colliding with this if the moving object was sufficiently close to the top plane of the AABB &#8211; if not, the collision is discarded.</p>
<div id="attachment_799" style="width: 127px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/jumpThroughPlatforms1.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/jumpThroughPlatforms1.png" alt="" title="jumpThroughPlatforms1" width="117" height="179" class="size-full wp-image-799" /></a><p class="wp-caption-text">Figure 14</p></div>
<p><em>Figure 14</em> shows jump-through platform <em>B </em>and movable object <em>A</em>, which is <em>d </em>distance to the top plane of <em>B </em>and <em>N </em>is the major axis.</p>
<p>There are two collision acceptance conditions on top of the regular AABB vs AABB code.</p>
<ul>
<li>If the major axis is pointing up, i.e. this is a ground platform</li>
<li>If the distance of the moving object to the top of the platform is greater than some negative tolerance</li>
</ul>
<p>If these conditions are satisfied then the collision is accepted. If not, its rejected. The negative tolerance is to handle the transition between being just under the top of the platform and being on it. Its negative because when the moving object is below the platform, the distance is always negative; it grows less and less negative as the object moves up until its 0 right on the platform, then it becomes positive again. This tolerance is shown as the blue bar in <em>Figure 14</em>.</p>
<div id="attachment_800" style="width: 128px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/jumpThroughPlatforms2.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/jumpThroughPlatforms2.png" alt="" title="jumpThroughPlatforms2" width="118" height="153" class="size-full wp-image-800" /></a><p class="wp-caption-text">Figure 15</p></div>
<p><em>Figure 15</em> shows one discarded case, where the moving object is too far below the blue bar of tolerance.</p>
<h3>Collision Response</h3>
<p>The collision response at work here is just to remove the normal velocity of the moving object completely upon collision (and also correct for any penetration which occurs). This means objects do not bounce, but for this game, that is an acceptable compromise.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Physics</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">display</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #006600;">Vector2</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">System</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Geometry</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Graphics</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">Level</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> MoveableObject <span style="color: #0066CC;">extends</span> <span style="color: #0066CC;">MovieClip</span> <span style="color: #0066CC;">implements</span> IAABB, ICircle
	<span style="color: #66cc66;">&#123;</span>
		...
&nbsp;
		<span style="color: #808080; font-style: italic;">/// &lt;summary&gt;</span>
		<span style="color: #808080; font-style: italic;">/// Collision Reponse - remove normal velocity</span>
		<span style="color: #808080; font-style: italic;">/// &lt;/summary&gt;	</span>
		protected <span style="color: #000000; font-weight: bold;">function</span> CollisionResponse<span style="color: #66cc66;">&#40;</span> normal:Vector2, dist:<span style="color: #0066CC;">Number</span>, dt:<span style="color: #0066CC;">Number</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">void</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #808080; font-style: italic;">// get the separation and penetration separately, this is to stop pentration </span>
			<span style="color: #808080; font-style: italic;">// from causing the objects to ping apart</span>
			<span style="color: #000000; font-weight: bold;">var</span> separation:<span style="color: #0066CC;">Number</span> = <span style="color: #0066CC;">Math</span>.<span style="color: #0066CC;">max</span><span style="color: #66cc66;">&#40;</span> dist, <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #000000; font-weight: bold;">var</span> penetration:<span style="color: #0066CC;">Number</span> = <span style="color: #0066CC;">Math</span>.<span style="color: #0066CC;">min</span><span style="color: #66cc66;">&#40;</span> dist, <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #808080; font-style: italic;">// compute relative normal velocity require to be object to an exact stop at the surface</span>
			<span style="color: #000000; font-weight: bold;">var</span> nv:<span style="color: #0066CC;">Number</span> = m_vel.<span style="color: #006600;">Dot</span><span style="color: #66cc66;">&#40;</span> normal <span style="color: #66cc66;">&#41;</span> + separation<span style="color: #66cc66;">/</span>dt;
&nbsp;
			<span style="color: #808080; font-style: italic;">// accumulate the penetration correction, this is applied in Update() and ensures</span>
			<span style="color: #808080; font-style: italic;">// we don't add any energy to the system</span>
			m_posCorrect.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> normal.<span style="color: #006600;">MulScalar</span><span style="color: #66cc66;">&#40;</span> penetration<span style="color: #66cc66;">/</span>dt <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> nv<span style="color: #66cc66;">&lt;</span><span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				<span style="color: #808080; font-style: italic;">// remove normal velocity</span>
				m_vel.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> normal.<span style="color: #006600;">MulScalar</span><span style="color: #66cc66;">&#40;</span> nv <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
				<span style="color: #808080; font-style: italic;">// is this some ground?</span>
				<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> normal.<span style="color: #006600;">m_y</span><span style="color: #66cc66;">&lt;</span><span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					m_onGround = <span style="color: #000000; font-weight: bold;">true</span>;
&nbsp;
					<span style="color: #808080; font-style: italic;">// friction</span>
					<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_ApplyFriction <span style="color: #66cc66;">&#41;</span>
					<span style="color: #66cc66;">&#123;</span>
						<span style="color: #808080; font-style: italic;">// get the tanget from the normal (perp vector)</span>
						<span style="color: #000000; font-weight: bold;">var</span> tangent:Vector2 = normal.<span style="color: #006600;">m_Perp</span>;
&nbsp;
						<span style="color: #808080; font-style: italic;">// compute the tangential velocity, scale by friction</span>
						<span style="color: #000000; font-weight: bold;">var</span> tv:<span style="color: #0066CC;">Number</span> = m_vel.<span style="color: #006600;">Dot</span><span style="color: #66cc66;">&#40;</span> tangent <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">*</span>kGroundFriction;
&nbsp;
						<span style="color: #808080; font-style: italic;">// subtract that from the main velocity</span>
						m_vel.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> tangent.<span style="color: #006600;">MulScalar</span><span style="color: #66cc66;">&#40;</span> tv <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
					<span style="color: #66cc66;">&#125;</span>
&nbsp;
					<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">!</span>m_onGroundLast<span style="color: #66cc66;">&#41;</span>
					<span style="color: #66cc66;">&#123;</span>
						<span style="color: #808080; font-style: italic;">// this transition occurs when this object 'lands' on the ground</span>
						LandingTransition<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
					<span style="color: #66cc66;">&#125;</span> 
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		...
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>The first few lines compute the separation and penetration (positive or negative components of the distance between objects)</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">// get the separation and penetration separately, this is to stop pentration </span>
<span style="color: #808080; font-style: italic;">// from causing the objects to ping apart</span>
<span style="color: #000000; font-weight: bold;">var</span> separation:<span style="color: #0066CC;">Number</span> = <span style="color: #0066CC;">Math</span>.<span style="color: #0066CC;">max</span><span style="color: #66cc66;">&#40;</span> dist, <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #000000; font-weight: bold;">var</span> penetration:<span style="color: #0066CC;">Number</span> = <span style="color: #0066CC;">Math</span>.<span style="color: #0066CC;">min</span><span style="color: #66cc66;">&#40;</span> dist, <span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Then, I compute the relative normal velocity and accumulate the position correction vector which handles penetration resolution:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">// compute relative normal velocity require to be object to an exact stop at the surface</span>
<span style="color: #000000; font-weight: bold;">var</span> nv:<span style="color: #0066CC;">Number</span> = m_vel.<span style="color: #006600;">Dot</span><span style="color: #66cc66;">&#40;</span> normal <span style="color: #66cc66;">&#41;</span> + separation<span style="color: #66cc66;">/</span>dt;
&nbsp;
<span style="color: #808080; font-style: italic;">// accumulate the penetration correction, this is applied in Update() and ensures</span>
<span style="color: #808080; font-style: italic;">// we don't add any energy to the system</span>
m_posCorrect.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> normal.<span style="color: #006600;">MulScalar</span><span style="color: #66cc66;">&#40;</span> penetration<span style="color: #66cc66;">/</span>dt <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>If the normal velocity is less than 0, i.e the objects will touch between this frame and next, remove the normal velocity from the moving object:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> nv<span style="color: #66cc66;">&lt;</span><span style="color: #cc66cc;">0</span> <span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #808080; font-style: italic;">// remove normal velocity</span>
	m_vel.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> normal.<span style="color: #006600;">MulScalar</span><span style="color: #66cc66;">&#40;</span> nv <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>If this is a piece of ground we&#8217;re going to collide with, record that fact, and then if we need to apply friction, do so:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">m_onGround = <span style="color: #000000; font-weight: bold;">true</span>;
&nbsp;
<span style="color: #808080; font-style: italic;">// friction</span>
<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> m_ApplyFriction <span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #808080; font-style: italic;">// get the tanget from the normal (perp vector)</span>
	<span style="color: #000000; font-weight: bold;">var</span> tangent:Vector2 = normal.<span style="color: #006600;">m_Perp</span>;
&nbsp;
	<span style="color: #808080; font-style: italic;">// compute the tangential velocity, scale by friction</span>
	<span style="color: #000000; font-weight: bold;">var</span> tv:<span style="color: #0066CC;">Number</span> = m_vel.<span style="color: #006600;">Dot</span><span style="color: #66cc66;">&#40;</span> tangent <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">*</span>kGroundFriction;
&nbsp;
	<span style="color: #808080; font-style: italic;">// subtract that from the main velocity</span>
	m_vel.<span style="color: #006600;">SubFrom</span><span style="color: #66cc66;">&#40;</span> tangent.<span style="color: #006600;">MulScalar</span><span style="color: #66cc66;">&#40;</span> tv <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>If we weren&#8217;t recorded as being on the ground in the last collision, then call out to some code which handles landing on the ground (this is user definable code):</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">!</span>m_onGroundLast<span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #808080; font-style: italic;">// this transition occurs when this object 'lands' on the ground</span>
	LandingTransition<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>And that&#8217;s it! The only slightly hairy part is the friction calculation, but even that is relatively simple &#8211; it just gets the unit length vector perpendicular to the normal (i.e. the sliding vector), calculates the object&#8217;s velocity in the sliding direction, scales that down by some friction coefficient and then subtracts that from the total velocity.</p>
<div id="attachment_793" style="width: 279px" class="wp-caption alignnone"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tangentialVelocity1.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/tangentialVelocity1.png" alt="" title="tangentialVelocity" width="269" height="225" class="size-full wp-image-793" /></a><p class="wp-caption-text">Figure 13</p></div>
<p><em>Figure 13</em> shows the computation of the tangential velocity; if you were to remove this tangential velocity from the full velocity you would have infinite friction.</p>
<p>If you would like more in-depth details of the collision response code, I suggest you read <a href="http://www.wildbunny.co.uk/blog/2011/04/06/physics-engines-for-dummies/">Physics Engines For Dummies</a>, which covers this in great detail.</p>
<h2>End of part 2</h2>
<p>Wow, I thought I would have space to talk about the AI in this article, but obviously not! There was an unexpectedly large amount of collision detection to discuss. Ok, so next time I will definitely talk more about the AI and the software engineering behind it all.</p>
<p><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/lastImg.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/lastImg.png" alt="" title="lastImg" width="201" height="45" class="alignnone size-full wp-image-717" /></a></p>
<p>As ever, if you want, you can buy the source-code for the entire game (or even try a version <strong>for free</strong>), including all the assets and levels you see above. It will require Adobe Flash CS4+, the <a href="http://opensource.adobe.com/wiki/display/flexsdk/Download+Flex+4">Adobe Flex Compiler 4.0+</a> and either <a href="http://www.sapphiresteel.com/Products/amethyst-ide/article/amethyst-product-page">Amethyst</a>, or <a href="http://www.flashdevelop.org/wikidocs/index.php?title=Main_Page">Flash Develop</a> to get it to build. And you&#8217;ll want <a href="http://tilemap.co.uk/mappy.php">Mappy </a> or some alternative in order to create your own levels!</p>
<p>Following on from feedback from the Angry Birds article, I&#8217;ve included a Flash Develop project as well as an Amethyst project inside the .zip file, to help you get started more quickly, no matter which development environment you have.</p>
<p>You are free to use it for whatever purposes you see fit, even for commercial games or in multiple projects, the only thing I ask is that you don&#8217;t spread/redistribute the source-code around. Please note that you will need some programming and design skills in order to make the best use of this!</p>
<p>
    <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="swfobj_0" width="640" height="360">
      <param name="movie" value="http://www.wildbunny.co.uk/media/platformer.swf?v=0" />
      <!--[if !IE]>-->
      <object type="application/x-shockwave-flash" data="http://www.wildbunny.co.uk/media/platformer.swf?v=0" width="640" height="360">
      <!--<![endif]-->
        
      <!--[if !IE]>-->
      </object>
      <!--<![endif]-->
    </object>
<br />
Click the game to give it focus&#8230; Apologies for the programmer art, and my level design (not my best qualities!)</p>
<p><a href="http://www.wildbunny.co.uk/blog/how-to-make-a-platform-game-source-code-options/">Go to the source-code option page</a> to choose the version you&#8217;d like &#8211; from <strong>completely free</strong> to the full version!</p>
<p><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Subscribers can access the source here</a></p>
<p>Until next time, Have fun!</p>
<p>Cheers, Paul.</p>
<p><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/">Continue reading in part 3</a></p>

				<!-- Social Sharing Toolkit v2.0.4 | http://www.marijnrongen.com/wordpress-plugins/social_sharing_toolkit/ -->
				<div class="mr_social_sharing_wrapper"><span class="mr_social_sharing"><script type="text/javascript">
							  reddit_url = "http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/";
							  reddit_title = "How to make a 2d platform game – part 2 collision detection";
							</script>
							<script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></span><span class="mr_social_sharing"><a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/" data-count="horizontal" data-text="How to make a 2d platform game – part 2 collision detection">Tweet</a></span><span class="mr_social_sharing"><iframe src="https://www.facebook.com/plugins/like.php?locale=en_US&amp;href=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2011%2F12%2F14%2Fhow-to-make-a-2d-platform-game-part-2-collision-detection%2F&amp;layout=button_count&amp;show_faces=false&amp;width=90px&amp;height=21px" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></span><span class="mr_social_sharing"><div id="fb-root"></div><fb:send href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/" font=""></fb:send></span><span class="mr_social_sharing"><g:plusone size="medium" href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/"></g:plusone></span><span class="mr_social_sharing"><a href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2011%2F12%2F14%2Fhow-to-make-a-2d-platform-game-part-2-collision-detection%2F&amp;title=How+to+make+a+2d+platform+game+%E2%80%93+part+2+collision+detection" target="_blank" class="mr_social_sharing_popup_link"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/images/buttons/stumbleupon.png" alt="Submit to StumbleUpon" title="Submit to StumbleUpon"/></a></span></div><span style="clear:both;display:none;"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-spamfree/img/wpsf-img.php" width="0" height="0" alt="" style="border-style:none;width:0px;height:0px;display:none;" /></span>											</div><!-- .entry-content -->

					<div id="entry-author-info">
						<div id="author-avatar">
							<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=60&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />						</div><!-- #author-avatar -->
						<div id="author-description">
							<h2>About Paul Firth</h2>
							A games industry veteran of ten years, seven of which spent at Sony Computer Entertainment Europe, he has had key technical roles on triple-A titles like the Bafta Award Winning Little Big Planet (PSP), 24: The Game (PS2), special effects work on Heavenly Sword (PS3), some in-show graphics on the BBC�s version of Robot Wars, the TV show, as well as a few more obscure projects.
&nbsp;
Now joint CEO of Wildbunny, he is able to give himself hiccups simply by coughing.
&nbsp;
1NobNQ88UoYePFi5QbibuRJP3TtLhh65Jp							<div id="author-link">
								<a href="http://www.wildbunny.co.uk/blog/author/paulfirth/">
									View all posts by Paul Firth <span class="meta-nav">&rarr;</span>								</a>
							</div><!-- #author-link	-->
						</div><!-- #author-description -->
					</div><!-- #entry-author-info -->

					<div class="entry-utility">
						This entry was posted in <a href="http://www.wildbunny.co.uk/blog/category/as3/" title="View all posts in AS3" rel="category tag">AS3</a>, <a href="http://www.wildbunny.co.uk/blog/category/platform-game/collision-detection-platform-game/" title="View all posts in Collision Detection" rel="category tag">Collision Detection</a>, <a href="http://www.wildbunny.co.uk/blog/category/platform-game/" title="View all posts in Platform game" rel="category tag">Platform game</a>, <a href="http://www.wildbunny.co.uk/blog/category/technical/" title="View all posts in Technical" rel="category tag">Technical</a> and tagged <a href="http://www.wildbunny.co.uk/blog/tag/bounding-box/" rel="tag">bounding box</a>, <a href="http://www.wildbunny.co.uk/blog/tag/collision-detection/" rel="tag">collision detection</a>, <a href="http://www.wildbunny.co.uk/blog/tag/contact/" rel="tag">contact</a>, <a href="http://www.wildbunny.co.uk/blog/tag/continuous/" rel="tag">continuous</a>, <a href="http://www.wildbunny.co.uk/blog/tag/game-developement/" rel="tag">game developement</a>, <a href="http://www.wildbunny.co.uk/blog/tag/physics/" rel="tag">physics</a>, <a href="http://www.wildbunny.co.uk/blog/tag/platform-game-2/" rel="tag">platform game</a>, <a href="http://www.wildbunny.co.uk/blog/tag/simulation/" rel="tag">simulation</a>, <a href="http://www.wildbunny.co.uk/blog/tag/tiles/" rel="tag">tiles</a>, <a href="http://www.wildbunny.co.uk/blog/tag/tutorial/" rel="tag">tutorial</a>. Bookmark the <a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/" title="Permalink to How to make a 2d platform game &#8211; part 2 collision detection" rel="bookmark">permalink</a>.											</div><!-- .entry-utility -->
				</div><!-- #post-## -->

				<div id="nav-below" class="navigation">
					<div class="nav-previous"><a href="http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/" rel="prev"><span class="meta-nav">&larr;</span> How to make a 2d Platform Game &#8211; part 1</a></div>
					<div class="nav-next"><a href="http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/" rel="next">How to make a 2d Platform Game &#8211; part 3 ladders and AI <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-below -->

				
			<div id="comments">


			<h3 id="comments-title">42 Responses to <em>How to make a 2d platform game &#8211; part 2 collision detection</em></h3>


			<ol class="commentlist">
					<li class="comment even thread-even depth-1" id="li-comment-1027">
		<div id="comment-1027">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/c6292c5f70210f39b49813a42d8c276b?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://hobbygamedev.com' rel='external nofollow' class='url'>Chris DeLeon</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1027">
			December 15, 2011 at 12:51 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>My platforming article example that you linked to above is from one of my entries intended for beginning developers, in particular those just beginning to make the leap from programming at all into videogame development concepts. I wholly agree that the 6 points solution isn&#8217;t best, for the same reasons stated, but was just minimally functional and minimally complex to illustrate the concept.</p>
<p>Your approach is certainly more robust!</p>
<p>That said, when the same simplistic points approach is applied instead to rectangles, it produces the pretty versatile collision behavior used in my <a href="http://www.hobbygamedev.com/beg/everyones-platformer-editor-and-3-level-demo/" rel="nofollow">Everyone&#8217;s Platformer example code</a>. I wrote a follow-up breaking down <a href="http://www.hobbygamedev.com/adv/2d-platformer-advanced-collision-detection/" rel="nofollow">it&#8217;s collision detection</a>, though since it&#8217;s mostly just an extension of the points behavior into solid rectangles, most of the space there is dedicated to discussing quad trees, tunneling, and other related concepts. The same engine and collision approach was used for my work on <a href="http://www.newgrounds.com/portal/view/576078" rel="nofollow">Vision by Proxy: Second Edition</a>, if anyone&#8217;s curious to see it in an example other than the <a href="http://www.hobbygamedev.com/flashplatformer/FlashPlatformerDemo.swf" rel="nofollow">Everyone&#8217;s Platformer sample content</a>.</p>
<p>Great write up here, and thanks for linking <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /> </p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1027#respond' onclick='return addComment.moveForm("comment-1027", "1027", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1029">
		<div id="comment-1029">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1029">
			December 15, 2011 at 10:21 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Chris,</p>
<p>Thanks for the clarification &#8211; I have to admit, I must have missed your section on rectangles, thanks for pointing it out <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1029#respond' onclick='return addComment.moveForm("comment-1029", "1029", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-1032">
		<div id="comment-1032">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/70fa3311f1141ddce97c231e07c9f976?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Rhuno</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1032">
			December 15, 2011 at 2:25 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I think this is awesome and your programmer art is vastly superior to my own.  It is hard to find good, full examples on collision and game development in general; nice work! <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1032#respond' onclick='return addComment.moveForm("comment-1032", "1032", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1039">
		<div id="comment-1039">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1039">
			December 16, 2011 at 3:44 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Thanks very much! <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1039#respond' onclick='return addComment.moveForm("comment-1039", "1039", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-3" id="li-comment-1188">
		<div id="comment-1188">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/8e2f7873569948b96b6f1fc6bc42857e?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">nikhil k</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1188">
			February 16, 2012 at 5:01 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>hello paul, i want to know how to add sound and scoring text in project. hope u would help!</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1188#respond' onclick='return addComment.moveForm("comment-1188", "1188", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-4" id="li-comment-1192">
		<div id="comment-1192">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1192">
			February 17, 2012 at 4:54 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi there,</p>
<p>Its probably best to do a little research into learning how flash deals with this kind of thing &#8211; I recommend checking out this blog: <a href="http://www.emanueleferonato.com/category/flash/" rel="nofollow">http://www.emanueleferonato.com/category/flash/</a> as a good place to start <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1192#respond' onclick='return addComment.moveForm("comment-1192", "1192", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://www.wildbunny.co.uk/blog/2011/12/20/how-to-make-a-2d-platform-game-part-3-ladders-and-ai/' rel='external nofollow' class='url'>How to make a 2d Platform Game &#8211; part 3 ladders and AI | Paul&#039;s blog@Wildbunny</a></p>
	</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/' rel='external nofollow' class='url'>How to make a 2d Platform Game &#8211; part 1 | Paul&#039;s blog@Wildbunny</a></p>
	</li><!-- #comment-## -->
	<li class="post pingback">
		<p>Pingback: <a href='http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/' rel='external nofollow' class='url'>How to make games | Paul&#039;s blog@Wildbunny</a></p>
	</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-1267">
		<div id="comment-1267">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/61e380931c7bdfc7e167be10f5dd053f?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Phil</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1267">
			March 18, 2012 at 6:02 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Thanks for the tutorial, it&#8217;s pretty good. There is one thing I couldn&#8217;t quite figure out and I hope you can to clarify this. You accumulate m_posCorrect to correct for any penetration between a  MoveableObject and a tile. If multiple tiles right next to each other produce a collision response then wouldn&#8217;t this cause &#8220;over correcting&#8221; the penetration?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1267#respond' onclick='return addComment.moveForm("comment-1267", "1267", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1268">
		<div id="comment-1268">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1268">
			March 18, 2012 at 6:43 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Phil,</p>
<p>Yes, this would happen if I weren&#8217;t filtering out &#8216;internal edges&#8217; &#8211; two tiles right next to each other would generate 2 contacts as you point out, but with internal edges removed I only end up with one. I think <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  Its been a while since I wrote that code now.</p>
<p>You&#8217;re welcome to download the free version and see how it performs?</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1268#respond' onclick='return addComment.moveForm("comment-1268", "1268", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-3" id="li-comment-1269">
		<div id="comment-1269">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/61e380931c7bdfc7e167be10f5dd053f?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Phil</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1269">
			March 18, 2012 at 8:11 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Here is an illustration of what I mean: <a href="http://i.imgur.com/zM512.png" rel="nofollow">http://i.imgur.com/zM512.png</a> If these contacts are accumulated and added to the position then you push the object up twice. If the object is bigger and collides with more tiles then the problem gets even worse. An internal edge is one that is sideways but I don&#8217;t see why there can&#8217;t be multiple external edges like in the illustration.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1269#respond' onclick='return addComment.moveForm("comment-1269", "1269", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-4" id="li-comment-1270">
		<div id="comment-1270">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1270">
			March 18, 2012 at 9:02 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Phil,</p>
<p>Sure, I understand what you mean &#8211; this problem is mitigated by the fact that the objects are not pushed fully out of penetration each frame, rather they are pushed towards being fully out, IIRC by 10%. This is commonly referred to as Baumgarte correction.</p>
<p>Its not a precise or completely accurate way to deal with penetration but one which works well in practice <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1270#respond' onclick='return addComment.moveForm("comment-1270", "1270", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-1271">
		<div id="comment-1271">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/61e380931c7bdfc7e167be10f5dd053f?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Phil</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1271">
			March 18, 2012 at 9:42 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Thanks that makes sense. I couldn&#8217;t find where it only applies a fraction (to me it still looks like the code uses the full penetration). At least I understand what you&#8217;re saying and can try that out as a possible solution.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1271#respond' onclick='return addComment.moveForm("comment-1271", "1271", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1272">
		<div id="comment-1272">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1272">
			March 18, 2012 at 9:53 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>You know what, looking at the code I&#8217;m not actually doing what I described in this particular example &#8211; that&#8217;s probably a mistake on my part. I guess the question is: why doesn&#8217;t this manifest itself visually as the player moves between tiles? Not sure I know the answer &#8211; its possible that penetration is so little in the game that this is never a problem &#8211; speculative contacts are very good for reducing penetration to a minimum <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1272#respond' onclick='return addComment.moveForm("comment-1272", "1272", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-1454">
		<div id="comment-1454">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/ef77991cb1be9f64f354a41e11fdc863?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Will</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1454">
			June 3, 2012 at 7:08 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Paul,</p>
<p>Great article.  I have ported your collision code to Unity, and it works great except for one edge case.  If an object hits a corner just right, a rather large correction velocity is applied, which causes the object to pop.  Have you seen this kind of thing happen before?  I&#8217;d be happy to upload my project somewhere if you&#8217;d like to see the code.</p>
<p>Thanks!</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1454#respond' onclick='return addComment.moveForm("comment-1454", "1454", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1455">
		<div id="comment-1455">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1455">
			June 3, 2012 at 9:03 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi will,</p>
<p>Iirc, the collision resolution should never introduce velocity, only remove it, so it should be quite easy to trap this case and debug where its going wrong. Possible things to look for would be incorrect normals or badly computed input velocities. I&#8217;ve not see this case myself &#8211; is it definitely velocity and not position correction?</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1455#respond' onclick='return addComment.moveForm("comment-1455", "1455", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-3" id="li-comment-1456">
		<div id="comment-1456">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/ef77991cb1be9f64f354a41e11fdc863?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Will</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1456">
			June 3, 2012 at 9:19 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>After looking at it a little more, it looks like the normal is to blame.  If the character doesn&#8217;t have a square AABB, and hits a corner just right or is sliding along a wall and comes to a corner, the normal is incorrect.  Here&#8217;s a video of what I&#8217;m seeing: </p>
<p><a href="http://dev.willrmiller.com/CollisionProblem.mov" rel="nofollow">Collision Problem</a></p>
<p>Square AABBs work, because the major axis doesn&#8217;t change until the character is above the tile.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1456#respond' onclick='return addComment.moveForm("comment-1456", "1456", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-4" id="li-comment-1460">
		<div id="comment-1460">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1460">
			June 4, 2012 at 2:29 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Will,</p>
<p>Yes, you&#8217;re correct there is a bug in my code. Please try this version:</p>
<p><code>static public function AabbVsAabbInternal( delta:Vector2, aabbCentre:Vector2, aabbHalfExtents:Vector2, point:Vector2, outContact:Contact ):Boolean<br />
		{<br />
			var di:Vector2 = delta.m_Abs.Sub( aabbHalfExtents );<br />
			var mc:Number = di.m_MaxComp;<br />
			var clampedDi:Vector2 = di.Max( Constants.kZeroVector );<br />
			var clampedDiLen:Number = clampedDi.m_Len;</p>
<p>			if ( mc&lt;=clampedDiLen )<br />
			{<br />
				// interior distance</p>
<p>				// build and push<br />
				outContact.Initialise( delta.m_MajorAxis.m_Neg, mc, point );<br />
			}<br />
			else<br />
			{<br />
				// exterior distance<br />
				var clampedDelta:Vector2 = delta.Min( aabbHalfExtents );<br />
				var deltaD:Vector2 = delta.Sub( clampedDelta );</p>
<p>				// build and push<br />
				outContact.Initialise( deltaD.m_Unit.m_Neg, clampedDiLen, point );<br />
			}</p>
<p>			return true;<br />
		}</code></p>
<p>I&#8217;ve tested that with a non-square aabb and it seems to fix the problem.</p>
<p>Hope that helps!</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1460#respond' onclick='return addComment.moveForm("comment-1460", "1460", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-1533">
		<div id="comment-1533">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/a0fe358bec4b7e570a37245ef409d28d?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://2dengine.com' rel='external nofollow' class='url'>Ivan</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1533">
			August 9, 2012 at 3:03 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hey Paul,<br />
Great article as usual. I&#8217;m programming a platforming engine in Lua and have encountered similar issues regarding the &#8216;inside edges&#8217; of AABBs. I think one simple solution is to use line shapes for platforms instead of AABBs. Line shapes don&#8217;t have inside edges and can easily be modified to support inclined and one-sided (jump-trough) platforms. However, I&#8217;ve hit programmer&#8217;s block and can&#8217;t figure out how to calculate the magnitude of the penetration vector between an AABB and a line.</p>
<p><code>function testLineRect(a, b)<br />
  -- line vector<br />
  local dx, dy = a.x2 - a.x, a.y2 - a.y<br />
  -- line halflength vector<br />
  local hdx, hdy = dx/2, dy/2<br />
  -- line midpoint<br />
  local mx, my = a.x + hdx, a.y + hdy<br />
  -- translate midpoint to rect origin<br />
  mx, my = mx - b.x, my - b.y</p>
<p>  -- separating axes tests<br />
  local ahdx = abs(hdx)<br />
  if abs(mx) &gt; b.hw + ahdx then<br />
    return<br />
  end<br />
  local ahdy = abs(hdy)<br />
  if abs(my) &gt; b.hh + ahdy then<br />
    return<br />
  end</p>
<p>  -- wedge product test (cross product in 2D)<br />
  local cross1 = b.hw*ahdy + b.hh*ahdx<br />
  local cross2 = abs(mx*hdy - my*hdx)<br />
  if cross2 &gt; cross1 then<br />
    return<br />
  end</p>
<p>  -- collision normal is the line rotated by 90 degrees<br />
  local d = sqrt(dx*dx + dy*dy)<br />
  local nx, ny = dy/d, -dx/d</p>
<p>  -- todo: figure out the penetration depth<br />
  local pen = ???</p>
<p>  return nx, ny, pen<br />
end</code></p>
<p>Notice that rects are represented as a center position (b.x, b.y) with half-width/heights (b.hw, b.hh). Any tips of figuring out what the penetration depth would be? I have a feeling there&#8217;s a simpler way then projecting all 4 corners of the rect onto the line.<br />
Thanks in advance!</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1533#respond' onclick='return addComment.moveForm("comment-1533", "1533", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-1534">
		<div id="comment-1534">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-1534">
			August 9, 2012 at 3:10 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi there,</p>
<p>Just treat your line as if it were an AABB with zero height; if your AABB vs AABB code is good enough, it should be able to handle that case <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=1534#respond' onclick='return addComment.moveForm("comment-1534", "1534", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-2093">
		<div id="comment-2093">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/7900c9827138e8f0888794a702f82a31?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Fer</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-2093">
			March 19, 2013 at 5:27 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi!, great tutorial Paul. but Could you please tell me what m_x and m_y stand for?<br />
I ca&#8217;t seem to figure it out!.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=2093#respond' onclick='return addComment.moveForm("comment-2093", "2093", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-2094">
		<div id="comment-2094">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-2094">
			March 19, 2013 at 5:45 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Fer,</p>
<p>They denote the x and y components of a vector.</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=2094#respond' onclick='return addComment.moveForm("comment-2094", "2094", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-2266">
		<div id="comment-2266">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/34b3926d24279f5058fb651ed135fb21?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='https://sites.google.com/site/sg57productions/' rel='external nofollow' class='url'>Cord Rehn</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-2266">
			April 26, 2013 at 6:09 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hey Paul-  great series, really appreciate it! I have converted your free, barebones example to Java using libgdx for rendering/input.  It works beautifully minus one thing:</p>
<p>When jumping, where jump adds to y-velocity some amount, it works as expected coming from a stand-still.  However if you hold the jump, the initial jump is fine, but the jumps after landing the first time are inconsistent and vary in height causing a &#8216;bouncing&#8217; effect.</p>
<p>Upon closer inspection, on_ground flag is true (which is the condition to allow another jump to happen) even though the Y-velocity still is negative number (which changes each time).  I takeit the accumulation penetration &#8216;pos_correct&#8217; vector should also be a jump condition ?</p>
<p>Let me know, Thanks Paul!</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=2266#respond' onclick='return addComment.moveForm("comment-2266", "2266", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-2267">
		<div id="comment-2267">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-2267">
			April 26, 2013 at 8:18 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Cord,</p>
<p>Can you reproduce the same behaviour in the original version?</p>
<p>Have you got a varying time-step? That could well cause varying jump heights due to numerical integration errors. On Little big planet, we actually had to fix the time-step completely! And IIRC my flash examples all have a fixed time-step.</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=2267#respond' onclick='return addComment.moveForm("comment-2267", "2267", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-3" id="li-comment-2270">
		<div id="comment-2270">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/34b3926d24279f5058fb651ed135fb21?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='https://sites.google.com/site/sg57productions/' rel='external nofollow' class='url'>Cord Rehn</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-2270">
			April 26, 2013 at 9:04 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I was using a variable timestep, I just tried it with a fixed time step and the problem persists.  </p>
<p>Uh oh. Just tested it and you may reproduce this problem in all of the platform games you have live on your site! :C </p>
<p><a href="http://www.wildbunny.co.uk/blog/how-to-make-a-platform-game-source-code-options/" rel="nofollow">http://www.wildbunny.co.uk/blog/how-to-make-a-platform-game-source-code-options/</a></p>
<p>We both have a bug to fix my friend.</p>
<p>Your code doesn&#8217;t keep polling for &#8216;jump&#8217; key, so you need to mash the &#8216;up&#8217; arrow. Try to time it right when you land.  You will notice if you chain your jumps in perfect sequence, the sequential jumps will have a lower height.  To make this defect more noticeable, increase gravity and poll the &#8216;up&#8217; arrow each update. </p>
<p>To track the problem, set a breakpoint in your jump routine just before adding the jump-velocity and see if your velocity.m_y is 0 (ideal) or a negative value (&lt; 0) which would effectively reduce the jump height.  My gravity is -50 units with a 20 unit instantaneous jump height and I am getting negative values ranging from -5 to -20 meaning I am losing between 5% to 40% of my jump height.</p>
<p>It would seem using &#039;on_Ground&#039; as a condition for jumping isn&#039;t sufficient. I will keep you updated on my progress Paul, let me know if you find anything out!</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=2270#respond' onclick='return addComment.moveForm("comment-2270", "2270", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-4" id="li-comment-3627">
		<div id="comment-3627">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/34b3926d24279f5058fb651ed135fb21?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://sites.google.com/site/sg57productions/' rel='external nofollow' class='url'>Cord Rehn</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3627">
			January 29, 2014 at 10:32 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Just as a follow up, I found a solution to this problem. It involves adding 1 more constraint to your character&#8217;s jump ability, the constraints I am using currently are:</p>
<p>		if (!isDead()) // not dead<br />
			if (!isJumping()) // not already jumping<br />
				if (isOnGround()) // on ground<br />
					if (!isJustLanded()) // not if we just landed. don&#8217;t allow jumping yet so velocity can zero out. fixes an inconsistent jump height bug</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3627#respond' onclick='return addComment.moveForm("comment-3627", "3627", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-3301">
		<div id="comment-3301">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/621a772bb594724a75a9b09926ea552d?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Me</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3301">
			September 25, 2013 at 11:34 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hello,</p>
<p>Please can I use your &#8220;enemies&#8221; seen in this game when I create my platform game?<br />
Sorry for my english.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3301#respond' onclick='return addComment.moveForm("comment-3301", "3301", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-3303">
		<div id="comment-3303">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3303">
			September 26, 2013 at 8:03 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi There,</p>
<p>Yes, the licence contained in the download allows this <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3303#respond' onclick='return addComment.moveForm("comment-3303", "3303", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-3305">
		<div id="comment-3305">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/621a772bb594724a75a9b09926ea552d?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Collis</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3305">
			September 26, 2013 at 6:10 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi, Im trying to solve my problem with collision,<br />
looking for help on google and I found your site. Sorry for wasting your time, but please can you help?</p>
<p>I use collision code from a book, the code is telling me from which side collision is occured, for example, if characters are on top of a blocks its &#8216;bottomCollision&#8217;,<br />
it will prevent them from falling down.<br />
The bad thing is that when I have jumping characters, code usually works fine, but if character jump exactly where the 2 blocks are connected, for some reason Right or Left collision is occured, not Bottom. Im pretty sure thats because character hit top-left or top-right corner. But if character walking (not jumping) on same blocks, right or left collision is never occured.<br />
Do you have any idea how to fix this?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3305#respond' onclick='return addComment.moveForm("comment-3305", "3305", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-3307">
		<div id="comment-3307">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3307">
			September 26, 2013 at 6:51 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Sorry, its almost impossible to tell you the answer to that question without seeing the source code of the routine you&#8217;re using.</p>
<p>The only real way to fix this is to debug it &#8211; make a special level with only a couple of blocks, add some print output to your collision code to indicate what collision case is happening and then walk/jump around on the blocks and see what happens.</p>
<p>That way you will be able to tell what the code *thinks* is happening and you should be able to see the problem more clearly.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3307#respond' onclick='return addComment.moveForm("comment-3307", "3307", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment even depth-3" id="li-comment-3308">
		<div id="comment-3308">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/325758282ed88c6238c446a81990b04d?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Collis</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3308">
			September 26, 2013 at 7:08 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I did all that things, when collision is occured I stop characters moving, so they always stop on the same place where their down-right or down-left corner hit top-left or top-right corner of the blocks. Insted of bottom collision, right or left collision are occured. Thats what I see in output.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3308#respond' onclick='return addComment.moveForm("comment-3308", "3308", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1" id="li-comment-3306">
		<div id="comment-3306">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/325758282ed88c6238c446a81990b04d?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Collis</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3306">
			September 26, 2013 at 6:19 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I forgot tell you it is checking for collision between bounding boxes.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3306#respond' onclick='return addComment.moveForm("comment-3306", "3306", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-3360">
		<div id="comment-3360">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/abef029063180da42d152e7f54131f16?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Jim</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3360">
			October 7, 2013 at 3:46 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>What is happening in Scalar.Sign() with the function get m_MajorAxis?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3360#respond' onclick='return addComment.moveForm("comment-3360", "3360", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor odd alt depth-2" id="li-comment-3364">
		<div id="comment-3364">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3364">
			October 7, 2013 at 9:33 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p><code>static public double Sign( double a )<br />
		{<br />
			return a>=0 ? 1 : -1;<br />
		}</code></p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3364#respond' onclick='return addComment.moveForm("comment-3364", "3364", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment even thread-even depth-1" id="li-comment-3717">
		<div id="comment-3717">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/53cf48b49016b9eb16a21c315c4dd9bb?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.henryeverett.info' rel='external nofollow' class='url'>Henry</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3717">
			April 29, 2014 at 12:55 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Does this system support non-square rectangles?<br />
It seems to me that the major axis will be skewed if one rectangle is tall and the other short because the line between the two centres will be pointing down if both rectangles are sat on the same plane. Can you clarify?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3717#respond' onclick='return addComment.moveForm("comment-3717", "3717", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-3729">
		<div id="comment-3729">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/8e5ed95efb952817467ee4d454d349cb?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3729">
			May 18, 2014 at 12:24 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hello!  I am stuck around figure 11 because I don&#8217;t understand how you found the collision normal.  I have read the information above it a few times but it still isn&#8217;t clear.   Is the collision normal the major axis vector of the the distance from the two AABBS that we found in figures 9/10 ?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3729#respond' onclick='return addComment.moveForm("comment-3729", "3729", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-3730">
		<div id="comment-3730">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3730">
			May 18, 2014 at 10:20 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Nathan,</p>
<p>Yes, that is correct, the normal is the major axis.</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3730#respond' onclick='return addComment.moveForm("comment-3730", "3730", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-3" id="li-comment-3731">
		<div id="comment-3731">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/8e5ed95efb952817467ee4d454d349cb?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3731">
			May 19, 2014 at 12:40 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>What is the code for the Collide.AABBvsAABB function?  I&#8217;m a little confused to its purpose.  Aren&#8217;t we checking for collision when we test whether normal velocity &lt; 0?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3731#respond' onclick='return addComment.moveForm("comment-3731", "3731", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-4" id="li-comment-3733">
		<div id="comment-3733">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3733">
			May 19, 2014 at 8:14 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>m_contact is a container passed by reference &#8211; inside Collide.AABBvsAABB, the collision normal and closest distance between AABBs is stored, which is then used in the collision response code.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3733#respond' onclick='return addComment.moveForm("comment-3733", "3733", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1" id="li-comment-3764">
		<div id="comment-3764">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/d45aa6a8e48bd4bfdbe4d07372618c9d?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Tristan Rybak</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3764">
			June 9, 2014 at 12:50 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi!<br />
I bought your sample code and convterted to c++ some time ago. Works great!<br />
Now I try to implement 45 degree slopes with the following code:<br />
<code><br />
	if ( tile.IsObstacle() )<br />
	{<br />
		bool collided = tile.IsSlope() ? Collide::AabbVsTriangle( AABB(), tileAabb, m_contact, i, j, mapLayer ) : Collide::AabbVsAabb( AABB(), tileAabb, m_contact, i, j, mapLayer );<br />
		if ( collided )<br />
		{<br />
			CollisionResponse( m_contact.m_normal, m_contact.m_dist, dt );<br />
		}<br />
	}<br />
</code></p>
<p>Notice AabbVsTriangle there. The collision works great and I can move up the slope.<br />
There are some problems I have:<br />
- player doesn&#8217;t stick to slope (especially when going down the slope and I push him sideway)<br />
- player slows down considerably when going up the slope<br />
- player makes big jump when he reaches top of the slope (because of the speed along the slope)<br />
- player slides down slowly when staying on the slope<br />
Could you advice me what is the best way to improve slope handling with your aproach  to collision please?<br />
Cheers,<br />
Tristan</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3764#respond' onclick='return addComment.moveForm("comment-3764", "3764", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-3765">
		<div id="comment-3765">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#comment-3765">
			June 9, 2014 at 1:22 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi tristan,</p>
<p>Really you need a character controller constraint which acts between the character and the obstacles. This would look at the relative velocities of character and thing he stands on, then compute an impulse to zero the relative velocity and apply that to both objects in a equal and opposite fashion. You can even add a strength factor to make sure he has less than infinite pushing strength.</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/?replytocom=3765#respond' onclick='return addComment.moveForm("comment-3765", "3765", "respond", "742")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
			</ol>



								<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/blog/2011/12/14/how-to-make-a-2d-platform-game-part-2-collision-detection/comment-page-1/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://www.wildbunny.co.uk/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='742' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
							<script type='text/javascript'>
	<!--
	refJS = escape( document[ 'referrer' ] );
	document.write("<input type='hidden' name='refJS' value='"+refJS+"'>");
	// -->
	</script>
	<p style="font-size:9px;clear:both;">WP-SpamFree by <a rel="nofollow" href="http://www.polepositionmarketing.com/library/wp-spamfree/" title="WP-SpamFree WordPress Anti-Spam Plugin" >Pole Position Marketing</a>

					</form>
							</div><!-- #respond -->
			
</div><!-- #comments -->


			</div><!-- #content -->
		</div><!-- #container -->


		<div id="primary" class="widget-area" role="complementary">
			<ul class="xoxo">

<li id="search-3" class="widget-container widget_search"><h3 class="widget-title">Search</h3><form role="search" method="get" id="searchform" class="searchform" action="http://www.wildbunny.co.uk/blog/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form></li><li id="categories-3" class="widget-container widget_categories"><h3 class="widget-title">Choose a category</h3><select name='cat' id='cat' class='postform' >
	<option value='-1'>Select Category</option>
	<option class="level-0" value="104">Algorithmic trading&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="7">Animal Army&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="35">AS3&nbsp;&nbsp;(19)</option>
	<option class="level-0" value="44">Beginner&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="114">Bitcoin&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="6">Business&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="73">Chip tunes&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="71">Circles&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="40">Collision Detection&nbsp;&nbsp;(8)</option>
	<option class="level-0" value="53">Developer love&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="117">Entity systems&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="103">Finance&nbsp;&nbsp;(6)</option>
	<option class="level-0" value="101">Full games&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="67">Geometry&nbsp;&nbsp;(9)</option>
	<option class="level-0" value="58">Graphics&nbsp;&nbsp;(9)</option>
	<option class="level-0" value="100">JSON&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="42">Ladders and AI&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="96">learning-to-program&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="28">Making angry birds&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="47">Micro-transactions&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="90">Multi-player&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="72">Music&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="118">Optimisation&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="41">Parallax and Tiles&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="65">paypal&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="97">Physics&nbsp;&nbsp;(8)</option>
	<option class="level-0" value="36">Platform game&nbsp;&nbsp;(5)</option>
	<option class="level-0" value="68">Polygons&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="98">Portals&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="52">Promotion&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="93">Self improvement&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="66">Server side&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="99">Silverlight&nbsp;&nbsp;(5)</option>
	<option class="level-0" value="45">Stencyl&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="5">Technical&nbsp;&nbsp;(28)</option>
	<option class="level-0" value="1">Uncategorized&nbsp;&nbsp;(1)</option>
</select>

<script type='text/javascript'>
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "http://www.wildbunny.co.uk/blog/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</li>			</ul>
		</div><!-- #primary .widget-area -->


		<div id="secondary" class="widget-area" role="complementary">
			<ul class="xoxo">
				<li id="user_bio-2" class="widget-container widget_user_bio"><h3 class="widget-title"><div style="text-align:center">About the author</div></h3><div class="ub-grav" style="margin:5px 5px 0px 5px;text-align:center;"><img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=128&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D128&amp;r=G' class='avatar avatar-128 photo' height='128' width='128' /></div>A games industry veteran of ten years, seven of which spent at Sony Computer Entertainment Europe, he has had key technical roles on triple-A titles like the Bafta Award Winning Little Big Planet (PSP), 24: The Game (PS2), special effects work on Heavenly Sword (PS3), some in-show graphics on the BBC�s version of Robot Wars, the TV show, as well as a few more obscure projects.
&nbsp;
Now joint CEO of Wildbunny, he is able to give himself hiccups simply by coughing.
&nbsp;
1NobNQ88UoYePFi5QbibuRJP3TtLhh65Jp
</li><li id="widget_featured-posts-2" class="widget-container widget_featured-posts"><h3 class="widget-title">Featured Posts</h3>	
	<ul id="yiw-featured-post">
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2011/03/25/speculative-contacts-an-continuous-collision-engine-approach-part-1/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/03/toi1.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Speculative Contacts &#8211; a continuous collision engine approach" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2011/03/25/speculative-contacts-an-continuous-collision-engine-approach-part-1/">Speculative Contacts &#8211; a continuous collision engine approach</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2011/04/20/collision-detection-for-dummies/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/04/figure111.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Collision detection for dummies" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2011/04/20/collision-detection-for-dummies/">Collision detection for dummies</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2013/04/17/algorithmic-trading-for-dummies-part-2/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2013/04/stop-loss.jpg&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Algorithmic trading for dummies &#8211; part 2" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2013/04/17/algorithmic-trading-for-dummies-part-2/">Algorithmic trading for dummies &#8211; part 2</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2012/11/01/10-steps-to-becoming-a-better-programmer/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/stencylRules.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="10 steps to becoming a better programmer" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2012/11/01/10-steps-to-becoming-a-better-programmer/">10 steps to becoming a better programmer</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/giantStar.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="How to make a 2d Platform Game &#8211; part 1" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2011/12/11/how-to-make-a-2d-platform-game-part-1/">How to make a 2d Platform Game &#8211; part 1</a>
	       </h4>
	   </li>
	</ul>
	
	</li><li id="advanced-featured-page-widget-3" class="widget-container widget_advanced-featured-page-widget"><h3 class="widget-title">Tutorials with code to buy</h3><div class="post-2295 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-multiplayer-asteroids-engine/" title="Buy multiplayer asteroids engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/multiplayer.jpg" class="attachment-200 by 200 image" alt="multiplayer" /></a></div><!--end post_class()-->

</li><li id="advanced-featured-page-widget-2" class="widget-container widget_advanced-featured-page-widget"><div class="post-2299 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-angrybirds-alike-engine/" title="Buy Angrybirds-alike engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/birds.jpg" class="attachment-200 by 200 image" alt="birds" /></a></div><!--end post_class()-->

</li><li id="advanced-featured-page-widget-4" class="widget-container widget_advanced-featured-page-widget"><div class="post-2301 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-platform-game-engine/" title="Buy platform game engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/platform.png" class="attachment-200 by 200 image" alt="platform" /></a></div><!--end post_class()-->

</li><li id="wp125" class="widget-container wp125_write_ads_widget">
<h3 class="widget-title">Affiliates</h3><div id="wp125adwrap_1c">
<div class="wp125ad odd"><a href="index.php?adclick=10" title="plus500" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2013/03/plus500-200x200.gif" alt="plus500" /></a></div>
<div class="wp125ad even"><a href="https://www.cavirtex.com/Z/50680" title="cavirtex" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/03/caVirtex.gif" alt="cavirtex" /></a></div>
<div class="wp125ad odd"><a href="http://www.freelancer.co.uk/affiliates/wildbunny2/" title="freelancer" rel="nofollow"target='_blank'><img src="/images/freelancer.png" alt="freelancer" /></a></div>
<div class="wp125ad even"><a href="http://www.shareasale.com/r.cfm?b=531904&u=949687&m=41388&urllink=&afftrack=" title="wp engine" rel="nofollow"target='_blank'><img src="http://www.shareasale.com/image/41388/sas_banner_250x250.jpg" alt="wp engine" /></a></div>
<div class="wp125ad odd"><a href="http://www.wildbunny.co.uk/blog/advertise-here/" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/images/blankAdvert.png" alt="" /></a></div>
</div>
</li><li id="ezadswidget-4" class="widget-container ezAdsWidget"><h3 class="widget-title">My MetaTrader 5 products</h3><!-- Easy AdSense V2.79 -->
<!-- Widg[count: 2] -->
<div class="ezAdsense adsense adsense-widget"><div style="text-align:center;margin:0px; "><div style="width:350px">
<a target="_blank" href="http://mql5.com/dzz" title="Download VWAP technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/925/mid" alt="Buy VWAP customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/e08" title="Download Average Spread technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/951/mid" alt="Buy Average Spread customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/e09" title="Download Bid Ask Volumes technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/950/mid" alt="Buy Bid Ask Volumes customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/po9" title="Download Market Activity technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/963/mid" alt="Buy Market Activity customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/poa" title="Download Precision Scalper trading system from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/972/mid" alt="Buy Precision Scalper trading application in the store of automated robot systems" width="400" height="60"></a>
</div></div></div></li>			</ul>
		</div><!-- #secondary .widget-area -->

	</div><!-- #main -->

	<div id="footer" role="contentinfo">
		<div id="colophon">



			<div id="site-info">
				<a href="http://www.wildbunny.co.uk/blog/" title="Wildbunny blog" rel="home">
					Wildbunny blog				</a>
			</div><!-- #site-info -->

			<div id="site-generator">
								<a href="http://wordpress.org/"
						title="Semantic Personal Publishing Platform" rel="generator">
					Proudly powered by WordPress.				</a>
			</div><!-- #site-generator -->

		</div><!-- #colophon -->
	</div><!-- #footer -->

</div><!-- #wrapper -->

		
		<script type="text/javascript">
			//<![CDATA[
			jQuery(document).ready(function() {
				var a = '<div id="cookie-law-info-bar"><span>This website uses cookies to improve your experience. We\'ll assume you\'re ok with this, but you can opt-out if you wish.<a href=\"#\" id=\"cookie_action_close_header\"  class=\"medium cli-plugin-button cli-plugin-main-button\" >Accept</a> <a href=\"http://www.wildbunny.co.uk/blog/privacy-policy/\" id=\"CONSTANT_OPEN_URL\" target=\"_new\"  class=\"cli-plugin-main-link\"  >Read More</a></span></div>';
				var b = '{"animate_speed_hide":"500","animate_speed_show":"500","background":"#fff","border":"#444","border_on":true,"button_1_button_colour":"#000","button_1_button_hover":"#000000","button_1_link_colour":"#fff","button_1_as_button":true,"button_2_button_colour":"#333","button_2_button_hover":"#292929","button_2_link_colour":"#444","button_2_as_button":false,"font_family":"inherit","notify_animate_hide":true,"notify_animate_show":false,"notify_div_id":"#cookie-law-info-bar","notify_position_horizontal":"right","notify_position_vertical":"bottom","showagain_tab":false,"showagain_background":"#fff","showagain_border":"#000","showagain_div_id":"#cookie-law-info-again","showagain_x_position":"50%","text":"#000"}';
				cli_show_cookiebar(a,b);
				
							});
			//]]>
		</script>
		
		 
			<a id="FollowMeTabLeftLg" onClick="showFollowMe()" href="#" style="border-bottom:none;"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/leftlg.gif" border="0" /></a>	

<div id="FollowMeBubbleBG" style="visibility:hidden;"></div>
<div id="FollowMeBubble" style="visibility:hidden;border-bottom:none;">


<div class="top" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_top.gif');width:329px;height:60px;float:left;display:block;border-bottom:none;">
<a id="close" onClick="hideFollowMe()" href="#" style="border-bottom:none"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/close.png" border="0" /> </a>
<!-- <a id="grab" target="_blank" title="grab this" href="http://www.ignitesocialmedia.com/tools/follow-me/"><span>grab this</span></a>--></div>
<div class="mid" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_mid.gif');width:329px;background-repeat:repeat-y;float:left;">
<div id="stretch">
<span><a title="
Twitter" target="_blank" href="http://twitter.com/paul_m_firth" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
twitter.png" border="0" alt="
Twitter" /> 
Twitter</a></span>
<span><a title="
Facebook" target="_blank" href="http://www.facebook.com/WildbunnyLtd" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
facebook.png" border="0" alt="
Facebook" /> 
Facebook</a></span>
<span><a title="
RSS" target="_blank" href="http://wildbunny.co.uk/blog/feed" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
rss.png" border="0" alt="
RSS" /> 
RSS</a></span>
</div></div>
<div class="bottom" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_bottom.gif');height:34px;width:329px;clear:both;float:left;">
<a id="grab" target="_blank" title="grab this" style="border-bottom:none;" href="http://www.ignitesocialmedia.com/tools/follow-me/"><span>grab this</span></a>
</div>
<div class="grab" style="width:329px;clear:both;float:left;"><a style="border-bottom:none;" href="http://www.ignitesocialmedia.com/tools/follow-me/"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_grab.gif" /></a></div>
</div>







<div id="thsp-sticky-header">
	<div id="thsp-sticky-header-inner">
		<div id="thsp-sticky-header-title">
			<a href="http://www.wildbunny.co.uk/blog" title="Developer knowledge centre">Wildbunny blog</a>
		</div>
		
		<ul id="thsp-sticky-header-menu" class="menu"><li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-272"><a href="/blog/">All articles</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1302"><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Vector maths</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-319"><a href="http://www.wildbunny.co.uk/blog/contact-me/">Contact me</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2072"><a href="http://www.wildbunny.co.uk/blog/hire-me/">Hire me</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-446"><a href="http://www.wildbunny.co.uk/blog/membership-sign-up-page/">Subscribe!</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-466"><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Members</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1183"><a href="/blog/buy-source-code">Buy source-code</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1694"><a href="http://www.wildbunny.co.uk/blog/privacy-policy/">Privacy policy</a></li>
</ul>	</div><!-- #thsp-sticky-header-inner -->
</div><!-- #thsp-sticky-header --><script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/s2member/s2member-o.php?ws_plugin__s2member_js_w_globals=1&#038;qcABC=1&#038;ver=140105-140105-2848662513'></script>

			<!-- SwfObj: Register SWFs on this page. -->
			<script type="text/javascript">
					swfobject.registerObject("swfobj_0", "8.0.0", "http://www.wildbunny.co.uk/blog/wp-content/plugins/swfobj/expressInstall.swf");
			</script>
</body>
</html>

