http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/
HTTP/1.0 200 OK
Date: Tue, 22 Jul 2014 17:26:06 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
Set-Cookie: PHPSESSID=e0u2onr1a28afjoi7diailhjf1; path=/
X-Pingback: http://www.wildbunny.co.uk/blog/xmlrpc.php
Link: <http://www.wildbunny.co.uk/blog/?p=1709>; rel=shortlink
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 26998
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8" />
<title>How to make a multi-player game &#8211; part 1 | Wildbunny blog</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" type="text/css" media="all" href="http://www.wildbunny.co.uk/blog/wp-content/themes/twentyten/style.css?v=0" />
<link rel="pingback" href="http://www.wildbunny.co.uk/blog/xmlrpc.php" />

<!-- BEGIN Metadata added by Add-Meta-Tags WordPress plugin
Get the plugin at: http://www.g-loaded.eu/2006/01/05/add-meta-tags-wordpress-plugin/ -->
<meta name="description" content="Hello and welcome back to my blog! Its been a while since my last post, this is because I've been working on a multi-player game, called mmoAsteroids which you can play by clicking on the icon on the side-bar." />
<meta name="keywords" content="as3, beginner, json, multi-player, server side, technical, adobe flash, game, game developement, multi-player, server, tutorial" />
<meta name="blogcatalog" content="9BC10671562" />
<div id="ScribCode634274886"></div>
<!-- END Metadata added by Add-Meta-Tags WordPress plugin -->

<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; Feed" href="http://www.wildbunny.co.uk/blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; Comments Feed" href="http://www.wildbunny.co.uk/blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Wildbunny blog &raquo; How to make a multi-player game &#8211; part 1 Comments Feed" href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/feed/" />
<link rel='stylesheet' id='bm-author-donations-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/bitmate-author-donations/style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cntctfrm_stylesheet-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/contact-form-plugin/css/style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cookielawinfo-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/css/cli-style.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='cookielawinfo-table-style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/css/cli-tables.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='oikCSS-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/oik/oik.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='bwlinkCSS-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/oik/bwlink.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp125style-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/wp125/wp125.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='thsp-sticky-header-plugin-styles-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/sticky-header/css/public.css?ver=1.0.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='featured-post-css-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/featured-post.css?ver=3.8.2' type='text/css' media='all' />
<link rel='stylesheet' id='ws-plugin--s2member-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/s2member/s2member-o.php?ws_plugin__s2member_css=1&#038;qcABC=1&#038;ver=140105-140105-2848662513' type='text/css' media='all' />
<link rel='stylesheet' id='mr_social_sharing-css'  href='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/style.css?ver=3.8.2' type='text/css' media='all' />
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/swfobj/swfobject.js?ver=2.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/comment-reply.min.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/js/jquery.cookie.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/cookie-law-info/js/cookielawinfo.js?ver=3.8.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var StickyHeaderParams = {"show_at":"200","hide_if_narrower":"600"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/sticky-header/js/public.js?ver=1.0.0'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/script.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/googleplus.js.php?lang=en_US&#038;ver=3.8.2'></script>
<script type='text/javascript' src='http://apis.google.com/js/plusone.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://connect.facebook.net/en_US/all.js?ver=3.8.2#xfbml=1'></script>
<script type='text/javascript' src='http://platform.twitter.com/widgets.js?ver=3.8.2'></script>
<script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.2'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.wildbunny.co.uk/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.wildbunny.co.uk/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Flash portals and version control' href='http://www.wildbunny.co.uk/blog/2012/06/13/flash-portals-and-version-control/' />
<link rel='next' title='2D polygonal collision-detection and internal edges' href='http://www.wildbunny.co.uk/blog/2012/10/31/2d-polygonal-collision-detection-and-internal-edges/' />
<meta name="generator" content="WordPress 3.8.2" />
<link rel='canonical' href='http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comments' />
<link rel='shortlink' href='http://www.wildbunny.co.uk/blog/?p=1709' />
<script type="text/javascript" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/js/bubble.js"></script>
<link rel="stylesheet" type="text/css" href="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/css/style.css" />
<style type="text/css">
<!-- Silverlight WordPress Plugin -->
#silverlightControlHost{height:100%;}
</style>
<!-- Protected by WP-SpamFree v2.1.1.2 :: JS BEGIN -->
<script type="text/javascript" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-spamfree/js/wpsfv2-js.php"></script> 
<!-- Protected by WP-SpamFree v2.1.1.2 :: JS END -->

		<style type="text/css">
			#thsp-sticky-header {
				background-color: #181818;
			}
			#thsp-sticky-header,
			#thsp-sticky-header a {
				color: #f9f9f9 !important;
			}
											</style>
	<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #EAEAEA; }
</style>
<!-- Google Analytics Tracking by Google Analyticator 6.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">window.google_analytics_uacct = "ca-pub-4897461488762721";</script>
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-16999711-1']);
	_gaq.push(['_trackPageview']);
	_gaq.push(['_trackPageLoadTime']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
</head>

<body class="single single-post postid-1709 single-format-standard custom-background">
<div id="wrapper" class="hfeed">
	<div id="header">
		<div id="masthead">
			<div id="branding" role="banner">
								<div id="site-title">
					<span>
						<a href="http://www.wildbunny.co.uk/blog/" title="Wildbunny blog" rel="home">Wildbunny blog</a>
					</span>
				</div>
				<div id="site-description">Developer knowledge centre</div>

										<img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/02/bunnyWP1.gif" width="940" height="198" alt="" />
								</div><!-- #branding -->

			<div id="access" role="navigation">
			  				<div class="skip-link screen-reader-text"><a href="#content" title="Skip to content">Skip to content</a></div>
								<div class="menu-header"><ul id="menu-flowhub-header" class="menu"><li id="menu-item-272" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-272"><a href="/blog/">All articles</a></li>
<li id="menu-item-1302" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1302"><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Vector maths</a></li>
<li id="menu-item-319" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-319"><a href="http://www.wildbunny.co.uk/blog/contact-me/">Contact me</a></li>
<li id="menu-item-2072" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2072"><a href="http://www.wildbunny.co.uk/blog/hire-me/">Hire me</a></li>
<li id="menu-item-446" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-446"><a href="http://www.wildbunny.co.uk/blog/membership-sign-up-page/">Subscribe!</a></li>
<li id="menu-item-466" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-466"><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Members</a></li>
<li id="menu-item-1183" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1183"><a href="/blog/buy-source-code">Buy source-code</a></li>
<li id="menu-item-1694" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1694"><a href="http://www.wildbunny.co.uk/blog/privacy-policy/">Privacy policy</a></li>
</ul></div>			</div><!-- #access -->
		</div><!-- #masthead -->
	</div><!-- #header -->

	<div id="main">

		<div id="container">
			<div id="content" role="main">


				<div id="nav-above" class="navigation">
					<div class="nav-previous"><a href="http://www.wildbunny.co.uk/blog/2012/06/13/flash-portals-and-version-control/" rel="prev"><span class="meta-nav">&larr;</span> Flash portals and version control</a></div>
					<div class="nav-next"><a href="http://www.wildbunny.co.uk/blog/2012/10/31/2d-polygonal-collision-detection-and-internal-edges/" rel="next">2D polygonal collision-detection and internal edges <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-above -->

				<div id="post-1709" class="post-1709 post type-post status-publish format-standard hentry category-as3 category-beginner category-json-2 category-multi-player category-server-side category-technical tag-adobe-flash tag-game tag-game-developement tag-multi-player-2 tag-server tag-tutorial">
					<h1 class="entry-title">How to make a multi-player game &#8211; part 1</h1>

					<div class="entry-meta">
						<span class="meta-prep meta-prep-author">Posted on</span> <a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/" title="10:01 pm" rel="bookmark"><span class="entry-date">October 9, 2012</span></a> <span class="meta-sep">by</span> <span class="author vcard"><a class="url fn n" href="http://www.wildbunny.co.uk/blog/author/paulfirth/" title="View all posts by Paul Firth">Paul Firth</a></span>					</div><!-- .entry-meta -->

					<div class="entry-content">
						<img width="150" height="112" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/rotmg-pic-150x112.jpg" class="attachment-single-post-thumbnail wp-post-image" alt="Realm of the Mad God" />						
				<!-- Social Sharing Toolkit v2.0.4 | http://www.marijnrongen.com/wordpress-plugins/social_sharing_toolkit/ -->
				<div class="mr_social_sharing_wrapper"><span class="mr_social_sharing"><script type="text/javascript">
							  reddit_url = "http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/";
							  reddit_title = "How to make a multi-player game – part 1";
							</script>
							<script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></span><span class="mr_social_sharing"><a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/" data-count="horizontal" data-text="How to make a multi-player game – part 1">Tweet</a></span><span class="mr_social_sharing"><iframe src="https://www.facebook.com/plugins/like.php?locale=en_US&amp;href=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2012%2F10%2F09%2Fhow-to-make-a-multi-player-game-part-1%2F&amp;layout=button_count&amp;show_faces=false&amp;width=90px&amp;height=21px" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></span><span class="mr_social_sharing"><div id="fb-root"></div><fb:send href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/" font=""></fb:send></span><span class="mr_social_sharing"><g:plusone size="medium" href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/"></g:plusone></span><span class="mr_social_sharing"><a href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2012%2F10%2F09%2Fhow-to-make-a-multi-player-game-part-1%2F&amp;title=How+to+make+a+multi-player+game+%E2%80%93+part+1" target="_blank" class="mr_social_sharing_popup_link"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/images/buttons/stumbleupon.png" alt="Submit to StumbleUpon" title="Submit to StumbleUpon"/></a></span></div><p>Hello and welcome back to my blog!</p>
<p>Its been a while since my last post, this is because I&#8217;ve been working on a multi-player game, called <a href="http://mmoasteroids.wildbunny.co.uk">mmoAsteroids</a> which you can play by clicking on the icon on the side-bar. This post is my attempt to crystallise the most important points I&#8217;ve learned during the making of this game and my other multi-player prototypes.</p>

<!-- YouTube Embed v2.3.1 | http://www.artiss.co.uk/artiss-youtube-embed -->
<iframe style="border: 0;" class="youtube-player" width="560" height="340" src="http://www.youtube.com/embed/O2t2H-aefDQ?version=3&amp;modestbranding=1&amp;fs=0&amp;rel=0&amp;showinfo=1&amp;wmode=opaque"></iframe>
<!-- End of YouTube Embed code -->

<h2>Introduction</h2>
<p>Firstly, it&#8217;s important to identify what I mean by multi-player and what implications that has. I&#8217;m talking about non-local multi-player, over the internet rather than at the same computer.</p>
<p>Of course this means there needs to be some kind of way for the players to communicate with each other over the internet. I&#8217;ve chosen the <a href="http://en.wikipedia.org/wiki/Client%E2%80%93server_model">server-client</a> model rather than <a href="http://en.wikipedia.org/wiki/Peer-to-peer">peer-to-peer</a>, because that&#8217;s what my target platform client, <em>Adobe Flash</em> supports.</p>
<h3>Client side</h3>
<p>Why choose <em>Flash</em>? Because:</p>
<ul>
<li>The install base is massive, even compared to HTML5</li>
<li>It&#8217;s a fixed platform, you don&#8217;t need to worry about different browsers, or different hardware</li>
<li>The Flash portals are an amazing resource for distributing games</li>
<li>There are very mature development environments available which support full debugging via the world class Visual Studio</li>
<li>It has support for TCP sockets built right in</li>
</ul>
<h3>Server side</h3>
<p>Because I&#8217;m using the client-server model, I need to choose a platform for the server-side code.</p>
<p>I&#8217;ve chosen <a href="http://nodejs.org/">node.js</a> for this article, simply because it&#8217;s the fastest way to get a decently performing server set up and running with the least amount of code. Also, with your own server there are no limits on the number of clients you can support simultaneously, unlike ready made packages like <a href="http://playerio.com/">player.io</a>, or <a href="http://www.smartfoxserver.com/">SmartFoxServer</a> which limit you to a certain number of users until you sign up to their paid plan. </p>
<p>Of course, they provide a lot more features for that money as well; it&#8217;s important to weigh up the costs and benefits of whatever platform you choose.</p>
<div id="attachment_1743" style="width: 435px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/clientServer.gif"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/clientServer.gif" alt="" title="clientServer" width="425" height="249" class="size-full wp-image-1743" /></a><p class="wp-caption-text">Client-server model</p></div>
<h2>How do server-client based multi-player games work?</h2>
<p>Briefly, the client and server communicate by sending messages to one another. The client might send a message to the server saying he wants to move forwards. The server will receive the message and react accordingly. The server might send back a message saying that the player collected a power-up, or that someone else has joined the game.</p>
<p>The client and server both maintain a copy of the game universe; the server has the master copy and then client has a (possibly partial) copy for local simulation and display purposes. The server has authority over all the important decisions in game, like players getting hit by bullets, or being killed, or levelling up. The client has authority about what keys are being pressed and other pieces of user input data. </p>
<p>The reason for this separation of authority is to prevent cheating; although this is only really something you need to worry about once your game is big enough for hackers to invest time in finding cheats, it&#8217;s worth taking simple steps ahead of time to prevent the possibility of a hacked client from, for example, transmitting that he killed everyone in the world to the server, or something of that nature.</p>
<p>Having the server be in authority simply prevents this from being possible.</p>
<div id="attachment_1763" style="width: 620px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/warcraftFail.jpg"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/warcraftFail.jpg" alt="" title="warcraftFail" width="610" height="351" class="size-full wp-image-1763" /></a><p class="wp-caption-text">WoW recently suffered from hackers exploiting the system</p></div>
<h2>MMO? MO?</h2>
<p>It&#8217;s important to distinguish between the various types of multi-player game before we get into this too deeply, because the type can have a massive effect on the amount of code you need to write.</p>
<p>Starting at its simplest form, I&#8217;m going to define an <em>MO</em> or <em>Multi-player Online</em> game as a multi-player game supporting as many players as possible running on one server (a physical computer located on the internet somewhere).</p>
<p>An <em>MMO</em> is a <em>Massively Multi-player Online</em> game. There are many different forms this can take, but nearly all of them will involve more than one physical server working together to handle the huge load that &#8216;massively&#8217; implies. </p>
<p>How they work together will define how the game is to be designed; for example you might want your game universe to be shared by all players at the same time, as in <a href="http://en.wikipedia.org/wiki/Eve_Online">Eve Online</a>; this requires that several servers work together to form a large shard to share the load. Or you might want to instance your universe so that each individual server actually holds a unique copy of the universe and players in one universe cannot see players in another, like <a href="http://www.realmofthemadgod.com/">Realm of the Mad God</a>. Or yet again, maybe you want to have some kind of combination of the two, where the universe is split up into <em>realms</em> and players cannot see players in other realms but they can travel between these realms, like in <a href="http://en.wikipedia.org/wiki/World_of_Warcraft">World of Warcraft</a>.</p>
<div id="attachment_1745" style="width: 421px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/rotmg-pic.jpg"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/rotmg-pic.jpg" alt="" title="rotmg-pic" width="411" height="309" class="size-full wp-image-1745" /></a><p class="wp-caption-text">Realm of the Mad God</p></div>
<p>Making a genuine <em>MMO</em> with a non-instanced universe is a massive undertaking, not to be attempted lightly. Even one with realms and travel between is fantastically complicated.</p>
<p>The more you instance your universe, the easier it gets to create the architecture because you can simply hand off instances to new servers as your game expands. If the players can&#8217;t communicate across these instances things are easier still. This is the architecture that <a href="http://mmoasteroids.wildbunny.co.uk">mmoAsteroids</a> uses currently. Each universe can hold 20 players (since the level is only a certain physical pixel size) and each server can hold 10 instances at once, giving an on-line capacity of 200 players per server.</p>
<p>What I&#8217;m going to describe in this article is an <em>MO</em>, since that is the easiest concept to code. Adapting this to a <em>highly instanced MMO</em> is entirely possible.</p>
<h3>TCP vs UDP</h3>
<p>The choice of whether to use <a href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</a> or <a href="http://en.wikipedia.org/wiki/User_Datagram_Protocol">UDP</a> communication protocols has been made for us by the fact that Flash only supports TCP. This would seem like a big problem for a very fast paced multi-player game because TCP has a reliable, in-order delivery policy and in particular has <a href="http://en.wikipedia.org/wiki/Nagle's_algorithm">Nagles algorithm</a> which tries to group separate packets of data together into larger payloads before actually sending them, which can introduce lag. UDP is very different in this regard and offers no such features, but also suffers from no such issues. However, using TCP it is possible to disable Nagle and thereby remove this lag inducing restriction, so all is not lost. </p>
<div id="attachment_1747" style="width: 505px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/tcp-UDP.jpg"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/tcp-UDP.jpg" alt="" title="tcp &amp; UDP" width="495" height="374" class="size-full wp-image-1747" /></a><p class="wp-caption-text">TCP and UDP</p></div>
<p>At the end of the day, anyone set on using UDP for their game will have to implement their own version of TCP&#8217;s reliable, in-order delivery policy anyway, so once Nagle has been disabled there really isn&#8217;t that much separating TCP and UDP in terms of raw speed. <a href="http://www.gamedev.net/topic/622498-how-much-faster-si-udp/page__p__4925868__hl__+tcp%20+udp%20+nagle#entry4925868">Here is a related discussion on GameDev.net</a>.</p>
<h2>Requirements</h2>
<p>If you would like to follow this article through and make your own server-side code, you will need download and install <em>node.js</em>. At the prototyping stage you don&#8217;t need a real server, you can just run everything locally &#8211; this is a far simpler and quicker way to develop anyway. </p>
<p>When you want to deploy for real, you&#8217;ll either need your own <a href="http://en.wikipedia.org/wiki/Virtual_private_server">VPS</a>, or you can subscribe to one of the growing number of <em>node.js</em> hosting providers. <a href="https://github.com/joyent/node/wiki/Node-Hosting">Here is a large list of providers</a>.</p>
<h2>The game</h2>
<p>For this article, I&#8217;ve chosen to recreate the prototype version of <a href="http://mmoasteroids.wildbunny.co.uk">mmoAsteroids</a>. For me this game is interesting because it&#8217;s a very fast paced,  <a href="http://www.giantbomb.com/bullet-hell/92-321/">bullet-hell</a> like, twitch reaction arcade game. Not a genre that is typically seen as a multi-player game (although there are exceptions such as <a href="http://www.getcontinuum.com/">Continuum</a> and <a href="http://www.realmofthemadgod.com/">Realm of the Mad God</a>) perhaps because it&#8217;s difficult to get such games performing well over the internet.</p>
<p>Prototyping is extremely important and is absolutely the first thing you should do once you&#8217;ve figured out what game you&#8217;d like to make. The goal is to get the core part of the game up and into testing as fast as possible because the number one thing which will stop your game from being a success is it not being finished! <a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/">Read more about how to approach the process of making a game here</a>.</p>
<p>Here is the prototype in all its glory which you can buy the full source code to at the bottom of this article:</p>

    <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="swfobj_0" width="640" height="480">
      <param name="movie" value="/media/multiplayerGame.swf?v=1" />
      <!--[if !IE]>-->
      <object type="application/x-shockwave-flash" data="/media/multiplayerGame.swf?v=1" width="640" height="480">
      <!--<![endif]-->
        
      <!--[if !IE]>-->
      </object>
      <!--<![endif]-->
    </object>

<h2>Where to start?</h2>
<p>The fundamental component of a multi-player game is the server. In this case it&#8217;s a <a href="http://en.wikipedia.org/wiki/Network_socket">socket-server</a> since clients will be connecting via sockets. A socket is just an access channel for communication over a persistent connection between computers on a network. This is different to HTTP (which is how you are reading this article right now), which is a <em>request/response</em> protocol with no persistent connection.</p>
<p>Having a persistent connection is very important for a game like this, because response times are so important &#8211; we can&#8217;t be waiting around for seconds for a response to keyboard input from the server!</p>
<h2>The socket server</h2>
<p>For the socket-server, I&#8217;m going to be using the <em>net</em> package which is built into <em>node.js</em>, because it provides a nice clean interface and a good starting point. The experienced reader might be wondering why I&#8217;ve not chosen to use the <a href="http://socket.io">socket.io</a> package which enables <a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a> support for <em>node.js</em>. The reason is that I want more control over the way messages get broadcast from the server and that finding a decent Flash implementation of the full web-socket protocol is difficult. </p>
<p>If you have chosen to use javascript for your client, you should use <a href="http://socket.io">socket.io</a> because javascript is best suited to <em>WebSockets</em> since it has no native TCP socket support of its own.</p>
<h3>The simplest socket server</h3>
<p>Here is what the most simple socket server possible looks like in node.js:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #000066; font-weight: bold;">var</span> port <span style="color: #339933;">=</span> <span style="color: #CC0000;">8000</span><span style="color: #339933;">;</span>
<span style="color: #000066; font-weight: bold;">var</span> host <span style="color: #339933;">=</span> <span style="color: #3366CC;">&quot;localhost&quot;</span><span style="color: #339933;">;</span>
<span style="color: #000066; font-weight: bold;">var</span> net <span style="color: #339933;">=</span> require<span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'net'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
<span style="color: #000066; font-weight: bold;">var</span> server <span style="color: #339933;">=</span> net.<span style="color: #660066;">createServer</span><span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>socket<span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
	socket.<span style="color: #660066;">on</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'data'</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>data<span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		console.<span style="color: #660066;">log</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;data received: &quot;</span> <span style="color: #339933;">+</span> data<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	socket.<span style="color: #660066;">on</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'close'</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>socket<span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		console.<span style="color: #660066;">log</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;close received&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	socket.<span style="color: #660066;">on</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'timeout'</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>data<span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		console.<span style="color: #660066;">log</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;timeout received&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	socket.<span style="color: #660066;">on</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'error'</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>data<span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		console.<span style="color: #660066;">log</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">&quot;error received&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
	<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
server.<span style="color: #660066;">listen</span><span style="color: #009900;">&#40;</span>port<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></td></tr></table></div>

<p>It really is a testament to the quality of <em>node.js</em> that you can create a socket server in such few lines of code. <a href="http://nodejs.org/api/net.html">You can browse the documentation for the net package here</a>.</p>
<p>The first parameter to <em>createServer()</em> is the closure which will be called once a connection is made from a client. During this closure we attach various listeners to handle events that <em>node.js</em> sends us, such as <em>close</em> (when a client disconnects), or <em>data</em> (when a client has transmitted some data). Then on the final line we start the server listening for connections, using the port we want and the host address that we want to listen on.</p>
<div id="attachment_1752" style="width: 537px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/nodejs.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/nodejs.png" alt="" title="nodejs" width="527" height="270" class="size-full wp-image-1752" /></a><p class="wp-caption-text">The mighty node.js</p></div>
<p>The choice of which port to use is entirely up to you, although it probably pays to do some research to find out whether the majority of your players are able to connect to the internet via the port you&#8217;ve chosen; many players might be at work, or behind a firewall in a library which prohibits connections on non-standard port numbers. For <em>mmoAsteroids</em>, I chose 443, which is usually used by the HTTPS protocol; I found this to be the port which afforded me the greatest amount of external visibility to players.</p>
<h2>The data event</h2>
<p>The most interesting aspect of the above server is the <em>data</em> event, which indicates that data has arrived for processing &#8211; this is how the client and server will communicate primarily. Note that it does not mean a message has arrived, just that some amount of data is present to be read. It could be part of a message sent from a client, or it could be several messages together. The reason for this is that TCP is a <em>stream oriented protocol</em>, not a <em>message oriented one</em>. We need to do a little bit of work to build our own message protocol on top of this.</p>
<h2>The message protocol</h2>
<p>We would like the server to notify us when individual messages get received from the client. In order to do this we must design a simple message protocol. The one I&#8217;ve chosen for this tutorial is a simple <a href="http://en.wikipedia.org/wiki/UTF-8">UTF8</a> string based protocol with a terminating character separating each message.</p>
<div id="attachment_1716" style="width: 331px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/figure1.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/figure1.png" alt="" title="figure1" width="321" height="41" class="size-full wp-image-1716" /></a><p class="wp-caption-text">Figure 1</p></div>
<p><em>Figure 1</em> shows a simple example of a message and the terminating character (which in this case is \n, or ASCII code 10, the newline character). Of course this means that messages cannot contain \n as part of the message, as this would confuse the protocol.</p>
<div id="attachment_1717" style="width: 287px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/figure2.png"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/figure2.png" alt="" title="figure2" width="277" height="241" class="size-full wp-image-1717" /></a><p class="wp-caption-text">Figure 2</p></div>
<p><em>Figure 2</em> shows a possible set of individual data events numbered 1-5 encountered during the transmission of two individual messages: <strong>message\n</strong> and <strong>message\n</strong>. This gives you an example of the type of processing that we need to handle.</p>
<p>Fortunately, actually separating messages like this is quite easy when dealing with strings because both <em>javascript</em> and <em>actionscript </em>have the <em>split()</em> function on a string, which divides the input string up into chunks based on a separating character; effectively separating our messages from each other. It&#8217;s not quite as simple as that, though as you can see from <em>Figure 2</em>, because not all <em>data</em> events will yield a string with a terminating character; we need to buffer the data as we go along.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #000066; font-weight: bold;">var</span> server <span style="color: #339933;">=</span> net.<span style="color: #660066;">createServer</span><span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>socket<span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
	<span style="color: #006600; font-style: italic;">//</span>
	<span style="color: #006600; font-style: italic;">// this gets called once for each connection we have from a client...</span>
	<span style="color: #006600; font-style: italic;">//</span>
&nbsp;
	<span style="color: #006600; font-style: italic;">// utf8 encoding</span>
	socket.<span style="color: #660066;">setEncoding</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'utf8'</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #006600; font-style: italic;">// no data received yet</span>
	<span style="color: #000066; font-weight: bold;">var</span> socketData <span style="color: #339933;">=</span> <span style="color: #3366CC;">&quot;&quot;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #006600; font-style: italic;">//</span>
	<span style="color: #006600; font-style: italic;">// attach data handler</span>
	<span style="color: #006600; font-style: italic;">//</span>
&nbsp;
	socket.<span style="color: #660066;">on</span><span style="color: #009900;">&#40;</span><span style="color: #3366CC;">'data'</span><span style="color: #339933;">,</span> <span style="color: #000066; font-weight: bold;">function</span><span style="color: #009900;">&#40;</span>data<span style="color: #009900;">&#41;</span>
	<span style="color: #009900;">&#123;</span>
		socketData <span style="color: #339933;">+=</span> data<span style="color: #339933;">;</span>
&nbsp;
		<span style="color: #000066; font-weight: bold;">var</span> substrings <span style="color: #339933;">=</span> socketData.<span style="color: #660066;">split</span><span style="color: #009900;">&#40;</span> <span style="color: #3366CC;">&quot;<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
		<span style="color: #000066; font-weight: bold;">var</span> lastMsg <span style="color: #339933;">=</span> substrings.<span style="color: #660066;">length</span><span style="color: #339933;">-</span><span style="color: #CC0000;">1</span><span style="color: #339933;">;</span>
&nbsp;
		<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> substrings<span style="color: #009900;">&#91;</span>lastMsg<span style="color: #009900;">&#93;</span>.<span style="color: #660066;">length</span><span style="color: #339933;">!=</span><span style="color: #CC0000;">0</span> <span style="color: #009900;">&#41;</span>
		<span style="color: #009900;">&#123;</span>
			<span style="color: #006600; font-style: italic;">// partial data read, store for later</span>
			socketData <span style="color: #339933;">=</span> substrings<span style="color: #009900;">&#91;</span>lastMsg<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
		<span style="color: #009900;">&#125;</span>
		<span style="color: #000066; font-weight: bold;">else</span>
		<span style="color: #009900;">&#123;</span>
			<span style="color: #006600; font-style: italic;">// full read, clear buffer</span>
			socketData <span style="color: #339933;">=</span> <span style="color: #3366CC;">&quot;&quot;</span><span style="color: #339933;">;</span>
		<span style="color: #009900;">&#125;</span>
&nbsp;
		<span style="color: #006600; font-style: italic;">// process all messages</span>
		<span style="color: #000066; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">var</span> i <span style="color: #339933;">=</span> <span style="color: #CC0000;">0</span><span style="color: #339933;">;</span> i<span style="color: #339933;">&lt;</span>lastMsg<span style="color: #339933;">;</span> i<span style="color: #339933;">++</span> <span style="color: #009900;">&#41;</span>
		<span style="color: #009900;">&#123;</span>
			<span style="color: #000066; font-weight: bold;">var</span> message <span style="color: #339933;">=</span> substrings<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
&nbsp;
			<span style="color: #006600; font-style: italic;">// process message!</span>
		<span style="color: #009900;">&#125;</span>
	<span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></td></tr></table></div>

<p>The above code is all we need in reality. Inside the data handler, the data received is first buffered:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;">socketData <span style="color: #339933;">+=</span> data<span style="color: #339933;">;</span></pre></td></tr></table></div>

<p>Then it is split into sub-strings:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #000066; font-weight: bold;">var</span> substrings <span style="color: #339933;">=</span> socketData.<span style="color: #660066;">split</span><span style="color: #009900;">&#40;</span> <span style="color: #3366CC;">&quot;<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span> <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></td></tr></table></div>

<p>This returns an array with minimum of 1 entry. Then we check to see if we have a partial read:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #000066; font-weight: bold;">var</span> lastMsg <span style="color: #339933;">=</span> substrings.<span style="color: #660066;">length</span><span style="color: #339933;">-</span><span style="color: #CC0000;">1</span><span style="color: #339933;">;</span>
<span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span> substrings<span style="color: #009900;">&#91;</span>lastMsg<span style="color: #009900;">&#93;</span>.<span style="color: #660066;">length</span><span style="color: #339933;">!=</span><span style="color: #CC0000;">0</span> <span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
	<span style="color: #006600; font-style: italic;">// partial data read, store for later</span>
	socketData <span style="color: #339933;">=</span> substrings<span style="color: #009900;">&#91;</span>lastMsg<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>In which case we replace the buffered data with the last substring. If not it means we have a full read and we clear the buffered data completely:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #000066; font-weight: bold;">else</span>
<span style="color: #009900;">&#123;</span>
	<span style="color: #006600; font-style: italic;">// full read, clear buffer</span>
	socketData <span style="color: #339933;">=</span> <span style="color: #3366CC;">&quot;&quot;</span><span style="color: #339933;">;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>Then we go on to process any and all messages received so far:</p>
<!-- Easy AdSense V2.79 -->
<!-- Post[count: 1] -->
<div class="ezAdsense adsense adsense-midtext" style="text-align:center;margin:12px; "><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- medi -->
<ins class="adsbygoogle"
     style="display:inline-block;width:300px;height:250px"
     data-ad-client="ca-pub-4897461488762721"
     data-ad-slot="9797433564"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #006600; font-style: italic;">// process all messages</span>
<span style="color: #000066; font-weight: bold;">for</span> <span style="color: #009900;">&#40;</span> <span style="color: #000066; font-weight: bold;">var</span> i <span style="color: #339933;">=</span> <span style="color: #CC0000;">0</span><span style="color: #339933;">;</span> i<span style="color: #339933;">&lt;</span>lastMsg<span style="color: #339933;">;</span> i<span style="color: #339933;">++</span> <span style="color: #009900;">&#41;</span>
<span style="color: #009900;">&#123;</span>
	<span style="color: #000066; font-weight: bold;">var</span> message <span style="color: #339933;">=</span> substrings<span style="color: #009900;">&#91;</span>i<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>
&nbsp;
	<span style="color: #006600; font-style: italic;">// process message!</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>

<p>We write the same code on the client and now we have a working message protocol!</p>
<h2>Serialisation</h2>
<p>Now we can happily send string based messages to and from our client. But what use is that? We need to be able to send data, not just strings!</p>
<p>Both javascript and now actionscript, Flash Player 11.0 have built-in support for the industry standard data serialisation/deserialisation format, <a href="http://en.wikipedia.org/wiki/JSON">JSON</a> which is what I&#8217;ve chosen to use for this tutorial. There are many other possible serialisation formats, but this is the one which is fastest to get up and running. It pays to do some research and find the format which is best suited for your individual needs.</p>
<div id="attachment_1754" style="width: 310px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/breakfast-cereals.jpg"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/breakfast-cereals-300x200.jpg" alt="" title="breakfast-cereals" width="300" height="200" class="size-medium wp-image-1754" /></a><p class="wp-caption-text">Mmm, serialisation...</p></div>
<p>Serialising an object to JSON in javascript is as simple as:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #000066; font-weight: bold;">var</span> messageString <span style="color: #339933;">=</span> JSON.<span style="color: #660066;">stringify</span><span style="color: #009900;">&#40;</span>data<span style="color: #009900;">&#41;</span> <span style="color: #339933;">+</span> Message.<span style="color: #660066;">Constants</span>.<span style="color: #660066;">kMessageTermintor</span><span style="color: #339933;">;</span></pre></td></tr></table></div>

<p>Notice the appended message terminator which forms part of our protocol. In actionscript it&#8217;s nearly identical:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">message</span>:<span style="color: #0066CC;">String</span> = JSON.<span style="color: #006600;">stringify</span><span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">data</span><span style="color: #66cc66;">&#41;</span> + kMessageTermintor;</pre></td></tr></table></div>

<p>Deserialisation is just as simple:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #000066; font-weight: bold;">var</span> data <span style="color: #339933;">=</span> JSON.<span style="color: #660066;">parse</span><span style="color: #009900;">&#40;</span>messageString<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span></pre></td></tr></table></div>


<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">data</span>:<span style="color: #0066CC;">Object</span> = JSON.<span style="color: #006600;">parse</span><span style="color: #66cc66;">&#40;</span>messageString<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>The only slight issue is that the deserialised data is always just annoymous objects, not concrete types. This doesn&#8217;t matter so much in javascript because that&#8217;s how the language was designed to work, but actionscript is a statically typed language and we can take advantage of that to root out bugs at compile time before they occur unexpectedly in the runtime.</p>
<p>In order to deserialise into a concrete type in actionscript we must do some extra wrangling of the data.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #0066CC;">System</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">utils</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">geom</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> flash.<span style="color: #0066CC;">system</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">display</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">net</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> Helpers
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">/**
		 * 
		 * @param obj
		 * @return Class
		 *
		 */</span>
		<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> GetClass<span style="color: #66cc66;">&#40;</span> obj:<span style="color: #0066CC;">Object</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #000000; font-weight: bold;">Class</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> <span style="color: #000000; font-weight: bold;">Class</span><span style="color: #66cc66;">&#40;</span> getDefinitionByName<span style="color: #66cc66;">&#40;</span> getQualifiedClassName<span style="color: #66cc66;">&#40;</span> obj <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/**
		 * 
		 * @param obj
		 * @return String
		 *
		 */</span>
		<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> GetClassName<span style="color: #66cc66;">&#40;</span> obj:<span style="color: #0066CC;">Object</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #0066CC;">String</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #b1b100;">return</span> getQualifiedClassName<span style="color: #66cc66;">&#40;</span> obj <span style="color: #66cc66;">&#41;</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/**
		 * Take a annoymous type and try to copy the properies over into the given concrete type
		 * 
		 * @param source Annoymous type
		 * @param targetType Concrete type
		 *
		 */</span>
		<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> CloneIntoR<span style="color: #66cc66;">&#40;</span> source:<span style="color: #0066CC;">Object</span>, targetType:<span style="color: #000000; font-weight: bold;">Class</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #66cc66;">*</span>
		<span style="color: #66cc66;">&#123;</span>
			Assert<span style="color: #66cc66;">&#40;</span> source<span style="color: #66cc66;">!</span>=<span style="color: #000000; font-weight: bold;">null</span>, <span style="color: #ff0000;">&quot;CloneIntoR(): source is null! Type=&quot;</span> + GetClassName<span style="color: #66cc66;">&#40;</span>targetType<span style="color: #66cc66;">&#41;</span> <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">data</span>:<span style="color: #66cc66;">*</span> = <span style="color: #000000; font-weight: bold;">new</span> targetType<span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">for</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #000000; font-weight: bold;">var</span> prop:<span style="color: #0066CC;">Object</span> <span style="color: #b1b100;">in</span> source <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				Assert<span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">data</span>.<span style="color: #006600;">hasOwnProperty</span><span style="color: #66cc66;">&#40;</span> prop <span style="color: #66cc66;">&#41;</span>, <span style="color: #ff0000;">&quot;Helpers.CloneInto(): supplied type didn't have required property &quot;</span> + prop <span style="color: #66cc66;">&#41;</span>;
&nbsp;
				<span style="color: #0066CC;">try</span>
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #0066CC;">data</span><span style="color: #66cc66;">&#91;</span>prop<span style="color: #66cc66;">&#93;</span> = source<span style="color: #66cc66;">&#91;</span>prop<span style="color: #66cc66;">&#93;</span>;
				<span style="color: #66cc66;">&#125;</span>
				<span style="color: #0066CC;">catch</span> <span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">e</span>:<span style="color: #0066CC;">Error</span> <span style="color: #66cc66;">&#41;</span>
				<span style="color: #66cc66;">&#123;</span>
					<span style="color: #0066CC;">data</span><span style="color: #66cc66;">&#91;</span>prop<span style="color: #66cc66;">&#93;</span> = CloneIntoR<span style="color: #66cc66;">&#40;</span> source<span style="color: #66cc66;">&#91;</span>prop<span style="color: #66cc66;">&#93;</span>, GetClass<span style="color: #66cc66;">&#40;</span> <span style="color: #0066CC;">data</span><span style="color: #66cc66;">&#91;</span>prop<span style="color: #66cc66;">&#93;</span> <span style="color: #66cc66;">&#41;</span><span style="color: #66cc66;">&#41;</span>;
				<span style="color: #66cc66;">&#125;</span>
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #b1b100;">return</span> <span style="color: #0066CC;">data</span>;
		<span style="color: #66cc66;">&#125;</span>
&nbsp;
		<span style="color: #808080; font-style: italic;">/**
		 * Import an annoymous type from the server into a concrete type of the client
		 * 
		 * @param source Annoymous type
		 * @param targetType Concrete type
		 *
		 */</span>
		<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> ImportServerDef<span style="color: #66cc66;">&#40;</span> source:<span style="color: #0066CC;">Object</span>, targetType:<span style="color: #000000; font-weight: bold;">Class</span> <span style="color: #66cc66;">&#41;</span>:<span style="color: #66cc66;">*</span>
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #000000; font-weight: bold;">var</span> <span style="color: #0066CC;">data</span>:<span style="color: #66cc66;">*</span> = CloneIntoR<span style="color: #66cc66;">&#40;</span> source, targetType <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #0066CC;">data</span>.<span style="color: #006600;">PostFixUp</span><span style="color: #66cc66;">&#40;</span> <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #b1b100;">return</span> <span style="color: #0066CC;">data</span>;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>The above function <em>Helpers.ImportServerDef()</em> does just such a job. It will even work for recursively stored complex types. You can use it like this, for example:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> psd:PlayerSpawnDef = Helpers.<span style="color: #006600;">ImportServerDef</span><span style="color: #66cc66;">&#40;</span><span style="color: #0066CC;">data</span>, PlayerSpawnDef<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Where PlayerSpawnDef in this case represents the data the client expects to receive from the server when a new player spawns in the game:</p>
<p>Message from server: </p>
<p><code>{"m_pos":{"m_x":44.179,"m_y":-426.812},"m_uid":10003,"m_name":"Guest10003"}</code></p>
<p>Concrete type:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> PlayerSpawnDef <span style="color: #0066CC;">extends</span> BaseDef
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">var</span> m_pos:Vector2;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">var</span> m_uid:uint;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">var</span> m_name:<span style="color: #0066CC;">String</span>;
&nbsp;
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> PlayerSpawnDef<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>
	<span style="color: #66cc66;">&#123;</span>
		m_pos = <span style="color: #000000; font-weight: bold;">new</span> Vector2<span style="color: #66cc66;">&#40;</span><span style="color: #66cc66;">&#41;</span>;
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>This enables strict type checking on the individual names of each part of the message, which prevents a typo from resulting in a bug. <em>Absolutely invaluable</em> in anything larger than this simple prototype.</p>
<blockquote><p>The reason the constructor creates an empty Vector2() is so that Helpers.ImportServerDef() can know the type it&#8217;s supposed to be importing &#8211; there is no way in the actionscript runtime to determine the type of variable if that variable is null.</p></blockquote>
<h2>Messages</h2>
<p>Ok, now we&#8217;re able to send objects and data over our message protocol and have them deserialised into concrete types on the client. So how do the client and server actually know what type of message they are receiving? It might be a message to create a new player, or one to respond to player input, or any other kind. We need to pre-package our messages inside a special <em>container class</em> which describes the message type as well as the message data.</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Messages</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> MessageContainer
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">/** Message name */</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">var</span> n:<span style="color: #0066CC;">String</span>;
&nbsp;
		<span style="color: #808080; font-style: italic;">/** Message string */</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">var</span> s:<span style="color: #0066CC;">String</span>;
&nbsp;
		<span style="color: #808080; font-style: italic;">/** Message data - to be filled in by client */</span>
		<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">var</span> m_data:<span style="color: #66cc66;">*</span>;
	<span style="color: #66cc66;">&#125;</span>	
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>Above is how I handle this. All messages are encoded into a container, which contains the name of the message and the message string itself. So for example message names might be defined as single letters like this, for the sake of bandwidth saving:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #808080; font-style: italic;">/**
 * Must be kept in sync with server!
 */</span>
<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> MessageNames
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> const kTime:<span style="color: #0066CC;">String</span> = <span style="color: #ff0000;">&quot;a&quot;</span>;
	<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> const kCreatePlayer:<span style="color: #0066CC;">String</span> = <span style="color: #ff0000;">&quot;b&quot;</span>;
	<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> const kReady:<span style="color: #0066CC;">String</span> = <span style="color: #ff0000;">&quot;c&quot;</span>;
	...
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>And a fully encoded message with a container might look like this: </p>
<p><code>"{"n":"c","s":"{\"m_pos\":{\"m_x\":362.597,\"m_y\":9.912},\"m_uid\":10005,\"m_name\":\"Guest10005\"}"}"</code></p>
<p>So, the message name is &#8220;c&#8221; and the message itself is:</p>
<p><code>"{\"m_pos\":{\"m_x\":362.597,\"m_y\":9.912},\"m_uid\":10005,\"m_name\":\"Guest10005\"}"</code></p>
<p>And when it comes to decoding the container string:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;">package Code.<span style="color: #006600;">Messages</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">net</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> flash.<span style="color: #006600;">utils</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #0066CC;">System</span>.<span style="color: #66cc66;">*</span>;
	<span style="color: #0066CC;">import</span> Code.<span style="color: #006600;">Maths</span>.<span style="color: #66cc66;">*</span>;
&nbsp;
	<span style="color: #808080; font-style: italic;">/**
	 * Static class members to handle message sending and reading
	 */</span>
	<span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">class</span> <span style="color: #0066CC;">Message</span>
	<span style="color: #66cc66;">&#123;</span>
		...
&nbsp;
		<span style="color: #808080; font-style: italic;">/**
		 * Deserialise a message from a string
		 * 
		 * @param messageString
		 * @return MessageContainer
		 *
		 */</span>
		<span style="color: #0066CC;">static</span> <span style="color: #0066CC;">public</span> <span style="color: #000000; font-weight: bold;">function</span> <span style="color: #0066CC;">Get</span><span style="color: #66cc66;">&#40;</span>messageString:<span style="color: #0066CC;">String</span><span style="color: #66cc66;">&#41;</span>:MessageContainer
		<span style="color: #66cc66;">&#123;</span>
			<span style="color: #000000; font-weight: bold;">var</span> containerA:<span style="color: #0066CC;">Object</span> = JSON.<span style="color: #006600;">parse</span><span style="color: #66cc66;">&#40;</span> messageString <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">if</span> <span style="color: #66cc66;">&#40;</span> containerA.<span style="color: #006600;">s</span><span style="color: #66cc66;">!</span>=<span style="color: #0066CC;">undefined</span> <span style="color: #66cc66;">&#41;</span>
			<span style="color: #66cc66;">&#123;</span>
				containerA.<span style="color: #006600;">m_data</span> = JSON.<span style="color: #006600;">parse</span><span style="color: #66cc66;">&#40;</span> containerA.<span style="color: #006600;">s</span> <span style="color: #66cc66;">&#41;</span>;
			<span style="color: #66cc66;">&#125;</span>
&nbsp;
			<span style="color: #808080; font-style: italic;">// clone into concrete type</span>
			<span style="color: #000000; font-weight: bold;">var</span> container:MessageContainer = Helpers.<span style="color: #006600;">CloneIntoR</span><span style="color: #66cc66;">&#40;</span> containerA, MessageContainer <span style="color: #66cc66;">&#41;</span>;
&nbsp;
			<span style="color: #b1b100;">return</span> container;
		<span style="color: #66cc66;">&#125;</span>
	<span style="color: #66cc66;">&#125;</span>
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<p>I can just call:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #000000; font-weight: bold;">var</span> messageContainer:MessageContainer = <span style="color: #0066CC;">Message</span>.<span style="color: #0066CC;">Get</span><span style="color: #66cc66;">&#40;</span>messageString<span style="color: #66cc66;">&#41;</span>;</pre></td></tr></table></div>

<p>Which gets the message container, containing the decoded message and its name which was picked up and separated into a message by the message protocol as previously described. I can then simply interrogate the type of message and deserialise the inner data appropriately:</p>

<div class="wp_syntax"><table><tr><td class="code"><pre class="actionscript" style="font-family:monospace;"><span style="color: #b1b100;">switch</span> <span style="color: #66cc66;">&#40;</span>messageContainer.<span style="color: #006600;">n</span><span style="color: #66cc66;">&#41;</span>
<span style="color: #66cc66;">&#123;</span>
	<span style="color: #b1b100;">case</span> MessageNames.<span style="color: #006600;">kReady</span>:
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// unpack and create the world</span>
		...
	<span style="color: #66cc66;">&#125;</span>
	<span style="color: #b1b100;">break</span>;
&nbsp;
	<span style="color: #b1b100;">case</span> MessageNames.<span style="color: #006600;">kCreatePlayer</span>:
	<span style="color: #66cc66;">&#123;</span>
		<span style="color: #808080; font-style: italic;">// deserialise the message data into a concrete type</span>
		<span style="color: #000000; font-weight: bold;">var</span> psd:PlayerSpawnDef = Helpers.<span style="color: #006600;">ImportServerDef</span><span style="color: #66cc66;">&#40;</span>messageContainer.<span style="color: #006600;">m_data</span>, PlayerSpawnDef<span style="color: #66cc66;">&#41;</span>;
                ...
	<span style="color: #66cc66;">&#125;</span>
	<span style="color: #b1b100;">break</span>;
<span style="color: #66cc66;">&#125;</span></pre></td></tr></table></div>

<blockquote><p>Note that the inner message data cannot be deserialised into the correct concrete type until the type of message has been understood by the game code via the message name, as shown above when creating a player.</p></blockquote>
<p>Ok, now we have a socket server, a message protocol with serialisation and deserialisation, a way to determine the type of message received on either end. Now all we need is the actual game itself!</p>
<p>That&#8217;s the subject of the next article in this series!</p>
<div id="attachment_1760" style="width: 310px" class="wp-caption aligncenter"><a href="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/omgMeme.jpg"><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/10/omgMeme-300x221.jpg" alt="" title="omgMeme" width="300" height="221" class="size-medium wp-image-1760" /></a><p class="wp-caption-text">Why do you make me wait?!</p></div>
<h2>Buy the source</h2>
<p>If you can&#8217;t wait for the next article and just have to find out how it all ends, or you simply want a decent base to build your own multi-player prototype on top of then you can buy the source code accompanying this article!</p>
<p>It will give you the complete prototype as shown in playable form above, with both server and client code. You will need either <a href="http://www.flashdevelop.org/">Flash Develop</a> or <a href="http://www.sapphiresteel.com/Products/amethyst-ide/article/amethyst-product-page">Amethyst</a> to build the client-side code and of course you will need <a href="http://nodejs.org/">node.js</a> installed to run the server-side. You will also need <a href="http://www.adobe.com/devnet/flex/flex-sdk-download.html">Flex SDK version 4.5.1 or above</a>. If you would like to edit the assets included with this demo, you will need Adobe Flash CS4+. Note that you cannot build the client side code with only the Flash IDE.</p>
<p>Your purchase will also contribute to my ability to be able to continue to write articles like this! <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>It comes in two versions, a personal edition which you are free to use for your own, non commercial purposes and a commercial version which allows you to use the code in any number of different commercial products or games:</p>
<p>Personal use licence &#8211; USD 49.99<br />
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
 <input type="hidden" name="business" value="paypal@wildbunny.co.uk" />
 <input type="hidden" name="cmd" value="_xclick" />
 <!-- Instant Payment Notification & Return Page Details -->
 <input type="hidden" name="notify_url" value="http://www.wildbunny.co.uk/blog/?s2member_paypal_notify=1" />
 <input type="hidden" name="cancel_return" value="http://www.wildbunny.co.uk/blog/" />
 <input type="hidden" name="return" value="http://www.wildbunny.co.uk/blog/?s2member_paypal_return=1" />
 <input type="hidden" name="rm" value="2" />
 <!-- Configures Basic Checkout Fields -->
 <input type="hidden" name="lc" value="" />
 <input type="hidden" name="no_shipping" value="1" />
 <input type="hidden" name="no_note" value="1" />
 <input type="hidden" name="custom" value="www.wildbunny.co.uk" />
 <input type="hidden" name="currency_code" value="USD" />
 <input type="hidden" name="page_style" value="paypal" />
 <input type="hidden" name="charset" value="utf-8" />
 <input type="hidden" name="item_name" value="Source accompanying How to make a multi-player game - personal" />
 <input type="hidden" name="item_number" value="sp:1735:72" />
 <input type="hidden" name="amount" value="49.99" />
 <!-- Configures s2Member's Unique Invoice ID/Code  -->
 <input type="hidden" name="invoice" value="53ce9eaf1e625~54.90.127.10" />
 <!-- Associates Purchase With A User/Member (when/if applicable) -->
 <input type="hidden" name="on0" value="Originating Domain" />
 <input type="hidden" name="os0" value="www.wildbunny.co.uk" />
 <!-- Identifies The Customer's IP Address For Tracking -->
 <input type="hidden" name="on1" value="Customer IP Address" />
 <input type="hidden" name="os1" value="54.90.127.10" />
 <!-- Displays The PayPal Image Button -->
 <input type="image" src="https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif" style="width:auto; height:auto; border:0;" alt="PayPal" />
</form></p>
<p>Commercial use licence &#8211; USD 199.99<br />
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
 <input type="hidden" name="business" value="paypal@wildbunny.co.uk" />
 <input type="hidden" name="cmd" value="_xclick" />
 <!-- Instant Payment Notification & Return Page Details -->
 <input type="hidden" name="notify_url" value="http://www.wildbunny.co.uk/blog/?s2member_paypal_notify=1" />
 <input type="hidden" name="cancel_return" value="http://www.wildbunny.co.uk/blog/" />
 <input type="hidden" name="return" value="http://www.wildbunny.co.uk/blog/?s2member_paypal_return=1" />
 <input type="hidden" name="rm" value="2" />
 <!-- Configures Basic Checkout Fields -->
 <input type="hidden" name="lc" value="" />
 <input type="hidden" name="no_shipping" value="1" />
 <input type="hidden" name="no_note" value="1" />
 <input type="hidden" name="custom" value="www.wildbunny.co.uk" />
 <input type="hidden" name="currency_code" value="USD" />
 <input type="hidden" name="page_style" value="paypal" />
 <input type="hidden" name="charset" value="utf-8" />
 <input type="hidden" name="item_name" value="Source accompanying How to make a multi-player game - commercial" />
 <input type="hidden" name="item_number" value="sp:1972:72" />
 <input type="hidden" name="amount" value="199.99" />
 <!-- Configures s2Member's Unique Invoice ID/Code  -->
 <input type="hidden" name="invoice" value="53ce9eaf1eaa8~54.90.127.10" />
 <!-- Associates Purchase With A User/Member (when/if applicable) -->
 <input type="hidden" name="on0" value="Originating Domain" />
 <input type="hidden" name="os0" value="www.wildbunny.co.uk" />
 <!-- Identifies The Customer's IP Address For Tracking -->
 <input type="hidden" name="on1" value="Customer IP Address" />
 <input type="hidden" name="os1" value="54.90.127.10" />
 <!-- Displays The PayPal Image Button -->
 <input type="image" src="https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif" style="width:auto; height:auto; border:0;" alt="PayPal" />
</form></p>
<p><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Subscribers can access the source here</a></p>
<p>If it seems expensive, bare in mind that it took a couple of solid weeks of programming to produce, which would have been around $3500 if I were contracted&#8230; Not to mention the many weeks and days it took to arrive at a solution powerful enough to handle a twitch reaction game over a 3G connection!</p>
<p>That&#8217;s all for now! Until next time, have fun!</p>
<p>Cheers, Paul.</p>
<p><a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/">Continue reading part 2 here</a></p>

				<!-- Social Sharing Toolkit v2.0.4 | http://www.marijnrongen.com/wordpress-plugins/social_sharing_toolkit/ -->
				<div class="mr_social_sharing_wrapper"><span class="mr_social_sharing"><script type="text/javascript">
							  reddit_url = "http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/";
							  reddit_title = "How to make a multi-player game – part 1";
							</script>
							<script type="text/javascript" src="http://www.reddit.com/static/button/button1.js"></script></span><span class="mr_social_sharing"><a href="http://twitter.com/share" class="twitter-share-button" data-url="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/" data-count="horizontal" data-text="How to make a multi-player game – part 1">Tweet</a></span><span class="mr_social_sharing"><iframe src="https://www.facebook.com/plugins/like.php?locale=en_US&amp;href=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2012%2F10%2F09%2Fhow-to-make-a-multi-player-game-part-1%2F&amp;layout=button_count&amp;show_faces=false&amp;width=90px&amp;height=21px" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></span><span class="mr_social_sharing"><div id="fb-root"></div><fb:send href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/" font=""></fb:send></span><span class="mr_social_sharing"><g:plusone size="medium" href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/"></g:plusone></span><span class="mr_social_sharing"><a href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.wildbunny.co.uk%2Fblog%2F2012%2F10%2F09%2Fhow-to-make-a-multi-player-game-part-1%2F&amp;title=How+to+make+a+multi-player+game+%E2%80%93+part+1" target="_blank" class="mr_social_sharing_popup_link"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/social-sharing-toolkit/images/buttons/stumbleupon.png" alt="Submit to StumbleUpon" title="Submit to StumbleUpon"/></a></span></div><span style="clear:both;display:none;"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/wp-spamfree/img/wpsf-img.php" width="0" height="0" alt="" style="border-style:none;width:0px;height:0px;display:none;" /></span>											</div><!-- .entry-content -->

					<div id="entry-author-info">
						<div id="author-avatar">
							<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=60&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G' class='avatar avatar-60 photo' height='60' width='60' />						</div><!-- #author-avatar -->
						<div id="author-description">
							<h2>About Paul Firth</h2>
							A games industry veteran of ten years, seven of which spent at Sony Computer Entertainment Europe, he has had key technical roles on triple-A titles like the Bafta Award Winning Little Big Planet (PSP), 24: The Game (PS2), special effects work on Heavenly Sword (PS3), some in-show graphics on the BBC�s version of Robot Wars, the TV show, as well as a few more obscure projects.
&nbsp;
Now joint CEO of Wildbunny, he is able to give himself hiccups simply by coughing.
&nbsp;
1NobNQ88UoYePFi5QbibuRJP3TtLhh65Jp							<div id="author-link">
								<a href="http://www.wildbunny.co.uk/blog/author/paulfirth/">
									View all posts by Paul Firth <span class="meta-nav">&rarr;</span>								</a>
							</div><!-- #author-link	-->
						</div><!-- #author-description -->
					</div><!-- #entry-author-info -->

					<div class="entry-utility">
						This entry was posted in <a href="http://www.wildbunny.co.uk/blog/category/as3/" title="View all posts in AS3" rel="category tag">AS3</a>, <a href="http://www.wildbunny.co.uk/blog/category/beginner/" title="View all posts in Beginner" rel="category tag">Beginner</a>, <a href="http://www.wildbunny.co.uk/blog/category/json-2/" title="View all posts in JSON" rel="category tag">JSON</a>, <a href="http://www.wildbunny.co.uk/blog/category/multi-player/" title="View all posts in Multi-player" rel="category tag">Multi-player</a>, <a href="http://www.wildbunny.co.uk/blog/category/server-side/" title="View all posts in Server side" rel="category tag">Server side</a>, <a href="http://www.wildbunny.co.uk/blog/category/technical/" title="View all posts in Technical" rel="category tag">Technical</a> and tagged <a href="http://www.wildbunny.co.uk/blog/tag/adobe-flash/" rel="tag">adobe flash</a>, <a href="http://www.wildbunny.co.uk/blog/tag/game/" rel="tag">game</a>, <a href="http://www.wildbunny.co.uk/blog/tag/game-developement/" rel="tag">game developement</a>, <a href="http://www.wildbunny.co.uk/blog/tag/multi-player-2/" rel="tag">multi-player</a>, <a href="http://www.wildbunny.co.uk/blog/tag/server/" rel="tag">server</a>, <a href="http://www.wildbunny.co.uk/blog/tag/tutorial/" rel="tag">tutorial</a>. Bookmark the <a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/" title="Permalink to How to make a multi-player game &#8211; part 1" rel="bookmark">permalink</a>.											</div><!-- .entry-utility -->
				</div><!-- #post-## -->

				<div id="nav-below" class="navigation">
					<div class="nav-previous"><a href="http://www.wildbunny.co.uk/blog/2012/06/13/flash-portals-and-version-control/" rel="prev"><span class="meta-nav">&larr;</span> Flash portals and version control</a></div>
					<div class="nav-next"><a href="http://www.wildbunny.co.uk/blog/2012/10/31/2d-polygonal-collision-detection-and-internal-edges/" rel="next">2D polygonal collision-detection and internal edges <span class="meta-nav">&rarr;</span></a></div>
				</div><!-- #nav-below -->

				
			<div id="comments">


			<h3 id="comments-title">16 Responses to <em>How to make a multi-player game &#8211; part 1</em></h3>


			<ol class="commentlist">
					<li class="comment even thread-even depth-1" id="li-comment-1687">
		<div id="comment-1687">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/d807296c8a88e10cba678c34440bcb54?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Futaro</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-1687">
			November 5, 2012 at 9:40 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I will try to do the same step by step. thanks!!</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=1687#respond' onclick='return addComment.moveForm("comment-1687", "1687", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-2059">
		<div id="comment-2059">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/a98cd638d26eabd9c0fea9edc99f24ea?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://raspberryalphaomega.org.uk' rel='external nofollow' class='url'>Frank Carver</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-2059">
			March 12, 2013 at 8:52 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi. Thanks for an excellent and thought-provoking article. I was pointed here by Andrew Scheller who left a comment on my blog at <a href="http://raspberryalphaomega.org.uk/?p=619" rel="nofollow">http://raspberryalphaomega.org.uk/?p=619</a> I&#8217;m also interested in making multi-player games but coming at it from a different kind of direction. I&#8217;m not much interested in graphical games, but the challenges of building an interactive game environment which consists of a loose federation of servers and clients rather than a centralised single &#8220;world&#8221;I find fascinating.</p>
<p>As you point out in your article, the key to all this is the security and authority, but that becomes especially interesting in my case when untrusted participants can not only bring clients to the party, but also join their servers to the federation for other players to &#8220;visit&#8221;.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=2059#respond' onclick='return addComment.moveForm("comment-2059", "2059", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-2060">
		<div id="comment-2060">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-2060">
			March 12, 2013 at 9:05 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Frank,</p>
<p>Peer-to-peer, as its called is right on the cutting edge of what is possible; there are so many problems associated with it that it remains suitable only for cooperative games, and even then cheating will be very hard to avoid. On top of that you also have an increased problem with lag (if any of the clients are doing simulation and transmitting their results to peers), because one laggy internet connection will mean that all other players in the game will see the simulated object moving in a laggy fashion.</p>
<p>Good luck! <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=2060#respond' onclick='return addComment.moveForm("comment-2060", "2060", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1" id="li-comment-3333">
		<div id="comment-3333">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/93de7a7d96d142b3080935d7092fd1b0?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Illidanek</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3333">
			October 2, 2013 at 7:17 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Great article, but at the beginning you show how to make the server wait for sockets, but you never show how to make the client connect to the server using actionscript.</p>
<p>Could you please explain/show basic code for that part, I&#8217;m having some trouble.<br />
Thanks.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3333#respond' onclick='return addComment.moveForm("comment-3333", "3333", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-3334">
		<div id="comment-3334">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3334">
			October 2, 2013 at 8:19 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>It&#8217;s just standard flash sockets &#8211; perhaps this tutorial will help: <a href="http://hejp.co.uk/flash/actionscript-3-socket-programming/" rel="nofollow">http://hejp.co.uk/flash/actionscript-3-socket-programming/</a></p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3334#respond' onclick='return addComment.moveForm("comment-3334", "3334", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-3382">
		<div id="comment-3382">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/858cb103246899f4ea409e12803c33c2?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Gary</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3382">
			October 11, 2013 at 11:36 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Great article. Do you perhaps have a followup article now that Air 3.8 supports UDP (DatagramSocket)?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3382#respond' onclick='return addComment.moveForm("comment-3382", "3382", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-3383">
		<div id="comment-3383">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3383">
			October 11, 2013 at 1:07 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>I&#8217;m afraid not. In addition, I&#8217;m not sure I&#8217;d recommend using UDP over TCP anyway &#8211; the headache of managing reliability and all the things you need from TCP wont be worth the tiny performance improvement IMO.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3383#respond' onclick='return addComment.moveForm("comment-3383", "3383", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1" id="li-comment-3621">
		<div id="comment-3621">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/d835dcf323a192d876aeb280e2d29c7d?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Gustavo</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3621">
			January 17, 2014 at 10:44 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Paul,</p>
<p>I have, let�s say, a begginner issue:</p>
<p>I have been creating some &#8220;local&#8221; games in AS3 using either Flash Builder or Flash Pro CS6&#8230; Besides that I have installed Node.js and the Flex SDK.  However I don�t know:<br />
a) What supposse to be the net package<br />
b) How do I make the Node.js work with Flash (builder or pro) since when I open it it looks like a command prompt window<br />
c) Copying the code supposses to initialize the server, but aren�t we missing the import files?</p>
<p>Thanks a lot for your help (I am trying to learn and understand this process so I can develop my own MO game)</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3621#respond' onclick='return addComment.moveForm("comment-3621", "3621", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment even thread-odd thread-alt depth-1" id="li-comment-3749">
		<div id="comment-3749">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/79fa0ea300dfbe0e301753b41ee1388a?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">niks</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3749">
			May 24, 2014 at 12:11 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Cool post, thanks <img src="http://www.wildbunny.co.uk/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3749#respond' onclick='return addComment.moveForm("comment-3749", "3749", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
	<li class="comment odd alt thread-even depth-1" id="li-comment-3773">
		<div id="comment-3773">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/5a7a741c41e7c3cfea67cd8f4054b7e8?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">venu</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3773">
			June 26, 2014 at 10:35 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi </p>
<p>i have develop a rummy online malty player game its on live now,</p>
<p>players also likes my games and the traffic is also good on my site,</p>
<p>back server we are python, </p>
<p>my flash game is disconnecting to server when i have good internet connection also,</p>
<p>can please let me know why this disconnection is  happening ?</p>
<p>The problem with server side or flash side ?</p>
<p>Thanks in advance</p>
<p>venu</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3773#respond' onclick='return addComment.moveForm("comment-3773", "3773", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-3774">
		<div id="comment-3774">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3774">
			June 26, 2014 at 10:36 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Could be a problem with either side; it&#8217;s impossible for me to say. You&#8217;ll need to make sure you gracefully handle reconnection should a client become disconnected.</p>
<p>Cheers, Paul.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3774#respond' onclick='return addComment.moveForm("comment-3774", "3774", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-3776">
		<div id="comment-3776">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/5a7a741c41e7c3cfea67cd8f4054b7e8?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">venu</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3776">
			June 26, 2014 at 2:24 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Actually flash works with the SOCKET CONNECTION with game engine,</p>
<p>after connection success there is an event (Heart beat) this event will goes from the flash for every 1 sec and waiting for the reply 5 sec</p>
<p>in that 5 sec i dint receive the reply for that event i am displaying disconnects popup,</p>
<p>is there any other way ? to check the connectivity with flash and engine,</p>
<p>please help i am struggling for this from last 6 months,</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3776#respond' onclick='return addComment.moveForm("comment-3776", "3776", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-2" id="li-comment-3777">
		<div id="comment-3777">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3777">
			June 26, 2014 at 2:58 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Thats the only way to do it &#8211; there is no real way to be 100% that a socket in connected, so you have to poll like you are doing. Maybe the issue is elsewhere &#8211; are you using a VPS?</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3777#respond' onclick='return addComment.moveForm("comment-3777", "3777", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-3" id="li-comment-3782">
		<div id="comment-3782">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/5a7a741c41e7c3cfea67cd8f4054b7e8?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Venu</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3782">
			July 4, 2014 at 11:06 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Hi Paul,</p>
<p>Sorry for the late reply, yes we are using VPS server,</p>
<p>Can you please tell how to make XMLSocket connection secure&#8230;..</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3782#respond' onclick='return addComment.moveForm("comment-3782", "3782", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment byuser comment-author-paulfirth bypostauthor even depth-4" id="li-comment-3783">
		<div id="comment-3783">
		<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn"><a href='http://www.wildbunny.co.uk' rel='external nofollow' class='url'>Paul Firth</a></cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3783">
			July 4, 2014 at 12:49 pm</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>The problems you are having could be due to the CPU/memory load on the physical hardware that your VPS is hosted on. I had a lot of problems with this which all went away when I moved to a dedicated server. I don&#8217;t know how to make the socket connection secure I&#8217;m afraid.</p>
</div>

		<div class="reply">
			<a class='comment-reply-link' href='/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/?replytocom=3783#respond' onclick='return addComment.moveForm("comment-3783", "3783", "respond", "1709")'>Reply</a>		</div><!-- .reply -->
	</div><!-- #comment-##  -->

	<ul class="children">
	<li class="comment odd alt depth-5" id="li-comment-3785">
		<div id="comment-3785">
		<div class="comment-author vcard">
			<img alt='' src='http://1.gravatar.com/avatar/5a7a741c41e7c3cfea67cd8f4054b7e8?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G' class='avatar avatar-40 photo' height='40' width='40' />			<cite class="fn">Venu</cite> <span class="says">says:</span>		</div><!-- .comment-author .vcard -->
		
		<div class="comment-meta commentmetadata"><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#comment-3785">
			July 11, 2014 at 8:31 am</a>		</div><!-- .comment-meta .commentmetadata -->

		<div class="comment-body"><p>Thanks for the information paul</p>
</div>

		<div class="reply">
					</div><!-- .reply -->
	</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
			</ol>



								<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/comment-page-1/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://www.wildbunny.co.uk/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='1709' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
							<script type='text/javascript'>
	<!--
	refJS = escape( document[ 'referrer' ] );
	document.write("<input type='hidden' name='refJS' value='"+refJS+"'>");
	// -->
	</script>
	<p style="font-size:9px;clear:both;">WP-SpamFree by <a rel="nofollow" href="http://www.polepositionmarketing.com/library/wp-spamfree/" title="WP-SpamFree WordPress Anti-Spam Plugin" >Pole Position Marketing</a>

					</form>
							</div><!-- #respond -->
			
</div><!-- #comments -->


			</div><!-- #content -->
		</div><!-- #container -->


		<div id="primary" class="widget-area" role="complementary">
			<ul class="xoxo">

<li id="search-3" class="widget-container widget_search"><h3 class="widget-title">Search</h3><form role="search" method="get" id="searchform" class="searchform" action="http://www.wildbunny.co.uk/blog/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form></li><li id="categories-3" class="widget-container widget_categories"><h3 class="widget-title">Choose a category</h3><select name='cat' id='cat' class='postform' >
	<option value='-1'>Select Category</option>
	<option class="level-0" value="104">Algorithmic trading&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="7">Animal Army&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="35">AS3&nbsp;&nbsp;(19)</option>
	<option class="level-0" value="44">Beginner&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="114">Bitcoin&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="6">Business&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="73">Chip tunes&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="71">Circles&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="40">Collision Detection&nbsp;&nbsp;(8)</option>
	<option class="level-0" value="53">Developer love&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="117">Entity systems&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="103">Finance&nbsp;&nbsp;(6)</option>
	<option class="level-0" value="101">Full games&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="67">Geometry&nbsp;&nbsp;(9)</option>
	<option class="level-0" value="58">Graphics&nbsp;&nbsp;(9)</option>
	<option class="level-0" value="100">JSON&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="42">Ladders and AI&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="96">learning-to-program&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="28">Making angry birds&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="47">Micro-transactions&nbsp;&nbsp;(3)</option>
	<option class="level-0" value="90">Multi-player&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="72">Music&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="118">Optimisation&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="41">Parallax and Tiles&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="65">paypal&nbsp;&nbsp;(1)</option>
	<option class="level-0" value="97">Physics&nbsp;&nbsp;(8)</option>
	<option class="level-0" value="36">Platform game&nbsp;&nbsp;(5)</option>
	<option class="level-0" value="68">Polygons&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="98">Portals&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="52">Promotion&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="93">Self improvement&nbsp;&nbsp;(4)</option>
	<option class="level-0" value="66">Server side&nbsp;&nbsp;(7)</option>
	<option class="level-0" value="99">Silverlight&nbsp;&nbsp;(5)</option>
	<option class="level-0" value="45">Stencyl&nbsp;&nbsp;(2)</option>
	<option class="level-0" value="5">Technical&nbsp;&nbsp;(28)</option>
	<option class="level-0" value="1">Uncategorized&nbsp;&nbsp;(1)</option>
</select>

<script type='text/javascript'>
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "http://www.wildbunny.co.uk/blog/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

</li>			</ul>
		</div><!-- #primary .widget-area -->


		<div id="secondary" class="widget-area" role="complementary">
			<ul class="xoxo">
				<li id="user_bio-2" class="widget-container widget_user_bio"><h3 class="widget-title"><div style="text-align:center">About the author</div></h3><div class="ub-grav" style="margin:5px 5px 0px 5px;text-align:center;"><img alt='' src='http://0.gravatar.com/avatar/e19935619bbfb2c4d003acdb0669ca46?s=128&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D128&amp;r=G' class='avatar avatar-128 photo' height='128' width='128' /></div>A games industry veteran of ten years, seven of which spent at Sony Computer Entertainment Europe, he has had key technical roles on triple-A titles like the Bafta Award Winning Little Big Planet (PSP), 24: The Game (PS2), special effects work on Heavenly Sword (PS3), some in-show graphics on the BBC�s version of Robot Wars, the TV show, as well as a few more obscure projects.
&nbsp;
Now joint CEO of Wildbunny, he is able to give himself hiccups simply by coughing.
&nbsp;
1NobNQ88UoYePFi5QbibuRJP3TtLhh65Jp
</li><li id="widget_featured-posts-2" class="widget-container widget_featured-posts"><h3 class="widget-title">Featured Posts</h3>	
	<ul id="yiw-featured-post">
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2013/04/17/algorithmic-trading-for-dummies-part-2/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2013/04/stop-loss.jpg&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Algorithmic trading for dummies &#8211; part 2" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2013/04/17/algorithmic-trading-for-dummies-part-2/">Algorithmic trading for dummies &#8211; part 2</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2011/03/25/speculative-contacts-an-continuous-collision-engine-approach-part-1/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/03/toi1.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Speculative Contacts &#8211; a continuous collision engine approach" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2011/03/25/speculative-contacts-an-continuous-collision-engine-approach-part-1/">Speculative Contacts &#8211; a continuous collision engine approach</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2011/04/20/collision-detection-for-dummies/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/04/figure111.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="Collision detection for dummies" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2011/04/20/collision-detection-for-dummies/">Collision detection for dummies</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2012/11/shop.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="How to make a multi-player game � part 2" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2012/11/20/how-to-make-a-multi-player-game-part-2/">How to make a multi-player game � part 2</a>
	       </h4>
	   </li>
	   <li>
	       <a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/" class="featured-thumb">
	                      <img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/featured-post-with-thumbnail/scripts/timthumb.php?src=http://www.wildbunny.co.uk/blog/wp-content/uploads/2011/12/flashLogo.png&amp;h=200&amp;w=200&amp;zc=1" class="alignleft" alt="How to make games" />
           
	       	       </a>
           
           <h4 class="featured-title">
	           <a href="http://www.wildbunny.co.uk/blog/2012/01/06/how-to-make-games/">How to make games</a>
	       </h4>
	   </li>
	</ul>
	
	</li><li id="advanced-featured-page-widget-3" class="widget-container widget_advanced-featured-page-widget"><h3 class="widget-title">Tutorials with code to buy</h3><div class="post-2295 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-multiplayer-asteroids-engine/" title="Buy multiplayer asteroids engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/multiplayer.jpg" class="attachment-200 by 200 image" alt="multiplayer" /></a></div><!--end post_class()-->

</li><li id="advanced-featured-page-widget-2" class="widget-container widget_advanced-featured-page-widget"><div class="post-2299 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-angrybirds-alike-engine/" title="Buy Angrybirds-alike engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/birds.jpg" class="attachment-200 by 200 image" alt="birds" /></a></div><!--end post_class()-->

</li><li id="advanced-featured-page-widget-4" class="widget-container widget_advanced-featured-page-widget"><div class="post-2301 page type-page status-publish hentry"><a href="http://www.wildbunny.co.uk/blog/buy-platform-game-engine/" title="Buy platform game engine" class="alignnone"><img width="200" height="200" src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/05/platform.png" class="attachment-200 by 200 image" alt="platform" /></a></div><!--end post_class()-->

</li><li id="wp125" class="widget-container wp125_write_ads_widget">
<h3 class="widget-title">Affiliates</h3><div id="wp125adwrap_1c">
<div class="wp125ad odd"><a href="index.php?adclick=10" title="plus500" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2013/03/plus500-200x200.gif" alt="plus500" /></a></div>
<div class="wp125ad even"><a href="https://www.cavirtex.com/Z/50680" title="cavirtex" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/blog/wp-content/uploads/2014/03/caVirtex.gif" alt="cavirtex" /></a></div>
<div class="wp125ad odd"><a href="http://www.freelancer.co.uk/affiliates/wildbunny2/" title="freelancer" rel="nofollow"target='_blank'><img src="/images/freelancer.png" alt="freelancer" /></a></div>
<div class="wp125ad even"><a href="http://www.shareasale.com/r.cfm?b=531904&u=949687&m=41388&urllink=&afftrack=" title="wp engine" rel="nofollow"target='_blank'><img src="http://www.shareasale.com/image/41388/sas_banner_250x250.jpg" alt="wp engine" /></a></div>
<div class="wp125ad odd"><a href="http://www.wildbunny.co.uk/blog/advertise-here/" rel="nofollow"target='_blank'><img src="http://www.wildbunny.co.uk/images/blankAdvert.png" alt="" /></a></div>
</div>
</li><li id="ezadswidget-4" class="widget-container ezAdsWidget"><h3 class="widget-title">My MetaTrader 5 products</h3><!-- Easy AdSense V2.79 -->
<!-- Widg[count: 2] -->
<div class="ezAdsense adsense adsense-widget"><div style="text-align:center;margin:0px; "><div style="width:350px">
<a target="_blank" href="http://mql5.com/dzz" title="Download VWAP technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/925/mid" alt="Buy VWAP customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/e08" title="Download Average Spread technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/951/mid" alt="Buy Average Spread customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/e09" title="Download Bid Ask Volumes technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/950/mid" alt="Buy Bid Ask Volumes customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/po9" title="Download Market Activity technical indicator from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/963/mid" alt="Buy Market Activity customer indicator in the store selling algo trading systems" width="400" height="60"></a>
<a target="_blank" href="http://mql5.com/poa" title="Download Precision Scalper trading system from MQL5 Market"><img src="http://www.mql5.com/en/market/widget/972/mid" alt="Buy Precision Scalper trading application in the store of automated robot systems" width="400" height="60"></a>
</div></div></div></li>			</ul>
		</div><!-- #secondary .widget-area -->

	</div><!-- #main -->

	<div id="footer" role="contentinfo">
		<div id="colophon">



			<div id="site-info">
				<a href="http://www.wildbunny.co.uk/blog/" title="Wildbunny blog" rel="home">
					Wildbunny blog				</a>
			</div><!-- #site-info -->

			<div id="site-generator">
								<a href="http://wordpress.org/"
						title="Semantic Personal Publishing Platform" rel="generator">
					Proudly powered by WordPress.				</a>
			</div><!-- #site-generator -->

		</div><!-- #colophon -->
	</div><!-- #footer -->

</div><!-- #wrapper -->

		
		<script type="text/javascript">
			//<![CDATA[
			jQuery(document).ready(function() {
				var a = '<div id="cookie-law-info-bar"><span>This website uses cookies to improve your experience. We\'ll assume you\'re ok with this, but you can opt-out if you wish.<a href=\"#\" id=\"cookie_action_close_header\"  class=\"medium cli-plugin-button cli-plugin-main-button\" >Accept</a> <a href=\"http://www.wildbunny.co.uk/blog/privacy-policy/\" id=\"CONSTANT_OPEN_URL\" target=\"_new\"  class=\"cli-plugin-main-link\"  >Read More</a></span></div>';
				var b = '{"animate_speed_hide":"500","animate_speed_show":"500","background":"#fff","border":"#444","border_on":true,"button_1_button_colour":"#000","button_1_button_hover":"#000000","button_1_link_colour":"#fff","button_1_as_button":true,"button_2_button_colour":"#333","button_2_button_hover":"#292929","button_2_link_colour":"#444","button_2_as_button":false,"font_family":"inherit","notify_animate_hide":true,"notify_animate_show":false,"notify_div_id":"#cookie-law-info-bar","notify_position_horizontal":"right","notify_position_vertical":"bottom","showagain_tab":false,"showagain_background":"#fff","showagain_border":"#000","showagain_div_id":"#cookie-law-info-again","showagain_x_position":"50%","text":"#000"}';
				cli_show_cookiebar(a,b);
				
							});
			//]]>
		</script>
		
		 
			<a id="FollowMeTabLeftLg" onClick="showFollowMe()" href="#" style="border-bottom:none;"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/leftlg.gif" border="0" /></a>	

<div id="FollowMeBubbleBG" style="visibility:hidden;"></div>
<div id="FollowMeBubble" style="visibility:hidden;border-bottom:none;">


<div class="top" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_top.gif');width:329px;height:60px;float:left;display:block;border-bottom:none;">
<a id="close" onClick="hideFollowMe()" href="#" style="border-bottom:none"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/close.png" border="0" /> </a>
<!-- <a id="grab" target="_blank" title="grab this" href="http://www.ignitesocialmedia.com/tools/follow-me/"><span>grab this</span></a>--></div>
<div class="mid" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_mid.gif');width:329px;background-repeat:repeat-y;float:left;">
<div id="stretch">
<span><a title="
Twitter" target="_blank" href="http://twitter.com/paul_m_firth" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
twitter.png" border="0" alt="
Twitter" /> 
Twitter</a></span>
<span><a title="
Facebook" target="_blank" href="http://www.facebook.com/WildbunnyLtd" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
facebook.png" border="0" alt="
Facebook" /> 
Facebook</a></span>
<span><a title="
RSS" target="_blank" href="http://wildbunny.co.uk/blog/feed" rel="me"><img width="32px" src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/
rss.png" border="0" alt="
RSS" /> 
RSS</a></span>
</div></div>
<div class="bottom" style="background-image:url('http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_bottom.gif');height:34px;width:329px;clear:both;float:left;">
<a id="grab" target="_blank" title="grab this" style="border-bottom:none;" href="http://www.ignitesocialmedia.com/tools/follow-me/"><span>grab this</span></a>
</div>
<div class="grab" style="width:329px;clear:both;float:left;"><a style="border-bottom:none;" href="http://www.ignitesocialmedia.com/tools/follow-me/"><img src="http://www.wildbunny.co.uk/blog/wp-content/plugins/follow-me/images/followme_grab.gif" /></a></div>
</div>







<div id="thsp-sticky-header">
	<div id="thsp-sticky-header-inner">
		<div id="thsp-sticky-header-title">
			<a href="http://www.wildbunny.co.uk/blog" title="Developer knowledge centre">Wildbunny blog</a>
		</div>
		
		<ul id="thsp-sticky-header-menu" class="menu"><li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-272"><a href="/blog/">All articles</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1302"><a href="http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/">Vector maths</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-319"><a href="http://www.wildbunny.co.uk/blog/contact-me/">Contact me</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2072"><a href="http://www.wildbunny.co.uk/blog/hire-me/">Hire me</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-446"><a href="http://www.wildbunny.co.uk/blog/membership-sign-up-page/">Subscribe!</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-466"><a href="http://www.wildbunny.co.uk/blog/welcome-to-our-members-area/">Members</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1183"><a href="/blog/buy-source-code">Buy source-code</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1694"><a href="http://www.wildbunny.co.uk/blog/privacy-policy/">Privacy policy</a></li>
</ul>	</div><!-- #thsp-sticky-header-inner -->
</div><!-- #thsp-sticky-header --><script type='text/javascript' src='http://www.wildbunny.co.uk/blog/wp-content/plugins/s2member/s2member-o.php?ws_plugin__s2member_js_w_globals=1&#038;qcABC=1&#038;ver=140105-140105-2848662513'></script>

			<!-- SwfObj: Register SWFs on this page. -->
			<script type="text/javascript">
					swfobject.registerObject("swfobj_0", "8.0.0", "http://www.wildbunny.co.uk/blog/wp-content/plugins/swfobj/expressInstall.swf");
			</script>
</body>
</html>

