http://www.jcea.es/artic/ecc-crc.htm
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 01:38:25 GMT
Server: Zope/(2.13.22, python 2.7.7, sunos5) ZServer/1.1
Expires: Wed, 23 Jul 2014 02:38:25 GMT
Last-Modified: Wed, 23 Jul 2014 01:38:25 GMT
Cache-Control: max-age=3600
Content-Type: text/html; charset=utf-8
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 4156
Connection: close

<html>

<head>
<title>Códigos detectores y correctores de errores: Códigos de Redundancia Cíclica (CRC)</title>
<link rel="alternate" type="application/rss+xml" title="Últimos cambios en mi página web" href="/ultimos_cambios.xml">

<linkOLD rel="openid.server" href="http://server.myid.net/server" />
<linkOLD rel="openid.delegate" href="http://jcea.myid.net/" />
<metaOLD http-equiv="X-XRDS-Location" content="http://jcea.myid.net/xrds" />

<linkOLD rel="openid.server" href="http://www.myopenid.com/server" />       <!-- For delegating OpenID v1.x-->
<linkOLD rel="openid.delegate" href="http://jcea.myopenid.com/" />       <!-- For delegating OpenID v1.x-->
<linkOLD rel="openid2.local_id" href="http://jcea.myopenid.com" />
<linkOLD rel="openid2.provider" href="http://www.myopenid.com/server" />
<metaOULD http-equiv="X-XRDS-Location" content="http://www.myopenid.com/xrds?username=jcea.myopenid.com" />        <!-- For delegating OpenID v2.x-->

<link href="http://certifi.ca/_serve" rel="openid.server" />
<link href="http://certifi.ca/jcea" rel="openid.delegate" />
</head>

<body>

<!-- ESTO ES EL BANNER DE LA INTERNET DEFENSE LEAGUE -->
<script type="text/javascript">
    window._idl = {};
    _idl.variant = "banner";
    (function() {
        var idl = document.createElement('script');
        idl.type = 'text/javascript';
        idl.async = true;
        idl.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'members.internetdefenseleague.org/include/?url=' + (_idl.url || '') + '&campaign=' + (_idl.campaign || '') + '&variant=' + (_idl.variant || 'banner');
        document.getElementsByTagName('body')[0].appendChild(idl);
    })();
</script>

<table valign="top" align="center" border="0" width="100%">
<tr>
<td width="160" rowspan="2" align="center" valign="top"><a href="http://getfirefox.com/"
title="Get Firefox - Take Back the Web"><img
src="http://sfx-images.mozilla.org/affiliates/Buttons/firefox3/110x32_get_ffx.png"
width="110" height="32" border="0" alt="Get Firefox"></a>

<p/><a href="http://internetdefenseleague.org"><img src="http://internetdefenseleague.org/images/badges/final/side_bar_badge.png" alt="Member of The Internet Defense League" /></a>
</td>
<td align="center">
<!--<a href="http://swpat.ffii.org/index.es.html"><img src="http://proinnova.hispalinux.es/imagenes/banners/nopatentessw.png" border=0 alt="Di NO a las patentes de Software" title="Di NO a las patentes de Software"></a>-->
<!--<a href="http://stopsoftwarepatents.org/"><img src="http://stopsoftwarepatents.wdfiles.com/local--files/logo/logo2.png" border=0 alt="Di NO a las patentes de Software" title="Di NO a las patentes de Software"></a>-->
<a href="http://petition.stopsoftwarepatents.eu/551003580597/"><img src="http://petition.stopsoftwarepatents.eu/banner/551003580597/ssp-468-96.gif" alt="stopsoftwarepatents.eu petition banner" width="468" height="96" /></a>
</td>
<td align="center">
<a href="http://culturalibre.org/"><img src="http://www.republicainternet.com/img/manifiesto.gif" border=0 alt="Manifiesto por la liberación de la cultura" title="Manifiesto por la liberación de la cultura"></a>&nbsp;<br><a href="http://www.ciberpunk.info/no-a-la-traza-privada"><img src="http://www.ciberpunk.info/desvan/boton_traza_88x31.png" border=0 alt="No a la traza privada" title="No a la traza privada"></a>
</td>
<td width="125" align="center">
<a href="/ultimos_cambios.xml">
<img src="/feed-icon-28x28.png" border="0" alt="Últimos cambios" title="Últimos Cambios"></a>
<br><b><i>Últimos Cambios</i></b></td>
</tr>
<tr>
<td align="center">
<a href="http://rejectinspire.publicgeodata.org/"><img src="http://blog.pedrocustodio.com/wp-content/uploads/2006/03/publicgeodata.png" border=0 alt="Vote for Public Maps - Reject INSPIRE!" title="Vote for Public Maps - Reject INSPIRE!"></a>
</td>
<td align="center" colspan="2">
<a href="http://es.wikipedia.org/wiki/Geocaching"><img src="http://img.geocaching.com/stats/img.aspx?uid=6c9b2a99-0c9e-4324-9068-4e2e8921c511&txt=Estad%C3%ADsticas+de+Geocaching" border="0" alt="Geocaching" title="Geocaching"></a>
</td>
</tr>
<tr>
<td colspan="4" align="center">
<a href="https://twitter.com/jcea"><img src="http://blog.jcea.es/twitter.png" style="vertical-align:middle"/></a>
<font size=-1><i><a href="http://blog.jcea.es/">Blog personal: El hilo del laberinto</a></i></font>
</td></tr>
</table>




<h1 align=center>Códigos detectores y correctores de errores: Códigos de Redundancia Cíclica (CRC)</h1>
<p align=center> <i>Última Actualización:
30 de Agosto de 2003 - Sábado</i>

<p>Un código cíclico es aquel en el que cualquier rotación cíclica (lo que sale por
un lado, entra por el otro) de una palabra código produce otra palabra código válida.
Los códigos cíclicos son una familia de códigos bloque lineales que son especialmente
fáciles y eficientes de generar y verificar. 

<p>Tradicionalmente los códigos cíclicos se expresan como polinómios en cuerpo de Galois 
GF(q), típicamente GF(2). Suponiendo una palabra código
X[D]=(x<sub>n-1</sub>, ..., x<sub>0</sub>), también la podemos expresar como un
polinomio de grado "n-1". de la forma
X[D]=x<sub>n-1</sub>D<sup>n-1</sup>+ ... + x<sub>1</sub>D + x<sub>0</sub>.

<p>Si X[D] es una palabra código de un código cíclico, el resto de dividir D*X[D] entre
(D<sup>n</sup>-1) es otra palabra código. De hecho esta operación lo que produce es una
rotación cíclica del código.

<p>Dado un polinomio mónico (su coeficiente de mayor grado es 1) g[D] que es
una palabra código de menor grado (m) de un código cíclico (generador del código),
y un polinomio de información a[D] sobre GF(q), tenemos que a[D]*g[D] es una palabra código.

<p>g[D] y sus primeras (n-1-m) rotaciones cíclicas forman una base
del espacio vectorial que genera el código. Recordemos que el códgio tiene como parámetros
(n, k) y un polinomio generador de grado "m".

<p>El polinomio generador g[D] debe ser factor de (D<sup>n</sup>-1). Esto es necesario para
que se genere un código cíclico.

<p>Por lo tanto, cualquier código cíclico sobre un cuerpo de Galois de "q" elementos 
GF(q), con "k" dígitos de información y una longitud de bloque de "n", es generado
por un polinomio mónico de grado m = n-k sobre el cuerpo de Galois GF(q) y que divide
a (D<sup>n</sup>-1).

<p>Y a la inversa, cualquier polinómio mónico g[D] de grado m = n-k sobre un cuerpo
de Galois de "q" elementos GF(q) y que divida a D<sup>n</sup>-1, genera un código cíclico
con "k" dígitos de información y longitud de bloque "n".

<p>Si se aplican directamente las ecuaciones C[D]=X[D]*g[D], no se obtiene un código
sistemático. Para conseguirlo, desplazamos la información (n-k) lugares a la derecha y
añadimos la redundancia al final. La redundancia es el resto de dividir
D<sup>n-k</sup>X[D] entre g[D]. Es decir, lo que se transmite tiene la forma
C[D]=(D<sup>n-k</sup>X[D]-R[D]).

<p>Para verificar el código, tendremos un polinomio comprobador h[D], que cumple
que g[D]*h[D]=D<sup>n</sup>-1, y calculamos F[D]=C[D]*h[D]. El síndrome son los componentes
de F[D] entre "k" y "n-1", inclusive. Si no hay errores, esos valores serán cero.

<p>Por supuesto, se puede ver que h[D] es, a su vez, un polinomio generador (también es
mónico) de código cíclico, y que su polinomio comprobador es g[D].

<p>C[D] es una palabra código si y solo si es divisible de forma exacta por g[D]. Por lo
tanto, para detectar un error es preciso que dicho error e[D] <b>NO</b> sea divisible por
g[D], por ser un código lineal.

<p>Puede verse fácilmente que <b>siempre</b> se detectan errores simples.

<p>Si el polinomio generador g[D] es de la forma (1+D<sup>h</sup>)m[D], tendrá un número
par de términos distintos de cero y se puede comprobar fácilmente que detecta cualquier
número impar de errores.

<p>Se define el polinomio p[D] de grado "r" como <b>"primitivo"</b> si es irreducible,
es un factor de (D<sup>(2<sup>r</sup>-1)</sup>-1) y no es factor de ningún otro polinomio
(D<sup>N</sup>-1) para N < 2<sup>r</sup>-1. Si g[D]= p[D]*a[D], detectamos todos los errores
dobles.

<p>Una ráfaga de errores de longitud B es un grupo de B dígitos en los que el primero y el
último es uno. Los del medio pueden serlo o no. Un código cíclico detecta todos los errores
de ráfaga de longitud menor o igual a n-k. Si la ráfaga tiene tamaño n-k+1, la probabilidad
de que el error nos pase desapercibido es de 2<sup>-(n-k-1)</sup>. Para ráfagas de mayor
tamaño, la probabilidad de que el error nos pase desapercibido es de 2<sup>-(n-k)</sup>,
suponiendo que los errores ocurran al azar.

Supongamos g[D]=(1+D)*p[D], con p[D] polinomio primitivo de grado "r". Bajo estas
circunstancias, g[D] es un polinomio generador con parámetros
(2<sup>r</sup>-1, 2<sup>r</sup>-r-2) y que cumple las siguientes propiedades:

<ul>
<p><li>Detecta todos los errores simples.

<p><li>Detecta cualquier número de errores impares.

<p><li>Detecta todos los errores dobles.

<p><li>Detecta todas las ráfagas de error de longitud <=r+1

<p><li>Detecta todas las ráfagas de error de longitud r+2 con probabilidad 1-2<sup>-r</sup>.

<p><li>Detecta todas las ráfagas de error de longitud r+3 o superior
con probabilidad 1-2<sup>-r-1</sup>.

</ul>

<p>Por ejemplo, el CCITT V.41 tiene un polinomio generador
D<sup>16</sup>+D<sup>12</sup>+D<sup>5</sup>+1, que es
(D+1)*(D<sup>15</sup>+D<sup>14</sup>+D<sup>13</sup>+D<sup>12</sup>+D<sup>4</sup>+D<sup>3</sup>+D<sup>2</sup>+D+1,
y genera un código (32767, 32751).

<p>Los polinomios generadores están muy vinculados, por lo tanto, a polinomios
primitivos, y éstos a <a href="lfsr.htm">Linear Feedback Shift Registers</a>.

<p><hr>
<h2>Historia</h2>

<ul>
<p><li>30/Ago/03: Primera versión de este documento.
</ul>

<p>
<hr>
<ul>
<li><a href="codedefs.htm">
<b>Definiciones de códigos</b></a>
<li><a href="lfsr.htm">
<b>Linear Feedback Shift Registers</b></a>

<p>
<li><a href="math.htm">
<b>Artículos sobre Matemáticas y Teoría de la Información</b></a>
<li><a href="index.htm">
<b>Artículos</b></a>
<li><a href="../index.htm">
<b>La Página de Jesús Cea Avión</b></a>
</ul>

<hr>
<p align="center"><font size=-1>Donación BitCoin: 19niBN42ac2pqDQFx6GJZxry2JQSFvwAfS</font>
<br><img src="/bitcoin_qr.png" width="128" height="128" /></p>

<p><a href="https://affiliates.mozilla.org/link/banner/42333"><img src="https://affiliates.mozilla.org/media/uploads/banners/db77c71cfb37d0d70d1cb90aaf411db07ad2d20f.png" alt="Actualizar" align="right" border="0"/></a>

<a href="http://www.python.org/" title="Python">
<img src="http://www.python.org/images/python-logo.gif"
width="211" height="71" border=0 alt="Python" align="right"></a>

<a href="http://www.zope.org/" title="Zope">
<img src="/zpowered.jpg"
width="115" height="50" border=0 alt="Zope" align="right"></a>

<i><a href="mailto:jcea@jcea.es">&#169;2003
jcea@jcea.es</a></i>

</body>
</html>

