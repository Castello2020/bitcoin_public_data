http://rosettacode.org/wiki/Bitcoin/address_validation
HTTP/1.1 200 OK
Server: cloudflare-nginx
Date: Wed, 23 Jul 2014 22:24:51 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
Set-Cookie: __cfduid=d8c6d8aaa2bb505519f26cded687d39f61406154291137; expires=Mon, 23-Dec-2019 23:50:00 GMT; path=/; domain=.rosettacode.org; HttpOnly
X-Powered-By: PHP/5.3.3-7+squeeze19
X-Content-Type-Options: nosniff
Content-Language: en
Vary: Accept-Encoding,Cookie
Cache-Control: s-maxage=86400, must-revalidate, max-age=0
Last-Modified: Tue, 13 May 2014 13:04:33 GMT
Age: 54112
X-Cache: HIT from prgmr2.rosettacode.org
X-Cache-Lookup: HIT from prgmr2.rosettacode.org:80
Via: 1.0 prgmr2.rosettacode.org (squid/3.1.6)
CF-RAY: 14eb4a5f9df40874-IAD
Content-Encoding: gzip

<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Bitcoin/address validation - Rosetta Code</title>
<meta charset="UTF-8"/>
<meta name="generator" content="MediaWiki 1.20.3"/>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dokv=88e434a982/"},atok:"2c403471878071b542828a365001899e",petok:"cb9fc0d4bec8c3e0925f9c50faa13b534db179da-1406154291-1800",zone:"rosettacode.org",rocket:"0",apps:{"ga_key":{"ua":"UA-1219419-1","ga_bs":"2"}}}];!function(a,b){a=document.createElement("script"),b=document.getElementsByTagName("script")[0],a.async=!0,a.src="//ajax.cloudflare.com/cdn-cgi/nexp/dokv=97fb4d042e/cloudflare.min.js",b.parentNode.insertBefore(a,b)}()}}catch(e){};
//]]>
</script>
<link rel="alternate" type="application/x-wiki" title="Edit" href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit"/>
<link rel="edit" title="Edit" href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/mw/opensearch_desc.php" title="Rosetta Code (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="http://rosettacode.org/mw/api.php?action=rsd"/>
<link rel="copyright" href="http://www.gnu.org/licenses/fdl-1.2.html"/>
<link rel="alternate" type="application/atom+xml" title="Rosetta Code Atom feed" href="/mw/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="stylesheet" href="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*"/>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*"/>
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style>
<script src="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Bitcoin/address_validation","wgTitle":"Bitcoin/address validation","wgCurRevisionId":182264,"wgArticleId":12631,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Programming Tasks","Solutions by Programming Task","Ada","C","D","Erlang","Go","Perl","Perl 6","PicoLisp","Python","Racket","Tcl","Tcllib","UNIX Shell","Brlcad/Omit","GUISS/Omit","Checksums"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Bitcoin/address_validation","wgRestrictionEdit":[],"wgRestrictionMove":[],"sfgRemoveText":"Remove","sfgAutocompleteOnAllChars":false,"sfgAutocompleteValues":{},"sfgShowOnSelect":{},"sfgFormErrorsHeader":"There were errors with your form input; see below","sfgBlankErrorStr":"cannot be blank","sfgBadURLErrorStr":"must have the correct URL format, starting with \"http\"","sfgBadEmailErrorStr":"must have a valid email address format","sfgBadNumberErrorStr":"must be a valid number","sfgBadDateErrorStr":"must be a valid date","sfgAnonEditWarning":"Warning: You are not logged in. Your IP address will be recorded in this page\'s edit history."});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,
"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs102":false,"searchNs103":false,"searchNs106":false,"searchNs107":false,"searchNs108":false,"searchNs109":false,"searchNs110":false,"searchNs111":false,"searchNs112":false,"searchNs113":false,"searchNs114":false,"searchNs115":false,"searchNs170":false,"searchNs171":false,"searchNs274":false,"searchNs275":false});;},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","watchToken":false});;},{},{});
/* cache key: rosettacode:resourceloader:filter:minify-js:7:2ce58c77cc7227488637c1087f1776c6 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</script>
<link rel="alternate" type="application/rdf+xml" title="Bitcoin/address validation" href="/mw/index.php?title=Special:ExportRDF/Bitcoin/address_validation&amp;xmlmime=rdf"/>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/mw/skins/vector/csshover.min.htc")}</style><![endif]--><script type="text/javascript">
/* <![CDATA[ */
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-1219419-1']);
_gaq.push(['_trackPageview']);

(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

(function(b){(function(a){"__CF"in b&&"DJS"in b.__CF?b.__CF.DJS.push(a):"addEventListener"in b?b.addEventListener("load",a,!1):b.attachEvent("onload",a)})(function(){"FB"in b&&"Event"in FB&&"subscribe"in FB.Event&&(FB.Event.subscribe("edge.create",function(a){_gaq.push(["_trackSocial","facebook","like",a])}),FB.Event.subscribe("edge.remove",function(a){_gaq.push(["_trackSocial","facebook","unlike",a])}),FB.Event.subscribe("message.send",function(a){_gaq.push(["_trackSocial","facebook","send",a])}));"twttr"in b&&"events"in twttr&&"bind"in twttr.events&&twttr.events.bind("tweet",function(a){if(a){var b;if(a.target&&a.target.nodeName=="IFRAME")a:{if(a=a.target.src){a=a.split("#")[0].match(/[^?=&]+=([^&]*)?/g);b=0;for(var c;c=a[b];++b)if(c.indexOf("url")===0){b=unescape(c.split("=")[1]);break a}}b=void 0}_gaq.push(["_trackSocial","twitter","tweet",b])}})})})(window);
/* ]]> */
</script>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Bitcoin_address_validation skin-vector action-view vector-animateLayout">
<div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
 
<div id="content" class="mw-body">
<a id="top"></a>
<div id="mw-js-message" style="display:none;"></div>
 
<h1 id="firstHeading" class="firstHeading"><span dir="auto">Bitcoin/address validation</span></h1>
 
 
<div id="bodyContent">
 
<div id="siteSub">From Rosetta Code</div>
 
 
<div id="contentSub"></div>
 
 
<div id="jump-to-nav" class="mw-jump">
Jump to: <a href="#mw-head">navigation</a>, <a href="#p-search">search</a>
</div>
 
 
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="infobox" style="width: 2in"><div class="floatleft"><a href="/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task"><img alt="Task" src="/mw/images/b/ba/Rcode-button-task-crushed.png" width="64" height="64"/></a></div><b>Bitcoin/address validation</b><br/>
You are encouraged to <a href="/wiki/Rosetta_Code:Solve_a_Task" title="Rosetta Code:Solve a Task">solve this task</a> according to the task description, using any language you may know.</div>
<p>Write a program that takes a <a href="http://en.wikipedia.org/wiki/bitcoin" class="extiw" title="wp:bitcoin">bitcoin address</a> as argument, and checks whether or not this address is valid.
</p><p>A bitcoin address uses a base58 encoding, which uses an alphabet of the characters 0 .. 9, A ..Z, a .. z, but without the four characters 0, O, I and l.
</p><p>With this encoding, a bitcoin address encodes 25 bytes:
</p>
<ul><li> the first byte is the version number, which will be zero for this task&#160;;
</li><li> the next twenty bytes are a <a href="/wiki/RIPEMD-160" title="RIPEMD-160">RIPEMD-160</a> digest, but you don't have to know that for this task: you can consider them a pure arbitrary data&#160;;
</li><li> the last four bytes are a checksum check. They are the first four bytes of a double <a href="/wiki/SHA-256" title="SHA-256">SHA-256</a> digest of the previous 21 bytes.
</li></ul>
<p>To check the bitcoin address, you must read the first twenty-one bytes, compute the checksum, and check that it corresponds to the last four bytes.
</p><p>The program can either return a boolean value or throw an exception when not valid.
</p><p>You can use a digest library for <a href="/wiki/SHA-256" title="SHA-256">SHA-256</a>.
</p><p>Here is an example of a bitcoin address:
</p><p>1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i
</p><p>It does not belong to anyone. It is part of the test suite of the bitcoin software. You can change a few characters in this string and check that it will fail the test.
</p><p><i>extra credit</i>: allow your code to deal with <a rel="nofollow" class="external text" href="http://bitcoin.stackexchange.com/questions/3059/what-is-a-compressed-bitcoin-key">compressed keys</a>
</p><p><br/>
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Ada"><span class="tocnumber">1</span> <span class="toctext">Ada</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#C"><span class="tocnumber">2</span> <span class="toctext">C</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#D"><span class="tocnumber">3</span> <span class="toctext">D</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Erlang"><span class="tocnumber">4</span> <span class="toctext">Erlang</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Go"><span class="tocnumber">5</span> <span class="toctext">Go</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Perl"><span class="tocnumber">6</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Perl_6"><span class="tocnumber">7</span> <span class="toctext">Perl 6</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#PicoLisp"><span class="tocnumber">8</span> <span class="toctext">PicoLisp</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#Python"><span class="tocnumber">9</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Racket"><span class="tocnumber">10</span> <span class="toctext">Racket</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="#Tcl"><span class="tocnumber">11</span> <span class="toctext">Tcl</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="#UNIX_Shell"><span class="tocnumber">12</span> <span class="toctext">UNIX Shell</span></a></li>
</ul>
</td></tr></table>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=1" title="Edit section: Ada">edit</a>]</span> <span class="mw-headline" id="Ada"><a href="/wiki/Category:Ada" title="Category:Ada">Ada</a></span></h2>
<pre class="ada highlighted_source"><span class="kw3">with</span> Ada.<span class="me1">Exceptions</span>, Interfaces;<br/><span class="kw3">with</span> Ada.<span class="me1">Streams</span>;<br/><span class="kw3">use</span> Ada.<span class="me1">Exceptions</span>, Interfaces;<br/><span class="kw3">use</span> Ada.<span class="me1">Streams</span>;<br/>&#160;<br/><span class="kw3">package</span> Bitcoin <span class="kw1">is</span><br/>    <span class="kw3">subtype</span> BT_Raw_Addr <span class="kw1">is</span> Stream_Element_Array<span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">25</span><span class="br0">&#41;</span>;<br/>    <span class="kw3">subtype</span> BT_Checksum <span class="kw1">is</span> Stream_Element_Array<span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">4</span><span class="br0">&#41;</span>;<br/>    <span class="kw3">subtype</span> BT_Addr <span class="kw1">is</span> String<span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">34</span><span class="br0">&#41;</span>;<br/>    <span class="kw3">subtype</span> Sha256String <span class="kw1">is</span> String<span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">64</span><span class="br0">&#41;</span>;<br/>    Invalid_Address_Error&#160;: <span class="kw1">Exception</span>;<br/>&#160;<br/>    <span class="kw3">function</span> Double_Sha256<span class="br0">&#40;</span>S&#160;: Stream_Element_Array<span class="br0">&#41;</span> <span class="kw1">return</span> BT_Checksum;<br/>    <span class="kw3">function</span> Is_Valid<span class="br0">&#40;</span>A&#160;: BT_Raw_Addr<span class="br0">&#41;</span> <span class="kw1">return</span> Boolean;<br/>    <span class="kw3">procedure</span> Base58_Decode<span class="br0">&#40;</span>S&#160;: BT_Addr; A&#160;: <span class="kw3">out</span> BT_Raw_Addr<span class="br0">&#41;</span>&#160;;<br/><span class="kw3">private</span><br/>    Base58&#160;: <span class="kw3">constant</span> String&#160;:= <span class="st0">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>;<br/>    <span class="kw3">function</span> Hex_Val <span class="br0">&#40;</span>C, C2&#160;: Character<span class="br0">&#41;</span> <span class="kw1">return</span> Stream_Element;<br/><span class="kw1">end</span> Bitcoin;<br/>&#160;<br/>&#160;<br/><span class="kw3">with</span> GNAT.<span class="me1">SHA256</span>, Ada.<span class="me1">Strings</span>.<span class="me1">Fixed</span>;<br/><span class="kw3">use</span>  GNAT.<span class="me1">SHA256</span>, Ada.<span class="me1">Strings</span>.<span class="me1">Fixed</span>;<br/>&#160;<br/><span class="kw3">package</span> <span class="kw3">body</span> Bitcoin <span class="kw1">is</span><br/>&#160;<br/><span class="kw3">function</span> Hex_Val <span class="br0">&#40;</span>C, C2&#160;: Character<span class="br0">&#41;</span> <span class="kw1">return</span> Stream_Element <span class="kw1">is</span><br/>    <span class="kw3">subtype</span> Nibble <span class="kw1">is</span> Integer <span class="kw3">range</span> <span class="nu0">0</span>..<span class="nu0">15</span>;<br/>    HEX&#160;: <span class="kw3">array</span> <span class="br0">&#40;</span><span class="nu0">0</span>..<span class="nu0">255</span><span class="br0">&#41;</span> <span class="kw3">of</span> Nibble&#160;:= <span class="br0">&#40;</span><br/>          <span class="nu0">48</span>=&gt;<span class="nu0">0</span>, <span class="nu0">49</span>=&gt;<span class="nu0">1</span>, <span class="nu0">50</span>=&gt;<span class="nu0">2</span>, <span class="nu0">51</span>=&gt;<span class="nu0">3</span>, <span class="nu0">52</span>=&gt;<span class="nu0">4</span>, <span class="nu0">53</span>=&gt;<span class="nu0">5</span>, <span class="nu0">54</span>=&gt;<span class="nu0">6</span>, <span class="nu0">55</span>=&gt;<span class="nu0">7</span>, <span class="nu0">56</span>=&gt;<span class="nu0">8</span>, <span class="nu0">57</span>=&gt;<span class="nu0">9</span><br/>        , <span class="nu0">65</span>=&gt;<span class="nu0">10</span>, <span class="nu0">66</span>=&gt;<span class="nu0">11</span>, <span class="nu0">67</span>=&gt;<span class="nu0">12</span>, <span class="nu0">68</span> =&gt;<span class="nu0">13</span>, <span class="nu0">69</span> =&gt;<span class="nu0">14</span>, <span class="nu0">70</span> =&gt;<span class="nu0">15</span><br/>        , <span class="nu0">97</span>=&gt;<span class="nu0">10</span>, <span class="nu0">98</span>=&gt;<span class="nu0">11</span>, <span class="nu0">99</span>=&gt;<span class="nu0">12</span>, <span class="nu0">100</span>=&gt;<span class="nu0">13</span>, <span class="nu0">101</span>=&gt;<span class="nu0">14</span>, <span class="nu0">102</span>=&gt;<span class="nu0">15</span><br/>        , <span class="kw3">Others</span>=&gt;<span class="nu0">0</span><br/>    <span class="br0">&#41;</span>;<br/><span class="kw1">begin</span><br/>    <span class="kw1">return</span> Stream_Element<span class="br0">&#40;</span>HEX<span class="br0">&#40;</span>Character'Pos<span class="br0">&#40;</span>C<span class="br0">&#41;</span><span class="br0">&#41;</span> * <span class="nu0">16</span> + HEX<span class="br0">&#40;</span>Character'Pos<span class="br0">&#40;</span>C2<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/><span class="kw1">end</span> Hex_Val;<br/>&#160;<br/><span class="kw3">function</span> Double_Sha256<span class="br0">&#40;</span>S&#160;: Stream_Element_Array<span class="br0">&#41;</span> <span class="kw1">return</span> BT_Checksum <span class="kw1">is</span><br/>    Ctx &#160;: Context&#160;:= Initial_Context;<br/>    D&#160;: Message_Digest;<br/>    S2&#160;: Stream_Element_Array<span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">32</span><span class="br0">&#41;</span>;<br/>    Ctx2&#160;: Context&#160;:= Initial_Context;<br/>    C&#160;: BT_Checksum;<br/><span class="kw1">begin</span><br/>    Update<span class="br0">&#40;</span>Ctx, S<span class="br0">&#41;</span>;<br/>    D&#160;:= Digest<span class="br0">&#40;</span>Ctx<span class="br0">&#41;</span>;<br/>    <span class="kw1">for</span> I <span class="kw3">in</span> S2'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>        S2<span class="br0">&#40;</span>I<span class="br0">&#41;</span>&#160;:= Hex_Val<span class="br0">&#40;</span>D<span class="br0">&#40;</span>Integer<span class="br0">&#40;</span>I<span class="br0">&#41;</span>*<span class="nu0">2</span>-<span class="nu0">1</span><span class="br0">&#41;</span>, D<span class="br0">&#40;</span>Integer<span class="br0">&#40;</span>I<span class="br0">&#41;</span>*<span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>    <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>    Update<span class="br0">&#40;</span>Ctx2, S2<span class="br0">&#41;</span>;<br/>    D&#160;:= Digest<span class="br0">&#40;</span>Ctx2<span class="br0">&#41;</span>;<br/>    <span class="kw1">for</span> I <span class="kw3">in</span> C'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>        C<span class="br0">&#40;</span>I<span class="br0">&#41;</span>&#160;:= Hex_Val<span class="br0">&#40;</span>D<span class="br0">&#40;</span>Integer<span class="br0">&#40;</span>I<span class="br0">&#41;</span>*<span class="nu0">2</span>-<span class="nu0">1</span><span class="br0">&#41;</span>, D<span class="br0">&#40;</span>Integer<span class="br0">&#40;</span>I<span class="br0">&#41;</span>*<span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>    <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>    <span class="kw1">return</span> C;<br/>&#160;<br/><span class="kw1">end</span> Double_Sha256;<br/>&#160;<br/>&#160;<br/><span class="co1">--------------------------------------------------------------------------------</span><br/><span class="co1">-- Summary of Base58:                                                         --</span><br/><span class="co1">-- We decode S into a 200 bit unsigned integer.                               --</span><br/><span class="co1">-- We could use a BigNum library, but choose to go without.                   --</span><br/><span class="co1">--------------------------------------------------------------------------------</span><br/><span class="kw3">procedure</span> Base58_Decode<span class="br0">&#40;</span>S&#160;: BT_Addr; A&#160;: <span class="kw3">out</span> BT_Raw_Addr<span class="br0">&#41;</span> <span class="kw1">is</span><br/><span class="kw1">begin</span><br/>    A&#160;:= <span class="br0">&#40;</span><span class="kw3">Others</span> =&gt; <span class="nu0">0</span><span class="br0">&#41;</span>;<br/>    <span class="kw1">for</span> I <span class="kw3">in</span> S'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>        <span class="kw1">declare</span><br/>            P&#160;: Natural&#160;:= Index<span class="br0">&#40;</span>Base58, String<span class="br0">&#40;</span>S<span class="br0">&#40;</span>I..<span class="me1">I</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>            C&#160;: Natural;<br/>        <span class="kw1">begin</span><br/>            <span class="kw1">if</span> P = <span class="nu0">0</span> <span class="kw1">then</span><br/>                <span class="kw3">raise</span> Invalid_Address_Error;<br/>            <span class="kw1">end</span> <span class="kw1">if</span>;<br/>            C&#160;:= P - <span class="nu0">1</span>;<br/>            <span class="kw1">for</span> J <span class="kw3">in</span> <span class="kw3">reverse</span> A'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>                C   &#160;:= C + Natural<span class="br0">&#40;</span>A<span class="br0">&#40;</span>J<span class="br0">&#41;</span><span class="br0">&#41;</span> * <span class="nu0">58</span>;<br/>                A<span class="br0">&#40;</span>J<span class="br0">&#41;</span>&#160;:= Stream_Element<span class="br0">&#40;</span>Unsigned_32<span class="br0">&#40;</span>C<span class="br0">&#41;</span> <span class="kw2">and</span> <span class="nu0">255</span><span class="br0">&#41;</span>;         <span class="co1">-- 0x00FF</span><br/>                C   &#160;:= Natural<span class="br0">&#40;</span>Shift_Right<span class="br0">&#40;</span>Unsigned_32<span class="br0">&#40;</span>C<span class="br0">&#41;</span>,<span class="nu0">8</span><span class="br0">&#41;</span> <span class="kw2">and</span> <span class="nu0">255</span><span class="br0">&#41;</span>; <span class="co1">-- 0xFF00</span><br/>            <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>            <span class="kw1">if</span> C /= <span class="nu0">0</span> <span class="kw1">then</span><br/>                <span class="kw3">raise</span> Invalid_Address_Error;<br/>            <span class="kw1">end</span> <span class="kw1">if</span>;<br/>        <span class="kw1">end</span>;<br/>    <span class="kw1">end</span> <span class="kw1">loop</span>;<br/><span class="kw1">end</span> Base58_Decode;<br/>&#160;<br/>&#160;<br/><span class="kw3">function</span> Is_Valid<span class="br0">&#40;</span>A&#160;: BT_Raw_Addr<span class="br0">&#41;</span> <span class="kw1">return</span> Boolean <span class="kw1">is</span><br/><span class="kw1">begin</span><br/>    <span class="kw1">return</span> A<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> = <span class="nu0">0</span> <span class="kw2">and</span> A<span class="br0">&#40;</span><span class="nu0">22</span>..<span class="nu0">25</span><span class="br0">&#41;</span> = Double_Sha256<span class="br0">&#40;</span>A<span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">21</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/><span class="kw1">end</span> Is_Valid;<br/>&#160;<br/>&#160;<br/><span class="kw1">end</span> Bitcoin;<br/>&#160;<br/><span class="kw3">with</span> Ada.<span class="me1">Text_IO</span>, Bitcoin;<br/><span class="kw3">use</span> Ada.<span class="me1">Text_IO</span>, Bitcoin;<br/>&#160;<br/><span class="kw3">procedure</span> Bitcoin_Addr_Validate <span class="kw1">is</span><br/><span class="kw1">begin</span><br/>    <span class="kw1">declare</span><br/>        BTs&#160;: <span class="kw3">array</span> <span class="br0">&#40;</span>positive <span class="kw3">range</span> &lt;&gt;<span class="br0">&#41;</span> <span class="kw3">of</span> BT_Addr&#160;:= <span class="br0">&#40;</span><br/>              <span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;</span>  <span class="co1">-- VALID</span><br/>            , <span class="st0">&quot;1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9&quot;</span>  <span class="co1">-- VALID</span><br/>            , <span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62X&quot;</span>  <span class="co1">-- checksum changed, original data.</span><br/>            , <span class="st0">&quot;1ANNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;</span>  <span class="co1">-- data changed, original checksum.</span><br/>            , <span class="st0">&quot;1A Na15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;</span>  <span class="co1">-- invalid chars</span><br/>        <span class="br0">&#41;</span>;<br/>    <span class="kw1">begin</span><br/>        <span class="kw1">for</span> I <span class="kw3">in</span> Bts'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>            <span class="kw1">declare</span><br/>                A&#160;: BT_Raw_Addr;<br/>                Valid&#160;: Boolean;<br/>            <span class="kw1">begin</span><br/>                Put<span class="br0">&#40;</span>BTs<span class="br0">&#40;</span>I<span class="br0">&#41;</span> &amp; <span class="st0">&quot; validity: &quot;</span><span class="br0">&#41;</span>;<br/>                Base58_Decode<span class="br0">&#40;</span>BTs<span class="br0">&#40;</span>I<span class="br0">&#41;</span>, A<span class="br0">&#41;</span>;<br/>                Valid&#160;:= Is_Valid<span class="br0">&#40;</span>A<span class="br0">&#41;</span>;<br/>                Put_Line<span class="br0">&#40;</span>Boolean'Image<span class="br0">&#40;</span>Valid<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>            <span class="kw1">exception</span><br/>                <span class="kw3">when</span> E&#160;: Invalid_Address_Error  =&gt;<br/>                    Put_Line <span class="br0">&#40;</span><span class="st0">&quot;*** Error: Invalid BT address.&quot;</span><span class="br0">&#41;</span>;<br/>            <span class="kw1">end</span>;<br/>        <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>    <span class="kw1">end</span>;<br/><span class="kw1">end</span> Bitcoin_Addr_Validate;<br/>&#160;</pre>
<p>Output:
</p>
<pre>1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i validity: TRUE
1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9 validity: TRUE
1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62X validity: FALSE
1ANNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i validity: FALSE
1A Na15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i validity: *** Error: Invalid BT address.
</pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=2" title="Edit section: C">edit</a>]</span> <span class="mw-headline" id="C"><a href="/wiki/Category:C" title="Category:C">C</a></span></h2>
<pre class="c highlighted_source"><span class="co2">#include &lt;stdio.h&gt;</span><br/><span class="co2">#include &lt;string.h&gt;</span><br/><span class="co2">#include &lt;openssl/sha.h&gt;</span><br/>&#160;<br/><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>coin_err<span class="sy0">;</span><br/><span class="co2">#define bail(s) { coin_err = s; return 0; }</span><br/>&#160;<br/><span class="kw4">int</span> unbase58<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>s<span class="sy0">,</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>out<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>	<span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>tmpl <span class="sy0">=</span> <span class="st0">&quot;123456789&quot;</span><br/>		<span class="st0">&quot;ABCDEFGHJKLMNPQRSTUVWXYZ&quot;</span><br/>		<span class="st0">&quot;abcdefghijkmnopqrstuvwxyz&quot;</span><span class="sy0">;</span><br/>	<span class="kw4">int</span> i<span class="sy0">,</span> j<span class="sy0">,</span> c<span class="sy0">;</span><br/>	<span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>p<span class="sy0">;</span><br/>&#160;<br/>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/memset.html"><span class="kw3">memset</span></a><span class="br0">&#40;</span>out<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">25</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="br0">&#40;</span>p <span class="sy0">=</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html"><span class="kw3">strchr</span></a><span class="br0">&#40;</span>tmpl<span class="sy0">,</span> s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>			bail<span class="br0">&#40;</span><span class="st0">&quot;bad char&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>		c <span class="sy0">=</span> p <span class="sy0">-</span> tmpl<span class="sy0">;</span><br/>		<span class="kw1">for</span> <span class="br0">&#40;</span>j <span class="sy0">=</span> <span class="nu0">25</span><span class="sy0">;</span> j<span class="sy0">--;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>			c <span class="sy0">+=</span> <span class="nu0">58</span> <span class="sy0">*</span> out<span class="br0">&#91;</span>j<span class="br0">&#93;</span><span class="sy0">;</span><br/>			out<span class="br0">&#91;</span>j<span class="br0">&#93;</span> <span class="sy0">=</span> c <span class="sy0">%</span> <span class="nu0">256</span><span class="sy0">;</span><br/>			c <span class="sy0">/=</span> <span class="nu0">256</span><span class="sy0">;</span><br/>		<span class="br0">&#125;</span><br/>&#160;<br/>		<span class="kw1">if</span> <span class="br0">&#40;</span>c<span class="br0">&#41;</span> bail<span class="br0">&#40;</span><span class="st0">&quot;address too long&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>&#160;<br/>	<span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw4">int</span> valid<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>s<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>	<span class="kw4">unsigned</span> <span class="kw4">char</span> dec<span class="br0">&#91;</span><span class="nu0">32</span><span class="br0">&#93;</span><span class="sy0">,</span> d1<span class="br0">&#91;</span>SHA256_DIGEST_LENGTH<span class="br0">&#93;</span><span class="sy0">,</span> d2<span class="br0">&#91;</span>SHA256_DIGEST_LENGTH<span class="br0">&#93;</span><span class="sy0">;</span><br/>&#160;<br/>	coin_err <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>unbase58<span class="br0">&#40;</span>s<span class="sy0">,</span> dec<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br/>&#160;<br/>	SHA256<span class="br0">&#40;</span>SHA256<span class="br0">&#40;</span>dec<span class="sy0">,</span> <span class="nu0">21</span><span class="sy0">,</span> d1<span class="br0">&#41;</span><span class="sy0">,</span> SHA256_DIGEST_LENGTH<span class="sy0">,</span> d2<span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>	<span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/memcmp.html"><span class="kw3">memcmp</span></a><span class="br0">&#40;</span>dec <span class="sy0">+</span> <span class="nu0">21</span><span class="sy0">,</span> d2<span class="sy0">,</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>		bail<span class="br0">&#40;</span><span class="st0">&quot;bad digest&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>	<span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw4">int</span> main <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>	<span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>s<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><br/>		<span class="st0">&quot;1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9&quot;</span><span class="sy0">,</span><br/>		<span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;</span><span class="sy0">,</span><br/>		<span class="st0">&quot;1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nJ9&quot;</span><span class="sy0">,</span><br/>		<span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62I&quot;</span><span class="sy0">,</span><br/>		<span class="nu0">0</span> <span class="br0">&#125;</span><span class="sy0">;</span><br/>	<span class="kw4">int</span> i<span class="sy0">;</span><br/>	<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		<span class="kw4">int</span> status <span class="sy0">=</span> valid<span class="br0">&#40;</span>s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%s:&#160;%s<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">,</span> status <span class="sy0">?</span> <span class="st0">&quot;Ok&quot;</span> <span class="sy0">:</span> coin_err<span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>&#160;<br/>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=3" title="Edit section: D">edit</a>]</span> <span class="mw-headline" id="D"><a href="/wiki/Category:D" title="Category:D">D</a></span></h2>
<p>This requires the D module from the SHA-256 Task.
</p>
<div class="examplemeta translation"><b>Translation of</b>: <a href="/wiki/Bitcoin/address_validation#Go" title="Bitcoin/address validation">Go</a></div>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">algorithm</span><span class="sy0">,</span> std.<span class="me1">array</span><span class="sy0">,</span> std.<span class="kw4">string</span><span class="sy0">,</span> sha_256<span class="sy0">;</span><br/>&#160;<br/><span class="kw4">struct</span> A25 <span class="br0">&#123;</span><br/>    <span class="co1">// Type for a 25 ubyte (not base58 encoded) bitcoin address.</span><br/>    <span class="kw4">ubyte</span><span class="br0">&#91;</span><span class="nu0">25</span><span class="br0">&#93;</span> enc<span class="sy0">;</span><br/>&#160;<br/>    <span class="kw4">ubyte</span> bitcoinVersion<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> <span class="br0">&#123;</span><br/>        <span class="kw1">return</span> enc<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/>&#160;<br/>    <span class="kw4">ubyte</span><span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span> embeddedChecksum<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> <span class="br0">&#123;</span><br/>        <span class="kw1">return</span> enc<span class="br0">&#91;</span>$ <span class="sy0">-</span> <span class="nu0">4</span> <span class="sy0">..</span> $<span class="br0">&#93;</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/>&#160;<br/>    <span class="co3">/** Computes a double sha256 hash of the first 21 bytes of<br/>    the address. Returns the full 32 ubyte sha256 hash. */</span><br/>    <span class="kw4">ubyte</span><span class="br0">&#91;</span><span class="nu0">32</span><span class="br0">&#93;</span> doubleSHA256<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> <span class="br0">&#123;</span><br/>        <span class="kw1">return</span> SHA256.<span class="me1">digest</span><span class="br0">&#40;</span>SHA256.<span class="me1">digest</span><span class="br0">&#40;</span>enc<span class="br0">&#91;</span><span class="nu0">0</span> <span class="sy0">..</span> <span class="nu0">21</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/>&#160;<br/>    <span class="co3">/** Returns a four ubyte checksum computed from the first 21<br/>    bytes of the address. */</span><br/>    <span class="kw4">ubyte</span><span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span> computeChecksum<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> <span class="br0">&#123;</span><br/>        <span class="kw1">return</span> doubleSHA256<span class="br0">&#91;</span><span class="nu0">0</span> <span class="sy0">..</span> <span class="nu0">4</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/>&#160;<br/>    <span class="co3">/** Takes a base58 encoded address and decodes it into the<br/>    receiver. Errors are returned if the argument is not valid base58<br/>    or if the decoded value does not fit in the 25 ubyte address.<br/>    The address is not otherwise checked for validity. */</span><br/>    <span class="kw4">string</span> set58<span class="br0">&#40;</span><span class="kw2">in</span> <span class="kw4">ubyte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> s<span class="br0">&#41;</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> <span class="br0">&#123;</span><br/>        <span class="kw4">static</span> <span class="kw4">immutable</span> digits <span class="sy0">=</span><br/>        <span class="st0">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br/>        .<span class="me1">representation</span><span class="sy0">;</span><br/>        <span class="kw4">static</span> <span class="kw2">assert</span><span class="br0">&#40;</span>digits.<span class="me1">length</span> <span class="sy0">==</span> <span class="nu0">58</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>        <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw4">immutable</span> <span class="kw4">char</span> s1<span class="sy0">;</span> s<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>            <span class="kw4">immutable</span> c <span class="sy0">=</span> digits.<span class="me1">countUntil</span><span class="br0">&#40;</span>s1<span class="br0">&#41;</span><span class="sy0">;</span><br/>            <span class="kw1">if</span> <span class="br0">&#40;</span>c <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>                <span class="kw1">return</span> <span class="st0">&quot;found a bad char in the Bitcoin address.&quot;</span><span class="sy0">;</span><br/>&#160;<br/>            <span class="co1">// Currently the D type system can't see c as nonegative.</span><br/>            <span class="kw4">uint</span> uc <span class="sy0">=</span> <span class="br0">&#40;</span>c <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">?</span> <span class="nu0">0</span> <span class="sy0">:</span> c<span class="sy0">;</span><br/>&#160;<br/>            <span class="kw1">foreach_reverse</span> <span class="br0">&#40;</span><span class="kw2">ref</span> aj<span class="sy0">;</span> enc<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>                uc <span class="sy0">+=</span> digits.<span class="me1">length</span> <span class="sy0">*</span> aj<span class="sy0">;</span><br/>                aj <span class="sy0">=</span> uc <span class="sy0">%</span> <span class="nu0">256</span><span class="sy0">;</span><br/>                uc <span class="sy0">/=</span> <span class="nu0">256</span><span class="sy0">;</span><br/>            <span class="br0">&#125;</span><br/>            <span class="kw1">if</span> <span class="br0">&#40;</span>uc <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>                <span class="kw1">return</span> <span class="st0">&quot;too long Bitcoin address.&quot;</span><span class="sy0">;</span><br/>        <span class="br0">&#125;</span><br/>&#160;<br/>        <span class="kw1">return</span> <span class="kw2">null</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="co3">/** Validates a base58 encoded bitcoin address.  An address is valid<br/>if it can be decoded into a 25 ubyte address, the Version number is 0,<br/>and the checksum validates.  Return value ok will be true for valid<br/>addresses.  If ok is false, the address is invalid and the error value<br/>may indicate why. */</span><br/><span class="kw4">string</span> isValidA58<span class="br0">&#40;</span><span class="kw2">in</span> <span class="kw4">ubyte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> a58<span class="br0">&#41;</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> <span class="br0">&#123;</span><br/>    A25 a<span class="sy0">;</span><br/>    <span class="kw4">immutable</span> err <span class="sy0">=</span> a.<span class="me1">set58</span><span class="br0">&#40;</span>a58<span class="br0">&#41;</span><span class="sy0">;</span><br/>    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>err.<span class="me1">empty</span><span class="br0">&#41;</span><br/>        <span class="kw1">return</span> err<span class="sy0">;</span><br/>    <span class="kw1">if</span> <span class="br0">&#40;</span>a.<span class="me1">bitcoinVersion</span> <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>        <span class="kw1">return</span> <span class="st0">&quot;not Bitcoin version 0.&quot;</span><span class="sy0">;</span><br/>    <span class="kw1">return</span> <span class="br0">&#40;</span>a.<span class="me1">embeddedChecksum</span> <span class="sy0">==</span> a.<span class="me1">computeChecksum</span><span class="br0">&#41;</span> <span class="sy0">?</span> <span class="kw2">null</span> <span class="sy0">:</span><br/>           <span class="st0">&quot;checksums don't match.&quot;</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw4">void</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw4">immutable</span> tests <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;</span><span class="sy0">,</span><br/>                       <span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62j&quot;</span><span class="sy0">,</span><br/>                       <span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62!&quot;</span><span class="sy0">,</span><br/>                       <span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62iz&quot;</span><span class="sy0">,</span><br/>                       <span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62izz&quot;</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>&#160;<br/>    <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw4">immutable</span> test<span class="sy0">;</span> tests<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>        <span class="kw4">immutable</span> err <span class="sy0">=</span> test.<span class="me1">representation</span>.<span class="me1">isValidA58</span><span class="sy0">;</span><br/>        writefln<span class="br0">&#40;</span><span class="st_h">`&quot;%s&quot;:&#160;%s`</span><span class="sy0">,</span> test<span class="sy0">,</span> err.<span class="me1">empty</span> <span class="sy0">?</span> <span class="st0">&quot;OK.&quot;</span> <span class="sy0">:</span> err<span class="br0">&#41;</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/><span class="br0">&#125;</span></pre>
<div>
<dl><dt>Output:</div>
</dt></dl>
<pre>&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;: OK.
&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62j&quot;: checksums don't match.
&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62!&quot;: found a bad char in the Bitcoin address.
&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62iz&quot;: not Bitcoin version 0.
&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62izz&quot;: too long Bitcoin address.</pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=4" title="Edit section: Erlang">edit</a>]</span> <span class="mw-headline" id="Erlang"><a href="/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></span></h2>
<p>Using base58 module from <a rel="nofollow" class="external free" href="http://github.com/titan098/erl-base58.git">http://github.com/titan098/erl-base58.git</a>.
</p>
<pre class="erlang highlighted_source">&#160;<br/><span class="sy3">-</span><span class="re2">module</span><span class="br0">&#40;</span> bitcoin_address <span class="br0">&#41;</span><span class="sy1">.</span><br/>&#160;<br/><span class="sy3">-</span><span class="re2">export</span><span class="br0">&#40;</span> <span class="br0">&#91;</span>task<span class="sy3">/</span><span class="nu0">0</span><span class="sy1">,</span> validate<span class="sy3">/</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy1">.</span><br/>&#160;<br/><span class="re3">task</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>	<a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">fwrite</span><span class="br0">&#40;</span> <span class="st0">&quot;Validate ~p~n&quot;</span><span class="sy1">,</span> <span class="br0">&#91;</span><span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy1">,</span><br/>	<a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">fwrite</span><span class="br0">&#40;</span> <span class="st0">&quot;~p~n&quot;</span><span class="sy1">,</span> <span class="br0">&#91;</span><span class="re3">validate</span><span class="br0">&#40;</span><span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy1">,</span><br/>	<a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">fwrite</span><span class="br0">&#40;</span> <span class="st0">&quot;Validate ~p~n&quot;</span><span class="sy1">,</span> <span class="br0">&#91;</span><span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW622&quot;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy1">,</span><br/>	<a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">fwrite</span><span class="br0">&#40;</span> <span class="st0">&quot;~p~n&quot;</span><span class="sy1">,</span> <span class="br0">&#91;</span><span class="re3">validate</span><span class="br0">&#40;</span><span class="st0">&quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW622&quot;</span><span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy1">.</span><br/>&#160;<br/><span class="re3">validate</span><span class="br0">&#40;</span> <span class="re5">String</span> <span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>	<span class="br0">&#123;</span><span class="kw3">length</span>_25<span class="sy1">,</span> <span class="sy2">&lt;&lt;</span><span class="re5">Address</span>:<span class="nu0">21</span><span class="sy3">/</span><span class="kw4">binary</span><span class="sy1">,</span> <span class="re5">Checksum</span>:<span class="nu0">4</span><span class="sy3">/</span><span class="kw6">binary</span><span class="sy2">&gt;&gt;</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="br0">&#123;</span><span class="kw3">length</span>_25<span class="sy1">,</span> base58:<span class="re3">base58_to_binary</span><span class="br0">&#40;</span> <span class="re5">String</span> <span class="br0">&#41;</span><span class="br0">&#125;</span><span class="sy1">,</span><br/>	<span class="sy2">&lt;&lt;</span><span class="re5">Version</span>:<span class="nu0">1</span><span class="sy3">/</span><span class="kw4">binary</span><span class="sy1">,</span> <span class="re5">_</span><span class="sy3">/</span><span class="kw6">binary</span><span class="sy2">&gt;&gt;</span> <span class="sy3">=</span> <span class="re5">Address</span><span class="sy1">,</span><br/>	<span class="br0">&#123;</span>version_0<span class="sy1">,</span> <span class="sy2">&lt;&lt;</span><span class="nu0">0</span><span class="sy2">&gt;&gt;</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="br0">&#123;</span>version_0<span class="sy1">,</span> <span class="re5">Version</span><span class="br0">&#125;</span><span class="sy1">,</span><br/>	<span class="sy2">&lt;&lt;</span><span class="re5">Four_bytes</span>:<span class="nu0">4</span><span class="sy3">/</span><span class="kw4">binary</span><span class="sy1">,</span> <span class="re5">_T</span><span class="sy3">/</span><span class="kw6">binary</span><span class="sy2">&gt;&gt;</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/crypto.html"><span class="kw5">crypto</span></a>:<span class="re3">hash</span><span class="br0">&#40;</span> sha256<span class="sy1">,</span> <a href="http://erlang.org/doc/man/crypto.html"><span class="kw5">crypto</span></a>:<span class="re3">hash</span><span class="br0">&#40;</span>sha256<span class="sy1">,</span> <span class="re5">Address</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy1">,</span><br/>	<span class="br0">&#123;</span>checksum<span class="sy1">,</span> <span class="re5">Checksum</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="br0">&#123;</span>checksum<span class="sy1">,</span> <span class="re5">Four_bytes</span><span class="br0">&#125;</span><span class="sy1">,</span><br/>	ok<span class="sy1">.</span><br/>&#160;</pre>
<div>
<dl><dt>Output:</div>
</dt></dl>
<pre>
17&gt;  bitcoin_address:task().
Validate &quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;
ok
Validate &quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW622&quot;
** exception error: no match of right hand side value {checksum,&lt;&lt;&quot;ÀF²ÿ&quot;&gt;&gt;}
     in function  bitcoin_address:validate/1 (src/bitcoin_address.erl, line 16)
     in call from bitcoin_address:task/0 (src/bitcoin_address.erl, line 9)
</pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=5" title="Edit section: Go">edit</a>]</span> <span class="mw-headline" id="Go"><a href="/wiki/Category:Go" title="Category:Go">Go</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="/wiki/Bitcoin/address_validation#C" title="Bitcoin/address validation">C</a></div>
<pre class="go highlighted_source"><span class="kw1">package</span> main<br/>&#160;<br/><span class="kw1">import</span> <span class="sy1">(</span><br/>    <span class="st0">&quot;bytes&quot;</span><br/>    <span class="st0">&quot;crypto/sha256&quot;</span><br/>    <span class="st0">&quot;errors&quot;</span><br/>    <span class="st0">&quot;os&quot;</span><br/><span class="sy1">)</span><br/>&#160;<br/><span class="co1">// With at least one other bitcoin RC task, this source is styled more like</span><br/><span class="co1">// a package to show how functions of the two tasks might be combined into</span><br/><span class="co1">// a single package.  It turns out there's not really that much shared code,</span><br/><span class="co1">// just the A25 type and doubleSHA256 method, but it's enough to suggest how</span><br/><span class="co1">// the code might be organized.  Types, methods, and functions are capitalized</span><br/><span class="co1">// where they might be exported from a package.</span><br/>&#160;<br/><span class="co1">// A25 is a type for a 25 byte (not base58 encoded) bitcoin address.</span><br/><span class="kw1">type</span> A25 <span class="sy1">[</span><span class="nu0">25</span><span class="sy1">]</span><span class="kw4">byte</span><br/>&#160;<br/><span class="kw4">func</span> <span class="sy1">(</span>a <span class="sy3">*</span>A25<span class="sy1">)</span> Version<span class="sy1">()</span> <span class="kw4">byte</span> <span class="sy1">{</span><br/>    <span class="kw1">return</span> a<span class="sy1">[</span><span class="nu0">0</span><span class="sy1">]</span><br/><span class="sy1">}</span><br/>&#160;<br/><span class="kw4">func</span> <span class="sy1">(</span>a <span class="sy3">*</span>A25<span class="sy1">)</span> EmbeddedChecksum<span class="sy1">()</span> <span class="sy1">(</span>c <span class="sy1">[</span><span class="nu0">4</span><span class="sy1">]</span><span class="kw4">byte</span><span class="sy1">)</span> <span class="sy1">{</span><br/>    <span class="kw3">copy</span><span class="sy1">(</span>c<span class="sy1">[:],</span> a<span class="sy1">[</span><span class="nu0">21</span><span class="sy1">:])</span><br/>    <span class="kw1">return</span><br/><span class="sy1">}</span><br/>&#160;<br/><span class="co1">// DoubleSHA256 computes a double sha256 hash of the first 21 bytes of the</span><br/><span class="co1">// address.  This is the one function shared with the other bitcoin RC task.</span><br/><span class="co1">// Returned is the full 32 byte sha256 hash.  (The bitcoin checksum will be</span><br/><span class="co1">// the first four bytes of the slice.)</span><br/><span class="kw4">func</span> <span class="sy1">(</span>a <span class="sy3">*</span>A25<span class="sy1">)</span> doubleSHA256<span class="sy1">()</span> <span class="sy1">[]</span><span class="kw4">byte</span> <span class="sy1">{</span><br/>    h <span class="sy2">:=</span> sha256<span class="sy3">.</span>New<span class="sy1">()</span><br/>    h<span class="sy3">.</span>Write<span class="sy1">(</span>a<span class="sy1">[:</span><span class="nu0">21</span><span class="sy1">])</span><br/>    d <span class="sy2">:=</span> h<span class="sy3">.</span>Sum<span class="sy1">([]</span><span class="kw4">byte</span><span class="sy1">{})</span><br/>    h <span class="sy2">=</span> sha256<span class="sy3">.</span>New<span class="sy1">()</span><br/>    h<span class="sy3">.</span>Write<span class="sy1">(</span>d<span class="sy1">)</span><br/>    <span class="kw1">return</span> h<span class="sy3">.</span>Sum<span class="sy1">(</span>d<span class="sy1">[:</span><span class="nu0">0</span><span class="sy1">])</span><br/><span class="sy1">}</span><br/>&#160;<br/><span class="co1">// ComputeChecksum returns a four byte checksum computed from the first 21</span><br/><span class="co1">// bytes of the address.  The embedded checksum is not updated.</span><br/><span class="kw4">func</span> <span class="sy1">(</span>a <span class="sy3">*</span>A25<span class="sy1">)</span> ComputeChecksum<span class="sy1">()</span> <span class="sy1">(</span>c <span class="sy1">[</span><span class="nu0">4</span><span class="sy1">]</span><span class="kw4">byte</span><span class="sy1">)</span> <span class="sy1">{</span><br/>    <span class="kw3">copy</span><span class="sy1">(</span>c<span class="sy1">[:],</span> a<span class="sy3">.</span>doubleSHA256<span class="sy1">())</span><br/>    <span class="kw1">return</span><br/><span class="sy1">}</span><span class="coMULTI">/* {{header|Go}} */</span> <br/>&#160;<br/><span class="co1">// Tmpl and Set58 are adapted from the C solution.</span><br/><span class="co1">// Go has big integers but this techinique seems better.</span><br/><span class="kw1">var</span> tmpl <span class="sy2">=</span> <span class="sy1">[]</span><span class="kw4">byte</span><span class="sy1">(</span><span class="st0">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><span class="sy1">)</span><br/>&#160;<br/><span class="co1">// Set58 takes a base58 encoded address and decodes it into the receiver.</span><br/><span class="co1">// Errors are returned if the argument is not valid base58 or if the decoded</span><br/><span class="co1">// value does not fit in the 25 byte address.  The address is not otherwise</span><br/><span class="co1">// checked for validity.</span><br/><span class="kw4">func</span> <span class="sy1">(</span>a <span class="sy3">*</span>A25<span class="sy1">)</span> Set58<span class="sy1">(</span>s <span class="sy1">[]</span><span class="kw4">byte</span><span class="sy1">)</span> error <span class="sy1">{</span><br/>    <span class="kw1">for</span> _<span class="sy1">,</span> s1 <span class="sy2">:=</span> <span class="kw1">range</span> s <span class="sy1">{</span><br/>        c <span class="sy2">:=</span> bytes<span class="sy3">.</span>IndexByte<span class="sy1">(</span>tmpl<span class="sy1">,</span> s1<span class="sy1">)</span><br/>        <span class="kw1">if</span> c &lt; <span class="nu0">0</span> <span class="sy1">{</span><br/>            <span class="kw1">return</span> errors<span class="sy3">.</span>New<span class="sy1">(</span><span class="st0">&quot;bad char&quot;</span><span class="sy1">)</span><br/>        <span class="sy1">}</span><br/>        <span class="kw1">for</span> j <span class="sy2">:=</span> <span class="nu0">24</span><span class="sy1">;</span> j &gt;<span class="sy2">=</span> <span class="nu0">0</span><span class="sy1">;</span> j<span class="sy2">--</span> <span class="sy1">{</span><br/>            c <span class="sy2">+=</span> <span class="nu0">58</span> <span class="sy3">*</span> <span class="kw4">int</span><span class="sy1">(</span>a<span class="sy1">[</span>j<span class="sy1">])</span><br/>            a<span class="sy1">[</span>j<span class="sy1">]</span> <span class="sy2">=</span> <span class="kw4">byte</span><span class="sy1">(</span>c <span class="sy3">%</span> <span class="nu0">256</span><span class="sy1">)</span><br/>            c <span class="sy2">/=</span> <span class="nu0">256</span><br/>        <span class="sy1">}</span><br/>        <span class="kw1">if</span> c &gt; <span class="nu0">0</span> <span class="sy1">{</span><br/>            <span class="kw1">return</span> errors<span class="sy3">.</span>New<span class="sy1">(</span><span class="st0">&quot;too long&quot;</span><span class="sy1">)</span><br/>        <span class="sy1">}</span><br/>    <span class="sy1">}</span><br/>    <span class="kw1">return</span> <span class="kw2">nil</span><br/><span class="sy1">}</span><br/>&#160;<br/><span class="co1">// ValidA58 validates a base58 encoded bitcoin address.  An address is valid</span><br/><span class="co1">// if it can be decoded into a 25 byte address, the version number is 0,</span><br/><span class="co1">// and the checksum validates.  Return value ok will be true for valid</span><br/><span class="co1">// addresses.  If ok is false, the address is invalid and the error value</span><br/><span class="co1">// may indicate why.</span><br/><span class="kw4">func</span> ValidA58<span class="sy1">(</span>a58 <span class="sy1">[]</span><span class="kw4">byte</span><span class="sy1">)</span> <span class="sy1">(</span>ok <span class="kw4">bool</span><span class="sy1">,</span> err error<span class="sy1">)</span> <span class="sy1">{</span><br/>    <span class="kw1">var</span> a A25<br/>    <span class="kw1">if</span> err <span class="sy2">:=</span> a<span class="sy3">.</span>Set58<span class="sy1">(</span>a58<span class="sy1">);</span> err <span class="sy2">!=</span> <span class="kw2">nil</span> <span class="sy1">{</span><br/>        <span class="kw1">return</span> <span class="kw2">false</span><span class="sy1">,</span> err<br/>    <span class="sy1">}</span><br/>    <span class="kw1">if</span> a<span class="sy3">.</span>Version<span class="sy1">()</span> <span class="sy2">!=</span> <span class="nu0">0</span> <span class="sy1">{</span><br/>        <span class="kw1">return</span> <span class="kw2">false</span><span class="sy1">,</span> errors<span class="sy3">.</span>New<span class="sy1">(</span><span class="st0">&quot;not version 0&quot;</span><span class="sy1">)</span><br/>    <span class="sy1">}</span><br/>    <span class="kw1">return</span> a<span class="sy3">.</span>EmbeddedChecksum<span class="sy1">()</span> <span class="sy3">==</span> a<span class="sy3">.</span>ComputeChecksum<span class="sy1">(),</span> <span class="kw2">nil</span><br/><span class="sy1">}</span><br/>&#160;<br/><span class="co1">// Program returns exit code 0 with valid address and produces no output.</span><br/><span class="co1">// Otherwise exit code is 1 and a message is written to stderr.</span><br/><span class="kw4">func</span> main<span class="sy1">()</span> <span class="sy1">{</span><br/>    <span class="kw1">if</span> <span class="kw3">len</span><span class="sy1">(</span>os<span class="sy3">.</span>Args<span class="sy1">)</span> <span class="sy2">!=</span> <span class="nu0">2</span> <span class="sy1">{</span><br/>        errorExit<span class="sy1">(</span><span class="st0">&quot;Usage: valid &lt;base58 address&gt;&quot;</span><span class="sy1">)</span><br/>    <span class="sy1">}</span><br/>    <span class="kw1">switch</span> ok<span class="sy1">,</span> err <span class="sy2">:=</span> ValidA58<span class="sy1">([]</span><span class="kw4">byte</span><span class="sy1">(</span>os<span class="sy3">.</span>Args<span class="sy1">[</span><span class="nu0">1</span><span class="sy1">]));</span> <span class="sy1">{</span><br/>    <span class="kw1">case</span> ok<span class="sy1">:</span><br/>    <span class="kw1">case</span> err <span class="sy3">==</span> <span class="kw2">nil</span><span class="sy1">:</span><br/>        errorExit<span class="sy1">(</span><span class="st0">&quot;Invalid&quot;</span><span class="sy1">)</span><br/>    <span class="kw1">default</span><span class="sy1">:</span><br/>        errorExit<span class="sy1">(</span>err<span class="sy3">.</span>Error<span class="sy1">())</span><br/>    <span class="sy1">}</span><br/><span class="sy1">}</span><br/>&#160;<br/><span class="kw4">func</span> errorExit<span class="sy1">(</span>m <span class="kw4">string</span><span class="sy1">)</span> <span class="sy1">{</span><br/>    os<span class="sy3">.</span>Stderr<span class="sy3">.</span>WriteString<span class="sy1">(</span>m <span class="sy3">+</span> <span class="st0">&quot;<span class="es1">\n</span>&quot;</span><span class="sy1">)</span><br/>    os<span class="sy3">.</span>Exit<span class="sy1">(</span><span class="nu0">1</span><span class="sy1">)</span><br/><span class="sy1">}</span></pre>
<div>
<dl><dt>Output:</div>
</dt></dl>
<p>Command line usage examples showing program exit status.
</p>
<pre>
&gt; valid&#160;; echo $status
Usage: valid &lt;base58 address&gt;
1
&gt; valid 1 1&#160;; echo $status
Usage: valid &lt;base58 address&gt;
1
&gt; valid 1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&#160;; echo $status
0
&gt; valid 1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62j&#160;; echo $status
Invalid
1
&gt; valid 1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62!&#160;; echo $status
bad char
1
&gt; valid 1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62iz&#160;; echo $status
not version 0
1
&gt; valid 1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62izz&#160;; echo $status
too long
1
</pre>
<p><br/>
</p>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=6" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline" id="Perl"><a href="/wiki/Category:Perl" title="Category:Perl">Perl</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="/wiki/Bitcoin/address_validation#C" title="Bitcoin/address validation">C</a></div>
<pre class="perl highlighted_source"><span class="kw1">my</span> <span class="re0">@b58</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/qw.html"><span class="kw3">qw</span></a><span class="br0">&#123;</span><br/>      <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span> <span class="nu0">7</span> <span class="nu0">8</span> <span class="nu0">9</span><br/>    A B C D E F G H   J K L M N   P Q R S T U V W X Y Z<br/>    a b c d e f g h i j k   <a href="http://perldoc.perl.org/functions/m.html"><span class="kw3">m</span></a> n o p <a href="http://perldoc.perl.org/functions/q.html"><span class="kw3">q</span></a> r <a href="http://perldoc.perl.org/functions/s.html"><span class="kw3">s</span></a> t u v w x <a href="http://perldoc.perl.org/functions/y.html"><span class="kw3">y</span></a> z<br/><span class="br0">&#125;</span><span class="sy0">;</span><br/><span class="kw1">my</span> <span class="re0">%b58</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">&#123;</span> <span class="re0">$b58</span><span class="br0">&#91;</span><span class="co5">$_</span><span class="br0">&#93;</span> <span class="sy0">=&gt;</span> <span class="co5">$_</span> <span class="br0">&#125;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="nu0">57</span><span class="sy0">;</span><br/>&#160;<br/><span class="kw2">sub</span> unbase58 <span class="br0">&#123;</span><br/>    <span class="kw2">use</span> integer<span class="sy0">;</span><br/>    <span class="kw1">my</span> <span class="re0">@out</span><span class="sy0">;</span><br/>    <span class="kw1">for</span> <span class="kw1">my</span> <span class="re0">$c</span> <span class="br0">&#40;</span> <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">&#123;</span> <span class="re0">$b58</span><span class="br0">&#123;</span><span class="co5">$_</span><span class="br0">&#125;</span> <span class="br0">&#125;</span> <a href="http://perldoc.perl.org/functions/shift.html"><span class="kw3">shift</span></a> <span class="sy0">=~</span> <span class="co2">/./g</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw1">my</span> <span class="re0">$j</span> <span class="sy0">=</span> <span class="nu0">25</span><span class="sy0">;</span> <span class="re0">$j</span><span class="sy0">--;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>            <span class="re0">$c</span> <span class="sy0">+=</span> <span class="nu0">58</span> <span class="sy0">*</span> <span class="br0">&#40;</span><span class="re0">$out</span><span class="br0">&#91;</span><span class="re0">$j</span><span class="br0">&#93;</span> <span class="sy0">//</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>            <span class="re0">$out</span><span class="br0">&#91;</span><span class="re0">$j</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="re0">$c</span> <span class="sy0">%</span> <span class="nu0">256</span><span class="sy0">;</span><br/>            <span class="re0">$c</span> <span class="sy0">/=</span> <span class="nu0">256</span><span class="sy0">;</span><br/>        <span class="br0">&#125;</span><br/>    <span class="br0">&#125;</span><br/>    <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="re0">@out</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw2">sub</span> check_bitcoin_address <span class="br0">&#123;</span><br/>    <span class="co1"># does nothing if the address is valid</span><br/>    <span class="co1"># dies otherwise</span><br/>    <span class="kw2">use</span> Digest<span class="sy0">::</span><span class="me2">SHA</span> <a href="http://perldoc.perl.org/functions/qw.html"><span class="kw3">qw</span></a><span class="br0">&#40;</span>sha256<span class="br0">&#41;</span><span class="sy0">;</span><br/>    <span class="kw1">my</span> <span class="re0">@byte</span> <span class="sy0">=</span> unbase58 <a href="http://perldoc.perl.org/functions/shift.html"><span class="kw3">shift</span></a><span class="sy0">;</span><br/>    <a href="http://perldoc.perl.org/functions/die.html"><span class="kw3">die</span></a> <span class="st0">&quot;wrong checksum&quot;</span> <span class="kw1">unless</span><br/>    <a href="http://perldoc.perl.org/functions/join.html"><span class="kw3">join</span></a><span class="br0">&#40;</span><span class="st_h">''</span><span class="sy0">,</span> <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">&#123;</span> <a href="http://perldoc.perl.org/functions/chr.html"><span class="kw3">chr</span></a> <span class="br0">&#125;</span> <span class="re0">@byte</span><span class="br0">&#91;</span><span class="nu0">21</span><span class="sy0">..</span><span class="nu0">24</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">eq</span><br/>    <a href="http://perldoc.perl.org/functions/substr.html"><span class="kw3">substr</span></a> sha256<span class="br0">&#40;</span>sha256 <a href="http://perldoc.perl.org/functions/pack.html"><span class="kw3">pack</span></a> <span class="st_h">'C*'</span><span class="sy0">,</span> <span class="re0">@byte</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="sy0">..</span><span class="nu0">20</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=7" title="Edit section: Perl 6">edit</a>]</span> <span class="mw-headline" id="Perl_6"><a href="/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="/wiki/Bitcoin/address_validation#C" title="Bitcoin/address validation">C</a></div>
<pre class="perl6 highlighted_source"><span class="kw1">enum</span> B58 <span class="sy0">&lt;</span><br/>      <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span> <span class="nu0">7</span> <span class="nu0">8</span> <span class="nu0">9</span><br/>    A B C D E F G H   J K L M N   P Q R S T U V W <span class="kw1">X</span> Y <span class="kw1">Z</span><br/>    a b c d e f g h <span class="kw3">i</span> j k   m n o p q r s t u v w <span class="kw1">x</span> y z<br/><span class="sy0">&gt;;</span><br/>&#160;<br/><span class="kw2">sub</span> unbase58<span class="br0">&#40;</span>Str <span class="re0">$str</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw1">my</span> <span class="re0">@out</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">xx</span> <span class="nu0">25</span><span class="sy0">;</span><br/>    <span class="kw1">for</span> B58<span class="sy0">.</span><span class="me1">enums</span><span class="sy0">.</span><span class="me1">hash</span><span class="br0">&#123;</span><span class="re0">$str</span><span class="sy0">.</span><span class="kw3">comb</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br/>        <span class="kw1">my</span> <span class="re0">$c</span> <span class="sy0">=</span> <span class="re0">$_</span><span class="sy0">;</span><br/>        <span class="kw1">for</span> <span class="kw3">reverse</span> <span class="sy0">^</span><span class="nu0">25</span> <span class="br0">&#123;</span><br/>            <span class="re0">$c</span> <span class="sy0">+=</span> <span class="nu0">58</span> <span class="sy0">*</span> <span class="re0">@out</span><span class="br0">&#91;</span><span class="re0">$_</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>            <span class="re0">@out</span><span class="br0">&#91;</span><span class="re0">$_</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="re0">$c</span> <span class="sy0">%</span> <span class="nu0">256</span><span class="sy0">;</span><br/>            <span class="re0">$c</span> <span class="kw1">div</span><span class="sy0">=</span> <span class="nu0">256</span><span class="sy0">;</span><br/>        <span class="br0">&#125;</span><br/>    <span class="br0">&#125;</span><br/>    <span class="kw1">return</span> <span class="re0">@out</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw2">sub</span> check<span class="sy0">-</span>bitcoin<span class="sy0">-</span>address<span class="br0">&#40;</span><span class="re0">$addr</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw2">use</span> Digest<span class="sy0">::</span><span class="me2">SHA</span><span class="sy0">;</span><br/>    <span class="kw1">my</span> <span class="re0">@byte</span> <span class="sy0">=</span> unbase58 <span class="re0">$addr</span><span class="sy0">;</span><br/>    <span class="sy0">!!!</span> <span class="st_h">'wrong checksum'</span> <span class="kw1">unless</span> <span class="re0">@byte</span><span class="br0">&#91;</span><span class="nu0">21</span><span class="sy0">..</span><span class="nu0">24</span><span class="br0">&#93;</span> <span class="sy0">~~</span><br/>    sha256<span class="br0">&#40;</span>sha256 Buf<span class="sy0">.</span><span class="kw2">new</span><span class="sy0">:</span> <span class="re0">@byte</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="sy0">..</span><span class="nu0">20</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">subbuf</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">list</span><span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=8" title="Edit section: PicoLisp">edit</a>]</span> <span class="mw-headline" id="PicoLisp"><a href="/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></span></h2>
<pre class="text highlighted_source">(setq *Alphabet <br/>   (chop &quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;))<br/>&#160;<br/># if returns NIL then adress is already invalid<br/>(de base58 (Str)<br/>   (let N 0<br/>      (for L (chop Str)<br/>         (setq N<br/>            (+<br/>               (* N 58)<br/>               (index L *Alphabet)<br/>               -1 ) ) )<br/>&#160;<br/>      N )<br/>)<br/>&#160;<br/>(de sha256 (Lst)<br/>   (native &quot;libcrypto.so&quot; &quot;SHA256&quot;<br/>      '(B . 32)<br/>      (cons<br/>         NIL<br/>         (32)<br/>         (native &quot;libcrypto.so&quot; &quot;SHA256&quot; '(B . 32) <br/>            (cons NIL (32) Lst) (length Lst) '(NIL (32))) )<br/>      32<br/>      '(NIL (32)) ) )<br/>&#160;<br/>(de bytes25 (N)<br/>   (flip<br/>      (make<br/>         (do 25<br/>            (link (% N 256))<br/>            (setq N (/ N 256)) ) ) ) )<br/>&#160;<br/>(de valid (Str)<br/>   (and<br/>      (base58 Str)<br/>      (bytes25 @)<br/>      (=<br/>         (head 4 (sha256 (head 21 @)))<br/>         (tail 4 @) ) ) )<br/>&#160;<br/>(bye)</pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=9" title="Edit section: Python">edit</a>]</span> <span class="mw-headline" id="Python"><a href="/wiki/Category:Python" title="Category:Python">Python</a></span></h2>
<pre class="python highlighted_source"><span class="kw1">from</span> hashlib <span class="kw1">import</span> sha256<br/>&#160;<br/>digits58 <span class="sy0">=</span> <span class="st0">'123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'</span><br/>&#160;<br/><span class="kw1">def</span> decode_base58<span class="br0">&#40;</span>bc<span class="sy0">,</span> length<span class="br0">&#41;</span>:<br/>    n <span class="sy0">=</span> <span class="nu0">0</span><br/>    <span class="kw1">for</span> char <span class="kw1">in</span> bc:<br/>        n <span class="sy0">=</span> n * <span class="nu0">58</span> + digits58.<span class="me1">index</span><span class="br0">&#40;</span>char<span class="br0">&#41;</span><br/>    <span class="kw1">return</span> n.<span class="me1">to_bytes</span><span class="br0">&#40;</span>length<span class="sy0">,</span> <span class="st0">'big'</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="kw1">def</span> check_bc<span class="br0">&#40;</span>bc<span class="br0">&#41;</span>:<br/>    bcbytes <span class="sy0">=</span> decode_base58<span class="br0">&#40;</span>bc<span class="sy0">,</span> <span class="nu0">25</span><span class="br0">&#41;</span><br/>    <span class="kw1">return</span> bcbytes<span class="br0">&#91;</span>-<span class="nu0">4</span>:<span class="br0">&#93;</span> <span class="sy0">==</span> sha256<span class="br0">&#40;</span>sha256<span class="br0">&#40;</span>bcbytes<span class="br0">&#91;</span>:-<span class="nu0">4</span><span class="br0">&#93;</span><span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#91;</span>:<span class="nu0">4</span><span class="br0">&#93;</span><br/>&#160;<br/><span class="kw1">if</span> __name__ <span class="sy0">==</span> <span class="st0">'__main__'</span>:<br/>    bc <span class="sy0">=</span> <span class="st0">'1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i'</span><br/>    <span class="kw1">assert</span> check_bc<span class="br0">&#40;</span>bc<span class="br0">&#41;</span><br/>    <span class="kw1">assert</span> <span class="kw1">not</span> check_bc<span class="br0">&#40;</span> bc.<span class="me1">replace</span><span class="br0">&#40;</span><span class="st0">'N'</span><span class="sy0">,</span> <span class="st0">'P'</span><span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><br/>    <span class="kw1">assert</span> check_bc<span class="br0">&#40;</span><span class="st0">'1111111111111111111114oLvT2'</span><span class="br0">&#41;</span><br/>    <span class="kw1">assert</span> check_bc<span class="br0">&#40;</span><span class="st0">&quot;17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j&quot;</span><span class="br0">&#41;</span></pre>
<div>
<dl><dt>Output:</div>
</dt></dl>
<p>No output signifying success.
</p>
<dl><dt>Help</dt><dd>
</dd><dd>For those looking at examples here to try and work out what is required, the <code>n.to_bytes()</code> call is equivalent to this code which converts a (long) integer into individual bytes of a byte array in a particular order:
</dd><dd><pre class="python highlighted_source"><span class="sy0">&gt;&gt;&gt;</span> n <span class="sy0">=</span> <span class="nu0">2491969579123783355964723219455906992268673266682165637887</span><br/><span class="sy0">&gt;&gt;&gt;</span> length <span class="sy0">=</span> <span class="nu0">25</span><br/><span class="sy0">&gt;&gt;&gt;</span> <span class="kw2">list</span><span class="br0">&#40;</span> <span class="kw2">reversed</span><span class="br0">&#40;</span><span class="kw2">range</span><span class="br0">&#40;</span>length<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><br/><span class="br0">&#91;</span><span class="nu0">24</span><span class="sy0">,</span> <span class="nu0">23</span><span class="sy0">,</span> <span class="nu0">22</span><span class="sy0">,</span> <span class="nu0">21</span><span class="sy0">,</span> <span class="nu0">20</span><span class="sy0">,</span> <span class="nu0">19</span><span class="sy0">,</span> <span class="nu0">18</span><span class="sy0">,</span> <span class="nu0">17</span><span class="sy0">,</span> <span class="nu0">16</span><span class="sy0">,</span> <span class="nu0">15</span><span class="sy0">,</span> <span class="nu0">14</span><span class="sy0">,</span> <span class="nu0">13</span><span class="sy0">,</span> <span class="nu0">12</span><span class="sy0">,</span> <span class="nu0">11</span><span class="sy0">,</span> <span class="nu0">10</span><span class="sy0">,</span> <span class="nu0">9</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#93;</span><br/><span class="sy0">&gt;&gt;&gt;</span> <span class="kw1">assert</span> n.<span class="me1">to_bytes</span><span class="br0">&#40;</span>length<span class="sy0">,</span> <span class="st0">'big'</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="kw3">bytes</span><span class="br0">&#40;</span> <span class="br0">&#40;</span>n <span class="sy0">&gt;&gt;</span> i*<span class="nu0">8</span><span class="br0">&#41;</span> &amp; <span class="nu0">0xff</span> <span class="kw1">for</span> i <span class="kw1">in</span> <span class="kw2">reversed</span><span class="br0">&#40;</span><span class="kw2">range</span><span class="br0">&#40;</span>length<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/><span class="sy0">&gt;&gt;&gt;</span> </pre>
</dd></dl>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=10" title="Edit section: Racket">edit</a>]</span> <span class="mw-headline" id="Racket"><a href="/wiki/Category:Racket" title="Category:Racket">Racket</a></span></h2>
<pre class="text highlighted_source">&#160;<br/>#lang racket/base<br/>&#160;<br/>;; Same sha-256 interface as the same-named task<br/>(require ffi/unsafe ffi/unsafe/define openssl/libcrypto)<br/>(define-ffi-definer defcrypto libcrypto)<br/>(defcrypto SHA256_Init   (_fun _pointer -&gt; _int))<br/>(defcrypto SHA256_Update (_fun _pointer _pointer _long -&gt; _int))<br/>(defcrypto SHA256_Final  (_fun _pointer _pointer -&gt; _int))<br/>(define (sha256 bytes)<br/>  (define ctx (malloc 128))<br/>  (define result (make-bytes 32))<br/>  (SHA256_Init ctx)<br/>  (SHA256_Update ctx bytes (bytes-length bytes))<br/>  (SHA256_Final result ctx)<br/>  result)<br/>&#160;<br/>;; base58 decoding<br/>(define base58-digits<br/>  (let ([v (make-vector 128 #f)])<br/>    (for ([i (in-naturals)]<br/>          [c &quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;])<br/>      (vector-set! v (char-&gt;integer c) i))<br/>    v))<br/>(define (base58-&gt;integer str)<br/>  (for/fold ([n 0]) ([c str])<br/>    (+ (* n 58) (vector-ref base58-digits (char-&gt;integer c)))))<br/>&#160;<br/>(define (int-&gt;bytes n digits)<br/>  (list-&gt;bytes (let loop ([n n] [digits digits] [acc '()])<br/>                 (if (zero? digits) acc<br/>                     (let-values ([(q r) (quotient/remainder n 256)])<br/>                       (loop q (sub1 digits) (cons r acc)))))))<br/>&#160;<br/>(define (validate-bitcoin-address str)<br/>  (define bs (int-&gt;bytes (base58-&gt;integer str) 25))<br/>  (equal? (subbytes (sha256 (sha256 (subbytes bs 0 21))) 0 4)<br/>          (subbytes bs 21)))<br/>&#160;<br/>;; additional tests taken from the other solutions<br/>(validate-bitcoin-address &quot;1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i&quot;)&#160;; =&gt; #t<br/>(validate-bitcoin-address &quot;1111111111111111111114oLvT2&quot;)       &#160;; =&gt; #t<br/>(validate-bitcoin-address &quot;17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j&quot;)&#160;; =&gt; #t<br/>(validate-bitcoin-address &quot;1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9&quot;)&#160;; =&gt; #t<br/>(validate-bitcoin-address &quot;1badbadbadbadbadbadbadbadbadbadbad&quot;)&#160;; =&gt; #f<br/>&#160;</pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=11" title="Edit section: Tcl">edit</a>]</span> <span class="mw-headline" id="Tcl"><a href="/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></span></h2>
<div class="examplemeta libheader"><b>Library:</b> <a href="/wiki/Category:Tcllib" title="Category:Tcllib">Tcllib</a> <small>(<b>Package:</b> sha256)</small></div>
<pre class="tcl highlighted_source"><span class="kw2">package</span> require sha256<br/>&#160;<br/><span class="co1"># Generate a large and boring piece of code to do the decoding of</span><br/><span class="co1"># base58-encoded data.</span><br/>apply <span class="br0">&#123;</span><span class="br0">&#123;</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br/>    <span class="kw1">set</span> chars <span class="st0">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br/>    <span class="kw1">set</span> i -<span class="nu0">1</span><br/>    <span class="kw1">foreach</span> c <span class="br0">&#91;</span><span class="kw2">split</span> <span class="re0">$chars</span> <span class="st0">&quot;&quot;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span><br/>	<span class="kw2">lappend</span> map <span class="re0">$c</span> <span class="st0">&quot;return -level 0 [incr i]&quot;</span><br/>    <span class="br0">&#125;</span><br/>    <span class="kw2">lappend</span> map <span class="kw1">default</span> <span class="br0">&#123;</span><span class="kw1">return</span> -code <span class="kw1">error</span> <span class="st0">&quot;bad character <span class="es0">\&quot;</span>$c<span class="es0">\&quot;</span>&quot;</span><span class="br0">&#125;</span><br/>    <span class="kw1">proc</span> base58decode str <span class="br0">&#91;</span><span class="kw2">string</span> map <span class="br0">&#91;</span><span class="kw2">list</span> @BODY@ <span class="br0">&#91;</span><span class="kw2">list</span> <span class="re0">$map</span><span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span><br/>	<span class="kw1">set</span> num <span class="nu0">0</span><br/>	<span class="kw1">set</span> count <span class="br0">&#91;</span><span class="kw1">expr</span> <span class="br0">&#123;</span>ceil<span class="br0">&#40;</span>log<span class="br0">&#40;</span><span class="nu0">58</span><span class="sy0">**</span><span class="br0">&#91;</span><span class="kw2">string</span> length <span class="re0">$str</span><span class="br0">&#93;</span><span class="br0">&#41;</span>/log<span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#125;</span><span class="br0">&#93;</span><br/>	<span class="kw1">foreach</span> c <span class="br0">&#91;</span><span class="kw2">split</span> <span class="re0">$str</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span><br/>	    <span class="kw1">set</span> num <span class="br0">&#91;</span><span class="kw1">expr</span> <span class="br0">&#123;</span><span class="re0">$num</span><span class="sy0">*</span><span class="nu0">58</span>+<span class="br0">&#91;</span><span class="kw1">switch</span> <span class="re0">$c</span> @BODY@<span class="br0">&#93;</span><span class="br0">&#125;</span><span class="br0">&#93;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">for</span> <span class="br0">&#123;</span><span class="kw1">set</span> i <span class="nu0">0</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><span class="re0">$i</span> <span class="sy0">&lt;</span> <span class="re0">$count</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><span class="kw2">incr</span> i<span class="br0">&#125;</span> <span class="br0">&#123;</span><br/>	    <span class="kw2">append</span> result <span class="br0">&#91;</span><span class="kw2">binary</span> <span class="kw2">format</span> c <span class="br0">&#91;</span><span class="kw1">expr</span> <span class="br0">&#123;</span><span class="re0">$num</span> <span class="sy0">&amp;</span> <span class="nu0">255</span><span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><br/>	    <span class="kw1">set</span> num <span class="br0">&#91;</span><span class="kw1">expr</span> <span class="br0">&#123;</span><span class="re0">$num</span> <span class="sy0">&gt;&gt;</span> <span class="nu0">8</span><span class="br0">&#125;</span><span class="br0">&#93;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">return</span> <span class="br0">&#91;</span><span class="kw2">string</span> reverse <span class="re0">$result</span><span class="br0">&#93;</span><br/>    <span class="br0">&#125;</span><span class="br0">&#93;</span><br/><span class="br0">&#125;</span><span class="br0">&#125;</span><br/>&#160;<br/><span class="co1"># How to check bitcoin address validity</span><br/><span class="kw1">proc</span> bitcoin_addressValid <span class="br0">&#123;</span>address<span class="br0">&#125;</span> <span class="br0">&#123;</span><br/>    <span class="kw1">set</span> a <span class="br0">&#91;</span>base58decode <span class="re0">$address</span><span class="br0">&#93;</span><br/>    <span class="kw1">set</span> ck <span class="br0">&#91;</span>sha2::<span class="me1">sha256</span> -bin <span class="br0">&#91;</span>sha2::<span class="me1">sha256</span> -bin <span class="br0">&#91;</span><span class="kw2">string</span> range <span class="re0">$a</span> <span class="nu0">0</span> end-<span class="nu0">4</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><br/>    <span class="kw1">if</span> <span class="br0">&#123;</span><span class="br0">&#91;</span><span class="kw2">string</span> range <span class="re0">$a</span> end-<span class="nu0">3</span> end<span class="br0">&#93;</span> ne <span class="br0">&#91;</span><span class="kw2">string</span> range <span class="re0">$ck</span> <span class="nu0">0</span> <span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br/>	<span class="kw1">return</span> -code <span class="kw1">error</span> <span class="st0">&quot;signature does not match&quot;</span><br/>    <span class="br0">&#125;</span><br/>    <span class="kw1">return</span> <span class="st0">&quot;$address is ok&quot;</span><br/><span class="br0">&#125;</span></pre>
<p>Testing if it works
</p>
<pre class="tcl highlighted_source"><span class="kw2">puts</span> <span class="br0">&#91;</span>bitcoin_addressValid 1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9<span class="br0">&#93;</span><br/><span class="kw2">puts</span> <span class="br0">&#91;</span>bitcoin_addressValid 1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i<span class="br0">&#93;</span></pre>
<div>
<dl><dt>Output:</div>
</dt></dl>
<pre>
1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9 is ok
1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i is ok
</pre>
<h2><span class="editsection">[<a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit&amp;section=12" title="Edit section: UNIX Shell">edit</a>]</span> <span class="mw-headline" id="UNIX_Shell"><a href="/wiki/Category:UNIX_Shell" title="Category:UNIX Shell">UNIX Shell</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Bash" title="Bash" class="mw-redirect">bash</a></div>
<pre class="bash highlighted_source"><span class="re2">base58</span>=<span class="br0">&#40;</span><span class="br0">&#123;</span><span class="nu0">1</span>..<span class="nu0">9</span><span class="br0">&#125;</span> <span class="br0">&#123;</span>A..H<span class="br0">&#125;</span> <span class="br0">&#123;</span>J..N<span class="br0">&#125;</span> <span class="br0">&#123;</span>P..Z<span class="br0">&#125;</span> <span class="br0">&#123;</span>a..k<span class="br0">&#125;</span> <span class="br0">&#123;</span>m..z<span class="br0">&#125;</span><span class="br0">&#41;</span><br/><span class="re2">bitcoinregex</span>=<span class="st0">&quot;^[<span class="es4">$(printf &quot;%s&quot; &quot;${base58[@]}&quot;)</span>]{34}$&quot;</span><br/>&#160;<br/>decodeBase58<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw3">local</span> <span class="re2">s</span>=<span class="re4">$1</span><br/>    <span class="kw1">for</span> i <span class="kw1">in</span> <span class="br0">&#123;</span><span class="nu0">0</span>..<span class="nu0">57</span><span class="br0">&#125;</span><br/>    <span class="kw1">do</span> <span class="re2">s</span>=<span class="st0">&quot;<span class="es3">${s//${base58[i]}</span>/ <span class="es2">$i</span>}&quot;</span><br/>    <span class="kw1">done</span><br/>    <span class="kw2">dc</span> <span class="sy0">&lt;&lt;&lt;</span> <span class="st0">&quot;16o0d<span class="es3">${s// /+58*}</span>+f&quot;</span> <br/><span class="br0">&#125;</span><br/>&#160;<br/>checksum<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    xxd <span class="re5">-p</span> <span class="re5">-r</span> <span class="sy0">&lt;&lt;&lt;</span><span class="st0">&quot;$1&quot;</span> <span class="sy0">|</span><br/>    openssl dgst <span class="re5">-sha256</span> <span class="re5">-binary</span> <span class="sy0">|</span><br/>    openssl dgst <span class="re5">-sha256</span> <span class="re5">-binary</span> <span class="sy0">|</span><br/>    xxd <span class="re5">-p</span> <span class="re5">-c</span> <span class="nu0">80</span> <span class="sy0">|</span><br/>    <span class="kw2">head</span> <span class="re5">-c</span> <span class="nu0">8</span><br/><span class="br0">&#125;</span><br/>&#160;<br/>checkBitcoinAddress<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw1">if</span> <span class="br0">&#91;</span><span class="br0">&#91;</span> <span class="st0">&quot;$1&quot;</span> =~ <span class="re1">$bitcoinregex</span> <span class="br0">&#93;</span><span class="br0">&#93;</span><br/>    <span class="kw1">then</span><br/>        <span class="re2">h</span>=$<span class="br0">&#40;</span>decodeBase58 <span class="st0">&quot;$1&quot;</span><span class="br0">&#41;</span><br/>        checksum <span class="st0">&quot;00<span class="es3">${h::${#h}</span>-8}&quot;</span> <span class="sy0">|</span><br/>        <span class="kw2">grep</span> <span class="re5">-qi</span> <span class="st0">&quot;^<span class="es3">${h: -8}</span>$&quot;</span><br/>    <span class="kw1">else</span> <span class="kw3">return</span> <span class="nu0">2</span><br/>    <span class="kw1">fi</span><br/><span class="br0">&#125;</span></pre>
 
 
</div>  
 
<div class="printfooter">
Retrieved from "<a href="http://rosettacode.org/mw/index.php?title=Bitcoin/address_validation&amp;oldid=182264">http://rosettacode.org/mw/index.php?title=Bitcoin/address_validation&amp;oldid=182264</a>" </div>
 
 
<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/wiki/Category:Programming_Tasks" title="Category:Programming Tasks">Programming Tasks</a></li><li><a href="/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task">Solutions by Programming Task</a></li><li><a href="/wiki/Category:Ada" title="Category:Ada">Ada</a></li><li><a href="/wiki/Category:C" title="Category:C">C</a></li><li><a href="/wiki/Category:D" title="Category:D">D</a></li><li><a href="/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></li><li><a href="/wiki/Category:Go" title="Category:Go">Go</a></li><li><a href="/wiki/Category:Perl" title="Category:Perl">Perl</a></li><li><a href="/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></li><li><a href="/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></li><li><a href="/wiki/Category:Python" title="Category:Python">Python</a></li><li><a href="/wiki/Category:Racket" title="Category:Racket">Racket</a></li><li><a href="/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></li><li><a href="/wiki/Category:Tcllib" title="Category:Tcllib">Tcllib</a></li><li><a href="/wiki/Category:UNIX_Shell" title="Category:UNIX Shell">UNIX Shell</a></li><li><a href="/wiki/Category:Brlcad/Omit" title="Category:Brlcad/Omit">Brlcad/Omit</a></li><li><a href="/wiki/Category:GUISS/Omit" title="Category:GUISS/Omit">GUISS/Omit</a></li><li><a href="/wiki/Category:Checksums" title="Category:Checksums">Checksums</a></li></ul></div></div>  
<div class="visualClear"></div>
 
 
</div>
 
</div>
 
 
<div id="mw-head" class="noprint">
 
<div id="p-personal" class="">
<h5>Personal tools</h5>
<ul>
<li id="pt-createaccount"><a href="/mw/index.php?title=Special:UserLogin&amp;returnto=Bitcoin%2Faddress+validation&amp;type=signup">Create account</a></li>
<li id="pt-login"><a href="/mw/index.php?title=Special:UserLogin&amp;returnto=Bitcoin%2Faddress+validation" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
</ul>
</div>
 
<div id="left-navigation">
 
<div id="p-namespaces" class="vectorTabs">
<h5>Namespaces</h5>
<ul>
<li id="ca-nstab-main" class="selected"><span><a href="/wiki/Bitcoin/address_validation" title="View the content page [c]" accesskey="c">Page</a></span></li>
<li id="ca-talk"><span><a href="/wiki/Talk:Bitcoin/address_validation" title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
</ul>
</div>
 
 
<div id="p-variants" class="vectorMenu emptyPortlet">
<h4>
</h4>
<h5><span>Variants</span><a href="#"></a></h5>
<div class="menu">
<ul>
</ul>
</div>
</div>
 
</div>
<div id="right-navigation">
 
<div id="p-views" class="vectorTabs">
<h5>Views</h5>
<ul>
<li id="ca-view" class="selected"><span><a href="/wiki/Bitcoin/address_validation">Read</a></span></li>
<li id="ca-edit"><span><a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=edit" title="You can edit this page. Please use the preview button before saving [e]" accesskey="e">Edit</a></span></li>
<li id="ca-history" class="collapsible"><span><a href="/mw/index.php?title=Bitcoin/address_validation&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
</ul>
</div>
 
 
<div id="p-cactions" class="vectorMenu emptyPortlet">
<h5><span>Actions</span><a href="#"></a></h5>
<div class="menu">
<ul>
</ul>
</div>
</div>
 
 
<div id="p-search">
<h5><label for="searchInput">Search</label></h5>
<form action="/mw/index.php" id="searchform">
<div>
<input type="search" name="search" title="Search Rosetta Code [f]" accesskey="f" id="searchInput"/> <input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton"/> <input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton"/> <input type='hidden' name="title" value="Special:Search"/>
</div>
</form>
</div>
 
</div>
</div>
 
 
<div id="mw-panel" class="noprint">
 
<div id="p-logo"><a style="background-image: url(/mw/title.png);" href="/wiki/Rosetta_Code" title="Visit the main page"></a></div>
 
 
<div class="portal" id='p-Community'>
<h5>Community</h5>
<div class="body">
<ul>
<li id="n-Twitter"><a href="http://twitter.com/rosettacode" rel="nofollow">Twitter</a></li>
<li id="n-Chat.2FIRC"><a href="/wiki/Special:WebChat">Chat/IRC</a></li>
<li id="n-Planet"><a href="http://rosettacode.org/planet" rel="nofollow">Planet</a></li>
<li id="n-The-Village-Pump"><a href="/wiki/Rosetta_Code:Village_Pump">The Village Pump</a></li>
<li id="n-Finances"><a href="/wiki/Rosetta_Code:Finances">Finances</a></li>
</ul>
</div>
</div>
 
 
<div class="portal" id='p-Explore'>
<h5>Explore</h5>
<div class="body">
<ul>
<li id="n-Languages"><a href="/wiki/Category:Programming_Languages">Languages</a></li>
<li id="n-Tasks"><a href="/wiki/Category:Programming_Tasks">Tasks</a></li>
<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
<li id="n-Similar-sites"><a href="/wiki/Help:Similar_Sites">Similar sites</a></li>
<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
</ul>
</div>
</div>
 
 
<div class="portal" id='p-Misc'>
<h5>Misc</h5>
<div class="body">
 
<g:plusone></g:plusone>
 
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
<a href="https://twitter.com/share" class="twitter-share-button" data-lang="en" data-size="large" data-hashtags="rosettacode">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
<script src="http://www.stumbleupon.com/hostedbadge.php?s=2"></script> </div>
</div>
 
 
 
 
<div class="portal" id='p-tb'>
<h5>Toolbox</h5>
<div class="body">
<ul>
<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Bitcoin/address_validation" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Bitcoin/address_validation" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
<li id="t-print"><a href="/mw/index.php?title=Bitcoin/address_validation&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
<li id="t-permalink"><a href="/mw/index.php?title=Bitcoin/address_validation&amp;oldid=182264" title="Permanent link to this revision of the page">Permanent link</a></li>
<li id="t-smwbrowselink"><a href="/wiki/Special:Browse/Bitcoin-2Faddress_validation" title="Special:Browse/Bitcoin-2Faddress validation">Browse properties</a></li> </ul>
</div>
</div>
 
 
 
</div>
 
 
<div id="footer">
<ul id="footer-info">
<li id="footer-info-lastmod"> This page was last modified on 13 May 2014, at 10:34.</li>
<li id="footer-info-copyright">Content is available under <a class="external" href="http://www.gnu.org/licenses/fdl-1.2.html">GNU Free Documentation License 1.2</a>.</li>
</ul>
<ul id="footer-places">
<li id="footer-places-privacy"><a href="/wiki/Rosetta_Code:Privacy_policy" title="Rosetta Code:Privacy policy">Privacy policy</a></li>
<li id="footer-places-about"><a href="/wiki/Rosetta_Code:About" title="Rosetta Code:About">About Rosetta Code</a></li>
<li id="footer-places-disclaimer"><a href="/wiki/Rosetta_Code:General_disclaimer" title="Rosetta Code:General disclaimer">Disclaimers</a></li>
</ul>
<ul id="footer-icons" class="noprint">
<li id="footer-copyrightico">
<a href="http://www.gnu.org/licenses/fdl-1.2.html"><img src="/mw/skins/common/images/gnu-fdl.png" alt="GNU Free Documentation License 1.2" width="88" height="31"/></a>
</li>
<li id="footer-poweredbyico">
<a href="//www.mediawiki.org/"><img src="/mw/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31"/></a>
<a href="http://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><img src="/mw/extensions/SemanticMediaWiki/skins/images/smw_button.png" alt="Powered by Semantic MediaWiki" width="88" height="31"/></a>
</li>
</ul>
<div style="clear:both"></div>
</div>
 
<script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script src="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["mediawiki.user","mediawiki.page.ready","mediawiki.searchSuggest"], null, true);
}</script>
<script type="text/javascript">/* CloudFlare analytics upgrade */
</script>
<script src="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
 
</body>
</html>

