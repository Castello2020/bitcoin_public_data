http://dailyjs.com/page9/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 06:05:54 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "188ab1-18a88-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 25207
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/11/node-roundup">Node Roundup: parse5, redis-timeseries, request-as-curl</a></h2>
      <div class="meta">
        <span class="date">11 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/11/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#curl">curl</a>
          
            <a href="/tags.html#html">html</a>
          
            <a href="/tags.html#parsing">parsing</a>
          
            <a href="/tags.html#redis">redis</a>
          
            <a href="/tags.html#statistics">statistics</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='parse5'>parse5</h3>

<p>parse5 (GitHub: <a href='https://github.com/inikulin/parse5'>inikulin / parse5</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/parse5'>parse5</a>) by Ivan Nikulin is a new HTML5 parser, based on the WhatWG HTML5 standard. It was built for a commercial project called <a href='http://testcafe.devexpress.com/'>TestCaf√©</a>, when the authors found other HTML5 parsers to be too slow or inaccurate.</p>

<p>It&#8217;s used like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Parser</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;parse5&#39;</span><span class='p'>).</span><span class='nx'>Parser</span><span class='p'>;</span>
<span class='kd'>var</span> <span class='nx'>parser</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Parser</span><span class='p'>();</span>
<span class='kd'>var</span> <span class='nb'>document</span> <span class='o'>=</span> <span class='nx'>parser</span><span class='p'>.</span><span class='nx'>parse</span><span class='p'>(</span><span class='s1'>&#39;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Hi there!&lt;/body&gt;&lt;/html&gt;&#39;</span><span class='p'>)</span>
<span class='kd'>var</span> <span class='nx'>fragment</span> <span class='o'>=</span> <span class='nx'>parser</span><span class='p'>.</span><span class='nx'>parseFragment</span><span class='p'>(</span><span class='s1'>&#39;&lt;title&gt;Parse5 is &amp;#102;&amp;#117;&amp;#99;&amp;#107;ing awesome!&lt;/title&gt;&lt;h1&gt;42&lt;/h1&gt;&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>I had a look at the source, and it doesn&#8217;t look like it was made with a parser generator. It has a preprocessor, tokenizer, and special UTF-8 handling. There are no dependencies, other than <a href='nodeunit'>nodeunit</a> for testing. The tests were derived from <a href='https://github.com/html5lib'>html5lib</a>, and include over 8000 test cases.</p>

<p>If you wanted to use it, you&#8217;ll probably need to write a &#8220;tree adapter&#8221;. Ivan has included an <a href='https://github.com/inikulin/parse5/blob/master/lib/default_tree_adapter.js'>example tree adapter</a>, which reminds me of writing SAX parser callbacks.</p>

<p>Ivan also sent in <a href='https://github.com/inikulin/mods'>mods</a>, which is a module system designed to need less boilerplate than AMD-style libraries.</p>

<h3 id='redis_time_series'>Redis Time Series</h3>

<p>Tony Sokhon sent in redis-timeseries (GitHub: <a href='https://github.com/tonyskn/node-redis-timeseries'>tonyskn / node-redis-timeseries</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/redis-timeseries'>redis-timeseries</a>), a project for managing time series data. I&#8217;ve used Redis a few times as a data sink for projects that need realtime statistics, and I always found it worked well for the modest amounts of data my projects generated. This project gives things a bit more structure &#8211; you can create instances of time series and then record hits, then query them later.</p>

<p>A time series has a granularity, so you can store statistics at whatever resolution you require: <code>ts.getHits(&#39;your_stats_key&#39;, &#39;1second&#39;, ts.minutes(3), callback)</code>. This module is used by Tony&#8217;s <a href='https://github.com/tonyskn/node-dashboard'>dashboard</a> project, which can be used to make a realtime dashboard.</p>

<h3 id='requestascurl'>request-as-curl</h3>

<p>request-as-curl (GitHub: <a href='https://github.com/azproduction/node-request-as-curl'>azproduction / node-request-as-curl</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/request-as-curl'>request-as-curl</a>) by Mikhail Davydov serialises options for <code>http.ClientRequest</code> into an equivalent <code>curl</code> command. It also works for Express.</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// http.ClientRequest:</span>
<span class='kd'>var</span> <span class='nx'>req</span> <span class='o'>=</span> <span class='nx'>request</span><span class='p'>(</span><span class='s1'>&#39;http://google.com/&#39;</span><span class='p'>,</span> <span class='p'>{</span><span class='nx'>method</span><span class='o'>:</span> <span class='s1'>&#39;POST&#39;</span><span class='p'>,</span> <span class='nx'>json</span><span class='o'>:</span> <span class='nx'>data</span><span class='p'>},</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>error</span><span class='p'>,</span> <span class='nx'>response</span><span class='p'>,</span> <span class='nx'>expected</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>curlify</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>.</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>);</span>
  <span class='c1'>// curl &#39;http://google.com&#39; -H &#39;accept: application/json&#39; -H &#39;content-type: application/json&#39; -H &#39;connection: keep-alive&#39; --data &#39;{&quot;data&quot;:&quot;data&quot;}&#39; --compressed</span>
<span class='p'>});</span>

<span class='c1'>// Express:</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>req</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>curlify</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>);</span>
  <span class='c1'>// curl &#39;http://localhost/pewpew&#39; -H &#39;x-real-ip: 127.0.0.1&#39; -H etc...</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I imagine Mikhail has been using this so he can replicate requests based on logs to aid in debugging.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/10/feathersjs-angular-snap-file-size">Feathers, Angular Snap.js, File-size.js</a></h2>
      <div class="meta">
        <span class="date">10 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/10/feathersjs-angular-snap-file-size/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#angularjs">angularjs</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='feathers'>Feathers</h3>

<p><a href='http://feathersjs.com/'>Feathers</a> (GitHub: <a href='https://github.com/feathersjs/feathers'>feathersjs / feathers</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/feathers'>feathers</a>), sent in by Matthew Phillips, is an Express-based web framework for creating RESTful services that use Socket.IO.</p>

<p>Because it&#8217;s based on Express, you can use existing Connect middleware. That means you could drop in an authentication module like <a href='https://npmjs.org/package/everyauth'>everyauth</a>, and your preferred client-side framework (like Backbone.js or AngularJS), and then use the Feathers conventions for CRUD-style server-side code and Socket.IO events.</p>

<p>Matthew wrote a glowing email about it &#8211; he&#8217;s been using it for client project. I had a look at the source, and it&#8217;s actually pretty lightweight: it&#8217;s basically based around events that bridge between Express routes and Socket.IO.</p>

<p>The main author, David Luecke, has built it with <a href='https://npmjs.org/package/rubberduck'>Rubberduck</a> and <a href='https://npmjs.org/package/uberproto'>Uberproto</a>, two of his other modules. Uberproto is basically inheritance sugar, and Rubberduck allows methods to be wrapped with events.</p>

<h3 id='angular_snapjs'>Angular Snap.js</h3>

<p><a href='http://jtrussell.github.io/angular-snap.js/'>Angular Snap.js</a> (GitHub: <a href='https://github.com/jtrussell/angular-snap.js'>jtrussell / angular-snap.js</a>, License: <em>MIT</em>) by Justin Russell is a <a href='https://github.com/jakiestfu/Snap.js'>Snap.js</a> directive for AngularJS. Snap.js makes mobile-style &#8220;shelf&#8221; layouts a lot easier, and is intuitive to use &#8211; touch gestures work as expected, and click-dragging the mouse opens the drawer as well.</p>

<p>The directive can be used as an attribute, or event an element:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>snap-drawer</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;p&gt;</span>I&#39;m a drawer! I maybe I&#39;ve got some sweet navigation links.<span class='nt'>&lt;/p&gt;</span>
<span class='nt'>&lt;/div&gt;</span>

<span class='nt'>&lt;snap</span><span class='na'>-drawer</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;p&gt;</span>I&#39;m a drawer! I maybe I&#39;ve got some sweet navigation links.<span class='nt'>&lt;/p&gt;</span>
<span class='err'>&lt;</span>/snap-drawer&gt;
</code></pre>
</div>
<h3 id='filesizejs'>File-size.js</h3>

<p>File-size.js (GitHub: <a href='https://github.com/Nijikokun/file-size'>Nijikokun / file-size</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/file-size'>file-size</a>) by Nijiko Yonskai is a module for generating human-readable file sizes. For example, <code>filesize(186457865).to(&#39;MB&#39;)</code> returns <code>177.82</code>.</p>

<p>It supports various specifications, including JEDEC and IEC, and it works in browsers and Node.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/09/lmd-hoodie-mozilla">Lazy Module Declaration, Mozilla Funds Hoodie</a></h2>
      <div class="meta">
        <span class="date">09 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/09/lmd-hoodie-mozilla/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='lazy_module_declaration'>Lazy Module Declaration</h3>

<p><img src='/images/posts/lmd.png' alt='LMD' /></p>

<p><a href='http://lmdjs.org/'>Lazy Module Declaration</a> (GitHub: <a href='https://github.com/azproduction/lmd'>azproduction / lmd</a>, License: <em>MIT</em>), or LMD, is a module &#8220;assembler&#8221;. Modules are written with CommonJS, then you add a JSON file that describes the build process. This file can be generated by the <code>lmd</code> command-line tool. The command-line tool can selectively include client-side specific functionality, so you can do things like build with IE optimisations.</p>

<p>It can also load CSS, and has Node integration. Interestingly, <code>require</code> seems to be decorated rather than overloaded:</p>

<blockquote>
<p>require() is not overloaded:</p>

<ul>
<li>require.css() for css</li>

<li>require.js() for js (non LMD-modules)</li>

<li>require.async() for async LMD-modules (objects, strings, modules)</li>
</ul>
</blockquote>

<p>The main contributor (Mikhail Davydov) works at Yandex, and is writing some interesting features for it. For example, there&#8217;s a screenshot of a Mac-style GUI tool for LMD that looks impressive.</p>

<h3 id='mozilla_funds_hoodie'>Mozilla Funds Hoodie</h3>

<p>I wrote about <a href='http://hood.ie/'>Hoodie</a> a few weeks ago, and the project recently had some good news: <a href='http://blog.hood.ie/2013/12/mozilla/'>Mozilla donated $25,000</a>.</p>

<blockquote>
<p>Team Hoodie is proud to announce that Mozilla is supporting Hoodie with a $25,000 donation. Mozilla has interest in Hoodie with their Appmaker initiative. The donation will ensure that Hoodie development will commence faster and some early goals are support for Persona authentication in Hoodie, as well as a Docker-based ‚ÄúHoodie as a Service‚Äù setup. In the spirit of both Mozilla and Hoodie, all this work will be available as Open Source software.</p>
</blockquote>

<p>That&#8217;s encouraging because there are many projects similar to Hoodie vying for wider adoption, so this seems like a much needed feather in Hoodie&#8217;s cap.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/06/notch-npm_lazy">Notch and WebGL, npm_lazy</a></h2>
      <div class="meta">
        <span class="date">06 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/06/notch-npm_lazy/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='notch_webgl_dart'>Notch, WebGL, Dart</h3>

<p>Brandon Jones wrote a summary of Notch&#8217;s WebGL and-Dart related activity: <a href='http://blog.tojicode.com/2013/12/notch-webgl-dart-and-ramping-up-quickly.html'>Notch, WebGL, Dart, and ramping up quickly</a>:</p>

<blockquote>
<p>I can&#8217;t tell you how many time I see hobby developers saying &#8221;I&#8217;m building a game!&#8221; and what they actually have to show for it is a really complicated system for loading meshes and shaders. It&#8217;s all well and good to think about long term goals and engine structure and such, but if you&#8217;re going to build a game then please build a freaking game! Don&#8217;t build an engine that you will someday build a game on top of, because you will never get past step one.</p>
</blockquote>

<p>Dart seems to appeal to Notch, maybe because of his Java background. It&#8217;s cool seeing his work come together on Twitter, from the initial ideas to working code with screenshots.</p>

<h3 id='npm_lazy'>npm_lazy</h3>

<p>Sometimes npm goes down (which is why you should <a href='https://scalenpm.org/'>donate to npm</a>). But there&#8217;s a solution: mirror it! If you&#8217;re too lazy to mirror the whole thing, how about just caching the modules you need to deploy your projects? That&#8217;s where <a href='http://mixu.net/npm_lazy/'>npm_lazy</a> by Mikito Takada comes in.</p>

<p>This is a local cache for npm. It has a configuration file that allows you to tailor it to your needs &#8211; you can set the cache lifespan, HTTP timeout, and so on. Once you&#8217;ve set that up, you can run it as a server. Then you just use <code>npm --registry</code> to set the server as your npm registry.</p>

<p>It has some caching logic &#8211; anything that isn&#8217;t local will be fetched, and metadata is updated when a module is requested the first time after a restart.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/05/multiprocess-firefox">Multiprocess Firefox</a></h2>
      <div class="meta">
        <span class="date">05 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/05/multiprocess-firefox/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#firefox">firefox</a>
          
            <a href="/tags.html#browsers">browsers</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/firefox-multi.png' alt='Multiprocess Firefox' /></p>

<p>I know a lot of DailyJS readers who use Chrome and Safari as their main browsers, partly due to iOS and Android&#8217;s popularity, and partly because Chrome&#8217;s initial performance gains enticed them away from Firefox. The big issue over the last few years has been the fact browsers are switching to using multiple processes, the idea being that resources can be shared better and fallout from crashes can be mitigated.</p>

<p>If Firefox isn&#8217;t your main browser, you probably use it for testing or just try it out every few months to see what&#8217;s been going on. The thing most of us have been looking for is Chrome (and apparently IE)-style multi-process support. Bill McCloskey has written a post about this very topic: <a href='http://billmccloskey.wordpress.com/2013/12/05/multiprocess-firefox/'>Multiprocess Firefox</a>. Bill is a programmer at Mozilla, and you may remember his post about <a href='https://blog.mozilla.org/javascript/2012/08/28/incremental-gc-in-firefox-16/'>incremental GC in Firefox</a>.</p>

<p>Although the work so far sounds promising, there are some major technical hurdles. These partly relate to the nature of how JavaScript interacts with the DOM, and how Firefox handles add-ons:</p>

<blockquote>
<p>JavaScript execution and layout happen on the main thread, and they block the event loop. Running these components on a separate thread is difficult because they access data, like the DOM, that are not thread-safe. As an alternative, we&#8217;ve considered allowing the event loop to run in the middle of JavaScript execution, but doing so would break a lot of assumptions made by other parts of Firefox (not to mention add-ons).</p>
</blockquote>

<blockquote>
<p>Like the threaded approach, Firefox is able to run its event loop while JavaScript and layout are running in a content process. But unlike threading, the UI code has no access to content DOM or other content data structures, so there is no need for locking or thread-safety. The downside, of course, is that any code in the Firefox UI process that needs to access content data must do so explicitly through message passing.</p>
</blockquote>

<p>You might not realise it, but Firefox itself uses a lot of JavaScript:</p>

<blockquote>
<p>Content scripts. <a href='https://wiki.mozilla.org/IPDL'>IPDL</a> takes care of passing messages in C++, but much of Firefox is actually written in JavaScript. Instead of using IPDL directly, JavaScript code relies on the message manager to communicate between processes.</p>
</blockquote>

<blockquote>
<p>We decided to do the message passing in JavaScript instead, since it&#8217;s easier and faster to prototype things there. Rather than change every docshell-using accessor to test if we&#8217;re using multiprocess browsing, we decided to create a new XBL binding that applies only to remote <code>&lt;browser&gt;</code> elements. It is called remote-browser.xml, and it extends the existing browser.xml binding.</p>
</blockquote>

<p>If you&#8217;re an add-on author, you&#8217;ll be pleased to hear add-ons are being taken seriously. However, Mozilla may need your help in the future:</p>

<blockquote>
<p>We realize that add-ons are extremely important to Firefox users, and we have no intention of abandoning or disrupting add-ons. At the same time, we feel strongly that users will appreciate the security and responsiveness benefits of multiprocess Firefox, so we&#8217;re willing to work very hard to get add-ons on board. We&#8217;re very interested in working with add-on developers to ensure that their add-ons work well in multiprocess Firefox.</p>
</blockquote>

<p>It&#8217;s hard to imagine Firefox OS not using multiple processes, and Bill mentions this early on in the post:</p>

<blockquote>
<p>Firefox OS relies heavily on the multiprocessing and IPC code introduced during Electrolysis.</p>
</blockquote>

<p><a href='https://wiki.mozilla.org/Electrolysis'>Electrolysis</a> was a project to use multiple processes, but the focus was tighter than changing the desktop browser. Firefox&#8217;s layout engine, Gecko, supports multiple threads, and the &#8220;Gecko platform&#8221; supports multiple processes. But, as the Electrolysis wiki page points out, the Firefox frontend does not currently use multiple processes.</p>

<p>Will we see a browser share increase when Firefox is updated to support multiple processes? I don&#8217;t know, but as a front-end developer I&#8217;m excited about seeing this feature released sooner rather than later.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/04/node-roundup">Node Roundup: Ben Noordhuis, Node.app, Infect.js</a></h2>
      <div class="meta">
        <span class="date">04 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/04/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#objective-c">objective-c</a>
          
            <a href="/tags.html#di">di</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='ben_noordhuis'>Ben Noordhuis</h3>

<p>Every time I write about a new Node release, I notice how much work Ben Noordhuis has done. He&#8217;s been an important contributor to Node and libuv, and has always seemed patient and polite on the mailing list.</p>

<p><a href='http://blog.nodejs.org/2013/12/03/bnoordhuis-departure/'>Ben Noordhuis decided to leave Node and libuv</a>. If you&#8217;re not familiar with his work, take a look at the <a href='https://github.com/joyent/node/blob/master/ChangeLog'>Node ChangeLog</a> &#8211; Ben&#8217;s commits go back to summer 2010. Ben will be missed!</p>

<h3 id='nodeapp'>Node.app</h3>

<p><img src='/images/posts/nodeapp.png' alt='Node.app' /></p>

<p><a href='http://nodeapp.org/'>Node.app</a> (GitHub: <a href='https://github.com/node-app/Interpreter'>node-app / Interpreter</a>, License: <em>MIT</em>) is a project to bring Node&#8217;s API to JavaScriptCore. The aim is a drop-in replacement that&#8217;s compatible with Node&#8217;s master branch, and to reuse the JavaScript in Node&#8217;s <code>lib/</code> directory (the core modules).</p>

<p>It needs the latest iOS or Mac OS X, and if you check out the source you&#8217;ll need to get the submodules (<code>git submodule update --init --recursive</code>).</p>

<p>The list of currently working modules includes partial <code>fs</code> support, <code>util</code>, <code>url</code>, <code>events</code>, <code>path</code>, <code>stream</code>, <code>querystring</code>, and <code>assert</code>. The <code>process</code> object is also supported.</p>

<p>I&#8217;ve only had a brief look at the source in <a href='https://github.com/node-app/Nodelike/'>node-app / Nodelike</a>, but it looks like they&#8217;re writing Objective-C to add the necessary libuv bindings. This is the code you&#8217;ll find in <code>src/</code> in <a href='https://github.com/joyent/node'>joyent / node</a>.</p>

<h3 id='infectjs'>Infect.js</h3>

<p><a href='http://blog.amwmedia.com/post/66879608871/infect-js-infectiously-simple-dependency-injection'>Infect.js</a> (GitHub: <a href='https://github.com/amwmedia/infect.js'>amwmedia / infect.js</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/infect'>infect</a>) by Andrew Worcester is a dependency injection module. It&#8217;s not specifically for Node, but I was intrigued by the idea of bringing AngularJS-style DI to Node projects.</p>

<blockquote>
<p>Registering a dependency. A simple call to <code>infect.set()</code> with the name you want to use, and the mutable object you&#8217;d like to register will do the trick. In the example below we are using a function, but you can register any type of mutable value (Functions, Arrays, Objects, etc).</p>
</blockquote>
<div class='highlight'><pre><code class='javascript'><span class='nx'>infect</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;Logger&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>str</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// prepend a time to every log line</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>((</span><span class='k'>new</span> <span class='nb'>Date</span><span class='p'>()).</span><span class='nx'>toLocaleTimeString</span><span class='p'>()</span> <span class='o'>+</span> <span class='s1'>&#39; ==&gt; &#39;</span> <span class='o'>+</span> <span class='nx'>str</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It supports function injection (<code>infect.func</code>) and class injection (<code>infect.func</code> with a constructor function). Andrew has included jsFiddle examples in the readme, so you can play around with the code.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/03/angular-charts-three-tinycore">AngularJS D3 Charts, Yo three.js, TinyCore.js</a></h2>
      <div class="meta">
        <span class="date">03 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/03/angular-charts-three-tinycore/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#architecture">architecture</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#yeoman">yeoman</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='angularjs_d3_charts'>AngularJS D3 Charts</h3>

<p>Chinmay sent in <a href='http://chinmaymk.github.io/angular-charts/'>Angular-charts</a> (GitHub: <a href='https://github.com/chinmaymk/angular-charts'>chinmaymk / angular-charts</a>, License: <em>MIT</em>, bower: <em>angular-charts</em>), a set of AngularJS directives for graphs that use D3. To use it, include <code>angular-charts.min.js</code> and then inject the dependency with <code>angular.module(&#39;yourApp&#39;, [&#39;angularCharts&#39;])</code>.</p>

<p>Configuration options for graphs can be included using directives, or passed as options in JavaScript. There are also events for <code>mouseover</code>, <code>mouseout</code>, and <code>click</code>. The charts have animations, tooltips, and the values will be adapted to the graph&#8217;s size as necessary.</p>

<h3 id='a_yeoman_generator_for_threejs'>A Yeoman Generator for three.js</h3>

<p>If you&#8217;re looking for a friendly way to get started with three.js, then Timmy Willison&#8217;s <a href='http://timmywillison.com/post/68797881874/a-yeoman-generator-for-three-js'>Yeoman generator</a> (GitHub: <a href='https://github.com/timmywil/generator-threejs'>timmywil / generator-threejs</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/generator-threejs'>generator-threejs</a>) may be what you&#8217;re looking for.</p>

<p>The template it outputs renders a red cube, and it includes the usual Yeoman stuff like a Grunt build script and a web server for development.</p>

<h3 id='tinycorejs'>TinyCore.js</h3>

<p>TinyCore.js (GitHub: <a href='https://github.com/mawrkus/tinycore'>mawrkus / tinycore</a>, License: <em>MIT</em>) by Marc Mignonsin is a library for organising projects around modules:</p>

<blockquote>
<p>We use dependency injection to provide the modules the tools they need to perform their job. Instead of having a single sandbox object with a lot of methods, a module defines explicitly the tools it needs. The mediator, that provides a way of communication for the modules, is one of the default tools that has already been implemented (located in the &#8220;tools/mediator&#8221; folder).</p>
</blockquote>

<p>Modules have an extensible, event-based API. There&#8217;s also a factory class, called &#8220;Toolbox&#8221;:</p>

<blockquote>
<p>In order to provide the modules the tools they need to perform their job, TinyCore uses a tools factory, <code>TinyCore.Toolbox</code>. A tool can be registered at any time for later use. Whenever a module is instantiated, the tools specified in the module definition will be requested and injected as parameters of the creator function.</p>
</blockquote>

<p>TinyCore is written with testing in mind, and has an extension for Jasmine.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/02/connect-cache-manifest-pushnot">connect-cache-manifest, pushnot</a></h2>
      <div class="meta">
        <span class="date">02 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/02/connect-cache-manifest-pushnot/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#apps">apps</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='connectcachemanifest'>connect-cache-manifest</h3>

<p>connect-cache-manifest (GitHub: <a href='https://github.com/dai-shi/connect-cache-manifest'>dai-shi / connect-cache-manifest</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/connect-cache-manifest'>connect-cache-manifest</a>) by Daishi Kato is Express middleware for generating a HTML5 cache manifest file. Manifests basically list the files needed by the application when it&#8217;s offline, so any essential client-side assets can be cached by the browser.</p>

<p>Daishi&#8217;s middleware takes an object and then generates a suitable manifest file. It can recurse through directories so including lists of JavaScript, CSS, and images is easier.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>cacheManifest</span><span class='p'>({</span>
  <span class='nx'>manifestPath</span><span class='o'>:</span> <span class='s1'>&#39;/application.manifest&#39;</span><span class='p'>,</span>
  <span class='nx'>files</span><span class='o'>:</span> <span class='p'>[{</span>
    <span class='nx'>file</span><span class='o'>:</span> <span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/public/js/foo.js&#39;</span><span class='p'>,</span>
    <span class='nx'>path</span><span class='o'>:</span> <span class='s1'>&#39;/js/foo.js&#39;</span>
  <span class='p'>},</span> <span class='p'>{</span>
    <span class='nx'>dir</span><span class='o'>:</span> <span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/public/css&#39;</span><span class='p'>,</span>
    <span class='nx'>prefix</span><span class='o'>:</span> <span class='s1'>&#39;/css/&#39;</span>
  <span class='p'>},</span> <span class='p'>{</span>
    <span class='nx'>dir</span><span class='o'>:</span> <span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/views&#39;</span><span class='p'>,</span>
    <span class='nx'>prefix</span><span class='o'>:</span> <span class='s1'>&#39;/html/&#39;</span><span class='p'>,</span>
    <span class='nx'>ignore</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='sr'>/\.bak$/</span><span class='p'>.</span><span class='nx'>test</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>);</span> <span class='p'>},</span>
    <span class='nx'>replace</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>x</span><span class='p'>.</span><span class='nx'>replace</span><span class='p'>(</span><span class='sr'>/\.jade$/</span><span class='p'>,</span> <span class='s1'>&#39;.html&#39;</span><span class='p'>);</span> <span class='p'>}</span>
  <span class='p'>}],</span>
  <span class='nx'>networks</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;*&#39;</span><span class='p'>],</span>
  <span class='nx'>fallbacks</span><span class='o'>:</span> <span class='p'>[]</span>
<span class='p'>}));</span>
</code></pre>
</div>
<h3 id='pushnot'>pushnot</h3>

<p><img src='/images/posts/listjs-logo.png' alt='pushnot' /></p>

<p><a href='http://me.dt.in.th/page/pushnot/'>pushnot</a> (GitHub: <a href='https://github.com/dtinth/pushnot'>dtinth / pushnot</a>, License: <em>MIT</em>) by Thai Pangsakulyanont is a push notification server based on √òMQ, Express, and Zephyros. It supports notification encryption and can be hooked up to Growl.</p>

<blockquote>
<p>Pushnot consists of three major components: The server that clients can send a notification to, and subscribers can subscribe to these notifications. The client is any application that wants to send a notification to the user. The subscriber waits for the server to push the notification and notifys the user.</p>
</blockquote>

<p>It&#8217;s got an interesting mix of technologies, if you&#8217;re looking for an Express application that uses pub/sub, and it has a command-line interface as well.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/29/listjs-part">List.js, _part_</a></h2>
      <div class="meta">
        <span class="date">29 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/29/listjs-part/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#functional">functional</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='listjs'>List.js</h3>

<p><img src='/images/posts/listjs-logo.png' alt='List.js' /></p>

<p>Version 1.0 of <a href='http://listjs.com/'>List.js</a> (GitHub: <a href='https://github.com/javve/list.js'>javve / list.js</a>, Bower: <em>javve/list.js</em>, License: <em>MIT</em>) by Jonny Str√∂mberg has been released. It&#8217;s a small library for making tables searchable, sortable, and filterable. It also works on unordered lists and divs, and supports templating so you can style it fairly easily. It doesn&#8217;t have any dependencies, and the API is straightforward JavaScript:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>listObj</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>({</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Jonny&#39;</span><span class='p'>,</span> <span class='nx'>city</span><span class='o'>:</span> <span class='s1'>&#39;Stockholm&#39;</span> <span class='p'>});</span>

<span class='nx'>listObj</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>([</span>
  <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Gustaf&#39;</span><span class='p'>,</span> <span class='nx'>city</span><span class='o'>:</span> <span class='s1'>&#39;Sundsvall&#39;</span> <span class='p'>}</span>
<span class='p'>,</span> <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Jonas&#39;</span><span class='p'>,</span> <span class='nx'>city</span><span class='o'>:</span> <span class='s1'>&#39;Berlin&#39;</span> <span class='p'>}</span>
<span class='p'>]);</span>
</code></pre>
</div>
<p>There are also <a href='http://listjs.com/docs/plugins'>plugins for List.js</a>. The project includes tests and can be installed with Bower or Component.</p>

<h3 id='the__part__library'>The _part_ Library</h3>

<p><a href='http://autosponge.github.io/blog/2013/11/27/_part_/'>_part_</a> (GitHub: <a href='https://github.com/AutoSponge/_part_'>AutoSponge / <em>part</em></a>, License: <em>MIT</em>) by Paul Grenier is a small library for making native methods available as partially applied functions.</p>

<blockquote>
<p>In <em>part</em>, you use typical OO functions (like the ones in native prototypes) to create two functional counterparts, &#8220;left-part&#8221; and &#8220;right-part&#8221;, which partially apply the receiver or parameters respectively.</p>
</blockquote>

<p>While I was reading about this library I noticed the author has several other interesting posts on his blog:</p>

<ul>
<li><a href='http://autosponge.github.io/blog/2013/02/09/variadic-composition-without-recursion/'>Variadic Composition Without Recursion</a></li>

<li><a href='http://autosponge.github.io/blog/2012/09/22/sparse-arrays-for-string-building/'>Sparse Arrays For String Building</a></li>

<li><a href='http://autosponge.github.io/blog/2012/09/17/indexof-vs-regexp/'>Indexof Vs Regexp</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/28/javascript-survey">JavaScript Developer Survey 2013</a></h2>
      <div class="meta">
        <span class="date">28 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/28/javascript-survey/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#community">community</a>
          
            <a href="/tags.html#surveys">surveys</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Here is the <a href='https://docs.google.com/forms/d/1YHtjphKX177trMns41SK16pPXqQe44FoeeFUNtz8BBM/viewform'>JavaScript Developer Survey for 2013</a>! You have two weeks from now to complete the survey (the 12th of December).</p>
<iframe marginheight='0' src='https://docs.google.com/forms/d/1YHtjphKX177trMns41SK16pPXqQe44FoeeFUNtz8BBM/viewform?embedded=true' marginwidth='0' frameborder='0' height='300' width='530'>Loading...</iframe>
<p>I asked for help with the questions <a href='http://dailyjs.com/2013/11/21/developer-survey/'>last week</a>, and the response was incredible! I really appreciate the suggestions, and I&#8217;ve made a list of the pull requests that I accepted. Any that weren&#8217;t accepted were either due to a clash with another suggestion, or lack of time on my part.</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/22'>Aaron Nielsen</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/1'>Oscar Godson</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/21'>Raynos</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/20'>Raynos</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/19'>Raynos</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/18'>Raynos</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/23'>Raynos</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/7'>Steve Axthelm</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/12'>Veselin Todorov</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/17'>Vinicius Soares Batista</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/issues/16'>Tomasz Primke</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/8'>Justin J. Moses</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/13'>Dan Kapusta</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/11'>Ben Foxall</a></li>

<li><a href='https://github.com/alexyoung/dailyjs-survey/pull/5'>eyy</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/27/scalenpm">Scale npm</a></h2>
      <div class="meta">
        <span class="date">27 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/27/scalenpm/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/scalenpm.jpg' alt='Scalenpm' /></p>

<p>The official Node blog has a post about issues scaling npm: <a href='http://blog.nodejs.org/2013/11/26/npm-post-mortem/'>Keeping The npm Registry Awesome</a>. It explains some of the recent downtime and outlines plans to improve the situation.</p>

<blockquote>
<p>The root cause of these downtime was insufficient resources: both hardware and human. This is a full post-mortem where we will be look at how npmjs.org works, what went wrong, how we changed the previous architecture of The npm Registry to fix it, as well next steps we are taking to prevent this from happening again.</p>
</blockquote>

<p>The post is relatively lengthy and buried at the end is a plea for funding:</p>

<blockquote>
<p>But we need your help! All of these necessary improvements require more servers, more time from Nodejitsu staff and an overall increase to what we spend maintaining the public npm registry as a free service for the Node.js community.</p>
</blockquote>

<blockquote>
<p>Please take a minute now to donate at <a href='https://scalenpm.org'>https://scalenpm.org</a>!</p>
</blockquote>

<p>By burying the funding plea at the end the author was presumably trying to avoid making the post sound spammy, but seeing as most people don&#8217;t read anything on the Internet I thought I&#8217;d reiterate the point because I&#8217;m not scared of sounding spammy: <a href='https://scalenpm.org/donate'>DONATE TO NPM! SAVE FERRIS!</a></p>

<p>If you pledge $75 you&#8217;ll get benefits, like $25 credit on Nodejitsu or Iriscouch. Sounds good to me!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/26/github-avatars-amd-clean">GitHub Avatar Chrome Extension, AMDClean</a></h2>
      <div class="meta">
        <span class="date">26 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/26/github-avatars-amd-clean/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#chrome">chrome</a>
          
            <a href="/tags.html#amd">amd</a>
          
            <a href="/tags.html#build">build</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='github_avatar_chrome_extension'>GitHub Avatar Chrome Extension</h3>

<p><img src='/images/posts/avatarsforgithub.png' alt='GitHub Avatar Chrome Extension' /></p>

<p>Writing Firefox add-ons or Chrome extensions can be off-putting for those of us who are good at JavaScript but not so great at browser plugin APIs. Anas Nakawa sent in <a href='https://chrome.google.com/webstore/detail/avatars-for-github/pgjmdbklnfklcjfbonjfkdhaonlfogbb'>chrome-github-avatars</a> (GitHub: <a href='https://github.com/anasnakawa/chrome-github-avatars'>anasnakawa / chrome-github-avatars</a>, License: <em>MIT</em>) which is a Chrome extension for displaying GitHub avatars on the news feed page.</p>

<p>It might seem like a modest extension, but the reason I liked it was he used a <a href='https://github.com/yeoman/generator-chrome-extension'>Yeoman generator</a>. Anas&#8217; project includes all the stuff I&#8217;m familiar with, like Bower and jQuery, but also things that I&#8217;m not too familiar with, like Chrome&#8217;s <code>manifest.json</code>. It seems cool that you can use tools popular in the JavaScript community to create browser plugins.</p>

<h3 id='amdclean'>AMDClean</h3>

<p><a href='http://gregfranko.com/amdclean/'>AMDClean</a> (GitHub: <a href='https://github.com/gfranko/amdclean'>gfranko / amdclean</a>, License: <em>MIT</em>) by Greg Franko is a build tool for converting AMD code into standard JavaScript that works with RequireJS&#8217;s optimiser.</p>

<blockquote>
<p>By incorporating amdclean.js into the build process, there is no need for Require or Almond.</p>
</blockquote>

<blockquote>
<p>Since AMDclean rewrites your source code into standard JavaScript, it is a great fit for JavaScript library authors who want a tiny download in one file after using the RequireJS Optimizer.</p>
</blockquote>

<blockquote>
<p>So, you get great code cleanliness with AMD, reduced file sizes, improved code readability, and easy integration with other developers who may not use AMD.</p>
</blockquote>

<p>Greg notes that it also supports Grunt, so it should be easy to drop into your existing projects.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/25/responsive-comments-jquery-evergreen">ResponsiveComments, jQuery Evergreen</a></h2>
      <div class="meta">
        <span class="date">25 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/25/responsive-comments-jquery-evergreen/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#responsive">responsive</a>
          
            <a href="/tags.html#design">design</a>
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#es6">es6</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='responsivecomments'>ResponsiveComments</h3>

<p><a href='http://responsivecomments.com/'>ResponsiveComments</a> (GitHub: <a href='https://github.com/chambaz/ResponsiveComments'>chambaz / ResponsiveComments</a>, License: <em>MIT</em>) by Adam Chambers is designed to support conditional loading using HTML comments:</p>

<blockquote>
<p>Through the use of HTML comments, markup can be introduced to progressively enhance an experience as various media queries or feature detections evaluate to true.</p>
</blockquote>

<p>Data attributes are used with valid media queries to conditionally display HTML. For example:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>data-responsive-comment-media=</span><span class='s'>&quot;(min-width: 769px)&quot;</span><span class='nt'>&gt;</span>
  <span class='c'>&lt;!-- &lt;div&gt;&lt;p&gt;Any content can go in here&lt;/p&gt;&lt;/div&gt; --&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>IE 9 and below support requires the <a href='https://github.com/paulirish/matchMedia.js/'>matchMedia.js polyfill</a>, but otherwise browser support is pretty good.</p>

<h3 id='jquery_evergreen'>jQuery Evergreen</h3>

<p>What would jQuery look like if it was written for modern browsers with ES6 modules? <a href='http://webpro.github.io/jquery-evergreen/'>jQuery Evergreen</a> (GitHub: <a href='https://github.com/webpro/jquery-evergreen'>webpro / jquery-evergreen</a>, License: <em>MIT</em>, Bower: <em>jquery-evergreen</em>) by Lars Kappert is an attempt at answering that question.</p>

<blockquote>
<p>jQuery Evergreen works with modern browsers. It has the same familiar API as jQuery, and is lean and mean with the following, optional modules: selector, class, DOM, event, attr and html. The source is written in the ES6 Modules format, and transpiled to an AMD version, and a &#8220;browser global&#8221; version using the ES6 Module Transpiler.</p>
</blockquote>

<p>It&#8217;ll work with current versions of most browsers thanks to <a href='http://square.github.io/es6-module-transpiler/'>transpilation</a> and an IE9 polyfill for <code>classList</code>.</p>

<p>You can even create custom builds with Grunt, like this:</p>
<div class='highlight'><pre><code class='text'>grunt --exclude=attr,class,dom,event,html,mode,selector
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/22/webgl">WegGL Hobbit, Zombies, Debugging and Profiling Tools</a></h2>
      <div class="meta">
        <span class="date">22 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/22/webgl/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#webgl">webgl</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='weggl_hobbit_zombies'>WegGL Hobbit, Zombies</h3>

<p>There&#8217;s a Chrome Experiment called <a href='http://middle-earth.thehobbit.com/'>The Hobbit: The Desolation of Smaug</a> that has some pretty fancy effects. While I was playing with it I wondered what open source WebGL stuff people had been making, which is when I found <a href='http://goobuzz.github.io/NavMesh-Project/'>this simple zombie game</a>.</p>
<div class='image'>
  <img src='/images/posts/webgl-zombies.png' alt='' />
  <small>This ain't The Walking Dead, but where's your zombie game?</small>
</div>
<p>The source is here: <a href='https://github.com/Goobuzz/NavMesh-Project'>Goobuzz / NavMesh-Project</a>, and there&#8217;s a <a href='http://www.reddit.com/r/webgl/comments/1r844d/webgl_zombie_shooter_very_alpha/'>reddit thread</a> which I think the author started.</p>

<h3 id='webgl_debugging_and_profiling_tools'>WebGL Debugging and Profiling Tools</h3>

<p><a href='http://www.realtimerendering.com/blog/webgl-debugging-and-profiling-tools/'>WebGL Debugging and Profiling Tools</a> by Patrick Cozzi has a whole load of resources for working with WebGL. He covers a Firefox WebGL shader editor, WebGL Inspector, Chrome Canvas Inspector, Google Web Tracing Framework, and more.</p>

<p>He even includes useful performance tips:</p>

<blockquote>
<p>Depending on how many frames the GPU is behind, a better practice would be to do all the texSubImage2D calls, followed by all the reprojection draw calls, or even move the reprojection draw calls to the end of the frame with the scene draw calls. The idea here is to ensure that the texture upload is complete by the time the reprojection draw call is executed. This trades the latency of completing any one for the throughput of computing many. I have not tried it in this case so I can&#8217;t say for certain if the driver lagging behind isn&#8217;t already enough time to cover the upload.</p>
</blockquote>

<p>And is glad to see browsers including developer tools for WebGL:</p>

<blockquote>
<p>Building WebGL tools, such as the Firefox Shader Editor and Chrome Canvas Inspector, directly into the browser developer tools is the right direction. It makes the barrier to entry low, especially for projects with limited time or developers. It helps more developers use the tools and encourages using them more often, for the same reason that unit tests that run in the blink of an eye are then used frequently.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/21/developer-survey">JavaScript Developer Survey 2013: RFC</a></h2>
      <div class="meta">
        <span class="date">21 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/21/developer-survey/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#community">community</a>
          
            <a href="/tags.html#surveys">surveys</a>
          
        </span>
      </div>
      <div class="preview">
        <p><a href='http://dailyjs.com/tags.html#surveys'>Every year</a> I like to run a survey for the readers of DailyJS. It helps me figure out what I should write about, but I also share the results with the community so you can use the data however you wish.</p>

<p>This year I&#8217;ve decided to change the approach. A draft of the survey questions can be found on GitHub, here: <a href='https://github.com/alexyoung/dailyjs-survey'>alexyoung / dailyjs-survey</a>. You can fork it and send pull requests for questions you&#8217;d like to add or change.</p>

<p>After a week or so I&#8217;ll compile the changes into a Google Drive form and announce the survey has gone live so people can submit their responses.</p>

<p>I&#8217;d really appreciate input on the survey before publishing it, because it helps us get a better idea about what&#8217;s going on in the world of client-side and server-side JavaScript development.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/20/node-roundup">Node Roundup: Fowl, grunt-ec2, connect-body-rewrite</a></h2>
      <div class="meta">
        <span class="date">20 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/20/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#grunt">grunt</a>
          
            <a href="/tags.html#amazon">amazon</a>
          
            <a href="/tags.html#foundationdb">foundationdb</a>
          
            <a href="/tags.html#express">express</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='fowl'>Fowl</h3>

<p>Fowl (GitHub: <a href='https://github.com/OptimalBits/fowl'>OptimalBits / fowl</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/fowl'>fowl</a>) by Manuel Astudillo is a document and query layer for <a href='https://foundationdb.com/'>FoundationDB</a>. It provides a similar API to NoSQL databases like MongoDB, but has support for multidocument transactions:</p>

<blockquote>
<p>Transaction support is an incredibly powerful feature that simplifies server logic and helps avoiding difficult to solve race conditions.</p>
</blockquote>

<blockquote>
<p>Fowl provides a low level API based on keypaths for describing documents and its properties following CRUD semantics.</p>
</blockquote>

<p>It includes tests and each API method is documented in the readme file. Basic usage looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Open a foundationDB database</span>
<span class='nx'>fowl</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>();</span>

<span class='c1'>// Create a document (if _id not specify a GUID will be generated)</span>
<span class='kd'>var</span> <span class='nx'>john</span> <span class='o'>=</span> <span class='nx'>fowl</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='s1'>&#39;people&#39;</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>_id</span><span class='o'>:</span> <span class='s1'>&#39;john&#39;</span><span class='p'>,</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;John&#39;</span><span class='p'>,</span>
  <span class='nx'>lastname</span><span class='o'>:</span> <span class='s1'>&#39;Smith&#39;</span><span class='p'>,</span>
  <span class='nx'>balance</span><span class='o'>:</span> <span class='mi'>100</span>
<span class='p'>});</span>

<span class='c1'>// Use transactions to transfer money from one account to another</span>
<span class='kd'>var</span> <span class='nx'>tr</span> <span class='o'>=</span> <span class='nx'>fowl</span><span class='p'>.</span><span class='nx'>transaction</span><span class='p'>()</span>

<span class='nx'>tr</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>([</span><span class='s1'>&#39;people&#39;</span><span class='p'>,</span> <span class='s1'>&#39;john&#39;</span><span class='p'>,</span> <span class='s1'>&#39;balance&#39;</span><span class='p'>]).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>johnBalance</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>tr</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>([</span><span class='s1'>&#39;people&#39;</span><span class='p'>,</span> <span class='s1'>&#39;john&#39;</span><span class='p'>,</span> <span class='s1'>&#39;balance&#39;</span><span class='p'>],</span> <span class='nx'>johnBalance</span> <span class='o'>-</span> <span class='mi'>10</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='gruntec2'>grunt-ec2</h3>

<p>grunt-ec2 (GitHub: <a href='https://github.com/bevacqua/grunt-ec2'>bevacqua / grunt-ec2</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/grunt-ec2'>grunt-ec2</a>) by Nicolas Bevacqua is a set of Grunt tasks for creating, terminating, and deploying Node applications to AWS EC2 instances.</p>

<p>The deployed Node applications are served from behind an Nginx proxy. The <a href='https://github.com/bevacqua/grunt-ec2#complete-task-reference'>task reference</a> explains what each task does &#8211; there are quite a few.</p>

<p>It supports most of the things you want to do when setting up Node applications, including SSL, SSH keys for each instance, rsync support for fast and painless uploads, and hot code swaps.</p>

<h3 id='connectbodyrewrite'>connect-body-rewrite</h3>

<p>There are times when the logic of my Node web applications have seemed to need the response body to be rewritten, but in the middleware rather than the main route logic. The connect-body-rewrite (GitHub: <a href='https://github.com/rubenv/connect-body-rewrite'>rubenv / connect-body-rewrite</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/connect-body-rewrite'>connect-body-rewrite</a>) by Ruben Vermeersch makes this possible. The examples use regular expressions to replace text, based on the request headers:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;connect-body-rewrite&#39;</span><span class='p'>)({</span>
  <span class='nx'>accept</span><span class='o'>:</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>getHeader</span><span class='p'>(</span><span class='s1'>&#39;content-type&#39;</span><span class='p'>).</span><span class='nx'>match</span><span class='p'>(</span><span class='sr'>/text\/html/</span><span class='p'>);</span>
  <span class='p'>},</span>
  <span class='nx'>rewrite</span><span class='o'>:</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>body</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>body</span><span class='p'>.</span><span class='nx'>replace</span><span class='p'>(</span><span class='sr'>/&lt;\/body&gt;/</span><span class='p'>,</span> <span class='s2'>&quot;Copyright 2013 &lt;/body&gt;&quot;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>}));</span>
</code></pre>
</div>
<p>I like the way it&#8217;s designed to use an <code>accept</code> callback, because it makes it easy to see what the rewriter actually does by keeping the logic close together.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/19/chained-door">Chained, Door</a></h2>
      <div class="meta">
        <span class="date">19 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/19/chained-door/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#es6">es6</a>
          
            <a href="/tags.html#components">components</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='chained'>Chained</h3>

<p><a href='http://www.vittoriozaccaria.net/chained/'>Chained</a> (GitHub: <a href='https://github.com/vzaccaria/chained'>vzaccaria / chained</a>, License: <em>MIT</em>) is another ES6 experiment. It allows APIs that return promises to be mixed with functions that take parameters and return mutated objects. In Vittorio&#8217;s example he mixes jQuery&#8217;s network methods with Underscore.js to download JSON and then filter it:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='nv'>getUser = </span><span class='nf'>(user) -&gt;</span>
  <span class='nx'>_</span><span class='p'>(</span><span class='s'>&quot;https://npmjs.org/~</span><span class='si'>#{</span><span class='nx'>user</span><span class='si'>}</span><span class='s'>&quot;</span><span class='p'>)</span>
    <span class='p'>.</span><span class='nx'>get</span><span class='p'>()</span>
    <span class='p'>.</span><span class='nx'>extractLinks</span><span class='p'>()</span>
    <span class='p'>.</span><span class='nx'>filter</span><span class='p'>(</span><span class='nf'>-&gt;</span> <span class='o'>/</span><span class='nx'>package</span><span class='o'>/</span><span class='p'>.</span><span class='nx'>test</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>]))</span>
    <span class='p'>.</span><span class='nx'>map</span><span class='p'>(</span><span class='nf'>-&gt;</span> <span class='s'>&quot;https://npmjs.org</span><span class='si'>#{</span><span class='nx'>arguments</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>]</span><span class='si'>}</span><span class='s'>&quot;</span><span class='p'>)</span>
    <span class='p'>.</span><span class='nx'>log</span><span class='p'>()</span>

<span class='nx'>getUser</span><span class='p'>(</span><span class='s'>&quot;vzaccaria&quot;</span><span class='p'>)</span>
</code></pre>
</div>
<p>In this CoffeeScript example, methods that use promises (<code>get</code>) are mixed with functions that take objects as the first argument (<code>filter</code>, <code>map</code>), using a consistent chainable API. To make this work, Vittorio has used ES6&#8217;s introspection features.</p>

<p>The project has detailed notes in the readme about how this works. He mentions that the library came about after trying to create DSLs with JavaScript.</p>

<h3 id='door'>Door</h3>

<p>Olivier Wietrich sent in <a href='http://bredele.github.io/doors/'>Doors</a> (GitHub: <a href='https://github.com/bredele/doors'>bredele / doors</a>, License: <em>MIT</em>, component: <em>bredele/doors</em>), a module for conditionally restricting access to <code>open</code> events that are triggered when all locks are unlocked.</p>

<blockquote>
<p>[State machines and promises] both have something missing. A transition occurs when one condition is triggered. Things are not so simple in real life. You will probably have more than one condition to do something, but one condition is sufficient to not do it. Think about a door with multiple locks: you can&#8217;t open the door until all locks are unlocked.</p>
</blockquote>

<p>Looking at the documentation, it seems like the author wants to use it to restrict access to an API until certain authentication preconditions are met. There&#8217;s a simple HTML example that uses a graphical door, and two locks. You can toggle locks and add more.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/18/jquery-sourcemaps-moonjs">Moonjs, jQuery Removes Sourcemap Comments</a></h2>
      <div class="meta">
        <span class="date">18 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/18/jquery-sourcemaps-moonjs/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#space">space</a>
          
            <a href="/tags.html#simulation">simulation</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='moonjs'>Moonjs</h3>

<p><a href='http://svtsim.com/moonjs/agc.html'>Moonjs</a> (GitHub: <a href='https://github.com/siravan/moonjs'>siravan / moonjs</a>, License: <em>GPL</em>) by Shahriar Iravanian is a port of the Apollo Guidance Computer using Emscripten.</p>

<blockquote>
<p>AGC was the main computer system of the Apollo program that successfully landed 12 astronauts on Moon. There was one AGC on each of the Apollo Command Modules and another one on each Lunar Module. There was also a second backup computer system called Abort Guidance System (AGS) on the Lunar Modules, which is simulated by Virtual AGC, but not the current version of Moonjs.</p>
</blockquote>

<blockquote>
<p>Recent advances in the JavaScript language - such as optimized engines, ahead-of-time (AOT) compilation, and asm.js - make it possible to write computationally extensive applications in JavaScript. My previous experience with online JavaScript-based simulation (svtsim and hemosim) was very positive and convinced me of the suitability of the HTML5/JavaScript combination in writing portable, easy-to-use simulators.</p>
</blockquote>

<p>I was going to try figuring it out, but it reminded me of <a href='https://kerbalspaceprogram.com/'>Kerbal Space Program</a> and I got distracted&#8230;</p>

<h3 id='jquery_1110210'>jQuery 1.11.0/2.1.0</h3>

<p><a href='http://blog.jquery.com/2013/11/15/jquery-1-11-02-1-0-beta-2-released/'>jQuery 1.11.0/2.1.0 Beta 2 were released last week</a>. The beta includes AMD support, which is still the headline feature.</p>

<p>Something that I found interesting was the removal of the sourcemap comment:</p>

<blockquote>
<p>One of the changes we&#8217;ve made in this beta is to remove the sourcemap comment. Sourcemaps have proven to be a very problematic and puzzling thing to developers, generating scores of confused questions on forums like StackOverflow and causing users to think jQuery itself was broken.</p>
</blockquote>

<blockquote>
<p>We&#8217;ll still be generating and distributing sourcemaps, but you will need to add the appropriate sourcemap comment at the end of the minified file if the browser does not support manually associating map files (currently, none do). If you generate your own jQuery file using the custom build process, the sourcemap comment will be present in the minified file and the map is generated; you can either leave it in and use sourcemaps or edit it out and ignore the map file entirely.</p>
</blockquote>

<p>That fact sourcemaps generate so much confusion is worth thinking about, because it&#8217;s one of those things that people cite as making compile-to-JavaScript languages easier to work with.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/15/negative-array">Negative Array Indexes</a></h2>
      <div class="meta">
        <span class="date">15 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/15/negative-array/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#es6">es6</a>
          
            <a href="/tags.html#code-review">code-review</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Sindre Sorhus sent in <a href='https://github.com/sindresorhus/negative-array'>negative-array</a>, a module for supporting negative array indexes. It&#8217;s built using <a href='http://soft.vub.ac.be/~tvcutsem/proxies/'>ES6&#8217;s Proxy</a>.</p>

<p>Proxies allow you to run methods when certain conditions are met, which means things like profilers become easier to implement. They&#8217;re created with <code>var proxy = Proxy(target, handler)</code>, where <code>target</code> is an object that will be wrapped with the proxy, and <code>handler</code> is an object that implements the proxy API.</p>

<p>The handler can include methods like <code>has</code>, <code>defineProperty</code>, <code>getPrototypeOf</code>, and more, for controlling access to an object. For more details on how this works, see the <a href='http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies'>Direct Proxies</a> page on the ECMAScript Harmony Wiki.</p>

<p>Sindre&#8217;s module allows you to do this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>negativeArray</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;negative-array&#39;</span><span class='p'>);</span>

<span class='c1'>// adds negative array index support to any passed array</span>
<span class='kd'>var</span> <span class='nx'>unicorn</span> <span class='o'>=</span> <span class='nx'>negativeArray</span><span class='p'>([</span><span class='s1'>&#39;pony&#39;</span><span class='p'>,</span> <span class='s1'>&#39;cake&#39;</span><span class='p'>,</span> <span class='s1'>&#39;rainbow&#39;</span><span class='p'>]);</span>

<span class='c1'>// get the last item by using an negative index</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>unicorn</span><span class='p'>[</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>]);</span>
</code></pre>
</div>
<p>It&#8217;ll work in Node 0.8+ with the <code>--harmony</code> flag, and Chrome with Harmony enabled. Visit <code>chrome://flags/#enable-javascript-harmony</code> to set it up.</p>

<p>The implementation is what will probably become a classic pattern: <code>Proxy</code> is used to wrap the array instance with <code>get</code> and <code>set</code> methods that dynamically map the requested array index to something native JavaScript can handle.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Proxy</span><span class='p'>(</span><span class='nx'>arr</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>get</span><span class='o'>:</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>target</span><span class='p'>,</span> <span class='nx'>name</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='o'>+</span><span class='nx'>name</span><span class='p'>;</span>
    <span class='k'>return</span> <span class='nx'>target</span><span class='p'>[</span><span class='nx'>i</span> <span class='o'>&lt;</span> <span class='mi'>0</span> <span class='o'>?</span> <span class='nx'>target</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>+</span> <span class='nx'>i</span> <span class='o'>:</span> <span class='nx'>i</span><span class='p'>];</span>
  <span class='p'>},</span>
  <span class='nx'>set</span><span class='o'>:</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>target</span><span class='p'>,</span> <span class='nx'>name</span><span class='p'>,</span> <span class='nx'>val</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='o'>+</span><span class='nx'>name</span><span class='p'>;</span>
    <span class='k'>return</span> <span class='nx'>target</span><span class='p'>[</span><span class='nx'>i</span> <span class='o'>&lt;</span> <span class='mi'>0</span> <span class='o'>?</span> <span class='nx'>target</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>+</span> <span class='nx'>i</span> <span class='o'>:</span> <span class='nx'>i</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>val</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I like this example because it adds new functionality that feels like a language feature without changing built-in prototypes. It&#8217;s clean and fairly easy to understand once you know what <code>Proxy</code> does. If you wanted to learn about proxies but couldn&#8217;t find any good examples, then check out the source on GitHub.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/11/14/mocha-assertion-counting">Assertion Counting in Mocha</a></h2>
      <div class="meta">
        <span class="date">14 Nov 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/11/14/mocha-assertion-counting/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#mocha">mocha</a>
          
        </span>
      </div>
      <div class="preview">
        <p>A few weeks ago I wrote about node-tap, in <a href='http://dailyjs.com/2013/10/21/tap/'>Why Don&#8217;t You Use Tap?</a>. I usually use Mocha for my tests, and one thing I liked about node-tap was the idea of test plans:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;Check out my plan&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>t</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>t</span><span class='p'>.</span><span class='nx'>plan</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>
  <span class='nx'>t</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>,</span> <span class='s2'>&quot;It&#39;s ok to plan, and also end.  Watch.&quot;</span><span class='p'>);</span>
  <span class='nx'>t</span><span class='p'>.</span><span class='nx'>end</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Test plans help in situations where you want to put assertions inside asynchronous events. For example, if you&#8217;re testing a web application and it makes HTTP requests in the test cases, but you also intercept events that indicate various lifecycle events. These could be things like ensuring a notification email was sent when a user signs up, and also checking that their account was saved to the database.</p>

<p>In Mocha, such a test might look like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>describe</span><span class='p'>(</span><span class='s1'>&#39;Account creation&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>it</span><span class='p'>(</span><span class='s1'>&#39;should allow users to sign up&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>done</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>app</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;notify:accounts:create&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>account</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>assert</span><span class='p'>(</span><span class='nx'>account</span><span class='p'>,</span> <span class='s1'>&#39;expected a user account object&#39;</span><span class='p'>);</span>
      <span class='nx'>done</span><span class='p'>();</span>
    <span class='p'>});</span>

    <span class='nx'>request</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>).</span><span class='nx'>post</span><span class='p'>(</span><span class='s1'>&#39;/accounts&#39;</span><span class='p'>).</span><span class='nx'>send</span><span class='p'>(</span><span class='nx'>userDetails</span><span class='p'>).</span><span class='nx'>expect</span><span class='p'>(</span><span class='mi'>200</span><span class='p'>,</span> <span class='nx'>done</span><span class='p'>);</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>That&#8217;s OK, but it has some problems: <code>done</code> will be called twice &#8211; once when the web request finishes, and again when the email event is sent (<code>notify:accounts:create</code>).</p>

<p>We could fix this by counting how many assertions have been called:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>describe</span><span class='p'>(</span><span class='s1'>&#39;Account creation&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>it</span><span class='p'>(</span><span class='s1'>&#39;should allow users to sign up&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>done</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>expected</span> <span class='o'>=</span> <span class='mi'>2</span><span class='p'>;</span>

    <span class='kd'>function</span> <span class='nx'>checkDone</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>expected</span><span class='o'>--</span><span class='p'>;</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>expected</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>done</span><span class='p'>();</span>
      <span class='p'>}</span>
    <span class='p'>}</span>

    <span class='nx'>app</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;notify:accounts:create&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>account</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>assert</span><span class='p'>(</span><span class='nx'>account</span><span class='p'>,</span> <span class='s1'>&#39;expected a user account object&#39;</span><span class='p'>);</span>
      <span class='nx'>checkDone</span><span class='p'>();</span>
    <span class='p'>});</span>

    <span class='nx'>request</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>).</span><span class='nx'>post</span><span class='p'>(</span><span class='s1'>&#39;/accounts&#39;</span><span class='p'>).</span><span class='nx'>send</span><span class='p'>(</span><span class='nx'>userDetails</span><span class='p'>).</span><span class='nx'>expect</span><span class='p'>(</span><span class='mi'>200</span><span class='p'>,</span> <span class='nx'>checkDone</span><span class='p'>);</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Seeing <code>checkDone</code> all over my tests made me create something more generic. In the following example I use instances of an object called <code>Plan</code> that allows assertions to be counted, and <code>done</code> to only get called once the specified number of assertions have passed. This example can be run with the <code>mocha</code> command-line script.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>);</span>

<span class='kd'>function</span> <span class='nx'>Plan</span><span class='p'>(</span><span class='nx'>count</span><span class='p'>,</span> <span class='nx'>done</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>done</span> <span class='o'>=</span> <span class='nx'>done</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>count</span> <span class='o'>=</span> <span class='nx'>count</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='nx'>Plan</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>ok</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>expression</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>assert</span><span class='p'>(</span><span class='nx'>expression</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>count</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>assert</span><span class='p'>(</span><span class='kc'>false</span><span class='p'>,</span> <span class='s1'>&#39;Too many assertions called&#39;</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>count</span><span class='o'>--</span><span class='p'>;</span>
  <span class='p'>}</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>count</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>done</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='nx'>describe</span><span class='p'>(</span><span class='s1'>&#39;Asynchronous example&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>it</span><span class='p'>(</span><span class='s1'>&#39;should run two asynchronous methods&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>done</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>plan</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Plan</span><span class='p'>(</span><span class='mi'>2</span><span class='p'>,</span> <span class='nx'>done</span><span class='p'>);</span>

    <span class='nx'>setTimeout</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>plan</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>);</span>
    <span class='p'>},</span> <span class='mi'>50</span><span class='p'>);</span>

    <span class='nx'>setTimeout</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>plan</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>);</span>
    <span class='p'>},</span> <span class='mi'>25</span><span class='p'>);</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This code could be expanded to tie in with Mocha&#8217;s timeouts to display the number of missed assertions, if any. Otherwise it does the job: if any of the asynchronous callbacks don&#8217;t fire, Mocha will raise a timeout error. It also protects against calling assertions too many times, which can actually happen if you&#8217;re making your own asynchronous APIs: I&#8217;ve had cases where I&#8217;ve triggered callbacks twice by mistake. And, it ensures <code>done</code> is only called when needed.</p>

<p>The question of ensuring assertions were actually called was brought up in this issue for Chai.js: <a href='https://github.com/chaijs/chai/issues/94'>Asserting that assertions were made</a>. And, the Mocha wiki has this assertion counting snippet: <a href='https://github.com/visionmedia/mocha/wiki/Assertion-counting'>Assertion counting</a>.</p>

<p>Outside of Mocha, I found <a href='http://api.qunitjs.com/asyncTest/'>QUnit has asyncTest</a> which allows assertions to be planned like TAP-style tests. With this approach we don&#8217;t need to broker calls to <code>done</code> because it uses <a href='http://api.qunitjs.com/start/'>start</a> instead.</p>

<p>I&#8217;ve never quite found the perfect solution to this problem, however. How do you ensure assertions are triggered in Mocha, and how do you handle calling <code>done</code> in tests where there are multiple asynchronous operations?</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page8">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <strong>9</strong>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page10">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

