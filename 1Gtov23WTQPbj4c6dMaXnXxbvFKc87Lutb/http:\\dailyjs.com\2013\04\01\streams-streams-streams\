http://dailyjs.com/2013/04/01/streams-streams-streams/
HTTP/1.1 200 OK
Date: Tue, 22 Jul 2014 21:32:20 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Tue, 22 Jul 2014 17:17:01 GMT
ETag: "10448f-52e3-4fecb64467d40"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 6685
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Five Minute Guide to Streams2</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2013/04/01/streams-streams-streams">Five Minute Guide to Streams2</a></h2>

<div class="meta">
  01 Apr 2013 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#streams">streams</a>
    
      <a href="/tags.html#streams2">streams2</a>
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#5min">5min</a>
    
  </span>
</div>

<div id="post">
<p>Node 0.10 is the latest stable branch of Node. It&#8217;s the branch you should be using for Real Work&#8482;. The most significant API changes can be found in the <a href='http://nodejs.org/docs/latest/api/stream.html'>stream</a> module. This is a quick guide to <em>streams2</em> to get you up to speed.</p>

<h3 id='the_base_classes'>The Base Classes</h3>

<p>There are now five base classes for creating your own streams: <code>Readable</code>, <code>Writable</code>, <code>Duplex</code>, <code>Transform</code>, and <code>PassThrough</code>. These base classes inherit from <code>EventEmitter</code> so you can attach listeners and emit events as you normally would. It&#8217;s perfectly acceptable to emit custom events &#8211; this might make sense, for example, if you&#8217;re writing a streaming parser. The parser could emit events like <code>&#39;headers&#39;</code> to indicate the headers have been parsed, perhaps for a CSV file.</p>

<p>To make your own <code>Readable</code> stream class, inherit from <code>stream.Readable</code> and implement the <code>_read(size)</code> method. The <code>size</code> argument is &#8220;advisory&#8221; &#8211; a lot of <code>Readable</code> implementations can safely ignore it. Once your <code>_read</code> method has collected data from an underlying I/O source, it can send it by calling <code>this.push(chunk)</code> &#8211; internally data will be placed into a queue so &#8220;clients&#8221; of your class can deal with it when they&#8217;re ready.</p>

<p>The <code>Writable</code> class should also be inherited from, but this time a <code>_write(chunk, encoding, callback)</code> method should be implemented. Once you&#8217;ve written data to the underlying I/O source, <code>callback</code> can be called, passing an error if required.</p>

<p>The <code>Duplex</code> class is like a <code>Readable</code> and <code>Writable</code> stream in one &#8211; it allows data sources that transmit and receive data to be modelled. This makes sense when you think about it &#8211; TCP network sockets transmit and receive data. To implement a <code>Duplex</code> stream, inherit from <code>stream.Duplex</code> and implement both the <code>_read</code> and <code>_write</code> methods.</p>

<p>The <code>Transform</code> class is useful for implementing parsers, like the CSV example I mentioned earlier. In general, streams that change data in some way should be implemented using <code>stream.Transform</code>. Although <code>Transform</code> sounds a bit like a <code>Duplex</code> stream, this time you&#8217;ll need to implement a <code>_transform(chunk, encoding, callback)</code> method. I&#8217;ve noticed several projects in the wild that use <code>Duplex</code> streams with a stubbed <code>_read</code> method, and I wondered if these would be better served by using a <code>Transform</code> class instead.</p>

<p>Finally, the <code>PassThrough</code> stream inherits from <code>Transform</code> to do&#8230; nothing. It relays the input to the output. That makes it ideal for sitting inside a <code>pipe</code> chain to spy on streams, and people have been using this to write tests or instrument streams in some way.</p>

<h3 id='pipes'>Pipes</h3>

<p>Pipes <em>must</em> follow this pattern: <code>readable.pipe(writable)</code>. As <code>Duplex</code> and <code>Transform</code> streams can both read <em>and</em> write, they can be placed in either position in the chain. For example, I&#8217;ve been using <code>process.stdin.pipe(csvParser).pipe(process.stdout)</code> where <code>csvParser</code> is a <code>Transform</code> stream.</p>

<h3 id='inheritance'>Inheritance</h3>

<p>The general pattern for inheriting from the base classes is as follows:</p>

<ol>
<li>Create a constructor function that calls the base class using <code>baseClass.call(this, options)</code></li>

<li>Correctly inherit from the base class using <code>Object.create</code> or <code>util.inherits</code></li>

<li>Implement the required underscored method, whether it&#8217;s <code>_read</code>, <code>_write</code>, or <code>_transform</code></li>
</ol>

<p>Here&#8217;s a quick <code>stream.Writable</code> example:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;stream&#39;</span><span class='p'>);</span>

<span class='nx'>GreenStream</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>stream</span><span class='p'>.</span><span class='nx'>Writable</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>constructor</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>value</span><span class='o'>:</span> <span class='nx'>GreenStream</span> <span class='p'>}</span>
<span class='p'>});</span>

<span class='kd'>function</span> <span class='nx'>GreenStream</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>stream</span><span class='p'>.</span><span class='nx'>Writable</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>GreenStream</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>_write</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>chunk</span><span class='p'>,</span> <span class='nx'>encoding</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdout</span><span class='p'>.</span><span class='nx'>write</span><span class='p'>(</span><span class='s1'>&#39;\u001b[32m&#39;</span> <span class='o'>+</span> <span class='nx'>chunk</span> <span class='o'>+</span> <span class='s1'>&#39;\u001b[39m&#39;</span><span class='p'>);</span>
  <span class='nx'>callback</span><span class='p'>();</span>
<span class='p'>};</span>

<span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdin</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>GreenStream</span><span class='p'>());</span>
</code></pre>
</div>
<h3 id='forwards_compatibility'>Forwards Compatibility</h3>

<p>If you want to use <em>streams2</em> with Node 0.8 projects, then <a href='https://github.com/isaacs/readable-stream'>readable-stream</a> provides access to the newer APIs in an npm-installable module. Since the <code>stream</code> core module is implemented in JavaScript, then it makes sense that the newer API can be used in Node 0.8.</p>

<p>Some open source module authors are including <code>readable-stream</code> as a dependency and then conditionally loading it:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>PassThrough</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;stream&#39;</span><span class='p'>).</span><span class='nx'>PassThrough</span><span class='p'>;</span>

<span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>PassThrough</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>PassThrough</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;readable-stream/passthrough&#39;</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This example is taken from <a href='https://github.com/EvanOxfeld/until-stream/blob/master/until.js'>until-stream</a>.</p>

<h3 id='streams2_in_the_wild'>Streams2 in the Wild</h3>

<p>There are some interesting open source projects that use the new streaming API that I&#8217;ve been collecting on GitHub. <a href='https://github.com/jessetane/multiparser'>multiparser</a> by Jesse Tane is a <code>stream.Writable</code> HTML form parser. <a href='https://github.com/EvanOxfeld/until-stream'>until-stream</a> by Evan Oxfeld will pause a stream when a certain signature is reached.</p>

<p><a href='https://github.com/naomik/hiccup'>Hiccup</a> by naomik uses the new streams API to simulate sporadic throughput, and the same author has also released <a href='https://github.com/naomik/bun'>bun</a> which can help combine pipes into composable units, and <a href='https://github.com/naomik/burro'>Burro</a> which can package objects into length-prefixed JSON byte streams. Conrad Pankoff used Burro to write <a href='https://github.com/deoxxa/pillion'>Pillion</a>, which is an RPC system for object streams.</p>

<p>There are also less esoteric modules, like <a href='https://github.com/klaemo/csv-stream'>csv-streamify</a> which is a CSV parser.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
      <li>
        <div>18 Jul 2014</div>
        <a href="/2014/07/18/lazy-json-undo">Undo with Object.observe</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2013/04/01/streams-streams-streams/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

