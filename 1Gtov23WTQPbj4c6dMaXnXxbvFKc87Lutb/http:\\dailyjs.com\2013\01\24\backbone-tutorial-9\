http://dailyjs.com/2013/01/24/backbone-tutorial-9/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 08:23:44 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "10049e-9e6b-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8855
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Backbone.js Tutorial: Tasks</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2013/01/24/backbone-tutorial-9">Backbone.js Tutorial: Tasks</a></h2>

<div class="meta">
  24 Jan 2013 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#backbone.js">backbone.js</a>
    
      <a href="/tags.html#mvc">mvc</a>
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#backgoog">backgoog</a>
    
      <a href="/tags.html#fastfood">fastfood</a>
    
  </span>
</div>

<div id="post">
<ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'><strong>Part 9: Tasks</strong></a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>8d88095</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 8d88095
</code></pre>
</div>
<h3 id='tasks_crud'>Tasks CRUD</h3>

<p>Things have been quiet in the Tasks Bootstrap project over the last few weeks. Lists have appeared, but there&#8217;s been nary a Hamburglar or Burger King in sight. How do we attract those all important fast food mascots to our project? By adding support for tasks of course! How else can they write their extensive lists of upcoming franchise inspections and special edition McRibs?</p>

<p>This tutorial will cover the following:</p>

<ul>
<li>Creating a view for a single task</li>

<li>Creating a view for a list of tasks</li>

<li>Adding the tasks collection</li>

<li>Fetching tasks from Google&#8217;s API</li>
</ul>

<p>The really interesting part that you&#8217;ll want to remember is dealing with the relationship between a parent view and child views. Backbone doesn&#8217;t specifically address relationships between models, or views. In this example, we ideally want to say <em>tasks belong to lists</em> or <em>task views belong to list views</em>. However, there isn&#8217;t a de facto way of expressing such relationships. There are libraries out there to do it, but I&#8217;ll show you how to think about things in pure Backbone/Underscore.</p>

<h3 id='boilerplate'>Boilerplate</h3>

<p>Before you get started, create some new directories:</p>
<div class='highlight'><pre><code class='text'>$ mkdir app/js/views/tasks
$ mkdir app/js/templates/tasks
</code></pre>
</div>
<p>And add a new collection to <code>app/js/collections/tasks.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;models/task&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>Task</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>Tasks</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>Task</span><span class='p'>,</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasks&#39;</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>Tasks</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>Tasks</code> collection doesn&#8217;t do anything you haven&#8217;t seen before. Fetching tasks with Google&#8217;s API requires a <code>tasklist</code>, so you have to call <code>fetch</code> with an additional parameter:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>tasklist</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='p'>},</span> <span class='c1'>// ...</span>
</code></pre>
</div>
<p>It&#8217;s cool though, because we handled fetching <code>TaskLists</code> like that when we passed <code>{ userId: &#39;@me&#39; }</code> so it feels consistent within the context of this project.</p>

<p>The template that contains the tasks view includes a form for creating new tasks, a container for the task list, and another container for the currently selected task (so it can be edited). This file should be saved as <code>app/js/templates/index.js</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;span6&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;add-task&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;form</span> <span class='na'>class=</span><span class='s'>&quot;well row form-inline add-task&quot;</span><span class='nt'>&gt;</span>
      <span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;text&quot;</span> <span class='na'>class=</span><span class='s'>&quot;pull-left&quot;</span> <span class='na'>placeholder=</span><span class='s'>&quot;Enter a new task&#39;s title and press return&quot;</span> <span class='na'>name=</span><span class='s'>&quot;title&quot;</span><span class='nt'>&gt;</span>
      <span class='nt'>&lt;button</span> <span class='na'>type=</span><span class='s'>&quot;submit&quot;</span> <span class='na'>class=</span><span class='s'>&quot;pull-right btn&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-plus&quot;</span><span class='nt'>&gt;&lt;/i&gt;&lt;/button&gt;</span>
    <span class='nt'>&lt;/form&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;ul</span> <span class='na'>id=</span><span class='s'>&quot;task-list&quot;</span><span class='nt'>&gt;&lt;/ul&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;span6&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;selected-task&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;alert&quot;</span> <span class='na'>id=</span><span class='s'>&quot;warning-no-task-selected&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;strong&gt;</span>Note:<span class='nt'>&lt;/strong&gt;</span> Select a task to edit or delete it.
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>This uses some <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a> classes for creating columns. The <code>TaskView</code>, in <code>app/js/templates/tasks/task.html</code> has a few elements to contain the title, notes, and a checkbox for toggling the task&#8217;s state:</p>
<div class='highlight'><pre><code class='javascript'><span class='o'>&lt;</span><span class='nx'>input</span> <span class='nx'>type</span><span class='o'>=</span><span class='s2'>&quot;checkbox&quot;</span> <span class='nx'>data</span><span class='o'>-</span><span class='nx'>task</span><span class='o'>-</span><span class='nx'>id</span><span class='o'>=</span><span class='s2'>&quot;&quot;</span> <span class='nx'>name</span><span class='o'>=</span><span class='s2'>&quot;task_check_&quot;</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;check-task&quot;</span> <span class='nx'>value</span><span class='o'>=</span><span class='s2'>&quot;t&quot;</span><span class='o'>&gt;</span>
<span class='o'>&lt;</span><span class='nx'>span</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;title &quot;</span><span class='o'>&gt;&lt;</span><span class='err'>/span&gt;</span>
<span class='o'>&lt;</span><span class='nx'>span</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;notes&quot;</span><span class='o'>&gt;&lt;</span><span class='err'>/span&gt;</span>
</code></pre>
</div>
<h3 id='views'>Views</h3>

<p>The main <code>TasksIndexView</code> loads the tasks using the <code>Tasks</code> collection, and then renders them using <code>TaskView</code>. This is the source for <code>TasksIndexView</code> in <code>app/js/views/tasks/index.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/tasks/index.html&#39;</span><span class='p'>,</span> <span class='s1'>&#39;views/tasks/task&#39;</span><span class='p'>,</span> <span class='s1'>&#39;collections/tasks&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>,</span> <span class='nx'>TaskView</span><span class='p'>,</span> <span class='nx'>Tasks</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TasksIndexView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;div&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;row-fluid&#39;</span><span class='p'>,</span>

    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;submit .add-task&#39;</span><span class='o'>:</span> <span class='s1'>&#39;addTask&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>children</span> <span class='o'>=</span> <span class='p'>[];</span>
    <span class='p'>},</span>

    <span class='nx'>addTask</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>());</span>

      <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#task-list&#39;</span><span class='p'>)</span>
        <span class='p'>,</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>

      <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Tasks</span><span class='p'>();</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>tasklist</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>each</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>task</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='kd'>var</span> <span class='nx'>item</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TaskView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>task</span><span class='p'>,</span> <span class='nx'>parentView</span><span class='o'>:</span> <span class='nx'>self</span> <span class='p'>});</span>
          <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>append</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
          <span class='nx'>self</span><span class='p'>.</span><span class='nx'>children</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>);</span>
        <span class='p'>});</span>
      <span class='p'>}});</span>

      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TasksIndexView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This loads the tasks using <code>collection.fetch</code>, and then appends a <code>TaskView</code> for each task. This is <code>TaskView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/tasks/task.html&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TaskView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;li&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;controls well task row&#39;</span><span class='p'>,</span>

    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;click&#39;</span><span class='o'>:</span> <span class='s1'>&#39;open&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span> <span class='o'>=</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>el</span><span class='p'>);</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>data</span><span class='p'>(</span><span class='s1'>&#39;taskId&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>));</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>()));</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;.check-task&#39;</span><span class='p'>).</span><span class='nx'>attr</span><span class='p'>(</span><span class='s1'>&#39;checked&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;status&#39;</span><span class='p'>)</span> <span class='o'>===</span> <span class='s1'>&#39;completed&#39;</span><span class='p'>);</span>

      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>.</span><span class='nx'>activeTaskView</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>.</span><span class='nx'>activeTaskView</span><span class='p'>.</span><span class='nx'>close</span><span class='p'>();</span>
      <span class='p'>}</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>.</span><span class='nx'>activeTaskView</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>close</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TaskView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The parent view is tracked so <code>open</code> can determine if another task has been clicked on, and if so &#8220;deactivate&#8221; it (remove the <code>active</code> class). There are many ways to do this: I&#8217;ve seen people iterating over views to close all of them, using <code>$(&#39;selector&#39;).removeClass(&#39;active&#39;)</code> to remove all related items with an <code>active</code> class, or triggering events on models. I feel like view-related code should be handled in views, and models and collections should do their own specific jobs.</p>

<p>Next you&#8217;ll need to add <code>TasksIndexView</code> to the <code>define</code> in <code>app/js/views/lists/menuitem.js</code> and change the <code>open</code> method to instantiate a <code>TasksIndexView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>

  <span class='c1'>// Render the tasks</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>();</span>
  <span class='p'>}</span>

  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TasksIndexView</span><span class='p'>({</span> <span class='nx'>collection</span><span class='o'>:</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>,</span> <span class='nx'>model</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span> <span class='p'>});</span>
  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#tasks-container&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>It tracks the last instance of <code>TasksIndexView</code> so it can remove it manually. It&#8217;s usually a good idea to call <code>remove</code> so events can be unbound before views go out of scope &#8211; I&#8217;ll write a tutorial about Backbone and garbage collection later on.</p>

<p>I also added some defaults to the <code>Task</code> model (in <code>app/js/models/task.js</code>):</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>Task</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Model</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasks&#39;</span><span class='p'>,</span>
    <span class='nx'>defaults</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span><span class='p'>,</span> <span class='nx'>notes</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span> <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>Task</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The reason I did this was the <code>TaskView</code> will raise errors when interpolating using a model that doesn&#8217;t have a title or notes &#8211; it&#8217;s quite common for tasks in Google Tasks to not have any notes.</p>

<p>With these templates, views, and changes, you should be able to select lists and see their tasks, and also select tasks.</p>

<h3 id='styles'>Styles</h3>

<p><img src='/images/posts/backbone-9-styles.png' alt='Bootstrap styles' /></p>

<p>As it stands, the application doesn&#8217;t make a lot of visual sense. I&#8217;ve added Bootstrap &#8211; this just required downloading the CSS and image files and putting them in <code>app/css</code> and <code>app/img</code>. Also, <code>app/index.html</code> loads <code>css/bootstrap.min.css</code>.</p>

<p>I added some custom styles to create a panel-based layout that shows the tasks in a similar way to <a href='http://culturedcode.com/things/'>Things</a>.</p>

<h3 id='backbone_0910'>Backbone 0.9.10</h3>

<p>I&#8217;ve updated Backbone to 0.9.10 and added it to the repository. I had to change the <code>Backbone.sync</code> method to use a different signature when calling <code>options.success</code>, in <code>app/js/gapi.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>result</span><span class='p'>,</span> <span class='nx'>request</span><span class='p'>);</span>
</code></pre>
</div>
<h3 id='summary'>Summary</h3>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/commit/0491ad6e7de28ccfe0cab59138a93c469a3f2a7e'>alexyoung / dailyjs-backbone-tutorial, commit 0491ad</a>.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2013/01/24/backbone-tutorial-9/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

