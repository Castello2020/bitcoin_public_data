http://dailyjs.com/page20/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 13:02:33 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "e9370-31dc5-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 42071
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/02/06/node-roundup">Node Roundup: GNOME, fs, procjs</a></h2>
      <div class="meta">
        <span class="date">06 Feb 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/02/06/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#gnome">gnome</a>
          
            <a href="/tags.html#desktop">desktop</a>
          
            <a href="/tags.html#bindings">bindings</a>
          
            <a href="/tags.html#browser">browser</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='javascript_and_gnome'>JavaScript and GNOME</h3>

<p><a href='http://treitter.livejournal.com/14871.html'>GNOME now recommends JavaScript for authoring GNOME applications</a>. For information on what this means for the near future of GNOME desktop development, see <a href='https://live.gnome.org/JavaScript'>JavaScript in GNOME</a>. Although it looks like they&#8217;re using SpiderMonkey rather than Node, Jérémy Lal sent in an email detailing his positive experiences with node-gir (GitHub: <a href='https://github.com/creationix/node-gir'>creationix / node-gir</a>, npm: <a href='https://npmjs.org/package/gir'>gir</a>) by Tim Caswell which provides bindings for <a href='https://live.gnome.org/Gjs'>GObject Introspection</a>.</p>

<p>These bindings can be used to make dynamic calls to any library that has GI annotations installed &#8211; Jérémy said he was using it to generate PDFs from HTML.</p>

<h3 id='component_fs'>Component: fs</h3>

<p>fs (GitHub: <a href='https://github.com/matthewp/fs'>matthewp / fs</a>, License: <em>MIT</em>, component: <em>matthewp/fs</em>) by Matthew Phillips is a component that brings Node&#8217;s <code>fs</code> module to the browser. It&#8217;s designed to be cross-browser, with the FileSystem API for Chrome and IndexedDB for Firefox and Internet Explorer.</p>

<h3 id='procjs'>procjs</h3>

<p>procjs (GitHub: <a href='https://github.com/vzaccaria/procjs'>vzaccaria / procjs</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/procjs'>procjs</a>) by Vittorio Zaccaria is a set of command-line utilities for getting JSON representations from the output of <code>ps</code>. It also comes with a REST server that provides a JSON API for the same data.</p>

<p>The project is built with LiveScript, and can be invoked with <code>jsps</code> along with several arguments.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/02/05/jquery-roundup">jQuery Roundup: 1.9.1, jui_datagrid, jQuery Waiting, jquery.defer</a></h2>
      <div class="meta">
        <span class="date">05 Feb 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/02/05/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#animations">animations</a>
          
            <a href="/tags.html#database">database</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='jquery_191'>jQuery 1.9.1</h3>

<p><a href='http://blog.jquery.com/2013/02/04/jquery-1-9-1-released/'>jQuery 1.9.1</a> has been released:</p>

<blockquote>
<p>Whether you&#8217;re using 1.9.0 or using an older version, these are the droids you&#8217;re looking for.</p>
</blockquote>

<p>There are bug fixes for Chrome, IE, and Safari, and a few small enhancements like <a href='http://bugs.jquery.com/ticket/13150'>#13150: Be able to determine if $.Callback() has functions</a>.</p>

<h3 id='jui_datagrid'>jui_datagrid</h3>

<p><img src='/images/posts/jui_datagrid.png' alt='jui_datagrid' /></p>

<p><a href='http://www.pontikis.net/labs/jui_datagrid/'>jui_datagrid</a> (GitHub: <a href='https://github.com/pontikis/jui_datagrid'>pontikis / jui_datagrid</a>, License: <em>MIT</em>) by Christos Pontikis is a one of those &#8220;rich table&#8221; plugins that makes tabular data sortable, editable, and so on. It has a specific focus on editing server-side data, and will work with JSON data out of the box. It supports multiple instances on the same page, jQuery UI themes, localisation, and a modular design that makes adding new data filters easier.</p>

<p>There is a <a href='http://www.pontikis.net/labs/jui_datagrid/demo/'>a demo of jui_datagrid</a> that shows the major features.</p>

<h3 id='jquery_waiting'>jQuery Waiting</h3>

<p><a href='http://trentrichardson.com/examples/jQuery-Waiting/'>jQuery Waiting</a> (GitHub: <a href='https://github.com/trentrichardson/jQuery-Waiting'>trentrichardson / jQuery-Waiting</a>, License: <em>MIT/GPL</em>) by Trent Richardson is a plugin for displaying spinners that&#8217;s designed to be cross-browser. Instead of relying on modern CSS animations, it simply switches CSS classes on sets of elements. It has a namespaced event-based API, so you can see when the control is enabled, starts playing, and so on:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Initialise</span>
<span class='nx'>$el</span><span class='p'>.</span><span class='nx'>waiting</span><span class='p'>({});</span>

<span class='c1'>// Play</span>
<span class='nx'>$el</span><span class='p'>.</span><span class='nx'>waiting</span><span class='p'>(</span><span class='s1'>&#39;play&#39;</span><span class='p'>);</span>

<span class='c1'>// Event example</span>
<span class='nx'>$el</span><span class='p'>.</span><span class='nx'>bind</span><span class='p'>(</span><span class='s1'>&#39;play.waiting&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>){});</span>
</code></pre>
</div>
<h3 id='jquerydefer'>jquery.defer</h3>

<p>jquery.defer/jquery.undefer (GitHub: <a href='https://github.com/wheresrhys/jquery.defer'>wheresrhys / jquery.defer</a>, License: <em>MIT</em>) by Rhys Evans are a pair of utility methods for making an object&#8217;s methods wait until a deferred object has resolved. The example Rhys provides of this in action is lazy loading Google Maps:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>.</span><span class='nx'>defer</span><span class='p'>(</span><span class='nx'>GoogleMaps</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='nx'>_mapsLoaded</span><span class='p'>,</span> <span class='p'>{</span><span class='nx'>exclude</span><span class='o'>:</span> <span class='s1'>&#39;init&#39;</span><span class='p'>});</span>
</code></pre>
</div>
<p>Rhys also sent in Backbone Namespaced Events (GitHub: <a href='https://github.com/wheresrhys/backbone.namespaced-events'>wheresrhys / backbone.namespaced-events</a>, License: <em>MIT</em>), which uses the syntax of <a href='http://docs.jquery.com/Namespaced_Events'>namespaced events</a> for Backbone&#8217;s custom events implementation. To use namespaced events, call <code>Backbone.extend(obj, Backbone.NamespacedEvents)</code> on a Backbone object instance. Alternatively, <code>Backbone.NamespacedEvents.overwriteNativeEvents()</code> can be called to use it everywhere.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/02/04/stack">Meet the New Stack, Same as the Old Stack</a></h2>
      <div class="meta">
        <span class="date">04 Feb 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/02/04/stack/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#components">components</a>
          
            <a href="/tags.html#twitter">twitter</a>
          
            <a href="/tags.html#google">google</a>
          
            <a href="/tags.html#jquery">jquery</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Five years ago, if you asked any client-side developer which library or framework to use the most likely answer would have been jQuery. Since then, client-side development has become far more complex. A friendly wrapper for DOM programming and a browser compatibility layer isn&#8217;t enough to help us write modern applications.</p>

<p>Starting a project today involves selecting a package manager, module system, build system, templating language, data binding library, a sync layer, a widget library, and a test framework. And it doesn&#8217;t end there: many of us also regularly use a dynamic CSS language, and mobile SDKs.</p>

<p>I wouldn&#8217;t say this is a negative trend, but with large companies backing or offering solutions to these problems, making an informed decision on each of these technologies is difficult. And soon the major players will offer a complete set of tools and libraries to satisfy each requirement: we&#8217;ll be back to something that looks like the original monolithic frameworks.</p>

<p>Until recently, starting a client-side web application might have looked like this:</p>

<ul>
<li><strong>Module system</strong>: RequireJS, AMD</li>

<li><strong>Build system</strong>: RequireJS (r.js)</li>

<li><strong>Templates</strong>: <a href='https://github.com/requirejs/text'>text.js</a></li>

<li><strong>Data binding</strong>: Backbone.js</li>

<li><strong>Sync</strong>: Backbone.js</li>

<li><strong>Widgets</strong>: Bootstrap</li>

<li><strong>Test framework</strong>: QUnit</li>
</ul>

<p>There are other popular choices for each of these bullets, of course: <a href='http://foundation.zurb.com/'>Zurb Foundation</a> is a popular front-end framework, and I&#8217;ve used Mocha instead of QUnit since Mocha appeared. I also like <a href='http://knockoutjs.com/'>Knockout</a> for data binding, because the two-way declarative bindings are easy to get the hang of.</p>

<p>These libraries are not interchangeable once a project has been started &#8211; Bootstrap uses different CSS classes to jQuery UI, for example. The major difficulty is keeping libraries up to date, particularly if they have a lot of dependencies.</p>

<p>And that&#8217;s when you need a package manager. Using a package manager can make the choices even more fine grained, because managing each library and its dependencies is easier. Switching to something like <a href='https://github.com/component'>Component</a> is one option, which can lead to a totally new stack:</p>

<ul>
<li><strong>Package manager</strong>: Component</li>

<li><strong>Module system</strong>: CommonJS</li>

<li><strong>Build system</strong>: Component</li>

<li><strong>Templates</strong>: <a href='https://github.com/component/component/wiki/Components#wiki-templating'>Take your pick</a></li>

<li><strong>Data binding</strong>: Reactive or Rivets (you could easily use Knockout or Backbone though)</li>

<li><strong>Sync</strong>: <code>component/model</code> can communicate with JSON APIs</li>

<li><strong>Widgets</strong>: <a href='https://github.com/component/component/wiki/Components#wiki-ui'>Componentised UI widgets are popular</a></li>

<li><strong>Test framework</strong>: <code>test/assert</code>, Mocha</li>
</ul>

<p>Bootstrap and Zurb Foundation can be provided as components, there are projects on GitHub to do this. I&#8217;ve tried to design projects 100% around components without these larger libraries, and it was a huge amount of work. It may get easier with time, or once the right balance of functionality is found. I&#8217;ve noticed there are some &#8220;meta packages&#8221; that exist to group commonly used dependencies together.</p>

<p>You&#8217;ll notice I haven&#8217;t mentioned <a href='http://angularjs.org/'>AngularJS</a> yet. The reason for that is AngularJS is now compatible with <a href='https://code.google.com/p/closure-library/'>Closure Library</a>, which makes it possible to use an almost 100% Google-powered development stack:</p>

<ul>
<li><strong>Package manager</strong>: None (to my knowledge)</li>

<li><strong>Module system</strong>: Closure Library modules</li>

<li><strong>Build system</strong>: ClosureBuilder</li>

<li><strong>Templates</strong>: AngularJS</li>

<li><strong>Data binding</strong>: AngularJS</li>

<li><strong>Sync</strong>: AngularJS services</li>

<li><strong>Widgets</strong>: Closure Library</li>

<li><strong>Test framework</strong>: Closure Library testing</li>
</ul>

<p>While Closure Library is more like the &#8220;last generation&#8221; monolithic frameworks, each module can be loaded separately, so you don&#8217;t need to use the whole thing. You could make a project with Closure Library, ClosureBuilder, Backbone.js, and Boostrap if you wanted. You could also go the other way: deploy a Go/Python/Java app to App Engine that&#8217;s built on Closure Library and AngularJS. Google effectively provides the entire stack, including server-side development, data storage, user authentication, billing, and client-side development.</p>

<p>Recently we&#8217;ve also seen a huge amount of open source projects coming out of Twitter. A pure Twitter stack looks like this:</p>

<ul>
<li><strong>Package manager</strong>: Bower</li>

<li><strong>Module system</strong>: Flight/AMD</li>

<li><strong>Build system</strong>:</li>

<li><strong>Templates</strong>: Hogan.js</li>

<li><strong>Data binding</strong>: Flight</li>

<li><strong>Sync</strong>:</li>

<li><strong>Widgets</strong>: Bootstrap</li>

<li><strong>Test framework</strong>:</li>
</ul>

<p>Using components through Flight could satisfy the other dependencies as well. It wouldn&#8217;t be difficult to use Flight as a test runner with a suitable assertion library, although the authors use Jasmine and PhantomJS at the moment.</p>

<p>Let&#8217;s not forget, however, the incredible features provided by Dojo. Compare Google and Twitter&#8217;s client-side stacks to this:</p>

<ul>
<li><strong>Package manager</strong>: Dojo Packages, CPM</li>

<li><strong>Module system</strong>: AMD</li>

<li><strong>Build system</strong>: dojoBuild</li>

<li><strong>Templates</strong>: Dijit templates</li>

<li><strong>Data binding</strong>: dojo.store.Observable</li>

<li><strong>Sync</strong>: Dojo Object Store</li>

<li><strong>Widgets</strong>: Dijit</li>

<li><strong>Test framework</strong>: D.O.H.</li>
</ul>

<p>Dojo has the entire client-side stack covered, and also includes many more features that I haven&#8217;t mentioned here. YUI is comparable:</p>

<ul>
<li><strong>Package manager</strong>:</li>

<li><strong>Module system</strong>: <code>YUI().use</code></li>

<li><strong>Build system</strong>: <a href='http://yui.github.com/shifter/'>Shifter</a></li>

<li><strong>Templates</strong>: <a href='http://yuilibrary.com/yui/docs/template/'>Y.Template.Micro</a></li>

<li><strong>Data binding</strong>: See <a href='http://yuilibrary.com/yui/docs/app/'>App Framework</a></li>

<li><strong>Sync</strong>: <a href='http://yuilibrary.com/yui/docs/datasource/'>Data Source</a>, <code>Y.Model</code>, and <code>Y.ModelList</code></li>

<li><strong>Widgets</strong>: <a href='http://yuilibrary.com/yui/widgets/'>YUI Wigets</a></li>

<li><strong>Test framework</strong>: <a href='http://yuilibrary.com/yui/docs/test/'>Test</a></li>
</ul>

<p>On the surface, it seems like Twitter&#8217;s developers aim to create something more like Component, where each piece of the client-side puzzle can be picked à la carte. Closure Library is more like the older, monolithic model used by YUI, where a custom module system is used, and modules are harder to reuse without the base framework.</p>

<p>The question is, can these larger companies support modern, &#8220;componentised&#8221; client-side development, or is it easier to offer a consolidated monolithic framework? Projects like AngularJS and Flight suggest to me that developers within Twitter and Google want to promote that approach, while how that fits into the wider organisation remains to be seen. Will we see AngularJS alongside Closure Library in the Python, Java, and Go App Engine documentation, or will it remain a useful library that exists outside of Google&#8217;s core developer offering?</p>

<p>An interesting third option is <a href='http://yeoman.io/'>Yeoman</a>. This is another project from Google that provides a selection of smaller libraries to kick-start development:</p>

<ul>
<li><strong>Package manager</strong>: yeoman</li>

<li><strong>Module system</strong>: RequireJS, AMD</li>

<li><strong>Build system</strong>: Grunt</li>

<li><strong>Widgets</strong>: Bootstrap</li>
</ul>

<p>Yeoman generates application templates by helping you select various options, and then gives you a build system so you can easily generate something deployable. It doesn&#8217;t enforce decisions like template language or CoffeeScript, but provides a harness for installing packages, and building and testing your application.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>Client-side development is changing. It&#8217;s no-longer enough to learn a small amount of jQuery &#8211; an entire client-side stack is becoming the norm. The libraries that plugged the gaps in jQuery and its clones now have serious competition from tech giants.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/02/01/flight-componentjs">Flight, ComponentJS</a></h2>
      <div class="meta">
        <span class="date">01 Feb 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/02/01/flight-componentjs/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#components">components</a>
          
            <a href="/tags.html#twitter">twitter</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='flight'>Flight</h3>

<p><img src='/images/posts/flight.png' alt='Flight by Twitter' /></p>

<p>What&#8217;s the most sensible thing to do when there&#8217;s an established project called <a href='https://github.com/component/component'>Component</a> that aims to make client-side development more modular through reusable components? Invent something else that yet again overloads this increasingly overused term! If you weren&#8217;t already <a href='http://dailyjs.com/2013/01/28/components/'>confused about components</a>, then get ready to unlearn everything you&#8217;ve learned.</p>

<p>I was expecting this, however. After seeing Bower, I felt like it really needed another project to further abstract client-side development, and that appears to have been satisfied by the release of Flight.</p>

<p><a href='http://twitter.github.com/flight/'>Flight</a> (GitHub: <a href='https://github.com/twitter/flight'>twitter / flight</a>, License: <em>MIT</em>, bower: <em>flight</em>) from Twitter is a new framework that maps &#8220;behaviour&#8221; to DOM nodes. To do this it brings together a few things you&#8217;re probably already familiar with: multiple inheritance (mixins), the AMD pattern, and the observer pattern. The supplied <a href='http://twitter.github.com/flight/demo/'>Flight Mail</a> example app is built using RequireJS, so you can see why AMD is relevant here.</p>

<p>Flight apps look a bit like Backbone/RequireJS apps. They both use AMD and rely on events for communication. However, Flight is deceptively different. Which isn&#8217;t necessarily a bad thing, because we&#8217;ve argued about MVC/MVVC/MV* for a long time at this point.</p>

<p>The authors define a component in Flight as a constructor with properties mixed in. Each component has event handling, and is eventually attached to a DOM node. They can&#8217;t refer to each other directly &#8211; communication is purely through events.</p>

<p>That last point is potentially important, because it demonstrates the authors have a good sense of one of the major issues with client-side development: writing reusable, decoupled code. Given that Angus Croll and Dan Webb are contributors to this project, it&#8217;s not surprising that there&#8217;s a focus on composition.</p>

<p>Although Flight already has a bazillion stars on GitHub (Twitter&#8482;!), it&#8217;s going to face the same hurdles in adoption as Backbone did: the learning curve. Casual JavaScript developers are going to see AMD, mixin, and &#8220;advice&#8221;, and struggle to understand how to relate these concepts to their existing development practices.</p>

<p>However, the project has some great ideas and has serious pedigree behind it. It&#8217;s different enough to Backbone, AngularJS, and Knockout, so I&#8217;ve welcomed it to my rapidly growing client-side development toy box.</p>

<h3 id='componentjs'>ComponentJS</h3>

<p><a href='http://componentjs.com/'>ComponentJS</a> (GitHub: <a href='https://github.com/rse/componentjs'>rse / componentjs</a>, License: <em>MPL</em>) by Ralf S. Engelschall is a totally unrelated project that just happens to involve the term &#8220;component&#8221;. This library is aimed at creating dialog-based hierarchical interfaces for single page apps. It has an OO library, a graphical debugger, UI toolkit, state transitions, and communication using events.</p>

<p>According to the author, this project has been developed since 2009 (although the domain name was created a year ago), so the naming clash is purely coincidental from what I can tell. It has extremely detailed API documentation, and a <a href='http://componentjs.com/demo.html'>demo with browsable source code</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/31/backbone-tutorial-10">Backbone.js Tutorial: Oh No, Not More Tasks</a></h2>
      <div class="meta">
        <span class="date">31 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/31/backbone-tutorial-10/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'><strong>Part 10: Oh No Not More Tasks</strong></a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>0491ad</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 0491ad
</code></pre>
</div>
<h3 id='tasks_continued'>Tasks Continued</h3>
<div class='image'>
  <img src='/images/posts/backbone-part-10.png' alt='' />
  <small>A preview of today's tutorial.</small>
</div>
<p>The application is now displaying lists of tasks, but you can&#8217;t yet interact with them. This tutorial will cover:</p>

<ul>
<li>Adding tasks</li>

<li>Editing tasks</li>

<li>Deleting tasks</li>

<li>Toggling tasks</li>
</ul>

<p>Most of this content builds on what we did with lists, but it&#8217;ll be good practice if you&#8217;re looking for more experience with Backbone.</p>

<h3 id='adding_tasks'>Adding Tasks</h3>

<p>Open <code>app/js/views/tasks/index.js</code> and ensure there&#8217;s an event binding for <code>addTask</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='s1'>&#39;submit .add-task&#39;</span><span class='o'>:</span> <span class='s1'>&#39;addTask&#39;</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>In the <code>initialize</code> method, add a listener to this class&#8217;s collection:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>children</span> <span class='o'>=</span> <span class='p'>[];</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;add&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>renderTask</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>This will make it automatically render new tasks when they&#8217;re added to the collection.</p>

<p>The <code>addTask</code> method should call <code>Task.prototype.save</code> to persist the task using Google&#8217;s API, after instantiating it with a reference to the current list. It should also render the task once it&#8217;s been saved. I&#8217;ve passed in <code>{ at: 0}</code> because Google Tasks places new tasks at the top of a list. Notice that I prefer to only add tasks once they&#8217;ve been successfully saved &#8211; that makes this application always require an Internet connection. It may be preferable to save to a local database and sync with Google later, but we&#8217;re not going to do that here.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>addTask</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>$input</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input[name=&quot;title&quot;]&#39;</span><span class='p'>)</span>
    <span class='p'>,</span> <span class='nx'>task</span> <span class='o'>=</span> <span class='k'>new</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>({</span> <span class='nx'>tasklist</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='p'>})</span>
    <span class='p'>,</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span>
    <span class='p'>;</span>

  <span class='nx'>task</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='nx'>$input</span><span class='p'>.</span><span class='nx'>val</span><span class='p'>()</span> <span class='p'>},</span> <span class='p'>{</span>
    <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='nx'>task</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>at</span><span class='o'>:</span> <span class='mi'>0</span> <span class='p'>});</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
  <span class='nx'>$input</span><span class='p'>.</span><span class='nx'>val</span><span class='p'>(</span><span class='s1'>&#39;&#39;</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>},</span>

<span class='nx'>renderTask</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>task</span><span class='p'>,</span> <span class='nx'>list</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>item</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TaskView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>task</span><span class='p'>,</span> <span class='nx'>parentView</span><span class='o'>:</span> <span class='k'>this</span> <span class='p'>})</span>
    <span class='p'>,</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#task-list&#39;</span><span class='p'>);</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>&amp;&amp;</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>at</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>prepend</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>append</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='p'>}</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>children</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>);</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>The <code>renderTask</code> method will receive the <code>options</code> argument, and it uses it to determine how to add the task to the list. The reason I don&#8217;t just prepend new tasks is the <code>render</code> method can now be refactored to use this method:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>());</span>

  <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#task-list&#39;</span><span class='p'>)</span>
    <span class='p'>,</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>tasklist</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>each</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>task</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>task</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;tasklist&#39;</span><span class='p'>,</span> <span class='nx'>self</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>));</span>
      <span class='nx'>self</span><span class='p'>.</span><span class='nx'>renderTask</span><span class='p'>(</span><span class='nx'>task</span><span class='p'>);</span>
    <span class='p'>});</span>
  <span class='p'>}});</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Open <code>app/js/views/lists/menuitem.js</code> and make it pass in a <code>Tasks</code> collection in the <code>open</code> method where it instantiates <code>bTask.views.tasksIndexView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TasksIndexView</span><span class='p'>({</span> <span class='nx'>collection</span><span class='o'>:</span> <span class='k'>new</span> <span class='nx'>Tasks</span><span class='p'>({</span> <span class='nx'>tasklist</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='p'>}),</span> <span class='nx'>model</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span> <span class='p'>});</span>
</code></pre>
</div>
<p>You&#8217;ll need to change the <code>define</code> statement at the top of the file to include the <code>Tasks</code> collection:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/lists/menuitem.html&#39;</span><span class='p'>,</span> <span class='s1'>&#39;views/tasks/index&#39;</span><span class='p'>,</span> <span class='s1'>&#39;collections/tasks&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>,</span> <span class='nx'>TasksIndexView</span><span class='p'>,</span> <span class='nx'>Tasks</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Due to how Google&#8217;s API works, you&#8217;ll need to make a small change to <code>app/js/gapi.js</code> to insert a <code>tasklist</code> ID into the <code>requestContent</code> payload:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>requestContent</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;tasks&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>.</span><span class='nx'>task</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>);</span>
      <span class='nx'>requestContent</span><span class='p'>.</span><span class='nx'>tasklist</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;tasklist&#39;</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>
</code></pre>
</div>
<p>Adding tasks should now work &#8211; there&#8217;s no need for a new template because it&#8217;s already been added as part of last week&#8217;s tutorial.</p>

<h3 id='editing_tasks'>Editing Tasks</h3>

<p>To edit tasks, a few things are needed:</p>

<ul>
<li>A suitable form template</li>

<li>A <code>Backbone.View</code></li>

<li>Event handling for saving the task</li>
</ul>

<p>Here&#8217;s the template, which should be saved to <code>app/js/templates/tasks/edit.html</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;fieldset&gt;</span>
  <span class='nt'>&lt;legend&gt;</span>
    Task Properties
    <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>data-task-id=</span><span class='s'>&quot;&quot;</span> <span class='na'>class=</span><span class='s'>&quot;pull-right delete-task btn&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-trash&quot;</span><span class='nt'>&gt;&lt;/i&gt;&lt;/a&gt;</span>
  <span class='nt'>&lt;/legend&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;control-group&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;label</span> <span class='na'>for=</span><span class='s'>&quot;task_title&quot;</span><span class='nt'>&gt;</span>Title<span class='nt'>&lt;/label&gt;</span>
    <span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;text&quot;</span> <span class='na'>class=</span><span class='s'>&quot;input-block-level&quot;</span> <span class='na'>name=</span><span class='s'>&quot;title&quot;</span> <span class='na'>id=</span><span class='s'>&quot;task_title&quot;</span> <span class='na'>value=</span><span class='s'>&quot;&quot;</span> <span class='na'>placeholder=</span><span class='s'>&quot;The task&#39;s title&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;control-group&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;label</span> <span class='na'>class=</span><span class='s'>&quot;radio&quot;</span><span class='nt'>&gt;&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;radio&quot;</span> <span class='na'>name=</span><span class='s'>&quot;status&quot;</span> <span class='na'>value=</span><span class='s'>&quot;needsAction&quot;</span> <span class='nt'>&gt;</span> Needs action<span class='nt'>&lt;/label&gt;</span>
    <span class='nt'>&lt;label</span> <span class='na'>class=</span><span class='s'>&quot;radio&quot;</span><span class='nt'>&gt;&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;radio&quot;</span> <span class='na'>name=</span><span class='s'>&quot;status&quot;</span> <span class='na'>value=</span><span class='s'>&quot;completed&quot;</span> <span class='nt'>&gt;</span> Complete<span class='nt'>&lt;/label&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;control-group&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;label</span> <span class='na'>for=</span><span class='s'>&quot;task_notes&quot;</span><span class='nt'>&gt;</span>Notes<span class='nt'>&lt;/label&gt;</span>
    <span class='nt'>&lt;textarea</span> <span class='na'>class=</span><span class='s'>&quot;input-block-level&quot;</span> <span class='na'>name=</span><span class='s'>&quot;notes&quot;</span> <span class='na'>id=</span><span class='s'>&quot;task_notes&quot;</span> <span class='na'>placeholder=</span><span class='s'>&quot;Notes about this task&quot;</span><span class='nt'>&gt;&lt;/textarea&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/fieldset&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;form-actions&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>type=</span><span class='s'>&quot;submit&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn btn-primary&quot;</span><span class='nt'>&gt;</span>Save Changes<span class='nt'>&lt;/button&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>class=</span><span class='s'>&quot;cancel btn&quot;</span><span class='nt'>&gt;</span>Close<span class='nt'>&lt;/button&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>I&#8217;ve included all of the usual Bootstrap classes and markup in this form fragment so it will look nice when it&#8217;s rendered.</p>

<p>The corresponding view (<code>app/js/views/tasks/edit.js</code>) should look like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/tasks/edit.html&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TaskEditView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;form&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;well edit-task&#39;</span><span class='p'>,</span>
    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;submit&#39;</span><span class='o'>:</span> <span class='s1'>&#39;submit&#39;</span>
    <span class='p'>,</span> <span class='s1'>&#39;click .cancel&#39;</span><span class='o'>:</span> <span class='s1'>&#39;cancel&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;change&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>()));</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>submit</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>title</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input[name=&quot;title&quot;]&#39;</span><span class='p'>).</span><span class='nx'>val</span><span class='p'>()</span>
        <span class='p'>,</span> <span class='nx'>notes</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;textarea[name=&quot;notes&quot;]&#39;</span><span class='p'>).</span><span class='nx'>val</span><span class='p'>()</span>
        <span class='p'>,</span> <span class='nx'>status</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input[name=&quot;status&quot;]:checked&#39;</span><span class='p'>).</span><span class='nx'>val</span><span class='p'>()</span>
        <span class='p'>;</span>

      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;title&#39;</span><span class='p'>,</span> <span class='nx'>title</span><span class='p'>);</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;notes&#39;</span><span class='p'>,</span> <span class='nx'>notes</span><span class='p'>);</span>

      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>status</span> <span class='o'>!==</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;status&#39;</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;status&#39;</span><span class='p'>,</span> <span class='nx'>status</span><span class='p'>);</span>
        <span class='k'>if</span> <span class='p'>(</span><span class='nx'>status</span> <span class='o'>===</span> <span class='s1'>&#39;needsAction&#39;</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;completed&#39;</span><span class='p'>,</span> <span class='kc'>null</span><span class='p'>);</span>
        <span class='p'>}</span>
      <span class='p'>}</span>

      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>();</span>
      <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>cancel</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>();</span>
      <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TaskEditView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This sets up a <code>submit</code> event for catching the form submission, and also an event for closing the form, which is what the <code>cancel</code> method is for.</p>

<p>Now add a method to <code>app/js/views/tasks/index.js</code> that invokes <code>TaskEditView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>editTask</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>task</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>taskEditView</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>taskEditView</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>();</span>
  <span class='p'>}</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>taskEditView</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TaskEditView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>task</span> <span class='p'>});</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#selected-task&#39;</span><span class='p'>).</span><span class='nx'>append</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>taskEditView</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>And make sure it loads <code>TaskEditView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/tasks/index.html&#39;</span><span class='p'>,</span> <span class='s1'>&#39;views/tasks/task&#39;</span><span class='p'>,</span> <span class='s1'>&#39;views/tasks/edit&#39;</span><span class='p'>,</span> <span class='s1'>&#39;collections/tasks&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>,</span> <span class='nx'>TaskView</span><span class='p'>,</span> <span class='nx'>TaskEditView</span><span class='p'>,</span> <span class='nx'>Tasks</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>This needs to be called by an individual task, so open <code>app/js/views/tasks/task.js</code> and add this to the <code>open</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>.</span><span class='nx'>editTask</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>);</span>
</code></pre>
</div>
<p>These two views have a lot of coupling between them, which makes <code>TaskView</code> difficult to reuse. However, is it likely that it&#8217;ll make sense to use it without <code>TasksIndexView</code>? That&#8217;s the kind of question you&#8217;ll ask yourself a lot when trying to write maintainable Backbone code.</p>

<h3 id='deleting_tasks'>Deleting Tasks</h3>

<p>Add a <code>destroy</code> method to <code>app/js/views/tasks/edit.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>destroy</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>destroy</span><span class='p'>();</span>
  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Then bind the method to the event on the trash can icon (<code>.delete-task</code>) and also bind an event to the model being deleted:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='s1'>&#39;submit&#39;</span><span class='o'>:</span> <span class='s1'>&#39;submit&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;click .cancel&#39;</span><span class='o'>:</span> <span class='s1'>&#39;cancel&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;click .delete-task&#39;</span><span class='o'>:</span> <span class='s1'>&#39;destroy&#39;</span>
<span class='p'>},</span>

<span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;change&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;destroy&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
<span class='p'>},</span>
</code></pre>
</div>
<h3 id='toggling_tasks'>Toggling Tasks</h3>

<p>Here&#8217;s the icing on the cake, toggling the task status! With this change, the app will really start to feel like a real to-do list app. Open <code>app/js/views/tasks/task.js</code> and add an event binding for the checkboxes in the list &#8211; a <code>change</code> event is required for this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='s1'>&#39;click&#39;</span><span class='o'>:</span> <span class='s1'>&#39;open&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;change .check-task&#39;</span><span class='o'>:</span> <span class='s1'>&#39;toggle&#39;</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>Then the <code>toggle</code> method just needs to toggle the <code>status</code> attribute based on the checkbox&#8217;s state:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>toggle</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>id</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span>
    <span class='p'>,</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;.check-task&#39;</span><span class='p'>)</span>
    <span class='p'>;</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;status&#39;</span><span class='p'>,</span> <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>attr</span><span class='p'>(</span><span class='s1'>&#39;checked&#39;</span><span class='p'>)</span> <span class='o'>?</span> <span class='s1'>&#39;completed&#39;</span> <span class='o'>:</span> <span class='s1'>&#39;needsAction&#39;</span><span class='p'>);</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;status&#39;</span><span class='p'>)</span> <span class='o'>===</span> <span class='s1'>&#39;needsAction&#39;</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;completed&#39;</span><span class='p'>,</span> <span class='kc'>null</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>();</span>
  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Google&#8217;s nomenclature for the task state is <code>completed</code> and <code>needsAction</code>, which takes a bit of digging in the documentation to find out.</p>

<h3 id='summary'>Summary</h3>

<p>It&#8217;s taken a while to get this far, but working with unfamiliar APIs with their idiosyncrasies can take a lot of patience. And if you try running the code from this project, make sure you actually have some tasks and lists in Gmail already &#8211; <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/issues/3'>it doesn&#8217;t work tell well without any</a>. I&#8217;ll fix it later!</p>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/commit/9691fc13dbcfd8adbd604c5974291011ce7148f8'>alexyoung / dailyjs-backbone-tutorial, commit 9691fc1</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/30/node-roundup">Node Roundup: 0.9.8, Queen, AssetViz</a></h2>
      <div class="meta">
        <span class="date">30 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/30/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='098'>0.9.8</h3>

<p><a href='http://blog.nodejs.org/2013/01/24/node-v0-9-8-unstable/'>Node 0.9.8</a> is out. This release includes an interesting patch from Jake Verbaten to <a href='https://github.com/joyent/node/commit/444bbd4fa7315423a6b55aba0e0c12ea6534b2cb'>support arbitrary objects in streams</a>. Internally, streams now switch to <code>objectMode</code> when objects are detected. The unit tests illustrate how this works in practice:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;can read objects from stream&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>t</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>r</span> <span class='o'>=</span> <span class='nx'>fromArray</span><span class='p'>([{</span> <span class='nx'>one</span><span class='o'>:</span> <span class='s1'>&#39;1&#39;</span><span class='p'>},</span> <span class='p'>{</span> <span class='nx'>two</span><span class='o'>:</span> <span class='s1'>&#39;2&#39;</span> <span class='p'>}]);</span>
  <span class='kd'>var</span> <span class='nx'>v1</span> <span class='o'>=</span> <span class='nx'>r</span><span class='p'>.</span><span class='nx'>read</span><span class='p'>();</span>
  <span class='kd'>var</span> <span class='nx'>v2</span> <span class='o'>=</span> <span class='nx'>r</span><span class='p'>.</span><span class='nx'>read</span><span class='p'>();</span>
  <span class='kd'>var</span> <span class='nx'>v3</span> <span class='o'>=</span> <span class='nx'>r</span><span class='p'>.</span><span class='nx'>read</span><span class='p'>();</span>

  <span class='nx'>assert</span><span class='p'>.</span><span class='nx'>deepEqual</span><span class='p'>(</span><span class='nx'>v1</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>one</span><span class='o'>:</span> <span class='s1'>&#39;1&#39;</span> <span class='p'>});</span>
  <span class='nx'>assert</span><span class='p'>.</span><span class='nx'>deepEqual</span><span class='p'>(</span><span class='nx'>v2</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>two</span><span class='o'>:</span> <span class='s1'>&#39;2&#39;</span> <span class='p'>});</span>
  <span class='nx'>assert</span><span class='p'>.</span><span class='nx'>deepEqual</span><span class='p'>(</span><span class='nx'>v3</span><span class='p'>,</span> <span class='kc'>null</span><span class='p'>);</span>
  <span class='nx'>t</span><span class='p'>.</span><span class='nx'>end</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Notice how each <code>read</code> causes an object to be returned. Jake has been heavily involved with streams over the last year or two, with plenty of notable modules in his <a href='https://github.com/Raynos?tab=repositories'>Raynos GitHub account</a>.</p>

<h3 id='queen'>Queen</h3>

<p><img src='/images/posts/queen.png' alt='Queen' /></p>

<p>Last week I wrote about Ozan Turgut&#8217;s <a href='http://thrilljs.com/'>Thrill</a> project. The core component, which people seemed to find more interesting, was <a href='http://queenjs.com/'>Queen</a> (GitHub: <a href='https://github.com/turn/queen'>turn / queen</a>, License: <em>Apache v2</em>, npm: <a href='https://npmjs.org/package/queen'>queen</a>). Queen is a server that can run scripts on multiple browsers. This could be used for anything, not just for running tests which is what Thrill does.</p>

<p>Queen clients and servers have bidirectional communication, and Queen will detect and recover unresponsive browsers. It can target browsers by type, version, and OS, and run scripts via the command-line.</p>

<h3 id='assetviz'>AssetViz</h3>

<p><img src='/images/posts/assetviz.png' alt='AssetViz on DailyJS' /></p>

<p>AssetViz (GitHub: <a href='https://github.com/Munter/assetviz'>Munter / assetviz</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/assetviz'>assetviz</a>) by Peter Müller is a <em>command-line web application source code visualisation tool</em>. It generates self-contained HTML files that show a visualisation of the site using D3.js.</p>

<p>The nodes that make up the visualisation can be dragged and will spring back into place, and you can also zoom using the mousewheel.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/29/jquery-roundup">jQuery Roundup: QUnit 1.11, Knockout-jQueryUI, Tab Override, FilteredPaste.js</a></h2>
      <div class="meta">
        <span class="date">29 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/29/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#knockout">knockout</a>
          
            <a href="/tags.html#keyboard">keyboard</a>
          
            <a href="/tags.html#paste">paste</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='qunit_111'>QUnit 1.11</h3>

<p>There&#8217;s a good post on the official jQuery blog about a change in direction to the QUnit project: <a href='http://blog.jquery.com/2013/01/24/qunit-1-11-release-a-look-back-and-forth/'>QUnit 1.11 Release: A Look Back (and Forth)</a>. It discusses some of the history behind QUnit, and includes a <a href='https://docs.google.com/spreadsheet/viewform?formkey=dDBzQl9TWmQzbDdXS08wMTBuLTlObXc6MQ#gid=0'>survey</a> where you can share how you&#8217;re using it.</p>

<h3 id='knockoutjqueryui'>Knockout-jQueryUI</h3>

<p>Trying to integrate libraries like <a href='http://knockoutjs.com/'>Knockout</a> is sometimes confusing when you&#8217;re already using jQuery UI. To address this, Vas Gábor has created <a href='http://gvas.github.com/knockout-jqueryui/index.html'>Knockout-jQueryUI</a> (GitHub: <a href='https://github.com/gvas/knockout-jqueryui'>gvas / knockout-jqueryui</a>, License: <em>MIT</em>), which is a collection of Knockout bindings for jQuery UI widgets.</p>

<p>It&#8217;s small, comes with a build script and unit tests, and the author has provided full documentation on the project&#8217;s homepage.</p>

<h3 id='tab_override'>Tab Override</h3>

<p><a href='https://github.com/wjbryant/taboverride'>Tab Override</a> (GitHub: <a href='https://github.com/wjbryant/taboverride'>wjbryant / taboverride</a>, License: <em>MIT</em>, bower: <em>taboverride</em>) by Bill Bryant allows the tab key to insert tabs in <code>textarea</code> elements. It also supports auto indent and multi-line tab insertion.</p>

<p>There&#8217;s also a <a href='https://github.com/wjbryant/jquery.taboverride'>jQuery Tab Override plugin</a>, and both scripts are AMD-compatible. Bill has included QUnit tests, which actually simulate key presses to test the script&#8217;s various features.</p>

<h3 id='filteredpastejs'>FilteredPaste.js</h3>

<p><a href='http://willemmulder.github.com/FilteredPaste.js/'>FilteredPaste.js</a> (GitHub: <a href='https://github.com/willemmulder/FilteredPaste.js'>willemmulder / FilteredPaste.js</a>, License: <em>CC BY-SA 3.0</em>) by Willem Mulder can be used to filter text when it&#8217;s pasted into <code>textarea</code> elements, or anything with the <code>contenteditable</code> attribute. Why is this useful? Well, Willem got tired of dealing with support requests when text pasted from Word into his CMS carried across unwanted formatting.</p>

<p>I find myself always using <em>Paste and Match Style</em> and wondering why this isn&#8217;t the default for the paste keyboard shortcut. The only time I&#8217;ve ever wanted to include formatting when pasting is when I make slides in Keynote/PowerPoint/Google Drive and want to include syntax highlighting in my examples. And that seems like an edge case if ever there was one!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/28/components">Confused About Components</a></h2>
      <div class="meta">
        <span class="date">28 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/28/components/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#component.json">component.json</a>
          
            <a href="/tags.html#package-management">package-management</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Client-side development has been shifting away from monolithic libraries. While jQuery is still hugely popular, building projects from smaller libraries is increasingly common. To make this easier to deal with, projects have appeared to manage dependencies. These tools may be simple package managers, or a combination of a build tool and a package manager.</p>

<h3 id='recent_history'>Recent History</h3>

<p>Client-side package managers have been around for a few years now. An earlier example is <a href='https://github.com/kriszyp/cpm'>CPM</a>, which is a CommonJS package manager. Last year the subject got newfound attention from Node developers. There was a very public debate between Isaac Schlueter and TJ Holowaychuk in which several issues were covered:</p>

<ul>
<li>Should client-side libraries use CommonJS modules or AMD?</li>

<li>Should npm or a new registry be used to store client-side libraries?</li>

<li>What should be included within client-side libraries?</li>
</ul>

<blockquote>
<p>&#8220;A component can be not just JavaScript, but CSS, images, fonts or other resources, or a component may be any combination of these. This is the main idea that I want to sell, we need to broaden modularity beyond just JavaScript source.&#8221;</p>
</blockquote>

<p>&#8211; <a href='http://tjholowaychuk.com/post/27984551477/components'>TJ Holowaychuk, Components</a></p>

<blockquote>
<p>&#8220;However, they should have the same level of modularity and order that we&#8217;ve been able to get with JavaScript packages using npm and Node.js. It&#8217;s a much stickier problem, because the deployment environment is so much more hostile.&#8221;</p>
</blockquote>

<p>&#8211; <a href='http://blog.izs.me/post/27987129912/tj-holowaychuk-components'>Isaac&#8217;s response</a></p>

<p>Shortly after this discussion, TJ released <a href='https://github.com/component/component'>Component</a>, which is a <em>component</em> manager. Components may include JavaScript, styles, and markup. Markup and styles are encouraged to be &#8220;structural&#8221;, allowing users to easily skin components. Examples of components include anything from generic JavaScript libraries &#8211; like a small <a href='https://github.com/component/mean'>mathematical helper function</a>, to a fully-blown UI widget, like a <a href='https://github.com/component/datepicker'>date picker</a>.</p>

<h3 id='component_workflows'>Component Workflows</h3>

<p>What isn&#8217;t immediately obvious about Component is it builds client-side scripts by adding a <a href='http://wiki.commonjs.org/wiki/Modules/1.1'>CommonJS Modules/1.1</a> implementation &#8211; components are loaded using <code>var lib = require(&#39;lib&#39;)</code>. The upshot of this is there&#8217;s a learning curve to writing components, and also understanding how to make this work inside existing projects. Component is specifically designed to work regardless of server-side architecture, so you could use it with Django, Express, or Rails projects without special handling. Discovering how to use components inside these frameworks is the main point of friction when switching to a component-based workflow &#8211; do you structure your entire project around components? Or just use Component as a way of managing dependencies?</p>

<p>Contrast this to Bower. It&#8217;s more like earlier projects, which include Jam and Volo, and therefore offers less in terms of treating entire slices of the UI as reusable chunks. This is by design &#8211; Bower is meant to work with build tools rather than replace them.</p>

<p>Then there&#8217;s Ender, which provides an API for loading modules (CommonJS is supported), and is built on top of npm. Jam encourages the use of AMD and depends on RequireJS. Volo doesn&#8217;t depend on AMD modules, but encourages them to be used.</p>

<blockquote>
<p>Bower could have effectively been: <code>curl http://wherever-bower-repos-are.com | grep underscore | xargs git clone</code></p>
</blockquote>

<p>&#8211; <a href='https://groups.google.com/d/msg/componentjs/FGM46qQX9hs/edG3KwOIdLYJ'>TJ Holowaychuk, component Google Group</a></p>

<p>That&#8217;s how I initially felt when I first saw Bower, but Bower&#8217;s simplicity is a result of it being designed to work alongside client-side build tools. That means Bower will work with RequireJS, LoadBuilder, or even Sprockets. If you&#8217;re using a large server-side framework like Rails, then it might be easier to use Bower with the framework&#8217;s existing asset management tools.</p>

<h3 id='build_tools_and_package_managers'>Build Tools and Package Managers</h3>

<p>As TJ hinted at above, the biggest problem facing client-side package managers is anybody can make one. It doesn&#8217;t take much effort to write a script that can fetch libraries from GitHub and then pipe them through UglifyJS.</p>

<p>Bower&#8217;s separation between package manager and build tools is insightful, but I also think the modular client-side development being pushed by Component is extremely important and makes client-side development better.</p>

<h3 id='the_state_of_affairs'>The State of Affairs</h3>

<p>We&#8217;re now at the point where library authors are increasingly including a <code>component.json</code> file. How do you know if this is a Bower or Component manifest file? Let&#8217;s say I want to install <a href='https://github.com/defunkt/jquery-pjax'>pjax</a>. It has a <code>component.json</code>, so I run <code>component install defunkt/jquery-pjax</code>. The result is an error:</p>
<div class='highlight'><pre><code class='text'>error : Error: invalid component name &quot;jquery&quot;
</code></pre>
</div>
<p>It turns out pjax is designed to be used with Bower.</p>

<p>This situation is made more confusing because neither project addresses this fact. It&#8217;s almost like they don&#8217;t want to acknowledge each other. There&#8217;s a <a href='https://groups.google.com/d/msg/componentjs/FGM46qQX9hs/zOryL24q1AcJ'>discussion about Bower</a> in the component Google Group, but neither project is particularly helpful with regard to the differences between manifest files, given the decision to use the same name.</p>

<p>Is Bower run by evil Twitter imperialists hell-bent on wrestling <code>component.json</code> away from the Component project? Well, no, because Bower can be configured to use a different file name, and the projects have different goals. However, the clash is unfortunate, particularly for client-side developers who work closer to the design end of the design/coding spectrum, and may not even be aware that both projects exist.</p>

<p>It would be nice to see this issue addressed clearly in Bower and Component&#8217;s documentation. The fact Twitter has its logo on Bower doesn&#8217;t make it the best or correct project to use &#8211; I encourage you to try out both projects. Client-side development is more than just JavaScript files, so I feel like Component has a chance to reach critical mass if enough people get behind it.</p>

<h3 id='jargon'>Jargon</h3>

<ul>
<li><em>Package Manager</em>: Fetch scripts from online sources like GitHub, taking dependencies into account.</li>

<li><em>Build Tool</em>: Combine scripts and other assets together into something usable by browsers.</li>

<li><em>Module System</em>: A way to programmatically load scripts when they&#8217;re needed.</li>
</ul>

<h3 id='comparison_table'>Comparison Table</h3>
<table class='amy horizontal'>
  <thead>
    <tr>
      <th>&nbsp;</th>
      <th><a href='http://twitter.github.com/bower/'>Bower</a></th>
      <th><a href='https://github.com/component/component'>Component</a></th>
      <th><a href='http://ender.jit.su/'>Ender</a></th>
      <th><a href='http://jamjs.org/'>Jam</a></th>
      <th><a href='http://volojs.org/'>Volo</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>License</th>
      <td>MIT</td>
      <td>MIT</td>
      <td>MIT</td>
      <td>MIT</td>
      <td>MIT/New BSD</td>
    </tr>
    <tr>
      <th>Appeared</th>
      <td>Sep 2012</td>
      <td>Aug 2012</td>
      <td>Apr 2011</td>
      <td>May 2012</td>
      <td>Oct 2010</td>
    </tr>
    <tr>
      <th>Package Registry</th>
      <td><a href='http://sindresorhus.com/bower-components/'>Server</a></td>
      <td><a href='https://github.com/component/component/wiki/Components'>Wiki</a></td>
      <td><a href='https://npmjs.org/'>npm</a></td>
      <td><a href='http://jamjs.org/packages/#/'>Server</a></td>
      <td>GitHub</td>
    </tr>
    <tr>
      <th>Module Pattern</th>
      <td>&nbsp;</td>
      <td>CommonJS</td>
      <td>CommonJS</td>
      <td>AMD</td>
      <td>AMD/CommonJS compatible</td>
    </tr>
  </tbody>
</table>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/25/pde-engine-colormap-dimsum">pde-engine, colormap, Dimsum</a></h2>
      <div class="meta">
        <span class="date">25 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/25/pde-engine-colormap-dimsum/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#physics">physics</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#fastfood">fastfood</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='pdeengine_and_colormap'>pde-engine and colormap</h3>
<div class='image'>
  <img src='/images/posts/pde-engine.png' alt='' />
  <small>Wave example running on benpostlethwaite.ca</small>
</div>
<p>Ben Postlethwaite sent in two libraries this week. The first, pde-engine (GitHub: <a href='https://github.com/bpostlethwaite/pde-engine'>bpostlethwaite / pde-engine</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/pde-engine'>pde-engine</a>), can be used to create &#8220;nice looking physically realistic effects in websites or games&#8221;.</p>

<p>Ben&#8217;s site, <a href='http://benpostlethwaite.ca/'>benpostlethwaite.ca</a> has live examples for the &#8220;wave&#8221; and &#8220;heat&#8221; equations, and the project takes advantage of Typed Arrays to improve performance. Ben suggests using <a href='https://npmjs.org/package/browserify'>browserify</a> to generate a browser-friendly version of code using pde-engine.</p>

<p>The colours in Ben&#8217;s examples come from his second project, colormap (GitHub: <a href='https://github.com/bpostlethwaite/colormap'>bpostlethwaite / colormap</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/colormap'>colormap</a>). This project generates color values based on Matlab&#8217;s plot colours, and apparently works well with <a href='http://d3js.org/'>D3.js</a>.</p>

<p>Both projects come with example code and documentation in the readme files.</p>

<h3 id='dimsum'>Dimsum</h3>

<p>I don&#8217;t mind a bit of dim sum now and again, particularly those steamed buns with custard fillings. My computer can&#8217;t yet 3D print Chinese dumplings though, so instead I recommend <a href='http://ninjascribble.github.com/dimsum/'>Dimsum</a> (GitHub: <a href='https://github.com/ninjascribble/dimsum'>ninjascribble / dimsum</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/dimsum'>dimsum</a>) by Scott Grogan. It generates lorem ipsum text, and can be used with Node or browsers.</p>

<p>Dimsum includes two flavours: <code>latin</code> and <code>jabberwocky</code>. New flavours can also be added, so you could dump in some generic marketing text to get a more accurate mockup going.</p>

<p>Scott has thoughtfully included Mocha tests as well.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/24/backbone-tutorial-9">Backbone.js Tutorial: Tasks</a></h2>
      <div class="meta">
        <span class="date">24 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/24/backbone-tutorial-9/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
            <a href="/tags.html#fastfood">fastfood</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'><strong>Part 9: Tasks</strong></a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>8d88095</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 8d88095
</code></pre>
</div>
<h3 id='tasks_crud'>Tasks CRUD</h3>

<p>Things have been quiet in the Tasks Bootstrap project over the last few weeks. Lists have appeared, but there&#8217;s been nary a Hamburglar or Burger King in sight. How do we attract those all important fast food mascots to our project? By adding support for tasks of course! How else can they write their extensive lists of upcoming franchise inspections and special edition McRibs?</p>

<p>This tutorial will cover the following:</p>

<ul>
<li>Creating a view for a single task</li>

<li>Creating a view for a list of tasks</li>

<li>Adding the tasks collection</li>

<li>Fetching tasks from Google&#8217;s API</li>
</ul>

<p>The really interesting part that you&#8217;ll want to remember is dealing with the relationship between a parent view and child views. Backbone doesn&#8217;t specifically address relationships between models, or views. In this example, we ideally want to say <em>tasks belong to lists</em> or <em>task views belong to list views</em>. However, there isn&#8217;t a de facto way of expressing such relationships. There are libraries out there to do it, but I&#8217;ll show you how to think about things in pure Backbone/Underscore.</p>

<h3 id='boilerplate'>Boilerplate</h3>

<p>Before you get started, create some new directories:</p>
<div class='highlight'><pre><code class='text'>$ mkdir app/js/views/tasks
$ mkdir app/js/templates/tasks
</code></pre>
</div>
<p>And add a new collection to <code>app/js/collections/tasks.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;models/task&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>Task</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>Tasks</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>Task</span><span class='p'>,</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasks&#39;</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>Tasks</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>Tasks</code> collection doesn&#8217;t do anything you haven&#8217;t seen before. Fetching tasks with Google&#8217;s API requires a <code>tasklist</code>, so you have to call <code>fetch</code> with an additional parameter:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>tasklist</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='p'>},</span> <span class='c1'>// ...</span>
</code></pre>
</div>
<p>It&#8217;s cool though, because we handled fetching <code>TaskLists</code> like that when we passed <code>{ userId: &#39;@me&#39; }</code> so it feels consistent within the context of this project.</p>

<p>The template that contains the tasks view includes a form for creating new tasks, a container for the task list, and another container for the currently selected task (so it can be edited). This file should be saved as <code>app/js/templates/index.js</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;span6&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;add-task&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;form</span> <span class='na'>class=</span><span class='s'>&quot;well row form-inline add-task&quot;</span><span class='nt'>&gt;</span>
      <span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;text&quot;</span> <span class='na'>class=</span><span class='s'>&quot;pull-left&quot;</span> <span class='na'>placeholder=</span><span class='s'>&quot;Enter a new task&#39;s title and press return&quot;</span> <span class='na'>name=</span><span class='s'>&quot;title&quot;</span><span class='nt'>&gt;</span>
      <span class='nt'>&lt;button</span> <span class='na'>type=</span><span class='s'>&quot;submit&quot;</span> <span class='na'>class=</span><span class='s'>&quot;pull-right btn&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-plus&quot;</span><span class='nt'>&gt;&lt;/i&gt;&lt;/button&gt;</span>
    <span class='nt'>&lt;/form&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;ul</span> <span class='na'>id=</span><span class='s'>&quot;task-list&quot;</span><span class='nt'>&gt;&lt;/ul&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;span6&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;selected-task&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;alert&quot;</span> <span class='na'>id=</span><span class='s'>&quot;warning-no-task-selected&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;strong&gt;</span>Note:<span class='nt'>&lt;/strong&gt;</span> Select a task to edit or delete it.
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>This uses some <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a> classes for creating columns. The <code>TaskView</code>, in <code>app/js/templates/tasks/task.html</code> has a few elements to contain the title, notes, and a checkbox for toggling the task&#8217;s state:</p>
<div class='highlight'><pre><code class='javascript'><span class='o'>&lt;</span><span class='nx'>input</span> <span class='nx'>type</span><span class='o'>=</span><span class='s2'>&quot;checkbox&quot;</span> <span class='nx'>data</span><span class='o'>-</span><span class='nx'>task</span><span class='o'>-</span><span class='nx'>id</span><span class='o'>=</span><span class='s2'>&quot;&quot;</span> <span class='nx'>name</span><span class='o'>=</span><span class='s2'>&quot;task_check_&quot;</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;check-task&quot;</span> <span class='nx'>value</span><span class='o'>=</span><span class='s2'>&quot;t&quot;</span><span class='o'>&gt;</span>
<span class='o'>&lt;</span><span class='nx'>span</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;title &quot;</span><span class='o'>&gt;&lt;</span><span class='err'>/span&gt;</span>
<span class='o'>&lt;</span><span class='nx'>span</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;notes&quot;</span><span class='o'>&gt;&lt;</span><span class='err'>/span&gt;</span>
</code></pre>
</div>
<h3 id='views'>Views</h3>

<p>The main <code>TasksIndexView</code> loads the tasks using the <code>Tasks</code> collection, and then renders them using <code>TaskView</code>. This is the source for <code>TasksIndexView</code> in <code>app/js/views/tasks/index.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/tasks/index.html&#39;</span><span class='p'>,</span> <span class='s1'>&#39;views/tasks/task&#39;</span><span class='p'>,</span> <span class='s1'>&#39;collections/tasks&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>,</span> <span class='nx'>TaskView</span><span class='p'>,</span> <span class='nx'>Tasks</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TasksIndexView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;div&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;row-fluid&#39;</span><span class='p'>,</span>

    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;submit .add-task&#39;</span><span class='o'>:</span> <span class='s1'>&#39;addTask&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>children</span> <span class='o'>=</span> <span class='p'>[];</span>
    <span class='p'>},</span>

    <span class='nx'>addTask</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>());</span>

      <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#task-list&#39;</span><span class='p'>)</span>
        <span class='p'>,</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>

      <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Tasks</span><span class='p'>();</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>tasklist</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>each</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>task</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='kd'>var</span> <span class='nx'>item</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TaskView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>task</span><span class='p'>,</span> <span class='nx'>parentView</span><span class='o'>:</span> <span class='nx'>self</span> <span class='p'>});</span>
          <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>append</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
          <span class='nx'>self</span><span class='p'>.</span><span class='nx'>children</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>);</span>
        <span class='p'>});</span>
      <span class='p'>}});</span>

      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TasksIndexView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This loads the tasks using <code>collection.fetch</code>, and then appends a <code>TaskView</code> for each task. This is <code>TaskView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/tasks/task.html&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TaskView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;li&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;controls well task row&#39;</span><span class='p'>,</span>

    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;click&#39;</span><span class='o'>:</span> <span class='s1'>&#39;open&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span> <span class='o'>=</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>el</span><span class='p'>);</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>data</span><span class='p'>(</span><span class='s1'>&#39;taskId&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>));</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>()));</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;.check-task&#39;</span><span class='p'>).</span><span class='nx'>attr</span><span class='p'>(</span><span class='s1'>&#39;checked&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;status&#39;</span><span class='p'>)</span> <span class='o'>===</span> <span class='s1'>&#39;completed&#39;</span><span class='p'>);</span>

      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>.</span><span class='nx'>activeTaskView</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>.</span><span class='nx'>activeTaskView</span><span class='p'>.</span><span class='nx'>close</span><span class='p'>();</span>
      <span class='p'>}</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>parentView</span><span class='p'>.</span><span class='nx'>activeTaskView</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>close</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TaskView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The parent view is tracked so <code>open</code> can determine if another task has been clicked on, and if so &#8220;deactivate&#8221; it (remove the <code>active</code> class). There are many ways to do this: I&#8217;ve seen people iterating over views to close all of them, using <code>$(&#39;selector&#39;).removeClass(&#39;active&#39;)</code> to remove all related items with an <code>active</code> class, or triggering events on models. I feel like view-related code should be handled in views, and models and collections should do their own specific jobs.</p>

<p>Next you&#8217;ll need to add <code>TasksIndexView</code> to the <code>define</code> in <code>app/js/views/lists/menuitem.js</code> and change the <code>open</code> method to instantiate a <code>TasksIndexView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>

  <span class='c1'>// Render the tasks</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>();</span>
  <span class='p'>}</span>

  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TasksIndexView</span><span class='p'>({</span> <span class='nx'>collection</span><span class='o'>:</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>,</span> <span class='nx'>model</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span> <span class='p'>});</span>
  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#tasks-container&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>tasksIndexView</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>It tracks the last instance of <code>TasksIndexView</code> so it can remove it manually. It&#8217;s usually a good idea to call <code>remove</code> so events can be unbound before views go out of scope &#8211; I&#8217;ll write a tutorial about Backbone and garbage collection later on.</p>

<p>I also added some defaults to the <code>Task</code> model (in <code>app/js/models/task.js</code>):</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>Task</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Model</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasks&#39;</span><span class='p'>,</span>
    <span class='nx'>defaults</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span><span class='p'>,</span> <span class='nx'>notes</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span> <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>Task</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The reason I did this was the <code>TaskView</code> will raise errors when interpolating using a model that doesn&#8217;t have a title or notes &#8211; it&#8217;s quite common for tasks in Google Tasks to not have any notes.</p>

<p>With these templates, views, and changes, you should be able to select lists and see their tasks, and also select tasks.</p>

<h3 id='styles'>Styles</h3>

<p><img src='/images/posts/backbone-9-styles.png' alt='Bootstrap styles' /></p>

<p>As it stands, the application doesn&#8217;t make a lot of visual sense. I&#8217;ve added Bootstrap &#8211; this just required downloading the CSS and image files and putting them in <code>app/css</code> and <code>app/img</code>. Also, <code>app/index.html</code> loads <code>css/bootstrap.min.css</code>.</p>

<p>I added some custom styles to create a panel-based layout that shows the tasks in a similar way to <a href='http://culturedcode.com/things/'>Things</a>.</p>

<h3 id='backbone_0910'>Backbone 0.9.10</h3>

<p>I&#8217;ve updated Backbone to 0.9.10 and added it to the repository. I had to change the <code>Backbone.sync</code> method to use a different signature when calling <code>options.success</code>, in <code>app/js/gapi.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>result</span><span class='p'>,</span> <span class='nx'>request</span><span class='p'>);</span>
</code></pre>
</div>
<h3 id='summary'>Summary</h3>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/commit/0491ad6e7de28ccfe0cab59138a93c469a3f2a7e'>alexyoung / dailyjs-backbone-tutorial, commit 0491ad</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/23/node-roundup">Node Roundup: 0.8.18, Thrill, analytics-node, Hulkster</a></h2>
      <div class="meta">
        <span class="date">23 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/23/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#templating">templating</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_0818'>Node 0.8.18</h3>

<p><a href='http://blog.nodejs.org/2013/01/18/node-v0-8-18-stable/'>Node 0.8.18</a> is out, and <a href='http://blog.nodejs.org/2013/01/18/node-v0-9-7-unstable/'>0.9.7</a> was released on the same day as well.</p>

<p>I&#8217;m still tracking those stream module changes in the 0.9 branch, and this release has a fix for <a href='https://github.com/joyent/node/commit/14e8f806deca0475da31676fd9952d341b8f50e5'>handling large reads from push-streams</a>. Although the commit isn&#8217;t dramatic, the test case seems to thoroughly cover the problems outlined in the commit message.</p>

<h3 id='thrill'>Thrill</h3>

<p><img src='/images/posts/thrill.png' alt='Thrill' /></p>

<p>Ozan Turgut sent in <a href='http://thrilljs.com/'>Thrill</a> (GitHub: <a href='https://github.com/ozanturgut/thrill'>ozanturgut / thrill</a>, License: <em>Apache 2.0</em>, npm: <a href='https://npmjs.org/package/thrill'>thrill</a>), a new test runner that can drive browsers over the network. A server runs tests using pools of browsers powered by Selenium Grid, Sauce Labs, or Browser Stack.</p>

<p>There&#8217;s a <a href='https://github.com/ozanturgut/thrill/wiki/Use'>quick start guide</a> that explains how to install the requirements and run some tests using Jasmine, but you could use another test framework if you prefer.</p>

<p>The tests will be run in a browser after &#8220;connecting&#8221; it to a server. Once this is done, tests can be run using the command-line tool, <code>thrill</code>. That means you can run a standard Jasmine spec file with <code>thrill runner.html</code> and it&#8217;ll run on all of the connected browsers.</p>

<p>The documentation for the project makes all of this easy to follow, so if you want to try it out take a look at taht <a href='https://github.com/ozanturgut/thrill/wiki/Use'>quick start guide</a>.</p>

<h3 id='analyticsnode'>analytics-node</h3>

<p><a href='https://segment.io/libraries/node'>analytics-node</a> (GitHub: <a href='https://github.com/segmentio/analytics-node'>segmentio / analytics-node</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/analytics-node'>analytics-node</a>) is a Node client for <a href='https://segment.io/'>Segment.io</a>. It can be used to send data to various analytics services with the same API as the extremely popular <a href='https://github.com/segmentio/analytics.js'>analytics.js</a> library.</p>

<h3 id='hulkster'>Hulkster</h3>

<p>Hulkster (GitHub: <a href='https://github.com/neoziro/hulkster'>neoziro / hulkster</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/hulkster'>hulkster</a>) by Greg Bergé is a <a href='http://twitter.github.com/hogan.js/'>Hogan.js</a> wrapper that adds extra functionality. It can be used as a Node module, or as a command-line tool.</p>

<p>Hulkster adds lots of command-line options, like control over the format (json or js), the export variable used, AMD-style, and minification. The author has included some Mocha tests to make sure these new features work as intended.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/22/jquery-roundup">jQuery Roundup: Plugin Registry, imagemax, jQuery Sortable</a></h2>
      <div class="meta">
        <span class="date">22 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/22/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#sortable">sortable</a>
          
            <a href="/tags.html#galleries">galleries</a>
          
            <a href="/tags.html#slideshow">slideshow</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_plugin_registry'>jQuery Plugin Registry</h3>
<div class='image'>
  <img src='/images/posts/jquery-plugin-registry.png' alt='' />
  <small>jQuery: Write once, do more, then write a weird framework-specific manifest file, learn Git, then share!</small>
</div>
<p>The new <a href='http://plugins.jquery.com/'>jQuery Plugin Registry</a> has finally been released. It&#8217;s based on WordPress, and you can download the source from GitHub: <a href='https://github.com/jquery/plugins.jquery.com'>plugins.jquery.com</a>.</p>

<p>To list a plugin on the registry, take a look at the <a href='http://plugins.jquery.com/docs/publish/'>Publishing Your Plugin</a> guide. The workflow is based around Git, and you&#8217;ll need to write a <code>jquery.json</code> manifest file so the registry can display appropriate metadata. Even though dependencies are listed, there isn&#8217;t an official automated tool for installing them (a jQuery npm or component equivalent):</p>

<blockquote>
<p>If you&#8217;re looking to just browse and use jQuery plugins in your application or site, not a lot has changed. Plugins each have basic pages that provide a link to the plugin download, as well as past versions, documentation, issue tracker, and source code repository. Download links may serve you a zip file with the plugin assets, or link to the best resource to download the build of the plugin you&#8217;re looking for.</p>
</blockquote>

<p>Given the amount of people writing JavaScript libraries with an <em>optional</em> jQuery support layer, having to add an extra file just to get published on a website seems odd to me. While it means you don&#8217;t need to create an account on the plugin registry site, people will end up with several json files littering their repositories and getting out of sync. There&#8217;s probably already a Node tool for automatically generating jQuery, Component/Bower, and npm/Ender json files.</p>

<h3 id='imagemax'>imagemax</h3>

<p><a href='http://zerostatic.com/imagemax/'>imagemax</a> (GitHub: <a href='https://github.com/zerostatic/imagemax'>zerostatic / imagemax</a>, License: <em>MIT</em>) by Matt Wallace is a fullscreen slideshow plugin. Images are displayed in the background and scaled to fit the window.</p>

<p>Like other gallery plugins, this one will display a set of images in a container, but it also takes an array of images as an argument:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#bg&#39;</span><span class='p'>).</span><span class='nx'>imagemax</span><span class='p'>({</span>
  <span class='nx'>imageArray</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;img/bg1.jpg&#39;</span><span class='p'>,</span><span class='s1'>&#39;img/bg2.jpg&#39;</span><span class='p'>,</span><span class='s1'>&#39;img/bg3.jpg&#39;</span><span class='p'>]</span>
<span class='p'>,</span> <span class='nx'>autoPlay</span><span class='o'>:</span> <span class='mi'>4000</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='jquery_sortable'>jQuery Sortable</h3>

<p><a href='http://johnny.github.com/jquery-sortable/'>jQuery Sortable</a> (GitHub: <a href='https://github.com/johnny/jquery-sortable'>johnny / jquery-sortable</a>, License: <em>BSD3</em>) by Jonas von Andrian is a drag-and-drop sort library that doesn&#8217;t require jQuery UI. It supports nested lists, and the demo (with default options) shows a nice &#8220;drop&#8221; indicator so it&#8217;s easy to see where an element is being moved to.</p>

<p>The author has demonstrated it being used with Bootstrap, and it works well with Bootstrap&#8217;s markup and styles. It allows tables to be sorted, but this won&#8217;t work as well in Konqueror or IE.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/21/caress-cjs2web-zoe">Caress, cjs2web, zoe.js</a></h2>
      <div class="meta">
        <span class="date">21 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/21/caress-cjs2web-zoe/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#oo">oo</a>
          
            <a href="/tags.html#touch">touch</a>
          
            <a href="/tags.html#commonjs">commonjs</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='caress'>Caress</h3>

<p><a href='http://caressjs.com/'>Caress</a> (GitHub: <a href='https://github.com/ekryski/caress-server'>ekryski / caress-server</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/caress-server'>caress-server</a>) by Eric Kryski converts <a href='http://tuio.org/'>TUIO</a> events to browser events (W3C Touch Events version 2), allowing desktop browsers to be driven by multitouch devices. This includes Apple&#8217;s Magic Trackpad, Android, and iOS devices.</p>

<p>Caress uses Node and Socket.IO to send TUIO messages to the browser &#8211; this is usually done using UDP, but Node and Socket.IO seem to work well. Since Caress can be used with the Magic Trackpad, it might work well as a shortcut for testing touch-based interfaces during development.</p>

<h3 id='cjs2web'>cjs2web</h3>

<p>cjs2web (GitHub: <a href='https://github.com/alexlawrence/cjs2web'>cjs2web</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/cjs2web'>cjs2web</a>) by Alex Lawrence is a CommonJS module-to-browser translation tool. It currently supports mapping local modules, and the <code>exports</code> object (including <code>module.exports</code>). It doesn&#8217;t support Node&#8217;s <code>process</code> and <code>global</code> modules, so it&#8217;s useful for lightweight porting of browser-friendly code. This is in contrast to something like <a href='https://github.com/azer/onejs'>OneJS</a> that actually aims to create a Node-like environment in the browser.</p>

<p>Jasmine specs are included, and the Grunt build script used to run them.</p>

<h3 id='zoejs'>zoe.js</h3>

<p><a href='http://zoejs.org/'>zoe.js</a> (GitHub: <a href='https://github.com/zestjs/zoe'>zestjs / zoe</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/zoe'>zoe</a>, component: <code>zestjs/zoe</code>) by Guy Bedford is a Node/AMD/browser library for working with multiple inheritance:</p>

<blockquote>
<p>The basic principle is that inheritance is a form of object extension. A core object is extended with a number of implemented definitions. When that object is extended, a new object is created implementing the core definitions as well as any new definitions. This is the inheritance system of <code>zoe.create</code>.</p>
</blockquote>

<p>Objects created this way can be configured with &#8220;function chains&#8221;, which allows the library to support asynchronous code and various forms of the observer pattern.</p>

<p>Basic object extension uses <code>zoe.create</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>baseClass</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>hello</span><span class='o'>:</span> <span class='s1'>&#39;world&#39;</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>derivedClass</span> <span class='o'>=</span> <span class='nx'>zoe</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>([</span><span class='nx'>baseClass</span><span class='p'>],</span> <span class='p'>{</span>
  <span class='nx'>another</span><span class='o'>:</span> <span class='s1'>&#39;property&#39;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>If an <code>_extend</code> property is supplied, zoe will use it to apply various rules. In this example, chaining is used which will cause both <code>greet</code> methods to run:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>greetClass</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>_extend</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>greet</span><span class='o'>:</span> <span class='s1'>&#39;CHAIN&#39;</span>
  <span class='p'>},</span>
  <span class='nx'>greet</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='s1'>&#39;howdy&#39;</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>myClass</span> <span class='o'>=</span> <span class='nx'>zoe</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>([</span><span class='nx'>greetClass</span><span class='p'>],</span> <span class='p'>{</span>
  <span class='nx'>greet</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>alert</span><span class='p'>(</span><span class='s1'>&#39;greeting&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='nx'>myClass</span><span class='p'>.</span><span class='nx'>greet</span><span class='p'>();</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/18/breeze-automaton-dejavu">BreezeJS, Automaton, dejavu</a></h2>
      <div class="meta">
        <span class="date">18 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/18/breeze-automaton-dejavu/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#oo">oo</a>
          
            <a href="/tags.html#databases">databases</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='breezejs'>BreezeJS</h3>

<p><a href='http://www.breezejs.com/'>BreezeJS</a> (GitHub: <a href='https://github.com/IdeaBlade/Breeze'>IdeaBlade / Breeze</a>, License: <em>MIT</em>) by IdeaBlade is a data management library &#8211; it can be used to build queries, track changes, bind to MVC libraries like Knockout, and cache data in the client.</p>

<p>The query interface is like LINQ, but it doesn&#8217;t specifically require .NET:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>query</span> <span class='o'>=</span> <span class='nx'>breeze</span><span class='p'>.</span><span class='nx'>EntityQuery</span>
           <span class='p'>.</span><span class='nx'>from</span><span class='p'>(</span><span class='s1'>&#39;Customers&#39;</span><span class='p'>)</span>
           <span class='p'>.</span><span class='nx'>where</span><span class='p'>(</span><span class='s1'>&#39;CompanyName&#39;</span><span class='p'>,</span> <span class='s1'>&#39;startsWith&#39;</span><span class='p'>,</span> <span class='s1'>&#39;A&#39;</span><span class='p'>)</span>
           <span class='p'>.</span><span class='nx'>orderBy</span><span class='p'>(</span><span class='s1'>&#39;CompanyName&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>BreezeJS supports asynchronous queries through promises:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>promise</span> <span class='o'>=</span> <span class='nx'>manager</span><span class='p'>.</span><span class='nx'>executeQuery</span><span class='p'>(</span><span class='nx'>query</span><span class='p'>)</span>
              <span class='p'>.</span><span class='nx'>then</span><span class='p'>(</span><span class='nx'>querySucceeded</span><span class='p'>)</span>
              <span class='p'>.</span><span class='nx'>fail</span><span class='p'>(</span><span class='nx'>queryFailed</span><span class='p'>);</span>
</code></pre>
</div>
<p>Although it&#8217;s open source, the company behind it has <a href='http://www.breezejs.com/support'>commercial support packages</a>. There are also <a href='http://learn.breezejs.com/'>BreezeJS tutorials</a> for getting started. It can work with various SQL and NoSQL databases &#8211; the nature of this and the relationship to the .NET Entity Framework is explained in the <a href='http://www.breezejs.com/documentation/faq'>BreezeJS FAQ</a> (before complaining about .NET in the comments read the FAQ first).</p>

<h3 id='automaton'>Automaton</h3>
<img src='/images/posts/automaton.png' alt='' style='background: transparent; border: none; float: right' />
<p><a href='http://indigounited.com/automaton/'>Automaton</a> (GitHub: <a href='https://github.com/IndigoUnited/automaton'>IndigoUnited / automaton</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/automaton'>automaton</a>) from Indigo United is a task automation tool, similar to Grunt but (from what I can gather) the way tasks are reused works differently.</p>

<p>It&#8217;s designed to be used with Node and installed through npm, and it has an API for programatically running tasks. The documentation is good, and it makes it clear what parts of the API use streams or other things you can easily hook into with Node.</p>

<h3 id='dejavu'>dejavu</h3>

<p><img src='/images/posts/dejavu.png' alt='dejavu' /></p>

<p><a href='http://indigounited.com/dejavu/'>dejavu</a> (GitHub: <a href='https://github.com/IndigoUnited/dejavu'>IndigoUnited / dejavu</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/dejavu'>dejavu</a>) also from Indigo United is a classical OO toolkit that can be used with browsers or Node. It can work with AMD, and in that case the syntax reminds me of Backbone projects written using RequireJS.</p>

<p>It supports the usual features: classes, inheritance, mixins, private and protected members, and also adds some type checking tools like method signature checks and a custom <code>instanceOf</code>. The authors have provided benchmarks, which is good, because I&#8217;ve seen too many libraries that say they&#8217;re fast without any proof.</p>

<p>After writing <a href='http://dailyjs.com/tags.html#js101'>JS101</a>, which has some coverage of working with prototypes and JavaScript objects in general, seeing &#8220;classical OO&#8221; libraries makes me extremely wary. However, I&#8217;ve given dejavu a cursory look, and it includes Mocha tests, and takes a wide range of influences into account, so it might be worth adding to your microjs/component library bookmarks for the next time you really need some of the features this library provides. I thought the name &#8220;dejavu&#8221; was a nod to the plethora of similar libraries out there, but I think it refers to the fact it looks more like OO in other languages.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/17/backbone-tutorial-8">Backbone.js Tutorial: Deleting Lists</a></h2>
      <div class="meta">
        <span class="date">17 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/17/backbone-tutorial-8/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'><strong>Part 8: Deleting Lists</strong></a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>0953c5d</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 0953c5d
</code></pre>
</div>
<h3 id='deleting_lists'>Deleting Lists</h3>

<p>We&#8217;re now at the end of the complete CRUD implementation for lists. To support deleting items, we just need to hook up the link that we&#8217;ve already added and add support for the <code>delete</code> method to <code>gapi.js</code>. You could try doing this yourself for practice.</p>

<p>Open <code>app/js/views/app.js</code>, and add an event binding for the &#8220;Delete List&#8221; link:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='s1'>&#39;click #add-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;addList&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;click #edit-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;editList&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;click #delete-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;deleteList&#39;</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>Next, add a method called <code>deleteList</code> to the same class:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>deleteList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>confirm</span><span class='p'>(</span><span class='s1'>&#39;Are you sure you want to delete that list?&#39;</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>destroy</span><span class='p'>();</span>
  <span class='p'>}</span>
  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Just by making those two changes, the active list will be removed from the interface. Backbone knows how to remove the view when <code>model.destroy</code> is called in <code>deleteList</code>.</p>

<h3 id='backbonesync_changes'>Backbone.sync Changes</h3>

<p>To persist deleting lists, open <code>app/js/gapi.js</code> and add a <code>case</code> for <code>&#39;delete&#39;</code> after <code>&#39;update&#39;</code> (it should be around line 100):</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>case</span> <span class='s1'>&#39;delete&#39;</span><span class='o'>:</span>
  <span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>
  <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>].</span><span class='k'>delete</span><span class='p'>(</span><span class='nx'>requestContent</span><span class='p'>);</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='k'>break</span><span class='p'>;</span>
</code></pre>
</div>
<p>Google&#8217;s API provides the <code>delete</code> method, otherwise this is identical to the implementation for updating items.</p>

<h3 id='next'>Next</h3>

<p>This part was short, so consider this your week off. Go and play with the source and see what you can get the Google Tasks API and Backbone to do! There&#8217;s still a lot of things left to cover, however.</p>

<p>Over the last eight weeks you&#8217;ve learned how to:</p>

<ul>
<li>Write a custom <code>Backbone.sync</code> method</li>

<li>Use the <a href='https://developers.google.com/google-apps/tasks/'>Google Task API</a> with client-side JavaScript</li>

<li>Write Backbone models, views, and collections</li>
</ul>

<p>This could be adapted to work with other Google APIs, or potentially even other APIs that I haven&#8217;t considered. Once you have a solid understanding of how Backbone models and syncing data works, then a lot becomes possible.</p>

<p>The next few parts will cover the following:</p>

<ul>
<li>Mocking the Google Tasks API for testing</li>

<li>Adding, editing, and deleting the tasks themselves</li>

<li>A Bootstrap user interface</li>

<li>Customising Bootstrap</li>
</ul>

<h3 id='summary'>Summary</h3>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/8d88095de512c084ccf4cb28e49844df05396e0f'>alexyoung / dailyjs-backbone-tutorial, commit 8d88095</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/16/node-roundup">Node Roundup: 0.8.17, 0.9.6, gelf-node, jsong, Stuff.js</a></h2>
      <div class="meta">
        <span class="date">16 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/16/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#unix">unix</a>
          
            <a href="/tags.html#cli">cli</a>
          
            <a href="/tags.html#json">json</a>
          
            <a href="/tags.html#sandbox">sandbox</a>
          
            <a href="/tags.html#search">search</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_0817_096_unstable'>Node 0.8.17, 0.9.6 (Unstable)</h3>

<p><a href='http://blog.nodejs.org/2013/01/09/node-v0-8-17-stable/'>Node 0.8.17</a> was released last week with a security fix for TypedArrays, so you should upgrade if you&#8217;re using them:</p>

<blockquote>
<p>If user input can affect the size parameter in a TypedArray, an integer overflow vulnerability could allow an attacker to write to areas of memory outside the intended buffer.</p>
</blockquote>

<p>The unstable branch also saw a new release with <a href='http://blog.nodejs.org/2013/01/11/node-v0-9-6-unstable/'>0.9.6</a>. The streams API has changed slightly again as it continues to be developed: Isaac Schlueter added the <code>readable.push</code> method, and there are also fixes for TypedArrays in this branch too.</p>

<h3 id='gelfnode'>gelf-node</h3>

<p>I&#8217;ve had a lot of luck with <a href='http://www.elasticsearch.org/'>ElasticSearch</a>. The last time I used it was on a project that used Node HTTP crawlers to index thousands of sites, and it was all backed by ElasticSearch. It worked extremely well and I actually got paid! If you&#8217;re also using ElasticSearch, then you might be interested in the gelf-node module (GitHub: <a href='https://github.com/robertkowalski/gelf-node'>robertkowalski / gelf-node</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/gelf'>gelf</a>) by Robert Kowalski. It works with <a href='http://www.graylog2.org/'>Graylog2</a>, allowing messages to be sent from Node:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Gelf</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;gelf&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>gelf</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Gelf</span><span class='p'>({</span>
  <span class='nx'>graylogPort</span><span class='o'>:</span> <span class='mi'>12201</span><span class='p'>,</span>
  <span class='nx'>graylogHostname</span><span class='o'>:</span> <span class='s1'>&#39;127.0.0.1&#39;</span><span class='p'>,</span>
  <span class='nx'>connection</span><span class='o'>:</span> <span class='s1'>&#39;wan&#39;</span><span class='p'>,</span>
  <span class='nx'>maxChunkSizeWan</span><span class='o'>:</span> <span class='mi'>1420</span><span class='p'>,</span>
  <span class='nx'>maxChunkSizeLan</span><span class='o'>:</span> <span class='mi'>8154</span>
<span class='p'>});</span>

<span class='c1'>// The readme has an example message</span>
<span class='nx'>gelf</span><span class='p'>.</span><span class='nx'>emit</span><span class='p'>(</span><span class='s1'>&#39;gelf.log&#39;</span><span class='p'>,</span> <span class='nx'>message</span><span class='p'>);</span>
</code></pre>
</div>
<p>Graylog2 itself is released under the GPL (version 3).</p>

<h3 id='jsong'>jsong</h3>

<p>jsong (GitHub: <a href='https://github.com/textgoeshere/jsong'>textgoeshere / jsong</a>, npm: <a href='https://npmjs.org/package/jsong'>jsong</a>, License: <em>MIT</em>) by Dave Nolan is a CLI tool and module for filtering JSON. It&#8217;s built with <a href='https://npmjs.org/package/streamin'>streamin</a> and <a href='https://npmjs.org/package/clarinet'>clarinet</a>, and shows full paths to matches:</p>
<div class='highlight'><pre><code class='text'>$ cat my.json | jsong -k &#39;z\wp&#39;

foo.bar.zip: val1
foo.bar.zap: val2
quux.zip: val
</code></pre>
</div>
<p>Because it&#8217;s built using streams, it should handle large JSON files.</p>

<h3 id='stuffjs'>Stuff.js</h3>

<p>Here&#8217;s another project by Amjad Masad from Codecademy: <a href='http://blog.amasad.me/2012/12/11/stuffjs/'>Stuff.js</a> (GitHub: <a href='https://github.com/Codecademy/stuff.js'>Codecademy / stuff.js</a>, License: <em>MIT</em>) &#8211; an easy way to run arbitrary HTML and JavaScript in an <code>iframe</code>. It uses node-static and uglify-js to create a sandbox for securely running user-contributed code.</p>

<p>There&#8217;s an example in <a href='http://blog.amasad.me/2012/12/11/stuffjs/'>Amjad&#8217;s blog post</a> that shows how to use it:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>stuff</span><span class='p'>(</span><span class='nx'>secureIframeUrl</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>context</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>html</span> <span class='o'>=</span> <span class='nx'>CodeMirror</span><span class='p'>.</span><span class='nx'>fromTextArea</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#html&#39;</span><span class='p'>),</span> <span class='p'>{</span>
    <span class='nx'>onChange</span><span class='o'>:</span> <span class='nx'>reload</span>
  <span class='p'>,</span> <span class='nx'>mode</span><span class='o'>:</span> <span class='s1'>&#39;text/html&#39;</span>
  <span class='p'>});</span>
  <span class='kd'>var</span> <span class='nx'>js</span> <span class='o'>=</span> <span class='nx'>CodeMirror</span><span class='p'>.</span><span class='nx'>fromTextArea</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#js&#39;</span><span class='p'>),</span> <span class='p'>{</span>
    <span class='nx'>onChange</span><span class='o'>:</span> <span class='nx'>reload</span>
  <span class='p'>,</span> <span class='nx'>mode</span><span class='o'>:</span> <span class='s1'>&#39;javascript&#39;</span>
  <span class='p'>});</span>
  <span class='kd'>var</span> <span class='nx'>css</span> <span class='o'>=</span> <span class='nx'>CodeMirror</span><span class='p'>.</span><span class='nx'>fromTextArea</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#css&#39;</span><span class='p'>),</span> <span class='p'>{</span>
    <span class='nx'>onChange</span><span class='o'>:</span> <span class='nx'>reload</span>
  <span class='p'>,</span> <span class='nx'>mode</span><span class='o'>:</span> <span class='s1'>&#39;css&#39;</span>
  <span class='p'>});</span>

  <span class='kd'>var</span> <span class='nx'>t</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
  <span class='kd'>function</span> <span class='nx'>reload</span> <span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>clearTimeout</span><span class='p'>(</span><span class='nx'>t</span><span class='p'>);</span>
    <span class='nx'>t</span> <span class='o'>=</span> <span class='nx'>setTimeout</span><span class='p'>(</span><span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>code</span> <span class='o'>=</span> <span class='s1'>&#39;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&#39;</span><span class='p'>;</span>
      <span class='nx'>code</span> <span class='o'>+=</span> <span class='s1'>&#39;&lt;style&gt;&#39;</span>  <span class='o'>+</span> <span class='nx'>css</span><span class='p'>.</span><span class='nx'>getValue</span><span class='p'>()</span> <span class='o'>+</span> <span class='s1'>&#39;&lt;/style&gt;&#39;</span><span class='p'>;</span>
      <span class='nx'>code</span> <span class='o'>+=</span> <span class='s1'>&#39;&lt;body&gt;&#39;</span> <span class='o'>+</span> <span class='nx'>html</span><span class='p'>.</span><span class='nx'>getValue</span><span class='p'>();</span>
      <span class='nx'>code</span> <span class='o'>+=</span> <span class='s1'>&#39;&lt;script&gt;&#39;</span> <span class='o'>+</span> <span class='nx'>js</span><span class='p'>.</span><span class='nx'>getValue</span><span class='p'>()</span> <span class='o'>+</span> <span class='s1'>&#39;&lt;/script&gt;&#39;</span><span class='p'>;</span>
      <span class='nx'>code</span> <span class='o'>+=</span> <span class='s1'>&#39;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class='p'>;</span>
      <span class='nx'>context</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='nx'>code</span><span class='p'>);</span>
    <span class='p'>},</span> <span class='mi'>50</span><span class='p'>);</span>
  <span class='p'>}</span>
  <span class='nx'>reload</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/15/jquery-roundup">jQuery Roundup: 1.9, Touch-box, Elevate Zoom, textareaHelper</a></h2>
      <div class="meta">
        <span class="date">15 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/15/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#images">images</a>
          
            <a href="/tags.html#zoom">zoom</a>
          
            <a href="/tags.html#touchscreen">touchscreen</a>
          
            <a href="/tags.html#textarea">textarea</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_19'>jQuery 1.9</h3>

<p><a href='http://blog.jquery.com/2013/01/15/jquery-1-9-final-jquery-2-0-beta-migrate-final-released/'>jQuery 1.9</a> has been released. This version retains legacy browser support, but &#8220;slims down&#8221; the API somewhat. jQuery 2.0 meanwhile will not support Internet Explorer 6-8, but it will have the same API.</p>

<p><a href='http://github.com/jquery/jquery-migrate/'>jQuery Migrate</a> can be used to migrate to 1.9 or 2.0.</p>

<h3 id='touchbox'>Touch-box</h3>

<p>Dannie Hansen sent in <a href='http://danniehansen.com/touch_box/'>Touch-box</a> (GitHub: <a href='https://github.com/danniehansen/Touch-box'>danniehansen / Touch-box</a>, License: <em>GPL</em>), a plugin for resizing and dragging elements on touchscreen devices. Although the documentation mentions iPad, I tested it on Android Chrome and both seemed to work well.</p>

<p>Dannie suggested an interesting idea for a gallery, where the resize event could automatically cause higher resolution images to be fetched through a callback:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.box&#39;</span><span class='p'>).</span><span class='nx'>TouchBox</span><span class='p'>({</span>
  <span class='nx'>resize</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span>
  <span class='nx'>drag</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span>
  <span class='nx'>callback_touches</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>touches</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='p'>},</span>
  <span class='nx'>callback_change</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='elevate_zoom'>Elevate Zoom</h3>
<div class='image'>
  <img src='/images/posts/elevatezoom.png' alt='' />
  <small>Elevate Zoom's tint feature.</small>
</div>
<p><a href='http://www.elevateweb.co.uk/image-zoom'>Elevate Zoom</a> (GitHub: <a href='https://github.com/elevateweb/elevatezoom'>elevateweb / elevatezoom</a>, License: <em>MIT/GPL</em>) by Andy Eades is an image zoom plugin that has FancyBox support. It has some cool features like &#8220;tinting&#8221;, where the unzoomed portion of the image is tinted &#8211; <a href='http://www.elevateweb.co.uk/image-zoom/examples'>demos are available</a> for each of the main features.</p>

<h3 id='textareahelper'>textareaHelper</h3>

<p><a href='https://github.com/Codecademy/textarea-helper'>textareaHelper</a> by Amjad Masad and Codecademy transparently copies a <code>textarea</code>&#8217;s contents into a <code>div</code>, so it can be manipulated in ways not supported by <code>textarea</code>. It will try to copy the styles from the <code>textarea</code> as well, and can fetch the caret&#8217;s position.</p>

<p>Mocha tests have been included, which includes a <code>setSelectionRange</code> implementation to test the caret handling.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/14/framer-modelfactory-mongo-edit">Framer, ModelFactory, Mongo Edit</a></h2>
      <div class="meta">
        <span class="date">14 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/14/framer-modelfactory-mongo-edit/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mongodb">mongodb</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='framer'>Framer</h3>

<p><img src='/images/posts/framer.png' alt='Framer' /></p>

<p><a href='http://www.framerjs.com/'>Framer</a> (GitHub: <a href='https://github.com/koenbok/Framer'>koenbok / Framer</a>, License: <em>MIT</em>) by Koen Bok is a prototyping tool aimed at designers who can write basic JavaScript. It uses hardware acceleration and a simple JavaScript API for working with a subset of view types that are reminiscent of the ones used in Apple&#8217;s iOS frameworks.</p>

<p>The example on the site creates the iPhone container view, so you could adapt it to show something else if you wanted. The author suggests using Framer in conjunction with <a href='https://github.com/koenbok/Cactus'>Cactus</a> and <a href='http://maker.github.com/ratchet/'>Ratchet</a> for creating rapid prototypes of iOS applications.</p>

<h3 id='backbonemodelfactory'>Backbone.ModelFactory</h3>

<p><a href='https://github.com/misteroneill/backbone-model-factory'>Backbone.ModelFactory</a> (License: <em>MIT</em>) by Pat O&#8217;Neill generates model constructors that never produce multiple instances of a model with the same unique identifier. This is intended to make sharing models between views easier. This steps around Backbone&#8217;s built-in behaviour, and was based on <a href='http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/'>Building the Next SoundCloud</a> &#8211; an internal cache of model instances can be created based on their IDs:</p>

<blockquote>
<p>Almost all views are instantiated only with the id of its model, so it&#8217;s quite possible that the data for that model hasn&#8217;t been loaded yet. To solve this, we use a construct we call the <em>instance store</em>. This store is an object which is implicitly accessed and modified each time a constructor for a model is called. When a model is constructed for the first time, it injects itself into the store, using its id as a unique key. If the same model constructor is called with the same id, then the original instance is returned.</p>
</blockquote>

<h3 id='mongo_edit'>Mongo Edit</h3>

<p><a href='https://github.com/tldrio/mongo-edit'>Mongo Edit</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mongo-edit'>mongo-edit</a>) from tldr.io is a simple editor for data in MongoDB. It&#8217;s built with Express, and the ACE editor.</p>

<p>If you&#8217;re looking for examples of Express applications, this one is built with route separation, and includes some simple Mocha tests.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/11/catalyst-teacup-makery">Catalyst, Teacup, Makery</a></h2>
      <div class="meta">
        <span class="date">11 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/11/catalyst-teacup-makery/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#sponsored-content">sponsored-content</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#templates">templates</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='catalyst'>Catalyst</h3>
<div class='sponsored-content' style='background-color: #f0f4cf; padding: 0; margin: 10px 0; border-radius: 5px; font-size: 90%; width: 530px; padding: 0 1px'>
  <p><a href='/sponsored-content.html' class='label'>Sponsored Content</a> This post is about a commercial product that we think will appeal to DailyJS readers.</p>
</div>
<p><img src='/images/posts/catalyst.png' alt='Catalyst' /></p>

<p>Learning JavaScript? Join <a href='http://catalystclass.com'>Catalyst</a>! Full-time, in-person training and job placement services over 12 weeks in San Francisco. Instructors and speakers from Twitter, OkCupid, Adobe, Meteor, and more.</p>

<p>For more information, visit <a href='http://catalystclass.com'>catalystclass.com</a>.</p>

<h3 id='teacup'>Teacup</h3>

<p><a href='http://goodeggs.github.com/teacup/'>Teacup</a> (GitHub: <a href='https://github.com/goodeggs/teacup'>goodeggs / teacup</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/teacup'>teacup</a>) by Good Eggs is a CoffeeScript templating language. It comes with middleware that can be used alongside <a href='https://github.com/TrevorBurnham/connect-assets'>connect-assets</a> for compiling the templates, and the language kind of reminds me of CoffeeScript crossed with Jade:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='p'>{</span><span class='nx'>renderable</span><span class='p'>,</span> <span class='nx'>js</span><span class='p'>,</span> <span class='nx'>css</span><span class='p'>,</span> <span class='nx'>html</span><span class='p'>,</span> <span class='nx'>head</span><span class='p'>,</span> <span class='nx'>body</span><span class='p'>}</span> <span class='o'>=</span> <span class='nx'>require</span> <span class='s'>&#39;teacup&#39;</span>

<span class='nv'>module.exports = </span><span class='nx'>renderable</span> <span class='nf'>-&gt;</span>
  <span class='nx'>html</span> <span class='nf'>-&gt;</span>
    <span class='nx'>head</span> <span class='nf'>-&gt;</span>
      <span class='nx'>js</span> <span class='s'>&#39;app&#39;</span>
      <span class='nx'>css</span> <span class='s'>&#39;app&#39;</span>
    <span class='nx'>body</span> <span class='nf'>-&gt;</span>
      <span class='c1'># ...</span>
</code></pre>
</div>
<p>It works in browsers, has Mocha tests, and also has a gem for Rails: <a href='https://github.com/goodeggs/teacup-rails'>Teacup::Rails</a>. The author wrote a blog post about it here: <a href='http://bytes.goodeggs.com/post/40042760798/teacup-coffeescript-templates-for-developer-happiness'>Teacup: CoffeeScript Templates for Developer Happiness</a>.</p>

<h3 id='makery'>Makery</h3>

<p><a href='https://github.com/leoasis/makery.js'>Makery</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/makery'>makery</a>) by Leonardo Garcia Crespo is a module for making objects to aid with testing &#8211; the author says it works well for testing Backbone models. The API looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Makery</span><span class='p'>.</span><span class='nx'>blueprint</span><span class='p'>(</span><span class='nx'>MyConstructor</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='p'>{</span>
    <span class='nx'>id</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>unique</span><span class='p'>(),</span>
    <span class='nx'>aProperty</span><span class='o'>:</span> <span class='s1'>&#39;Some value&#39;</span><span class='p'>,</span>
    <span class='nx'>anotherProperty</span><span class='o'>:</span> <span class='s1'>&#39;Another value&#39;</span>
  <span class='p'>};</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>obj</span> <span class='o'>=</span> <span class='nx'>MyConstructor</span><span class='p'>.</span><span class='nx'>make</span><span class='p'>();</span>
</code></pre>
</div>
<p>Jasmine tests have been included, and it can be used in browsers as long as Underscore is present.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/10/backbone-tutorial-7">Backbone.js Tutorial: Editing Lists</a></h2>
      <div class="meta">
        <span class="date">10 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/10/backbone-tutorial-7/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'><strong>Part 7: Editing Lists</strong></a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>465523f</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 465523f
</code></pre>
</div>
<h3 id='active_list'>Active List</h3>

<p>Last week I demonstrated how to make a custom <code>Backbone.sync</code> &#8220;create&#8221; implementation, and suitable views and templates for adding new lists. If you recall, I created a view for editing lists as well, because it was so similar to <code>AddListView</code> it made sense to inherit from it.</p>

<p>Before a list can be edited, we need a way of selecting lists. It makes sense to always have an active list in this application, so there should be a way of saving this state somewhere. Also, when loading the lists from the server, a default list should be selected on the user&#8217;s behalf.</p>

<p>To be consistent with the patterns employed to track collections and views, we should add a <code>models</code> object for tracking instances of models. One of these can be the <code>activeList</code>.</p>

<p>Open <code>app/js/app.js</code> and add a <code>models</code> property as well as setting the <code>activeModel</code> after the lists have loaded:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>App</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>views</span><span class='o'>:</span> <span class='p'>{},</span>
  <span class='nx'>collections</span><span class='o'>:</span> <span class='p'>{},</span>
  <span class='nx'>models</span><span class='o'>:</span> <span class='p'>{},</span>
  <span class='nx'>connectGapi</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ApiManager</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>userId</span><span class='o'>:</span> <span class='s1'>&#39;@me&#39;</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='o'>=</span> <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>first</span><span class='p'>();</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>listMenu</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
      <span class='p'>}});</span>
    <span class='p'>});</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Now open <code>app/js/views/lists/menu.js</code> and make it check if the <code>activeModel</code> is the model currently being used to render the navigation list element:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>renderMenuItem</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>item</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ListMenuItemView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>model</span> <span class='p'>});</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>append</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>item</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>If the model does match, then it&#8217;ll trigger an <code>open</code> on the view. Now open <code>app/js/views/lists/menuitem.js</code> and make the <code>ListMenuItemView</code> track the <code>activeModel</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>;</span>
  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Now the application is able to track the selected list. This will make adding tasks easier, because in order to add tasks we need to know which tasklist to add it to.</p>

<h3 id='edit_list_form'>Edit List Form</h3>

<p>Open <code>app/js/views/app.js</code>. The goal of this exercise is to make the edit form appear, filled out with the correct values, when the &#8220;Edit List&#8221; link is clicked. It&#8217;s going to be similar to last week&#8217;s <code>addList</code> method, so you can try doing this part yourself if you want.</p>

<p>First, make it load the <code>EditListView</code> class:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;text!templates/app.html&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/add&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/edit&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>,</span> <span class='nx'>AddListView</span><span class='p'>,</span> <span class='nx'>EditListView</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Next, add the <code>#edit-list-button</code> to the events:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='s1'>&#39;click #add-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;addList&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;click #edit-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;editList&#39;</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>Finally, add the <code>editList</code> method to instantiate an <code>EditListView</code> form based on the <code>activeList</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>editList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>form</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>EditListView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='p'>});</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#list-editor&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>form</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='nx'>form</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input:first&#39;</span><span class='p'>).</span><span class='nx'>focus</span><span class='p'>();</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This is very similar to the <code>addList</code> method &#8211; they could easily use the same method, just with different models:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>listForm</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>form</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#list-editor&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>form</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='nx'>form</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input:first&#39;</span><span class='p'>).</span><span class='nx'>focus</span><span class='p'>();</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>},</span>

<span class='nx'>addList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>listForm</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>AddListView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='k'>new</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span> <span class='p'>})</span> <span class='p'>}));</span>
<span class='p'>},</span>

<span class='nx'>editList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>listForm</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>EditListView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='p'>}));</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>DRY!</p>

<h3 id='saving_changes'>Saving Changes</h3>

<p>The <code>Backbone.sync</code> method needs to be updated to cope with updating items. This is <em>very</em> similar to creating items (in <code>app/js/gapi.js</code>):</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Around line 97, after &#39;create&#39;</span>
<span class='k'>case</span> <span class='s1'>&#39;update&#39;</span><span class='o'>:</span>
  <span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>
  <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>].</span><span class='nx'>update</span><span class='p'>(</span><span class='nx'>requestContent</span><span class='p'>);</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='k'>break</span><span class='p'>;</span>
</code></pre>
</div>
<p>A slight complication is Google&#8217;s API requires a <code>tasklist</code> property in the object passed to <code>update</code>. This isn&#8217;t very clearly documented (you&#8217;ll notice the <a href='https://developers.google.com/google-apps/tasks/v1/reference/tasklists/update'>tasklists/update</a> reference doesn&#8217;t have a JavaScript example).</p>

<p>Rather than making the Backbone models somehow aware of this, it&#8217;s better to put the logic in <code>Backbone.sync</code>. That way all of the Google-related stuff is in the same place.</p>

<p>Add another <code>switch</code> statement to insert the required ID parameters, based on the type of model being operated on:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>requestContent</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;tasks&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>.</span><span class='nx'>task</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;tasklists&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>.</span><span class='nx'>tasklist</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>
  <span class='p'>}</span>
</code></pre>
</div>
<p>The lists should now be editable, but there&#8217;s one thing left to do &#8211; show that the selected list is &#8220;active&#8221;.</p>

<h3 id='selecting_lists'>Selecting Lists</h3>

<p>Open <code>app/js/views/lists/menuitem.js</code> and change <code>open</code> to track the active menu view, and add a class name to the view&#8217;s element:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>;</span>
  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Whenever a view is opened, <code>bTask.views.activeListMenuItem</code> will be used to store a reference to it. Notice how I&#8217;ve used <code>this.$el</code>? Most experienced Backbone developers will tell you to do this, rather than using jQuery&#8217;s <code>$()</code> to find elements based on a selector. The idea is to use minimal jQuery and be more declarative with Backbone.</p>

<p>Does keeping a reference to <code>bTask.views.activeListMenuItem</code> beat <code>$(&#39;.list-menu-item&#39;).removeClass(&#39;active&#39;)</code>? It&#8217;s hard to say &#8211; I&#8217;ve often noticed people dipping into jQuery where it makes sense.</p>

<p>This begs the question: should we really track the active list using a reference to a model? The <code>ListMenuItemView</code> already contains a reference to the model, and most of the Backbone code is really concerned with modeling the user interface, rather than an additional internal state. Let&#8217;s try removing the reference to <code>bTask.models</code>.</p>

<p>Open <code>app/js/app.js</code> and remove the <code>models</code> object, and then remove the line that sets <code>activeList</code>. Next, go to <code>app/js/views/lists/menuitem.js</code> and change the <code>open</code> method to only refer to views:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Next open the <code>AppView</code> class, in <code>app/js/views/app.js</code>, and make sure <code>editList</code> uses <code>bTask.views.activeListMenuItem.model</code>. Finally, make <code>app/js/views/lists/menu.js</code> activate the default item (the first list):</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>renderMenuItem</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>item</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ListMenuItemView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>model</span> <span class='p'>});</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>append</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span> <span class='o'>=</span> <span class='nx'>item</span><span class='p'>;</span>
  <span class='p'>}</span>
  
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>item</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>I feel like avoiding tracking an internal application state is a mistake in Backbone, and instead the views should be made to work harder. Is this a good idea? It probably depends on the nature of the application.</p>

<p>To make the interface clearer, you can add <code>li.active { font-weight: bold }</code> to <code>app/css/app.css</code>.</p>

<h3 id='summary'>Summary</h3>

<p>In this part we&#8217;ve built on the code in <em>Part 6</em> to allow lists to be edited. Even though this is fairly simple, the application had to change to track the currently active list.</p>

<p>The general rule of thumb in Backbone is to use cached jQuery (or Zepto) objects, which is why you&#8217;ll see a lot of calls to <code>this.$el</code> rather than <code>$()</code>. I suggest another rule that complements this: make views do the work, and avoid relying on state external to views.</p>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/0953c5d7873fe3f7d176984e0337724be2b3386f'>alexyoung / dailyjs-backbone-tutorial, commit 0953c5d</a>.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page19">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <strong>20</strong>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page21">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

