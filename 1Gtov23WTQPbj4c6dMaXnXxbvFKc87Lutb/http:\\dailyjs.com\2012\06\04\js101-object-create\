http://dailyjs.com/2012/06/04/js101-object-create/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 02:07:15 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "104235-70de-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 7241
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: JS101: Object.create</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2012/06/04/js101-object-create">JS101: Object.create</a></h2>

<div class="meta">
  04 Jun 2012 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#js101">js101</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#language">language</a>
    
      <a href="/tags.html#beginner">beginner</a>
    
  </span>
</div>

<div id="post">
<div class='intro'>
  JS101 is a tutorial series aimed at beginners.  Each post is a bite-sized chunk aimed to elucidate JavaScript fundamentals.  To read previous posts, view the <a href='/tags.html#js101'>js101</a> tag.
</div>
<p>The inheritance examples we looked at last week used the form <code>Rectangle.prototype = new Shape()</code>. The reason I like this example is it shows how powerful prototypes are, despite their simplicity. The downside is the constructor for the parent object is executed, which isn&#8217;t always what&#8217;s desired.</p>

<p>ECMAScript 5 introduced <code>Object.create</code>, which creates new objects based on a prototype object and an additional set of properties.</p>

<p>The main differences between <code>B.prototype = new A();</code> and <code>B.prototype = Object.create(A.prototype)</code> are as follows:</p>

<ul>
<li>The constructor, <code>A</code> isn&#8217;t called, so <code>B</code> remains uninitialised until instantiated</li>

<li><code>Object.create</code> accepts a second argument that causes <code>Object.create</code> to behave as if <code>Object.defineProperties</code> was called</li>
</ul>

<h3 id='using_'>Using <code>Object.create</code></h3>

<p>Last week&#8217;s <code>Shape</code> example could be rewritten to use <code>Object.create</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Shape</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>y</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Shape constructor called&#39;</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>move</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>,</span> <span class='nx'>y</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>+=</span> <span class='nx'>x</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>y</span> <span class='o'>+=</span> <span class='nx'>y</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='c1'>// Rectangle</span>
<span class='kd'>function</span> <span class='nx'>Rectangle</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Rectangle constructor called&#39;</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>y</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='nx'>Rectangle</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>Shape</span><span class='p'>);</span>
</code></pre>
</div>
<p>Now rectangles can be created with <code>var rect = new Rectangle()</code> and the original <code>Shape</code> constructor won&#8217;t be called. This leaves us with a cleaner prototype chain, but what if we still want to call the previous constructor? In this particular example, calling the <code>Shape</code> constructor is desirable because we&#8217;ll avoid duplicating some initialisation code.</p>

<h3 id='calling_constructors'>Calling Constructors</h3>

<p>By using the <code>Function.prototype.call</code> or <code>apply</code> methods, it&#8217;s entirely possible to call another constructor even when using <code>Object.create</code>. For example:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Shape</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>y</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Shape constructor called&#39;</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>move</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>,</span> <span class='nx'>y</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>+=</span> <span class='nx'>x</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>y</span> <span class='o'>+=</span> <span class='nx'>y</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='c1'>// Rectangle</span>
<span class='kd'>function</span> <span class='nx'>Rectangle</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Rectangle constructor called&#39;</span><span class='p'>);</span>
  <span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>Rectangle</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
</code></pre>
</div>
<p>The fact <code>call</code> and <code>apply</code> take a <code>this</code> parameter (known as <em>ThisBinding</em> in the ECMAScript specification) allows us to reuse constructors where required.</p>

<h3 id='no_inheritance_'>No Inheritance: <code>Object.create(null)</code></h3>

<p>By passing <code>null</code> to <code>Object.create</code>, objects can be created that don&#8217;t inherit from anything. By default <code>Object.prototype</code> is used, which has <a href='http://es5.github.com/#x15.2.4'>several built-in methods</a>. What if we don&#8217;t want to inherit from <code>Object.prototype</code>?</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Shape</span><span class='p'>()</span> <span class='p'>{</span>
<span class='p'>}</span>

<span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='kc'>null</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>shape</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Shape</span><span class='p'>();</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>shape</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>);</span>
</code></pre>
</div>
<p>In this example, <code>undefined</code> will be printed &#8211; objects created using the <code>Shape</code> constructor inherit from <code>null</code>.</p>

<p>Notice that this <strong>is not</strong> equivalent:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Shape</span><span class='p'>()</span> <span class='p'>{</span>
<span class='p'>}</span>

<span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>

<span class='kd'>var</span> <span class='nx'>shape</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Shape</span><span class='p'>();</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>shape</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>);</span>
</code></pre>
</div>
<p>This should print something like <code>[Function: toString]</code> rather than <code>undefined</code>.</p>

<p>It&#8217;s interesting to think about exactly why this is useful. In <a href='http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/'>An Object is not a Hash</a>, Guillermo Rauch discusses how the properties of <code>Object.prototype</code> can be used to potentially cause security issues, and <code>Object.create(null)</code> was suggested as a suitable means for creating a &#8220;clean&#8221; object to avoid the problem.</p>

<p>Another point is performance. These <a href='http://jsperf.com/object-create-null-iteration/2'>Object.create(null) benchmarks</a> demonstrate iterating over various objects, and the <code>Object.create(null)</code> tests run faster than object literals.</p>

<p>However, be very careful when using this approach because so many libraries expect objects to have the standard methods.</p>

<h3 id='the_second_argument_to_'>The Second Argument to <code>Object.create</code></h3>

<p>According to the <a href='http://es5.github.com/#x15.2.3.5'>Annotated ECMAScript 5 Object.create documentation</a>, passing a second argument behaves as if <code>Object.defineProperties</code> had been called. This method requires a bit of knowledge before it can be used &#8211; the properties have to be passed in the expected format.</p>

<p>In this example, <code>Rectangle</code> inherits from <code>Shape</code> and gets a property called <code>animate</code> at the same time:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Rectangle</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>Rectangle</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>animate</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>value</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>animating</span> <span class='o'>=</span> <span class='kc'>true</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>rect</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Rectangle</span><span class='p'>();</span>
</code></pre>
</div>
<p>Now <code>rect.animate()</code> can be called, just like any other method. Notice that the second argument is in the form <code>{ propertyName: { value: function() {} } }</code> &#8211; the <code>value</code> property is important and I haven&#8217;t arbitrarily picked it. These properties are known as <a href='http://es5.github.com/#x8.6.1'>property attributes</a>.</p>

<p>Property attributes can be &#8220;named data&#8221; and &#8220;named attribute&#8221; properties. These additional flags can be applied to named data properties:</p>

<ul>
<li><code>writable</code>: Determines if the property is writable</li>

<li><code>enumerable</code>: Should this property be included in <code>for-in</code> enumeration?</li>

<li><code>configurable</code>: If <code>false</code>, attempts to delete or change the property&#8217;s attributes will fail</li>
</ul>

<p>Although this is new to ECMAScript 5, it adds a much desired level of control to properties and their definition.</p>

<h3 id='getters_and_setters'>Getters and Setters</h3>

<p>Property attributes allow JavaScript to support getters and setters with a lightweight syntax:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Rectangle</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_animating</span> <span class='o'>=</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='nx'>Rectangle</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>animating</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>get</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Rectangle.prototype.animating get&#39;</span><span class='p'>);</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_animating</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>set</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Rectangle.prototype.animating set&#39;</span><span class='p'>);</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_animating</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>rect</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Rectangle</span><span class='p'>();</span>

<span class='nx'>rect</span><span class='p'>.</span><span class='nx'>animating</span> <span class='o'>=</span> <span class='kc'>true</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>rect</span><span class='p'>.</span><span class='nx'>animating</span><span class='p'>);</span>
</code></pre>
</div>
<p>In this example I&#8217;ve renamed <code>animating</code> to <code>_animating</code>, but it can still be accessed using <code>rect.animating</code> because I&#8217;ve defined an <code>animating</code> property with a <code>get</code> and <code>set</code> method.</p>

<p>This makes it possible to track whenever this value is changed, as illustrated by the <code>console.log</code> calls.</p>

<p>In JavaScript implementations that don&#8217;t include <code>Object.create</code>, this second argument may not be supported. The <a href='http://kangax.github.com/es5-compat-table/'>ECMAScript 5 compatibility table</a> by Kangax has a wide range of compatibility tests that can help you decide if it&#8217;s safe to use it.</p>

<h3 id='update_notes'>Update Notes</h3>

<p>This article has been updated using feedback from the following readers:</p>

<ul>
<li><a href='http://dailyjs.com/2012/06/04/js101-object-create/#comment-547955246'>Sean</a> &#8211; Accuracy issues</li>

<li><a href='http://dailyjs.com/2012/06/04/js101-object-create/#comment-546985513'>Marcel Laverdet</a> &#8211; <code>Object.create(null)</code></li>

<li><a href='http://dailyjs.com/2012/06/04/js101-object-create/#comment-546880197'>Ghasem Kiani</a> &#8211; Issues with my &#8220;super&#8221; example (removed)</li>

<li>Ti &#8211; typo (<code>active</code> should have been <code>animating</code>)</li>
</ul>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2012/06/04/js101-object-create/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

