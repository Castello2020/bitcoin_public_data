HTTP/1.1 200 OK
Date: Tue, 22 Jul 2014 15:25:34 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Mon, 21 Jul 2014 18:13:29 GMT
ETag: "fc502-b14f-4feb8105fe440"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 10038
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Backbone.js Tutorial: Creating Lists</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2013/01/03/backbone-tutorial-6">Backbone.js Tutorial: Creating Lists</a></h2>

<div class="meta">
  03 Jan 2013 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#backbone.js">backbone.js</a>
    
      <a href="/tags.html#mvc">mvc</a>
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#backgoog">backgoog</a>
    
  </span>
</div>

<div id="post">
<ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'><strong>Part 6: Creating Lists</strong></a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>82fe08e</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 82fe08e
</code></pre>
</div>
<h3 id='list_crud'>List CRUD</h3>

<p>The last few parts of this tutorial series have demonstrated how to talk to Google&#8217;s Tasks API and authenticate with OAuth. At this point, you should be able to sign in and see a list of task lists.</p>

<p>As we&#8217;ve seen, Backbone.js is based around RESTful APIs that speak in terms of CRUD (create, read, update and delete). In <a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4</a>, I explained how to write a custom <code>Backbone.sync</code> method that can communicate with Google&#8217;s APIs, but so far we&#8217;ve only implemented &#8220;read&#8221; functionality, which fetches task lists using <code>gapi.client.tasks</code>.</p>

<p>Now we really need to implement the full set of CRUD operations so users can manage lists. Part 4 showed how Google&#8217;s API maps to Backbone&#8217;s <code>sync</code> operations:</p>
<table class='amy'>
  <thead>
    <tr>
      <th>Google Tasks API</th><th>Backbone.sync Method</th><th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>insert</code></td><td><code>create</code></td><td>Create a new task.</td>
    </tr>
    <tr>
      <td><code>update</code></td><td><code>update</code></td><td>Update an existing task.</td>
    </tr>
    <tr>
      <td><code>delete</code></td><td><code>delete</code></td><td>Delete a task.</td>
    </tr>
    <tr>
      <td><code>list</code></td><td><code>read</code></td><td>Get a list of tasks.</td>
    </tr>
  </tbody>
</table>
<p>In this part we&#8217;ll add support for &#8220;create&#8221;, but as you&#8217;ll see the principles are very similar to the &#8220;read&#8221; implementation.</p>

<h3 id='creating_lists'>Creating Lists</h3>

<p>In order to create lists, several new components are required:</p>

<ol>
<li>Suitable buttons</li>

<li>A form template</li>

<li>Add and edit views</li>

<li>Controller code</li>
</ol>

<p>In Backbone.js, models and collections emit events. We&#8217;ve already created code to manage list item views, so all we need to do is hook this up to the event that fires when a new model is created and added to the <code>TaskLists</code> collection.</p>

<p>Mastering and exploiting events in this way is one of the tricks to writing manageable Backbone.js code.</p>

<h3 id='backbonesync'>Backbone.sync</h3>

<p>So far, <code>Backbone.sync</code> can only read lists from Google&#8217;s API. To make it capable of creating items we&#8217;ll need a little bit of extra code. This will build upon what we&#8217;ve already written, so it&#8217;ll be short and sweet.</p>

<p>Go back to <code>app/js/gapi.js</code> and change <code>Backbone.sync</code> to call <code>gapiRequest</code> when the <code>create</code> operation is invoked:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>requestContent</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>method</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;create&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>
      <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>].</span><span class='nx'>insert</span><span class='p'>(</span><span class='nx'>requestContent</span><span class='p'>);</span>
      <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>
</code></pre>
</div>
<p>This looks a lot like the &#8220;read&#8221; code. There is one more thing we need to do in this file &#8211; change <code>Backbone.gapiRequest</code> to deal with single resources. I&#8217;ve put the full code for the method below because it&#8217;s still short with the modifications for this tutorial:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>result</span><span class='p'>;</span>
  <span class='nx'>request</span><span class='p'>.</span><span class='nx'>execute</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>res</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>);</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>res</span><span class='p'>.</span><span class='nx'>items</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>items</span><span class='p'>;</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>res</span><span class='p'>;</span>
      <span class='p'>}</span>
      <span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>,</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>request</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This looks to see if an array of items has been returned by Google&#8217;s API, or simply a single object. There&#8217;s an important lesson here though: <code>Backbone.sync</code> is sandwiched between other Backbone code, and is capable of providing Backbone with properties that will be used to set model attributes later on. This code doesn&#8217;t look like it does much, but the <code>success</code> callback will receive <code>result</code>, which will have an <code>id</code> property when models are created. Backbone will see this <code>id</code> property and use it to set the model&#8217;s <code>id</code> attribute, automatically!</p>

<p>Many Bothans died to bring us this information.</p>

<h3 id='template_junk'>Template Junk</h3>

<p>Open <code>app/js/templates/app.html</code> and update the <code>signed-in-container</code> <code>div</code> to contain a list and another container <code>div</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;ul</span> <span class='na'>class=</span><span class='s'>&quot;nav nav-tabs&quot;</span> <span class='na'>id=</span><span class='s'>&quot;top-nav&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;li</span> <span class='na'>class=</span><span class='s'>&quot;buttons&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;btn-group&quot;</span><span class='nt'>&gt;</span>
      <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn&quot;</span> <span class='na'>id=</span><span class='s'>&quot;add-list-button&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-plus&quot;</span><span class='nt'>&gt;</span>Add List<span class='nt'>&lt;/i&gt;&lt;/a&gt;</span>
      <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn&quot;</span> <span class='na'>id=</span><span class='s'>&quot;edit-list-button&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-cog&quot;</span><span class='nt'>&gt;</span>Edit List<span class='nt'>&lt;/i&gt;&lt;/a&gt;</span>
      <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn delete-list&quot;</span> <span class='na'>id=</span><span class='s'>&quot;delete-list-button&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-trash&quot;</span><span class='nt'>&gt;</span>Delete List<span class='nt'>&lt;/i&gt;&lt;/a&gt;</span>
    <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;/li&gt;</span>
<span class='nt'>&lt;/ul&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;content-container&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;list-editor&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;tasks-container&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>This has the &#8220;Add List&#8221; button that you&#8217;ll be able to use by the end of this tutorial, and it also has a <code>div</code> that&#8217;ll contain the list add/edit form.</p>

<p>Now open <code>app/js/templates/lists/form.html</code> and paste this in:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;fieldset&gt;</span>
  <span class='nt'>&lt;legend&gt;</span>
    <span class='nt'>&lt;span</span> <span class='na'>class=</span><span class='s'>&quot;form-title&quot;</span><span class='nt'>&gt;</span>Edit List<span class='nt'>&lt;/span&gt;</span>
    <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;pull-right delete-list btn&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-trash&quot;</span><span class='nt'>&gt;&lt;/i&gt;&lt;/a&gt;</span>
  <span class='nt'>&lt;/legend&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;control-group&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;label</span> <span class='na'>class=</span><span class='s'>&quot;control-label&quot;</span> <span class='na'>for=</span><span class='s'>&quot;list_title&quot;</span><span class='nt'>&gt;</span>Title<span class='nt'>&lt;/label&gt;</span>
    <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;controls&quot;</span><span class='nt'>&gt;</span>
      <span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;text&quot;</span> <span class='na'>class=</span><span class='s'>&quot;input-xlarge&quot;</span> <span class='na'>name=</span><span class='s'>&quot;title&quot;</span> <span class='na'>id=</span><span class='s'>&quot;list_title&quot;</span> <span class='na'>value=</span><span class='s'>&quot;&quot;</span> <span class='na'>placeholder=</span><span class='s'>&quot;The list&#39;s title&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/fieldset&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;form-actions&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>type=</span><span class='s'>&quot;submit&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn btn-primary&quot;</span><span class='nt'>&gt;</span>Save Changes<span class='nt'>&lt;/button&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>class=</span><span class='s'>&quot;cancel btn&quot;</span><span class='nt'>&gt;</span>Close<span class='nt'>&lt;/button&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>This is the body of a form that will be used to add or edit lists. It uses the variable interpolation features we&#8217;ve already seen in this tutorial series.</p>

<h3 id='add_and_edit_views'>Add and Edit Views</h3>

<p>I&#8217;m only going to cover adding lists in this tutorial, we&#8217;ll get to the other functionality later (mainly because I&#8217;ve been writing this for three hours and I have client work to do and I need to pay the bills). Bill-paying aside, what&#8217;s the difference between an &#8220;add&#8221; and &#8220;edit&#8221; view? The <code>form.html</code> template can be reused by both, so why don&#8217;t we create an edit view and just inherit from it to make the list add view?</p>

<p>Open <code>app/js/views/lists/edit.js</code> and add this new view:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/lists/form.html&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>EditListView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;form&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;form-horizontal well edit-list&#39;</span><span class='p'>,</span>
    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;submit&#39;</span><span class='o'>:</span> <span class='s1'>&#39;submit&#39;</span>
    <span class='p'>,</span> <span class='s1'>&#39;click .cancel&#39;</span><span class='o'>:</span> <span class='s1'>&#39;cancel&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;change&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>el</span><span class='p'>);</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>()));</span>

      <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;legend&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='s1'>&#39;Add List&#39;</span><span class='p'>);</span>
      <span class='p'>}</span>

      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>submit</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span>
        <span class='p'>,</span> <span class='nx'>title</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input[name=&quot;title&quot;]&#39;</span><span class='p'>).</span><span class='nx'>val</span><span class='p'>()</span>
        <span class='p'>;</span>

      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='nx'>title</span> <span class='p'>},</span> <span class='p'>{</span>
        <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
          <span class='nx'>self</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>();</span>
        <span class='p'>}</span>
      <span class='p'>});</span>

      <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>cancel</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>hide</span><span class='p'>();</span>
      <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>EditListView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>In this class, I&#8217;ve declared events for submitting and closing the form, and bound them to suitable methods. I&#8217;ve also bound the <code>change</code> event on the view&#8217;s model to <code>render</code>, so changes to the model will automatically get displayed. This will be important later on.</p>

<p>Notice that in <code>render</code>, the <code>legend</code> will be changed when the model doesn&#8217;t yet have an id. In other words, when the model is new and hasn&#8217;t been saved, show a different title and hide the delete button.</p>

<p>Now compare this file to <code>app/js/views/lists/add.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
<span class='s1'>&#39;models/tasklist&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/edit&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>TaskList</span><span class='p'>,</span> <span class='nx'>EditListView</span><span class='p'>)</span> <span class='p'>{</span>
<span class='kd'>var</span> <span class='nx'>AddListView</span> <span class='o'>=</span> <span class='nx'>EditListView</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='nx'>submit</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span>
      <span class='p'>,</span> <span class='nx'>title</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input[name=&quot;title&quot;]&#39;</span><span class='p'>).</span><span class='nx'>val</span><span class='p'>()</span>
      <span class='p'>;</span>

    <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='nx'>title</span> <span class='p'>},</span> <span class='p'>{</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// Add the updated model to the collection</span>
      <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>);</span>
      <span class='nx'>self</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>();</span>
    <span class='p'>}});</span>

    <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='k'>return</span> <span class='nx'>AddListView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This file uses RequireJS to load <code>EditListView</code>, and then inherits from it. The <code>submit</code> method is replaced because creating lists is slightly different to updating them. When lists are created, it&#8217;ll receive an updated model from the server in the <code>success</code> callback, which can be added to the global <code>lists</code> collection. The view removes itself afterwards.</p>

<h3 id='add_list_button'>Add List Button</h3>

<p>A link for adding lists was added to the main <code>app.html</code> template earlier on. To hook it up, open <code>app/js/views/app.js</code> and add a new method called <code>addList</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>addList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>list</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span> <span class='p'>})</span>
    <span class='p'>,</span> <span class='nx'>form</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>AddListView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>list</span> <span class='p'>})</span>
    <span class='p'>,</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span>
    <span class='p'>;</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#list-editor&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>form</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='nx'>form</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input:first&#39;</span><span class='p'>).</span><span class='nx'>focus</span><span class='p'>();</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This will render the <code>AddListView</code> template and focus on the title field. You&#8217;ll also have to change the top of the file to load <code>AddListView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;text!templates/app.html&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/add&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>,</span> <span class='nx'>AddListView</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Finally, add the events bindings somewhere in <code>AppView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='s1'>&#39;click #add-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;addList&#39;</span>
<span class='p'>},</span>
</code></pre>
</div>
<h3 id='summary'>Summary</h3>

<p><img src='/images/posts/backbone-tutorial-6.png' alt='Adding Lists' /></p>

<p>If you run <code>node server</code> and visit <code>http://localhost:8080</code>, you should now be able to add lists. The project doesn&#8217;t <em>look</em> particularly cool yet, but I&#8217;ll get to that soon.</p>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/465523fa20c9f17a422de3646a8db5f7d1b707e8'>alexyoung / dailyjs-backbone-tutorial, commit 465523f</a>.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
      <li>
        <div>18 Jul 2014</div>
        <a href="/2014/07/18/lazy-json-undo">Undo with Object.observe</a>
      </li>
    
      <li>
        <div>17 Jul 2014</div>
        <a href="/2014/07/17/cash">DOM Manipulation with Cash</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2013/01/03/backbone-tutorial-6/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <ul class="jobs">
        <li class="job">
          <a class="link" target="_blank" href="/iridize.html">
            <h4>Lead Frontend Developer</h4>
            <h5>Iridize</h5>
            <img src="/images/posts/iridize.png" alt="">
            <p>Passionate about creating beautifully simple UX for an excitingly complex application? Join our iridize.com team @Israel.</p>
            <p><a href="/iridize.html">View full listing</a></p>
          </a>
        </li>
        <li class="job">
          <a class="link" target="_blank" href="http://tropicaldev.com/jobs/">
            <h4>NodeJS Developers</h4>
            <h5>ContinuousCRM <span class="tag node">Node</span> <span class="tag sql">SQL</span></h5>
            <img src="/images/jobs/continuous.png" alt="">
            <p>Work from Thailand! Sales and CRM system entirely in JavaScript.</p>
            <p><a href="http://tropicaldev.com/jobs/">View full listing</a></p>
          </a>
        </li>
      </ul>
      <div class="jobs-footer">JavaScript Jobs: <a href="http://contact.dailyjs.com/jobs">Create listing</a></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Contributors</h3>
      <ul>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/ricroberts">
              <img width="48" height="48" src="/images/twitter/RicRoberts.png" alt="Ric Roberts" />
              <span class="meta">
                <strong class="fullname">Ric Roberts</strong>
                <s>@</s>RicRoberts
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/rvagg">
              <img width="48" height="48" src="/images/twitter/rvagg.png" alt="Rod Vagg" />
              <span class="meta">
                <strong class="fullname">Rod Vagg</strong><br />
                <s>@</s>rvagg
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/voidfiles">
              <img width="48" height="48" src="/images/twitter/voidfiles.png" alt="Alex Kessinger" />
              <span class="meta">
                <strong class="fullname">Alex Kessinger</strong>
                <s>@</s>voidfiles
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/jaknowlden">
              <img width="48" height="48" src="/images/twitter/jaknowlden.png" alt="Justin Knowlden" />
              <span class="meta">
                <strong class="fullname">Justin Knowlden</strong>
                <s>@</s>jaknowlden
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/olegpodsechin">
              <img width="48" height="48" src="/images/twitter/olegpodsechin.png" alt="Oleg Podsechin" />
              <span class="meta">
                <strong class="fullname">Oleg Podsechin</strong>
                <s>@</s>olegpodsechin
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

