http://dailyjs.com/2011/12/08/mocha/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 08:23:42 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "16c22c-7501-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 7136
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Testing with Mocha</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2011/12/08/mocha">Testing with Mocha</a></h2>

<div class="meta">
  08 Dec 2011 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#modules">modules</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#testing">testing</a>
    
  </span>
</div>

<div id="post">
<p><img src="/images/posts/mocha-tests.png" alt="" /></p>
<p><a href="http://visionmedia.github.com/mocha/">Mocha</a> (GitHub: <a href="https://github.com/visionmedia/mocha">visionmedia / mocha</a>, npm: <em>mocha</em>, License: <em><span class="caps">MIT</span></em>) by TJ Holowaychuk is a new test library that does just about everything a JavaScript developer needs, and yet remains customisable enough to support both behaviour-driven and test-driven development styles.</p>
<p>Mocha presents itself as an unassuming and lightweight library, but it actually goes far beyond the test frameworks I&#8217;m familiar with in Node.  I&#8217;ve written literally hundreds of tests for various Node apps, and the experience hasn&#8217;t always been positive.  Even popular test libraries lack functionality that asynchronous, database-driven web apps require for sane testing.  My recommendation is to take Mocha seriously and give it a try &#8212; it&#8217;s surprisingly intuitive.</p>
<h3>The Basics</h3>
<p>Mocha is available through npm, but I install it by adding it to my <code>package.json</code> files.  Make a <code>package.json</code> file like this one:</p>
<div class="highlight"><pre><code class="javascript"><span class="p">{</span>
    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;async-testing-tutorial&quot;</span>
  <span class="p">,</span> <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.1&quot;</span>
  <span class="p">,</span> <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;A tutorial for Mocha&quot;</span>
  <span class="p">,</span> <span class="s2">&quot;keywords&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="s2">&quot;tutorial&quot;</span><span class="p">]</span>
  <span class="p">,</span> <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="s2">&quot;Alex R. Young &lt;info@dailyjs.com&gt;&quot;</span>
  <span class="p">,</span> <span class="s2">&quot;main&quot;</span><span class="o">:</span> <span class="s2">&quot;index&quot;</span>
  <span class="p">,</span> <span class="s2">&quot;engines&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;node&quot;</span><span class="o">:</span> <span class="s2">&quot;&gt;= 0.4.x &lt; 0.7.0&quot;</span> <span class="p">}</span>
  <span class="p">,</span> <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;test&quot;</span><span class="o">:</span> <span class="s2">&quot;make test&quot;</span>
  <span class="p">}</span>
  <span class="p">,</span> <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;mocha&quot;</span><span class="o">:</span> <span class="s2">&quot;0.3.x&quot;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>
<p>Then run <code>npm install</code> and you&#8217;re almost ready to use Mocha.  The Mocha script will be in <code>./node_modules/.bin/mocha</code>, so rather than typing this every time add a simple <code>Makefile</code> to your project:</p>
<div class="highlight"><pre><code class="sh"><span class="nb">test</span>:
	@./node_modules/.bin/mocha

.PHONY: <span class="nb">test</span>
</code></pre>
</div>
<p>While you&#8217;re at it, add a <code>test/</code> directory:</p>
<div class="highlight"><pre><code class="sh">mkdir <span class="nb">test</span>
</code></pre>
</div>
<p>Now typing <code>make test</code> will run any tests in <code>test/</code>!</p>
<p>Any options for Mocha can now be added to the <code>Makefile</code>:</p>
<div class="highlight"><pre><code class="sh"><span class="nb">test</span>:
	@./node_modules/.bin/mocha -u tdd

.PHONY: <span class="nb">test</span>
</code></pre>
</div>
<p>This says we want to run tests in the <span class="caps">TDD</span> style:</p>
<blockquote>
<p>The &#8220;<span class="caps">BDD</span>&#8221; interface provides <code>describe()</code>, <code>it()</code>, <code>before()</code>, <code>after()</code>, <code>beforeEach()</code>, and <code>afterEach()</code>.  The &#8220;<span class="caps">TDD</span>&#8221; interface provides <code>suite()</code>, <code>test()</code>, <code>setup()</code>, and <code>teardown()</code>.</p>
</blockquote>
<h3>Testing Synchronously</h3>
<p>We&#8217;d better write something!  Add this to <code>index.js</code>:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">nextPrime</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">smaller</span><span class="p">;</span>
  <span class="nx">n</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">smaller</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">smaller</span> <span class="o">*</span> <span class="nx">smaller</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">n</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">smaller</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">((</span><span class="nx">n</span> <span class="o">%</span> <span class="nx">smaller</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">smaller</span> <span class="o">*</span> <span class="nx">smaller</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">smaller</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">n</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">nextPrime</span> <span class="o">=</span> <span class="nx">nextPrime</span><span class="p">;</span>
</code></pre>
</div>
<p>This is just an excuse to do something, it&#8217;s not meant to be the world&#8217;s greatest prime number generator.  One reason I like this function is large numbers will make the interpreter <em>really slow</em>, which can be useful for demonstrating certain run-loop related issues.</p>
<p>Now create a new file called <code>test/test.next-prime.js</code>:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;assert&#39;</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">nextPrime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./../index&#39;</span><span class="p">).</span><span class="nx">nextPrime</span>
  <span class="p">,</span> <span class="nx">asyncPrime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./../index&#39;</span><span class="p">).</span><span class="nx">asyncPrime</span><span class="p">;</span>

<span class="nx">suite</span><span class="p">(</span><span class="s1">&#39;nextPrime&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;nextPrime should return the next prime number&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="nx">nextPrime</span><span class="p">(</span><span class="mi">7</span><span class="p">));</span>
  <span class="p">});</span>

  <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;zero and one are not prime numbers&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">nextPrime</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">nextPrime</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>
<p>And run <code>make test</code> in the terminal.  The test should pass:</p>
<p><img src="/images/posts/mocha-tutorial-make-test.png" alt="" /></p>
<p>Why is this simple test interesting?  Well, Mocha explicitly supports asynchronous testing, yet we didn&#8217;t have to tell it that the test had finished running.  To do that, we&#8217;d write a test like this:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;assert&#39;</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">nextPrime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./../index&#39;</span><span class="p">).</span><span class="nx">nextPrime</span><span class="p">;</span>

<span class="nx">suite</span><span class="p">(</span><span class="s1">&#39;nextPrime&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;nextPrime should return the next prime number&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="nx">nextPrime</span><span class="p">(</span><span class="mi">7</span><span class="p">));</span>

    <span class="c1">// Tell Mocha the test has finished</span>
    <span class="nx">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>
<p>How is Mocha able to achieve this amazing feat of introspection?  It&#8217;s actually just checking how many arguments the callback has by using the <code>length</code> property on <code>Function</code>.  This makes the <span class="caps">API</span> able to cope with both synchronous and asynchronous tests without any extra boilerplate coding.  If you want to read more about this, <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/length"><span class="caps">MDN</span>: Function length</a> has examples.</p>
<h3>Asynchronous Tests</h3>
<p>Expanding on <code>nextPrime</code>, I&#8217;ve added a contrived asynchronous version:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">nextPrime</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">smaller</span><span class="p">;</span>
  <span class="nx">n</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">smaller</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">smaller</span> <span class="o">*</span> <span class="nx">smaller</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">n</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">smaller</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">((</span><span class="nx">n</span> <span class="o">%</span> <span class="nx">smaller</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">smaller</span> <span class="o">*</span> <span class="nx">smaller</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">smaller</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">n</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">asyncPrime</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fn</span><span class="p">(</span><span class="nx">nextPrime</span><span class="p">(</span><span class="nx">n</span><span class="p">));</span>
  <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">nextPrime</span> <span class="o">=</span> <span class="nx">nextPrime</span><span class="p">;</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">asyncPrime</span> <span class="o">=</span> <span class="nx">asyncPrime</span><span class="p">;</span>
</code></pre>
</div>
<p>The <code>asyncPrime</code> method just wraps the old function with <code>setTimeout</code> to simulate an asynchronous call.  Now we need to use the <code>done</code> function provided by Mocha to signal the end of the test:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">suite</span><span class="p">(</span><span class="s1">&#39;asyncPrime&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;asyncPrime should return the next prime number&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">asyncPrime</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">131</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="s1">&#39;Wrong number&#39;</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>
<h3>Mocha Tricks</h3>
<p>Mocha comes packed with lots of test reporter format options, including <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol"><span class="caps">TAP</span></a> and <span class="caps">JSON</span>, which provide opportunities for easy integration with other tools like Continuous Integration (CI) services.  TJ uses <a href="http://travis-ci.org/">Travis</a> and has a little build status indicator on Mocha&#8217;s <span class="caps">README</span> page.</p>
<p>Mocha also works with CoffeeScript and web browsers.</p>
<h3>Sample Project</h3>
<p>If you need help getting started with Mocha, I&#8217;ve put the code for this tutorial on GitHub at <a href="https://github.com/alexyoung/async-testing-tutorial">alexyoung / async-testing-tutorial</a>, and TJ&#8217;s projects use Mocha, which means popular libraries like <a href="https://github.com/visionmedia/express/tree/master/test">Express</a> have plenty of examples to explore.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2011/12/08/mocha/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

