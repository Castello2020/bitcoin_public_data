http://dailyjs.com/page26/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 02:17:35 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "e9376-22c0a-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 32557
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/22/node-roundup">Node Roundup: 0.8.7, Buffet, HARedis, Deployd</a></h2>
      <div class="meta">
        <span class="date">22 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/22/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#WebSocket">WebSocket</a>
          
            <a href="/tags.html#redis">redis</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_087'>Node 0.8.7</h3>

<p><a href='http://blog.nodejs.org/2012/08/15/node-v0-8-7-stable/'>Node 0.8.7</a> is out, which includes fixes for SSL, TLS, buffer and crypto issues, and also a few Windows-specific problems. I noticed someone posted about an <a href='https://groups.google.com/d/topic/nodejs/2YWgVLBi1AE/discussion'>issue with the latest npm in Windows</a>, but other than that 0.8.7 seems solid.</p>

<h3 id='buffet'>Buffet</h3>

<p><a href='https://github.com/carlos8f/node-buffet'>Buffet</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/buffet'>buffet</a>) by Carlos Rodriguez is a &#8220;performance-oriented&#8221; static file server:</p>

<blockquote>
<p>Buffet takes a fully-bufferred approach &#8211; all files are fully loaded into memory when your app boots, so you will never feel the burn of the filesystem. In practice, this is immensely efficient. So much so that putting Varnish in front of your app might even make it slower!</p>
</blockquote>

<p>It supports gzip, and will update files when they&#8217;re changed. The name of the <code>index.html</code> and <code>404.html</code> files can be changed, and other configuration options include <code>maxAge</code> for setting the <code>Cache-Control</code> header.</p>

<p>The author has included Mocha tests and the project is on <a href='http://travis-ci.org/#!/carlos8f/node-buffet'>Travis CI</a>.</p>

<h3 id='haredis'>HARedis</h3>

<p><a href='https://github.com/carlos8f/haredis'>HARedis</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/haredis'>haredis</a>) also by Carlos Rodriguez is a wrapper around <a href='https://github.com/mranney/node_redis'>node_redis</a> that helps build fault-tolerant clusters of Redis servers. The main API difference is <code>createClient</code>, which accepts an array of hosts and ports, and this works with colon-separated strings for <code>&#39;ip:port&#39;</code>.</p>

<p>Carlos has included the test suite from the original redis module, so running <code>make test-cluster</code> or <code>make test</code> can be used to test the project.</p>

<h3 id='deployd'>Deployd</h3>

<p><a href='http://deployd.com/'>Deployd</a> (GitHub: <a href='https://github.com/deployd/deployd'>deployd / deployd</a>, License: <em>Apache 2.0</em>, npm: <a href='https://npmjs.org/package/deployd'>deployd</a>) by Ritchie Martori and the <a href='https://github.com/deployd'>Deployd team</a> is a toolkit for building real-time APIs suited to web and mobile applications.</p>

<p>Deployd applications are created with a command-line tool called <code>dpd</code>. A newly created app includes a web IDE for managing the applications resources &#8211; this is basically a schema that Deployd will use to generate a suitable RESTful API. There&#8217;s a <a href='http://www.deployd.com/docs/tutorials/hello-world.html'>Deployd Hello World tutorial</a> that covers the basics, and a <a href='http://www.deployd.com/video.html'>Deployd screencast</a>.</p>

<p>The project is built on technologies like Socket.IO and MongoDB, and includes tests written with Mocha.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/21/jquery-roundup">jQuery Roundup: Infinity.js, lorem, oriDomi</a></h2>
      <div class="meta">
        <span class="date">21 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/21/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='infinityjs'>Infinity.js</h3>

<p><img src='/images/posts/infinityjs.png' alt='Infinity.js' /></p>

<p><a href='http://airbnb.github.com/infinity/'>Infinity.js</a> (GitHub: <a href='https://github.com/airbnb/infinity'>airbnb / infinity</a>, License: <em>BSD</em>) from developers at Airbnb is an infinite scrolling plugin based on the iOS <code>UITableView</code> class. It&#8217;s implemented by using containers that move content in and out of the DOM based on throttled scroll events, to keep scrolling smooth. The current version has some caveats &#8211; ListViews can&#8217;t be nested or have a height set by CSS.</p>

<p>To back up the performance claims, the authors have made demo pages with <a href='http://airbnb.github.com/infinity/demo-on.html'>Infinity.js turned on</a> and <a href='http://airbnb.github.com/infinity/demo-off.html'>turned off</a>. At least in my browser, it&#8217;s clear that Infinity.js improves the performance. Also, several performance enhancements are currently planned, including changing the internal <code>ListItem</code> array to use a self-balancing binary tree.</p>

<h3 id='lorem'>lorem</h3>

<p><a href='https://github.com/shyiko/lorem'>lorem</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/lorem'>lorem</a>) by Stanley Shyiko is a text generator that works with Node and browsers, and it includes optional jQuery plugin support:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='nx'>selector</span><span class='p'>).</span><span class='nx'>ipsum</span><span class='p'>();</span>
</code></pre>
</div>
<p>The author has included Nodeunit tests, and a build script.</p>

<h3 id='oridomi'>oriDomi</h3>

<p><a href='http://oridomi.com/'>oriDomi</a> (GitHub: <a href='https://github.com/dmotz/oridomi'>dmotz / oriDomi</a>, License: <em>MIT</em>) by Dan Motzenbecker is a small script with optional jQuery support that creates an effect on images and web fonts that looks like folding paper, by using CSS 3D transforms.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='nx'>selector</span><span class='p'>).</span><span class='nx'>oriDomi</span><span class='p'>({</span>
  <span class='nx'>vPanels</span><span class='o'>:</span> <span class='mi'>3</span>
<span class='p'>,</span> <span class='nx'>hPanels</span><span class='o'>:</span> <span class='mi'>10</span>
<span class='p'>,</span> <span class='nx'>perspective</span><span class='o'>:</span> <span class='mi'>200</span>
<span class='p'>,</span> <span class='nx'>speed</span><span class='o'>:</span> <span class='mi'>500</span>
<span class='p'>,</span> <span class='nx'>shading</span><span class='o'>:</span> <span class='kc'>false</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It works best when it can figure out the dimensions of the element it&#8217;s applied to, so it&#8217;s probably a good idea to ensure images used with the effect have <code>width</code> and <code>height</code> attributes.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/20/js101-the-language">JS101: The Language Past and Present</a></h2>
      <div class="meta">
        <span class="date">20 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/20/js101-the-language/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
        </span>
      </div>
      <div class="preview">
        <p>We&#8217;ve covered a lot of ground since <a href='http://dailyjs.com/2012/05/07/js101-object/'>the first JS101</a>, but the truth is I&#8217;ve missed out an important question: what is JavaScript, and who controls it?</p>

<p>I&#8217;ve answered this question and covered a lot more in the <a href='http://dailyjs.com/history-of-javascript.html'>History of JavaScript</a> series. This post is a brief introduction, and after reading this post you should know the basics of JavaScript and its relationship to ECMAScript.</p>

<h3 id='who_made_javascript'>Who Made JavaScript?</h3>

<p>JavaScript was created by Brendan Eich in 1995 for Netscape. Netscape submitted JavaScript to <a href='http://www.ecma-international.org/'>Ecma International</a>, which is a standards organization based in Geneva. The standardised version is known as ECMAScript.</p>

<h3 id='what_is_ecmascript'>What is ECMAScript?</h3>

<p>Most articles on sites like DailyJS will refer to ECMA-262, ECMAScript 3, and ECMAScript 5. We usually abbreviate these terms to ES3 and ES5.</p>

<ul>
<li><a href='http://www.ecma-international.org/publications/standards/Ecma-262.htm'>ECMA-262</a> is the name of the specification, of which there are five editions</li>

<li>ECMAScript 3 (or ECMA-262, edition 3) was published in December 1999, and was supported by Netscape 6 and IE 5.5</li>

<li>ECMAScript 5 (or ECMA-262, edition 5) was published in December 2009 and is supported by Firefox 4+, Safari 6: <a href='http://kangax.github.com/es5-compat-table/'>ES5 compatibility table</a></li>
</ul>

<p>ECMAScript 5 adds a lot of features that we&#8217;ve already started to take for granted: including new array methods like <code>forEach</code>, new <code>Object</code> methods like <code>Object.create</code>, property attributes, function binding, and more.</p>

<h3 id='the_future'>The Future</h3>

<p>ECMAScript is still being actively developed. It&#8217;s tentatively known as ES.next (ECMA-262 Edition 6), and <a href='http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts'>ES.next working drafts can be downloaded</a> from the <a href='http://wiki.ecmascript.org/'>ECMAScript wiki</a>.</p>

<p>Proposals for the language are collected on the <a href='http://wiki.ecmascript.org/doku.php?id=strawman:strawman'>strawman wiki</a>, and discussed in detail by several contributors on the wiki and mailing lists. To keep up with this, I often check the <a href='http://wiki.ecmascript.org/doku.php?do=recent&amp;id='>wiki&#8217;s recent changes</a> and the <a href='https://mail.mozilla.org/listinfo/es-discuss'>es-discuss mailing list</a>.</p>

<p><a href='https://brendaneich.com/'>Brendan Eich&#8217;s blog</a> covers a lot of the major developments as well. For example, his <a href='https://brendaneich.com/2012/06/recent-talks-fluent-txjs-2012/'>latest post</a> mentions ES6 and the relationship between the standards makers and the enthusiastic JavaScript developer community.</p>

<p>The language will change, and as new standards are made available you&#8217;ll need to know what your given platform or browser supports.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/17/adn-self-hancock">App.net Node Module, Prototype 1.7.1, Self, Qwerty Hancock, MilkChart</a></h2>
      <div class="meta">
        <span class="date">17 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/17/adn-self-hancock/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#audio">audio</a>
          
            <a href="/tags.html#social">social</a>
          
            <a href="/tags.html#prototype">prototype</a>
          
            <a href="/tags.html#graphs">graphs</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='appnet_node_module'>App.net Node Module</h3>

<p>There&#8217;s already an <a href='https://join.app.net/'>App.net</a> Node module: <a href='https://github.com/damienklinnert/appdotnet'>damienklinnert / appdotnet</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/appdotnet'>appdotnet</a>. Created by Damien Klinnert, it uses the popular <a href='https://npmjs.org/package/request'>request HTTP module</a>, and has Mocha tests. It supports authentication, users, and posts.</p>

<p>Creating a post is very simple:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>client</span><span class='p'>.</span><span class='nx'>createPost</span><span class='p'>(</span><span class='nx'>config</span><span class='p'>.</span><span class='nx'>post_data</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>post</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Do something with `post`</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='prototype_171'>Prototype 1.7.1</h3>

<p>(SFX: Simple Minds - Alive And Kicking)</p>

<p><a href='http://prototypejs.org/2012/8/8/prototype-1-7-1'>Prototype 1.7.1</a> has been released, which includes a rewrite of the DOM code, ECMAScript 5 compatibility, as well as other bug fixes.</p>

<blockquote>
<p>Many of you have wondered whether Prototype is &#8220;dead,&#8221; and I can say that it definitely isn&#8217;t. But because of the way I work on Prototype - months of inaction followed by a flurry of commits and bug fixes - it&#8217;s fair to say that Prototype hibernates for long periods of time.</p>
</blockquote>

<h3 id='self'>Self</h3>

<p><a href='https://github.com/munro/self'>Self</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/self'>self</a>) by Ryan Munro is a class library based on Python. It supports inheritance, mixins, static properties, and can work with plain old prototype classes and Backbone.</p>

<blockquote>
<p>Self is class-based sugar that&#8217;s perfect for continuation-passing style. No more <code>var that = this;</code>! The implicit <code>this</code> variable is changed to an explicit self variable that your inner functions inherit. Self plays nicely with existing prototypal, and Backbone OOP.</p>
</blockquote>

<p>Self can be used with browsers and in Node programs, and includes tests for both environments.</p>

<h3 id='qwerty_hancock'>Qwerty Hancock</h3>

<p><img src='/images/posts/qwertyhancock.png' alt='Query Hancock' /></p>

<p><a href='http://stuartmemo.com/qwerty-hancock/'>Qwerty Hancock</a> (GitHub: <a href='https://github.com/stuartmemo/qwerty-hancock'>stuartmemo / qwerty-hancock</a>, License: <em>MIT</em>) by Stuart Memo is a &#8220;vector qwerty keyboard&#8221;. The project&#8217;s site demonstrates the keyboard by hooking it up to some Audio API code, so it&#8217;s actually a reusable keyboard widget that could be used to build other music-related projects.</p>

<h3 id='milkchart'>MilkChart</h3>

<p><a href='https://github.com/theiviaxx/MilkChart'>MilkChart</a> (License: <em>MIT</em>) by Brett Dixon is a graph library for MooTools. It generates graphs that look like Excel. It&#8217;s designed to transform HTML tables into charts, so it&#8217;s easy to integrate it with existing markup that requires graphs.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/16/mvstar-6">Backbone.js: Internals Summary</a></h2>
      <div class="meta">
        <span class="date">16 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/16/mvstar-6/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#code-review">code-review</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Over the last month we&#8217;ve looked at Backbone&#8217;s internals in detail. This post summarises these findings.</p>

<p>To recap, here&#8217;s a list of all the parts in <em>Backbone.js: Hacker&#8217;s Guide</em>:</p>

<ul>
<li><a href='http://dailyjs.com/2012/07/19/mvstar-2/'>Part 1</a>: Setup, Events, Models</li>

<li><a href='http://dailyjs.com/2012/07/26/mvstar-3/'>Part 2</a>: Constructor, Inheritance, Collections, Chainable API</li>

<li><a href='http://dailyjs.com/2012/08/02/mvstar-4/'>Part 3</a>: Router, History, Views</li>

<li><a href='http://dailyjs.com/2012/08/09/mvstar-5/'>Part 4</a>: Inheritance, Sync</li>
</ul>

<h3 id='leverage_events'>Leverage Events</h3>

<p>Backbone&#8217;s classes are designed to be inherited from. Every single one of these classes inherits from <code>Backbone.Events</code>:</p>

<ul>
<li><code>Backbone.Model</code></li>

<li><code>Backbone.Collection</code></li>

<li><code>Backbone.Router</code></li>

<li><code>Backbone.History</code></li>

<li><code>Backbone.View</code></li>
</ul>

<p>That means when designing applications built with Backbone, events are a key architectural component. Events are the standard way to deal with user interface actions, through the declarative event bindings on views, and also model and collection changes. However, you can easily add your own custom events.</p>

<p>When learning Backbone it&#8217;s important to get a feel for the built-in event names. Incorrectly binding a collection <code>reset</code> event, for example, could cause your application to render more often than it should. Mastering events is one of the quickest ways to become more productive with Backbone.</p>

<h3 id='underscorejs'>Underscore.js</h3>

<p>Since Backbone depends on Underscore, it&#8217;s worth keeping this in mind when dealing with any kind of arrays or collections of data. Also, familiarity with Underscore&#8217;s methods will help work with <code>Backbone.Collection</code> effectively.</p>

<h3 id='views'>Views</h3>

<p>It&#8217;s easy to slip into using <code>$</code>, but avoid this where possible. Backbone caches a view&#8217;s element, so use <code>this.$el</code> instead. Design views based on the <a href='http://en.wikipedia.org/wiki/Single_responsibility_principle'>single responsibility principle</a>.</p>

<p>It might be tempting to let &#8220;container&#8221; view render HTML directly by using <code>$().html</code>, but resisting the temptation and creating a hierarchy of views will make it <em>much</em> easier to debug your code and write automated tests.</p>

<p>Interestingly, Backbone doesn&#8217;t have a lot of code dedicated to templates, but it can work with the <a href='http://underscorejs.org/#template'>template</a> method. I use this with <a href='http://requirejs.org/docs/api.html#text'>RequireJS text file dependencies</a> to load remote templates during development, then I use the RequireJS build script to generate something suitable for deployment. This makes code easy to test and fast to load.</p>

<h3 id='api_style'>API Style</h3>

<p>Backbone&#8217;s API is thankfully very consistent. Even the history API accepts a <code>silent</code> option, which is used throughout the library to stop events from firing when they&#8217;re not required.</p>

<p>Backbone&#8217;s collections have Underscore&#8217;s chainable API, which can be handy, <a href='http://dailyjs.com/2012/07/26/mvstar-3/'>but care must be taken to use this correctly</a>.</p>

<h3 id='testing_backbone'>Testing Backbone</h3>

<p>So far I&#8217;ve been reviewing Backbone&#8217;s code to demystify the framework as a whole. However, it&#8217;s worth noting that other technologies work very well with Backbone and Underscore. RequireJS and AMD modules can be a great way to break up projects.</p>

<p>However, one area that Backbone doesn&#8217;t address is testing. This is unfortunate, because testing Backbone projects definitely isn&#8217;t obvious. In <a href='http://addyosmani.com/blog/unit-testing-backbone-js-apps-with-qunit-and-sinonjs/'>Unit Testing Backbone.js Apps With QUnit And SinonJS</a>, Addy Osmani describes one method in detail.</p>

<p>I have the following rules for testing Backbone projects:</p>

<ol>
<li>The full application should be running during testing</li>

<li>Tests shouldn&#8217;t depend on any markup in the test harness HTML file (or as little as possible)</li>

<li>Tests shouldn&#8217;t touch the network for data</li>
</ol>

<p>The second rule in particular is aided by using templates loaded by RequireJS and avoiding those pesky calls to <code>$()</code> in views.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/15/node-roundup">Node Roundup: Surviving npm Downtime, Waf Wall of Shame, stream-chat, Vein</a></h2>
      <div class="meta">
        <span class="date">15 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/15/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#RPC">RPC</a>
          
            <a href="/tags.html#WebSocket">WebSocket</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#templating">templating</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='surviving_npm_downtime'>Surviving npm Downtime</h3>

<p>On Sunday morning (UTC) part of npm&#8217;s service stopped functioning correctly, which meant the command-line tool failed to download packages. In response to this, <a href='https://twitter.com/streunerlein'>Dominique Sandoz</a> stepped up and created a mirror. Mirrors can be used by changing the location of the npm registry:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>npm</span> <span class='nx'>set</span> <span class='nx'>registry</span> <span class='nx'>http</span><span class='o'>:</span><span class='c1'>//npm.example.com</span>
<span class='nx'>npm</span> <span class='nx'>set</span> <span class='nx'>registry</span> <span class='nx'>https</span><span class='o'>:</span><span class='c1'>//registry.npmjs.org</span>
</code></pre>
</div>
<p>Fortunately npm is now working correctly, but to help prepare for future downtime I recommend bookmarking this gist that Dominique wrote containing a list of <a href='https://gist.github.com/3332181'>npm mirrors and proxies</a>.</p>

<p>During the downtime, several other users also offered their own solutions, mostly collaborating on Twitter and IRC. For example, Maciej Małecki <a href='https://twitter.com/maciejmalecki/status/234640793476947970'>created a proxy-based solution</a>.</p>

<p>To my knowledge there has been no official statement on the service outage, and additionally there is no official Node/npm service status page. Hopefully someone will write up details about the outage on <a href='http://blog.nodejs.org/'>blog.nodejs.org</a>, and outline the preventative measures taken to ensure future stability.</p>

<h3 id='nodewaf_wall_of_shame'>Node-waf Wall of Shame</h3>

<p>Isaac Schlueter posted a Tweet referencing what he calls the &#8220;Node-waf wall of shame&#8221;:</p>

<blockquote>
<p>Node-waf wall of shame: <a href='http://t.co/hoANsgtz'>http://j.mp/node-waf-users</a> Upgrade your packages to node-gyp. <a href='http://npm.im/node-gyp'>http://npm.im/node-gyp</a> #deathtowaf</p>
</blockquote>

<p>As I mentioned in the <a href='http://dailyjs.com/2012/05/17/windows-and-node-3/'>Windows and Node</a> series, it&#8217;s time to move addons over to <a href='https://github.com/TooTallNate/node-gyp'>node-gyp</a>.</p>

<h3 id='streamchat'>stream-chat</h3>

<p><a href='https://github.com/Raynos/stream-chat'>stream-chat</a> (License: <em>MIT</em>) by Raynos is a chat app based around <a href='http://nodejs.org/docs/latest/api/all.html#all_stream'>streams</a>. It uses the <a href='https://github.com/Raynos/boot'>boot</a> and <a href='https://github.com/Raynos/multi-channel-mdm'>multi-channel-mdm</a> modules by the same author to route streams between browsers and Node servers.</p>

<p>An added bonus is the author has designed the chat app to be scalable by using <a href='https://github.com/substack/seaport'>seaport</a> and <a href='https://github.com/substack/mountie'>mountie</a> by James Halliday. Seaport helps manage clusters of servers, while mountie allows applications to be composed of smaller servers behind mount points. Routing is handled by <a href='https://github.com/substack/bouncy'>bouncy</a>. These modules help design larger systems according to the concept of <a href='http://en.wikipedia.org/wiki/Separation_of_concerns'>separation of concerns</a>, which suits Node web applications.</p>

<h3 id='minnahtmljs'>MinnaHTML.js</h3>

<p><a href='https://github.com/RobeeeJay/MinnaHTML.js'>MinnaHTML.js</a> (License: <em>GPL v3</em>, npm: <a href='https://npmjs.org/package/minnahtml'>minnahtml</a>) by Robee Shepherd is an async-friendly HTML object library that can be used to build HTML:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>mh</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;minnahtml&#39;</span><span class='p'>).</span><span class='nx'>mh</span>
  <span class='p'>,</span> <span class='nx'>html</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>mh</span><span class='p'>.</span><span class='nx'>Html</span><span class='p'>()</span>
  <span class='p'>,</span> <span class='nx'>head</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>mh</span><span class='p'>.</span><span class='nx'>Head</span><span class='p'>(</span><span class='nx'>html</span><span class='p'>)</span>
  <span class='p'>;</span>

 <span class='k'>new</span> <span class='nx'>mh</span><span class='p'>.</span><span class='nx'>Title</span><span class='p'>(</span><span class='nx'>head</span><span class='p'>).</span><span class='nx'>data</span><span class='p'>.</span><span class='nx'>content</span> <span class='o'>=</span> <span class='s1'>&#39;Example&#39;</span><span class='p'>;</span>
 
 <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>html</span><span class='p'>.</span><span class='nx'>generateHtml</span><span class='p'>());</span>

<span class='c1'>// &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</span>
<span class='c1'>// &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;</span>
<span class='c1'>//  &lt;head&gt;</span>
<span class='c1'>//   &lt;title&gt;</span>
<span class='c1'>//    Example</span>
<span class='c1'>//   &lt;/title&gt;</span>
<span class='c1'>//  &lt;/head&gt;</span>
<span class='c1'>// &lt;/html&gt;</span>
</code></pre>
</div>
<p>The author has provided a walkthrough that covers more features in the project&#8217;s readme file.</p>

<h3 id='vein'>Vein</h3>

<p><a href='https://github.com/wearefractal/vein'>Vein</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/vein'>vein</a>) is a WebSocket RPC module. It includes both client and server code, and a minimised build for browsers. RPC methods can be added using <code>vein.add</code>, and then called from clients:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Server</span>
<span class='nx'>vein</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='s1'>&#39;multiply&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>,</span> <span class='nx'>numOne</span><span class='p'>,</span> <span class='nx'>numTwo</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>res</span><span class='p'>.</span><span class='nx'>reply</span><span class='p'>(</span><span class='nx'>numOne</span> <span class='o'>*</span> <span class='nx'>numTwo</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='c1'>// Browser</span>
<span class='kd'>var</span> <span class='nx'>vein</span> <span class='o'>=</span> <span class='nx'>Vein</span><span class='p'>.</span><span class='nx'>createClient</span><span class='p'>();</span>
<span class='nx'>vein</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>services</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>vein</span><span class='p'>.</span><span class='nx'>multiply</span><span class='p'>(</span><span class='mi'>2</span><span class='p'>,</span> <span class='mi'>5</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>num</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// num === 10</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/14/jquery-roundup">jQuery Roundup: jQuery 1.8, BBSearch, MDMagick, Document-Bootstrap, DownloadBuilder.js</a></h2>
      <div class="meta">
        <span class="date">14 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/14/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#sessionStorage">sessionStorage</a>
          
            <a href="/tags.html#files">files</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_18'>jQuery 1.8</h3>

<p><a href='http://blog.jquery.com/2012/08/09/jquery-1-8-released/'>jQuery 1.8</a> has been released. jQuery 1.8 makes some fairly significant changes:</p>

<ul>
<li>The selector engine has been rewritten</li>

<li><a href='https://gist.github.com/54829d408993526fe475'>Animations have been reworked</a></li>

<li><code>.css</code> and <code>.animate</code> will automatically add vendor prefixes</li>

<li>The size has been reduced compared to jQuery 1.7.2</li>

<li>Grunt build system</li>
</ul>

<h3 id='bbsearch'>BBSearch</h3>

<p><a href='http://fguillen.github.com/BBSearch/'>BBSearch</a> (GitHub: <a href='https://github.com/fguillen/BBSearch'>fguillen / BBSearch</a>, License: <em>CC BY 3.0</em>) by Fernando Guillen is a find-as-you-type style plugin that&#8217;s designed to work with Backbone.js. It can also work with JSONP APIs, and the author has included demos that use GitHub and Twitter.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#search-input-1&#39;</span><span class='p'>).</span><span class='nx'>bbsearch</span><span class='p'>({</span>
  <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;https://api.github.com/legacy/repos/search/#bbsearch-query#?callback=?&amp;&#39;</span>
<span class='p'>,</span> <span class='nx'>itemTemplate</span><span class='o'>:</span> <span class='s1'>&#39;&lt;p&gt;[@&lt;%= owner %&gt;] &lt;a href=&quot;&lt;%= url %&gt;&quot;&gt;&lt;%= name %&gt;&lt;/a&gt;&lt;/p&gt;&#39;</span>
<span class='p'>,</span> <span class='nx'>resultsElement</span><span class='o'>:</span> <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#results-1&#39;</span><span class='p'>)</span>
<span class='p'>,</span> <span class='nx'>parse</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>response</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>response</span><span class='p'>.</span><span class='nx'>data</span><span class='p'>.</span><span class='nx'>repositories</span><span class='p'>;</span> <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='mdmagick'>MDMagick</h3>

<p><img src='/images/posts/mdmagick.png' alt='MDMagick' /></p>

<p><a href='http://fguillen.github.com/MDMagick/'>MDMagick</a> (GitHub: <a href='https://github.com/fguillen/MDMagick'>fguillen / MDMagick</a>, License: <em>CC BY 3.0</em>) also by Fernando Guillen is a Markdown interface for jQuery. It uses <a href='https://github.com/coreyti/showdown/'>Showdown</a>, which is a Markdown parser for JavaScript, and <a href='http://archive.plugins.jquery.com/project/a-tools'>a-tools</a> for handling text selections.</p>

<h3 id='documentbootstrap_and_downloadbuilderjs'>Document-Bootstrap and DownloadBuilder.js</h3>

<p><a href='http://gregfranko.com/Document-Bootstrap/'>Document-Bootstrap</a> (GitHub: <a href='https://github.com/gfranko/Document-Bootstrap'>gfranko / Document-Bootstrap</a>, License: <em>MIT</em>) by Greg Franko is a boilerplate for creating responsive Bootstrap projects. It also includes <a href='http://gregfranko.com/DownloadBuilder.js/'>DownloadBuilder.js</a> (GitHub: <a href='https://github.com/gfranko/DownloadBuilder.js'>gfranko / DownloadBuilder.js</a>, License: <em>MIT</em>), a project by the same author that uses the HTML5 File API to create optimised client-side scripts.</p>

<p>DownloadBuilder.js supports concatenating local files and files hosted on GitHub. It can also cache Ajax/JSONP requests by using <code>sessionStorage</code>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/13/writers">DailyJS is Looking for Writers</a></h2>
      <div class="meta">
        <span class="date">13 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/13/writers/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#community">community</a>
          
            <a href="/tags.html#news">news</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Over the last three years I&#8217;ve written over 700 articles for DailyJS. I&#8217;ve written through national holidays, trips to Europe and Asia, and I&#8217;ve enjoyed every minute of it! The time has come, however, to look for more writers. In September I&#8217;m going to become a father, and naturally family obligations will take priority for a few weeks.</p>

<p>Rather than leave readers without their daily dose of JavaScript news and tutorials, I&#8217;m looking for writers to contribute to the site. If you&#8217;re an open source developer and would like to promote your latest Node module or client-side library by writing a tutorial: this is your chance! I&#8217;m also interested in hearing from developers of commercial services that are relevant to JavaScript developers.</p>

<p>Before writing anything, <a href='https://docs.google.com/a/alexyoung.org/spreadsheet/viewform?formkey=dHBBV0hFem5IOG1qYmNOQjdoNW1CY3c6MQ'>fill out this form to get in touch</a>. I&#8217;ll let you know if your suggestion is appropriate for the site.</p>

<h3 id='writing_guide'>Writing Guide</h3>

<ul>
<li>Articles do not need to be long &#8211; three to five paragraphs is great, otherwise consider writing a series of articles</li>

<li>Markdown is fine, although we use weird tags for code samples &#8211; <a href='https://github.com/alexyoung/dailyjs/blob/master/_posts/2012-08-09-mvstar-5.md'>here is an example post</a></li>

<li>British or American English is acceptable</li>

<li>DailyJS reserves the right to edit your article before publishing it</li>
</ul>

<h3 id='payment'>Payment</h3>

<p>Articles will be paid for at a base rate of $25. Payment terms are negotiable, and may be subject to exchange rate conversion.</p>

<p><a href='https://docs.google.com/a/alexyoung.org/spreadsheet/viewform?formkey=dHBBV0hFem5IOG1qYmNOQjdoNW1CY3c6MQ'>Submit your article idea here</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/10/hubsearch-canvas-motown">HubSearch, canvas-charts, Motown</a></h2>
      <div class="meta">
        <span class="date">10 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/10/hubsearch-canvas-motown/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#windows">windows</a>
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#metro">metro</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='hubsearch'>HubSearch</h3>

<p><img src='/images/posts/hubsearch.png' alt='HubSearch' /></p>

<p><a href='http://projects.jga.me/hubsearch/'>HubSearch</a> (GitHub: <a href='https://github.com/jgallen23/hubsearch'>jgallen23 / hubsearch</a>) by Greg Allen is a GitHub search interface built with Bootstrap, Underscore, and his own <a href='https://github.com/jgallen23/fidel'>Fidel</a> library for Backbone-style controllers.</p>

<p>I spend a lot of time searching GitHub to find projects to write about, so it&#8217;s good to see a tool that tries to improve on GitHub&#8217;s inadequate search interface.</p>

<h3 id='canvascharts'>canvas-charts</h3>

<p><a href='https://github.com/praneetloke/canvas-charts'>canvas-charts</a> (License: <em>MIT</em>) by Praneet Loke is a graph library that only relies on the HTML5 Canvas API. The library includes a method to check if the Canvas element is supported, and it accepts an object containing options:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>chartingCanvas</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>CanvasCharts</span><span class='p'>();</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>chartingCanvas</span><span class='p'>.</span><span class='nx'>isCanvasSupported</span><span class='p'>())</span> <span class='p'>{</span>
  <span class='nx'>chartingCanvas</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>{</span>
    <span class='nx'>gradientColor1</span><span class='o'>:</span> <span class='s1'>&#39;#cd9603&#39;</span>
  <span class='p'>,</span> <span class='nx'>gradientColor2</span><span class='o'>:</span> <span class='s1'>&#39;#f1de3f&#39;</span> <span class='c1'>// etc.</span>
  <span class='p'>});</span>

  <span class='nx'>chartingCanvas</span><span class='p'>.</span><span class='nx'>createCanvas</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;graph&#39;</span><span class='p'>),</span> <span class='nx'>width</span><span class='p'>,</span> <span class='nx'>height</span><span class='p'>);</span>
  <span class='c1'>// Given suitable arrays of labels for the x and y axes</span>
  <span class='nx'>chartingCanvas</span><span class='p'>.</span><span class='nx'>drawChart</span><span class='p'>(</span><span class='nx'>xaxis</span><span class='p'>,</span> <span class='mi'>90</span><span class='p'>,</span> <span class='nx'>yaxis</span><span class='p'>,</span> <span class='mi'>35</span><span class='p'>,</span> <span class='p'>[</span><span class='mi'>10</span><span class='p'>,</span> <span class='mi'>20</span><span class='p'>,</span> <span class='mi'>30</span> <span class='mi'>20</span><span class='p'>,</span> <span class='mi'>10</span><span class='p'>]);</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='motown'>Motown</h3>

<p><a href='http://labs.vectorform.com/2012/07/motown-easy-javascript-apps-for-metro-part-1/'>Motown</a> (GitHub: <a href='https://github.com/mtilchen/motown'>mtilchen / motown</a>, License: <em>LGPL v3</em>) by Matthew P. Tilchen is a library for creating Metro-style Windows 8 applications using HTML, CSS, and JavaScript. Matthew sent this in before Microsoft decided to change the Metro name, but at this point everyone interested in this project should understand the name&#8217;s origin.</p>

<blockquote>
<p>The WinJS libraries and bindings to WinRT provide a solid foundation for building applications but I feel that a significant gap remains. Microsoft [&#8230;] intentionally left [&#8230;] this for the development community to fill. I created the Motown JavaScript library [&#8230;] to fill the gap.</p>
</blockquote>

<p>This library is based on Microsoft&#8217;s JavaScript Windows API, and is built according to Microsoft&#8217;s recommendations:</p>

<blockquote>
<p>Microsoft recommends that developers use a &#8220;single-page&#8221; style of navigation instead of a &#8220;multi-page&#8221; style in their applications.</p>
</blockquote>

<p>Motown also supports navigation transition animations, application life cycle methods, and a declarative approach to binding HTML views to JavaScript. The project includes a Visual Studio 2012 plugin for creating new Motown apps.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/09/mvstar-5">Backbone.js: Hacker's Guide Part 4</a></h2>
      <div class="meta">
        <span class="date">09 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/09/mvstar-5/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#code-review">code-review</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Last week we looked at <a href='http://dailyjs.com/2012/08/02/mvstar-4/'>Backbone&#8217;s History and View APIs</a>. We&#8217;re coming to the end of this detailed look at Backbone&#8217;s internals, but there are still a few interesting things left:</p>

<ul>
<li>Backbone&#8217;s inheritance implementation</li>

<li><code>Backbone.sync</code></li>
</ul>

<h3 id='backbones_inheritance_implementation'>Backbone&#8217;s inheritance Implementation</h3>

<p>The comments indicate that the <code>inherits</code> function is inspired by <code>goog.inherits</code>. Google&#8217;s implementation is from the <a href='https://developers.google.com/closure/library/docs/introduction'>Closure Library</a>, but Backbone&#8217;s API accepts two objects (incorrectly referred to as a hash) containing &#8220;instance&#8221; and &#8220;static&#8221; methods. Each of Backbone&#8217;s objects has an <code>extend</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Model</span><span class='p'>.</span><span class='nx'>extend</span> <span class='o'>=</span> <span class='nx'>Collection</span><span class='p'>.</span><span class='nx'>extend</span> <span class='o'>=</span> <span class='nx'>Router</span><span class='p'>.</span><span class='nx'>extend</span> <span class='o'>=</span> <span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span> <span class='o'>=</span> <span class='nx'>extend</span><span class='p'>;</span>
</code></pre>
</div>
<p>Most development with Backbone is based around inheriting from these objects, and they&#8217;re designed to mimic a classical object-oriented implementation.</p>

<p>Backbone uses <a href='https://github.com/documentcloud/underscore/blob/53c67e7be33ed17a6b4a1cabbf318ae218c65284/underscore.js#L691-698'>Underscore&#8217;s extend method</a>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>each</span><span class='p'>(</span><span class='nx'>slice</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>),</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>source</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>prop</span> <span class='k'>in</span> <span class='nx'>source</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>prop</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>source</span><span class='p'>[</span><span class='nx'>prop</span><span class='p'>];</span>
  <span class='p'>}</span>
<span class='p'>});</span>
<span class='k'>return</span> <span class='nx'>obj</span><span class='p'>;</span>
</code></pre>
</div>
<p>This isn&#8217;t the same as <a href='http://es5.github.com/#x15.2.3.5'>ES5&#8217;s Object.create</a>, it&#8217;s actually copying properties (methods and values) from one object to another. Since this isn&#8217;t enough to support Backbone&#8217;s inheritance and class model, the following steps are performed:</p>

<ol>
<li>The instance methods are checked to see if there&#8217;s a <code>constructor</code> property. If so, the class&#8217;s constructor is used, otherwise the parent&#8217;s constructor is used (i.e., <code>Backbone.Model</code>)</li>

<li>Underscore&#8217;s <code>extend</code> method is called to add the parent class&#8217;s methods to the new child class</li>

<li>The <code>prototype</code> property of a blank constructor function is assigned with the parent&#8217;s prototype, and a new instance of this is set to the child&#8217;s <code>prototype</code> property</li>

<li>Underscore&#8217;s <code>extend</code> method is called twice to add the static and instance methods to the child class</li>

<li>The child&#8217;s prototype&#8217;s constructor and a <code>__super__</code> property are assigned</li>
</ol>

<p>This pattern is also used for classes in CoffeeScript, so Backbone classes are compatible with CoffeeScript classes.</p>

<p><em>Update</em>: Jeremy Ashkenas <a href='https://twitter.com/jashkenas/status/234017859964108801'>clarified this process</a> on Twitter:</p>

<blockquote>
<p>&#8230; it&#8217;s just your basic prototype chain, plus one extra goodie: any constructor properties (static) are copied over as well.</p>
</blockquote>

<h3 id='backbones_sync_api'>Backbone&#8217;s Sync API</h3>

<p>The <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1331'>Backbone.sync</a> method is intended to be overridden to support other backends. The built-in method is tailed to a certain breed of RESTful JSON APIs &#8211; Backbone was originally extracted from a Ruby on Rails application, which uses HTTP methods like <code>PUT</code> the same way.</p>

<p>The way this works is the model and collection classes have a <code>sync</code> method that calls <code>Backbone.sync</code>. Both will call <code>this.sync</code> internally when fetching, saving, or deleting items.</p>

<p>The <code>sync</code> method is called with three parameters:</p>

<ul>
<li><code>method</code>: One of <code>create</code>, <code>update</code>, <code>delete</code>, <code>read</code></li>

<li><code>model</code>: The Backbone model object</li>

<li><code>options</code>: May include success and error methods</li>
</ul>

<p>Implementing a new <code>sync</code> method can use the following pattern:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>requestContent</span> <span class='o'>=</span> <span class='p'>{},</span> <span class='nx'>success</span><span class='p'>,</span> <span class='nx'>error</span><span class='p'>;</span>

  <span class='kd'>function</span> <span class='nx'>success</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Handle results from MyAPI</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>}</span>

  <span class='kd'>function</span> <span class='nx'>error</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Handle results from MyAPI</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>}</span>

  <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>method</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;create&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>
      <span class='k'>return</span> <span class='nx'>MyAPI</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>success</span><span class='p'>,</span> <span class='nx'>error</span><span class='p'>);</span>

    <span class='k'>case</span> <span class='s1'>&#39;update&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>
      <span class='k'>return</span> <span class='nx'>MyAPI</span><span class='p'>.</span><span class='nx'>update</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>success</span><span class='p'>,</span> <span class='nx'>error</span><span class='p'>);</span>

    <span class='k'>case</span> <span class='s1'>&#39;delete&#39;</span><span class='o'>:</span>
      <span class='k'>return</span> <span class='nx'>MyAPI</span><span class='p'>.</span><span class='nx'>destroy</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>success</span><span class='p'>,</span> <span class='nx'>error</span><span class='p'>);</span>

    <span class='k'>case</span> <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>attributes</span><span class='p'>[</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>idAttribute</span><span class='p'>])</span> <span class='p'>{</span>
        <span class='k'>return</span> <span class='nx'>MyAPI</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>success</span><span class='p'>,</span> <span class='nx'>error</span><span class='p'>);</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='k'>return</span> <span class='nx'>MyAPI</span><span class='p'>.</span><span class='nx'>findAll</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>success</span><span class='p'>,</span> <span class='nx'>error</span><span class='p'>);</span>
      <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This pattern delegates API calls to a new object, which could be a Backbone-style class that supports events. This can be safely tested separately, and potentially used with libraries other than Backbone.</p>

<p>There are quite a few sync implementations out there:</p>

<ul>
<li><a href='https://github.com/sorensen/backbone-redis'>Backbone Redis</a></li>

<li><a href='https://github.com/neebz/backbone-parse'>backbone-parse</a></li>

<li><a href='https://github.com/jeromegn/Backbone.localStorage'>Backbone localStorage</a></li>

<li><a href='https://github.com/MarrLiss/backbone-websql'>backbone-websql</a></li>

<li><a href='https://github.com/ggozad/Backbone.cachingSync'>Backbone Caching Sync</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/08/node-roundup">Node Roundup: Node 0.8.6, Axon, NextFlow</a></h2>
      <div class="meta">
        <span class="date">08 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/08/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#async">async</a>
          
            <a href="/tags.html#pubsub">pubsub</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_086'>Node 0.8.6</h3>

<p><a href='http://blog.nodejs.org/2012/08/07/node-v0-8-6-stable/'>Node 0.8.6</a> is out, and this release is the first to include binary distributions for all supported Unix systems.</p>

<p>The 0.6 series has also been updated, with the release of <a href='http://blog.nodejs.org/2012/08/03/node-v0-6-21-maintenance/'>0.6.21</a>. This release fixes a bug in <code>fs.watch</code> that affected Solaris.</p>

<h3 id='axon'>Axon</h3>

<p><a href='https://github.com/visionmedia/axon'>Axon</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/axon'>axon</a>) by TJ Holowaychuk is a zeromq-inspired message-oriented socket library. It uses the push/pull and publish/subscribe patterns, and features a lightweight wire protocol that supports binary messages.</p>

<p>Axon is JavaScript, so it might work well in situations where a messaging system is desired but additional software installation is not. The API is friendly for Node developers, particularly the <code>EmitterSocket</code> object which behaves like Node&#8217;s <code>EventEmitter</code>.</p>

<p>TJ has included information on the protocol and some rough benchmarks.</p>

<h3 id='nextflow'>NextFlow</h3>

<p><a href='https://github.com/jprichardson/node-nextflow'>NextFlow</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/nextflow'>nextflow</a>) by JP Richardson is a control flow library for Node that has a CoffeeScript-friendly API. Rather than using a chainable API or a list of arguments, NextFlow accepts an object:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='nv'>next = </span><span class='nx'>require</span><span class='p'>(</span><span class='s'>&#39;nextflow&#39;</span><span class='p'>)</span>

<span class='nv'>vals = </span><span class='p'>[]</span>
<span class='nv'>x = </span><span class='mi'>0</span>

<span class='nx'>next</span> <span class='nv'>flow =</span>
  <span class='mi'>1</span><span class='o'>:</span> <span class='nf'>-&gt;</span>
    <span class='nx'>vals</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>)</span>
    <span class='nx'>@next</span><span class='p'>()</span>
  <span class='mi'>2</span><span class='o'>:</span> <span class='nf'>-&gt;</span>
    <span class='nx'>vals</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='mi'>2</span><span class='p'>)</span>
    <span class='nv'>x = </span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>random</span><span class='p'>()</span>
    <span class='nx'>@next</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span>
  <span class='mi'>3</span><span class='o'>:</span> <span class='nf'>(num) -&gt;</span>
    <span class='nx'>vals</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>num</span><span class='p'>)</span>
    <span class='nx'>@next</span><span class='p'>()</span>
  <span class='mi'>4</span><span class='o'>:</span> <span class='nf'>-&gt;</span>
    <span class='nx'>vals</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='mi'>4</span><span class='p'>)</span>
    <span class='nx'>@next</span><span class='p'>()</span>
  <span class='mi'>5</span><span class='o'>:</span> <span class='nf'>-&gt;</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span> <span class='nx'>vals</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>]</span> <span class='c1'>#is 1</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span> <span class='nx'>vals</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span> <span class='c1'>#is 2</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span> <span class='nx'>vals</span><span class='p'>[</span><span class='mi'>2</span><span class='p'>]</span> <span class='c1'>#is x</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span> <span class='nx'>vals</span><span class='p'>[</span><span class='mi'>3</span><span class='p'>]</span> <span class='c1'>#is 4</span>
</code></pre>
</div>
<p>The author has included CoffeeScript comparisons with well-known Node control flow libraries.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/07/jquery-roundup">jQuery Roundup: AutobahnJS, Grid Builder, Best Ampersand</a></h2>
      <div class="meta">
        <span class="date">07 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/07/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#WebSocket">WebSocket</a>
          
            <a href="/tags.html#ui">ui</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='autobahnjs'>AutobahnJS</h3>

<p><a href='http://autobahn.ws/js'>AutobahnJS</a> (GitHub: <a href='https://github.com/tavendo/AutobahnJS'>tavendo / AutobahnJS</a>, License: <em>MIT</em>) from Tavendo GmbH is a client library that implements the <a href='http://wamp.ws/'>The WebSocket Application Messaging Protocol (WAMP)</a>. The API is asynchronous and promise-based, so it can use jQuery&#8217;s <code>Deferred</code> object or similar implementations. Publish/Subscribe and RPC are both supported by the library.</p>

<p>The RPC API looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// WAMP server</span>
<span class='kd'>var</span> <span class='nx'>wsuri</span> <span class='o'>=</span> <span class='s1'>&#39;ws://localhost:9000&#39;</span><span class='p'>;</span>
<span class='nx'>ab</span><span class='p'>.</span><span class='nx'>connect</span><span class='p'>(</span><span class='nx'>wsuri</span><span class='p'>,</span>
  <span class='c1'>// WAMP session was established</span>
  <span class='kd'>function</span><span class='p'>(</span><span class='nx'>session</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Asynchronous RPC, returns promise object</span>
    <span class='nx'>session</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='s1'>&#39;http://example.com/simple/calc#add&#39;</span><span class='p'>,</span> <span class='mi'>23</span><span class='p'>,</span> <span class='mi'>7</span><span class='p'>).</span><span class='nx'>then</span><span class='p'>(</span>
      <span class='c1'>// RPC success callback</span>
      <span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;got result:&#39;</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>);</span>
      <span class='p'>},</span>

      <span class='c1'>// RPC error callback</span>
      <span class='kd'>function</span><span class='p'>(</span><span class='nx'>error</span><span class='p'>,</span> <span class='nx'>desc</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;error:&#39;</span><span class='p'>,</span> <span class='nx'>desc</span><span class='p'>);</span>
      <span class='p'>}</span>
    <span class='p'>);</span>
  <span class='p'>},</span>

  <span class='c1'>// WAMP session is gone</span>
  <span class='kd'>function</span><span class='p'>(</span><span class='nx'>code</span><span class='p'>,</span> <span class='nx'>reason</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>reason</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>);</span>
</code></pre>
</div>
<p>The authors have written tutorials for <a href='http://autobahn.ws/js/tutorials/pubsub'>Publish/Subscribe with AutobahnJS</a> and <a href='http://autobahn.ws/js/tutorials/rpc'>RPC</a>.</p>

<h3 id='jquerin_grid_builder'>jQuerin Grid Builder</h3>

<p><a href='http://jquer.in/builder.html'>jQuerin Grid Builder</a> (GitHub: <a href='https://github.com/kanakiyajay/jQuerin-grid-builder'>kanakiyajay / jQuerin-grid-builder</a>, License: <em>MIT/GPL</em>) by Jay Kanakiya is an interactive tool that generates HTML and CSS for grid-based layouts.</p>

<p>Attributes like <code>class</code> and <code>id</code> can be added to cells, and multiple levels of rows and columns can be created once you get the hang of the interface.</p>

<h3 id='best_ampersand'>Best Ampersand</h3>

<p><a href='http://gmurphey.com/2012/07/19/jquery-plugin-best-ampersand.html'>Best Ampersand</a> (GitHub: <a href='https://github.com/gmurphey/jquery.best-ampersand'>gmurphey / jQuery.Best-Ampersand</a>, License: <em>MIT/GPL</em>) by Garrett Murphey is a simple plugin that wraps ampersands in spans so they can be styled <a href='http://simplebits.com/notebook/2008/08/14/ampersands-2/'>with the best available ampersand</a>. Garrett has written this plugin using a TDD approach, and he&#8217;s included unit tests and the build script.</p>

<p>He also sent in <a href='http://gmurphey.com/2012/07/22/jquery-plugin-outbound-analytics.html'>Outbound Analytics</a>, which can help track outbound links with Google Analytics.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/06/js101-loops">JS101: Enumeration</a></h2>
      <div class="meta">
        <span class="date">06 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/06/js101-loops/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
        </span>
      </div>
      <div class="preview">
        <p>In this article we&#8217;ll look at JavaScript&#8217;s enumeration capabilities. This is partly related to scope, so take a look at <a href='http://dailyjs.com/2012/07/23/js101-scope/'>JS101: A Brief Lesson on Scope</a> if you haven&#8217;t read it yet.</p>

<h3 id='correctly_using_forin'>Correctly Using for-in</h3>

<p>The <a href='http://es5.github.com/#x12.6.4'>for-in statement</a> is intended to be used to enumerate over the properties of an object. Inherited properties are included, and to avoid iterating over them <code>hasOwnProperty</code> should be used.</p>

<p>This example demonstrates using for-in, and shows what happens when someone adds a property to a native prototype:</p>
<div class='highlight'><pre><code class='javascript'><span class='nb'>Object</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>bad</span> <span class='o'>=</span> <span class='kc'>undefined</span><span class='p'>;</span>

<span class='kd'>var</span> <span class='nx'>name</span><span class='p'>,</span> <span class='nx'>names</span><span class='p'>;</span>

<span class='nx'>names</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>bill</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>44</span> <span class='p'>}</span>
<span class='p'>,</span> <span class='nx'>bob</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>22</span> <span class='p'>}</span>
<span class='p'>,</span> <span class='nx'>john</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>29</span> <span class='p'>}</span>
<span class='p'>};</span>

<span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>name</span> <span class='k'>in</span> <span class='nx'>names</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>names</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>,</span> <span class='nx'>names</span><span class='p'>[</span><span class='nx'>name</span><span class='p'>].</span><span class='nx'>age</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Inherited:&#39;</span><span class='p'>,</span> <span class='nx'>name</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The output will show the inherited property that we don&#8217;t want. Even though the property has been set to <code>undefined</code>, it still exists and will be present when enumerated over. Some libraries may add properties this way (even though it&#8217;s generally considered bad practice), so it&#8217;s wise to use the following pattern:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>prop</span> <span class='k'>in</span> <span class='nx'>exampleObject</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>exampleObject</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>prop</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='c1'>// Do stuff</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The Underscore.js library uses the same pattern in its <a href='https://github.com/documentcloud/underscore/blob/2eb8d2de5cfd636e46e0a4fb4640f3ff8ff6d7d9/underscore.js#L83-88'>implementation of _.each</a>:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='nx'>obj</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>_</span><span class='p'>.</span><span class='nx'>has</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>,</span> <span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>iterator</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>context</span><span class='p'>,</span> <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>],</span> <span class='nx'>key</span><span class='p'>,</span> <span class='nx'>obj</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>breaker</span><span class='p'>)</span> <span class='k'>return</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='correctly_extending_objects'>Correctly Extending Objects</h3>

<p>In ECMAScript 5, properties have an <code>enumerable</code> attribute. If this is set to fault, then the property won&#8217;t be included in a loop with for-in. There&#8217;s also a method called <code>Object.prototype.propertyIsEnumerable</code>, and methods like <code>Object.keys</code> will respect it.</p>

<p>If I really wanted to add a property to <code>Object</code>, then I could take advantage of this to correctly extend the built-in object:</p>
<div class='highlight'><pre><code class='javascript'><span class='nb'>Object</span><span class='p'>.</span><span class='nx'>defineProperty</span><span class='p'>(</span><span class='nb'>Object</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='s1'>&#39;bad&#39;</span><span class='p'>,</span> <span class='p'>{</span>
   <span class='nx'>value</span><span class='o'>:</span> <span class='kc'>undefined</span>
 <span class='p'>,</span> <span class='nx'>enumerable</span><span class='o'>:</span> <span class='kc'>false</span> <span class='c1'>// This property is not enumerable</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>name</span><span class='p'>,</span> <span class='nx'>names</span><span class='p'>;</span>

<span class='nx'>names</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>bill</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>44</span> <span class='p'>}</span>
<span class='p'>,</span> <span class='nx'>bob</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>22</span> <span class='p'>}</span>
<span class='p'>,</span> <span class='nx'>john</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>29</span> <span class='p'>}</span>
<span class='p'>};</span>

<span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>name</span> <span class='k'>in</span> <span class='nx'>names</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>names</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>,</span> <span class='nx'>names</span><span class='p'>[</span><span class='nx'>name</span><span class='p'>].</span><span class='nx'>age</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Inherited:&#39;</span><span class='p'>,</span> <span class='nx'>name</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Running this example will leave out the <code>bad</code> property.</p>

<p>Notice that this doesn&#8217;t just apply to adding properties to native objects &#8211; you should also take <code>enumerable</code> into account when adding properties to your own objects.</p>

<h3 id='ecmascript_5__methods'>ECMAScript 5 <code>Array.prototype</code> Methods</h3>

<p>ECMAScript 5 introduces some handy methods to <code>Array.prototype</code>:</p>

<ul>
<li><code>forEach(callback)</code>: Run <code>callback</code> over each element</li>

<li><code>filter(callback)</code>: Returns a new array for each item where <code>callback</code> returns <code>true</code></li>

<li><code>map(callback)</code>: Run <code>callback</code> over each element, store the result, then return a new array containing the results</li>

<li><code>some(callback)</code>: If <code>callback</code> returns true, then stop iterating and return <code>true</code></li>
</ul>

<p>There are more methods, including <code>indexOf</code>, <code>lastIndexOf</code>, <code>reduce</code>, and <code>reduceRight</code>. These methods also take a <code>thisArg</code> parameter, which changes the value of <code>this</code> in the callback.</p>

<p>Remember that these are all methods on <code>Array</code>. To use them with an object, one approach is to call <code>Object.keys</code>. The previous example could be rewritten like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>name</span><span class='p'>,</span> <span class='nx'>names</span><span class='p'>;</span>

<span class='nx'>names</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>bill</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>44</span> <span class='p'>}</span>
<span class='p'>,</span> <span class='nx'>bob</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>22</span> <span class='p'>}</span>
<span class='p'>,</span> <span class='nx'>john</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>29</span> <span class='p'>}</span>
<span class='p'>};</span>

<span class='nb'>Object</span><span class='p'>.</span><span class='nx'>keys</span><span class='p'>(</span><span class='nx'>names</span><span class='p'>).</span><span class='nx'>forEach</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='scope'>Scope</h3>

<p>In <a href='http://dailyjs.com/2012/07/23/js101-scope/'>JS101: A Brief Lesson on Scope</a>, I provided an example that showed how creating methods inside loops can cause confusing scope issues. Since <code>forEach</code> uses a callback, we now have a new scope for each iteration:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>example</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>o</span> <span class='o'>=</span> <span class='p'>{};</span>

  <span class='p'>[</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>,</span> <span class='mi'>3</span><span class='p'>].</span><span class='nx'>forEach</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>o</span><span class='p'>[</span><span class='nx'>i</span><span class='p'>]</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>);</span> <span class='p'>};</span>
  <span class='p'>});</span>

  <span class='nx'>o</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>]();</span>
  <span class='nx'>o</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]();</span>
  <span class='nx'>o</span><span class='p'>[</span><span class='mi'>2</span><span class='p'>]();</span>
<span class='p'>}</span>

<span class='nx'>example</span><span class='p'>();</span>
</code></pre>
</div>
<p>This will correctly output <code>0 1 2</code> rather than the <code>3 3 3</code> that was printed with the <code>for</code> example.</p>

<h3 id='performance'>Performance</h3>

<p>If you&#8217;re working with an array of items, a simple <code>for</code> loop will still perform better than <code>forEach</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>length</span> <span class='o'>=</span> <span class='nx'>values</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>,</span> <span class='nx'>i</span><span class='p'>;</span>
<span class='k'>for</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>length</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Do something</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>There are dozens of benchmarks for this on <a href='http://jsperf.com/'>jsPerf</a>, but in general the good old fashioned <code>for</code> loop will beat <code>forEach</code>.</p>

<h3 id='relationship_to_underscorejs'>Relationship to Underscore.js</h3>

<p><a href='http://underscorejs.org/'>Underscore.js</a> and jQuery both include methods that work like <code>forEach</code>. This makes it easier to write code that&#8217;ll work with older browsers.</p>

<p>Underscore works slightly different to <code>forEach</code> because it doesn&#8217;t extend <code>Array.prototype</code>, or any other built-in object. Instead, the array has to be passed as an argument:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>_</span><span class='p'>.</span><span class='nx'>forEach</span><span class='p'>([</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The ECMAScript 5 <code>forEach</code> method will be used if it&#8217;s available, otherwise a <code>for</code> loop will be used instead.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/03/rappid-port-jstesting">rAppid:js, Portastic, jstesting</a></h2>
      <div class="meta">
        <span class="date">03 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/03/rappid-port-jstesting/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#testing">testing</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='rappidjs'>rAppid:js</h3>

<p><a href='http://www.rappidjs.com'>rAppid:js</a> (GitHub: <a href='https://github.com/it-ony/rAppid.js'>it-ony / rAppid.js</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/rAppid.js'>rAppid.js</a>) by Tony Findeisen is a new client-side MVC framework that uses <a href='http://www.rappidjs.com/#/wiki/XAML'>XAML</a> for templates. The way the templates work reminds me of <a href='http://angularjs.org/'>AngularJS</a>, but rather than using custom attributes it uses XML documents.</p>

<p>Data can be <a href='http://www.rappidjs.com/#/wiki/Bindings'>bound</a> between models and views, and can be set up to work bidirectionally. There&#8217;s also a <a href='http://www.rappidjs.com/#/wiki/Bindable'>Bindable</a> class that can be used to allow any object to bind to views. Code is kept modular by using AMD and RequireJS. There&#8217;s also a <code>Datasource</code> class for calling RESTful data services.</p>

<p>The framework itself is tested with Mocha, but I can&#8217;t find anything that specifically addresses testing apps built with the framework. Also, I&#8217;m unsure of the relationship between the Node server that can run rAppid.js apps and generating &#8220;optimised&#8221; builds. The page that&#8217;s meant to show help on <em>Node Rendering</em> seems to redirect to the introduction to the project.</p>

<h3 id='portastic'>Portastic</h3>

<p><a href='https://github.com/cranic/node-portastic'>Portastic</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/portastic'>portastic</a>) by Alan Hoffmeister is a port scanner for Node. It&#8217;s actually very simple &#8211; it uses the <a href='https://npmjs.org/package/async'>async</a> and built-in <code>net</code> modules to check for <code>listening</code> events for each port. It&#8217;s not exactly Nmap, so you won&#8217;t be using it to perform UDP, NULL, or Xmas scans. However, it is lightweight and includes tests written with Vows, so you could always see what else you can get it to do.</p>

<h3 id='jstesting'>jstesting</h3>

<p><a href='https://github.com/blittle/jstesting'>jstesting</a> by Bret Little is a project template for writing client-side tests. It includes Jasmine, RequireJS, jsTestDriver, and PhatomJS, and allows test to be run from a static HTML file or as a server.</p>

<p>This also supports headless testing through PhantomJS, so if you&#8217;re struggling to write tests for your latest client-side MVC project then this might help.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/02/mvstar-4">Backbone.js: Hacker's Guide Part 3</a></h2>
      <div class="meta">
        <span class="date">02 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/02/mvstar-4/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#code-review">code-review</a>
          
        </span>
      </div>
      <div class="preview">
        <p><a href='/2012/07/26/mvstar-3/'>Last week</a> we continued looking at Backbone.js&#8217;s internals, covering collections, and some interesting points about the chainable API design and its relationship to Underscore.js. Before continuing with this week&#8217;s post, here are some interesting articles that are in a similar vein to this series:</p>

<ul>
<li><a href='http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/'>Journey Through The JavaScript MVC Jungle</a> by Addy Osmani</li>

<li><a href='http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/'>Rich JavaScript Applications – the Seven Frameworks</a> by Steven Sanderson</li>
</ul>

<p>I&#8217;ve already mentioned the first on DailyJS, but I thought I&#8217;d mention it again in case you&#8217;re still feeling lost about what exactly MVC frameworks can do.</p>

<p>Meanwhile, I&#8217;m working on a tutorial series based on Backbone with a focus on combining it with a certain popular user interface component framework, <em>and</em> using a non-REST HTTP API. I&#8217;ll release the app itself within the next few weeks.</p>

<h3 id='router_and_history'>Router and History</h3>

<p>The <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L882'>Backbone.Router</a> constructor function is like the other Backbone classes, based around Underscore&#8217;s <code>extend</code> method. Routes are defined with the <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L908'>route</a> method, and it will call <code>_routeToRegExp</code> if the route is a regular expression. This uses <a href='http://underscorejs.org/#isRegExp'>isRegExp</a>, which is one of Underscore&#8217;s handy type checking methods.</p>

<p>You can use Underscore&#8217;s type checking methods in your own projects rather than reinventing them. For example, a lot of projects include a function to check if an argument is an array, but if you&#8217;ve already loaded Underscore then <code>_.isArray</code> can be used instead.</p>

<p>Most of what the router does is delegated to <code>Backbone.History</code>. These two classes work together &#8211; once a set of routes has been defined and instantiated, then <code>Backbone.history.start</code> must be called. Backbone is probably known for supporting hash URLs at this point, but it also supports the <a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html'>HTML5 History API</a>.</p>

<p>The <code>History</code> class is where Backbone has to do a lot of work to get good cross-browser support, and this is particularly apparent in the <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1012'>start</a> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>this</span><span class='p'>.</span><span class='nx'>options</span>          <span class='o'>=</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({},</span> <span class='p'>{</span><span class='nx'>root</span><span class='o'>:</span> <span class='s1'>&#39;/&#39;</span><span class='p'>},</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>options</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='k'>this</span><span class='p'>.</span><span class='nx'>_wantsHashChange</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>hashChange</span> <span class='o'>!==</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='k'>this</span><span class='p'>.</span><span class='nx'>_wantsPushState</span>  <span class='o'>=</span> <span class='o'>!!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>pushState</span><span class='p'>;</span>
<span class='k'>this</span><span class='p'>.</span><span class='nx'>_hasPushState</span>    <span class='o'>=</span> <span class='o'>!!</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>pushState</span> <span class='o'>&amp;&amp;</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>history</span> <span class='o'>&amp;&amp;</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>history</span><span class='p'>.</span><span class='nx'>pushState</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>fragment</span>          <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getFragment</span><span class='p'>();</span>
<span class='kd'>var</span> <span class='nx'>docMode</span>           <span class='o'>=</span> <span class='nb'>document</span><span class='p'>.</span><span class='nx'>documentMode</span><span class='p'>;</span>
<span class='kd'>var</span> <span class='nx'>oldIE</span>             <span class='o'>=</span> <span class='p'>(</span><span class='nx'>isExplorer</span><span class='p'>.</span><span class='nx'>exec</span><span class='p'>(</span><span class='nx'>navigator</span><span class='p'>.</span><span class='nx'>userAgent</span><span class='p'>.</span><span class='nx'>toLowerCase</span><span class='p'>())</span> <span class='o'>&amp;&amp;</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>docMode</span> <span class='o'>||</span> <span class='nx'>docMode</span> <span class='o'>&lt;=</span> <span class='mi'>7</span><span class='p'>));</span>

<span class='k'>if</span> <span class='p'>(</span><span class='nx'>oldIE</span> <span class='o'>&amp;&amp;</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_wantsHashChange</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>iframe</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;&lt;iframe src=&quot;javascript:0&quot; tabindex=&quot;-1&quot; /&gt;&#39;</span><span class='p'>).</span><span class='nx'>hide</span><span class='p'>().</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='s1'>&#39;body&#39;</span><span class='p'>)[</span><span class='mi'>0</span><span class='p'>].</span><span class='nx'>contentWindow</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>navigate</span><span class='p'>(</span><span class='nx'>fragment</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>To use the History API, <code>pushState: true</code> must be supplied as an option, and the browser must support it. Otherwise, hash URLs will be used, or even iframes. Regardless, the <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1081'>checkUrl</a> method will be called by listening to <code>popstate</code>, <code>onhashchange</code>, or by polling with <code>setInterval</code>.</p>

<p>Like other Backbone methods, <code>start</code> also accepts a <code>silent</code> option. Passing <code>silent: true</code> prevents <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1062'>loadUrl from being called</a> when <code>start</code> is run. This is one of those small touches that shows just how consistent Backbone is.</p>

<p>The <code>Backbone.Router</code> class adds routes by calling <code>Backbone.history.route</code>. The <code>Router</code> class wraps the callback supplied by the user, and the <code>History</code> class <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1076'>adds it to an array of handlers</a>. When the URL changes in the browser, the <code>handlers</code> array is searched, and if a match is found then the callback will run. Due to the way the callback is wrapped by <code>Router</code>, it actually <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L916'>triggers an event</a>.</p>

<p>The beauty of this design is these events can be bound to elsewhere, and the <code>navigate</code> method which changes the current URL is a lot easier to implement:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>navigate</span><span class='p'>(</span><span class='s1'>&#39;help/troubleshooting&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>trigger</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>replace</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>});</span>
</code></pre>
</div>
<p>This calls the router&#8217;s <code>navigate</code> method, which subsequently <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1112'>calls the one in History</a>. URLs can either be replaced or added to the <code>history</code> array.</p>

<h3 id='views'>Views</h3>

<p><a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1161'>Backbone.View</a> is a relatively simple class that helps manage view fragments and events. It takes steps to ensure it has a valid DOM element to work with by calling <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1284'>_ensureElement</a>, and includes methods for delegating DOM-related functionality to jQuery-like framework calls in the form of <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1183'>$</a> and <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1210'>make</a>.</p>

<p>The most interesting part of this class is <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1242'>delegateEvents</a>, which loops over the <code>events</code> property and applies the <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1170'>delegateEventSplitter</a> regular expression to the <code>event</code> property&#8217;s keys. This is how Backbone turns things like <code>&#39;click .button.edit&#39;: &#39;openEditDialog&#39;</code> into the usual jQuery syntax. This method is called by the constructor, and a lot of care is taken to correctly <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1264'>unbind events</a> before adding or altering the view&#8217;s main element. You&#8217;ll see a few calls to <code>undelegateEvents</code> throughout the class to manage this.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>I&#8217;ve written Backbone applications without using routers, so it&#8217;s interesting to take a deeper look at it and appreciate just how much effort has gone into making it cross-browser.</p>

<p>Although a lot of people see the <code>Backbone.View</code> class as a simple wrapper, it does handle correctly binding and unbinding events, and ensuring there are valid elements to work with.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/01/node-roundup">Node Roundup: BinaryJS, Advice, Buildify, MaDGe</a></h2>
      <div class="meta">
        <span class="date">01 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/01/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#binary">binary</a>
          
            <a href="/tags.html#websockets">websockets</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='binaryjs'>BinaryJS</h3>

<p><a href='http://binaryjs.com/'>BinaryJS</a> (GitHub: <a href='https://github.com/binaryjs/binaryjs'>binaryjs / binaryjs</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/binaryjs'>binaryjs</a>) by Eric Zhang uses WebSocket to stream binary data. The streams can be bidirectional, and is binary end-to-end. This basically gives browsers something closer to TCP sockets, and allows multimedia data to be streamed.</p>

<p>The client-side portion works with Chrome, Firefox, Internet Explorer 10, and Safari&#8217;s nightly builds. The authors are working on supporting older browsers (presumably through Flash).</p>

<blockquote>
<p>BinaryJS employs <code>BinaryPack</code> a modified version of the MessagePack protocol. The Node.js server uses a modified version of the <code>ws</code> library enhanced to pass through the status of the socket buffer so adherence to Node.js Stream API is possible.</p>
</blockquote>

<h3 id='advice_functional_mixin'>Advice Functional Mixin</h3>

<p><a href='https://github.com/PuerkitoBio/advice'>Advice</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/advice'>advice</a>) by Martin Angers is inspired by <a href='https://gist.github.com/2864853'>Angus Croll&#8217;s</a> functional mixin example. It can be used to modify an object with <code>after</code>, <code>before</code>, and <code>around</code> methods:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>myObj</span> <span class='o'>=</span> <span class='p'>{</span> <span class='nx'>fn</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{}</span> <span class='p'>}</span>
  <span class='p'>,</span> <span class='nx'>withAdvice</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;advice&#39;</span><span class='p'>);</span>

<span class='nx'>withAdvice</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>myObj</span><span class='p'>)</span>
<span class='nx'>myObj</span><span class='p'>.</span><span class='nx'>before</span><span class='p'>(</span><span class='nx'>fn</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// Things that should happen before fn</span>
<span class='p'>});</span>

<span class='c1'>// the &#39;before&#39; method will now run automatically</span>
<span class='nx'>myObj</span><span class='p'>.</span><span class='nx'>fn</span><span class='p'>();</span>
</code></pre>
</div>
<p>The author has kindly included thorough Mocha tests as well.</p>

<h3 id='buildify'>Buildify</h3>

<p><a href='https://github.com/powmedia/buildify'>Buildify</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/buildify'>buildify</a>) by Charles Davison is a build script API:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>buildify</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;buildify&#39;</span><span class='p'>);</span>

<span class='nx'>buildify</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='s1'>&#39;base.js&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>concat</span><span class='p'>([</span><span class='s1'>&#39;part1.js&#39;</span><span class='p'>,</span> <span class='s1'>&#39;part2.js&#39;</span><span class='p'>])</span>
  <span class='p'>.</span><span class='nx'>wrap</span><span class='p'>(</span><span class='s1'>&#39;../lib/template.js&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>version</span><span class='o'>:</span> <span class='s1'>&#39;1.0&#39;</span> <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>save</span><span class='p'>(</span><span class='s1'>&#39;../distribution/output.js&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>uglify</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>save</span><span class='p'>(</span><span class='s1'>&#39;../distribution/output.min.js&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<h3 id='madge'>MaDGe</h3>

<p><a href='https://github.com/pahen/node-madge'>MaDGe</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/madge'>madge</a>) by Patrik Henningsson generates graphs based on CommonJS or AMD dependencies. It can generate various output including text-based lists in the console, and PNGs using <a href='http://www.graphviz.org/'>Graphviz</a>. There are lots of commnad-line options, which can be loaded from a JSON file.</p>

<p>This example shows the result of using MaDGe with Express:</p>

<p><a href='/images/posts/express-madge.png'><img src='/images/posts/express-madge-thumb.png' alt='MaDGe/Express' /></a></p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/07/31/jquery-roundup">jQuery Roundup: Flex, jquery-binddata, jquery.notification</a></h2>
      <div class="meta">
        <span class="date">31 Jul 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/07/31/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#databinding">databinding</a>
          
            <a href="/tags.html#notifications">notifications</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='flex'>Flex</h3>

<p><img src='/images/posts/jquery-flex.png' alt='jQuery Flex' /></p>

<p><a href='http://jsonenglish.com/projects/flex/'>Flex</a> (GitHub: <a href='https://github.com/jasonenglish/jquery-flex'>jasonenglish / jquery-flex</a>, License: <em>MIT</em>) by Jason English displays an animated grid with expanding panels.</p>

<p>The author has based the effect on a design originally implemented with Flash. He was compelled to write the plugin after he found a discussion on Stack Overflow that suggested creating the effect with JavaScript would be impossible.</p>

<h3 id='jquerybinddata'>jquery-binddata</h3>

<p><a href='https://github.com/jdavidw13/jquery-binddata'>jquery-binddata</a> is a new plugin created by &#8220;jdavidw13&#8221; that helps bind form fields to simple JavaScript data models. If you&#8217;re used to working with MVC frameworks and want to carry across some of the related data binding techniques to a smaller jQuery project, then this plugin might do the trick.</p>

<p>The basic usage is to provide the plugin with an object to bind and a form element:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>data</span> <span class='o'>=</span> <span class='p'>{</span> <span class='nx'>field</span><span class='o'>:</span> <span class='s1'>&#39;value&#39;</span> <span class='p'>};</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;form&#39;</span><span class='p'>).</span><span class='nx'>binddata</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>);</span>
</code></pre>
</div>
<p>QUnit tests have been included, and the plugin is currently only about 200 lines long.</p>

<h3 id='jquerynotification'>jquery.notification</h3>

<p><a href='https://github.com/azproduction/jquery.notification'>jquery.notification</a> (License: <em>MIT</em>) by Mikhail Davydov is a wrapper around the WebKit <a href='http://www.chromium.org/developers/design-documents/desktop-notifications/api-specification'>Notifications API</a>. I&#8217;ve seen quite a few of these plugins, but I don&#8217;t think I&#8217;ve actually seen them used effectively in the wild.</p>

<p>If you&#8217;re looking for such a thing, the plugin looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>notification</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>notification</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>isNotificationsAllowed</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>isNotificationsAllowed</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>notification</span><span class='p'>.</span><span class='nx'>show</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/07/30/rivets-backbonemvc-unicode">Rivets.js, BackboneMVC, Unitools, Moog Source</a></h2>
      <div class="meta">
        <span class="date">30 Jul 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/07/30/rivets-backbonemvc-unicode/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#unicode">unicode</a>
          
            <a href="/tags.html#library">library</a>
          
            <a href="/tags.html#audio">audio</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='rivetsjs'>Rivets.js</h3>

<p><a href='http://rivetsjs.com/'>Rivets.js</a> (GitHub: <a href='https://github.com/mikeric/rivets'>mikeric / rivets</a>, License: <em>MIT</em>) by Michael Richards is a data binding library that can be used with frameworks like Backbone.js. It has an <code>adapter</code> option that can be set up to support event-based models. Data formatting is supported, so data types like monetary values or dates can be displayed consistently.</p>

<p>Data attributes are used to describe the data bindings in HTML templates. There are built-in bindings like <code>data-html</code> for <code>innerHTML</code>, but tag attributes are also supported, so to write <code>modelInstance.url</code> to an image&#8217;s <code>src</code> attribute <code>data-src</code> could be used.</p>

<p>Rivets.js embraces a pipe-inspired syntax for certain operations. For example, rendering a collection could automatically sort the results like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='o'>&lt;</span><span class='nx'>ul</span> <span class='nx'>data</span><span class='o'>-</span><span class='nx'>html</span><span class='o'>=</span><span class='s2'>&quot;model.tags | sort | tagList&quot;</span><span class='o'>&gt;&lt;</span><span class='err'>/ul&gt;</span>
</code></pre>
</div>
<h3 id='backbonemvc'>BackboneMVC</h3>

<p><a href='http://chance-an.github.com/backbone-mvc/'>BackboneMVC</a> (GitHub: <a href='https://github.com/chance-an/backbone-mvc'>chance-an / backbone-mvc</a>, License: <em>LGPL</em>) by Changsi An adds a controller to Backbone. Controllers are singletons, which means the same instance will always be returned. I suspect this might fit well if you&#8217;re wrapping classes with AMD and loading them with RequireJS.</p>

<p>Methods on controllers can be executed by <code>Backbone.Router</code>, so it works very much like Rails (the author states the project is inspired by CakePHP). The <code>beforeFilter</code> and <code>afterRender</code> hooks are executed based on a jQuery <code>Deferred</code> object, but <code>false</code> can be returned as well.</p>

<h3 id='unitools'>Unitools</h3>

<p><a href='http://u-n-i.co/de/'>Unitools</a> is a collection of Unicode web-related tools for creating all manner of useful and ludicrous text effects.</p>

<p>It includes the Twitter favourite upside down mapping (&#8221;sɾʎlıɐp ɯoɹɟ ollǝɥ&#8221;), Zalgo, and tools for escaping and working with raw Unicode values.</p>

<h3 id='moog_google_doodle_open_sourced'>Moog Google Doodle Open Sourced</h3>

<p>I noticed the Moog Google Doodle has been released under the Apache 2.0 license here: <a href='http://code.google.com/p/bob-moog-google-doodle/'>bob-moog-google-doodle</a> (<a href='http://news.ycombinator.com/item?id=4311004'>HN discussion</a>). I was coincidentally recently working on some web audio stuff, so it&#8217;s useful to have something like this to refer to.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/07/27/tiddly5-notifier-mvc">TiddlyWiki5, Backbone.Notifier, MVC Jungle</a></h2>
      <div class="meta">
        <span class="date">27 Jul 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/07/27/tiddly5-notifier-mvc/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='tiddlywiki5'>TiddlyWiki5</h3>

<p><a href='http://five.tiddlywiki.com/'>TiddlyWiki5</a> (GitHub: <a href='https://github.com/Jermolene/TiddlyWiki5'>Jermolene / TiddlyWiki5</a>, npm: <a href='http://npmjs.org/package/tiddlywiki'>tiddlywikigithub</a>) by Jeremy Ruston is a reboot of the venerable <a href='http://tiddlywiki.com/'>TiddlyWiki</a>. As reboots go I&#8217;d say this was more along the lines of <em>Batman Begins</em> than <em>The Amazing Spider-Man</em>. It can run entirely in a browser, or as a Node application.</p>

<blockquote>
<p>TiddlyWiki is designed to fit around your brain, giving you a better way of managing data compared to traditional documents and emails. The fundamental idea is that information is more useful and reusable if we cut it up into the smallest semantically meaningful chunks.</p>
</blockquote>

<p>The project is currently tentatively released as an alpha, and you can keep track of future updates on the <a href='http://groups.google.com/group/TiddlyWikiDev'>TiddlyWikiDev Google Group</a> and <a href='http://twitter.com/TiddlyWiki'>@TiddlyWiki</a> on Twitter.</p>

<h3 id='backbonenotifier'>Backbone.Notifier</h3>

<p><a href='http://backbone-notifier.e-w.co.il/'>Backbone.Notifier</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/ewebdev/backbone.notifier/'>ewebdev / backbone.notifier</a>) by Eyal Weiss is a notification library designed to work with Backbone.js. Features include dialogs, modal display, and CSS3-based effects.</p>

<p>The <code>Backbone.Notifier</code> class works like the other Backbone classes:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>notifier</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Notifier</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>);</span>
<span class='nx'>nofitier</span><span class='p'>.</span><span class='nx'>notity</span><span class='p'>(</span><span class='s1'>&#39;What did one snowman say to the other snowman?&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Instances of <code>Backbone.Notifier</code> can be chained, and the class is event-based, which means it&#8217;s quite easy to create wizards by chaining together multiple dialogs.</p>

<h3 id='journey_through_the_javascript_mvc_jungle'>Journey Through The JavaScript MVC Jungle</h3>

<p><a href='http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/'>Journey Through The JavaScript MVC Jungle</a> is a detailed article by Addy Osmani that introduces MVC frameworks and his TodoMVC collection of demos. There are also some handy descriptions of when to use each framework:</p>

<blockquote>
<p>Use KnockoutJS: I want something that will help me build simple Web applications and websites. I don&#8217;t expect there to be a great deal of code involved and so code organisation won&#8217;t be much of a concern.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/07/26/mvstar-3">Backbone.js: Hacker's Guide Part 2</a></h2>
      <div class="meta">
        <span class="date">26 Jul 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/07/26/mvstar-3/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#code-review">code-review</a>
          
        </span>
      </div>
      <div class="preview">
        <p><a href='/2012/07/19/mvstar-2/'>Last week</a> we looked at Backbone.js&#8217;s internals, covering configuration, server support, events, and models. I actually really enjoy looking at projects this way, it&#8217;s one of the best ways to learn new programming techniques. So let&#8217;s continue dissecting Backbone by taking a look at <code>Backbone.Collection</code>.</p>

<h3 id='constructor'>Constructor</h3>

<p><a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L549'>Backbone.Collection</a> is a constructor function that accepts an array of models and an options object.</p>

<p>As an aside, notice that <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L558'>void 0</a> is used in this code. To understand why, recall that <a href='https://developer.mozilla.org/en/JavaScript/Reference/Operators/void'>the void operator</a> returns <code>undefined</code>. Since ECMAScript 5, the <code>undefined</code> property isn&#8217;t writable, so it&#8217;s safe to use it. However, in earlier versions it was writable, which meant malicious code could technically take advantage of this fact by assigning a value to the <code>undefined</code> property of the <em>global object</em>. The <code>void</code> operator expects an expression, so <code>void 0</code> is considered the idiomatic way of safely obtaining <code>undefined</code>.</p>

<p>The constructor calls the <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L558'>reset</a> method, which removes existing models and adds new ones. This is similar to instantiating a collection with no models, and then manually calling <code>add</code> on each one.</p>

<h3 id='inheritance_and_mixins'>Inheritance and Mixins</h3>

<p>The <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L565'>Collection class inherits from Backbone.Events</a>. Events are used both publicly and internally. There&#8217;s a <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L577'>toJSON</a> method that iterates over each model and calls the model&#8217;s <code>toJSON</code> method. This brings up an interesting point: collections use methods from Underscore.js, but <code>Collection</code> doesn&#8217;t inherit from Underscore. Why not? Well, <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L863-875'>certain methods are manually assigned to Collection.prototype</a>, while others are rewritten in ways that make sense in Backbone. For example, the <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L748'>pluck</a> method works on model attributes, and <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L734'>sort</a> uses the <code>boundComparator</code> which has a slightly different API to <code>Array.prototype.sort</code>.</p>

<h3 id='adding_and_removing_items'>Adding and Removing Items</h3>

<p>Collections are basically an array of models with events, wrapped with convenient Underscore-like iterator methods. The <code>add</code> method is always called however models are added, which means it&#8217;s a good place to do housekeeping like <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L595-612'>preventing invalid models and duplicates</a> from being inserted into the collection. Models are also <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L616-620'>indexed by id</a>, and all model events are bound to <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L851'>_onModelEvent</a>. This method dynamically adds new models, removes deleted ones, and updates models with changes.</p>

<p>If the collection requires sorting, the <code>add</code> method will <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L636'>call sort</a> once all models have been processed. And, if the <code>silent</code> option isn&#8217;t set, an <code>add</code> event will be triggered for each model that was successfully added.</p>

<p>It naturally follows that the <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L650'>remove</a> method has a fair amount of work to do, given the complexity of <code>add</code>. The indexed ids must be deleted, and <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L842'>_removeReference</a> is called to remove the model&#8217;s reference back to the collection.</p>

<p>Deleting items in JavaScript is interesting, because we actually have the <code>delete</code> keyword to do this for us. However, <code>delete</code> is only used for properties, so the authors have used the <code>Array.prototype.splice</code> technique to delete models from the array. The <code>add</code> and <code>remove</code> methods also update the <code>length</code> property, which allows the collection to behave in an Array-like manner, and helps support the mixed-in Underscore methods.</p>

<p>Now take a look at the simplicity of the <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L721'>where</a> method. It basically loops over each model, comparing an attributes object. This is simple because the <code>filter</code> method is taken directly from Underscore.</p>

<h3 id='chainable_api'>Chainable API</h3>

<p>Another bit of sugar is the support for Underscore&#8217;s <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L816'>chain</a> method. This works by calling the original method with the current array of models and returning the result. In case you haven&#8217;t seen it before, the chainable API looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>collection</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>([</span>
  <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Tim&#39;</span><span class='p'>,</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>5</span> <span class='p'>},</span>
  <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Ida&#39;</span><span class='p'>,</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>26</span> <span class='p'>},</span>
  <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Rob&#39;</span><span class='p'>,</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>55</span> <span class='p'>}</span>
<span class='p'>]);</span>

<span class='nx'>collection</span><span class='p'>.</span><span class='nx'>chain</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>filter</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>item</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;age&#39;</span><span class='p'>)</span> <span class='o'>&gt;</span> <span class='mi'>10</span><span class='p'>;</span> <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>map</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>item</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;name&#39;</span><span class='p'>);</span> <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>value</span><span class='p'>();</span>

<span class='c1'>// Will return [&#39;Ida&#39;, &#39;Rob&#39;]</span>
</code></pre>
</div>
<p>Some of the Backbone-specific method will return <code>this</code>, which means they can be chained as well:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>collection</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>();</span>

<span class='nx'>collection</span>
    <span class='p'>.</span><span class='nx'>add</span><span class='p'>({</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;John&#39;</span><span class='p'>,</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>23</span> <span class='p'>})</span>
    <span class='p'>.</span><span class='nx'>add</span><span class='p'>({</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Harry&#39;</span><span class='p'>,</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>33</span> <span class='p'>})</span>
    <span class='p'>.</span><span class='nx'>add</span><span class='p'>({</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Steve&#39;</span><span class='p'>,</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>41</span> <span class='p'>});</span>

<span class='nx'>collection</span><span class='p'>.</span><span class='nx'>pluck</span><span class='p'>(</span><span class='s1'>&#39;name&#39;</span><span class='p'>);</span>
<span class='c1'>// [&#39;John&#39;, &#39;Harry&#39;, &#39;Steve&#39;]</span>
</code></pre>
</div>
<h3 id='conclusion'>Conclusion</h3>

<p>I&#8217;ve been using Backbone for a while, and I&#8217;ve never really thought about how the <code>Backbone.Collection</code> methods can be chained. Sometimes it&#8217;s difficult to tell what&#8217;s possible though &#8211; once you&#8217;re in an Underscore chain you can&#8217;t use methods like <code>pluck</code> because Backbone&#8217;s models use the <code>get</code> method to access attributes, so you&#8217;ll end up with an array of <code>undefined</code> values.</p>

<p>Next week I&#8217;ll continue looking at Backbone by investing the formidable routing and history APIs.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page25">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <strong>26</strong>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page27">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

