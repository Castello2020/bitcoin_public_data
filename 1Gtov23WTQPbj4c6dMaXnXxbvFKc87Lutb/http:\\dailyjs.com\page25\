http://dailyjs.com/page25/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 23:49:25 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "e9375-2ff75-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 42624
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/19/node-roundup">Node Roundup: mongo-lite, smog, sshfs-node</a></h2>
      <div class="meta">
        <span class="date">19 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/19/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#filesystem">filesystem</a>
          
            <a href="/tags.html#mongo">mongo</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='mongolite'>mongo-lite</h3>

<p><a href='http://alexeypetrushin.github.com/mongo-lite/docs/index.html'>mongo-lite</a> (GitHub: <a href='https://github.com/alexeypetrushin/mongo-lite'>alexeypetrushin / mongo-lite</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mongo-lite'>mongo-lite</a>) by Alexey Petrushin aims to simplify MongoDB by removing the need for most callbacks, adding reasonable defaults like safe updates, and offering optional compact IDs.</p>

<p>The chainable API looks more like MongoDB&#8217;s command-line interface:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>db</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;mongo-lite&#39;</span><span class='p'>).</span><span class='nx'>connect</span><span class='p'>(</span><span class='s1'>&#39;mongodb://localhost/test&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;posts&#39;</span><span class='p'>,</span> <span class='s1'>&#39;comments&#39;</span><span class='p'>]);</span>
<span class='nx'>db</span><span class='p'>.</span><span class='nx'>posts</span><span class='p'>.</span><span class='nx'>insert</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;first&#39;</span> <span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>post</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Use post</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>There&#8217;s also a Fiber-based API, so it can be used in a synchronous fashion.</p>

<h3 id='smog'>smog</h3>

<p><a href='https://github.com/wearefractal/smog'>smog</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/smog'>smog</a>) from Fractal is a web-based MongoDB interface. It displays collections, and allows them to be sorted and edited. It also supports administration features, like shutting down servers, CPU/bandwidth usage graphs, and replica set management.</p>

<p>It&#8217;s built with Connect, and there&#8217;s an experimental GTK+ desktop interface made with the <a href='https://npmjs.org/package/pane'>pane</a> module by the same authors.</p>

<h3 id='sshfsnode'>sshfs-node</h3>

<p><a href='https://github.com/cbou/sshfs-node'>sshfs-node</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/sshfs-node'>sshfs-node</a>) by Charles Bourasseau allows remote filesystems to be mounted using SSH. It uses <a href='http://fuse.sourceforge.net/sshfs.html'>sshfs</a> and requires keys for authentication, rather than passwords.</p>

<p>It comes with Vows tests, and the same author has also released <a href='https://github.com/cbou/fs2http'>fs2http</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/18/jquery-roundup">jQuery Roundup: equalize.js, jQuery Builder, Gridster.js</a></h2>
      <div class="meta">
        <span class="date">18 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/18/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#design">design</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#layout">layout</a>
          
            <a href="/tags.html#grid">grid</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='equalizejs'>equalize.js</h3>

<p>This plugin comes from the &#8220;should I just use a table?&#8221; department of design technicalities that we still have to deal with in 2012: <a href='http://tsvensen.github.com/equalize.js/'>equalize.js</a> (GitHub: <a href='https://github.com/tsvensen/equalize.js/'>tsvensen / equalize.js</a>, License: <em>MIT/GPL</em>). Created by Tim Svensen, this plugin resizes elements to match their height or any other dimension supported by <a href='http://api.jquery.com/category/dimensions/'>jQuery Dimensions</a>.</p>

<p>It works by calling a single method on the parent selector:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Height is the default</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#height-example&#39;</span><span class='p'>).</span><span class='nx'>equalize</span><span class='p'>();</span>

<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.parent&#39;</span><span class='p'>).</span><span class='nx'>equalize</span><span class='p'>(</span><span class='s1'>&#39;outerHeight&#39;</span><span class='p'>);</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.parent&#39;</span><span class='p'>).</span><span class='nx'>equalize</span><span class='p'>(</span><span class='s1'>&#39;innerHeight&#39;</span><span class='p'>);</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.parent&#39;</span><span class='p'>).</span><span class='nx'>equalize</span><span class='p'>(</span><span class='s1'>&#39;width&#39;</span><span class='p'>);</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.parent&#39;</span><span class='p'>).</span><span class='nx'>equalize</span><span class='p'>(</span><span class='s1'>&#39;outerWidth&#39;</span><span class='p'>);</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.parent&#39;</span><span class='p'>).</span><span class='nx'>equalize</span><span class='p'>(</span><span class='s1'>&#39;innerWidth&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>The documentation has full examples.</p>

<h3 id='jquery_builder'>jQuery Builder</h3>

<p><a href='http://projects.jga.me/jquery-builder/'>jQuery Builder</a> (GitHub: <a href='https://github.com/jgallen23/jquery-builder'>jgallen23 / jquery-builder</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/jquery-builder'>jquery-builder</a>) by Greg Allen is a web-based tool for building a custom version of jQuery 1.8.1. As jQuery has evolved it&#8217;s got a lot easier to include only the components necessary for a given project. This particular solution has been made using Node, and is installable with npm.</p>

<h3 id='gridsterjs'>Gridster.js</h3>

<p><a href='http://gridster.net/'>Gridster.js</a> (GitHub: <a href='https://github.com/ducksboard/gridster.js'>ducksboard / gridster.js</a>, License: <em>MIT</em>) from <a href='http://ducksboard.com/'>Ducksboard</a> is a grid plugin that allows layouts to be designed by drag and drop. Elements can span multiple columns, and by dynamically added and removed. Any element can be used because Gridster is based around data attributes.</p>

<p>Gridster is distributed with suitable CSS, and supports IE 9+, Firefox, Chrome, Safari, and Opera.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/17/encapsulation-breaking">Encapsulation Breaking</a></h2>
      <div class="meta">
        <span class="date">17 Sep 2012</span>
        | <span class="author">By Justin Naifeh</span>
        | <span class="comments"><a href="/2012/09/17/encapsulation-breaking/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#encapsulation">encapsulation</a>
          
            <a href="/tags.html#tutorial">tutorial</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Encapsulation is the process by which an object&#8217;s internal components and behavioral details are hidden from calling code. Only that which should be exposed is exposed, making objects self-contained black boxes to the outside world. Many languages support encapsulation by supplying visibility modifiers (e.g., private) and constructs such as inner classes.</p>

<p>Unfortunately, JavaScript offers very little in the encapsulation department. While there are certain tricks that can wrap protected code in closures (see <a href='http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth'>Module Pattern</a>), many have disadvantages that compromise code flexibility and extensibility.</p>

<h3 id='standard_convention'>Standard Convention</h3>

<p>Instead of using closure-based encapsulation, which often makes object-oriented inheritance difficult, many libraries and code-bases opt to mark private properties and functions with an underscore prepend. This convention makes inspecting the properties and functions easy within browser debuggers.</p>
<div class='highlight'><pre><code class='javascript'> 
<span class='kd'>var</span> <span class='nx'>Person</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>first</span><span class='p'>,</span> <span class='nx'>last</span><span class='p'>){</span>
  <span class='c1'>// private properties _first, _last, and _id</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_first</span> <span class='o'>=</span> <span class='nx'>first</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_last</span> <span class='o'>=</span> <span class='nx'>last</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_id</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_generateId</span><span class='p'>();</span>
<span class='p'>};</span>

<span class='nx'>Person</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>getId</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_id</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='nx'>getFirstName</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_first</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='nx'>getLastName</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_last</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='c1'>// private function to generate an id for this object</span>
  <span class='nx'>_generateId</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>new</span> <span class='nb'>Date</span><span class='p'>().</span><span class='nx'>getTime</span><span class='p'>().</span><span class='nx'>toString</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This convention is commonplace, similar to naming constants in uppercase. The downside is that private properties and functions can still be accessed, thus breaking encapsulation because of careless coding.</p>

<h3 id='encapsulation_breaking'>Encapsulation Breaking</h3>

<p>The dynamic nature of JavaScript allows for a free-for-all environment where a developer can do whatever he or she wants. Consider the following:</p>
<div class='highlight'><pre><code class='javascript'> 
<span class='kd'>var</span> <span class='nx'>person</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Person</span><span class='p'>(</span><span class='s2'>&quot;Bob&quot;</span><span class='p'>,</span> <span class='s2'>&quot;Someguy&quot;</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>person</span><span class='p'>.</span><span class='nx'>_first</span><span class='p'>);</span> <span class='c1'>// logs &quot;Bob&quot;</span>
</code></pre>
</div>
<p>This appears all fine and well, but now we&#8217;ve coupled our code to the <code>Person</code> implementation. Any change to the internals &#8211; the category of change encapsulation should protect us against &#8211; could break calling code.</p>
<div class='highlight'><pre><code class='javascript'> 
<span class='kd'>var</span> <span class='nx'>Person</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>first</span><span class='p'>,</span> <span class='nx'>last</span><span class='p'>){</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_firstName</span> <span class='o'>=</span> <span class='nx'>first</span><span class='p'>;</span> <span class='c1'>// property change</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_lastName</span> <span class='o'>=</span> <span class='nx'>last</span><span class='p'>;</span> <span class='c1'>// property change</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_id</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_generateId</span><span class='p'>();</span>
<span class='p'>};</span>

<span class='c1'>// ... </span>
<span class='kd'>var</span> <span class='nx'>person</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Person</span><span class='p'>(</span><span class='s2'>&quot;Bob&quot;</span><span class='p'>,</span> <span class='s2'>&quot;Someguy&quot;</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>person</span><span class='p'>.</span><span class='nx'>_first</span><span class='p'>);</span> <span class='c1'>// logs &quot;undefined&quot;</span>
</code></pre>
</div>
<p>These bugs can be difficult to track, especially since the application code may not have changed&#8230;an updated external library or resource, in which <code>Person</code> may be defined, is all that it takes. The best defense against such couplings is to avoid breaking encapsulation. If a property or method is marked as private, do not access, modify, or invoke it. The overhead in rethinking the architecture and design is almost always less than the cost of dealing with the consequences of breaking encapsulation.</p>

<p>In other words: &#8220;Developers don&#8217;t let developers break encapsulation.&#8221;</p>

<h3 id='method_stealing'>Method Stealing</h3>

<p>As troublesome as accessing private properties can be in JavaScript, there is another much more insidious practice that seems commonly accepted: method stealing.</p>

<p>The methods <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call'>Function.prototype.call</a> and <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply'>Function.protoype.apply</a> are integral to modern libraries and code-bases by allowing a method to inject a custom context (<em>this</em> reference) into the execution scope. Without these capabilities the reliance on closures to achieve the same effect would be too cumbersome.</p>

<p>Just as some properties should be hidden, so too should some methods. Given our prior example, <code>Person.prototype._generateId()</code> might function as an inadequate <a href='https://en.wikipedia.org/wiki/Universally_unique_identifier'>UUID</a> generator. A clever developer notices that another available method <code>Book.prototype._setUUID()</code> sets a <code>this._id</code> property on all Book objects whose value is much more unique across space and time than <code>Person.prototype._generateId();</code></p>
<div class='highlight'><pre><code class='javascript'> 
<span class='kd'>var</span> <span class='nx'>Book</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>author</span><span class='p'>){</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_title</span> <span class='o'>=</span> <span class='nx'>title</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_author</span> <span class='o'>=</span> <span class='nx'>author</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_id</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_setUUID</span><span class='p'>();</span>
<span class='p'>}</span>
<span class='nx'>Book</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>getId</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_id</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='nx'>getTitle</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_title</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='nx'>getAuthor</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_author</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='nx'>_setUUID</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='kd'>var</span> <span class='nx'>result</span> <span class='o'>=</span> <span class='s1'>&#39;&#39;</span><span class='p'>;</span>
    <span class='k'>for</span><span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span><span class='o'>=</span><span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>&lt;</span><span class='mi'>32</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span>
    <span class='p'>{</span>
      <span class='nx'>result</span> <span class='o'>+=</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>floor</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>random</span><span class='p'>()</span><span class='o'>*</span><span class='mi'>16</span><span class='p'>).</span><span class='nx'>toString</span><span class='p'>(</span><span class='mi'>16</span><span class='p'>);</span>
    <span class='p'>}</span> 
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>_id</span> <span class='o'>=</span> <span class='nx'>result</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>In return, the developer has chosen to &#8220;steal&#8221; this behavior from <code>Book</code> for <code>Person</code> and modify <code>Person.prototype._generateId()</code> to invoke <code>Book.prototype._setUUID()</code>.</p>
<div class='highlight'><pre><code class='javascript'> 
<span class='kd'>var</span> <span class='nx'>Person</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>first</span><span class='p'>,</span> <span class='nx'>last</span><span class='p'>){</span>
  <span class='c1'>// private properties _first, _last, and _id</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_first</span> <span class='o'>=</span> <span class='nx'>first</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_last</span> <span class='o'>=</span> <span class='nx'>last</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_id</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_generateId</span><span class='p'>();</span>
<span class='p'>};</span>

<span class='nx'>Person</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>getId</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_id</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='nx'>getFirstName</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_first</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='nx'>getLastName</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_last</span><span class='p'>;</span>
  <span class='p'>},</span>
  <span class='c1'>// private function to generate an id for this object</span>
  <span class='nx'>_generateId</span> <span class='o'>:</span> <span class='kd'>function</span><span class='p'>(){</span>
    <span class='c1'>// sets this._id withing _setUUID()</span>
    <span class='nx'>Book</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>_setUUID</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Again this works&#8230;ostensibly so, by having <code>this._id</code> set by <code>Book.prototype._setUUID()</code>. The design is brittle, however, because <code>Book</code>&#8217;s internals can be refactored unbeknownst to <code>Person</code>, thus breaking <code>Person</code> objects. If <code>Book.prototype._setUUID()</code> is refactored to set <code>this._uuid</code> rather than <code>this._id</code> then all <code>Person.prototype.getId()</code> invocations will return <em>undefined</em>. With one myopic decision we broke our application because it was easier to break encapsulation rather than rethink the design.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>There is not much of a conclusion except <strong>do not break encapsulation</strong>. In fact, apply the Golden Rule while coding: <em>treat other code as you wish yours would be treated</em>. Any API deficiencies should be brought to the original author, not hacked apart to make it usable for one use case or instance. The maintenance headache down the road is just not worth it.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/14/functional-programming">Functional Programming in JavaScript</a></h2>
      <div class="meta">
        <span class="date">14 Sep 2012</span>
        | <span class="author">By Nathaniel Smith</span>
        | <span class="comments"><a href="/2012/09/14/functional-programming/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#functional">functional</a>
          
            <a href="/tags.html#tutorial">tutorial</a>
          
        </span>
      </div>
      <div class="preview">
        <p>JavaScript has two parents: Scheme and Self. We can thank Self for all of the object-orientedness of JavaScript and indeed we do in our code and our tutorials. However, Scheme played just as important a role in the language&#8217;s design, and we would do ourselves ill to overlook JavaScript&#8217;s functional heritage.</p>

<p>What exactly does it mean for JavaScript to be functional? &#8220;Functional&#8221; merely describes a collection of traits a given language may or may not have. A language like Haskell has all of them: immutable variables, pattern matching, first class functions, and others. Some languages hardly have any, like C. While JavaScript certainly doesn&#8217;t have immutable variables or pattern matching it does have a strong emphasis on first class functions; mutating, combining, and using these function objects for cleaner and more succinct code is the purpose of this tutorial.</p>

<h3 id='partial_application'>Partial Application</h3>

<p>Partial application is a technique for taking a function <em>f</em> and binding it against one or more arguments to produce a new function <em>g</em> with those arguments applied. We&#8217;ll demonstrate this operation by adding a helper function <em>p</em> to Function&#8217;s prototype.</p>
<div class='highlight'><pre><code class='javascript'><span class='nb'>Function</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>p</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// capture the bound arguments</span>
  <span class='kd'>var</span> <span class='nx'>args</span> <span class='o'>=</span> <span class='nb'>Array</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>);</span>
  <span class='kd'>var</span> <span class='nx'>f</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='c1'>// construct a new function</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='c1'>// prepend argument list with the closed arguments from above</span>
    <span class='kd'>var</span> <span class='nx'>inner_args</span> <span class='o'>=</span> <span class='nb'>Array</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>);</span>
    <span class='k'>return</span> <span class='nx'>f</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>args</span><span class='p'>.</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>inner_args</span><span class='p'>))</span>
  <span class='p'>};</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>plus_two</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>,</span><span class='nx'>y</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>x</span><span class='o'>+</span><span class='nx'>y</span><span class='p'>;</span> <span class='p'>};</span>
<span class='kd'>var</span> <span class='nx'>add_three</span> <span class='o'>=</span> <span class='nx'>plus_two</span><span class='p'>.</span><span class='nx'>p</span><span class='p'>(</span><span class='mi'>3</span><span class='p'>);</span>
<span class='nx'>add_three</span><span class='p'>(</span><span class='mi'>4</span><span class='p'>);</span> <span class='c1'>// 7</span>
</code></pre>
</div>
<h3 id='composition'>Composition</h3>

<p>Composition is an operation that produces a new function <em>z</em> by nesting functions <em>f</em> and <em>g</em>. You can think of it in this way: <em>z(x) == f(g(x))</em>. Let&#8217;s add a helper like we did for partial application.</p>
<div class='highlight'><pre><code class='javascript'><span class='nb'>Function</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>c</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>g</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// preserve f</span>
  <span class='kd'>var</span> <span class='nx'>f</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='c1'>// construct function z</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>args</span> <span class='o'>=</span> <span class='nb'>Array</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>);</span>
    <span class='c1'>// when called, nest g&#39;s return in a call to f</span>
    <span class='k'>return</span> <span class='nx'>f</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>g</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>args</span><span class='p'>));</span>
  <span class='p'>};</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>greet</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>s</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='s1'>&#39;hi, &#39;</span> <span class='o'>+</span> <span class='nx'>s</span><span class='p'>;</span> <span class='p'>};</span>
<span class='kd'>var</span> <span class='nx'>exclaim</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>s</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>s</span> <span class='o'>+</span> <span class='s1'>&#39;!&#39;</span><span class='p'>;</span> <span class='p'>};</span>
<span class='kd'>var</span> <span class='nx'>excited_greeting</span> <span class='o'>=</span> <span class='nx'>greet</span><span class='p'>.</span><span class='nx'>c</span><span class='p'>(</span><span class='nx'>exclaim</span><span class='p'>);</span>
<span class='nx'>excited_greeting</span><span class='p'>(</span><span class='s1'>&#39;Pickman&#39;</span><span class='p'>)</span> <span class='c1'>// hi, Pickman!</span>
</code></pre>
</div>
<h3 id='flipping'>Flipping</h3>

<p>Flipping at first seems like a scary and arbitrary thing to do to a poor Function. However, it is useful when one desires to use partial application to bind arguments other than the first. To perform a flip we take function <em>f</em> which takes parameters <em>(a,b)</em> and construct a function <em>g</em> which takes parameters <em>(b,a)</em>.</p>
<div class='highlight'><pre><code class='javascript'><span class='nb'>Function</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>f</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// preserve f</span>
  <span class='kd'>var</span> <span class='nx'>f</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='c1'>// construct g</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>args</span> <span class='o'>=</span> <span class='nb'>Array</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>);</span>
    <span class='c1'>// flip arguments when called</span>
    <span class='k'>return</span> <span class='nx'>f</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>args</span><span class='p'>.</span><span class='nx'>reverse</span><span class='p'>());</span>
  <span class='p'>};</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>div</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>,</span><span class='nx'>y</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>x</span> <span class='o'>/</span> <span class='nx'>y</span><span class='p'>;</span> <span class='p'>};</span>
<span class='nx'>div</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>)</span> <span class='c1'>// 0.5</span>
<span class='nx'>div</span><span class='p'>.</span><span class='nx'>f</span><span class='p'>()(</span><span class='mi'>1</span><span class='p'>,</span><span class='mi'>2</span><span class='p'>)</span> <span class='c1'>// 2</span>
</code></pre>
</div>
<h3 id='pointfree_style'>Point-Free Style</h3>

<p>Point-free programming is a style of coding that one doesn&#8217;t see much outside of languages like Haskell or OCaml. However, it can help drastically reduce the use of the rather verbose function declaration syntax omnipresent in JavaScript code. Programming in a point-free style is made possible by our helpers above, and we&#8217;ll combine them to illustrate this concept.</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// We&#39;ll start by solving the following problem in a non point-free way.</span>
<span class='c1'>// Produce a function which, given a list, returns the same list with</span>
<span class='c1'>// every number made negative.</span>

<span class='c1'>// First, declare some helpers:</span>
<span class='kd'>var</span> <span class='nx'>negate</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='o'>-</span><span class='mi'>1</span> <span class='o'>*</span> <span class='nx'>x</span><span class='p'>;</span> <span class='p'>};</span>
<span class='kd'>var</span> <span class='nx'>abs</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>abs</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>);</span> <span class='p'>};</span>
<span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>,</span> <span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>a</span><span class='p'>.</span><span class='nx'>map</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>);</span> <span class='p'>};</span>
<span class='kd'>var</span> <span class='nx'>numbers</span> <span class='o'>=</span> <span class='p'>[</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='o'>-</span><span class='mi'>2</span><span class='p'>,</span> <span class='mi'>3</span><span class='p'>,</span> <span class='mi'>4</span><span class='p'>,</span> <span class='o'>-</span><span class='mi'>6</span><span class='p'>]</span>

<span class='kd'>var</span> <span class='nx'>negate_all</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>array</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>map</span><span class='p'>(</span><span class='nx'>array</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>negate</span><span class='p'>(</span><span class='nx'>abs</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>))</span> <span class='p'>};</span>
<span class='nx'>negate_all</span><span class='p'>(</span><span class='nx'>numbers</span><span class='p'>);</span> <span class='c1'>// [-1, -2, 0, -2, -3, -4, -6]</span>

<span class='c1'>// That solves it; but we can do better:</span>

<span class='kd'>var</span> <span class='nx'>negate_all</span> <span class='o'>=</span> <span class='nx'>map</span><span class='p'>.</span><span class='nx'>f</span><span class='p'>().</span><span class='nx'>p</span><span class='p'>(</span><span class='nx'>negate</span><span class='p'>.</span><span class='nx'>c</span><span class='p'>(</span><span class='nx'>abs</span><span class='p'>));</span>
<span class='nx'>negate_all</span><span class='p'>(</span><span class='nx'>numbers</span><span class='p'>);</span> <span class='c1'>// [-1, -2, 0, -2, -3, -4, -6]</span>
</code></pre>
</div>
<p>What did we do here? First, we flipped <code>map</code>&#8217;s signature to be <em>(f,a)</em>; this allows us to then partially apply a function to map and turn it into a function that takes only a single parameter: the array we wish to negate. But what function do we want to bind to our map? The result of <code>negate.c(abs)</code>, which represents a function that does <code>negate(abs(x))</code>. We&#8217;ve produced the same function in the end and solved our problem. In the former attempt, we declare a new function to imperatively do what we wish; in the latter we construct a new function based on functions we already have.</p>

<p>What makes this point-free? Note the redundancy of the <code>array</code> argument in the former declaration. We already have a function that knows how to produce a new array from an existing one; why not convert that function into a new one to do what we want? We cut characters by 37% and, for many, achieve better readability.</p>

<h3 id='conclusions'>Conclusions</h3>

<p>In the end, functional programming is a matter of taste. For some it is a thing of subtle beauty and for others a wild nest of parentheses. This tutorial is a suggestion of styles that might be and is in no way a &#8216;Functional is better&#8217; argument. If this has piqued the reader&#8217;s interest, she or he may be interested in the following resources:</p>

<ul>
<li><a href='http://osteele.com/sources/javascript/functional/'>Oliver Steele&#8217;s Functional library</a>. A library which provides the above operators and much more.</li>

<li><a href='http://learnyouahaskell.com/'>Learn You a Haskell For Great Good</a>. Doubles as a great introduction to functional programming.</li>

<li><a href='http://www.crockford.com/javascript/little.html'>The Little JavaScripter</a>. A take on The Little Schemer by Douglas Crockford.</li>

<li><a href='http://en.wikipedia.org/wiki/Tacit_programming'>Point-free (or Tacit) Programming</a>. From Wikipedia.</li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/13/express-3-csrf-tutorial">Express 3 Tutorial: Contact Forms with CSRF</a></h2>
      <div class="meta">
        <span class="date">13 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/13/express-3-csrf-tutorial/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/sayhello.png' alt='The contact form' /></p>

<p>This tutorial is a hands on, practical introduction to writing Express 3 applications complete with CSRF protection. As a bonus, it should be fairly easy to install on Heroku.</p>

<h3 id='prerequisites'>Prerequisites</h3>

<p>A working Node installation is assumed, and basic knowledge of Node and the command-line.</p>

<h3 id='getting_started'>Getting Started</h3>

<p>Create a new directory, then create a new file called <code>package.json</code> that looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>
  <span class='s2'>&quot;author&quot;</span><span class='o'>:</span> <span class='s2'>&quot;Alex R. Young&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;name&quot;</span><span class='o'>:</span> <span class='s2'>&quot;dailyjs-contact-example&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;version&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.0.1&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;private&quot;</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>,</span> <span class='s2'>&quot;dependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;express&quot;</span><span class='o'>:</span> <span class='s2'>&quot;3.0&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;jade&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.27.2&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;validator&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.4.11&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;sendgrid&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>}</span>
<span class='p'>,</span> <span class='s2'>&quot;devDependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;mocha&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>},</span>
  <span class='s2'>&quot;engines&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;node&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.8.9&quot;</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Express has a built-in app generator, but I want to explain all the gory details. If you want to try it out, try typing <code>express myapp</code> in the terminal.</p>

<p>Back to the <code>package.json</code> file. The author and name can be changed as required. The <code>private</code> flag is set so we don&#8217;t accidentally publish this module to <a href='https://npmjs.org/'>npmjs.org</a>. The dependencies are as follows:</p>

<ul>
<li><code>express</code>: The web framework we&#8217;re using, version 3 has been specified</li>

<li><code>jade</code>: The template language, you could convert this project to <a href='https://npmjs.org/package/ejs'>ejs</a> or something else if desired</li>

<li><code>validator</code>: The <a href='https://github.com/chriso/node-validator'>validator</a> library will be used to validate user input</li>

<li><code>sendgrid</code>: <a href='http://sendgrid.com/'>SendGrid</a> is a commercial email provider that&#8217;s easy to use with Heroku</li>
</ul>

<p>The <code>engines</code> section has been included because it&#8217;s a good idea to be specific about Node versions when deploying to Heroku.</p>

<h3 id='configuration'>Configuration</h3>

<p>Although I typically encourage breaking up Express projects into multiple files, this project will use a single JavaScript file for brevity.</p>

<p>First, the modules are loaded, and an Express app is instantiated. Users of Express 2.x will notice that there is no longer a <code>createServer()</code> method call:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>express</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;express&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>express</span><span class='p'>()</span>
  <span class='p'>,</span> <span class='nx'>SendGrid</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;sendgrid&#39;</span><span class='p'>).</span><span class='nx'>SendGrid</span>
  <span class='p'>,</span> <span class='nx'>Validator</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;validator&#39;</span><span class='p'>).</span><span class='nx'>Validator</span>
  <span class='p'>;</span>
</code></pre>
</div>
<p>The <code>Validator</code> object is just one way to work with the node-validator module. The author has also provided <a href='https://github.com/ctavan/express-validator'>Express middleware</a> for directly validating data in requests. I didn&#8217;t use it here because I was concerned it might not work with Express 3, and I&#8217;m writing to a deadline, but it&#8217;s worth taking a look at it. In general, I like to avoid tying too much code into Express in case I want to migrate to another framework, so that&#8217;s worth considering as well.</p>

<p>The next few lines are application configuration:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;views&#39;</span><span class='p'>,</span> <span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/views&#39;</span><span class='p'>);</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;view engine&#39;</span><span class='p'>,</span> <span class='s1'>&#39;jade&#39;</span><span class='p'>);</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>cookieParser</span><span class='p'>());</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>session</span><span class='p'>({</span> <span class='nx'>secret</span><span class='o'>:</span> <span class='s1'>&#39;secret goes here&#39;</span> <span class='p'>}));</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>bodyParser</span><span class='p'>());</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>router</span><span class='p'>);</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>csrf</span><span class='p'>());</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/public&#39;</span><span class='p'>));</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>When you&#8217;re writing Express configuration, avoid copying and pasting lines from examples without fully understanding what each line does &#8211; it will get you into trouble later! You should understand what every single line does here, because changing the order of <code>app.use</code> lines can impact the way requests are processed and result in frustrating errors.</p>

<p>With that in mind, here&#8217;s what each line does:</p>

<ul>
<li><code>app.set(&#39;views&#39;, __dirname + &#39;/views&#39;)</code>: Use <code>./views</code> as the default path for the client-side templates</li>

<li><code>app.set(&#39;view engine&#39;, &#39;jade&#39;)</code>: Automatically load <code>index.jade</code> files just by passing <code>index</code></li>

<li><code>app.use(express.cookieParser())</code>: Parse the HTTP <code>Cookie</code> header and create an object in <code>req.cookies</code> with properties for each cookie</li>

<li><code>app.use(express.session...</code>: Use a session store &#8211; this is needed for the CSRF middleware</li>

<li><code>app.use(express.bodyParser())</code>: Parse the request body when forms are submitted with <code>application/x-www-form-urlencoded</code> (it also supports <code>application/json</code> and <code>multipart/form-data</code>)</li>

<li><code>app.use(app.router)</code>: Use the actual router provided by Express</li>

<li><code>app.use(express.csrf())</code>: The <a href='http://www.senchalabs.org/connect/csrf.html'>CSRF</a> protection middleware</li>

<li><code>app.use(express.static(__dirname + &#39;/public&#39;))</code>: Serve static files in the <code>./public</code> directory</li>
</ul>

<p>Next follows configuration for development and production environments:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='s1'>&#39;development&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>errorHandler</span><span class='p'>({</span> <span class='nx'>dumpExceptions</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>showStack</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>}));</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>locals</span><span class='p'>.</span><span class='nx'>pretty</span> <span class='o'>=</span> <span class='kc'>true</span><span class='p'>;</span>
  <span class='nx'>sendgrid</span> <span class='o'>=</span> <span class='p'>{</span>
    <span class='nx'>send</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>opts</span><span class='p'>,</span> <span class='nx'>cb</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Email:&#39;</span><span class='p'>,</span> <span class='nx'>opts</span><span class='p'>);</span>
      <span class='nx'>cb</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>,</span> <span class='nx'>opts</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>};</span>
<span class='p'>});</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='s1'>&#39;production&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>errorHandler</span><span class='p'>());</span>
  <span class='nx'>sendgrid</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>SendGrid</span><span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>SENDGRID_USERNAME</span><span class='p'>,</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>SENDGRID_PASSWORD</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>app.locals.pretty = true</code> line causes Jade to render templates with indentation and newlines; otherwise it spits out a single line of HTML. Notice that <code>app.use</code> is being called outside of <code>app.configure</code> &#8211; this is perfectly fine, and <code>app.use</code> can actually be called anywhere. There was some discussion about removing <code>app.configure</code> from Express 3.x, and it isn&#8217;t technically required.</p>

<p>I&#8217;ve made a mock <code>sendgrid</code> object for development mode that just prints out the email and then runs a callback. The production configuration block uses environmental variables (<code>process.env.SENDGRID_USERNAME</code>) to set the SendGrid username and password. It&#8217;s a good idea to use environmental variables for passwords, because it means you can keep them out of your source code repository. Since only specific developers should have access to the deployment environment, then it&#8217;s potentially safer to store variables there. Heroku allows such variables to be set with <code>heroku config:add SENDGRID_USERNAME=example</code>.</p>

<h3 id='helpers'>Helpers</h3>

<p>The next few lines are new to Express 3:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>locals</span><span class='p'>.</span><span class='nx'>errors</span> <span class='o'>=</span> <span class='p'>{};</span>
<span class='nx'>app</span><span class='p'>.</span><span class='nx'>locals</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='p'>{};</span>
</code></pre>
</div>
<p>The <code>app.locals</code> object is passed to all templates, and it&#8217;s how helpers are defined in Express 3 applications. I&#8217;ve used these properties so I can write templates without first checking if these objects exist, else a <code>ReferenceError</code> would be raised.</p>

<h3 id='middleware_callbacks_csrf_protection'>Middleware Callbacks: CSRF Protection</h3>

<p>I&#8217;ve mentioned CSRF but haven&#8217;t fully explained it yet. It stands for &#8220;Cross-Site Request Forgery&#8221;, and is a class of exploits in web applications where an attacker forces another user to execute unwanted actions on a web site. In this case it&#8217;s not particularly useful, but it&#8217;s good practice to guard against CSRF attacks in production web apps. The <a href='https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF'>Open Web Application Security Project has a good article on CSRF</a>), which includes example attacks.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>csrf</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>res</span><span class='p'>.</span><span class='nx'>locals</span><span class='p'>.</span><span class='nx'>token</span> <span class='o'>=</span> <span class='nx'>req</span><span class='p'>.</span><span class='nx'>session</span><span class='p'>.</span><span class='nx'>_csrf</span><span class='p'>;</span>
  <span class='nx'>next</span><span class='p'>();</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The <a href='http://www.senchalabs.org/connect/csrf.html'>Connect CSRF middleware</a> automatically generates the <code>req.session._csrf</code> token, and this function maps it to <code>res.locals.token</code> so it will be available to templates. Any route that needs CSRF protection now just needs to include the middleware callback:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/&#39;</span><span class='p'>,</span> <span class='nx'>csrf</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>res</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>(</span><span class='s1'>&#39;index&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The form in <code>views/index.jade</code> has a hidden input:</p>
<div class='highlight'><pre><code class='text'>form(action=&#39;/contact&#39;, method=&#39;post&#39;)
  input(type=&#39;hidden&#39;, name=&#39;_csrf&#39;, value=token)
</code></pre>
</div>
<p>The <code>token</code> variable is the one set by the middleware callback in <code>res.locals.token</code>.</p>

<h3 id='validating_data'>Validating Data</h3>

<p>The contact form must be validated before an email is sent. Seeing as database storage isn&#8217;t necessary for this project, we can use the <a href='https://github.com/chriso/node-validator'>node-validator</a> module to verify user input. I&#8217;ve put this in a function to abstract it from the corresponding route:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>validate</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>v</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Validator</span><span class='p'>()</span>
    <span class='p'>,</span> <span class='nx'>errors</span> <span class='o'>=</span> <span class='p'>[]</span>
    <span class='p'>;</span>

  <span class='nx'>v</span><span class='p'>.</span><span class='nx'>error</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>msg</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>errors</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>msg</span><span class='p'>);</span>
  <span class='p'>};</span>

  <span class='nx'>v</span><span class='p'>.</span><span class='nx'>check</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>.</span><span class='nx'>name</span><span class='p'>,</span> <span class='s1'>&#39;Please enter your name&#39;</span><span class='p'>).</span><span class='nx'>len</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>100</span><span class='p'>);</span>
  <span class='nx'>v</span><span class='p'>.</span><span class='nx'>check</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>.</span><span class='nx'>email</span><span class='p'>,</span> <span class='s1'>&#39;Please enter a valid email address&#39;</span><span class='p'>).</span><span class='nx'>isEmail</span><span class='p'>();</span>
  <span class='nx'>v</span><span class='p'>.</span><span class='nx'>check</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>.</span><span class='nx'>message</span><span class='p'>,</span> <span class='s1'>&#39;Please enter a valid message&#39;</span><span class='p'>).</span><span class='nx'>len</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>1000</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='nx'>errors</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>An instance of a <code>Validator</code> is created, and I&#8217;ve set a custom error handling function. This error handling function collects the errors into an array, but there are many other solutions supported by node-validator&#8217;s API.</p>

<p>Each message property is checked against a single validation, but several could be chained together.</p>

<p>The <code>validate</code> function itself expects a <code>message</code> object which will come from the posted form later.</p>

<h3 id='sending_email'>Sending Email</h3>

<p>Emails are sent with SendGrid. Again, I&#8217;ve made a function for this to keep it out of the corresponding Express routes:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>sendEmail</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>,</span> <span class='nx'>fn</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>sendgrid</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>({</span>
    <span class='nx'>to</span><span class='o'>:</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>EMAIL_RECIPIENT</span>
  <span class='p'>,</span> <span class='nx'>from</span><span class='o'>:</span> <span class='nx'>message</span><span class='p'>.</span><span class='nx'>email</span>
  <span class='p'>,</span> <span class='nx'>subject</span><span class='o'>:</span> <span class='s1'>&#39;Contact Message&#39;</span>
  <span class='p'>,</span> <span class='nx'>text</span><span class='o'>:</span> <span class='nx'>message</span><span class='p'>.</span><span class='nx'>message</span>
  <span class='p'>},</span> <span class='nx'>fn</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>I&#8217;ve made it accept a callback so the Express route can handle cases where sending the mail fails.</p>

<h3 id='posting_the_form'>Posting the Form</h3>

<p>Here is the Express route that handles the form post:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>post</span><span class='p'>(</span><span class='s1'>&#39;/contact&#39;</span><span class='p'>,</span> <span class='nx'>csrf</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>req</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>.</span><span class='nx'>message</span>
    <span class='p'>,</span> <span class='nx'>errors</span> <span class='o'>=</span> <span class='nx'>validate</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>)</span>
    <span class='p'>,</span> <span class='nx'>locals</span> <span class='o'>=</span> <span class='p'>{}</span>
    <span class='p'>;</span>

  <span class='kd'>function</span> <span class='nx'>render</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>res</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>(</span><span class='s1'>&#39;index&#39;</span><span class='p'>,</span> <span class='nx'>locals</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>errors</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>sendEmail</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>error</span> <span class='o'>=</span> <span class='s1'>&#39;Error sending message&#39;</span><span class='p'>;</span>
        <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>message</span><span class='p'>;</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>notice</span> <span class='o'>=</span> <span class='s1'>&#39;Your message has been sent.&#39;</span><span class='p'>;</span>
      <span class='p'>}</span>
      <span class='nx'>render</span><span class='p'>();</span>
    <span class='p'>});</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>error</span> <span class='o'>=</span> <span class='s1'>&#39;Your message has errors:&#39;</span><span class='p'>;</span>
    <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>errors</span> <span class='o'>=</span> <span class='nx'>errors</span><span class='p'>;</span>
    <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>message</span><span class='p'>;</span>
    <span class='nx'>render</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It uses the <code>csrf</code> middleware callback to generate another token. This is required because the contact form will always be rerendered. The form data can be found in <code>req.body.message</code> &#8211; I&#8217;ve used form variables like <code>message[email]</code>, so these will get translated into a JavaScript object with corresponding properties.</p>

<p>When there are invalid fields, or sending the email fails, the contact form will be rendered again with the original message. To make the form retain the values, the <code>value</code> property of each field must be set:</p>
<div class='highlight'><pre><code class='text'>form(action=&#39;/contact&#39;, method=&#39;post&#39;)
  input(type=&#39;hidden&#39;, name=&#39;_csrf&#39;, value=token)
  .control-group
    label.control-label(for=&#39;message_name&#39;) Your Name
    .controls
      input#message_name.input-xxlarge(type=&#39;text&#39;, placeholder=&#39;Name&#39;, name=&#39;message[name]&#39;, value=message.name)
  .control-group
    label.control-label(for=&#39;message_email&#39;) Email
    .controls
      input#message_email.input-xxlarge(type=&#39;text&#39;, placeholder=&#39;Email&#39;, name=&#39;message[email]&#39;, value=message.email)
  .control-group
    label.control-label(for=&#39;message_message&#39;) Message
    .controls
      textarea#message_message.input-xxlarge(placeholder=&#39;Enter message&#39;, rows=&#39;6&#39;, name=&#39;message[message]&#39;)=message.message
  button.btn(type=&#39;submit&#39;) Send Message
</code></pre>
</div>
<p>This is quite a chunk of Jade, but the extra markup is there because I&#8217;ve used <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a> to style the project.</p>

<p>The <code>locals</code> object I&#8217;ve used gets passed to the <code>res.render</code> message and contains the form data when required.</p>

<h3 id='download'>Download</h3>

<p>The full source is available here: <a href='https://github.com/alexyoung/dailyjs-contact-form-tutorial'>alexyoung / dailyjs-contact-form-tutorial</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/12/node-roundup">Node Roundup: 0.8.9, xmlson, Mubsub, Book on libuv</a></h2>
      <div class="meta">
        <span class="date">12 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/12/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#books">books</a>
          
            <a href="/tags.html#xml">xml</a>
          
            <a href="/tags.html#json">json</a>
          
            <a href="/tags.html#pubsub">pubsub</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_089'>Node 0.8.9</h3>

<p><a href='http://blog.nodejs.org/2012/09/11/node-v0-8-9-stable/'>Node 0.8.9</a> is out, and this looks like a significant release judging by the long changelog. v8, npm, and GYP have all been updated, and there are quite a few platform-specific bug fixes relating to memory.</p>

<h3 id='xmlson'>xmlson</h3>

<p><a href='https://github.com/wearefractal/xmlson'>xmlson</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/xmlson'>xmlson</a>) by the developers at Fractal is a libexpat-based XML/JSON conversion module:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>xmlson</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;xmlson&#39;</span><span class='p'>);</span>

<span class='nx'>xmlson</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>(</span><span class='s1'>&#39;&lt;p&gt;&lt;h1 title=&quot;Details&quot;&gt;Title&lt;/h1&gt;&lt;/p&gt;&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>obj</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Do something with obj</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>.</span><span class='nx'>p</span><span class='p'>.</span><span class='nx'>h1</span><span class='p'>)</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>In the previous example, <code>[ { &#39;@title&#39;: &#39;Details&#39;, text: &#39;Title&#39; } ]</code> will be printed, so attributes are included when converting to JSON. There&#8217;s also a synchronous API. Installing xmlson with npm will compile the necessary dependencies with gyp.</p>

<p>This module is a fairly lightweight wrapper around <a href='https://npmjs.org/package/ltx'>ltx</a>, which is worth checking out.</p>

<h3 id='mubsub'>Mubsub</h3>

<p><a href='https://github.com/scttnlsn/mubsub'>Mubsub</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mubsub'>mubsub</a>) by Scott Nelson is a publish–subscribe implementation that uses MongoDB:</p>

<blockquote>
<p>It utilizes Mongo&#8217;s capped collections and tailable cursors to notify subscribers of inserted documents that match a given query.</p>
</blockquote>

<p>To use it, a channel must be created and then subscribed to. It can work with MongoDB connection URLs, so it&#8217;s fairly easy to drop into an existing MongoDB-based Node project. It comes with Mocha/Sinon.JS tests.</p>

<h3 id='book_an_introduction_to_libuv'>Book: An Introduction to libuv</h3>

<p><a href='http://nikhilm.github.com/uvbook/'>An Introduction to libuv</a> by Nikhil Marathe is a guide to libuv. It covers streams, threads, processes, event loops, and utilities. If you&#8217;re trying to understand what makes Node different, and how its asynchronous and event-based design works, then this is actually a great guide. Try looking at <a href='http://nikhilm.github.com/uvbook/basics.html#event-loops'>Basics of libuv: Event loops</a> as an example.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/11/jquery-roundup">jQuery Roundup: jQuery License Change, FileUploader, Raphaël Tutorial</a></h2>
      <div class="meta">
        <span class="date">11 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/11/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#raphael">raphael</a>
          
            <a href="/tags.html#file">file</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_now_mit_licensed'>jQuery Now MIT Licensed</h3>

<p>jQuery was previously dual licensed under the MIT and GPL. This shouldn&#8217;t technically change anything, because the work could be relicensed under the GPL if required:</p>

<blockquote>
<p>Having just one license option makes things easier for the Foundation to manage and eliminates confusion that existed about the Foundation&#8217;s previous dual-licensing policy. However, this doesn&#8217;t affect your ability to use any of the Foundation&#8217;s projects. You are still free to take a jQuery Foundation project, make changes, and re-license it under the GPL if your situation makes that desirable.</p>
</blockquote>

<p>Contributors are being asked to sign a license agreement to ensure everything published under the jQuery Foundation has the necessary legal background. The license agreement has been modeled on the <a href='http://wiki.civiccommons.org/Contributor_Agreements'>Contributor Agreements</a> for copyright assignment, published by the Civic Commons Community.</p>

<h3 id='fileuploader'>FileUploader</h3>

<p><a href='https://github.com/valums/file-uploader'>FileUploader</a> (License: <em>MIT/GPL2/LGPL2</em>) by Andrew Valums and Ray Nicholus is a <a href='http://dev.w3.org/2006/webapi/FileAPI/'>File API</a> wrapper. It can handle multiple uploads by using XMLHttpRequest, and will fall back to an iframe-based solution in older browsers. The API looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>uploader</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>qq</span><span class='p'>.</span><span class='nx'>FileUploader</span><span class='p'>({</span>
  <span class='c1'>// pass the dom node (ex. $(selector)[0] for jQuery users)</span>
  <span class='nx'>element</span><span class='o'>:</span> <span class='nb'>document</span><span class='p'>.</span><span class='nx'>getElementById</span><span class='p'>(</span><span class='s1'>&#39;file-uploader&#39;</span><span class='p'>),</span>

  <span class='c1'>// path to server-side upload script</span>
  <span class='nx'>action</span><span class='o'>:</span> <span class='s1'>&#39;/server/upload&#39;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It doesn&#8217;t have any external dependencies, and has many advanced features, including drag-and-drop file selection, multiple uploads, and keyboard support.</p>

<h3 id='raphal_tutorial'>Raphaël Tutorial</h3>

<p><a href='http://lynx.io/article/simple-drawing-application-raphaeljs'>Making a Simple Drawing Application using RaphaëlJS</a> is a tutorial by Callum Macrae that uses Raphaël and jQuery to create a simple paint program. It includes a basic introduction to Raphaël, and uses jQuery-based event handling to create the mouse-driven drawing interface.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/10/streams">Mastering Node Streams: Part 1</a></h2>
      <div class="meta">
        <span class="date">10 Sep 2012</span>
        | <span class="author">By Roly Fentanes</span>
        | <span class="comments"><a href="/2012/09/10/streams/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#streams">streams</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Streams are one of the most underused data types in Node. If you&#8217;re deep into Node, you&#8217;ve probably heard this before. But seeing several new modules pop up that are not taking advantage of streams or using them to their full potential, I feel the need to reiterate it.</p>

<p>The common pattern I see in modules which require input is this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>foo</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;foo&#39;</span><span class='p'>);</span>

<span class='nx'>foo</span><span class='p'>(</span><span class='s1'>&#39;/path/to/myfile&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>onResult</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>results</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// do something with results</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>By only having your module&#8217;s entry point be a path to a file, you are limiting the stream they could use on it to a readable file stream that they have no control over.</p>

<p>You might think that it&#8217;s very common for your module to read from a file, but this does not consider the fact that <em>a stream is not only a file stream</em>. A stream could be several things. It could be a parser, HTTP request, or a child process. There are several other possibilities.</p>

<p>Only supporting file paths limits developers &#8211; any other kind of stream will have to be written to the file system and then read later, which is less efficient. One reason for this is the extra memory it takes to store the stream. Secondly, it takes longer to stream the file to disk and then read the data the user needs.</p>

<p>To avoid this, the above <code>foo</code> module&#8217;s API should be written this way</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>(</span><span class='s1'>&#39;/path/to/myfile&#39;</span><span class='p'>);</span>
<span class='nx'>foo</span><span class='p'>(</span><span class='nx'>stream</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>onResult</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>result</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// do something with results</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Now <code>foo</code> can take in any type of stream, including a file stream. This is perhaps too long-winded when a file stream is passed; the <code>fs</code> module has to be required, and then a suitable stream must be created.</p>

<p>The solution is to allow both a stream and a file path as arguments.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>foo</span><span class='p'>(</span><span class='nx'>streamOrPath</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>onResult</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>results</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// ...</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Inside <code>foo</code>, it checks the type of <code>streamOrPath</code>, and will create a stream if needed.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='kd'>function</span> <span class='nx'>foo</span><span class='p'>(</span><span class='nx'>streamOrPath</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>streamOrPath</span> <span class='o'>===</span> <span class='s1'>&#39;string&#39;</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>(</span><span class='nx'>streamOrPath</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>streamOrPath</span><span class='p'>.</span><span class='nx'>pipe</span> <span class='o'>&amp;&amp;</span> <span class='nx'>streamOrPath</span><span class='p'>.</span><span class='nx'>readable</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>streamOrPath</span><span class='p'>;</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='k'>throw</span> <span class='k'>new</span> <span class='nx'>TypeError</span><span class='p'>(</span><span class='s1'>&#39;foo can only be called with a stream or a file path&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='c1'>// do whatever with `stream`</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>There you have it, really simple right? So simple I&#8217;ve created a module just for this common use case, called <a href='https://github.com/fent/node-streamin'>streamin</a>.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>streamin</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;streamin&#39;</span><span class='p'>);</span>

<span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='kd'>function</span> <span class='nx'>foo</span><span class='p'>(</span><span class='nx'>streamOrPath</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>streamin</span><span class='p'>(</span><span class='nx'>streamOrPath</span><span class='p'>);</span>
  
  <span class='c1'>// do whatever with `stream`</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Don&#8217;t be fooled by its name, streamin works with writable streams too.</p>

<p>In the next part, I&#8217;ll show you how modules like <a href='https://github.com/mikeal/request'>request</a> return streams synchronously even when they&#8217;re not immediately available.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/07/color-fs-hexgl">HexGL, one.color, fs.js</a></h2>
      <div class="meta">
        <span class="date">07 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/07/color-fs-hexgl/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#html5">html5</a>
          
            <a href="/tags.html#filesystem">filesystem</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='hexgl'>HexGL</h3>

<p><img src='/images/posts/hexgl.png' alt='HexGL' /></p>

<p><a href='http://hexgl.bkcore.com/'>HexGL</a> is a WebGL-powered racing game similar in style to WipEout, developed by Thibaut Despoulain. It&#8217;s built using three.js, and is a pretty solid and fun game. One aspect that impressed me is there&#8217;s a selector for changing the quality, based on settings tailored for &#8220;Mobile&#8221;, &#8220;Mainstream&#8221;, and &#8220;Ultra&#8221; &#8211; the author suggests that the game should always run at 60fps.</p>

<p>Thibaut is planning on open sourcing the game, <a href='http://bkcore.com/blog/index.html'>and his blog</a> has a feed so you can stay up to date that way or by following <a href='https://twitter.com/BKcore'>@BKcore</a> on Twitter.</p>

<h3 id='onecolor'>one.color</h3>

<p><a href='https://github.com/One-com/one-color'>one.color</a> (License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/onecolor'>onecolor</a>) is a browser and Node colour manipulation library. <a href='https://twitter.com/mrgnrdrck/status/240711414883442688'>Morgan Roderick suggested</a> this library on Twitter after seeing our jQuery Color coverage, and also pointed out that one of the creators has posted a video about it: <a href='http://video.copenhagenjs.dk/video/3712505/peter-mller-one-colorjs'>Peter Müller: One-color.js</a>.</p>

<p>This library has a chainable API, supports alpha channels and colour names, and has Vows tests to back it all up.</p>

<h3 id='fsjs'>fs.js</h3>

<p><a href='https://github.com/OptimalBits/fs.js'>fs.js</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/fs.js'>fs.js</a>) by Manuel Astudillo is a wrapper for the HTML5 File API, based on Node&#8217;s <code>fs</code> module. It&#8217;s got some Mocha unit tests, and supports the use of prefixed file systems:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>sizeInBytes</span> <span class='o'>=</span> <span class='mi'>1024</span> <span class='o'>*</span> <span class='mi'>1024</span>
  <span class='p'>,</span> <span class='nx'>prefix</span> <span class='o'>=</span> <span class='s1'>&#39;filetest&#39;</span><span class='p'>;</span>

<span class='nx'>FSFactory</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>sizeInBytes</span><span class='p'>,</span> <span class='s1'>&#39;testfs&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>fs</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>read</span><span class='p'>(</span><span class='s1'>&#39;foo&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>){</span>
    <span class='c1'>// data contains file contents.</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/06/mvstar-7">AngularJS: About Those Custom Attributes...</a></h2>
      <div class="meta">
        <span class="date">06 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/06/mvstar-7/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#angularjs">angularjs</a>
          
        </span>
      </div>
      <div class="preview">
        <p>The first thing I noticed on the <a href='http://angularjs.org/'>AngularJS homepage</a> was the use of a non-standard attribute, <code>ng-app</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>ng-app</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;div&gt;</span>
    <span class='nt'>&lt;label&gt;</span>Name:<span class='nt'>&lt;/label&gt;</span>
    <span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;text&quot;</span> <span class='na'>ng-model=</span><span class='s'>&quot;yourName&quot;</span> <span class='na'>placeholder=</span><span class='s'>&quot;Enter a name here&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;hr&gt;</span>
    <span class='nt'>&lt;h1&gt;</span>Hello !<span class='nt'>&lt;/h1&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>Suspicious as I am, I wanted to look into this further. Running a more complete HTML5 example through the <a href='http://validator.w3.org/'>w3.org validator</a> shows errors for each <code>ng-</code> attribute:</p>

<ul>
<li>Attribute ng-app not allowed on element div at this point.</li>

<li>Attribute ng-model not allowed on element div at this point.</li>
</ul>

<p>Earlier HTML specifications state that <a href='http://www.w3.org/TR/html401/appendix/notes.html#notes-invalid-docs'>unrecognised attributes should be ignored</a>, so this should be safe enough &#8211; clients will generally ignore the unrecognised attribute and JavaScript can handle it as required by AngularJS.</p>

<p>The AngularJS developers have gone a step further to quell fears of rogue attributes causing unexpected issues: it now transparently supports <code>data-</code> prefixed attributes. That means the previous example could be written with <code>data-ng-app</code> and it would still work. <a href='http://jsfiddle.net/qAgHD/'>I tried it out</a> and found that it even copes with mixed attribute styles.</p>

<h3 id='knockout'>Knockout</h3>

<p>Unlike AngularJS, <a href='http://knockoutjs.com/documentation/observables.html'>Knockout</a> embraced <code>data-</code> attributes <a href='https://github.com/SteveSanderson/knockout/blob/a5428f72be56bee5cec3abf73b922831abc9ba3f/src/binding/bindingAttributeSyntax.js'>from the beginning</a>. The documentation even clarifies the use of <code>data</code> attributes:</p>

<blockquote>
<p>The <code>data-bind</code> attribute isn&#8217;t native to HTML, though it is perfectly OK (it&#8217;s strictly compliant in HTML 5, and causes no problems with HTML 4 even though a validator will point out that it&#8217;s an unrecognized attribute). But since the browser doesn&#8217;t know what it means, you need to activate Knockout to make it take effect.</p>
</blockquote>

<p>Although AngularJS now fully supports this approach, using custom attributes may have hurt early adoption.</p>

<h3 id='directives'>Directives</h3>

<p>The underlying mechanism that AngularJS uses to support multiple attribute prefixes is <a href='http://docs.angularjs.org/guide/directive'>Directives</a>, which according to the documentation turns HTML into a &#8220;declarative domain specific language&#8221;. You may have noticed that AngularJS templates are HTML &#8211; this contrasts with many other frameworks that use a string-based template system. Since templates are HTML, the entire page can be loaded and parsed by the browser. The resulting DOM is traversed by AngularJS&#8217;s compiler to find directives. The resulting set of directives is associated with DOM elements and prioritised. Each directive has a <code>compile</code> method, which can modify the DOM, and generates a <code>link</code> function.</p>

<p>Links are live bindings, and splitting compilation into stages like this means AngularJS can do a certain amount of work before repeatedly rendering sets of elements. The example in the documentation is rendering lots of list elements:</p>

<blockquote>
<p>The result of of the <code>li</code> element compilation is a linking function which contains all of the directives contained in the <code>li</code> element, ready to be attached to a specific clone of the <code>li</code> element.</p>
</blockquote>

<h3 id='conclusion'>Conclusion</h3>

<p>Although AngularJS may have been treated with some trepidation due to the adoption of non-standard HTML attributes, the authors have identified this and it&#8217;s possible to write applications that will validate. The &#8220;declarative domain specific language&#8221; concept is definitely interesting, and the two-stage compilation process has some advantages over other schemes that I&#8217;ve seen.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/05/node-roundup">Node Roundup: redis-stream, DataGen, Cushion</a></h2>
      <div class="meta">
        <span class="date">05 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/05/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#streams">streams</a>
          
            <a href="/tags.html#redis">redis</a>
          
            <a href="/tags.html#couchdb">couchdb</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='redisstream'>redis-stream</h3>

<p><a href='https://github.com/tblobaum/redis-stream'>redis-stream</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/redis-stream'>redis-stream</a>) by Thomas Blobaum is a stream-based wrapper around the <a href='http://redis.io/topics/protocol'>Redis protocol</a>. It&#8217;s actually an extremely lightweight module, but the author has included tests and some interesting examples. The standard Node stream methods work, so data can be piped:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Redis</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;redis-stream&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>client</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Redis</span><span class='p'>(</span><span class='mi'>6379</span><span class='p'>,</span> <span class='nx'>localhost</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>rpop</span> <span class='o'>=</span> <span class='nx'>client</span><span class='p'>.</span><span class='nx'>stream</span><span class='p'>(</span><span class='s1'>&#39;rpop&#39;</span><span class='p'>);</span>

<span class='nx'>rpop</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdout</span><span class='p'>);</span>
<span class='nx'>rpop</span><span class='p'>.</span><span class='nx'>write</span><span class='p'>(</span><span class='s1'>&#39;my-list-key&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>This doesn&#8217;t just apply to <code>rpop</code>, other <a href='http://redis.io/commands'>Redis commands</a> will also work in a similar way.</p>

<h3 id='datagen'>DataGen</h3>

<p><a href='http://blog.cliffano.com/2012/07/08/datagen-generate-large-test-data-files-like-a-boss/'>DataGen</a> (GitHub: <a href='https://github.com/cliffano/datagen'>cliffano / datagen</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/datagen'>datagen</a>) by Cliffano Subagio is a multi-process test data file generator. It can be used to generate files in various formats, including CSV and JSON, based on template files that describe the output. Random numbers, dates, and strings can be generated.</p>

<p>The underlying random data generation is based on the <a href='https://npmjs.org/package/Faker'>Faker</a> library, and Mocha tests are included.</p>

<h3 id='cushion'>Cushion</h3>

<p><a href='http://zoddy.github.com/cushion/'>Cushion</a> (GitHub: <a href='https://github.com/Zoddy/cushion'>Zoddy / cushion</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/cushion'>cushion</a>) by André Kussmann is a CouchDB API. It has Node-friendly asynchronous wrappers around the usual CouchDB API methods, and it also supports low-level requests by calling <code>cushion.request</code>. Fetching documents returns a document object that can be modified and saved like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>doc</span> <span class='o'>=</span> <span class='nx'>db</span><span class='p'>.</span><span class='nb'>document</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>);</span>
<span class='nx'>doc</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nb'>document</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nb'>document</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>({</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Quincy&#39;</span> <span class='p'>});</span>
  <span class='nb'>document</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Designs and users can also be fetched and manipulated.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/04/royal-slider">RoyalSlider: Tutorial and Code Review</a></h2>
      <div class="meta">
        <span class="date">04 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/04/royal-slider/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#sponsored-content">sponsored-content</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='sponsored-content'>
  <p><a href='/sponsored-content.html' class='label'>Sponsored Content</a> This post is about a commercial product that we think will appeal to DailyJS readers.</p>
</div>
<p><img src='/images/posts/royalslider.png' alt='RoyalSlider' /></p>

<p>There are a lot of carousel-style plugins out there, and they all have various strengths and weaknesses. However, <a href='http://dimsemenov.com/plugins/royal-slider/'>RoyalSlider</a> (License: <em>Commercial</em>, CodeCanyon: <a href='http://codecanyon.net/item/royalslider-touchenabled-jquery-image-gallery/461126'>RoyalSlider</a>, Price: $12) by Dmitry Semenov is a responsive, touch-enabled, jQuery image gallery and content slider plugin, and is one of the slickest I&#8217;ve seen. The author has worked hard to ensure it&#8217;s fast and efficient &#8211; it features smart lazy loading, hardware accelerated CSS3 transitions, and a memory management algorithm that ensures only visible slides are in the DOM at any one time.</p>

<p>The plugin is actively maintained, and has seen over a dozen updates since its release in August 2011. It&#8217;s distributed exclusively through <a href='http://codecanyon.net'>CodeCanyon</a>, but Dmitry&#8217;s site also has <a href='http://dimsemenov.com/plugins/royal-slider/documentation/'>documentation</a> and <a href='http://dimsemenov.com/plugins/royal-slider/wordpress/'>details on WordPress integration</a>. Purchasing RoyalSlider gives access to a <a href='http://dimsemenov.com/plugins/royal-slider/templates/'>set of RoyalSlider templates</a> that includes several types of galleries that should slot right in to your projects.</p>

<p>Since the plugin was originally released it has received extremely positive feedback (which is partly why it was chosen for a <em>Featured Content</em> post) &#8211; Dmitry has sold over 4,500 licenses, and it&#8217;s earned a 5 star rating based on 378 reviews.</p>

<h3 id='browser_support'>Browser Support</h3>

<p>RoyalSlider has been tested on IE7+, iOS, Opera Mobile, Android 2.0+, Windows Phone 7+, and BlackBerry OS.</p>

<h3 id='download_and_setup'>Download and Setup</h3>

<p><img src='/images/posts/royalslider-build-tool.png' alt='RoyalSliders build tool' /></p>

<p>RoyalSlider can be downloaded as either a development archive (that contains the original, unminified source), or a customised build can be created using Dmitry&#8217;s web-based build tool (access is granted once a license has been purchased).</p>

<p>To add RoyalSlider to a page, ensure you&#8217;ve included jQuery 1.7 or above, and then include the stylesheet and JavaScript:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;link</span> <span class='na'>rel=</span><span class='s'>&quot;stylesheet&quot;</span> <span class='na'>href=</span><span class='s'>&quot;royalslider/royalslider.css&quot;</span><span class='nt'>&gt;</span>
<span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;royalslider/jquery.royalslider.min.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
</code></pre>
</div>
<p>The plugin expects a container element with the <code>royalSlider</code> class. Each child element will be considered a slider:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;royalSlider rsDefault&quot;</span><span class='nt'>&gt;</span>
  <span class='c'>&lt;!-- simple image slide --&gt;</span>
  <span class='nt'>&lt;img</span> <span class='na'>class=</span><span class='s'>&quot;rsImg&quot;</span> <span class='na'>src=</span><span class='s'>&quot;image.jpg&quot;</span> <span class='na'>alt=</span><span class='s'>&quot;image desc&quot;</span> <span class='nt'>/&gt;</span>

  <span class='c'>&lt;!-- lazy loaded image slide --&gt;</span>
  <span class='nt'>&lt;a</span> <span class='na'>class=</span><span class='s'>&quot;rsImg&quot;</span> <span class='na'>href=</span><span class='s'>&quot;image.jpg&quot;</span><span class='nt'>&gt;</span>image desc<span class='nt'>&lt;/a&gt;</span>

  <span class='c'>&lt;!-- image and content --&gt;</span>
  <span class='nt'>&lt;div&gt;</span>
    <span class='nt'>&lt;img</span> <span class='na'>class=</span><span class='s'>&quot;rsImg&quot;</span> <span class='na'>src=</span><span class='s'>&quot;image.jpg&quot;</span> <span class='na'>data-rsVideo=</span><span class='s'>&quot;https://vimeo.com/44878206&quot;</span> <span class='nt'>/&gt;</span>
    <span class='nt'>&lt;p&gt;</span>Some content after...<span class='nt'>&lt;/p&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>Then all you need to do is run <code>$.fn.royalSlider</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.royalSlider&#39;</span><span class='p'>).</span><span class='nx'>royalSlider</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>At this point options can be provided, and believe me there are <a href='http://dimsemenov.com/plugins/royal-slider/documentation/#options'>a lot of options</a>!</p>

<h3 id='examples'>Examples</h3>

<p><img src='/images/posts/royalslider-template.png' alt='RoyalSlider example' /></p>

<p>The templates distributed alongside RoyalSlider include full examples with JavaScript, CSS, and HTML. The example above is suitable for a gallery, and it includes quite a few interesting features:</p>

<ul>
<li>Scrolling thumbnail navigation</li>

<li>Fullscreen mode</li>

<li>Automatically loads higher quality images in fullscreen mode</li>

<li>Responsive images using media queries</li>

<li>Keyboard arrow navigation</li>
</ul>

<p>To set up a gallery like this, all that&#8217;s required is suitable images and <code>$.fn.royalSlider</code> with the options along these lines:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#gallery-1&#39;</span><span class='p'>).</span><span class='nx'>royalSlider</span><span class='p'>({</span>
  <span class='nx'>fullscreen</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>enabled</span><span class='o'>:</span> <span class='kc'>true</span>
  <span class='p'>,</span> <span class='nx'>nativeFS</span><span class='o'>:</span> <span class='kc'>true</span>
  <span class='p'>}</span>
<span class='p'>,</span> <span class='nx'>controlNavigation</span><span class='o'>:</span> <span class='s1'>&#39;thumbnails&#39;</span>
<span class='p'>,</span> <span class='nx'>autoScaleSlider</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>,</span> <span class='nx'>autoScaleSliderWidth</span><span class='o'>:</span> <span class='mi'>960</span>
<span class='p'>,</span> <span class='nx'>autoScaleSliderHeight</span><span class='o'>:</span> <span class='mi'>850</span>
<span class='p'>,</span> <span class='nx'>loop</span><span class='o'>:</span> <span class='kc'>false</span>
<span class='p'>,</span> <span class='nx'>numImagesToPreload</span><span class='o'>:</span> <span class='mi'>4</span>
<span class='p'>,</span> <span class='nx'>arrowsNavAutoHide</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>,</span> <span class='nx'>arrowsNavHideOnTouch</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>,</span> <span class='nx'>keyboardNavEnabled</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The option names are fairly verbose so it&#8217;s easy to tell what they do, but I&#8217;ll go over the main ones below.</p>

<ul>
<li><code>autoScaleSlider</code>: This automatically updates the slider height based on the width, most of the examples use this option</li>

<li><code>numImagesToPreload</code>: Sets the number of images to load relative to the current image</li>

<li><code>arrowsNavAutoHide</code>: Hide the navigation arrows when the user isn&#8217;t interacting with the plugin</li>
</ul>

<h3 id='mobile_support'>Mobile Support</h3>

<p><img src='/images/posts/royalslider-mobile.png' alt='RoyalSlider running on Android and iOS' /></p>

<p>RoyalSlider includes several ways to support touchscreen devices. Swipe gestures work as expected, and there are a couple of relevant options:</p>

<ul>
<li><code>arrowsNavHideOnTouch</code>: Always hide arrows on touchscreen devices</li>

<li><code>sliderTouch</code>: Allows the slider to work using touch-based gestures</li>
</ul>

<p>There are also events for dealing with gestures, which you can hook into like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>sliderInstance</span><span class='p'>.</span><span class='nx'>ev</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;rsDragStart&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// mouse/touch drag start</span>
<span class='p'>});</span>

<span class='nx'>sliderInstance</span><span class='p'>.</span><span class='nx'>ev</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;rsDragRelease&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// mouse/touch drag end</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I tested the plugin using several examples on iOS and Android 4.1 and was generally impressed by the performance.</p>

<h3 id='code_review'>Code Review</h3>

<p>When I look at jQuery plugins I usually run through the advice found in the <a href='http://docs.jquery.com/Plugins/Authoring'>jQuery Plugin Authoring Guide</a>. I&#8217;d like to only write about plugins that are well-written, and you&#8217;d be surprised how many are not, given that the jQuery team has worked hard to document exactly how to write a plugin. With that in mind, I took a look at RoyalSlider&#8217;s source to see how it stacks up.</p>

<p>RoyalSlider is split up into separate files using a modular approach. That enables the build tool to only include what&#8217;s necessary, so it&#8217;s actually pretty trivial to make a build directly suited to a given project. The code is also consistently formatted, so I strongly recommend downloading the development version just in case you&#8217;ve got questions that aren&#8217;t answered by the documentation &#8211; the code is easy enough to understand for an intermediate jQuery developer.</p>

<p>All of these modules and the main source file are wrapped in closures, so RoyalSlider doesn&#8217;t introduce any messy globals.</p>

<p>Most of the plugin&#8217;s code is based around a standard JavaScript constructor, which also adds to its readability. This made me wonder if the author intends to port it to other JavaScript frameworks, because it seems like large portions of functionality are neatly encapsulated from jQuery&#8217;s API.</p>

<p>In terms of low-level DOM coding and animation performance, it has Paul Irish and Tino Zijdel&#8217;s <code>requestAnimationFrame</code> fixes, and uses CSS vendor prefixing where required.</p>

<h4 id='namespacing'>Namespacing</h4>

<p>RoyalSlider adds these methods and objects to <code>$</code>:</p>

<ul>
<li><code>$.rsProto</code></li>

<li><code>$.rsCSS3Easing</code></li>

<li><code>$.rsModules</code></li>

<li><code>$.fn.royalSlider</code></li>
</ul>

<p>In general plugins should limit how many things they add to <code>$</code>, but I felt like the author has been careful here and only exposed what&#8217;s necessary.</p>

<ul>
<li>Namespaces events and CSS classes, example: <code>keydown.rskb</code></li>

<li>Correctly tracks state using <code>royalSlider</code> <code>.data</code> attribute</li>
</ul>

<h4 id='other_notes'>Other Notes</h4>

<p>Most jQuery plugin authors seem to miss the section on using <code>$.extend</code> to handle options, but I was pleased to see Dmitry has done this. The main jQuery method also returns <code>this</code>, so calls after <code>.royalSlider</code> can be chained as expected.</p>

<h3 id='support_and_community'>Support and Community</h3>

<p>RoyalSlider has its own <a href='http://help.dimsemenov.com/'>Tender-powered support site</a>, and the author also talks to users through his Twitter account: <a href='https://twitter.com/dimsemenov'>@dimsemenov</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/03/webspecter-cerebral-mobify">WebSpecter, cerebral.js, Mobify.js</a></h2>
      <div class="meta">
        <span class="date">03 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/03/webspecter-cerebral-mobify/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='webspecter'>WebSpecter</h3>

<p><a href='https://github.com/jgonera/webspecter'>WebSpecter</a> (License: <em>MIT</em>) by Juliusz Gonera is an acceptance test framework built using PhantomJS. The author&#8217;s examples are written with CoffeeScript, but it can be used with JavaScript as well.</p>

<p>The tests use a BDD-style syntax, based around &#8220;features&#8221; and CSS selectors:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='nx'>feature</span> <span class='s'>&quot;GitHub search&quot;</span><span class='p'>,</span> <span class='nf'>(context, browser, $) -&gt;</span>
  <span class='nx'>before</span> <span class='nf'>(done) -&gt;</span> <span class='nx'>browser</span><span class='p'>.</span><span class='nx'>visit</span> <span class='s'>&#39;https://github.com/search&#39;</span><span class='p'>,</span> <span class='nx'>done</span>

  <span class='nx'>it</span> <span class='s'>&quot;finds WebSpecter&quot;</span><span class='p'>,</span> <span class='nf'>(done) -&gt;</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='s'>&#39;input[name=q]&#39;</span><span class='p'>).</span><span class='nx'>fill</span> <span class='s'>&#39;webspecter&#39;</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='nv'>button: </span><span class='s'>&#39;Search&#39;</span><span class='p'>).</span><span class='nx'>click</span> <span class='nf'>-&gt;</span>
      <span class='nx'>$</span><span class='p'>(</span><span class='nv'>link: </span><span class='s'>&quot;jgonera / webspecter&quot;</span><span class='p'>).</span><span class='nx'>present</span><span class='p'>.</span><span class='nx'>should</span><span class='p'>.</span><span class='nx'>be</span><span class='p'>.</span><span class='nx'>true</span>
      <span class='nx'>done</span><span class='p'>()</span>

  <span class='nx'>it</span> <span class='s'>&quot;looks only for users when asked to&quot;</span><span class='p'>,</span> <span class='nf'>(done) -&gt;</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='s'>&#39;input[name=q]&#39;</span><span class='p'>).</span><span class='nx'>fill</span> <span class='s'>&#39;webspecter&#39;</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='nv'>field: </span><span class='s'>&#39;Search for&#39;</span><span class='p'>).</span><span class='nx'>select</span> <span class='s'>&#39;Users&#39;</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='nv'>button: </span><span class='s'>&#39;Search&#39;</span><span class='p'>).</span><span class='nx'>click</span> <span class='nf'>-&gt;</span>
      <span class='nx'>$</span><span class='p'>(</span><span class='nv'>link: </span><span class='s'>&quot;jgonera / webspecter&quot;</span><span class='p'>).</span><span class='nx'>present</span><span class='p'>.</span><span class='nx'>should</span><span class='p'>.</span><span class='nx'>be</span><span class='p'>.</span><span class='nx'>false</span>
      <span class='nx'>done</span><span class='p'>()</span>
</code></pre>
</div>
<p>The <code>browser</code> object is a wrapper around Phantom&#8217;s <code>WebPage</code>. A <code>$</code> function is also present which is jQuery-like but not implemented using jQuery.</p>

<h3 id='cerebraljs'>cerebral.js</h3>

<p><a href='http://gorillatron.github.com/cerebral/'>cerebral.js</a> (GitHub: <a href='https://github.com/gorillatron/cerebral'>gorillatron / cerebral</a>) by Andre Tangen extends Backbone.js to provide a module system and a publish/subscribe application core. It uses RequireJS for modules and module loading, and modules are restricted to a &#8220;sandbox&#8221; designed to limit the elements the module has access to.</p>

<p>The main motivation behind cerebral.js is to encourage loosely coupled applications. When I&#8217;m working on my own Backbone.js applications I usually adopt a similar approach, so it&#8217;s reassuring to see the same ideas in a framework.</p>

<h3 id='mobifyjs'>Mobify.js</h3>

<p><a href='http://www.mobify.com/mobifyjs/'>Mobify.js</a> (GitHub: <a href='https://github.com/mobify/mobifyjs'>mobify / mobifyjs</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mobify-client'>mobify-client</a>) is a new client-side web framework that aims to make it easier to adapt sites to any device. This includes <a href='http://www.mobify.com/mobifyjs/docs/responsive/'>responsive design</a> techniques, but it can also be backed by a cloud service called <a href='https://cloud.mobify.com/'>Mobify Cloud</a> that includes automatic <a href='http://www.mobify.com/mobifyjs/docs/image-resizing/'>image resizing</a>, JavaScript concatenation, and a CDN. Mobify.js projects are built with Zepto and Dust.js.</p>

<p>The Mobify.js authors have also been building MIT-licensed <a href='http://www.mobify.com/mobifyjs/modules/'>Mobify.js modules</a>, at the moment there&#8217;s a carousel and an accordion.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/31/js13k-simplex-chute-message-queue">js13kGames, simplex-noise.js, Media Chooser, User Message Queue</a></h2>
      <div class="meta">
        <span class="date">31 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/31/js13k-simplex-chute-message-queue/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#competitions">competitions</a>
          
            <a href="/tags.html#services">services</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='js13kgames'>js13kGames</h3>

<p><img src='/images/posts/js13k.png' alt='js13kGames' /></p>

<p><a href='http://js13kgames.com/'>js13kGames</a> is a HTML5 and JavaScript game development competition. It&#8217;s currently open for entries, and the competition will close on the 13th September 2012. The basic rule states that entries must be less than 13 KB, but <a href='http://js13kgames.com/#rules'>please read through all of the rules before entering</a>.</p>

<p>The judges include Michal Budzynski (Firefox OS developer) and Rob Hawkes (Mozilla), and the competition was organised by Andrzej Mazur.</p>

<h3 id='simplexnoisejs'>simplex-noise.js</h3>

<p><a href='https://github.com/jwagner/simplex-noise.js'>simplex-noise.js</a> (npm: <a href='https://npmjs.org/package/simplex-noise'>simplex-noise</a>) by Jonas Wagner is a <a href='http://en.wikipedia.org/wiki/Simplex_noise'>simplex noise</a> implementation, which is often used to generate noise for graphics. The author has posted a <a href='http://jsfiddle.net/UL69K/5/'>plasma demo</a> to jsFiddle.</p>

<h3 id='media_chooser'>Media Chooser</h3>

<p><a href='http://chute.github.com/media-chooser/'>Media Chooser</a> (GitHub: <a href='https://github.com/chute/media-chooser'>chute / media-chooser</a>) from Chute is a client-side library for working with <a href='http://www.getchute.com/'>Chute&#8217;s media API</a>. Files can be uploaded or selected from social networks like Facebook and Instagram. It&#8217;s an extremely simple way of accepting file uploads in a single page application without the traditional server-side requirements.</p>

<h3 id='user_message_queue'>User Message Queue</h3>

<p><a href='https://github.com/rob-murray/ui-message-queue/'>User Message Queue</a> (License: <em>MIT</em>) by <a href='http://robertomurray.co.uk/'>Robert Murray</a> is a FIFO message queue. It allows messages to be pushed to a queue that will be displayed one after another in a suitable container element. It&#8217;s simple and lightweight, so it might work well in combination with a client-side toolkit like Bootstrap.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/30/optimistic-server">Optimistic Server Interactions</a></h2>
      <div class="meta">
        <span class="date">30 Aug 2012</span>
        | <span class="author">By Alex Kessinger</span>
        | <span class="comments"><a href="/2012/08/30/optimistic-server/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mobile">mobile</a>
          
            <a href="/tags.html#async">async</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='box'>
Alex Kessinger is a programmer who lives in the Bay Area. He strives to make websites, cook, and write a little bit better each day. You can find more from Alex at his <a href='http://alexkessinger.net/'>blog</a>, on <a href='http://alpha.app.net/voidfiles'>App.net</a>, and <a href='https://plus.google.com/108319722006237870403/posts'>Google+</a>. 
</div>
<p>At PicPlz we built a hybrid mobile app. We had a native container written for iOS and Android that hosted a web version of our code. PicPlz was the first time I had worked on a fully mobile website. My operating paradigm was that I was building a website for a small screen.</p>

<p>One day, our iOS developer asked me why our follow button didn&#8217;t just react when a user touched it. He pointed out that most iOS apps work that way. It was a glaring reminder that our app was something other than native. I genuinely had never thought about doing it any other way. I was building a web app, and when building web apps there is network IO. For things to be consistent, you need to wait until the network IO has finished. The other engineer persisted though, claiming that it doesn&#8217;t have to work that way.</p>

<p>In order to make it feel more native I wrote the code so that the button would activate and change state immediately. If there was an error, which was infrequent, the button would flip back to inform the user. In the other 99.99% of the time the user would feel as if the interaction happened immediately.</p>

<p>Since implementing these interactions in PicPlz I have found out what they are called: Optimistic server interactions. While it is how things work in most mobile applications, it&#8217;s not how most things work in web applications. Why? Well, we all know exactly what&#8217;s going on when we make a request to a server &#8211; nothing is certain unless a response is received. When we see a spinner or a loading bar we understand, but does a user? Do they understand that your web page is making HTTP requests on their behalf, or are they about to click away from your website because it feels slow?</p>

<p>I am sure you might be worried that this approach feels strange from a user experience point of view. Yes, it&#8217;s weird, but how often will this happen? If your code is <em>that</em> fragile, then you might have a bigger problem.</p>

<h3 id='coding_style'>Coding Style</h3>

<p>There are times when optimistic server interactions are awkward to write. For example, building a chain of such interactions will result in highly indented callbacks.</p>

<p>Despite this, most cases shouldn&#8217;t be more complex than the following pseudo-code example:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;body&#39;</span><span class='p'>).</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;click&#39;</span><span class='p'>,</span> <span class='s1'>&#39;.favorite&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>button</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
  <span class='nx'>button</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
  <span class='nx'>$</span><span class='p'>.</span><span class='nx'>post</span><span class='p'>(</span><span class='s1'>&#39;/follow&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='s1'>&#39;favorite&#39;</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>}).</span><span class='nx'>fail</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='c1'>// flip favorite button to inactive</span>
    <span class='nx'>button</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
    <span class='c1'>// inform user action failed.</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Another criticism is that if this happens too often, users will begin to question whether their actions are actually doing anything. This is a valid concern, but as I said earlier if your code really is failing this often then you probably have larger problems.</p>

<p>To be fair, I haven&#8217;t really tried this on any major piece of code. This is a trick I use mostly for small interactions like <em>follow</em> or <em>favorite</em> buttons. Web apps like Google Docs are clearly using this type of interaction all the time. Still, this technique is slowly working its way into larger interactions. If you do client-side rendering, then you&#8217;re 90% there. You can capture user input and update the interface immediately.</p>

<p>I&#8217;d like to thank <a href='http://www.markstorus.com/'>Mark Storus</a> for providing counter arguments.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/29/node-roundup">Node Roundup: Stream Handbook, Screenshot as a Service, captchagen, Suppose</a></h2>
      <div class="meta">
        <span class="date">29 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/29/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#security">security</a>
          
            <a href="/tags.html#unix">unix</a>
          
            <a href="/tags.html#streams">streams</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='stream_handbook'>Stream Handbook</h3>

<p><a href='https://github.com/substack/stream-handbook'>Stream Handbook</a> by the venerable James Halliday is a guide to streams, a commonly overlooked feature of Node that&#8217;s only just starting to get the attention it deserves.</p>

<p>So far James has written a solid introduction to streams, and he&#8217;s working on adding more detailed coverage based on Node&#8217;s related API methods and objects.</p>

<h3 id='screenshot_as_a_service'>Screenshot as a Service</h3>

<p><a href='http://dotheweb.posterous.com/screenshot-as-a-service-now-in-beta-test-the'>Screenshot as a Service</a> (GitHub: <a href='https://github.com/fzaninotto/screenshot-as-a-service'>fzaninotto / screenshot-as-a-service</a>, License: <em>MIT</em>) by Francois Zaninotto is a fork of <a href='https://github.com/visionmedia/screenshot-app'>TJ Holowaychuk&#8217;s screenshot-app</a>, which is running at <a href='http://screenshot.etf1.fr/usage.html'>screenshot.etf1.fr</a>. Since forking the app, Francois has worked on making it more robust. It can be used synchronously or asynchronously:</p>
<div class='highlight'><pre><code class='text'># Take a screenshot
GET /?url=www.google.com

# Asynchronous call
GET /?url=www.google.com&amp;callback=http://www.myservice.com/screenshot/google
</code></pre>
</div>
<h3 id='captchagen'>captchagen</h3>

<p><img src='/images/posts/captchagen.png' alt='captchagen' /></p>

<p><a href='https://github.com/wearefractal/captchagen'>captchagen</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/captchagen'>captchagen</a>) from the team at Fractal is a CAPTCHA image generator. It can generate both a PNG and the corresponding audio through eSpeak.</p>

<p>Images are generated based on a custom algorithm and the <a href='https://npmjs.org/package/canvas'>Canvas module</a>. Mocha tests have been included.</p>

<h3 id='suppose'>Suppose</h3>

<p><a href='http://procbits.com/2012/08/03/like-unix-expect-automate-command-line-programs-in-node-js-with-suppose/'>Suppose</a> (GitHub: <a href='https://github.com/jprichardson/node-suppose'>jprichardson / node-suppose</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/suppose'>suppose</a>) by JP Richardson is a JavaScript version of Expect (<code>man expect</code>). It has a chainable API, so it&#8217;s easy to create complex expectations with a familiar syntax:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>suppose</span><span class='p'>(</span><span class='s1'>&#39;npm&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;init&#39;</span><span class='p'>])</span>
  <span class='p'>.</span><span class='nx'>debug</span><span class='p'>(</span><span class='nx'>fs</span><span class='p'>.</span><span class='nx'>createWriteStream</span><span class='p'>(</span><span class='s1'>&#39;/tmp/debug.txt&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='sr'>/name\: \([\w|\-]+\)[\s]*/</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;awesome_package\n&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;version: (0.0.0) &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;0.0.1\n&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;description: &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s2'>&quot;It&#39;s an awesome package man!\n&quot;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;entry point: (index.js) &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s2'>&quot;\n&quot;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;test command: &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;npm test\n&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;git repository: &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s2'>&quot;\n&quot;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;keywords: &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;awesome, cool\n&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;author: &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;JP Richardson\n&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;license: (BSD) &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;MIT\n&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;ok? (yes) &#39;</span> <span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;yes\n&#39;</span><span class='p'>)</span>
<span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>){</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>.</span><span class='nx'>message</span><span class='p'>);</span>
<span class='p'>})</span>
<span class='p'>.</span><span class='nx'>end</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>code</span><span class='p'>){</span>
</code></pre>
</div>
<p>The author has included Mocha tests and examples in the readme file.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/28/jquery-roundup">jQuery Roundup: jQuery Color 2.1.0, jQuery UI 1.9 RC, Avgrund Modal</a></h2>
      <div class="meta">
        <span class="date">28 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/28/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
            <a href="/tags.html#effects">effects</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_color_210'>jQuery Color 2.1.0</h3>

<p><a href='http://blog.jquery.com/2012/08/24/jquery-color-2-1-0/'>jQuery Color 2.1.0</a> (GitHub: <a href='https://github.com/jquery/jquery-color/'>jquery / jquery-color</a>, License: <em>MIT</em>) has been released. This plugin includes lots of methods for defining, parsing, and otherwise manipulating and animating colours. Version 2 includes new API methods that allow colours to be created and modified, and this includes support for RGBA and HSLA colours and animations.</p>

<p>Here are some examples of the plugin in use:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// String colour parsing</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>Color</span><span class='p'>(</span><span class='s1'>&#39;#abcdef&#39;</span><span class='p'>);</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>Color</span><span class='p'>(</span><span class='s1'>&#39;rgba(100,200,255,0.5)&#39;</span><span class='p'>);</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>Color</span><span class='p'>(</span><span class='s1'>&#39;aqua&#39;</span><span class='p'>);</span>

<span class='c1'>// RGB</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>Color</span><span class='p'>(</span><span class='mi'>255</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>);</span>

<span class='c1'>// RGBA</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>Color</span><span class='p'>(</span><span class='mi'>255</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mf'>0.8</span><span class='p'>);</span>

<span class='c1'>// Objects work as well</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>Color</span><span class='p'>({</span> <span class='nx'>red</span><span class='o'>:</span> <span class='nx'>red</span><span class='p'>,</span> <span class='nx'>green</span><span class='o'>:</span> <span class='nx'>green</span><span class='p'>,</span> <span class='nx'>blue</span><span class='o'>:</span> <span class='nx'>blue</span><span class='p'>,</span> <span class='nx'>alpha</span><span class='o'>:</span> <span class='nx'>alpha</span> <span class='p'>});</span>

<span class='c1'>// Getters and setters</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>Color</span><span class='p'>(</span><span class='mi'>255</span><span class='p'>,</span> <span class='mi'>100</span><span class='p'>,</span> <span class='mi'>130</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>green</span><span class='p'>(</span><span class='mi'>101</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>green</span><span class='p'>();</span> <span class='c1'>// 101</span>

<span class='c1'>// Conversion</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>Color</span><span class='p'>(</span><span class='mi'>255</span><span class='p'>,</span> <span class='mi'>100</span><span class='p'>,</span> <span class='mi'>130</span><span class='p'>).</span><span class='nx'>toRgbaString</span><span class='p'>();</span> <span class='c1'>// &#39;rgb(255,100,130)&#39;</span>
</code></pre>
</div>
<h3 id='jquery_ui_19_rc'>jQuery UI 1.9 RC</h3>

<p><a href='http://blog.jqueryui.com/2012/08/jquery-ui-1-9-rc/'>jQuery UI 1.9 RC</a> has been released, and updates jQuery to 1.8 and jQuery Color to the 2.0 series. The jQuery UI team are also working on upgrading the project&#8217;s infrastructure:</p>

<blockquote>
<p>We&#8217;re working on a new web site, new download builder, and new documentation site to accompany the new release.</p>
</blockquote>

<h3 id='avgrund_modal'>Avgrund Modal</h3>

<p><img src='/images/posts/avgrund.png' alt='Avgrund' /></p>

<p><a href='http://labs.voronianski.com/jquery.avgrund.js/'>Avgrund Modal</a> (GitHub: <a href='https://github.com/voronianski/jquery.avgrund.js'>voronianski / jquery.avgrund.js</a>, License: <em>MIT</em>) by Dmitri Voronianski is a modal plugin that attempts to create the impression of depth as the modal appears on the page. The main content zooms out as the modal appears &#8211; the overall effect is surprisingly slick. Basic usage is <code>$(selector).avgrund()</code>, but the plugin has lots of options:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;element&#39;</span><span class='p'>).</span><span class='nx'>avgrund</span><span class='p'>({</span>
  <span class='nx'>width</span><span class='o'>:</span> <span class='mi'>380</span>
<span class='p'>,</span> <span class='nx'>height</span><span class='o'>:</span> <span class='mi'>280</span>
<span class='p'>,</span> <span class='nx'>showClose</span><span class='o'>:</span> <span class='kc'>false</span>
<span class='p'>,</span> <span class='nx'>showCloseText</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span>
<span class='p'>,</span> <span class='nx'>holderClass</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span>
<span class='p'>,</span> <span class='nx'>overlayClass</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span>
<span class='p'>,</span> <span class='nx'>enableStackAnimation</span><span class='o'>:</span> <span class='kc'>false</span>
<span class='p'>,</span> <span class='nx'>template</span><span class='o'>:</span> <span class='s1'>&#39;Your content goes here..&#39;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This plugin is based on the <a href='http://lab.hakim.se/avgrund/'>Avgrund concept</a> by <a href='https://twitter.com/hakimel'>Hakim El Hattab</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/27/equality">JS101: Equality</a></h2>
      <div class="meta">
        <span class="date">27 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/27/equality/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
        </span>
      </div>
      <div class="preview">
        <p>There are four equality operators in JavaScript:</p>

<ul>
<li>Equals: <code>==</code></li>

<li>Not equal: <code>!=</code></li>

<li>Strict equal: <code>===</code></li>

<li>Strict not equal: <code>!==</code></li>
</ul>

<p>In <a href='http://www.amazon.co.uk/gp/product/0596517742/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=da0b-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0596517742'>JavaScript: The Good Parts</a>, Douglas Crockford advises against using <code>==</code> and <code>!=</code>:</p>

<blockquote>
<p>My advice is to never use the evil twins. Instead, always use <code>===</code> and <code>!==</code>.</p>
</blockquote>

<p>The result of the equals operator is calculated based on <a href='http://es5.github.com/#x11.9.3'>The Abstract Equality Comparison Algorithm</a>. This can lead to confusing results, and these examples are often cited:</p>
<div class='highlight'><pre><code class='javascript'><span class='s1'>&#39;&#39;</span> <span class='o'>==</span> <span class='s1'>&#39;0&#39;</span>           <span class='c1'>// false</span>
<span class='mi'>0</span> <span class='o'>==</span> <span class='s1'>&#39;&#39;</span>             <span class='c1'>// true</span>
<span class='mi'>0</span> <span class='o'>==</span> <span class='s1'>&#39;0&#39;</span>            <span class='c1'>// true</span>

<span class='kc'>false</span> <span class='o'>==</span> <span class='kc'>undefined</span>  <span class='c1'>// false</span>
<span class='kc'>false</span> <span class='o'>==</span> <span class='kc'>null</span>       <span class='c1'>// false</span>
<span class='kc'>null</span> <span class='o'>==</span> <span class='kc'>undefined</span>   <span class='c1'>// true</span>
</code></pre>
</div>
<p>Fortunately, we can look at the algorithm to better understand these results. The first example is <code>false</code> due to this rule:</p>

<blockquote>
<p>If Type(x) is String, then return <code>true</code> if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions). Otherwise, return <code>false</code>.</p>
</blockquote>

<p>Basically, the sequence of strings is not the same. In the second example, the types are different, so this rule is used:</p>

<blockquote>
<p>If Type(x) is <code>Number</code> and Type(y) is <code>String</code>, return the result of the comparison x == ToNumber(y).</p>
</blockquote>

<p>This is where the behaviour of the <code>==</code> starts to get seriously gnarly: behind the scenes, values and objects are changed to different types. The equality operator always tries to compare <a href='http://dailyjs.com/2012/05/07/js101-object/'>primitive values</a>, whereas the strict equality operator will return <code>false</code> if the two values are not the same type. For reference, the underlying mechanism used by the strict equality operator is documented in the <a href='http://es5.github.com/#x11.9.6'>The Strict Equality Comparison Algorithm</a> section in the ECMAScript Specification.</p>

<h3 id='strict_equality_examples'>Strict Equality Examples</h3>

<p>Using the same example with the strict equality operator shows an arguably more intuitive result:</p>
<div class='highlight'><pre><code class='javascript'><span class='s1'>&#39;&#39;</span> <span class='o'>===</span> <span class='s1'>&#39;0&#39;</span>           <span class='c1'>// false</span>
<span class='mi'>0</span> <span class='o'>===</span> <span class='s1'>&#39;&#39;</span>             <span class='c1'>// false</span>
<span class='mi'>0</span> <span class='o'>===</span> <span class='s1'>&#39;0&#39;</span>            <span class='c1'>// false</span>

<span class='kc'>false</span> <span class='o'>===</span> <span class='kc'>undefined</span>  <span class='c1'>// false</span>
<span class='kc'>false</span> <span class='o'>===</span> <span class='kc'>null</span>       <span class='c1'>// false</span>
<span class='kc'>null</span> <span class='o'>===</span> <span class='kc'>undefined</span>   <span class='c1'>// false</span>
</code></pre>
</div>
<p>Is this <em>really</em> how professional JavaScript developers write code? And if so, does <code>===</code> get used <em>that</em> often? Take a look at <a href='https://github.com/jquery/jquery/blob/05337e78fa68aac3a3d703d7cc59f145f13ea779/src/ajax.js'>ajax.js</a> from jQuery&#8217;s source:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>executeOnly</span> <span class='o'>=</span> <span class='p'>(</span> <span class='nx'>structure</span> <span class='o'>===</span> <span class='nx'>prefilters</span> <span class='p'>);</span>
<span class='k'>if</span> <span class='p'>(</span> <span class='k'>typeof</span> <span class='nx'>selection</span> <span class='o'>===</span> <span class='s2'>&quot;string&quot;</span> <span class='p'>)</span> <span class='p'>{</span>
<span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span> <span class='nx'>params</span> <span class='o'>&amp;&amp;</span> <span class='k'>typeof</span> <span class='nx'>params</span> <span class='o'>===</span> <span class='s2'>&quot;object&quot;</span> <span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>The strict equality operator is used almost everywhere, apart from here:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span> <span class='nx'>s</span><span class='p'>.</span><span class='nx'>crossDomain</span> <span class='o'>==</span> <span class='kc'>null</span> <span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>In this case, both <code>undefined</code> and <code>null</code> will be equal, which is a case where <code>==</code> is often used in preference to the strict equivalent:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span> <span class='nx'>s</span><span class='p'>.</span><span class='nx'>crossDomain</span> <span class='o'>===</span> <span class='kc'>null</span> <span class='o'>||</span> <span class='nx'>s</span><span class='p'>.</span><span class='nx'>crossDomain</span> <span class='o'>===</span> <span class='kc'>undefined</span> <span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<h3 id='assertions'>Assertions</h3>

<p>One place where the difference between equality and strict equality becomes apparent is in JavaScript unit tests. Most assertion libraries include a way to check &#8216;shallow&#8217; equality and &#8216;deep equality&#8217;. In <a href='http://wiki.commonjs.org/wiki/Unit_Testing/1.0'>CommonJS Unit Testing</a>, these are known as <code>assert.equal</code> and <code>assert.deepEqual</code>.</p>

<p>In the case of <code>deepEqual</code>, there&#8217;s specific handling for dates and arrays:</p>

<blockquote>
<p>equivalence is determined by having the same number of owned properties (as verified with <code>Object.prototype.hasOwnProperty.call</code>), the same set of keys (although not necessarily the same order), equivalent values for every corresponding key, and an identical &#8220;prototype&#8221; property</p>
</blockquote>

<h3 id='conclusion'>Conclusion</h3>

<p>To understand how equality and strict equality work in JavaScript, <a href='http://es5.github.com/#x4.3.2'>primitive values</a> and JavaScript&#8217;s implicit type conversion behaviour must be understood. In general, experienced developers advocate using <code>===</code>, and this is good practice for beginners.</p>

<p>In recognising the confusion surrounding these operators, there is a significant amount of documentation on the topic. For example, <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Comparison_Operators'>Comparison Operators</a> in Mozilla&#8217;s JavaScript Reference.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/24/minecraft-osg-broadstreet-bootstrap">Minecraft Character WebGL, OpenSceneGraph, BroadStreet, Bootstrap</a></h2>
      <div class="meta">
        <span class="date">24 Aug 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/08/24/minecraft-osg-broadstreet-bootstrap/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#threejs">threejs</a>
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='minecraft_character_in_webgl'>Minecraft Character in WebGL</h3>

<p><img src='/images/posts/minecraftitems.png' alt='Minecraft Items demo' /></p>

<p>In <a href='http://learningthreejs.com/blog/2012/07/05/minecraft-character-in-webgl/'>Minecraft Character in WebGL</a>, Jerome Etienne demonstrates how to render and animate Minecraft characters using his tQuery library. This was inspired by the <a href='http://djazz.mine.nu/lab/minecraft_items/'>Minecraft Items Chrome Experiment</a>.</p>

<h3 id='openscenegraph'>OpenSceneGraph</h3>

<p><img src='/images/posts/mickeypointcloud.png' alt='Mickey point cloud' /></p>

<p><a href='http://osgjs.org/'>OpenSceneGraph</a> (GitHub: <a href='https://github.com/cedricpinson/osgjs'>cedricpinson / osgjs</a>, License: <em>LGPL</em>) by Cedric Pinson is a WebGL framework based on <a href='http://www.openscenegraph.org/'>OpenSceneGraph</a> &#8211; a 3D API typically used in C++ OpenGL applications. This means it&#8217;s possible for developers experienced with OpenSceneGraph to bring their projects across to a familiar environment that runs in modern browsers thanks to WebGL.</p>

<h3 id='broadstreet'>BroadStreet</h3>

<p><a href='http://darrenhurst.github.com/BroadStreet/'>BroadStreet</a> (GitHub: <a href='https://github.com/DarrenHurst/BroadStreet'>DarrenHurst / BroadStreet</a>, License: <em>MIT</em>) by Darren Hurst is a set of controls for Backbone.js. It includes a list selector, iOS-style toggles and alerts, SVG icons, and labels.</p>

<p>Each control inherits from <code>Backbone.View.extend</code>, so the API looks like a standard Backbone object:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>toggle</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Toggle</span><span class='p'>(</span><span class='s1'>&#39;controls&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>).</span><span class='nx'>render</span><span class='p'>();</span>
<span class='nx'>toggle</span><span class='p'>.</span><span class='nx'>setTitle</span><span class='p'>(</span><span class='s1'>&#39;Example title&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>The author recommends testing the project with a web server to avoid security restrictions caused when running the examples locally.</p>

<h3 id='bootstrap_210'>Bootstrap 2.1.0</h3>

<p><a href='http://blog.getbootstrap.com/2012/08/20/bootstrap-2-1-0-released/'>Bootstrap 2.1.0</a> is out:</p>

<blockquote>
<p>New docs, affix plugin, submenus on dropdowns, block buttons, image styles, fluid grid offsets, new navbar, increased font-size and line-height, 120+ closed bugs, and more. Go get it.</p>
</blockquote>

<p>The <a href='http://twitter.github.com/bootstrap/'>Bootstrap homepage</a> showcases the new features and has a slight redesign. Hopefully it&#8217;ll inspire Bootstrap users to customise their projects a little bit instead of using the same black gradient navigation bar on every single project!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/08/23/ender-tutorial">How Ender Bundles Libraries for the Browser</a></h2>
      <div class="meta">
        <span class="date">23 Aug 2012</span>
        | <span class="author">By Rod Vagg</span>
        | <span class="comments"><a href="/2012/08/23/ender-tutorial/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#ender">ender</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
This is a contributed post by <a href='https://twitter.com/rvagg'>Rod Vagg</a>.  This work is licensed under a <a href='http://creativecommons.org/licenses/by/3.0/deed.en_US' rel='license'>Creative Commons Attribution 3.0 Unported License</a>.
</div>
<p>I was asked an interesting Ender question on IRC (#enderjs on Freenode) and as I was answering it, it occurred to me that the subject would be an ideal way to explain how Ender&#8217;s multi-library bundling works. So here is that explanation!</p>

<p>The original question went something like this:</p>

<blockquote>
<p>When a browser first visits my page, they only get served Bonzo (a DOM manipulation library) as a stand-alone library, but on returning visits they are also served Qwery (a selector engine), Bean (an event manager) and a few other modules in an Ender build. Can I integrate Bonzo into the Ender build on the browser for repeat visitors?</p>
</blockquote>

<h3 id='whats_ender'>What&#8217;s Ender?</h3>

<p>Let&#8217;s step back a bit and start with some basics. The way I generally explain Ender to people is that it&#8217;s two different things:</p>

<ol>
<li>It&#8217;s a build tool, for bundling JavaScript libraries together into a single file. The resulting file constitutes a new &#8220;framework&#8221; based around the jQuery-style DOM element collection pattern: <code>$(&#39;selector&#39;).method()</code>. The constituent libraries provide the functionality for the <em>methods</em> and may also provide the selector engine functionality.</li>

<li>It&#8217;s an <em>ecosystem</em> of JavaScript libraries. Ender promotes a small collection of libraries as a base, called <strong>The Jeesh</strong>, which together provide a large portion of the functionality normally required of a JavaScript framework, but there are many more libraries compatible with Ender that add extra functionality. Many of the libraries available for Ender are also usable outside of Ender as stand-alone libraries.</li>
</ol>

<p>The Jeesh is made up of the following libraries, each of these also works as a stand-alone library:</p>

<ul>
<li><strong><a href='https://github.com/ded/domready'>domReady</a></strong>: detects when the DOM is ready for manipulation. Provides <code>$.domReady(callback)</code> and <code>$.ready(callback)</code> methods.</li>

<li><strong><a href='https://github.com/ded/qwery'>Qwery</a></strong>: a small and fast CSS3-compatible selector engine. Does the work of looking up DOM elements when you call <code>$(&#39;selector&#39;)</code> and also provides <code>$(elements).find(&#39;selector&#39;)</code>, <code>$(elements).and(elements)</code> and <code>$(elements).is(&#39;selector&#39;)</code>.</li>

<li><strong><a href='https://github.com/ded/bonzo'>Bonzo</a></strong>: a DOM manipulation library, providing some of the most commonly used methods, such as <code>$(elements).css(&#39;property&#39;, &#39;value&#39;)</code>, <code>$(elements).empty()</code>, <code>$(elements).after(elements||html)</code>, and many more.</li>

<li><strong><a href='https://github.com/fat/bean'>Bean</a></strong>: an event manager, provides jQuery-style <code>$(elements).bind(&#39;event&#39;, callback)</code> and others.</li>
</ul>

<p>The Jeesh gives you the features of these four libraries bundled into a neat package for only <em>11.7 kB</em> minified and gzipped.</p>

<h3 id='the_basics_bonzo'>The Basics: Bonzo</h3>

<p>Bonzo is a great way to start getting your head around Ender because it&#8217;s so useful by itself. Let&#8217;s include it in a page and do some really simple DOM manipulation with it.</p>
<div class='highlight'><pre><code class='html'><span class='cp'>&lt;!DOCTYPE HTML&gt;</span>
<span class='nt'>&lt;html</span> <span class='na'>lang=</span><span class='s'>&quot;en-us&quot;</span><span class='nt'>&gt;</span>
<span class='nt'>&lt;head&gt;</span>
  <span class='nt'>&lt;meta</span> <span class='na'>http-equiv=</span><span class='s'>&quot;Content-type&quot;</span> <span class='na'>content=</span><span class='s'>&quot;text/html; charset=utf-8&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;title&gt;</span>Example 1<span class='nt'>&lt;/title&gt;</span>
<span class='nt'>&lt;/head&gt;</span>
<span class='nt'>&lt;body&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;bonzo.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>id=</span><span class='s'>&quot;scr&quot;</span><span class='nt'>&gt;</span>
    <span class='c1'>// the contents of *this* script,</span>
    <span class='kd'>var</span> <span class='nx'>scr</span> <span class='o'>=</span> <span class='nb'>document</span><span class='p'>.</span><span class='nx'>getElementById</span><span class='p'>(</span><span class='s1'>&#39;scr&#39;</span><span class='p'>).</span><span class='nx'>innerHTML</span>

    <span class='c1'>// create a &lt;pre&gt;&lt;/pre&gt;</span>
    <span class='kd'>var</span> <span class='nx'>pre</span> <span class='o'>=</span> <span class='nx'>bonzo</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='s1'>&#39;&lt;pre&gt;&#39;</span><span class='p'>)</span>

    <span class='c1'>// fill it with the script text, append it to body and style it</span>
    <span class='nx'>bonzo</span><span class='p'>(</span><span class='nx'>pre</span><span class='p'>)</span>
      <span class='p'>.</span><span class='nx'>text</span><span class='p'>(</span><span class='nx'>scr</span><span class='p'>)</span>
      <span class='p'>.</span><span class='nx'>css</span><span class='p'>({</span>
        <span class='nx'>fontWeight</span><span class='o'>:</span> <span class='s1'>&#39;bold&#39;</span><span class='p'>,</span>
        <span class='nx'>border</span><span class='o'>:</span> <span class='s1'>&#39;solid 1px red&#39;</span><span class='p'>,</span>
        <span class='nx'>margin</span><span class='o'>:</span> <span class='mi'>10</span><span class='p'>,</span>
        <span class='nx'>padding</span><span class='o'>:</span> <span class='mi'>10</span>
      <span class='p'>})</span>
      <span class='p'>.</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>);</span>

  <span class='nt'>&lt;/script&gt;</span>
<span class='nt'>&lt;/body&gt;</span>
<span class='nt'>&lt;/html&gt;</span>
</code></pre>
</div>
<p><em>You can run this as <a href='http://rvagg.github.com/ender-tutorial-guts/example1/example1.html'>example1</a>, also available in my GitHub <a href='https://github.com/rvagg/ender-tutorial-guts'>repository</a> for this article.</em></p>

<p>This should look relatively familiar to a jQuery user &#8211; you can see that Bonzo is providing some of the important utilities you need for modifying the DOM.</p>

<h3 id='bonzo_inside_ender'>Bonzo Inside Ender</h3>

<p>Let&#8217;s see what happens when we use a simple Ender build that includes Bonzo. We&#8217;ll also include Qwery so we can skip the <code>document.getElementById()</code> noise, and we&#8217;ll also use Bean to demonstrate how neatly the libraries can mesh together.</p>

<p>This is done on the command line with: <code>ender build qwery bean bonzo</code>. A file named <em>ender.js</em> will be created that can be loaded on a suitable HTML page.</p>

<p>Our script becomes:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;&lt;pre&gt;&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>text</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#scr&#39;</span><span class='p'>).</span><span class='nx'>text</span><span class='p'>())</span>
  <span class='p'>.</span><span class='nx'>css</span><span class='p'>({</span>
    <span class='nx'>fontWeight</span><span class='o'>:</span> <span class='s1'>&#39;bold&#39;</span><span class='p'>,</span>
    <span class='nx'>border</span><span class='o'>:</span> <span class='s1'>&#39;solid 1px red&#39;</span><span class='p'>,</span>
    <span class='nx'>margin</span><span class='o'>:</span> <span class='mi'>10</span><span class='p'>,</span>
    <span class='nx'>padding</span><span class='o'>:</span> <span class='mi'>10</span>
  <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>bind</span><span class='p'>(</span><span class='s1'>&#39;click&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>alert</span><span class='p'>(</span><span class='s1'>&#39;Clickety clack&#39;</span><span class='p'>);</span>
  <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='s1'>&#39;body&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p><em>You can run this as <a href='http://rvagg.github.com/ender-tutorial-guts/example2/example2.html'>example2</a>, also available in my GitHub <a href='https://github.com/rvagg/ender-tutorial-guts'>repository</a> for this article.</em></p>

<p>Bonzo performs most of the work here but it&#8217;s bundled up nicely into the <code>$</code> object (also available as <code>ender</code>). The previous example can be summarised as follows:</p>

<ul>
<li><code>bonzo.create()</code> is now working when HTML is passed to <code>$()</code>.</li>

<li>Qwery does the work when <code>$()</code> is called with anything else, in this case <code>$(&#39;#scr&#39;)</code> is used as a selector for the script element.</li>

<li>We&#8217;re using the no-argument variant of <code>bonzo.text()</code> to fetch the <code>innerHTML</code> of the script element.</li>

<li>Bean makes a showing with the <code>.bind()</code> call, but the important point is that it&#8217;s integrated into our call-chain even though it&#8217;s a separate library. This is where Ender&#8217;s bundling magic shines.</li>

<li><code>bonzo.appendTo()</code> takes the selector argument which is in turn passed to Qwery to fetch the selected element from the DOM (<code>document.body</code>).</li>
</ul>

<p>Also important here, which we haven&#8217;t demonstrated, is we can do all of this on multiple elements in the same collection. The first line could be changed to <code>$(&#39;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;&lt;/pre&gt;&#39;)</code> and we&#8217;d end up with two blocks, both responding to the click event.</p>

<h3 id='removing_bonzo'>Removing Bonzo</h3>

<p>It&#8217;s possible to pull Bonzo out of the Ender build and manually stitch it back together again. Just like we used to do with our toys when we were children! (Or was that just me?)</p>

<p>First, our Ender build is now created with: <code>ender build qwery bean</code> (or we could run <code>ender remove bonzo</code> to remove Bonzo from the previous example&#8217;s <code>ender.js</code> file). The new <code>ender.js</code> file will contain the selector engine goodness from Qwery, and event management from Bean, but not much else.</p>

<p>Bonzo can be loaded separately, but we&#8217;ll need some special glue to do this. In Ender parlance, this glue is called an Ender <strong>Bridge</strong>.</p>

<h3 id='the_ender_bridge'>The Ender Bridge</h3>

<p>Ender follows the basic CommonJS Module pattern &#8211; it sets up a simple module registry and gives each module a <code>module.exports</code> object and a <code>require()</code> method that can be used to fetch any other modules in the build. It also uses a <code>provide(&#39;name&#39;, module.exports)</code> method to insert exports into the registry with the name of your module. The exact details here aren&#8217;t important and I&#8217;ll cover how you can build your own Ender module in a later article, for now we just need a basic understanding of the module registry system.</p>

<p>Using our Qwery, Bean and Bonzo build, the file looks something like this:</p>
<div class='highlight'><pre><code class='text'>|========================================|
| Ender initialisation &amp; module registry |
| (we call this the &#39;client library&#39;)    |
|========================================|
| &#39;module.exports&#39; setup                 |
|----------------------------------------|
| Qwery source                           |
|----------------------------------------|
| provide(&#39;qwery&#39;, module.exports)       |
|----------------------------------------|
| Qwery bridge                           |
==========================================
| &#39;module.exports&#39; setup                 |
|----------------------------------------|
| Bean source                            |
|----------------------------------------|
| provide(&#39;bean&#39;, module.exports)        |
|----------------------------------------|
| Bean bridge                            |
==========================================
| &#39;module.exports&#39; setup                 |
|----------------------------------------|
| Bonzo source                           |
|----------------------------------------|
| provide(&#39;bonzo&#39;, module.exports)       |
|----------------------------------------|
| Bonzo bridge                           |
==========================================
</code></pre>
</div>
<p>To be a useful Ender library, the code should be able to adhere to the CommonJS Module pattern if a <code>module.exports</code> or <code>exports</code> object exists. Many libraries already do this so they can operate both in the browser and in a CommonJS environment such as Node. Consider Underscore.js for example, it <a href='https://github.com/documentcloud/underscore/blob/ca0df9076079a3b2c45475ddb2299fb901a29989/underscore.js#L56-63'>detects the existence of <code>exports</code></a> and inserts itself onto that object if it exists, otherwise it inserts itself into the global (i.e. <code>window</code>) object. This is how Ender compatible libraries that can also be used as stand-alone libraries work too.</p>

<p>So, skipping over the complexities here, our libraries are registered within Ender and then we encounter the <strong>Bridge</strong>. Technically the bridge is just an arbitrary piece of code that Ender-compatible libraries are allowed to provide the Ender CLI tool; it could be anything. The intention, though, is to use it as a glue to bind the library into the core <code>ender</code> / <code>$</code> object. A bridge isn&#8217;t necessary and can be omitted &#8211; in this case everything found on <code>module.exports</code> is automatically bound to the <code>ender</code> / <code>$</code> object. Underscore.js doesn&#8217;t need a bridge because it conforms to the standard CommonJS pattern and its methods are utilities that logically belong on <code>$</code> &#8211; for example, <code>$.each(list, callback)</code>. If a module needs to operate on <code>$(&#39;selector&#39;)</code> collections then it needs a special binding for its methods. Many modules also require quite complex bindings to make them work nicely inside the Ender environment.</p>

<p>Bonzo has one of the most complex bridges that you&#8217;ll find in the Endersphere, so we won&#8217;t be looking into it here. If you&#8217;re interested in digging deeper, a simpler bridge with some interesting features can be found in <a href='https://github.com/ded/morpheus/blob/master/src/ender.js'>Morpheus</a>, an animation framework for Ender. Morpheus adds a <code>$.tween()</code> method and also an <code>$(&#39;selector&#39;).animate()</code> and some additional helper methods.</p>

<p>The simplest form of Ender bridge is one that lifts the <code>module.exports</code> methods to a new <em>namespace</em>. Consider <a href='http://momentjs.com/'>Moment.js</a>, the popular date and time library. When used in a CommonJS environment it adds all of its methods to <code>module.exports</code>. Without a bridge, when added to an Ender build you&#8217;d end up with <code>$.utc()</code>, <code>$.unix()</code>, <code>$.add()</code>, <code>$.subtract()</code> and other methods that don&#8217;t have very meaningful names outside of Moment.js. They are also likely to conflict with other libraries that you may want to add to your Ender build. The logical solution is to lift them up to <code>$.moment.utc()</code> etc., then you also get to use the exported main function as <code>$.moment(Date|String|Number)</code>. To achieve this, Moment.js&#8217; <a href='https://github.com/timrwood/moment/blob/master/ender.js'>bridge</a> looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>.</span><span class='nx'>ender</span><span class='p'>({</span> <span class='nx'>moment</span><span class='o'>:</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;moment&#39;</span><span class='p'>)</span> <span class='p'>})</span>
</code></pre>
</div>
<p>The <code>$.ender()</code> method is the way that a bridge can add methods to the global <code>ender</code> / <code>$</code> object, it takes an optional boolean argument to indicate whether the methods can operate on DOM element collections, i.e. <code>$(&#39;selector&#39;).method()</code>.</p>

<h3 id='bonzo_in_parts'>Bonzo in Parts</h3>

<p>Back to what we were originally trying to achieve: we&#8217;re loading Bonzo as a stand-alone library and we want to integrate it into an Ender build in the browser. There are two important things we need to do to achieve this: (1) load Bonzo&#8217;s bridge so it can wire Bonzo into Ender, and (2) make Ender aware of Bonzo so a <code>require(&#39;bonzo&#39;)</code> will do the right thing because this is how the bridge fetches Bonzo.</p>

<p>Let&#8217;s first do this the easy way. With an Ender build that just contains Qwery and Bean and Bonzo&#8217;s bridge in a separate file named <em>bonzo-ender-bridge.js</em>, we can do the following:</p>
<div class='highlight'><pre><code class='html'><span class='c'>&lt;!-- the order of the first two doesn&#39;t matter --&gt;</span>
<span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;ender.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
<span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;bonzo.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
<span class='nt'>&lt;script&gt;</span>
  <span class='nx'>provide</span><span class='p'>(</span><span class='s1'>&#39;bonzo&#39;</span><span class='p'>,</span> <span class='nx'>bonzo</span><span class='p'>)</span>
<span class='nt'>&lt;/script&gt;</span>
<span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;bonzo-ender-bridge.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
</code></pre>
</div>
<p>If you look at the diagram of the Ender file structure above you&#8217;ll see that we&#8217;re replicating it with our <code>&lt;script&gt;</code> tags but replacing <code>provide(&#39;bonzo&#39;, module.exports)</code> with <code>provide(&#39;bonzo&#39;, bonzo)</code> as Bonzo has detected that it&#8217;s not operating inside of a CommonJS environment with <code>module.exports</code> available. Instead, it&#8217;s attached itself to the global (<code>window</code>) object. Both <code>provide()</code> and <code>require()</code> are available on the global object and can be used outside of Ender (for example, to extract Bean out of an integrated build you could simply <code>var bean = require(&#39;bean&#39;)</code>.)</p>

<p>We can now continue to use exactly the same script as in our fully integrated Ender build example:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;&lt;pre&gt;&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>text</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#scr&#39;</span><span class='p'>).</span><span class='nx'>text</span><span class='p'>())</span>
  <span class='p'>.</span><span class='nx'>css</span><span class='p'>({</span>
    <span class='nx'>fontWeight</span><span class='o'>:</span> <span class='s1'>&#39;bold&#39;</span><span class='p'>,</span>
    <span class='nx'>border</span><span class='o'>:</span> <span class='s1'>&#39;solid 1px red&#39;</span><span class='p'>,</span>
    <span class='nx'>margin</span><span class='o'>:</span> <span class='mi'>10</span><span class='p'>,</span>
    <span class='nx'>padding</span><span class='o'>:</span> <span class='mi'>10</span>
  <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>bind</span><span class='p'>(</span><span class='s1'>&#39;click&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>alert</span><span class='p'>(</span><span class='s1'>&#39;Clickety clack&#39;</span><span class='p'>);</span>
  <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='s1'>&#39;body&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p><em>You can run this as <a href='http://rvagg.github.com/ender-tutorial-guts/example3/example3.html'>example3</a>, also available in my GitHub <a href='https://github.com/rvagg/ender-tutorial-guts'>repository</a> for this article.</em></p>

<h3 id='reducing__tags'>Reducing <code>&lt;script&gt;</code> Tags</h3>

<p>The main problem with the last example is that we have three <code>&lt;script&gt;</code> tags in our page with files loading (synchronously) from our server. We can trim that down to just two, and if <em>bonzo.js</em> is already cached in the browser then it&#8217;ll just be loading one script.</p>

<p>We could achieve this by hacking our ender.js file to include the needed code, or, we could create our own Ender package that contains our code so they will persist even after the Ender CLI tool has touched the file.</p>

<p>First we make a new directory to contain our package. We&#8217;ll include the Bonzo bridge as a separate file and also create a file for our <code>provide()</code> statement. Finally, a basic <em>package.json</em> file points to our <code>provide()</code> file as the <em>source</em> (&#8220;main&#8221;) of the package and the Bonzo bridge as our <em>bridge</em> (&#8220;ender&#8221;) file:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>
  <span class='s2'>&quot;name&quot;</span><span class='o'>:</span> <span class='s2'>&quot;fake-bonzo&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;version&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.0.0&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;description&quot;</span><span class='o'>:</span> <span class='s2'>&quot;Fake Bonzo&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;main&quot;</span><span class='o'>:</span> <span class='s2'>&quot;main.js&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;ender&quot;</span><span class='o'>:</span> <span class='s2'>&quot;bonzo-ender-bridge.js&quot;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>We then point the Ender CLI to this directory: <code>ender build qwery bean ./fake-bonzo/</code> (or we could run <code>ender add ./fake-bonzo/</code> to add it to the ender.js created in the above example).</p>

<p>The completed page now looks like this:</p>
<div class='highlight'><pre><code class='html'><span class='cp'>&lt;!DOCTYPE HTML&gt;</span>
<span class='nt'>&lt;html</span> <span class='na'>lang=</span><span class='s'>&quot;en-us&quot;</span><span class='nt'>&gt;</span>
<span class='nt'>&lt;head&gt;</span>
  <span class='nt'>&lt;meta</span> <span class='na'>http-equiv=</span><span class='s'>&quot;Content-type&quot;</span> <span class='na'>content=</span><span class='s'>&quot;text/html; charset=utf-8&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;title&gt;</span>Example 4<span class='nt'>&lt;/title&gt;</span>
<span class='nt'>&lt;/head&gt;</span>
<span class='nt'>&lt;body&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;bonzo.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;ender.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>id=</span><span class='s'>&quot;scr&quot;</span><span class='nt'>&gt;</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;&lt;pre&gt;&#39;</span><span class='p'>)</span>
      <span class='p'>.</span><span class='nx'>text</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#scr&#39;</span><span class='p'>).</span><span class='nx'>text</span><span class='p'>())</span>
      <span class='p'>.</span><span class='nx'>css</span><span class='p'>({</span>
        <span class='nx'>fontWeight</span><span class='o'>:</span> <span class='s1'>&#39;bold&#39;</span><span class='p'>,</span>
        <span class='nx'>border</span><span class='o'>:</span> <span class='s1'>&#39;solid 1px red&#39;</span><span class='p'>,</span>
        <span class='nx'>margin</span><span class='o'>:</span> <span class='mi'>10</span><span class='p'>,</span>
        <span class='nx'>padding</span><span class='o'>:</span> <span class='mi'>10</span>
      <span class='p'>})</span>
      <span class='p'>.</span><span class='nx'>bind</span><span class='p'>(</span><span class='s1'>&#39;click&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
        <span class='nx'>alert</span><span class='p'>(</span><span class='s1'>&#39;Clickety clack&#39;</span><span class='p'>);</span>
      <span class='p'>})</span>
      <span class='p'>.</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='s1'>&#39;body&#39;</span><span class='p'>);</span>

  <span class='nt'>&lt;/script&gt;</span>
<span class='nt'>&lt;/body&gt;</span>
<span class='nt'>&lt;/html&gt;</span>
</code></pre>
</div>
<p><em>You can dig further into this and run it as <a href='http://rvagg.github.com/ender-tutorial-guts/example4/example4.html'>example4</a>, also available in my GitHub <a href='https://github.com/rvagg/ender-tutorial-guts'>repository</a> for this article.</em></p>

<h3 id='conclusion'>Conclusion</h3>

<p>Hopefully this has helped demystify the way that Ender packages libraries together; it&#8217;s really not magic. If you want to dig deeper then a good place to start would be to examine the <a href='https://github.com/ender-js/ender-js/blob/master/ender.js'>client library</a> that appears at the top of each Ender build&#8212;it&#8217;s relatively straightforward and fairly short.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page24">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <strong>25</strong>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page26">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

