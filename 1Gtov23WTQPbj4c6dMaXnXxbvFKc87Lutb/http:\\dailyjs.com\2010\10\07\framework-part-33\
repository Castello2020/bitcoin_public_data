http://dailyjs.com/2010/10/07/framework-part-33/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 09:50:16 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Tue, 22 Jul 2014 17:17:00 GMT
ETag: "ec86a-8a0b-4fecb64373b00"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8086
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Let's Make a Framework: Feature Detection</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2010/10/07/framework-part-33">Let's Make a Framework: Feature Detection</a></h2>

<div class="meta">
  07 Oct 2010 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#frameworks">frameworks</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#lmaf">lmaf</a>
    
  </span>
</div>

<div id="post">
<p>Welcome to part 33 of <em>Let&#8217;s Make a Framework</em>, the ongoing series about building a JavaScript framework.</p>
<p>If you haven&#8217;t been following along, these articles are tagged with <a href="http://dailyjs.com/tags.html#lmaf">lmaf</a>.  The project we&#8217;re creating is called <a href="http://github.com/alexyoung/turing.js">Turing</a>.</p>
<p><a href="http://dailyjs.com/2010/09/30/framework-part-32/">Last week</a> I wrote about packaging the project using Node scripts.  This week I&#8217;m going to talk about feature detection.</p>
<h3>querySelectorAll</h3>
<p>The selector engine we built for the core of <code>turing.dom</code> was based on the way Firefox interprets <span class="caps">CSS</span> selectors.  I liked the approach for the context of these tutorials, because it&#8217;s a very pragmatic approach that&#8217;s easy to follow.</p>
<p>Browsers have been shipping with <a href="http://www.w3.org/TR/selectors-api2/#queryselectorall">querySelectorAll</a> for a while, which reduces the amount of work required to implement <span class="caps">DOM</span> lookups.</p>
<p>That means <code>turing.dom.get</code> could be rewritten:</p>
<div class="highlight"><pre><code class="javascript"><span class="c1">// Original code minus all the</span>
<span class="c1">// magic in the Searcher class and tokenizer</span>
<span class="nx">dom</span><span class="p">.</span><span class="nx">get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">tokens</span> <span class="o">=</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">tokenize</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">tokens</span><span class="p">,</span>
      <span class="nx">searcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Searcher</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="nx">tokens</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">searcher</span><span class="p">.</span><span class="nx">parse</span><span class="p">();</span>
<span class="p">};</span>

<span class="c1">// New selector API</span>
<span class="nx">dom</span><span class="p">.</span><span class="nx">get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
</div>
<p>But not all browsers support this yet, so let&#8217;s check if it&#8217;s available:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">dom</span><span class="p">.</span><span class="nx">get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">?</span> <span class="nb">document</span> <span class="o">:</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;querySelectorAll&#39;</span> <span class="k">in</span> <span class="nb">document</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">root</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">get</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">root</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre>
</div>
<h3>In the Wild</h3>
<p>jQuery will check for <code>querySelectorAll</code>, but it&#8217;ll only use it under certain conditions.  This is from jQuery 1.4.2:</p>
<div class="highlight"><pre><code class="javascript"><span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span> <span class="p">)</span> <span class="p">{</span>
  <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">oldSizzle</span> <span class="o">=</span> <span class="nx">Sizzle</span><span class="p">,</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
    <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;p class=&#39;TEST&#39;&gt;&lt;/p&gt;&quot;</span><span class="p">;</span>

    <span class="c1">// Safari can&#39;t handle uppercase or unicode characters when</span>
    <span class="c1">// in quirks mode.</span>
    <span class="k">if</span> <span class="p">(</span> <span class="nx">div</span><span class="p">.</span><span class="nx">querySelectorAll</span> <span class="o">&amp;&amp;</span> <span class="nx">div</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&quot;.TEST&quot;</span><span class="p">).</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">Sizzle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">extra</span><span class="p">,</span> <span class="nx">seed</span><span class="p">){</span>
      <span class="nx">context</span> <span class="o">=</span> <span class="nx">context</span> <span class="o">||</span> <span class="nb">document</span><span class="p">;</span>

      <span class="c1">// Only use querySelectorAll on non-XML documents</span>
      <span class="c1">// (ID selectors don&#39;t work in non-HTML documents)</span>
      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">seed</span> <span class="o">&amp;&amp;</span> <span class="nx">context</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">9</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span><span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">makeArray</span><span class="p">(</span> <span class="nx">context</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">query</span><span class="p">),</span> <span class="nx">extra</span> <span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){}</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="nx">oldSizzle</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">extra</span><span class="p">,</span> <span class="nx">seed</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">oldSizzle</span> <span class="p">)</span> <span class="p">{</span>
      <span class="nx">Sizzle</span><span class="p">[</span> <span class="nx">prop</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">oldSizzle</span><span class="p">[</span> <span class="nx">prop</span> <span class="p">];</span>
    <span class="p">}</span>

    <span class="nx">div</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// release memory in IE</span>
  <span class="p">})();</span>
<span class="p">}</span>
</code></pre>
</div>
<p>The use of an element for capability detection is common in frameworks &#8212; sometimes it&#8217;s the only reliable way of detecting a browser&#8217;s behaviour.</p>
<p>It&#8217;s a little bit different in Dojo 1.5, but the same Safari issue is mentioned:</p>
<div class="highlight"><pre><code class="javascript">  <span class="c1">// some versions of Safari provided QSA, but it was buggy and crash-prone.</span>
  <span class="c1">// We need te detect the right &quot;internal&quot; webkit version to make this work.</span>
  <span class="kd">var</span> <span class="nx">wk</span> <span class="o">=</span> <span class="s2">&quot;WebKit/&quot;</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">is525</span> <span class="o">=</span> <span class="p">(</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">isWebKit</span> <span class="o">&amp;&amp;</span> 
    <span class="p">(</span><span class="nx">nua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">wk</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> 
    <span class="p">(</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">nua</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">wk</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">528</span><span class="p">)</span>
  <span class="p">);</span>

  <span class="c1">// IE QSA queries may incorrectly include comment nodes, so we throw the</span>
  <span class="c1">// zipping function into &quot;remove&quot; comments mode instead of the normal &quot;skip</span>
  <span class="c1">// it&quot; which every other QSA-clued browser enjoys</span>
  <span class="kd">var</span> <span class="nx">noZip</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">isIE</span> <span class="o">?</span> <span class="s2">&quot;commentStrip&quot;</span> <span class="o">:</span> <span class="s2">&quot;nozip&quot;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">qsa</span> <span class="o">=</span> <span class="s2">&quot;querySelectorAll&quot;</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">qsaAvail</span> <span class="o">=</span> <span class="p">(</span>
    <span class="o">!!</span><span class="nx">getDoc</span><span class="p">()[</span><span class="nx">qsa</span><span class="p">]</span> <span class="o">&amp;&amp;</span> 
    <span class="c1">// see #5832</span>
    <span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">isSafari</span> <span class="o">||</span> <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">isSafari</span> <span class="o">&gt;</span> <span class="mf">3.1</span><span class="p">)</span> <span class="o">||</span> <span class="nx">is525</span> <span class="p">)</span>
  <span class="p">);</span>

  <span class="c1">//Don&#39;t bother with n+3 type of matches, IE complains if we modify those.</span>
  <span class="kd">var</span> <span class="nx">infixSpaceRe</span> <span class="o">=</span> <span class="sr">/n\+\d|([^ ])?([&gt;~+])([^ =])?/g</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">infixSpaceFunc</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">pre</span><span class="p">,</span> <span class="nx">ch</span><span class="p">,</span> <span class="nx">post</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">ch</span> <span class="o">?</span> <span class="p">(</span><span class="nx">pre</span> <span class="o">?</span> <span class="nx">pre</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">ch</span> <span class="o">+</span> <span class="p">(</span><span class="nx">post</span> <span class="o">?</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">post</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">:</span> <span class="cm">/*n+3*/</span> <span class="nx">match</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">getQueryFunc</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">forceDOM</span><span class="p">){</span>
    <span class="c1">//Normalize query. The CSS3 selectors spec allows for omitting spaces around</span>
    <span class="c1">//infix operators, &gt;, ~ and +</span>
    <span class="c1">//Do the work here since detection for spaces is used as a simple &quot;not use QSA&quot;</span>
    <span class="c1">//test below.</span>
    <span class="nx">query</span> <span class="o">=</span> <span class="nx">query</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">infixSpaceRe</span><span class="p">,</span> <span class="nx">infixSpaceFunc</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">qsaAvail</span><span class="p">){</span>
      <span class="c1">// if we&#39;ve got a cached variant and we think we can do it, run it!</span>
      <span class="kd">var</span> <span class="nx">qsaCached</span> <span class="o">=</span> <span class="nx">_queryFuncCacheQSA</span><span class="p">[</span><span class="nx">query</span><span class="p">];</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">qsaCached</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">forceDOM</span><span class="p">){</span> <span class="k">return</span> <span class="nx">qsaCached</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Snip</span>
</code></pre>
</div>
<p>Here the browser and version are derived from the user agent string.</p>
<h3>has.js</h3>
<p>I recently wrote about <a href="http://github.com/phiggins42/has.js">has.js</a> which is a clever little project that contains a library of feature detection tests.</p>
<blockquote>
<p>Browser sniffing and feature inference are flawed techniques for detecting browser support in client side JavaScript. The goal of has.js is to provide a collection of self-contained tests and unified framework around using pure feature detection for whatever library consumes it.</p>
</blockquote>
<p>Using has.js as inspiration, we should be able to rewrite the previous code like this:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">dom</span><span class="p">.</span><span class="nx">get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">?</span> <span class="nb">document</span> <span class="o">:</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="k">return</span> <span class="nx">turing</span><span class="p">.</span><span class="nx">detect</span><span class="p">(</span><span class="s1">&#39;querySelectorAll&#39;</span><span class="p">)</span> <span class="o">?</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="o">:</span> <span class="nx">get</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">root</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
</div>
<h3>Feature Detection Implementation</h3>
<p>Making a library of feature tests is fairly easy with a plain <code>Object</code>.  Tests can be referred to by name and easily looked up at runtime.  Also, a cache can be used to store the results of the tests.</p>
<p>The core of this functionality is something inherent to JavaScript programming rather than just browser-related, so I put this in <a href="http://github.com/alexyoung/turing.js/blob/master/turing.core.js">turing.core.js</a>:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">testCache</span> <span class="o">=</span> <span class="p">{},</span>
    <span class="nx">detectionTests</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">turing</span><span class="p">.</span><span class="nx">addDetectionTest</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">detectionTests</span><span class="p">[</span><span class="nx">name</span><span class="p">])</span>
    <span class="nx">detectionTests</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">turing</span><span class="p">.</span><span class="nx">detect</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">testName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">testCache</span><span class="p">[</span><span class="nx">testCache</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">testCache</span><span class="p">[</span><span class="nx">testName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">detectionTests</span><span class="p">[</span><span class="nx">testName</span><span class="p">]();</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">testCache</span><span class="p">[</span><span class="nx">testName</span><span class="p">];</span>
<span class="p">};</span>
</code></pre>
</div>
<p>The results are cached because they should only be run once.  This type of capability detection is intended to be used against the environment, rather than features that might load dynamically in runtime, so I think it&#8217;s safe to run the tests once.</p>
<p>Then the jQuery-inspired <code>querySelectorAll</code> test can be added in <a href="http://github.com/alexyoung/turing.js/blob/master/turing.dom.js">turing.dom.js</a>:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">turing</span><span class="p">.</span><span class="nx">addDetectionTest</span><span class="p">(</span><span class="s1">&#39;querySelectorAll&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
  <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;p class=&quot;TEST&quot;&gt;&lt;/p&gt;&#39;</span><span class="p">;</span>

  <span class="c1">// Some versions of Safari can&#39;t handle uppercase in quirks mode</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.TEST&#39;</span><span class="p">).</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// Helps IE release memory associated with the div</span>
  <span class="nx">div</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">});</span>
</code></pre>
</div>
<h3>Conclusion</h3>
<p>Looking through popular JavaScript frameworks made me realise that most of them still use the user agent string to determine what capabilities are available.  This might be fine most of the time, but I don&#8217;t consider it best practice.  The way jQuery tests capabilities using techniques like the dummy <span class="caps">DOM</span> element creation seems like a lot of work, but it relies on browser behaviour rather than the user agent string.</p>
<p>I originally wanted to write this article about <code>querySelectorAll</code> and its family of related methods, but adding generic capability detection support became an interesting little rabbit hole.  I hope this illustrates how simple tasks can require extra effort to make code highly reusable.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
      <li>
        <div>18 Jul 2014</div>
        <a href="/2014/07/18/lazy-json-undo">Undo with Object.observe</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2010/10/07/framework-part-33/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

