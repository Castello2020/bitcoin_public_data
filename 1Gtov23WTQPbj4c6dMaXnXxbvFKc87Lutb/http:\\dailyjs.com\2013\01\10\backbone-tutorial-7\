http://dailyjs.com/2013/01/10/backbone-tutorial-7/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 23:49:24 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "12dbcf-98f2-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8560
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Backbone.js Tutorial: Editing Lists</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2013/01/10/backbone-tutorial-7">Backbone.js Tutorial: Editing Lists</a></h2>

<div class="meta">
  10 Jan 2013 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#backbone.js">backbone.js</a>
    
      <a href="/tags.html#mvc">mvc</a>
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#backgoog">backgoog</a>
    
  </span>
</div>

<div id="post">
<ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'><strong>Part 7: Editing Lists</strong></a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>465523f</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 465523f
</code></pre>
</div>
<h3 id='active_list'>Active List</h3>

<p>Last week I demonstrated how to make a custom <code>Backbone.sync</code> &#8220;create&#8221; implementation, and suitable views and templates for adding new lists. If you recall, I created a view for editing lists as well, because it was so similar to <code>AddListView</code> it made sense to inherit from it.</p>

<p>Before a list can be edited, we need a way of selecting lists. It makes sense to always have an active list in this application, so there should be a way of saving this state somewhere. Also, when loading the lists from the server, a default list should be selected on the user&#8217;s behalf.</p>

<p>To be consistent with the patterns employed to track collections and views, we should add a <code>models</code> object for tracking instances of models. One of these can be the <code>activeList</code>.</p>

<p>Open <code>app/js/app.js</code> and add a <code>models</code> property as well as setting the <code>activeModel</code> after the lists have loaded:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>App</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>views</span><span class='o'>:</span> <span class='p'>{},</span>
  <span class='nx'>collections</span><span class='o'>:</span> <span class='p'>{},</span>
  <span class='nx'>models</span><span class='o'>:</span> <span class='p'>{},</span>
  <span class='nx'>connectGapi</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ApiManager</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>userId</span><span class='o'>:</span> <span class='s1'>&#39;@me&#39;</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='o'>=</span> <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>first</span><span class='p'>();</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>listMenu</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
      <span class='p'>}});</span>
    <span class='p'>});</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Now open <code>app/js/views/lists/menu.js</code> and make it check if the <code>activeModel</code> is the model currently being used to render the navigation list element:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>renderMenuItem</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>item</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ListMenuItemView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>model</span> <span class='p'>});</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>append</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>item</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>If the model does match, then it&#8217;ll trigger an <code>open</code> on the view. Now open <code>app/js/views/lists/menuitem.js</code> and make the <code>ListMenuItemView</code> track the <code>activeModel</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>;</span>
  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Now the application is able to track the selected list. This will make adding tasks easier, because in order to add tasks we need to know which tasklist to add it to.</p>

<h3 id='edit_list_form'>Edit List Form</h3>

<p>Open <code>app/js/views/app.js</code>. The goal of this exercise is to make the edit form appear, filled out with the correct values, when the &#8220;Edit List&#8221; link is clicked. It&#8217;s going to be similar to last week&#8217;s <code>addList</code> method, so you can try doing this part yourself if you want.</p>

<p>First, make it load the <code>EditListView</code> class:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;text!templates/app.html&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/add&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/edit&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>,</span> <span class='nx'>AddListView</span><span class='p'>,</span> <span class='nx'>EditListView</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Next, add the <code>#edit-list-button</code> to the events:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='s1'>&#39;click #add-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;addList&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;click #edit-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;editList&#39;</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>Finally, add the <code>editList</code> method to instantiate an <code>EditListView</code> form based on the <code>activeList</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>editList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>form</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>EditListView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='p'>});</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#list-editor&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>form</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='nx'>form</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input:first&#39;</span><span class='p'>).</span><span class='nx'>focus</span><span class='p'>();</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This is very similar to the <code>addList</code> method &#8211; they could easily use the same method, just with different models:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>listForm</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>form</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#list-editor&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>form</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='nx'>form</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input:first&#39;</span><span class='p'>).</span><span class='nx'>focus</span><span class='p'>();</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>},</span>

<span class='nx'>addList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>listForm</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>AddListView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='k'>new</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span> <span class='p'>})</span> <span class='p'>}));</span>
<span class='p'>},</span>

<span class='nx'>editList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>listForm</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>EditListView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='p'>}));</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>DRY!</p>

<h3 id='saving_changes'>Saving Changes</h3>

<p>The <code>Backbone.sync</code> method needs to be updated to cope with updating items. This is <em>very</em> similar to creating items (in <code>app/js/gapi.js</code>):</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Around line 97, after &#39;create&#39;</span>
<span class='k'>case</span> <span class='s1'>&#39;update&#39;</span><span class='o'>:</span>
  <span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>
  <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>].</span><span class='nx'>update</span><span class='p'>(</span><span class='nx'>requestContent</span><span class='p'>);</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='k'>break</span><span class='p'>;</span>
</code></pre>
</div>
<p>A slight complication is Google&#8217;s API requires a <code>tasklist</code> property in the object passed to <code>update</code>. This isn&#8217;t very clearly documented (you&#8217;ll notice the <a href='https://developers.google.com/google-apps/tasks/v1/reference/tasklists/update'>tasklists/update</a> reference doesn&#8217;t have a JavaScript example).</p>

<p>Rather than making the Backbone models somehow aware of this, it&#8217;s better to put the logic in <code>Backbone.sync</code>. That way all of the Google-related stuff is in the same place.</p>

<p>Add another <code>switch</code> statement to insert the required ID parameters, based on the type of model being operated on:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>requestContent</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;tasks&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>.</span><span class='nx'>task</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;tasklists&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>.</span><span class='nx'>tasklist</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>
  <span class='p'>}</span>
</code></pre>
</div>
<p>The lists should now be editable, but there&#8217;s one thing left to do &#8211; show that the selected list is &#8220;active&#8221;.</p>

<h3 id='selecting_lists'>Selecting Lists</h3>

<p>Open <code>app/js/views/lists/menuitem.js</code> and change <code>open</code> to track the active menu view, and add a class name to the view&#8217;s element:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>.</span><span class='nx'>activeList</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>;</span>
  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Whenever a view is opened, <code>bTask.views.activeListMenuItem</code> will be used to store a reference to it. Notice how I&#8217;ve used <code>this.$el</code>? Most experienced Backbone developers will tell you to do this, rather than using jQuery&#8217;s <code>$()</code> to find elements based on a selector. The idea is to use minimal jQuery and be more declarative with Backbone.</p>

<p>Does keeping a reference to <code>bTask.views.activeListMenuItem</code> beat <code>$(&#39;.list-menu-item&#39;).removeClass(&#39;active&#39;)</code>? It&#8217;s hard to say &#8211; I&#8217;ve often noticed people dipping into jQuery where it makes sense.</p>

<p>This begs the question: should we really track the active list using a reference to a model? The <code>ListMenuItemView</code> already contains a reference to the model, and most of the Backbone code is really concerned with modeling the user interface, rather than an additional internal state. Let&#8217;s try removing the reference to <code>bTask.models</code>.</p>

<p>Open <code>app/js/app.js</code> and remove the <code>models</code> object, and then remove the line that sets <code>activeList</code>. Next, go to <code>app/js/views/lists/menuitem.js</code> and change the <code>open</code> method to only refer to views:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>removeClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>addClass</span><span class='p'>(</span><span class='s1'>&#39;active&#39;</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Next open the <code>AppView</code> class, in <code>app/js/views/app.js</code>, and make sure <code>editList</code> uses <code>bTask.views.activeListMenuItem.model</code>. Finally, make <code>app/js/views/lists/menu.js</code> activate the default item (the first list):</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>renderMenuItem</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>item</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ListMenuItemView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>model</span> <span class='p'>});</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>append</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span> <span class='o'>=</span> <span class='nx'>item</span><span class='p'>;</span>
  <span class='p'>}</span>
  
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>item</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>I feel like avoiding tracking an internal application state is a mistake in Backbone, and instead the views should be made to work harder. Is this a good idea? It probably depends on the nature of the application.</p>

<p>To make the interface clearer, you can add <code>li.active { font-weight: bold }</code> to <code>app/css/app.css</code>.</p>

<h3 id='summary'>Summary</h3>

<p>In this part we&#8217;ve built on the code in <em>Part 6</em> to allow lists to be edited. Even though this is fairly simple, the application had to change to track the currently active list.</p>

<p>The general rule of thumb in Backbone is to use cached jQuery (or Zepto) objects, which is why you&#8217;ll see a lot of calls to <code>this.$el</code> rather than <code>$()</code>. I suggest another rule that complements this: make views do the work, and avoid relying on state external to views.</p>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/0953c5d7873fe3f7d176984e0337724be2b3386f'>alexyoung / dailyjs-backbone-tutorial, commit 0953c5d</a>.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2013/01/10/backbone-tutorial-7/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

