http://dailyjs.com/page30/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 19:49:01 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "e937b-29967-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 40233
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/02/node-roundup">Node Roundup: 0.6.16, Node WebKit Agent, URLify, crud-bones, frontail</a></h2>
      <div class="meta">
        <span class="date">02 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/02/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#unix">unix</a>
          
            <a href="/tags.html#url">url</a>
          
            <a href="/tags.html#webkit">webkit</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_0616'>Node 0.6.16</h3>

<p>The latest stable release of Node is out: <a href='http://blog.nodejs.org/2012/04/30/version-0-6-16-stable/'>0.6.16</a>. V8 has been upgraded to 3.6.6.25, and there are improvements for each platform.</p>

<p>Dave Pacheco also posted about <a href='http://blog.nodejs.org/2012/04/25/profiling-node-js/'>profiling Node with DTrace</a>, but be forewarned that this is probably only useful if you&#8217;re able to run code on OpenSolaris-derived <a href='http://wiki.illumos.org/display/illumos/illumos+Home'>illumos</a> systems. I actually use DTrace in Mac OS for debugging things that aren&#8217;t related to Node, but Dave notes that this won&#8217;t work due to the lack of ustack helpers, and invites readers to contact Apple about this:</p>

<blockquote>
<p>OS X supports DTrace, but not ustack helpers. The way to get this changed is to contact your Apple developer liason (if you&#8217;re lucky enough to have one) or file a bug report at bugreport.apple.com. I&#8217;d suggest referencing existing bugs 5273057 and 11206497. More bugs filed (even if closed as dups) show more interest and make it more likely Apple will choose to fix this.</p>
</blockquote>

<h3 id='node_webkit_agent'>Node WebKit Agent</h3>

<p><a href='https://github.com/c4milo/node-webkit-agent'>Node WebKit Agent</a> (npm: <a href='http://npmjs.org/package/webkit-devtools-agent'>webkit-devtools-agent</a>) by Camilo Aguilar is an implementation of the <a href='https://developers.google.com/chrome-developer-tools/docs/protocol/1.0/'>Chrome developer tools protocol</a>. This allows WebKit browsers to debug Node applications, which includes profiling, a console, and network monitoring.</p>

<p>A related project that I&#8217;ve used a few times is <a href='https://github.com/dannycoates/node-inspector'>Node Inspector</a>.</p>

<h3 id='urlify'>URLify</h3>

<p><a href='https://github.com/Gottox/node-urlify'>URLify</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/urlify'>urlify</a>) by Enno Boland helps convert UTF-8 strings to ASCII that&#8217;s safe to use as a readable URL segment. For example:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>urlify</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;urlify&#39;</span><span class='p'>).</span><span class='nx'>create</span><span class='p'>({</span>
  <span class='nx'>spaces</span><span class='o'>:</span> <span class='s1'>&#39;_&#39;</span>
<span class='p'>,</span> <span class='nx'>nonPrintable</span><span class='o'>:</span> <span class='s1'>&#39;_&#39;</span>
<span class='p'>,</span> <span class='nx'>trim</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>});</span>

<span class='nx'>urlify</span><span class='p'>(</span><span class='s1'>&#39;竹取物語 Taketori Monogatari&#39;</span><span class='p'>);</span>
<span class='c1'>// Taketori_Monogatari</span>
</code></pre>
</div>
<h3 id='crudbones'>crud-bones</h3>

<p><a href='http://words.alexeypro.com/crud-bones/'>crud-bones</a> (GitHub: <a href='https://github.com/alexeypro/crud-bones'>alexeypro / crud-bones</a>) by Alexey Prohorenko is a boilerplate for Express-based apps that use MySQL, Mongo, or Redis. He&#8217;s also dotCloud and Heroku deployment instructions.</p>

<h3 id='frontail'>frontail</h3>

<p><img src='/images/posts/frontail.png' alt='frontail' /></p>

<p><a href='https://github.com/mthenw/frontail'>frontail</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/frontail'>frontail</a>) by Maciej Winnicki is a WebSocket-based <code>tail</code>-inspired utility for watching logs. Imagine a version of <code>tail</code> that runs a little web server instead of writing to standard IO. It has some command-line options as well &#8211; for example, <code>-n &lt;number&gt;</code> will control how many lines are printed when it starts up.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/01/jquery-roundup">jQuery Roundup: jQuery UI 1.8.20, jq-quickvalidate, Fullscreen Plugin</a></h2>
      <div class="meta">
        <span class="date">01 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/01/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#validation">validation</a>
          
            <a href="/tags.html#fullscreen">fullscreen</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_ui_1820'>jQuery UI 1.8.20</h3>

<p><a href='http://blog.jqueryui.com/2012/04/jquery-ui-1-8-20/'>jQuery UI 1.8.20</a> has been released. This release marks the twentieth maintenance release, and includes bug fixes for Draggable, Sortable, and Datepicker.</p>

<h3 id='jqquickvalidate'>jq-quickvalidate</h3>

<p><a href='https://github.com/elclanrs/jq-quickvalidate'>jq-quickvalidate</a> (License: <em>GPLv2</em>, <a href='http://jsfiddle.net/elclanrs/BMz9U/embedded/result/'>Demo</a>) by <a href='http://spacirdesigns.com/bio'>Cedric Ruiz</a> is a form validation plugin. The author has provided CSS and icons, so it&#8217;s easy to drop into a site.</p>

<p>There are built-in validators, but custom ones can be added using a regular expression or function. Basic usage looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#my-form&#39;</span><span class='p'>).</span><span class='nx'>quickValidate</span><span class='p'>({</span>
  <span class='nx'>inputs</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>username</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>filters</span><span class='o'>:</span> <span class='s1'>&#39;required username exclude&#39;</span><span class='p'>,</span>
      <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span>
        <span class='nx'>exclude</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;Paul&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Mike&#39;</span><span class='p'>]</span>
      <span class='p'>}</span>
    <span class='p'>},</span>
    <span class='s1'>&#39;pass&#39;</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>filters</span><span class='o'>:</span> <span class='s1'>&#39;required pass&#39;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='fullscreen_plugin'>Fullscreen Plugin</h3>

<p><a href='https://github.com/kayahr/jquery-fullscreen-plugin/'>jQuery Fullscreen Plugin</a> (License: <em>MIT</em>) by Klaus Reimer is a jQuery-friendly API for working with the fullscreen mode present in supporting browsers. Vendor-specific versions are supported for WebKit and Firefox.</p>

<p>It can make an element or the entire document fullscreen:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>).</span><span class='nx'>fullScreen</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>);</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#myVideo&#39;</span><span class='p'>).</span><span class='nx'>fullScreen</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>);</span>
</code></pre>
</div>
<p>It can also exit fullscreen, or check if fullscreen is currently active. A related plugin is <a href='https://github.com/ruidlopes/jquery-fullscreen'>jquery.fullscreen.js</a>, which provides handling for various fullscreen-related events.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/30/quotefm-pin-boots">quotefm-node, Pin, Boots</a></h2>
      <div class="meta">
        <span class="date">30 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/30/quotefm-pin-boots/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='quotefmnode'>quotefm-node</h3>

<p><a href='https://github.com/Gottox/quotefm-node'>quotefm-node</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/quotefm'>quotefm</a>) by Enno Boland is a module for working with the <a href='http://quote.fm/'>QUOTE.fm</a> API. It can be used to get recommendations, articles, and user information back from the service.</p>

<p>The module includes some good documentation, and the <a href='http://quote.fm/labs/documentation/index'>QUOTE.fm API documentation</a> is also easy to follow as well.</p>

<h3 id='pin'>Pin</h3>

<p><a href='https://github.com/vesln/pin'>Pin</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/pin'>pin</a>) by Veselin Todorov is a small module for uptime monitoring:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>pin</span><span class='p'>(</span><span class='s1'>&#39;http://google.com/&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>interval</span><span class='p'>(</span><span class='mi'>10000</span><span class='p'>)</span> <span class='c1'>// in ms</span>
  <span class='p'>.</span><span class='nx'>up</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>response</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>response</span><span class='p'>);</span>
   <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>down</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>error</span><span class='p'>,</span> <span class='nx'>response</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>error</span><span class='p'>,</span> <span class='nx'>response</span><span class='p'>);</span>
  <span class='p'>});</span>
</code></pre>
</div>
<p>The chainable API also allows HTTP headers to be set.</p>

<h3 id='boots'>Boots</h3>

<p><a href='http://projects.jga.me/boots/'>Boots</a> (GitHub: <a href='https://github.com/jgallen23/boots'>jgallen23 / boots</a>, npm: <a href='http://npmjs.org/package/boots'>boots</a>) by Greg Allen is a command-line utility for building custom <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a> asset files.</p>

<p>If <code>.less</code> files are passed to it then a CSS file will be generated:</p>
<div class='highlight'><pre><code class='text'>boots --js bootstrap-modal.js,bootstrap-tooltip.js --css modals.less,tooltip.less -o public/bootstrap
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/27/pinclusterer-backbone-routes-rice-fiddle">PinClusterer, Backbone.Routes, Rice, Fiddle.js</a></h2>
      <div class="meta">
        <span class="date">27 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/27/pinclusterer-backbone-routes-rice-fiddle/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#geo">geo</a>
          
            <a href="/tags.html#maps">maps</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#databases">databases</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='pinclusterer'>PinClusterer</h3>

<p><img src='/images/posts/pinclusterer.png' alt='PinClusterer' /></p>

<p><a href='http://rtsinani.github.com/PinClusterer/'>PinClusterer</a> (GitHub: <a href='https://github.com/rtsinani/PinClusterer'>rtsinani / PinClusterer</a>) by Arti Sinani is a library for clustering pins on Bing maps. Pins are grouped together based on a grid size setting:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>pinClusterer</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>PinClusterer</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>gridSize</span><span class='o'>:</span> <span class='mi'>40</span>
<span class='p'>});</span>
<span class='nx'>pinCluster</span><span class='p'>.</span><span class='nx'>cluster</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>);</span>

<span class='nx'>pinCluster</span><span class='p'>.</span><span class='nx'>setOptions</span><span class='p'>({</span> <span class='nx'>gridSize</span><span class='o'>:</span> <span class='mi'>30</span> <span class='p'>});</span>
<span class='nx'>pinCluster</span><span class='p'>.</span><span class='nx'>cluster</span><span class='p'>();</span>
</code></pre>
</div>
<p>The pin settings are all configured the same way as a standard <code>Microsoft.Maps.Pushpin</code>. The author has included a stylesheet that will create circular icons with a shadow and gradient.</p>

<h3 id='backboneroutes'>Backbone.Routes</h3>

<p><a href='https://github.com/siong1987/backbone_routes'>Backbone.Routes</a> (License: <em>MIT</em>) by Teng Siong Ong is an alternative API for routing in Backbone.js. It helps centralise routes, and can trigger multiple routes for a given URL.</p>

<p>It seems more like the way Rails routing works, and the author indicates he&#8217;s been influenced by Rails in the project&#8217;s source code. Here&#8217;s an example:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='nv'>Backbone.Routes.prefix = </span><span class='nx'>YourApp</span><span class='p'>.</span><span class='nx'>Routers</span>

<span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Routes</span><span class='p'>.</span><span class='nx'>map</span>
  <span class='s'>&#39;/&#39;</span><span class='o'>:</span>
    <span class='s'>&#39;NavbarRouter&#39;</span><span class='o'>:</span> <span class='s'>&#39;index&#39;</span>
    <span class='s'>&#39;HomeRouter&#39;</span><span class='o'>:</span> <span class='s'>&#39;index&#39;</span>
</code></pre>
</div>
<h3 id='rice'>Rice</h3>

<p><a href='http://rice.jscraft.org/'>Rice</a> (License: <em>MIT</em>) by Yuri Neves is a database library that uses the Web SQL Database API. Although Firefox supports Indexed DB instead, this API can be used with <a href='http://phonegap.com/'>PhoneGap</a>.</p>

<p>Usage looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>rice</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;myDb&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>select</span><span class='p'>({</span> <span class='nx'>from</span><span class='o'>:</span> <span class='s1'>&#39;People&#39;</span><span class='p'>,</span> <span class='nx'>where</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>21</span> <span class='p'>}</span> <span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>result</span><span class='p'>.</span><span class='nx'>each</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>row</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;&lt;li&gt;&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>row</span><span class='p'>.</span><span class='nx'>name</span><span class='p'>).</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='s1'>&#39;#myList&#39;</span><span class='p'>);</span>
    <span class='p'>});</span>
  <span class='p'>});</span>
</code></pre>
</div>
<p>The source is available here: <a href='http://rice.jscraft.org/src/rice.js'>rice.jscraft.org/src/rice.js</a>.</p>

<h3 id='fiddlejs'>Fiddle.js</h3>

<p><a href='https://github.com/crcn/fiddle.js'>Fiddle.js</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/fiddle'>fiddle</a>) by Craig Condon is a MongoDB-inspired object manipulation library. Operators like <code>$inc</code>, <code>$set</code>, <code>$unset</code>, and more are supported.</p>

<p>The <code>fiddle</code> method itself accepts a modifier object, and then filters and targets. The targets represent the data to modify:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Increment age by one</span>
<span class='kd'>var</span> <span class='nx'>fiddled</span> <span class='o'>=</span> <span class='nx'>fiddle</span><span class='p'>({</span> <span class='nx'>$inc</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>age</span><span class='o'>:</span><span class='mi'>1</span> <span class='p'>}</span> <span class='p'>},</span> <span class='kc'>null</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Craig&#39;</span><span class='p'>,</span> <span class='nx'>age</span><span class='o'>:</span> <span class='mi'>21</span> <span class='p'>});</span>
</code></pre>
</div>
<p>The results returned by <code>fiddle</code> can be filtered and otherwise iterated over.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/26/node-unix-ipc">Unix and Node: IPC</a></h2>
      <div class="meta">
        <span class="date">26 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/26/node-unix-ipc/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#unix">unix</a>
          
            <a href="/tags.html#ipc">ipc</a>
          
        </span>
      </div>
      <div class="preview">
        <p>This tutorial explores the world of inter-process communication (IPC) in Unix, and solutions for Node developers. IPC actually covers a broad swathe of methods, including POSIX signals and pipes, which we&#8217;ve already covered in this series. Here I&#8217;m only going to cover IPC methods that are based on sockets or Unix domain sockets.</p>

<h3 id='ipc'>IPC</h3>

<p>IPC enables structured data to be shared between processes. In terms of architecture, scaling software by creating smaller programs that communicate with each other using simple data formats fits in with the <a href='http://dailyjs.com/2012/02/09/unix-node/'>Unix philosophies mentioned previously in this series</a>. Additionally, it may be desirable to use established Unix-based IPC systems from within Node.</p>

<p>Beyond modularity and performance, IPC can also be used to restrict privileged access to certain resources. For example, a Node web application could run on a <em>registered port</em> (above 1023) which is generally accessible by ordinary user accounts. Then another program with additional privileges to access port 80 could proxy requests to it, thereby limiting access and potentially improving security.</p>

<p>It&#8217;s likely that contemporary developers that don&#8217;t come from a Unix background will already use IPC and RPC. Message queues in particular are very popular now &#8211; <a href='http://www.zeromq.org/'>ZeroMQ</a> can be configured to communicate locally using its <a href='http://api.zeromq.org/2-1:zmq-ipc'>IPC transport</a> that&#8217;s based on Unix domain sockets</p>

<h3 id='dbus'>D-Bus</h3>

<p><a href='http://www.freedesktop.org/wiki/Software/dbus'>D-Bus</a> supports many POSIX operating systems. It&#8217;s most closely associated with KDE, but can be installed on Mac OS, and there&#8217;s even a Windows port. It can use Unix or IP sockets.</p>

<p>D-Bus generally runs as a system-level daemon, and also as a session daemon:</p>

<blockquote>
<p>A GNOME environment normally runs two kinds of buses: a single system bus for miscellaneous system-wide communication, e.g. notifications when a new piece of hardware is hooked up; and a session bus used by a single user&#8217;s ongoing GNOME session.</p>
</blockquote>

<p>The two most popular Node implementations are <a href='https://github.com/Shouqun/node-dbus'>node-dbus</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/dbus'>dbus</a>) by Shouqun Liu, and <a href='https://github.com/Motorola-Mobility/node-dbus'>node-dbus</a> (License: <em>BSD</em>, npm: <a href='http://npmjs.org/package/node-dbus'>node-dbus</a>) from Motorola Mobility. They&#8217;re both built using C++ extensions that wrap around the <a href='http://dbus.freedesktop.org/doc/api/html/index.html'>libdbus</a> APIs.</p>

<p>It&#8217;s unlikely that D-Bus is (or will be) a popular solution for IPC with Node developers, but it does allow us to integrate more tightly with desktop environments. For example, if I use a GNOME music player that exposes services through D-Bus, I could write Node scripts that monitor what I&#8217;m listening to and post the data to Last.fm. Linux Journal has a general article on this topic that serves as a basic introduction: <a href='http://www.linuxjournal.com/article/10455?page=0,0'>Control Your Linux Desktop with D-Bus</a>.</p>

<h3 id='homegrown_ipc_and_rpc'>Homegrown IPC and RPC</h3>

<p>There are dozens of modules that provide IPC and RPC solutions that are aimed at Node developers without integrating with existing high-level Unix daemons.</p>

<p><a href='https://github.com/substack/dnode'>DNode</a> by James Halliday is one such example that works with Unix domain sockets, TCP streams, or WebSocket. It&#8217;s an RPC implementation that uses a newline-terminated JSON protocol which is documented in the <a href='https://github.com/substack/dnode-protocol'>dnode-protocol module</a>.</p>

<p>There&#8217;s also <a href='https://github.com/AndreasMadsen/thintalk'>thintalk</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/thintalk'>thintalk</a>) by Andreas Madsen that implements a lightweight RPC layer. It&#8217;s aimed at pure Node environments, unlike DNode which can be called from different programming languages and browsers.</p>

<p><a href='https://github.com/oleics/node-easy-ipc'>Easy IPC</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/easy-ipc'>easy-ipc</a>) by Oliver Leics is an event-based IPC implementation. It supports newline-terminated JSON streams, but can work with plain text as well.</p>

<h3 id='message_queuing'>Message Queuing</h3>

<p>The <a href='http://www.zeromq.org/'>ØMQ</a> messaging library is lightweight, high-performance, and asynchronous. The <a href='https://github.com/JustinTulloss/zeromq.node'>zmq</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/zmq'>zmq</a>) module by Justin Tulloss is a popular solution, with an idiomatic Node API.</p>

<p>ØMQ runs on Linux, Windows, and Mac OS, and specifically targets fast performance. In contemporary discussions on IPC, it&#8217;s often cited as a suitable alternative to legacy message brokers.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>IPC is an incredibly broad term that covers using files for communication, signals, sockets, message queues, pipes, shared memory, and pretty much everything else. I&#8217;m still searching for a quantum-entanglement IPC solution for Unix.</p>

<p>It&#8217;s therefore difficult to keep this discussion focused on Unix, particularly as modern systems like ØMQ will run just about anywhere. However, I hope that by mentioning D-Bus, Node hackers who run desktop systems like KDE or GNOME might be inspired to rewire their desktops in all kinds of creative ways.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/25/node-roundup">Node Roundup: node-webcl, node-webgl, node-glfw</a></h2>
      <div class="meta">
        <span class="date">25 Apr 2012</span>
        | <span class="author">By Mikael Bourges-Sevenier</span>
        | <span class="comments"><a href="/2012/04/25/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#webcl">webcl</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<p>Mikael Bourges-Sevenier has sent in three WebGL and WebCL modules that he&#8217;s written for Node. We&#8217;ll resume our regularly scheduled Node Roundup posts next week!</p>

<h3 id='nodewebcl'>node-webcl</h3>

<p>node-webcl (GitHub: <a href='https://github.com/Motorola-Mobility/node-webcl'>Motorola-Mobility / node-webcl</a>, License: <em>BSD</em>, npm: <a href='http://npmjs.org/package/node-webcl'>node-webcl</a>) from Motorola Mobility is an implementation of the <a href='https://cvs.khronos.org/svn/repos/registry/trunk/public/webcl/spec/latest/index.html'>Khronos WebCL working draft</a> using Node. It has been tested on Mac OS X 10.7 and Linux. It should also work on Windows 7. Its only dependency is node-webgl, another Node module that implements the WebGL standard.</p>

<p>The module contains various tests and sample applications to help developers leverage multiple CPU and GPU cores. It is also used as a tool to develop experimental features that may or may not be in the WebCL standard.</p>

<p>Installing node-webcl with npm will fetch node-webgl and node-glfw. Since they rely on native libraries, make sure they&#8217;re available:</p>

<ul>
<li><a href='http://freeimage.sourceforge.net'>freeimage</a></li>

<li><a href='http://glew.sourceforge.net/'>GLEW</a></li>

<li><a href='http://www.antisphere.com/Wiki/tools:anttweakbar'>AntTweakBar</a></li>
</ul>

<p>There are more details in the project&#8217;s readme. <a href='http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/'>Intel&#8217;s OpenCL SDK</a> can also be installed as a pure WebCL implementation, and be sure to check you&#8217;ve got the latest drivers installed for your graphics card.</p>

<h3 id='nodewebgl'>node-webgl</h3>

<p>node-webgl (GitHub: <a href='https://github.com/mikeseven/node-webgl'>mikeseven / node-webgl</a>, License: <em>BSD</em>, npm: <a href='http://npmjs.org/package/node-webgl'>node-webgl</a>) is an implementation of the <a href='https://www.khronos.org/registry/webgl/specs/1.0/'>Khronos WebGL specification</a>. This is a fork of Tim Caswell&#8217;s WebGL project that started life as <a href='http://nodeknockout.com/teams/minimason'>Blue GPU Lava</a> at Node Knockout.</p>

<p>This module allows WebGL applications originally created for browsers to run using Node on the desktop without modification. It provides support for DOM methods commonly used to create WebGL content.</p>

<p>Like node-webcl, this module has been tested with Mac OS X and Linux. It relies on GLEW, GLFW, and AntTweakBar. Lots of samples have been included &#8211; some show how to use AntTweakBar to create a compelling GUI.</p>

<h3 id='nodeglfw'>node-glfw</h3>

<p>Finally, node-glfw (GitHub: <a href='https://github.com/mikeseven/node-glfw'>mikeseven / node-glfw</a>, License: <em>BSD</em>, npm: <a href='http://npmjs.org/package/node-glfw'>node-glfw</a>) is a JavaScript wrapper around GLFW. This provides implementations, where possible, of WebGL methods on top of desktop OpenGL as well as a browser compliant event model.</p>

<p>Although this module will run on Node 0.6, at least 0.7.5 is recommended for the typed array support. This module is intended as a platform-level binding &#8211; node-webgl should be used to create OpenGL applications.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/24/jquery-roundup">jQuery Roundup: SelectBoxIt, jQuery Hooks, jQuery contextMenu</a></h2>
      <div class="meta">
        <span class="date">24 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/24/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#menus">menus</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='selectboxit'>SelectBoxIt</h3>

<p><img src='/images/posts/selectboxit.png' alt='SelectBoxIt screenshot' /></p>

<p><a href='http://www.selectboxit.com/'>SelectBoxIt</a> (GitHub: <a href='https://github.com/gfranko/jQuery.selectBoxIt.js'>gfranko / jQuery.selectBoxIt.js</a>, License: <em>MIT</em>) by Greg Franko is a select box replacement that uses progressive enhancement and has some notable features:</p>

<ul>
<li>Works with jQueryUI ThemeRoller</li>

<li>Supports jQuery and jQueryUI&#8217;s animations</li>

<li>ARIA support</li>
</ul>

<p>It also includes Jasmine tests: <a href='http://gregfranko.com/test/SpecRunner.html'>SelectBoxIt tests</a>.</p>

<p>The author has written a detailed post <a href='http://gregfranko.com/blog/introducing-the-jquery-plugin-selectboxit/'>documenting SelectBoxIt</a>, and the GitHub repository contains suitable CSS and images if you want to duplicate the style used in Greg&#8217;s examples.</p>

<h3 id='jquery_hooks'>jQuery Hooks</h3>

<p>In <a href='http://blog.rodneyrehm.de/archives/11-jQuery-Hooks.html'>jQuery Hooks</a>, Rodney Rehm discusses jQuery&#8217;s hooks feature. The <a href='http://api.jquery.com/jQuery.cssHooks/'>jQuery.cssHooks</a> documentation covers adding hooks to CSS getters and setters, but there are other hooks in jQuery&#8217;s code, for <code>.val()</code>, <code>.attr()</code>, and <code>.prop()</code>.</p>

<h3 id='jquery_contextmenu'>jQuery contextMenu</h3>

<p><a href='http://medialize.github.com/jQuery-contextMenu/'>jQuery contextMenu</a> (GitHub: <a href='https://github.com/medialize/jQuery-contextMenu'>medialize / jQuery-contextMenu</a>, License: <em>MIT and GPL3</em>) from Medialize GbR (and also by Rodney Rehm) helps create menus that appear when an element is right-clicked.</p>

<p>The authors have written lots of examples showing the flexibility of the plugin, including <a href='http://medialize.github.com/jQuery-contextMenu/demo/input.html'>using input elements</a>, <a href='http://medialize.github.com/jQuery-contextMenu/demo/dynamic.html'>dynamically adding new triggers</a>, and <a href='http://medialize.github.com/jQuery-contextMenu/demo/accesskeys.html'>access keys</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/23/krasota-drink-limit">Krasota.js, Drink, Limit.js</a></h2>
      <div class="meta">
        <span class="date">23 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/23/krasota-drink-limit/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#cli">cli</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='krasotajs'>Krasota.js</h3>

<p><a href='http://veged.github.com/krasota.js/'>Krasota.js</a> (GitHub: <a href='https://github.com/veged/krasota.js'>veged / krasota.js</a>, npm: <a href='http://npmjs.org/package/krasota'>krasota</a>) by Sergey Berezhnoy is a modular source beautifier that uses grammars written with a <a href='https://github.com/veged/ometa-js/'>fork of OMeta</a>. It can force semicolons, join or split <code>var</code> statements, or even remove trailing whitespace.</p>

<p>It can be used as a Node module, or as a command-line utility:</p>
<div class='highlight'><pre><code class='text'>$ krasota -i tests/join-vars.js -b krasota/lib/beautifiers/trailing-whitespaces -b krasota/lib/beautifiers/join-vars
</code></pre>
</div>
<p>Custom beautifiers can also be called from the command-line by using the <code>-b</code> switch with a file name.</p>

<h3 id='drink'>Drink</h3>

<p><a href='http://nijikokun.github.com/drink/'>Drink</a> (GitHub: <a href='https://github.com/Nijikokun/drink'>Nijikokun / drink</a>, License: <em>AOL/MIT</em>, npm: <a href='http://npmjs.org/package/drink'>drink</a>) by Nijiko Yonskai is a wrapper around <code>process</code> that helps write periodic console utilities. The API is themed around &#8220;coffee&#8221; &#8211; not CoffeeScript, but the brewed bean beverage, which is confusing because the author&#8217;s examples are written in CoffeeScript.</p>

<p>A session is started and potentially kept alive by passing <code>drink</code> a <code>process</code> object. Calling <code>sip</code> will pass data to <code>stir</code> without line breaks. Listeners for single character input can be added by calling <code>onTap</code>. The author suggests this could be used to keep any kind of session from dying, so it could be used with something like an IRC client.</p>

<h3 id='limitjs'>Limit.js</h3>

<p><a href='http://limit.gotsomething.com/'>Limit.js</a> (GitHub: <a href='https://github.com/m-gagne/limit.js'>m-gagne / limit.js</a>, License: <em>MIT</em>) by Marc Gagne is a reusable event debouncer. I&#8217;ve written similar code myself to sensibly handle certain client-side UI elements, and events like window resizing.</p>

<p>Marc&#8217;s implementation works by extending <code>Function.prototype</code>. There&#8217;s an example on jsFiddle that illustrates the usage: <a href='http://jsfiddle.net/zR5jV/1/'>Limit.js demo</a>.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>).</span><span class='nx'>bind</span><span class='p'>(</span><span class='s1'>&#39;mousemove&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='s2'>&quot;#debounce&quot;</span><span class='p'>).</span><span class='nx'>children</span><span class='p'>().</span><span class='nx'>last</span><span class='p'>().</span><span class='nx'>text</span><span class='p'>(</span><span class='nx'>debounceCalls</span><span class='o'>++</span><span class='p'>);</span>
<span class='p'>}.</span><span class='nx'>debounce</span><span class='p'>(</span><span class='mi'>150</span><span class='p'>));</span> <span class='c1'>// debounce with a 150 millisecond limit</span>

<span class='nx'>$</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>).</span><span class='nx'>bind</span><span class='p'>(</span><span class='s1'>&#39;mousemove&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='s2'>&quot;#throttle&quot;</span><span class='p'>).</span><span class='nx'>children</span><span class='p'>().</span><span class='nx'>last</span><span class='p'>().</span><span class='nx'>text</span><span class='p'>(</span><span class='nx'>throttleCalls</span><span class='o'>++</span><span class='p'>);</span>
<span class='p'>}.</span><span class='nx'>throttle</span><span class='p'>(</span><span class='mi'>150</span><span class='p'>));</span> <span class='c1'>// throttle with a 150 millisecond limit</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/20/reznik-jsqa-events">Reznik, JSQA, Riloadr</a></h2>
      <div class="meta">
        <span class="date">20 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/20/reznik-jsqa-events/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#amd">amd</a>
          
            <a href="/tags.html#images">images</a>
          
            <a href="/tags.html#responsive">responsive</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='reznik'>Reznik</h3>

<p><a href='https://github.com/alexlawrence/reznik'>Reznik</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/reznik'>reznik</a>) by Alex Lawrence is a code analysis tool for <a href='https://github.com/amdjs/amdjs-api/wiki/AMD'>AMD</a> projects. Given a set of AMD modules, Reznik&#8217;s server-side component can resolve individual module dependencies on demand. It builds a module list, and then checks the code for circular or missing dependencies.</p>

<p>The author notes that Reznik was developed in Node, but also works in <a href='http://phantomjs.org/'>PhantomJS</a>. There&#8217;s a command-line tool that can run under either of these environments and output module lists using various formats, including HTML and JSON.</p>

<h3 id='jsqa'>JSQA</h3>

<p><a href='https://github.com/PaquitoSoft/JSQA'>JSQA</a> from PaquitoSoft uses <a href='http://www.jshint.com/'>JSHint</a> to statically analyse your code using an Express/Bootstrap-powered web application. It uses <a href='http://socket.io/'>Socket.IO</a> and <code>fs.watch</code> or <code>fs.watchFile</code> so changes to source files are updated dynamically.</p>

<p>The <code>lib/config.js</code> file must be edited to include a path to a suitable JavaScript project.</p>

<h3 id='riloadr'>Riloadr</h3>

<p><a href='https://github.com/tubalmartin/riloadr'>Riloadr</a> (License: <em>MIT</em>) by Túbal Martín is a cross-browser, framework-independent responsive image loader. The library supports quite a few options, but basic usage involves specifying &#8220;breakpoints&#8221; for loading the right images based on the viewport&#8217;s size:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>group1</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Riloadr</span><span class='p'>({</span>
  <span class='nx'>breakpoints</span><span class='o'>:</span> <span class='p'>[</span>
    <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;320px&#39;</span><span class='p'>,</span> <span class='nx'>maxWidth</span><span class='o'>:</span> <span class='mi'>320</span> <span class='p'>},</span> <span class='c1'>// iPhone 3</span>
    <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;640px&#39;</span><span class='p'>,</span> <span class='nx'>maxWidth</span><span class='o'>:</span> <span class='mi'>320</span><span class='p'>,</span> <span class='nx'>minDevicePixelRatio</span><span class='o'>:</span> <span class='mi'>2</span> <span class='p'>},</span> <span class='c1'>// iPhone 4 Retina display</span>
    <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;640px&#39;</span><span class='p'>,</span> <span class='nx'>minWidth</span><span class='o'>:</span> <span class='mi'>321</span><span class='p'>,</span> <span class='nx'>maxWidth</span><span class='o'>:</span> <span class='mi'>640</span> <span class='p'>},</span>
    <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;1024px&#39;</span><span class='p'>,</span> <span class='nx'>minWidth</span><span class='o'>:</span> <span class='mi'>641</span> <span class='p'>}</span>
  <span class='p'>]</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>As this example demonstrates, Riloadr is a useful library for supporting high-density displays.</p>

<blockquote>
<p>When Riloadr parses your <code>breakpoints</code> it mimics CSS behavior: Riloadr computes the browser&#8217;s viewport width in CSS pixels, then traverses your breakpoints to find out the appropiate image size to load and makes use of your breakpoint names to get the correct <code>src</code> (image URL) to load the image.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/19/semicolons">JavaScript and Semicolons</a></h2>
      <div class="meta">
        <span class="date">19 Apr 2012</span>
        | <span class="author">By Rod Vagg</span>
        | <span class="comments"><a href="/2012/04/19/semicolons/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#ECMAScript">ECMAScript</a>
          
            <a href="/tags.html#ASI">ASI</a>
          
        </span>
      </div>
      <div class="preview">
        <h2 id='introduction'>Introduction</h2>

<p>In syntax terms, JavaScript is in the broad C-family of languages. The C-family is diverse and includes languages such as C (obviously), C++, Objective-C, Perl, Java, C# and the newer Go from Google and Rust from Mozilla. Common themes in these languages include:</p>

<ul>
<li>The use of curly braces to surround blocks.</li>

<li>The general insignificance of white space (spaces, tabs, new lines) except in very limited cases. Indentation is optional and is therefore a matter of style and preference, plus programs can be written on as few or as many lines as you want.</li>

<li>The use of semicolons to end statements, expressions and other constructs. Semicolons become the delimiter that the new line character is in white-space-significant languages.</li>
</ul>

<p>JavaScript&#8217;s rules for curly braces, white space and semicolons are consistent with the C-family and its formal specification, known as the ECMAScript Language Specification makes this clear:</p>

<blockquote>
<p>Certain ECMAScript statements (empty statement, variable statement, expression statement, do-while statement, continue statement, break statement, return statement, and throw statement) must be terminated with semicolons.</p>
</blockquote>

<p>But it doesn&#8217;t end there&#8211;JavaScript introduces what&#8217;s known as <strong>Automatic Semicolon Insertion (ASI)</strong>. The specification continues:</p>

<blockquote>
<p>Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.</p>
</blockquote>

<p>The general C-family rules for semicolons can be found in most teaching material for JavaScript and has been advocated by most of the prominent JavaScript personalities since 1995. In a <a href='https://brendaneich.com/2012/04/the-infernal-semicolon/'>recent post</a>, JavaScript&#8217;s inventor, Brendan Eich, described ASI as &#8220;a syntactic error correction procedure&#8221;, (as in <a href='https://brendaneich.com/2012/04/the-infernal-semicolon/#comment-12268'>&#8220;parsing error&#8221;</a>, rather than &#8220;user error&#8221;).</p>

<h2 id='recent_developments'>Recent Developments</h2>

<p>There has been a growing trend in the last few years toward the omission semicolons, in some cases totally avoiding them. Perhaps largely inspired by the likes of CoffeeScript and Ruby where semicolons are used only if you want to chain multiple statements on a single line. This view of semicolons could perhaps be summarised as: the semicolon character is optional in most situations and therefore introduces unnecessary syntactic noise&#8211;unnecessary syntax can (and maybe <em>should</em>) be avoided.</p>

<p>Unfortunately the division between the semicolon and semicolon-free crowd has become very pronounced and is leading to some angry exchanges. A recent lightning rod for semicolon-related <a href='https://news.ycombinator.com/item?id=3584635'>controversy</a> is the most watched project on GitHub, <a href='https://github.com/twitter/bootstrap'>Twitter&#8217;s Bootstrap</a> and the author of its JavaScript code, <a href='https://twitter.com/fat'>Jacob Thornton</a> who is a <a href='http://wordsbyf.at/2011/10/31/i-dont-write-javascript/'>convert</a> to the semicolon-free camp.</p>

<p>A <a href='https://github.com/twitter/bootstrap/issues/3057'>short exchange</a> this weekend on GitHub between Thornton and a cranky Douglas Crockford (author of perhaps the most-read JavaScript book, <a href='http://shop.oreilly.com/product/9780596517748.do'>JavaScript: The Good Parts</a>) erupted, on GitHub, Twitter and across the Internet.</p>

<p>The initial issue was a request for the addition of a semicolon in order to assist Crockford&#8217;s JavaScript minifier tool, <a href='http://www.crockford.com/javascript/jsmin.html'>JSMin</a>, to properly compress the code. Like Crockford&#8217;s other popular JavaScript tool, <a href='http://www.jslint.com/'>JSLint</a>, JSMin follows his rigid view of what the best parts of JavaScript are and reject the other, bad, parts, including treating semicolons as optional.</p>

<p>Crockford, after reviewing the code in question stated:</p>

<blockquote>
<p>That is insanely stupid code. I am not going to dumb down JSMin for this case.</p>
</blockquote>

<p>&#8230;</p>

<blockquote>
<p>Learn to use semicolons properly. ! is not intended to be a statement separator. ; is.</p>
</blockquote>

<p>To which Thornton replied:</p>

<blockquote>
<p>i have learned to use them, that&#8217;s why there isn&#8217;t one present.</p>
</blockquote>

<p>Rather than continue the debate, perhaps it&#8217;s best to review the rules surrounding semicolons in JavaScript so we can make informed decisions about our own coding style preference and we can learn to contend with code produced by programmers who have other preferences.</p>

<p><em>As an aside, it should be noted that both <a href='https://github.com/twitter/bootstrap/blob/2.0.3-wip/js/bootstrap-dropdown.js#L63'>Bootstrap</a> and <a href='https://github.com/douglascrockford/JSMin/commit/5ca277ea452beae1c25db3bc0ef5c81309a3daf4#jsmin.c'>JSMin</a> have been patched to resolve the relevant issues in both.</em></p>

<h2 id='rules_of_asi'>Rules of ASI</h2>

<p>The ECMAScript Language Specification deals with ASI in section 7.8 of editions <a href='http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%201st%20edition,%20June%201997.pdf'>1 (PDF)</a> and <a href='http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%202nd%20edition,%20August%201998.pdf'>2 (PDF)</a> and section 7.9 of editions <a href='http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf'>3 (PDF)</a>, <a href='http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%205th%20edition%20December%202009.pdf'>5 (PDF)</a> and the current drafts of <a href='http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts'>edition 6</a>. The text has stayed roughly the same through the different editions except for the inclusion of <code>continue</code>, <code>break</code> and <code>throw</code> statements in special cases that previously just applied to <code>return</code>. More on this below.</p>

<p>Simply put, the first basic rule of ASI is:</p>

<ul>
<li><strong>If the parser encounters a new line or curly brace, and it is used to break up tokens that otherwise don&#8217;t belong together, then it will insert a semicolon.</strong></li>
</ul>

<p>The new line character is the one most commonly used in taking advantage of ASI so we&#8217;ll restrict ourselves mainly to this case. The most common situation where you&#8217;ll see curly brace ASI occurring is in code such as: <code>if (foo) { bar++ }</code>. It should be noted, however, that you <em>could</em> surround all your statements, expressions, etc. in curly braces if you wanted to avoid semicolons, i.e. place everything in its own <em>block</em>; although this offers limited help in achieving the kinds of goals that the semicolon-free crowd advocate.</p>

<p>So, as a beginning example, the code:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span>
<span class='nx'>foo</span><span class='p'>()</span>
</code></pre>
</div>
<p>has ASI applied because stringing the tokens together without the new line doesn&#8217;t help. Otherwise, it would be interpreted as <code>c foo()</code> which isn&#8217;t correct. The parser makes it look like this internally:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span><span class='p'>;</span>
<span class='nx'>foo</span><span class='p'>()</span>

<span class='c1'>// or</span>

<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span><span class='p'>;</span> <span class='nx'>foo</span><span class='p'>()</span>
</code></pre>
</div>
<p>But here we find the most important alleged problems with taking advantage of ASI in your coding style. The important part of the first rule of ASI is that it will <strong>only apply if the parser needs to do so in order to make sense of the code in question</strong>. Consider the following code:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// example 1</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span>
<span class='p'>[</span><span class='mi'>1</span><span class='p'>].</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>)</span>

<span class='c1'>// example 2</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span>
<span class='p'>(</span><span class='nx'>options</span> <span class='o'>||</span> <span class='p'>{}).</span><span class='nx'>foo</span> <span class='o'>?</span> <span class='nx'>bar</span><span class='p'>()</span> <span class='o'>:</span> <span class='nx'>baz</span><span class='p'>()</span>
</code></pre>
</div>
<p>In both of these cases, the parser doesn&#8217;t need to apply ASI in order to have properly formed code. In the first example, it can ignore the new line and treat the <code>[</code> as applying to <code>c</code>, likewise in the second example, the <code>(</code> can apply to <code>c</code>. So we would end up running something quite different than we might be trying to achieve:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// example 1</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>].</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>)</span>
<span class='c1'>// i.e. fetch the first element of &#39;c&#39; and execute the &#39;push&#39; function on what it finds</span>

<span class='c1'>// example 2</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span><span class='p'>(</span><span class='nx'>options</span> <span class='o'>||</span> <span class='p'>{}).</span><span class='nx'>foo</span> <span class='o'>?</span> <span class='nx'>bar</span><span class='p'>()</span> <span class='o'>:</span> <span class='nx'>baz</span><span class='p'>()</span>
<span class='c1'>// i.e. execute &#39;c&#39; as a function and check for the existence of the property &#39;foo&#39; on the returned object</span>
</code></pre>
</div>
<p>Moving on in the language specification, there are a few of special cases:</p>

<ul>
<li><strong>ASI is never performed if it would result in an &#8220;empty statement&#8221;.</strong></li>
</ul>

<p>Empty statements ordinarily look like this (note the semicolons, there&#8217;s a statement there, it&#8217;s just &#8220;empty&#8221;):</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>for</span> <span class='p'>(</span><span class='nx'>counter</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>counter</span> <span class='o'>&lt;</span> <span class='nx'>something</span><span class='p'>();</span> <span class='nx'>counter</span><span class='o'>++</span><span class='p'>);</span>
<span class='c1'>// or</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>condition</span><span class='p'>);</span>
<span class='k'>else</span> <span class='p'>{</span>
  <span class='nx'>doSomething</span><span class='p'>();</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This is perfectly legal JavaScript and may even be useful in certain situations. However, ASI will never help you achieve this so if you have constructs that would lead to empty statements (if there were semicolons) then you&#8217;ll simply get an error:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='nx'>condition</span><span class='p'>)</span>
<span class='k'>else</span> <span class='p'>{</span>
  <span class='nx'>doSomething</span><span class='p'>();</span>
<span class='p'>}</span>
</code></pre>
</div>
<ul>
<li><strong>ASI is not performed within the head of a <code>for</code> loop, where semicolons are an integral part of the construct.</strong></li>
</ul>

<p>So no ASI is applied in cases such as:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>a</span><span class='p'>.</span><span class='nx'>length</span>
  <span class='p'>;</span><span class='nx'>i</span><span class='o'>++</span>
  <span class='p'>)</span>
<span class='p'>...</span>
<span class='c1'>// may as well be written as:</span>
<span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>a</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>...</span>
</code></pre>
</div>
<ul>
<li><strong>ASI is performed if the parser reaches the end of a file and a semicolon will help the code make sense. In other words, even if you don&#8217;t have a new line at the end of your file, it will perform ASI in the same way as if there was one.</strong></li>
</ul>

<p>There is one final rule in the language specification regarding ASI. This rule overrides the first rule in some special cases, called &#8220;restricted productions&#8221;. I&#8217;ll split this rule into two to separate out an uncommon case with a much more common case.</p>

<ul>
<li><strong>ASI is <em>always</em> performed on code where a new line character comes <em>before</em> a <code>--</code> or a <code>++</code>, even where removing the new line character would still make a valid construct.</strong></li>
</ul>

<p>This rule is arguably not so important to understand or remember because it doesn&#8217;t affect code that the majority of programmers would write. Consider the following program where each section contains identical sequence of &#8216;tokens&#8217; except for the semicolons and white space characters. Try to predict the output for yourself:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>,</span> <span class='nx'>c</span><span class='p'>;</span>

<span class='c1'>// 1) plain</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>c</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span> <span class='nx'>a</span><span class='o'>++</span><span class='p'>;</span> <span class='nx'>b</span><span class='o'>--</span><span class='p'>;</span> <span class='nx'>c</span><span class='p'>;</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;1)&#39;</span><span class='p'>,</span> <span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>,</span> <span class='nx'>c</span><span class='p'>)</span>

<span class='c1'>// 2) extra spaces</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>c</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span> <span class='nx'>a</span> <span class='o'>++</span> <span class='p'>;</span> <span class='nx'>b</span> <span class='o'>--</span> <span class='p'>;</span> <span class='nx'>c</span><span class='p'>;</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;2)&#39;</span><span class='p'>,</span> <span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>,</span> <span class='nx'>c</span><span class='p'>)</span>

<span class='c1'>// 3) new lines v1</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>c</span> <span class='o'>=</span> <span class='mi'>1</span>
<span class='nx'>a</span> <span class='o'>++</span>
<span class='nx'>b</span> <span class='o'>--</span>
<span class='nx'>c</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;3)&#39;</span><span class='p'>,</span> <span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>,</span> <span class='nx'>c</span><span class='p'>)</span>

<span class='c1'>// 4) new lines v2</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>c</span> <span class='o'>=</span> <span class='mi'>1</span>
<span class='nx'>a</span>
<span class='o'>++</span> <span class='nx'>b</span>
<span class='o'>--</span> <span class='nx'>c</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;4)&#39;</span><span class='p'>,</span> <span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>,</span> <span class='nx'>c</span><span class='p'>)</span>

<span class='c1'>// 5) new lines v3</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>c</span> <span class='o'>=</span> <span class='mi'>1</span>
<span class='nx'>a</span>
<span class='o'>++</span>
<span class='nx'>b</span>
<span class='o'>--</span>
<span class='nx'>c</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;5)&#39;</span><span class='p'>,</span> <span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>,</span> <span class='nx'>c</span><span class='p'>)</span>
</code></pre>
</div>
<p>As per our ASI rule, even though the new line character doesn&#8217;t interrupt a valid code construct (<code>a ++</code> would be the same as <code>a\n++</code> in most C-family languages), the parser will always insert a semicolon when it encounters a <code>++</code> or <code>--</code> after a new line character. So instead of being <em>postfix</em> operators as in <code>a++</code> and <code>b--</code>, they become <em>prefix</em> operators on the next variables in the token stream: <code>++b</code> and <code>--c</code>.</p>

<p>The output from the above program is:</p>
<div class='highlight'><pre><code class='text'>1) 2 0 1
2) 2 0 1
3) 2 0 1
4) 1 2 0
5) 1 2 0
</code></pre>
</div>
<p>The simple moral here is to follow standard C-family coding practice and keep your <em>postfix</em> and <em>prefix</em> operators attached to the variables they are applied to.</p>

<p>The second part of the final rule is more relevant as it can conflict with what you might encounter in standard C-family programs:</p>

<ul>
<li><strong>ASI is <em>always</em> performed where new line characters follow directly after any of the following statements: <code>continue</code>, <code>break</code>, <code>return</code> and <code>throw</code>.</strong></li>
</ul>

<p>While not common, both <code>continue</code> and <code>break</code> can be followed by a <em>label</em>, indicating where to jump to (labels with these two statements are the less &#8216;evil&#8217; cousins of the much maligned <code>goto</code> found in many other languages). If you intend for the program to jump to a label then you <strong>must not</strong> separate the label from the <code>continue</code> or <code>break</code> by a new line character:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>continue</span>
<span class='nx'>foo</span>
<span class='c1'>// not the same as:</span>
<span class='k'>continue</span> <span class='nx'>foo</span><span class='p'>;</span>
<span class='c1'>// actually interpreted as:</span>
<span class='k'>continue</span><span class='p'>;</span>
<span class='nx'>foo</span><span class='p'>;</span>

<span class='k'>break</span>
<span class='nx'>baz</span>
<span class='c1'>// not the same as:</span>
<span class='k'>break</span> <span class='nx'>foo</span><span class='p'>;</span>
<span class='c1'>// actually interpreted as:</span>
<span class='k'>break</span><span class='p'>;</span>
<span class='nx'>baz</span><span class='p'>;</span>
</code></pre>
</div>
<p>The <code>return</code> and <code>throw</code> rules are much more interesting because, like the first rule of ASI, it can lead to non-obvious problems in common code. Generally, a stand-alone <code>throw</code> statement will lead to parse errors, so you should find out fairly quickly that this code is no good because you&#8217;ll get some kind of parse error:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>throw</span>
  <span class='k'>new</span> <span class='nb'>Error</span><span class='p'>(</span><span class='s1'>&#39;Aieee!&#39;</span><span class='p'>)</span>
<span class='c1'>// interpreted as:</span>
<span class='k'>throw</span><span class='p'>;</span>
<span class='k'>new</span> <span class='nb'>Error</span><span class='p'>(</span><span class='s1'>&#39;Aieee!&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>If you have a long line of code containing a <code>throw</code> statement and you wanted to improve readability by using new line characters. You <strong>cannot</strong> insert the new line straight after the <code>throw</code> or you&#8217;ll end up with invalid code, i.e. a <code>throw</code> that doesn&#8217;t have anything to <em>throw</em>. You&#8217;ll have to rewrite your code or find a different place to introduce the new line character that fits your coding style. For example:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>throw</span> <span class='k'>new</span> <span class='nb'>Error</span><span class='p'>(</span>
  <span class='s1'>&#39;Aieee!&#39;</span>
<span class='p'>)</span>
</code></pre>
</div>
<p>The most commonly used of the four statements we are considering is <code>return</code>. It is quite common to try and append a complex series of tokens to a <code>return</code> statement or even use <code>return</code> as an &#8216;early return&#8217; from a function, sometimes leading to long lines that we may be tempted to break up with new lines. Consider:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// a common Node construct, an &#39;early return&#39; after a callback upon receiving an error:</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
 <span class='k'>return</span>
   <span class='nx'>callback</span><span class='p'>(</span><span class='s1'>&#39;Error while processing something that takes a lot of words to describe: &#39;</span> <span class='o'>+</span> <span class='nx'>err</span><span class='p'>)</span>
<span class='p'>}</span>
<span class='nx'>somethingElseHere</span><span class='p'>()</span>
</code></pre>
</div>
<p>As per the ASI rule, the new line character directly following the <code>return</code> leads to the insertion of a semicolon so we actually end up with our &#8216;early return&#8217; being a bit too early and our function call becomes dead code. The above code is interpreted as something that is clearly not intended:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
 <span class='k'>return</span><span class='p'>;</span>
 <span class='nx'>callback</span><span class='p'>(</span><span class='s1'>&#39;Error while processing something that takes a lot of words to describe: &#39;</span> <span class='o'>+</span> <span class='nx'>err</span><span class='p'>);</span>
<span class='p'>}</span>
<span class='nx'>somethingElseHere</span><span class='p'>();</span>
</code></pre>
</div>
<p>The impact of ASI on this type of code is particularly sinister because it can be difficult to pick up. We were not intending to use <code>return</code> to actually return a value, but to halt execution of the current block. We&#8217;re not going to be <em>needing</em> or perhaps even <em>using</em> a return value from the containing function&#8211;discovering the error will need <code>somethingElseHere()</code> to have obvious side-effects, which is not always the case.</p>

<p>The same ASI procedure occurs when we try to fit too much into our return value and are tempted to break it up with new lines:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='nx'>foo</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span>
    <span class='p'>(</span><span class='nx'>something</span> <span class='o'>+</span> <span class='nx'>complex</span><span class='p'>())</span> <span class='o'>-</span> <span class='p'>(</span><span class='nx'>enough</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span> <span class='o'>/</span> <span class='nx'>to</span><span class='p'>)</span> <span class='o'>&lt;&lt;</span> <span class='nx'>tempt</span> <span class='o'>+</span> <span class='nx'>us</span><span class='p'>(</span><span class='nx'>to</span> <span class='o'>-</span> <span class='nx'>linebreak</span><span class='p'>)</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>It&#8217;s clear here that we&#8217;re intending to return a value calculated by the long code string and we&#8217;ve attempted to improve readability by breaking it up with new line characters, or perhaps you have a vertical line in your editor that tempts you to do this kind of breaking.</p>

<p>We end up with an empty return and some dead code:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='nx'>foo</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span><span class='p'>;</span>
  <span class='p'>(</span><span class='nx'>something</span> <span class='o'>+</span> <span class='nx'>complex</span><span class='p'>())</span> <span class='o'>-</span> <span class='p'>(</span><span class='nx'>enough</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span> <span class='o'>/</span> <span class='nx'>to</span><span class='p'>)</span> <span class='o'>&lt;&lt;</span> <span class='nx'>tempt</span> <span class='o'>+</span> <span class='nx'>us</span><span class='p'>(</span><span class='nx'>to</span> <span class='o'>-</span> <span class='nx'>linebreak</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>It&#8217;s important to remember that if you need to have long lines of code beginning with a <code>return</code> then you can&#8217;t start with a new line straight after the <code>return</code>, you&#8217;re going to have to find somewhere else to break if you really must break&#8211;or even better, avoid long <code>return</code> lines completely.</p>

<h2 id='gentle_advice'>Gentle Advice</h2>

<p>It should be clear, particularly from the last rule outlined above, that <strong>we don&#8217;t need to be following a semicolon-free coding style to fall foul of JavaScript&#8217;s ASI feature</strong>. Perfectly innocent line breaking can lead to semicolons being inserted into our token stream without our permissions so it&#8217;s important to be aware of the kinds of situations where this can happen. Much of the recent debate about semicolons misses this point. Additionally, love or hate ASI, it&#8217;s with us and is not going away so perhaps it would be more productive to embrace it as a feature and use it where it suits us and work around it where it doesn&#8217;t.</p>

<p>Regardless of your preference, ASI and other obscure rules in non-trivial languages such as JavaScript mean that our build tools should involve some kind of syntax checking mechanism. Strongly-typed languages such as Java have sophisticated editors that can understand the intent of your code and provide real-time feedback as you type. It&#8217;s a little more complex in JavaScript but we do have <em>excellent</em> tools that can analyse our code and point out potential problems or code style that may lead to common hazards.</p>

<p><a href='http://www.jslint.com/'>JSLint</a> by Douglas Crockford is perhaps the best known syntax checking tool available for JavaScript. It will encourage you to follow Crockford&#8217;s personal coding style, which he believes leads to fewer syntax-related errors.</p>

<p><a href='http://www.jshint.com/'>JSHint</a> was developed as a much-less-opinionated alternative to JSLint. It has many options that let you tailor it to your personal preferences while still steering you away from potential errors, ASI-related and other.</p>

<p>These tools can be run across source files at build time (via a Makefile or as part of your test runner for example), or embedded directly in the text editors most commonly used by JavaScript programmers. Vim, TextMate and SublimeText all have ways of running JSLint or JSHint as you edit, providing quick feedback on any potential code problems. Even the most experienced JavaScript developers can bump into occasional ASI-related problems, having build tools that can point us in the right direction is just common sense.</p>

<h3 id='semicolonfree_best_practice'>Semicolon-free Best Practice</h3>

<p>If you lean towards a semicolon-free style, there are some well-established conventions that can help produce less error-prone code. One of the largest JavaScript projects following a semicolon-free style is <a href='http://npmjs.org/'>npm</a> by Isaac Schlueter who is now lead developer of the NodeJS project. npm is Node&#8217;s package manager and the code has a very particular <a href='http://npmjs.org/doc/coding-style.html'>coding style</a> that is followed by many who advocate semicolon-free. Aside from minimal use of semicolons, this style is also characterised by <em>comma-first</em>, putting the emphasis on putting necessary syntax at the beginning of lines rather than at the end, where they can be easily overlooked.</p>

<p>To alleviate problems caused by ASI, Isaac advocates inserting a <em>leading semicolon</em> on lines that begin with syntax that could be interpreted as following on from the previous line. In particular the <code>[</code> and <code>(</code> characters. Our examples above involving these two characters can be rewritten as:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// example 1</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span>
<span class='p'>;[</span><span class='mi'>1</span><span class='p'>].</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>)</span>

<span class='c1'>// example 2</span>
<span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>b</span> <span class='o'>+</span> <span class='nx'>c</span>
<span class='p'>;(</span><span class='nx'>options</span> <span class='o'>||</span> <span class='p'>{}).</span><span class='nx'>foo</span> <span class='o'>?</span> <span class='nx'>bar</span><span class='p'>()</span> <span class='o'>:</span> <span class='nx'>baz</span><span class='p'>()</span>
</code></pre>
</div>
<p>By placing semicolons and commas at the beginning of the line, we elevate their importance in the token stream and potentially assist our own brains in identifying problems. Isaac has a <a href='http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding'>great post</a> dealing with this and other ASI issues.</p>

<p>Lastly, let&#8217;s try and keep things in perspective. The JavaScript community has generated a lot of heat over a single, humble, character. There are bigger mountains to climb and we would be better off expending all that energy on building awesome things!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/18/node-roundup">Node Roundup: OneJS, node-pad, CouchPress, node-linq</a></h2>
      <div class="meta">
        <span class="date">18 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/18/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#databases">databases</a>
          
            <a href="/tags.html#couchdb">couchdb</a>
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#linq">linq</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='onejs'>OneJS</h3>

<p><a href='https://github.com/azer/onejs'>OneJS</a> (npm: <a href='http://npmjs.org/package/one'>one</a>) by Azer Koculu is a command-line utility for converting CommonJS-style packages to browser-friendly JavaScript. It provides Node-compatible APIs, and the output can also be run with Node if required.</p>

<p>All it needs is a suitable <code>package.json</code> file:</p>
<div class='highlight'><pre><code class='text'>$ onejs build package.json bundle.js
</code></pre>
</div>
<p>Some of Node&#8217;s standard library is technically supported by most browsers, and OneJS supports this by providing the <code>install</code> command:</p>
<div class='highlight'><pre><code class='text'>$ onejs install assert
</code></pre>
</div>
<p>This will create a module in <code>./node_modules/assert/</code> with a <code>package.json</code> and a OneJS version of Node&#8217;s <code>assert</code> module.</p>

<p>Azer said he created this project for <a href='http://multiplayerchess.com/'>Multiplayer Chess</a>, which is a web-based chess game that supports up to 25 players.</p>

<h3 id='nodepad'>node-pad</h3>

<p>Do you like <a href='http://www.idlethumbs.net/'>video games</a>, or at least the DualShock 3 controller? <a href='https://github.com/andtan/node-pad'>node-pad</a> (npm: <a href='http://npmjs.org/package/node-pad'>node-pad</a>) by Andre Tangen is a game controller library that currently supports Sony&#8217;s controller:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>controller</span><span class='p'>.</span><span class='nx'>rthumb</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;move&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>event</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>player</span><span class='p'>.</span><span class='nx'>updateCameraDirection</span><span class='p'>({</span>
    <span class='nx'>x</span><span class='o'>:</span> <span class='nx'>event</span><span class='p'>.</span><span class='nx'>x</span>
  <span class='p'>,</span> <span class='nx'>y</span><span class='o'>:</span> <span class='nx'>event</span><span class='p'>.</span><span class='nx'>y</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The author has included <a href='http://pivotal.github.com/jasmine/'>Jasmine</a> tests, and the project depends on Andre&#8217;s <a href='https://github.com/andtan/node-hid'>node-hid</a> fork which is built using <code>node-waf</code>.</p>

<h3 id='couchpress'>CouchPress</h3>

<p><a href='http://couchpress.nodester.com/'>CouchPress</a> (GitHub: <a href='https://github.com/koostudios/couchpress'>koostudios / couchpress</a>, License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/couchpress'>couchpress</a>) by Alexander Yuen is a CouchDB and Express-based publishing platform. It&#8217;s currently very simple, but includes a minimal administration interface, a WYSIWYG editor, and the beginnings of a theming engine.</p>

<p>The author is planning on adding a Markdown editor, and support for plugins. He&#8217;s very open to suggestions, so if you&#8217;re interested in supporting a Node-based CMS then try getting in touch with him. Contact details are available in his 0.1 announcement post: <a href='http://couchpress.nodester.com/view/announcing-version-0.1'>CouchPress: Announcing Version 0.1</a>.</p>

<h3 id='nodelinq'>node-linq</h3>

<p><a href='https://github.com/wearefractal/node-linq'>node-linq</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/node-linq'>node-linq</a>) from Fractal is a LINQ implementation for node:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='p'>{</span><span class='nx'>LINQ</span><span class='p'>}</span> <span class='o'>=</span> <span class='nx'>require</span> <span class='s'>&#39;node-linq&#39;</span>
<span class='nv'>fs = </span><span class='nx'>require</span> <span class='s'>&#39;fs&#39;</span>
<span class='p'>{</span><span class='nx'>extname</span><span class='p'>}</span> <span class='o'>=</span> <span class='nx'>require</span> <span class='s'>&#39;path&#39;</span>

<span class='nv'>files = </span><span class='p'>[</span><span class='s'>&#39;test.txt&#39;</span><span class='p'>,</span> <span class='s'>&#39;choni.txt&#39;</span><span class='p'>,</span> <span class='s'>&#39;legacy.zip&#39;</span><span class='p'>,</span> <span class='s'>&#39;secrets.txt&#39;</span><span class='p'>,</span> <span class='s'>&#39;etc.rar&#39;</span><span class='p'>]</span>

<span class='nv'>arr = </span><span class='k'>new</span> <span class='nx'>LINQ</span><span class='p'>(</span><span class='nx'>files</span><span class='p'>)</span>
<span class='p'>.</span><span class='nx'>Where</span><span class='p'>(</span><span class='nf'>(file) -&gt;</span> <span class='nx'>extname</span><span class='p'>(</span><span class='nx'>file</span><span class='p'>)</span> <span class='o'>is</span> <span class='s'>&#39;txt&#39;</span><span class='p'>)</span>
<span class='p'>.</span><span class='nx'>OrderBy</span><span class='p'>(</span><span class='nf'>(file) -&gt;</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>lstatSync</span><span class='p'>(</span><span class='nx'>file</span><span class='p'>).</span><span class='nx'>mtime</span><span class='p'>)</span>
<span class='p'>.</span><span class='nx'>ToArray</span><span class='p'>()</span>

<span class='c1'># arr == [ &#39;choni.txt&#39;,  &#39;text.txt&#39;, &#39;secrets.txt&#39;]</span>
</code></pre>
</div>
<p>It also supports Asynchronous LINQ. The readme has examples, and there are <a href='http://visionmedia.github.com/mocha/'>Mocha</a> tests.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/17/jquery-roundup">jQuery Roundup: Touch Patents, Standalone Deferred, Mailcheck.js</a></h2>
      <div class="meta">
        <span class="date">17 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/17/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#touch">touch</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
            <a href="/tags.html#promises">promises</a>
          
            <a href="/tags.html#email">email</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='touch_patents'>Touch Patents</h3>

<p>In <a href='http://blog.jquery.com/2012/04/10/getting-touchy-about-patents/'>Getting Touchy About Patents</a> on the official jQuery blog, the relationship between Apple and W3C&#8217;s efforts to standardise touch events is discussed. At the end of the aritcle, there are several calls to action, some of which DailyJS readers can help with:</p>

<blockquote>
<p>We would also encourage the community to experiment with Touch and MSPointer. Play with the APIs, build apps, and provide feedback.</p>
</blockquote>

<blockquote>
<p>If you know of any prior art for multi-touch/touch lists, even outside of the Web, please <a href='http://lists.w3.org/Archives/Public/public-webevents/'>get in touch with the W3C</a>.</p>
</blockquote>

<p>The distinctions between pointer events and touch events are also explored. This comment in particular is interesting:</p>

<blockquote>
<p>It&#8217;s conceivable that in a few years developers could use Pointer Events as the only event model for pointers, leaving Mouse Events as a thing of the past.</p>
</blockquote>

<h3 id='standalone_deferred'>Standalone Deferred</h3>

<p><a href='https://github.com/Mumakil/Standalone-Deferred'>Standalone Deferred</a> (License: <em>MIT</em>) by Otto Vehviläinen is a standalone implementation of <a href='http://api.jquery.com/category/deferred-object/'>jQuery.Deferred</a>. The <code>Deferred</code> object is a chainable API based on the <a href='http://wiki.commonjs.org/wiki/Promises/A'>CommonJS Promises/A</a> specification.</p>

<p>The project is distributed with <a href='http://pivotal.github.com/jasmine/'>Jasmine</a> tests, and features the expected methods including <code>when</code>, <code>then</code>, <code>resolve</code>, and <code>reject</code>. The author has rewritten the library using CoffeeScript, so it&#8217;s not a quick and dirty extraction from jQuery&#8217;s code.</p>

<h3 id='mailcheckjs'>Mailcheck.js</h3>

<p><a href='https://github.com/Kicksend/mailcheck'>mailcheck.js</a> (License: <em>MIT</em>) by Derrick Ko and Receivd, Inc., is designed to help reduce email address typos by checking <code>input</code> field values against a list of popular email providers:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>defaultDomains</span> <span class='o'>=</span> <span class='p'>[</span><span class='s2'>&quot;yahoo.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;google.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;hotmail.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;gmail.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;me.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;aol.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;mac.com&quot;</span><span class='p'>,</span>
                      <span class='s2'>&quot;live.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;comcast.net&quot;</span><span class='p'>,</span> <span class='s2'>&quot;googlemail.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;msn.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;hotmail.co.uk&quot;</span><span class='p'>,</span> <span class='s2'>&quot;yahoo.co.uk&quot;</span><span class='p'>,</span>
                      <span class='s2'>&quot;facebook.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;verizon.net&quot;</span><span class='p'>,</span> <span class='s2'>&quot;sbcglobal.net&quot;</span><span class='p'>,</span> <span class='s2'>&quot;att.net&quot;</span><span class='p'>,</span> <span class='s2'>&quot;gmx.com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;mail.com&quot;</span><span class='p'>];</span>
<span class='kd'>var</span> <span class='nx'>defaultTopLevelDomains</span> <span class='o'>=</span> <span class='p'>[</span><span class='s2'>&quot;co.uk&quot;</span><span class='p'>,</span> <span class='s2'>&quot;com&quot;</span><span class='p'>,</span> <span class='s2'>&quot;net&quot;</span><span class='p'>,</span> <span class='s2'>&quot;org&quot;</span><span class='p'>,</span> <span class='s2'>&quot;info&quot;</span><span class='p'>,</span> <span class='s2'>&quot;edu&quot;</span><span class='p'>,</span> <span class='s2'>&quot;gov&quot;</span><span class='p'>,</span> <span class='s2'>&quot;mil&quot;</span><span class='p'>];</span>
</code></pre>
</div>
<p>The author has written a post that claims this <a href='http://blog.kicksend.com/how-we-decreased-sign-up-confirmation-email-b'>reduced confirmation email bounces by 50%</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/16/meteor-qatrix-debug">Meteor, Qatrix, WebKit Remote Debugging 1.0</a></h2>
      <div class="meta">
        <span class="date">16 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/16/meteor-qatrix-debug/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#animation">animation</a>
          
            <a href="/tags.html#debugging">debugging</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='meteor'>Meteor</h3>

<p><a href='http://www.meteor.com/'>Meteor</a> (License: <em>GPL v2</em>, GitHub: <a href='https://github.com/meteor/meteor'>meteor / meteor</a>) is a web framework that provides the same APIs for both the client and the server. It has similar goals to other projects we&#8217;ve featured on DailyJS before, such as <a href='http://derbyjs.com/'>Derby</a>, and already includes some <a href='http://docs.meteor.com/'>great documentation</a>.</p>

<p>Applications run using Node, but the authors have provided an installation script rather than distributing it with npm. Instead of using Node&#8217;s asynchronous API style, fibers have been used. Code that&#8217;s only suitable for the server is kept inside <code>server/</code> directories. Rendering is performed client-side &#8211; server-side templates are generally lightweight.</p>

<p>An important aspect of Meteor application structure is the use of a client/server model. A MongoDB database is used, and data is distributed between the server and clients. Clients subscribe to messages that they&#8217;re interested in. Templates are data-driven, and this is modelled using the <a href='http://en.wikipedia.org/wiki/Reactive_programming'>reactive programming paradigm</a>.</p>

<p>Meteor comes with scripts to bundle and deploy applications, and applications can be deployed to Meteor&#8217;s servers for free:</p>
<div class='highlight'><pre><code class='text'>$ meteor deploy myapp.meteor.com
</code></pre>
</div>
<p>This can be used on a trial basis:</p>

<blockquote>
<p>We provide this as a free service so you can try Meteor. It is also helpful for quickly putting up internal betas, demos, and so on.</p>
</blockquote>

<p>For all the excitement around Meteor, and the <a href='http://www.meteor.com/about/people'>famous developers who founded the project</a>, there are a few glaringly obvious problems with it. For example, Google can&#8217;t see Meteor&#8217;s website at all (search for <code>site:www.meteor.com</code>). This may not be a problem for applications, but I&#8217;d consider developing the public pages with something else or as a static site. It also includes its own packaging system, which is confusing to me as a Node developer. Finally, authentication is not addressed, but the developers are working on it.</p>

<h3 id='qatrix'>Qatrix</h3>

<p><a href='http://qatrix.com/'>Qatrix</a> (GitHub: <a href='https://github.com/qatrix/Qatrix'>qatrix / Qatrix</a>, License: <em>MIT</em>) by Angel Lai is a client-side framework with some bold claims. There are <a href='http://qatrix.com/benchmark'>four Qatrix benchmarks</a> which will compare performance to jQuery 1.7.1, and it&#8217;s meant to support IE6-10, but there aren&#8217;t yet any unit tests so I&#8217;m not sure how solid these claims are right now.</p>

<p>The developers have written some pretty good <a href='http://qatrix.com/api/animate'>documentation for Qatrix</a> already, and after reviewing the code on GitHub I realised what their angle is: it&#8217;s jQuery without the friendly chainable API in order to boost performance.</p>

<p>Consider this jQuery example:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.box_wrap span&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>text</span><span class='p'>(</span><span class='s1'>&#39;I found this span!&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>attr</span><span class='p'>(</span><span class='s1'>&#39;title&#39;</span><span class='p'>,</span> <span class='s1'>&#39;this is title&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>css</span><span class='p'>({</span>
    <span class='s1'>&#39;color&#39;</span><span class='o'>:</span> <span class='s1'>&#39;#C15547&#39;</span><span class='p'>,</span>
    <span class='s1'>&#39;font-size&#39;</span><span class='o'>:</span> <span class='s1'>&#39;18px&#39;</span>
  <span class='p'>});</span>
</code></pre>
</div>
<p>This is the equivalent in Qatrix:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$select</span><span class='p'>(</span><span class='s1'>&#39;.box_wrap span&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>$text</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>,</span> <span class='s1'>&#39;I found this span!&#39;</span><span class='p'>);</span>
  <span class='nx'>$attr</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>,</span> <span class='s1'>&#39;title&#39;</span><span class='p'>,</span> <span class='s1'>&#39;this is title&#39;</span><span class='p'>);</span>
  <span class='nx'>$css</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>,</span> <span class='p'>{</span>
    <span class='s1'>&#39;color&#39;</span><span class='o'>:</span> <span class='s1'>&#39;#C15547&#39;</span><span class='p'>,</span>
    <span class='s1'>&#39;font-size&#39;</span><span class='o'>:</span> <span class='s1'>&#39;18px&#39;</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It&#8217;s not a world apart from the jQuery example, and someone could build a chainable API wrapper around Qatrix if they really wanted to. The GitHub history only goes back to March 17th, so it&#8217;s a very young framework &#8211; I expect the authors would appreciate contributions from fellow client-side hackers.</p>

<h3 id='webkit_remote_debugger'>WebKit Remote Debugger</h3>

<p>Version 1.0 of the WebKit remote debugging protocol has been announced: <a href='http://www.webkit.org/blog/1875/announcing-remote-debugging-protocol-v1-0/'>Announcing Remote Debugging Protocol v1.0</a>. Remote debugging can be enabled in Chrome, and WebSockets are used for communication with the debugger.</p>

<p>It&#8217;s even possible to connect one WebKit browser to another, because Chrome includes a small HTTP server &#8211; Web Inspector can be used as a remote debugging client.</p>

<p><a href='http://www.igvita.com/2012/04/09/driving-google-chrome-via-websocket-api/'>Driving Google Chrome via WebSocket API</a> is a tutorial by Ilya Grigorik that shows how to write a remote debugging client. His example is in Ruby, but it&#8217;s just HTTP requests and JSON:</p>

<blockquote>
<p>The example above illustrates a very simple interaction with the Network API, but the protocol exposes much more. You can drive the JS debugger, control the V8 VM, modify and inspect the DOM, and track Timeline events amongst half a dozen other capabilities.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/13/colonne-n8iv-bad-parts">Colonne, n8iv, Three Bad Parts</a></h2>
      <div class="meta">
        <span class="date">13 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/13/colonne-n8iv-bad-parts/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#oo">oo</a>
          
            <a href="/tags.html#language">language</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='colonne'>Colonne</h3>

<p><a href='https://github.com/rtsinani/colonne'>Colonne</a> (GitHub: <a href='https://github.com/rtsinani/colonne'>rtsinani / colonne</a>, License: <em>MIT</em>) by &#8220;rtsinani&#8221; is a small <a href='http://documentcloud.github.com/backbone/'>Backbone.js</a> library that extends <code>Backbone.History</code> to expose two new properties: <code>path</code> and <code>params</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// URL fragment: /products/search?names=apple&amp;names=nectarine&amp;page=1</span>

<span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>history</span><span class='p'>.</span><span class='nx'>path</span>               <span class='c1'>// &#39;products/search&#39;</span>
<span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>history</span><span class='p'>.</span><span class='nx'>params</span><span class='p'>[</span><span class='s1'>&#39;names&#39;</span><span class='p'>]</span>    <span class='c1'>// [&#39;apple&#39;, &#39;nectarine&#39;]</span>
<span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>history</span><span class='p'>.</span><span class='nx'>params</span><span class='p'>[</span><span class='s1'>&#39;page&#39;</span><span class='p'>]</span>     <span class='c1'>// &#39;1&#39;</span>
</code></pre>
</div>
<p>It also works with <code>Backbone.history.navigateWith</code>.</p>

<p>The author has included Backbone&#8217;s router tests to demonstrate that Backbone&#8217;s original functionality still works, and has added new tests for Colonne.</p>

<h3 id='n8iv'>n8iv</h3>

<p><a href='https://github.com/constantology/n8iv'>n8iv</a> (License: <em>MIT</em>) by Christos Constandinou is an OO library that extends native objects with <code>Object.defineProperty</code>. The author has written lots of documentation that&#8217;s viewable on GitHub at <a href='https://github.com/constantology/n8iv/tree/master/docs'>constantology / n8iv / docs</a>. The documentation shows what objects have been extended and what the n8iv classes provide.</p>

<p>For example, there&#8217;s an event library that works like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>observer</span> <span class='o'>=</span> <span class='nx'>n8iv</span><span class='p'>.</span><span class='nx'>Observer</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>();</span>
<span class='nx'>observer</span><span class='p'>.</span><span class='nx'>log</span> <span class='o'>=</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>;</span>

<span class='nx'>observer</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;foo&#39;</span><span class='p'>,</span> <span class='nx'>log</span><span class='p'>)</span>
        <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;foo&#39;</span><span class='p'>,</span> <span class='nx'>observer</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>,</span> <span class='nx'>observer</span><span class='p'>)</span>
        <span class='p'>.</span><span class='nx'>broadcast</span><span class='p'>(</span><span class='s1'>&#39;foo&#39;</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>,</span> <span class='mi'>3</span><span class='p'>);</span>
</code></pre>
</div>
<p>The <code>n8iv.Class</code> library supports mixins, singletons, and super methods.</p>

<p>The author also notes that native methods are not overridden if they&#8217;re already defined. In addition, the other n8iv libraries like <code>n8iv.Oo.js</code> can be used without the native extensions.</p>

<h3 id='three_bad_parts'>Three Bad Parts</h3>

<p>In <a href='http://johnkpaul.tumblr.com/post/20720951024/javascript-only-three-bad-parts'>JavaScript - Only Three &#8220;Bad&#8221; Parts</a>, John Paul discusses Douglas Crockford&#8217;s <em>JavaScript:The Good Parts</em> and how there are only really three &#8220;bad&#8221; parts. His post is actually more about learning the language properly than problems inherent to JavaScript.</p>

<p>John argues that once <code>this</code>, prototypal inheritance, and functions are properly understood, then budding JavaScript developers can be more productive.</p>

<blockquote>
<p>When was the last time that you had a really hard time using the <code>void</code> keyword or were foiled by type coercion?</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/12/node-unix-syslog">Unix and Node: Syslog</a></h2>
      <div class="meta">
        <span class="date">12 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/12/node-unix-syslog/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#unix">unix</a>
          
            <a href="/tags.html#cli">cli</a>
          
            <a href="/tags.html#logging">logging</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Syslog is a standardised logging system that&#8217;s present in most BSD and Linux distributions. There are various implementations; syslog-ng is a popular one that I usually find myself using. The interesting thing about syslog is it can be configured to store messages anywhere &#8211; logs can be written to files or remote daemons.</p>

<p>The main reason for using syslog in your Unix-oriented projects is to <em>separate the concerns</em> between your application code and configuration. The same application logging to a local syslog daemon could log to a remote daemon without any changes to the application itself. In addition, syslog also has lots of useful features like log rotation, file compression, and interoperability with other applications that use syslog.</p>

<p>It&#8217;s amazing to think that syslog was originally created by Eric Allman as part of Sendmail. Over the years it&#8217;s found uses far beyond its origins, and as a result there are now several standards that pertain to syslog &#8212; <a href='http://tools.ietf.org/html/rfc5424'>RFC 5424</a> and <a href='http://www.ietf.org/rfc/rfc3164.txt'>RFC 3164</a> are probably the most important when it comes to looking for compliant implementations.</p>

<h3 id='syslog_basics'>Syslog Basics</h3>

<p>Writing a message to syslog is as simple as running <code>logger</code> in a shell:</p>
<div class='highlight'><pre><code class='text'>$ logger Hello from DailyJS
</code></pre>
</div>
<p>On most systems this message should now be visible in <code>/var/log/syslog</code>, or <code>/var/log/system.log</code> on a Mac.</p>
<div class='highlight'><pre><code class='text'>$ tail -f /var/log/system.log
Apr 12 14:45:18 b alex[15070]: Hello from DailyJS
</code></pre>
</div>
<p>The priority level can also be included with the message. Take a look at <code>man logger</code> to read more about priorities and facilities.</p>

<h3 id='syslog_in_node'>Syslog in Node</h3>

<p>Most programs write to syslog using the <code>openlog</code> and <code>syslog</code> standard C library functions. That means it&#8217;s not trivial to use pure JavaScript to call these functions &#8211; a small binding is required. To get around this, some Node modules require syslog to be configured to accept TCP connections.</p>

<p>The <a href='https://github.com/melor/node-posix'>node-posix</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/posix'>posix</a>) module by Mika Eloranta is one option for writing to syslog using the <code>openlog</code> and <code>syslog</code> functions:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>posix</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;posix&#39;</span><span class='p'>);</span>

<span class='nx'>posix</span><span class='p'>.</span><span class='nx'>openlog</span><span class='p'>(</span><span class='s1'>&#39;test-node-syslog&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>cons</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>ndelay</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>pid</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>},</span> <span class='s1'>&#39;local0&#39;</span><span class='p'>);</span>
<span class='nx'>posix</span><span class='p'>.</span><span class='nx'>setlogmask</span><span class='p'>({</span> <span class='nx'>info</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>debug</span><span class='o'>:</span> <span class='mi'>1</span> <span class='p'>});</span>
<span class='nx'>posix</span><span class='p'>.</span><span class='nx'>setlogmask</span><span class='p'>({</span> <span class='nx'>emerg</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>alert</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>crit</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>err</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>warning</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>notice</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>info</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>debug</span><span class='o'>:</span> <span class='mi'>1</span> <span class='p'>});</span>
<span class='nx'>posix</span><span class='p'>.</span><span class='nx'>syslog</span><span class='p'>(</span><span class='s1'>&#39;info&#39;</span><span class='p'>,</span> <span class='s1'>&#39;hello from node-posix (info)&#39;</span><span class='p'>);</span>
<span class='nx'>posix</span><span class='p'>.</span><span class='nx'>closelog</span><span class='p'>();</span>
</code></pre>
</div>
<p>Note that if this is run on a Mac the result might be stored to <code>/var/log/appfirewall.log</code> because Apple&#8217;s configuration routes <code>local0</code> messages here. The easiest way to view log messages on a Mac is to open the Console application and select &#8220;All Messages&#8221;. When I tried this example in Linux the message was written to <code>/var/log/syslog</code>.</p>

<p>This module actually uses the same signatures as the C functions. That means the last parameter for <code>posix.openlog</code> is &#8216;facility&#8217; &#8211; the available and recommended options are documented in the project&#8217;s readme file.</p>

<p>An alternative is <a href='https://github.com/cloudhead/node-syslog'>node-syslog</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/syslog'>syslog</a>) by Alexis Sellier. This one uses TCP to communicate with syslog &#8211; the author has provided some configuration examples for setting up syslog-ng to accept TCP connections.</p>

<p>The API for <em>node-syslog</em> is very simple:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>syslog</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;syslog&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>logger</span> <span class='o'>=</span> <span class='nx'>syslog</span><span class='p'>.</span><span class='nx'>createClient</span><span class='p'>(</span><span class='mi'>514</span><span class='p'>,</span> <span class='s1'>&#39;localhost&#39;</span><span class='p'>);</span>

<span class='nx'>logger</span><span class='p'>.</span><span class='nx'>info</span><span class='p'>(</span><span class='s1'>&#39;Hello from DailyJS&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>If you already use <a href='https://github.com/flatiron/winston'>winston</a> for logging, then <a href='https://github.com/indexzero/winston-syslog'>winston-syslog</a> is a winston transport that can write messages to syslog over TCP.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>There are other modules out there, but most either use the standard C library functions or TCP streams like the ones I&#8217;ve mentioned.</p>

<p>Some modules attempt to communicate with the datagram log socket <code>/dev/log</code>, but support for Unix datagram sockets was removed from Node so this won&#8217;t work anymore. Support for Unix datagram sockets has been provided by the <a href='https://github.com/bnoordhuis/node-unix-dgram'>node-unix-dgram</a> module by Ben Noordhuis, but I haven&#8217;t found a syslog module that uses it.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/11/node-roundup">Node Roundup: 0.6.15, node-inherit, Synchronize.js, jaded</a></h2>
      <div class="meta">
        <span class="date">11 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/11/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#jade">jade</a>
          
            <a href="/tags.html#templating">templating</a>
          
            <a href="/tags.html#thumbnails">thumbnails</a>
          
            <a href="/tags.html#images">images</a>
          
            <a href="/tags.html#async">async</a>
          
            <a href="/tags.html#fibers">fibers</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_0615'>Node 0.6.15</h3>

<p><a href='http://blog.nodejs.org/2012/04/09/version-0-6-15-stable/'>Node 0.6.15</a> is out. It includes npm 1.1.16, and some platform-specific bug fixes for Windows and Mac OS.</p>

<h3 id='thumbbot'>Thumbbot</h3>

<p><a href='http://vdemedes.github.com/thumbbot/'>Thumbbot</a> (GitHub: <a href='https://github.com/vdemedes/thumbbot'>vdemedes / thumbbot</a>, License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/thumbbot'>thumbbot</a>) by Vadim Demedes is a thumbnail generator API built with PhantomJS, ImageMagick, and ffmpeg.</p>

<p>The <code>Thumbbot</code> class is instantiated with a source and output file:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='nv'>bot = </span><span class='k'>new</span> <span class='nx'>Thumbbot</span> <span class='s'>&#39;video.mp4&#39;</span><span class='p'>,</span> <span class='s'>&#39;video_thumb.png&#39;</span>
<span class='nx'>bot</span><span class='p'>.</span><span class='nx'>set</span> <span class='nv'>width: </span><span class='mi'>200</span><span class='p'>,</span> <span class='nv'>height: </span><span class='mi'>150</span>
<span class='nx'>bot</span><span class='p'>.</span><span class='nx'>set</span> <span class='nv'>position: </span><span class='s'>&#39;00:05:04&#39;</span>
<span class='nx'>bot</span><span class='p'>.</span><span class='nx'>snap</span> <span class='nf'>(err) -&gt;</span>
    <span class='c1'># done</span>
</code></pre>
</div>
<p>The author has included Mocha tests, and various output formats are supported (png, jpg, gif).</p>

<h3 id='nodeinherit'>node-inherit</h3>

<p><a href='https://github.com/dfilatov/node-inherit'>node-inherit</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/inherit'>inherit</a>) by Dmitry Filatov adds some sugar to help with class-like declarations, constructors, super calls, and static methods.</p>

<p>An inherited class looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>B</span> <span class='o'>=</span> <span class='nx'>inherit</span><span class='p'>(</span><span class='nx'>A</span><span class='p'>,</span> <span class='p'>{</span>
    <span class='nx'>getProperty</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>property</span> <span class='o'>+</span> <span class='s1'>&#39; of instanceB&#39;</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>getType</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>__base</span><span class='p'>()</span> <span class='o'>+</span> <span class='s1'>&#39;B&#39;</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>},</span>

  <span class='nx'>staticMethod</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>__base</span><span class='p'>()</span> <span class='o'>+</span> <span class='s1'>&#39; of staticB&#39;</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This example assumes a class called <code>A</code> &#8211; notice how the <code>getType</code> method can access <code>A</code>&#8217;s <code>getType</code> using <code>this.__base</code>. The full example can be viewed in the project&#8217;s readme.</p>

<p>Dmitry has included some Nodeunit tests that also demonstrate the main features of the library.</p>

<h3 id='synchronizejs'>Synchronize.js</h3>

<p><a href='http://alexeypetrushin.github.com/synchronize/docs/index.html'>Synchronize.js</a> (GitHub: <a href='https://github.com/alexeypetrushin/synchronize'>alexeypetrushin / synchronize</a>, License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/synchronize'>synchronize</a>) by Alexey Petrushin is another library that&#8217;s built on <a href='https://github.com/laverdet/node-fibers'>fibers</a> to attempt to &#8220;flatten&#8221; all of those pesky callbacks people like to talk about on Hacker News.</p>

<p>Existing methods can be wrapped with the <code>sync</code> method provided by the library:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>sync</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;synchronize&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>fs</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;fs&#39;</span><span class='p'>);</span>

<span class='nx'>fs</span><span class='p'>.</span><span class='nx'>readFile_</span> <span class='o'>=</span> <span class='nx'>sync</span><span class='p'>(</span><span class='nx'>fs</span><span class='p'>.</span><span class='nx'>readFile</span><span class='p'>);</span>

<span class='nx'>sync</span><span class='p'>.</span><span class='nx'>fiber</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>data</span> <span class='o'>=</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>readFile_</span><span class='p'>(</span><span class='nx'>__filename</span><span class='p'>,</span> <span class='s1'>&#39;utf8&#39;</span><span class='p'>);</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>);</span>

  <span class='k'>try</span> <span class='p'>{</span>
    <span class='nx'>data</span> <span class='o'>=</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>readFile_</span><span class='p'>(</span><span class='s1'>&#39;invalid&#39;</span><span class='p'>,</span> <span class='s1'>&#39;utf8&#39;</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>catch</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Asynchronous methods can be used in a synchronous fashion within the <code>sync.fiber</code> callback. Wrapped functions will behave as if <code>return</code> and <code>throw</code> were called synchronously. The author has written Mocha tests, but the library itself is fairly small so it&#8217;s not too hard to figure out how it uses fibers to wrap functions: <a href='https://github.com/alexeypetrushin/synchronize/blob/master/synchronize.js'>synchronize.js</a>.</p>

<h3 id='jaded'>jaded</h3>

<p><a href='https://github.com/wearefractal/jaded'>jaded</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/jaded'>jaded</a>) from Fractal is an alternate command-line interface for Jade that includes AMD support:</p>
<div class='highlight'><pre><code class='text'>  Usage: jaded [options]

  Options:

    -h, --help            output usage information
    -V, --version         output the version number
    -i --input [folder]   Specify input folder
    -o --output [folder]  Specify output folder
    -d --development      Beautify output and insert line numbers
    -a --amd              Wrap output in AMD closure
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/10/jquery-roundup">jQuery Roundup: modplug, NailThumb, HiddenPosition</a></h2>
      <div class="meta">
        <span class="date">10 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/10/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#images">images</a>
          
            <a href="/tags.html#thumbnails">thumbnails</a>
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='modplug'>modplug</h3>

<p><a href='http://larsjung.de/modplug/'>modplug</a> (GitHub: <a href='https://github.com/lrsjng/modplug'>lrsjng / modplug</a>, License: <em>MIT</em>) by Lars Jung is an abstraction on top of jQuery plugins that makes adhering to jQuery&#8217;s <a href='http://docs.jquery.com/Plugins/Authoring'>Plugins/Authoring</a> document a little bit easier.</p>

<p>Using <code>modplug</code> to define a plugin will automatically put methods under the same &#8220;namespace&#8221;. Static methods can also be defined:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>modplug</span><span class='p'>(</span><span class='s1'>&#39;color&#39;</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>statics</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>random</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='s1'>&#39;hsl(&#39;</span> <span class='o'>+</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>floor</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>random</span><span class='p'>()</span> <span class='o'>*</span> <span class='mi'>360</span><span class='p'>)</span> <span class='o'>+</span> <span class='s1'>&#39;,95%,75%)&#39;</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>},</span>

  <span class='nx'>methods</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>back</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>col</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>each</span><span class='p'>(</span><span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
        <span class='nx'>$</span><span class='p'>(</span><span class='k'>this</span><span class='p'>).</span><span class='nx'>css</span><span class='p'>(</span><span class='s1'>&#39;background-color&#39;</span><span class='p'>,</span> <span class='nx'>col</span><span class='p'>);</span>
      <span class='p'>});</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='nx'>$</span><span class='p'>(</span><span class='nx'>selector</span><span class='p'>).</span><span class='nx'>color</span><span class='p'>(</span><span class='s1'>&#39;back&#39;</span><span class='p'>,</span> <span class='s1'>&#39;#f00&#39;</span><span class='p'>);</span>

<span class='c1'>// get a hsl formatted color string</span>
<span class='kd'>var</span> <span class='nx'>col</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>color</span><span class='p'>.</span><span class='nx'>random</span><span class='p'>();</span>
</code></pre>
</div>
<h3 id='nailthumb'>NailThumb</h3>

<p><a href='http://www.garralab.com/nailthumb.php'>NailThumb</a> (Repository: <a href='http://sourceforge.net/p/nailthumb/code/2/tree/'>SourceForge / NailThumb</a>, License: <em>GPL v3</em>) from Garralab is an image thumbnail plugin that can apply animation effects and a scrolling tooltip. A container is assumed, so basic usage looks like this: <code>$(&#39;.nailthumb-container&#39;).nailthumb()</code>.</p>

<p>CSS has been supplied, and there are also LESS mixins.</p>

<h3 id='hiddenposition'>HiddenPosition</h3>

<p><a href='http://www.garralab.com/hiddenposition.php'>HiddenPosition</a> (Repository: <a href='http://sourceforge.net/p/hiddenposition/code/3/tree/'>SourceForge / HiddenPosition</a>, License: <em>GPL v3</em>) also from the developers at Garralab is based on <a href='http://jqueryui.com/demos/position/'>jQuery UI Position</a>, but has been adapted to work with hidden elements. There&#8217;s an interactive demo on the project&#8217;s page that shows how it works.</p>

<p>The API is compatible with <code>$().position</code>, so existing jQuery UI projects can simply swap this with <code>$().hiddenPosition</code>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/09/licenses">Licensing for JavaScript Projects</a></h2>
      <div class="meta">
        <span class="date">09 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/09/licenses/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#licensing">licensing</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Each project we feature on DailyJS includes the license. If your project doesn&#8217;t include a license, it may not be used by the wider community and commercial developers.</p>

<p>Why is licensing important? From the author&#8217;s perspective, it can be used to influence how the project is reused. From our perspective, as users of your software, the license determines whether we can legally reuse your software.</p>

<h3 id='license_types'>License Types</h3>

<p>Licenses are split into <em>permissive</em> and <em>copyleft</em>. Permissive licenses have less restrictive requirements about how the software can be redistributed &#8211; copyleft licenses aim to preserve the freedoms dictated by the original license.</p>

<p>Under these broad categories, the GPL is a copyleft license. The MIT license is a permissive license.</p>

<p>GNU&#8217;s site explains <a href='http://www.gnu.org/licenses/gpl-howto.html'>how to use the GPL</a>. Other initiatives aim to help configure the most appropriate license for a given project, such as the <a href='http://creativecommons.org/'>Creative Commons non-profit organisation</a>. For a large list of licenses, see the OSI&#8217;s list here: <a href='http://www.opensource.org/licenses/category'>Open Source Licenses by Category</a>.</p>

<h3 id='jquery_plugins_and_clientside_projects'>jQuery Plugins and Client-side Projects</h3>

<p>Many of the jQuery plugins we receive for review are dual licensed under the GPL and MIT. Why? Well, this allows the author of a derivative work to choose either license for their work.</p>

<p>The jQuery project itself has some comments on this: <a href='http://jquery.org/license/'>jQuery License</a></p>

<blockquote>
<p>The MIT License is recommended for most projects. It is simple and easy to understand and it places almost no restrictions on what you can do with a jQuery project. If the GPL suits your project better you are also free to use a jQuery project under that license.</p>
</blockquote>

<p>If you&#8217;re writing a jQuery project, consider adopting this approach as it&#8217;s widely used by the community.</p>

<h3 id='node_modules'>Node Modules</h3>

<p>It&#8217;s pretty clear at this point that Node developers like permissive licensing. Almost all of the Node modules we receive are <a href='http://www.opensource.org/licenses/mit-license.html'>MIT</a> licensed. Let&#8217;s take a look at the current top 5 projects according to npm&#8217;s stats:</p>

<ul>
<li>Underscore: MIT</li>

<li>CoffeeScript: MIT</li>

<li>Request: Apache License Version 2.0</li>

<li>Express: MIT</li>

<li>Async.js: MIT</li>
</ul>

<p>Notice that the Apache License is also a permissive license.</p>

<p>Isaac Schlueter wrote an interesting post about a modification to permissive licenses called &#8220;no-false-attribs&#8221;: <a href='http://blog.izs.me/post/2525864680/wanted-no-false-attribs-oss-license'>Wanted: &#8220;no-false-attribs&#8221; OSS License</a>. People are starting to include &#8220;MIT no-false-attribs&#8221; with their projects to denote that any derivatives must amend incorrect references like contact information and bug reporting links.</p>

<h3 id='how_to_include_a_license'>How to Include a License</h3>

<p>It&#8217;s not acceptable to simply paste a license&#8217;s text into your readme, or a license file in the project. The license must be edited to include your name and the date of copyright.</p>

<p>Include the <em>name</em> of the license in your project&#8217;s readme and the license file. The name is important &#8211; people don&#8217;t want to have to memorise and recognise license text, they simply want to look for license names they know are compatible with their project&#8217;s policies. From my perspective, I want to be able to include the license name in my articles.</p>

<p>Also consider writing a <a href='http://wiki.commonjs.org/wiki/Packages/1.0'>package.json</a> &#8211; even if it&#8217;s not a Node project! A well-written <code>package.json</code> includes a license, author information, homepage and repository links.</p>

<h3 id='checklist'>Checklist</h3>

<ul>
<li>Choose a license based on your organisation&#8217;s policies, or your own opinions &#8211; have a look at some permissive or copyleft licenses and see what fits</li>

<li>Include the name of your license in your project&#8217;s readme</li>

<li>Add the license to your project as a text file, and edit it to include your name</li>

<li>Write a <code>package.json</code> that includes the license name <em>even if it&#8217;s a client-side project</em></li>
</ul>

<h3 id='references'>References</h3>

<p>This article was inspired by <a href='http://mir.aculo.us/2012/04/05/why-id-like-a-license-type-setting-for-github-projects/'>Why I’d like a &#8220;license type&#8221; setting for GitHub projects</a> by Thomas Fuchs.</p>

<ul>
<li><a href='http://www.opensource.org/licenses/category'>Open Source Licenses by Category</a></li>

<li><a href='http://www.gnu.org/licenses/gpl-howto.html'>How to use GNU licenses for your own software</a></li>

<li><a href='http://jquery.org/license/'>jQuery License</a></li>

<li><a href='http://wiki.commonjs.org/wiki/Packages/1.0'>Packages/1.0</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/06/toth-xregexp-plastron">Krisztian Toth's JavaScript Games, XRegExp, PlastronJS</a></h2>
      <div class="meta">
        <span class="date">06 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/06/toth-xregexp-plastron/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#closure-library">closure-library</a>
          
            <a href="/tags.html#regex">regex</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='krisztian_toths_javascript_games'>Krisztian Toth&#8217;s JavaScript Games</h3>

<p><img src='/images/posts/boulderdash-krissz.png' alt='JavaScript Boulder Dash' /></p>

<p><a href='http://krissz.hu'>Krisztian Toth</a> makes browser-based conversions of retro games. <a href='http://boulderdash.krissz.hu/'>JavaScript Boulder Dash</a> is an extremely elaborate version of the classic Boulder Dash which includes a level creator. Krisztian has made the source available (in non-minimised form) here:</p>

<ul>
<li><a href='http://boulderdash.krissz.hu/source/jDash.js'>jDash.js</a>: Animation handling, keyboard</li>

<li><a href='http://boulderdash.krissz.hu/source/jDashSound.js'>jDashSound.js</a>: Krisztian&#8217;s own sound library</li>

<li><a href='http://boulderdash.krissz.hu/source/jDashCkit.js'>jDashCkit.js</a>: Level editor</li>

<li><a href='http://boulderdash.krissz.hu/source/jDashGame.js'>jDashGame.js</a>: The actual game engine &#8211; loading and drawing caves, timing, etc.</li>

<li><a href='http://boulderdash.krissz.hu/source/jDashObjects.js'>jDashObjects.js</a>: The game&#8217;s objects and their behaviour</li>
</ul>

<p>This is built on jQuery 1.7.1, and provides some interesting insights for those looking for guidance with game engine architecture.</p>

<p><img src='/images/posts/wizard-of-wor.png' alt='Wizard of Wor' /></p>

<p>He&#8217;s also ported the Commodore 64 version of <a href='http://wizardofwor.krissz.hu/'>Wizard of Wor</a>, with source available in <a href='http://wizardofwor.krissz.hu/source/jWoW.js'>jWoW.js</a>.</p>

<p>Krisztian builds these games with a manifesto of sorts, where he tries to create addictive gaming worlds by writing code that aims to make the illusion as solid as possible, without distracting the user with overly technical solutions. I definitely enjoyed playing his version of Boulder Dash, even though I&#8217;m actually pretty bad at it (I blame my keyboard, I need a controller!)</p>

<h3 id='xregexp'>XRegExp</h3>

<p><a href='http://xregexp.com/'>XRegExp</a> (GitHub: <a href='https://github.com/slevithan/XRegExp'>slevithan / XRegExp</a>, License: <em>MIT</em>, npm: <em>xregexp</em>) by Steven Levithan is an impressive regular expression library that works in Node and even Internet Explorer 5.5. Regular expressions must be represented as strings to make Steven&#8217;s extensions possible, but the examples are compelling:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Using named capture and flag x (free-spacing and line comments)</span>
<span class='kd'>var</span> <span class='nx'>date</span> <span class='o'>=</span> <span class='nx'>XRegExp</span><span class='p'>(</span><span class='s1'>&#39;(?&lt;year&gt;  [0-9]{4}) -?  # year  \n\</span>
<span class='s1'>                    (?&lt;month&gt; [0-9]{2}) -?  # month \n\</span>
<span class='s1'>                    (?&lt;day&gt;   [0-9]{2})     # day   &#39;</span><span class='p'>,</span> <span class='s1'>&#39;x&#39;</span><span class='p'>);</span>

<span class='c1'>// XRegExp.exec gives you named backreferences on the match result</span>
<span class='kd'>var</span> <span class='nx'>match</span> <span class='o'>=</span> <span class='nx'>XRegExp</span><span class='p'>.</span><span class='nx'>exec</span><span class='p'>(</span><span class='s1'>&#39;2012-02-22&#39;</span><span class='p'>,</span> <span class='nx'>date</span><span class='p'>);</span>
<span class='nx'>match</span><span class='p'>.</span><span class='nx'>day</span><span class='p'>;</span> <span class='c1'>// -&gt; &#39;22&#39;</span>

<span class='c1'>// In fact, all XRegExps are RegExps and work perfectly with native methods</span>
<span class='nx'>date</span><span class='p'>.</span><span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;2012-02-22&#39;</span><span class='p'>);</span> <span class='c1'>// -&gt; true</span>
</code></pre>
</div>
<p>Native prototypes can be extended to use XRegExp, if required, by calling <code>XRegExp.install(&#39;natives&#39;)</code>.</p>

<p>Optional Unicode libraries are included which can be used to add support for several useful expressions:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>XRegExp</span><span class='p'>(</span><span class='s1'>&#39;^\\p{Hiragana}+$&#39;</span><span class='p'>).</span><span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;ひらがな&#39;</span><span class='p'>);</span> <span class='c1'>// -&gt; true</span>
</code></pre>
</div>
<p>XRegExp includes a whole load more, which is documented on both the project&#8217;s website at <a href='http://xregexp.com/'>xregexp.com</a> and the <a href='https://github.com/slevithan/XRegExp'>XRegExp readme</a>.</p>

<h3 id='plastronjs'>PlastronJS</h3>

<p><a href='https://github.com/rhysbrettbowen/PlastronJS'>PlastronJS</a> (License: <em>MIT</em>) by Rhys Brett-Bowen is a new framework built on the <a href='https://developers.google.com/closure/'>Google Closure</a> Library for use with the Closure Compiler:</p>

<blockquote>
<p>PlastronJS though is not just an MVC framework, it&#8217;s the start of an application framework. I&#8217;ve decided to include a mediator and a store with the package which will hopefully help in the construction of medium to large size applications.</p>
</blockquote>

<p>Models can be created by inheriting from the <code>mvc.Model</code> class:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>goog</span><span class='p'>.</span><span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;mvc.Model&#39;</span><span class='p'>);</span>

<span class='cm'>/**</span>
<span class='cm'> * @constructor</span>
<span class='cm'> * @inheritDoc</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>Person</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>firstName</span><span class='p'>,</span> <span class='nx'>lastName</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>goog</span><span class='p'>.</span><span class='nx'>base</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='p'>{</span><span class='nx'>attr</span><span class='o'>:</span> <span class='p'>{</span>
        <span class='s1'>&#39;firstName&#39;</span><span class='o'>:</span> <span class='nx'>firstName</span><span class='p'>,</span>
        <span class='s1'>&#39;lastName&#39;</span><span class='o'>:</span> <span class='nx'>lastName</span>
    <span class='p'>}});</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>meta</span><span class='p'>(</span><span class='s1'>&#39;name&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;firstName&#39;</span><span class='p'>,</span><span class='s1'>&#39;lastName&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>firstName</span><span class='p'>,</span> <span class='nx'>lastName</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='k'>return</span> <span class='nx'>lastName</span> <span class='o'>+</span> <span class='s2'>&quot;, &quot;</span> <span class='o'>+</span> <span class='nx'>firstName</span><span class='p'>;</span>
    <span class='p'>});</span>
<span class='p'>};</span>
<span class='nx'>goog</span><span class='p'>.</span><span class='nx'>inherits</span><span class='p'>(</span><span class='nx'>Person</span><span class='p'>,</span> <span class='nx'>mvc</span><span class='p'>.</span><span class='nx'>Model</span><span class='p'>);</span>
</code></pre>
</div>
<p>Getters and setters are available using the <code>model.get</code> and <code>model.set</code> methods. Exceptions are used to handle validation errors &#8211; full details can be found in the project&#8217;s readme.</p>

<p>Data can be saved by using <code>mvc.Sync</code> &#8211; <code>mvc.AjaxSync</code> and <code>mvc.LocalSync</code> have been included, but other implementations could be created if required. The <a href='https://github.com/rhysbrettbowen/PlastronJS/blob/master/sync/ajax.js'>sync/ajax.js</a> file currently shows how PlastronJS would effectively communicate with a server.</p>

<p>The <a href='https://developers.google.com/closure/library/'>Google Closure Library</a> itself is the base JavaScript used for most of Google&#8217;s flagship projects. For those who are missing Backbone-like MVC from Closure Library, then PlastronJS should work well.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/04/05/node-unix-interfaces">Unix and Node: Interfaces</a></h2>
      <div class="meta">
        <span class="date">05 Apr 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/04/05/node-unix-interfaces/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#unix">unix</a>
          
            <a href="/tags.html#cli">cli</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Earlier in this series I covered <a href='http://dailyjs.com/2012/03/01/unix-node-arguments/'>command-line arguments</a>, which are well-supported in Node. There are times when a more interactive interface is required, however.</p>

<p>Fortunately, various node modules give us the tools to create command-line Unix programs with many different console-based interfaces, from Read-Eval-Print-Loops to GUI-like terminal control libraries.</p>

<h3 id='repl'>REPL</h3>

<p>Node&#8217;s Read-Eval-Print-Loop (REPL) is available as a module, and can be used to create interactive JavaScript shells. <a href='http://nodejs.org/docs/latest/api/all.html#all_repl'>Node&#8217;s documentation</a> has a cool example that uses a TCP server, so clients can connect with <code>telnet</code>.</p>

<p>The documentation is currently slightly inaccurate with regard to <code>REPL.start</code> &#8211; the callback method actually takes four arguments and won&#8217;t work as advertised. This example should work with the current version of Node 0.6:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>repl</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;repl&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>vm</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;vm&#39;</span><span class='p'>);</span>

<span class='nx'>repl</span><span class='p'>.</span><span class='nx'>start</span><span class='p'>(</span><span class='s1'>&#39;&gt; &#39;</span><span class='p'>,</span> <span class='nx'>process</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>code</span><span class='p'>,</span> <span class='nx'>context</span><span class='p'>,</span> <span class='nx'>file</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>result</span>
    <span class='p'>,</span> <span class='nx'>err</span><span class='p'>;</span>

  <span class='k'>try</span> <span class='p'>{</span>
    <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>vm</span><span class='p'>.</span><span class='nx'>runInThisContext</span><span class='p'>(</span><span class='nx'>code</span><span class='p'>,</span> <span class='nx'>file</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>catch</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;Error:&#39;</span><span class='p'>,</span> <span class='nx'>err</span><span class='p'>);</span>
  <span class='p'>}</span>
  <span class='nx'>callback</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>result</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>process</code> global is passed as the <code>stream</code> argument to make the REPL read and write to <code>stdin</code> and <code>stdout</code>. The callback method can do anything that&#8217;s required. For example, you could allow access to your database objects and methods in a web application, or provide an interactive administration interface to a daemon.</p>

<h3 id='readline'>Readline</h3>

<p>The <code>repl</code> module works well when a JavaScript shell is required, but what about a custom REPL? Node actually includes a Readline module, which is perfect for this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>readline</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;readline&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>rl</span><span class='p'>;</span>

<span class='nx'>rl</span> <span class='o'>=</span> <span class='nx'>readline</span><span class='p'>.</span><span class='nx'>createInterface</span><span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdin</span><span class='p'>,</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdout</span><span class='p'>,</span> <span class='kc'>null</span><span class='p'>);</span>

<span class='nx'>rl</span><span class='p'>.</span><span class='nx'>setPrompt</span><span class='p'>(</span><span class='s1'>&#39;➜&#39;</span><span class='p'>);</span>

<span class='nx'>rl</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;line&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>cmd</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>cmd</span> <span class='o'>===</span> <span class='s1'>&#39;quit&#39;</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>rl</span><span class='p'>.</span><span class='nx'>question</span><span class='p'>(</span><span class='s1'>&#39;Are you sure? (y/n) &#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>answer</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>answer</span> <span class='o'>===</span> <span class='s1'>&#39;y&#39;</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>rl</span><span class='p'>.</span><span class='nx'>close</span><span class='p'>();</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='nx'>rl</span><span class='p'>.</span><span class='nx'>prompt</span><span class='p'>();</span>
      <span class='p'>}</span>
    <span class='p'>});</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;You typed:&#39;</span><span class='p'>,</span> <span class='nx'>cmd</span><span class='p'>);</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Type &quot;quit&quot; to exit&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>rl</span><span class='p'>.</span><span class='nx'>prompt</span><span class='p'>();</span>
<span class='p'>});</span>

<span class='nx'>rl</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;close&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Bye&#39;</span><span class='p'>);</span>
  <span class='nx'>process</span><span class='p'>.</span><span class='nx'>exit</span><span class='p'>();</span>
<span class='p'>});</span>

<span class='nx'>rl</span><span class='p'>.</span><span class='nx'>prompt</span><span class='p'>();</span>
</code></pre>
</div>
<p>Here I&#8217;ve used the <code>readline</code> module to create an interface, then listen for <code>line</code> events which denote a line of text was typed. The <code>question</code> method will display a prompt and invoke the callback with the response.</p>

<p>By using simple string matching, a completely customised command-line interface can be created. The <code>readline</code> module also has some useful built-in features like command history.</p>

<h3 id='ncurses'>ncurses</h3>

<p>The <a href='https://github.com/mscdex/node-ncurses'>ncurses</a> module by Brian White provides bindings to the ncurses library. This is a popular method for creating text-based user interfaces. If your application needs things like windows, menus, and more elaborate widgets such as a calendar, then ncurses is a good solution.</p>

<p>These bindings require a level of familiarisation with the original ncurses API. One freely available resource for learning ncurses is the <a href='http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/'>NCURSES Programming HOWTO</a> &#8211; combined with the <a href='https://github.com/mscdex/node-ncurses'>ncurses-node README</a> it&#8217;s possible to work out how to apply these techniques to a Node project.</p>

<p>Brian has also written some reusable widgets that come with the node-ncurses module:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>ncurses</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;ncurses&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>widgets</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;ncurses/lib/widgets&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>win</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ncurses</span><span class='p'>.</span><span class='nx'>Window</span><span class='p'>();</span>

<span class='nx'>widgets</span><span class='p'>.</span><span class='nx'>InputBox</span><span class='p'>(</span><span class='s1'>&#39;Enter your name:&#39;</span><span class='p'>,</span> <span class='p'>{</span>
    <span class='nx'>pos</span><span class='o'>:</span> <span class='s1'>&#39;center&#39;</span><span class='p'>,</span>
    <span class='nx'>style</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>colors</span><span class='o'>:</span> <span class='p'>{</span>
        <span class='nx'>bg</span><span class='o'>:</span> <span class='s1'>&#39;blue&#39;</span><span class='p'>,</span>
        <span class='nx'>input</span><span class='o'>:</span> <span class='p'>{</span>
          <span class='nx'>fg</span><span class='o'>:</span> <span class='s1'>&#39;red&#39;</span><span class='p'>,</span>
          <span class='nx'>bg</span><span class='o'>:</span> <span class='s1'>&#39;black&#39;</span>
        <span class='p'>}</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
  <span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>input</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>input</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>input</span> <span class='o'>=</span> <span class='s1'>&#39;nothing&#39;</span><span class='p'>;</span>
    <span class='p'>}</span>
    <span class='nx'>win</span><span class='p'>.</span><span class='nx'>centertext</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='s1'>&#39;You entered: &#39;</span> <span class='o'>+</span> <span class='nx'>input</span><span class='p'>);</span>
    <span class='nx'>win</span><span class='p'>.</span><span class='nx'>refresh</span><span class='p'>();</span>
    <span class='nx'>setTimeout</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='nx'>win</span><span class='p'>.</span><span class='nx'>close</span><span class='p'>();</span> <span class='p'>},</span> <span class='mi'>1000</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I&#8217;ve adapted this example from Brian&#8217;s code &#8211; it should work if you install the relevant module with <code>npm install ncurses</code>. The result looks like this:</p>

<p><img src='/images/posts/node-ncurses.png' alt='node-ncurses screenshot' /></p>

<h3 id='alternatives'>Alternatives</h3>

<p>There are simpler alternatives to ncurses. Libraries we&#8217;ve covered before, like <a href='http://visionmedia.github.com/commander.js/'>Commander.js</a> have prompts and dialogs. Then there&#8217;s <a href='https://github.com/TooTallNate/ansi.js'>ansi.js</a> (License: <em>MIT</em>, npm: <em>ansi</em>) which makes working with 256 ANSI colours relatively painless, particularly for web developers who are familiar with hex colours:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>cursor</span><span class='p'>.</span><span class='nx'>hex</span><span class='p'>(</span><span class='s1'>&#39;#660000&#39;</span><span class='p'>).</span><span class='nx'>bold</span><span class='p'>().</span><span class='nx'>underline</span><span class='p'>();</span>
</code></pre>
</div>
<p><a href='https://github.com/jocafa/node-term-ui'>TermUI</a> (npm: <em>node-term-ui</em>) by Josh Faul has a chainable event-based API that can move the cursor around and output text with various colours:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>TermUI</span>
  <span class='p'>.</span><span class='nx'>pos</span><span class='p'>(</span><span class='mi'>10</span><span class='p'>,</span><span class='mi'>20</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>fg</span><span class='p'>(</span><span class='nx'>TermUI</span><span class='p'>.</span><span class='nx'>C</span><span class='p'>.</span><span class='nx'>w</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>bg</span><span class='p'>(</span><span class='nx'>TermUI</span><span class='p'>.</span><span class='nx'>C</span><span class='p'>.</span><span class='nx'>w</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>out</span><span class='p'>(</span><span class='s1'>&#39;Hello, world!&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>There&#8217;s even a tab completion module: <a href='https://github.com/hij1nx/complete'>complete</a> (License: <em>MIT</em>, npm: <em>complete</em>) by hij1nx. It&#8217;s actually designed to work with bash completion, and will write to <code>.bashrc</code> or <code>.bash_profile</code>:</p>
<div class='highlight'><pre><code class='sh'><span class='c'># Node Completion - Auto-generated, do not touch.</span>
<span class='nb'>shopt</span> -s progcomp
<span class='k'>for </span>f in <span class='k'>$(</span><span class='nb'>command </span>ls ~/.node-completion<span class='k'>)</span>; <span class='k'>do</span>
<span class='k'>  </span><span class='nv'>f</span><span class='o'>=</span><span class='s2'>&quot;$HOME/.node-completion/$f&quot;</span>
  <span class='nb'>test</span> -f <span class='s2'>&quot;$f&quot;</span> <span class='o'>&amp;&amp;</span> . <span class='s2'>&quot;$f&quot;</span>
<span class='k'>done</span>
</code></pre>
</div>
<p>There are dozens more interesting command-line UI libraries out there. If you&#8217;ve written something that you&#8217;d like us to feature in a Node Roundup post, then please <a href='/contact.html'>get in touch</a>!</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page29">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <strong>30</strong>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page31">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

