http://dailyjs.com/2012/12/20/backbone-tutorial-4/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 07:47:48 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Tue, 22 Jul 2014 17:17:01 GMT
ETag: "1b001f-819c-4fecb64467d40"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8032
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Backbone.js Tutorial: Backbone.sync</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2012/12/20/backbone-tutorial-4">Backbone.js Tutorial: Backbone.sync</a></h2>

<div class="meta">
  20 Dec 2012 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#backbone.js">backbone.js</a>
    
      <a href="/tags.html#mvc">mvc</a>
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#backgoog">backgoog</a>
    
  </span>
</div>

<div id="post">
<ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'><strong>Part 4: Backbone.sync</strong></a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>c1d5a2e7cc</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard c1d5a2e7cc
</code></pre>
</div>
<h3 id='googles_tasks_api'>Google&#8217;s Tasks API</h3>

<p>To recap: the point of this tutorial series is to build a Backbone.js single page application that uses client-side JavaScript to communicate with Google&#8217;s authentication and to-do list APIs. Got that? Good!</p>

<p>Google provides access to our to-do lists through two APIs:</p>

<ul>
<li><a href='https://developers.google.com/google-apps/tasks/v1/reference/tasklists#resource'>Tasklists</a></li>

<li><a href='https://developers.google.com/google-apps/tasks/v1/reference/tasks'>Tasks</a></li>
</ul>

<p>When loading Google&#8217;s JavaScript, the browser is bestowed with a global called <code>gapi</code> that provides access to various objects and methods. In the last part, I quietly included a call to <code>gapi.client.load</code> that loads the <code>tasks</code> API:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='s1'>&#39;tasks&#39;</span><span class='p'>,</span> <span class='s1'>&#39;v1&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='cm'>/* Loaded */</span> <span class='p'>});</span>
</code></pre>
</div>
<p>This can be found in <code>app/js/gapi.js</code>. The remaining challenge before building the interface is to implement a new <code>Backbone.sync</code> method that uses <code>gapi</code> to communicate with the Tasks and Tasklists APIs.</p>

<h3 id='backbonesync_structure'>Backbone.sync Structure</h3>

<p>I&#8217;ve already talked about the overall structure of <code>Backbone.sync</code> in <a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>part 2</a>. The pattern I&#8217;ll use in these tutorials is fairly generic, so you could use the same approach to communicate with something other than Google&#8217;s APIs.</p>

<p>The <code>sync</code> method itself takes three arguments, the first of which is the <code>method</code> (<code>create</code>, <code>update</code>, <code>delete</code>, and <code>read</code>). We need to map <code>method</code> to something Google&#8217;s API can understand.</p>

<p>This is what we&#8217;ve got so far:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>method</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;create&#39;</span><span class='o'>:</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;update&#39;</span><span class='o'>:</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;delete&#39;</span><span class='o'>:</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>
    <span class='k'>break</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Google&#8217;s Tasks API methods map to the Backbone <code>method</code> argument like this:</p>
<table class='amy'>
  <thead>
    <tr>
      <th>Google Tasks API</th><th>Backbone.sync Method</th><th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>insert</code></td><td><code>create</code></td><td>Create a new task.</td>
    </tr>
    <tr>
      <td><code>update</code></td><td><code>update</code></td><td>Update an existing task.</td>
    </tr>
    <tr>
      <td><code>delete</code></td><td><code>delete</code></td><td>Delete a task.</td>
    </tr>
    <tr>
      <td><code>list</code></td><td><code>read</code></td><td>Get a list of tasks.</td>
    </tr>
  </tbody>
</table>
<p>Even though Google&#8217;s API doesn&#8217;t look like the Rails 3-based RESTful API that Backbone.js is designed for out of the box, it&#8217;s still very close.</p>

<h3 id='making_requests_with_'>Making Requests with <code>gapi</code></h3>

<p>The <code>gapi</code> object makes requests using this pattern:</p>

<ul>
<li>Call one of the <code>gapi.client.tasks</code> methods with the <em>request content</em> to get a <code>request</code> object</li>

<li>Call <code>request.execute</code> with a callback to send the request</li>

<li>The callback receives a <code>response</code> object, much like a standard Ajax request</li>
</ul>

<p>Here&#8217;s what this looks like in reality:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>requestContent</span> <span class='o'>=</span> <span class='p'>{}</span>
  <span class='p'>,</span> <span class='nx'>request</span>
  <span class='p'>,</span> <span class='nx'>gapiResource</span><span class='p'>;</span>

<span class='nx'>gapiResource</span> <span class='o'>=</span> <span class='s1'>&#39;tasks&#39;</span><span class='p'>;</span>
<span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;tasklist&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>tasklistId</span><span class='p'>;</span> <span class='c1'>// Assuming we have one</span>
<span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>

<span class='c1'>// &#39;insert&#39; is for creating new tasks</span>
<span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>gapiResource</span><span class='p'>].</span><span class='nx'>insert</span><span class='p'>(</span><span class='nx'>requestContent</span><span class='p'>);</span>

<span class='c1'>// Send the request to the API</span>
<span class='nx'>request</span><span class='p'>.</span><span class='nx'>execute</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Handle the response</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Looking at this, it&#8217;s clear that we need two models: <code>Task</code> and <code>TaskList</code>. There also need to be two corresponding collections: <code>Tasks</code> and <code>TaskLists</code>.</p>

<p>Backbone models and collections have URLs &#8211; these are used for making API requests. Similarly, Google&#8217;s APIs have URLs: <code>tasks</code> and <code>tasklists</code>, so by using the model URL <code>Backbone.sync</code> can determine which API resource is required for a given request.</p>

<h3 id='models'>Models</h3>

<p>Create a new directory called <code>app/js/models</code> and add <code>task.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>Task</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Model</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasks&#39;</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>Task</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>You&#8217;ll also want to create a <code>app/js/models/tasklist.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TaskList</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Model</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasklists&#39;</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TaskList</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='collections'>Collections</h3>

<p>Create another new directory called <code>app/js/collections</code> and add <code>tasklists.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;models/tasklist&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>TaskList</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TaskLists</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>TaskList</span>
  <span class='p'>,</span> <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasklists&#39;</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TaskLists</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>We&#8217;re going to use the <code>TaskList</code> collection later on to load your task lists.</p>

<h3 id='making_api_requests'>Making API Requests</h3>

<p>Open up <code>app/js/gapi.js</code> and add a new line after line 36:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>auth</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>hide</span><span class='p'>();</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#signed-in-container&#39;</span><span class='p'>).</span><span class='nx'>show</span><span class='p'>();</span>
<span class='nx'>self</span><span class='p'>.</span><span class='nx'>trigger</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>);</span> <span class='c1'>// This one</span>
</code></pre>
</div>
<p>This <code>&#39;ready&#39;</code> event will be used to signify that authentication was successful, and the Tasks API is ready for use. Next, add the following two lines to <code>Backbone.sync</code>, inside the <code>read</code> switch case:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>case</span> <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>
  <span class='kd'>var</span> <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>].</span><span class='nx'>list</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>data</span><span class='p'>);</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='k'>break</span><span class='p'>;</span>
</code></pre>
</div>
<p>This code creates a request, and then <code>Backbone.gapiRequest</code> will execute it and delegate the response.</p>

<p>Here&#8217;s the most basic <code>Backbone.gapiRequest</code> implementation:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>result</span><span class='p'>;</span>
  <span class='nx'>request</span><span class='p'>.</span><span class='nx'>execute</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>res</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>);</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>items</span><span class='p'>;</span>
      <span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>,</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>request</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>All it does is run <code>request.execute</code>, which is provided by Google, and then maps the result to be compatible with Backbone&#8217;s API by running the <code>success</code> and <code>error</code> callbacks.</p>

<p>Just so you can see something is really happening, open <code>app/js/app.js</code> and make it load the <code>TaskLists</code> collection by changing the <code>define</code> invocation at the top:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;gapi&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/app&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/auth&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;collections/tasklists&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>ApiManager</span><span class='p'>,</span> <span class='nx'>AppView</span><span class='p'>,</span> <span class='nx'>AuthView</span><span class='p'>,</span> <span class='nx'>TaskLists</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Now add this to the <code>connectGapi</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>userId</span><span class='o'>:</span> <span class='s1'>&#39;@me&#39;</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>_</span><span class='p'>.</span><span class='nx'>each</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;title&#39;</span><span class='p'>));</span>
    <span class='p'>});</span>
  <span class='p'>}});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>That code uses Underscore&#8217;s <code>each</code> method to iterate over each &#8220;model&#8221; returned by <code>Backbone.sync</code>, which is called by the <code>TaskList</code> collection.</p>

<p>Run the server with <code>npm start</code>, and visit <code>http://localhost:8080</code>. If you run it in a browser that supports <code>console</code>, then you should see your task lists printed out.</p>
<div class='image'>
  <img src='/images/posts/backbone-tutorial-api-example.png' alt='' />
  <small>My task lists.</small>
</div>
<p>If you&#8217;ve got this working then you&#8217;re not far off building a real world Backbone.js app that communicates with Google&#8217;s APIs. The same concepts can be applied to other Google JavaScript APIs.</p>

<h3 id='summary'>Summary</h3>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/fcd653ec6fa5916246e3f8b9b5f942f4be31d2e7'>alexyoung / dailyjs-backbone-tutorial, commit fcd653ec6</a>.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
      <li>
        <div>18 Jul 2014</div>
        <a href="/2014/07/18/lazy-json-undo">Undo with Object.observe</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2012/12/20/backbone-tutorial-4/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

