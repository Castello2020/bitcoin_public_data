http://dailyjs.com/2012/09/24/linkedhashmap/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 00:15:34 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "138026-cb87-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 9227
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Linking the Hash Map</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2012/09/24/linkedhashmap">Linking the Hash Map</a></h2>

<div class="meta">
  24 Sep 2012 |
  <span class="author">By Justin Naifeh</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#data structures">data structures</a>
    
      <a href="/tags.html#linked hash map">linked hash map</a>
    
  </span>
</div>

<div id="post">
<h3 id='the_hashmap'>The Hashmap</h3>

<p>The <a href='https://en.wikipedia.org/wiki/Hashmap'>hash map</a> is a classic and indispensable data structure in application programming. It is so ubiquitous that almost every modern language supports it either with a library, or by baking the functionality into the syntax itself. Hash maps are often implemented as an <a href='http://www.quirksmode.org/js/associative.html'>associative array</a>.</p>

<p>A hash map provides constant-time access to a value via a unique key. The most common methodology in JavaScript is to use an object literal as a hash map.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='p'>{};</span>

<span class='c1'>// dot notation</span>
<span class='nx'>map</span><span class='p'>.</span><span class='nx'>foo</span> <span class='o'>=</span> <span class='s2'>&quot;bar&quot;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>.</span><span class='nx'>foo</span><span class='p'>);</span> <span class='c1'>// &quot;bar&quot;</span>

<span class='c1'>// bracket notation</span>
<span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;foo&quot;</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;bar&quot;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;foo&quot;</span><span class='p'>]);</span> <span class='c1'>// &quot;bar&quot;</span>

<span class='c1'>// mix and match</span>
<span class='nx'>map</span><span class='p'>.</span><span class='nx'>foo</span> <span class='o'>=</span> <span class='s2'>&quot;bar&quot;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;foo&quot;</span><span class='p'>]);</span> <span class='c1'>// &quot;bar&quot;</span>
</code></pre>
</div>
<p>In this example, the string <code>&quot;bar&quot;</code> is the value assigned to the object property <code>foo</code>. Notice that treating an object literal like a hash map is the same syntax as normal property access and manipulation; we can leverage the language itself as a data structure. Because there isn&#8217;t native hash code support in JavaScript, the <code>Object.prototype.toString()</code> method is invoked on the key to create the property name.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='p'>{};</span>
  
<span class='nx'>map</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;one&quot;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span> <span class='o'>===</span> <span class='s2'>&quot;one&quot;</span><span class='p'>);</span> <span class='c1'>// true</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;1&quot;</span><span class='p'>]</span> <span class='o'>===</span> <span class='s2'>&quot;one&quot;</span><span class='p'>);</span> <span class='c1'>// true</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[(</span><span class='mi'>1</span><span class='p'>).</span><span class='nx'>toString</span><span class='p'>()]</span> <span class='o'>===</span> <span class='s2'>&quot;one&quot;</span><span class='p'>);</span> <span class='c1'>// true</span>
</code></pre>
</div>
<p>While object literals suffice for basic hash map uses like caching, there are many operations that require boilerplate code such as listing all values in a hash map:</p>
<div class='highlight'><pre><code class='javascript'> 
<span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='p'>{};</span>

<span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;key1&quot;</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;one&quot;</span><span class='p'>;</span>
<span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;key2&quot;</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;two&quot;</span><span class='p'>;</span>
<span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;key3&quot;</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;three&quot;</span><span class='p'>;</span>

<span class='c1'>// get all values</span>
<span class='kd'>var</span> <span class='nx'>values</span> <span class='o'>=</span> <span class='p'>[];</span>
<span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='nx'>map</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>values</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]);</span>
  <span class='p'>}</span>
<span class='p'>}</span>

<span class='c1'>// the key order is not guaranteed with a basic hash map</span>
<span class='c1'>// and each browser might have different implementations</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>values</span><span class='p'>.</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;,&#39;</span><span class='p'>));</span> <span class='c1'>// &quot;two,three,one&quot;</span>
</code></pre>
</div>
<p>To rescue ourselves from reinventing the wheel, it is advisable to use a hash map class that encapsulates the behavior. The details of implementation is beyond the scope of this article, but there are many open-source libraries and articles that are worth perusing for details. For this article, we will use the following rudimentary hash map class:</p>

<p><img src='/images/posts/lhm-hashmap.png' alt='Hash Map' /></p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * Simple hash map class.</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>HashMap</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span> <span class='o'>=</span> <span class='p'>{};</span>
<span class='p'>};</span>

<span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>

  <span class='cm'>/**</span>
<span class='cm'>   * Puts the key/value pair into the map, overwriting</span>
<span class='cm'>   * any existing entry.</span>
<span class='cm'>   */</span>
  <span class='nx'>put</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>containsKey</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span><span class='o'>++</span><span class='p'>;</span>
    <span class='p'>}</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Removes the entry associated with the key</span>
<span class='cm'>   * and returns the removed value.</span>
<span class='cm'>   */</span>
  <span class='nx'>remove</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>containsKey</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span><span class='o'>--</span><span class='p'>;</span>
      <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>];</span>
      <span class='k'>delete</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>];</span>
      <span class='k'>return</span> <span class='nx'>value</span><span class='p'>;</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Checks if this map contains the given key.</span>
<span class='cm'>   */</span>
  <span class='nx'>containsKey</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>);</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Checks if this map contains the given value.</span>
<span class='cm'>   * Note that values are not required to be unique.</span>
<span class='cm'>   */</span>
  <span class='nx'>containsValue</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span> <span class='o'>===</span> <span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span>
        <span class='p'>}</span>
      <span class='p'>}</span>
    <span class='p'>}</span>

    <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Returns the value associated with the given key.</span>
<span class='cm'>   */</span>
  <span class='nx'>get</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>containsKey</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='o'>?</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span> <span class='o'>:</span> <span class='kc'>null</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Clears all entries from the map.</span>
<span class='cm'>   */</span>
  <span class='nx'>clear</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Returns an array of all keys in the map.</span>
<span class='cm'>   */</span>
  <span class='nx'>keys</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>keys</span> <span class='o'>=</span> <span class='p'>[];</span>
    <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='nx'>keys</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>);</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
    <span class='k'>return</span> <span class='nx'>keys</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Returns an array of all values in the map.</span>
<span class='cm'>   */</span>
  <span class='nx'>values</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>values</span> <span class='o'>=</span> <span class='p'>[];</span>
    <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='nx'>values</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]);</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
    <span class='k'>return</span> <span class='nx'>values</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Returns the size of the map, which is</span>
<span class='cm'>   * the number of keys.</span>
<span class='cm'>   */</span>
  <span class='nx'>size</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This <code>HashMap</code> class lacks advanced features, but it is simple, effective, and library-agnostic.</p>

<h3 id='insertion_order'>Insertion Order</h3>

<p>Even a robust and well tested hash map has one shortcoming if it relies on an object literal backbone: the return order of <code>HashMap.keys()</code> or <code>HashMap.values()</code> is unpredictable, meaning insertion order is not preserved. The overhead of tracking insertion order is why most hash map implementations ignore such a requirement and do not guarantee return order.</p>

<p>Although insertion order seems trivial, there are many cases in which it is critical to use hash maps for constant time access while also tracking when key/value pairs were inserted into the map. For example, a user interface library might allow a developer to add widgets to a dashboard.</p>

<p><img src='/images/posts/lhm-composition.png' alt='Composition' /></p>

<p><code>Widget</code> objects are added to a <code>Dashboard</code>, and when a <code>Dashboard</code> is rendered, so too are all of its <code>Widget</code> children in a predictable order. This is to avoid having a dashboard&#8217;s widgets randomly allocated to different layout slots per render.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>dashboard</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Dashboard</span><span class='p'>();</span>
<span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>Calendar</span><span class='p'>(</span><span class='s2'>&quot;myCalendar&quot;</span><span class='p'>));</span>
<span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>StockTicker</span><span class='p'>(</span><span class='s2'>&quot;myStockTicker&quot;</span><span class='p'>));</span>
<span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>Twitter</span><span class='p'>(</span><span class='s2'>&quot;myTwitter&quot;</span><span class='p'>));</span>

<span class='c1'>// modify the Calendar before rendering</span>
<span class='kd'>var</span> <span class='nx'>calendar</span> <span class='o'>=</span> <span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>getWidget</span><span class='p'>(</span><span class='s2'>&quot;myCalendar&quot;</span><span class='p'>);</span>
<span class='nx'>calendar</span><span class='p'>.</span><span class='nx'>setTimeZone</span><span class='p'>(</span><span class='s2'>&quot;MST&quot;</span><span class='p'>);</span>

<span class='c1'>// render the dashboard and its widgets in order: Calendar, StockTicker, Twitter</span>
<span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
</code></pre>
</div>
<p>We access the <code>Calendar</code> object&#8211;and other <code>Widget</code> objects&#8211;by its unique id, with <code>Dashboard.getWidget()</code> internally delegating to a private hash map. This introduces an implementation problem: we want to preserve the widget insertion order but give the developer constant time access to its <code>Widget</code> children. A common solution is to maintain two data structures within the <code>Dashboard</code> by synchronizing a hash map for access and an <code>Array</code> for order.</p>

<p><img src='/images/posts/lhm-dashboard.png' alt='Dashboard' /></p>

<p>The code to ensure consistency and integrity between the two structures is non-trivial and not reusable, hence it is not ideal. Another solution is to abandon the hash map and rely solely on an <code>Array</code>, but this will slow <code>Widget</code> access time to a crawling <em>O(n)</em>, which is also unacceptable.</p>

<p>Enter the linked hash map.</p>

<p>A linked hash map is a specialized hash map that is synchronized with a <a href='https://en.wikipedia.org/wiki/Doubly_linked_list'>doubly linked list</a>. We can merge these two data structures into a new class called <code>LinkedHashMap</code>, which allows constant time access backed by a doubly linked list to preserve insertion order. There is minimal overhead to synchronize the two structures when performing write operations on the core hash map. By extending the <code>HashMap</code> class we can add an optimized doubly linked list to track the keys. (If the hash map cannot be subclassed then consider <a href='https://en.wikipedia.org/wiki/Decorator_pattern'>decorating</a> it or rolling your own if there are application-specific or critical optimization requirements.)</p>

<p><img src='/images/posts/lhm-linkedhashmap.png' alt='LinkedHashMap' /></p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * Constructor that initializes the parent HashMap</span>
<span class='cm'> * and the doubly linked list head and tail.</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>LinkedHashMap</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// invoke super constructor</span>
  <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>

  <span class='c1'>// &quot;inner&quot; Entry class</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_Entry</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>prev</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>next</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>value</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>;</span>
  <span class='p'>};</span>

  <span class='c1'>// doubly linkedlist instance variables</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='c1'>// extend HashMap and overwrite the necessary functions</span>
<span class='kd'>var</span> <span class='nx'>temp</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{};</span>
<span class='nx'>temp</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>;</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>temp</span><span class='p'>();</span>

<span class='cm'>/**</span>
<span class='cm'> * Puts the key/value pair in the HashMap and records</span>
<span class='cm'> * the insertion record if it does not exist.</span>
<span class='cm'> * </span>
<span class='cm'> * @override HashMap.put()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>put</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>entry</span> <span class='o'>=</span> <span class='k'>new</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_Entry</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>containsKey</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>size</span><span class='p'>()</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>;</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>;</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span><span class='p'>.</span><span class='nx'>next</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>;</span>
      <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>prev</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span><span class='p'>;</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>

  <span class='cm'>/*</span>
<span class='cm'>   * EDIT: Added optimization suggested</span>
<span class='cm'>   * by Chad Walker (see article comments).</span>
<span class='cm'>   */</span>
  <span class='c1'>// overwrite the value with an optimized Object wrapper</span>
  <span class='nx'>value</span> <span class='o'>=</span> <span class='p'>{</span><span class='nx'>value</span><span class='o'>:</span><span class='nx'>value</span><span class='p'>,</span> <span class='nx'>entry</span><span class='o'>:</span><span class='nx'>entry</span><span class='p'>};</span>

  <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>key</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>);</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Returns the value associated with the key.</span>
<span class='cm'> * </span>
<span class='cm'> * @override HashMap.get()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>get</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>){</span>
  <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>key</span><span class='p'>);</span>
  
  <span class='cm'>/*</span>
<span class='cm'>   * EDIT: Added optimization suggested </span>
<span class='cm'>   * by Chad Walker (see article comments).</span>
<span class='cm'>   */</span>  
  <span class='c1'>// we must unwrap the value</span>
  <span class='k'>return</span> <span class='nx'>value</span> <span class='o'>!=</span> <span class='kc'>null</span> <span class='o'>?</span> <span class='nx'>value</span><span class='p'>.</span><span class='nx'>value</span> <span class='o'>:</span> <span class='kc'>null</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Removes the key/value pair from the map and </span>
<span class='cm'> * the key from the insertion order.</span>
<span class='cm'> * </span>
<span class='cm'> * @override Hashmap.remove()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>remove</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>

  <span class='cm'>/*</span>
<span class='cm'>   * EDIT: Added optimization suggested </span>
<span class='cm'>   * by Chad Walker (see article comments).</span>
<span class='cm'>   */</span>
  <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>value</span> <span class='o'>!=</span> <span class='kc'>null</span><span class='p'>)</span> <span class='p'>{</span>
  
    <span class='kd'>var</span> <span class='nx'>entry</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>.</span><span class='nx'>entry</span><span class='p'>;</span>
  
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>entry</span> <span class='o'>===</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>;</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span><span class='p'>.</span><span class='nx'>prev</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>entry</span> <span class='o'>===</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>prev</span><span class='p'>;</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span><span class='p'>.</span><span class='nx'>next</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>prev</span><span class='p'>.</span><span class='nx'>next</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>;</span>
      <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>.</span><span class='nx'>prev</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>prev</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>

  <span class='k'>return</span> <span class='nx'>value</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Clears the HashMap and insertion order.</span>
<span class='cm'> *</span>
<span class='cm'> * @override HashMap.clear()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>clear</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>clear</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Returns the HashMap keys in insertion order.</span>
<span class='cm'> *</span>
<span class='cm'> * @override HashMap.keys()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>keys</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>keys</span> <span class='o'>=</span> <span class='p'>[];</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>cur</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span><span class='p'>;</span> <span class='nx'>cur</span> <span class='o'>!=</span> <span class='kc'>null</span><span class='p'>;</span> <span class='nx'>cur</span> <span class='o'>=</span> <span class='nx'>cur</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>keys</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>cur</span><span class='p'>.</span><span class='nx'>value</span><span class='p'>);</span>
  <span class='p'>}</span>
  <span class='k'>return</span> <span class='nx'>keys</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Returns the HashMap values in insertion order.</span>
<span class='cm'> * </span>
<span class='cm'> * @override HashMap.values()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>values</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>values</span> <span class='o'>=</span> <span class='p'>[];</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>cur</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span><span class='p'>;</span> <span class='nx'>cur</span> <span class='o'>!=</span> <span class='kc'>null</span><span class='p'>;</span> <span class='nx'>cur</span> <span class='o'>=</span> <span class='nx'>cur</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>values</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='nx'>cur</span><span class='p'>.</span><span class='nx'>value</span><span class='p'>));</span>
  <span class='p'>}</span>
  <span class='k'>return</span> <span class='nx'>values</span><span class='p'>;</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This new data structure, a marriage between a hash map and doubly linked list, is perfect as the sole backbone of <code>Dashboard</code> to manage widgets.</p>

<p><img src='/images/posts/lhm-widgets.png' alt='Dashboard' /></p>

<h3 id='moving_on'>Moving On</h3>

<p>With just a little overhead for write operations to the <code>LinkedHashMap</code>, even basic problems that require hash map behavior can query the insertion order with ease.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>LinkedHashMap</span><span class='p'>();</span>

<span class='nx'>map</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span><span class='s2'>&quot;key1&quot;</span><span class='p'>,</span> <span class='s2'>&quot;one&quot;</span><span class='p'>);</span>
<span class='nx'>map</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span><span class='s2'>&quot;key2&quot;</span><span class='p'>,</span> <span class='s2'>&quot;two&quot;</span><span class='p'>);</span>
<span class='nx'>map</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span><span class='s2'>&quot;key3&quot;</span><span class='p'>,</span> <span class='s2'>&quot;three&quot;</span><span class='p'>);</span>

<span class='c1'>// return order is now predictable</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>.</span><span class='nx'>keys</span><span class='p'>().</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;,&#39;</span><span class='p'>));</span> <span class='c1'>// &quot;key1,key2,key3&quot;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>.</span><span class='nx'>values</span><span class='p'>().</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;,&#39;</span><span class='p'>));</span> <span class='c1'>// &quot;one,two,three&quot;</span>
</code></pre>
</div>
<p>Because <code>LinkedHashMap</code> implements the same API as <code>HashMap</code> via inheritance, calling code can switch to a <code>LinkedHashMap</code> at runtime without breaking. The beauty of object-oriented design is that the declared type (<code>HashMap</code>) of a variable is irrelevant to the runtime type (<code>LinkedHashMap</code>). The only difficulty is enforcing the API in a type-unsafe language like JavaScript&#8230;but that&#8217;s another article.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2012/09/24/linkedhashmap/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

