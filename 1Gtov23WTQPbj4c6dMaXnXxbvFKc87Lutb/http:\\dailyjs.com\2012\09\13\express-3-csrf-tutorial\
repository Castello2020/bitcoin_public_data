http://dailyjs.com/2012/09/13/express-3-csrf-tutorial/
HTTP/1.1 200 OK
Date: Sat, 26 Jul 2014 19:13:26 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Fri, 25 Jul 2014 16:51:41 GMT
ETag: "fc4a6-9ac1-4ff0763334140"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 9560
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Express 3 Tutorial: Contact Forms with CSRF</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2012/09/13/express-3-csrf-tutorial">Express 3 Tutorial: Contact Forms with CSRF</a></h2>

<div class="meta">
  13 Sep 2012 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#express">express</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#bootstrap">bootstrap</a>
    
  </span>
</div>

<div id="post">
<p><img src='/images/posts/sayhello.png' alt='The contact form' /></p>

<p>This tutorial is a hands on, practical introduction to writing Express 3 applications complete with CSRF protection. As a bonus, it should be fairly easy to install on Heroku.</p>

<h3 id='prerequisites'>Prerequisites</h3>

<p>A working Node installation is assumed, and basic knowledge of Node and the command-line.</p>

<h3 id='getting_started'>Getting Started</h3>

<p>Create a new directory, then create a new file called <code>package.json</code> that looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>
  <span class='s2'>&quot;author&quot;</span><span class='o'>:</span> <span class='s2'>&quot;Alex R. Young&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;name&quot;</span><span class='o'>:</span> <span class='s2'>&quot;dailyjs-contact-example&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;version&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.0.1&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;private&quot;</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>,</span> <span class='s2'>&quot;dependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;express&quot;</span><span class='o'>:</span> <span class='s2'>&quot;3.0&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;jade&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.27.2&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;validator&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.4.11&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;sendgrid&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>}</span>
<span class='p'>,</span> <span class='s2'>&quot;devDependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;mocha&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>},</span>
  <span class='s2'>&quot;engines&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;node&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.8.9&quot;</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Express has a built-in app generator, but I want to explain all the gory details. If you want to try it out, try typing <code>express myapp</code> in the terminal.</p>

<p>Back to the <code>package.json</code> file. The author and name can be changed as required. The <code>private</code> flag is set so we don&#8217;t accidentally publish this module to <a href='https://npmjs.org/'>npmjs.org</a>. The dependencies are as follows:</p>

<ul>
<li><code>express</code>: The web framework we&#8217;re using, version 3 has been specified</li>

<li><code>jade</code>: The template language, you could convert this project to <a href='https://npmjs.org/package/ejs'>ejs</a> or something else if desired</li>

<li><code>validator</code>: The <a href='https://github.com/chriso/node-validator'>validator</a> library will be used to validate user input</li>

<li><code>sendgrid</code>: <a href='http://sendgrid.com/'>SendGrid</a> is a commercial email provider that&#8217;s easy to use with Heroku</li>
</ul>

<p>The <code>engines</code> section has been included because it&#8217;s a good idea to be specific about Node versions when deploying to Heroku.</p>

<h3 id='configuration'>Configuration</h3>

<p>Although I typically encourage breaking up Express projects into multiple files, this project will use a single JavaScript file for brevity.</p>

<p>First, the modules are loaded, and an Express app is instantiated. Users of Express 2.x will notice that there is no longer a <code>createServer()</code> method call:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>express</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;express&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>express</span><span class='p'>()</span>
  <span class='p'>,</span> <span class='nx'>SendGrid</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;sendgrid&#39;</span><span class='p'>).</span><span class='nx'>SendGrid</span>
  <span class='p'>,</span> <span class='nx'>Validator</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;validator&#39;</span><span class='p'>).</span><span class='nx'>Validator</span>
  <span class='p'>;</span>
</code></pre>
</div>
<p>The <code>Validator</code> object is just one way to work with the node-validator module. The author has also provided <a href='https://github.com/ctavan/express-validator'>Express middleware</a> for directly validating data in requests. I didn&#8217;t use it here because I was concerned it might not work with Express 3, and I&#8217;m writing to a deadline, but it&#8217;s worth taking a look at it. In general, I like to avoid tying too much code into Express in case I want to migrate to another framework, so that&#8217;s worth considering as well.</p>

<p>The next few lines are application configuration:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;views&#39;</span><span class='p'>,</span> <span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/views&#39;</span><span class='p'>);</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;view engine&#39;</span><span class='p'>,</span> <span class='s1'>&#39;jade&#39;</span><span class='p'>);</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>cookieParser</span><span class='p'>());</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>session</span><span class='p'>({</span> <span class='nx'>secret</span><span class='o'>:</span> <span class='s1'>&#39;secret goes here&#39;</span> <span class='p'>}));</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>bodyParser</span><span class='p'>());</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>router</span><span class='p'>);</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>csrf</span><span class='p'>());</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/public&#39;</span><span class='p'>));</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>When you&#8217;re writing Express configuration, avoid copying and pasting lines from examples without fully understanding what each line does &#8211; it will get you into trouble later! You should understand what every single line does here, because changing the order of <code>app.use</code> lines can impact the way requests are processed and result in frustrating errors.</p>

<p>With that in mind, here&#8217;s what each line does:</p>

<ul>
<li><code>app.set(&#39;views&#39;, __dirname + &#39;/views&#39;)</code>: Use <code>./views</code> as the default path for the client-side templates</li>

<li><code>app.set(&#39;view engine&#39;, &#39;jade&#39;)</code>: Automatically load <code>index.jade</code> files just by passing <code>index</code></li>

<li><code>app.use(express.cookieParser())</code>: Parse the HTTP <code>Cookie</code> header and create an object in <code>req.cookies</code> with properties for each cookie</li>

<li><code>app.use(express.session...</code>: Use a session store &#8211; this is needed for the CSRF middleware</li>

<li><code>app.use(express.bodyParser())</code>: Parse the request body when forms are submitted with <code>application/x-www-form-urlencoded</code> (it also supports <code>application/json</code> and <code>multipart/form-data</code>)</li>

<li><code>app.use(app.router)</code>: Use the actual router provided by Express</li>

<li><code>app.use(express.csrf())</code>: The <a href='http://www.senchalabs.org/connect/csrf.html'>CSRF</a> protection middleware</li>

<li><code>app.use(express.static(__dirname + &#39;/public&#39;))</code>: Serve static files in the <code>./public</code> directory</li>
</ul>

<p>Next follows configuration for development and production environments:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='s1'>&#39;development&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>errorHandler</span><span class='p'>({</span> <span class='nx'>dumpExceptions</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>showStack</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>}));</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>locals</span><span class='p'>.</span><span class='nx'>pretty</span> <span class='o'>=</span> <span class='kc'>true</span><span class='p'>;</span>
  <span class='nx'>sendgrid</span> <span class='o'>=</span> <span class='p'>{</span>
    <span class='nx'>send</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>opts</span><span class='p'>,</span> <span class='nx'>cb</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Email:&#39;</span><span class='p'>,</span> <span class='nx'>opts</span><span class='p'>);</span>
      <span class='nx'>cb</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>,</span> <span class='nx'>opts</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>};</span>
<span class='p'>});</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='s1'>&#39;production&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>express</span><span class='p'>.</span><span class='nx'>errorHandler</span><span class='p'>());</span>
  <span class='nx'>sendgrid</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>SendGrid</span><span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>SENDGRID_USERNAME</span><span class='p'>,</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>SENDGRID_PASSWORD</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>app.locals.pretty = true</code> line causes Jade to render templates with indentation and newlines; otherwise it spits out a single line of HTML. Notice that <code>app.use</code> is being called outside of <code>app.configure</code> &#8211; this is perfectly fine, and <code>app.use</code> can actually be called anywhere. There was some discussion about removing <code>app.configure</code> from Express 3.x, and it isn&#8217;t technically required.</p>

<p>I&#8217;ve made a mock <code>sendgrid</code> object for development mode that just prints out the email and then runs a callback. The production configuration block uses environmental variables (<code>process.env.SENDGRID_USERNAME</code>) to set the SendGrid username and password. It&#8217;s a good idea to use environmental variables for passwords, because it means you can keep them out of your source code repository. Since only specific developers should have access to the deployment environment, then it&#8217;s potentially safer to store variables there. Heroku allows such variables to be set with <code>heroku config:add SENDGRID_USERNAME=example</code>.</p>

<h3 id='helpers'>Helpers</h3>

<p>The next few lines are new to Express 3:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>locals</span><span class='p'>.</span><span class='nx'>errors</span> <span class='o'>=</span> <span class='p'>{};</span>
<span class='nx'>app</span><span class='p'>.</span><span class='nx'>locals</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='p'>{};</span>
</code></pre>
</div>
<p>The <code>app.locals</code> object is passed to all templates, and it&#8217;s how helpers are defined in Express 3 applications. I&#8217;ve used these properties so I can write templates without first checking if these objects exist, else a <code>ReferenceError</code> would be raised.</p>

<h3 id='middleware_callbacks_csrf_protection'>Middleware Callbacks: CSRF Protection</h3>

<p>I&#8217;ve mentioned CSRF but haven&#8217;t fully explained it yet. It stands for &#8220;Cross-Site Request Forgery&#8221;, and is a class of exploits in web applications where an attacker forces another user to execute unwanted actions on a web site. In this case it&#8217;s not particularly useful, but it&#8217;s good practice to guard against CSRF attacks in production web apps. The <a href='https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF'>Open Web Application Security Project has a good article on CSRF</a>), which includes example attacks.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>csrf</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>res</span><span class='p'>.</span><span class='nx'>locals</span><span class='p'>.</span><span class='nx'>token</span> <span class='o'>=</span> <span class='nx'>req</span><span class='p'>.</span><span class='nx'>session</span><span class='p'>.</span><span class='nx'>_csrf</span><span class='p'>;</span>
  <span class='nx'>next</span><span class='p'>();</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The <a href='http://www.senchalabs.org/connect/csrf.html'>Connect CSRF middleware</a> automatically generates the <code>req.session._csrf</code> token, and this function maps it to <code>res.locals.token</code> so it will be available to templates. Any route that needs CSRF protection now just needs to include the middleware callback:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/&#39;</span><span class='p'>,</span> <span class='nx'>csrf</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>res</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>(</span><span class='s1'>&#39;index&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The form in <code>views/index.jade</code> has a hidden input:</p>
<div class='highlight'><pre><code class='text'>form(action=&#39;/contact&#39;, method=&#39;post&#39;)
  input(type=&#39;hidden&#39;, name=&#39;_csrf&#39;, value=token)
</code></pre>
</div>
<p>The <code>token</code> variable is the one set by the middleware callback in <code>res.locals.token</code>.</p>

<h3 id='validating_data'>Validating Data</h3>

<p>The contact form must be validated before an email is sent. Seeing as database storage isn&#8217;t necessary for this project, we can use the <a href='https://github.com/chriso/node-validator'>node-validator</a> module to verify user input. I&#8217;ve put this in a function to abstract it from the corresponding route:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>validate</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>v</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Validator</span><span class='p'>()</span>
    <span class='p'>,</span> <span class='nx'>errors</span> <span class='o'>=</span> <span class='p'>[]</span>
    <span class='p'>;</span>

  <span class='nx'>v</span><span class='p'>.</span><span class='nx'>error</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>msg</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>errors</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>msg</span><span class='p'>);</span>
  <span class='p'>};</span>

  <span class='nx'>v</span><span class='p'>.</span><span class='nx'>check</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>.</span><span class='nx'>name</span><span class='p'>,</span> <span class='s1'>&#39;Please enter your name&#39;</span><span class='p'>).</span><span class='nx'>len</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>100</span><span class='p'>);</span>
  <span class='nx'>v</span><span class='p'>.</span><span class='nx'>check</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>.</span><span class='nx'>email</span><span class='p'>,</span> <span class='s1'>&#39;Please enter a valid email address&#39;</span><span class='p'>).</span><span class='nx'>isEmail</span><span class='p'>();</span>
  <span class='nx'>v</span><span class='p'>.</span><span class='nx'>check</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>.</span><span class='nx'>message</span><span class='p'>,</span> <span class='s1'>&#39;Please enter a valid message&#39;</span><span class='p'>).</span><span class='nx'>len</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>1000</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='nx'>errors</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>An instance of a <code>Validator</code> is created, and I&#8217;ve set a custom error handling function. This error handling function collects the errors into an array, but there are many other solutions supported by node-validator&#8217;s API.</p>

<p>Each message property is checked against a single validation, but several could be chained together.</p>

<p>The <code>validate</code> function itself expects a <code>message</code> object which will come from the posted form later.</p>

<h3 id='sending_email'>Sending Email</h3>

<p>Emails are sent with SendGrid. Again, I&#8217;ve made a function for this to keep it out of the corresponding Express routes:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>sendEmail</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>,</span> <span class='nx'>fn</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>sendgrid</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>({</span>
    <span class='nx'>to</span><span class='o'>:</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>EMAIL_RECIPIENT</span>
  <span class='p'>,</span> <span class='nx'>from</span><span class='o'>:</span> <span class='nx'>message</span><span class='p'>.</span><span class='nx'>email</span>
  <span class='p'>,</span> <span class='nx'>subject</span><span class='o'>:</span> <span class='s1'>&#39;Contact Message&#39;</span>
  <span class='p'>,</span> <span class='nx'>text</span><span class='o'>:</span> <span class='nx'>message</span><span class='p'>.</span><span class='nx'>message</span>
  <span class='p'>},</span> <span class='nx'>fn</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>I&#8217;ve made it accept a callback so the Express route can handle cases where sending the mail fails.</p>

<h3 id='posting_the_form'>Posting the Form</h3>

<p>Here is the Express route that handles the form post:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>post</span><span class='p'>(</span><span class='s1'>&#39;/contact&#39;</span><span class='p'>,</span> <span class='nx'>csrf</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>req</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>.</span><span class='nx'>message</span>
    <span class='p'>,</span> <span class='nx'>errors</span> <span class='o'>=</span> <span class='nx'>validate</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>)</span>
    <span class='p'>,</span> <span class='nx'>locals</span> <span class='o'>=</span> <span class='p'>{}</span>
    <span class='p'>;</span>

  <span class='kd'>function</span> <span class='nx'>render</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>res</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>(</span><span class='s1'>&#39;index&#39;</span><span class='p'>,</span> <span class='nx'>locals</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>errors</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>sendEmail</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>error</span> <span class='o'>=</span> <span class='s1'>&#39;Error sending message&#39;</span><span class='p'>;</span>
        <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>message</span><span class='p'>;</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>notice</span> <span class='o'>=</span> <span class='s1'>&#39;Your message has been sent.&#39;</span><span class='p'>;</span>
      <span class='p'>}</span>
      <span class='nx'>render</span><span class='p'>();</span>
    <span class='p'>});</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>error</span> <span class='o'>=</span> <span class='s1'>&#39;Your message has errors:&#39;</span><span class='p'>;</span>
    <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>errors</span> <span class='o'>=</span> <span class='nx'>errors</span><span class='p'>;</span>
    <span class='nx'>locals</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>message</span><span class='p'>;</span>
    <span class='nx'>render</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It uses the <code>csrf</code> middleware callback to generate another token. This is required because the contact form will always be rerendered. The form data can be found in <code>req.body.message</code> &#8211; I&#8217;ve used form variables like <code>message[email]</code>, so these will get translated into a JavaScript object with corresponding properties.</p>

<p>When there are invalid fields, or sending the email fails, the contact form will be rendered again with the original message. To make the form retain the values, the <code>value</code> property of each field must be set:</p>
<div class='highlight'><pre><code class='text'>form(action=&#39;/contact&#39;, method=&#39;post&#39;)
  input(type=&#39;hidden&#39;, name=&#39;_csrf&#39;, value=token)
  .control-group
    label.control-label(for=&#39;message_name&#39;) Your Name
    .controls
      input#message_name.input-xxlarge(type=&#39;text&#39;, placeholder=&#39;Name&#39;, name=&#39;message[name]&#39;, value=message.name)
  .control-group
    label.control-label(for=&#39;message_email&#39;) Email
    .controls
      input#message_email.input-xxlarge(type=&#39;text&#39;, placeholder=&#39;Email&#39;, name=&#39;message[email]&#39;, value=message.email)
  .control-group
    label.control-label(for=&#39;message_message&#39;) Message
    .controls
      textarea#message_message.input-xxlarge(placeholder=&#39;Enter message&#39;, rows=&#39;6&#39;, name=&#39;message[message]&#39;)=message.message
  button.btn(type=&#39;submit&#39;) Send Message
</code></pre>
</div>
<p>This is quite a chunk of Jade, but the extra markup is there because I&#8217;ve used <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a> to style the project.</p>

<p>The <code>locals</code> object I&#8217;ve used gets passed to the <code>res.render</code> message and contains the form data when required.</p>

<h3 id='download'>Download</h3>

<p>The full source is available here: <a href='https://github.com/alexyoung/dailyjs-contact-form-tutorial'>alexyoung / dailyjs-contact-form-tutorial</a>.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>25 Jul 2014</div>
        <a href="/2014/07/25/typescript-roundup">TypeScript Log, Supplemental</a>
      </li>
    
      <li>
        <div>24 Jul 2014</div>
        <a href="/2014/07/24/typescript-compiler">TypeScript's Compiler</a>
      </li>
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2012/09/13/express-3-csrf-tutorial/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

