http://dailyjs.com/2010/04/01/framework-part-6/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 18:04:25 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:45 GMT
ETag: "14109a-630c-4fedef21ca140"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8045
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Let's Make a Framework: Selectors</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2010/04/01/framework-part-6">Let's Make a Framework: Selectors</a></h2>

<div class="meta">
  01 Apr 2010 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#web">web</a>
    
      <a href="/tags.html#frameworks">frameworks</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#lmaf">lmaf</a>
    
  </span>
</div>

<div id="post">
<p>Welcome to part 6 of <em>Let&#8217;s Make a Framework</em>, the ongoing series about building a JavaScript framework.  This part explores <span class="caps">CSS</span> selectors.</p>
<p>If you haven&#8217;t been following along, these articles are tagged with <a href="http://dailyjs.com/tags.html#lmaf">lmaf</a>.  The project we&#8217;re creating is called Turing and is available on GitHub: <a href="http://github.com/alexyoung/turing.js/">turing.js</a>.  You can contribute!  Fork and message me with your changes.</p>
<p>I&#8217;ve been adding more functional methods to the framework behind the scenes, if you want to keep up follow on GitHub.</p>
<p>In this part I&#8217;ll explain the basics behind selector engines, explore the various popular ones, and examine their characteristics.  This is a major area for JavaScript web frameworks &#8212; it&#8217;ll take me a few posts to do it justice.</p>
<h3>History</h3>
<p>The importance and need for cross-browser selector APIs is a big thing.  Whether the selectors are XPath or <span class="caps">CSS</span>, browser implementors are not consistent.</p>
<p>To understand why a selector engine is important, imagine working in the late 90s without a JavaScript framework:</p>
<div class="highlight"><pre><code class="javascript"><span class="nb">document</span><span class="p">.</span><span class="nx">all</span>    <span class="c1">// A proprietary property in IE4</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;navigation&#39;</span><span class="p">);</span>
</code></pre>
</div>
<p>The first thing that people realised was this could be shortened.  <a href="http://prototypejs.org">Prototype</a> does this with <code>$()</code>:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">elements</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
      <span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]));</span>
    <span class="k">return</span> <span class="nx">elements</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span>
    <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">Element</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
</div>
<p>Rather than simply aliasing <code>document.getElementById</code>, Prototype can search for multiple IDs and extends elements with its own features.</p>
<p>What we really wanted though was <code>getElementsBySelector</code>.  We don&#8217;t just think in terms of IDs or tag names, we want to apply operations to sets of elements.  <span class="caps">CSS</span> selectors are how we usually do this for styling, so it makes sense that similarly styled objects should <em>behave</em> in a similar way.</p>
<p>Simon Willison wrote <a href="http://simonwillison.net/2003/Mar/25/getElementsBySelector/" title="">getElementsBySelector</a> back in 2003.  This implementation is partially responsible for a revolution of <span class="caps">DOM</span> traversal and manipulation.</p>
<p>Browsers provide more than just <code>getElementById</code> &#8212; there&#8217;s also <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#dom-getelementsbyclassname">getElementsByClassName</a>, <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#dom-document-getelementsbyname">getElementsByName</a>, and lots of other <span class="caps">DOM</span>-related methods.  Most non-IE browsers support searching using XPath expressions using <a href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator-evaluate">evaluate</a>.</p>
<p>Modern browsers also support <a href="http://www.w3.org/TR/selectors-api/">querySelector and querySelectorAll</a>.  Again, these methods are limited by poor IE support.</p>
<h3>Browser Support</h3>
<p>Web developers consider browser support a necessary evil.  In selector engines, however, browser support is a major concern.  Easing the pain of working with the <span class="caps">DOM</span> and getting reliable results is fundamental.</p>
<p>I&#8217;ve seen some fascinating ways to work around browser bugs.  Look at this code from <a href="http://sizzlejs.com/">Sizzle</a>:</p>
<div class="highlight"><pre><code class="javascript"><span class="c1">// Check to see if the browser returns elements by name when</span>
<span class="c1">// querying by getElementById (and provide a workaround)</span>
<span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="c1">// We&#39;re going to inject a fake input element with a specified name</span>
  <span class="kd">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">),</span>
  <span class="nx">id</span> <span class="o">=</span> <span class="s2">&quot;script&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">();</span>
  <span class="nx">form</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;a name=&#39;&quot;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;&#39;/&gt;&quot;</span><span class="p">;</span>
   
  <span class="c1">// Inject it into the root element, check its status, and remove it quickly</span>
  <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">;</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span> <span class="nx">form</span><span class="p">,</span> <span class="nx">root</span><span class="p">.</span><span class="nx">firstChild</span> <span class="p">);</span>
</code></pre>
</div>
<p>It creates a fake element to probe browser behaviour.  Supporting browsers is a black art beyond the patience of most well-meaning JavaScript hackers.</p>
<h3>Performance</h3>
<p>Plucking elements from arbitrary places in the <span class="caps">DOM</span> is useful.  So useful that developers do it a lot, which means selector engines need to be fast.</p>
<p>Falling back to native methods is one way of achieving this.  Sizzle looks for <code>querySelectorAll</code>, with code to support browser inconsistencies.</p>
<p>Another way is to use caching, which Sizzle and Prototype both do.</p>
<p>One way to measure selector performance is through a tool like <a href="http://github.com/kamicane/slickspeed">slickspeed</a> or a library like <a href="http://github.com/jakearchibald/Woosh/">Woosh</a>.  These tools are useful, but you have to be careful when interpreting the results.  Libraries like Prototype and MooTools extend elements, whereas pure selector engines like Sizzle don&#8217;t.  That means they might look slow compared to Sizzle but they&#8217;re actually fully-fledged frameworks rather than a pure selector engine.</p>
<h3>Other Selector Engines</h3>
<p>I&#8217;ve been referencing popular frameworks and Sizzle so far, but there are other Sizzle-alikes out there.  Last year there was a burst of several, perhaps in reaction to the first release of Sizzle.  Sizzle has since been gaining popularity with framework implementors again, so I&#8217;m not sure if any really made an impact.</p>
<p><a href="http://github.com/jdonaghue/Peppy">Peppy</a> draws on inspiration from lots of libraries and includes some useful comments about dealing with caching.  <a href="http://github.com/digitarald/sly">Sly</a> has a lot of work on optimisation and allows you to expose the parsing of selectors.  Both Sly and Peppy are fairly large chunks of code &#8212; anything comparable to Sizzle is not a trivial project.</p>
<h3><span class="caps">API</span> Design</h3>
<p>Generally speaking, there are two kinds of APIs.  One approach uses a function that returns elements that match a selector, but wraps them in a special class.  This class can be used to chain calls that perform complex <span class="caps">DOM</span> searches or manipulations.  This is how jQuery, Dojo and Glow work.</p>
<p>jQuery gives us <code>$()</code>, which can be used to query the document for nodes, then chain together calls on them.</p>
<p>Dojo has <code>dojo.query</code> which returns an Array-like <a href="http://www.dojotoolkit.org/reference-guide/dojo/NodeList.html#dojo-nodelist">dojo.NodeList</a>. Glow is similar, with <a href="http://www.bbc.co.uk/glow/docs/1.7/api/glow.dom.shtml">glow.dom.get</a></p>
<p>The second approach is where elements are returned and extended.  Prototype and MooTools do this.</p>
<p>Prototype has <code>$()</code> for <code>getElementById</code> and <code>$$()</code> for querying using <span class="caps">CSS</span> or XPath selectors.  Prototype extends elements with its own methods.  MooTools behaves a lot like this.  Both can work with strings or element references.</p>
<p>Turing has been designed much like Glow-style libraries, so we&#8217;ll use this approach for our <span class="caps">API</span>.  There&#8217;s a lazy aspect to this design that I like &#8212; it might be possible to return unprocessed elements wrapped in an object, then only deal with masking browser inconsistencies when they&#8217;re actually manipulated:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">turing</span><span class="p">.</span><span class="nx">dom</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.class&#39;</span><span class="p">)</span>                  <span class="c1">// return elements wrapped in a class without looking at each of them</span>
<span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>                                 <span class="c1">// find elements that are links</span>
<span class="p">.</span><span class="nx">css</span><span class="p">({</span> <span class="s1">&#39;background-color&#39;</span><span class="o">:</span> <span class="s1">&#39;#aabbcc&#39;</span> <span class="p">})</span>    <span class="c1">// apply the style by actually processing elements</span>
</code></pre>
</div>
<h3>Goals</h3>
<p>Because Turing exists as an educational framework, it&#8217;s probably wise if we keep it simple:</p>
<ul>
	<li><span class="caps">CSS</span> selectors only (XPath could be a future upgrade or plugin)</li>
	<li>Limited pseudo-selectors.  Implementing one or two would be nice just to establish the <span class="caps">API</span> for them</li>
	<li>Defer to native methods as quickly as possible</li>
	<li>Cache for performance</li>
	<li>Expose the parsing results like Sly does</li>
	<li>Reuse the wisdom of existing selector engines for patching browser nightmares</li>
</ul>
<h3>Conclusion</h3>
<p>I hope you&#8217;ve learned why selector engines are so complex and why we need them.  Granted, it&#8217;s mostly due to browser bugs that don&#8217;t need to exist, but browsers and standards both evolve out of step, so sometimes it&#8217;s our job to patch the gaps while they catch up.</p>
<p>While it&#8217;s true that Sizzle is the mother of all selector engines, I think implementing a small, workable one will be a worthwhile project.  Join me in part 7 where I&#8217;ll start implementing the selector engine.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2010/04/01/framework-part-6/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

