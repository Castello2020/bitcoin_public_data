http://dailyjs.com/2012/10/08/decorator/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 09:17:12 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Tue, 22 Jul 2014 17:17:01 GMT
ETag: "1780fb-c7f8-4fecb64467d40"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 11014
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Decorating Your JavaScript</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2012/10/08/decorator">Decorating Your JavaScript</a></h2>

<div class="meta">
  08 Oct 2012 |
  <span class="author">By Justin Naifeh</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#pattern">pattern</a>
    
      <a href="/tags.html#object-oriented">object-oriented</a>
    
      <a href="/tags.html#decorator">decorator</a>
    
  </span>
</div>

<div id="post">
<p>The <a href='https://en.wikipedia.org/wiki/Decorator_pattern'>decorator pattern</a>, also known as a wrapper, is a mechanism by which to extend the run-time behavior of an object, a process known as decorating. The pattern is often overlooked because its simplicity belies its object-oriented benefits when writing scalable code. Decorating objects is also neglected in JavaScript because the dynamic nature of the language allows developers to abuse the malleability of objects, but <strong>just because you can doesn&#8217;t mean you should</strong>.</p>

<p>Before delving into the decorator pattern, let&#8217;s examine a realistic coding problem that can be solved with other solutions. The decorator is best understood after the shortcomings of other common solutions have been explored.</p>

<h3 id='the_problem'>The Problem</h3>

<p>You are writing a simple archiving tool that manages the display and lifecycle of publications and their authors. An important feature is the ability to list the contributing authors, which may be a subset of all authors. The default is to show the first three authors of any publication. The initial domain model is basic:</p>

<p><img src='/images/posts/decorator-domain.png' alt='domain' /></p>

<p>Using plain JavaScript we implement the read-only classes as follows:</p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * Author constructor.</span>
<span class='cm'> *</span>
<span class='cm'> * @param String firstName</span>
<span class='cm'> * @param String lastName</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>Author</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>firstName</span><span class='p'>,</span> <span class='nx'>lastName</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_firstName</span> <span class='o'>=</span> <span class='nx'>firstName</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_lastName</span> <span class='o'>=</span> <span class='nx'>lastName</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='nx'>Author</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The author&#39;s first name.</span>
<span class='cm'>   */</span>
  <span class='nx'>getFirstName</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_firstName</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The author&#39;s last name.</span>
<span class='cm'>   */</span>
  <span class='nx'>getLastName</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_lastName</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The representation of the Author.</span>
<span class='cm'>   */</span>
  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getFirstName</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39; &#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getLastName</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Publication constructor.</span>
<span class='cm'> *</span>
<span class='cm'> * @param String title</span>
<span class='cm'> * @param Author[] authors</span>
<span class='cm'> * @param int type</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>Publication</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>,</span> <span class='nx'>type</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_title</span> <span class='o'>=</span> <span class='nx'>title</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_authors</span> <span class='o'>=</span> <span class='nx'>authors</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_type</span> <span class='o'>=</span> <span class='nx'>type</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='nx'>Publication</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The publication title.</span>
<span class='cm'>   */</span>
  <span class='nx'>getTitle</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_title</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return Author[] All authors.</span>
<span class='cm'>   */</span>
  <span class='nx'>getAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_authors</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return int The publication type.</span>
<span class='cm'>   */</span>
  <span class='nx'>getType</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_type</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * A publication might have several authors, but we</span>
<span class='cm'>   * are only interested in the first three for a standard publication.</span>
<span class='cm'>   *</span>
<span class='cm'>   * @return Author[] The significant contributors.</span>
<span class='cm'>   */</span>
  <span class='nx'>contributingAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>3</span><span class='p'>);</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String the representation of the Publication.</span>
<span class='cm'>   */</span>
  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='s1'>&#39;[&#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;] &quot;&#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getTitle</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;&quot; by &#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>contributingAuthors</span><span class='p'>().</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;, &#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The API is straightforward. Consider the following invocations:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>pub</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Publication</span><span class='p'>(</span><span class='s1'>&#39;The Shining&#39;</span><span class='p'>,</span> 
  <span class='p'>[</span><span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Stephen&#39;</span><span class='p'>,</span> <span class='s1'>&#39;King&#39;</span><span class='p'>)],</span>
  <span class='s1'>&#39;horror&#39;</span><span class='p'>);</span>

<span class='c1'>// rely on the default toString() to print: [horror] &quot;The Shining&quot; by Stephen King</span>
<span class='nx'>alert</span><span class='p'>(</span><span class='nx'>pub</span><span class='p'>);</span>

<span class='c1'>// ...</span>

<span class='kd'>var</span> <span class='nx'>pub2</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Publication</span><span class='p'>(</span><span class='s1'>&#39;Design Patterns: Elements of Reusable Object-Oriented Software&#39;</span><span class='p'>,</span> <span class='p'>[</span>
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Erich&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Gamma&#39;</span><span class='p'>),</span>
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Richard&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Helm&#39;</span><span class='p'>),</span>
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Ralph&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Johnson&#39;</span><span class='p'>),</span>
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;John&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Vlissides&#39;</span><span class='p'>)</span>
<span class='p'>],</span> <span class='s1'>&#39;programming&#39;</span><span class='p'>);</span>

<span class='c1'>// prints: [programming] &quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot; by Erich Gamma, Richard Helm, Ralph Johnson</span>
<span class='nx'>alert</span><span class='p'>(</span><span class='nx'>pub2</span><span class='p'>);</span>
</code></pre>
</div>
<p>The design is simple and reliable&#8230;at least until the client specifies a new requirement:</p>

<blockquote>
<p>In accordance with the convention for <a href='https://www.ncbi.nlm.nih.gov/pubmed/17651671'>medical publications</a>, only list the first (primary) and last (supervisor) authors if multiple authors exist.</p>
</blockquote>

<p>This means that if <code>Publication.getType()</code> returns &#8220;medical&#8221; we must perform special logic to list the contributing authors. All other types (e.g., horror, romance, computer, etc) will use the default behavior.</p>

<h3 id='solutions'>Solutions</h3>

<p>There are many solutions to satisfy the new requirement, but some have disadvantages that are not readily apparent. Let&#8217;s explore a few of these and see why they are not ideal even though they are commonplace.</p>

<h4 id='overwrite_behavior'>Overwrite Behavior</h4>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// overwrite the contributingAuthors definition</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span> <span class='o'>===</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>pub</span><span class='p'>.</span><span class='nx'>contributingAuthors</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>authors</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>

    <span class='c1'>// return the first and last authors if possible</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&gt;</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>));</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This, one could argue, can be the most abused feature of the language: the ability to arbitrarily overwrite properties and behavior at run-time. Now the <code>if/else</code> condition must be maintained and expanded if more requirements are added to specify contributing authors. Furthermore, it is debatable whether or not <code>pub</code> is still an instance of <code>Publication</code>. A quick <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/instanceof'>instanceof</a> check will confirm that it is, but a class defines a set of state and behavior. In this case we have modified select instances and the calling code can no longer trust the consistency of <code>Publication</code> objects.</p>

<h4 id='change_the_calling_code'>Change the Calling Code</h4>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>listing</span><span class='p'>;</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span> <span class='o'>===</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>contribs</span> <span class='o'>=</span> <span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>

  <span class='c1'>// return the first and last authors if possible</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&gt;</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>contribs</span> <span class='o'>=</span> <span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>));</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>contribs</span> <span class='o'>=</span> <span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>listing</span> <span class='o'>=</span> <span class='s1'>&#39;[&#39;</span><span class='o'>+</span><span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;] &quot;&#39;</span><span class='o'>+</span><span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getTitle</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;&quot; by &#39;</span><span class='o'>+</span><span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;, &#39;</span><span class='p'>);</span>
<span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
  <span class='nx'>listing</span> <span class='o'>=</span> <span class='nx'>pub</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>();</span>
<span class='p'>}</span>

<span class='nx'>alert</span><span class='p'>(</span><span class='nx'>listing</span><span class='p'>);</span>
</code></pre>
</div>
<p>This solution violates encapsulation by forcing calling code to understand the internal implementation of <code>Publication.toString()</code> and recreate it outside of the class. A good design should not burden calling code.</p>

<h4 id='subclass_the_component'>Subclass the Component</h4>

<p><img src='/images/posts/decorator-subclass.png' alt='subclass' /></p>

<p>One of the most common solutions is to create a <code>MedicalPublication</code> class that extends <code>Publication</code>, with a <code>contributingAuthors()</code> override to provide custom behavior. While this approach is arguably less flawed than the first two, it pushes the limit of clean inheritance. We should always <a href='https://en.wikipedia.org/wiki/Composition_over_inheritance'>favor composition</a> over inheritance to avoid overreliance on the <a href='https://en.wikipedia.org/wiki/Fragile_base_class'>base class internals</a> (for the <a href='http://www.cas.mcmaster.ca/~emil/Publications_files/MikhajlovSekerinski98FragileBaseClassProblem.pdf'>developer masochists</a>).</p>

<p>Subclassing also fails as a viable strategy when more than one customization might occur or when there is an unknown combination of customizations. An often cited example is a program to model a coffee shop where customers can customize their cup of coffee, thus affecting the price. A developer could create subclasses that reflect the myriad combinations such as <code>CoffeeWithCream</code> and <code>CoffeeWithoutCreamExtraSugar</code> that override <code>Coffee.getPrice()</code>, but it is easy to see that the design will not scale.</p>

<h4 id='modify_the_source_code'>Modify the Source Code</h4>
<div class='highlight'><pre><code class='javascript'><span class='nx'>contributingAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span> <span class='o'>===</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>authors</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>

    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&gt;</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>));</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>3</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This is somewhat of a hack, but in a small project where you control the source code it might suffice. A clear disadvantage is that the <code>if/else</code> condition must grow with every custom behavior, making it a potential maintenance nightmare.</p>

<p>Another thing to note is that you should never, ever modify source code outside of your control. Even the mention of such an idea should leave a taste in your mouth worse than drinking orange juice after brushing your teeth. Doing so will inextricably couple your code to that revision of the API. The cases where this is a valid option are so few and far between that it is usually an architectural issue in the application, not in the outside code.</p>

<h3 id='the_decorator'>The Decorator</h3>

<p>These solutions fulfill the requirement at the cost of jeopardizing maintainability and scalability. As a developer you must pick what is right for your application, but there is one more option to examine before making a decision.</p>

<p>I recommend using a decorator, a flexible pattern by which to extend the behavior of your existing objects. The following UML represents an abstract implementation of the pattern:</p>

<p><img src='/images/posts/decorator-uml.png' alt='decorator uml' /></p>

<p>The <code>ConcreteComponent</code> and <code>Decorator</code> classes implement the same <code>Component</code> interface (or extend <code>Component</code> if it&#8217;s a superclass). The <code>Decorator</code> keeps a reference to a <code>Component</code> for delegation except in the case where we &#8220;decorate&#8221; by customizing the behavior.</p>

<p>By adhering to the <code>Component</code> contract, we are guaranteeing a consistent API and guarding against implementation internals because calling code <strong>will not</strong> and <strong>should not</strong> know if the object is a <code>ConcreteComponent</code> or <code>Decorator</code>. Programming to the interface is the cornerstone of good object-oriented design.</p>

<blockquote>
<p>Some argue that JavaScript is not object-oriented, and while it supports prototypical inheritance instead of classical, objects are still innate to the language. The language supports <a href='https://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming'>polymorphism</a> and that fact that all objects extend <code>Object</code> is sufficient to argue the language is object-oriented as well as functional.</p>
</blockquote>

<h3 id='the_implementation'>The Implementation</h3>

<p>Our solution will use a slight variant of the decorator pattern because JavaScript does not have some classical inheritance concepts such as interfaces or abstract classes. There are many libraries that simulate such constructs, which is beneficial for certain applications, but here we will use the languages basics.</p>

<p><img src='/images/posts/decorator-publication.png' alt='publication' /></p>

<p>The class <code>MedicalPublication</code> and <code>Publication</code> implicitly implement <code>PublicationIF</code>. In this case <code>MedicalPublication</code> acts as the decorator to list the first and last authors as contributors while unchanging other behavior.</p>

<p>Note that <code>MedicalPublication</code> references <code>PublicationIF</code>, and not <code>Publication</code>. By referencing the interface instead of a specific implementation we can arbitrarily nest decorators within one another! (In the coffee shop problem we can create decorators such as <code>WithCream</code>, <code>WithoutCream</code>, and <code>ExtraSugar</code>&#8211;these can be nested to handle any complex order.)</p>

<p>The <code>MedicalPublication</code> class delegates for all standard operations and overrides <code>contributingAuthors()</code> to provide the &#8220;decorated&#8221; behavior.</p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * MedicalPublication constructor.</span>
<span class='cm'> *</span>
<span class='cm'> * @param PublicationIF The publication to decorate.</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>MedicalPublication</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>publication</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_publication</span> <span class='o'>=</span> <span class='nx'>publication</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='nx'>MedicalPublication</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The publication title.</span>
<span class='cm'>   */</span>
  <span class='nx'>getTitle</span><span class='o'>:</span>  <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_publication</span><span class='p'>.</span><span class='nx'>getTitle</span><span class='p'>();</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return Author[] All authors.</span>
<span class='cm'>   */</span>
  <span class='nx'>getAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_publication</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return int The publication type.</span>
<span class='cm'>   */</span>
  <span class='nx'>getType</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_publication</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>();</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * Returns the first and last authors if multiple authors exists.</span>
<span class='cm'>   * Otherwise, the first author is returned. This is a convention in the</span>
<span class='cm'>   * medical publication domain.</span>
<span class='cm'>   *</span>
<span class='cm'>   * @return Author[] The significant contributors.</span>
<span class='cm'>   */</span>
  <span class='nx'>contributingAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>

    <span class='kd'>var</span> <span class='nx'>authors</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>

    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&gt;</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// fetch the first and last contributors</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>));</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='c1'>// zero or one contributors</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String the representation of the Publication.</span>
<span class='cm'>   */</span>
  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='s1'>&#39;Decorated - [&#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;] &quot;&#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getTitle</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;&quot; by &#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>contributingAuthors</span><span class='p'>().</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;, &#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Factory method to instantiate the appropriate PublicationIF implementation.</span>
<span class='cm'> *</span>
<span class='cm'> * @param String The discriminating type on which to select an implementation.</span>
<span class='cm'> * @param String The publication title.</span>
<span class='cm'> * @param Author[] The publication&#39;s authors.</span>
<span class='cm'> * @return PublicationIF The created object.</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>publicationFactory</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>,</span> <span class='nx'>type</span><span class='p'>)</span> <span class='p'>{</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>type</span> <span class='o'>===</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>new</span> <span class='nx'>MedicalPublication</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>Publication</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>,</span> <span class='nx'>type</span><span class='p'>));</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>new</span> <span class='nx'>Publication</span><span class='p'>(</span><span class='nx'>type</span><span class='p'>,</span> <span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>By using the factory method we can safely create an instance of PublicationIF.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>title</span> <span class='o'>=</span> <span class='s1'>&#39;Pancreatic Extracts as a Treatment for Diabetes&#39;</span><span class='p'>;</span>
<span class='kd'>var</span> <span class='nx'>authors</span> <span class='o'>=</span> <span class='p'>[</span><span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Adam&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Thompson&#39;</span><span class='p'>),</span> 
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Robert&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Grace&#39;</span><span class='p'>),</span> 
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Sarah&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Townsend&#39;</span><span class='p'>)];</span>
<span class='kd'>var</span> <span class='nx'>type</span> <span class='o'>=</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>;</span>

<span class='kd'>var</span> <span class='nx'>pub</span> <span class='o'>=</span> <span class='nx'>publicationFactory</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>,</span> <span class='nx'>type</span><span class='p'>);</span>

<span class='c1'>// prints: Decorated - [medical] &#39;Pancreatic Extracts as a Treatment of Diabetes&#39; by Adam Thompson, Sarah Townsend</span>
<span class='nx'>alert</span><span class='p'>(</span><span class='nx'>pub</span><span class='p'>);</span>
</code></pre>
</div>
<p>In these examples we are using <code>toString()</code> for brevity and debugging, but now we can create utility classes and methods to print <code>PublicationIF</code> objects for application display.</p>

<p><img src='/images/posts/decorator-printer.png' alt='printer' /></p>

<p>Once the application is modified to expect <code>PublicationIF</code> objects we can accommodate further requirements to handle what constitutes a <a href='https://en.wikipedia.org/wiki/Academic_authorship'>contributing author</a> by adding new decorators. Also, the design is now open for any <code>PublicationIF</code> implementations beyond decorators to fulfill other requirements, which greatly increases the flexibility of the code.</p>

<h3 id='criticisms'>Criticisms</h3>

<p>One criticism is that the decorator must be maintained to adhere to its interface. All code, regardless of design, must be maintained to a degree, but it can be argued that maintaining a design with a clearly stated contract and pre- and post-conditions is much simpler than searching <code>if/else</code> conditions for run-time state and behavior modifications. More importantly, the decorator pattern safeguards calling code written by other developers (or even yourself) by leveraging object-oriented <a href='https://en.wikipedia.org/wiki/Open/closed_principle'>principles</a>.</p>

<p>Another criticism is that decorators must implement all operations defined by a contract to enforce a consistent API. While this can be tedious at times, there are <a href='http://jsclass.jcoglan.com/decorator.html'>libraries</a> and methodologies that can be used with JavaScript&#8217;s dynamic nature to expedite coding. Reflection-like invocation can be used to allay concerns when dealing with a changing API.</p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * Invoke the target method and rely on its pre- and post-conditions.</span>
<span class='cm'> */</span>
<span class='nx'>Decorator</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>someOperation</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_decorated</span><span class='p'>.</span><span class='nx'>someOperation</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_decorated</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
<span class='p'>};</span>

<span class='c1'>// ... or a helper library can automatically wrap the function</span>

<span class='cm'>/**</span>
<span class='cm'> * Dynamic invocation.</span>
<span class='cm'> *</span>
<span class='cm'> * @param Class The class defining the function.</span>
<span class='cm'> * @param String The func to execute.</span>
<span class='cm'> * @param Object The *this* execution context.</span>
<span class='cm'> */</span>
<span class='kd'>function</span> <span class='nx'>wrapper</span><span class='p'>(</span><span class='nx'>klass</span><span class='p'>,</span> <span class='nx'>func</span><span class='p'>,</span> <span class='nx'>context</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>klass</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>[</span><span class='nx'>func</span><span class='p'>].</span><span class='nx'>apply</span><span class='p'>(</span><span class='nx'>context</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
  <span class='p'>};</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The details are up to the developer, but even the most primitive decorator pattern is extremely powerful. The overhead and maintenance for the pattern itself is minimal, especially when compared to that of the opposing solutions.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>The decorator pattern is not flashy, despite its name, nor does it give the developer bragging rights in the &#8220;Look at what I did!&#8221; department. What the decorator does do, however, is correctly encapsulate and modularize your code to make it scalable for future changes. When a new requirement states that a certain publication type must list all authors as contributors, regardless of ordinal rank, you won&#8217;t fret about having to refactor hundreds of lines of code. Instead, you&#8217;ll write a new decorator, drop it into the factory method, and take an extra long lunch because you&#8217;ve earned it.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
      <li>
        <div>18 Jul 2014</div>
        <a href="/2014/07/18/lazy-json-undo">Undo with Object.observe</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2012/10/08/decorator/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

