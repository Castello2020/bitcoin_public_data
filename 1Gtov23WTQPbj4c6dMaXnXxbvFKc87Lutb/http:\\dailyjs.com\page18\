http://dailyjs.com/page18/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 20:07:09 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "e936d-1d4f0-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 30863
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/04/03/node-roundup">Node Roundup: 0.11.0, Dependo, Mashape OAuth, node-windows</a></h2>
      <div class="meta">
        <span class="date">03 Apr 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/04/03/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#dependencies">dependencies</a>
          
            <a href="/tags.html#oauth">oauth</a>
          
            <a href="/tags.html#authentication">authentication</a>
          
            <a href="/tags.html#windows">windows</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='0110_0102'>0.11.0, 0.10.2</h3>

<p><a href='http://blog.nodejs.org/2013/03/28/node-v0-11-0-stable/'>Node 0.11.0</a> has been released, which is the latest unstable branch of Node. Node <a href='http://blog.nodejs.org/2013/03/28/node-v0-10-2-stable/'>0.10.12</a> was also released, which includes some fixes for the <code>stream</code> module, an update for the internal uv library, and various other fixes for cryptographic modules and <code>child_process</code>.</p>

<h3 id='dependo'>Dependo</h3>

<p><img src='/images/posts/dependo.png' alt='Dependo' /></p>

<p>Dependo (GitHub: <a href='https://github.com/auchenberg/dependo'>auchenberg / dependo</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/dependo'>dependo</a>) by Kenneth Auchenberg is a visualisation tool for generating force directed graphs of JavaScript dependencies. It can interpret CommonJS or AMD dependencies, and uses <a href='https://github.com/pahen/node-madge/'>MaDGe</a> to generate the raw dependency graph. <a href='http://d3js.org/'>D3.js</a> is used for drawing the results.</p>

<h3 id='mashape_oauth'>Mashape OAuth</h3>

<p>Mashape OAuth (GitHub: <a href='https://github.com/Mashape/mashape-oauth'>Mashape / mashape-oauth</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mashape-oauth'>mashape-oauth</a>) by Nijiko Yonskai is a set of modules for OAuth and OAuth2. It has been designed to work with lots of variations of OAuth implementations, and includes some lengthy Mocha unit tests.</p>

<p>The authors have also written a document called <a href='https://github.com/Mashape/mashape-oauth/blob/master/FLOWS.md'>The OAuth Bible</a> that explains the main concepts behind each supported OAuth variation, which is useful because the OAuth terminology isn&#8217;t exactly easy to get to grips with.</p>

<h3 id='nodewindows'>node-windows</h3>

<p>node-windows (GitHub: <a href='https://github.com/coreybutler/node-windows'>coreybutler / node-windows</a>, License: <em>MIT/BSD</em>, npm: <a href='https://npmjs.org/package/node-windows'>node-windows</a>) by Corey Butler is a module designed to help write long-running Windows services with Node. It supports event logging and process management without requiring Visual Studio or the .NET Framework.</p>

<blockquote>
<p>Using native node modules on Windows can suck. Most native modules are not distributed in a binary format. Instead, these modules rely on npm to build the project, utilizing node-gyp. This means developers need to have Visual Studio (and potentially other software) installed on the system, just to install a native module. This is portable, but painful&#8230; mostly because Visual Studio itself is over 2GB.</p>
</blockquote>

<blockquote>
<p>node-windows does not use native modules. There are some binary/exe utilities, but everything needed to run more complex tasks is packaged and distributed in a readily usable format. So, no need for Visual Studio&#8230; at least not for this module.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/04/02/jquery-roundup">jQuery Roundup: Sidr, Huey, Backbone.Advice</a></h2>
      <div class="meta">
        <span class="date">02 Apr 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/04/02/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#components">components</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='sidr'>Sidr</h3>

<p><img src='/images/posts/sidr.png' alt='Sidr' /></p>

<p><a href='http://www.berriart.com/sidr/'>Sidr</a> (GitHub: <a href='https://github.com/artberri/sidr'>artberri / sidr</a>, License: <em>MIT</em>) by Alberto Varela creates menus that look like the sidebars found in recent iOS apps. It can cope with multiple menus on a page, and can load content remotely. It&#8217;s also responsive, so it should work well in mobile projects.</p>

<p>The author has written up documentation complete with demos, and has included a Grunt build script. It seems like the exact sort of UI component that the next great web-based RSS reader might use&#8230;</p>

<h3 id='huey'>Huey</h3>

<p><a href='http://michaelrhodes.github.com/huey/'>Huey</a> (GitHub: <a href='https://github.com/michaelrhodes/huey'>michaelrhodes / huey</a>, License: <em>MIT</em>) by Michael Rhodes will find the dominant colour of an image and return it as an RGB array. This is all performed client-side, and doesn&#8217;t even depend on jQuery. It could be used to create the kind of effect seen in iTunes, where the background colour changes to suit the selected album art.</p>

<h3 id='backboneadvice'>Backbone.Advice</h3>

<p>Backbone.Advice (GitHub: <a href='https://github.com/rhysbrettbowen/Backbone.Advice'>rhysbrettbowen / Backbone.Advice</a>, License: <em>MIT</em>) by Rhys Brett-Bowen is a Backbone plugin based on Angus Croll&#8217;s <a href='http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/'>advice pattern</a>. It basically adds functional mixins to Backbone objects, and can be wrapped like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Advice</span><span class='p'>.</span><span class='nx'>addMixin</span><span class='p'>(</span><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Views</span><span class='p'>);</span>
</code></pre>
</div>
<p>Rhys sent in a whole bunch of other Backbone-related projects, including <a href='https://github.com/rhysbrettbowen/Backbone.ComponentView'>Backbone.ComponentView</a> and <a href='https://github.com/rhysbrettbowen/Backbone.ModelRegistry'>Backbone.ModelRegistry</a>. Backbone.ComponentView is based on <a href='http://closure-library.googlecode.com/svn/docs/class_goog_ui_Component.html'>goog.ui.component</a> from Closure Library, and also works with Backbone.Advice.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/04/01/streams-streams-streams">Five Minute Guide to Streams2</a></h2>
      <div class="meta">
        <span class="date">01 Apr 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/04/01/streams-streams-streams/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#streams">streams</a>
          
            <a href="/tags.html#streams2">streams2</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#5min">5min</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Node 0.10 is the latest stable branch of Node. It&#8217;s the branch you should be using for Real Work&#8482;. The most significant API changes can be found in the <a href='http://nodejs.org/docs/latest/api/stream.html'>stream</a> module. This is a quick guide to <em>streams2</em> to get you up to speed.</p>

<h3 id='the_base_classes'>The Base Classes</h3>

<p>There are now five base classes for creating your own streams: <code>Readable</code>, <code>Writable</code>, <code>Duplex</code>, <code>Transform</code>, and <code>PassThrough</code>. These base classes inherit from <code>EventEmitter</code> so you can attach listeners and emit events as you normally would. It&#8217;s perfectly acceptable to emit custom events &#8211; this might make sense, for example, if you&#8217;re writing a streaming parser. The parser could emit events like <code>&#39;headers&#39;</code> to indicate the headers have been parsed, perhaps for a CSV file.</p>

<p>To make your own <code>Readable</code> stream class, inherit from <code>stream.Readable</code> and implement the <code>_read(size)</code> method. The <code>size</code> argument is &#8220;advisory&#8221; &#8211; a lot of <code>Readable</code> implementations can safely ignore it. Once your <code>_read</code> method has collected data from an underlying I/O source, it can send it by calling <code>this.push(chunk)</code> &#8211; internally data will be placed into a queue so &#8220;clients&#8221; of your class can deal with it when they&#8217;re ready.</p>

<p>The <code>Writable</code> class should also be inherited from, but this time a <code>_write(chunk, encoding, callback)</code> method should be implemented. Once you&#8217;ve written data to the underlying I/O source, <code>callback</code> can be called, passing an error if required.</p>

<p>The <code>Duplex</code> class is like a <code>Readable</code> and <code>Writable</code> stream in one &#8211; it allows data sources that transmit and receive data to be modelled. This makes sense when you think about it &#8211; TCP network sockets transmit and receive data. To implement a <code>Duplex</code> stream, inherit from <code>stream.Duplex</code> and implement both the <code>_read</code> and <code>_write</code> methods.</p>

<p>The <code>Transform</code> class is useful for implementing parsers, like the CSV example I mentioned earlier. In general, streams that change data in some way should be implemented using <code>stream.Transform</code>. Although <code>Transform</code> sounds a bit like a <code>Duplex</code> stream, this time you&#8217;ll need to implement a <code>_transform(chunk, encoding, callback)</code> method. I&#8217;ve noticed several projects in the wild that use <code>Duplex</code> streams with a stubbed <code>_read</code> method, and I wondered if these would be better served by using a <code>Transform</code> class instead.</p>

<p>Finally, the <code>PassThrough</code> stream inherits from <code>Transform</code> to do&#8230; nothing. It relays the input to the output. That makes it ideal for sitting inside a <code>pipe</code> chain to spy on streams, and people have been using this to write tests or instrument streams in some way.</p>

<h3 id='pipes'>Pipes</h3>

<p>Pipes <em>must</em> follow this pattern: <code>readable.pipe(writable)</code>. As <code>Duplex</code> and <code>Transform</code> streams can both read <em>and</em> write, they can be placed in either position in the chain. For example, I&#8217;ve been using <code>process.stdin.pipe(csvParser).pipe(process.stdout)</code> where <code>csvParser</code> is a <code>Transform</code> stream.</p>

<h3 id='inheritance'>Inheritance</h3>

<p>The general pattern for inheriting from the base classes is as follows:</p>

<ol>
<li>Create a constructor function that calls the base class using <code>baseClass.call(this, options)</code></li>

<li>Correctly inherit from the base class using <code>Object.create</code> or <code>util.inherits</code></li>

<li>Implement the required underscored method, whether it&#8217;s <code>_read</code>, <code>_write</code>, or <code>_transform</code></li>
</ol>

<p>Here&#8217;s a quick <code>stream.Writable</code> example:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;stream&#39;</span><span class='p'>);</span>

<span class='nx'>GreenStream</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>stream</span><span class='p'>.</span><span class='nx'>Writable</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>constructor</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>value</span><span class='o'>:</span> <span class='nx'>GreenStream</span> <span class='p'>}</span>
<span class='p'>});</span>

<span class='kd'>function</span> <span class='nx'>GreenStream</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>stream</span><span class='p'>.</span><span class='nx'>Writable</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>GreenStream</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>_write</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>chunk</span><span class='p'>,</span> <span class='nx'>encoding</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdout</span><span class='p'>.</span><span class='nx'>write</span><span class='p'>(</span><span class='s1'>&#39;\u001b[32m&#39;</span> <span class='o'>+</span> <span class='nx'>chunk</span> <span class='o'>+</span> <span class='s1'>&#39;\u001b[39m&#39;</span><span class='p'>);</span>
  <span class='nx'>callback</span><span class='p'>();</span>
<span class='p'>};</span>

<span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdin</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>GreenStream</span><span class='p'>());</span>
</code></pre>
</div>
<h3 id='forwards_compatibility'>Forwards Compatibility</h3>

<p>If you want to use <em>streams2</em> with Node 0.8 projects, then <a href='https://github.com/isaacs/readable-stream'>readable-stream</a> provides access to the newer APIs in an npm-installable module. Since the <code>stream</code> core module is implemented in JavaScript, then it makes sense that the newer API can be used in Node 0.8.</p>

<p>Some open source module authors are including <code>readable-stream</code> as a dependency and then conditionally loading it:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>PassThrough</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;stream&#39;</span><span class='p'>).</span><span class='nx'>PassThrough</span><span class='p'>;</span>

<span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>PassThrough</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>PassThrough</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;readable-stream/passthrough&#39;</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This example is taken from <a href='https://github.com/EvanOxfeld/until-stream/blob/master/until.js'>until-stream</a>.</p>

<h3 id='streams2_in_the_wild'>Streams2 in the Wild</h3>

<p>There are some interesting open source projects that use the new streaming API that I&#8217;ve been collecting on GitHub. <a href='https://github.com/jessetane/multiparser'>multiparser</a> by Jesse Tane is a <code>stream.Writable</code> HTML form parser. <a href='https://github.com/EvanOxfeld/until-stream'>until-stream</a> by Evan Oxfeld will pause a stream when a certain signature is reached.</p>

<p><a href='https://github.com/naomik/hiccup'>Hiccup</a> by naomik uses the new streams API to simulate sporadic throughput, and the same author has also released <a href='https://github.com/naomik/bun'>bun</a> which can help combine pipes into composable units, and <a href='https://github.com/naomik/burro'>Burro</a> which can package objects into length-prefixed JSON byte streams. Conrad Pankoff used Burro to write <a href='https://github.com/deoxxa/pillion'>Pillion</a>, which is an RPC system for object streams.</p>

<p>There are also less esoteric modules, like <a href='https://github.com/klaemo/csv-stream'>csv-streamify</a> which is a CSV parser.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/29/edge-bespoke-barcode">Edge.js, Bespoke.js, Barcode39</a></h2>
      <div class="meta">
        <span class="date">29 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/29/edge-bespoke-barcode/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#Canvas">Canvas</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#Microsoft">Microsoft</a>
          
            <a href="/tags.html#presentations">presentations</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='edgejs'>Edge.js</h3>

<p><a href='http://tjanczuk.github.com/edge/'>Edge.js</a> (GitHub: <a href='https://github.com/tjanczuk/edge'>tjanczuk / edge</a>, License: <em>Apache 2</em>, npm: <a href='https://npmjs.org/package/edge'>edge</a>) by Tomasz Janczuk is an in-process interoperability layer between .NET and Node. This allows things like CPU-bound operations to be processed by .NET, or Node to access the Win32 APIs through C#.</p>

<p>The .NET code can be executed asynchronously and may be passed as a multiline comment or a string. A basic example looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>edge</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;edge&#39;</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>helloWorld</span> <span class='o'>=</span> <span class='nx'>edge</span><span class='p'>.</span><span class='nx'>func</span><span class='p'>(</span><span class='s1'>&#39;async (input) =&gt; { return &quot;.NET Welcomes &quot; + input.ToString(); }&#39;</span><span class='p'>);</span>

<span class='nx'>helloWorld</span><span class='p'>(</span><span class='s1'>&#39;JavaScript&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>result</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='k'>throw</span> <span class='nx'>err</span><span class='p'>;</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Running this example would display &#8220;.NET welcomes JavaScript&#8221;.</p>

<p>Other CLR languages <a href='https://github.com/tjanczuk/edge/wiki/Add-support-for-a-CLR-language'>can be supported</a>, should you be interested in playing with F# for example.</p>

<p>This project requires Windows, and needs Visual Studio 2012, Python 2.7, and npm-gyp to build.</p>

<h3 id='bespokejs'>Bespoke.js</h3>

<p><img src='/images/posts/bespokejs.png' alt='Bespoke.js' /></p>

<p><a href='http://markdalgleish.com/projects/bespoke.js/'>Bespoke.js</a> (GitHub: <a href='https://github.com/markdalgleish/bespoke.js'>markdalgleish / bespoke.js</a>, License: <em>MIT</em>, bower: <em>bespoke.js</em>) by Mark Dalgleish is a small but slick presentation library. It works with keyboard and touch events, and is intended to be used with CSS transitions.</p>

<p>It&#8217;s built using ECMAScript 5, so you&#8217;ll want to run your presentations on a compatible browser.</p>

<p>Creating presentations involves wrapping HTML slide content in <code>&lt;section&gt;</code> containers. Horizontal and vertical deck styles are supported, and Mark has documented the CSS classes in the project&#8217;s readme so you can hook into the provided JavaScript and styles.</p>

<h3 id='barcode39'>Barcode39</h3>

<p>Barcode39 (GitHub: <a href='https://github.com/erik5388/barcode-39.js'>erik5388 / barcode-39.js</a>, License: <em>MIT</em>) by Erik Zettersten is a <a href='http://en.wikipedia.org/wiki/Code_39'>Code 39</a> implementation &#8211; it basically generates barcodes that almost all barcode readers can cope with. It can output data URIs and supports Canvas for drawing.</p>

<p>The JavaScript API is <code>new Barcode39(elementId, type, delimeter)</code>, but it will also look for an element with the default ID of <code>barcode</code> and read the element&#8217;s content for the barcode&#8217;s source text.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/28/backbone-tutorial-15">Backbone.js Tutorial: Updates for 1.0, Clear Complete</a></h2>
      <div class="meta">
        <span class="date">28 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/28/backbone-tutorial-15/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customising the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'><strong>Part 15: Updates for 1.0, Clear Complete</strong></a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>711c9f6</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 711c9f6
</code></pre>
</div>
<h3 id='updating_to_backbone_10'>Updating to Backbone 1.0</h3>

<p>I updated bTask to work with Backbone 1.0, which required two small changes. The first was a change to the behaviour of callbacks in <code>Backbone.sync</code> &#8211; the internal call to the <code>success</code> callback now only needs one argument, which is the response data. I think I&#8217;ve mentioned that on DailyJS before, but you shouldn&#8217;t need to worry about this in your own Backbone projects unless you&#8217;ve written a custom <code>Backbone.sync</code> implementation.</p>

<p>The second change was the collection <code>add</code> events were firing when the views called <code>fetch</code>. I fixed this by passing <code>reset: true</code> to the <code>fetch</code> options. Details on this have been included in <a href='http://backbonejs.org/'>Backbone&#8217;s documentation</a> under &#8220;Upgrading to 1.0&#8221;:</p>

<blockquote>
<p>If you want to smartly update the contents of a Collection, adding new models, removing missing ones, and merging those already present, you now call <code>set</code> (previously named &#8220;update&#8221;), a similar operation to calling <code>set</code> on a Model. This is now the default when you call <code>fetch</code> on a collection. To get the old behavior, pass <code>{reset: true}</code>.</p>
</blockquote>

<h3 id='adding_clear_complete'>Adding &#8220;Clear Complete&#8221;</h3>

<p>When a task in Google Tasks is marked as done, it will appear with strike-through and hang around in the list until it is cleared or deleted. Most Google Tasks clients will have a button that says &#8220;Clear Complete&#8221;, so I added one to bTask.</p>

<p>I added a method called <code>clear</code> to the <code>Tasks</code> collection which calls the <code>.clear</code> method from the Google Tasks API (rather than going through <code>Backbone.sync</code>):</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;models/task&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>Task</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>Tasks</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>Task</span><span class='p'>,</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasks&#39;</span><span class='p'>,</span>

    <span class='nx'>clear</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>tasklist</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>success</span> <span class='o'>=</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span> <span class='o'>||</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{}</span>
        <span class='p'>,</span> <span class='nx'>request</span>
        <span class='p'>,</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span>
        <span class='p'>;</span>

      <span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>(</span><span class='nx'>self</span><span class='p'>.</span><span class='nx'>filter</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>task</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='k'>return</span> <span class='nx'>task</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;status&#39;</span><span class='p'>)</span> <span class='o'>===</span> <span class='s1'>&#39;completed&#39;</span><span class='p'>;</span>
        <span class='p'>}));</span>

        <span class='nx'>success</span><span class='p'>();</span>
      <span class='p'>};</span>

      <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>clear</span><span class='p'>({</span> <span class='nx'>tasklist</span><span class='o'>:</span> <span class='nx'>tasklist</span> <span class='p'>});</span>
      <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='s1'>&#39;update&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>Tasks</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I also added a button (using Bootstrap&#8217;s built-in icons) to <code>app/js/templates/app.html</code>, and added an event to <code>AppView</code> (in <code>app/js/views/app.js</code>):</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>AppView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='c1'>// ...</span>
  <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s1'>&#39;click .clear-complete&#39;</span><span class='o'>:</span> <span class='s1'>&#39;clearComplete&#39;</span>
  <span class='p'>},</span>

  <span class='c1'>// ...</span>
  <span class='nx'>clearComplete</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>list</span> <span class='o'>=</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>activeListMenuItem</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>;</span>
    <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>clear</span><span class='p'>(</span><span class='nx'>list</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>),</span> <span class='p'>{</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='c1'>// Show some kind of user feedback</span>
    <span class='p'>}});</span>
    <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I had to change <code>app/js/views/lists/menuitem.js</code> to set the current collection in the <code>open</code> method to make this work.</p>

<h3 id='summary'>Summary</h3>

<p>Because I&#8217;ve been reviewing Backbone&#8217;s evolution as it progressed to 1.0 for DailyJS, updating this project wasn&#8217;t too much effort. In general the 1.0 release is backwards compatible, so you should definitely consider upgrading your own projects. Also, now bTask has &#8216;Clear Complete&#8217;, I feel like it does enough of the standard Google Tasks features for me to actually use it regularly.</p>

<p>Remember that you can try it out for yourself at <a href='http://todo.dailyjs.com/'>todo.dailyjs.com</a>.</p>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/commit/705bcb4cd27d1794e52291e3c2d20e72a3b56022'>alexyoung / dailyjs-backbone-tutorial, commit 705bcb4</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/27/node-roundup">Node Roundup: wish, Vow, shell-jobs</a></h2>
      <div class="meta">
        <span class="date">27 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/27/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#promises">promises</a>
          
            <a href="/tags.html#async">async</a>
          
            <a href="/tags.html#time">time</a>
          
            <a href="/tags.html#daemons">daemons</a>
          
            <a href="/tags.html#unix">unix</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='wish'>wish</h3>

<p>wish (GitHub: <a href='https://github.com/evanburchard/wish'>EvanBurchard / wish</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/wish'>wish</a>) by Evan Burchard is an assertion module designed to raise meaningful, human-readable errors. When assertions fail, it parses the original source to generate a useful error message, which means the standard comparison operators can be used.</p>

<p>For example, if <code>wish(a === 5)</code> failed an error like this would be displayed:</p>
<div class='highlight'><pre><code class='text'>WishError:
  Expected &quot;a&quot; to be equal(===) to &quot;5&quot;.
</code></pre>
</div>
<p>If <code>assert(a === 5)</code> had been used instead, <code>AssertionError: false == true</code> would have been raised. A fairer comparison would be <code>assert.equal</code>, which would produce <code>AssertionError: 4 == 5</code>, but it&#8217;s interesting that wish is able to introspect the variable name and add that to the error.</p>

<h3 id='vow'>Vow</h3>

<p>Vow (GitHub: <a href='https://github.com/dfilatov/jspromise'>dfilatov / jspromise</a>, License: <em>MIT/GPL</em>, npm: <a href='https://npmjs.org/package/vow'>vow</a>) by Filatov Dmitry is a <a href='https://github.com/promises-aplus/promises-spec'>Promises/A+</a> implementation. Promises can be created, fulfilled, and rejected &#8211; you should be able to get the hang of it if you&#8217;ve used libraries with <code>then</code> methods elsewhere, but there are some <a href='https://github.com/promises-aplus/promises-spec/blob/master/differences-from-promises-a.md'>differences to Promises/A</a> which feels like it actually simplifies some of the potentially messier parts of the <a href='http://wiki.commonjs.org/wiki/Promises/A'>original CommonJS specification</a>.</p>

<p>Here&#8217;s an example of the Vow API:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>promise1</span> <span class='o'>=</span> <span class='nx'>Vow</span><span class='p'>.</span><span class='nx'>promise</span><span class='p'>(),</span>
    <span class='nx'>promise2</span> <span class='o'>=</span> <span class='nx'>Vow</span><span class='p'>.</span><span class='nx'>promise</span><span class='p'>();</span>

<span class='nx'>Vow</span><span class='p'>.</span><span class='nx'>all</span><span class='p'>([</span><span class='nx'>promise1</span><span class='p'>,</span> <span class='nx'>promise2</span><span class='p'>,</span> <span class='mi'>3</span><span class='p'>])</span>
  <span class='p'>.</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// value is [1, 2, 3]</span>
  <span class='p'>});</span>

<span class='nx'>promise1</span><span class='p'>.</span><span class='nx'>fulfill</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>
<span class='nx'>promise2</span><span class='p'>.</span><span class='nx'>fulfill</span><span class='p'>(</span><span class='mi'>2</span><span class='p'>);</span>
</code></pre>
</div>
<p>The author has written some pretty solid looking tests, and benchmarks are included as well. The project performs favorably when compared to other popular promise libraries:</p>
<table>
  <thead>
    <tr><th>&nbsp;</th><th>mean time</th><th>ops/sec</th></tr>
  </thead>
  <tbody>
    <tr>
      <th>Q</th><td>54.891ms</td><td>18</td>
    </tr>
    <tr>
      <th>When</th><td>3.484ms</td><td>287</td>
    </tr>
    <tr>
      <th>Vow</th><td>1.158ms</td><td>864</td>
    </tr>
  </tbody>
</table>
<h3 id='shelljobs'>shell-jobs</h3>

<p>I like seeing daemons made in Node, and Azer Koçulu recently sent in a cron-inspired daemon called shell-jobs (GitHub: <a href='https://github.com/azer/shell-jobs'>azer / shell-jobs</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/shell-jobs'>shell-jobs</a>). It uses <code>.jobs</code> files that are intended to be human readable. All you need to do is write a shell command followed by a <code># =&gt;</code> and then a time:</p>
<div class='highlight'><pre><code class='text'>cowsay &quot;Hello&quot; &gt; /tmp/jobs.log # =&gt; 2 minutes
</code></pre>
</div>
<p>The <code>shell-jobs</code> script will then parse this file and output the following:</p>
<div class='highlight'><pre><code class='text'>  jobs Starting &quot;cowsay &quot;Hello&quot; &gt; /tmp/jobs.log&quot; [2 minutes] +2ms
</code></pre>
</div>
<p>After two minutes has passed the job will be executed:</p>
<div class='highlight'><pre><code class='text'>  exec 1. Running cowsay &quot;Hello&quot; &gt; /tmp/jobs.log. +0ms
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/26/jquery-roundup">jQuery Roundup: Individual Memberships, Bootstrap Tag Autocomplete, CDNJS</a></h2>
      <div class="meta">
        <span class="date">26 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/26/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
            <a href="/tags.html#cdn">cdn</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='jquery_foundation_individual_memberships'>jQuery Foundation Individual Memberships</h3>

<p>The jQuery Foundation has allowed corporations to become members for a year now, and they&#8217;ve just <a href='http://blog.jquery.com/2013/03/19/join-the-jquery-foundation/'>opened up the programme</a> to individuals. If you&#8217;re interested in effectively sponsoring the jQuery Foundation, the <a href='https://jquery.org/join/'>jquery.com/join</a> page has details on pricing and rewards.</p>

<p>Each pricing tier includes a gift, starting with a t-shirt, and the top $400 tier also includes &#8220;access to individual members only benefits at jQuery Foundation events&#8221;. I&#8217;m not sure what these <em>individual benefits</em> are, but where I come from $400 gets you a lot of benefits for your buck, so consider me cautiously intrigued.</p>

<h3 id='bootstrap_tag_autocomplete'>Bootstrap Tag Autocomplete</h3>

<p>When you&#8217;re writing Bootstrap-based projects, including any old jQuery plugin sometimes requires a bit of extra work to tailor the required markup and CSS to fit in with Bootstrap&#8217;s defaults. That means Bootstrap plugins are in demand from developers and designers. Nada Aldahleh recently sent in <a href='http://sandglaz.github.com/bootstrap-tagautocomplete/'>Bootstrap Tag Autocomplete</a> (GitHub: <a href='https://github.com/Sandglaz/bootstrap-tagautocomplete'>Sandglaz / bootstrap-tagautocomplete</a>, License: <em>Apache 2.0</em>), which is a Bootstrap and jQuery UI component for creating Twitter-like autocomplete interfaces.</p>

<p>It&#8217;s built on <a href='http://twitter.github.com/bootstrap/javascript.html#typeahead'>Bootstrap&#8217;s Typeahead</a> library, and includes its own <a href='https://github.com/Sandglaz/bootstrap-tagautocomplete/blob/master/deps/caret-position.js'>caret position</a> library for getting and setting the caret position.</p>

<p>QUnit tests have been included, and the project&#8217;s website includes documentation and code samples.</p>

<h3 id='cdnjs'>CDNJS</h3>

<p>Ryan Kirkman sent in <a href='http://cdnjs.com/'>CDNJS</a>, which is an open source CDN. They&#8217;re looking for feedback on which libraries should be included &#8211; there are currently 325 listed. The code that runs the project is available on GitHub at <a href='https://github.com/cdnjs/cdnjs'>cdnjs / cdnjs</a>, and it&#8217;s based on Node.</p>

<p>Scripts can be added to the CDN by forking the GitHub project and following the instructions in the readme file. The general rule of thumb is that projects must have over 100 watchers on GitHub, but as long as sufficient popularity can be demonstrated the authors will consider including a new project. That means the list of libraries on <a href='http://cdnjs.com/'>cdnjs.com</a> is useful for finding high quality scripts.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/25/dependent-radioactive-emailbox">Dependent Types for JavaScript, radioactive.js, Minimail</a></h2>
      <div class="meta">
        <span class="date">25 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/25/dependent-radioactive-emailbox/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#computer-science">computer-science</a>
          
            <a href="/tags.html#education">education</a>
          
            <a href="/tags.html#email">email</a>
          
            <a href="/tags.html#apps">apps</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='dependent_types_for_javascript'>Dependent Types for JavaScript</h3>

<p><a href='http://lambda-the-ultimate.org/node/4700'>Dependent Types for JavaScript</a> published on Lambda the Ultimate is about Dependent JavaScript (DJS), a <a href='http://cseweb.ucsd.edu/~rchugh/research/nested/djs.pdf'>statically-typed dialect of JavaScript by Ravi Chugh, David Herman, and Ranjit Jhala</a> (pdf):</p>

<blockquote>
<p>DJS supports the particularly challenging features such as run-time type-tests, higher-order functions, extensible objects, prototype inheritance, and arrays through a combination of nested reﬁnement types, strong updates to the heap, and heap unrolling to precisely track prototype hierarchies</p>
</blockquote>

<p>The paper has a summary of related work that will be interesting to those of you who are experimenting with dialects of JavaScript with different type models.</p>

<h3 id='radioactivejs'>radioactive.js</h3>

<p><a href='http://rein.pk/radioactive-js/'>radioactive.js</a> (GitHub: <a href='https://github.com/reinpk/radioactive'>reinpk / radioactive</a>, License: <em>MIT</em>) by Peter Reinhardt is a library for modelling nuclear physics. Its intended use is for creating interactive demonstrations of radioactive decay:</p>

<blockquote>
<p>One of the biggest problems I&#8217;ve encountered in writing about nuclear reactors is that people don&#8217;t understand radioactive decay. This is a huge problem because it means that 99% of the population is totally unqualified to decide anything about nuclear energy.</p>
</blockquote>

<blockquote>
<p>Suppose I have 1 kg of Cesium-134, with a half-life of 30 years. And 1 kg of Uranium-238, with a half-life of 4.5 billion years. I&#8217;m going to give you one of the blocks, and you have to sleep with it tonight like a teddy bear. Which one do you want?</p>
</blockquote>

<blockquote>
<p>If you guessed Cesium-134, you&#8217;re dead.</p>
</blockquote>

<p>So, if you often find yourself presented with various radioactive isotopes and don&#8217;t want to die, Peter&#8217;s library may be of use to you. Or else you&#8217;re creating presentations or simulations using <a href='http://d3js.org/'>D3.js</a> that you want to have some level of accuracy.</p>

<h3 id='minimail'>Minimail</h3>

<p><a href='https://minimail.herokuapp.com/app/'>Minimail</a> (GitHub: <a href='https://github.com/emailbox/minimail_mobileapp'>emailbox / minimail_mobileapp</a>, License: <em>BSD3</em>) by Nicholas Reed is a mobile and server-side project to create a developer-friendly email client:</p>

<blockquote>
<p>It is at the alpha stage, which means it kinda, sorta runs on Android and iOS, and is usable as a replacement mobile client (with changes synced to your Gmail web interface). I made it because there currently are no mobile email clients that are built with common frontend web languages. I&#8217;d like to see anyone able to run their own custom email client that fits their workflow.</p>
</blockquote>

<p>It&#8217;s built using PhoneGap, and the server is Node with MongoDB.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/22/kievll-capturing">KievII, Capturing, Mobify 2.0</a></h2>
      <div class="meta">
        <span class="date">22 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/22/kievll-capturing/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#audio">audio</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='kievii_host'>KievII Host</h3>
<div class='image'>
  <img src='/images/posts/kievii.png' alt='' />
  <small>The KievII audio plugin host</small>
</div>
<p><a href='http://kievii.net/k2h.html'>KievII Host</a> (GitHub: <a href='https://github.com/janesconference/KievIIHost'>janesconference / KievIIHost</a>, License: <em>MIT</em>) by Cristiano Belloni is an audio plugin host based on the Web Audio API. The plugins are loaded dynamically using RequireJS from a GitHub repository, and already include lots of cool effects like a phaser, wah-wah, and pitch shift.</p>

<p>If you want to try out the <a href='http://bitterspring.net/k2h/'>KievII demo</a>, which is a lot of fun, you&#8217;ll need Chrome and to enable <em>Web Audio Input</em> in <code>chrome://flags</code>. I tested it in Chrome 25 on a Mac and it ran pretty solidly. It allows audio to be routed from the mic through various effects, and there&#8217;s also a sample player with a keyboard for triggering audio samples at different pitches.</p>

<p>There&#8217;s more information about KievII at <a href='http://kievii.net/'>kievii.net</a>, which has a demo of a step sequencer.</p>

<h3 id='capturing_for_responsive_design'>Capturing for Responsive Design</h3>

<p>Shawn Jansepar sent in his post at the Mozilla Hacks blog, called <a href='https://hacks.mozilla.org/2013/03/capturing-improving-performance-of-the-adaptive-web/'>Capturing - Improving Performance of the Adaptive Web</a>, about a client-side API he&#8217;s developed called Capturing:</p>

<blockquote>
<p>Our approach to give you resource control is done by capturing the source markup before it has a chance to be parsed by the browser, and then reconstructing the document with resources disabled.</p>
</blockquote>

<blockquote>
<p>The ability to control resources client-side gives you an unprecedented amount of control over the performance of your website.</p>
</blockquote>

<blockquote>
<p>Capturing was a key feature of Mobify.js 1.1, our framework for creating mobile and tablet websites using client-side templating. We have since reworked Mobify.js in our 2.0 release to be a much more modular library that can be used in any existing website, with Capturing as the primary focus.</p>
</blockquote>

<p>One example Shawn uses is using a polyfill for the <code>picture</code> element, which only includes an extra <code>img</code> tag for browsers without JavaScript turned on. This is in contrast to other solutions that require <code>noscript</code> tags.</p>

<h3 id='mobifyjs_20'>Mobify.js 2.0</h3>

<p>Meanwhile, <a href='http://www.mobify.com/mobifyjs/'>Mobify.js 2.0</a> (GitHub: <a href='https://github.com/mobify/mobifyjs'>mobify / mobifyjs</a>, License: <em>MIT</em>) has been released as a developer preview. This includes the Capturing API mentioned in Shawn&#8217;s post above.</p>

<p>The goal of Mobify.js is to help existing sites better support mobile devices. The <a href='http://www.mobify.com/mobifyjs/v2/examples/'>examples</a> included are the <code>picture</code> polyfill mentioned above, using media queries, and templating.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/21/node-roundup">Node Roundup: 0.10.1, Express Group Handlers, Fox, iWebPP.io</a></h2>
      <div class="meta">
        <span class="date">21 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/21/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#middleware">middleware</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#p2p">p2p</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='node_0101'>Node 0.10.1</h3>

<p><a href='http://blog.nodejs.org/2013/03/21/node-v0-10-1-stable/'>Node 0.10.1</a> has been released, hot on the heels of 0.10.0. This version improves the performance of the non-streaming <code>crypto</code> APIs, fixes some <code>tls</code> and <code>net</code> module issues, and makes missing callbacks in <em>streams2</em> show a warning rather than raising an exception.</p>

<h3 id='express_group_handlers'>Express Group Handlers</h3>

<p>Express Group Handlers (GitHub: <a href='https://github.com/tldrio/express-group-handlers'>tldrio / express-group-handlers</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/express-group-handlers'>express-group-handlers</a>) by Louis Chatriot provides a little bit of sugar for managing Express middleware. It allows routes to be wrapped with <code>beforeEach</code> and <code>afterEach</code> so middleware can be confined to certain routes.</p>

<p>The <code>beforeEach</code> method can accept multiple middlewares to run, and it&#8217;s easy to wrap it around existing code:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>groupHandlers</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;express-group-handlers&#39;</span><span class='p'>);</span>

<span class='nx'>groupHandlers</span><span class='p'>.</span><span class='nx'>setup</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>);</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>beforeEach</span><span class='p'>(</span><span class='nx'>groupHandler</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/route3&#39;</span><span class='p'>,</span> <span class='nx'>finalHandler3</span><span class='p'>);</span> <span class='c1'>// GET /route3 will execute groupHandler, then finalHandler3</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='fox'>Fox</h3>

<p>Fox (GitHub: <a href='https://github.com/azer/fox'>azer / fox</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/fox'>fox</a>) by Azer Koçulu is a test framework that is largely compatible with <a href='http://visionmedia.github.com/mocha/'>Mocha</a>, as long as you don&#8217;t have nested invocations of <code>describe</code>. It works with both Node and client-side projects, and injects <a href='https://npmjs.org/package/chai'>chai</a> so you automatically get assertions without having to load an extra library.</p>

<p>Passing the <code>-b</code> flag to the command-line program will cause Fox to compile the scripts necessary to run the tests in a browser. It also includes tests written with itself, of course!</p>

<h3 id='iwebppio'>iWebPP.io</h3>

<p>iWebPP.io (GitHub: <a href='https://github.com/InstantWebP2P/iwebpp.io'>InstantWebP2P / iwebpp.io</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/iwebpp.io'>iwebpp.io</a>) by Tom Zhou is a set of projects designed to send HTTP over UDP, the goal being to take advantage of UDP&#8217;s inherent performance benefits. It supports <a href='http://en.wikipedia.org/wiki/Traversal_Using_Relay_NAT'>TURN</a> and <a href='http://en.wikipedia.org/wiki/STUN'>STUN</a> channeling with WebSockets, for realtime streaming.</p>

<p>It can run web services using peer-to-peer protocols, behind NAT and firewalls. The <code>iwebpp.io</code> module includes a binary called <a href='https://github.com/InstantWebP2P/node-httpp'>node-httpp</a>, which provides the HTTP over UDP handling. The project includes installation instructions, and a brief roadmap.</p>

<p>I&#8217;ve seen a few peer-to-peer Node projects, but I think this is the first one I&#8217;ve seen that uses UDP as the transport layer protocol. It&#8217;s also interesting that the author is directly addressing NAT issues.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/20/backbone-one">Backbone 1.0</a></h2>
      <div class="meta">
        <span class="date">20 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/20/backbone-one/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Today Jeremy Ashkenas announced that <a href='http://ashkenas.com/backbonejs-1.0/'>Backbone.js 1.0 has been released</a>, after a <a href='https://github.com/documentcloud/backbone/commit/5ce976bf6a6c795e295190bcc48c39e52f9afe6f'>whole year</a> on the 0.9 branch. This release adds support for HTTP <code>PATCH</code> requests, where partial updates are sent to the server. It also provides some sugar for data filtering methods like <a href='http://backbonejs.org/#Collection-where'>where</a> and <a href='http://underscorejs.org/#omit'>omit</a> (from Underscore.js). Jeremy also notes that the <a href='http://backbonejs.org/docs/backbone.html'>annotated source</a> has been improved.</p>

<p>Although Backbone 1.0 includes internal refactoring, the API should be largely backwards compatible &#8211; at least from the tests I&#8217;ve been doing with my own Backbone projects against the releases on GitHub. There may be quirks that I&#8217;ve missed, however, so as always make sure you&#8217;ve carefully tested your code before releasing it.</p>

<p>Jeremy also intimates that he&#8217;s looking for new major features, but doesn&#8217;t specifically promise anything in the roadmap:</p>

<blockquote>
<p>In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many libraries require your site to be restructured to suit their look, feel, and default behavior - Backbone should continue to be a tool that gives you the freedom to design the full experience of your web application.</p>
</blockquote>

<p>I feel like Backbone has earned its 1.0 status, and I&#8217;ll be watching Backbone&#8217;s GitHub repository very carefully over the next few months.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/19/jquery-roundup">jQuery Roundup: Panzoom, jQuery.Feedback, shurikenJS</a></h2>
      <div class="meta">
        <span class="date">19 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/19/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#animation">animation</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='panzoom'>Panzoom</h3>

<p>Panzoom (GitHub: <a href='https://github.com/timmywil/jquery.panzoom/'>timmywil / jquery.panzoom</a>, License: <em>MIT</em>) by Timmy Willison is a plugin for adding panning and zooming behaviour to an element. It works in jQuery 1.9+, and uses CSS transforms and matrix functions to take advantage of GPU acceleration where available.</p>

<p>Any element can be potentially panned or zoomed, including Canvas and videos. It supports touch gestures, including pinch, so it should work well in a mobile project.</p>

<p>There&#8217;s a <a href='http://timmywil.github.com/jquery.panzoom/test/'>demo in the form of Panzoom&#8217;s unit tests</a>.</p>

<h3 id='jqueryfeedback'>jQuery.Feedback</h3>

<p><a href='http://siong1987.com/jquery.feedback/'>jQuery.Feedback</a> (GitHub: <a href='https://github.com/siong1987/jquery.feedback'>siong1987 / jquery.feedback</a>, License: <em>MIT</em>) by Teng Siong Ong is a clone of the feedback widget found on <a href='http://branch.com/'>Branch</a>. It has some nice CSS transform animations, and just expects a callback for handling sending the resulting message.</p>

<h3 id='shurikenjs'>shurikenJS</h3>

<p><img src='/images/posts/shuriken.png' alt='shurikenJS' /></p>

<p><a href='http://shurikenjs.com/'>shurikenJS</a> (GitHub: <a href='https://github.com/shurikenjs'>shurikenjs</a>, License: <em>MIT</em>) by Stephan Fischer is a JavaScript framework that uses recent ECMAScript methods and an API based around native DOM objects. The <code>Node</code> object is enhanced with new chainable methods, for example: <code>Node.css(&#39;color&#39;, &#39;red&#39;).hide().show()</code>.</p>

<p>Stephan hasn&#8217;t included any tests yet, but I&#8217;ve included it here because it&#8217;s so different to jQuery it should get you thinking. The combination of modern ECMAScript with native DOM code is an interesting approach to client-side development.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/18/organic-halbert-brombone">OrganicJS, HALbert, BromBone</a></h2>
      <div class="meta">
        <span class="date">18 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/18/organic-halbert-brombone/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#api">api</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='organicjs'>OrganicJS</h3>

<p><a href='http://idibidiart.github.com/organicjs/'>OrganicJS</a> (GitHub: <a href='https://github.com/idibidiart/organicjs'>idibidiart / organicjs</a>) by Marc Fawzi is a reusable component framework, which combines ideas from the author&#8217;s previous work with D3.js. It supports chainable properties, dynamic getters and setters, reusable and nestable markup, in-place fragment cloning and rendering, and decoupled data/behaviour sharing across components.</p>

<p>The project is currently in an early state, without much documentation or tests, but Marc is looking for feedback on the project. If you want to try it out, the best way to get started is by looking at the <a href='http://idibidiart.github.com/organicjs/'>OrganicJS demo site</a>.</p>

<h3 id='halbert'>HALbert</h3>

<p>HALbert (GitHub: <a href='https://github.com/xcambar/halbert'>xcambar / halbert</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/halbert'>halbert</a>) by Xavier Cambar is a <a href='http://tools.ietf.org/html/draft-kelly-json-hal-05'>HAL-JSON</a> parser:</p>

<blockquote>
<p>There is an emergence of non-HTML HTTP applications (&#8220;Web APIs&#8221;) which use hyperlinks to direct clients around their resources.</p>
</blockquote>

<blockquote>
<p>The JSON Hypertext Application Language (HAL) is a standard which establishes conventions for expressing hypermedia controls, such as links, with JSON <span>RFC4627</span>.</p>
</blockquote>

<blockquote>
<p>HAL is a generic media type with which Web APIs can be developed and exposed as series of links. Clients of these APIs can select links</p>
</blockquote>

<p>It can be used as a Node module or in browsers, through <a href='https://github.com/substack/node-browserify'>Browserify</a>. The author has designed it to work pretty much anywhere in your application&#8217;s stack: Express middleware, or in client-side frameworks like Backbone or AngularJS.</p>

<h3 id='brombone'>BromBone</h3>

<p>Although PhantomJS is extremely useful, there are times when you don&#8217;t want to include the dependency in a server-side project. I&#8217;ve considered making my own mini REST services for such cases, so the &#8220;heavier&#8221; dependencies like PDF generation or PhantomJS are split off into their own self-contained projects. But why bother building such services at all? Surely there are suitable APIs that can be used from services like Heroku and Nodejitsu?</p>

<p>Enter <a href='http://www.brombone.com/'>BromBone</a>, by Chad DeShon. BromBone is a web service for PhantomJS, with a <a href='http://www.brombone.com/#try'>simple API</a> and <a href='http://www.brombone.com/#pricing'>reasonable pricing</a>. It currently allows a page to be rendered as a PNG with an optional delay, and can also run JavaScript on a page. Chad only released the project recently so he&#8217;s looking for new users to try it out.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/15/webgl-head-tracking-clouseau-colt">WebGL Head Tracking, Clouseau, ColtJS</a></h2>
      <div class="meta">
        <span class="date">15 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/15/webgl-head-tracking-clouseau-colt/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='webgl_head_tracking'>WebGL Head Tracking</h3>

<p><img src='/images/posts/headtracker.png' alt='headtrackr' /></p>

<p>In <a href='http://learningthreejs.com/blog/2013/03/12/move-a-cube-with-your-head/'>Move a Cube With Your Head or Head-Tracking With WebGL</a>, Jerome Etienne talks about 3D head tracking using Three.js and <a href='http://www.webrtc.org/'>WebRTC</a>. He&#8217;s using a library for face and head tracking called <a href='https://github.com/auduno/headtrackr'>headtrackr</a> by Audun Mathias Øygard, which has been used to create some interesting demos and games (check out <a href='http://auduno.github.com/headtrackr/examples/targets.html'>Targets</a> and <a href='http://www.shinydemos.com/facekat/'>FaceKat</a>).</p>

<h3 id='clouseau'>Clouseau</h3>

<p>Clouseau (GitHub: <a href='https://github.com/hull/clouseau'>hull / clouseau</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/clouseau-js'>clouseau-js</a>) by Xavier Cambar tracks applications using PhantomJS combined with <a href='http://github.com/kriskowal/q'>Q</a>. It basically provides a lightweight integration testing solution:</p>

<blockquote>
<p>Once you&#8217;ve defined invariants in your app, you provide Clouseau with functions to assert them. Then Clouseau will open in PhantomJS the URL at which your app resides and will applies these functions.</p>
</blockquote>

<p>It can be used for testing, but the author also notes it works for monitoring long-running applications.</p>

<h3 id='coltjs'>ColtJS</h3>

<p><a href='http://coltjs.com/'>ColtJS</a> (GitHub: <a href='https://github.com/Fluidbyte/ColtJS'>Fluidbyte / ColtJS</a>, License: <em>MIT</em>) is a framework for creating AMD-based applications. It supports routing, templates, URL parsing, network calls, events, storage, and pub/sub:</p>

<blockquote>
<p>ColtJS is a simple framework allowing for easy deployment of JavaScript Application using asynchronous module definition. Its only dependency is RequireJS and it builds off simple principles of a centralized router loading modules only when requested to produce an efficient, easy-to-manage application structure.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/14/backbone-tutorial-14">Backbone.js Tutorial: Customising the UI</a></h2>
      <div class="meta">
        <span class="date">14 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/14/backbone-tutorial-14/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'><strong>Part 14: Customising the UI</strong></a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>85c358</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 85c358
</code></pre>
</div>
<h3 id='customising_bootstrap'>Customising Bootstrap</h3>
<div class='image'>
  <img src='/images/posts/backbone-app-before.png' alt='' />
  <small>Before customisation.</small>
</div>
<p>So far our Backbone application has had a rudimentary interface. It&#8217;s based on <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a>, which is a popular choice for developers who want a usable interface without spending too much time working on the design side of things. However, Bootstrap is a victim of its own popularity, and most of us are starting to grow tired of seeing it everywhere.</p>

<p>This post is about techniques for customising projects built with Backbone and Bootstrap. There are three main approaches I use to add some originality to my Bootstrap projects:</p>

<ol>
<li>Colours: Get the project configured with suitable branding</li>

<li>Texture: Judicious use of images to add an extra dimension to background, panels, and buttons</li>

<li>Custom fonts and icons: Carefully applied custom fonts and icons can create a more distinct look</li>
</ol>

<h3 id='colours'>Colours</h3>

<p><a href='http://twitter.github.com/bootstrap/customize.html'>Bootstrap has a customisation page</a> that allows you to change typographic elements and colours. This is self-explanatory so I&#8217;m not going to spend too much time on it. Bootstrap is built on <a href='http://lesscss.org/'>LESS CSS</a> so it&#8217;s easy to create your own builds of Bootstrap with custom colours baked right in.</p>

<h3 id='texture'>Texture</h3>
<div class='image'>
  <img src='/images/posts/subtlepatterns.png' alt='' />
  <small>Subtle Patterns.</small>
</div>
<p>To save time when working on client projects, I&#8217;ll often dig through stock photography sites to find useful illustrations and textures. This project, however, just needs something to add a texture to the left-hand-side navigation to make it look visually distinct. An excellent resource for textures is <a href='http://subtlepatterns.com/'>Subtle Patterns</a> &#8211; a curated directory of tiled textures suitable for web and mobile projects. For legal information for use in commercial projects, see <a href='http://subtlepatterns.com/about/'>About Subtle Patterns</a>.</p>

<p>I&#8217;ve added two tiled images to the project: one for the navigation bar and another for the <code>body</code> background. The image used on the <code>body</code> is white, while the navigation bar is dark grey. The navigation list elements use alpha blending to make the underlying texture appear lighter, with <code>rgba(255, 255, 255, .25)</code>.</p>

<p>It&#8217;s easy to add textures to a project, particularly when they tile, and the Subtle Patterns images include a higher-DPI version as well. I find this a fun second stage to Bootstrap customisation, because it&#8217;s easy to quickly swap textures around to experiment.</p>

<h3 id='custom_fonts_and_icons'>Custom Fonts and Icons</h3>
<div class='image'>
  <img src='/images/posts/btask-custom-font.png' alt='' />
  <small>Using Google Web Fonts.</small>
</div>
<p>The first thing I wanted to change was the logo font. Rather than using an image I found a suitable font on <a href='http://www.google.com/webfonts'>Google Web Fonts</a> and applied some CSS shadows. This font was added to the project by updating <code>index.html</code> to load the font and updating the CSS to refer to it by name:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;link</span> <span class='na'>href=</span><span class='s'>&#39;http://fonts.googleapis.com/css?family=Playball&#39;</span> <span class='na'>rel=</span><span class='s'>&#39;stylesheet&#39;</span> <span class='na'>type=</span><span class='s'>&#39;text/css&#39;</span><span class='nt'>&gt;</span>
</code></pre>
</div>
<p>Then in the CSS the font is selected with <code>font-family: playball, sans-serif</code>.</p>

<p>I also switched the main <code>body</code> font to <code>PT Sans</code>, which doesn&#8217;t look radically different to the default but again elevates the look and feel away from stock-Bootstrap.</p>

<p>Another quick win is to use <a href='http://fortawesome.github.com/Font-Awesome/'>Font Awesome</a>.</p>

<h3 id='go_forth_and_customise'>Go Forth and Customise</h3>
<div class='image'>
  <img src='/images/posts/bootstrap-customised.png' alt='' />
  <small>The finished article.</small>
</div>
<p>Adding custom fonts, textures, and icons are just a few easy ways to distinguish a Bootstrap-based project from the crowd. You&#8217;ve got no excuse for releasing boring-looking apps!</p>

<p>I&#8217;m running a build of bTask at <a href='http://todo.dailyjs.com/'>todo.dailyjs.com</a>. It&#8217;s not exactly the same as the tutorial version at the moment because I wrote it while researching this tutorial series, but eventually I&#8217;ll switch it over to use the same code as the GitHub project. It doesn&#8217;t implement everything Google Tasks supports (like subtasks for example), but I use it every day at work.</p>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/commit/711c9f6c1df36187417b18fba84a44fe82889695'>alexyoung / dailyjs-backbone-tutorial, commit 711c9f6</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/13/node-roundup">Node Roundup: 0.10, Versions, cors</a></h2>
      <div class="meta">
        <span class="date">13 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/13/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#middleware">middleware</a>
          
            <a href="/tags.html#servers">servers</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='node_0100'>Node 0.10.0</h3>

<p>It&#8217;s finally here! <a href='http://blog.nodejs.org/2013/03/11/node-v0-10-0-stable/'>Node 0.10.0</a> has been released, which means your custom streams can now be rewritten with the new primitive classes. This is a good thing. The announcement post has a lot of details on benchmarks, and mentions the new <a href='http://jenkins.nodejs.org/'>Node CI server</a> that shows the build status for each of the platforms Node officially supports.</p>

<blockquote>
<p>&#8230; all streams in Node-core are built using the same set of easily-extended base classes, so their behavior is much more consistent, and it&#8217;s easier than ever to create streaming interfaces in your own userland programs.</p>
</blockquote>

<p>Isaac mentions 37 modules are using the <a href='https://github.com/isaacs/readable-stream'>readable-stream</a> module. This module allows <em>streams2</em> to be used with Node 0.8 applications, so you can use it as a bridge to migrate older code. There are also <em>streams2</em> modules already out there &#8211; for example, <a href='https://npmjs.org/package/tub'>tub</a> by Eirik Albrigtsen uses the new <code>Transform</code> class.</p>

<p>The road to 1.0.0 will see a Node 0.12 series released first. The goal of 0.12 will be to improve Node&#8217;s HTTP implementation, which will involve improving the encapsulation between client and server code and reworking the socket pooling behaviour.</p>

<h3 id='versions'>Versions</h3>

<p>Versions (GitHub: <a href='https://github.com/3rd-Eden/versions'>3rd-Eden / versions</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/versions'>versions</a>) by Arnout Kazemier is a module for creating a content delivery network. It was designed to address performance concerns when using Node for serving static assets when compared to servers that support <a href='http://wiki.nginx.org/HttpCoreModule#sendfile'><code>sendfile</code> like Nginx</a>. It does things like sets the correct HTTP caching headers, and has a REST API for server management which also outputs various metrics.</p>

<p>Arnout wrote a great introduction to Versions, <a href='http://blog.nodejitsu.com/content-delivery-network-in-node-js'>Versions: The Node.js Content Delivery Network</a>, which explains how to configure the application as well as demonstrating the improvements it offers.</p>

<h3 id='cors'>cors</h3>

<p>cors (GitHub: <a href='https://github.com/TroyGoode/node-cors'>TroyGoode / node-cors</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/cors'>cors</a>) by Troy Goode is Express/Connect middleware for working with cross-origin resource sharing. This allows your Express apps to accept cross-origin requests by writing out the appropriate HTTP headers.</p>

<p>The readme includes an asynchronous example that illustrates how to conditionally accept requests. You could use it to whitelist specific domains for apps that are configured for multiple domains.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/12/jquery-roundup">jQuery Roundup: jQuery-menu-aim, Toolbar, ngInfiniteScroll</a></h2>
      <div class="meta">
        <span class="date">12 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/12/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#usability">usability</a>
          
            <a href="/tags.html#menus">menus</a>
          
            <a href="/tags.html#toolbars">toolbars</a>
          
            <a href="/tags.html#pagination">pagination</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='jquerymenuaim'>jQuery-menu-aim</h3>

<p>jQuery-menu-aim (GitHub: <a href='https://github.com/kamens/jQuery-menu-aim'>kamens / jQuery-menu-aim</a>, License: <em>MIT</em>) by Ben Kamens is a for making large dropdowns in a similar style to Amazon. Ben has written a post about why this is desirable: <a href='http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown'>Breaking Down Amazon&#8217;s Mega Dropdown</a>.</p>

<blockquote>
<p>At every position of the cursor you can picture a triangle between the current mouse position and the upper and lower right corners of the dropdown menu. If the next mouse position is within that triangle, the user is probably moving their cursor into the currently displayed submenu. Amazon uses this for a nice effect. As long as the cursor stays within that blue triangle the current submenu will stay open</p>
</blockquote>

<p>Ben made a diagram of this to visualise the area used to detect the mouse.</p>

<p><img src='/images/posts/amazon-hover-area.png' alt='jQuery-menu-aim' /></p>

<p>I thought this was a great piece of work, both from the developers at Amazon and Ben in recognising something interesting was going on behind the scenes. The plugin comes with an example, and has configuration options for integrating it with your existing markup.</p>

<h3 id='toolbar'>Toolbar</h3>

<p><img src='/images/posts/toolbarsjs2.png' alt='Toolbar' /></p>

<p><a href='http://paulkinzett.github.com/toolbar/'>Toolbar</a> (GitHub: <a href='https://github.com/paulkinzett/toolbar'>paulkinzett / toolbar</a>, License: <em>MIT</em>, jQuery: <a href='http://plugins.jquery.com/toolbar/'>toolbar</a>) by Paul Kinzett is a plugin for quickly creating popup toolbars with icons. The markup is an unordered list, and the toolbar can be oriented both vertically and horizontally.</p>

<p>The plugin includes CSS and icons, so it can be dropped straight into a project and should look similar to the examples on the site.</p>

<h3 id='nginfinitescroll'>ngInfiniteScroll</h3>

<p><a href='http://binarymuse.github.com/ngInfiniteScroll/'>ngInfiniteScroll</a> (GitHub: <a href='https://github.com/BinaryMuse/ngInfiniteScroll'>BinaryMuse / ngInfiniteScroll</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/ng-infinite-scroll'>ng-infinite-scroll</a>) is an AngularJS project that depends on jQuery which can help implement infinite scrolling. It&#8217;s used by adding the <code>infinite-scroll</code> attribute to an element, and then implementing a controller that can fetch data when required.</p>

<p>The <a href='http://binarymuse.github.com/ngInfiniteScroll/demo_async.html'>remote data demo</a> shows how it works by calling Reddit&#8217;s JSONP API.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/11/node-stable">Node 0.10</a></h2>
      <div class="meta">
        <span class="date">11 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/11/node-stable/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <p><a href='https://github.com/joyent/node/commit/163ca274230fce536afe76c64676c332693ad7c1'>Node 0.10 is about to be released</a> &#8211; the next stable version of Node. The most major change is the new streams API, which is designed to overcome some of the limitations found in previous versions. For a summary of the issues with streams in Node 0.8 and the new API, see: <a href='http://blog.nodejs.org/2012/12/20/streams2/'>A New Streaming API for Node v0.10</a>.</p>

<p>At first the new streams API seems quirky to work with, but I&#8217;m convinced my <em>streams2</em> code is leaner. There are also new base classes for streams: <code>Readable</code>, <code>Writable</code>, <code>Duplex</code>, and <code>Transform</code>. These classes actually cover some key functionality that was previously provided by third party modules.</p>

<p>Many of Node&#8217;s core modules have streaming interfaces, and 0.10 adds streaming APIs to the crypto module.</p>

<p><code>EventEmitter</code> has some changes. The documentation recommends using <code>util.inherits</code> to extend the <code>EventEmitter</code> class, and I&#8217;d add that it&#8217;s a good idea to call the constructor as well. There&#8217;s also a new <code>removeListener</code> event which is emitted when listeners are removed, including when <code>removeAllListeners</code> is called.</p>
<div class='image'>
  <img src='/images/posts/setimmediate.png' alt='' />
  <small>setImmediate semantics in Node 0.9.x</small>
</div>
<p>Node now has <a href='https://developer.mozilla.org/en-US/docs/DOM/window.setImmediate'>setImmediate</a> and <code>clearImmediate</code> &#8211; there&#8217;s a useful diagram by Shigeki Ohtsu that shows where <code>setImmediate</code> is triggered: <a href='https://github.com/joyent/node/pull/3872#issuecomment-7804775'>setImmediate semantics in Node 0.9.x</a>.</p>

<p>For more details on API changes, see <a href='https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10'>Api changes between v0.8 and v0.10</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/08/validatr-pointeraccuracy-testacular">Validatr, pointeraccuracy.js, Testacular Updates</a></h2>
      <div class="meta">
        <span class="date">08 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/08/validatr-pointeraccuracy-testacular/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
            <a href="/tags.html#accessibility">accessibility</a>
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#polyfills">polyfills</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='validatr'>Validatr</h3>

<p><img src='/images/posts/validatr.png' alt='Validatr logo' /></p>

<p><a href='http://jaymorrow.github.com/validatr/'>Validatr</a> (GitHub: <a href='https://github.com/jaymorrow/validatr/'>jaymorrow / validatr</a>, License: <em>MIT</em>, jquery: <a href='http://plugins.jquery.com/validatr/'>validatr</a>) by Jay Morrow is a cross-browser HTML5 form validation library. That means it provides validators for the new native widgets, like <code>color</code> and <code>date</code>. The <a href='http://jaymorrow.github.com/validatr/fields.html'>Validatr fields documentation</a> lists all of the supported inputs and also features demos.</p>

<p>The library requires jQuery, and usage looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;form&#39;</span><span class='p'>).</span><span class='nx'>validatr</span><span class='p'>(</span><span class='s1'>&#39;addTest&#39;</span><span class='p'>,</span> <span class='s1'>&#39;example&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>element</span><span class='p'>)</span> <span class='p'>{});</span>
</code></pre>
</div>
<p>Jay has also included <a href='http://jaymorrow.github.com/validatr/tests.html'>QUnit tests for Validatr</a>.</p>

<h3 id='pointeraccuracyjs'>pointeraccuracy.js</h3>

<p>pointeraccuracy.js (GitHub: <a href='https://github.com/n-fuse/pointeraccuracy.js'>n-fuse / pointeraccuracy.js</a>, License: <em>MIT</em>) by Thomas Hoppe is a polyfill for the <a href='http://dev.w3.org/csswg/mediaqueries4/#pointer'>media query level 4 property &#8220;pointer&#8221;</a>. This API heuristically determines the pointer accuracy, returning <code>coarse</code> or <code>fine</code> depending on the input device&#8217;s accuracy:</p>

<blockquote>
<p>This media feature does not indicate that the user will never be able to click accurately, only that it is inconvenient for him to do so. Authors are expected to react to a value of <code>coarse</code> by designing pages that do not rely on accurate clicking to be operated.</p>
</blockquote>

<h3 id='testacular_updates'>Testacular Updates</h3>

<p><a href='http://testacular.github.com/0.6.0/index.html'>Testacular</a>, used by the AngularJS team, has been updated. The new version includes code coverage, Growl and TeamCity reporters, and an adapter for QUnit.</p>

<p>Vojta Jína posts about the project to his Google+ account: <a href='https://plus.google.com/117663020319348671498/posts'>+Vojta Jína</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/03/07/backbone-tutorial-13">Backbone.js Tutorial: Routes</a></h2>
      <div class="meta">
        <span class="date">07 Mar 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/03/07/backbone-tutorial-13/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'><strong>Part 13: Routes</strong></a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>0c6de32</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 0c6de32
</code></pre>
</div>
<h3 id='routes'>Routes</h3>

<p>So far we&#8217;ve implemented basic list and task management, but working with multiple lists is tricky because lists can&#8217;t be referenced by the URL. If the page is reloaded, the current list isn&#8217;t remembered, and lists can&#8217;t be bookmarked.</p>

<p>Fortunately, Backbone provides a solution for both of these issues: <code>Backbone.Router</code>. This provides a neat wrapper around hash URLs and <code>history.pushState</code>.</p>

<h3 id='when_to_use_hash_urls'>When to Use Hash URLs</h3>

<p>I&#8217;ll admit I find hash URLs annoying, and this sentiment seems to have been perpetuated by Twitter&#8217;s implementation of them. However, there is a good side to hash URLs: they require less work to build and are backwards compatible with older browsers.</p>

<p>Using <code>history.pushState</code> means the browser can potentially display any URL you want. Rather than <code>/#lists/id</code>, the prettier <code>/lists/id</code> can be displayed. However, without a suitable server-side setup, visiting <code>/lists/id</code> before the main application has loaded will fail while the hash URL version will work.</p>

<p>If you&#8217;re making a fairly simple and self-contained single page application, then you may wish to avoid <code>pushState</code> and use hash URLs instead.</p>

<p>Either way, Backbone makes it easy to switch between both schemes. Hash URLs are the default, and <code>history.pushState</code> will be used when specified with <code>Backbone.history.start({ pushState: true })</code>.</p>

<h3 id='the_routes_file'>The Routes File</h3>

<p>It&#8217;s generally a good idea to keep routes separate from the rest of the application. Create a new file called <code>app/js/routes.js</code> and <code>extend</code> Backbone&#8217;s router:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Router</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>routes</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;lists/:id&#39;</span><span class='o'>:</span> <span class='s1'>&#39;openList&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='p'>},</span>

    <span class='nx'>openList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>id</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This code defines the route. This application will just need one for now: <code>lists/:id</code>. The <code>:id</code> part is a parameter, which will be extracted by <code>Backbone.Router</code> and sent as an argument to <code>openList</code>.</p>

<h3 id='load_the_router'>Load the Router</h3>

<p>The centralised <code>App</code> class is as good a place as any to load the routes and set them up. Open <code>app/js/app.js</code> and change <code>define</code> to include <code>&#39;routes&#39;</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;gapi&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;routes&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/app&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/auth&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/menu&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;collections/tasklists&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;collections/tasks&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>ApiManager</span><span class='p'>,</span> <span class='nx'>Routes</span><span class='p'>,</span> <span class='nx'>AppView</span><span class='p'>,</span> <span class='nx'>AuthView</span><span class='p'>,</span> <span class='nx'>ListMenuView</span><span class='p'>,</span> <span class='nx'>TaskLists</span><span class='p'>,</span> <span class='nx'>Tasks</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>App</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>routes</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Routes</span><span class='p'>();</span>
</code></pre>
</div>
<p>Now, move down to around line 35 where there&#8217;s a callback that runs when the API manager is ready. This is where <code>Backbone.history.start</code> should be called:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>App</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>views</span><span class='o'>:</span> <span class='p'>{},</span>
  <span class='nx'>collections</span><span class='o'>:</span> <span class='p'>{},</span>
  <span class='nx'>connectGapi</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ApiManager</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>userId</span><span class='o'>:</span> <span class='s1'>&#39;@me&#39;</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>collection</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>req</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>listMenu</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
        <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>history</span><span class='p'>.</span><span class='nx'>start</span><span class='p'>();</span>
      <span class='p'>}});</span>
    <span class='p'>});</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>It&#8217;s technically safe to call this when the routes have been loaded, but the <code>openList</code> route handler requires that some lists exist, so it&#8217;s better to load it when the API is ready.</p>

<p>The purpose of the <code>start</code> method is to begin monitoring <code>hashchange</code> events &#8211; whenever the browser address bar&#8217;s URL changes the router will be invoked.</p>

<h3 id='opening_lists_using_events'>Opening Lists Using Events</h3>

<p>To write decoupled Backbone applications, you need to think in terms of the full Backbone stack: models and collections, and views. When someone visits a list URL from a bookmark that refers to a specific model, the route handler should be able to find the associated model.</p>

<p>Backbone&#8217;s documentation is quite clear about the power of custom events, and that&#8217;s basically how <code>openList</code> in <code>app/js/routes.js</code> should work:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>openList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>id</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span> <span class='o'>&amp;&amp;</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>list</span> <span class='o'>=</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='nx'>id</span><span class='p'>);</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>list</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>list</span><span class='p'>.</span><span class='nx'>trigger</span><span class='p'>(</span><span class='s1'>&#39;select&#39;</span><span class='p'>);</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;List not found:&#39;</span><span class='p'>,</span> <span class='nx'>id</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>I&#8217;ve been strict about checking for the existence of the <code>lists</code> collection, and even when fetching a given <code>list</code> model from the collection. The main reason for this was to be able to show sensible error messages, but for now there&#8217;s just a <code>console.error</code> to help track issues loading data.</p>

<p>The final piece of the puzzle is the view code that has the responsibility of opening lists. Open <code>app/js/views/lists/menuitem.js</code> and make the following changes:</p>

<ol>
<li>Add <code>this.model.on(&#39;select&#39;, this.open, this);</code> to the <code>initialize</code> method</li>

<li>Add <code>bTask.routes.navigate(&#39;lists/&#39; + this.model.get(&#39;id&#39;));</code> to the <code>render</code> method</li>
</ol>

<p>The first line binds the custom event, <code>select</code>, from the view&#8217;s model (which represents the list). The second line causes the browser&#8217;s URL to be updated &#8211; you&#8217;ll find yourself using <code>routes.navigate</code> quite a lot in more complicated applications.</p>

<h3 id='summary'>Summary</h3>

<p>Combining events and routes is the secret to writing decoupled Backbone applications. It can be difficult to do this well &#8211; there are definitely often lazy solutions that can result in a little bit too much spaghetti code. To avoid situations like this, think in terms of models, collections, views, and their relationships.</p>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/commit/85c35852a2c4e820a9e6e855c30ec83124f8a7f5'>alexyoung / dailyjs-backbone-tutorial, commit 85c358</a>.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page17">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <strong>18</strong>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page19">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

