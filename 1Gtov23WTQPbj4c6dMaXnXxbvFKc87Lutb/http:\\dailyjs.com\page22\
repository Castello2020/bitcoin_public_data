http://dailyjs.com/page22/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 10:40:09 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "e9372-2d152-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 40174
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/12/node-roundup">Node Roundup: thin-orm, node-tar.gz, connect-bruteforce</a></h2>
      <div class="meta">
        <span class="date">12 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/12/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#middleware">middleware</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#compression">compression</a>
          
            <a href="/tags.html#databases">databases</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='thinorm'>thin-orm</h3>

<p><a href='https://github.com/on-point/thin-orm'>thin-orm</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/thin-orm'>thin-orm</a>) by Steve Hurlbut is a lightweight ORM module for SQL databases with a MongoDB-inspired API:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>orm</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;thin-orm&#39;</span><span class='p'>);</span>

<span class='nx'>orm</span><span class='p'>.</span><span class='nx'>table</span><span class='p'>(</span><span class='s1'>&#39;users&#39;</span><span class='p'>)</span>
   <span class='p'>.</span><span class='nx'>columns</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>,</span> <span class='s1'>&#39;login&#39;</span><span class='p'>,</span> <span class='s1'>&#39;firstName&#39;</span><span class='p'>,</span> <span class='s1'>&#39;lastName&#39;</span><span class='p'>,</span> <span class='s1'>&#39;createdAt&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>It&#8217;s designed to be used with existing libraries, like <a href='https://npmjs.org/package/pg'>pg</a> and <a href='https://npmjs.org/package/sqlite3'>sqlite3</a>, so you&#8217;ll need one of those modules installed to use it.</p>

<p>thin-orm currently supports the following features:</p>

<ul>
<li>Filtering</li>

<li>Sorting</li>

<li>Pagination</li>

<li>Joins</li>

<li>Optional camelCase property-to-field mapping</li>

<li>SQL injection protection</li>
</ul>

<p>Steve has included Nodeunit tests that cover the basic functionality, and some integration tests for PostgreSQL and SQLite.</p>

<h3 id='nodetargz'>node-tar.gz</h3>

<p><a href='https://github.com/cranic/node-tar.gz'>node-tar.gz</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/tar.gz'>tar.gz</a>) by Alan Hoffmeister is a <code>tar</code> helper module and command-line utility, built with Node&#8217;s zlib module, <a href='https://npmjs.org/package/tar'>tar</a>, and <a href='https://npmjs.org/package/commander'>commander</a>.</p>

<p>The module can be used to easily tar and compress a folder, and it will install a <code>targz</code> script that supports the <code>zxvf</code> flags. There are also Vows tests.</p>

<h3 id='connectbruteforce'>connect-bruteforce</h3>

<p><a href='https://github.com/revington/connect-bruteforce'>connect-bruteforce</a> (License: <em>GPLv2</em>, npm: <a href='https://npmjs.org/package/connect-bruteforce'>connect-bruteforce</a>) by Pedro Narciso Garc√≠a Revington provides middleware that can help prevent bruteforce attacks. It will add a small delay to requests when an attack is detected.</p>

<p>The author has written a useful example that requires captcha validation after a successive number of validation failures: <a href='https://github.com/revington/connect-bruteforce/tree/master/examples/express-recaptcha'>express-recaptcha</a>.</p>

<p>For a simpler example, see <a href='https://github.com/revington/connect-bruteforce/tree/master/examples/express-hello-world'>express-hello-world</a>.</p>

<p>The project includes Mocha tests.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/11/jquery-roundup">jQuery Roundup: SocialCount, Literally Canvas, Socrates</a></h2>
      <div class="meta">
        <span class="date">11 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/11/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#social">social</a>
          
            <a href="/tags.html#markdown">markdown</a>
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#images">images</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='socialcount'>SocialCount</h3>

<p>Social buttons can slow down page loading times due to a variety of reasons. One solution is to lazy load them, and this is exactly what the <a href='http://fgte.st/SocialCount/examples/index.html'>SocialCount</a> (GitHub: <a href='https://github.com/filamentgroup/SocialCount/'>filamentgroup / SocialCount</a>, License: <em>MIT</em>) from Filament Group does. It can show &#8220;like&#8221; style buttons, counts, and lazy load the social network&#8217;s original buttons.</p>

<p>It&#8217;s designed using progressive enhancement techniques, and is tested against IE 7+, as well as the other major browsers, and various touchscreen devices. It also includes QUnit tests.</p>

<h3 id='literally_canvas'>Literally Canvas</h3>
<div class='image'>
  <img src='/images/posts/literallycanvas.png' alt='' />
  <small>Drawing with a trackpad is tricky business.</small>
</div>
<p><a href='http://literallycanvas.com/'>Literally Canvas</a> (GitHub: <a href='https://github.com/literallycanvas/literallycanvas'>literallycanvas / literallycanvas</a>, License: <em>BSD</em>) by Stephen Johnson and Cameron Paul is a drawing widget built with jQuery and Underscore.js. It has some basic drawing tools and can upload images to imgur.</p>

<p>The plugin accepts an options object that can be used to enable or disable certain features:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.literally&#39;</span><span class='p'>).</span><span class='nx'>literallycanvas</span><span class='p'>({</span>
  <span class='nx'>backgroundColor</span><span class='o'>:</span> <span class='s1'>&#39;rgb(255, 0, 0)&#39;</span><span class='p'>,</span> <span class='c1'>// default rgb(230, 230, 230)</span>
  <span class='nx'>keyboardShortcuts</span><span class='o'>:</span> <span class='kc'>false</span><span class='p'>,</span>          <span class='c1'>// default true</span>
  <span class='nx'>sizeToContainer</span><span class='o'>:</span> <span class='kc'>false</span><span class='p'>,</span>            <span class='c1'>// default true</span>
  <span class='nx'>toolClasses</span><span class='o'>:</span> <span class='p'>[</span><span class='nx'>LC</span><span class='p'>.</span><span class='nx'>Pencil</span><span class='p'>]</span>           <span class='c1'>// see coffee/tools.coffee</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='socrates'>Socrates</h3>
<div class='image'>
  <img src='/images/posts/socrates.png' alt='' />
  <small>Real-time Markdown editing with Socrates.</small>
</div>
<p><a href='http://socrates.io/'>Socrates</a> (GitHub: <a href='https://github.com/segmentio/socrates'>segmentio / socrates</a>, License: <em>MIT</em>) by Ilya Volodarsky and Ian Storm Taylor is a Markdown editor and previewer. It&#8217;s built with jQuery, Backbone.js, and a client-side Markdown parser by Christopher Jeffrey.</p>

<p>The data is stored in <a href='https://www.firebase.com/'>Firebase</a>, so you&#8217;ll need an account with Firebase to install your own instance of Socrates.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/10/extender-gridy-reduce">Extender, Gridy.js, grunt-reduce</a></h2>
      <div class="meta">
        <span class="date">10 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/10/extender-gridy-reduce/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#build">build</a>
          
            <a href="/tags.html#grunt">grunt</a>
          
            <a href="/tags.html#tv">tv</a>
          
            <a href="/tags.html#browser">browser</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='extender'>Extender</h3>

<p><a href='http://doug-martin.github.com/extender/'>Extender</a> (GitHub: <a href='https://github.com/doug-martin/extender'>doug-martin / extender</a>, npm: <a href='https://npmjs.org/package/extender'>extender</a>, License: <em>MIT</em>) by Doug Martin is a library for making chainable APIs. It works as a Node module or with RequireJS.</p>

<p>Extender has a <code>define</code> method that accepts a function and an object with methods that will form the API:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>isString</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='o'>!</span><span class='nx'>isUndefinedOrNull</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>)</span> <span class='o'>&amp;&amp;</span> <span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>obj</span> <span class='o'>===</span> <span class='s2'>&quot;string&quot;</span> <span class='o'>||</span> <span class='nx'>obj</span> <span class='k'>instanceof</span> <span class='nb'>String</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='kd'>var</span> <span class='nx'>myExtender</span> <span class='o'>=</span>
  <span class='p'>.</span><span class='nx'>define</span><span class='p'>(</span><span class='nx'>isString</span><span class='p'>,</span> <span class='p'>{</span>
    <span class='nx'>multiply</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>str</span><span class='p'>,</span> <span class='nx'>times</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>ret</span> <span class='o'>=</span> <span class='nx'>str</span><span class='p'>,</span> <span class='nx'>i</span><span class='p'>;</span>
      <span class='k'>for</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>times</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>ret</span> <span class='o'>+=</span> <span class='nx'>str</span><span class='p'>;</span>
      <span class='p'>}</span>
      <span class='k'>return</span> <span class='nx'>ret</span><span class='p'>;</span>
    <span class='p'>},</span>
    <span class='nx'>toArray</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>str</span><span class='p'>,</span> <span class='nx'>delim</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>delim</span> <span class='o'>=</span> <span class='nx'>delim</span> <span class='o'>||</span> <span class='s1'>&#39;&#39;</span><span class='p'>;</span>
      <span class='k'>return</span> <span class='nx'>str</span><span class='p'>.</span><span class='nx'>split</span><span class='p'>(</span><span class='nx'>delim</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

<span class='nx'>myExtender</span><span class='p'>(</span><span class='s1'>&#39;hello&#39;</span><span class='p'>).</span><span class='nx'>multiply</span><span class='p'>(</span><span class='mi'>2</span><span class='p'>).</span><span class='nx'>value</span><span class='p'>();</span> <span class='c1'>// hellohello</span>
</code></pre>
</div>
<p>The author has included tests and lots of examples. Although making chainable APIs is pretty straightforward, Extender might be a more explicit and testable way to do it.</p>

<h3 id='gridyjs'>Gridy.js</h3>

<p><img src='/images/posts/gridyjs.png' alt='Gridy.js' /></p>

<p>In the UK only one of my favourite shows is on Netflix. The situation might be better in the US with Hulu, but if you&#8217;re a cult TV fan outside of the US finding content can be challenging. Even with a dearth of legitimate content sources, I&#8217;ll always prefer hacking my TV to using locked down devices &#8211; I had loads of fun this weekend with a Raspberry Pi and open source media projects.</p>

<p>One thing that&#8217;s often lacking is cool web interfaces for media software. Igor Alpert sent in <a href='http://ialpert.github.com/gridy.js/'>Gridy.js</a> (GitHub: <a href='https://github.com/ialpert/gridy.js'>ialpert / gridy.js</a>), which is a library designed for building media browser interfaces. It includes tools for carousels, grids, and sliders.</p>

<p>Igor said he&#8217;s tested it with the Samsung SDK, <a href='http://dev.opera.com/tv'>Opera TV</a>, and Google TV for the LG and Vizio platforms.</p>

<h3 id='gruntreduce'>grunt-reduce</h3>

<p><a href='https://github.com/Munter/grunt-reduce'>grunt-reduce</a> by Peter M√ºller is a Grunt task for <a href='https://github.com/One-com/assetgraph'>AssetGraph</a> and other related projects from One.com. AssetGraph is a Node-based module for optimising web pages. By adding grunt-reduce to your project, you can bundle and minify assets, rename assets to MD5-sums of their content, optimise images, and even generate automatic CSS sprites.</p>

<p>Although AssetGraph doesn&#8217;t currently work with AngularJS, Peter notes that this is being addressed: <a href='https://github.com/One-com/assetgraph/issues/84'>#84: Support AngularJS templates</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/07/survey-rfc-gitgraph-es6">JavaScript Survey 2012, Gitgraph, ES6 Proxies</a></h2>
      <div class="meta">
        <span class="date">07 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/07/survey-rfc-gitgraph-es6/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#ES6">ES6</a>
          
            <a href="/tags.html#git">git</a>
          
            <a href="/tags.html#graphs">graphs</a>
          
            <a href="/tags.html#Canvas">Canvas</a>
          
            <a href="/tags.html#survey">survey</a>
          
            <a href="/tags.html#community">community</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='javascript_survey_2012_rfc'>JavaScript Survey 2012: RFC</h3>

<p>I&#8217;m currently researching the next JavaScript Developer Survey. I&#8217;d like feedback on questions. If there&#8217;s anything you&#8217;d strongly like to see in the survey, please <a href='http://contact.dailyjs.com/general'>contact me</a> and I&#8217;ll see if I can incorporate it.</p>

<p>Previous surveys can be found here:</p>

<ul>
<li><a href='http://dailyjs.com/2011/12/15/javascript-survey-results'>JavaScript Developer Survey 2011</a></li>

<li><a href='http://dailyjs.com/2010/12/13/javascript-survey-results/'>JavaScript Developer Survey 2010</a></li>

<li><a href='http://dailyjs.com/2009/12/02/survey-results'>JavaScript Developer Survey 2009</a></li>
</ul>

<p>In general, the surveys try to determine:</p>

<ul>
<li>How many readers are client-side or server-side developers</li>

<li>Whether or not readers write tests</li>

<li>Other languages used (C#, Java, Objective-C, PHP, Ruby, Python, etc.)</li>
</ul>

<p>It&#8217;s not necessarily used to design content for DailyJS &#8211; the results are shared with the community benefit everyone.</p>

<h3 id='gitgraph'>Gitgraph</h3>

<p><a href='http://bitpshr.info/gitgraph/'>Gitgraph</a> (GitHub: <a href='https://github.com/bitpshr/Gitgraph'>bitpshr / Gitgraph</a>, License: <em>WTFPL</em>) by Paul Bouchon is a Canvas-based GitHub participation graph library. It&#8217;s based around a constructor function that accepts arguments for things like GitHub username, width, height, and colours:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>graph</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Gitgraph</span><span class='p'>({</span> 
    <span class='nx'>user</span>        <span class='o'>:</span> <span class='s1'>&#39;nex3&#39;</span><span class='p'>,</span>                <span class='c1'>// any github username</span>
    <span class='nx'>repo</span>        <span class='o'>:</span> <span class='s1'>&#39;sass&#39;</span><span class='p'>,</span>                <span class='c1'>// name of repo</span>
    <span class='nx'>domNode</span>     <span class='o'>:</span> <span class='nb'>document</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>,</span>         <span class='c1'>// (optional) DOM node to attach to </span>
    <span class='nx'>width</span>       <span class='o'>:</span> <span class='mi'>800</span><span class='p'>,</span>                   <span class='c1'>// (optional) graph width</span>
    <span class='nx'>height</span>      <span class='o'>:</span> <span class='mi'>300</span><span class='p'>,</span>                   <span class='c1'>// (optional) graph height</span>
    <span class='nx'>allColor</span>    <span class='o'>:</span> <span class='s2'>&quot;rgb(202, 202, 202)&quot;</span><span class='p'>,</span>  <span class='c1'>// (optional) color of user&#39;s participation</span>
    <span class='nx'>userColor</span>   <span class='o'>:</span> <span class='s2'>&quot;rgb(51, 102, 153)&quot;</span><span class='p'>,</span>   <span class='c1'>// (optional) color of total participation</span>
    <span class='nx'>background</span>  <span class='o'>:</span> <span class='s2'>&quot;white&quot;</span><span class='p'>,</span>               <span class='c1'>// (optional) background styles</span>
    <span class='nx'>showName</span>    <span class='o'>:</span> <span class='kc'>true</span>                   <span class='c1'>// (optional) show or hide name of user / repo</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The author wrote some background on it in <a href='http://bitpshr.github.com/blog/2012/11/30/github-graphs-fo-errbody/'>GitHub Graphs Fo&#8217; Errbody</a>, because he had to wrap missing API functionality with a proxy.</p>

<h3 id='multiple_inheritance_in_es6_with_proxies'>Multiple Inheritance in ES6 with Proxies</h3>

<p><a href='http://blog.avd.io/posts/multiple-inheritance'>Multiple Inheritance in ES6 with Proxies</a> is an introduction to ES6 proxies by Jussi Kalliokoski. The author&#8217;s example uses <code>EventEmitter</code>, which I find useful because multiple inheritance with <code>EventEmitter</code> is something I&#8217;ve seen typically implemented using a for loop to copy properties.</p>

<p>The <code>Proxy</code> solution isn&#8217;t far off that approach and requires more code, but it&#8217;s worth reading if you&#8217;re struggling to understand proxies.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/06/backbone-tutorial-2">Backbone.js Tutorial: Google's APIs and RequireJS</a></h2>
      <div class="meta">
        <span class="date">06 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/06/backbone-tutorial-2/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'><strong>Part 2: Google's APIs and RequireJS</strong></a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<p>In <a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a>, I explained how to set up a simple Node server to host your Backbone.js app and test suite. Something that confused people was the way I used relative paths, which meant the tests could fail if you didn&#8217;t visit <code>/test/</code> (<code>/test</code> won&#8217;t work). There was a reason for this: I developed the original version to run on Dropbox, so I wanted to use relative paths. It&#8217;s probably safer to use absolute paths, so I should have made this clearer.</p>

<p>In this part you&#8217;ll learn the following:</p>

<ul>
<li>How <code>Backbone.sync</code> works</li>

<li>How to load Backbone.js and Underscore.js with RequireJS</li>

<li>How to get started with Google&#8217;s APIs</li>
</ul>

<h3 id='the__method'>The <code>Backbone.sync</code> Method</h3>

<p>Network access in Backbone.js is nicely abstracted through a single method which has the following signature:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The <code>method</code> argument contains a string that can be one of the following values:</p>

<ul>
<li><code>create</code></li>

<li><code>update</code></li>

<li><code>delete</code></li>

<li><code>read</code></li>
</ul>

<p>Internally, Backbone.js maps these method names to HTTP verbs:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>methodMap</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='s1'>&#39;create&#39;</span><span class='o'>:</span> <span class='s1'>&#39;POST&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;update&#39;</span><span class='o'>:</span> <span class='s1'>&#39;PUT&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;delete&#39;</span><span class='o'>:</span> <span class='s1'>&#39;DELETE&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>   <span class='s1'>&#39;GET&#39;</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>If you&#8217;re familiar with that particular flavour of RESTful API then this should all look familiar.</p>

<p>The second argument, <code>model</code>, is a <code>Backbone.Model</code> or <code>Backbone.Collection</code> &#8211; collections are used when reading multiple values.</p>

<p>The final argument, <code>options</code>, is an object that contains success and error callbacks. It&#8217;s ultimately handed off to the jQuery Ajax API.</p>

<p>To work with Google&#8217;s APIs we need to write our own <code>Backbone.sync</code> method. In general terms our implementation should be structured like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>method</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;create&#39;</span><span class='o'>:</span>
      <span class='nx'>googleAPI</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;update&#39;</span><span class='o'>:</span>
      <span class='nx'>googleAPI</span><span class='p'>.</span><span class='nx'>update</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;delete&#39;</span><span class='o'>:</span>
      <span class='nx'>googleAPI</span><span class='p'>.</span><span class='nx'>destroy</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>
      <span class='c1'>// The model value is a collection in this case</span>
      <span class='nx'>googleAPI</span><span class='p'>.</span><span class='nx'>list</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>default</span><span class='o'>:</span>
      <span class='c1'>// Something probably went wrong</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;Unknown method:&#39;</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The <code>googleAPI</code> object is fictitious, but this is basically how <code>Backbone.sync</code> is usually extended &#8211; a lightweight wrapper that maps the method names and models to another API. Using a lightweight wrapper means the underlying target API can be easily used outside of a Backbone.js.</p>

<p>In our case, Google actually provides a JavaScript API &#8211; there will be a <code>gapi.client</code> object available once the Google APIs have been loaded.</p>

<h3 id='setting_up_a_google_api_account'>Setting Up A Google API Account</h3>

<p>The main page for Google&#8217;s developer documentation is at <a href='https://developers.google.com/'>developers.google.com</a>, but what we&#8217;re interested in is the <a href='https://developers.google.com/google-apps/tasks/'>Google Tasks API</a> which can be found under Application APIs.</p>

<p>Google&#8217;s Application APIs are designed to work well with both server-side scripting and client-side JavaScript. To work with the Google Tasks API you&#8217;ll need three things:</p>

<ol>
<li>A Google account (an existing one is fine)</li>

<li>Google API Console access (you may have already enabled it if you work with Google&#8217;s services)</li>

<li>An API key</li>
</ol>

<p>To set up your account to work with the Google API Console, visit <a href='https://code.google.com/apis/console/'>code.google.com/apis/console</a>. Once you&#8217;ve enabled it, scroll down to <em>Tasks API</em>:</p>

<p><img src='/images/posts/gapi-tasks.png' alt='Google Tasks API switch' /></p>

<p>Then switch the button to <em>on</em>, and accept the terms (if you agree to them). Next, click <em>API Access</em> in the left-hand navigation bar, and look under <em>Simple API Access</em> for the API key. This &#8220;browser apps&#8221; key is what we need. <em>Make a note</em> of it for later.</p>

<h3 id='oauth_20_for_clientside_applications'>OAuth 2.0 for Client-side Applications</h3>

<p>Still in the <em>API Access</em> section of the console, click the button to create an OAuth 2.0 project. Enter &#8220;bTask&#8221; (or whatever you want) for the product name, then <code>http://localhost:8080</code> for the URL. In the next dialog, make sure <code>http://</code> is selected instead of <code>https://</code>, then enter <code>localhost:8080</code> and click &#8220;Create client ID&#8221;.</p>

<p>You&#8217;ll now see a set of values under &#8220;Client ID for web applications&#8221;. The field that says &#8220;Client ID&#8221; is important &#8211; <em>make a note</em> of this one as well.</p>

<p>You should now have an API key <em>and</em> a Client ID. These will be used to load Google&#8217;s APIs and allow us to use an OAuth 2.0 service from within the browser &#8211; we won&#8217;t need to write our own server-side code to authenticate users.</p>

<h3 id='follow_along'>Follow Along</h3>

<p>If you want to check out the source from Part 1 so you can follow along, you can use Git to get the exact revision from last week:</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 2a8517e
</code></pre>
</div>
<h3 id='required_libraries'>Required Libraries</h3>

<p>Before progressing, download the following libraries to <code>app/js/lib/</code>:</p>

<ul>
<li><a href='http://underscorejs.org/underscore-min.js'>Underscore.js</a></li>

<li><a href='http://backbonejs.org/backbone-min.js'>Backbone.js</a></li>
</ul>

<p>Open <code>app/js/main.js</code> and edit the <code>shim</code> property under <code>requirejs.config</code> to load Underscore.js and Backbone.js:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>requirejs</span><span class='p'>.</span><span class='nx'>config</span><span class='p'>({</span>
  <span class='nx'>baseUrl</span><span class='o'>:</span> <span class='s1'>&#39;js&#39;</span><span class='p'>,</span>

  <span class='nx'>paths</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='p'>},</span>

  <span class='nx'>shim</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s1'>&#39;lib/underscore-min&#39;</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>exports</span><span class='o'>:</span> <span class='s1'>&#39;_&#39;</span>
    <span class='p'>},</span>
    <span class='s1'>&#39;lib/backbone-min&#39;</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>deps</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;lib/underscore-min&#39;</span><span class='p'>]</span>
    <span class='p'>,</span> <span class='nx'>exports</span><span class='o'>:</span> <span class='s1'>&#39;Backbone&#39;</span>
    <span class='p'>},</span>
    <span class='s1'>&#39;app&#39;</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>deps</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;lib/underscore-min&#39;</span><span class='p'>,</span> <span class='s1'>&#39;lib/backbone-min&#39;</span><span class='p'>]</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='nx'>require</span><span class='p'>([</span>
  <span class='s1'>&#39;app&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>App</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nb'>window</span><span class='p'>.</span><span class='nx'>bTask</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>App</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This looks weird, but remember we&#8217;re using <a href='http://requirejs.org/'>RequireJS</a> to load scripts as modules. RequireJS &#8220;shims&#8221; allow dependencies to be expressed for libraries that aren&#8217;t implemented using AMD.</p>

<h3 id='loading_the_tasks_api'>Loading the Tasks API</h3>

<p>The basic pattern for loading the Google Tasks API is:</p>

<ol>
<li>Load the Google API client library: <code>https://apis.google.com/js/client.js</code></li>

<li>Call <code>gapi.client.load</code> to load the &#8220;tasks&#8221; API</li>

<li>Set the API key using <code>gapi.client.setApiKey()</code></li>
</ol>

<p>To implement this, you&#8217;ll need a place to put the necessary credentials. Create a file called <code>app/js/config.js</code> and add the API key and Client ID to it:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([],</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>config</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='nx'>config</span><span class='p'>.</span><span class='nx'>apiKey</span> <span class='o'>=</span> <span class='s1'>&#39;your API key&#39;</span><span class='p'>;</span>
  <span class='nx'>config</span><span class='p'>.</span><span class='nx'>scopes</span> <span class='o'>=</span> <span class='s1'>&#39;https://www.googleapis.com/auth/tasks https://www.googleapis.com/auth/userinfo.profile&#39;</span><span class='p'>;</span>
  <span class='nx'>config</span><span class='p'>.</span><span class='nx'>clientId</span> <span class='o'>=</span> <span class='s1'>&#39;your client ID&#39;</span><span class='p'>;</span>
  <span class='k'>return</span> <span class='nx'>config</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This file can be loaded by our custom Google Tasks API/Backbone.sync implementation.</p>

<p>Now create a new file called <code>app/gapi.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;config&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>config</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>function</span> <span class='nx'>ApiManager</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>loadGapi</span><span class='p'>();</span>
  <span class='p'>}</span>

  <span class='nx'>_</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>(</span><span class='nx'>ApiManager</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Events</span><span class='p'>);</span>

  <span class='nx'>ApiManager</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>init</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='p'>};</span>

  <span class='nx'>ApiManager</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>loadGapi</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='p'>};</span>

  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

    <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>method</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>case</span> <span class='s1'>&#39;create&#39;</span><span class='o'>:</span>
      <span class='k'>break</span><span class='p'>;</span>

      <span class='k'>case</span> <span class='s1'>&#39;update&#39;</span><span class='o'>:</span>
      <span class='k'>break</span><span class='p'>;</span>

      <span class='k'>case</span> <span class='s1'>&#39;delete&#39;</span><span class='o'>:</span>
      <span class='k'>break</span><span class='p'>;</span>

      <span class='k'>case</span> <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>
      <span class='k'>break</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>};</span>

  <span class='k'>return</span> <span class='nx'>ApiManager</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This skeleton module shows the overall layout of our Google Tasks API loader and <code>Backbone.sync</code> implementation. The <code>ApiManager</code> is a standard constructor, and I&#8217;ve used Underscore.js to inherit from <code>Backbone.Events</code>. This code will be asynchronous, so event handling will be useful later.</p>

<p>The <code>loadGapi</code> method loads Google&#8217;s JavaScript using RequireJS. Once the <code>gapi</code> global object has been found, it will do the rest of the configuration by calling the <code>init</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>ApiManager</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>loadGapi</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>

  <span class='c1'>// Don&#39;t load gapi if it&#39;s already present</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>gapi</span> <span class='o'>!==</span> <span class='s1'>&#39;undefined&#39;</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>init</span><span class='p'>();</span>
  <span class='p'>}</span>

  <span class='nx'>require</span><span class='p'>([</span><span class='s1'>&#39;https://apis.google.com/js/client.js?onload=define&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='c1'>// Poll until gapi is ready</span>
    <span class='kd'>function</span> <span class='nx'>checkGAPI</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>gapi</span> <span class='o'>&amp;&amp;</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>self</span><span class='p'>.</span><span class='nx'>init</span><span class='p'>();</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='nx'>setTimeout</span><span class='p'>(</span><span class='nx'>checkGAPI</span><span class='p'>,</span> <span class='mi'>100</span><span class='p'>);</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
    
    <span class='nx'>checkGAPI</span><span class='p'>();</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>All the <code>init</code> method needs to do is load the Tasks API with <code>gapi.client.load</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>ApiManager</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>init</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>

  <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='s1'>&#39;tasks&#39;</span><span class='p'>,</span> <span class='s1'>&#39;v1&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='cm'>/* Loaded */</span> <span class='p'>});</span>

  <span class='kd'>function</span> <span class='nx'>handleClientLoad</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>setApiKey</span><span class='p'>(</span><span class='nx'>config</span><span class='p'>.</span><span class='nx'>apiKey</span><span class='p'>);</span>
    <span class='nb'>window</span><span class='p'>.</span><span class='nx'>setTimeout</span><span class='p'>(</span><span class='nx'>checkAuth</span><span class='p'>,</span> <span class='mi'>100</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='kd'>function</span> <span class='nx'>checkAuth</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>auth</span><span class='p'>.</span><span class='nx'>authorize</span><span class='p'>({</span> <span class='nx'>client_id</span><span class='o'>:</span> <span class='nx'>config</span><span class='p'>.</span><span class='nx'>clientId</span><span class='p'>,</span> <span class='nx'>scope</span><span class='o'>:</span> <span class='nx'>config</span><span class='p'>.</span><span class='nx'>scopes</span><span class='p'>,</span> <span class='nx'>immediate</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>},</span> <span class='nx'>handleAuthResult</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='kd'>function</span> <span class='nx'>handleAuthResult</span><span class='p'>(</span><span class='nx'>authResult</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='p'>}</span>

  <span class='nx'>handleClientLoad</span><span class='p'>();</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The <code>config</code> variable was one of the dependencies for this file, and contains the credentials required by Google&#8217;s API.</p>

<h3 id='loading_the_api_manager'>Loading the API Manager</h3>

<p>Now open <code>app/js/app.js</code> and make it depend on <code>gapi</code>, then create an instance of <code>ApiManager</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;gapi&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>ApiManager</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>App</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>connectGapi</span><span class='p'>();</span>
  <span class='p'>};</span>

  <span class='nx'>App</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
    <span class='nx'>connectGapi</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ApiManager</span><span class='p'>();</span>
    <span class='p'>}</span>
  <span class='p'>};</span>

  <span class='k'>return</span> <span class='nx'>App</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>If you want to check this works by running the tests, you&#8217;ll need to change <code>test/setup.js</code> to flag <code>gapi</code> as a global:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>chai</span><span class='p'>.</span><span class='nx'>assert</span><span class='p'>;</span>

<span class='nx'>mocha</span><span class='p'>.</span><span class='nx'>setup</span><span class='p'>({</span>
  <span class='nx'>ui</span><span class='o'>:</span> <span class='s1'>&#39;tdd&#39;</span>
<span class='p'>,</span> <span class='nx'>globals</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;bTask&#39;</span><span class='p'>,</span> <span class='s1'>&#39;gapi&#39;</span><span class='p'>,</span> <span class='s1'>&#39;___jsl&#39;</span><span class='p'>]</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>However, I don&#8217;t intend to load the API remotely during testing &#8211; this will effectively be mocked. I&#8217;ll come onto that in a later tutorial.</p>

<h3 id='results'>Results</h3>

<p><img src='/images/posts/gapi-loaded.png' alt='gapi loaded' /></p>

<p>If you run the app or tests and open a JavaScript console, a <code>gapi</code> global object should be available. Using Google&#8217;s APIs with RequireJS and Backbone.js seems like a lot of work, but most of this stuff is effectively just configuration, and once it&#8217;s done it should work solidly enough, allowing you to focus on the app design and development side of things.</p>

<h3 id='full_source_code'>Full Source Code</h3>

<p><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/9d09a66b1f722ebf80198a8db76dd32a7b4a6923'>Commit 9d09a6</a>.</p>

<h3 id='references'>References</h3>

<ul>
<li><a href='https://developers.google.com/accounts/docs/OAuth2UserAgent'>Using OAuth 2.0 for Client-side Applications</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/05/node-roundup">Node Roundup: pkgcloud, rewire, ssh2</a></h2>
      <div class="meta">
        <span class="date">05 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/05/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#ssh">ssh</a>
          
            <a href="/tags.html#cloud">cloud</a>
          
            <a href="/tags.html#testing">testing</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='pkgcloud'>pkgcloud</h3>

<p><a href='http://blog.nodejitsu.com/introducing-pkgcloud'>pkgcloud</a> (GitHub: <a href='https://github.com/nodejitsu/pkgcloud'>nodejitsu / pkgcloud</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/pkgcloud'>pkgcloud</a>) from Nodejitsu is a module for scripting interactions with cloud service providers. It supports various services from Joyent, Microsoft, Rackspace, and several database providers like MongoHQ and RedisToGo. The authors have attempted to unify the vocabulary used by each provider &#8211; for example, pkgcloud uses the term &#8216;Server&#8217; to refer to Joyent&#8217;s &#8220;machines&#8221; and Amazon&#8217;s &#8220;instances&#8221;.</p>

<p>Services can be introspected and resources can be fetched. The API is naturally asynchronous, with callback arguments using the standard error-first pattern.</p>

<p>The roadmap promises support for more services in the future, including CDN and DNS.</p>

<h3 id='rewire'>rewire</h3>

<p><a href='https://github.com/jhnns/rewire'>rewire</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/rewire'>rewire</a> by Johannes Ewald is a <a href='http://en.wikipedia.org/wiki/Dependency_injection'>dependency injection</a> implementation that can be used to inject mocks into other modules and access private variables.</p>

<p>As an example, consider a module within your project that uses the standard <code>fs</code> module to read a file. When writing tests for this module, it would be entirely possible to use rewire to modify the <code>fs</code> module to mock the <code>readFile</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>rewire</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;rewire&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>exampleModule</span> <span class='o'>=</span> <span class='nx'>rewire</span><span class='p'>(</span><span class='s1'>&#39;./exampleModule&#39;</span><span class='p'>)</span>
  <span class='p'>;</span>

<span class='nx'>exampleModule</span><span class='p'>.</span><span class='nx'>__set__</span><span class='p'>(</span><span class='s1'>&#39;fs&#39;</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>readFile</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>path</span><span class='p'>,</span> <span class='nx'>encoding</span><span class='p'>,</span> <span class='nx'>cb</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>cb</span><span class='p'>(</span><span class='kc'>null</span><span class='p'>,</span> <span class='s1'>&#39;Success!&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='c1'>// Tests would follow...</span>
</code></pre>
</div>
<p>Notice that <code>rewire</code> was used instead of <code>require</code> &#8211; rewire itself works by appending special getters and setters to modules rather than using an <code>eval</code>-based solution.</p>

<h3 id='ssh2'>SSH2</h3>

<p><a href='https://github.com/mscdex/ssh2'>SSH2</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/ssh2'>ssh2</a>) by Brian White is an SSH2 client written in pure JavaScript. It&#8217;s built with the standard Node modules &#8211; streams, buffers, events, and lots of prototype objects and regular expressions.</p>

<p>It supports several authentication methods, including keys, bidirectional port forwarding, execution of remote commands, interactive sessions, and SFTP. Brian has provided some detailed examples of how to use the library&#8217;s event-based API.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/04/jquery-roundup">jQuery Roundup: jquery.snipe, Photobooth.js, jHERE</a></h2>
      <div class="meta">
        <span class="date">04 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/04/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#images">images</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#maps">maps</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquerysnipe'>jquery.snipe</h3>
<div class='image'>
  <img src='/images/posts/jquery-snipe.png' alt='' />
  <small>jquery.snipe showing two images, one black and white.</small>
</div>
<p><a href='http://rayfranco.github.com/jquery.snipe/'>jquery.snipe</a> (GitHub: <a href='https://github.com/RayFranco/jquery.snipe'>RayFranco / jquery.snipe</a>, License: <em>Apache 2.0</em>, Component: <code>RayFranco/jquery.snipe</code>) by Franco Bouly shows a pleasing lens effect over images that follows the mouse. The &#8220;zoom&#8221; image is separate, so effects can be created &#8211; Franco&#8217;s examples have black and white images with a colour image for the zoom.</p>

<p>Note that Franco&#8217;s example image is slightly risqu√© &#8211; it&#8217;s perfectly safe for work in the DailyJS office but it might not be elsewhere.</p>

<h3 id='photoboothjs'>Photobooth.js</h3>

<p><a href='http://wolframhempel.github.com/photobooth-js/'>Photobooth.js</a> (GitHub: <a href='https://github.com/WolframHempel/photobooth-js'>WolframHempel / photobooth-js</a>, License: <em>BSD</em>) by Wolfram Hempel is an API for working with webcams. It currently works in recent versions of Chrome, Firefox, and Opera &#8211; browsers that support <code>navigator.getUserMedia</code>. It can be used like a class or through jQuery. It supports hue, saturation, and brightness adjustments and image resizing.</p>

<h3 id='jhere'>jHERE</h3>
<div class='image'>
  <img src='/images/posts/jhere-kml.png' alt='' />
  <small>jHERE displaying a route using KML.</small>
</div>
<p><a href='http://jhere.net/'>jHERE</a> (GitHub: <a href='https://github.com/mmarcon/jhere'>mmarcon / jhere</a>, License: <em>MIT</em>) by Massimiliano Marcon is a jQuery and Zepto API for working with maps. It supports markers, KML (Keyhole Markup Language), and heatmaps.</p>

<p>The map service used is <a href='http://developer.here.net/'>Here</a> from Nokia.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/03/js101-deep-equal">JS101: Deep Equal</a></h2>
      <div class="meta">
        <span class="date">03 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/03/js101-deep-equal/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
            <a href="/tags.html#testing">testing</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Back in <a href='http://dailyjs.com/2012/08/27/equality/'>JS101: Equality</a> I wrote about the difference between <code>==</code> and <code>===</code>. This is one area of the language that quite clearly causes issues for beginners. In addition, there is another equality concept that can come in handy when writing tests: deep equal. It also illustrates some of the underlying mechanics of the language. As an intermediate JavaScript developer, you should have at least a passing familiarity with <code>deepEqual</code> and how it works.</p>

<h3 id='unit_testing10'>Unit Testing/1.0</h3>

<p>Deep equality is defined in <a href='http://wiki.commonjs.org/wiki/Unit_Testing/1.0'>CommonJS Unit Testing/1.0</a>, under subsection 7. The algorithm assumes two arguments: <code>expected</code> and <code>actual</code>. The purpose of the algorithm is to determine if the values are equivalent. It supports both <a href='http://dailyjs.com/2012/05/07/js101-object'>primitive values</a> and objects.</p>

<ol>
<li>Strict equals (<code>===</code>) means the values are equivalent</li>

<li>Compare dates using the <code>getTime</code> method</li>

<li>If values are not objects, compare with <code>==</code></li>

<li>Otherwise, compare each object&#8217;s size, keys, and values</li>
</ol>

<p>The fourth point is probably what you would assume deep equality actually means. The other stages reveal things about the way JavaScript works &#8211; the third stage means values that are not objects can easily be compared with <code>==</code> because they&#8217;re primitive values (Undefined, Null, Boolean, Number, or String).</p>

<p>The second step works because <code>getTime</code> is the most convenient way of comparing dates:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nb'>Date</span><span class='p'>(</span><span class='mi'>2012</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nb'>Date</span><span class='p'>(</span><span class='mi'>2012</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>)</span>
  <span class='p'>;</span>

<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='nx'>a</span> <span class='o'>!==</span> <span class='nx'>b</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='nx'>a</span> <span class='o'>!=</span> <span class='nx'>b</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>.</span><span class='nx'>getTime</span><span class='p'>()</span> <span class='o'>==</span> <span class='nx'>b</span><span class='p'>.</span><span class='nx'>getTime</span><span class='p'>());</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>deepEqual</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>);</span>
</code></pre>
</div>
<p>This script can be run in Node, or with a suitable CommonJS assertion library. It illustrates the point that dates are not considered equal using the equality or strict equality operators &#8211; the easiest way to compare them is with <code>getTime</code>.</p>

<p>Object comparison implies <a href='http://en.wikipedia.org/wiki/Recursion_\(computer_science\'>recursion</a>), as some values may also be objects. Also, key comparison isn&#8217;t as simple as it might seem: <a href='https://github.com/joyent/node/blob/e4cef1a0833e6d677298600e205a142d15639bf2/lib/assert.js#L221-L233'>real implementations sort keys, compare length, then compare each value</a>.</p>

<h3 id='bugs'>Bugs</h3>

<p>Bugs have been found in the Unit Testing/1.0 specification since it originally appeared. Two have been flagged up on the <a href='http://wiki.commonjs.org/wiki/Unit_Testing'>main Unit Testing page</a>. The Node <code>assert</code> module addresses these points. For example, <a href='https://github.com/joyent/node/blob/e4cef1a0833e6d677298600e205a142d15639bf2/lib/assert.js#L174-L179'>regular expressions are a special case in the <code>deepEqual</code> implementation</a>:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>return</span> <span class='nx'>actual</span><span class='p'>.</span><span class='nx'>source</span> <span class='o'>===</span> <span class='nx'>expected</span><span class='p'>.</span><span class='nx'>source</span> <span class='o'>&amp;&amp;</span>
       <span class='nx'>actual</span><span class='p'>.</span><span class='nx'>global</span> <span class='o'>===</span> <span class='nx'>expected</span><span class='p'>.</span><span class='nx'>global</span> <span class='o'>&amp;&amp;</span>
       <span class='nx'>actual</span><span class='p'>.</span><span class='nx'>multiline</span> <span class='o'>===</span> <span class='nx'>expected</span><span class='p'>.</span><span class='nx'>multiline</span> <span class='o'>&amp;&amp;</span>
       <span class='nx'>actual</span><span class='p'>.</span><span class='nx'>lastIndex</span> <span class='o'>===</span> <span class='nx'>expected</span><span class='p'>.</span><span class='nx'>lastIndex</span> <span class='o'>&amp;&amp;</span>
       <span class='nx'>actual</span><span class='p'>.</span><span class='nx'>ignoreCase</span> <span class='o'>===</span> <span class='nx'>expected</span><span class='p'>.</span><span class='nx'>ignoreCase</span><span class='p'>;</span>
</code></pre>
</div>
<p>The <code>source</code> property has a string that represents the original regular expression, and then each flag has to be compared.</p>

<h3 id='object_comparison'>Object Comparison</h3>

<p>The next time you&#8217;re writing a test, or even just comparing objects, remember that <code>==</code> will only work for &#8220;shallow&#8221; comparisons. Testing other values like arrays, dates, regular expressions, and objects requires a little bit more effort.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/30/viewport-grunt-sauce-fastclick">Viewport Component, grunt-saucelabs, FastClick</a></h2>
      <div class="meta">
        <span class="date">30 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/30/viewport-grunt-sauce-fastclick/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#grunt">grunt</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
            <a href="/tags.html#components">components</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='viewport_component'>Viewport Component</h3>

<p><a href='https://github.com/pazguille/viewport'>Viewport Component</a> (License: <em>MIT</em>, component: <code>pazguille/viewport</code>) by Guille Paz can be used to get information about a browser&#8217;s viewport. This includes the width and height as well as the vertical and horizontal scroll positions.</p>

<p>It also emits events for scrolling, resizing, and when the top or bottom has been reached during scrolling.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Viewport</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;viewport&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>viewport</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Viewport</span><span class='p'>()</span>
  <span class='p'>;</span>

<span class='nx'>viewport</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;scroll&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>scrollY</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>viewport</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;top&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Top&#39;</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>viewport</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;bottom&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Bottom&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='gruntsaucelabs'>grunt-saucelabs</h3>

<p><a href='https://github.com/axemclion/grunt-saucelabs'>grunt-saucelabs</a> (License: <em>MIT</em>, npm: <code>grunt-saucelabs</code>) by Parashuram N (axemclion) is a Grunt task for qunit and jasmine tests using <a href='https://saucelabs.com/'>Sauce Labs&#8217; Cloudified Browsers</a>. This is similar to the built-in <a href='https://github.com/gruntjs/grunt/blob/master/docs/task_qunit.md'>qunit Grunt task</a>, but uses the remote service provided by Sauce Labs instead.</p>

<p><a href='https://saucelabs.com/docs/sauce-connect'>Sauce Connect</a> can be used to create a tunnel for testing pages that aren&#8217;t accessible on the Internet.</p>

<h3 id='fastclick'>FastClick</h3>

<p><a href='https://github.com/ftlabs/fastclick'>FastClick</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/fastclick'>fastclick</a>, component: <code>ftlabs/fastclick</code>) from the Financial Times helps remove the delay in mobile browsers that occurs between a tap and the trigger of <code>click</code> events.</p>

<p>The authors have included some simple tests, documentation, and examples. The project is extremely well packaged, including support for npm, component, AMD, and Google Closure Compiler&#8217;s <code>ADVANCED_OPTIMIZATIONS</code>.</p>

<p>Internally, FastClick works by binding events to a &#8220;layer&#8221; and binding several touch event handlers. These handlers use internal properties to determine how elements are being interacted with. If certain conditions are met, then a <code>click</code> event will be generated, and several attributes will be added to the event to allow further tracking.</p>

<p>The event handlers can be easily removed using <code>FastClick.prototype.destroy</code>, and the project has a wide range of special cases for handling divergent behaviour in iOS and Android.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/29/backbone-tutorial-1">Backbone.js Tutorial: Build Environment</a></h2>
      <div class="meta">
        <span class="date">29 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/29/backbone-tutorial-1/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'><strong>Part 1: Build Environment</strong></a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<p>This new Backbone.js tutorial series will walk you through building a single page web application that has a customised <a href='http://backbonejs.org/#Sync'>Backbone.sync</a> implementation. I started building the application that these tutorials are based on back in August, and it&#8217;s been running smoothly for a few months now so I thought it was safe enough to unleash it.</p>
<div class='image'>
  <img src='/images/posts/backbone-tutorial-todo.png' alt='' />
  <small>Gmail to-do lists: not cool enough!</small>
</div>
<p>The application itself was built to solve a need of mine: a more usable Google Mail to-do list. The Gmail-based interface rubs me the wrong way to put it mildly, so I wrote a <code>Backbone.sync</code> method that works with Google&#8217;s APIs and stuck a little <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a> interface on top. As part of these tutorials I&#8217;ll also make a few suggestions on how to customise Bootstrap &#8211; there&#8217;s no excuse for releasing vanilla Bootstrap sites!</p>

<p>The app we&#8217;ll be making won&#8217;t feature <em>everything</em> that Google&#8217;s to-do lists support: I haven&#8217;t yet added support for indenting items for example. However, it serves my needs very well so hopefully it&#8217;ll be something you&#8217;ll actually want to use.</p>

<h3 id='roadmap'>Roadmap</h3>

<p>Over the next few weeks I&#8217;ll cover the following topics:</p>

<ul>
<li>Creating a new Node project for building the single page app</li>

<li>Using RequireJS with Backbone.js</li>

<li>Google&#8217;s APIs</li>

<li>Writing and running tests</li>

<li>Creating the Backbone.js app itself</li>

<li>Techniques for customising Bootstrap</li>

<li>Deploying to Dropbox, Amazon S3, and potentially other services</li>
</ul>

<h3 id='creating_a_build_environment'>Creating a Build Environment</h3>

<p>If your focus is on client-side scripting, then I think this will be useful to you. Our goal is to create a development environment that can do the following:</p>

<ul>
<li>Allow the client-side code to be written as separate files</li>

<li>Combine separate files into something suitable for deployment</li>

<li>Run the app locally using separate files (to make development and debugging easier)</li>

<li>Manage supporting Node modules</li>

<li>Run tests</li>

<li>Support Unix and Windows</li>
</ul>

<p>To do this we&#8217;ll need a few tools and libraries:</p>

<ul>
<li><a href='http://nodejs.org/'>Node</a></li>

<li><a href='http://requirejs.org/'>RequireJS</a></li>

<li><a href='http://gruntjs.com/'>Grunt</a></li>
</ul>

<p>Make sure your system has Node installed. The easiest way to install it is by using one of the <a href='http://nodejs.org/download/'>Node packages for your system</a>.</p>

<h3 id='step_1_installing_the_node_modules'>Step 1: Installing the Node Modules</h3>

<p>Create a new directory for this project, and create a new file inside it called <code>package.json</code> that contains this JSON:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>
  <span class='s2'>&quot;name&quot;</span><span class='o'>:</span> <span class='s2'>&quot;btask&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;version&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.0.1&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;private&quot;</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>,</span> <span class='s2'>&quot;dependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;requirejs&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;connect&quot;</span><span class='o'>:</span> <span class='s2'>&quot;2.7.0&quot;</span>
  <span class='p'>}</span>
<span class='p'>,</span> <span class='s2'>&quot;devDependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;mocha&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;chai&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;grunt&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;grunt-exec&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>}</span>
<span class='p'>,</span> <span class='s2'>&quot;scripts&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;grunt&quot;</span><span class='o'>:</span> <span class='s2'>&quot;node_modules/.bin/grunt&quot;</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Run <code>npm install</code>. These modules along with their dependencies will be installed in <code>./node_modules</code>.</p>

<p>The <code>private</code> property prevents accidentally publicly releasing this module. This is useful for closed source commercial projects, or projects that aren&#8217;t suitable for release through npm.</p>

<p>Even if you&#8217;re not a server-side developer, managing dependencies with npm is useful because it makes it easier for other developers to work on your project. When a new developer joins your project, they can just type <code>npm install</code> instead of figuring out what downloads to grab.</p>

<h3 id='step_2_local_web_server'>Step 2: Local Web Server</h3>

<p>Create a directory called <code>app</code> and a file called <code>app/index.html</code>:</p>
<div class='highlight'><pre><code class='html'><span class='cp'>&lt;!DOCTYPE html&gt;</span>
<span class='nt'>&lt;head&gt;</span>
  <span class='nt'>&lt;meta</span> <span class='na'>charset=</span><span class='s'>&quot;utf-8&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;title&gt;</span>bTask<span class='nt'>&lt;/title&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/javascript&quot;</span> <span class='na'>src=</span><span class='s'>&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/javascript&quot;</span> <span class='na'>src=</span><span class='s'>&quot;js/lib/require.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
<span class='nt'>&lt;/head&gt;</span>
<span class='nt'>&lt;body&gt;</span>
<span class='nt'>&lt;/body&gt;</span>
<span class='nt'>&lt;/html&gt;</span>
</code></pre>
</div>
<p>Once you&#8217;ve done that, create a file called <code>server.js</code> in the top-level directory:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>connect</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;connect&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>http</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;http&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>app</span>
  <span class='p'>;</span>

<span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>connect</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>connect</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='s1'>&#39;app&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;/js/lib/&#39;</span><span class='p'>,</span> <span class='nx'>connect</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='s1'>&#39;node_modules/requirejs/&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;/node_modules&#39;</span><span class='p'>,</span> <span class='nx'>connect</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='s1'>&#39;node_modules&#39;</span><span class='p'>))</span>
  <span class='p'>;</span>

<span class='nx'>http</span><span class='p'>.</span><span class='nx'>createServer</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>).</span><span class='nx'>listen</span><span class='p'>(</span><span class='mi'>8080</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Running on http://localhost:8080&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This file uses the Connect middleware framework to act as a small web server for serving the files in <code>app/</code>. You can add new paths to it by copying the <code>.use(connect.static(&#39;app&#39;))</code> line and changing <code>app</code> to something else.</p>

<p>Notice how I&#8217;ve mapped the web path for <code>/js/lib/</code> to <code>node_modules/requirejs/</code> on the file system &#8211; rather than copying RequireJS to where the client-side scripts are stored we can map it using Connect. Later on the build scripts will copy <code>node_modules/requirejs/require.js</code> to <code>build/js/lib</code> so the <code>index.html</code> file won&#8217;t have to change. This will enable the project to run on a suitable web server, or a hosting service like Amazon S3 for static sites.</p>

<p>To run this Node server, type <code>npm start</code> (or <code>node server.js</code>) and visit <code>http://localhost:8080</code>. It should display an empty page with no client-side errors.</p>

<h3 id='step_3_configuring_requirejs'>Step 3: Configuring RequireJS</h3>

<p>This project will consist of <a href='https://github.com/amdjs/amdjs-api/wiki/AMD'>modules written in the AMD format</a>. Each Backbone collection, model, view, and so on will exist in its own file, with a list of dependencies so RequireJS can load them as needed.</p>

<p>RequireJS projects that work this way are usually structured around a &#8220;main&#8221; file that loads the necessary dependencies to boot up the app. Create a file called <code>app/js/main.js</code> that contains the following skeleton RequireJS config:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>requirejs</span><span class='p'>.</span><span class='nx'>config</span><span class='p'>({</span>
  <span class='nx'>baseUrl</span><span class='o'>:</span> <span class='s1'>&#39;js&#39;</span><span class='p'>,</span>

  <span class='nx'>paths</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='p'>},</span>

  <span class='nx'>shim</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='nx'>require</span><span class='p'>([</span><span class='s1'>&#39;app&#39;</span><span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>App</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nb'>window</span><span class='p'>.</span><span class='nx'>bTask</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>App</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The part that reads <code>require([&#39;app&#39;]</code> will load <code>app/js/app.js</code>. Create this file with the following contents:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([],</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>App</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='p'>};</span>

  <span class='nx'>App</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='p'>};</span>

  <span class='k'>return</span> <span class='nx'>App</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This is a module written in the AMD format &#8211; the <code>define</code> function is provided by RequireJS and in future will contain all of the internal dependencies for the project.</p>

<p>To finish off this step, the <code>main.js</code> should be loaded. Add some suitable script tags near the bottom of <code>app/index.html</code>, before the <code>&lt;/body&gt;</code> tag.</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/javascript&quot;</span> <span class='na'>src=</span><span class='s'>&quot;js/main.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
</code></pre>
</div>
<p>If you refresh <code>http://localhost:8080</code> in your browser and open the JavaScript console, you should see that <code>bTask</code> has been instantiated.</p>

<p><img src='/images/posts/backbone-tutorial-window.png' alt='window.bTask' /></p>

<h3 id='step_4_testing'>Step 4: Testing</h3>

<p>Everything you&#8217;ve learned in the previous three steps can be reused to create a unit testing suite. <a href='http://visionmedia.github.com/mocha/'>Mocha</a> has already been installed by npm, so let&#8217;s create a suitable test harness.</p>

<p>Create a new directory called <code>test/</code> (next to the &#8216;app/&#8217; directory) that contains a file called <code>index.html</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;html&gt;</span>
<span class='nt'>&lt;head&gt;</span>
  <span class='nt'>&lt;meta</span> <span class='na'>charset=</span><span class='s'>&quot;utf-8&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;title&gt;</span>bTask Tests<span class='nt'>&lt;/title&gt;</span>
  <span class='nt'>&lt;link</span> <span class='na'>rel=</span><span class='s'>&quot;stylesheet&quot;</span> <span class='na'>href=</span><span class='s'>&quot;/node_modules/mocha/mocha.css&quot;</span> <span class='nt'>/&gt;</span>
  <span class='nt'>&lt;style&gt;</span>
<span class='nc'>.toast-message</span><span class='o'>,</span> <span class='nf'>#main</span> <span class='p'>{</span> <span class='k'>display</span><span class='o'>:</span> <span class='k'>none</span> <span class='p'>}</span>
  <span class='nt'>&lt;/style&gt;</span>
<span class='nt'>&lt;/head&gt;</span>
<span class='nt'>&lt;body&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;mocha&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;/node_modules/chai/chai.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;/node_modules/mocha/mocha.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;/js/lib/require.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;/js/main.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;setup.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;app.test.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>
  <span class='nt'>&lt;script&gt;</span><span class='nx'>require</span><span class='p'>([</span><span class='s1'>&#39;app&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='nx'>mocha</span><span class='p'>.</span><span class='nx'>run</span><span class='p'>();</span> <span class='p'>});</span><span class='nt'>&lt;/script&gt;</span>
<span class='nt'>&lt;/body&gt;</span>
<span class='nt'>&lt;/html&gt;</span>
</code></pre>
</div>
<p>The <code>require</code> near the end just makes sure <code>mocha.run</code> only runs when <code>/js/app.js</code> has been loaded.</p>

<p>Create another file called <code>test/setup.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>chai</span><span class='p'>.</span><span class='nx'>assert</span><span class='p'>;</span>

<span class='nx'>mocha</span><span class='p'>.</span><span class='nx'>setup</span><span class='p'>({</span>
  <span class='nx'>ui</span><span class='o'>:</span> <span class='s1'>&#39;tdd&#39;</span>
<span class='p'>,</span> <span class='nx'>globals</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;bTask&#39;</span><span class='p'>]</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This file makes <a href='http://chaijs.com/api/assert/'>Chai&#8217;s assertions</a> available as <code>assert</code>, which is how I usually write my tests. I&#8217;ve also told Mocha that <code>bTask</code> is an expected global variable.</p>

<p>With all this in place we can write a quick test. This file goes in <code>test/app.test.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>suite</span><span class='p'>(</span><span class='s1'>&#39;App&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;Should be present&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>assert</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='nb'>window</span><span class='p'>.</span><span class='nx'>bTask</span><span class='p'>);</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>All it does is checks <code>window.bTask</code> has been defined &#8211; it proves RequireJS has loaded the app.</p>

<p>Finally we need to update where Connect looks for files to serve. Modify &#8216;server.js&#8217; to look like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>connect</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;connect&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>http</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;http&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>app</span>
  <span class='p'>;</span>

<span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>connect</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>connect</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='s1'>&#39;app&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;/js/lib/&#39;</span><span class='p'>,</span> <span class='nx'>connect</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='s1'>&#39;node_modules/requirejs/&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;/node_modules&#39;</span><span class='p'>,</span> <span class='nx'>connect</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='s1'>&#39;node_modules&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;/test&#39;</span><span class='p'>,</span> <span class='nx'>connect</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='s1'>&#39;test/&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;/test&#39;</span><span class='p'>,</span> <span class='nx'>connect</span><span class='p'>.</span><span class='kr'>static</span><span class='p'>(</span><span class='s1'>&#39;app&#39;</span><span class='p'>))</span>
  <span class='p'>;</span>

<span class='nx'>http</span><span class='p'>.</span><span class='nx'>createServer</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>).</span><span class='nx'>listen</span><span class='p'>(</span><span class='mi'>8080</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Running on http://localhost:8080&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Restart the web server (from step 2), and visit <code>http://localhost:8080/test/</code> (the last slash is important). Mocha should display that a single test has passed.</p>

<h3 id='step_5_making_builds'>Step 5: Making Builds</h3>

<p>Create a file called <code>grunt.js</code> for our &#8220;gruntfile&#8221;:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>grunt</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>grunt</span><span class='p'>.</span><span class='nx'>loadNpmTasks</span><span class='p'>(</span><span class='s1'>&#39;grunt-exec&#39;</span><span class='p'>);</span>

  <span class='nx'>grunt</span><span class='p'>.</span><span class='nx'>initConfig</span><span class='p'>({</span>
    <span class='nx'>exec</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>build</span><span class='o'>:</span> <span class='p'>{</span>
        <span class='nx'>command</span><span class='o'>:</span> <span class='s1'>&#39;node node_modules/requirejs/bin/r.js -o require-config.js&#39;</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='nx'>grunt</span><span class='p'>.</span><span class='nx'>registerTask</span><span class='p'>(</span><span class='s1'>&#39;copy-require&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>grunt</span><span class='p'>.</span><span class='nx'>file</span><span class='p'>.</span><span class='nx'>mkdir</span><span class='p'>(</span><span class='s1'>&#39;build/js/lib&#39;</span><span class='p'>);</span>
    <span class='nx'>grunt</span><span class='p'>.</span><span class='nx'>file</span><span class='p'>.</span><span class='nx'>copy</span><span class='p'>(</span><span class='s1'>&#39;node_modules/requirejs/require.js&#39;</span><span class='p'>,</span> <span class='s1'>&#39;build/js/lib/require.js&#39;</span><span class='p'>);</span>
  <span class='p'>});</span>

  <span class='nx'>grunt</span><span class='p'>.</span><span class='nx'>registerTask</span><span class='p'>(</span><span class='s1'>&#39;default&#39;</span><span class='p'>,</span> <span class='s1'>&#39;exec copy-require&#39;</span><span class='p'>);</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This file uses the <a href='https://github.com/jharding/grunt-exec'>grunt-exec</a> plugin by Jake Harding to run the RequireJS command that generates a build of everything in the <code>app/</code> directory. To tell RequireJS what to build, create a file called <code>require-config.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>({</span>
  <span class='nx'>appDir</span><span class='o'>:</span> <span class='s1'>&#39;app/&#39;</span>
<span class='p'>,</span> <span class='nx'>baseUrl</span><span class='o'>:</span> <span class='s1'>&#39;js&#39;</span>
<span class='p'>,</span> <span class='nx'>paths</span><span class='o'>:</span> <span class='p'>{}</span>
<span class='p'>,</span> <span class='nx'>dir</span><span class='o'>:</span> <span class='s1'>&#39;build/&#39;</span>
<span class='p'>,</span> <span class='nx'>modules</span><span class='o'>:</span> <span class='p'>[{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;main&#39;</span> <span class='p'>}]</span>
<span class='p'>})</span>
</code></pre>
</div>
<p>RequireJS will minimize and concatenate the necessary files. The other Grunt task copies the RequireJS client-side code to <code>build/js/lib/require.js</code>, because our local Connect server was mapping this for us. Why bother? Well, it means whenever we update RequireJS through npm the app and builds will automatically get the latest version.</p>

<p>To run Grunt, type <code>npm run-script grunt</code>. The npm command <code>run-script</code> is used to invoke scripts that have been added to the <code>package.json</code> file. The <code>package.json</code> created in step 1 contained <code>&quot;grunt&quot;: &quot;node_modules/.bin/grunt&quot;</code>, which makes this work. I prefer this to installing Grunt globally.</p>

<p>I wouldn&#8217;t usually use Grunt for my own projects because I prefer Makefiles. In fact, a Makefile for the above would be very simple. However, this makes things more awkward for Windows-based developers, so I&#8217;ve included Grunt in an effort to support Windows. Also, if you typically work as a client-side developer, you might find Grunt easier to understand than learning <a href='http://www.gnu.org/software/make/'>GNU Make</a> or writing the equivalent Node code (Node has a good file system module).</p>

<h3 id='summary'>Summary</h3>

<p>In this tutorial you&#8217;ve created a Grunt and RequireJS build environment for Backbone.js projects that use Mocha for testing. You&#8217;ve also seen how to use Connect to provide a convenient local web server.</p>

<p>This is basically how I build and manage all of my Backbone.js single page web applications. Although we haven&#8217;t written much code yet, as you&#8217;ll see over the coming weeks this approach works well for using Backbone.js and RequireJS together.</p>

<p>The code for this project can be found here: <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/2a8517e011a8e1041c7f86f8311336ffba7e85e8'>dailyjs-backbone-tutorial (2a8517)</a>.</p>

<h3 id='contributions'>Contributions</h3>

<ul>
<li><a href='https://github.com/Tobbe/dailyjs/commit/5d6fe8b73114adaa09e20889cdcd3ae1875c5eb4'>Tobbe Lundberg</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/28/node-roundup">Node Roundup: 0.8.15, JSPath, Strider</a></h2>
      <div class="meta">
        <span class="date">28 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/28/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#json">json</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_0815'>Node 0.8.15</h3>

<p><a href='http://blog.nodejs.org/2012/11/26/node-v0-8-15/'>Node 0.8.15 is out</a>, which <a href='https://github.com/isaacs/npm/commits/v1.1.66'>updates npm to 1.1.66</a>, fixes a <code>net</code> and <code>tls</code> resource leak, and has some miscellaneous fixes for Windows and Unix systems.</p>

<h3 id='jspath'>JSPath</h3>

<p><a href='https://github.com/dfilatov/jspath'>JSPath</a> (License: <em>MIT/GPL</em>, npm: <a href='https://npmjs.org/package/jspath'>jspath</a>) by Filatov Dmitry is a DSL for working with JSON. The DSL can be used to select values, and looks a bit like CSS selectors:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// var doc = { &quot;books&quot; : [ { &quot;id&quot; : 1, &quot;title&quot; : &quot;Clean Code&quot;, &quot;author&quot; : { &quot;name&quot; : &quot;Robert C. Martin&quot; } ...</span>

<span class='nx'>JSPath</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='s1'>&#39;.books.author&#39;</span><span class='p'>,</span> <span class='nx'>doc</span><span class='p'>);</span>
<span class='c1'>// [{ name : &#39;Robert C. Martin&#39; }, ...</span>
</code></pre>
</div>
<p>It can also be used to apply conditional expressions, like this: <code>.books{.author.name === &#39;Robert C. Martin&#39;}.title</code>. Other comparison operators are also supported like <code>&gt;=</code> and <code>!==</code>. Logical operators can be used to combine predicates, and the API also supports substitution.</p>

<p>The author has included unit tests, and build scripts for generating a browser-friendly version.</p>

<h3 id='strider'>Strider</h3>

<p><a href='http://strider-cd.com/'>Strider</a> (GitHub: <a href='https://github.com/Strider-CD/strider'>Strider-CD / strider</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/strider'>strider</a>) by Niall O&#8217;Higgins is a continuous deployment solution built with Express and MongoDB. It&#8217;s designed to be easy to deploy to Heroku, and can be used to deploy applications to your own servers. It directly supports Node and Python applications, and the author is also working on supporting Rails and JVM languages.</p>

<p>Strider integrates with GitHub, so it can display a list of your repositories and allow them to be deployed as required. It can also test projects, so it can be used for continuous integration if deployment isn&#8217;t required.</p>

<p>The documentation includes full details for installing Strider, linking a GitHub account, and then setting it up as a CI/CD server with an example project.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/27/jquery-roundup">jQuery Roundup: 1.8.3, UI 1.9.2, oolib.js</a></h2>
      <div class="meta">
        <span class="date">27 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/27/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jquery-ui">jquery-ui</a>
          
            <a href="/tags.html#oo">oo</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_183'>jQuery 1.8.3</h3>

<p><a href='http://blog.jquery.com/2012/11/13/jquery-1-8-3-released/'>jQuery 1.8.3</a> and <a href='http://blog.jquery.com/2012/11/23/jquery-color-2-1-1-released/'>jQuery Color 2.1.1</a> are out. There are a few interesting bug fixes in this release that you might want to check out:</p>

<ul>
<li><a href='http://bugs.jquery.com/ticket/12690'>#12690: Non-ASCII characters caused IE7 to fail to load jQuery on pages with a non-UTF8 encoding</a></li>

<li><a href='http://bugs.jquery.com/ticket/12357'>#12357: jQuery 1.8.0 Not parseable by XUL Runner applications</a></li>

<li><a href='http://bugs.jquery.com/ticket/12837'>#12837: All animations break after zooming a lightbox on an iPad</a></li>

<li><a href='http://bugs.jquery.com/ticket/12497'>#12497: Animations crashing stock Android 2.3.4 browser</a></li>
</ul>

<h3 id='jquery_ui_192'>jQuery UI 1.9.2</h3>

<p><a href='http://blog.jqueryui.com/2012/11/jquery-ui-1-9-2/'>jQuery UI 1.9.2</a> is out:</p>

<blockquote>
<p>This update brings bug fixes for Accordion, Autocomplete, Button, Datepicker, Dialog, Menu, Tabs, Tooltip and Widget Factory.</p>
</blockquote>

<p>The <a href='http://jqueryui.com/changelog/1.9.2/'>1.9.2 changelog</a> contains a full breakdown of the recent changes.</p>

<h3 id='oolibjs'>oolib.js</h3>

<p><a href='http://idya.github.com/oolib/'>oolib.js</a> (GitHub: <a href='https://github.com/idya/oolib'>idya / oolib</a>, License: <em>MIT</em>) by Zsolt Szloboda is a JavaScript object-oriented library that is conceptually similar to jQuery UI&#8217;s Widget Factory. It supports private methods, class inheritance, object initialisation and deinitialisation, super methods, and it&#8217;s fairly small (min: 1.6K, gz: 0.7K).</p>

<p>It looks like this in practice:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>MyClass</span> <span class='o'>=</span> <span class='nx'>oo</span><span class='p'>.</span><span class='nx'>createClass</span><span class='p'>({</span>
  <span class='nx'>_create</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>foo</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>myField</span> <span class='o'>=</span> <span class='nx'>foo</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='nx'>_myPrivateMethod</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>bar</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>myField</span> <span class='o'>+</span> <span class='nx'>bar</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='nx'>myPublicMethod</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>baz</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_myPrivateMethod</span><span class='p'>(</span><span class='nx'>baz</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>MySubClass</span> <span class='o'>=</span> <span class='nx'>oo</span><span class='p'>.</span><span class='nx'>createClass</span><span class='p'>(</span><span class='nx'>MyClass</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>_myPrivateMethod</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>bar</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>myField</span> <span class='o'>+</span> <span class='nx'>bar</span> <span class='o'>+</span> <span class='mi'>1</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/26/js101-proto">JS101: __proto__</a></h2>
      <div class="meta">
        <span class="date">26 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/26/js101-proto/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
        </span>
      </div>
      <div class="preview">
        <p>When I originally wrote about prototypes in <a href='http://dailyjs.com/2012/05/21/js101-prototype/'>JS101: Prototypes</a> a few people were confused that I didn&#8217;t mention the <code>__proto__</code> property. One reason I didn&#8217;t mention it is I was sticking to standard ECMAScript for the most part, using the <a href='http://es5.github.com/'>Annotated ECMAScript 5.1</a> site as a reference. It&#8217;s actually hard to talk about prototypes without referring to <code>__proto__</code>, though, because it serves a very specific and useful purpose.</p>

<p>Recall that objects are created using constructors:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>User</span><span class='p'>()</span> <span class='p'>{</span>
<span class='p'>}</span>

<span class='kd'>var</span> <span class='nx'>user</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>User</span><span class='p'>();</span>
</code></pre>
</div>
<p>The <code>prototype</code> property can be used to add properties to instances of <code>User</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>User</span><span class='p'>()</span> <span class='p'>{</span>
<span class='p'>}</span>

<span class='nx'>User</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>greet</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='s1'>&#39;hello&#39;</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>user</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>User</span><span class='p'>();</span>
<span class='nx'>user</span><span class='p'>.</span><span class='nx'>greet</span><span class='p'>();</span>
</code></pre>
</div>
<p>So far so good. The original constructor can be referenced using the <code>constructor</code> property on an instance:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>constructor</span><span class='p'>,</span> <span class='nx'>User</span><span class='p'>);</span>
</code></pre>
</div>
<p>However, <code>user.prototype</code> is not the same as <code>User.prototype</code>. What if we wanted to get hold of the original prototype where the <code>greet</code> method was defined based on an instance of a <code>User</code>?</p>

<p>That&#8217;s where <code>__proto__</code> comes in. Given that fact, we now know the following two statements to be true:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>constructor</span><span class='p'>,</span> <span class='nx'>User</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>__proto__</span><span class='p'>,</span> <span class='nx'>User</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
</code></pre>
</div>
<p>Unfortunately, <code>__proto__</code> doesn&#8217;t appear in ECMAScript 5 &#8211; so where does it come from? As noted by the <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/proto'>documentation on MDN</a> it&#8217;s a non-standard property. Or is it? It&#8217;s included in <a href='http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#draft_specification_for_es.next_ecma-262_edition_6'>Ecma-262 Edition 6</a>, which means whether it&#8217;s standard or not depends on the version of ECMAScript that you&#8217;re using.</p>

<p>It follows that an instance&#8217;s constructor should contain a reference to the constructor&#8217;s prototype. If this is true, then we can test it using these assertions:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>constructor</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='nx'>User</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>constructor</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='nx'>user</span><span class='p'>.</span><span class='nx'>__proto__</span><span class='p'>);</span>
</code></pre>
</div>
<p>The standards also define <a href='http://es5.github.com/#x15.2.3.2'>Object.getPrototypeOf</a> &#8211; this returns the <em>internal property</em> of an object. That means we can use it to access the constructor&#8217;s prototype:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nb'>Object</span><span class='p'>.</span><span class='nx'>getPrototypeOf</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>),</span> <span class='nx'>User</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
</code></pre>
</div>
<p>Putting all of this together gives this script which will pass in Node and Chrome (given a suitable assertion library):</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>);</span>

<span class='kd'>function</span> <span class='nx'>User</span><span class='p'>()</span> <span class='p'>{</span>
<span class='p'>}</span>

<span class='kd'>var</span> <span class='nx'>user</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>User</span><span class='p'>();</span>

<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>__proto__</span><span class='p'>,</span> <span class='nx'>User</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>constructor</span><span class='p'>,</span> <span class='nx'>User</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>constructor</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='nx'>User</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>.</span><span class='nx'>constructor</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='nx'>user</span><span class='p'>.</span><span class='nx'>__proto__</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nb'>Object</span><span class='p'>.</span><span class='nx'>getPrototypeOf</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>),</span> <span class='nx'>User</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
</code></pre>
</div>
<h3 id='internal_prototype'>Internal Prototype</h3>

<p>The confusion around <code>__proto__</code> arises because of the term <strong>internal prototype</strong>:</p>

<blockquote>
<p>All objects have an internal property called [[Prototype]]. The value of this property is either <code>null</code> or an object and is used for implementing inheritance.</p>
</blockquote>

<p>Internally there <em>has</em> to be a way to access the constructor&#8217;s prototype to correctly implement inheritance &#8211; whether or not this is available to us is another matter. Why is accessing it useful to us? In the wild you&#8217;ll occasionally see people setting an object&#8217;s <code>__proto__</code> property to make objects look like they inherit from another object. This <a href='https://github.com/joyent/node/blob/b207e24bcd168a5ca538476ee0b3b0960cdc6759/lib/assert.js'>used to be the case in Node&#8217;s assertion module</a>, but Node&#8217;s <code>util.inherits</code> method is a more idiomatic way to do it:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Compare to: assert.AssertionError.__proto__ = Error.prototype;</span>
<span class='nx'>util</span><span class='p'>.</span><span class='nx'>inherits</span><span class='p'>(</span><span class='nx'>assert</span><span class='p'>.</span><span class='nx'>AssertionError</span><span class='p'>,</span> <span class='nb'>Error</span><span class='p'>);</span>
</code></pre>
</div>
<p>This was changed in <a href='https://github.com/joyent/node/commit/9eddaebb79ff1954b7ecdb209587d7db6554580d'>assert: remove unnecessary use of __proto__</a>.</p>

<h3 id='the_constructors_prototype'>The Constructor&#8217;s Prototype</h3>

<p>The <code>User</code> example&#8217;s internal prototype is set to <code>Function.prototype</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>User</span><span class='p'>.</span><span class='nx'>__proto__</span><span class='p'>,</span> <span class='nb'>Function</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
</code></pre>
</div>
<p>If you&#8217;re about to put on your hat, pick up your briefcase, and walk right out the door: hold on a minute. You&#8217;re coming to the end of the chain &#8211; the prototype chain that is:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>User</span><span class='p'>.</span><span class='nx'>__proto__</span><span class='p'>,</span> <span class='nb'>Function</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nb'>Function</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>__proto__</span><span class='p'>,</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nb'>Object</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>__proto__</span><span class='p'>,</span> <span class='kc'>null</span><span class='p'>);</span>
</code></pre>
</div>
<p>Remember that the <code>__proto__</code> property is the <em>internal prototype</em> &#8211; this is how JavaScript&#8217;s inheritance chain is implemented. Every <code>User</code> inherits from <code>Function.prototype</code> which in turn inherits from <code>Object.prototype</code>, and <code>Object.prototype</code>&#8217;s internal prototype is <code>null</code> which allows the inheritance algorithm to know it has reached the end of the chain.</p>

<p>Therefore, adding a method to <code>Object.prototype</code> will make it available to every object. <a href='http://es5.github.com/#x15.2.4'>Properties of the Object Prototype Object</a> include <code>toString</code>, <code>valueOf</code>, and <code>hasOwnProperty</code>. That means instances of the <code>User</code> constructor in the previous example will have these methods.</p>

<h3 id='pithy_closing_remark'>Pithy Closing Remark</h3>

<p>JavaScript&#8217;s inheritance model is not class-based. Joost Diepenmaat&#8217;s post, <a href='http://joost.zeekat.nl/constructors-considered-mildly-confusing.html'>Constructors considered mildly confusing</a>, summarises this as follows:</p>

<blockquote>
<p>In a class-based object system, typically classes inherit from each other, and objects are instances of those classes. &#8230; constructors do nothing like this: in fact constructors have their own [[Prototype]] chain completely separate from the [[Prototype]] chain of objects they initialize.</p>
</blockquote>

<p>Rather than visualising JavaScript objects as &#8220;classes&#8221;, try to think in terms of two parallel lines of <em>prototype chains</em>: one for constructors, and one for initialised objects.</p>

<h3 id='references'>References</h3>

<ul>
<li><a href='https://github.com/joyent/node'>Node&#8217;s source</a></li>

<li><a href='http://es5.github.com/#x15.2.4'>Annotated ECMAScript 5.1</a></li>

<li><a href='http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#draft_specification_for_es.next_ecma-262_edition_6'>Ecma-262 Edition 6</a></li>

<li><a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/proto'>Mozilla&#8217;s <strong>proto</strong> documentation</a></li>

<li><a href='http://joost.zeekat.nl/constructors-considered-mildly-confusing.html'>Constructors considered mildly confusing</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/23/blanket-xsduration-attr">Blanket.js, xsdurationjs, attr</a></h2>
      <div class="meta">
        <span class="date">23 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/23/blanket-xsduration-attr/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#dates">dates</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='blanketjs'>Blanket.js</h3>

<p><img src='/images/posts/blanket-koans.png' alt='Blanket and QUnit' /></p>

<p><a href='http://migrii.github.com/blanket/'>Blanket.js</a> (GitHub: <a href='https://github.com/Migrii/blanket'>Migrii / blanket</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/blanket'>blanket</a>) by Alex Seville is a code coverage library tailored for Mocha and QUnit, although it should work elsewhere. Blanket wraps around code that requires coverage, and this can be done by applying a <code>data-cover</code> attribute to script tags, or by passing it a path, regular expression, or array of paths in Node.</p>

<p>It actually parses and instruments code using <a href='https://npmjs.org/package/uglify-js'>uglify-js</a>, and portions of <a href='http://esprima.org/'>Esprima</a> and James Halliday&#8217;s <a href='https://github.com/substack/node-falafel'>falafel</a> library.</p>

<p>The author has prepared an example test suite that you can run in a browser: <a href='http://migrii.github.com/blanket/examples/backbone-koans-qunit/index.html'>backbone-koans-qunit</a>. Check the &#8220;Enable coverage&#8221; box, and it will run through the test suite using Blanket.js.</p>

<h3 id='xsdurationjs'>xsdurationjs</h3>

<p><a href='https://github.com/revington/xsdurationjs'>xsdurationjs</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/xsdurationjs'>xsdurationjs</a>) by Pedro Narciso Garc√≠a Revington is an implementation of <a href='http://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes'>Adding durations to dateTimes</a> from the W3C Recommendation <em>XML Schema Part 2</em>. By passing it a <a href='http://www.w3.org/TR/xmlschema-2/#duration'>duration</a> and a date, it will return a new date by evaluating the duration expression.</p>

<p>The duration expressions are <a href='http://en.wikipedia.org/wiki/ISO_8601#Durations'>ISO 8601 durations</a> &#8211; these can be quite short like <code>P5M</code>, or contain year, month, day, and time:</p>

<blockquote>
<p>For example, &#8220;P3Y6M4DT12H30M5S&#8221; represents a duration of &#8220;three years, six months, four days, twelve hours, thirty minutes, and five seconds&#8221;.</p>
</blockquote>

<p>The project includes Vows tests that include coverage for the W3C functions (<code>fQuotient</code> and <code>modulo</code>).</p>

<h3 id='attr'>attr</h3>

<p><a href='https://github.com/weepy/attr'>attr</a> (License: <em>MIT</em>) by Jonah Fox is a <a href='https://github.com/component'>component</a> for &#8220;evented attributes with automatic dependencies.&#8221; Once an attribute has been created with <code>attr(&#39;name&#39;)</code>, it will emit events when the value changes. Convenience methods are also available for toggling boolean values and getting the last value.</p>

<p>It&#8217;s designed to be used in browsers, and comes with Mocha tests.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/22/backbone-updates">The State of Backbone.js</a></h2>
      <div class="meta">
        <span class="date">22 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/22/backbone-updates/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/backbone-banner.png' alt='Backbone.js' /></p>

<p>Looking at <a href='http://backbonejs.org/'>backbonejs.org</a> you&#8217;d be forgiven for thinking the project has stagnated somewhat. It&#8217;s currently at version 0.9.2, released back in March, 2012. So what&#8217;s going on? It turns out <em>a huge amount of work</em>! The developers have committed a slew of changes since then. The latest version and commit history is readily available in the <a href='https://github.com/documentcloud/backbone/'>master Backbone.js branch on GitHub</a>. Since March there has been consistent activity on the master branch, including community contributions. The core <a href='https://github.com/documentcloud/backbone/issues/1594'>developers are working hard on releasing 1.0</a>.</p>

<p>If you&#8217;ve been sticking with the version from the Backbone.js website (0.9.2), you&#8217;re probably wondering what&#8217;s changed between that version and the current code in the master branch. Here&#8217;s a summary of the new features and tweaks:</p>

<ul>
<li>Backbone can run without <code>$</code> being defined</li>

<li><code>Backbone.View</code> how has a <code>dispose</code> method for preventing memory leaks: <a href='https://github.com/documentcloud/backbone/pull/1461'>#1461</a></li>

<li>In <code>Backbone.View</code> objects, <code>id</code> and <code>className</code> can be functions: <a href='https://github.com/documentcloud/backbone/pull/1520'>#1520</a></li>

<li>Collections can be unsorted: <a href='https://github.com/documentcloud/backbone/pull/1342'>#1342</a></li>

<li><code>Backbone.Collection.add</code> has an optional <code>merge</code> flag for merging models with identical IDs: <a href='https://github.com/documentcloud/backbone/pull/1220'>#1220</a></li>

<li><a href='https://github.com/documentcloud/backbone/pull/1239'>Collections can now be cloned</a></li>

<li>Success callbacks now receive the original <code>options</code> object: <a href='https://github.com/documentcloud/backbone/pull/1355'>#1355</a></li>

<li><a href='https://github.com/documentcloud/backbone/commit/af30bcf3ca60c4234df099762344ff4b479260e7'>&#8216;off&#8217; is chainable when there are no events</a></li>
</ul>

<p>In addition to these changes, there are a lot of fixes, refactored internals, and documentation improvements.</p>

<p>If you&#8217;re interested in testing this against your Backbone-powered apps, then download the <a href='https://raw.github.com/documentcloud/backbone/master/backbone.js'>Backbone.js edge version</a> to try it out. I&#8217;m not sure when the next major version will be released, but I&#8217;ll be watching both the <a href='https://groups.google.com/group/backbonejs/topics'>Backbone.js Google Group</a> and GitHub repository for news.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/21/node-roundup">Node Roundup: Knockout Winners, Node for Raspberry Pi, Benchtable</a></h2>
      <div class="meta">
        <span class="date">21 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/21/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#raspberry-pi">raspberry-pi</a>
          
            <a href="/tags.html#hardware">hardware</a>
          
            <a href="/tags.html#benchmarking">benchmarking</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='nodejs_knockout_winners_announced'>Node.js Knockout Winners Announced</h3>

<p><img src='/images/posts/disasteroids.png' alt='Disasteroids' /></p>

<p><a href='http://nodeknockout.com/'>Node.js Knockout</a> had an outstanding 167 entries this year. The overall winner was <a href='http://somethingcoded.nko3.jitsu.com/'>Disasteroids</a> by <a href='http://nodeknockout.com/teams/somethingcoded'>SomethingCoded</a>. It&#8217;s an original take on several arcade classics: imagine a multiplayer version of <em>Asteroids</em> crossed with the shooting mechanics of <em>Missile Command</em>, but with projectiles that are affected by gravity.</p>

<p>The other winners are currently listed on the site, but I&#8217;ve reproduced them here to give the entrants more well-earned kudos:</p>

<ul>
<li><em>Overall Solo</em>: <a href='http://dothejoy.nko3.jitsu.com/'>HashPay</a> by <a href='http://nodeknockout.com/teams/dothejoy'>DoTheJoy</a></li>

<li><em>Innovation</em>: <a href='http://coalition-for-the-li.nko3.jitsu.com/'>Node.js Christmas Sweater</a> by <a href='http://nodeknockout.com/teams/coalition-for-the-li'>Coalition for the Liberation of Itinerant Tree-Dwellers</a></li>

<li><em>Design</em>: <a href='http://public-class.nko3.jitsu.com/'>Hex</a> by <a href='http://nodeknockout.com/teams/public-class'>Public Class</a></li>

<li><em>Utility/Fun</em>: <a href='http://watermelon-sauce.nko3.jitsu.com/'>Narwhal Knights</a> by <a href='http://nodeknockout.com/teams/watermelon-sauce'>Watermelon Sauce</a></li>

<li><em>Completeness</em>: <a href='http://comorichweb.nko3.jitsu.com/'>Asciigram</a> by <a href='http://nodeknockout.com/teams/comorichweb'>comorichweb</a></li>

<li><em>Popularity</em>: <a href='http://design-4-quality.nko3.jitsu.com/info'>Space bridge</a> by <a href='http://nodeknockout.com/teams/design-4-quality'>Design 4 Quality</a></li>
</ul>

<p>Congratulations to all the winners, and be sure to <a href='http://nodeknockout.com/entries'>browse the rest of the entries</a> for hours of fun!</p>

<h3 id='node_on_raspberry_pi'>Node on Raspberry Pi</h3>

<p><img src='/images/posts/nodepi.png' alt='Node Pi' /></p>

<p>If you&#8217;ve got a <a href='http://www.raspberrypi.org/'>Raspberry Pi</a> you probably already know it&#8217;s possible to run Node on the ARM-based tiny computer. If not then <a href='http://www.nodejs-news.com/nodejs-tech/nodejs-armv5-debian/'>Node.js Debian package for ARMv5</a> by Vincent Rabah explains how to get Node running with his custom Debian package.</p>

<p>&#8220;But the Raspberry Pi is just a cheap computer, what&#8217;s so great about it?&#8221; I hear you cry in the comments. There&#8217;s an intrinsic value to the Raspberry Pi Foundation&#8217;s efforts in making such hardware suitable for school children. No offence to Microsoft, but in a country where Office was on the curriculum for &#8220;IT&#8221; we can use any help we can get aiding the next generation of hackers and professional engineers.</p>

<h3 id='benchtable'>Benchtable</h3>

<p><img src='/images/posts/benchtable.png' alt='Benchtable' /></p>

<p>I love the command-line, it&#8217;s where I write code, DailyJS, notes, email &#8211; colourful text and ancient Unix utilities abound. But, I also like to fiddle with the way things look. For example, if I&#8217;m writing benchmarks I don&#8217;t want to just print them out in boring old monochrome text, I want them to look <em>cool</em>.</p>

<p>Ivan Zuzak&#8217;s <a href='https://github.com/izuzak/benchtable'>Benchtable</a> (License: <em>Apache 2.0</em>, npm: <a href='https://npmjs.org/package/benchtable'>benchtable</a>) is built for just such a need. It prints benchmarks in tables, making it a little bit easier to compare values visually. It&#8217;s built on <a href='https://github.com/bestiejs/benchmark.js'>Benchmark.js</a>, which is one of the most popular benchmarking modules.</p>

<p>The API is based around the <code>Benchtable</code> prototype which is based on <code>Benchmark.Suite</code>, so it can be dropped into an existing benchmarking suite without too much effort.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/20/jquery-roundup">jQuery Roundup: pickadate.js, jQuery Interdependencies, Timer.js</a></h2>
      <div class="meta">
        <span class="date">20 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/20/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#date-pickers">date-pickers</a>
          
            <a href="/tags.html#forms">forms</a>
          
            <a href="/tags.html#timers">timers</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='pickadatejs'>pickadate.js</h3>

<p><img src='/images/posts/pickadate.png' alt='pickadate.js' /></p>

<p><a href='http://amsul.github.com/pickadate.js/'>pickadate.js</a> (GitHub: <a href='https://github.com/amsul/pickadate.js'>amsul / pickadate.js</a>, License: <em>MIT</em>) by Amsul is a date picker that works with <code>type=&quot;date&quot;</code> or regular text fields, supports various types of date formatting options, and is easy to theme.</p>

<p>The <a href='http://amsul.github.com/pickadate.js/docs.htm'>pickadate.js</a> documentation explains how to use and configure the plugin. Basic usage is just <code>$(&#39;.datepicker&#39;).datepicker()</code>, given a suitable form field.</p>

<h3 id='jquery_interdependencies'>jQuery Interdependencies</h3>

<p><a href='http://miohtama.github.com/jquery-interdependencies/docs/'>jQuery Interdependencies</a> (GitHub: <a href='https://github.com/miohtama/jquery-interdependencies'>miohtama / jquery-interdependencies</a>, License: <em>MIT</em>) by Mikko Ohtamaa is a plugin for expressing relationships between form fields. Rule sets can be created that relate the value of a field to the presence of another field. The simplest example of this would be selecting &#8220;Other&#8221;, and then filling out a value in a text field.</p>

<p>It works with all standard HTML inputs, and can handle nested decision trees. There&#8217;s also some detailed documentation, <a href='http://miohtama.github.com/jquery-interdependencies/docs/#!/api'>jQuery Interdependencies documentation</a> and an <a href='http://opensourcehacker.com/2012/11/19/create-complex-form-field-showing-and-hiding-rules-with-jquery-interdependencies-library/'>introductory blog post</a> that covers the basics.</p>

<h3 id='timerjs'>Timer.js</h3>

<p>Florian Sch√§fer sent in his forked version of jQuery Chrono, <a href='https://github.com/fschaefer/Timer.js'>Timer.js</a>. It&#8217;s a periodic timer API for browsers and Node, with some convenience methods and time string expression parsing:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>timer</span><span class='p'>.</span><span class='nx'>every</span><span class='p'>(</span><span class='s1'>&#39;2 seconds&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{});</span>
<span class='nx'>timer</span><span class='p'>.</span><span class='nx'>after</span><span class='p'>(</span><span class='s1'>&#39;5 seconds&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{});</span>
</code></pre>
</div>
<p>He also sent in <a href='https://github.com/fschaefer/Lambda.js'>Lambda.js</a> which is a spin-off from Oliver Steele&#8217;s functional-javascript library. String expressions are used to concisely represent small functions, or lambdas:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>lambda</span><span class='p'>(</span><span class='s1'>&#39;x -&gt; x + 1&#39;</span><span class='p'>)(</span><span class='mi'>1</span><span class='p'>);</span> <span class='c1'>// =&gt; 2</span>
<span class='nx'>lambda</span><span class='p'>(</span><span class='s1'>&#39;x y -&gt; x + 2*y&#39;</span><span class='p'>)(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>);</span> <span class='c1'>// =&gt; 5</span>
<span class='nx'>lambda</span><span class='p'>(</span><span class='s1'>&#39;x, y -&gt; x + 2*y&#39;</span><span class='p'>)(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>);</span> <span class='c1'>// =&gt; 5</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/19/streams-part-2">Mastering Node Streams: Part 2</a></h2>
      <div class="meta">
        <span class="date">19 Nov 2012</span>
        | <span class="author">By Roly Fentanes</span>
        | <span class="comments"><a href="/2012/11/19/streams-part-2/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#streams">streams</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>Part 1: <a href='http://dailyjs.com/2012/09/10/streams/'>Mastering Node Streams</a>.</div>
<p>If you&#8217;ve ever used the <a href='https://github.com/mikeal/request'>Request</a> module, you&#8217;ve probably noticed that calling it returns a stream object synchronously. You can pipe it right away. To see what I mean, this is how you would normally pipe HTTP responses:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>http</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;http&#39;</span><span class='p'>);</span>

<span class='nx'>http</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;http://www.google.com&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>onResponse</span><span class='p'>(</span><span class='nx'>response</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>response</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>destinationStream</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Compare that example to using the Request module:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;request&#39;</span><span class='p'>);</span>

<span class='nx'>request</span><span class='p'>(</span><span class='s1'>&#39;http://www.google.com&#39;</span><span class='p'>).</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>destinationStream</span><span class='p'>);</span>
</code></pre>
</div>
<p>That&#8217;s easier to understand, shorter, and requires one less level of indentation. In this article, I&#8217;ll explain how this is done so you can make modules that work this way.</p>

<h3 id='how_to_do_it'>How to do It</h3>

<p>First, it&#8217;s vitally important to understand how the stream API works. If you haven&#8217;t done so yet, take a look at the <a href='http://nodejs.org/api/stream.html'>stream API docs</a>, I promise it&#8217;s not too long.</p>

<p>First, we&#8217;ll take a look at readable streams. Readable streams can be <code>paused()</code>d and <code>resume()</code>d. If we&#8217;re using another object to temporarily represent it while it&#8217;s not available, the reasonable thing to do would be to keep a <code>paused</code> property on this object, updated properly as <code>pause()</code> and <code>resume()</code> are called. Some readable streams also have <code>destroy()</code> and <code>setEncoding()</code>. Again, the first thing that might come to mind is to keep the properties <code>destroyed</code> and <code>encoding</code> on the temporary stream.</p>

<p>But, not all readable streams are created equal, some might have more methods or they might not have a <code>destroy()</code> method. The most reliable method I&#8217;ve found is to look at the stream&#8217;s prototype, iterate through the functions including those it inherits, and buffer all calls to them until the real stream is available. This works for a writable stream&#8217;s <code>write()</code> and <code>end()</code> methods, and for even emitter methods such as <code>on()</code>.</p>

<p>Standard stream methods don&#8217;t return anything, except for <code>write()</code> which returns <code>false</code> if the write buffer is full. In this case it will be <code>false</code> as long as the real stream is not yet available.</p>

<p>Another special case is <code>pipe()</code>. Every readable stream&#8217;s pipe method <a href='https://github.com/joyent/node/blob/master/lib/stream.js#L33' title='pipe insides'>works the same way</a>. It doesn&#8217;t need to be overwritten or queued. When <code>pipe()</code> is called, it listens for events from both the source and destination streams. It writes to the destination stream whenever <code>data</code> is emitted from the source, and it pauses and resumes the source as needed. We&#8217;re already queueing calls to methods inherited from event emitter.</p>

<p>What about emitting an event before the real source stream is available? You couldn&#8217;t do this if you queued calls to <code>emit()</code>. The events would fire only after the real stream becomes available. If you&#8217;re a perfectionist, you would want to consider this very rare case and come up with a solution.</p>

<h3 id='introducing_streamify'>Introducing Streamify</h3>

<p><a href='https://github.com/fent/node-streamify'>Streamify</a> does all of this for you, so you don&#8217;t have to deal with the complexities and still get the benefits of a nicer API. Our previous http example can be rewritten to work like Request does.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>http</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;http&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>streamify</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;streamify&#39;</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>streamify</span><span class='p'>();</span>
<span class='nx'>http</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;http://www.google.com&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>onResponse</span><span class='p'>(</span><span class='nx'>response</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>stream</span><span class='p'>.</span><span class='nx'>resolve</span><span class='p'>(</span><span class='nx'>response</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='c1'>// `stream` can be piped already</span>
<span class='nx'>stream</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>destinationStream</span><span class='p'>);</span>
</code></pre>
</div>
<p>You might think this is unnecessary since Request already exists and it already does this. Keep in mind Request is only one module which handles one type of stream. This can be used with any type of stream which is not immediately available in the current event loop iteration.</p>

<p>You could even do something crazy like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>http</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;http&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>fs</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;fs&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>streamify</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;streamify&#39;</span><span class='p'>);</span>

<span class='kd'>function</span> <span class='nx'>uploadToFirstClient</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>streamify</span><span class='p'>({</span> <span class='nx'>superCtor</span><span class='o'>:</span> <span class='nx'>http</span><span class='p'>.</span><span class='nx'>ServerResponse</span> <span class='p'>});</span>

  <span class='kd'>var</span> <span class='nx'>server</span> <span class='o'>=</span> <span class='nx'>http</span><span class='p'>.</span><span class='nx'>createServer</span><span class='p'>(</span><span class='kd'>function</span> <span class='nx'>onRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>response</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>response</span><span class='p'>.</span><span class='nx'>writeHead</span><span class='p'>(</span><span class='mi'>200</span><span class='p'>);</span>
    <span class='nx'>stream</span><span class='p'>.</span><span class='nx'>resolve</span><span class='p'>(</span><span class='nx'>response</span><span class='p'>);</span>
  <span class='p'>}).</span><span class='nx'>listen</span><span class='p'>(</span><span class='mi'>3000</span><span class='p'>);</span>

  <span class='nx'>stream</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;pipe&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>onpipe</span><span class='p'>(</span><span class='nx'>source</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>source</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;end&#39;</span><span class='p'>,</span> <span class='nx'>server</span><span class='p'>.</span><span class='nx'>close</span><span class='p'>.</span><span class='nx'>bind</span><span class='p'>(</span><span class='nx'>server</span><span class='p'>));</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>stream</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='nx'>fs</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>(</span><span class='s1'>&#39;/path/to/myfile&#39;</span><span class='p'>).</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>uploadToFirstClient</span><span class='p'>);</span>
</code></pre>
</div>
<p>In the previous example I used Node&#8217;s standard HTTP module, but it could easily be replaced with Request &#8211; Streamify works fine with Request.</p>

<p>Streamify also helps when you need to make several requests before the stream you actually want is available:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;request&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>streamify</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;streamify&#39;</span><span class='p'>);</span>

<span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='kd'>function</span> <span class='nx'>myModule</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>stream</span> <span class='o'>=</span> <span class='nx'>streamify</span><span class='p'>();</span>

  <span class='nx'>request</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;http://somesite.com/authenticate&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>onAuthenticate</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>response</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='k'>return</span> <span class='nx'>stream</span><span class='p'>.</span><span class='nx'>emit</span><span class='p'>(</span><span class='s1'>&#39;error&#39;</span><span class='p'>,</span> <span class='nx'>err</span><span class='p'>);</span>
    
    <span class='kd'>var</span> <span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{</span> <span class='nx'>uri</span><span class='o'>:</span> <span class='s1'>&#39;http://somesite.com/listmyfiles&#39;</span><span class='p'>,</span> <span class='nx'>json</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>};</span>
    <span class='nx'>request</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>onList</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>result</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='k'>return</span> <span class='nx'>stream</span><span class='p'>.</span><span class='nx'>emit</span><span class='p'>(</span><span class='s1'>&#39;error&#39;</span><span class='p'>,</span> <span class='nx'>err</span><span class='p'>);</span>
      <span class='nx'>stream</span><span class='p'>.</span><span class='nx'>resolve</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;http://somesite.com/download/&#39;</span> <span class='o'>+</span> <span class='nx'>result</span><span class='p'>.</span><span class='nx'>file</span><span class='p'>));</span>
    <span class='p'>});</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>stream</span><span class='p'>;</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This works wonders for any use case in which we want to work with a stream that will be around in the future, but is preceded by one or many asynchronous operations.</p>

<p><img src='/images/posts/streamcannon.gif' alt='streamland' /></p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/16/linkapi-typed-scxml">LinkAP, typed, SCXML Simulation</a></h2>
      <div class="meta">
        <span class="date">16 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/16/linkapi-typed-scxml/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#browser">browser</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='linkap'>LinkAP</h3>

<p><a href='http://linkapjs.com/'>LinkAP</a> (GitHub: <a href='https://github.com/pfraze/link-ap'>pfraze / link-ap</a>, License: <em>MIT</em>) by Paul Frazee is a client-side application platform based around web workers and services. It actually prevents the use of what the author considers dangerous APIs, including <code>XMLHttpRequest</code> &#8211; one of the <a href='https://github.com/pfraze/link-ap/wiki/Design-Document'>LinkAP design goals</a> is to create an architecture for safely coordinating untrusted programs within an HTML document. The design document also addresses sessions:</p>

<blockquote>
<p>In LinkAP, sessions are automatically created on the first request from an agent program to a domain. Each session must be approved by the environment. If a destination responds with a 401 WWW-Authenticate, the environment must decide whether to provide the needed credentials for a subsequent request attempt.</p>
</blockquote>

<p>To build a project with LinkAP, check out the <a href='https://github.com/pfraze/link-ap'>LinkAP repository</a> and then run <code>make</code>. This will create a fresh project to work with. It expects to be hosted by a web server, you can&#8217;t just open the <code>index.html</code> page locally. It comes with Bootstrap, so you get some fairly clean CSS to work with out of the box.</p>

<h3 id='typed'>typed</h3>

<p><a href='http://alexlawrence.github.com/typed/'>typed</a> (GitHub: <a href='https://github.com/alexlawrence/typed'>alexlawrence / typed</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/typed'>typed</a>) by Alex Lawrence is a static typing library. It can be used with Node and browsers. The project&#8217;s homepage has live examples that can be experimented with.</p>

<p>A function is provided called <code>typed</code> which can be used to create constructors that bestow runtime static type checking on both native types and prototype classes. There are two ways to declare types: comment parsing and suffix parsing:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// The &#39;greeting&#39; argument must be a string</span>
<span class='kd'>var</span> <span class='nx'>Greeter</span> <span class='o'>=</span> <span class='nx'>typed</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>greeting</span> <span class='cm'>/*:String*/</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>greeting</span> <span class='o'>=</span> <span class='nx'>greeting</span><span class='p'>;</span>
<span class='p'>});</span>

<span class='c1'>// This version uses suffix parsing</span>
<span class='kd'>var</span> <span class='nx'>Greeter</span> <span class='o'>=</span> <span class='nx'>typed</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>greeting_String</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>greeting</span> <span class='o'>=</span> <span class='nx'>greeting_String</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The library can be turned off if desired by using <code>typed.active = false</code> &#8211; this could be useful for turning it off in production environments.</p>

<p>The author has included a build script and tests.</p>

<h3 id='scxml_simulation'>SCXML Simulation</h3>

<p>&#8220;Check out this cool thing I built using d3: <a href='http://goo.gl/wG5cq'>http://goo.gl/wG5cq</a>,&#8221; says Jacob Beard. That does look cool, but what is it? It&#8217;s a visual representation of a state chart, based on <a href='http://en.wikipedia.org/wiki/SCXML'>SCXML</a>. Jacob has written two libraries for working with SCXML:</p>

<ul>
<li>A d3-based library for visualizing SCXML with SVG: <a href='https://github.com/jbeard4/scxml-viz'>jbeard4 / scxml-viz</a></li>

<li>An implementation of the W3C SCXML draft specification in JavaScript <a href='https://github.com/jbeard4/SCION'>jbeard4 / SCION</a></li>
</ul>

<p>We previously wrote about the SCION project in <a href='http://dailyjs.com/2012/06/08/physijs-scion-mmd-sorting/'>Physijs, SCION, mmd, Sorting</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/11/15/node-daemons">Node Daemon Architecture</a></h2>
      <div class="meta">
        <span class="date">15 Nov 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/11/15/node-daemons/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#unix">unix</a>
          
            <a href="/tags.html#daemons">daemons</a>
          
        </span>
      </div>
      <div class="preview">
        <p>I&#8217;ve been researching the architecture of <a href='http://en.wikipedia.org/wiki/Application_layer'>application layer</a> server implementations in Node. I&#8217;m talking SMPT, IMAP, NNTP, Telnet, XMPP, and all that good stuff.</p>

<p>Node has always seemed like the perfect way to write network oriented daemons. If you&#8217;re a competent JavaScript developer, it unlocks powerful asynchronous I/O features. In <a href='http://www.aosabook.org/en/nginx.html'>The Architecture of Open Source Applications: nginx</a> by Andrew Alexeev, the author explains nginx&#8217;s design in detail &#8211; in case you don&#8217;t know, nginx is a HTTP daemon that&#8217;s famous for solid performance. Andrew&#8217;s review states the following:</p>

<blockquote>
<p>It was actually inspired by the ongoing development of advanced event-based mechanisms in a variety of operating systems. What resulted is a modular, event-driven, asynchronous, single-threaded, non-blocking architecture which became the foundation of nginx code.</p>
</blockquote>

<p>Furthermore,</p>

<blockquote>
<p>Connections are processed in a highly efficient run-loop in a limited number of single-threaded processes called workers. Within each worker nginx can handle many thousands of concurrent connections and requests per second.</p>
</blockquote>

<p>Highly efficient run-loop and event-based mechanisms? That sounds exactly like a Node program! In fact, Node comes with several built-in features that make dealing with such an architecture a snap.</p>

<h3 id='events'>Events</h3>

<p>If you read DailyJS you probably know all about <a href='http://nodejs.org/docs/latest/api/all.html#all_class_events_eventemitter'>EventEmitter</a>. If not, then this is the heart of Node&#8217;s event-based APIs. Learn <code>EventEmitter</code> and <a href='http://nodejs.org/docs/latest/api/all.html#all_stream'>the Stream API</a> and you&#8217;ll be able to easily learn Node&#8217;s other APIs very quickly.</p>

<p><code>EventEmitter</code> is the nexus of Node&#8217;s APIs. You&#8217;ll see it underlying the network APIs, including the HTTP and HTTPS servers. You can happily stuff it into your own classes with <a href='http://nodejs.org/docs/latest/api/all.html#all_util_inherits_constructor_superconstructor'>util.inherits</a> &#8211; and you should! At this point, many popular third-party Node modules use <code>EventEmitter</code> or one of its descendants as a base class.</p>

<p>If you&#8217;re designing a server of some kind, it would be wise to consider basing it around <code>EventEmitter</code>. And once you realise how common this is, you&#8217;ll find all kinds of ways to improve the design of everything from daemons to web applications. For example, if I need to notify disparate entities within an Express application that something has happened, knowing that Express mixes <code>EventEmitter</code> into the <code>app</code> object means I can do things like <code>app.on</code> and <code>app.emit</code> rather than requiring access to a global <code>app</code> object.</p>

<h3 id='process'>Process</h3>

<p>Guess what else is an instance of <code>EventEmitter</code>? The <a href='http://nodejs.org/docs/latest/api/all.html#all_process_1'>process</a> global object. It can be used to manage the current process &#8211; including events for signals.</p>

<h3 id='domain'>Domain</h3>

<p><a href='http://nodejs.org/docs/latest/api/all.html#all_domain'>Domains</a> can be used to group I/O operations &#8211; that means working with errors in nested callbacks is a little bit less painful:</p>

<blockquote>
<p>If any of the event emitters or callbacks registered to a domain emit an <code>error</code> event, or throw an error, then the domain object will be notified, rather than losing the context of the error in the <code>process.on(&#39;uncaughtException&#39;)</code> handler, or causing the program to exit with an error code.</p>
</blockquote>

<p>Domains are currently experimental, but from my own experiences writing long-running daemons with Node, they definitely bring a level of sanity to my spaghetti code.</p>

<h3 id='cluster'>Cluster</h3>

<p>The <a href='http://nodejs.org/docs/latest/api/all.html#all_cluster'>Cluster</a> module is also experimental, but makes it easier to spawn multiple Node processes that share server ports. These processes, or workers, can communicate using IPC (<a href='http://en.wikipedia.org/wiki/Interprocess_communication'>Inter-process communication</a>) &#8211; all using the <code>EventEmitter</code>-based API you know and love.</p>

<h3 id='in_the_wild'>In the Wild</h3>

<p>I&#8217;ve already mentioned that <a href='http://expressjs.com/'>Express</a> &#8220;mixes in&#8221; <code>EventEmitter</code>. This is in contrast to the inheritance-based approach detailed in Node&#8217;s documentation. It&#8217;s incorrect to say Express does this because it&#8217;s actually done by <a href='https://github.com/senchalabs/connect/blob/e0c0c5554a106b68fa0a28f4816d8c256e78e479/lib/connect.js'>Connect, in connect.js</a>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>createServer</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>function</span> <span class='nx'>app</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>){</span> <span class='nx'>app</span><span class='p'>.</span><span class='nx'>handle</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>);</span> <span class='p'>}</span>
  <span class='nx'>utils</span><span class='p'>.</span><span class='nx'>merge</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>,</span> <span class='nx'>proto</span><span class='p'>);</span>
  <span class='nx'>utils</span><span class='p'>.</span><span class='nx'>merge</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>,</span> <span class='nx'>EventEmitter</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>route</span> <span class='o'>=</span> <span class='s1'>&#39;/&#39;</span><span class='p'>;</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>stack</span> <span class='o'>=</span> <span class='p'>[];</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>arguments</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>;</span> <span class='o'>++</span><span class='nx'>i</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>[</span><span class='nx'>i</span><span class='p'>]);</span>
  <span class='p'>}</span>
  <span class='k'>return</span> <span class='nx'>app</span><span class='p'>;</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The <code>utils.merge</code> method copies properties from one object to another:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>exports</span><span class='p'>.</span><span class='nx'>merge</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>){</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>a</span> <span class='o'>&amp;&amp;</span> <span class='nx'>b</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='nx'>b</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>a</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>b</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>];</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
  <span class='k'>return</span> <span class='nx'>a</span><span class='p'>;</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>There&#8217;s also a unit test that confirms that the authors intended to mix in <code>EventEmitter</code>.</p>

<p>An extremely popular way to <em>daemonize</em> (never demonize, which means to &#8220;portray as wicked and threatening&#8221;) a program is to use the <a href='https://npmjs.org/package/forever'>forever</a> module. It can be used as a command-line script or as a module, and is built on some modules that are useful for creating Node daemons, like <a href='https://npmjs.org/package/forever-monitor'>forever-monitor</a> and <a href='https://npmjs.org/package/winston'>winston</a>.</p>

<p>However, what I&#8217;m really interested in is the architecture of modules that provide services rather than utility modules for managing daemons. One such example is <a href='https://npmjs.org/package/statsd'>statsd</a> from Etsy. It&#8217;s a network daemon for collecting statistics. The core server code, <a href='https://github.com/etsy/statsd/blob/953063a2c6008480a5b4a4f7c8a814006f50bfc5/stats.js'>stats.js</a>, uses <code>net.createServer</code> and a <code>switch</code> statement to execute commands based on the server&#8217;s protocol. Notable uses of <code>EventEmitter</code> include <code>backendEvents</code> for asynchronously communicating with the data storage layer, and automatic configuration file reloading. I particularly like the fact the configuration file is reloaded &#8211; it&#8217;s a good use of Node&#8217;s built-in features.</p>

<p>James Halliday&#8217;s <a href='https://npmjs.org/package/smtp-protocol'>smtp-protocol</a> can be used to <em>implement</em> SMTP servers (it isn&#8217;t itself an SMTP server). The server part of the module is based around a protocol parser, <code>ServerParser</code> &#8211; a prototype class and a class for representing clients (<code>Client</code>). Servers are created using <code>net.createServer</code>, much like the other projects I&#8217;ve already mentioned.</p>

<p>This module is useful because it demonstrates how to separate low-level implementation details from the high-level concerns of implementing a real production-ready server. Completely different SMTP servers could be built using smtp-protocol as the foundation. Real SMTP servers need to deal with things like relaying messages, logging, and managing settings, so James has separated that out whilst retaining a useful level of functionality for his module.</p>

<p>I&#8217;ve also been reading through the <a href='https://npmjs.org/package/telnet'>telnet</a> module, which like smtp-protocol can be used to implement a telnet server.</p>

<p>At the moment there seems to be a void between these reusable server modules and daemons that can be installed on production servers. Node makes asynchronous I/O more accessible, which will lead to novel server implementations like Etsy&#8217;s stats server. If you&#8217;ve got an idea for a niche application layer server, then why not build it with Node?</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page21">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <strong>22</strong>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page23">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

