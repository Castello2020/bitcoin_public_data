http://dailyjs.com/2010/11/08/node-tutorial-2/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 14:39:44 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:49 GMT
ETag: "141670-6789-4fedef259aa40"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 7838
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Node Tutorial Part 2</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2010/11/08/node-tutorial-2">Node Tutorial Part 2</a></h2>

<div class="meta">
  08 Nov 2010 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#server">server</a>
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#lmawa">lmawa</a>
    
      <a href="/tags.html#nodepad">nodepad</a>
    
  </span>
</div>

<div id="post">
<p>Welcome to part 2 of <em>Let&#8217;s Make a Web App</em>, a tutorial series about building a web app with <a href="http://nodejs.org/">Node</a>.  This series will walk you through the major areas you&#8217;ll need to face when building your own applications.  These tutorials are tagged with <a href="/tags.html#lmawa">lmawa</a>.</p>
<p><a href="http://dailyjs.com/2010/11/01/node-tutorial/">Part 1</a> introduced this series and discussed how to select appropriate libraries for your Node projects.</p>
<p>This part covers installing the basic tools and libraries, and we&#8217;ll also create a skeleton app and take a look at the generated code.</p>
<h3>Requirements</h3>
<p>This project depends on the following:</p>
<ul>
	<li>A working Node install</li>
	<li>MongoDB</li>
	<li>npm</li>
</ul>
<p>I&#8217;ll walk you through the installation of each of these.  Refer to <a href="http://dailyjs.com/2010/11/03/node-roundup/">part 1</a> to see why I decided to use these technologies.</p>
<h3>Installation: Node</h3>
<p>If you don&#8217;t have Node installed download it and decompress it.  I&#8217;m using <a href="http://nodejs.org/dist/node-v0.2.4.tar.gz">0.2.4</a>.  You could also use a package manager if you have one on your system.  There are Debian packages, <a href="https://github.com/mxcl/homebrew">Homebrew recipes</a>, and more besides.</p>
<p>You should be able to build and install Node like this:</p>
<div class="highlight"><pre><code class="sh">./configure
make
make install
</code></pre>
</div>
<p>You may need to change the permissions of the installation directory before running <code>make install</code>, or use <code>sudo</code> or <code>su</code>.</p>
<p>These steps will work for a unix-based system.  If you&#8217;re using Windows you&#8217;ll have to figure this part out for yourself, but running Node on Windows is possible.</p>
<h3>MongoDB</h3>
<p>I want to use MongoDB for our database.  It&#8217;s also pretty easy to install &#8212; there are packages and compilation should be straightforward.  The site has lots of <a href="http://www.mongodb.org/downloads">binaries available</a>.</p>
<p>MongoDB needs a data directory, which can be created with <code>mkdir -p /data/db</code>.  This is the default path, but it can be changed.  I use the default on all my development machines.</p>
<p>The <a href="http://www.mongodb.org/display/DOCS/Quickstart">MongoDB Quickstart Guide</a> is a good place to start for more installation help.</p>
<h3>npm</h3>
<p><a href="https://github.com/isaacs/npm">npm</a> makes managing Node packages quicker and easier than fetching their source.  The recommended installation method is to run a command that downloads a script and installs npm <em>somewhere you have permission to write</em>.</p>
<p>If you&#8217;re developing on your own machine, you could <code>chown -R $USER /usr/local</code> and run <code>curl http://npmjs.org/install.sh | sh</code>.</p>
<p>Alternatively, build Node with its <code>prefix</code> somewhere in your home directory:</p>
<div class="highlight"><pre><code class="sh">./configure --prefix<span class="o">=</span>~/local
</code></pre>
</div>
<p>npm will then see this and install its packages alongside Node.  There are detailed instructions in <a href="https://gist.github.com/579814">gist 579814</a>.</p>
<h3>Packages</h3>
<p>Now we&#8217;ve got npm our required packages can be installed:</p>
<div class="highlight"><pre><code class="sh">npm install express mongoose jade less expresso
</code></pre>
</div>
<p>Don&#8217;t be put off by npm&#8217;s verbosity, the messages are actually fairly easy to follow.  Just make sure it prints <em>Success</em> for each package.</p>
<h3>A Basic Express App with MongoDB</h3>
<p>When I work with Mongo, I usually start a local server.  This is straightforward:</p>
<div class="highlight"><pre><code class="sh">mongod
</code></pre>
</div>
<p>It&#8217;ll display the port it&#8217;s using, which you needs to be noted down for the Mongoose connection settings.</p>
<p>Express ships with a commandline utility for creating apps.  Change to a suitable directory and type this to generate a skeleton app:</p>
<div class="highlight"><pre><code class="sh">express nodepad
</code></pre>
</div>
<p>The resulting code should run with <code>node app.js</code>.  View it by visiting <a href="http://localhost:3000">http://localhost:3000</a>.</p>
<h3>Skeleton Analysis</h3>
<p>The first line is standard CommonJS: the <code>express</code> module is required, and the app is created and exported &#8212; that just makes it easier to test, don&#8217;t worry if this doesn&#8217;t make sense yet.</p>
<p>Express has changed a lot in the last year, so be careful with old tutorials because they may use a different <span class="caps">API</span>.  Since the initial release, <em>connect</em> has been added, which is a middleware layer.  This allows certain chunks of the <span class="caps">HTTP</span> stack and web app framework to be interchangeable.  Configuration in particular has changed a lot.</p>
<p>What you should be seeing is this:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/views&#39;</span><span class="p">);</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyDecoder</span><span class="p">());</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">methodOverride</span><span class="p">());</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">compiler</span><span class="p">({</span> <span class="nx">src</span><span class="o">:</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">,</span> <span class="nx">enable</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;less&#39;</span><span class="p">]</span> <span class="p">}));</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">staticProvider</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">));</span>
<span class="p">});</span>
</code></pre>
</div>
<p>By default Express apps are very simple &#8212; notice the view path is specified, and a static file handler is set up with <code>staticProvider</code>.  <code>express.bodyDecoder</code> is just used to decode <code>application/x-www-form-urlencoded</code> data &#8212; i.e., forms.  The <code>methodOverride</code> middleware allows Express apps to behave like RESTful apps, as popularised by Rails; <span class="caps">HTTP</span> methods like <code>PUT</code> can be used through hidden inputs.  There has been a lot of dispute about whether this is a good idea, which is presumably why Holowaychuk has made it optional.</p>
<p>The main body of the app uses a jade template to generate <span class="caps">HTML</span>, and sets a variable to pass to the template:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index.jade&#39;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Express&#39;</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>
<p>This method call defines a route and corresponding <span class="caps">HTTP</span> verb, <code>GET</code> and &#8216;/&#8217;.  That means this little chunk of code won&#8217;t respond to a <code>POST</code> to &#8216;/&#8217;.</p>
<p>The last few lines are interesting because they actually check if the app is running as the top-level module:</p>
<div class="highlight"><pre><code class="javascript"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">module</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port %d&quot;</span><span class="p">,</span> <span class="nx">app</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">)</span>
<span class="p">}</span>
</code></pre>
</div>
<p>Again, this makes testing easier; don&#8217;t worry if it seems strange.</p>
<h3>Connecting Up MongoDB</h3>
<p>Mongoose allows us to conveniently wrap simple classes around Mongo collections.  We need to load the library and instantiate a database connection instance first:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">).</span><span class="nx">Mongoose</span>
<span class="nx">db</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost/nodepad&#39;</span><span class="p">)</span>
</code></pre>
</div>
<p>I&#8217;ve made a models file with an example model:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">).</span><span class="nx">Mongoose</span><span class="p">;</span>

<span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Document&#39;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">properties</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="s1">&#39;tags&#39;</span><span class="p">],</span>

  <span class="nx">indexes</span><span class="o">:</span> <span class="p">[</span>
    <span class="s1">&#39;title&#39;</span>
  <span class="p">]</span>
<span class="p">});</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">Document</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">db</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Document&#39;</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
</div>
<p>The models can be required in app.js, like this:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">Document</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./models.js&#39;</span><span class="p">).</span><span class="nx">Document</span><span class="p">(</span><span class="nx">db</span><span class="p">);</span>
</code></pre>
</div>
<p>The database instance is passed, so <code>db.model</code> will return a model instance based on the <code>mongoose.model('Document', ...)</code> declaration.  I thought putting the models in their own file would make the Mongoose behaviour a little more opaque so the application controller code is easier to follow.</p>
<h3>The Templates</h3>
<p>The generator uses <a href="http://jade-lang.com/">Jade</a> by default, and it created this template:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">h1</span><span class="o">=</span> <span class="nx">title</span>
<span class="nx">p</span> <span class="nx">Welcome</span> <span class="nx">to</span> <span class="err">#</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span>
</code></pre>
</div>
<p>This is similar to Haml, and it attempts to reduce the noise of <span class="caps">HTML</span> templates.  If you like plain <span class="caps">HTML</span> templates an alternative like <a href="http://embeddedjs.com/">ejs</a> can be used.</p>
<h3>Running Tests</h3>
<p>The Express generator also created a skeleton test.  The tests are run by typing <code>expresso</code>.</p>
<h3>Get the Source</h3>
<p>This is available on my GitHub account at <a href="https://github.com/alexyoung/nodepad">alexyoung/nodepad</a>.</p>
<h3>Conclusion</h3>
<p>You should now be comfortable with installing a base Node development environment with npm and mongo.  You should also have a skeleton Express app, and understand how it works and how to run Expresso tests.</p>
<p>I&#8217;ll flesh out the app a little bit more next week.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2010/11/08/node-tutorial-2/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

