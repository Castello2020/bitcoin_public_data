http://dailyjs.com/2011/06/06/code-review-jade/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 06:26:22 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "16c2c2-6fe4-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8340
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Code Review: Jade</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2011/06/06/code-review-jade">Code Review: Jade</a></h2>

<div class="meta">
  06 Jun 2011 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#code-review">code-review</a>
    
      <a href="/tags.html#language">language</a>
    
  </span>
</div>

<div id="post">
<div class="intro">
<p><em>Code Review</em> is a series on DailyJS where I take a look at an open source project to see how it&#8217;s built.  Along the way we&#8217;ll learn patterns and techniques by JavaScript masters.  If you&#8217;re looking for tips to write better apps, or just want to see how they&#8217;re structured in established projects, then this is the tutorial series for you.</p>
</div>
<p>In <a href="http://dailyjs.com/2011/05/30/code-review-coffeescript/">last week&#8217;s code review</a> I looked at CoffeeScript, which is built with the excellent <a href="http://zaach.github.com/jison/">Jison</a> parser generator.  I wanted to contrast this to <a href="http://jade-lang.com/">Jade</a>.  Although Jade is a very different language to CoffeeScript, I wanted to compare TJ&#8217;s hand-crafted parser and lexer.</p>
<h3>About Jade</h3>
<p><a href="http://jade-lang.com/">Jade</a> (GitHub: <a href="https://github.com/visionmedia/jade">visionmedia / jade</a>, License: <em><span class="caps">MIT</span></em>, npm: <em>jade</em>) by TJ Holowaychuk is a Haml-inspired template language.  It started off as a Node library, but it&#8217;s been ported to other languages too.</p>
<p>It has some interesting time saving features that make <span class="caps">HTML</span> feel like hard work.  Rather than writing <code>div</code> all the time, it&#8217;s possible to just write classes or IDs with <span class="caps">CSS</span> selector syntax:</p>
<div class="highlight"><pre><code class="text">#main
  .post
    h3 #{post.title}
</code></pre>
</div>
<p>There are even shortcuts for conditional comments.  This will insert <code>&lt;!--[if IE]&gt;</code>:</p>
<div class="highlight"><pre><code class="text">body
  /if IE
    a(href=&#39;http://www.mozilla.com/en-US/firefox/&#39;) Get Firefox
</code></pre>
</div>
<h3>Installation</h3>
<p>Jade can be downloaded from GitHub or simply installed with npm:</p>
<div class="highlight"><pre><code class="sh">npm install jade
</code></pre>
</div>
<h3>Usage</h3>
<p>Most people use Jade as part of <a href="http://expressjs.com/">Express</a> apps.  It&#8217;s possible to use it outside of Express:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">jade</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jade&#39;</span><span class="p">),</span>
    <span class="nx">options</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">jade</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;#main&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
<span class="nx">jade</span><span class="p">.</span><span class="nx">renderFile</span><span class="p">(</span><span class="s1">&#39;file.jade&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Callback receives HTML</span>
<span class="p">});</span>

<span class="c1">// Compile a function</span>
<span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">jade</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="s1">&#39;#main&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">locals</span><span class="p">);</span>
</code></pre>
</div>
<p>The project also comes bundled with <code>bin/jade</code>:</p>
<div class="highlight"><pre><code class="sh"><span class="nv">$ </span>jade -h

  Usage: jade <span class="o">[</span>options<span class="o">]</span>
              <span class="o">[</span>path ...<span class="o">]</span>
              &lt; in.jade &gt; out.jade  
  Options:
    -o, --options &lt;str&gt;  JavaScript options object passed
    -h, --help           Output <span class="nb">help </span>information
    -w, --watch          Watch file<span class="o">(</span>s<span class="o">)</span> or folder<span class="o">(</span>s<span class="o">)</span> <span class="k">for </span>changes and re-compile
    -v, --version        Output jade version
    --out &lt;dir&gt;          Output the compiled html to &lt;dir&gt;
</code></pre>
</div>
<h3>Structure</h3>
<p>Jade itself is pretty self-contained.  There are developer dependencies for testing and benchmarking &#8212; parsing performance is very important to the author.  The build script is a simple, clean <code>Makefile</code>.  This is excellent because as far as I know every machine I use has <code>Make</code> installed.</p>
<p>After checking out the project&#8217;s git submodules, I was able to successfully benchmark it:</p>
<div class="highlight"><pre><code class="sh"><span class="nv">$ </span>make benchmark

benchmarking 2000 <span class="nb">times</span>

  - jade compilation: 1006 ms
  - jade execution: 340 ms
  - jade compile<span class="o">()</span>: 329 ms

benchmarking 2000 <span class="nb">times</span>

  - jade self compilation: 713 ms
  - jade self execution: 53 ms
  - jade compile<span class="o">()</span>: 53 ms

benchmarking 2000 <span class="nb">times</span>

  - haml-js compilation: 841 ms
  - haml-js execution: 145 ms

benchmarking 2000 <span class="nb">times</span>

  - haml compilation: 474 ms
  - haml execution: 75 ms

benchmarking 2000 <span class="nb">times</span>

  - ejs compilation: 264 ms
  - ejs execution: 89 ms
</code></pre>
</div>
<p>It was that simple!</p>
<p>The overall structure of the code is easy to follow:</p>
<ul>
	<li>Main groups of functionality are separate files under <code>lib/</code> &#8212; the parser and lexer are the main ones we&#8217;ll look at</li>
	<li><code>lib/jade.js</code> provides the public <span class="caps">API</span></li>
	<li>Each feature of the Jade language is represented by a &#8220;node&#8221;, which is an empty object</li>
</ul>
<h3>Parsing</h3>
<p>Let&#8217;s look at a route through Jade as it parses input and generates output.  The <code>exports.render = function(str, options)</code> method renders a string of Jade into <span class="caps">HTML</span>.  The input is wrapped in a <code>String</code> so it&#8217;ll accept buffer objects.  An internal line number position is kept inside an object called <code>meta</code> to help generate readable error messages with <code>rethrow(err, str, filename, meta.lineno)</code>.</p>
<p>It then generates a function based on the output of <code>parse</code>:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">fn</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;locals&#39;</span><span class="p">,</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">options</span><span class="p">));</span>
</code></pre>
</div>
<p>This is a minor point in the scope of everything Jade is doing here, but if you&#8217;re not aware of the <code>Function</code> object it&#8217;s worth reading up on.  It can be a useful tool for metaprogramming and escaping sticky situations while creating the veneer of a simple <span class="caps">API</span>.</p>
<p>The fact that <code>Function</code> uses the output of <code>parse(str, options)</code> as the function body illustrates a central concept to Jade&#8217;s compilation stage &#8212; it effectively generates JavaScript that gets executed using <code>Function</code>.  I&#8217;ve used this technique myself to create metaprogrammed code that&#8217;s more explicit than a dirty big <code>eval</code>, but my assumption here is TJ went down this route for performance reasons.</p>
<p>Once <code>parse</code> has instantiated a <code>Parser</code>, the output of the parser is passed to a <code>Compiler</code> object.  The parser is responsible for driving a <code>Lexer</code> object, which has a simple <span class="caps">API</span>.</p>
<p>The lexer consumes the input and generates tokens using regular expressions and very simple, readable JavaScript.  Remember how Jade handles element classes?  Well, consider this:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">className</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">scan</span><span class="p">(</span><span class="sr">/^\.([\w-]+)/</span><span class="p">,</span> <span class="s1">&#39;class&#39;</span><span class="p">);</span>
<span class="p">},</span>
</code></pre>
</div>
<p>The lexer advances when a token is matched:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">next</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">deferred</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">eos</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">pipelessText</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">doctype</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">tag</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">filter</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">code</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">attrs</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">indent</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">comment</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">blockComment</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">colon</span><span class="p">()</span>
    <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
<span class="p">}</span>
</code></pre>
</div>
<p>The parser uses these tokens to build a tree of <code>Node</code> objects.  The parser&#8217;s <code>parse*</code> methods are mostly co-ordinated by <code>parseBlock</code> and <code>parseExpr</code> according to what constitutes valid Jade.  The abstract representations of nodes and implied tree structure form what&#8217;s known as an Abstract Syntax Tree (<span class="caps">AST</span>).</p>
<p>In some cases lookahead is used, which is supported by the <code>peek</code> method, and <code>expect</code> is also used to check for invalid syntax.  This will throw an exception which can be used to generate useful error messages as we saw earlier.</p>
<p>It&#8217;s interesting to note that the parser houses the formal grammar rules &#8212; although this was true of CoffeeScript, CoffeeScript has Jison representations of the grammar which are used to generate the parser.  The end result is superficially similar, but separating grammar from the parser may afford some advantages.</p>
<p>The missing piece of the puzzle here is the <code>Compiler</code>.  This compiles the parse tree into JavaScript, which we saw being executed by the <code>parse</code> function in <code>lib/jade.js</code>.</p>
<p>Each node is &#8220;visited&#8221; by the compiler:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">visitNode</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">){</span>
  <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">name</span>
    <span class="o">||</span> <span class="nx">node</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">match</span><span class="p">(</span><span class="sr">/function ([^(\s]+)()/</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="s1">&#39;visit&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">](</span><span class="nx">node</span><span class="p">);</span>
<span class="p">},</span>
</code></pre>
</div>
<p>The <code>Compiler</code> class contains methods that begin with <code>visit</code> and will be matched here.  This is another handy and extremely simple way of effectively metaprogramming without any fuss or cartoon foxes.</p>
<h3>Code Style</h3>
<p>TJ uses many conventions that make his code easy to read.  A small one is commas at the start of lines:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./nodes&#39;</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">filters</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./filters&#39;</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">doctypes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./doctypes&#39;</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">selfClosing</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./self-closing&#39;</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./utils&#39;</span><span class="p">);</span>
</code></pre>
</div>
<p>I&#8217;ve never been able to get used to writing code this way, but it makes it easy to spot missing commas.  Another point is everything is well-named; he uses established computer science concepts where appropriate (specifically referencing ASTs for example), and writes simple but fast community-friendly JavaScript.</p>
<h3>Conclusion</h3>
<p>In comparing CoffeeScript and Jade, the most interesting thing that sticks in my mind is the separation of grammar from the parser that Jison makes possible.  However, even though I&#8217;ve rushed through a brief analysis of Jade, I think you&#8217;ll agree that it&#8217;s very easy to follow what the parser is doing.</p>
<p>TJ&#8217;s packaged the project with tests, benchmarks, and all the libraries required to get started as a developer for the project.  There are also helpful code comments throughout.</p>
<p>The <code>Makefile</code> makes managing the project simple and immediate on any platform I can think of.  I&#8217;m starting to advocate this approach myself &#8212; there are now more language-specific versions of <code>make</code> than I can be bothered to learn, so I&#8217;ve given up and gone back to <code>make</code> too.</p>
<p>I feel like many Node developers can learn a lot from this project, and what&#8217;s more TJ has made it easy to contribute if you&#8217;re in a position to help out.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2011/06/06/code-review-jade/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

