http://dailyjs.com/2012/11/12/code-review-watch-js/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 05:45:41 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Tue, 22 Jul 2014 17:17:01 GMT
ETag: "109263-50ff-4fecb64467d40"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 6314
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: How Does Watch.js Work?</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2012/11/12/code-review-watch-js">How Does Watch.js Work?</a></h2>

<div class="meta">
  12 Nov 2012 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#observer">observer</a>
    
      <a href="/tags.html#code-review">code-review</a>
    
  </span>
</div>

<div id="post">
<p>Last week noticed a lot of interest in <a href='https://github.com/melanke/Watch.JS'>Watch.js</a> (License: <em>MIT</em>) by Gil Lopes Bueno, so I thought it would be interesting to take a look at how it works. It allows changes to properties on objects to be observed &#8211; whenever a change is made, a callback receives the new and old values, as well as the property name:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>ex1</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>attr1</span><span class='o'>:</span> <span class='s1'>&#39;initial value of attr1&#39;</span>
<span class='p'>,</span> <span class='nx'>attr2</span><span class='o'>:</span> <span class='s1'>&#39;initial value of attr2&#39;</span>
<span class='p'>};</span>

<span class='nx'>ex1</span><span class='p'>.</span><span class='nx'>watch</span><span class='p'>(</span><span class='s1'>&#39;attr1&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>alert</span><span class='p'>(</span><span class='s1'>&#39;attr1 changed&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>watch</code> method can also accept an array of property names, and omitting it will cause the callback to run whenever any property changes. The <code>unwatch</code> method will remove a watcher.</p>

<p>First, let&#8217;s get the elephant out of the room: this implementation modifies <code>Object.prototype</code> &#8211; that&#8217;s where the <code>watch</code> method comes from in the previous example. The author <a href='https://github.com/melanke/Watch.JS/issues/12'>is planning to change the API</a> to avoid modifying <code>Object.prototype</code>.</p>

<p>Second, this method is polymorphic in that it behaves differently based on the supplied arguments. This is quite common in client-side code. It&#8217;s implemented by looking at the number of arguments without requiring too much type checking, in <a href='https://github.com/melanke/Watch.JS/blob/52a89a0cae3f791f00868fc4a134e84b7fa084af/src/watch.js#L61-70'>watch</a>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>WatchJS</span><span class='p'>.</span><span class='nx'>defineProp</span><span class='p'>(</span><span class='nb'>Object</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>,</span> <span class='s2'>&quot;watch&quot;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>

    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>arguments</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>==</span> <span class='mi'>1</span><span class='p'>)</span> 
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>watchAll</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
    <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>WatchJS</span><span class='p'>.</span><span class='nx'>isArray</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>]))</span> 
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>watchMany</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
    <span class='k'>else</span>
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>watchOne</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>

<span class='p'>});</span>
</code></pre>
</div>
<p>You&#8217;re probably wondering what <a href='https://github.com/melanke/Watch.JS/blob/52a89a0cae3f791f00868fc4a134e84b7fa084af/src/watch.js#L47-58'>WatchJS.defineProp</a> is. It&#8217;s actually a convenience method to use ES5&#8217;s <code>Object.defineProperty</code> in browsers that support it:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>defineProp</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>,</span> <span class='nx'>propName</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>){</span>
    <span class='k'>try</span><span class='p'>{</span>
        <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>defineProperty</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>,</span> <span class='nx'>propName</span><span class='p'>,</span> <span class='p'>{</span>
                <span class='nx'>enumerable</span><span class='o'>:</span> <span class='kc'>false</span>
            <span class='p'>,</span> <span class='nx'>configurable</span><span class='o'>:</span> <span class='kc'>true</span>
            <span class='p'>,</span> <span class='nx'>writable</span><span class='o'>:</span> <span class='kc'>false</span>
            <span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='nx'>value</span>
            <span class='p'>});</span>
    <span class='p'>}</span><span class='k'>catch</span><span class='p'>(</span><span class='nx'>error</span><span class='p'>){</span>
        <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>propName</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>;</span>
    <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The <code>watchMany</code> method uses a utility method, <code>WatchJS.isArray</code>, to determine how to loop over the supplied arguments, calling <code>watchOne</code> on each in turn. The <code>watchAll</code> method calls <code>watchMany</code>, so there&#8217;s a lot of internal code reuse.</p>

<p>Most of the work gets carried out by <a href='https://github.com/melanke/Watch.JS/blob/52a89a0cae3f791f00868fc4a134e84b7fa084af/src/watch.js#L111-161'>watchOne</a>. This calls <code>WatchJS.defineGetAndSet(obj, prop, getter, setter)</code> with a custom getter and setter to wrap around values so they can be watched. However, watching values change has a few complications.</p>

<p>For one thing, arrays have <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array#Mutator_methods'>mutator methods</a> like <code>push</code> and <code>pop</code>. Therefore, <code>watchFunctions</code> is called to wrap each of these methods with a suitable call to <code>WatchJS.defineProp</code>. Also, when a property is set to a new value, all of these wrapped methods will be lost. To get around this, the custom setter calls <code>obj.watchFunctions(prop)</code> again.</p>

<p>When a value has changed, <code>callWatchers</code> is called. An internal list of watcher callbacks indexed on property names is maintained and called by a for-in loop. It&#8217;s important to note that these callbacks only run if the values are actually different. This is tested by calling <code>JSON.stringify(oldval) != JSON.stringify(newval)</code> &#8211; presumably the author used this approach because it&#8217;s an easy way to compare the value of objects. I&#8217;d consider benchmarking this against other solutions.</p>

<p>Finally, we get to <code>WatchJS.defineGetAndSet</code>, which attempts to use <code>Object.defineProperty</code> if available, otherwise <code>Object.prototype.__defineGetter__.call</code> and <code>Object.prototype.__defineSetter__.call</code> are used.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>Rather than using exceptions to track browser support, it might be better to use capability testing to check for <code>Object.defineProperty</code> and <code>Object.prototype.__defineGetter__.call</code> when the first call is made, then cache the result. As noted in the project&#8217;s issues, <a href='http://wiki.ecmascript.org/doku.php?id=harmony:observe'>Object.observe</a> should provide a more efficient approach in the future &#8211; this is an accepted Harmony proposal.</p>

<p>To really mature this project, changing the API to avoid modifying <code>Object.prototype</code> would be a good idea, and adding benchmarks and unit tests would be useful as well.</p>

<p>This article was based on <a href='https://github.com/melanke/Watch.JS/blob/52a89a0cae3f791f00868fc4a134e84b7fa084af/src/watch.js'>watch.js commit dc9aac6a6e</a>.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
      <li>
        <div>18 Jul 2014</div>
        <a href="/2014/07/18/lazy-json-undo">Undo with Object.observe</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2012/11/12/code-review-watch-js/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

