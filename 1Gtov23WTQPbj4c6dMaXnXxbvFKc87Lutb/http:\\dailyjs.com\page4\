http://dailyjs.com/page4/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 01:15:15 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Tue, 22 Jul 2014 17:17:03 GMT
ETag: "1e851a-1422c-4fecb646501c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 21307
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/29/jquery-ui">Using jQuery UI with AMD</a></h2>
      <div class="meta">
        <span class="date">29 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/29/jquery-ui/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#amd">amd</a>
          
        </span>
      </div>
      <div class="preview">
        <p>As of version 1.11 you can use <a href='http://learn.jquery.com/jquery-ui/environments/amd/'>AMD with jQuery UI</a>. RequireJS will work, or any other AMD compatible loader.</p>

<p>That means you can do this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>require</span><span class='p'>([</span><span class='s1'>&#39;jquery-ui/autocomplete&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>autocomplete</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>autocomplete</span><span class='p'>({</span> <span class='nx'>source</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;One&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Two&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Three&#39;</span><span class='p'>]</span> <span class='p'>},</span> <span class='s1'>&#39;&lt;input&gt;&#39;</span><span class='p'>)</span>
    <span class='p'>.</span><span class='nx'>element</span>
    <span class='p'>.</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='s1'>&#39;body&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Doesn&#8217;t that look a lot better than what we had before (script tags, monolithic <code>$</code>)? The old <a href='http://jqueryui.com/autocomplete/'>Autocomplete</a> style would have used <code>$(selector).autocomplete</code>, which is low on syntax but high in coupling. Even though Autocomplete&#8217;s API is always going to be coupled to jQuery, I prefer the idea of being able to load it in a modular way, and to potentially be able to inject a different dependency.</p>

<p>The jQuery/jQuery UI stack is still more monolithic than some of the newer MVVM or component-based solutions, but this may help you use some AMD-based techniques with your existing jQuery UI projects.</p>

<p>Also, I know there&#8217;s always someone who wants to point out how great Dojo is, so here&#8217;s <a href='http://dojotoolkit.org/blog/learn-more-about-amd'>Dojo&#8217;s AMD post from 2011</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/28/gesturekit">GestureKit</a></h2>
      <div class="meta">
        <span class="date">28 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/28/gesturekit/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mobile">mobile</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/gesturekit.png' alt='GestureKit' /></p>

<p><a href='http://www.gesturekit.com/'>GestureKit</a> (GitHub: <a href='https://github.com/RoamTouch/gesturekit.js'>RoamTouch / gesturekit.js</a>, License: <em>Apache 2.0</em>) by Guille Paz and RoamTouch is an SDK for creating and recognising gestures in mobile interfaces. There&#8217;s an open source client-side library that has an event-based API for responding to gestures.</p>

<p>Gestures can be recorded on a mobile device and then used on different platforms. The project&#8217;s homepage has examples for Android, iOS, and JavaScript.</p>

<p>GestureKit is backed by a service for storing metrics on gestures. Applications can work offline though, the underlying data is cached on startup.</p>

<p>Right now it seems like the server part of the project is closed source, but the <a href='http://learn.gesturekit.com/faq'>FAQ</a> states that part of the API will be opened, and they&#8217;re looking for contributors:</p>

<blockquote>
<p>GestureKit has a Github repos for community pushes that you will be able to contribute. We are planning to open a part of the API, specially the actions performed with the gestures and a plugin interface to integrate new stuff to the service.</p>
</blockquote>

<p>The thing I like about this project is the idea that you can draw shapes to trigger specific functionality. The example is a music app that uses two arrows to mean skip forward or back.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/25/callback-hell">Managing Node.js Callback Hell, this Considered Harmful</a></h2>
      <div class="meta">
        <span class="date">25 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/25/callback-hell/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Marc Harter, who is working with me on <a href='http://manning.com/young/'>Node.js in Practice</a>, recently published <a href='https://medium.com/p/1fe03ba8baf'>Managing Node.js Callback Hell</a>:</p>

<blockquote>
<p>Callback hell is subjective, as heavily nested code can be perfectly fine sometimes. Asynchronous code is hellish when it becomes overly complex to manage the flow. A good question to see how much &#8220;hell&#8221; you are in is: how much refactoring pain would I endure if <code>doAsync2</code> happened before <code>doAsync1</code>? The goal isn&#8217;t about removing levels of indentation but rather writing modular (and testable!) code that is easy to reason about and resilient.</p>
</blockquote>

<p>The example he uses is nested asynchronous file operations, with a counter to determine completion. This is compared to a version that uses <a href='https://www.npmjs.org/package/async'>async</a>, and another that uses promises with <a href='https://www.npmjs.org/package/q'>q</a>.</p>

<p>The post was originally published on StrongLoop&#8217;s blog, here: <a href='http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/'>Managing Node.js Callback Hell with Promises, Generators and Other Approaches</a>. <a href='http://strongloop.com/strongblog/'>StrongLoop&#8217;s blog</a> is worth subscribing to if you&#8217;re a Node developer &#8211; it has general tutorials and coverage of interesting npm modules.</p>

<p>Tom Boutell sent in a blog post about OO in JavaScript, called <a href='http://justjs.com/posts/this-considered-harmful'>&#8220;this&#8221; considered harmful (sometimes)</a>:</p>

<blockquote>
<p>Most JavaScript implementations of &#8220;classes&#8221; do have certain features in common. They rely on the &#8220;this&#8221; keyword to refer to the current object; after all, it&#8217;s built into the language. They provide a convenience function to implement subclassing, because it&#8217;s tricky to get right, especially in older browsers. And they have a really tough time handling callbacks in methods, because &#8220;this&#8221; ceases to refer to the object you expect.</p>
</blockquote>

<p>Tim Oxley posted some comments discussing how to use <code>Function.prototype.bind</code> as well.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/24/indexed">Query IndexedDB Like MongoDB</a></h2>
      <div class="meta">
        <span class="date">24 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/24/indexed/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#indexeddb">indexeddb</a>
          
            <a href="/tags.html#storage">storage</a>
          
            <a href="/tags.html#apis">apis</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Kent Safranski sent in <a href='https://github.com/Fluidbyte/Riggr/blob/master/src/indexed.js'>Indexed</a>, a library that wraps around <a href='https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API'>IndexedDB</a> with a friendly MongoDB-inspired API.</p>

<p>You can insert objects like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>indexed</span><span class='p'>(</span><span class='s1'>&#39;myDB&#39;</span><span class='p'>).</span><span class='nx'>insert</span><span class='p'>({</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;John Doe&#39;</span>
  <span class='nx'>email</span><span class='o'>:</span> <span class='s1'>&#39;jdoe@email.com&#39;</span>
<span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>And fetch them again with <code>find</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>indexed</span><span class='p'>(</span><span class='s1'>&#39;myDB&#39;</span><span class='p'>).</span><span class='nx'>find</span><span class='p'>({</span>
  <span class='nx'>_id</span><span class='o'>:</span> <span class='mi'>28972387982</span>
<span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>You can even use MongoDB-style operators:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>indexed</span><span class='p'>(</span><span class='s1'>&#39;myDB&#39;</span><span class='p'>).</span><span class='nx'>find</span><span class='p'>({</span>
  <span class='nx'>someNumber</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>$gt</span> <span class='o'>:</span> <span class='mi'>25</span> <span class='p'>}</span>
<span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>You&#8217;ll probably like this if you work with databases in Node. It&#8217;s actually part of a larger project called <a href='https://github.com/Fluidbyte/Riggr'>Riggr</a>, a framework based around RequireJS, Knockout and jQuery. Although I think <code>indexed.js</code> is cool enough that it should be a separate module, rather than being bundled in with Riggr.</p>

<p>Kent wrote a detailed blog post about <code>indexed.js</code> here: <a href='http://fluidbyte.net/indexed-query-inexeddb-like-mongo/'>Indexed: Query IndexedDB Like Mongo</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/23/node-roundup">Node Roundup: npm-pkgr, Promised Land, Stash.js</a></h2>
      <div class="meta">
        <span class="date">23 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/23/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#caching">caching</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='npmpkgr'>npm-pkgr</h3>

<p>npm-pkgr (GitHub: <a href='https://github.com/vvo/npm-pkgr'>vvo / npm-pkgr</a>, License: <em>ISC</em>, npm: <a href='https://www.npmjs.org/package/npm-pkgr'>npm-pkgr</a>) by Vincent Voyer caches <code>npm install</code> results based on your <code>package.json</code> and <code>npm-shrinkwrap.json</code> files.</p>

<p>Depending on your set up, this should reduce the time taken to deploy Node projects. The basic usage is <code>npm-pkgr</code> instead of <code>npm install</code>, and <code>npm-pkgr --production</code> to use <code>npm-shrinkwrap.json</code>.</p>

<h3 id='promised_land'>Promised Land</h3>

<p>Promised Land (GitHub: <a href='https://github.com/FredyC/promised-land/'>FredyC / promised-land</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/promised-land'>promised-land</a>) provides a way of wrapping modules with an <code>EventEmitter</code> that allows you to use promises across your application.</p>

<p>For example, let&#8217;s say you&#8217;ve got a module that connects to a database. Once the connection is ready, it does this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Land</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;promised-land&#39;</span><span class='p'>);</span>
<span class='nx'>Land</span><span class='p'>.</span><span class='nx'>emit</span><span class='p'>(</span><span class='s1'>&#39;database:connected&#39;</span><span class='p'>,</span> <span class='nx'>db</span><span class='p'>);</span>
</code></pre>
</div>
<p>Any other module that needs to know when the database is ready can now do so with promises:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Land</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;promised-land&#39;</span><span class='p'>);</span>
<span class='nx'>Land</span><span class='p'>.</span><span class='nx'>promise</span><span class='p'>(</span><span class='s1'>&#39;database:connected&#39;</span><span class='p'>).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>db</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>doSomethingWithDatabase</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It also allows events to be repeated, in a stream-like way:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Land</span><span class='p'>.</span><span class='nx'>stream</span><span class='p'>(</span><span class='s1'>&#39;database:row&#39;</span><span class='p'>).</span><span class='nx'>onValue</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>val</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>doSomethingRepeatedly</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The project has tests and more examples in the readme.</p>

<h3 id='stashjs'>Stash.js</h3>

<p>Stash.js (GitHub: <a href='https://github.com/tadeuzagallo/stash.js'>tadeuzagallo / stash.js</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/stash.js'>stash.js</a>) by Tadeu Zagallo is a multilayer cache manager. That means you can define and use different storage systems for caching, based on &#8220;drivers&#8221;.</p>

<p>So far the author has added a driver for ephemeral storage and <code>localStorage</code> support for browsers.</p>

<p>Cache items have methods for determining cache miss, locking, and setting values:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>stash</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Stash</span><span class='p'>.</span><span class='nx'>Pool</span><span class='p'>();</span>
<span class='kd'>var</span> <span class='nx'>item</span> <span class='o'>=</span> <span class='nx'>stash</span><span class='p'>.</span><span class='nx'>getItem</span><span class='p'>(</span><span class='s1'>&#39;my/key/path&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>data</span> <span class='o'>=</span> <span class='nx'>item</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>();</span>

<span class='k'>if</span> <span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>isMiss</span><span class='p'>())</span> <span class='p'>{</span>
  <span class='nx'>item</span><span class='p'>.</span><span class='nx'>lock</span><span class='p'>();</span>
  <span class='nx'>data</span> <span class='o'>=</span> <span class='s1'>&#39;example&#39;</span><span class='p'>;</span>
  <span class='nx'>item</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>,</span> <span class='nx'>cacheDuration</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>What <code>lock</code> does here is dependent on the cache policy. There are four policies that are explained in the readme.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/22/dom4-ngfx">DOM4 Elements, ng-Fx</a></h2>
      <div class="meta">
        <span class="date">22 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/22/dom4-ngfx/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#dom">dom</a>
          
            <a href="/tags.html#queryAll">queryAll</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='dom4_elements'>DOM4 Elements</h3>

<p>DOM4 Elements (GitHub: <a href='https://github.com/barberboy/dom4-elements'>barberboy / dom4-elements</a>, License: <em>MIT</em>) by Ben Barber is a polyfill for <code>document.query</code> and <code>document.queryAll</code>, from the <a href='http://dom.spec.whatwg.org/#interface-parentnode'>DOM Level 4 ParentNode interface</a>.</p>

<p>Using <code>document.queryAll</code> returns a new class called <code>Elements</code>, which extends <code>Array.prototype</code> so you can do things like <code>document.queryAll(&#39;.classname&#39;).map(fn)</code>.</p>

<p>Browser support is <a href='https://ci.testling.com/barberboy/dom4-elements'>documented by Testling</a>, and the project includes a <a href='https://github.com/barberboy/dom4-elements/blob/master/test/index.js'>small test suite</a>.</p>

<h3 id='ngfx'>ng-Fx</h3>

<p><a href='http://hendrixer.github.io/'>ng-Fx</a> (GitHub: <a href='https://github.com/Hendrixer/ng-Fx'>Hendrixer/ng-Fx</a>, License: <em>MIT</em>) by Scott Moss is an AngularJS version of <a href='http://daneden.github.io/animate.css/'>Animate.css</a>.</p>

<p>You can use classes to apply effects, then directives to control their behaviour:</p>
<div class='highlight'><pre><code class='javascript'><span class='o'>&lt;</span><span class='nx'>ul</span> <span class='nx'>ng</span><span class='o'>-</span><span class='nx'>init</span><span class='o'>=</span><span class='s2'>&quot;foods=[&#39;apple&#39;, &#39;chips&#39;, &#39;muffin&#39;]&quot;</span><span class='o'>&gt;</span>
  <span class='o'>&lt;</span><span class='nx'>li</span> <span class='kr'>class</span><span class='o'>=</span><span class='s1'>&#39;fx-fade-down fx-easing-bounce&#39;</span> <span class='nx'>ng</span><span class='o'>-</span><span class='nx'>repeat</span><span class='o'>=</span><span class='s2'>&quot;food in foods&quot;</span><span class='o'>&gt;</span>
    
  <span class='o'>&lt;</span><span class='err'>/li&gt;</span>
<span class='o'>&lt;</span><span class='err'>/ul&gt;</span>
</code></pre>
</div>
<p>Some options are controlled by classes where I expected to see directives &#8211; I think the author has tried to use CSS as much as possible rather than using JavaScript to write out <code>style</code> tags to do the necessary styling. For example: <code>fx-speed-800</code> compared to <code>ng-fx-speed=&quot;800&quot;</code>. A hypothetical <code>ng-fx-speed</code> could accept any speed rather than predefined ones.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/21/ripplejs">Ripple.js</a></h2>
      <div class="meta">
        <span class="date">21 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/21/ripplejs/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#data-binding">data-binding</a>
          
            <a href="/tags.html#mmvm">mmvm</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <p><a href='http://ripplejs.github.io/'>Ripple.js</a> (GitHub: <a href='https://github.com/ripplejs/ripple'>ripplejs / ripple</a>, License: <em>MIT</em>) from Segment.io is a library for templating and data binding. It&#8217;s based around templates, and has a chainable API, allowing plugins to be added to components:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Person</span> <span class='o'>=</span> <span class='nx'>ripple</span><span class='p'>(</span><span class='s1'>&#39;&lt;div&gt;{{name}}&lt;/div&gt;&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>events</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>each</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>dispatch</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>person</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Person</span><span class='p'>({</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Tom&#39;</span>
<span class='p'>});</span>

<span class='nx'>person</span><span class='p'>.</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>);</span>
</code></pre>
</div>
<p>The plugins can add directives in a similar way to AngularJS: <a href='https://github.com/ripplejs/each'>take a look at each</a>, for example.</p>

<p>There&#8217;s a <a href='http://jsfiddle.net/anthonyshort/QGK3r/light/'>JSFiddle Markdown example</a> that uses a template embedded in a <code>script</code> element, and two plugins: <code>ripple.events</code> and <code>ripple.markdown</code>. The plugins allow changes to be observed on the <code>textarea</code> and Markdown is set to render using a directive on a <code>div</code> element.</p>

<p>One of the features that I like is the pattern for <a href='https://github.com/ripplejs/ripple/tree/master/docs/composing'>view composition</a>. Views can be embedded, and data will still be synced when it changes.</p>

<p>Also, the library seems <a href='https://github.com/ripplejs/ripple/tree/master/test'>well tested</a>, so you can get more usage ideas from the tests.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/18/chrome-extensions">Live Reloading Chrome Apps, Chrome Extensions with React, sendMessage Tutorial</a></h2>
      <div class="meta">
        <span class="date">18 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/18/chrome-extensions/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#chrome">chrome</a>
          
            <a href="/tags.html#extensions">extensions</a>
          
            <a href="/tags.html#browsers">browsers</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='live_reloading_chrome_apps'>Live Reloading Chrome Apps</h3>

<blockquote>
<p>The Chrome Store itself is a pile of rubbish apps with very few exceptions.</p>
</blockquote>

<p>Working with Chrome extensions and apps is pleasant enough in some ways &#8211; the JavaScript APIs are generally intuitive, and you can make native-feeling UIs without too much effort. However, the development experience feels a little bit dated and painful in places.</p>

<p>Konstantin Raev sent in <a href='https://medium.com/p/2a58d804c496'>Live Reloading Chrome Apps</a>, an article about using Gulp with Chrome apps. It shows how live reloading isn&#8217;t as easy as it could be, and how to fix it. There&#8217;s also a full example on GitHub: <a href='https://github.com/bestander/clock-chrome-app-livereload-example'>bestander / clock-chrome-app-livereload-example</a>.</p>

<h3 id='creating_chrome_extensions_with_react'>Creating Chrome Extensions with React</h3>

<p>Brandon Tilley sent in <a href='http://brandontilley.com/2014/02/24/creating-chrome-extensions-with-react.html'>Creating Chrome Extensions with React</a>:</p>

<blockquote>
<p>If you&#8217;re into client-side web development to any extent, you&#8217;ve probably heard of Facebook&#8217;s React library. I was working on a Chrome extension, and decided to see how well React fit in to the development I was doing.</p>
</blockquote>

<p>He also uses Browserify as well, which I&#8217;m interested in because I tried using RequireJS for sharing code between Chrome extensions and Firefox add-ons, and I struggled to get it to work in Firefox. My Firefox add-ons are using the <a href='https://wiki.mozilla.org/Labs/Jetpack'>Jetpack SDK</a> rather than the old XUL way.</p>

<h3 id='passing_data_around_in_chrome_extensions'>Passing data around in Chrome extensions</h3>

<p><a href='http://blog.papersapp.com/chrome-development-parent-and-child-windows/'>Passing data around in Chrome extensions</a> by Erica Salvaneschi is an introduction to using <code>chrome.runtime.sendMessage</code> and <code>addListener</code>:</p>

<blockquote>
<p>We wanted to get data from the current web page and then use it to populate a form that appears in a new window. It was easy to create a context menu item that triggered an event, but sending data based on the current page to the new window wasn&#8217;t obvious.</p>
</blockquote>

<p>You might find this useful if you&#8217;re just getting into Chrome extensions and want more concrete examples than what Google provides.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/17/code-studio">Browser Synths with Code Studio</a></h2>
      <div class="meta">
        <span class="date">17 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/17/code-studio/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#audio">audio</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/codestudio.png' />
  <small>Code Studio running <a href='http://studio.substack.net/polytropon?time=1397235711071'>polytropon</a>.</small>
</div>
<p><a href='http://studio.substack.net/'>Code Studio</a> (GitHub: <a href='https://github.com/substack/code-music-studio'>substack / code-music-studio</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/code-music-studio'>code-music-studio</a>) by substack is a tool for &#8220;designing musical algorithms&#8221;. It provides a browser-based interface that allows you to return functions that manipulate amplitudes. You can experiment and share sounds using <a href='http://studio.substack.net/'>studio.substack.net</a>, or install it with npm and run it locally.</p>

<p>If you want to find some code to play with, look at <a href='https://twitter.com/substack'>substack&#8217;s Twitter account</a>, or <a href='http://studio.substack.net/-/recent'>/-/recent</a>.</p>

<p>The audio API is based on <a href='https://www.npmjs.org/package/baudio'>baudio</a>, which works by accepting a function that takes a time value and returns an amplitude value between -1 and 1.</p>

<p>That means you can generate a sound just by running something like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>t</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='nx'>sin</span><span class='p'>(</span><span class='mi'>441</span><span class='p'>);</span>
  <span class='kd'>function</span> <span class='nx'>sin</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sin</span><span class='p'>(</span><span class='mi'>2</span> <span class='o'>*</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>PI</span> <span class='o'>*</span> <span class='nx'>t</span> <span class='o'>*</span> <span class='nx'>x</span><span class='p'>);</span> <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>That example creates a function called <code>sin</code> that generates values for a given pitch. Code Studio will render an oscilloscope so you can visualise the output as well as hear it. The waveform is rendered using <a href='https://www.npmjs.org/package/amplitude-viewer'>amplitude-viewer</a>, another module by substack that creates graphs with SVG.</p>

<p>If you&#8217;re interested in the server-side portion of the code, then take a look at <a href='https://github.com/substack/code-music-studio/blob/master/bin/cmd.js'>bin/cmd.js</a>. This uses Node&#8217;s <code>http</code> module, and <a href='https://www.npmjs.org/package/ecstatic'>ecstatic</a> for static assets.</p>

<p>I think my favourite example so far is <a href='http://studio.substack.net/polytropon?time=1397235711071'>polytropon</a>. It has a function called <code>Moog</code>, so you can&#8217;t go wrong!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/16/node-roundup">Node Roundup: Do We Need peerDependencies, lazy-install, Time Require</a></h2>
      <div class="meta">
        <span class="date">16 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/16/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#benchmarks">benchmarks</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='do_we_need_peerdependencies'>Do We Need peerDependencies?</h3>

<p>Isaac Schlueter <a href='https://twitter.com/izs/status/456211498503634944'>asked this question</a> on Twitter:</p>

<blockquote>
<p>Recently, peerDependencies has gotten more and more contentious. Srsly considering deprecation/removal. Thoughts? <a href='https://github.com/npm/npm/issues/5080#issuecomment-40545599'>github.com/npm/npm/issues/5080</a></p>
</blockquote>

<p>The discussion on Twitter and GitHub seems strongly for removing <code>peerDependencies</code>. I agree with it simply because I hate explaining how it works.</p>

<p>Eran Hammer made an <a href='https://github.com/npm/npm/issues/5080#issuecomment-40556757'>interesting point</a> about the idea of a <code>compatibleWith</code> property:</p>

<blockquote>
<p>What we need is compatibleWith concept that simply warns you when you are using bad combinations. I think we can rename peerDeps and with some minor adjustment keep the functionality without annoying everyone. Making it a warning sign instead of a blocking feature would remove the &#8220;hell&#8221; part and those who chose to ignore warnings (as many already do with node versions) can continue to ignore.</p>
</blockquote>

<h3 id='lazyinstall'>lazy-install</h3>

<p>If that isn&#8217;t enough npm craziness for you, then how about this? lazy-install (GitHub: <a href='https://github.com/adamrenklint/lazy-install'>adamrenklint / lazy-install</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/lazy-install'>lazy-install</a>) by Adam Renklint can be used to install dependencies based on &#8220;group&#8221; names.</p>

<p>Let&#8217;s say you wanted to specify dependencies for your production and test environments. Your <code>package.json</code> could look like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>
  <span class='s2'>&quot;name&quot;</span><span class='o'>:</span> <span class='s2'>&quot;myProject&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;lazyDependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;server&quot;</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s2'>&quot;express&quot;</span><span class='o'>:</span> <span class='s2'>&quot;4.0.0&quot;</span>
    <span class='p'>},</span>
    <span class='s2'>&quot;test&quot;</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s2'>&quot;mocha&quot;</span><span class='o'>:</span> <span class='s2'>&quot;1.18.2&quot;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Then in your code you can run <code>lazy.install</code> to trigger an <code>npm install</code> with the right options. In fact, the module itself is basically a wrapper around <code>npm</code>.</p>

<h3 id='time_require'>Time Require</h3>

<p><img src='/images/posts/timerequire.png' alt='Time Require' /></p>

<p>How much time did that <code>require</code> take to require? Now you can find out, with time-require! (GitHub: <a href='https://github.com/jaguard/time-require'>jaguard / time-require</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/time-require'>time-require</a>).</p>

<p>It shows the execution time for each module by changing <code>require</code>, and then displaying the elapsed time for each file once the <code>&#39;exit&#39;</code> event is emitted on the <code>process</code> object.</p>

<p>You can use it by adding a <code>require(&#39;time-require&#39;)</code> as the first line of your main script.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/15/vlex">Responsive SVG with VLEX</a></h2>
      <div class="meta">
        <span class="date">15 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/15/vlex/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#responsive">responsive</a>
          
            <a href="/tags.html#vlex">vlex</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/vlex.png' alt='VLEX' /></p>

<p>VLEX (GitHub: <a href='https://github.com/indus/VLEX'>indus / VLEX</a>, License: <em>MIT</em>) by Stefan Keim is a library for defining the logic necessary to resize SVG images. It works using a <code>vlex</code> attribute that controls how things are resized, and there&#8217;s also a <code>VLEX</code> function for initialising and updating elements.</p>

<p>A &#8220;vlexpression&#8221; contains property descriptions separated by semi-colons. Using a <code>$</code> allows predefined values to be referenced: <code>$x</code> is <code>element.clientWidth</code>, and <code>$cX</code> is <code>$x / 2</code> &#8211; the horizontal centre. Using a colon allows a value to be set: <code>key:value</code>.</p>

<p>Given those rules, you can <a href='http://rawgit.com/indus/VLEX/master/vlexamples/1_basic/1_circle.html'>centre a circle</a> with <code>cx:{$cX};cy:{$cY}</code>.</p>

<p>Internally it splits the expression with <code>String.prototype.split(&#39;;&#39;)</code>, and then splits on <code>:</code> to get the keys and values. It&#8217;s a fairly simple parser, but it seems small and flexible enough to do get some clever effects using SVG. Take a look at the examples in the readme to see what&#8217;s possible.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/14/reactive-elements">Reactive X-Tags</a></h2>
      <div class="meta">
        <span class="date">14 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/14/reactive-elements/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#elements">elements</a>
          
            <a href="/tags.html#xtag">xtag</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/reactiveelements.png' alt='Reactive Elements' /></p>

<p>Here&#8217;s a cool idea I haven&#8217;t seen before: <a href='https://github.com/PixelsCommander/ReactiveElements'>ReactiveElements with X-Tag</a>. <a href='https://github.com/x-tag/core'>X-Tag</a> is a library from Mozilla that uses JavaScript to provide support for the current W3 Web Components draft. This basically allows modern browsers to use custom elements:</p>

<blockquote>
<p>X-Tag allows you to easily create elements to encapsulate common behavior or use existing custom elements to quickly get the behavior you&#8217;re looking for.</p>
</blockquote>

<blockquote>
<p>X-Tag provides several powerful features that streamline element creation such as: Custom events and delegation, mixins, accessors, component lifecycle functions, pseudos and more.</p>
</blockquote>

<p>The <a href='https://github.com/PixelsCommander/ReactiveElements'>PixelsCommander / ReactiveElements</a> project by Denis Radin is a small MIT licensed library that builds on X-Tag so you can use it with <a href='http://facebook.github.io/react/'>React.js</a>.</p>

<p>First you create a React component definition:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>MyComponent</span> <span class='o'>=</span> <span class='nx'>React</span><span class='p'>.</span><span class='nx'>createClass</span><span class='p'>({</span>
  <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>props</span><span class='p'>.</span><span class='nx'>items</span><span class='p'>);</span>
    <span class='k'>return</span> <span class='o'>&lt;</span><span class='nx'>ul</span><span class='o'>&gt;&lt;</span><span class='nx'>li</span><span class='o'>&gt;</span><span class='nx'>React</span> <span class='nx'>content</span><span class='o'>&lt;</span><span class='err'>/li&gt;&lt;/ul&gt;;</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='nx'>xtag</span><span class='p'>.</span><span class='nx'>registerReact</span><span class='p'>(</span><span class='s1'>&#39;my-react-component&#39;</span><span class='p'>,</span> <span class='nx'>MyComponent</span><span class='p'>);</span>
</code></pre>
</div>
<p>And then you can use <code>my-react-component</code> in your HTML and see <code>items</code> if it has been specified as an attribute.</p>

<p>I like the idea of combining these two libraries, it has an AngularJS feel while embracing upcoming standards.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/11/bmean">The BMEAN Stack and Offline-First Design</a></h2>
      <div class="meta">
        <span class="date">11 Apr 2014</span>
        | <span class="author">By Daishi Kato</span>
        | <span class="comments"><a href="/2014/04/11/bmean/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#caching">caching</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
This is a guest post written by <a href='https://github.com/dai-shi'>Daishi Kato</a>.
</div>
<p>Many of you would know the MEAN stack, the software stack consisting of MongoDB, Express, AngularJS and Node. However, the BMEAN stack might be new to you. The B stands for <a href='http://www.breezejs.com/samples/zza'>Breeze</a>, a data management library with support for client caching.</p>

<p>The current trend in web development is mobile first design. Recently, the &#8220;offline first&#8221; approach got attention for contributing toward better mobile user experience. Breeze allows you to develop offline web applications easily thanks to support for querying the client&#8217;s cache.</p>

<p>Breeze provides a sample BMEAN application called Zza, but it&#8217;s not an offline application. I thought there could be a simpler but more practical application using <a href='https://github.com/dai-shi/social-cms-backend'>social-cms-backend</a>.</p>

<p>Social-cms-backend is Express middleware and it demonstrates how to develop a simple Twitter clone in a matter of minutes. I updated social-cms-backend so that it supports Breeze and you don&#8217;t have to code the server side logic.</p>

<p>Using the new social-cms-backend and the BMEAN stack, I developed a sample application called notes-app-sample. It&#8217;s an offline application with HTML5 cache manifest thanks to <a href='https://github.com/dai-shi/connect-cache-manifest'>connect-cache-manifest</a>.</p>

<p>The usage of the application is pretty straightforward: you write text which will be stored in <code>localStorage</code>. Once you login, you can synchronize data with MongoDB on the server. The login is handled by <a href='http://passportjs.org'>passport</a>, and currently it works with the Facebook strategy.</p>

<p>The source code of notes-app-sample is available <a href='https://github.com/dai-shi/notes-app-sample'>here</a> and the working application is available <a href='http://notesappsample-nodeangularapp.rhcloud.com/'>here</a>.</p>

<p>I hope these sample applications give you some ideas about how to use Breeze with your MEAN apps.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/10/cutjs">Game Graphics with CutJS</a></h2>
      <div class="meta">
        <span class="date">10 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/10/cutjs/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#html5">html5</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#2d">2d</a>
          
            <a href="/tags.html#games">games</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/cutjs.png' />
  <small>CutJS demos and examples.</small>
</div>
<p><a href='http://cutjs.org/'>CutJS</a> (GitHub: <a href='https://github.com/piqnt/cutjs/'>piqnt/cutjs</a>, License: <em>MIT</em>) is a new game graphics library by Ali Shakiba. It&#8217;s aimed at 2D graphics for cross-browser development, with support for desktop and mobile browsers.</p>

<p>The API is jQuery inspired, but because it works with the Canvas the author has introduced an interesting way of styling elements called &#8220;pinning&#8221;:</p>

<blockquote>
<p>A CutJS app consists of a tree of nodes, each node is pinned (transformed) against its parent and have zero, one or more image cutouts. Image cutouts comes from either image textures or Canvas drawing.</p>
</blockquote>

<blockquote>
<p>Each rendering cycle consists of ticking and painting the tree. On ticking nodes adjust themselves to recent updates and then on painting each node transforms according to its pinning, pastes its cutouts and then delegates to its children.</p>
</blockquote>

<p>Cut &#8220;apps&#8221; are created by calling <code>Cut</code> with a function, and then textures can be added and manipulated with tween animations and events.</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Create new app</span>
<span class='nx'>Cut</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>root</span><span class='p'>,</span> <span class='nx'>container</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Subscribe to Cut.Mouse</span>
  <span class='nx'>Cut</span><span class='p'>.</span><span class='nx'>Mouse</span><span class='p'>(</span><span class='nx'>root</span><span class='p'>,</span> <span class='nx'>container</span><span class='p'>);</span>

  <span class='c1'>// Set view box</span>
  <span class='nx'>root</span><span class='p'>.</span><span class='nx'>viewbox</span><span class='p'>(</span><span class='mi'>500</span><span class='p'>,</span> <span class='mi'>300</span><span class='p'>);</span>

  <span class='c1'>// Create an image node</span>
  <span class='nx'>Cut</span><span class='p'>.</span><span class='nx'>image</span><span class='p'>(</span><span class='s1'>&#39;base:box&#39;</span><span class='p'>).</span><span class='nx'>appendTo</span><span class='p'>(</span><span class='nx'>root</span><span class='p'>)</span>
    <span class='c1'>// on mouse click on this node</span>
    <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='nx'>Cut</span><span class='p'>.</span><span class='nx'>Mouse</span><span class='p'>.</span><span class='nx'>CLICK</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>ev</span><span class='p'>,</span> <span class='nx'>point</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// Tween scale values of this node</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>tween</span><span class='p'>().</span><span class='nx'>clear</span><span class='p'>().</span><span class='nx'>pin</span><span class='p'>({</span>
        <span class='nx'>scaleX</span><span class='o'>:</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>random</span><span class='p'>()</span> <span class='o'>+</span> <span class='mf'>0.5</span><span class='p'>,</span>
        <span class='nx'>scaleY</span><span class='o'>:</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>random</span><span class='p'>()</span> <span class='o'>+</span> <span class='mf'>0.5</span>
      <span class='p'>});</span>
      <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span>
    <span class='p'>});</span>
<span class='p'>});</span>

<span class='c1'>// Register an image texture</span>
<span class='nx'>Cut</span><span class='p'>.</span><span class='nx'>addTexture</span><span class='p'>({</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;base&#39;</span><span class='p'>,</span>
  <span class='nx'>imagePath</span><span class='o'>:</span> <span class='s1'>&#39;base.png&#39;</span><span class='p'>,</span>
  <span class='nx'>cutouts</span><span class='o'>:</span> <span class='p'>[</span>
    <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;box&#39;</span><span class='p'>,</span> <span class='nx'>x</span><span class='o'>:</span> <span class='mi'>0</span><span class='p'>,</span> <span class='nx'>y</span><span class='o'>:</span> <span class='mi'>0</span><span class='p'>,</span> <span class='nx'>width</span><span class='o'>:</span> <span class='mi'>30</span><span class='p'>,</span> <span class='nx'>height</span><span class='o'>:</span> <span class='mi'>30</span> <span class='p'>}</span>
  <span class='p'>]</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>There&#8217;s a cool <a href='http://play.cutjs.org/examples/p2js-asteroids/'>Asteroids game example</a> that shows off some of the main features of the library.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/09/node-roundup">Node Roundup: npm and Heartbleed, sipster</a></h2>
      <div class="meta">
        <span class="date">09 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/09/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#audio">audio</a>
          
            <a href="/tags.html#telephony">telephony</a>
          
            <a href="/tags.html#voip">voip</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='npm_and_heartbleed'>npm and Heartbleed</h3>

<p>The npm blog has an article about <a href='http://blog.npmjs.org/post/82107114489/npm-and-heartbleed'>npm and Heartbleed</a>:</p>

<blockquote>
<p>We started patching machines within 30 minutes of the revelation of the bug, and our last vulnerable machine was patched at 7.30am Pacific today.</p>
</blockquote>

<blockquote>
<p>There has been no evidence so far that our keys were compromised during this period, but nevertheless we are regenerating all our SSL keys anyway and will be rolling them out over the next couple of days (we are very cautious about testing and rolling out new certs since an earlier incident in which we broke a lot of older npm clients while doing so).</p>
</blockquote>

<h3 id='sipster'>sipster</h3>

<p>Brian White sent in sipster (GitHub: <a href='https://github.com/mscdex/sipster'>mscdex / sipster</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/sipster'>sipster</a>), a pjsip binding for Node. This is the basis for the SIP driver used by Asterisk 12+. He hasn&#8217;t yet been able to get a working build environment set up for Windows, but it should work for Unix systems.</p>

<p>Here&#8217;s a list of what Brian says it can do so far:</p>

<ul>
<li>Make and receive calls</li>

<li>Play either individual or a playlist of wav files (ulaw, alaw, or pcm)</li>

<li>Record audio to wav file (ulaw, alaw, or pcm)</li>

<li>Hook up audio streams from different calls (e.g. create your own conference or record a mix of streams to wav)</li>

<li>Adjust volume levels of audio streams</li>

<li>Detect/Send DTMF digits</li>

<li>Hold/un-hold</li>

<li>Call transfer</li>
</ul>

<p>The API is event based &#8211; for example: <code>call.on(&#39;dtmf&#39;, cb)</code>, and I think the C++ binding is a cool example of a Node native module: <a href='https://github.com/mscdex/sipster/blob/master/src/binding.cc'>src/binding.cc</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/08/angular-localize">AngularJS Localization</a></h2>
      <div class="meta">
        <span class="date">08 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/08/angular-localize/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#AngularJS">AngularJS</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Sebastian Tschan, also known as blueimp, is the author of the hugely popular <a href='http://blueimp.github.io/jQuery-File-Upload/'>jQuery-File-Upload</a> project. It turns out he also writes AngularJS modules. His recent AngularJS project is dedicated to localization, and works well with a Grunt task that builds locales:</p>

<ul>
<li><a href='https://github.com/blueimp/angular-localize'>angular-localize</a> (License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/angular-localize'>angular-localize</a>) provides a localization directive</li>

<li><a href='https://github.com/blueimp/grunt-locales'>grunt locales</a> (License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/grunt-locales'>grunt-locales</a>) parses <code>localize</code> attributes in HTML files</li>
</ul>

<p>By running <code>grunt locales:build</code> you can get a set of JavaScript locale files that can be used to help translate content.</p>

<p>The basic angular-localize directive is used by adding the <code>localize</code> attribute to a tag. The text in the element will be used as the translation key, but you can use <code>localize=&quot;key&quot;</code> to specify the key instead, which is useful if the final content hasn&#8217;t yet been copy edited.</p>

<p>The <code>localize</code> directive also observes <code>data-*</code> attributes and passes them as objects to translation functions, so data can be inserted into text dynamically.</p>

<p>There&#8217;s also a <code>localize</code> service for translating text in your JavaScript code, and there&#8217;s even a <code>localizeFactory</code> for creating your own attribute-based <code>localize</code> directives.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/07/avow">Avow-CI</a></h2>
      <div class="meta">
        <span class="date">07 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/07/avow/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#microsoft">microsoft</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/avow-demo.gif' />
  <small>Avow-CI.</small>
</div>
<p>I haven&#8217;t had good experiences with continuous integration systems. They seem to work fine for a few months until they go senile and I have to nuke and reinstall them. Kent Safranski sent in <a href='http://avow-ci.com/'>Avow-CI</a> (GitHub: <a href='https://github.com/Fluidbyte/avow-ci'>Fluidbyte / avow-ci</a>, License: <em>MIT</em>), an open source CI server that&#8217;s built on Node and MongoDB &#8211; hopefully this one will be different!</p>

<p>Avow supports Git web hooks, so you can automatically run tests when commits are pushed. It can also be configured to build a specific branch, and allows manual builds to be run.</p>

<p>To add a project to Avow you&#8217;ll need to add an <code>avow.json</code> file to the project&#8217;s root directory. This describes the build process as an array of tasks. Tasks are run with <code>require(&#39;child_process&#39;).spawn</code>, so you could technically trigger anything &#8211; I&#8217;d like to try it with <code>xcodebuild</code> if I have time.</p>

<p>Sometimes I wish CI servers were just cron jobs that check for a non-zero exit code, but I might be able to learn to like a simple RESTful web application if it can run for a few months without exploding. The fact Avow accepts an array of commands to run is nicely simple and flexible, but I&#8217;m not sure I like the idea of having to add an <code>avow.json</code> file to my projects.</p>

<p>One thing I like about Avow is the structure of the code: the &#8220;models&#8221; are just properties on <code>module.exports</code>, and the HTTP routing layer is also super simple. You should take a look if you make Node web applications.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/04/javascript-ocr">JavaScript OCR</a></h2>
      <div class="meta">
        <span class="date">04 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/04/javascript-ocr/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#ocr">ocr</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#emscripten">emscripten</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/jsocr.png' />
  <small>What should happen.</small>
</div>
<p>Konrad Dzwinel sent in a <a href='http://kdzwinel.github.io/JS-OCR-demo/'>JavaScript OCR demo</a>. It uses getUserMedia to get images from the camera, glfx.js and JCrop for user-driven image correction, and <a href='https://github.com/antimatter15/ocrad.js/'>ocrad.js</a> to handle the character recognition.</p>

<p>The <a href='http://antimatter15.github.io/ocrad.js/demo.html'>Ocrad.js demo</a> managed to recognise the text in my sample image. I noticed it didn&#8217;t work with white on black text &#8211; it had to be inverted for the correct text to be recognised.</p>
<div class='image'>
  <img src='/images/posts/heroocrad.png' />
  <small>Ocrad.js</small>
</div>
<p>Ocrad.js is an Emscripten-based translation of <a href='http://www.gnu.org/software/ocrad/ocrad.html'>Ocrad</a> by Antonio Diaz Diaz. Kevin Kwok, who put together Ocrad.js, also ported GOCR to JavaScript with Emscripten as <a href='https://github.com/antimatter15/gocr.js'>gocr.js</a>.</p>

<p><a href='http://jocr.sourceforge.net/'>GOCR</a> was started by Joerg Schulenburg, but has had other contributors since the original release back in 2000. Kevin compares both libraries and his experiences getting them running in JavaScript:</p>

<blockquote>
<p>Anyway, I tried to compile GOCR first and was immediately struck by how easy and painless it had been. I was on a roll, and decided to do Ocrad as well. It wasn&#8217;t particularly hard- sure it was slightly more involved but still hardly anything.</p>
</blockquote>

<p>He also mentions Tesseract, which is a popular OCR system but also widely known to be very large:</p>

<blockquote>
<p>In fact, what&#8217;s absolutely stunning is the sheer universality of Tesseract. Just about everything which claims to have text recognition as a feature is backed by it. At one point, I was hoping that Mathematica had some clever routine using morphology and symbolic new kinds of sciences and evolved automata pattern recognition. Nope! Nestled deep within the gigabytes of code lies the Chuck Testa of textadermies: Tesseract.</p>
</blockquote>

<p>I thought Konrad&#8217;s demo was cool &#8211; being able to edit the brightness, contrast, and crop the image was a nice use of client-side technology. However, so far I&#8217;ve had the problem Kevin mentioned: occasional blocks of nothing, or seemingly random text, then suddenly excellent results.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/03/winjs">Introducing WinJS</a></h2>
      <div class="meta">
        <span class="date">03 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/03/winjs/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#microsoft">microsoft</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/trywinjs.png' />
  <small>The WinJS documentation.</small>
</div>
<p><a href='http://buildwinjs.com'>WinJS</a> (GitHub: <a href='https://github.com/winjs/winjs'>winjs / winjs</a>, License: <em>Apache 2.0</em>) is a new UI-oriented library from Microsoft for developing cross-platform applications with JavaScript.</p>

<p>Microsoft have been pushing WinJS applications for a while as Windows 8 apps that are written with JavaScript instead of what we typically think of as .NET programming languages. This library is a set of UI controls that support desktop and mobile devices, and also some modern JavaScript APIs for things we&#8217;ve come to expect: promises, networking, data binding, and templates.</p>

<p>The UI style fits in with Windows 8, and although WinJS applications should run in modern browsers, there&#8217;s talk of specific support for Windows Phone 8 and other Microsoft platforms in the future.</p>

<p>There&#8217;s an <a href='http://blogs.windows.com/windows/b/buildingapps/archive/2014/04/02/extending-platform-commonality-through-universal-windows-apps.aspx'>announcement post on the Microsoft News Center</a>:</p>

<blockquote>
<p>Today we&#8217;re also announcing that Microsoft Open Technologies has brought the Windows Library for JavaScript (WinJS) cross-platform apps and is open sourcing it under the Apache 2.0 license. Find the source code on GitHub. Use this powerful Windows development framework to build high-quality web apps across a variety of browsers and devices beyond Windows, including Chrome, Firefox, Android, and iOS.</p>
</blockquote>

<p>I&#8217;ve been running examples on <a href='http://try.buildwinjs.com/'>try.buildwinjs.com/</a> to get a feel for the API style, and it makes heavy use of promises and traditional OO wrappers:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>WinJS</span><span class='p'>.</span><span class='nx'>Binding</span><span class='p'>.</span><span class='nx'>processAll</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>.</span><span class='nx'>querySelector</span><span class='p'>(</span><span class='s1'>&#39;#basicBindingOutput&#39;</span><span class='p'>),</span> <span class='nx'>bindingSource</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>done</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>WinJS</span><span class='p'>.</span><span class='nx'>log</span> <span class='o'>&amp;&amp;</span> <span class='nx'>WinJS</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Binding wireup complete&#39;</span><span class='p'>,</span> <span class='s1'>&#39;sample&#39;</span><span class='p'>,</span> <span class='s1'>&#39;status&#39;</span><span class='p'>);</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Some corners of the UI widgets still need aesthetic attention &#8211; the date and time pickers don&#8217;t look particularly great on Chrome on my Mac. But the APIs seem consistent and similar to other popular open source projects.</p>

<p>If you&#8217;re looking to make Windows 8-style applications and love JavaScript, then this is definitely worth following. The added benefit is you can run these web apps in non-Microsoft browsers as well.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/02/node-roundup">Node Roundup: Money and npm, Isaac Schlueter Interview, KOAN</a></h2>
      <div class="meta">
        <span class="date">02 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/02/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#realtime">realtime</a>
          
            <a href="/tags.html#npm">npm</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='nebulous_profit_meditations'>Nebulous Profit Meditations</h3>

<p>Isaac Schlueter wrote a long article on the npm blog about <a href='http://blog.npmjs.org/post/80997676347/nebulous-profit-meditations'>how npm Inc. will make money</a>. It has some hints about the future of advertising on npm:</p>

<blockquote>
<p>In my opinion, a good example of advertising done very well is the hosting page on WordPress.org. The services offered are beneficial to WordPress users, and are offered in such a way as to avoid distracting from the core product. The focused curation increases the value, and provides a strong incentive for the advertised products to maintain their quality or risk losing their position. We will be pursuing similarly focused and curated advertising partnerships on the npm website, in ways that benefit our users as well as our technology partners.</p>
</blockquote>

<p>And GitHub&#8217;s influence:</p>

<blockquote>
<p>When I describe our plans to people, they often nod and say, &#8220;Oh, the GitHub model, ok.&#8221; I&#8217;m sure that &#8220;public for free, private costs money&#8221; isn&#8217;t new with GitHub. However, pursuing that kind of model, while at the same time acknowledging that coding is a social activity, really was a master stroke in the history of software development. I&#8217;m very thankful that they&#8217;ve helped pave the way for people to recognize this pattern.</p>
</blockquote>

<h3 id='meet_the_face_behind_npm'>Meet the Face Behind npm</h3>

<p>The Modulus hosting company blog has an <a href='http://blog.modulus.io/isaac-interview'>interview with Isaac</a>, with some history prior to Node and npm:</p>

<blockquote>
<p>At Yahoo!, I grew increasingly frustrated that I had to switch back and forth between PHP and JavaScript, and Google had just open sourced their V8 engine, so I started trying to seriously get into doing JavaScript on the server. I got involved with the K7 project, and started studying web servers in more detail. There was also SpiderApe, and v8cgi, and a bunch of other projects. Narwhal caught my eye, and I spent a bunch of time messing with that.</p>
</blockquote>

<p>I seem to remember making IRC bots with Rhino and Java sockets, then Node came along and changed everything!</p>

<h3 id='koan'>KOAN</h3>

<p><a href='http://www.koanjs.com/login.html'>KOAN</a> (GitHub: <a href='https://github.com/soygul/koan'>soygul / koan</a>) by Teoman Soygul is a full stack boilerplate that uses Koa, AngularJS, Node, and MongoDB. Unlike other similar projects, this one has WebSocket features baked in.</p>

<p>A KOAN app uses JSON-RPC for syncing data with the server, and the readme has details on how to deploy this to Heroku (using <code>labs:enable websockets</code>).</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page3">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <strong>4</strong>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page5">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

