http://dailyjs.com/page8/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 02:06:57 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "184052-16a72-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 24551
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/08/node-roundup">Node Roundup: Faucet, Node Compiler, Tumblr</a></h2>
      <div class="meta">
        <span class="date">08 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/08/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#tap">tap</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='faucet'>Faucet</h3>

<p>Faucet (GitHub: <a href='https://github.com/substack/faucet'>substack / faucet</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/faucet'>faucet</a>) by Substack is a human-readable TAP summariser. You can pipe TAP text into the <code>faucet</code> command-line script, and it&#8217;ll generate prettier yet concise output.</p>

<p>If you type <code>faucet</code>, JavaScript files in <code>test/</code> will be executed using <code>tape</code> and then automatically piped through <code>faucet</code>.</p>

<p>Substack has created some nice animated gifs that show what the results look like under various conditions. One of them even shows Mocha using tap through the <code>-R tap</code> command-line option.</p>

<h3 id='node_compiler'>Node Compiler</h3>

<p><img src='/images/posts/nodecompiler.png' alt='Node Compiler' /></p>

<p>Sonny Lazuardi sent in <a href='http://sonnylab.com/api/compiler'>Node Compiler</a> (GitHub: <a href='https://github.com/sonnylazuardi/node-compiler'>sonnylazuardi / node-compiler</a>, License: <em>MIT</em>), a web-based tool for building C++. It uses <code>g++</code> with <a href='https://github.com/mgutz/execSync'>execSync</a>, wrapped up with an Express-based API.</p>

<p>The web interface uses the Ace editor, which supports traditional editor features like syntax highlighting. I think it&#8217;s quite an audacious idea, but it might be a little dangerous to leave on public servers.</p>

<h3 id='tumblr'>Tumblr</h3>

<p><a href='http://meritt.github.io/node-tumblr/'>node-tumblr</a> (GitHub: <a href='https://github.com/meritt/node-tumblr'>meritt / node-tumblr</a>, npm: <a href='https://github.com/meritt/node-tumblr'>tumblr</a>) by Alexey Simonenko is a Tumblr API wrapper for Node. It supports OAuth, and allows you to query posts, links, answers, and the other resources Tumblr provides.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/07/gulp-lazy-bowercopy">Gulp, bLazy, grunt-bowercopy</a></h2>
      <div class="meta">
        <span class="date">07 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/07/gulp-lazy-bowercopy/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#bower">bower</a>
          
            <a href="/tags.html#grunt">grunt</a>
          
            <a href="/tags.html#build">build</a>
          
            <a href="/tags.html#images">images</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='gulp'>Gulp</h3>

<p><img src='/images/posts/gulp.png' alt='Gulp' /></p>

<p>Last night I was reading <a href='http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/'>a post about Gulp</a> by Martin Genev. Martin traces the appearance of Gulp into the JavaScript community, through GitHub comments and Tweets.</p>

<p>Apparently <a href='http://gulpjs.com/'>Gulp</a> is a new build system made by <a href='https://github.com/wearefractal'>Fractal</a>, a Node consultancy with several popular Node modules under their collective belts.</p>

<p>Gulp is built around streams, so it feels more like idiomatic Node. You can pipe files through processors, so if you had a set of LESS files you could convert them into CSS with something like <code>gulp.src(&#39;less/*.less&#39;).pipe(less()).pipe(minify()).pipe(gulp.dest(&#39;styles/screen.css&#39;))</code>. It supports tasks as a unit of work, and tasks can have names and dependencies.</p>

<p>The project has 13 contributors already &#8211; most of the work is by <a href='https://github.com/Contra'>Eric Schoffstall</a> who you&#8217;ll see all over Fractal&#8217;s other projects. It has tests written with Mocha, and some decent documentation already.</p>

<h3 id='blazy'>bLazy</h3>

<p><a href='http://dinbror.dk/blazy/'>bLazy</a> (GitHub: <a href='https://github.com/dinbror/blazy/'>dinbror / blazy</a>) by Bjoern Klinggaard is a lazy loading image script. It doesn&#8217;t have any dependencies, and supports callbacks for loading failures:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>bLazy</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Blazy</span><span class='p'>({</span>
  <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>ele</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='p'>},</span>
  <span class='nx'>error</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>ele</span><span class='p'>,</span> <span class='nx'>msg</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>msg</span> <span class='o'>===</span> <span class='s1'>&#39;missing&#39;</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// Data-src is missing</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>msg</span> <span class='o'>===</span> <span class='s1'>&#39;invalid&#39;</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// Data-src is invalid</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>There&#8217;s a <a href='http://dinbror.dk/blog/blazy/'>blog post about bLazy</a> that documents the full API.</p>

<h3 id='gruntbowercopy'>grunt-bowercopy</h3>

<p>I seem to waste a lot of time detangling Bower dependencies to make my client-side builds more efficient. Timmy Willison may have solved this with grunt-bowercopy (GitHub: <a href='https://github.com/timmywil/grunt-bowercopy'>timmywil / grunt-bowercopy</a>, License: <em>MIT</em>). It allows you to specify where dependencies should go, and can reduce the amount of duplication when creating builds.</p>

<p>It looks like it works the way I expect Bower dependency management to work in Grunt, so I&#8217;m going to go back and look at my Grunt/Bower projects to see if I can clean then up with this.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/06/lukis-backbonecontroller-lr-drag-src">Lukis, Backbone.Controller, lrDragNDrop</a></h2>
      <div class="meta">
        <span class="date">06 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/06/lukis-backbonecontroller-lr-drag-src/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#types">types</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='lukis'>Lukis</h3>

<p><a href='http://keripix.github.io/lukis/build/index.html'>Lukis</a> (GitHub: <a href='https://github.com/keripix/lukis'>keripix / lukis</a>, License: <em>MIT</em>) by Keripix is an experimental image editor, built with Twitter&#8217;s <a href='http://twitter.github.io/flight/'>Flight</a> and <a href='http://fabricjs.com/'>Fabric.js</a>.</p>

<p>It&#8217;s event driven, so each main drawing component is nicely decoupled. This is based on Flight&#8217;s API, where behavior is mapped to DOM nodes.</p>

<h3 id='backbonecontroller'>Backbone.Controller</h3>

<p>Backbone.Controller (GitHub: <a href='https://github.com/artyomtrityak/backbone.controller'>artyomtrityak / backbone.controller</a>, License: <em>MIT</em>) by Artyom Trityak is a Backbone controller that supports declarative routes. It makes Backbone feel more like traditional MVC, which may appeal to you if you&#8217;re brainwashed by other MVC frameworks.</p>

<p>Artyom has included some documentation showing how to bind routes using <code>Backbone.Controller.extend</code>, and there&#8217;s also a RequireJS AMD snippet so you can get started quickly.</p>

<h3 id='lrdragndrop'>lrDragNDrop</h3>

<p><a href='http://lorenzofox3.github.io/lrDragNDrop/'>lrDragNDrop</a> (GitHub: <a href='https://github.com/lorenzofox3/lrDragNDrop'>lorenzofox3 / lrDragNDrop</a>, License: <em>MIT</em>) by Laurent Renard is an AngularJS module for managing collections of items using drag and drop.</p>

<p>You can use it as a directive, and load it with <code>angular.module(&#39;myApp&#39;,[&#39;lrDragNdrop&#39;])</code>. Items can be dragged from one collection to another, copied, and sorted.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/03/orbit-viewer-earhorn">Orbit Viewer, Earhorn</a></h2>
      <div class="meta">
        <span class="date">03 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/03/orbit-viewer-earhorn/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#space">space</a>
          
            <a href="/tags.html#instrumentation">instrumentation</a>
          
            <a href="/tags.html#debugging">debugging</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='orbit_viewer'>Orbit Viewer</h3>

<p><img src='/images/posts/orbitviewer.png' alt='Orbit Viewer' /></p>

<p><a href='http://orbits.wthr.us/'>Orbit Viewer</a> is a <a href='http://www.chromeexperiments.com/detail/orbit-viewer/?f=webgl'>Chrome Experiment</a> by Kevin Gill that helps visualise the orbits of comets and satellites. You can watch the famous comet Shoemaker–Levy 9, or see the current position of the International Space Station. It should work with most WebGL capable browsers.</p>

<blockquote>
<p>A sort of &#8220;Where are they now&#8221; for spacecraft and comets: Check out realtime positions, along with historical and projected flight paths of our solar system&#8217;s trailblazing spacecraft and comets. All in a zoomable/rotatable 3D interface. Using historical and real-time trajectory information for NASA&#8217;s JPL Horizons system, and in-browser WebGL and Three.js rendering.</p>
</blockquote>

<h3 id='earhorn'>Earhorn</h3>

<p>Earhorn (GitHub: <a href='https://github.com/omphalos/earhorn'>omphalos / earhorn</a>, License: <em>MIT</em>) by &#8220;omphalos&#8221; is a library for instrumenting JavaScript. You pass <code>earhorn$</code> a label and a function, and then you can view the function as the values change.</p>

<p>The <a href='http://omphalos.github.io/earhorn/index.html#/iframe=examples/mouse.html'>mouse example</a> shows how this works: the source for a jQuery <code>mousemove</code> listener is displayed, and whenever you move the mouse the integer values for the current coordinates will be reflected in real time.</p>

<p>An iframe is used that loads the <code>earhorn/index.html</code> page which knows how to display an instrumented version of the function. Internally, Earhorn uses <a href='http://esprima.org/'>Esprima</a> to generate an abstract syntax tree that is manipulated to allow the code to be observed.</p>

<p>It reminds me a little bit of the <a href='http://www.chris-granger.com/2013/08/22/light-table-050/'>Watches feature in Light Table</a>, and some of the recent improvements to WebKit Inspector.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/02/recipe-for-express-configuration">Recipe for Express Configuration Files</a></h2>
      <div class="meta">
        <span class="date">02 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/02/recipe-for-express-configuration/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#configuration">configuration</a>
          
            <a href="/tags.html#recipes">recipes</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Express has a few helper methods that support configuration. There are three pairs of methods: <code>get</code> and <code>set</code> for setting values, <code>enable</code> and <code>disable</code> for toggling boolean options, and <code>enabled</code> and <code>disabled</code> for testing boolean options. Options can be set based on the current environment by using the <code>configure</code> method.</p>

<p>Here&#8217;s an example of these methods:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>express</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;express&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>express</span><span class='p'>();</span>
<span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>);</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;title&#39;</span><span class='p'>,</span> <span class='s1'>&#39;DailyJS&#39;</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;title&#39;</span><span class='p'>),</span> <span class='s1'>&#39;DailyJS&#39;</span><span class='p'>);</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='s1'>&#39;production&#39;</span><span class='p'>,</span> <span class='s1'>&#39;staging&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// &#39;emails&#39; is an internal setting I&#39;ve made up</span>
  <span class='c1'>// It could be used to only send emails from certain environments</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>enable</span><span class='p'>(</span><span class='s1'>&#39;emails&#39;</span><span class='p'>);</span>
  <span class='nx'>assert</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>enabled</span><span class='p'>(</span><span class='s1'>&#39;emails&#39;</span><span class='p'>));</span>
<span class='p'>});</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='s1'>&#39;test&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>disable</span><span class='p'>(</span><span class='s1'>&#39;emails&#39;</span><span class='p'>);</span>
  <span class='nx'>assert</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>disabled</span><span class='p'>(</span><span class='s1'>&#39;emails&#39;</span><span class='p'>));</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>configure</code> method is based on <code>process.env.NODE_ENV</code>, which is available in <code>app.get(&#39;env&#39;)</code>. If you access it through <code>app.get</code> you&#8217;ll see a default of <code>&#39;development&#39;</code> rather than <code>undefined</code>. When you deploy your application you&#8217;ll want to make sure the <code>NODE_ENV</code> environmental variable is set to <code>staging</code> or <code>production</code>. How this is done is based on operating system or cloud provider &#8211; with Heroku it would be <code>heroku config:add NODE_ENV=production</code>.</p>

<p>These methods are useful, but sometimes you want to store settings in configuration files. It depends on the type of project you&#8217;re working on, but most of the commercial projects I&#8217;ve worked on required configuration files.</p>

<p>I use JSON as the format for these files because it&#8217;s easy to write and parse in Node projects. You don&#8217;t even need to use <code>JSON.parse</code>, you can just use <code>require</code>. I like to use a configuration file for each environment, so I usually end up with a directory like this:</p>
<div class='highlight'><pre><code class='text'>config/development.json
config/production.json
config/test.json
</code></pre>
</div>
<p>You can load one of these files with <code>require(&#39;config/development.json&#39;)</code>, but you can go a step further by using an <code>index.js</code> file:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>development</span><span class='o'>:</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./development.json&#39;</span><span class='p'>),</span>
  <span class='nx'>production</span><span class='o'>:</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./production.json&#39;</span><span class='p'>),</span>
  <span class='nx'>test</span><span class='o'>:</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./test.json&#39;</span><span class='p'>)</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Now you can use <code>var config = require(&#39;./config&#39;)</code> elsewhere in your project. However, because <code>process.env.NODE_ENV</code> gets set, we can simplify that <code>index.js</code> file even further:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./&#39;</span> <span class='o'>+</span> <span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>NODE_ENV</span> <span class='o'>||</span> <span class='s1'>&#39;development&#39;</span><span class='p'>)</span> <span class='o'>+</span> <span class='s1'>&#39;.json&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Now <code>require(&#39;./config&#39;)</code> will return an object that contains the configuration for the current environment. I use this to do things like turn off AWS emails in my unit tests, but leave them on for the production system. By exploiting the design of Node&#8217;s module system you basically get configuration files for free.</p>

<p>This might not be the best solution for every project. The <a href='https://npmjs.org/package/config'>config</a> module by Loren West supports YAML files, and <a href='https://npmjs.org/package/nconf'>nconf</a> from flatiron is hierarchical &#8211; settings can be passed in as command-line options, from the environment, or from a file, and used based on precedence. It can also store settings in databases like Redis.</p>

<p>How do you configure your Express projects?</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/01/node-roundup">Node Roundup: 0.11.10, Ducky, Test-driving a Node.JS API</a></h2>
      <div class="meta">
        <span class="date">01 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/01/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#types">types</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='node_01110'>Node 0.11.10</h3>

<p><a href='http://blog.nodejs.org/2013/12/31/node-v0-11-10-unstable/'>Node 0.11 is now pushing double figures</a>. The three main dependencies have been updated (http_parser, uv, v8), and the core modules have a lot of fixes.</p>

<h3 id='ducky'>Ducky</h3>

<p><a href='http://duckyjs.com/'>Ducky</a> (GitHub: <a href='https://github.com/rse/ducky'>rse / ducky</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/ducky'>ducky</a>) by Ralf S. Engelschall is a library for querying and validating objects.</p>

<p>The <code>ducky.select</code> method accepts an object and a &#8220;path&#8221; &#8211; this path is based on dot notation. The <code>ducky.validate</code> method accepts an object and a string representation of its types. The validation syntax is based on JSON with some regular expression hints.</p>

<p>Ralf has included tests based on <a href='https://npmjs.org/package/chai'>Chai</a>, and you can also use this module in client-side projects.</p>

<h3 id='testdriving_a_nodejs_api'>Test-driving a Node.JS API</h3>

<p><a href='http://www.jorisooms.be/testing-your-node-api-with-supertest/'>Test-driving a Node.JS API</a> by Joris Ooms is a blog post about setting up a test-driven project based on Express, SuperTest, and Mocha.</p>

<p>At the end he says:</p>

<blockquote>
<p>Often, routes are locked behind authentication (with, for example, PassportJS). We can test these just as easily with supertest, through its lower-level module superagent. I will cover this in a future blog post.</p>
</blockquote>

<p>I think he&#8217;s going to talk about the technique I use for testing my web applications, where authentication is handled with <a href='https://github.com/visionmedia/superagent'>SuperAgent</a> and cookies. It&#8217;s a bit awkward to set up, so it&#8217;ll be interesting to see what he says.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/31/angularjs">AngularJS Roundup: ngDialog.js, ocLazyLoad, angular-validation</a></h2>
      <div class="meta">
        <span class="date">31 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/31/angularjs/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#validation">validation</a>
          
            <a href="/tags.html#CoffeeScript">CoffeeScript</a>
          
            <a href="/tags.html#modal">modal</a>
          
            <a href="/tags.html#ui">ui</a>
          
        </span>
      </div>
      <div class="preview">
        <p>People keep sending me AngularJS scripts to write about, so I&#8217;ve collected a few together to start a probably infrequent AngularJS Roundup. This week we&#8217;ve got three scripts to talk about, and the first is ngDialog.js.</p>

<h3 id='ngdialogjs'>ngDialog.js</h3>

<p><a href='http://likeastore.github.io/ngDialog/'>ngDialog.js</a> (GitHub: <a href='https://github.com/likeastore/ngDialog'>likeastore / ngDialog</a>, License: <em>MIT</em>) by Dmitri Voronianski is a modal dialog and popover provider. You can load it and display a dialog like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;exampleApp&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;ngDialog&#39;</span><span class='p'>]);</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>controller</span><span class='p'>(</span><span class='s1'>&#39;MainCtrl&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>$scope</span><span class='p'>,</span> <span class='nx'>ngDialog</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>clickToOpen</span> <span class='o'>=</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>ngDialog</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>({</span> <span class='nx'>template</span><span class='o'>:</span> <span class='s1'>&#39;popupTmpl.html&#39;</span> <span class='p'>});</span>
  <span class='p'>};</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The markup for the dialog can be a string, or loaded from a template:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;script </span><span class='na'>type=</span><span class='s'>&quot;text/ng-template&quot;</span> <span class='na'>id=</span><span class='s'>&quot;templateId&quot;</span><span class='nt'>&gt;</span>
  <span class='o'>&lt;</span><span class='nx'>h1</span><span class='o'>&gt;</span><span class='nx'>Template</span> <span class='nx'>heading</span><span class='o'>&lt;</span><span class='err'>/h1&gt;</span>
  <span class='o'>&lt;</span><span class='nx'>p</span><span class='o'>&gt;</span><span class='nx'>Content</span> <span class='nx'>goes</span> <span class='nx'>here</span><span class='o'>&lt;</span><span class='err'>/p&gt;</span>
<span class='nt'>&lt;/script&gt;</span>
</code></pre>
</div>
<p>You can even use the <code>ng-dialog</code> directive. The project comes with two default themes, and you can use one of those to get started creating your own. The default theme has CSS animations and media queries.</p>

<h3 id='oclazyload'>ocLazyLoad</h3>

<p><a href='http://blog.getelementsbyidea.com/load-a-module-on-demand-with-angularjs/'>ocLazyLoad</a> (GitHub: <a href='https://github.com/ocombe/ocLazyLoad'>ocombe / ocLazyLoad</a>) by Olivier Combe is a module for lazy loading dependencies in AngularJS. It&#8217;s a service provider that allows you to load files with promises, like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$ocLazyLoad</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>({</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;TestModule&#39;</span><span class='p'>,</span>
  <span class='nx'>files</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;testModule.js&#39;</span><span class='p'>]</span>
<span class='p'>}).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;done&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The blog post explains how the whole thing works, with detailed examples and explanations of how AngularJS loads modules.</p>

<blockquote>
<p>Since the modules can only be loaded on startup and the application can only be launched using the <code>ng-app</code> directive, if we can find the app module, we can get the complete list of all loaded modules and dependencies.</p>
</blockquote>

<h3 id='angular_validation'>Angular Validation</h3>

<p><a href='http://huei90.github.io/angular-validation/'>Angular Validation</a> (GitHub: <a href='https://github.com/huei90/angular-validation'>huei90 / angular-validation</a>) by Huei Tan is a set of form validation directives. It supports various validation methods &#8211; watch, blur, or submit, so you can show errors when it makes sense for your application.</p>

<p>It has some built in validation types, but you can add your own in JavaScript by loading the <code>validation</code> provider, and then adding new validation &#8220;expressions&#8221;. Expressions are loaded based on the <code>validator</code> attribute. The readme has an example of how to do this, with the <code>huei</code> validator.</p>

<h3 id='angularjs_with_coffeescript'>AngularJS with CoffeeScript</h3>

<p>Finally, Elad Ossadon sent in an article about making AngularJS classes work better with CoffeeScript: <a href='http://www.devign.me/angular-dot-js-coffeescript-controller-base-class/'>Angular.js CoffeeScript Controller Base Class</a>.</p>

<p>It&#8217;s a fairly short post with a base class snippet and an example controller module.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/30/mean-survey-visualisations">Mean, Survey Visualisations</a></h2>
      <div class="meta">
        <span class="date">30 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/30/mean-survey-visualisations/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#mean">mean</a>
          
            <a href="/tags.html#survey">survey</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='mean'>Mean</h3>

<p>You want to build a web application, and you need a database. You can write JavaScript, but you&#8217;re not yet completely comfortable with Node. What do you do?</p>

<p>I wrote about <a href='http://www.manning.com/sholmes/'>Getting MEAN</a> recently, a book about building web applications with MongoDB and Express. If you&#8217;re interested in this approach, a quick way to get started is <a href='http://mean.io/'>Mean</a> (GitHub: <a href='https://github.com/linnovate/mean'>linnovate / mean</a>, License: <em>MIT</em>), a module that collects everything you need together. It even includes AngularJS and Bootstrap, so you get a solid interface out of the box.</p>

<p>If you already understand the MVC pattern, and use AngularJS, then this is definitely a quick way to get started. It&#8217;s also a handy way of getting experiments up and running quickly, which is a great way to learn.</p>

<h3 id='survey_visualisations'>Survey Visualisations</h3>

<p><img src='/images/posts/surveyvis.png' alt='Survey Visualisations' /></p>

<p>Konrad Dzwinel sent in these <a href='http://kdzwinel.github.io/dailyjs-survey-sankey-diagrams/'>visualisations of the DailyJS survey</a>. It allows you to see how answers to one question map to another. This is cool because I wanted to compare &#8220;What type of JavaScript do you write?&#8221; to &#8220;Where do you use JavaScript?&#8221; &#8211; I was expecting to see a lot of people writing side projects for the server at home, but the split is pretty even.</p>

<p>The visualisations are powered by <a href='http://d3js.org/'>D3.js</a>, and Bootstrap has been used as well.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/27/jsmess">JavaScript MESS and the Internet Archive</a></h2>
      <div class="meta">
        <span class="date">27 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/27/jsmess/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#emulators">emulators</a>
          
            <a href="/tags.html#emscripten">emscripten</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/2600.png' alt='Atari 2600' /></p>

<blockquote>
<p>if you program and want any longevity to your work, make a game. all else recycles, but people rewrite architectures to keep games alive. &#8211; <em>Why the Lucky Stiff</em></p>
</blockquote>

<p>Archive.org has a section dedicated to software. Inside you&#8217;ll find <a href='https://archive.org/details/consolelivingroom'>The Internet Archive Console Living Room</a>, which has details on some major games consoles from the late 70s and 1980s, including the <a href='https://archive.org/details/atari_2600_library'>Atari 2600</a> and the <a href='https://archive.org/details/coleco_colecovision_library'>ColecoVision</a>.</p>

<p>The great thing about this project is they&#8217;re trying to keep old software alive. You can browse through titles and play them in a browser. This is powered by <a href='http://www.archiveteam.org/index.php?title=Javascript_Mess'>jsmess</a> (GitHub: <a href='https://github.com/jsmess/jsmess'>jsmess / jsmess</a>), an Emscripten-based emulator derived from <a href='http://www.mess.org/'>MESS</a>:</p>

<blockquote>
<p>The JAVASCRIPT MESS project is a porting of the MESS emulator, a program that emulates hundreds of machine types, into the JavaScript language. The MESS program can emulate (or begin to emulate) a majority of home computers, and continues to be improved frequently. By porting this program into the standardized and cross-platform JavaScript language, it will be possible to turn computer history and experience into the same embeddable object as movies, documents, and audio.</p>
</blockquote>

<p>Running a game binary requires a suitable BIOS, but the groundwork for lots of systems has been added to MESS:</p>

<blockquote>
<p>MESS and MAME were started over a decade ago to provide ubiquitous, universal emulation of arcade/gaming machines (MAME) and general computer hardware (MESS). While specific emulation implementations exist that do specific machines better than MAME/MESS, no other project has the comprehensiveness and modularity. Modifications are consistently coming in, and emulation breadth and quality increases over time. In the case of MAME, pages exist listing machines it does not emulate.</p>
</blockquote>

<p>Over the last two years there&#8217;s been a flood of new browser-based emulators, supporting everything from <a href='http://scriptedamigaemulator.net/readme.htm'>the Amiga</a> to the <a href='https://github.com/jpfau/gbajs'>Game Boy Advance</a>. Part of what makes these project possible is recent technologies like Canvas, WebGL, WebAudio, and FileReader. But even seemingly less buzzwordy APIs like typed arrays can help get old games running smoothly.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/26/node-roundup">Node Roundup: 0.10.24, irc-message-stream, 100% Uptime</a></h2>
      <div class="meta">
        <span class="date">26 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/26/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#security">security</a>
          
            <a href="/tags.html#talks">talks</a>
          
            <a href="/tags.html#slides">slides</a>
          
            <a href="/tags.html#irc">irc</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='node_01024_released'>Node 0.10.24 Released</h3>

<p><a href='http://blog.nodejs.org/2013/12/19/node-v0-10-24-stable/'>Node 0.10.24 was released</a> soon after 0.10.23. It updates uv and npm, but presumably this release was due to <a href='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6639'>CVE-2013-6639</a> and <a href='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6640'>CVE-2013-6640</a>. These are security related patches for V8:</p>

<blockquote>
<p>&#8230; allows remote attackers to cause a denial of service (out-of-bounds read) via JavaScript code that sets a variable to the value of an array element with a crafted index</p>
</blockquote>

<p>If you run <a href='https://code.google.com/p/v8/source/browse/branches/bleeding_edge/test/mjsunit/regress/regress-crbug-319835.js?spec=svn17801&amp;r=17801'>this example</a> in Node 0.10.22 you should see a segfault.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>size</span> <span class='o'>=</span> <span class='mh'>0x20000</span><span class='p'>;</span>
<span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Float64Array</span><span class='p'>(</span><span class='nx'>size</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>training</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Float64Array</span><span class='p'>(</span><span class='mi'>10</span><span class='p'>);</span>

<span class='kd'>function</span> <span class='nx'>store</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>,</span> <span class='nx'>index</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>offset</span> <span class='o'>=</span> <span class='mh'>0x20000000</span><span class='p'>;</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='mi'>1</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>a</span><span class='p'>[</span><span class='nx'>index</span> <span class='o'>+</span> <span class='nx'>offset</span><span class='p'>]</span> <span class='o'>=</span> <span class='mh'>0xcc</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>}</span>

<span class='nx'>store</span><span class='p'>(</span><span class='nx'>training</span><span class='p'>,</span> <span class='o'>-</span><span class='mh'>0x20000000</span><span class='p'>);</span>
<span class='nx'>store</span><span class='p'>(</span><span class='nx'>training</span><span class='p'>,</span> <span class='o'>-</span><span class='mh'>0x20000000</span> <span class='o'>+</span> <span class='mi'>1</span><span class='p'>);</span>
<span class='nx'>store</span><span class='p'>(</span><span class='nx'>training</span><span class='p'>,</span> <span class='o'>-</span><span class='mh'>0x20000000</span><span class='p'>);</span>
<span class='nx'>store</span><span class='p'>(</span><span class='nx'>training</span><span class='p'>,</span> <span class='o'>-</span><span class='mh'>0x20000000</span> <span class='o'>+</span> <span class='mi'>1</span><span class='p'>);</span>

<span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='o'>-</span><span class='mh'>0x20000000</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='o'>-</span><span class='mh'>0x20000000</span> <span class='o'>+</span> <span class='nx'>size</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>store</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>,</span> <span class='nx'>i</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='ircmessagestream'>irc-message-stream</h3>

<p>irc-message (GitHub: <a href='https://github.com/expr/irc-message'>expr / irc-message</a>, License: <em>BSD 2-Clause</em>, npm: <a href='https://npmjs.org/package/irc-message'>irc-message</a>) by <a href='https://fionn.co/'>Fionn Kelleher</a> is a small parser that outputs objects based on RFC1459. The author has used it to create <a href='https://github.com/expr/irc-message-stream'>irc-message-stream</a>, which is a transform stream.</p>

<p>That means you can take a socket connection to an IRC server and pipe it through your own stream handlers:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>net</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;net&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>MessageStream</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;irc-message-stream&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>messageStream</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>MessageStream</span><span class='p'>();</span>

<span class='nx'>messageStream</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;line&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>line</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Raw line:&#39;</span><span class='p'>,</span> <span class='nx'>line</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>messageStream</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;data&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Parsed message:&#39;</span><span class='p'>,</span> <span class='nx'>JSON</span><span class='p'>.</span><span class='nx'>stringify</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>));</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>socket</span> <span class='o'>=</span> <span class='nx'>net</span><span class='p'>.</span><span class='nx'>connect</span><span class='p'>(</span><span class='mi'>6667</span><span class='p'>,</span> <span class='s1'>&#39;irc.freenode.net&#39;</span><span class='p'>);</span>
<span class='nx'>socket</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>messageStream</span><span class='p'>);</span>
</code></pre>
</div>
<p>I think this is a great way to handle IRC in Node &#8211; taking advantage of the newer streams API seems a lot more idiomatic than other approaches that I&#8217;ve seen (and made!).</p>

<h3 id='towards_100_uptime_with_node'>Towards 100% Uptime with Node</h3>

<p>William sent in his slides for a talk called <a href='http://sandinmyjoints.github.io/towards-100-pct-uptime'>Towards 100% Uptime with Node</a>. The slides cover the difficulties of handling uncaught exceptions in a cluster of Node processes, and ensuring that every request has a response, even if it&#8217;s to report an error.</p>

<p>One of the tips he mentions is to be able to generate errors on demand for development and staging. I do this in my tests &#8211; if critical paths are expected to throw exceptions, emit <code>&#39;error&#39;</code> events, or return error objects to callbacks, then all of these eventualities should be hit as part of automated testing.</p>

<p>The Node applications I work on for my day job are hosted on Heroku, and I&#8217;ve found you have to be extremely careful with code that throws errors and causes the process to stop. Sometimes Heroku gets confused about the state of a process and won&#8217;t gracefully restart it, so a worker just hangs for an undefined amount of time. The way I stopped this was to fix all the bugs, which sounds like an obvious thing to say, but it took lots of log file archaeology. Coincidentally, Heroku&#8217;s default logging is inadequate, so you have to send logs to a syslog daemon somewhere, or a service like <a href='https://www.loggly.com/'>Loggly</a> (which I preferred to <a href='https://www.splunkstorm.com/'>Splunk</a>).</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/25/plans-for-the-new-year">2013 Recap</a></h2>
      <div class="meta">
        <span class="date">25 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/25/plans-for-the-new-year/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <p>This year we saw <a href='http://dailyjs.com/2013/03/11/node-stable/'>Node 0.10</a> released, <a href='http://blog.getbootstrap.com/2013/08/19/bootstrap-3-released/'>Bootstrap 3</a>, and <a href='http://blog.jquery.com/2013/04/18/jquery-2-0-released/'>jQuery 2.0</a>. People are getting increasingly excited about <a href='http://dailyjs.com/2013/12/06/notch-npm_lazy/'>WebGL gaming</a>, and client-side frameworks like AngularJS and Backbone.js are maturing and growing in popularity.</p>

<p>The highlight of 2013 for me was speaking at the <a href='http://greatbritishnodeconf.co.uk/'>Great British Node Conference</a>. I&#8217;d been researching Node&#8217;s internals for the book I&#8217;m working on, so it felt like all that work culminated in a talk that got people thinking more about Node&#8217;s JavaScript and C++.</p>

<p>Over the next year I expect ECMAScript 6 to become more widely used. If you want to keep track of this standard, I find <a href='https://twitter.com/esdiscuss'>@esdiscuss</a> to be the most digestible way to keep track of things.</p>

<p><img src='/images/posts/christmas.gif' alt='Griswold' /></p>

<p>Happy holidays to everyone who reads DailyJS, and I look forward to writing more over the next year!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/24/switchery-circles">Switchery, circles</a></h2>
      <div class="meta">
        <span class="date">24 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/24/switchery-circles/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#iOS">iOS</a>
          
            <a href="/tags.html#graphs">graphs</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='switchery'>Switchery</h3>

<p><img src='/images/posts/switchery.gif' alt='Switchery' /></p>

<p><a href='http://abpetkov.github.io/switchery/'>Switchery</a> (GitHub: <a href='https://github.com/abpetkov/switchery'>abpetkov / switchery</a>, License: <em>MIT</em>, bower: <em>switchery</em>) by Alexander Petkov is a checkbox replacement, inspired by iOS 7, complete with animations.</p>

<p>The basic usage is <code>new Switchery(elem)</code>. You can pass extra options for the disabled state, the colour, and the animation speed.</p>

<p>Switchery is written using CommonJS modules, but Alexander builds a <a href='https://github.com/abpetkov/switchery/blob/master/standalone/switchery.js'>standalone version</a> that doesn&#8217;t need <code>require</code>.</p>

<h3 id='circles'>Circles</h3>

<p><img src='/images/posts/circles-graphs.png' alt='Circles' /></p>

<p>Circles (GitHub: <a href='https://github.com/lugolabs/circles'>lugolabs / circles</a>, License: <em>MIT</em>) by Artan Sinani is a small script for creating circular graphs. It doesn&#8217;t have any dependencies, and can be used like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Circles</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>({</span>
  <span class='nx'>id</span><span class='o'>:</span>         <span class='s1'>&#39;circles-1&#39;</span><span class='p'>,</span>
  <span class='nx'>percentage</span><span class='o'>:</span> <span class='mi'>43</span><span class='p'>,</span>
  <span class='nx'>radius</span><span class='o'>:</span>     <span class='mi'>60</span><span class='p'>,</span>
  <span class='nx'>width</span><span class='o'>:</span>      <span class='mi'>10</span><span class='p'>,</span>
  <span class='nx'>text</span><span class='o'>:</span>       <span class='mf'>7.13</span><span class='p'>,</span>
  <span class='nx'>colors</span><span class='o'>:</span>     <span class='p'>[</span><span class='s1'>&#39;#D3B6C6&#39;</span><span class='p'>,</span> <span class='s1'>&#39;#4B253A&#39;</span><span class='p'>]</span>
<span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/23/ro-mean">Read Only References, Getting MEAN</a></h2>
      <div class="meta">
        <span class="date">23 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/23/ro-mean/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#books">books</a>
          
            <a href="/tags.html#harmony">harmony</a>
          
            <a href="/tags.html#es6">es6</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='creating_readonly_references'>Creating Read-Only References</h3>

<p>I was working on an API where the desktop developers were worried I could break their code if my server had a typo in one of the API responses. The server was returning JSON objects, and some of the properties were important, so if they were spelled incorrectly it could be dangerous.</p>

<p>I wrote unit tests to ensure the API responses were the ones they expected, and used <code>Object.defineProperty</code> to make the API response properties read only. But what if you wanted some objects to have read/write access to an object, and others to be set as read only?</p>

<p>Sergey Bolshchikov sent in his post about this topic, called <a href='http://blog.bolshchikov.net/post/70680524646/creating-read-only-reference-to-object-in-javascript'>Creating Read-Only References</a>. He suggests using <code>Object.observe</code>, so certain objets can subscribe to changes.</p>

<p><code>Object.observe</code> is basically the future <a href='http://wiki.ecmascript.org/doku.php?id=harmony:observe'>standard way to do databinding</a>. Sergey mentions some polyfills for it, so you can use it in browsers.</p>

<h3 id='getting_mean_with_mongo_express_angular_and_node'>Getting MEAN with Mongo, Express, Angular, and Node</h3>

<p>Simon Holmes is writing a book about <a href='http://www.manning.com/sholmes/'>Mongo, Express, Angular, and Node</a>. I&#8217;ve used exactly this cocktail of technologies for some of my commercial work over the last two years, but I&#8217;d never thought of the acronym MEAN before. The marketing spin is it&#8217;s the new LAMP.</p>

<p>You can download the first chapter free, but the book is currently being written. If you buy it early you can contribute to its development by providing the author with feedback. The publisher calls this process <a href='http://www.manning.com/about/meap.html#meapfaq'>MEAP</a> (Manning Early Access Program).</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/20/metawidget-game-competition">Metawidget, Mozilla Holiday Gaming Competition</a></h2>
      <div class="meta">
        <span class="date">20 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/20/metawidget-game-competition/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mozilla">mozilla</a>
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#ui">ui</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='metawidget'>Metawidget</h3>

<p>Richard Kennard sent in <a href='http://metawidget.org/'>Metawidget</a>:</p>

<blockquote>
<p>Metawidget is a smart widget that populates itself, either statically or at runtime, with UI components to match the properties of your business objects.</p>
</blockquote>

<p>I originally replied to him and said that something that talks about &#8220;business objects&#8221; and Java Struts might not be the type of thing I usually write about on DailyJS. He responded in good spirits with this:</p>

<blockquote>
<p>Metawidget is a lightweight UI generator that can turn a JSON object into a UI widget in one line of code: <a href='http://blog.kennardconsulting.com/2013/08/how-to-generate-ui-from-json-objects.html'>http://blog.kennardconsulting.com/2013/08/how-to-generate-ui-from-json-objects.html</a></p>

<p>Or three lines if not using AngularJS: <a href='http://blog.kennardconsulting.com/2013/03/lightweight-json-to-ui-generator.html'>http://blog.kennardconsulting.com/2013/03/lightweight-json-to-ui-generator.html</a> <a href='http://blog.kennardconsulting.com/2013/07/generate-ui-from-json.html'>http://blog.kennardconsulting.com/2013/07/generate-ui-from-json.html</a></p>

<p>Also supports JQuery UI and JQuery Mobile: <a href='http://blog.kennardconsulting.com/2013/12/jquery-mobile-ui-generator.html'>http://blog.kennardconsulting.com/2013/12/jquery-mobile-ui-generator.html</a></p>
</blockquote>

<p>If you come from a C# or Java background, the style of this project might appeal to you. The <a href='http://metawidget.sourceforge.net/doc/reference/en/html/ch01s02.html'>introductory tutorial</a> explains the idea of transforming data into UI elements based on types (which reminds me of my XSLT days).</p>

<h3 id='mozilla_holiday_gaming_competition'>Mozilla Holiday Gaming Competition</h3>

<p>Kevin Attfield sent in a competition being run by Mozilla and <a href='http://www.gootechnologies.com/'>Goo Technologies</a> with <a href='https://blog.mozilla.org/blog/2013/12/05/unleash-the-game-creator-in-you-by-entering-our-holiday-gaming-competition/'>$45,000 worth of prizes up for grabs</a>.</p>

<blockquote>
<p>To create your games, you will be using the Goo platform consisting of Goo Engine - a 3D JavaScript gaming engine entirely built on WebGL/HTML5 - and Goo Create - a visual editing tool running on top of the engine. For inspiration, check out this video tutorial on how to create an interactive scene in Goo Create.</p>
</blockquote>

<p>Kevin works for Goo Technologies, and said <a href='http://about.gootechnologies.com/jobs'>they&#8217;re also looking for developers</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/19/mvc-angular-notifier">Choosing an MVC Framework, lrNotifier</a></h2>
      <div class="meta">
        <span class="date">19 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/19/mvc-angular-notifier/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#angularjs">angularjs</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='choosing_a_javascript_mvc_framework'>Choosing a JavaScript MVC Framework</h3>

<p>Deciding on a client-side MVC framework can be tough &#8211; you don&#8217;t want to invest too much time on something that isn&#8217;t the right fit for your project. Craig McKeachie sent in his article, <a href='http://www.funnyant.com/choosing-javascript-mvc-framework/'>Choosing a JavaScript MVC Framework</a>, which reviews the most popular libraries like AngularJS and Backbone.js. He takes into account things like the community following, maturity, and code size:</p>

<blockquote>
<p>How many real-world production apps are using these frameworks and how many users do these apps have? How good is the documentation and how many examples/tutorials are available? Are the examples up to date? How stable is the API? Do other developers know or are getting to know this technology?</p>
</blockquote>

<p>He notes that these frameworks actually fall into subcategories, so it&#8217;s hard to directly compare each of them.</p>

<blockquote>
<p>After looking at the projects by features it became clear to me that I wasn&#8217;t really comparing &#8220;apples to apples.&#8221; A more fair comparison might be to compare full frameworks like AngularJS and EmberJS with stacks that include great but less broad libraries like Backbone and KnockoutJS.</p>
</blockquote>

<p>The article also introduces the main concepts used by these libraries, so if you&#8217;re confused about data binding or models then this should get you started.</p>

<h3 id='lrnotifier'>lrNotifier</h3>

<p><a href='http://lorenzofox3.github.io/lr-notifier/'>lrNotifier</a> (GitHub: <a href='https://github.com/lorenzofox3/lr-notifier'>lorenzofox3 / lr-notifier</a>, License: <em>MIT</em>) by Laurent Renard is an AngularJS directive for showing notifications. Notifications can be split into channels, allowing you to control where info, debug, or error messages will be displayed.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>controller</span><span class='p'>(</span><span class='s1'>&#39;myCtrl&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;lrNotifier&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>notifier</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>channel</span><span class='o'>=</span><span class='nx'>notifier</span><span class='p'>(</span><span class='s1'>&#39;channelName&#39;</span><span class='p'>);</span>

  <span class='nx'>channel</span><span class='p'>.</span><span class='nx'>pushNotification</span><span class='p'>({</span> <span class='nx'>message</span><span class='o'>:</span> <span class='s1'>&#39;hello channel&#39;</span><span class='p'>,</span> <span class='nx'>otherProp</span><span class='o'>:</span> <span class='s1'>&#39;other&#39;</span> <span class='p'>});</span>
  <span class='nx'>channel</span><span class='p'>.</span><span class='nx'>info</span><span class='p'>(</span><span class='s1'>&#39;a great message&#39;</span><span class='p'>);</span>
  <span class='nx'>channel</span><span class='p'>.</span><span class='nx'>warn</span><span class='p'>(</span><span class='s1'>&#39;a great message&#39;</span><span class='p'>);</span>
  <span class='nx'>channel</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;a great message&#39;</span><span class='p'>);</span>
<span class='p'>}]);</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/18/node-roundup">Node Roundup: 0.10.23, 2013, Bull</a></h2>
      <div class="meta">
        <span class="date">18 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/18/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#queue">queue</a>
          
            <a href="/tags.html#redis">redis</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='node_01023_released'>Node 0.10.23 Released</h3>

<p><a href='http://blog.nodejs.org/2013/12/11/node-v0-10-23-stable/'>Node v0.10.23</a> is out. This release upgrades uv, npm, and has patches for several core modules. I particularly liked &#8220;events: avoid calling once functions twice&#8221;. This would happen when <a href='https://github.com/joyent/node/commit/c9d93f34311ce0a9b59ed9f4511a2e3ba69e0f25'>emitting an event from inside the event hander</a>. The fix involves using a boolean to track if the event has fired, so it&#8217;s not too drastic.</p>

<h3 id='node_in_2013'>Node in 2013</h3>

<p>If I think back over 2013, all I can remember is being punched in the face a lot by my son. He&#8217;s a year old, so I&#8217;m hoping this sort of thing stops before he gets much bigger. For those of you who still have brain cells, Gergely Nemeth sent in <a href='http://gergelyke.github.io/node2013/'>a timeline of Node in 2013</a>. This includes news like Ghost getting funded, Nodeschool.io&#8217;s release, and the ScaleNPM funding drive.</p>

<h3 id='bull_job_manager'>Bull Job Manager</h3>

<p>Manuel Astudillo sent in <a href='https://github.com/OptimalBits/bull'>Bull Job Manager</a> (npm: <a href='https://npmjs.org/package/bull'>bull</a>, License: <em>BSD</em>). It&#8217;s a job queue manager that uses Redis and has an API inspired by LearnBoost&#8217;s <a href='https://npmjs.org/package/kue'>Kue</a>.</p>

<p>Manuel says it&#8217;s designed with atomicity in mind. Looking at the source, it uses atomic increments and blocking operations (<code>BRPOPLPUSH</code>), so it should be as atomic as Redis is.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/17/frontend-roundup">Dynatable, nanoGallery, jQuery Audit</a></h2>
      <div class="meta">
        <span class="date">17 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/17/frontend-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#tables">tables</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#galleries">galleries</a>
          
            <a href="/tags.html#chrome">chrome</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='dynatable'>Dynatable</h3>

<p><img src='/images/posts/dynatable.png' alt='Dynatable' /></p>

<p><a href='http://www.dynatable.com/'>Dynatable</a> (GitHub: <a href='https://github.com/JangoSteve/jquery-dynatable/'>JangoSteve / jquery-dynatable</a>, License: <em>AGPL or commercial</em>) by Steve Schwartz is a library for displaying JSON data as friendly and efficient HTML tables. It provides a framework for searching, sorting, and filtering data. It uses jQuery, and can be invoked with <code>$.dynatableSetup</code>.</p>

<p>Dynatable can convert plain HTML tables into JSON. The properties for the JSON can be camelCase, but other styles are supported, including dashed and underscore. This is set with the <code>table.defaultColumnIdStyle</code> option.</p>

<p>JSON can also be fetched from a server. In this case you can use the <code>dataset</code> option:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#my-ajax-table&#39;</span><span class='p'>).</span><span class='nx'>dynatable</span><span class='p'>({</span>
  <span class='nx'>dataset</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>ajax</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span>
    <span class='nx'>ajaxUrl</span><span class='o'>:</span> <span class='s1'>&#39;/dynatable-ajax.json&#39;</span><span class='p'>,</span>
    <span class='nx'>ajaxOnLoad</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span>
    <span class='nx'>records</span><span class='o'>:</span> <span class='p'>[]</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It expects a corresponding skeleton <code>table</code> node, with <code>thead</code> and <code>tbody</code>.</p>

<p>The documentation is thorough and includes examples for each of these things, and the other features provided by the library.</p>

<h3 id='nanogallery'>nanoGallery</h3>

<p>Nobody&#8217;s sent me a jQuery gallery for a while. nanoGALLERY (GitHub: <a href='https://github.com/Kris-B/nanoGALLERY'>Kris-B / nanoGALLERY</a>, License: <em>CC BY-NC 3.0</em>) by Christophe Brisbois supports Flickr and Google+, and supports responsive layouts. You can get a gallery going with a Google account like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#elt&#39;</span><span class='p'>).</span><span class='nx'>nanoGallery</span><span class='p'>({</span>
  <span class='nx'>kind</span><span class='o'>:</span> <span class='s1'>&#39;picasa&#39;</span><span class='p'>,</span>
  <span class='nx'>userID</span><span class='o'>:</span> <span class='s1'>&#39;you@example.com&#39;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It comes with CSS, but you can theme it. It displays a gallery navigator using folders, so it could scale up quite well to a large collection.</p>

<p>Documentation for the main options and expected markup can be found in the project&#8217;s readme file.</p>

<h3 id='jquery_audit'>jQuery Audit</h3>

<p><a href='https://chrome.google.com/webstore/detail/jquery-audit/dhhnpbajdcgdmbbcoakfhmfgmemlncjg/'>jQuery Audit</a> (GitHub: <a href='https://github.com/zertosh/jquery-audit'>zertosh / jquery-audit</a>, License: <em>MIT</em>) by Andres Suarez is a Chrome Developer Tools extension for auditing jQuery. It adds a sidebar (under Elements) that includes details of delegated events and internal data.</p>

<p>The documentation has explanations of the main features, and instructions on how to use the extension properly. For example, you can dig into bound functions for event handlers which can be bound differently based on the library.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/16/bitcoinprices-uikit2">UIkit 2.0, bitcoinprices.js</a></h2>
      <div class="meta">
        <span class="date">16 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/16/bitcoinprices-uikit2/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#bitcoin">bitcoin</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='uikit'>UIKit</h3>

<p><img src='/images/posts/uikit2.png' alt='UIKit 2.0' /></p>

<p><a href='http://www.getuikit.com/'>UIKit 2.0</a> (GitHub: <a href='https://github.com/uikit/uikit'>uikit / uikit</a>, License: <em>MIT</em>) is a frontend framework that provides components for layout, navigation, and more complex UI widgets like dropdown replacements. It uses jQuery and FontAwesome. Version 2 has just been released, which has some new features including a Markdown editor that supports syntax highlighting and an extensible toolbar.</p>

<p>There&#8217;s <a href='http://www.getuikit.com/docs/components.html'>extensive documentation</a> and <a href='http://www.getuikit.com/docs/customizer.html'>a theme tool</a>, so you can have a look at the main features quite easily.</p>

<h3 id='bitcoinpricesjs'>bitcoinprices.js</h3>

<p><a href='http://miohtama.github.io/bitcoin-prices/index.html'>bitcoinprices.js</a> (GitHub: <a href='https://github.com/miohtama/bitcoin-prices'>miohtama / bitcoin-prices</a>, License: <em>MIT</em>) by Mikko Ohtamaa is a client-side library for fetching Bitcoin prices. It supports currency selection, and uses <a href='https://bitcoinaverage.com/'>BitcoinAverage</a> as the price API.</p>

<p><a href='https://github.com/bitcoinaverage/bitcoinaverage'>BitcoinAverage itself</a> is an open source Python project that monitors multiple exchanges for prices:</p>

<blockquote>
<p>Price is a weighted average. Meaning that for every exchange the last trade price and last 24h trading volume is taken, each exchange contributes to the final price only to the extent of it&#8217;s current trading volume. For a more detailed arithmetics explanation check here.</p>
</blockquote>

<p>It&#8217;s got a nice and simple Bootstrap-based website with graphs and tables.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/13/vimjs">Vim.js</a></h2>
      <div class="meta">
        <span class="date">13 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/13/vimjs/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#vim">vim</a>
          
            <a href="/tags.html#emscripten">emscripten</a>
          
            <a href="/tags.html#editors">editors</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/vimjs.png' alt='' />
  <small>Surely the very reason Emscripten was created?</small>
</div>
<p>Finally, my worlds have collided! In case you didn&#8217;t know, I regularly write a <a href='http://usevim.com/'>Vim blog</a>. It&#8217;s surprisingly easy to find things to say about this 22 year old text editor, and it&#8217;s been my main tool for writing code and articles for a long time. <a href='http://coolwanglu.github.io/vim.js/web/vim.html'>Vim.js</a> (GitHub: <a href='https://github.com/coolwanglu/vim.js'>coolwanglu / vim.js</a>) by Lu Wang is an Emscripten port of Vim, allowing you to use Vim in a browser.</p>

<p>It runs pretty well on my computer &#8211; it seems fast, and the commands I typically use work. It&#8217;s not like these Vim layers for IDEs and other editors that miss certain motions, registers, and so on: it&#8217;s basically Vim. Split windows and tabs work, but the help files aren&#8217;t available (or I can&#8217;t find them). The way it works in the browser is to use a <code>&lt;span&gt;</code> for each terminal character, which means for the 43x115 example window there are 4945 spans!</p>

<p>From a JavaScript point of view, I found the <a href='https://github.com/coolwanglu/vim.js/wiki/Sync-to-Async-Transformation'>Sync to Async Transformation</a> document interesting. The author is trying to figure out how to deal with JavaScript&#8217;s asynchronous nature, given that Vim expects to have a non-busy synchronous <code>sleep()</code> function:</p>

<blockquote>
<p>Most works are automatically done by <code>web/transform.js</code>, read the comments inside for more detail. But there are a few left, mainly function pointers, which cannot be automatically identified. Whenever vim.js crashes and you see callback function is not specified! in the browser console, congratulations, you have found one more async function at large.</p>
</blockquote>

<p>I wonder if there are any Node developers or ES6 experts that can help with this? If you&#8217;re interested in the project, there&#8217;s a <a href='https://github.com/coolwanglu/vim.js/blob/master/TODO'>TODO</a> which has some Emscripten issues and client-side work that needs doing.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/12/12/javascript-survey-results">JavaScript Developer Survey 2013: Results</a></h2>
      <div class="meta">
        <span class="date">12 Dec 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/12/12/javascript-survey-results/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#community">community</a>
          
            <a href="/tags.html#surveys">surveys</a>
          
        </span>
      </div>
      <div class="preview">
        <p>The JavaScript Developer Survey has now closed. As always the results are available to the community for further analysis:</p>

<ul>
<li><a href='http://dailyjs.com/files/2013-survey-summary.pdf'>Summary</a></li>

<li><a href='http://dailyjs.com/files/2013-survey-data.zip'>Raw spreadsheet data</a> (zipped CSV)</li>

<li><a href='http://dailyjs.com/2012/12/24/javascript-survey-results/'>Results for 2012</a></li>
</ul>
<div class='image'>
  <img src='/images/posts/2013-survey-type.png' alt='' />
  <small>Most people write client-side code.</small>
</div>
<p>51% of readers write client-side code, while 28% said they write server-side code. Last year client-side was at 98%, so I imagine this is partly due to a changing audience on DailyJS, but it&#8217;s interesting how strong server-side development is becoming.</p>

<p>Where do you write JavaScript? 54% said &#8220;at work&#8221;, and 45% said &#8220;side projects&#8221;. This is probably a case of people doing both &#8211; I find it&#8217;s common for programmers to be both hobbyists and professionals.</p>

<p>The majority of readers have been writing JavaScript for three to five years (34%). I can&#8217;t help but feel this is thanks to the growth of Node &#8211; people rediscovering JavaScript after using other languages for server-side web development, or the growth of client-side frameworks like AngularJS and Backbone.js. I can&#8217;t imagine doing design without some JavaScript skills.</p>

<p>78% of readers said they don&#8217;t use a language that compiles to JavaScript. I&#8217;ve noticed some of the influential members of the Node community are vocal about these languages, so it seems like our readers agree. I try to keep some coverage of these languages on the blog, but in general the focus is on JavaScript.</p>

<p>CoffeeScript was the most popular &#8220;compile-to&#8221; language (64%), and TypeScript was up from last year to 19%.</p>

<p>The style question caused much confusion. Semicolons, commas at the end, and methods with one space were popular options. It&#8217;s interesting to see 9% using tabs and 11% using spaces. Unlike some languages, JavaScript can survive a little bit of variance in tab size, so I&#8217;m not too bothered either way. Client-side veterans seem to use four spaces, though, and 8% of respondents selected this option.</p>

<p>The results for testing amused me:</p>

<ul>
<li>Yes: 25%</li>

<li>No: 26%</li>

<li>Sometimes / Not enough / Not too much / When needed: 50%</li>
</ul>

<p>I like your honesty. &#8220;Not enough&#8221; could be just modesty, so I&#8217;m going to read this as &#8220;a lot of readers write tests but think they could be doing better&#8221;.</p>

<p>Jasmine is hugely popular, with 30%. I still think tap is the best approach, but it only received 2% of your clicks. Mocha&#8217;s doing well with 27%, and QUnit is down to 16%. I think this is more evidence of a large number of Node developers doing the survey, but it could also be the fact that people see Mocha as a browser/Node module, and QUnit as something just for jQuery (which it isn&#8217;t really).</p>

<p>CI servers? 36% said yes. Node is definitely CI server friendly &#8211; I&#8217;ve recently been setting up a TeamCity server for Objective-C projects and it&#8217;s surprisingly hard work. Compared to switching on Travis CI for an open source Node project it&#8217;s a joke. However, Jenkins is the most popular CI server (44%), and TeamCity got 13%, so perhaps people find it easy to slot client-side or Node tests into an existing CI server in companies that use multiple languages.</p>
<div class='image'>
  <img src='/images/posts/2013-survey-amd.png' alt='' />
  <small>AMD is extremely popular.</small>
</div>
<p>It turns out people like AMD! However, if we break down the stats for CommonJS, we see 17% using CommonJS and 12% using Browserify. For a long time I advocated CommonJS, but substack&#8217;s Browserify argument is convincing&#8230;</p>

<p>Grunt is winning at build scripts (60%). Fortunately, &#8220;npm scripts&#8221; had a good response (17%), which is encouraging because I feel like lots of tasks are simple enough to work that way, rather than needing a confusing 200 line Gruntfile.</p>

<p>I was surprised to see AngularJS and Backbone.js both get 25% for client-side frameworks. They have mindshare, but I can&#8217;t help but feel they solve very different problems.</p>

<p>The common wisdom seems to be IE support should start at IE 8 (37%). I&#8217;m going to guess that&#8217;s to support corporates, which has been the bane of my web development existence for over a decade now.</p>

<p>Do you use ES6 features? 85% said &#8220;No&#8221;, so you&#8217;re OK if you don&#8217;t. I probably only do to write DailyJS articles, but we&#8217;ll see this start to grow over the next year.</p>

<p>PHP is the most popular primary development language (24%), and C# got 17%. Hello .Net folks!</p>

<p>Thanks to everyone who took part in the survey! If you can use the data for something cool, <a href='http://contact.dailyjs.com/general'>I&#8217;d love to hear about it</a>.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page7">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <strong>8</strong>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page9">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

