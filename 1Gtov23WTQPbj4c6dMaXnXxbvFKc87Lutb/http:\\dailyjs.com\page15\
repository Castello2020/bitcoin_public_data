http://dailyjs.com/page15/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 14:39:29 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "174011-22cc5-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 32743
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/26/node-roundup">Node Roundup: CampJS, bower-registry, Helmsman</a></h2>
      <div class="meta">
        <span class="date">26 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/26/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#command-line">command-line</a>
          
            <a href="/tags.html#bower">bower</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='campjs'>CampJS</h3>

<p><img src='/images/posts/campjsaug.png' alt='CampJS August' /></p>

<p><a href='http://campjs.com/'>CampJS</a> will be held in the Gold Coast, Australia, on August 9th to 12th. <a href='http://campjs.com/#campjs-tj-holowaychuk'>TJ Holowaychuk will be attending</a>, and also <a href='http://campjs.com/#campjs-angelina-fabbro'>Angelina Fabbro</a>.</p>

<p>If you&#8217;re interested, <a href='http://tickets.campjs.com/'>tickets start at AU$320</a>. DailyJS readers can get a $25 discount by using the code <code>DAILYJS</code>.</p>

<h3 id='bowerregistry'>bower-registry</h3>

<p>If you&#8217;re looking to set up your own <a href='http://bower.io/'>Bower</a> registry, then take a look at bower-registry (GitHub: <a href='https://github.com/neoziro/bower-registry'>neoziro / bower-registry</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/bower-registry'>bower-registry</a>) by Greg Berg√©. This is an Express web application that stores data in Redis, but the author notes it could be easily adapted to support other databases like MongoDB and PostgreSQL.</p>

<p>Running <code>bower-registry -d redis</code> on the command-line will start a server. Other options can be viewed by typing <code>bower-registry -h</code>. The app can also be loaded as a Node module, and <code>require(&#39;bower-registry&#39;).Registry</code> is the Express app instance.</p>

<h3 id='helmsman'>Helmsman</h3>

<p>Helmsman (GitHub: <a href='https://github.com/mattmcmanus/node-helmsman'>mattmcmanus / node-helmsman</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/helmsman'>helmsman</a>) by Matt McManus is an opinionated command-line application development kit. The interface style is based on Git&#8217;s subcommands:</p>

<blockquote>
<p>A common setup for command line applications is <code>&lt;command&gt; &lt;subcommand&gt; &lt;arguments/options&gt;</code> (for example: <code>git commit -m &#39;message&#39;</code>). Rather than having a giant file that <code>switch</code>es or <code>if else</code>s over each potential subcommand, it&#8217;s much neater to store each subcommand in it&#8217;s own file (<code>bin/command</code>,<code>bin/command-subcomand</code>, <code>bin/command-subcommand2</code>, etc). Doing this however introduces some annoying manual steps which <code>helmsman</code> hopes to solve.</p>
</blockquote>

<p>The subcommand-style API is based on metadata exposed through <code>exports</code>. If the file is run directly rather than loaded with <code>require</code>, then your script should run as it would normally:</p>
<div class='highlight'><pre><code class='javascript'><span class='err'>#</span><span class='o'>!</span><span class='err'>/usr/bin/env node</span>

<span class='c1'>// 1. To expose the metadata simply `exports.command`</span>
<span class='nx'>exports</span><span class='p'>.</span><span class='nx'>command</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>description</span><span class='o'>:</span> <span class='s1'>&#39;Show current worker counts and their pids&#39;</span>
<span class='p'>};</span>

<span class='c1'>// 2. Then make sure it only runs when it&#39;s directly called:</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>require</span><span class='p'>.</span><span class='nx'>main</span> <span class='o'>===</span> <span class='nx'>module</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Parse options and run the magic</span>
<span class='p'>}</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/25/jquery-roundup">jQuery Roundup: Backbone Associations, bootstrap-wysihtml5</a></h2>
      <div class="meta">
        <span class="date">25 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/25/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#text">text</a>
          
            <a href="/tags.html#wysiwyg">wysiwyg</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='http://contact.dailyjs.com/project'>contact form</a>.
</div>
<h3 id='backbone_associations'>Backbone Associations</h3>

<p><a href='http://dhruvaray.github.io/backbone-associations/'>Backbone Associations</a> (GitHub: <a href='https://github.com/dhruvaray/backbone-associations'>dhruvaray / backbone-associations</a>, License: <em>MIT</em>, bower: <em>backbone-associations</em>) by Dhruva Ray is a plugin for one-to-one and one-to-many associations between models and collections:</p>

<blockquote>
<p>applications can listen to any kind of change (change, add, remove, reset, sort, destroy) in this hierarchy using standard Backbone events and respond to them. (views can re-render for example). The implementation strives to be tiny (2.2KB), easy-to-understand, light-weight and fast.</p>
</blockquote>

<p>Once the plugin has been loaded, models can be defined using <code>Backbone.AssociatedModel</code>, and then relationships can be set up with <code>Backbone.One</code> and <code>Backbone.Many</code>.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Product</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>AssociatedModel</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>User</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>AssociatedModel</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='nx'>relations</span><span class='o'>:</span> <span class='p'>[{</span>
    <span class='nx'>type</span><span class='o'>:</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Many</span><span class='p'>,</span>
    <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;locations&#39;</span><span class='p'>,</span>
    <span class='nx'>relatedModel</span><span class='o'>:</span> <span class='nx'>Product</span>
  <span class='p'>}]</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The reversed association is automatically inferred, so a <code>product</code> could be set for a <code>user</code>. Values can be traversed using fully qualified paths as well:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>emp</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;works_for.controls[0].locations[0].zip&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Fully qualified paths can also be used to assign event listeners:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>emp</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;change:works_for.locations[*]&#39;</span><span class='p'>,</span> <span class='nx'>cb</span><span class='p'>);</span>
</code></pre>
</div>
<p>The author has written up a full <a href='http://dhruvaray.github.io/backbone-associations/tutorial.html'>tutorial for Backbone Associations</a>, and has included unit tests and full documentation.</p>

<h3 id='bootstrapwysihtml5'>bootstrap-wysihtml5</h3>

<p><a href='http://jhollingworth.github.io/bootstrap-wysihtml5/'>bootstrap-wysihtml5</a> (GitHub: <a href='https://github.com/jhollingworth/bootstrap-wysihtml5/'>jhollingworth / bootstrap-wysihtml5/</a>, License: <em>MIT</em>, bower: <em>bootstrap-wysihtml5</em>) by James Hollingworth is an amazing text editor component. It&#8217;s highlight consistent with Bootstrap&#8217;s design, and has many features you may take for granted when editing text, like the usual keyboard shortcuts.</p>

<p>Trantor Liu sent in his fork, <a href='https://github.com/trantorLiu/bootstrap-editor'>trantorLiu/bootstrap-editor</a>, which pairs up the project with jQuery-File-Upload. This adds support for things like upload progress, drag and drop, and cross-domain uploads. Trantor notes that the demo won&#8217;t currently work because there&#8217;s no server-side support, but he&#8217;s provided instructions on how to set it up locally.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/24/x-editable-js-git">JS-Git Update, X-editable</a></h2>
      <div class="meta">
        <span class="date">24 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/24/x-editable-js-git/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#widgets">widgets</a>
          
            <a href="/tags.html#git">git</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='jsgit'>JS-Git</h3>

<p><img src='/images/posts/jsgit.png' alt='JS-Git logo' /></p>

<p>Tim Caswell&#8217;s JS-Git project has gone through the proof-of-concept stage, and he&#8217;s now reached an impasse where he&#8217;s looking for more funding. There&#8217;s a <a href='https://github.com/creationix/js-git'>JS-Git</a> repository that has specifications for the core parts of the project. This includes interfaces for how backends can be written, including details on using HTML5 APIs or a real file system with Node.</p>

<p>The <a href='https://github.com/creationix/js-git/blob/master/specs/git-db.md'>Git Database</a> specification defines how objects and refs should be stored, based on ECMAScript syntax. The beginnings of a reference implementation can be found in <a href='https://github.com/creationix/git-repo/blob/master/fs-db.js'>fs-db.js</a>, which uses Node&#8217;s <code>fs</code> module.</p>

<p>The new fundraising campaign, run on <a href='https://www.bountysource.com/#fundraisers/325-js-git'>BountySource</a>, aims to raise $30,000 to enable Tim to work on the project full time to move the project closer to his main goals. This includes cloning remote repositories to local storage over http, git, or ssh, making and committing local changes offline, and pushing changes back to remote repositories. The target platforms are ChromeOS, Firefox OS, Windows RT WinJS, and HTML5 web apps.</p>

<p>It&#8217;s an ambitious project, but Tim admits in the BountySource posting that he won&#8217;t reach 100% completion. The effort reminds me of a JavaScript-centric version of <a href='http://libgit2.github.com/'>libgit2</a>, and has particular relevance for anyone interested in bringing native development tools to new web-based platforms like ChromeOS.</p>

<h3 id='xeditable'>X-editable</h3>

<p><img src='/images/posts/x-editable.png' alt='X-editable' /></p>

<p><a href='http://vitalets.github.io/x-editable/'>X-editable</a> (GitHub: <a href='https://github.com/vitalets/x-editable'>vitalets / x-editable</a>, License: <em>MIT</em>, bower: <em>x-editable</em>) by Vitaliy Potapov is an in-place editing library that works with Bootstrap, jQuery UI, and jQuery. It can display a popup for a simple text field, or richer input widgets like date selectors.</p>

<p>I like to use it with data attributes, so I have simple markup that drives the keys and values for various UI elements, and then a generic RESTful API that the data is persisted to. I&#8217;ve been using it for Bootstrap CMS-style interfaces, with a Grunt/bower build environment, and it&#8217;s been solid so far. The author has included tests and <a href='http://vitalets.github.io/x-editable/docs.html'>documentation</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/21/azure-yass-stripmq">Backbone and Azure, Yass.js, grunt-stripmq</a></h2>
      <div class="meta">
        <span class="date">21 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/21/azure-yass-stripmq/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
            <a href="/tags.html#css">css</a>
          
            <a href="/tags.html#grunt">grunt</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='backbone_adapter_for_azure'>Backbone Adapter for Azure</h3>

<p>Olivier Bloch sent in a <a href='http://aka.ms/BackboneAdapterForWAMS'>Backbone adapter for Windows Azure</a> (GitHub: <a href='https://github.com/MSOpenTech/backbone-azure-mobile-services'>MSOpenTech / backbone-azure-mobile-services</a>, License: <em>Apache 2.0</em>). It&#8217;s distributed by Microsoft Open Technologies, and syncs data with the <a href='http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-data-dotnet/'>Windows Azure Mobile Data Service</a>.</p>

<p>If you&#8217;re interested in trying out the server-side API without Backbone.js, I noticed there&#8217;s a tutorial here: <a href='http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-data-js/'>Get started with data in Mobile Services</a>.</p>

<p>To use Azure with Backbone, all you need to do is include the adapter, an <a href='http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-html/'>additional JavaScript file provided by Microsoft</a>, and some settings for your collections:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>People</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='nx'>client</span><span class='o'>:</span> <span class='nx'>client</span><span class='p'>,</span>
  <span class='nx'>table</span><span class='o'>:</span> <span class='s1'>&#39;Table1&#39;</span><span class='p'>,</span>
  <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>Person</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The authors have included build scripts (Grunt) and tests (Jasmine).</p>

<h3 id='yassjs'>Yass.js</h3>

<p><a href='http://eightmedia.github.io/yass.js/'>Yass.js</a> (GitHub: <a href='https://github.com/EightMedia/yass.js'>EightMedia / yass.js</a>, License: <em>MIT</em>) by Jorik Tangelder is an adaptive image script that adds support for <a href='http://www.w3.org/html/wg/drafts/srcset/w3c-srcset/'>srcset</a> tailored to mobile browsers. Once <code>yass.js</code> has been added after the last image on a page, it will ensure the optimum image is loaded.</p>

<p>It&#8217;s currently very small (less than 500 bytes when compressed), and has been tested in Chrome 28, Android 4.2, IOS6, BlackBerry10 and IE6.</p>

<h3 id='gruntstripmq'>grunt-stripmq</h3>

<p>grunt-stripmq (GitHub: <a href='https://github.com/jtangelder/grunt-stripmq'>jtangelder / grunt-stripmq</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/grunt-stripmq'>grunt-stripmq</a>) also by Jorik Tangelder is a &#8220;mobile-first CSS fallback&#8221;:</p>

<blockquote>
<p>A Grunt task to generate a fallback version of your fancy mobile first stylesheet. Since IE9 doesn&#8217;t support media queries, you can use a JavaScript like respond.js to enable this, or generate a fallback version with this task.</p>
</blockquote>

<p>So if you&#8217;ve invested a lot of time developing modern, mobile-optimised sites, then you should be able to jam them through Grunt to spit out something desktop-friendly.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/20/localstorage">MV* and Local Storage</a></h2>
      <div class="meta">
        <span class="date">20 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/20/localstorage/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#mv*">mv*</a>
          
            <a href="/tags.html#localStorage">localStorage</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Most AngularJS and Backbone.js projects that I&#8217;ve worked on have persisted data to a remote API. What about those times when storing data in the browser is sufficient? Enterprising developers have added support for <code>localStorage</code> to some MVC frameworks, but before dropping one of these plugins or libraries into your project you need to know a little background about the API and its limitations.</p>

<h3 id='browser_support'>Browser Support</h3>

<p>If you&#8217;re already set on building a modern, single page web application, legacy browser support probably isn&#8217;t a huge deal. The <a href='http://caniuse.com/namevalue-storage'>Can I use Web Storage</a> page shows most browsers we typically target are supported. It refers to &#8220;name/value pairs&#8221; because it&#8217;s talking about the <code>localStorage</code> API.</p>

<h3 id='the__api'>The <code>localStorage</code> API</h3>

<p>If you&#8217;ve never used it before, then you can think of <code>window.localStorage</code> as a key/value store for strings. You can stick any JavaScript value you like in there, but a string will be returned on retrieval.</p>
<div class='highlight'><pre><code class='javascript'><span class='nb'>window</span><span class='p'>.</span><span class='nx'>localStorage</span><span class='p'>.</span><span class='nx'>setItem</span><span class='p'>(</span><span class='s1'>&#39;age&#39;</span><span class='p'>,</span> <span class='mi'>18</span><span class='p'>);</span>
<span class='nb'>window</span><span class='p'>.</span><span class='nx'>localStorage</span><span class='p'>.</span><span class='nx'>getItem</span><span class='p'>(</span><span class='s1'>&#39;age&#39;</span><span class='p'>);</span>
<span class='c1'>// &quot;18&quot;</span>
</code></pre>
</div>
<p>This means you should think carefully about what data you store. Aspirations of creating a browser-based Photoshop backed by <code>localStorage</code> isn&#8217;t architecturally sensible &#8211; it would be nice if binary data could be stored, but for now you&#8217;ll have to make do with strings.</p>

<p>The storage limit in most browsers is 5 MB, which probably doesn&#8217;t sound like much, but it&#8217;s actually <a href='http://en.wikipedia.org/wiki/Web_storage'>1000 times more</a> than is supported by cookies.</p>

<h3 id='angularjs'>AngularJS</h3>

<p>There are examples of apps that use <code>localStorage</code> on the <a href='http://blog.angularjs.org/'>AngularJS blog</a>. One that I downloaded and picked apart was <a href='https://github.com/IgorMinar/foodme'>FoodMe</a> by Igor Minar. In FoodMe, Igor creates a <a href='https://github.com/IgorMinar/foodme/blob/master/app/js/services/localStorage.js'>localStorage</a> service which basically just wraps <code>window.localStorage</code> so it can be loaded with dependency injection. The <code>$scope</code> is then watched, and a string version of a given record is dumped into <code>localStorage</code> using <code>JSON.stringify</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>foodMeApp</span><span class='p'>.</span><span class='nx'>factory</span><span class='p'>(</span><span class='s1'>&#39;customer&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>$rootScope</span><span class='p'>,</span> <span class='nx'>localStorage</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>LOCAL_STORAGE_ID</span> <span class='o'>=</span> <span class='s1'>&#39;fmCustomer&#39;</span><span class='p'>;</span>
  <span class='kd'>var</span> <span class='nx'>customerString</span> <span class='o'>=</span> <span class='nx'>localStorage</span><span class='p'>[</span><span class='nx'>LOCAL_STORAGE_ID</span><span class='p'>];</span>

  <span class='kd'>var</span> <span class='nx'>customer</span> <span class='o'>=</span> <span class='nx'>customerString</span> <span class='o'>?</span> <span class='nx'>JSON</span><span class='p'>.</span><span class='nx'>parse</span><span class='p'>(</span><span class='nx'>customerString</span><span class='p'>)</span> <span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>name</span><span class='o'>:</span> <span class='kc'>undefined</span><span class='p'>,</span>
    <span class='nx'>address</span><span class='o'>:</span> <span class='kc'>undefined</span>
  <span class='p'>};</span>

  <span class='nx'>$rootScope</span><span class='p'>.</span><span class='nx'>$watch</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>customer</span><span class='p'>;</span> <span class='p'>},</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>localStorage</span><span class='p'>[</span><span class='nx'>LOCAL_STORAGE_ID</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>JSON</span><span class='p'>.</span><span class='nx'>stringify</span><span class='p'>(</span><span class='nx'>customer</span><span class='p'>);</span>
  <span class='p'>},</span> <span class='kc'>true</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='nx'>customer</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The record is loaded from <code>localStorage</code>, and serialised using <code>JSON.parse</code> and <code>JSON.stringify</code>. Notice that Igor has used the object-style API: <code>localStorage.setItem(key, value)</code> and <code>localStorage[key] = value</code> are equivalent.</p>

<h3 id='backbonejs'>Backbone.js</h3>

<p>Jerome Gravel-Niquet created Backbone.localStorage (GitHub: <a href='https://github.com/jeromegn/Backbone.localStorage'>jeromegn / Backbone.localStorage</a>, License: <em>MIT</em>, bower: <em>backbone.localStorage</em>), which allows collections to store data with <code>localStorage</code>. It&#8217;s a drop-in solution &#8211; barely any configuration is required. All you need to do is add a <code>localStorage</code> property to your collection classes.</p>

<p>Backbone.localStorage has tests, and the author is still updating it. GitHub currently lists 31 contributors.</p>

<h3 id='knockout'>Knockout</h3>

<p>This isn&#8217;t meant to be an exhaustive review of <code>localStorage</code> libraries, but I thought I&#8217;d also mention <a href='http://knockoutjs.com/'>Knockout</a>. knockout.localStorage (GitHub: <a href='https://github.com/jimrhoskins/knockout.localStorage'>jimrhoskins / knockout.localStorage</a>) by Jim Hoskins makes <code>ko.observable</code> and <code>ko.observableArray</code> objects able to persist data to <code>localStorage</code>. You&#8217;ll need to specify a <code>persist</code> property which includes the key to store the observable&#8217;s data under.</p>

<p>It&#8217;s not quite as well-maintained or tested as Backbone.localStorage, but it does the job. There are some open pull requests that add things like <a href='https://github.com/jimrhoskins/knockout.localStorage/pull/5'>AMD support</a>.</p>

<h3 id='events'>Events</h3>

<p>The Web Storage specification also defines a <a href='http://www.w3.org/TR/webstorage/#the-storage-event'>&#8220;storage&#8221; event</a>. It fires when data changes, but you can&#8217;t stop it unlike other DOM events. This might make a more convenient bridge to data-binding frameworks.</p>

<h3 id='sync'>Sync</h3>

<p>If you&#8217;ve made an amazing single page app that persists data to <code>localStorage</code>, and you&#8217;re interested in adding a server-side API so users can save and sync data, what do you do? Well, step back and redefine the problem. Since <code>localStorage</code> is limited in size, why not use it like a caching layer? Your application could store data locally <em>until</em> a server is available, which suits a lot of use-cases, including mobile deployment. This is exactly what <a href='https://github.com/ggozad/Backbone.cachingSync'>Backbone Caching Sync</a> by Yiorgis Gozadinos does.</p>

<h3 id='cache'>Cache</h3>

<p>Another use people have found for <code>localStorage</code> is caching client-side <em>assets</em>. One example of this is <a href='http://addyosmani.github.io/basket.js/'>basket.js</a> by Addy Osmani.</p>

<blockquote>
<p>Bing and Google Search make extensive use of localStorage for stashing SCRIPT blocks that are used on subsequent page views. None of the other top sites from my previous post use localStorage in this way. Are Bing and Google Search onto something? Yes, definitely.</p>
</blockquote>

<h3 id='summary'>Summary</h3>

<p>If you need to persist data, <code>localStorage</code> can slot into data-binding and MVC/MVVC frameworks rather nicely. There are libraries out there, but with <code>JSON.parse</code> and <code>JSON.stringify</code> it&#8217;s trivial to store data. For applications with a server, then <code>localStorage</code> can be used as a temporary cache, which has the added benefit of helping support devices with intermittent network access.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/19/node-roundup">Node Roundup: Node 0.10.12, grunt-micro, connect-prerenderer</a></h2>
      <div class="meta">
        <span class="date">19 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/19/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#cluster">cluster</a>
          
            <a href="/tags.html#grunt">grunt</a>
          
            <a href="/tags.html#connect">connect</a>
          
            <a href="/tags.html#express">express</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='node_01012'>Node 0.10.12</h3>

<p><a href='http://blog.nodejs.org/2013/06/18/node-v0-10-12-stable/'>Node 0.10.12</a> was released yesterday. This version updates v8 and npm, and has a fix for the net module.</p>

<p>One minor change that I liked was readline now supports <code>CTRL-L</code> for clearing the screen &#8211; that means Node&#8217;s command-line interface will do this as well. Before hitting <code>CTRL-L</code> did nothing, which wasn&#8217;t very intuitive if you&#8217;re used to using readline tools.</p>

<h3 id='gruntmicro'>grunt-micro</h3>

<p>If size is important to you, then you&#8217;ll like grunt-micro (GitHub: <a href='https://github.com/markdalgleish/grunt-micro'>markdalgleish / grunt-micro</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/grunt-micro'>grunt-micro</a>) by Mark Dalgleish. This Grunt plugin ensures a script is smaller than a given size. Mark suggests this is useful for client-side authors that have size claims in their project documentation, but it could be useful for other things, like warning about asset sizes in mobile projects.</p>

<h3 id='connectprerenderer'>connect-prerenderer</h3>

<p>connect-prerenderer (GitHub: <a href='https://github.com/dai-shi/connect-prerenderer'>dai-shi / connect-prerenderer</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/connect-prerenderer'>connect-prerenderer</a>) by Daishi Kato is middleware for pre-rendering content to support systems that don&#8217;t interact well with Ajax-heavy interfaces. This is ideal for improving the SEO of a site.</p>

<p>The author has paid special attention to AngularJS &#8211; the documentation includes some Angular client-side code that adds support for the module.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/18/jquery-roundup">jQuery Roundup: Magnific Popup, blend.js</a></h2>
      <div class="meta">
        <span class="date">18 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/18/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#images">images</a>
          
            <a href="/tags.html#lightbox">lightbox</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='magnific_popup'>Magnific Popup</h3>

<p><img src='/images/posts/magnific-popup.png' alt='Magnific Popup' /></p>

<p><a href='http://dimsemenov.com/plugins/magnific-popup/'>Magnific Popup</a> (GitHub: <a href='https://github.com/dimsemenov/Magnific-Popup'>dimsemenov / Magnific-Popup</a>, License: <em>MIT</em>, jQuery: <a href='http://plugins.jquery.com/magnific-popup/'>magnific-popup</a>) by Dmitry Semenov is a responsive lightbox plugin that should work with mobile devices and also Zepto.js. It&#8217;s modular and has a build tool so you can generate a build that only includes the features you need. Sass is used for CSS, so you could easily customise the styles to suit your project.</p>

<p>Keyboard shortcuts are supported, the arrow keys and escape allow images to be navigated &#8211; see the <a href='http://codepen.io/dimsemenov/pen/vKrqs'>gallery demo</a> for an example of this.</p>

<p>A lot of the work is done by CSS, which means high DPI displays are supported:</p>

<blockquote>
<p>Default controls are made with pure CSS, without external graphics. For the main image there is a built in way to provide appropriate source for different pixel density displays.</p>
</blockquote>

<p>Content other than images is supported as well. The documentation has examples of using Magnific Popup with Google Maps and videos. For more information, see <a href='http://dimsemenov.com/plugins/magnific-popup/documentation.html'>the Magnific documentation</a>.</p>

<h3 id='blendjs'>blend.js</h3>

<p><a href='http://www.qur2.eu/blend.js/'>blend.js</a> (GitHub: <a href='https://github.com/qur2/blend.js'>qur2 / blend.js</a>, License: <em>MIT</em>) by Aur√©lien Scoubeau applies effects to images using Canvas. The effects themselves are functions that receive pixels. Processing is applied to sections of the image in a two-dimensional grid.</p>

<p>Custom parameters can be passed to blending functions:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Create some effects that will use additional arguments</span>
<span class='kd'>var</span> <span class='nx'>colorfx</span> <span class='o'>=</span> <span class='nx'>blend</span><span class='p'>.</span><span class='nx'>cfx</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>color</span><span class='p'>,</span> <span class='nx'>context</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>context</span><span class='p'>;</span> <span class='p'>});</span>
<span class='kd'>var</span> <span class='nx'>anglefx</span> <span class='o'>=</span> <span class='nx'>blend</span><span class='p'>.</span><span class='nx'>pfx</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>angle</span><span class='p'>,</span> <span class='nx'>radius</span><span class='p'>,</span> <span class='nx'>pixels</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>pixels</span><span class='p'>;</span> <span class='p'>});</span>

<span class='nx'>blender</span><span class='p'>.</span><span class='nx'>fx</span><span class='p'>(</span><span class='nx'>colorfx</span><span class='p'>,</span> <span class='s1'>&#39;rgb(255, 123, 123)&#39;</span><span class='p'>).</span><span class='nx'>fx</span><span class='p'>(</span><span class='nx'>anglefx</span><span class='p'>,</span> <span class='p'>[</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>PI</span><span class='p'>,</span> <span class='p'>.</span><span class='mi'>25</span><span class='p'>]);</span>
<span class='nx'>blender</span><span class='p'>.</span><span class='nx'>fx</span><span class='p'>(</span><span class='nx'>colorfx</span><span class='p'>,</span> <span class='s1'>&#39;#FFF&#39;</span><span class='p'>,</span> <span class='s1'>&#39;#AAA&#39;</span><span class='p'>,</span> <span class='s1'>&#39;#666&#39;</span><span class='p'>,</span> <span class='s1'>&#39;#111&#39;</span><span class='p'>);</span>

<span class='c1'>// Null is used to skip zones</span>
<span class='nx'>blender</span><span class='p'>.</span><span class='nx'>fx</span><span class='p'>(</span><span class='nx'>colorfx</span><span class='p'>,</span> <span class='s1'>&#39;#FFF&#39;</span><span class='p'>,</span> <span class='kc'>null</span><span class='p'>,</span> <span class='kc'>null</span><span class='p'>,</span> <span class='s1'>&#39;#111&#39;</span><span class='p'>);</span>

<span class='c1'>// Update the image</span>
<span class='nx'>blender</span><span class='p'>.</span><span class='nx'>update</span><span class='p'>();</span>
</code></pre>
</div>
<p>There are some bundled effects as well: desaturate, neutralize, vignette, and contrast. These can be found under <code>blend.fx</code>.</p>

<p>The author has included Mocha tests which can be ran in a browser here: <a href='http://www.qur2.eu/blend.js/test.html'>blend.js/test.html</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/17/fetch-cache-virtual-collection-wtcss">Backbone Fetch Cache, Backbone.VirtualCollection, WTCSS</a></h2>
      <div class="meta">
        <span class="date">17 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/17/fetch-cache-virtual-collection-wtcss/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='backbone_fetch_cache'>Backbone Fetch Cache</h3>

<p>Backbone Fetch Cache (GitHub: <a href='https://github.com/mrappleton/backbone-fetch-cache'>mrappleton / backbone-fetch-cache</a>) by Andy Appleton caches Backbone&#8217;s collection and model fetch requests. Data is stored in <code>localStorage</code> to speed up rendering. This is useful for caching Ajax requests with APIs that don&#8217;t allow control over response cache headers.</p>

<p>The plugin supports preloading data with the <code>prefill</code> option which can be passed to <code>fetch</code>, and the author has included some Jasmine tests.</p>

<h3 id='backbonevirtualcollection'>Backbone.VirtualCollection</h3>

<p>Backbone.VirtualCollection (GitHub: <a href='https://github.com/p3drosola/Backbone.VirtualCollection'>p3drosola / Backbone.VirtualCollection</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/backbone-virtual-collection'>backbone-virtual-collection</a>) by Pedro Sol√° allows Backbone.Marionette&#8217;s <a href='https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.collectionview.md'>CollectionViews</a> and <a href='https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.compositeview.md'>CompositeViews</a> to be used with instances of <code>Backbone.Collection</code>. This allows collections to be projected and sorted.</p>

<p>This example is from the project&#8217;s documentation:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>virtual_collection</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>VirtualCollection</span><span class='p'>(</span><span class='nx'>tasks_collection</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>task</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='nx'>task</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;user_id&#39;</span><span class='p'>)</span> <span class='o'>==</span> <span class='mi'>13</span><span class='p'>;</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>view</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TaskListView</span><span class='p'>({</span>
  <span class='nx'>collection</span><span class='o'>:</span> <span class='nx'>virtual_collection</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The project has Mocha tests and some details on its philosophy in the readme.</p>

<h3 id='wtcss'>WTCSS</h3>

<p><img src='/images/posts/wtcss.png' alt='WTCSS' /></p>

<p><a href='http://css.benjaminbenben.com/'>WTCSS</a> (GitHub: <a href='https://github.com/benfoxall/wtcss'>benfoxall / wtcss</a>, License: <em>MIT</em>) by Ben Foxall uses PhantomJS to analyse the CSS on a page, then attempts to visually indicate where each rule applies to using a Canvas overlay.</p>

<p>It looks impressive &#8211; there are demos on the project&#8217;s homepage, and I suspect it could form the basis for a more advanced CSS analysis and debugging tool.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/14/data-coffy-progress">Data.IO, CoffyScript, Circular Progress</a></h2>
      <div class="meta">
        <span class="date">14 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/14/data-coffy-progress/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#ES6">ES6</a>
          
            <a href="/tags.html#coffeescript">coffeescript</a>
          
            <a href="/tags.html#Canvas">Canvas</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='dataio'>Data.IO</h3>

<p>Data.IO (GitHub: <a href='https://github.com/scttnlsn/data.io'>scttnlsn / data.io</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/data.io'>data.io</a>) by Scott Nelson is a library for bidirectional syncing over Socket.IO. It has server-side resources which encapsulate logic and persistence. Resources are stacks of composable middleware functions that sync client requests. The client-side component is comparatively lightweight &#8211; it&#8217;s lower-level than Backbone.js, so I suspect it could be used with any data binding library.</p>

<p>Data.IO allows you to keep core business logic on the server, while easily subscribing to data in the client. It&#8217;s a bit like Backbone.js and Express, but purpose-built for working with data syncing.</p>

<h3 id='coffyscript'>CoffyScript</h3>

<p>CoffyScript (GitHub: <a href='https://github.com/loveencounterflow/coffy-script'>loveencounterflow / coffy-script</a>) by &#8220;loveencounterflow&#8221; is a port of CoffeeScript that adds support for <code>yield</code> from ES6:</p>

<blockquote>
<p>If you have never programmed with iterators and generators, you may imagine as a &#8216;resumable return&#8217; for starters. For the more technically oriented, ES6 defines generators as &#8220;First-class coroutines, represented as objects encapsulating suspended execution contexts (i.e., function activations).&#8221; Well, maybe &#8216;resumable return&#8217; is not so bad after all.</p>
</blockquote>
<div class='highlight'><pre><code class='coffeescript'><span class='c1'># Using a star after the arrow &#39;licenses&#39; the use of `yield` in the function body;</span>
<span class='c1'># it basically says: this is not an ordinary function, this is a generator function:</span>
<span class='nv'>count = </span><span class='nf'>-&gt;</span><span class='o'>*</span>
  <span class='nx'>yield</span> <span class='mi'>1</span>
  <span class='nx'>yield</span> <span class='mi'>2</span>
  <span class='nx'>yield</span> <span class='mi'>3</span>

<span class='c1'># Calling a generator function returns a generator:</span>
<span class='nv'>counting_generator = </span><span class='nx'>count</span><span class='p'>()</span>

<span class='c1'># Now that we have a generator, we can call one of its methods, `next`:</span>
<span class='nx'>log</span> <span class='nx'>counting_generator</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>()</span>   <span class='c1'># prints: { value: 1, done: false }</span>

<span class='c1'># ...and we can go on doing so until the generator becomes exhausted:</span>
<span class='nx'>log</span> <span class='nx'>counting_generator</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>()</span>   <span class='c1'># prints: { value: 2, done: false }</span>
<span class='nx'>log</span> <span class='nx'>counting_generator</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>()</span>   <span class='c1'># prints: { value: 3, done: false }</span>
<span class='nx'>log</span> <span class='nx'>counting_generator</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>()</span>   <span class='c1'># prints: { value: undefined, done: true }</span>
<span class='nx'>log</span> <span class='nx'>counting_generator</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>()</span>   <span class='c1'># throws an error saying &quot;Generator has already finished&quot;</span>
</code></pre>
</div>
<p>The documentation in the readme is thorough, and explores various aspects of working with <code>yield</code>. For example: <a href='https://github.com/loveencounterflow/coffy-script#how-not-to-yield-to-callback-hell-serializing-control-flow'>How Not to Yield to Callback Hell: Serializing Control Flow</a>.</p>

<h3 id='circular_progress'>Circular Progress</h3>

<p><img src='/images/posts/circular-progress.png' alt='Circular Progress' /></p>

<p>Circular Progress (GitHub: <a href='https://github.com/neoziro/circular-progress'>neoziro / circular-progress</a>, License: <em>MIT</em>, bower: <em>circular-progress</em>) by Greg Berg√© is a progress widget with no dependencies. Given a Canvas element, it&#8217;ll show a circular representation of a process&#8217;s progress:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>progress</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>CircularProgress</span><span class='p'>({</span>
  <span class='nx'>radius</span><span class='o'>:</span> <span class='mi'>70</span><span class='p'>,</span>
  <span class='nx'>strokeStyle</span><span class='o'>:</span> <span class='s1'>&#39;black&#39;</span><span class='p'>,</span>
  <span class='nx'>lineCap</span><span class='o'>:</span> <span class='s1'>&#39;round&#39;</span><span class='p'>,</span>
  <span class='nx'>lineWidth</span><span class='o'>:</span> <span class='mi'>4</span>
<span class='p'>});</span>

<span class='nb'>document</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>.</span><span class='nx'>appendChild</span><span class='p'>(</span><span class='nx'>progress</span><span class='p'>.</span><span class='nx'>el</span><span class='p'>);</span>
<span class='nx'>progress</span><span class='p'>.</span><span class='nx'>update</span><span class='p'>(</span><span class='mi'>40</span><span class='p'>);</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/13/angularjs-8">AngularJS: Iterators and Filters</a></h2>
      <div class="meta">
        <span class="date">13 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/13/angularjs-8/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#angularfeeds">angularfeeds</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#bower">bower</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2013/04/11/angularjs-1/'>Part 1: Google, Twitter, and AngularJS</a></li>
  <li><a href='http://dailyjs.com/2013/04/18/angularjs-2/'>Part 2: Let's Make a Feed Reader</a></li>
  <li><a href='http://dailyjs.com/2013/04/25/angularjs-3/'>Part 3: Rendering Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/09/angularjs-4/'>Part 4: Managing Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/16/angularjs-5/'>Part 5: Tests</a></li>
  <li><a href='http://dailyjs.com/2013/05/30/angularjs-6/'>Part 6: Adding Dependencies</a></li>
  <li><a href='http://dailyjs.com/2013/06/06/angularjs-7/'>Part 7: Form Validation</a></li>
  <li><a href='http://dailyjs.com/2013/06/13/angularjs-8/'><strong>Part 8: Iterators and Data</strong></a></li>
  <li><a href='http://dailyjs.com/2013/07/18/angularjs-9/'>Part 9: Installation</a></li>
</ul>
<p>AngularJS has a rich expression-based system for filtering and ordering data based on predicates. The <a href='http://docs.angularjs.org/api/ng.filter:orderBy'>orderBy filter</a> can be used with the <code>ng-repeat</code> directive:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;ul&gt;</span>
  <span class='nt'>&lt;li</span> <span class='na'>ng-repeat=</span><span class='s'>&quot;item in stories | orderBy:predicate:date&quot;</span><span class='nt'>&gt;&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;&quot;</span><span class='nt'>&gt;&lt;/a&gt;&lt;/li&gt;</span>
<span class='nt'>&lt;/ul&gt;</span>
</code></pre>
</div>
<p>Today we&#8217;re going to use <code>orderBy</code> inside a controller using dependency injection to organise multiple feeds into a river of news sorted by date.</p>

<h3 id='iterating_in_controllers'>Iterating in Controllers</h3>

<p>Before sorting and displaying stories, we need to collect them into a suitable data structure. An array will suffice (<code>app/scripts/controllers/main.js</code>):</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>stories</span> <span class='o'>=</span> <span class='p'>[];</span>
</code></pre>
</div>
<p>Next we need to append stories to this collection, but only if they haven&#8217;t already been added. Let&#8217;s use a function to encapsulate that away from fetching stories:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>fetchFeed</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>feed</span><span class='p'>.</span><span class='nx'>items</span> <span class='o'>=</span> <span class='p'>[];</span>

  <span class='kd'>var</span> <span class='nx'>apiUrl</span> <span class='o'>=</span> <span class='s2'>&quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20xml%20where%20url%3D&#39;&quot;</span><span class='p'>;</span>
  <span class='nx'>apiUrl</span> <span class='o'>+=</span> <span class='nb'>encodeURIComponent</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>);</span>
  <span class='nx'>apiUrl</span> <span class='o'>+=</span> <span class='s2'>&quot;&#39;%20and%20itemPath%3D&#39;feed.entry&#39;&amp;format=json&amp;diagnostics=true&amp;callback=JSON_CALLBACK&quot;</span><span class='p'>;</span>

  <span class='nx'>$http</span><span class='p'>.</span><span class='nx'>jsonp</span><span class='p'>(</span><span class='nx'>apiUrl</span><span class='p'>).</span>
    <span class='nx'>success</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>data</span><span class='p'>.</span><span class='nx'>query</span><span class='p'>.</span><span class='nx'>results</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>feed</span><span class='p'>.</span><span class='nx'>items</span> <span class='o'>=</span> <span class='nx'>data</span><span class='p'>.</span><span class='nx'>query</span><span class='p'>.</span><span class='nx'>results</span><span class='p'>.</span><span class='nx'>entry</span><span class='p'>;</span>
      <span class='p'>}</span>
      <span class='nx'>addStories</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>.</span><span class='nx'>items</span><span class='p'>);</span>
</code></pre>
</div>
<p>The <code>addStories</code> function just needs to loop over each feed item to determine if it&#8217;s already been added to <code>$scope.stories</code>. The <a href='http://docs.angularjs.org/api/angular.forEach'>angular.forEach</a> API in module <code>ng</code> is the perfect way to do this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>addStories</span><span class='p'>(</span><span class='nx'>stories</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>changed</span> <span class='o'>=</span> <span class='kc'>false</span><span class='p'>;</span>
  <span class='nx'>angular</span><span class='p'>.</span><span class='nx'>forEach</span><span class='p'>(</span><span class='nx'>stories</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>story</span><span class='p'>,</span> <span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>storyInCollection</span><span class='p'>(</span><span class='nx'>story</span><span class='p'>))</span> <span class='p'>{</span>
      <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>stories</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>story</span><span class='p'>);</span>
      <span class='nx'>changed</span> <span class='o'>=</span> <span class='kc'>true</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>As you can see, <code>forEach</code> accepts an array and a function to call for each item. The <code>storyInCollection</code> function now needs to loop over each existing story to see if it&#8217;s already been added. Figuring out which story is unique is easy because feeds have an <code>id</code> value:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>storyInCollection</span><span class='p'>(</span><span class='nx'>story</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>stories</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>stories</span><span class='p'>[</span><span class='nx'>i</span><span class='p'>].</span><span class='nx'>id</span> <span class='o'>===</span> <span class='nx'>story</span><span class='p'>.</span><span class='nx'>id</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='storing_data'>Storing Data</h3>

<p>Now we&#8217;ve got a list of stories in our scope, we need to sort them by date just like a real feed reader. Whenever <code>addStories</code> changes the list of stories we should sort it. AngularJS doesn&#8217;t really have any fancy functional methods like <code>map</code> or <code>some</code>, which you can find in ECMAScript 5 anyway, but it does provide API access to the filtering and sorting modules that are typically used in templates.</p>

<p>To access this functionality you&#8217;ll need to load <code>$filter</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;djsreaderApp&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>controller</span><span class='p'>(</span><span class='s1'>&#39;MainCtrl&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>$scope</span><span class='p'>,</span> <span class='nx'>$http</span><span class='p'>,</span> <span class='nx'>$timeout</span><span class='p'>,</span> <span class='nx'>$filter</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p><code>$filter</code> will return a function that knows how to sort or filter arrays. That means you need to call it with the name of the desired method, then call the value returned with an array and an expression: <code>$filter(filter)(array, expression)</code>. To add sorting to our feeds, call <code>$filter()()</code> and update the <code>$scope.stories</code> array:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// At the end of addStories</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>changed</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>stories</span> <span class='o'>=</span> <span class='nx'>$filter</span><span class='p'>(</span><span class='s1'>&#39;orderBy&#39;</span><span class='p'>)(</span><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>stories</span><span class='p'>,</span> <span class='s1'>&#39;date&#39;</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The only thing left to do is update the template in <code>app/views/mail.html</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;ul&gt;</span>
  <span class='nt'>&lt;li</span> <span class='na'>ng-repeat=</span><span class='s'>&quot;item in stories&quot;</span><span class='nt'>&gt;&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;&quot;</span><span class='nt'>&gt;&lt;/a&gt;&lt;/li&gt;</span>
<span class='nt'>&lt;/ul&gt;</span>
</code></pre>
</div>
<p>If you add multiple feeds using the app&#8217;s web interface you should see them combined into a river of news.</p>

<h3 id='conclusion'>Conclusion</h3>

<p><img src='/images/posts/angularjs-river-of-news.png' alt='The river of news view' /></p>

<p>You can find this code in <a href='https://github.com/alexyoung/djsreader/commit/ff4d6a613e8732a19a768fead82044b5411dca0c'>commit ff4d6a6</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/12/node-roundup">Node Roundup: evilscan, pm2, connectr</a></h2>
      <div class="meta">
        <span class="date">12 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/12/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#security">security</a>
          
            <a href="/tags.html#network">network</a>
          
            <a href="/tags.html#cluster">cluster</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#connect">connect</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='evilscan'>evilscan</h3>

<p>It&#8217;s finally here, TCP port scanning in Node! evilscan (GitHub: <a href='https://github.com/eviltik/evilscan'>eviltik / evilscan</a>, License: <em>GPLv3</em>, npm: <a href='https://npmjs.org/package/evilscan'>evilscan</a>) by Michel Soisson is a command-line tool, and has several interesting features, like control over the amount of concurrency, geolocation information, banner grabbing, and JSON output.</p>

<p>The author is focusing on <em>connect</em> scans, but is interested in adding SYN scans and UDP support. He&#8217;s looking for contributors, and the project includes tests written with Mocha and Chai, so you really have no excuse not to help out! I think it&#8217;s great to see well-tested security-related modules.</p>

<h3 id='pm2'>pm2</h3>

<p><img src='/images/posts/pm2.png' alt='pm2' /></p>

<p>pm2 (GitHub: <a href='https://github.com/Unitech/pm2'>Unitech / pm2</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/pm2'>pm2</a>) by Alexandre Strzelewicz is a command-line process manager for Node. It can be used to start a program as a cluster of processes, and then monitor the cluster&#8217;s health, monitor the server itself (CPU/RAM/etc.), keep processes alive, log exceptions, and throttle programs that stop too quickly.</p>

<p>It also has tests written with Mocha, documentation, and <a href='https://github.com/Unitech/pm2/tree/master/examples'>examples</a>.</p>

<h3 id='connectr'>connectr</h3>

<p>connectr (GitHub: <a href='https://github.com/olalonde/connectr'>olalonde / connectr</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/connectr'>connectr</a>) by Olivier Lalonde is a wrapper for Connect that allows middleware to be inserted at arbitrary points in the stack. That means you can add middleware <em>before</em> existing middleware.</p>

<p>It has a simple API: the <code>before</code> and <code>after</code> methods insert new middleware relative to other middleware, and it&#8217;s also possible to add middleware to the top of the stack with <code>first</code>, or even based on an <code>index</code>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/11/jquery-roundup">jQuery Roundup: Go Flat!</a></h2>
      <div class="meta">
        <span class="date">11 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/11/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
            <a href="/tags.html#design">design</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<p>Apple&#8217;s iOS 7 was announced yesterday, with a divisive flat-design-inspired interface. Some have called it out for <a href='http://www.theverge.com/apple/2013/6/10/4416726/the-design-of-ios-7-simply-confusing'>having inconsistent icons</a>, and others have <a href='http://daringfireball.net/2013/06/ios_7_signature'>praised it for exploring the z-axis</a>.</p>
<div class='image'>
  <img src='/images/posts/designmodo-flat-ui.png' />
  <small>Designmodo's Flat UI.</small>
</div>
<p>Flat design isn&#8217;t new to the web. A few months ago, <a href='http://designmodo.com/flat-free/'>Designmodo&#8217;s Flat UI</a> burst onto the scene, grabbing a huge amount of attention on Hacker News and reddit. <a href='https://github.com/twitter/bootstrap/pull/6342'>Bootstrap 3</a> also has a decidedly flat and minimal aesthetic.</p>

<p><a href='https://github.com/ququplay/jquery-mobile-flat-ui-theme'>jQuery Mobile Flat-UI Theme</a> is based on Designmodo&#8217;s project, and brings some of these design conventions over to <a href='http://jquerymobile.com/'>jQuery Mobile</a>.</p>

<p>If you&#8217;re looking to really take a bite out of Apple&#8217;s iOS 7 design, the use of transparency effects might edge you closer to Jony Ive&#8217;s aesthetic. You could use something like <a href='http://www.blurjs.com/'>Blur.js</a> (GitHub: <a href='https://github.com/jakiestfu/Blur.js'>jakiestfu / Blur.js</a>) to get a jQuery plugin API for transparency, or just write the relevant CSS by hand.</p>

<p>Although themes and plugins are useful, the focus of modern flat design seems to be on colours. Choosing a suitable palette can be difficult, but there are shortcuts. I liked <a href='http://bitsplitting.org/2013/05/30/whats-that-color/'>Daniel Jalkut&#8217;s post</a> on Adobe&#8217;s <a href='http://www.adobe.com/products/kuler.html'>Kuler</a> &#8211; the iPhone app can be used to generate colour palettes from the camera, which Daniel describes as &#8220;granting superpowers to users&#8221;.</p>

<p>For more inspiration, plenty of flat design gallery sites have started to spring up &#8211; <a href='http://fltdsgn.com/'>fltdsgn.com</a> is one that I&#8217;ve enjoyed flicking through.</p>

<p>As interesting as Apple, Google, and Microsoft&#8217;s recent shift to flat design has been, doesn&#8217;t it seem a little bit reminiscent of the past?</p>
<div class='image'>
  <img src='/images/posts/mac-os-1.png' />
  <small>You can't get flatter than this!  Source: <a href='http://www.webdesignerdepot.com/2009/03/operating-system-interface-design-between-1981-2009/'>Operating System Interface Design Between 1981-2009</a>.</small>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/10/easystar-boolasync-synchroscope">Easystar.js, Boolasync, Synchroscope</a></h2>
      <div class="meta">
        <span class="date">10 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/10/easystar-boolasync-synchroscope/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#async">async</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='easystarjs'>Easystar.js</h3>

<p><img src='/images/posts/easystarjs.png' alt='easystar' /></p>

<p><a href='http://easystar.nodejitsu.com/demo.html'>Easystar.js</a> (GitHub: <a href='https://github.com/prettymuchbryce/easystarjs'>prettymuchbryce / easystarjs</a>, License: <em>MIT</em>) by Bryce Neal is an <a href='http://en.wikipedia.org/wiki/A*_search_algorithm'>A* pathfinding API</a>. Given a map of tiles, easystar will find a path through traversable tiles on the grid:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>easystar</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>EasyStar</span><span class='p'>.</span><span class='nx'>js</span><span class='p'>();</span>
<span class='kd'>var</span> <span class='nx'>grid</span> <span class='o'>=</span> <span class='p'>[[</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>1</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>],</span>
            <span class='p'>[</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>1</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>],</span>
            <span class='p'>[</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>1</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>],</span>
            <span class='p'>[</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>1</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>],</span>
            <span class='p'>[</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>,</span><span class='mi'>0</span><span class='p'>]];</span>

<span class='nx'>easystar</span><span class='p'>.</span><span class='nx'>setGrid</span><span class='p'>(</span><span class='nx'>grid</span><span class='p'>);</span>
<span class='nx'>easystar</span><span class='p'>.</span><span class='nx'>setAcceptableTiles</span><span class='p'>([</span><span class='mi'>0</span><span class='p'>]);</span>

<span class='nx'>easystar</span><span class='p'>.</span><span class='nx'>findPath</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mi'>4</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>path</span><span class='p'>))</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>path</span> <span class='o'>===</span> <span class='kc'>null</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Path was not found.&#39;</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Path was found. The first Point is:&#39;</span><span class='p'>,</span> <span class='nx'>path</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>]);</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='nx'>easystar</span><span class='p'>.</span><span class='nx'>setIterationsPerCalculation</span><span class='p'>(</span><span class='mi'>1000</span><span class='p'>);</span> 
<span class='nx'>easystar</span><span class='p'>.</span><span class='nx'>calculate</span><span class='p'>()</span>
</code></pre>
</div>
<p>The readme has a full breakdown of the methods used in this example, and installation instructions.</p>

<h3 id='boolasync'>Boolasync</h3>

<p>Boolasync (GitHub: <a href='https://github.com/olalonde/boolasync'>olalonde / boolasync</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/boolasync'>boolasync</a>) by Olivier Lalonde is a module for composing logic using chained calls to asynchronous functions:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>fn1</span><span class='p'>.</span><span class='nx'>and</span><span class='p'>(</span><span class='nx'>fn2</span><span class='p'>).</span><span class='nx'>or</span><span class='p'>(</span><span class='nx'>fn3</span><span class='p'>).</span><span class='nx'>and</span><span class='p'>(</span><span class='nx'>fn4</span><span class='p'>.</span><span class='nx'>orNot</span><span class='p'>(</span><span class='nx'>fn5</span><span class='p'>).</span><span class='nx'>and</span><span class='p'>(</span><span class='nx'>fn6</span><span class='p'>)).</span><span class='nb'>eval</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='k'>return</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>);</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;The expression evaluated to true.&#39;</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;The expression evaluated to false.&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It supports optional &#8220;monkey patching&#8221; which adds boolean logic methods to <code>Function.prototype</code>. Olivier has included Mocha tests and a roadmap for future features.</p>

<h3 id='synchroscope'>synchroscope</h3>

<p>synchroscope (GitHub: <a href='https://github.com/dtinth/synchroscope'>dtinth / synchroscope</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/synchroscope'>synchroscope</a>) by Thai Pangsakulyanont allows the scope to be shared between multiple AngularJS clients. It works by sending data encoded using <code>JSON.stringify</code> over Socket.IO.</p>

<p>There&#8217;s a <a href='https://synchroscope.jit.su/'>synchroscope instance running on Nodejitsu</a> so you can try out examples using jsFiddle and similar services. The author has asked Nodejitsu for an open source drone but is currently waiting for a response. He&#8217;s got two demos running: <a href='http://jsfiddle.net/thai/MxNJM/'>AngularJS Todos</a> and <a href='http://jsfiddle.net/thai/8Gsyr/'>Tic Tac Toe Game</a>.</p>

<p>The bundled server stores everything in-memory, so it doesn&#8217;t currently scale across multiple processes. I imagine the server could easily be modified to use a database or perhaps pub/sub.</p>

<p>On the client the API is surprisingly minimal &#8211; once the <code>$ync</code> dependency has been added, data can be shared from <code>$scope</code> by calling <code>$ync($scope, keys, room)</code>. It seems like an idiomatic way to make real-time web applications with AngularJS.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/07/angular-svg">AngularJS and SVG</a></h2>
      <div class="meta">
        <span class="date">07 Jun 2013</span>
        | <span class="author">By John Munsch</span>
        | <span class="comments"><a href="/2013/06/07/angular-svg/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#svg">svg</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#guest-post">guest-post</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
  <p>John Munsch is a professional software developer with over 26 years of experience. These days he's building modern web app front ends with AngularJS after a couple of years spent doing the same kind of work with Backbone.js, Underscore.js, and Handlebars.js.</p>
  <p>For some reason odd reason everybody thinks he's a front end guy these days despite most of his career being spent in the Java, C++, and C world.</p>
  <p>This article was originally published at <a href='http://johnmunsch.wordpress.com/2013/06/03/changeable-vector-graphics-with-svg-and-angularjs/'>johnmunsch.wordpress.com/</a>.</p>
</div>
<p>I&#8217;ve long been a fan of using SVG (Scalable Vector Graphics) to do images that I can change easily on the fly. When I say &#8220;long been a fan&#8221; I mean that when I first started doing it I hand wrote some SVG as XML to show a donation bar we needed for GameDev.net and I had a program that would change the amount thus far donated on the bar and run it through an early version of the Java Batik library to spit out a JPEG file we could put on the website. It was crude, but it sure beat making a new graphic two or three times a day.</p>

<p>Years later things have gotten a lot easier. Modern browsers have advanced to the point where you can include an SVG image in the page as easily as referring to them in an img tag like so, &#60;img src=&#8221;something.svg&#8221;/&#62;, or just dumping some SVG code straight into the middle of the HTML for your page like this &#60;svg&#62;&#8230;lots of vector graphics&#8230;&#60;/svg&#62;. And editing? Why would you edit by hand anymore when Adobe Illustrator can generate SVG files of your drawings for you, or if you have no budget for such nice tools, <a href='http://inkscape.org/'>Inkscape</a> does a pretty good job and costs nothing.</p>

<p>So it occurred to me the other day that it would be interesting to see if I could use AngularJS and its ability to rewrite HTML on the fly and combine that with SVG in the browser to rewrite SVG on the fly. The answer is, it not only works, it&#8217;s downright easy to do so. I&#8217;ve provided a couple of different examples to show just how easy it is to so.</p>

<h3 id='example_1_svg_with_angularjs_model_values'>Example 1: SVG with AngularJS Model Values</h3>

<p>Getting an image to start with was pretty easy. I went to <a href='http://thenounproject.com/'>The Noun Project</a> and grabbed an icon of the sun I liked. It was provided by an unknown author in this case. The icon came in SVG format so all I did with it in Inkscape was add a little color and some text that showed the temperature. Then I saved that as a &#8220;Plain SVG&#8221; file rather than an &#8220;Inkscape SVG&#8221; file. It might have worked as well with the latter but I didn&#8217;t want any surprises.</p>
<div class='image'>
  <img src='/images/posts/inkscape-editing-svg-icon.png' alt='' />
  <small>Editing an SVG icon.</small>
</div>
<p>I then popped over to an HTML file I had generated and imported it with an image link like this:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;img</span> <span class='na'>alt=</span><span class='s'>&quot;&quot;</span> <span class='na'>src=</span><span class='s'>&quot;images/sunshine_plus_temp.svg&quot;</span> <span class='nt'>/&gt;</span>
</code></pre>
</div>
<p>I then hand edited the SVG file and found where the text for the temperature and replaced it with an AngularJS model variable reference. So:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;tspan</span> <span class='na'>sodipodi:role=</span><span class='s'>&quot;line&quot;</span> <span class='na'>id=</span><span class='s'>&quot;tspan4542&quot;</span> <span class='na'>x=</span><span class='s'>&quot;97.124313&quot;</span> <span class='na'>y=</span><span class='s'>&quot;52.063747&quot;</span><span class='nt'>&gt;</span>87¬∞<span class='nt'>&lt;/tspan&gt;</span>
</code></pre>
</div>
<p>became:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;tspan</span> <span class='na'>sodipodi:role=</span><span class='s'>&quot;line&quot;</span> <span class='na'>id=</span><span class='s'>&quot;tspan4542&quot;</span> <span class='na'>x=</span><span class='s'>&quot;97.124313&quot;</span> <span class='na'>y=</span><span class='s'>&quot;52.063747&quot;</span><span class='nt'>&gt;</span>¬∞<span class='nt'>&lt;/tspan&gt;</span>
</code></pre>
</div>
<p>The &#60;img&#62; way of loading the SVG had to change because AngularJS wasn&#8217;t going to replace a variable inside an image for me. So I simply pasted the contents of the sunshine_plus_temp.svg right into the middle of a page already setup for AngularJS and put the temp variable into my $scope. It worked like a charm. With an input field tied to the model variable, as I typed, the SVG graphic was automatically updated with the new value.</p>

<p>My final touch was to externalize the SVG file. Nobody wants to edit an HTML file with half a dozen or more embedded lumps of SVG in there. It could quickly turn into an unreadable mess. And, as I already observed, &#60;img&#62; won&#8217;t work either. Ah, but AngularJS jumps to the fore again because it has it&#8217;s ng-include directive. All I had to do was this:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;span</span> <span class='na'>ng-include=</span><span class='s'>&quot;&#39;images/sunshine_plus_temp.svg&#39;&quot;</span><span class='nt'>&gt;&lt;/span&gt;</span>
</code></pre>
</div>
<p>and AngularJS was including the image where I needed it and binding the variable to the model for real-time update. Here&#8217;s the final version of the code I came up with for my first example, note the second set of quotes inside the ng-include to tell it not to interpret the string inside there, it&#8217;s just a string to use directly:</p>
<div class='highlight'><pre><code class='html'>  <span class='nt'>&lt;div&gt;</span>
    <span class='nt'>&lt;p&gt;</span>Example 1: Text updated on the fly in an SVG graphic via AngularJS.<span class='nt'>&lt;/p&gt;</span>
    <span class='nt'>&lt;span</span> <span class='na'>ng-include=</span><span class='s'>&quot;&#39;images/sunshine_plus_temp.svg&#39;&quot;</span><span class='nt'>&gt;&lt;/span&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;label&gt;</span>Temperature<span class='nt'>&lt;/label&gt;</span> <span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;text&quot;</span> <span class='na'>ng-model=</span><span class='s'>&quot;temp&quot;</span><span class='nt'>/&gt;</span>
</code></pre>
</div>
<p>It&#8217;s worth noting that Inkscape is still perfectly capable of editing the SVG file even after the change I made and I guess I could have just made the change within Inkscape in the first place and never bothered opening up the file to manually change it with a text editor.</p>
<div class='image'>
  <img src='/images/posts/inkscape-editing-modified-svg-icon.png' alt='' />
  <small>Editing an SVG icon that has been modified by AngularJS.</small>
</div>
<h3 id='example_2_incorporating_an_image'>Example 2: Incorporating an Image</h3>

<p>We don&#8217;t really need a second example here, the first one showed pretty much everything but I wanted to show how easily images incorporate into SVG and help you achieve results that would be much much harder to do with other techniques. In this example I took a slides icon by Diego Naive, from The Noun Project, overlaid an image on top of it, and then overlaid a glossy reflection on top of half the slide, just to show that the image is fully incorporated by the graphic and can easily be rotated, have graphics on top of it, underneath it, etc. Stuff that would require a lot of work to do with many other techniques.</p>

<p>Again, I tested it out and edited the final SVG file to add a variable reference, in this case to instead of the specific file reference that I had added with Inkscape. This time, I will say that it does not edit nearly as well in Inkscape after the edit because it doesn&#8217;t know where to find an image named &#8221;&#8221;. Within the Inkscape editor you just see an error box where the image should be. Not perfect, but not debilitating either.</p>

<p>Here&#8217;s a page with links to both examples and to the GitHub repository with all the code for both: <a href='http://johnmunsch.github.io/AngularJSExamples/'>http://johnmunsch.github.io/AngularJSExamples/</a></p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/06/angularjs-7">AngularJS: Form Validation</a></h2>
      <div class="meta">
        <span class="date">06 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/06/angularjs-7/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#angularfeeds">angularfeeds</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#bower">bower</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2013/04/11/angularjs-1/'>Part 1: Google, Twitter, and AngularJS</a></li>
  <li><a href='http://dailyjs.com/2013/04/18/angularjs-2/'>Part 2: Let's Make a Feed Reader</a></li>
  <li><a href='http://dailyjs.com/2013/04/25/angularjs-3/'>Part 3: Rendering Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/09/angularjs-4/'>Part 4: Managing Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/16/angularjs-5/'>Part 5: Tests</a></li>
  <li><a href='http://dailyjs.com/2013/05/30/angularjs-6/'>Part 6: Adding Dependencies</a></li>
  <li><a href='http://dailyjs.com/2013/06/06/angularjs-7/'><strong>Part 7: Form Validation</strong></a></li>
  <li><a href='http://dailyjs.com/2013/06/13/angularjs-8/'>Part 8: Iterators and Data</a></li>
  <li><a href='http://dailyjs.com/2013/07/18/angularjs-9/'>Part 9: Installation</a></li>
</ul>
<p>This week we&#8217;re going to look at form validation with AngularJS. Angular has several directives that support form field validation, and they&#8217;re based on the <a href='http://diveintohtml5.info/forms.html'>HTML5 form validators</a>. You can specify that a field is <em>required</em>, a certain size, a certain type, and should match a given pattern.</p>

<h3 id='url_validation'>URL Validation</h3>
<div class='image'>
  <img src='/images/posts/angular-7-invalid.png' alt='' />
  <small>Chrome's validation message</small>
</div>
<p>This tutorial series is about a feed reader, so it&#8217;s lucky that one of the standard HTML5 validators is for checking URLs. It can be used by adding the <code>type=&quot;url&quot;</code> attribute to an <code>input</code>. Angular supports this through the <a href='http://docs.angularjs.org/api/ng.directive:input.url'>input url directive</a>. It takes various options, of which we&#8217;re interested in <code>required</code> and <code>ng-model</code>.</p>

<p>The <code>ng-model</code> directive allows the <code>input</code> to be linked to a model, but any Angular expression can be used. The <a href='http://docs.angularjs.org/api/ng.directive:form'>form directive</a> allows forms to be managed with Angular, and bound to controllers.</p>

<p>Just by adding a <code>form</code> and an <code>input</code> with <code>type=&quot;url&quot;</code> will result in some basic validation support (in <code>app/views/main.html</code>):</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;form</span> <span class='na'>name=</span><span class='s'>&quot;newFeed&quot;</span><span class='nt'>&gt;</span>
  URL: <span class='nt'>&lt;input</span> <span class='na'>size=</span><span class='s'>&quot;80&quot;</span> <span class='na'>name=</span><span class='s'>&quot;url&quot;</span> <span class='na'>ng-model=</span><span class='s'>&quot;newFeed.url&quot;</span> <span class='na'>type=</span><span class='s'>&quot;url&quot;</span> <span class='na'>required</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>ng-click=</span><span class='s'>&quot;addFeed(newFeed)&quot;</span><span class='nt'>&gt;</span>Add Feed<span class='nt'>&lt;/button&gt;</span>
<span class='nt'>&lt;/form&gt;</span>
</code></pre>
</div>
<p>However, this won&#8217;t quite work with the controller code that I wrote in the previous parts because <code>addFeed</code> isn&#8217;t set up to check validation.</p>

<h3 id='checking_validation_state'>Checking Validation State</h3>

<p>In a controller, a bound value can be interrogated for the validation status by checking the <code>$valid</code> property. The previous <code>addFeed</code>, in <code>app/scripts/controllers/main.js</code>, can be changed as follows:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>addFeed</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>feed</span><span class='p'>.</span><span class='nx'>$valid</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Copy this feed instance and reset the URL in the form</span>
    <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>);</span>
    <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>newFeed</span><span class='p'>.</span><span class='nx'>url</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This should work, but it does one thing wrong: <code>$scope.newFeed.url</code> can&#8217;t be reset by assigning it to an object literal, because <code>newFeed</code> is now decorated with internal properties to support validation. Instead, <em>copy</em> the new object, and reset the values in <code>newFeed</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>addFeed</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>feed</span><span class='p'>.</span><span class='nx'>$valid</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Copy this feed instance and reset the URL in the form</span>
    <span class='kd'>var</span> <span class='nx'>newFeed</span> <span class='o'>=</span> <span class='nx'>angular</span><span class='p'>.</span><span class='nx'>copy</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>);</span>
    <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>newFeed</span><span class='p'>);</span>
    <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>fetchFeed</span><span class='p'>(</span><span class='nx'>newFeed</span><span class='p'>);</span>
    <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>newFeed</span><span class='p'>.</span><span class='nx'>url</span> <span class='o'>=</span> <span class='s1'>&#39;&#39;</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<h3 id='fighting_with_html5'>Fighting with HTML5</h3>

<p>We should probably add error messages that are cross-browser compatible. To do that, you can use the <code>ng-show</code> directive:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;form</span> <span class='na'>name=</span><span class='s'>&quot;newFeed&quot;</span> <span class='na'>novalidate</span><span class='nt'>&gt;</span>
  URL: <span class='nt'>&lt;input</span> <span class='na'>size=</span><span class='s'>&quot;80&quot;</span> <span class='na'>name=</span><span class='s'>&quot;url&quot;</span> <span class='na'>ng-model=</span><span class='s'>&quot;newFeed.url&quot;</span> <span class='na'>type=</span><span class='s'>&quot;url&quot;</span> <span class='na'>required</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>ng-click=</span><span class='s'>&quot;addFeed(newFeed)&quot;</span><span class='nt'>&gt;</span>Add Feed<span class='nt'>&lt;/button&gt;</span>
  <span class='nt'>&lt;span</span> <span class='na'>class=</span><span class='s'>&quot;error&quot;</span> <span class='na'>ng-show=</span><span class='s'>&quot;newFeed.$error.required&quot;</span><span class='nt'>&gt;</span>Required!<span class='nt'>&lt;/span&gt;</span>
  <span class='nt'>&lt;span</span> <span class='na'>class=</span><span class='s'>&quot;error&quot;</span> <span class='na'>ng-show=</span><span class='s'>&quot;newFeed.$error.url&quot;</span><span class='nt'>&gt;</span>Invalid URL format!<span class='nt'>&lt;/span&gt;</span>
<span class='nt'>&lt;/form&gt;</span>
</code></pre>
</div>
<p>The <a href='http://docs.angularjs.org/api/ng.directive:ngShow('>ngShow</a> directive can conditionally show part of the DOM based on an Angular expression &#8211; in this case the validation results are checked. Incidentally, validation results can be found in the <code>$error</code> property fo the model.</p>

<p>Also notice that I added the <code>novalidate</code> attribute to the form; if you don&#8217;t do this HTML5 validations will still kick in, which causes confusing behaviour.</p>

<h3 id='disabling_the_button'>Disabling the Button</h3>

<p>Another nice touch is to use <code>ng-disabled</code> to disable the button when an invalid URL has been entered. The <a href='http://docs.angularjs.org/api/ng.directive:ngDisabled'>ngDisabled</a> directive takes an Angular expression, like the previous directives discussed here:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;form</span> <span class='na'>name=</span><span class='s'>&quot;newFeed&quot;</span> <span class='na'>novalidate</span><span class='nt'>&gt;</span>
  URL: <span class='nt'>&lt;input</span> <span class='na'>size=</span><span class='s'>&quot;80&quot;</span> <span class='na'>name=</span><span class='s'>&quot;url&quot;</span> <span class='na'>ng-model=</span><span class='s'>&quot;newFeed.url&quot;</span> <span class='na'>type=</span><span class='s'>&quot;url&quot;</span> <span class='na'>required</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>ng-disabled=</span><span class='s'>&quot;!newFeed.$valid&quot;</span> <span class='na'>ng-click=</span><span class='s'>&quot;addFeed(newFeed)&quot;</span><span class='nt'>&gt;</span>Add Feed<span class='nt'>&lt;/button&gt;</span>
  <span class='nt'>&lt;span</span> <span class='na'>class=</span><span class='s'>&quot;error&quot;</span> <span class='na'>ng-show=</span><span class='s'>&quot;newFeed.$error.required&quot;</span><span class='nt'>&gt;</span>Required!<span class='nt'>&lt;/span&gt;</span>
  <span class='nt'>&lt;span</span> <span class='na'>class=</span><span class='s'>&quot;error&quot;</span> <span class='na'>ng-show=</span><span class='s'>&quot;newFeed.$error.url&quot;</span><span class='nt'>&gt;</span>Invalid URL format!<span class='nt'>&lt;/span&gt;</span>
<span class='nt'>&lt;/form&gt;</span>
</code></pre>
</div>
<p>The difference here is I&#8217;ve used <code>!</code> to negate the expression: <code>!newFeed.$valid</code>. Yes, it&#8217;s really that easy!</p>

<h3 id='conclusion'>Conclusion</h3>

<p>There&#8217;s more to expressions than simple model-based truth tests &#8211; you can do pretty much anything short of control flow statements. For more, see <a href='http://docs.angularjs.org/guide/expression'>Angular Developer Guide, Expressions</a>.</p>

<p>The latest commit for this project was <a href='https://github.com/alexyoung/djsreader/tree/0dcc99699824e6a75cff66a52bbbdc9c197721e2'>0dcc996</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/05/node-roundup">Node Roundup: 0.8.24, 0.10.10, speakingurl, node-xmljson</a></h2>
      <div class="meta">
        <span class="date">05 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/05/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#web">web</a>
          
            <a href="/tags.html#urls">urls</a>
          
            <a href="/tags.html#xml">xml</a>
          
            <a href="/tags.html#json">json</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='node_0824_and_01010'>Node 0.8.24 and 0.10.10</h3>

<p><a href='http://blog.nodejs.org/2013/06/04/node-v0-8-24-maintenance/'>Node 0.8.24</a> and <a href='http://blog.nodejs.org/2013/06/04/node-v0-10-10-stable/'>Node 0.10.10</a> have been released. The 0.8 (maintenance) release gets an updated npm, and some fixes for the url and http core modules.</p>

<p>Meanwhile, 0.10.10 has a new version of the internal uv library, and <code>unshift(&#39;&#39;)</code> now behaves like a noop.</p>

<h3 id='speakingurl'>speakingurl</h3>

<p>Sascha Droste sent in speakingurl (GitHub: <a href='https://github.com/pid/speakingurl'>pid / speakingurl</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/speakingurl'>speakingurl</a>), a module for generating clean URL slugs:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>slug</span> <span class='o'>=</span> <span class='nx'>getSlug</span><span class='p'>(</span><span class='s1'>&#39;Apple &amp; Pear!&#39;</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>slug</span><span class='p'>);</span>
<span class='c1'>// Output: apple-and-pear</span>

<span class='nx'>slug</span> <span class='o'>=</span> <span class='nx'>getSlug</span><span class='p'>(</span><span class='s1'>&#39;Foo ‚ô• Bar&#39;</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>slug</span><span class='p'>);</span>
<span class='c1'>// Output: foo-love-bar</span>
</code></pre>
</div>
<p>It has tests, localisation support, and works in browsers.</p>

<h3 id='nodexmljson'>node-xmljson</h3>

<p>node-xmljson (GitHub: <a href='https://github.com/ExactTarget/node-xmljson'>ExactTarget / node-xmljson</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/xmljson'>xmljson</a>) from Adam Alexander and Benjamin Dean of ExactTarget was just released, providing quick and simple bi-directional translation between XML and JSON formats.</p>

<h5 id='xml_to_json'>XML to JSON:</h5>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Load the module</span>
<span class='kd'>var</span> <span class='nx'>to_json</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;xmljson&#39;</span><span class='p'>).</span><span class='nx'>to_json</span><span class='p'>;</span>

<span class='c1'>// An XML string</span>
<span class='kd'>var</span> <span class='nx'>xml</span> <span class='o'>=</span> <span class='s1'>&#39;&#39;</span> <span class='o'>+</span>
    <span class='s1'>&#39;&lt;data&gt;&#39;</span> <span class='o'>+</span>
        <span class='s1'>&#39;&lt;prop1&gt;val1&lt;/prop1&gt;&#39;</span> <span class='o'>+</span>
        <span class='s1'>&#39;&lt;prop2&gt;val2&lt;/prop2&gt;&#39;</span> <span class='o'>+</span>
        <span class='s1'>&#39;&lt;prop3&gt;val3&lt;/prop3&gt;&#39;</span> <span class='o'>+</span>
    <span class='s1'>&#39;&lt;/data&gt;&#39;</span><span class='p'>;</span>

<span class='nx'>to_json</span><span class='p'>(</span><span class='nx'>xml</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>error</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Module returns a JS object</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>);</span>
    <span class='c1'>// -&gt; { prop1: &#39;val1&#39;, prop2: &#39;val2&#39;, prop3: &#39;val3&#39; }</span>

    <span class='c1'>// Format as a JSON string</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>JSON</span><span class='p'>.</span><span class='nx'>stringify</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>));</span>
    <span class='c1'>// -&gt; {&quot;prop1&quot;:&quot;val1&quot;,&quot;prop2&quot;:&quot;val2&quot;,&quot;prop3&quot;:&quot;val3&quot;}</span>
<span class='p'>});</span>
</code></pre>
</div>
<h5 id='json_to_xml'>JSON to XML:</h5>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Load the module</span>
<span class='kd'>var</span> <span class='nx'>to_xml</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;xmljson&#39;</span><span class='p'>).</span><span class='nx'>to_xml</span><span class='p'>;</span>

<span class='c1'>// A JSON string</span>
<span class='kd'>var</span> <span class='nx'>json</span> <span class='o'>=</span> <span class='s1'>&#39;&#39;</span> <span class='o'>+</span>
    <span class='s1'>&#39;{&#39;</span> <span class='o'>+</span>
        <span class='s1'>&#39;&quot;prop1&quot;:&quot;val1&quot;,&#39;</span> <span class='o'>+</span>
        <span class='s1'>&#39;&quot;prop2&quot;:&quot;val2&quot;,&#39;</span> <span class='o'>+</span>
        <span class='s1'>&#39;&quot;prop3&quot;:&quot;val3&quot;&#39;</span> <span class='o'>+</span>
    <span class='s1'>&#39;}&#39;</span><span class='p'>;</span>

<span class='nx'>to_xml</span><span class='p'>(</span><span class='nx'>json</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>error</span><span class='p'>,</span> <span class='nx'>xml</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Module returns an XML string</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>xml</span><span class='p'>);</span>
    <span class='c1'>// -&gt; &lt;data&gt;&lt;prop1&gt;val1&lt;/prop1&gt;&lt;prop2&gt;val2&lt;/prop2&gt;&lt;prop3&gt;val3&lt;/prop3&gt;&lt;/data&gt;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>ExactTarget has also released <a href='http://exacttarget.github.io/fuelux'>Fuel UX</a> (GitHub: <a href='https://github.com/ExactTarget/fuelux'>ExactTarget / fuelux</a>, License: <em>MIT</em>) a lightweight web UI library that extends Twitter Bootstrap with additional JavaScript controls.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/04/jquery-roundup">jQuery Roundup: 1.10.1, 2.0.2, ikSelect, photoWall.js</a></h2>
      <div class="meta">
        <span class="date">04 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/04/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#select">select</a>
          
            <a href="/tags.html#galleries">galleries</a>
          
            <a href="/tags.html#images">images</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='jquery_1101_and_202'>jQuery 1.10.1 and 2.0.2</h3>

<p>&#8220;A new release already? It&#8217;s only been a week! Yes, because you deserve it. We&#8217;re greatly encouraged by all the people who upgraded and found our well-hidden &#8216;we completely hosed relative animations&#8217; easter egg,&#8221; writes Dave Methvin, about the release of <a href='http://blog.jquery.com/2013/05/30/jquery-1-10-1-and-2-0-2-released/'>jQuery 1.10.1 and 2.0.2</a>.</p>

<p>The full background to this bug was documented in <a href='http://bugs.jquery.com/ticket/13939'>ticket #13939</a>. Another <a href='http://bugs.jquery.com/ticket/13937'>animation-related bug was fixed</a>, and an <a href='http://bugs.jquery.com/ticket/13936'>IE selector/iframe issue</a> as well.</p>

<h3 id='ikselect'>ikSelect</h3>

<p><a href='http://igor10k.github.io/ikSelect/'>ikSelect</a> (GitHub: <a href='https://github.com/Igor10k/ikSelect'>Igor10k / ikSelect</a>) by &#8220;Igor10k&#8221; is another <code>select</code> replacement plugin! This one supports custom markup and <code>inline-block</code>, <code>optgroup</code>, adding and removing <code>option</code>s, callbacks, and event triggers.</p>

<p>The API is clean and idiomatic jQuery. There&#8217;s a single entry point, <code>$(selector).ikSelect</code> which can be used to apply the plugin to a <code>select</code>, or issue commands to an instance of ikSelect. Various options are supported, like setting the width automatically and adding search support (known as filtering in this case).</p>

<h3 id='photowalljs'>photoWall.js</h3>

<p><a href='http://jeremyjcpaul.com/photo-wall-demo.php'>photoWall.js</a> (GitHub: <a href='https://github.com/jeremyjcpaul/photowall'>jeremyjcpaul / photowall</a>, License: <em>MIT</em>, jQuery: <a href='http://plugins.jquery.com/photowall/'>photowall</a>) by Jeremy JC Paul creates a photo gallery in a similar style to Google+/Picasa, where clicking on an image opens a panel that displays additional metadata.</p>

<p>The markup allows the photo&#8217;s title and description to be specified like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='o'>&lt;</span><span class='nx'>div</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;photowall&quot;</span><span class='o'>&gt;</span>
  <span class='o'>&lt;</span><span class='nx'>div</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;pw-slide&quot;</span><span class='o'>&gt;</span>
    <span class='o'>&lt;</span><span class='nx'>img</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;pw-image&quot;</span> <span class='nx'>src</span><span class='o'>=</span><span class='s2'>&quot;images/image-filename.jpg&quot;</span> <span class='o'>/&gt;</span>
    <span class='o'>&lt;</span><span class='nx'>div</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;pw-image-desc&quot;</span><span class='o'>&gt;</span>
      <span class='c'>&lt;!--</span> <span class='nx'>Any</span> <span class='nx'>HTML</span> <span class='nx'>content</span> <span class='nx'>can</span> <span class='nx'>go</span> <span class='k'>in</span> <span class='nx'>here</span><span class='p'>.</span> <span class='o'>--&gt;</span>
    <span class='o'>&lt;</span><span class='err'>/div&gt;</span>
  <span class='o'>&lt;</span><span class='err'>/div&gt;</span>
<span class='o'>&lt;</span><span class='err'>/div&gt;</span>
</code></pre>
</div>
<p>The plugin is invoked using <code>$(selector).photoWall()</code>, and supported options include event handlers and animation speed.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/06/03/rust-smart-table">Angular Smart Table, TurtleScript</a></h2>
      <div class="meta">
        <span class="date">03 Jun 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/06/03/rust-smart-table/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angular">angular</a>
          
            <a href="/tags.html#rust">rust</a>
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#education">education</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='smart_table'>Smart Table</h3>

<p><img src='/images/posts/smarttable.png' alt='Smart Table' /></p>

<p><a href='http://lorenzofox3.github.io/smart-table-website/'>Smart Table</a> (GitHub: <a href='https://github.com/lorenzofox3/Smart-Table'>lorenzofox3 / Smart-Table</a>, License: <em>MIT</em>) by Laurent Renard helps quickly render data as tables in AngularJS projects. It provides the <code>smart-table</code> directive which will render a <code>rowCollection</code> &#8211; an array that contains objects for each row. It also supports layouts by specifying the columns with <code>columnCollection</code>, data formatting, and sorting.</p>

<p>Smart Table has some more advanced features as well, like styling and inline editing. Laurent has included API documentation and unit tests.</p>

<h3 id='turtlescript'>TurtleScript</h3>

<p><a href='http://cscott.net/Projects/TurtleScript/'>TurtleScript</a> (GitHub: <a href='https://github.com/cscott/turtlescript'>cscott / TurtleScript</a>, License: <em>GPLv2</em>) by C. Scott Ananian from One Laptop per Child aims to provide a Logo-like environment for teaching programming. TurtleScript itself is based on JavaScript, and uses a bytecode compiler/interpreter.</p>

<p>The TurtleScript documentation has a lot more background that explains what it does and how it works. Meanwhile, Scott has been working on rusty-turtle (GitHub: <a href='https://github.com/cscott/rusty-turtle'>cscott / rusty-turtle</a>, License: <em>GPLv2</em>). This is a TurtleScript implementation written in <a href='http://www.rust-lang.org/'>Rust</a>. If you&#8217;re interested in the Rust language and want to see what a JavaScript parser in Rust might look like, check it out!</p>

<blockquote>
<p>Rusty-turtle is a &#8220;native&#8221; bytecode interpreter, so it runs the TurtleScript parser and compiler in order to generate bytecode for it to run.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/31/suspend">Generators and Suspend</a></h2>
      <div class="meta">
        <span class="date">31 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/31/suspend/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#es6">es6</a>
          
        </span>
      </div>
      <div class="preview">
        <p><a href='http://wiki.ecmascript.org/doku.php?id=harmony:generators'>ECMAScript 6 generators</a> are at the draft stage, and available in Node 0.11 when <code>node</code> is run with <code>--harmony</code> or <code>--harmony-generators</code>. Generators are &#8220;first-class coroutines&#8221; &#8211; think functions that can be postponed and resumed.</p>

<p>Generators are denoted with <code>function*</code>, and return values by calling <code>yield</code>. The value isn&#8217;t really returned: <code>yield</code> could be placed inside a loop, and then <code>generator.next()</code> is called to fetch the yielded value. The generator is said to be an <em>iterator</em> &#8211; it could be provided as the expression to an iteration statement like <code>for</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span><span class='o'>*</span> <span class='nx'>generator</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>for</span> <span class='p'>(;;)</span> <span class='p'>{</span>
    <span class='nx'>yield</span> <span class='nx'>someValue</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>}</span>

<span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>value</span> <span class='nx'>of</span> <span class='nx'>generator</span><span class='p'>())</span> <span class='p'>{</span>
  <span class='c1'>// Do something with `value`,</span>
  <span class='c1'>// then `break` when enough values have been yielded</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The ECMAScript 6 wiki has a Fibonacci sequence example, but generators don&#8217;t really hit their conceptual stride until you start hooking generators up to other generators. The classic example of this is consumer-producer relationships: generators that produce values, and then consumers that use them. The two generators are said to be <em>symmetric</em> &#8211; a continuous evaluation where coroutines yield to each other, rather than two functions that <em>call</em> each other.</p>

<p>Jeremy Martin sent in a small but novel module based on generators called suspend (GitHub: <a href='https://github.com/jmar777/suspend'>jmar777 / suspend</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/suspend'>suspend</a>). As it needs Node 0.11 and for Node to be run with <code>--harmony</code>, let&#8217;s just say it&#8217;s academically interesting for now.</p>

<p>You can think of <em>suspend</em> as an early example of generators that feature an idiomatic Node API:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// async without suspend</span>
<span class='nx'>async</span><span class='p'>.</span><span class='nx'>map</span><span class='p'>([</span><span class='s1'>&#39;file1&#39;</span><span class='p'>,</span><span class='s1'>&#39;file2&#39;</span><span class='p'>,</span><span class='s1'>&#39;file3&#39;</span><span class='p'>],</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>stat</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>results</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// results is now an array of stats for each file</span>
<span class='p'>});</span>

<span class='c1'>// async with suspend</span>
<span class='kd'>var</span> <span class='nx'>res</span> <span class='o'>=</span> <span class='nx'>yield</span> <span class='nx'>async</span><span class='p'>.</span><span class='nx'>map</span><span class='p'>([</span><span class='s1'>&#39;file1&#39;</span><span class='p'>,</span><span class='s1'>&#39;file2&#39;</span><span class='p'>,</span><span class='s1'>&#39;file3&#39;</span><span class='p'>],</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>stat</span><span class='p'>,</span> <span class='nx'>resume</span><span class='p'>);</span>
</code></pre>
</div>
<p>Here the <a href='https://npmjs.org/package/async'>async</a> module has been modified to use <em>suspend</em>, resulting in more concise code.</p>

<blockquote>
<p>suspend is &#8220;red light, green light&#8221; for asynchronous code execution. <code>yield</code> means stop, and <code>resume</code> means go.</p>
</blockquote>

<p>If this sounds familiar, that&#8217;s because it&#8217;s not semantically too different to <a href='https://github.com/laverdet/node-fibers'>node-fibers</a>. The node-fibers documentation includes a comparison between the ES6 generators example and its own syntax.</p>

<p>This is the entire source to <em>suspend</em>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>suspend</span> <span class='o'>=</span> <span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='kd'>function</span> <span class='nx'>suspend</span><span class='p'>(</span><span class='nx'>generator</span><span class='p'>,</span> <span class='nx'>opts</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>opts</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>opts</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>return</span> <span class='kd'>function</span> <span class='nx'>start</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nb'>Array</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>unshift</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>,</span> <span class='kd'>function</span> <span class='nx'>resume</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>opts</span><span class='p'>.</span><span class='k'>throw</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='k'>return</span> <span class='nx'>iterator</span><span class='p'>.</span><span class='k'>throw</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>);</span>
        <span class='nx'>iterator</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>(</span><span class='nb'>Array</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>));</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='nx'>iterator</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>(</span><span class='nb'>Array</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>));</span>
      <span class='p'>}</span>
    <span class='p'>});</span>
    <span class='kd'>var</span> <span class='nx'>iterator</span> <span class='o'>=</span> <span class='nx'>generator</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
    <span class='nx'>iterator</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>();</span>
  <span class='p'>};</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The <code>suspend</code> function accepts a generator and returns a function. The callback supplied to <code>suspend</code> will be passed the <code>resume</code> function, which accepts an error argument to fit Node&#8217;s callback API style. The user-supplied callback can then call <code>yield</code> on an asynchronous function that accepts <code>resume</code> as its callback, allowing Node&#8217;s core modules (or any other asynchronous methods) to be used in a synchronous style:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>suspend</span><span class='p'>(</span><span class='kd'>function</span><span class='o'>*</span> <span class='p'>(</span><span class='nx'>resume</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>data</span> <span class='o'>=</span> <span class='nx'>yield</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>readFile</span><span class='p'>(</span><span class='nx'>__filename</span><span class='p'>,</span> <span class='nx'>resume</span><span class='p'>);</span>
<span class='p'>})();</span>
</code></pre>
</div>
<p>I liked this twist on generators, and I think modules like this will start to become more important in the JavaScript community over the next few years.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/30/angularjs-6">AngularJS: Adding Dependencies</a></h2>
      <div class="meta">
        <span class="date">30 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/30/angularjs-6/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#angularfeeds">angularfeeds</a>
          
            <a href="/tags.html#bower">bower</a>
          
            <a href="/tags.html#grunt">grunt</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2013/04/11/angularjs-1/'>Part 1: Google, Twitter, and AngularJS</a></li>
  <li><a href='http://dailyjs.com/2013/04/18/angularjs-2/'>Part 2: Let's Make a Feed Reader</a></li>
  <li><a href='http://dailyjs.com/2013/04/25/angularjs-3/'>Part 3: Rendering Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/09/angularjs-4/'>Part 4: Managing Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/16/angularjs-5/'>Part 5: Tests</a></li>
  <li><a href='http://dailyjs.com/2013/05/30/angularjs-6/'><strong>Part 6: Adding Dependencies</strong></a></li>
  <li><a href='http://dailyjs.com/2013/06/06/angularjs-7/'>Part 7: Form Validation</a></li>
  <li><a href='http://dailyjs.com/2013/06/13/angularjs-8/'>Part 8: Iterators and Data</a></li>
  <li><a href='http://dailyjs.com/2013/07/18/angularjs-9/'>Part 9: Installation</a></li>
</ul>
<h3 id='adding_dependencies_with_bower'>Adding Dependencies with Bower</h3>

<p>This tutorial is really about <a href='http://yeoman.io/'>Yeoman</a>, Bower, and Grunt, because I still feel like it&#8217;s worth exploring the build system that I introduced for this AngularJS project. I appreciate that the number of files installed by Yeoman is a little bit bewildering, so we&#8217;re going to take a step back from AngularJS and look at how dependencies work and how to add new dependencies to a project.</p>

<p>Although Yeoman helps get a new project off the ground, it takes a fair amount of digging to figure out how everything is laid out. For example: let&#8217;s say we want to add <a href='https://github.com/jlong/sass-twitter-bootstrap.git'>sass-bootstrap</a> to <a href='https://github.com/alexyoung/djsreader'>djsreader</a> &#8211; how exactly do we do this?</p>

<p>Yeoman uses <a href='http://bower.io/'>Bower</a> for managing dependencies, and Bower uses <code>component.json</code> (or <code>bower.json</code> by default in newer versions). To add <code>sass-bootstrap</code> to the project, open <code>component.json</code> and add <code>&quot;sass-bootstrap&quot;: &quot;2.3.x&quot;</code> to the <code>dependencies</code> property:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>
  <span class='s2'>&quot;name&quot;</span><span class='o'>:</span> <span class='s2'>&quot;djsreader&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;version&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.0.0&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;dependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;angular&quot;</span><span class='o'>:</span> <span class='s2'>&quot;~1.0.5&quot;</span><span class='p'>,</span>
    <span class='s2'>&quot;json3&quot;</span><span class='o'>:</span> <span class='s2'>&quot;~3.2.4&quot;</span><span class='p'>,</span>
    <span class='s2'>&quot;es5-shim&quot;</span><span class='o'>:</span> <span class='s2'>&quot;~2.0.8&quot;</span><span class='p'>,</span>
    <span class='s2'>&quot;angular-resource&quot;</span><span class='o'>:</span> <span class='s2'>&quot;~1.0.5&quot;</span><span class='p'>,</span>
    <span class='s2'>&quot;angular-cookies&quot;</span><span class='o'>:</span> <span class='s2'>&quot;~1.0.5&quot;</span><span class='p'>,</span>
    <span class='s2'>&quot;angular-sanitize&quot;</span><span class='o'>:</span> <span class='s2'>&quot;~1.0.5&quot;</span><span class='p'>,</span>
    <span class='s2'>&quot;sass-bootstrap&quot;</span><span class='o'>:</span> <span class='s2'>&quot;2.3.x&quot;</span>
  <span class='p'>},</span>
  <span class='s2'>&quot;devDependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;angular-mocks&quot;</span><span class='o'>:</span> <span class='s2'>&quot;~1.0.5&quot;</span><span class='p'>,</span>
    <span class='s2'>&quot;angular-scenario&quot;</span><span class='o'>:</span> <span class='s2'>&quot;~1.0.5&quot;</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Next run <code>bower install</code> to install the dependencies to <code>app/components</code>. If you look inside <code>app/components</code> you should see <code>sass-bootstrap</code> in there.</p>

<p>Now the package is installed, how do we actually use it with our project? The easiest way is to create a suitable Grunt task.</p>

<h3 id='grunt'>Grunt</h3>

<p><a href='http://gruntjs.com/'>Grunt</a> runs the djsreader development server and compiles production builds that can be dropped onto a web server. <code>Gruntfile.js</code> is mostly configuration &#8211; it has the various settings needed to drive Grunt tasks so they can build our project. One task is <code>compass</code> &#8211; if you search the file for <code>compass</code> you should see a property that defines some options for compiling Sass files.</p>

<p>The convention for Grunt task configuration is <code>taskName: { argument: options }</code>. We want to add a new argument to the <code>compass</code> task for building the Bootstrap Sass files. We know the files are in <code>app/components/sass-bootstrap</code>, so we just need to tell it to compile the files in there.</p>

<p>Add a new property to <code>compass</code> called <code>bootstrap</code>. It should be on line 143:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>compass</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='c1'>// options/dist/server</span>
  <span class='nx'>bootstrap</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>options</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>sassDir</span><span class='o'>:</span> <span class='s1'>&#39;&lt;%= yeoman.app %&gt;/components/sass-bootstrap/lib&#39;</span><span class='p'>,</span>
      <span class='nx'>cssDir</span><span class='o'>:</span> <span class='s1'>&#39;.tmp/styles&#39;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Near the bottom of the file add an entry for <code>compass:bootstrap</code> to <code>grunt.registerTask(&#39;server&#39;, [</code> and <code>grunt.registerTask(&#39;build&#39;, [</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>grunt</span><span class='p'>.</span><span class='nx'>registerTask</span><span class='p'>(</span><span class='s1'>&#39;server&#39;</span><span class='p'>,</span> <span class='p'>[</span>
  <span class='s1'>&#39;clean:server&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;coffee:dist&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;compass:server&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;compass:bootstrap&#39;</span><span class='p'>,</span> <span class='cm'>/* This one! */</span>
  <span class='s1'>&#39;livereload-start&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;connect:livereload&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;open&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;watch&#39;</span>
<span class='p'>]);</span>
</code></pre>
</div>
<p>This causes the Bootstrap <code>.scss</code> files to be compiled whenever a server is started.</p>

<p>Now open <code>app/index.html</code> and add <code>styles/bootstrap.css</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;link</span> <span class='na'>rel=</span><span class='s'>&quot;stylesheet&quot;</span> <span class='na'>href=</span><span class='s'>&quot;styles/bootstrap.css&quot;</span><span class='nt'>&gt;</span>
<span class='nt'>&lt;link</span> <span class='na'>rel=</span><span class='s'>&quot;stylesheet&quot;</span> <span class='na'>href=</span><span class='s'>&quot;styles/main.css&quot;</span><span class='nt'>&gt;</span>
</code></pre>
</div>
<h3 id='conclusion'>Conclusion</h3>

<p><img src='/images/posts/angularboot.png' alt='Angular/Bootstrap' /></p>

<p>The settings files Yeoman created for us makes managing dependencies easy &#8211; there&#8217;s a world of cool things you can find with <code>bower search</code> and try out.</p>

<p>This week&#8217;s code is in <a href='https://github.com/alexyoung/djsreader/tree/005d1be3ec20100ac5044cb2e05489c8a7b5fa8d'>commit 005d1be</a>.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page14">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <strong>15</strong>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page16">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

