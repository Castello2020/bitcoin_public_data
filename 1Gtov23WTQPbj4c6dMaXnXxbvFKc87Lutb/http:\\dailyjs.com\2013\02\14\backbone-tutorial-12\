http://dailyjs.com/2013/02/14/backbone-tutorial-12/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 22:09:20 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "1004e7-7f06-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8505
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Backbone.js Tutorial: Testing with Mocks</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2013/02/14/backbone-tutorial-12">Backbone.js Tutorial: Testing with Mocks</a></h2>

<div class="meta">
  14 Feb 2013 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#backbone.js">backbone.js</a>
    
      <a href="/tags.html#mvc">mvc</a>
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#backgoog">backgoog</a>
    
      <a href="/tags.html#testing">testing</a>
    
  </span>
</div>

<div id="post">
<ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'><strong>Part 12: Testing with Mocks</strong></a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>5b0a529</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 5b0a529
</code></pre>
</div>
<h3 id='mocks'>Mocks</h3>

<p>Last week I wrote about testing a custom <code>Backbone.sync</code> implementation using Sinon&#8217;s spies. This worked well in our situation where the transport layer isn&#8217;t necessarily pinned down &#8211; Sinon includes <a href='http://sinonjs.org/docs/#server'>Fake XMLHttpRequest</a>, but this won&#8217;t work with Google&#8217;s API as far as I know. This week I want to introduce another testing concept that Sinon provides: mocks.</p>

<p>Mocks are fake methods that allow expectations to be registered. Historically, you&#8217;ll find mocks being used in unit tests where I/O occurs. If you&#8217;re testing business logic you don&#8217;t need to check if a file was written or a network call was made, it&#8217;s often preferable to attach an expectation to make sure the appropriate API <em>would have</em> been called.</p>

<p>In Sinon, creating a mock returns an object that can be decorated with expectations. The API is chainable, so it&#8217;s low on boilerplate and high on readability. What you&#8217;re aiming to do is state &#8220;whenever this method is called, ensure it was called with these parameters&#8221;. This can be done through mocks by setting up expectations using matchers.</p>

<p><a href='http://sinonjs.org/docs/#sinon-match-api'>Matchers</a> are similar to assertions &#8211; they can be used to check that arguments are everything from primitive types to instances of a constructor, or even literal values.</p>

<p>Last week we used spies to ensure Google&#8217;s API was accessed in the expected way. Mocks could be used for this as well. We don&#8217;t really care about the request so much as the fact a particular CRUD operation was requested. The signature for <code>Backbone.gapiRequest</code> is <code>request, method, model, options</code> &#8211; the <code>method</code> argument is generally what we&#8217;re interested in. Therefore, to set up an expectation that saving an existing task caused <code>update</code> to fire, we can use a mock with <code>sinon.match.object</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>mock</span> <span class='o'>=</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>mock</span><span class='p'>(</span><span class='nx'>Backbone</span><span class='p'>);</span>
<span class='nx'>mock</span><span class='p'>.</span><span class='nx'>expects</span><span class='p'>(</span><span class='s1'>&#39;gapiRequest&#39;</span><span class='p'>).</span><span class='nx'>once</span><span class='p'>().</span><span class='nx'>withArgs</span><span class='p'>(</span><span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>match</span><span class='p'>.</span><span class='nx'>object</span><span class='p'>,</span> <span class='s1'>&#39;update&#39;</span><span class='p'>);</span>

<span class='c1'>// Do UI stuff to cause the task to be edited and the form to be submitted</span>
<span class='nx'>mock</span><span class='p'>.</span><span class='nx'>verify</span><span class='p'>();</span>
</code></pre>
</div>
<h3 id='mocks_compared_to_spies'>Mocks Compared to Spies</h3>

<p>The previous example looked a lot like last week&#8217;s spies, and using spies for the same thing used less code. So, when should we use mocks, and when should we use spies? Mocks give you a fine-grained control over the order and behaviour of method calls. Spies have a different API which focuses on checking how callbacks or methods are used. If you were testing a method that accepts a callback, you could pass in a spy to see how the callback gets used. With a mock, the callback would be from the system under test, and you&#8217;d set up expectations on it.</p>

<p>When it comes to UI testing &#8211; triggering interface actions to invoke code, I find it&#8217;s easier to treat the entire Backbone stack as a whole and use spies to ensure the expected behaviour occurs. Rather than writing a test for each model, view, and collection, it makes more sense to drive the UI and hook into model or sync operations to verify the outcome.</p>

<p>In last week&#8217;s tests where lists were being tested, I probably wouldn&#8217;t use mocks because mocks should have a closer relationship to a given method under test. The kinds of tests we&#8217;re writing involve more than one method, so spies and assertions on the DOM make more sense.</p>

<h3 id='mock_example'>Mock Example</h3>

<p>A good place to use mocks is for testing <code>app/js/gapi.js</code>. Let&#8217;s say we&#8217;re interested in making sure <code>gapiRequest</code> gets called by <code>Backbone.sync</code>. We could use mocks:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;gapiRequest is called by Backbone.sync&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>mock</span> <span class='o'>=</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>mock</span><span class='p'>(</span><span class='nx'>Backbone</span><span class='p'>);</span>
  <span class='nx'>mock</span><span class='p'>.</span><span class='nx'>expects</span><span class='p'>(</span><span class='s1'>&#39;gapiRequest&#39;</span><span class='p'>).</span><span class='nx'>once</span><span class='p'>();</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span><span class='p'>(</span><span class='s1'>&#39;update&#39;</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='p'>{});</span>
  <span class='nx'>mock</span><span class='p'>.</span><span class='nx'>verify</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This calls <code>Backbone.sync</code> to cause <code>gapiRequest</code> to be called once. This test doesn&#8217;t verify the behaviour of <code>gapiRequest</code> itself, just the fact it gets called.</p>

<p>One quirk of the custom <code>Backbone.sync</code> API is <code>Task.prototype.get</code> is called twice: once to fetch task&#8217;s ID, and another to get the list&#8217;s ID. We could test this with mocks if it was deemed important:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;Ensure Task.prototype.get is called twice&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>mock</span> <span class='o'>=</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>mock</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>);</span>

  <span class='nx'>mock</span><span class='p'>.</span><span class='nx'>expects</span><span class='p'>(</span><span class='s1'>&#39;get&#39;</span><span class='p'>).</span><span class='nx'>twice</span><span class='p'>().</span><span class='nx'>returns</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>id</span><span class='p'>);</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span><span class='p'>(</span><span class='s1'>&#39;update&#39;</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>);</span>
  <span class='nx'>mock</span><span class='p'>.</span><span class='nx'>verify</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This uses the <code>twice</code> expectation with another mock.</p>

<p>Hopefully you&#8217;re starting to understand how mocks and spies differ. There&#8217;s another major part of Sinon, though, and that&#8217;s the stub API.</p>

<h3 id='stubs'>Stubs</h3>

<p>Digging further into <code>Backbone.gapiRequest</code>, requests are expected to have an <code>execute</code> method which gets called to send data to Google&#8217;s API. Both spies and stubs can be used to test this using the <code>yieldsTo</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;gapiRequest causes the execute callback to fire&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>spy</span> <span class='o'>=</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>spy</span><span class='p'>();</span>
  <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>stub</span><span class='p'>(</span><span class='nx'>Backbone</span><span class='p'>,</span> <span class='s1'>&#39;gapiRequest&#39;</span><span class='p'>).</span><span class='nx'>yieldsTo</span><span class='p'>(</span><span class='s1'>&#39;execute&#39;</span><span class='p'>,</span> <span class='nx'>spy</span><span class='p'>);</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span><span class='p'>(</span><span class='s1'>&#39;update&#39;</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>);</span>

  <span class='nx'>assert</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='nx'>spy</span><span class='p'>.</span><span class='nx'>calledOnce</span><span class='p'>);</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>.</span><span class='nx'>restore</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This test causes the following chain of events to occur:</p>

<ol>
<li><code>Backbone.sync</code> calls <code>Backbone.gapiRequest</code></li>

<li><code>Backbone.gapiRequest</code> receives an object with an <code>execute</code> property, which we&#8217;ve replaced with a spy</li>

<li><code>Backbone.gapiRequest</code> calls this execute method, therefore satisfying <code>assert.ok(spy.calledOnce)</code></li>
</ol>

<p>Putting these ideas together can be used to make sure the right <code>success</code> or <code>error</code> callbacks are triggered after a request has completed:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>test</span><span class='p'>(</span><span class='s1'>&#39;Errors get called&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>spy</span> <span class='o'>=</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>spy</span><span class='p'>()</span>
    <span class='p'>,</span> <span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{</span> <span class='nx'>error</span><span class='o'>:</span> <span class='nx'>spy</span> <span class='p'>}</span>
    <span class='p'>;</span>

  <span class='c1'>// Stub the internal update method that would usually come from Google</span>
  <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>stub</span><span class='p'>(</span><span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>,</span> <span class='s1'>&#39;update&#39;</span><span class='p'>).</span><span class='nx'>returns</span><span class='p'>({</span>
    <span class='nx'>execute</span><span class='o'>:</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>stub</span><span class='p'>().</span><span class='nx'>yields</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>)</span>
  <span class='p'>});</span>

  <span class='c1'>// Invoke a sync with a fake model and the options with the error callback</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span><span class='p'>(</span><span class='s1'>&#39;update&#39;</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>

  <span class='nx'>assert</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='nx'>spy</span><span class='p'>.</span><span class='nx'>calledOnce</span><span class='p'>);</span>
  <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>update</span><span class='p'>.</span><span class='nx'>restore</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This test makes sure <code>error</code> gets called by using a spy, and it also stubs out <code>gapi.client.tasks.tasks.update</code> with our own object. This object has an <code>execute</code> property which causes the callback inside <code>gapiRequest</code> to run, and ultimately call <code>error</code>.</p>

<h3 id='clearing_up'>Clearing Up</h3>

<p>I&#8217;ve written a test suite for tasks. It&#8217;s based on last week&#8217;s tests so there isn&#8217;t really anything new, apart from the <code>teardown</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>setup</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>/// ...</span>

  <span class='nx'>spyUpdate</span> <span class='o'>=</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>spy</span><span class='p'>(</span><span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>,</span> <span class='s1'>&#39;update&#39;</span><span class='p'>)</span>
  <span class='nx'>spyCreate</span> <span class='o'>=</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>spy</span><span class='p'>(</span><span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>,</span> <span class='s1'>&#39;insert&#39;</span><span class='p'>)</span>
  <span class='nx'>spyDelete</span> <span class='o'>=</span> <span class='nx'>sinon</span><span class='p'>.</span><span class='nx'>spy</span><span class='p'>(</span><span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>,</span> <span class='s1'>&#39;delete&#39;</span><span class='p'>)</span>

  <span class='c1'>// ...</span>
<span class='p'>});</span>

<span class='nx'>teardown</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>update</span><span class='p'>.</span><span class='nx'>restore</span><span class='p'>();</span>
  <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>insert</span><span class='p'>.</span><span class='nx'>restore</span><span class='p'>();</span>
  <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>.</span><span class='k'>delete</span><span class='p'>.</span><span class='nx'>restore</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I&#8217;ve found this pattern is better than calling <code>reset</code>, because it&#8217;s easy to attempt to wrap objects more than once when multiple test files are loaded.</p>

<h3 id='writing_good_tests_with_sinon'>Writing Good Tests with Sinon</h3>

<p>Sinon might look like a small library that you can drop into Mocha, Jasmine, or QUnit, but there&#8217;s an art to writing good Sinon tests. Sinon&#8217;s documentation has some explanation of when exactly spies, mocks, and stubs are useful, but there is a subjective factor at play particularly when it comes to deciding whether a test is best written with a mock or a stub.</p>

<p>A few tips I&#8217;ve found useful are:</p>

<ul>
<li>Spies are great for the times when you want to test the entire application, rather than a specific class or method</li>

<li>Stubs come in handy when there are methods you don&#8217;t want run or want to force execution down a given path</li>

<li>Mocks are good for testing specific methods</li>

<li>A single mock per test case should be used</li>

<li>You should use <code>restore()</code> after using spies and stubs, it&#8217;s easy to forget and causes &#8220;double wrap&#8221; errors</li>
</ul>

<h3 id='summary'>Summary</h3>

<p>Stylistically spies, stubs, and mocks are very different, but they&#8217;re vexingly similar until you&#8217;ve had some practice with Sinon. There have been mock vs. stub discussions on the <a href='http://groups.google.com/group/sinonjs'>Sinon.JS Google Group</a>, so it&#8217;s probably best to ask Christian on that group if you&#8217;re struggling get Sinon to do what you want.</p>

<p>The source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/0c6de32aec7513027908a5877c1c346b059a36a2'>alexyoung / dailyjs-backbone-tutorial, commit 0c6de32</a>.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2013/02/14/backbone-tutorial-12/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

