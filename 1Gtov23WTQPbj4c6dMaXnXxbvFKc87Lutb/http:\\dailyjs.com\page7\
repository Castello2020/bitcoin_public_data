http://dailyjs.com/page7/
HTTP/1.1 200 OK
Date: Tue, 22 Jul 2014 13:22:19 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Mon, 21 Jul 2014 18:13:30 GMT
ETag: "254029-182f6-4feb8106f2680"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 25133
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/02/03/vuejs-beautify">Vue.js, beautify-with-words</a></h2>
      <div class="meta">
        <span class="date">03 Feb 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/02/03/vuejs-beautify/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#mvvm">mvvm</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='vuejs'>Vue.js</h3>

<p><img src='/images/posts/vuejs.png' alt='Vue.js' /></p>

<p><a href='http://vuejs.org/'>Vue.js</a> (GitHub: <a href='https://github.com/yyx990803/vue'>yyx990803 / vue</a>, License: <em>MIT</em>) by Evan You is a MVVM library. It&#8217;s based around instances of the <code>Vue</code> constructor, essentially view model objects, that provide bindings between DOM objects and data models.</p>

<p>It has an event-based API with key/value observing, HTML directives (like AngularJS), and text filters. There&#8217;s a <a href='https://github.com/yyx990803/vue/tree/master/examples/todomvc'>TodoMVC example</a> that showcases some of the features. Most of the code is passed in as options to the <code>Vue</code> constructor, so it feels a little bit like Backbone.js views in that respect.</p>

<p>Vue.js is an interesting combination of features from Backbone.js, KnockoutJS, and AngularJS. Evan seems confident about its performance and features, but I think it&#8217;ll be hard to convince people to seriously try it out given how popular Backbone and AngularJS have become.</p>

<h3 id='beautifywithwords'>beautify-with-words</h3>

<p>beautify-with-words (GitHub: <a href='https://github.com/zertosh/beautify-with-words'>zertosh / beautify-with-words</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/beautify-with-words'>beautify-with-words</a>) by Andres Suarez is a module based on UglifyJS that replaces variable names with words.</p>

<p>You can pass <code>-b</code> to beautify the output, which essentially means you can turn minified, obfuscated code into something not quite readable, but much easier to search and grep for patterns.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/31/mloc-js-bootstrap-31">Conference: mloc.js, Bootstrap 3.1</a></h2>
      <div class="meta">
        <span class="date">31 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/31/mloc-js-bootstrap-31/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#conferences">conferences</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='conference_mlocjs'>Conference: mloc.js</h3>

<p><img src='/images/posts/mlocjs.png' alt='mloc.js' /></p>

<p><a href='http://mloc-js.com/2014/'>mloc.js</a> is a conference in Budapest, taking place on February 13th. Tickets start at $260, but there are only 24 left!</p>

<blockquote>
<p>With projects like asm.js and Emscripten, Mozilla is beginning to see JavaScript as a virtual machine and compiler target. Will it change how we think about and how we use JavaScript? How compiling C++ code to really fast JavaScript code will transform the web? At mloc.js we are bringing together representatives of major browser vendors, industrial users with large web projects, and authors of compile-to-JS projects with the goal of moving the web forward. Together we will discuss what will be possible with the web platform in the next 10 years.</p>
</blockquote>

<p>There are some great speakers from PayPal, Google, Mozilla, Intel, and more.</p>

<h3 id='bootstrap_31'>Bootstrap 3.1</h3>

<p>It looks like <a href='https://github.com/twbs/bootstrap/releases/tag/v3.1.0'>Bootstrap 3.1 is out</a>. There&#8217;s an inconsequential and pointless discussion about it on <a href='https://news.ycombinator.com/item?id=7151662'>Hacker News</a>, so it&#8217;s probably best to ignore that and read the changelog for yourself.</p>

<p>One of the nice things about this release is it includes some new templates: Blog, Cover, and Dashboard. Even though I like to code these by hand, it&#8217;s great for people who want to get started quickly. The <a href='http://getbootstrap.com/examples/blog/'>blog template</a> doesn&#8217;t use the <code>article</code> element, but they do target IE 8 so that might be why.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/30/exception-error">The Art of Error</a></h2>
      <div class="meta">
        <span class="date">30 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/30/exception-error/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#errors">errors</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/iamerror.png' />
  <small>Error was originally a character in the hit video game, "Zelda".</small>
</div>
<p>I like to define a lot of objects that inherit from <code>Error</code>. I find it helps me to track down issues &#8211; post-mortem &#8211; but also to clearly handle expected errors. Sometimes writing error handling code feels like a chore, but it shouldn&#8217;t be an afterthought. Well-designed and well-tested errors will help you maintain projects, but also help users figure out what to do when things go wrong.</p>

<p>When it comes to using <code>Error</code>, I&#8217;ve found two bad practices that should be avoided:</p>

<ol>
<li><code>new Error</code> is used instead of a subclass.</li>

<li><code>Error</code> is avoided altogether because &#8220;exceptions are bad&#8221;.</li>
</ol>

<p>Let&#8217;s look at how to avoid these issues and use errors properly.</p>

<h3 id='subclassing_error'>Subclassing Error</h3>

<p>Subclassing errors is easy with <code>Object.create</code> or <code>util.inherits</code> (in Node). Here&#8217;s how you do it in Node:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>util</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;util&#39;</span><span class='p'>);</span>

<span class='kd'>function</span> <span class='nx'>NotFound</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nb'>Error</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>message</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='nx'>util</span><span class='p'>.</span><span class='nx'>inherits</span><span class='p'>(</span><span class='nx'>NotFound</span><span class='p'>,</span> <span class='nb'>Error</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>error</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>NotFound</span><span class='p'>(</span><span class='s1'>&#39;/bitcoin-wallet not found&#39;</span><span class='p'>);</span>

<span class='nx'>assert</span><span class='p'>(</span><span class='nx'>error</span><span class='p'>.</span><span class='nx'>message</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>(</span><span class='nx'>error</span> <span class='k'>instanceof</span> <span class='nx'>NotFound</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>(</span><span class='nx'>error</span> <span class='k'>instanceof</span> <span class='nb'>Error</span><span class='p'>);</span>
<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>error</span> <span class='k'>instanceof</span> <span class='nx'>RangeError</span><span class='p'>,</span> <span class='kc'>false</span><span class='p'>);</span>
</code></pre>
</div>
<p>The assertions check that the expected property was set (<code>message</code>), and <code>error</code> is an instance of <code>NotFound</code>, <code>Error</code>, but <em>not</em> <code>RangeError</code>.</p>

<p>If you were using this with <a href='http://expressjs.com/'>Express</a>, you could set other properties to make the error more useful. This is great when passing errors to <code>next()</code> in routes. When dealing with errors at the HTTP layer, I like to include a status code:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>NotFound</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nb'>Error</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>message</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>statusCode</span> <span class='o'>=</span> <span class='mi'>404</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Now you could have error handling middleware that handles errors in a more DRY fashion:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>.</span><span class='nx'>stack</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>err</span><span class='p'>.</span><span class='nx'>statusCode</span> <span class='o'>||</span> <span class='nx'>err</span><span class='p'>.</span><span class='nx'>statusCode</span> <span class='o'>===</span> <span class='mi'>500</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>emails</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>({</span> <span class='nx'>err</span><span class='o'>:</span> <span class='nx'>err</span><span class='p'>,</span> <span class='nx'>req</span><span class='o'>:</span> <span class='nx'>req</span> <span class='p'>});</span>
  <span class='p'>}</span>

  <span class='nx'>res</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>.</span><span class='nx'>statusCode</span> <span class='o'>||</span> <span class='mi'>500</span><span class='p'>,</span> <span class='nx'>err</span><span class='p'>.</span><span class='nx'>message</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This will send the HTTP status code to the browser, if available. It also only emails errors when the <code>statusCode</code> is 500 or not set. I took this from production code that generates emails when unusual things happen, and I don&#8217;t want to get notified about general errors like 401, 403, and 404.</p>

<p>The line that reads <code>console.error(err.stack)</code> won&#8217;t actually work as expected. In V8 platforms like Node and Chrome you can use <code>Error.captureStackTrace(this, arguments.callee)</code> in the error&#8217;s constructor to get the stack trace.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>NotFound</span><span class='p'>(</span><span class='nx'>message</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nb'>Error</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
  <span class='nb'>Error</span><span class='p'>.</span><span class='nx'>captureStackTrace</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>.</span><span class='nx'>callee</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>message</span> <span class='o'>=</span> <span class='nx'>message</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>statusCode</span> <span class='o'>=</span> <span class='mi'>404</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>When I was researching this article I noticed there&#8217;s a lot of confusion about inheriting from <code>Error</code> and capturing the stack. It&#8217;s hard to do it properly in every browser. If you want to read more, there&#8217;s a good Stack Overflow post about it here: <a href='http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript'>What&#8217;s a good way to extend Error in JavaScript?</a>.</p>

<h3 id='throwing_and_catching_errors'>Throwing and Catching Errors</h3>

<p>You might have noticed I&#8217;ve been quiet about <code>throw</code>, and that&#8217;s because we hardly ever use it anymore. It&#8217;s more common to see errors passed as the first argument to a callback, or emitted as an <code>&#39;error&#39;</code> event&#8217;s first argument.</p>

<p>If you&#8217;re using an API like this, you&#8217;ll probably use something like <code>if (err) return handleError(err)</code> at the top of your callback. You can also use <code>if (err instanceof SpecificError)</code> to add your own context specific error handling code.</p>

<p>Node developers usually avoid raising exceptions, but if you really think it&#8217;s necessary you can use <code>throw new Error(&#39;I am Error&#39;)</code> and then <code>assert.throws</code> in your tests. I find I hardly ever need to use <code>throw</code>.</p>

<h3 id='designing_error_objects'>Designing Error Objects</h3>

<p>Once you start subclassing <code>Error</code> and adding your own properties, you can cause new problems by breaking the <a href='http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29'>SOLID</a> principles. To keep your errors clean, ensure an error class only has one responsibility &#8211; don&#8217;t make Swiss Army knife error objects, or trigger complex behaviours inside their constructors.</p>

<p>You should also create errors in logical places. If you&#8217;ve written a database layer, don&#8217;t raise the previous <code>NotFound</code> error from something that loads data from the database. In this case it would be better to have a <code>Database.NotFound</code> error object, or maybe just return <code>undefined</code> and then raise <code>NotFound</code> at the view layer.</p>

<p>Following the <a href='http://en.wikipedia.org/wiki/Liskov_substitution_principle'>Liskov substitution principle</a> also helps create maintainable error handling code. If you replace the previous <code>NotFound</code> error with a new class that has more context-specific information, then the existing code should still work. You&#8217;d break this rule if you somehow changed what <code>notFound.statusCode</code> did.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>I create a lot of <code>Error</code> classes in my projects, but I rarely use <code>throw</code> and <code>catch</code>. You should set useful properties in error objects, but use such properties consistently. And, don&#8217;t cross the streams: HTTP errors have no place in your database code. Or for browser developers, Ajax errors have a place in code that talks to the server, but not code that processes Mustache templates.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/29/node-roundup">Node Roundup: Node 0.11.11, Nightwatch.js, Hackify</a></h2>
      <div class="meta">
        <span class="date">29 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/29/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='node_01111'>Node 0.11.11</h3>

<p><a href='http://blog.nodejs.org/2014/01/28/node-v0-11-11-unstable/'>Node 0.11.11</a> was released today, and it&#8217;s quite a big update so I think they&#8217;re catching up after the holiday slowdown. The main binary dependencies have been updated (v8, HTTP parser, openssl, uv). There&#8217;s a huge amount of fixes for the core modules, including crypto, http, tls, and util.</p>

<h3 id='nightwatchjs'>Nightwatch.js</h3>

<p><img src='/images/posts/nightwatch-logo.png' alt='Nightwatch.js' /></p>

<p><a href='http://nightwatchjs.org/'>Nightwatch.js</a> (GitHub: <a href='https://github.com/beatfactor/nightwatch'>beatfactor / nightwatch</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/nightwatch'>nightwatch</a>) is a test framework that uses <a href='http://docs.seleniumhq.org/projects/webdriver/'>Selenium WebDriver</a>. Tests are written as modules, so the exported functions are run as test cases. The first parameter is a <code>client</code> object, that has a chainable API for scripting access to webpages.</p>

<p>It includes JUnit XML support, so you can use it with a CI server like TeamCity. Both CSS selectors and XPath can be used.</p>

<p>If you&#8217;ve never used Selenium before, then take a look at the <a href='http://nightwatchjs.org/guide'>Nightwatch guide</a>. It explains how it manages the Selenium server and browser instances.</p>

<h3 id='hackify'>Hackify</h3>

<p><a href='http://www.hackify.org/'>Hackify</a> (GitHub: <a href='https://github.com/hackify'>hackify</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/hackify'>hackify</a>), by Michael Dausmann, is a collaborative code editor that features a permission system, and chat. It feels like Google Drive for programming.</p>

<p>The server uses Express, Socket.IO, and Redis. It&#8217;s written like a fairly typical Express application, with route separation and ejs templates.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/28/jquery-backboneglobal">jQuery 1.11 and 2.1, Backbone.global</a></h2>
      <div class="meta">
        <span class="date">28 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/28/jquery-backboneglobal/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#backbone">backbone</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='jquery_111_and_21_released'>jQuery 1.11 and 2.1 Released</h3>

<p><a href='http://blog.jquery.com/2014/01/24/jquery-1-11-and-2-1-released/'>jQuery 1.11 and 2.1 have been released</a>:</p>

<blockquote>
<p>both the 1.x and 2.x branches of jQuery support all recent modern browsers and have the same API. The 1.x branch, this time 1.11.0, adds support for the older versions of Internet Explorer (IE6, 7, and 8). The 2.x branch, today played by 2.1.0, adds support for non-traditional web environments like node.js and browser plugins for Chrome and Firefox.</p>
</blockquote>

<p>Another interesting point from the release notes was this paragraph about source map problems:</p>

<blockquote>
<p>This release does not contain the sourcemap comment in the minified file. Sourcemaps have proven to be a very problematic and puzzling thing to developers, spawning hundreds of confused developers on forums like StackOverflow and causing some to think jQuery itself was broken.</p>
</blockquote>

<p>I&#8217;ve noticed source maps confuse CoffeeScript developers as well, so this isn&#8217;t surprising. The tools seem solid &#8211; <a href='https://developers.google.com/chrome-developer-tools/docs/javascript-debugging#source-maps'>Chrome&#8217;s implementation has worked for me in the past</a>, but the concept itself isn&#8217;t entirely intuitive.</p>

<p>The Node/browserify support is handy &#8211; that particular change was <a href='http://bugs.jquery.com/ticket/14677'>ticket 14677</a>.</p>

<h3 id='backboneglobal'>Backbone.global</h3>

<p>Backbone.global (GitHub: <a href='https://github.com/DarrylD/Backbone.global'>DarrylD / Backbone.global</a>, License: <em>MIT</em>) allows you to listen to global events in a Backbone.js application. It changes <code>Backbone.View.prototype.delegateEvents</code> to emit events on a global event bus, which makes it easier to hook into events for things like testing or logging.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/27/v8js-angfound">v8js, Angular Foundation</a></h2>
      <div class="meta">
        <span class="date">27 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/27/v8js-angfound/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#php">php</a>
          
            <a href="/tags.html#angular">angular</a>
          
            <a href="/tags.html#ui">ui</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='v8js'>v8js</h3>

<p>On Friday I wrote about <a href='http://dailyjs.com/2014/01/24/uniter-gamedev-chai/'>Uniter</a>, which converts PHP to JavaScript. But what about running JavaScript in PHP? C. Scott Ananian sent in <a href='http://pecl.php.net/package/v8js'>v8js</a> (GitHub: <a href='https://github.com/preillyme/v8js'>preillyme / v8js</a>, License: <em>MIT</em>), a PHP extension that lets you run JavaScript inside a PHP application.</p>

<p>It has both PHP and JavaScript APIs, so you can do things like <code>var_dump</code> in JavaScript. In the PHP side, you can evaluate JavaScript with <code>$v8-&gt;executeString()</code>.</p>

<p>This project actually uses V8, and you can restrict JavaScript based on time and memory usage.</p>

<h3 id='angular_foundation'>Angular Foundation</h3>

<p><img src='/images/posts/angularfoundation.png' alt='Angular Foundation' /></p>

<p><a href='http://madmimi.github.io/angular-foundation/'>Angular Foundation</a> (GitHub: <a href='https://github.com/madmimi/angular-foundation'>madmimi / angular-foundation</a>, License: <em>MIT</em>) is a <a href='http://foundation.zurb.com/'>Foundation</a> port of the AngularUI <a href='https://github.com/angular-ui/bootstrap'>bootstrap</a> project.</p>

<blockquote>
<p>We are aiming at providing a set of AngularJS directives based on Foundation&#8217;s markup and CSS. The goal is to provide native AngularJS directives without any dependency on jQuery or Foundation&#8217;s JavaScript. It is often better to rewrite an existing JavaScript code and create a new, pure AngularJS directive. Most of the time the resulting directive is smaller as compared to the orginal JavaScript code size and better integrated into the AngularJS ecosystem.</p>
</blockquote>

<p>The documentation explains what Foundation components are supported, and shows how to use them as AngularJS directives. The authors created it after they noticed people on Stack Overflow asking about AngularJS directives for Foundation, and finding the existing solutions less complete.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/24/uniter-gamedev-chai">Uniter, Chai Webdriver, Gamedev.js Weekly</a></h2>
      <div class="meta">
        <span class="date">24 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/24/uniter-gamedev-chai/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#php">php</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#games">games</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='uniter'>Uniter</h3>

<p>When we run our <a href='http://dailyjs.com/tags.html#surveys'>yearly survey</a>, I&#8217;ve noticed PHP is popular with our readers. So here&#8217;s something that you might either love, or consider arcane blasphemy: <a href='http://asmblah.github.io/uniter/demo/interactive.html'>Uniter</a> (GitHub: <a href='https://github.com/asmblah/uniter'>asmblah / uniter</a>, License: <em>MIT</em>), a JavaScript to PHP source-to-source compiler:</p>

<blockquote>
<p>Uniter allows you to execute PHP in the browser or in Node.js. As an on-the-fly recompiling interpreter (or transpiler) it results in the closest possible translation from PHP to native JavaScript code.</p>
</blockquote>

<p>It includes Mocha unit tests and should run in IE 9 or above. It currently supports most of PHP&#8217;s keywords, and even has basic <code>class</code> support. The demo is interactive, so you can try editing the PHP source to see what happens.</p>

<h3 id='chai_webdriver'>Chai Webdriver</h3>

<p><a href='http://bites.goodeggs.com/open_source/chai-webdriver/'>Chai Webdriver</a> (GitHub: <a href='https://github.com/goodeggs/chai-webdriver'>goodeggs / chai-webdriver</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/chai-webdriver'>chai-webdriver</a>) by Max Edmands is a Chai plugin for making markup-based assertions when using webdriver. For example:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Start with a webdriver instance:</span>
<span class='kd'>var</span> <span class='nx'>sw</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;selenium-webdriver&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>driver</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>sw</span><span class='p'>.</span><span class='nx'>Builder</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>withCapabilities</span><span class='p'>(</span><span class='nx'>sw</span><span class='p'>.</span><span class='nx'>Capabilities</span><span class='p'>.</span><span class='nx'>chrome</span><span class='p'>())</span>
  <span class='p'>.</span><span class='nx'>build</span><span class='p'>()</span>

<span class='c1'>// And then...</span>
<span class='kd'>var</span> <span class='nx'>chai</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;chai&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>chaiWebdriver</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;chai-webdriver&#39;</span><span class='p'>);</span>
<span class='nx'>chai</span><span class='p'>.</span><span class='nx'>use</span> <span class='nx'>chaiWebdriver</span><span class='p'>(</span><span class='nx'>driver</span><span class='p'>);</span>

<span class='c1'>// And you&#39;re good to go!</span>
<span class='nx'>driver</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;http://github.com&#39;</span><span class='p'>);</span>
<span class='nx'>chai</span><span class='p'>.</span><span class='nx'>expect</span><span class='p'>(</span><span class='s1'>&#39;#site-container h1.heading&#39;</span><span class='p'>).</span><span class='nx'>dom</span><span class='p'>.</span><span class='nx'>to</span><span class='p'>.</span><span class='nx'>not</span><span class='p'>.</span><span class='nx'>contain</span><span class='p'>.</span><span class='nx'>text</span><span class='p'>(</span><span class='s2'>&quot;I&#39;m a kitty!&quot;</span><span class='p'>);</span>
</code></pre>
</div>
<p>It works with Selenium, chromedriver, PhantomJS, and SauceLabs.</p>

<h3 id='gamedevjs_weekly'>Gamedev.js Weekly</h3>

<p><a href='http://weekly.gamedevjs.com/'>Gamedev.js Weekly</a> is a weekly newsletter of JavaScript game-related news. There&#8217;s an <a href='http://weekly.gamedevjs.com/archive.html'>archive</a> so you can preview it before signing up.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/23/jellyreader">JellyReader: Dropbox/Google Drive Feed Reader</a></h2>
      <div class="meta">
        <span class="date">23 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/23/jellyreader/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#services">services</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Ray Wang sent in <a href='http://jellyreader.com/'>JellyReader</a> (GitHub: <a href='https://github.com/NimbusBase/jellyreader/'>NimbusBase / jellyreader</a>, License: <em>MIT</em>), an entirely client-side feed reader that is powered by Google Drive and Dropbox. <a href='http://nimbusbase.com/'>NimbusBase</a> has been used to unify access to Google Drive and Dropbox, so the data is ultimately stored as flat files.</p>

<p>JellyReader itself is implemented with jQuery and AngularJS. It allows you to add feeds, view entries, toggle the read state, and you can also star your favourite items. I tried it out with my Dropbox account, and Dropbox states that the application only has access to an &#8220;app&#8221; folder:</p>

<p><img src='/images/posts/jelly_dropbox_auth.png' alt='Dropbox' /></p>

<p>I added DailyJS to it:</p>

<p><img src='/images/posts/jelly_add_feed.png' alt='Jelly add feed' /></p>

<p>And the stories are rendered as you might expect:</p>

<p><img src='/images/posts/jelly_feeds.png' alt='Jelly feed view' /></p>

<p>After playing around with the web interface for a while, I wondered what the files on Dropbox looked like. Each data collection is serialised in a directory, and there is a file per item. So feeds have a directory, and stories do as well. UUIDs are used to ensure the filenames don&#8217;t clash.</p>

<p><img src='/images/posts/jelly_dropbox.png' alt='Dropbox' /></p>

<p>Presumably NimbusBase data has the same structure on Google Drive.</p>

<p>The JellyReader source uses lots of third party components, including <a href='https://github.com/NimbusBase/jellyreader/blob/gh-pages/js/jquery.jfeed.js'>jFeed</a> which I haven&#8217;t seen for a few years. I actually like the flat file approach for personal, self-hosted applications like this, although it would be interesting to see a comparison with a <a href='https://www.dropbox.com/developers/datastore/tutorial/js'>Dropbox Datastore</a> implementation.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/22/node-roundup">Node Roundup: Nodemon 1.0, Prana, termcoin, node-bitwise-xor</a></h2>
      <div class="meta">
        <span class="date">22 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/22/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#bitcoin">bitcoin</a>
          
            <a href="/tags.html#mongodb">mongodb</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='nodemon_10'>Nodemon 1.0</h3>

<p><img src='/images/posts/nodemon-logo.png' alt='Nodemon' /></p>

<p>I noticed <a href='http://remysharp.com/2014/01/20/nodemon-1-0/'>Nodemon 1.0</a> was released this week (GitHub: <a href='https://github.com/remy/nodemon'>remy / nodemon</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/nodemon'>nodemon</a>). This update includes local and global configuration files, <code>execMap</code> for mapping file extensions to programs, and some changes to the overall architecture of the project. You can now <code>require</code> Nodemon, and tests have been added.</p>

<h3 id='prana'>Prana</h3>

<p><a href='http://pranajs.com/'>Prana</a> (GitHub: <a href='https://github.com/recidive/prana'>recidive / prana</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/prana'>prana</a>) by Henrique Recidive is a small framework for Node applications. Prana application objects are EventEmitters, and Prana &#8220;types&#8221; emit events as well.</p>

<p>It combines an ODM system with a plugin system, and currently persists data to memory or MongoDB. The author has included some examples which you can find in <a href='https://github.com/recidive/prana/tree/master/examples'>prana/examples</a>, and one of them uses Express. The module&#8217;s code itself has detailed comments, and the readme is solid too.</p>

<h3 id='termcoin'>termcoin</h3>

<p>termcoin (GitHub: <a href='https://github.com/chjj/termcoin'>chjj / termcoin</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/termcoin'>termcoin</a>) by Christopher Jeffrey is a terminal Bitcoin client with a command-line interface based on <a href='https://github.com/chjj/blessed'>blessed</a>. It requires bitcoind to work, and looks really cool in the screenshots.</p>

<h3 id='nodebitwisexor'>node-bitwise-xor</h3>

<p>Stanislas Marion sent in node-bitwise-xor (GitHub: <a href='https://github.com/czzarr/node-bitwise-xor'>czzarr / node-bitwise-xor</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/bitwise-xor'>bitwise-xor</a>), a module for performing a bitwise XOR on two buffers or strings. It iterates over each element with <code>^</code>, taking into account the length to ensure each item is changed.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/21/contra-onoff-jquery">Contra, jquery.onoff, jQuery 1.11.0 RC1 and 2.1.0 RC1</a></h2>
      <div class="meta">
        <span class="date">21 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/21/contra-onoff-jquery/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#flow-control">flow-control</a>
          
            <a href="/tags.html#async">async</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='contra'>Contra</h3>

<p><img src='/images/posts/contralambda.png' alt='Contra' /></p>

<p>Contra (GitHub: <a href='https://github.com/bevacqua/contra'>bevacqua / contra</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/contra'>contra</a>, Bower: <em>contra</em>) by Nicolas Bevacqua is a flow control library, similar to <a href='https://npmjs.org/package/async'>async</a>, but more suited to client-side development.</p>

<p>It has three sets of methods: flow control, functional, and uncategorized. The flow control methods are for executing groups of functions, like <code>λ.waterfall(tasks, done)</code>. The functional methods are a subset of what you might expect to find in Underscore.js &#8211; <code>λ.each</code> and <code>λ.filter</code> for example. I noticed that <code>λ.each</code> can handle both arrays and objects, so it&#8217;s different to <code>forEach</code>.</p>

<p>Each method can be exported separately, so you could just pull in a single method if you wanted to. It has Mocha tests, and can be installed with Bower.</p>

<h3 id='jqueryonoff'>jquery.onoff</h3>

<p>jquery.onoff (GitHub: <a href='https://github.com/timmywil/jquery.onoff'>timmywil / jquery.onoff</a>, License: <em>MIT</em>) by Timmy Willison is a toggle switch that uses checkboxes. It supports IE 9 and above, and can be loaded with an AMD loader.</p>

<p>Although it&#8217;s a relatively simple project, Timmy has included tests, and a Grunt build script.</p>

<h3 id='jquery_1110_rc1_and_210_rc1'>jQuery 1.11.0 RC1 and 2.1.0 RC1</h3>

<p><a href='http://blog.jquery.com/2014/01/16/jquery-1-11-0-rc1-and-2-1-0-rc1-released/'>jQuery 1.11.0 RC1 and 2.1.0 RC1</a> have been released. These releases are maintenance releases, so there aren&#8217;t any API changes.</p>

<p>The announcement notes that these releases should work properly with Browserify, and can be installed using npm.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/20/nodeapp">A Node Interpreter for iOS</a></h2>
      <div class="meta">
        <span class="date">20 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/20/nodeapp/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#iOS">iOS</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/nodeapp2.png' alt='' />
  <small>Nodeapp: Node for JavaScriptCore.</small>
</div>
<p><a href='http://dailyjs.com/2013/12/04/node-roundup/'>Back in December</a> I wrote about <a href='http://nodeapp.org/'>Nodelike</a>, which aims to bring Node to iOS 7 and Mac OS X through JavaScriptCore. The iOS app has now been released as <a href='https://itunes.apple.com/app/id793774475'>Node - JavaScript Interpreter</a>, which you can download from the App Store. You can also view the source at <a href='https://github.com/node-app/Interpreter'>node-app / Interpreter</a>.</p>

<p>The app itself is currently quite simple. You can load most of the core modules, like <code>assert</code>, <code>events</code>, and <code>net</code>, but executing code removes it from the editor. It&#8217;s literally an interpreter &#8211; a GUI REPL, rather than a way to <em>write</em> Node on the go.</p>

<p>It includes browsable documentation, so you could use it to verify ideas, or more importantly to help you learn Node. It has a lot of potential as a learning tool &#8211; combined with an eBook it would be a great way to execute examples on an iOS device, particularly as you could tweak the code to figure it out.</p>
<div class='image'>
  <img src='/images/posts/nodeapp-screens.png' alt='' />
  <small>Interpreters in iOS.  Now I've seen everything.</small>
</div>
<p>This would also let people take back those wasted commuter hours. Rather than playing Candy Crush Saga you could boost your Node skills!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/17/cerebro-snowmen-cubes">Cerebro, Snowmen War, Cube Game</a></h2>
      <div class="meta">
        <span class="date">17 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/17/cerebro-snowmen-cubes/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#google">google</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='cerebro'>Cerebro</h3>

<p><img src='/images/posts/cerebro.png' alt='Cerebro' /></p>

<p><a href='http://cerebro.maxmert.com/'>Cerebro</a> is a WebGL visualisation of Google Analytics data, created by Vetrenko Maxim. You can use the author&#8217;s Google Analytics data, or your own &#8211; the project isn&#8217;t open source, so I decided to use the sample data.</p>

<p>It supports Leap Motion input, and uses three.js, sparks.js, and dancer.js for audio. I couldn&#8217;t get it working in Firefox, but it worked in Chrome.</p>

<h3 id='snowmen_war'>Snowmen War</h3>

<p><img src='/images/posts/youaredead.png' alt='Snowmen War' /></p>

<p><a href='http://www.impertinents.com/sw/'>Snowmen War</a> (License: <em>CC BY-NC 3.0</em>) by Tanguy Sauvin and Claire Thibault is a WebGL game with some pretty extreme text. When the game starts, you&#8217;re warned that &#8220;THEY WILL KILL YOU&#8221;, and if you&#8217;re hit too many times the game over screen simply states &#8220;YOU&#8217;RE DEAD.&#8221; It&#8217;s blunt, which is amusing next to the slightly surreal snowmen in outer space visuals.</p>

<p>If you view the project&#8217;s source you can see the game engine, which uses <a href='https://github.com/schteppe/cannon.js'>Cannon.js</a>, and plenty of Mr.doob&#8217;s libraries.</p>

<h3 id='cube_game'>Cube Game</h3>

<p><img src='/images/posts/cubegame.png' alt='Cube Game' /></p>

<p>Mark Vasilkov wanted to make something with <a href='http://www.gootechnologies.com/'>Goo Engine</a>, so he came up with <a href='http://animuchan.net/moz_game/'>Cube Game</a>. His advice is to mash the spacebar repeatedly until you win, but I found it was more playable when I realised it&#8217;s possible to slide under some of tile-like blocks.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/16/declarative-graphics">Declarative Graphics</a></h2>
      <div class="meta">
        <span class="date">16 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/16/declarative-graphics/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#animations">animations</a>
          
            <a href="/tags.html#reactive">reactive</a>
          
            <a href="/tags.html#svg">svg</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Whenever I hear the term &#8216;reactive&#8217;, I immediately think about data-driven forms and widgets. Markup isn&#8217;t just used for HTML forms and widgets, however: SVG is a markup language, so why not use reactive programming techniques to generate data-driven graphics?</p>

<p>That&#8217;s the goal of Paths.js (GitHub: <a href='https://github.com/andreaferretti/paths-js'>andreaferretti / paths-js</a>, License: <em>Apache 2.0</em>, bower: <em>paths-js</em>), by Andrea Ferretti. It features a chainable API for generating SVG paths:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>path</span> <span class='o'>=</span> <span class='nx'>Path</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>moveto</span><span class='p'>(</span><span class='mi'>10</span><span class='p'>,</span> <span class='mi'>20</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>lineto</span><span class='p'>(</span><span class='mi'>30</span><span class='p'>,</span> <span class='mi'>50</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>lineto</span><span class='p'>(</span><span class='mi'>25</span><span class='p'>,</span> <span class='mi'>28</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>qcurveto</span><span class='p'>(</span><span class='mi'>27</span><span class='p'>,</span> <span class='mi'>30</span><span class='p'>,</span> <span class='mi'>32</span><span class='p'>,</span> <span class='mi'>27</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>closepath</span><span class='p'>();</span>
</code></pre>
</div>
<p>Calling <code>path.print()</code> returns the relevant markup. This can then be used with a templating language like Handlebars or mustache.js: <a href='https://github.com/andreaferretti/paths-js-demo/blob/3d37cb1566f2043bf9f49e1708d9e8ae41206437/app/templates/line.html'>templates/line.html</a>.</p>

<p>This example is from <a href='http://andreaferretti.github.io/paths-js-demo/'>the Paths.js demo</a> (GitHub: <a href='https://github.com/andreaferretti/paths-js-demo'>andreaferretti / paths-js-demo</a>). The demo uses <a href='http://www.ractivejs.org/'>Ractive.js</a> to bind JSON data to UI controls and charts. It has several graphs with animations, and uses instances of <code>Ractive</code> together with instances of <code>Path</code> to create a clean, interactive data-driven UI.</p>
<div class='image'>
  <img src='/images/posts/pathsjsdemo.gif' alt='' />
  <small>Reactive Pokémon stats.</small>
</div>
<p>I like the combination of modern templating languages, SVG, and Ractive.js in Andrea&#8217;s demo. The Paths.js API makes generating SVG less tedious than it could be, and various charts are included that you can use to get started quickly.</p>

<p>If you like the sound of Ractive.js, then take a look at <a href='http://examples.ractivejs.org/'>the Ractive.js demos</a>, which include some SVG examples.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/15/node-roundup">Node Roundup: TJ Fontaine Takes Over, Conductance, Easymongo, Schema-Inspector</a></h2>
      <div class="meta">
        <span class="date">15 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/15/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#mongodb">mongodb</a>
          
            <a href="/tags.html#schema">schema</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='the_next_phase_of_nodejs'>The Next Phase of Node.js</h3>

<p>In <a href='http://blog.nodejs.org/2014/01/15/the-next-phase-of-node-js/index.html'>The Next Phase of Node.js</a>, Isaac Z. Schlueter has announced that TJ Fontaine is now the Node project lead:</p>

<blockquote>
<p>Anyone who&#8217;s been close to the core project knows that he&#8217;s been effectively leading the project for a while now, so we&#8217;re making it official. Effective immediately, TJ Fontaine is the Node.js project lead. I will remain a Node core committer, and expect to continue to contribute to the project in that role. My primary focus, however, will be npm.</p>
</blockquote>

<p>Isaac also said he&#8217;s founding npm, Inc., to allow him to focus on npm and develop related products:</p>

<blockquote>
<p>I&#8217;ll be sharing many more details soon about exactly how this is going to work, and what we&#8217;ll be offering. For now, suffice it to say that everything currently free will remain free, and everything currently flaky will get less flaky. Pursuing new revenue is how we can keep providing the npm registry service in a long-term sustainable way, and it has to be done very carefully so that we don&#8217;t damage what we&#8217;ve all built together.</p>
</blockquote>

<p>Recently, there was an initiative by Nodejitsu to drive support and funding for npm, <a href='https://npm.nodejitsu.com/'>resulting in over $300,000</a> being raised. It&#8217;ll be interesting to see how this all ties together over the next year.</p>

<p>Congratulations and good luck to TJ Fontaine!</p>

<h3 id='conductance'>Conductance</h3>

<p><img src='/images/posts/conductance.png' alt='Conductance' /></p>

<p><a href='https://conductance.io/'>Conductance</a> (GitHub: <a href='https://github.com/onilabs/conductance'>onilabs / conductance</a>, License: <em>GPL</em>, npm: <a href='https://npmjs.org/package/conductance'>conductance</a>) from Oni Labs is a web application server with a UI toolkit and a module system that&#8217;s compatible with client-side code.</p>

<p>It&#8217;s built on <a href='http://onilabs.com/stratifiedjs'>Stratified JavaScript</a>, by the same company, which adds new language primitives for block lambdas, destructuring data, arrow function syntax, and more.</p>

<p><a href='https://conductance.io/examples/chat/'>Conductance already has a detailed tutorial</a>, and there&#8217;s <a href='https://conductance.io/reference'>an API guide</a> as well.</p>

<h3 id='easymongo'>Easymongo</h3>

<p><a href='http://meritt.github.io/easymongo/'>Easymongo</a> (GitHub: <a href='https://github.com/meritt/easymongo'>meritt / easymongo</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/easymongo'>easymongo</a>) by Alexey Simonenko is a wrapper around the native Node MongoDB driver. It has a clean, idiomatic API, and relies on plain old objects instead of models.</p>

<p>It has Mocha tests, and the API is documented in the readme. Basic use looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>dbname</span><span class='o'>:</span> <span class='s1'>&#39;test&#39;</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>mongo</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;easymongo&#39;</span><span class='p'>)(</span><span class='nx'>options</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>users</span> <span class='o'>=</span> <span class='nx'>mongo</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>(</span><span class='s1'>&#39;users&#39;</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>data</span> <span class='o'>=</span> <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Alexey&#39;</span><span class='p'>,</span> <span class='nx'>surname</span><span class='o'>:</span> <span class='s1'>&#39;Simonenko&#39;</span><span class='p'>,</span> <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;http://simonenko.su&#39;</span> <span class='p'>};</span>
<span class='nx'>users</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>error</span><span class='p'>,</span> <span class='nx'>results</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Returns a new document (array).</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>results</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>users</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>({</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Alexey&#39;</span> <span class='p'>},</span> <span class='p'>{</span> <span class='nx'>limit</span><span class='o'>:</span> <span class='mi'>1</span> <span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>error</span><span class='p'>,</span> <span class='nx'>results</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Always return array of documents.</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>results</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='schemainspector'>Schema-Inspector</h3>

<p>What do you do when you&#8217;re using simple objects without an ORM layer? You use schemas to validate your user input! <a href='http://atinux.github.io/schema-inspector/'>Schema-Inspector</a> (GitHub: <a href='https://github.com/Atinux/schema-inspector'>Atinux / schema-inspector</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/schema-inspector'>schema-inspector</a>, Bower: <em>schema-inspector</em>) by Sebastien Chopin is a JavaScript object validator that works in browsers and Node.</p>

<p>Given a suitable schema, you can validate objects like this: <code>inspector.validate(schema, candidate)</code>. It can also be called asynchronously, which allows you to report issues with <code>this.report</code> inside functions in the schema.</p>

<p>It has tests written with Mocha, and a healthy amount of API documentation in the readme.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/14/jquery2014-whenlive-jtablescroll">The State of jQuery, jQuery.whenLive, jTableScroll</a></h2>
      <div class="meta">
        <span class="date">14 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/14/jquery2014-whenlive-jtablescroll/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='the_state_of_jquery_2014'>The State of jQuery 2014</h3>

<p><a href='http://blog.jquery.com/2014/01/13/the-state-of-jquery-2014/'>The State of jQuery 2014</a> was posted to the jQuery blog yesterday by Dave Methvin. It basically covers jQuery&#8217;s growth through 2013, and includes a comment about how jQuery shouldn&#8217;t just be used for routing around broken DOM APIs:</p>

<blockquote>
<p>People should be continuing to use jQuery because it&#8217;s a powerful way to implement designs and provides a vibrant ecosystem of useful plugins, not because the native DOM APIs are broken, verbose, or inconsistent. That&#8217;s why we participate in the standards process through bodies such as the W3C and ECMA.</p>
</blockquote>

<h3 id='jquerywhenlive'>jQuery.whenLive</h3>

<p><a href='http://bitcubby.com/tracking-the-insertion-of-javascript-components-into-the-dom/'>jQuery.whenLive</a> (GitHub: <a href='https://github.com/tkambler/whenLive'>tkambler / whenLive</a>, License: <em>MIT</em>, Bower: <code>tkambler/whenLive</code>) by Tim Ambler allows you to track when elements are inserted into the DOM tree, with a focus on performance:</p>

<blockquote>
<p>When supported, $.whenLive leverages the browser’s MutationObserver notification system. In the event that Mutation Observers are unavailable, $.whenLive leverages the relatively new requestAnimationFrame function.</p>
</blockquote>

<p>This seems like a clever way of deferring behaviour until potentially complex components are ready.</p>

<h3 id='jtablescroll'>jTableScroll</h3>

<p><a href='http://mikeallisononline.com/Projects/jTableScroll'>jTableScroll</a> (GitHub: <a href='https://github.com/mike-allison/jTableScroll'>mike-allison / jTableScroll</a>, License: <em>MIT</em>) by Mike Allison is a plugin for adding scrollbars to tables, and it retains static headers and footers.</p>

<p>It calculates the width and height then wraps parts of the table in divs, applying the necessary <code>overflow</code> styles based on size options: <code>$(&#39;#tableToScroll&#39;).jTableScroll({ width: 300, height: 300 })</code>.</p>

<p>The header and footer are cloned and moved by looking for the <code>thead</code> and <code>tbody</code> elements, so you&#8217;ll need a well-structured table. It can be installed with <a href='https://www.nuget.org/packages/jTableScroll/'>nuget</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/13/jidejs-matchmedia">jide.js, Matchmedia-ng</a></h2>
      <div class="meta">
        <span class="date">13 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/13/jidejs-matchmedia/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#matchMedia">matchMedia</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='jidejs'>jide.js</h3>

<p><a href='http://js.jidesoft.com/'>jide.js</a> (GitHub: <a href='https://github.com/jidesoft/jidejs'>jidesoft / jidejs</a>, License: <em>MIT</em>) from JIDE Software is a toolkit for HTML5 UI controls. The authors have embraced RequireJS, and the API is based around constructor functions that accept objects. Properties and values are observable, so UI components can react to data model changes. Layouts are also supported, which are stackable panes reminiscent of desktop UI toolkits.</p>

<p>There are tutorials for using jide.js with <a href='http://js.jidesoft.com/guide/00-installation/02-with-bower.html'>Bower</a> and <a href='http://js.jidesoft.com/guide/00-installation/03-with-yeoman.html'>Yeoman</a>, so if you want to create a quick project you can type <code>npm install -g generator-jidejs</code> and then <code>yo jidejs</code>.</p>

<p>Here&#8217;s an example of how to create a button with jide.js:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>require</span><span class='p'>([</span>
  <span class='s1'>&#39;jidejs/ui/control/Button&#39;</span>
<span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>Button</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>new</span> <span class='nx'>Button</span><span class='p'>({</span>
    <span class='c1'>// define the text property</span>
    <span class='nx'>text</span><span class='o'>:</span> <span class='s1'>&#39;Click the button&#39;</span><span class='p'>,</span>
    <span class='c1'>// define event listeners</span>
    <span class='nx'>on</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='c1'>// the &#39;action&#39; event is fired when the button is clicked</span>
      <span class='nx'>action</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
        <span class='nx'>alert</span><span class='p'>(</span><span class='s1'>&#39;Hello jide.js&#39;</span><span class='p'>);</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='matchmediang'>Matchmedia-ng</h3>

<p><a href='http://analogj.github.io/matchmedia-ng/'>Matchmedia-ng</a> (GitHub: <a href='https://github.com/AnalogJ/matchmedia-ng'>AnalogJ / matchmedia-ng</a>, License: <em>MIT</em>) by Jason Kulatunga is a set of AngularJS bindings for <code>window.matchMedia</code>. That means you can easily branch on mobile devices, or for printed content:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>matchmedia</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;tv and (min-width: 700px) and (orientation: landscape)&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>mediaQueryList</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>mediaQueryList</span><span class='p'>.</span><span class='nx'>matches</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>There&#8217;s also a <a href='https://github.com/paulirish/matchMedia.js/'>matchMedia polyfill</a> written by Paul Irish.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/10/webgl">WebGL Spaceship Tutorial, Voxel Mars, particle-excess-demo</a></h2>
      <div class="meta">
        <span class="date">10 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/10/webgl/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#space">space</a>
          
            <a href="/tags.html#science">science</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='webgl_spaceship_tutorial'>WebGL Spaceship Tutorial</h3>

<p><img src='/images/posts/l3jsspace.png' alt='WebGL Spaceship Tutorial' /></p>

<p>Jerome Etienne shared <a href='http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame/'>Game Workshop: Let&#8217;s Do a Fighting Spaceship Minigame Together</a> &#8211; a talk about building a little game with three.js and the Web Audio API. It includes slides, a video of the talk, and <a href='http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/step99.html'>a demo</a>.</p>

<h3 id='voxel_mars'>Voxel Mars</h3>

<p><img src='/images/posts/voxelmars.png' alt='Voxel Mars' /></p>

<p><a href='http://www.voxelmars.com/'>Voxel Mars</a> (GitHub: <a href='https://github.com/rachel-carvalho/voxel-mars/'>rachel-carvalho / voxel-mars</a>, License: <em>MIT</em>) by Rachel Carvalho uses NASA data to generate Martian terrain, allowing you to run around a WebGL version of Mars.</p>

<p>As you move it displays your position on a map, and also shows the longitude and latitude. Therefore, your challenge (should you choose to accept it), is to get to the top of Olympus Mons!</p>

<p>The rendering style makes it look a little bit like Minecraft, and one of the author&#8217;s ideas sounds like an amazingly interesting take on that genre:</p>

<blockquote>
<p>a science-based (no dragons) survival mode on which you have to generate your oxygen and fuel, extract your water, grow your food, make martian bricks, etc</p>
</blockquote>

<h3 id='particleexcessdemo'>particle-excess-demo</h3>

<p><img src='/images/posts/pexcess.png' alt='Particle Excess' /></p>

<p>Hugh Kennedy sent in <a href='http://hughsk.io/particle-excess-demo/'>particle-excess-demo</a> (GitHub: <a href='https://github.com/hughsk/particle-excess-demo/'>hughsk / particle-excess-demo</a>, License: <em>MIT</em>):</p>

<blockquote>
<p>The particle simulation is running on the GPU to handle 262,144 particles in real time. It&#8217;s a pretty standard technique these days, but it could be helpful as a reference for some. No three.js, just modules.</p>
</blockquote>

<p>If you look at the source you&#8217;ll see how shaders can be used to create interesting particle effects.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/09/koa">Is Koa the Future of Node Frameworks?</a></h2>
      <div class="meta">
        <span class="date">09 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/09/koa/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#es6">es6</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Are you tired of callback wrangling for web middleware? <a href='http://koajs.com/'>Koa</a> (GitHub: <a href='https://github.com/koajs/koa'>koajs / koa</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/koa'>koa</a>) is a new web framework by TJ Holowaychuk, Jonathan Ong, and Julian Gruber that embraces ES6 generators down to the core. Gone is the <code>next</code> parameter in Express, replaced by <code>yield next</code> which can be called in a synchronous style.</p>

<blockquote>
<p>With generators we can achieve &#8220;true&#8221; middleware. Contrasting Connect&#8217;s implementation which simply passes control through series of functions until one returns, Koa yields &#8220;downstream&#8221;, then control flows back &#8220;upstream&#8221;.</p>
</blockquote>

<p>You&#8217;ll need Node 0.11.9 or above to use Koa, and the <code>node</code> command must be invoked with the <code>--harmony</code> flag. The use of generators is partly enhanced by TJ&#8217;s <a href='https://github.com/visionmedia/co'>Co</a> module, so if you&#8217;re not intimately familiar with ES6 promises be aware that Co is used.</p>

<p>Here&#8217;s an example: the <code>app.callback</code> method returns a handler that is compatible with Node&#8217;s <code>http.createServer</code> method, and uses <code>co</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>callback</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(){</span>
  <span class='kd'>var</span> <span class='nx'>mw</span> <span class='o'>=</span> <span class='p'>[</span><span class='nx'>respond</span><span class='p'>].</span><span class='nx'>concat</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>middleware</span><span class='p'>);</span>
  <span class='kd'>var</span> <span class='nx'>gen</span> <span class='o'>=</span> <span class='nx'>compose</span><span class='p'>(</span><span class='nx'>mw</span><span class='p'>);</span>
  <span class='kd'>var</span> <span class='nx'>fn</span> <span class='o'>=</span> <span class='nx'>co</span><span class='p'>(</span><span class='nx'>gen</span><span class='p'>);</span>
  <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>

  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>){</span>
    <span class='kd'>var</span> <span class='nx'>ctx</span> <span class='o'>=</span> <span class='nx'>self</span><span class='p'>.</span><span class='nx'>createContext</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>);</span>
    <span class='nx'>onSocketError</span><span class='p'>(</span><span class='nx'>ctx</span><span class='p'>,</span> <span class='nx'>ctx</span><span class='p'>.</span><span class='nx'>onerror</span><span class='p'>);</span>
    <span class='nx'>fn</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='nx'>ctx</span><span class='p'>,</span> <span class='nx'>ctx</span><span class='p'>.</span><span class='nx'>onerror</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This example is from Koa&#8217;s source, and allows the following to work:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>koa</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;koa&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>koa</span><span class='p'>();</span>
<span class='nx'>app</span><span class='p'>.</span><span class='nx'>listen</span><span class='p'>(</span><span class='mi'>3000</span><span class='p'>);</span>

<span class='c1'>// Equivalent: http.createServer(app.callback()).listen(3000);</span>
</code></pre>
</div>
<h3 id='the_request_response_pattern'>The Request Response Pattern</h3>

<p>The key to making solid Node web applications is to realise and exploit the fact Node speaks HTTP. Contrast this to PHP or ASP, where &#8220;pages&#8221; execute and generate output. Those <code>req</code> and <code>res</code> objects are there for a reason: Express and similar frameworks are built on Node&#8217;s <code>http</code> core module, and the <code>http</code> module&#8217;s API is based around these request and response objects.</p>

<p>I like thinking in terms of HTTP requests and responses &#8211; it gives me the sense that I&#8217;m dealing with HTTP &#8220;functions&#8221; that take input and transform somehow. That makes it easier for me to test my web apps, and I&#8217;ve been comfortable working this way since I discovered Express.</p>

<p>In Koa things are slightly different:</p>

<blockquote>
<p>A Koa <code>Context</code> encapsulates node&#8217;s <code>request</code> and <code>response</code> objects into a single object which provides many helpful methods for writing web applications and APIs.</p>
</blockquote>

<p>While it&#8217;s true that Express decorates the request and response objects, Koa goes further by abstracting them. You can still get at the request and response, and there&#8217;s also a Koa request and response as well:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='kd'>function</span> <span class='o'>*</span><span class='p'>(){</span>
  <span class='k'>this</span><span class='p'>;</span> <span class='c1'>// is the Context</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>request</span><span class='p'>;</span> <span class='c1'>// is a koa Request</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>response</span><span class='p'>;</span> <span class='c1'>// is a koa Response</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>req</span><span class='p'>;</span> <span class='c1'>// Node&#39;s request</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>res</span><span class='p'>;</span> <span class='c1'>// Node&#39;s response</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Notice that <code>this</code> is significant &#8211; you may have seen something similar in jQuery callbacks. I think it was clever of Koa&#8217;s authors to execute middleware from within a &#8220;context&#8221;, because it makes sense semantically. The current context has aliases to commonly accessed request and response properties, so the average Koa middleware has less indirection and looks lean and clean.</p>

<h3 id='understanding_yield'>Understanding Yield</h3>

<p>I realise that the advantages of generators in middleware might not be obvious at first. The best example I can think of from Koa&#8217;s documentation is measuring response time. This example yields early, allowing the response time to be measured:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// x-response-time</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='kd'>function</span> <span class='o'>*</span><span class='p'>(</span><span class='nx'>next</span><span class='p'>){</span>
  <span class='kd'>var</span> <span class='nx'>start</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nb'>Date</span><span class='p'>;</span>
  <span class='nx'>yield</span> <span class='nx'>next</span><span class='p'>;</span>
  <span class='kd'>var</span> <span class='nx'>ms</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nb'>Date</span> <span class='o'>-</span> <span class='nx'>start</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;X-Response-Time&#39;</span><span class='p'>,</span> <span class='nx'>ms</span> <span class='o'>+</span> <span class='s1'>&#39;ms&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The start time is recorded, then execution is deferred to the next item of middleware in the stack with <code>yield next</code>. This all &#8220;unwinds&#8221; at the end of the request, so as long as the <code>x-response-time</code> was the first item, execution will continue <em>after</em> <code>yield next</code>. That means <code>var ms = new Date - start;</code> will correctly measure the elapsed time.</p>

<p>I think many of us have struggled to stack middleware in meaningful ways, and this could make our code more readable. Think about it like this: a single function can encapsulate the entire <em>intent</em> of the middleware.</p>

<h3 id='future'>Future</h3>

<p>It might be that the dependence on Node 0.11 and our investment in existing frameworks will hold back Koa&#8217;s adoption. However, remember that you can mount entire applications as middleware in Connect, so what&#8217;s to stop you from mounting a Koa app inside your existing Express apps, once generators are standard in your production version of Node?</p>

<p>Even if you don&#8217;t switch to Koa, you should start thinking about how to use generators, and I think middleware is a sensible place to explore their implications.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/08/node-roundup">Node Roundup: Faucet, Node Compiler, Tumblr</a></h2>
      <div class="meta">
        <span class="date">08 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/08/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#tap">tap</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='faucet'>Faucet</h3>

<p>Faucet (GitHub: <a href='https://github.com/substack/faucet'>substack / faucet</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/faucet'>faucet</a>) by Substack is a human-readable TAP summariser. You can pipe TAP text into the <code>faucet</code> command-line script, and it&#8217;ll generate prettier yet concise output.</p>

<p>If you type <code>faucet</code>, JavaScript files in <code>test/</code> will be executed using <code>tape</code> and then automatically piped through <code>faucet</code>.</p>

<p>Substack has created some nice animated gifs that show what the results look like under various conditions. One of them even shows Mocha using tap through the <code>-R tap</code> command-line option.</p>

<h3 id='node_compiler'>Node Compiler</h3>

<p><img src='/images/posts/nodecompiler.png' alt='Node Compiler' /></p>

<p>Sonny Lazuardi sent in <a href='http://sonnylab.com/api/compiler'>Node Compiler</a> (GitHub: <a href='https://github.com/sonnylazuardi/node-compiler'>sonnylazuardi / node-compiler</a>, License: <em>MIT</em>), a web-based tool for building C++. It uses <code>g++</code> with <a href='https://github.com/mgutz/execSync'>execSync</a>, wrapped up with an Express-based API.</p>

<p>The web interface uses the Ace editor, which supports traditional editor features like syntax highlighting. I think it&#8217;s quite an audacious idea, but it might be a little dangerous to leave on public servers.</p>

<h3 id='tumblr'>Tumblr</h3>

<p><a href='http://meritt.github.io/node-tumblr/'>node-tumblr</a> (GitHub: <a href='https://github.com/meritt/node-tumblr'>meritt / node-tumblr</a>, npm: <a href='https://github.com/meritt/node-tumblr'>tumblr</a>) by Alexey Simonenko is a Tumblr API wrapper for Node. It supports OAuth, and allows you to query posts, links, answers, and the other resources Tumblr provides.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/01/07/gulp-lazy-bowercopy">Gulp, bLazy, grunt-bowercopy</a></h2>
      <div class="meta">
        <span class="date">07 Jan 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/01/07/gulp-lazy-bowercopy/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#bower">bower</a>
          
            <a href="/tags.html#grunt">grunt</a>
          
            <a href="/tags.html#build">build</a>
          
            <a href="/tags.html#images">images</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='gulp'>Gulp</h3>

<p><img src='/images/posts/gulp.png' alt='Gulp' /></p>

<p>Last night I was reading <a href='http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/'>a post about Gulp</a> by Martin Genev. Martin traces the appearance of Gulp into the JavaScript community, through GitHub comments and Tweets.</p>

<p>Apparently <a href='http://gulpjs.com/'>Gulp</a> is a new build system made by <a href='https://github.com/wearefractal'>Fractal</a>, a Node consultancy with several popular Node modules under their collective belts.</p>

<p>Gulp is built around streams, so it feels more like idiomatic Node. You can pipe files through processors, so if you had a set of LESS files you could convert them into CSS with something like <code>gulp.src(&#39;less/*.less&#39;).pipe(less()).pipe(minify()).pipe(gulp.dest(&#39;styles/screen.css&#39;))</code>. It supports tasks as a unit of work, and tasks can have names and dependencies.</p>

<p>The project has 13 contributors already &#8211; most of the work is by <a href='https://github.com/Contra'>Eric Schoffstall</a> who you&#8217;ll see all over Fractal&#8217;s other projects. It has tests written with Mocha, and some decent documentation already.</p>

<h3 id='blazy'>bLazy</h3>

<p><a href='http://dinbror.dk/blazy/'>bLazy</a> (GitHub: <a href='https://github.com/dinbror/blazy/'>dinbror / blazy</a>) by Bjoern Klinggaard is a lazy loading image script. It doesn&#8217;t have any dependencies, and supports callbacks for loading failures:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>bLazy</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Blazy</span><span class='p'>({</span>
  <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>ele</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='p'>},</span>
  <span class='nx'>error</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>ele</span><span class='p'>,</span> <span class='nx'>msg</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>msg</span> <span class='o'>===</span> <span class='s1'>&#39;missing&#39;</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// Data-src is missing</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>msg</span> <span class='o'>===</span> <span class='s1'>&#39;invalid&#39;</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// Data-src is invalid</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>There&#8217;s a <a href='http://dinbror.dk/blog/blazy/'>blog post about bLazy</a> that documents the full API.</p>

<h3 id='gruntbowercopy'>grunt-bowercopy</h3>

<p>I seem to waste a lot of time detangling Bower dependencies to make my client-side builds more efficient. Timmy Willison may have solved this with grunt-bowercopy (GitHub: <a href='https://github.com/timmywil/grunt-bowercopy'>timmywil / grunt-bowercopy</a>, License: <em>MIT</em>). It allows you to specify where dependencies should go, and can reduce the amount of duplication when creating builds.</p>

<p>It looks like it works the way I expect Bower dependency management to work in Grunt, so I&#8217;m going to go back and look at my Grunt/Bower projects to see if I can clean then up with this.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page6">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <strong>7</strong>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page8">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <ul class="jobs">
        <li class="job">
          <a class="link" target="_blank" href="/iridize.html">
            <h4>Lead Frontend Developer</h4>
            <h5>Iridize</h5>
            <img src="/images/posts/iridize.png" alt="">
            <p>Passionate about creating beautifully simple UX for an excitingly complex application? Join our iridize.com team @Israel.</p>
            <p><a href="/iridize.html">View full listing</a></p>
          </a>
        </li>
        <li class="job">
          <a class="link" target="_blank" href="http://tropicaldev.com/jobs/">
            <h4>NodeJS Developers</h4>
            <h5>ContinuousCRM <span class="tag node">Node</span> <span class="tag sql">SQL</span></h5>
            <img src="/images/jobs/continuous.png" alt="">
            <p>Work from Thailand! Sales and CRM system entirely in JavaScript.</p>
            <p><a href="http://tropicaldev.com/jobs/">View full listing</a></p>
          </a>
        </li>
      </ul>
      <div class="jobs-footer">JavaScript Jobs: <a href="http://contact.dailyjs.com/jobs">Create listing</a></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Contributors</h3>
      <ul>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/ricroberts">
              <img width="48" height="48" src="/images/twitter/RicRoberts.png" alt="Ric Roberts" />
              <span class="meta">
                <strong class="fullname">Ric Roberts</strong>
                <s>@</s>RicRoberts
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/rvagg">
              <img width="48" height="48" src="/images/twitter/rvagg.png" alt="Rod Vagg" />
              <span class="meta">
                <strong class="fullname">Rod Vagg</strong><br />
                <s>@</s>rvagg
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/voidfiles">
              <img width="48" height="48" src="/images/twitter/voidfiles.png" alt="Alex Kessinger" />
              <span class="meta">
                <strong class="fullname">Alex Kessinger</strong>
                <s>@</s>voidfiles
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/jaknowlden">
              <img width="48" height="48" src="/images/twitter/jaknowlden.png" alt="Justin Knowlden" />
              <span class="meta">
                <strong class="fullname">Justin Knowlden</strong>
                <s>@</s>jaknowlden
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/olegpodsechin">
              <img width="48" height="48" src="/images/twitter/olegpodsechin.png" alt="Oleg Podsechin" />
              <span class="meta">
                <strong class="fullname">Oleg Podsechin</strong>
                <s>@</s>olegpodsechin
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

