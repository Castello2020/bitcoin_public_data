http://dailyjs.com/page24/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 03:41:51 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Tue, 22 Jul 2014 17:17:03 GMT
ETag: "301f9-3df1a-4fecb646501c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 50671
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/16/jquery-roundup">jQuery Roundup: jq-tiles, plusTabs, Kwicks</a></h2>
      <div class="meta">
        <span class="date">16 Oct 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/10/16/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jquery-ui">jquery-ui</a>
          
            <a href="/tags.html#tabs">tabs</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#slideshow">slideshow</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jqtiles'>jq-tiles</h3>

<p><img src='/images/posts/jqtiles.png' alt='jq-tiles' /></p>

<p><a href='http://elclanrs.github.com/jq-tiles/'>jq-tiles</a> (GitHub: <a href='https://github.com/elclanrs/jq-tiles'>elclanrs / jq-tiles</a>, License: <em>MIT</em>) is a slideshow plugin that breaks images up into tiles and uses CSS3-based effects. The number of tiles can be changed, and the transition and animation speeds can be configured.</p>

<p>To use the plugin, call <code>$(&#39;.slider&#39;).tilesSlider(options)</code> on an element that contains a set of images. Events are used to stop and start the slideshow: <code>$(&#39;.slider&#39;).trigger(&#39;start&#39;)</code>.</p>

<h3 id='plustabs'>plusTabs</h3>

<p><img src='/images/posts/plustabs.png' alt='plusTabs compared with standard tabs' /></p>

<p><a href='http://jsfiddle.net/jasonday/fdhaS/embedded/result/'>plusTabs</a> (GitHub: <a href='https://github.com/jasonday/plusTabs'>jasonday / plusTabs</a>, License: <em>MIT/GPL</em>) by Jason Day groups jQuery UI tabs under a tab with a menu. Jason&#8217;s example is scaled to a slim resolution that might be found on a smartphone, showing how jQuery UI tabs become cluttered and messy in such circumstances.</p>

<h3 id='kwicks'>Kwicks</h3>

<p><a href='http://devsmash.com/projects/kwicks'>Kwicks</a> (GitHub: <a href='https://github.com/jmar777/kwicks'>jmar777 / kwicks</a>, License: <em>MIT</em>) by Jeremy Martin is a sliding panel plugin. It can display vertical or horizontal panels, and grow or shrink them on hover. It can also be used to create a slideshow.</p>

<p>Kwicks works with nested elements like an unordered list, but it&#8217;ll actually work with any tag, so <code>&lt;li&gt;</code> isn&#8217;t hardwired.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/15/preparing-for-esnext">ES6 for Node</a></h2>
      <div class="meta">
        <span class="date">15 Oct 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/10/15/preparing-for-esnext/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#ES6">ES6</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
        </span>
      </div>
      <div class="preview">
        <p>In <a href='https://brendaneich.com/2012/10/harmony-of-dreams-come-true/'>Harmony of Dreams Come True</a>, Brendan Eich discusses the &#8220;new-in-ES6 stuff&#8221; that is starting to come to fruition. Although his discussion mostly focuses on Mozilla-based implementations, he does relate upcoming language features to a wide range of JavaScript projects, including games. This is relevant to Node developers because ECMAScript 6 <em>is</em> happening, and changes are already present in V8 itself.</p>

<p>Let&#8217;s look at some of these changes in a moment. For now you might be wondering how to track such changes as they become available in Node. When new builds of Node are released, the version of V8 is usually mentioned if it has changed. You can also view the commit history on GitHub for a given release tag to see what version of V8 has been used, or take a look at the value of <a href='http://nodejs.org/docs/latest/api/all.html#all_process_versions'>process.versions</a>:</p>
<div class='highlight'><pre><code class='text'>~  node -e &#39;console.log(process.versions)&#39;
{ http_parser: &#39;1.0&#39;,
  node: &#39;0.8.12&#39;,
  v8: &#39;3.11.10.22&#39;,
  ares: &#39;1.7.5-DEV&#39;,
  uv: &#39;0.8&#39;,
  zlib: &#39;1.2.3&#39;,
  openssl: &#39;1.0.0f&#39; }
</code></pre>
</div>
<p>Once you&#8217;ve got the V8 version, you can check take a look at the <a href='http://v8.googlecode.com/svn/trunk/ChangeLog'>V8 ChangeLog</a> to see what has been included. Just searching that text for &#8220;Harmony&#8221; shows the following for Node 0.8.12:</p>

<ul>
<li>Block scoping</li>

<li>Harmony semantics for typeof</li>

<li><code>let</code> and <code>const</code></li>

<li><code>Map</code> and <code>WeakMap</code></li>

<li>Module declaration</li>

<li>The <code>Proxy</code> prototype</li>
</ul>

<h3 id='running_node_with_harmony_options'>Running Node with Harmony Options</h3>

<p>Typing <code>node --v8-options</code> shows all of the available V8 options:</p>

<ul>
<li><code>--harmony_typeof</code>: Enable harmony semantics for typeof</li>

<li><code>--harmony_scoping</code>: Enable harmony block scoping</li>

<li><code>--harmony_modules</code>: Enable harmony modules (implies block scoping)</li>

<li><code>--harmony_proxies</code>: Enable harmony proxies</li>

<li><code>--harmony_collections</code>: Enable harmony collections (sets, maps, and weak maps)</li>

<li><code>--harmony</code>: Enable all harmony features (except typeof)</li>
</ul>

<p>To actually use one of these options, just include it when running a script:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>node</span> <span class='o'>--</span><span class='nx'>harmony</span> <span class='nx'>script</span><span class='p'>.</span><span class='nx'>js</span>
</code></pre>
</div>
<h3 id='example_'>Example: <code>typeof</code></h3>

<p>The <code>--harmony_typeof</code> option is special because it isn&#8217;t included with <code>--harmony</code>, this is most likely because the proposal was rejected: <a href='http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null&amp;s=typeof'>harmony:typeof_null</a>. The possibility of a proposal being rejected is part of working with cutting edge language features &#8211; if you&#8217;re unsure about the status of a given feature the best thing to do is search the <a href='http://wiki.ecmascript.org/doku.php'>ECMAScript DokuWiki</a>.</p>

<p>With this option enabled, <code>typeof null === &quot;null&quot;</code> is <code>true</code>.</p>

<h3 id='example_type_checking'>Example: Type Checking</h3>

<p>Standard Node 0.8 without the <code>--harmony</code> flag supports <code>isNaN</code> and <code>isFinite</code>. However, <code>toInteger</code> and <code>isInteger</code> don&#8217;t seem to be supported yet.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>);</span>

<span class='nx'>assert</span><span class='p'>(</span><span class='o'>!</span><span class='nb'>isNaN</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>));</span>
<span class='nx'>assert</span><span class='p'>(</span><span class='o'>!</span><span class='nb'>isNaN</span><span class='p'>(</span><span class='s1'>&#39;1&#39;</span><span class='p'>));</span>
<span class='nx'>assert</span><span class='p'>(</span><span class='nb'>isNaN</span><span class='p'>(</span><span class='s1'>&#39;test&#39;</span><span class='p'>));</span>
<span class='nx'>assert</span><span class='p'>(</span><span class='nb'>isFinite</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>));</span>
<span class='nx'>assert</span><span class='p'>(</span><span class='o'>!</span><span class='nb'>isFinite</span><span class='p'>(</span><span class='mi'>1</span><span class='o'>/</span><span class='mi'>0</span><span class='p'>));</span>
</code></pre>
</div>
<h3 id='example_block_scoping'>Example: Block Scoping</h3>

<p>Strict mode helps fix a major JavaScript design flaw: a missing <code>var</code> statement makes a variable globally visible. ES6 goes a step further by introducing <code>let</code> which can be used to create block-local variables. The following example must be run with <code>node --use-strict --harmony</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>for</span> <span class='p'>(</span><span class='kd'>let</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='mi'>3</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;i:&#39;</span><span class='p'>,</span> <span class='nx'>i</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>);</span>
</code></pre>
</div>
<p>The final statement, <code>console.log(i)</code>, will cause a <code>ReferenceError</code> to be raised. The variable <code>i</code> is out of scope. Great, but doesn&#8217;t that mean forgetting <code>let</code> will just create a global? No, because in that case strict mode causes a <code>ReferenceError</code> to be raised.</p>

<p>The advantages of <code>let</code> are paired with <code>const</code> &#8211; by declaring a constant in global code the semantics are clear, and leaking uninitialised properties into the global object is avoided.</p>

<h3 id='example_collections'>Example: Collections</h3>

<p>ES6 adds new APIs for dealing with groups of values: <code>Map</code>, <code>Set</code>, and <code>WeakMap</code>. The <code>Map</code> constructor allows any object or primitive value to be mapped to another value. This is confusing because it sounds similar to plain old objects, but that&#8217;s only because we often use objects to implement what maps are designed to solve more efficiently.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>m</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Map</span><span class='p'>()</span>
  <span class='p'>,</span> <span class='nx'>key</span> <span class='o'>=</span> <span class='p'>{</span> <span class='nx'>a</span><span class='o'>:</span> <span class='s1'>&#39;Test&#39;</span> <span class='p'>}</span>
  <span class='p'>,</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='s1'>&#39;a test value&#39;</span>
  <span class='p'>;</span>

<span class='nx'>m</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>);</span>

<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>equal</span><span class='p'>(</span><span class='nx'>m</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>),</span> <span class='nx'>value</span><span class='p'>);</span>
</code></pre>
</div>
<p>This example shows that map keys don&#8217;t need to be converted to strings, unlike with objects.</p>

<p>Node also currently has <code>Set</code> when running with <code>--harmony</code>, but instantiation with an array doesn&#8217;t seem to work yet, and neither does <code>Set.prototype.size</code>.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>s</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Set</span><span class='p'>()</span>
  <span class='p'>;</span>

<span class='nx'>s</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='s1'>&#39;a&#39;</span><span class='p'>);</span>

<span class='nx'>assert</span><span class='p'>.</span><span class='nx'>ok</span><span class='p'>(</span><span class='nx'>s</span><span class='p'>.</span><span class='nx'>has</span><span class='p'>(</span><span class='s1'>&#39;a&#39;</span><span class='p'>));</span>
</code></pre>
</div>
<p>Finally, <code>WeakMap</code> is a form of map with <em>weak</em> references. Because <code>WeakMap</code> holds weak references to objects, the keys are not enumerable. The advantage of this is the garbage collector can remove entries when they&#8217;re no-longer in use. To justify the relevance of <code>WeakMap</code>, Brendan mentioned the <a href='http://en.wikipedia.org/wiki/Ephemeron'>Ephemeron</a>:</p>

<blockquote>
<p>Ephemerons solve a problem which is commonly found when trying to &#8220;attach&#8221; properties to objects by using a registry. When some property should be attached to an object, the property should (in terms of GC behavior) typically have the life-time that an instance variable of this object would have.</p>
</blockquote>

<p>So the <code>WeakMap</code> API should give us a memory-efficient and faster-than-O(n) key/value map.</p>

<p>There&#8217;s a post from last year by Andy E called <a href='http://whattheheadsaid.com/2011/10/es6-a-quick-look-at-weak-maps'>ES6 – a quick look at Weak Maps</a> that relates <code>WeakMap</code> to jQuery&#8217;s expando property:</p>

<blockquote>
<p>Weak maps come in here because they can do the job much better. They cut out the need for the expando property entirely, along with the requirement of handling JS objects differently to DOM objects. They also expand on jQuery&#8217;s ability to allow garbage collection when DOM elements are removed by its own methods, by automatically allowing garbage collection when DOM elements no longer reachable after they&#8217;ve been removed by any method.</p>
</blockquote>

<p>I tried creating some instances of <code>WeakMap</code> with circular references and forcing the garbage collector to run by using <code>node --harmony --expose_gc</code> and calling <code>gc()</code>, but it&#8217;s difficult to tell if the object is actually being removed yet:</p>

<blockquote>
<p>We can&#8217;t tell, however: there&#8217;s no way to enumerate a <code>WeakMap</code>, as doing so could expose the GC schedule (in browsers, you can&#8217;t call <code>gc()</code> to force a collection). Nor can we use <code>wm.has</code> to probe for entries, since we have nulled our <code>objkey</code> references!</p>
</blockquote>

<h3 id='proxies'>Proxies</h3>

<p>The current version of Node seems to include the <a href='http://wiki.ecmascript.org/doku.php?id=harmony:proxies'>old Proxy API</a>, so I don&#8217;t think it&#8217;s worth exploring here. The <a href='http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies'>newer Proxy API</a> doesn&#8217;t seem to work as expected, and I can&#8217;t find specific mention of a change to the new API style in the V8 issues or developer mailing list.</p>

<h3 id='generators_classes_and_macros'>Generators, Classes, and Macros</h3>

<p>Generators, classes, and macros are not currently supported by V8. These are still hotly debated areas, which you can read more about on the ECMAScript DokuWiki:</p>

<ul>
<li><a href='http://wiki.ecmascript.org/doku.php?id=harmony:generators'>Generators</a></li>

<li><a href='http://wiki.ecmascript.org/doku.php?id=harmony:classes'>Classes</a></li>
</ul>

<p>Andreas Rossberg said <a href='https://groups.google.com/d/msg/v8-users/mV38oWvA2Nk/txtSzVdDhpUJ'>the V8 developers are aware of generators</a>, but there aren&#8217;t any concrete plans for supporting them yet.</p>

<p><a href='http://wiki.ecmascript.org/doku.php?id=harmony:destructuring'>Destructuring</a> has been added to the draft ECMAScript 6 specification.</p>

<p>If you&#8217;re desperate to try macros in Node now, Mozilla released <a href='http://sweetjs.org/'>sweet.js</a> (GitHub: <a href='https://github.com/mozilla/sweet.js'>mozilla / sweet.js</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/sweet.js'>sweet.js</a>) a few weeks ago. It&#8217;s a command-line tool that &#8220;compiles&#8221; scripts, in a similar way to CoffeeScript. This isn&#8217;t specifically an ES6 shim, although there are plenty of those out there. Some new features like <code>WeakMap</code> seem like they can be supported using shims, but a complete implementation isn&#8217;t always possible in older versions of ECMAScript.</p>

<h3 id='references'>References</h3>

<ul>
<li><a href='https://brendaneich.com/2012/10/harmony-of-dreams-come-true/'>Harmony of Dreams Come True</a> by Brendan Eich</li>

<li><a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Map'>MDN: Map</a></li>

<li><a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Set'>MDN: Set</a></li>

<li><a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/WeakMap'>MDN: WeakMap</a></li>

<li><a href='http://whattheheadsaid.com/2011/10/es6-a-quick-look-at-weak-maps'>ES6 – a quick look at Weak Maps</a> by Andy E</li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/12/red-dwarf-stately-ansi">Red Dwarf, Stately.js, ansi_up</a></h2>
      <div class="meta">
        <span class="date">12 Oct 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/10/12/red-dwarf-stately-ansi/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#github">github</a>
          
            <a href="/tags.html#fsm">fsm</a>
          
            <a href="/tags.html#console">console</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='red_dwarf'>Red Dwarf</h3>

<p><img src='/images/posts/reddwarf.png' alt='Red Dwarf' /></p>

<p><a href='http://jrvis.com/red-dwarf/'>Red Dwarf</a> (GitHub: <a href='https://github.com/rviscomi/red-dwarf'>rviscomi / red-dwarf</a>, License: <em>MIT</em>) by Rick Viscomi is a heat map visualisation of GitHub repository stars. It can display stars for a specific repository, so <a href='http://jrvis.com/red-dwarf/node/'>the joyent/node heat map</a> is pretty interesting given the sheer amount of stars it has.</p>

<p>Google Maps is used for geocoding and displaying the map, and GitHub supplies the raw data. Both of these APIs are accessible with client-side JavaScript, so the whole thing can work purely in-browser. The visualisation itself is drawn using <a href='https://developers.google.com/maps/documentation/javascript/layers#JSHeatMaps'>Heatmap Layer</a>, provided by Google Maps.</p>

<h3 id='statelyjs'>Stately.js</h3>

<p><img src='/images/posts/statelyjs.png' alt='Stately.js logo' /></p>

<p><a href='https://github.com/fschaefer/Stately.js'>Stately.js</a> (License: <em>MIT</em>) by Florian Schäfer is a finite-state automaton engine, suitable for use in client-side projects. Given that most of us are used to working with events, state machines work quite naturally in JavaScript. Stately.js allows transitions to be tracked using notifications, and handlers can be registered and removed as required.</p>

<p>Florian&#8217;s documentation is detailed, and the &#8220;door&#8221; example is an easy one to follow if you&#8217;re confused about how the project can be used. Some simple tests have also been included, with a small HTML test harness.</p>

<h3 id='ansi_up'>ansi_up</h3>

<p><img src='/images/posts/ansiup.png' alt='ansiup example' /></p>

<p>I still hang out in IRC, and I still like using Mutt for email. There&#8217;s something reassuring about the glare of colourful text-based interfaces that no GUI will ever replace. If you&#8217;re a fellow console hacker, then you may find a use for <a href='https://github.com/drudru/ansi_up'>ansi_up</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/ansi_up'>ansi_up</a>) by Dru Nelson. It converts text with ANSI terminal colour commands into HTML, so you can take your FIGlet-powered nonsense to the web and annoy people with it there.</p>

<p>Dru says this project has been used &#8220;in production&#8221; since early 2012 &#8211; I wonder what it&#8217;s being used for?</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/11/brain-training">Brain Training Node</a></h2>
      <div class="meta">
        <span class="date">11 Oct 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/10/11/brain-training/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#statistics">statistics</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/brain-game-scraper.png' alt='Game scraper' /></p>

<p>The other day a friend asked me about the validity of video game review scores. There was an accusation of payola against a well-known games magazine, and the gaming community was trying to work out how accurate the magazine&#8217;s scores were. My programmer&#8217;s brain immediately thought up ways to solve this &#8211; would a naive Bayesian classifier be sufficient to predict review scores given enough reviews?</p>

<p>The answer to that particular question is beyond the scope of this article. If you&#8217;re interesting in statistical tests for detecting fraudulent data, then <a href='http://en.wikipedia.org/wiki/Benford&apos;s_law'>Benford&#8217;s law</a> is a better starting point.</p>

<p>Anyway, I couldn&#8217;t help myself from writing some Bayes experiments in Node, and the result is this brief tutorial.</p>

<p>This tutorial introduces naive Bayes classifiers through the <a href='https://npmjs.org/package/classifier'>classifier</a> module by Heather Arthur, and uses it to classify article text from the web through the power of scraping. It&#8217;s purely educational rather than genuinely useful, but if you write something interesting based on it let me know in the comments and I&#8217;ll check it out!</p>

<h3 id='prerequisites'>Prerequisites</h3>

<p>To complete this tutorial, the following things are required:</p>

<ul>
<li>A working installation of <a href='http://nodejs.org/'>Node</a></li>

<li>Basic Node and npm knowledge</li>

<li><a href='http://redis.io/'>Redis</a></li>
</ul>

<h3 id='goals'>Goals</h3>

<p>Completing this tutorial will teach you:</p>

<ul>
<li>The basics of Bayesian classification</li>

<li>How to use the classifier module</li>

<li>Web scraping</li>
</ul>

<h3 id='getting_started'>Getting Started</h3>

<p>Like all Node projects, this one needs a <code>package.json</code>. Nothing fancy, but enough to express the project&#8217;s dependencies:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>
  <span class='s2'>&quot;author&quot;</span><span class='o'>:</span> <span class='s2'>&quot;Alex R. Young&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;name&quot;</span><span class='o'>:</span> <span class='s2'>&quot;brain-training&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;version&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.0.1&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;private&quot;</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>,</span> <span class='s2'>&quot;dependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;classifier&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;request&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>,</span> <span class='s2'>&quot;cheerio&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>}</span>
<span class='p'>,</span> <span class='s2'>&quot;devDependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;mocha&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>},</span>
  <span class='s2'>&quot;engines&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;node&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.8.8&quot;</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The <a href='https://npmjs.org/package/cheerio'>cheerio</a> module implements a subset of jQuery, and a small DOM model. It&#8217;s a handy way to parse web pages where accuracy isn&#8217;t required. If you need a more accurate DOM simulation, the popular choice is <a href='https://npmjs.org/package/jsdom'>JSDOM</a>.</p>

<h3 id='core_module'>Core Module</h3>

<p>The classifier module has an extremely simple API. It can work with in-memory data, but I wanted to persist data with Redis. To centralise this so we don&#8217;t have to keep redefining the Redis configuration, the classifier module can be wrapped up like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>classifier</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;classifier&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>bayes</span>
  <span class='p'>;</span>

<span class='nx'>bayes</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>classifier</span><span class='p'>.</span><span class='nx'>Bayesian</span><span class='p'>({</span>
  <span class='nx'>backend</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;Redis&#39;</span>
  <span class='p'>,</span> <span class='nx'>options</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>hostname</span><span class='o'>:</span> <span class='s1'>&#39;localhost&#39;</span>
    <span class='p'>,</span> <span class='nx'>port</span><span class='o'>:</span> <span class='mi'>6379</span>
    <span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;gamescores&#39;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>bayes</span><span class='o'>:</span> <span class='nx'>bayes</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Now other scripts can load this file, and run <code>train</code> or <code>classify</code> as required. I called it <code>core.js</code>.</p>

<h3 id='naive_bayes_classifiers'>Naive Bayes Classifiers</h3>

<p>The classifier itself implements a <a href='http://en.wikipedia.org/wiki/Naive_Bayes_classifier'>naive Bayes classifier</a>. Such algorithms have been used as the core of many spam filtering solutions since the mid-1990s. Recently a book about Bayesian statistics, <a href='http://www.greenteapress.com/thinkbayes/'>Think Bayes</a>, was featured on Hacker News and garnered a lot of praise from the development community. It&#8217;s a free book by Allen Downey and makes a difficult subject relatively digestible.</p>

<p>The spam filtering example is probably the easiest way to get started with Bayes. It works by assigning each word in an email a probability of being <em>ham</em> or <em>spam</em>. When a mail is marked as spam, each word will weighted accordingly &#8211; this process is known as <em>training</em>. When a new email arrives, the filter can add up the probabilities of each word, and if a certain threshold is reached then the mail will be marked as spam. This is known as classification.</p>

<p>What makes this type of filtering <em>naive</em> is that each word is considered an independent &#8220;event&#8221;, but in reality the position of a word is important due to the grammatical rules of the language. Even with this arguably flawed assumption, naive classifiers perform well enough to help with a wide range of problems.</p>

<p>The Wikipedia page for <a href='http://en.wikipedia.org/wiki/Bayesian_spam_filtering'>Bayesian spam filtering</a> goes into more detail, relating spam filtering algorithms to the formulas required to calculate probabilities.</p>

<h3 id='training'>Training</h3>

<p>Create a new file called <code>train.js</code> as follows:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>cheerio</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;cheerio&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;request&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>bayes</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./core&#39;</span><span class='p'>).</span><span class='nx'>bayes</span>
  <span class='p'>;</span>

<span class='kd'>function</span> <span class='nx'>parseReview</span><span class='p'>(</span><span class='nx'>html</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>$</span> <span class='o'>=</span> <span class='nx'>cheerio</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='nx'>html</span><span class='p'>)</span>
    <span class='p'>,</span> <span class='nx'>score</span>
    <span class='p'>,</span> <span class='nx'>article</span>
    <span class='p'>;</span>

  <span class='nx'>article</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.copy .section p&#39;</span><span class='p'>).</span><span class='nx'>text</span><span class='p'>();</span>
  <span class='nx'>score</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;[typeof=&quot;v:Rating&quot;] [property=&quot;v:value&quot;]&#39;</span><span class='p'>).</span><span class='nx'>text</span><span class='p'>();</span>
  <span class='nx'>score</span> <span class='o'>=</span> <span class='nb'>parseInt</span><span class='p'>(</span><span class='nx'>score</span><span class='p'>,</span> <span class='mi'>10</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='p'>{</span> <span class='nx'>score</span><span class='o'>:</span> <span class='nx'>score</span><span class='p'>,</span> <span class='nx'>article</span><span class='o'>:</span> <span class='nx'>article</span> <span class='p'>};</span>
<span class='p'>}</span>

<span class='kd'>function</span> <span class='nx'>fetch</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>trained</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>

  <span class='nx'>request</span><span class='p'>(</span><span class='s1'>&#39;http://www.eurogamer.net/ajax.php?action=frontpage&amp;page=&#39;</span> <span class='o'>+</span> <span class='nx'>i</span> <span class='o'>+</span> <span class='s1'>&#39;&amp;type=review&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>response</span><span class='p'>,</span> <span class='nx'>body</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>$</span> <span class='o'>=</span> <span class='nx'>cheerio</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='nx'>body</span><span class='p'>)</span>
      <span class='p'>,</span> <span class='nx'>links</span> <span class='o'>=</span> <span class='p'>[]</span>
      <span class='p'>;</span>

    <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.article a&#39;</span><span class='p'>).</span><span class='nx'>each</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>,</span> <span class='nx'>a</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>url</span><span class='p'>;</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>a</span><span class='p'>.</span><span class='nx'>attribs</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>url</span> <span class='o'>=</span> <span class='s1'>&#39;http://www.eurogamer.net/&#39;</span> <span class='o'>+</span> <span class='nx'>a</span><span class='p'>.</span><span class='nx'>attribs</span><span class='p'>.</span><span class='nx'>href</span><span class='p'>.</span><span class='nx'>split</span><span class='p'>(</span><span class='s1'>&#39;#&#39;</span><span class='p'>)[</span><span class='mi'>0</span><span class='p'>];</span>
        <span class='k'>if</span> <span class='p'>(</span><span class='nx'>links</span><span class='p'>.</span><span class='nx'>indexOf</span><span class='p'>(</span><span class='nx'>url</span><span class='p'>)</span> <span class='o'>===</span> <span class='o'>-</span><span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='nx'>links</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>url</span><span class='p'>);</span>
        <span class='p'>}</span>
      <span class='p'>}</span>
    <span class='p'>});</span>

    <span class='kd'>var</span> <span class='nx'>left</span> <span class='o'>=</span> <span class='nx'>links</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>;</span>

    <span class='nx'>links</span><span class='p'>.</span><span class='nx'>forEach</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>link</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Fetching:&#39;</span><span class='p'>,</span> <span class='nx'>link</span><span class='p'>);</span>
      <span class='nx'>request</span><span class='p'>(</span><span class='nx'>link</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>response</span><span class='p'>,</span> <span class='nx'>body</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='kd'>var</span> <span class='nx'>review</span> <span class='o'>=</span> <span class='nx'>parseReview</span><span class='p'>(</span><span class='nx'>body</span><span class='p'>)</span>
          <span class='p'>,</span> <span class='nx'>category</span>
          <span class='p'>;</span>

        <span class='k'>if</span> <span class='p'>(</span><span class='nx'>review</span><span class='p'>.</span><span class='nx'>score</span> <span class='o'>&gt;</span> <span class='mi'>0</span> <span class='o'>&amp;&amp;</span> <span class='nx'>review</span><span class='p'>.</span><span class='nx'>score</span> <span class='o'>&lt;=</span> <span class='mi'>5</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='nx'>category</span> <span class='o'>=</span> <span class='s1'>&#39;bad&#39;</span><span class='p'>;</span>
        <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>review</span><span class='p'>.</span><span class='nx'>score</span> <span class='o'>&gt;</span> <span class='mi'>5</span> <span class='o'>&amp;&amp;</span> <span class='nx'>review</span><span class='p'>.</span><span class='nx'>score</span> <span class='o'>&lt;=</span> <span class='mi'>10</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='nx'>category</span> <span class='o'>=</span> <span class='s1'>&#39;good&#39;</span><span class='p'>;</span>
        <span class='p'>}</span>

        <span class='k'>if</span> <span class='p'>(</span><span class='nx'>category</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>category</span> <span class='o'>+</span> <span class='s1'>&#39;:&#39;</span><span class='p'>,</span> <span class='nx'>review</span><span class='p'>.</span><span class='nx'>score</span><span class='p'>);</span>
          <span class='nx'>bayes</span><span class='p'>.</span><span class='nx'>train</span><span class='p'>(</span><span class='nx'>review</span><span class='p'>.</span><span class='nx'>article</span><span class='p'>,</span> <span class='nx'>category</span><span class='p'>);</span>
          <span class='nx'>trained</span><span class='o'>++</span><span class='p'>;</span>
        <span class='p'>}</span>

        <span class='nx'>left</span><span class='o'>--</span><span class='p'>;</span>

        <span class='k'>if</span> <span class='p'>(</span><span class='nx'>left</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Trained:&#39;</span><span class='p'>,</span> <span class='nx'>trained</span><span class='p'>);</span>
        <span class='p'>}</span>
      <span class='p'>});</span>
    <span class='p'>});</span>
  <span class='p'>});</span>
<span class='p'>}</span>

<span class='nx'>fetch</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>)</span>
</code></pre>
</div>
<p>This code is tailored for <a href='http://www.eurogamer.net/'>Eurogamer</a>. If I wanted to write a production version, I&#8217;d separate out the scraping code from the training code. Here I just want to illustrate how to scrape and train the classifier.</p>

<p>The <code>parseReview</code> function uses the cheerio module to pull out the review&#8217;s paragraph tags and extract the text. This is pretty easy because cheerio automatically operates on arrays of nodes, so <code>$(&#39;.copy .section p&#39;).text()</code> will return a block of text for each paragraph without any extra effort.</p>

<p>The <code>fetch</code> function could be adapted to call Eurogamer&#8217;s article paginator recursively, but I thought if I put that in there they&#8217;d get angry if enough readers tried it out! In this example, <code>fetch</code> will download each article from the first page. I&#8217;ve tried to ensure unique links are requested by creating an array of links and then calling <code>Array.prototype.indexOf</code> to see if the link is already in the array. It also strips out links with hash URLs, because Eurogamer includes an extra <code>#comments</code> link.</p>

<p>Once the unique list of links has been generated, each one is downloaded. It&#8217;s worth noting that I use Mikeal Rogers&#8217; <a href='https://npmjs.org/package/request'>request</a> module here to simplify HTTP requests &#8211; Node&#8217;s built-in HTTP client library is fine, but Mikeal&#8217;s module cuts down a bit of boilerplate code. I use it in a lot of projects, from web scrapers to crawlers, and interacting with RESTful APIs.</p>

<p>The scraper code in <code>parseReview</code> tries to pull out the score from the HTML. If a score between 0 and 5 is found, then the article is categorised as &#8216;bad&#8217;, and anything else is &#8216;good&#8217;.</p>

<h3 id='classification'>Classification</h3>

<p>To actually classify other text, we need to find some other text and then call <code>bayes.classify</code> on it. This code expects review URLs from Edge magazine. For example: <a href='http://www.edge-online.com/review/torchlight-ii-review/'>Torchlight II review</a>.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;request&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>cheerio</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;cheerio&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>bayes</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./core&#39;</span><span class='p'>).</span><span class='nx'>bayes</span>
  <span class='p'>;</span>

<span class='nx'>request</span><span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>argv</span><span class='p'>[</span><span class='mi'>2</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>request</span><span class='p'>,</span> <span class='nx'>body</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>$</span> <span class='o'>=</span> <span class='nx'>cheerio</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='nx'>body</span><span class='p'>)</span>
      <span class='p'>,</span> <span class='nx'>text</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.post-page p&#39;</span><span class='p'>).</span><span class='nx'>text</span><span class='p'>()</span>
      <span class='p'>;</span>

    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>text</span><span class='p'>);</span>

    <span class='nx'>bayes</span><span class='p'>.</span><span class='nx'>classify</span><span class='p'>(</span><span class='nx'>text</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>category</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;category:&#39;</span><span class='p'>,</span> <span class='nx'>category</span><span class='p'>);</span>
    <span class='p'>});</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Again, cheerio is used to pull out article text, and then it&#8217;s handed off to <code>bayes.classify</code>. Notice that the call to <code>classify</code> looks asynchronous &#8211; I quite like the idea of building a simple reusable asynchronous Node Bayes classifier service using Redis.</p>

<p>This script can be run like this:</p>
<div class='highlight'><pre><code class='text'>node classify.js http://www.edge-online.com/review/liberation-maiden-review/
</code></pre>
</div>
<h3 id='conclusion'>Conclusion</h3>

<p>I&#8217;ve combined my interest in computer and video games with Node to attempt to use a naive Bayes classifier to determine if text about a given game is <em>good</em> or <em>bad</em>. Of course, this is a lot more subjective than the question of <em>ham</em> or <em>spam</em>, so the value is limited. However, hopefully you can see how easy the classifier module makes Bayesian statistics, and you should be able to adapt this code to work with other websites or plain text files.</p>

<p>Heather Arthur has also written <a href='https://npmjs.org/package/brain'>brain</a>, which is a neural network library. We&#8217;ve featured this module before on DailyJS, but as there&#8217;s only three dependents on npm I thought it was worth brining it up again.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/10/node-roundup">Node Roundup: MongloDB, parseq.js, node-netpbm</a></h2>
      <div class="meta">
        <span class="date">10 Oct 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/10/10/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#databases">databases</a>
          
            <a href="/tags.html#mongo">mongo</a>
          
            <a href="/tags.html#markdown">markdown</a>
          
            <a href="/tags.html#documentation">documentation</a>
          
            <a href="/tags.html#async">async</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='monglodb'>MongloDB</h3>

<p><img src='/images/posts/monglodb.png' alt='MongloDB Logo' /></p>

<p><a href='http://monglodb.com/'>MongloDB</a> (GitHub: <a href='https://github.com/Monglo/MongloDB'>onglo / MongloDB</a>, License: <em>MIT</em>) by Christian Sullivan is a database written with JavaScript that&#8217;s compatible with MongoDB&#8217;s queries. It has a plugin system for persistence, and a datastore for Titanium Mobile &#8211; this effectively allows a form of MongoDB to be used within iOS and Android applications.</p>

<p>Monglo has a <code>DataStore</code> API that can be used to persist data locally or remotely. It&#8217;s based around an object that implements each CRUD operation:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>monglo</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./index&#39;</span><span class='p'>).</span><span class='nx'>Monglo</span>
  <span class='p'>,</span> <span class='nx'>db</span> <span class='o'>=</span> <span class='nx'>monglo</span><span class='p'>(</span><span class='s1'>&#39;DemoDB&#39;</span><span class='p'>)</span>
  <span class='p'>;</span>

<span class='kd'>function</span> <span class='nx'>DemoStore</span><span class='p'>(){</span>
  <span class='k'>return</span> <span class='p'>{</span>
     <span class='nx'>insert</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{}</span>
   <span class='p'>,</span> <span class='nx'>update</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{}</span>
   <span class='p'>,</span> <span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{}</span>
   <span class='p'>,</span> <span class='nx'>remove</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{}</span>
   <span class='p'>,</span> <span class='nx'>all</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{}</span>
  <span class='p'>};</span>
<span class='p'>}</span>

<span class='nx'>db</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;store&#39;</span><span class='p'>,</span> <span class='k'>new</span> <span class='nx'>DemoStore</span><span class='p'>());</span>
</code></pre>
</div>
<h3 id='parseqjs'>parseq.js</h3>

<p><a href='http://parseqjs.com/'>parseq.js</a> (GitHub: <a href='https://github.com/sutoiku/parseq'>sutoiku / parseq</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/parseq'>parseq</a>) from Sutoiku, Inc. is a flow control library for organising parallel and sequential operations. To manage asynchronous operations, <code>this</code> can be passed. If several calls are made, then <code>this()</code> can be passed, and the next function will receive an array that contains the results in the order they were called.</p>

<p>The same author also recently released <a href='http://jsdox.org/'>jsdox</a>, which is another JSDoc to Markdown generator.</p>

<h3 id='netpbm'>netpbm</h3>

<p><a href='https://npmjs.org/package/netpbm'>netpbm</a> (GitHub: <a href='https://github.com/punkave/node-netpbm'>punkave / node-netpbm</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/netpbm'>netpbm</a>) by Tom Boutell scales and converts images using the <a href='http://netpbm.sourceforge.net/'>netpbm</a> toolkit, which is a venerable set of graphics programs found on many Unix systems.</p>

<p>This library is a wrapper around the netpbm binaries, and takes advantage of the fact that most netpbm programs only read one row of pixels at a time into memory to keep memory usage low.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/09/jquery-roundup">jQuery Roundup: jQuery UI 1.9.0, Delta Theme, jQuery.textFit</a></h2>
      <div class="meta">
        <span class="date">09 Oct 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/10/09/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jquery-ui">jquery-ui</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#truncation">truncation</a>
          
            <a href="/tags.html#themes">themes</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_ui_190'>jQuery UI 1.9.0</h3>

<p><img src='/images/posts/jquery-ui-190.png' alt='jQuery UI 1.9.0 site' /></p>

<p><a href='http://blog.jqueryui.com/2012/10/jquery-ui-1-9-0/'>jQuery UI 1.9.0</a> is out, which adds new widgets, API refinements, improved accessibility, and hundreds of bug fixes. The new widgets are as follows:</p>

<ul>
<li><a href='http://api.jqueryui.com/menu/'>Menu</a>: A navigation menu with support for hierarchical pop-up submenus</li>

<li><a href='http://api.jqueryui.com/spinner/'>Spinner</a>: A &#8220;number stepper&#8221; for input fields (rather than a rotating progress indicator)</li>

<li><a href='http://jqueryui.com/tooltip/'>Tooltip</a>: A pop-up message</li>
</ul>

<p>There&#8217;s a detailed <a href='http://jqueryui.com/upgrade-guide/1.9/#api-redesigns'>jQuery UI 1.9 Upgrade Guide</a> which lists deprecations. Oh, and the jQuery UI site has been refreshed as well!</p>

<h3 id='delta_jquery_ui_theme'>Delta: jQuery UI Theme</h3>

<p><img src='/images/posts/jquery-ui-delta.png' alt='jQuery UI Delta Theme' /></p>

<p><a href='http://blog.kiandra.com.au/2012/09/delta-a-free-jquery-ui-theme/'>Delta</a> (GitHub: <a href='https://github.com/kiandra/Delta-jQuery-UI-Theme'>kiandra / Delta-jQuery-UI-Theme</a>, License: <em>MIT/GPL</em>) is a jQuery UI theme by Tait Brown, who created the hugely popular <a href='http://taitems.github.com/Aristo-jQuery-UI-Theme/'>Aristo port</a>.</p>

<p>This theme has a metallic finish that reminds me if iOS 6, and includes light and dark variations. It&#8217;s also dubbed as <em>Retina ready</em> &#8211; CSS3 gradients and high-resolution images have been used.</p>

<h3 id='jquerytextfit'>jQuery.textFit</h3>

<p><a href='http://strml.github.com/examples/jquery.textFit.html'>jQuery.textFit</a> (GitHub: <a href='https://github.com/STRML/jquery.textFit'>STRML / jquery.textFit</a>, License: <em>MIT</em>) by Samuel Reed can scale text to fit its container. It also correctly detects multiline strings with break tags.</p>

<p>To find the best font size, a binary search is performed. The demo on jQuery.textFit&#8217;s site is slowed down so you can actually see how the algorithm works, in reality it seems to run very quickly.</p>

<p>Vertical alignment and centred text are both supported, as are custom fonts.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/08/decorator">Decorating Your JavaScript</a></h2>
      <div class="meta">
        <span class="date">08 Oct 2012</span>
        | <span class="author">By Justin Naifeh</span>
        | <span class="comments"><a href="/2012/10/08/decorator/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#pattern">pattern</a>
          
            <a href="/tags.html#object-oriented">object-oriented</a>
          
            <a href="/tags.html#decorator">decorator</a>
          
        </span>
      </div>
      <div class="preview">
        <p>The <a href='https://en.wikipedia.org/wiki/Decorator_pattern'>decorator pattern</a>, also known as a wrapper, is a mechanism by which to extend the run-time behavior of an object, a process known as decorating. The pattern is often overlooked because its simplicity belies its object-oriented benefits when writing scalable code. Decorating objects is also neglected in JavaScript because the dynamic nature of the language allows developers to abuse the malleability of objects, but <strong>just because you can doesn&#8217;t mean you should</strong>.</p>

<p>Before delving into the decorator pattern, let&#8217;s examine a realistic coding problem that can be solved with other solutions. The decorator is best understood after the shortcomings of other common solutions have been explored.</p>

<h3 id='the_problem'>The Problem</h3>

<p>You are writing a simple archiving tool that manages the display and lifecycle of publications and their authors. An important feature is the ability to list the contributing authors, which may be a subset of all authors. The default is to show the first three authors of any publication. The initial domain model is basic:</p>

<p><img src='/images/posts/decorator-domain.png' alt='domain' /></p>

<p>Using plain JavaScript we implement the read-only classes as follows:</p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * Author constructor.</span>
<span class='cm'> *</span>
<span class='cm'> * @param String firstName</span>
<span class='cm'> * @param String lastName</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>Author</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>firstName</span><span class='p'>,</span> <span class='nx'>lastName</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_firstName</span> <span class='o'>=</span> <span class='nx'>firstName</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_lastName</span> <span class='o'>=</span> <span class='nx'>lastName</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='nx'>Author</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The author&#39;s first name.</span>
<span class='cm'>   */</span>
  <span class='nx'>getFirstName</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_firstName</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The author&#39;s last name.</span>
<span class='cm'>   */</span>
  <span class='nx'>getLastName</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_lastName</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The representation of the Author.</span>
<span class='cm'>   */</span>
  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getFirstName</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39; &#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getLastName</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Publication constructor.</span>
<span class='cm'> *</span>
<span class='cm'> * @param String title</span>
<span class='cm'> * @param Author[] authors</span>
<span class='cm'> * @param int type</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>Publication</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>,</span> <span class='nx'>type</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_title</span> <span class='o'>=</span> <span class='nx'>title</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_authors</span> <span class='o'>=</span> <span class='nx'>authors</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_type</span> <span class='o'>=</span> <span class='nx'>type</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='nx'>Publication</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The publication title.</span>
<span class='cm'>   */</span>
  <span class='nx'>getTitle</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_title</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return Author[] All authors.</span>
<span class='cm'>   */</span>
  <span class='nx'>getAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_authors</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return int The publication type.</span>
<span class='cm'>   */</span>
  <span class='nx'>getType</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_type</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * A publication might have several authors, but we</span>
<span class='cm'>   * are only interested in the first three for a standard publication.</span>
<span class='cm'>   *</span>
<span class='cm'>   * @return Author[] The significant contributors.</span>
<span class='cm'>   */</span>
  <span class='nx'>contributingAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>3</span><span class='p'>);</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String the representation of the Publication.</span>
<span class='cm'>   */</span>
  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='s1'>&#39;[&#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;] &quot;&#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getTitle</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;&quot; by &#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>contributingAuthors</span><span class='p'>().</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;, &#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The API is straightforward. Consider the following invocations:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>pub</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Publication</span><span class='p'>(</span><span class='s1'>&#39;The Shining&#39;</span><span class='p'>,</span> 
  <span class='p'>[</span><span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Stephen&#39;</span><span class='p'>,</span> <span class='s1'>&#39;King&#39;</span><span class='p'>)],</span>
  <span class='s1'>&#39;horror&#39;</span><span class='p'>);</span>

<span class='c1'>// rely on the default toString() to print: [horror] &quot;The Shining&quot; by Stephen King</span>
<span class='nx'>alert</span><span class='p'>(</span><span class='nx'>pub</span><span class='p'>);</span>

<span class='c1'>// ...</span>

<span class='kd'>var</span> <span class='nx'>pub2</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Publication</span><span class='p'>(</span><span class='s1'>&#39;Design Patterns: Elements of Reusable Object-Oriented Software&#39;</span><span class='p'>,</span> <span class='p'>[</span>
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Erich&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Gamma&#39;</span><span class='p'>),</span>
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Richard&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Helm&#39;</span><span class='p'>),</span>
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Ralph&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Johnson&#39;</span><span class='p'>),</span>
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;John&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Vlissides&#39;</span><span class='p'>)</span>
<span class='p'>],</span> <span class='s1'>&#39;programming&#39;</span><span class='p'>);</span>

<span class='c1'>// prints: [programming] &quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot; by Erich Gamma, Richard Helm, Ralph Johnson</span>
<span class='nx'>alert</span><span class='p'>(</span><span class='nx'>pub2</span><span class='p'>);</span>
</code></pre>
</div>
<p>The design is simple and reliable&#8230;at least until the client specifies a new requirement:</p>

<blockquote>
<p>In accordance with the convention for <a href='https://www.ncbi.nlm.nih.gov/pubmed/17651671'>medical publications</a>, only list the first (primary) and last (supervisor) authors if multiple authors exist.</p>
</blockquote>

<p>This means that if <code>Publication.getType()</code> returns &#8220;medical&#8221; we must perform special logic to list the contributing authors. All other types (e.g., horror, romance, computer, etc) will use the default behavior.</p>

<h3 id='solutions'>Solutions</h3>

<p>There are many solutions to satisfy the new requirement, but some have disadvantages that are not readily apparent. Let&#8217;s explore a few of these and see why they are not ideal even though they are commonplace.</p>

<h4 id='overwrite_behavior'>Overwrite Behavior</h4>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// overwrite the contributingAuthors definition</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span> <span class='o'>===</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>pub</span><span class='p'>.</span><span class='nx'>contributingAuthors</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>authors</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>

    <span class='c1'>// return the first and last authors if possible</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&gt;</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>));</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This, one could argue, can be the most abused feature of the language: the ability to arbitrarily overwrite properties and behavior at run-time. Now the <code>if/else</code> condition must be maintained and expanded if more requirements are added to specify contributing authors. Furthermore, it is debatable whether or not <code>pub</code> is still an instance of <code>Publication</code>. A quick <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/instanceof'>instanceof</a> check will confirm that it is, but a class defines a set of state and behavior. In this case we have modified select instances and the calling code can no longer trust the consistency of <code>Publication</code> objects.</p>

<h4 id='change_the_calling_code'>Change the Calling Code</h4>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>listing</span><span class='p'>;</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span> <span class='o'>===</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>contribs</span> <span class='o'>=</span> <span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>

  <span class='c1'>// return the first and last authors if possible</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&gt;</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>contribs</span> <span class='o'>=</span> <span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>));</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>contribs</span> <span class='o'>=</span> <span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
  <span class='p'>}</span>

  <span class='nx'>listing</span> <span class='o'>=</span> <span class='s1'>&#39;[&#39;</span><span class='o'>+</span><span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;] &quot;&#39;</span><span class='o'>+</span><span class='nx'>pub</span><span class='p'>.</span><span class='nx'>getTitle</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;&quot; by &#39;</span><span class='o'>+</span><span class='nx'>contribs</span><span class='p'>.</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;, &#39;</span><span class='p'>);</span>
<span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
  <span class='nx'>listing</span> <span class='o'>=</span> <span class='nx'>pub</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>();</span>
<span class='p'>}</span>

<span class='nx'>alert</span><span class='p'>(</span><span class='nx'>listing</span><span class='p'>);</span>
</code></pre>
</div>
<p>This solution violates encapsulation by forcing calling code to understand the internal implementation of <code>Publication.toString()</code> and recreate it outside of the class. A good design should not burden calling code.</p>

<h4 id='subclass_the_component'>Subclass the Component</h4>

<p><img src='/images/posts/decorator-subclass.png' alt='subclass' /></p>

<p>One of the most common solutions is to create a <code>MedicalPublication</code> class that extends <code>Publication</code>, with a <code>contributingAuthors()</code> override to provide custom behavior. While this approach is arguably less flawed than the first two, it pushes the limit of clean inheritance. We should always <a href='https://en.wikipedia.org/wiki/Composition_over_inheritance'>favor composition</a> over inheritance to avoid overreliance on the <a href='https://en.wikipedia.org/wiki/Fragile_base_class'>base class internals</a> (for the <a href='http://www.cas.mcmaster.ca/~emil/Publications_files/MikhajlovSekerinski98FragileBaseClassProblem.pdf'>developer masochists</a>).</p>

<p>Subclassing also fails as a viable strategy when more than one customization might occur or when there is an unknown combination of customizations. An often cited example is a program to model a coffee shop where customers can customize their cup of coffee, thus affecting the price. A developer could create subclasses that reflect the myriad combinations such as <code>CoffeeWithCream</code> and <code>CoffeeWithoutCreamExtraSugar</code> that override <code>Coffee.getPrice()</code>, but it is easy to see that the design will not scale.</p>

<h4 id='modify_the_source_code'>Modify the Source Code</h4>
<div class='highlight'><pre><code class='javascript'><span class='nx'>contributingAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span> <span class='o'>===</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>authors</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>

    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&gt;</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>));</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>3</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This is somewhat of a hack, but in a small project where you control the source code it might suffice. A clear disadvantage is that the <code>if/else</code> condition must grow with every custom behavior, making it a potential maintenance nightmare.</p>

<p>Another thing to note is that you should never, ever modify source code outside of your control. Even the mention of such an idea should leave a taste in your mouth worse than drinking orange juice after brushing your teeth. Doing so will inextricably couple your code to that revision of the API. The cases where this is a valid option are so few and far between that it is usually an architectural issue in the application, not in the outside code.</p>

<h3 id='the_decorator'>The Decorator</h3>

<p>These solutions fulfill the requirement at the cost of jeopardizing maintainability and scalability. As a developer you must pick what is right for your application, but there is one more option to examine before making a decision.</p>

<p>I recommend using a decorator, a flexible pattern by which to extend the behavior of your existing objects. The following UML represents an abstract implementation of the pattern:</p>

<p><img src='/images/posts/decorator-uml.png' alt='decorator uml' /></p>

<p>The <code>ConcreteComponent</code> and <code>Decorator</code> classes implement the same <code>Component</code> interface (or extend <code>Component</code> if it&#8217;s a superclass). The <code>Decorator</code> keeps a reference to a <code>Component</code> for delegation except in the case where we &#8220;decorate&#8221; by customizing the behavior.</p>

<p>By adhering to the <code>Component</code> contract, we are guaranteeing a consistent API and guarding against implementation internals because calling code <strong>will not</strong> and <strong>should not</strong> know if the object is a <code>ConcreteComponent</code> or <code>Decorator</code>. Programming to the interface is the cornerstone of good object-oriented design.</p>

<blockquote>
<p>Some argue that JavaScript is not object-oriented, and while it supports prototypical inheritance instead of classical, objects are still innate to the language. The language supports <a href='https://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming'>polymorphism</a> and that fact that all objects extend <code>Object</code> is sufficient to argue the language is object-oriented as well as functional.</p>
</blockquote>

<h3 id='the_implementation'>The Implementation</h3>

<p>Our solution will use a slight variant of the decorator pattern because JavaScript does not have some classical inheritance concepts such as interfaces or abstract classes. There are many libraries that simulate such constructs, which is beneficial for certain applications, but here we will use the languages basics.</p>

<p><img src='/images/posts/decorator-publication.png' alt='publication' /></p>

<p>The class <code>MedicalPublication</code> and <code>Publication</code> implicitly implement <code>PublicationIF</code>. In this case <code>MedicalPublication</code> acts as the decorator to list the first and last authors as contributors while unchanging other behavior.</p>

<p>Note that <code>MedicalPublication</code> references <code>PublicationIF</code>, and not <code>Publication</code>. By referencing the interface instead of a specific implementation we can arbitrarily nest decorators within one another! (In the coffee shop problem we can create decorators such as <code>WithCream</code>, <code>WithoutCream</code>, and <code>ExtraSugar</code>&#8211;these can be nested to handle any complex order.)</p>

<p>The <code>MedicalPublication</code> class delegates for all standard operations and overrides <code>contributingAuthors()</code> to provide the &#8220;decorated&#8221; behavior.</p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * MedicalPublication constructor.</span>
<span class='cm'> *</span>
<span class='cm'> * @param PublicationIF The publication to decorate.</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>MedicalPublication</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>publication</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_publication</span> <span class='o'>=</span> <span class='nx'>publication</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='nx'>MedicalPublication</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String The publication title.</span>
<span class='cm'>   */</span>
  <span class='nx'>getTitle</span><span class='o'>:</span>  <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_publication</span><span class='p'>.</span><span class='nx'>getTitle</span><span class='p'>();</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return Author[] All authors.</span>
<span class='cm'>   */</span>
  <span class='nx'>getAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_publication</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return int The publication type.</span>
<span class='cm'>   */</span>
  <span class='nx'>getType</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_publication</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>();</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * Returns the first and last authors if multiple authors exists.</span>
<span class='cm'>   * Otherwise, the first author is returned. This is a convention in the</span>
<span class='cm'>   * medical publication domain.</span>
<span class='cm'>   *</span>
<span class='cm'>   * @return Author[] The significant contributors.</span>
<span class='cm'>   */</span>
  <span class='nx'>contributingAuthors</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>

    <span class='kd'>var</span> <span class='nx'>authors</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>getAuthors</span><span class='p'>();</span>

    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&gt;</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// fetch the first and last contributors</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>concat</span><span class='p'>(</span><span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>));</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='c1'>// zero or one contributors</span>
      <span class='k'>return</span> <span class='nx'>authors</span><span class='p'>.</span><span class='nx'>slice</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>},</span>

  <span class='cm'>/**</span>
<span class='cm'>   * @return String the representation of the Publication.</span>
<span class='cm'>   */</span>
  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='s1'>&#39;Decorated - [&#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getType</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;] &quot;&#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>getTitle</span><span class='p'>()</span><span class='o'>+</span><span class='s1'>&#39;&quot; by &#39;</span><span class='o'>+</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>contributingAuthors</span><span class='p'>().</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;, &#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Factory method to instantiate the appropriate PublicationIF implementation.</span>
<span class='cm'> *</span>
<span class='cm'> * @param String The discriminating type on which to select an implementation.</span>
<span class='cm'> * @param String The publication title.</span>
<span class='cm'> * @param Author[] The publication&#39;s authors.</span>
<span class='cm'> * @return PublicationIF The created object.</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>publicationFactory</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>,</span> <span class='nx'>type</span><span class='p'>)</span> <span class='p'>{</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>type</span> <span class='o'>===</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>new</span> <span class='nx'>MedicalPublication</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>Publication</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>,</span> <span class='nx'>type</span><span class='p'>));</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>new</span> <span class='nx'>Publication</span><span class='p'>(</span><span class='nx'>type</span><span class='p'>,</span> <span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>By using the factory method we can safely create an instance of PublicationIF.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>title</span> <span class='o'>=</span> <span class='s1'>&#39;Pancreatic Extracts as a Treatment for Diabetes&#39;</span><span class='p'>;</span>
<span class='kd'>var</span> <span class='nx'>authors</span> <span class='o'>=</span> <span class='p'>[</span><span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Adam&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Thompson&#39;</span><span class='p'>),</span> 
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Robert&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Grace&#39;</span><span class='p'>),</span> 
  <span class='k'>new</span> <span class='nx'>Author</span><span class='p'>(</span><span class='s1'>&#39;Sarah&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Townsend&#39;</span><span class='p'>)];</span>
<span class='kd'>var</span> <span class='nx'>type</span> <span class='o'>=</span> <span class='s1'>&#39;medical&#39;</span><span class='p'>;</span>

<span class='kd'>var</span> <span class='nx'>pub</span> <span class='o'>=</span> <span class='nx'>publicationFactory</span><span class='p'>(</span><span class='nx'>title</span><span class='p'>,</span> <span class='nx'>authors</span><span class='p'>,</span> <span class='nx'>type</span><span class='p'>);</span>

<span class='c1'>// prints: Decorated - [medical] &#39;Pancreatic Extracts as a Treatment of Diabetes&#39; by Adam Thompson, Sarah Townsend</span>
<span class='nx'>alert</span><span class='p'>(</span><span class='nx'>pub</span><span class='p'>);</span>
</code></pre>
</div>
<p>In these examples we are using <code>toString()</code> for brevity and debugging, but now we can create utility classes and methods to print <code>PublicationIF</code> objects for application display.</p>

<p><img src='/images/posts/decorator-printer.png' alt='printer' /></p>

<p>Once the application is modified to expect <code>PublicationIF</code> objects we can accommodate further requirements to handle what constitutes a <a href='https://en.wikipedia.org/wiki/Academic_authorship'>contributing author</a> by adding new decorators. Also, the design is now open for any <code>PublicationIF</code> implementations beyond decorators to fulfill other requirements, which greatly increases the flexibility of the code.</p>

<h3 id='criticisms'>Criticisms</h3>

<p>One criticism is that the decorator must be maintained to adhere to its interface. All code, regardless of design, must be maintained to a degree, but it can be argued that maintaining a design with a clearly stated contract and pre- and post-conditions is much simpler than searching <code>if/else</code> conditions for run-time state and behavior modifications. More importantly, the decorator pattern safeguards calling code written by other developers (or even yourself) by leveraging object-oriented <a href='https://en.wikipedia.org/wiki/Open/closed_principle'>principles</a>.</p>

<p>Another criticism is that decorators must implement all operations defined by a contract to enforce a consistent API. While this can be tedious at times, there are <a href='http://jsclass.jcoglan.com/decorator.html'>libraries</a> and methodologies that can be used with JavaScript&#8217;s dynamic nature to expedite coding. Reflection-like invocation can be used to allay concerns when dealing with a changing API.</p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * Invoke the target method and rely on its pre- and post-conditions.</span>
<span class='cm'> */</span>
<span class='nx'>Decorator</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>someOperation</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_decorated</span><span class='p'>.</span><span class='nx'>someOperation</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_decorated</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
<span class='p'>};</span>

<span class='c1'>// ... or a helper library can automatically wrap the function</span>

<span class='cm'>/**</span>
<span class='cm'> * Dynamic invocation.</span>
<span class='cm'> *</span>
<span class='cm'> * @param Class The class defining the function.</span>
<span class='cm'> * @param String The func to execute.</span>
<span class='cm'> * @param Object The *this* execution context.</span>
<span class='cm'> */</span>
<span class='kd'>function</span> <span class='nx'>wrapper</span><span class='p'>(</span><span class='nx'>klass</span><span class='p'>,</span> <span class='nx'>func</span><span class='p'>,</span> <span class='nx'>context</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>klass</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>[</span><span class='nx'>func</span><span class='p'>].</span><span class='nx'>apply</span><span class='p'>(</span><span class='nx'>context</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
  <span class='p'>};</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The details are up to the developer, but even the most primitive decorator pattern is extremely powerful. The overhead and maintenance for the pattern itself is minimal, especially when compared to that of the opposing solutions.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>The decorator pattern is not flashy, despite its name, nor does it give the developer bragging rights in the &#8220;Look at what I did!&#8221; department. What the decorator does do, however, is correctly encapsulate and modularize your code to make it scalable for future changes. When a new requirement states that a certain publication type must list all authors as contributors, regardless of ordinal rank, you won&#8217;t fret about having to refactor hundreds of lines of code. Instead, you&#8217;ll write a new decorator, drop it into the factory method, and take an extra long lunch because you&#8217;ve earned it.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/05/lispyscript-macros">Tutorial: Writing LispyScript Macros</a></h2>
      <div class="meta">
        <span class="date">05 Oct 2012</span>
        | <span class="author">By Santosh Rajan</span>
        | <span class="comments"><a href="/2012/10/05/lispyscript-macros/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#LispyScript">LispyScript</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#lisp">lisp</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='box'>
  This tutorial is by Santosh Rajan (<a href='https://twitter.com/santoshrajan'>@santoshrajan</a>), the creator of <a href='http://lispyscript.com/'>LispyScript</a> (GitHub: <a href='https://github.com/santoshrajan/lispyscript'>santoshrajan / lispyscript</a>).
</div>
<h3 id='writing_lispyscript_macros'>Writing LispyScript Macros</h3>

<p>Macros are a powerful feature of LispyScript. They are much more powerful than C <code>#define</code> macros. While C <code>#define</code> macros do string substitution, LispyScript macros are <em>code generators</em>.</p>

<p>Functions take values as arguments and return a value. Macros take code as arguments, and then return code. Understanding this difference and its ramifications is the key to writing proper macros.</p>

<p>Functions get evaluated at runtime. Macros get evaluated at compile time, or pre-compile time to be more precise.</p>

<p>So, when should macros be used? When you cannot use a function! There is more to this answer than what is apparent. Consider this piece of code:</p>
<div class='highlight'><pre><code class='text'>(* 2 2)
</code></pre>
</div>
<p>And elsewhere in the program we find this.</p>
<div class='highlight'><pre><code class='text'>(* 4 4)
</code></pre>
</div>
<p>There is a pattern emerging here. In both cases we have the same code <code>*</code>, and a variable &#8211; a number that changes in each instance of the pattern. So we reuse this pattern by writing a function:</p>
<div class='highlight'><pre><code class='text'>(var square
  (function (x)
    (* x x)))
</code></pre>
</div>
<p>Therefore, to reuse a repeating code pattern as a function, the code pattern must meet two conditions:</p>

<ol>
<li>The code must remain the same across every instance of the code pattern.</li>

<li>It is only the data that can change across every instance of the code pattern.</li>
</ol>

<p>Using functions to reuse repeated code patterns has its limitations. You cannot use a function if it is the code part that changes in a repeated code pattern.</p>

<p>Consider the two functions below (str is an expression that adds up given strings):</p>
<div class='highlight'><pre><code class='text'>(var greet
  (function (username)
    (str &quot;Welcome &quot; username)))

(var link
  (function (href text)
    (str &quot;&lt;a href=\&quot;&quot; href &quot;\&quot;&gt;&quot; text &quot;&lt;/a&gt;&quot;)))
</code></pre>
</div>
<p>There is a repeating code pattern here. Given below is the pattern with the parts that change in capitals:</p>
<div class='highlight'><pre><code class='text'>(var NAME
  (function ARGUMENTS
    (str TEMPLATE_STRINGS)))
</code></pre>
</div>
<p>We cannot use a function to reuse this code pattern, because the parts that change are parts of the code.</p>

<p>Functions are about reusing code patterns, where it is only the data that changes.</p>

<p>Macros are about reusing code patterns, where the code can also change.</p>

<p>In LispyScript, we can write a macro to reuse this code pattern. The macro needs a name, let&#8217;s call it <code>template</code> as it happens to be a template compiler:</p>
<div class='highlight'><pre><code class='text'>(macro template (name arguments rest...)
  (var ~name
    (function ~arguments
      (str ~rest...))))
</code></pre>
</div>
<p>Now compare this with the meta code pattern in the previous example. The arguments to this macro are the parts of the code that change &#8211; <code>NAME</code>, <code>ARGUMENTS</code>, <code>TEMPLATE_STRINGS</code> &#8211; these correspond to <code>name</code>, <code>arguments</code> <code>rest..</code> in the macro definition.</p>

<p>Arguments can be dereferenced in the generated code by adding a <code>~</code> to the argument name. <code>rest...</code> is a special argument that represents the rest of the arguments to the macro after the named arguments.</p>

<p>This macro can be used by making a call to <code>template</code>:</p>
<div class='highlight'><pre><code class='text'>(template link (href text) &quot;&lt;a href=\&quot;&quot; href &quot;\&quot;&gt;&quot; text &quot;&lt;/a&gt;&quot;)
</code></pre>
</div>
<p>This code will expand as follows:</p>
<div class='highlight'><pre><code class='text'>(var link
  (function (href text)
    (str &quot;&lt;a href=\&quot;&quot; href &quot;\&quot;&gt;&quot; text &quot;&lt;/a&gt;&quot;)))
</code></pre>
</div>
<p>This expansion happens just before the expanded code is compiled. This is known as the <em>macro expansion phase</em> of the compiler.</p>

<p>Now let&#8217;s try another example. We will write a benchmark macro, which benchmarks a line of code. But first we&#8217;ll write a benchmark function to get a couple of related issues out of the way.</p>
<div class='highlight'><pre><code class='text'>(var benchmark
  (function ()
    (var start (new Date))
    (+ 1 1)
    (var end (new Date))
    (console.log (- end start))))
</code></pre>
</div>
<p>This is not an example that always works. Because JavaScript can only resolve time up to milliseconds, but to benchmark an integer <code>+</code> operation we need a resolution down to nanoseconds.</p>

<p>Furthermore, the function does not scale. We need to benchmark various operations and expressions, and since this involves changes to the above code we need to write a macro. In the macro we print the result of the operation along with the elapsed time:</p>
<div class='highlight'><pre><code class='text'>(macro benchmark (code)
  (do
    (var start (new Date))
    (var result ~code)
    (var end (new Date))
    (console.log &quot;Result: %d, Elapsed: %d&quot; result (- end start)))
</code></pre>
</div>
<p>It can be used like this:</p>
<div class='highlight'><pre><code class='text'>(var a 1)
(var b 2)
(benchmark (+ a b))
</code></pre>
</div>
<p>The result printed to the console should look like the following:</p>
<div class='highlight'><pre><code class='text'>Result: 3, Elapsed: 0
</code></pre>
</div>
<p>Elapsed is <code>0</code> due to the millisecond resolution, but the example seems to run correctly&#8230; until one day someone attempts to do this:</p>
<div class='highlight'><pre><code class='text'>(var start 1)
(var b 2)
(benchmark (+ start b))
</code></pre>
</div>
<p>Running this gives confusing results:</p>
<div class='highlight'><pre><code class='text'>Result: NaN, Elapsed: 1
</code></pre>
</div>
<p>The result is <code>NaN</code>, so something has gone wrong since <code>3</code> was expected. To figure out what&#8217;s going on, let&#8217;s look at the macro expansion:</p>
<div class='highlight'><pre><code class='text'>(var start 1)
(var b 2)
(do
  (var start (new Date))
  (var result (+ start b))
  (var end (new Date))
  (console.log &quot;Result: %d, Elapsed: %d&quot; result (- end start))
</code></pre>
</div>
<p>The user has created a variable <code>start</code>. It so happens that the macro also creates a variable called <code>start</code>. The macro argument <code>code</code> gets dereferenced in the new scope. When <code>(+ start b)</code> got executed the <code>start</code> variable used was the <code>start</code> <em>Date</em> variable created in the macro code. This problem is known as <strong>variable capture</strong>.</p>

<p>When writing macros, you have to be very careful when creating a variable inside a macro. In our <code>template</code> macro example we were not concerned about this problem, because the <code>template</code> macro does not create its own variables.</p>

<p>In LispyScript we get around this problem by following two rules which are specified in the &#8220;guidelines&#8221; section of the document:</p>

<ol>
<li>When writing a LispyScript program, creating a variable name that starts with three underscores is NOT allowed, for example: <code>___varname</code>.</li>

<li>When writing a macro you MUST start a variable name with three underscores if you want to avoid variable capture. There are cases where you want variable capture to happen, in which case you do not need to use the three underscores. For example, when you want the passed code to use a variable defined in the macro.</li>
</ol>

<p>The benchmark macro should be refactored using three underscores:</p>
<div class='highlight'><pre><code class='text'>(macro benchmark (code)
  (do
    (var ___start (new Date))
    (var ___result ~code)
    (var ___end (new Date))
    (console.log &quot;Result: %d, Elapsed: %d&quot; ___result (- ___end ___start)))
</code></pre>
</div>
<h3 id='conclusion'>Conclusion</h3>

<p>Macros are a very powerful feature of LispyScript. It allows you to do some nifty programming, which is otherwise not possible with functions. At the same time we have to be very careful when using macros. Following the LispyScript macro guidelines will ensure your macros behave as expected.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/04/enyo-2">Enyo Tutorial: Part 2</a></h2>
      <div class="meta">
        <span class="date">04 Oct 2012</span>
        | <span class="author">By Robert Kowalski</span>
        | <span class="comments"><a href="/2012/10/04/enyo-2/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#enyo">enyo</a>
          
            <a href="/tags.html#enyo-kowalski">enyo-kowalski</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
        </span>
      </div>
      <div class="preview">
        <p>In my introduction to Enyo, I promised that Enyo is &#8220;very modularized, reusable, and encapsulated&#8221;. Today we&#8217;ll create a reusable component from our monolithic and minimalistic application by refactoring the tip calculator. Afterwards we will style the application to make it ready for app stores and the web.</p>

<p>As mentioned in the previous part of the tutorial, the Enyo style guide suggests using double quotes instead of single quotes. Enyo also uses tabs for indentation. Although I prefer two spaces and single quotes, I will follow these rules during this tutorial.</p>

<p>This tutorial builds on the previous part, which is available here:</p>

<ul>
<li><a href='http://dailyjs.com/2012/09/20/enyo-1/'>Part 1: Introduction and first prototype</a>, source code commit: <a href='https://github.com/robertkowalski/enyo-dailyjs/commit/4f6eb9e3b2371e4d1cce2c865955f30dbee4af66'>4f6eb</a></li>
</ul>

<h3 id='loading_mechanism'>Loading Mechanism</h3>

<p>Enyo is using files called <code>package.js</code> to load dependencies. If you look into the folder <code>source/</code>, which contains the core of the application, then you&#8217;ll find a file named <code>package.js</code> from the bootplate project. Everything in this file will be loaded when the application starts up. Let&#8217;s create a file called with the filename <code>calc.percent.js</code>, and add <code>calc.percent.js</code> to the end of the <code>package.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>enyo</span><span class='p'>.</span><span class='nx'>depends</span><span class='p'>(</span>
  <span class='s2'>&quot;$lib/layout&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;$lib/onyx&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;App.css&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;App.js&quot;</span><span class='p'>,</span>
  <span class='s2'>&quot;calc.percent.js&quot;</span>
<span class='p'>);</span>
</code></pre>
</div>
<h3 id='components'>Components</h3>

<p>Component objects are using events to communicate with their parent kinds. As described in the first part, components can nest other components. It would be nice to split the app into a reusable percent-calculator kind which could be used in other projects.</p>

<h3 id='published_properties'>Published Properties</h3>

<p>The <code>calc.percent.js</code> file should look like the following example &#8211; I&#8217;ll explain it in detail below.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>enyo</span><span class='p'>.</span><span class='nx'>kind</span><span class='p'>({</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;PercentCalculator&#39;</span><span class='p'>,</span>
  <span class='nx'>kind</span><span class='o'>:</span> <span class='nx'>enyo</span><span class='p'>.</span><span class='nx'>Component</span><span class='p'>,</span>
  <span class='nx'>published</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>sum</span><span class='o'>:</span> <span class='mi'>0</span><span class='p'>,</span> <span class='c1'>//optional default values</span>
    <span class='nx'>percent</span><span class='o'>:</span> <span class='mi'>0</span>
  <span class='p'>},</span>
  <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>onCalculated</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span>
  <span class='p'>},</span>
  <span class='nx'>create</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>inherited</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>);</span>
  <span class='p'>},</span>
  <span class='nx'>calculate</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>result</span><span class='p'>;</span>

    <span class='nx'>result</span> <span class='o'>=</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>sum</span> <span class='o'>*</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>percent</span><span class='p'>)</span> <span class='o'>/</span> <span class='mi'>100</span><span class='p'>;</span>

    <span class='k'>this</span><span class='p'>.</span><span class='nx'>doCalculated</span><span class='p'>({</span><span class='nx'>percentValue</span><span class='o'>:</span> <span class='nx'>result</span><span class='p'>});</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Like the previous kind, this component has a name: <code>PercentCalculator</code>. This time the kind is not a control - we have chosen a component with <code>kind: enyo.Component</code>.</p>

<p>The next lines are the published properties of our kind. They can &#8211; but must not &#8211; have a default value, and it&#8217;s <code>0</code> in this example. Enyo automatically creates setters and getters for our exposed properties. We will use the setters from that pair later but in this file we access them with <code>this.sum</code> and <code>this.percent</code>.</p>

<p>I mentioned previously that components are communicating with events. This example registers <code>onCalculated</code>, which is exposed to the public. It can be triggered with <code>this.doCalculated({percentValue: result});</code> in the <code>calculate</code> method. The results are communicated to the parent kind.</p>

<h3 id='refactoring_and_integration'>Refactoring and Integration</h3>

<p>In order to use our kind we have to add the component to our first kind from the file <code>App.js</code>.</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span> <span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;PercentCalculator&quot;</span><span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;percentCalculator&quot;</span><span class='p'>,</span> <span class='nx'>onCalculated</span><span class='o'>:</span> <span class='s2'>&quot;updateControls&quot;</span> <span class='p'>}</span>
</code></pre>
</div>
<p>Every time the event <code>calculated</code> is fired the method <code>updateControls</code> is called. This method is just getting the value and setting the new value of the corresponding DOM node. Here is the snippet:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>updateControls</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>inSource</span><span class='p'>,</span> <span class='nx'>inEvent</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>tipAmount</span><span class='p'>.</span><span class='nx'>setContent</span><span class='p'>(</span><span class='nx'>inEvent</span><span class='p'>.</span><span class='nx'>percentValue</span><span class='p'>);</span>

  <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span> <span class='c1'>// stop bubbling</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Notice the result is available as a property of the second argument: <code>inEvent.percentValue</code>.</p>

<p>The app, however, is not working yet. We have to give the values from the input fields to the component so it&#8217;s able to calculate and pass back the result. I deleted the old <code>calculate</code> method and introduced the method <code>calculateWithComponent</code>. Also, please don&#8217;t forget to update the <code>ontap</code> handler of the button. Here is the method:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>calculateWithComponent</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>inSource</span><span class='p'>,</span> <span class='nx'>inEvent</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>sum</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>sumControl</span><span class='p'>.</span><span class='nx'>hasNode</span><span class='p'>().</span><span class='nx'>value</span><span class='p'>;</span>
  <span class='kd'>var</span> <span class='nx'>percent</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentControl</span><span class='p'>.</span><span class='nx'>hasNode</span><span class='p'>().</span><span class='nx'>value</span><span class='p'>;</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentCalculator</span><span class='p'>.</span><span class='nx'>setSum</span><span class='p'>(</span><span class='nx'>sum</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentCalculator</span><span class='p'>.</span><span class='nx'>setPercent</span><span class='p'>(</span><span class='nx'>percent</span><span class='p'>);</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentCalculator</span><span class='p'>.</span><span class='nx'>calculate</span><span class='p'>();</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>As before, the kind is accessed with <code>this.$</code> and its name. The automatically generated setters are used for the published properties, and afterwards <code>calculate</code> can be called on our kind. At this point the component is passing the calculated result back. There are also <code>change</code>-Handler available for changing properties, but we do not use them here.</p>

<p>Here is the updated kind in full:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>enyo</span><span class='p'>.</span><span class='nx'>kind</span><span class='p'>({</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;App&quot;</span><span class='p'>,</span>
  <span class='nx'>kind</span><span class='o'>:</span> <span class='nx'>enyo</span><span class='p'>.</span><span class='nx'>Control</span><span class='p'>,</span>
  <span class='nx'>style</span><span class='o'>:</span> <span class='s2'>&quot;&quot;</span><span class='p'>,</span>
  <span class='nx'>classes</span><span class='o'>:</span> <span class='s2'>&quot;onyx&quot;</span><span class='p'>,</span>
  <span class='nx'>components</span><span class='o'>:</span> <span class='p'>[</span>
    <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.InputDecorator&quot;</span><span class='p'>,</span> <span class='nx'>components</span><span class='o'>:</span> <span class='p'>[</span>
      <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.Input&quot;</span><span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;sumControl&quot;</span><span class='p'>,</span> <span class='nx'>placeholder</span><span class='o'>:</span> <span class='s2'>&quot;Enter sum&quot;</span><span class='p'>}</span>
    <span class='p'>]},</span>
    <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.InputDecorator&quot;</span><span class='p'>,</span> <span class='nx'>components</span><span class='o'>:</span> <span class='p'>[</span>
      <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.Input&quot;</span><span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;percentControl&quot;</span><span class='p'>,</span> <span class='nx'>placeholder</span><span class='o'>:</span> <span class='s2'>&quot;Enter percent&quot;</span><span class='p'>}</span>
    <span class='p'>]},</span>
    <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.Button&quot;</span><span class='p'>,</span> <span class='nx'>content</span><span class='o'>:</span> <span class='s2'>&quot;Calculate tip&quot;</span><span class='p'>,</span> <span class='nx'>ontap</span><span class='o'>:</span> <span class='s2'>&quot;calculateWithComponent&quot;</span><span class='p'>},</span>
    <span class='p'>{</span><span class='nx'>tag</span><span class='o'>:</span> <span class='s2'>&quot;div&quot;</span><span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;tipAmount&quot;</span><span class='p'>},</span>
    <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;PercentCalculator&quot;</span><span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;percentCalculator&quot;</span><span class='p'>,</span> <span class='nx'>onCalculated</span><span class='o'>:</span> <span class='s2'>&quot;updateControls&quot;</span><span class='p'>}</span>
  <span class='p'>],</span>
  <span class='nx'>create</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>inherited</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>);</span>
  <span class='p'>},</span>
  <span class='nx'>updateControls</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>inSource</span><span class='p'>,</span> <span class='nx'>inEvent</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>tipAmount</span><span class='p'>.</span><span class='nx'>setContent</span><span class='p'>(</span><span class='nx'>inEvent</span><span class='p'>.</span><span class='nx'>percentValue</span><span class='p'>);</span>

    <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span> <span class='c1'>// stop bubbling</span>
  <span class='p'>},</span>
  <span class='nx'>calculateWithComponent</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>inSource</span><span class='p'>,</span> <span class='nx'>inEvent</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>sum</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>sumControl</span><span class='p'>.</span><span class='nx'>hasNode</span><span class='p'>().</span><span class='nx'>value</span><span class='p'>;</span>
    <span class='kd'>var</span> <span class='nx'>percent</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentControl</span><span class='p'>.</span><span class='nx'>hasNode</span><span class='p'>().</span><span class='nx'>value</span><span class='p'>;</span>

    <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentCalculator</span><span class='p'>.</span><span class='nx'>setSum</span><span class='p'>(</span><span class='nx'>sum</span><span class='p'>);</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentCalculator</span><span class='p'>.</span><span class='nx'>setPercent</span><span class='p'>(</span><span class='nx'>percent</span><span class='p'>);</span>

    <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentCalculator</span><span class='p'>.</span><span class='nx'>calculate</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The commit is <a href='https://github.com/robertkowalski/enyo-dailyjs/commit/8f931b8b03b0c53d694038de7d36699bf506b50c'>8f931</a>.</p>

<h3 id='styles'>Styles</h3>

<p>I reduced the styles in the <code>App.css</code> to a simple <code>background-color: #c6c6c6;</code>, and one CSS class:</p>
<div class='highlight'><pre><code class='css'><span class='nc'>.center</span> <span class='p'>{</span>
  <span class='k'>text-align</span><span class='o'>:</span> <span class='k'>center</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Then I changed the kind in our <code>App.js</code> from the basic <code>enyo.Control</code> to the kind <code>enyo.FittableRows</code>. A basic control was a nice choice to show you the basics of Enyo and kinds, but we want to use a more complex one which is provided by the framework.</p>

<p>In commit <a href='https://github.com/robertkowalski/enyo-dailyjs/commit/8bb195945dbee51cd9e9b700cafdeba35c1eca4a'>8bb19</a> I&#8217;ve added an <code>onyx.Toolbar</code> as the first child of the components block:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.Toolbar&quot;</span><span class='p'>,</span> <span class='kr'>class</span><span class='o'>:</span> <span class='s2'>&quot;center&quot;</span><span class='p'>,</span> <span class='nx'>content</span><span class='o'>:</span> <span class='s1'>&#39;Tip calculator&#39;</span><span class='p'>},</span>
</code></pre>
</div>
<p>This will display a bar across the top of the screen (or page), in a similar fashion to the <code>UINavigationBar</code> used in iOS applications. The end result looks something like this:</p>

<p><img src='/images/posts/enyo-calc-part-2.png' alt='Enyo Tip Calc' /></p>

<h3 id='production_build'>Production Build</h3>

<p>You can run <code>deploy.sh</code> in the <code>tools/</code> folder to start a deploy. It will minify and merge the source files of the project. The result will be saved to <code>deploy/</code>, and can be used with Cordova or simply uploaded to a web server.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>You should now have learned the core concepts of Enyo and built a small application. Here is a short summary:</p>

<p><a href='http://dailyjs.com/2012/09/20/enyo-1/'>Part 1</a></p>

<ul>
<li>Concept of <em>kinds</em></li>

<li>Controls, and how to use and when</li>

<li>Events</li>

<li>Getters and setters</li>

<li>Constructors and destructors</li>
</ul>

<p><a href='http://dailyjs.com/2012/10/04/enyo-2/'>Part 2</a></p>

<ul>
<li>Components</li>

<li>Loading mechanism</li>

<li>Published properties</li>

<li>More on getters and setters</li>

<li>Production builds</li>
</ul>

<h3 id='references'>References</h3>

<ul>
<li><a href='http://enyojs.com/'>enyojs.com</a></li>

<li><a href='http://enyojs.com/api/'>Enyo API docs</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/03/node-roundup">Node Roundup: otr, matches.js, mariasql</a></h2>
      <div class="meta">
        <span class="date">03 Oct 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/10/03/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#security">security</a>
          
            <a href="/tags.html#cryptography">cryptography</a>
          
            <a href="/tags.html#mysql">mysql</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='offthe_record_messaging_protocol'>Off-the Record Messaging Protocol</h3>

<p><a href='https://github.com/arlolra/otr'>otr</a> (License: <em>LGPL</em>, npm: <a href='https://npmjs.org/package/otr'>otr</a>) by Arlo Breault is an implementation of an <a href='http://en.wikipedia.org/wiki/Off-the-Record_Messaging'>Off-the Record Messaging Protocol</a>:</p>

<blockquote>
<p>Off-the-Record Messaging, commonly referred to as OTR, is a cryptographic protocol that provides strong encryption for instant messaging conversations. OTR uses a combination of the AES symmetric-key algorithm, the Diffie–Hellman key exchange, and the SHA-1 hash function. In addition to authentication and encryption, OTR provides perfect forward secrecy and malleable encryption.</p>
</blockquote>

<p>It&#8217;s designed to be used in browsers, but can also be used with Node. The readme has details on how to get started with otr, and the author notes that the project has been used by <a href='https://github.com/kaepora/cryptocat'>Cryptocat</a>.</p>

<h3 id='matchesjs'>matches.js</h3>

<p><a href='https://github.com/natefaubion/matches.js'>matches.js</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/matches'>matches</a>) by Nathan Faubion is a pattern matching shorthand library that can create new objects with a convenient wrapper:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>myfn</span> <span class='o'>=</span> <span class='nx'>pattern</span><span class='p'>({</span>
  <span class='c1'>// Null</span>
  <span class='s1'>&#39;null&#39;</span> <span class='o'>:</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{...},</span>

  <span class='c1'>// Undefined</span>
  <span class='s1'>&#39;undefined&#39;</span> <span class='o'>:</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{...},</span>

  <span class='c1'>// Numbers</span>
  <span class='s1'>&#39;42&#39;</span>    <span class='o'>:</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>...</span> <span class='p'>},</span>
  <span class='s1'>&#39;12.6&#39;</span>  <span class='o'>:</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>...</span> <span class='p'>},</span>
  <span class='s1'>&#39;1e+42&#39;</span> <span class='o'>:</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>...</span> <span class='p'>},</span>

  <span class='c1'>// Strings</span>
  <span class='s1'>&#39;&quot;foo&quot;&#39;</span> <span class='o'>:</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>...</span> <span class='p'>},</span>

  <span class='c1'>// Escape sequences must be double escaped.</span>
  <span class='s1'>&#39;&quot;This string \\n matches \\n newlines.&quot;&#39;</span> <span class='o'>:</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>...</span> <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The author has used this library to create <a href='https://github.com/natefaubion/adt.js'>adt.js</a>, which is a library for making pseudo-algebraic types and immutable structures:</p>

<blockquote>
<p>&#8230; I say pseudo because it just generates classes with boilerplate that make them look and work like types in functional languages like Haskell or Scala. It works in the browser or on the server.</p>
</blockquote>

<h3 id='mariasql'>mariasql</h3>

<p><a href='https://github.com/mscdex/node-mariasql'>mariasql</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mariasql'>mariasql</a>) by Brian White is a high performance, single-threaded, asynchronous, cross-platform MySQL driver. It&#8217;s based on libmariadbclient, and the author notes that it works more like a typical Node module:</p>

<blockquote>
<p>This module strives to keep with the &#8220;node way&#8221; by never buffering incoming rows. Also, to keep things simple, all column values are returned as strings (except MySQL NULLs are casted to JavaScript nulls).</p>
</blockquote>

<p>Brian has posted benchmarks that compare various SQL operations across several client libraries, including C and PHP-based samples: <a href='http://mscdex.github.com/node-mysql-benchmarks/'>MySQL client library benchmarks</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/02/jquery-roundup">jQuery Roundup: jQuery UI 1.8.24, HTML5 Google Authenticator, pXY.js</a></h2>
      <div class="meta">
        <span class="date">02 Oct 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/10/02/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jquery-ui">jquery-ui</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#Canvas">Canvas</a>
          
            <a href="/tags.html#security">security</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_ui_1824'>jQuery UI 1.8.24</h3>

<p><a href='http://blog.jqueryui.com/2012/09/jquery-ui-1-8-24/'>jQuery UI 1.8.24</a> is out, which is a maintenance release:</p>

<blockquote>
<p>This update brings bug fixes for Datepicker, Draggable, Droppable and Sortable, as well as adding support for jQuery 1.8.2. This is likely to be the last release in the 1.8 family; you can expect 1.9.0 very soon. For the full list of changes, see the changelog.</p>
</blockquote>

<p>The jQuery UI 1.9 release candidates have been around for a while now. Check out the <a href='https://github.com/jquery/jquery-ui/tree/1.9.0-rc.1'>1.9 RC tags</a> on GitHub for more.</p>

<h3 id='html5_google_authenticator'>HTML5 Google Authenticator</h3>

<p>I use <a href='http://support.google.com/a/bin/answer.py?hl=en&amp;hlrm=en&amp;answer=1037451'>Google Authenticator</a>, which is a two-step verification implementation. Google have released corresponding mobile apps which support multiple credentials. This means third-party services can plug into Google Authenticator, so users only need one app to manage all of their credentials. This works because Google Authenticator is built on open standards, and uses the <a href='http://tools.ietf.org/id/draft-mraihi-totp-timebased-06.html'>Time-based One-time Password algorithm</a>.</p>

<p>The TOPT algorithm has already been implemented in <a href='http://blog.tinisles.com/2011/10/google-authenticator-one-time-password-algorithm-in-javascript/'>JavaScript back in 2011 by Russ Sayers</a>:</p>

<blockquote>
<p>Turns out the algorithm used to generate the OTPs is an open standard. When you set-up an account in the smartphone app you are storing a key that&#8217;s used to create a HMAC of the current time.</p>
</blockquote>

<p>This has now been ported to a polished <a href='https://github.com/gbraad/html5-google-authenticator'>HTML5 Google Authenticator</a> project, built with jQuery Mobile by Gerard Braad. He&#8217;s also deployed a demo version at <a href='http://gauth.apps.gbraad.nl/'>gauth.apps.gbraad.nl</a>.</p>

<p>Cryptography and security in client-side code will always be a tricky subject, but hopefully this kind of project will help demystify two-factor authentication and encourage more web application authors to offer it to those of us who are interested in it.</p>

<h3 id='pxyjs'>pXY.js</h3>

<p><a href='http://o-0.me/pXY/'>pXY.js</a> (GitHub: <a href='https://github.com/leeoniya/pXY.js'>leeoniya / pXY.js</a>, License: <em>MIT</em>) by Leon Sorokin is an API for analysing the pixels in a <code>Canvas</code> elements. The author suggests using it as an algorithm visualisation tool for problems relating to OCR segmentation and document feature extraction.</p>

<p>The documentation has runnable examples of the major API features. For example, the <a href='http://o-0.me/pXY/#scanning'>Scanning pXY documentation</a> shows how images can be scanned using the eight possible bidirectional scan patterns.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/10/01/js-for-node">JavaScript for Node Part 1: Enumeration</a></h2>
      <div class="meta">
        <span class="date">01 Oct 2012</span>
        | <span class="author">By Nathan Sweet</span>
        | <span class="comments"><a href="/2012/10/01/js-for-node/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#Enumeration">Enumeration</a>
          
            <a href="/tags.html#ES3">ES3</a>
          
            <a href="/tags.html#ES5">ES5</a>
          
            <a href="/tags.html#benchmarking">benchmarking</a>
          
            <a href="/tags.html#performance">performance</a>
          
            <a href="/tags.html#maintainability">maintainability</a>
          
        </span>
      </div>
      <div class="preview">
        <p>JavaScript developers have been accustomed to a very scattered and incoherent API (the DOM) for some time. As a result, some of JavaScript&#8217;s most common patterns are pretty weird and unnecessary when programming for a unified and coherent API like Node. It can be easy to forget that the entire ES5 specification is available to you, but there are some standard patterns that deserve to be rethought because of ES5&#8217;s newer features.</p>

<h3 id='objects_in_es5'>Objects in ES5</h3>

<p>Since no object in JavaScript can have identical same-tier keys, all objects can be thought of as being hash tables. Indeed, V8 implements a <a href='https://github.com/v8/v8/blob/master/src/objects.cc#L3494'>hash function</a> for object keys. This important concept did not go unnoticed in the ES5 draft and so the method <code>Object.keys</code> was created to extract the internal associative array of any object and return it as a JavaScript Array. In layman&#8217;s terms, this means that <code>Object.keys</code> returns only the keys that belong to that object and NOT any properties that it may have inherited. This is a powerful and useful construct that can be utilized in Node when enumerating over an object.</p>

<h3 id='the_old_way'>The Old Way</h3>

<p>Chances are you have run into the following looping pattern:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>key</span><span class='p'>;</span>
<span class='k'>for</span> <span class='p'>(</span><span class='nx'>key</span> <span class='k'>in</span> <span class='nx'>obj</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>obj</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span>
    <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>];</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This was the only way to traverse an object in ES3 without going up an object&#8217;s prototype chain.</p>

<h3 id='a_better_way'>A Better Way</h3>

<p>In ES5 there is a better approach. Given that we can simply get the keys of an object and put them into an array, we can loop over an object, but only at the cost of looping over an array. First consider the following:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>keys</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>keys</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>),</span> <span class='nx'>i</span><span class='p'>,</span> <span class='nx'>l</span><span class='p'>;</span>

<span class='k'>for</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>,</span> <span class='nx'>l</span> <span class='o'>=</span> <span class='nx'>keys</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>l</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span>
  <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>keys</span><span class='p'>[</span><span class='nx'>i</span><span class='p'>]];</span>
</code></pre>
</div>
<p>This is usually the fastest way of looping over an object in ES5 (at least in V8). However, this method has some drawbacks. If new variables are needed to make calculations, this approach starts to feel overly verbose. Consider the following:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>calculateAngularDistanceOfObject</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>obj</span> <span class='o'>!==</span> <span class='s1'>&#39;object&#39;</span><span class='p'>)</span> <span class='k'>return</span><span class='p'>;</span>
  <span class='kd'>var</span> <span class='nx'>keys</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>keys</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>),</span>
    <span class='p'>,</span> <span class='nx'>EARTH_RADIUS</span> <span class='o'>=</span> <span class='mi'>3959</span>
    <span class='p'>,</span> <span class='nx'>RADIAN_CONST</span> <span class='o'>=</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>PI</span> <span class='o'>/</span> <span class='mi'>180</span>
    <span class='p'>,</span> <span class='nx'>deltaLat</span>
    <span class='p'>,</span> <span class='nx'>deltLng</span>
    <span class='p'>,</span> <span class='nx'>halfTheSquareChord</span>
    <span class='p'>,</span> <span class='nx'>angularDistanceRad</span>
    <span class='p'>,</span> <span class='nx'>temp</span>
    <span class='p'>,</span> <span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>,</span> <span class='nx'>i</span><span class='p'>,</span> <span class='nx'>l</span>
    <span class='p'>;</span>

  <span class='k'>for</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>,</span> <span class='nx'>l</span> <span class='o'>=</span> <span class='nx'>keys</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>l</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>temp</span> <span class='o'>=</span> <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>keys</span><span class='p'>[</span><span class='nx'>i</span><span class='p'>]];</span>
    <span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>temp</span><span class='p'>.</span><span class='nx'>a</span><span class='p'>;</span>
    <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>temp</span><span class='p'>.</span><span class='nx'>b</span><span class='p'>;</span>
    <span class='nx'>deltaLat</span> <span class='o'>=</span> <span class='nx'>a</span><span class='p'>.</span><span class='nx'>subLat</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>)</span> <span class='o'>*</span> <span class='nx'>RADIAN_CONST</span><span class='p'>;</span>
    <span class='nx'>deltaLng</span> <span class='o'>=</span> <span class='nx'>a</span><span class='p'>.</span><span class='nx'>subLng</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>)</span> <span class='o'>*</span> <span class='nx'>RADIAN_CONST</span><span class='p'>;</span>
    <span class='nx'>halfTheSquareChord</span> <span class='o'>=</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>pow</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sin</span><span class='p'>(</span><span class='nx'>deltaLat</span> <span class='o'>/</span> <span class='mi'>2</span><span class='p'>),</span> <span class='mi'>2</span><span class='p'>)</span> <span class='o'>+</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>pow</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sin</span><span class='p'>(</span><span class='nx'>deltaLng</span> <span class='o'>/</span> <span class='mi'>2</span><span class='p'>),</span> <span class='mi'>2</span><span class='p'>)</span> <span class='o'>*</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>cos</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>.</span><span class='nx'>lat</span> <span class='o'>*</span> <span class='nx'>RADIAN_CONST</span><span class='p'>)</span> <span class='o'>*</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>cos</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>.</span><span class='nx'>lat</span> <span class='o'>*</span> <span class='nx'>RADIAN_CONST</span><span class='p'>);</span>
    <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>keys</span><span class='p'>[</span><span class='nx'>i</span><span class='p'>]].</span><span class='nx'>angularDistance</span> <span class='o'>=</span> <span class='mi'>2</span> <span class='o'>*</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>atan2</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sqrt</span><span class='p'>(</span><span class='nx'>halfTheSquareChord</span><span class='p'>),</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sqrt</span><span class='p'>(</span><span class='mi'>1</span> <span class='o'>-</span> <span class='nx'>halfTheSquareChord</span><span class='p'>));</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='an_even_better_way'>An Even Better Way</h3>

<p>In situations like this, instead of looping over the array of keys using Array’s native <code>forEach</code> method will allow us to create a new scope for the variables we are working with. This will allow us to do our processing in a more encapsulated manner:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>calculateAngularDistanceOfObject</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>obj</span> <span class='o'>!==</span> <span class='s1'>&#39;object&#39;</span><span class='p'>)</span> <span class='k'>return</span><span class='p'>;</span>

  <span class='kd'>var</span> <span class='nx'>EARTH_RADIUS</span> <span class='o'>=</span> <span class='mi'>3959</span>
    <span class='p'>,</span> <span class='nx'>RADIAN_CONST</span> <span class='o'>=</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>PI</span> <span class='o'>/</span> <span class='mi'>180</span><span class='p'>;</span>

  <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>keys</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>).</span><span class='nx'>forEach</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>temp</span> <span class='o'>=</span> <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span>
      <span class='p'>,</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>temp</span><span class='p'>.</span><span class='nx'>a</span>
      <span class='p'>,</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>temp</span><span class='p'>.</span><span class='nx'>b</span>
      <span class='p'>,</span> <span class='nx'>deltaLat</span> <span class='o'>=</span> <span class='nx'>a</span><span class='p'>.</span><span class='nx'>subLat</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>)</span> <span class='o'>*</span> <span class='nx'>RADIAN_CONST</span>
      <span class='p'>,</span> <span class='nx'>deltaLng</span> <span class='o'>=</span> <span class='nx'>a</span><span class='p'>.</span><span class='nx'>subLng</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>)</span> <span class='o'>*</span> <span class='nx'>RADIAN_CONST</span><span class='p'>;</span>

    <span class='nx'>halfTheSquareChord</span> <span class='o'>=</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>pow</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sin</span><span class='p'>(</span><span class='nx'>deltaLat</span> <span class='o'>/</span> <span class='mi'>2</span><span class='p'>),</span> <span class='mi'>2</span><span class='p'>)</span> <span class='o'>+</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>pow</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sin</span><span class='p'>(</span><span class='nx'>deltaLng</span> <span class='o'>/</span> <span class='mi'>2</span><span class='p'>),</span> <span class='mi'>2</span><span class='p'>)</span> <span class='o'>*</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>cos</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>.</span><span class='nx'>lat</span> <span class='o'>*</span> <span class='nx'>RADIAN_CONST</span><span class='p'>)</span> <span class='o'>*</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>cos</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>.</span><span class='nx'>lat</span> <span class='o'>*</span> <span class='nx'>RADIAN_CONST</span><span class='p'>);</span>
    <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>].</span><span class='nx'>angularDistance</span> <span class='o'>=</span>  <span class='mi'>2</span> <span class='o'>*</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>atan2</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sqrt</span><span class='p'>(</span><span class='nx'>halfTheSquareChord</span><span class='p'>),</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sqrt</span><span class='p'>(</span><span class='mi'>1</span> <span class='o'>-</span> <span class='nx'>halfTheSquareChord</span><span class='p'>));</span>
  <span class='p'>});</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='benchmarking'>Benchmarking</h3>

<p>Choosing the right pattern depends on balancing maintainability with performance. Of the two patterns, <code>forEach</code> is generally considered more readable. In general, iterating over large arrays will generally perform worse with <code>forEach</code> (although better than the old ES3 way), but it&#8217;s important to correctly benchmark code before making a decision.</p>

<p>One popular solution for Node is <a href='https://github.com/isaacs/node-bench'>node-bench</a> (npm: <a href='https://npmjs.org/package/bench'>bench</a>) written by Isaac Schlueter. After installing it here is something to start with:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>bench</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;bench&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>obj</span> <span class='o'>=</span> <span class='p'>{</span> <span class='nx'>zero</span><span class='o'>:</span> <span class='mi'>0</span><span class='p'>,</span> <span class='nx'>one</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span> <span class='nx'>two</span><span class='o'>:</span> <span class='mi'>2</span><span class='p'>,</span> <span class='nx'>three</span><span class='o'>:</span> <span class='mi'>3</span><span class='p'>,</span> <span class='nx'>four</span><span class='o'>:</span> <span class='mi'>4</span><span class='p'>,</span> <span class='nx'>five</span><span class='o'>:</span> <span class='mi'>5</span><span class='p'>,</span> <span class='nx'>six</span><span class='o'>:</span> <span class='mi'>6</span><span class='p'>,</span> <span class='nx'>seven</span><span class='o'>:</span> <span class='mi'>7</span><span class='p'>,</span> <span class='nx'>eight</span><span class='o'>:</span> <span class='mi'>8</span><span class='p'>,</span> <span class='nx'>nine</span><span class='o'>:</span> <span class='mi'>9</span> <span class='p'>};</span>

<span class='c1'>// This is to simulate the object having non-enumerable properties</span>
<span class='nb'>Object</span><span class='p'>.</span><span class='nx'>defineProperty</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>,</span> <span class='s1'>&#39;z&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>value</span><span class='o'>:</span> <span class='mi'>26</span><span class='p'>,</span> <span class='nx'>enumerable</span><span class='o'>:</span> <span class='kc'>false</span> <span class='p'>});</span>

<span class='nx'>exports</span><span class='p'>.</span><span class='nx'>compare</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='s1'>&#39;old way&#39;</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>name</span> <span class='k'>in</span> <span class='nx'>obj</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>obj</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>))</span>
        <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>name</span><span class='p'>];</span>
    <span class='p'>}</span>
  <span class='p'>},</span>

  <span class='s1'>&#39;loop array&#39;</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>keys</span> <span class='o'>=</span> <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>keys</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>)</span>
      <span class='p'>,</span> <span class='nx'>i</span>
      <span class='p'>,</span> <span class='nx'>l</span><span class='p'>;</span>

    <span class='k'>for</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>,</span> <span class='nx'>l</span> <span class='o'>=</span> <span class='nx'>keys</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='nx'>l</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span>
      <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>keys</span><span class='p'>[</span><span class='nx'>i</span><span class='p'>]];</span>
  <span class='p'>},</span>

  <span class='s1'>&#39;foreach loop&#39;</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nb'>Object</span><span class='p'>.</span><span class='nx'>keys</span><span class='p'>(</span><span class='nx'>obj</span><span class='p'>).</span><span class='nx'>forEach</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>obj</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>];</span>
    <span class='p'>});</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='c1'>// This is number of iterations on each test we want to run</span>
<span class='nx'>bench</span><span class='p'>.</span><span class='nx'>COMPARE_COUNT</span> <span class='o'>=</span> <span class='mi'>8</span><span class='p'>;</span>
<span class='nx'>bench</span><span class='p'>.</span><span class='nx'>runMain</span><span class='p'>();</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/28/chromanope-tres-innovate">XLSX.js, Tres, ChromaNope</a></h2>
      <div class="meta">
        <span class="date">28 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/28/chromanope-tres-innovate/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#mobile">mobile</a>
          
            <a href="/tags.html#spreadsheets">spreadsheets</a>
          
            <a href="/tags.html#usability">usability</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='xlsxjs'>XLSX.js</h3>

<p><a href='http://blog.innovatejs.com/?page_id=7'>XLSX.js</a> (GitHub: <a href='https://github.com/stephen-hardy/xlsx.js'>stephen-hardy / xlsx.js</a>, License: <em>Microsoft Office Extensible File License</em>) by Stephen Hardy can read and write Excel-compatible XLSX files. It converts base64 strings into object representations of XLSX spreadsheets, without using ActiveX.</p>

<p>It&#8217;s built using <a href='http://stuartk.com/jszip/'>JSZip</a>, and will generate <code>data:</code> URIs with a base64 encoded string that contains the spreadsheet&#8217;s XML.</p>

<h3 id='tres'>Tres</h3>

<p><img src='/images/posts/tres.png' alt='Tres' /></p>

<p><a href='http://tres.io/'>Tres</a> (GitHub: <a href='https://github.com/juliocesar/tres'>juliocesar / tres</a>, License: <em>MIT</em>) by Julio Cesar Ody is a mobile framework based on Backbone.js. It provides some convenience classes for working with touch-based gestures and the wide variety of mobile device resolutions, and enough CSS and icons to jump-start development.</p>

<p>Like Backbone.js, Tres has its roots in Rails, so initial versions aim to provide interfaces that work well with Ruby-based projects. This includes console-based tools for generating stub files.</p>

<h3 id='chromanope'>ChromaNope</h3>

<p><img src='/images/posts/chromanope.png' alt='ChromaNope' /></p>

<p><a href='http://chromanope.com/'>ChromaNope</a> by <a href='http://inkspeck.com/'>Kris Hedges</a> is a web service designed to illustrate the effects of various forms of colour blindness. It uses Node and PhantomJS to render any web page against the equivalent protanope, deuteranope, and tritanope version. Definitions of these terms can be found on the <a href='http://en.wikipedia.org/wiki/Protanope'>Wikipedia Color blindness</a> page.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/27/truth-about-event-loops">The Truth About Event Loops</a></h2>
      <div class="meta">
        <span class="date">27 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/27/truth-about-event-loops/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#sponsored-content">sponsored-content</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='sponsored-content'>
  <p><a href='/sponsored-content.html' class='label'>Sponsored Content</a> This post is about a commercial product that we think will appeal to DailyJS readers.</p>
</div>
<p><img src='/images/posts/thetruthaboutevents.png' alt='The Truth About Event Loops' /></p>

<p><a href='http://truthabouteventloops.com/'>The Truth About Event Loops</a> is an online masterclass by <a href='http://truthabouteventloops.com/'>Marc-André Cournoyer</a>, the creator of the <a href='http://code.macournoyer.com/thin/'>Thin</a> web server used by Apple, CloudFoundry, and Heroku. Each class is limited to 25 people, and includes eight hours of content, downloadable recordings, cheatsheets, exercises, reusable source code, and a copy of <a href='http://createyourproglang.com/'>Create Your Programming Language</a>. The class is priced at $529 CAD, but there are early bird tickets for $479 CAD which is around $488 USD.</p>

<p>Classes last for two days, and the next will be held on October 23rd and 24th at 9AM-1PM ET &#8211; keep in mind the time zone if you&#8217;re booking from outside Canada!</p>

<p>By taking part in this class, you&#8217;ll learn the following:</p>

<ul>
<li>Guidelines for evented I/O</li>

<li>Why and when asynchronous I/O is faster</li>

<li>How an event loop works, by building one from scratch</li>

<li>The system calls at the core of every server</li>

<li>How to write the fastest network applications around</li>

<li>Ways to use your machine&#8217;s resources to the maximum</li>
</ul>

<p>The aim is to allow you to finally master your web stack from top to bottom!</p>

<p>To give us a taste of the class, Marc has written a tutorial all about the Node event loop.</p>

<h3 id='the_heart_of_the_node_event_loop'>The Heart of the Node Event Loop</h3>

<p>I am a big believer in mastering your tools to become a better developer. And the best way to master your tools is to understand how they are made.</p>

<p>Do you know what&#8217;s happening inside Node?</p>

<p>There&#8217;s an event loop. So there must be a loop somewhere, right? A loop handling events. Let&#8217;s take a look&#8230;</p>

<h3 id='the_loop'>The Loop</h3>

<p>Event loops like the one in Node are designed to react to I/O events. This could be an incoming connection, data arriving on a socket, etc. What&#8217;s more, it must react to these events extremely quickly. Like most things in software, the simplest design is usually the fastest. And event loops are usually very simple.</p>

<p>First, it consists of an endless loop:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>while</span> <span class='p'>(</span><span class='kc'>true</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='p'>...</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Everything will happen in that loop. All of your Node programs will be running inside that loop. Which is similar to the loop you&#8217;ll find in virtual machines and emulators, where an actual processor is simulated instead.</p>

<h3 id='a_turn_in_the_loop'>A Turn in the Loop</h3>

<p>Somewhere in the loop, your process will wait for I/O events to happen. Luckily, most operating systems come with a function that allows us to do just that. Several options exist, such as <code>kqueue</code> on Mac OS, <code>epoll</code> on Linux. The most portable (but slowest) one is <code>select</code>. For more on this, see <a href='http://www.kernel.org/doc/man-pages/online/pages/man2/select.2.html'>select (2)</a>.</p>

<p><code>select</code> watches a bunch of I/O objects (files, sockets) and lets you know when something happens. It looks something like this:</p>
<div class='highlight'><pre><code class='text'>while (true) { // That&#39;s our loop
  events = select(&lt;I/O objects to watch&gt;)
}
</code></pre>
</div>
<h3 id='react'>React</h3>

<p>At this point in the loop, we know an event has occurred. We must react to those events. In Node and many other event-based systems, this is done via callbacks.</p>

<p>In your Node program, you&#8217;ll define callbacks like so:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>object</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;read&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='p'>...</span> <span class='p'>})</span>
</code></pre>
</div>
<p>This will register the callback inside the event loop, so that it knows what to do when this event happens. Introducing that in our loop, we&#8217;ll end up with the following:</p>
<div class='highlight'><pre><code class='text'>while (true) {
  var events = select(&lt;I/O objects to watch&gt;)
  
  events.forEach(function(event) {
    var callback = findCallbackForEvent(event)
    callback() // This calls the callback function
  });
}
</code></pre>
</div>
<p>After we&#8217;re done executing all of the callbacks, we&#8217;re ready for another turn in the loop &#8211; it&#8217;ll patiently wait for other I/O events to happen.</p>

<h3 id='but_theres_more'>But There&#8217;s More!</h3>

<p>This is a simplification of how things work internally. However, even if the Node event loop is a little more complex than that, the structure is the same. It&#8217;s still a loop using <code>select</code> (or a variation), and triggering callbacks.</p>

<p>If you&#8217;d like to dive deeper into event loops and how it works in Node, and how other features such as <code>setTimeout</code> are implemented, then <a href='http://truthabouteventloops.com/'>join the next edition of my online class</a>.</p>

<p>Everything is online. You can ask questions. You&#8217;ll get exercises. And you&#8217;ll also get recordings of the class to watch again at your leisure.</p>

<p>The class already helped a number of developers master Node. Here&#8217;s what one of them had to say:</p>

<blockquote>
<p>The class was paced excellently. Overall, this subject matter is complicated — but Marc walks through the material step-by-step and it&#8217;s straightforward to follow along. I&#8217;ve learned a great deal about how Evented I/O systems work, how they&#8217;re built and when they might be most appropriate (as well as when they&#8217;re not!)</p>
</blockquote>
<em>- Tom Buchok</em>
<p>The previous edition was such a great success, it sold out in just a few days. So if you&#8217;re interested, book now!</p>

<p><a href='http://truthabouteventloops.com/'>truthabouteventloops.com</a></p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/26/node-roundup">Node Roundup: 0.8.10-11, Cabinet, Node Si</a></h2>
      <div class="meta">
        <span class="date">26 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/26/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='0810'>0.8.10</h3>

<p>Node 0.8 releases are still coming thick and fast, with the release of <a href='http://blog.nodejs.org/2012/09/25/node-v0-8-10-stable/'>0.8.10</a> this week. On average the 0.8 branch has seen approximately 9 days between releases, with an extended summer holiday period of 20 days in August and September.</p>

<p>This version has a few <code>fs</code> fixes by Ben Noordhuis, although he&#8217;s already cited an <a href='https://groups.google.com/d/msg/nodejs/udqSi9liP2o/t2kUFB73OukJ'>issue in fs.stat()</a> so he&#8217;s recommending holding off for 0.8.11 which should be released later this week.</p>

<h3 id='cabinet'>Cabinet</h3>

<p><a href='OptimalBits/cabinet'>Cabinet</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/cabinet'>cabinet</a>) by Manuel Astudillo is an alternative to <a href='http://extjs.github.com/Connect/staticProvider.html'>Connect&#8217;s static middleware</a>. The changes from TJ&#8217;s original module are as follows:</p>

<ul>
<li>Memory-based cache, based on <a href='http://nodejs.org/docs/latest/api/all.html#all_fs_watch_filename_options_listener'>fs.watch</a></li>

<li>Automatic asset compilation and minification</li>

<li>gzip</li>

<li>Support for &#8220;virtual&#8221; files, including cache manifests</li>
</ul>

<p>The API is compatible with Connect and Express middleware, but there are additional options:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>cabinet</span><span class='p'>(</span><span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/static&#39;</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>coffee</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span>
  <span class='nx'>gzip</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span>

  <span class='nx'>less</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='c1'>// Specify search paths for @import directives</span>
    <span class='nx'>paths</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;.&#39;</span><span class='p'>,</span><span class='nx'>__dirname</span> <span class='o'>+</span> <span class='s1'>&#39;/static/stylesheets&#39;</span><span class='p'>]</span>
  <span class='p'>},</span>

  <span class='nx'>cache</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>maxSize</span><span class='o'>:</span> <span class='mi'>1024</span><span class='p'>,</span> <span class='nx'>maxObjects</span><span class='o'>:</span><span class='mi'>256</span> <span class='p'>}</span>
<span class='p'>}));</span>
</code></pre>
</div>
<p>The project comes with Mocha tests, and additional options are documented in the readme file.</p>

<h3 id='node_si'>Node Si</h3>

<p><a href='https://github.com/MichalCz/node-si'>Node Si</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/si'>si</a>) by Michał Czapracki is a binary prefix number parser and formatter module. It can be used to format numbers like <code>10000000</code> as <code>10M</code>, or <code>10gb</code> as <code>1e10</code>.</p>

<p>It&#8217;s currently a simple module, but the author plans on adding IEC compliant binary multipliers like &#8216;MiB&#8217;, case sensitive formats, and fractional SI multipliers.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/25/jquery-roundup">jQuery Roundup: 1.8.2, jQuery UK, JavaScript Conference 2012</a></h2>
      <div class="meta">
        <span class="date">25 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/25/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#events">events</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_182'>jQuery 1.8.2</h3>

<p><a href='http://blog.jquery.com/2012/09/20/jquery-1-8-2-released/'>jQuery 1.8.2</a> is out, and new users of the 1.8 line are advised to read the jQuery Blog posts for <a href='http://blog.jquery.com/2012/08/09/jquery-1-8-released/'>1.8</a> and <a href='http://blog.jquery.com/2012/08/30/jquery-1-8-1-released/'>1.8.1</a> before upgrading. This version adds a lot of fixes to the selector engine&#8217;s pseudo class handling, including <code>:first</code>, <code>:last</code>, <code>:nth-child</code>, <code>:not</code>, and <code>:contains</code>.</p>

<h3 id='jquery_uk'>jQuery UK</h3>

<p><a href='http://blog.jquery.com/2012/09/19/jquery-uk-2013/'>jQuery UK 2013</a> has been announced for the 19th of April in Oxford. Early bird ticket will be &#163;160, but there are also &#8216;blind bird&#8217; tickets available for &#163;130.</p>

<p>To apply to speak at the conference, <a href='https://jqueryuk2013.busyconf.com/proposals/new'>complete the proposal form</a>. Speakers can also be suggested by the community: <a href='https://docs.google.com/spreadsheet/viewform?formkey=dC14WVhfSjdBMTU0ZUNYR2xpZVdzc3c6MQ#gid=0'>jQuery 2013 - Suggested Speakers</a>.</p>

<h3 id='javascript_conference_2012'>JavaScript Conference 2012</h3>

<p>While we&#8217;re on the topic of conferences, <a href='http://www.javascript-conference.com/'>JavaScript Conference 2012</a> takes place on the 15th and 16th of October 2012 in Düsseldorf. There are several tiers of tickets available, and the main conference ticket costs &#8364;590.</p>

<p>There&#8217;s a talk on jQuery Mobile and a few on Sencha&#8217;s various technologies. I also noticed a Backbone.js talk, and one on Node as well. The <a href='http://www.javascript-conference.com/speakers'>speakers page</a> has details on all of the talks and workshops.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/24/linkedhashmap">Linking the Hash Map</a></h2>
      <div class="meta">
        <span class="date">24 Sep 2012</span>
        | <span class="author">By Justin Naifeh</span>
        | <span class="comments"><a href="/2012/09/24/linkedhashmap/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#data structures">data structures</a>
          
            <a href="/tags.html#linked hash map">linked hash map</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='the_hashmap'>The Hashmap</h3>

<p>The <a href='https://en.wikipedia.org/wiki/Hashmap'>hash map</a> is a classic and indispensable data structure in application programming. It is so ubiquitous that almost every modern language supports it either with a library, or by baking the functionality into the syntax itself. Hash maps are often implemented as an <a href='http://www.quirksmode.org/js/associative.html'>associative array</a>.</p>

<p>A hash map provides constant-time access to a value via a unique key. The most common methodology in JavaScript is to use an object literal as a hash map.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='p'>{};</span>

<span class='c1'>// dot notation</span>
<span class='nx'>map</span><span class='p'>.</span><span class='nx'>foo</span> <span class='o'>=</span> <span class='s2'>&quot;bar&quot;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>.</span><span class='nx'>foo</span><span class='p'>);</span> <span class='c1'>// &quot;bar&quot;</span>

<span class='c1'>// bracket notation</span>
<span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;foo&quot;</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;bar&quot;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;foo&quot;</span><span class='p'>]);</span> <span class='c1'>// &quot;bar&quot;</span>

<span class='c1'>// mix and match</span>
<span class='nx'>map</span><span class='p'>.</span><span class='nx'>foo</span> <span class='o'>=</span> <span class='s2'>&quot;bar&quot;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;foo&quot;</span><span class='p'>]);</span> <span class='c1'>// &quot;bar&quot;</span>
</code></pre>
</div>
<p>In this example, the string <code>&quot;bar&quot;</code> is the value assigned to the object property <code>foo</code>. Notice that treating an object literal like a hash map is the same syntax as normal property access and manipulation; we can leverage the language itself as a data structure. Because there isn&#8217;t native hash code support in JavaScript, the <code>Object.prototype.toString()</code> method is invoked on the key to create the property name.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='p'>{};</span>
  
<span class='nx'>map</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;one&quot;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span> <span class='o'>===</span> <span class='s2'>&quot;one&quot;</span><span class='p'>);</span> <span class='c1'>// true</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;1&quot;</span><span class='p'>]</span> <span class='o'>===</span> <span class='s2'>&quot;one&quot;</span><span class='p'>);</span> <span class='c1'>// true</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[(</span><span class='mi'>1</span><span class='p'>).</span><span class='nx'>toString</span><span class='p'>()]</span> <span class='o'>===</span> <span class='s2'>&quot;one&quot;</span><span class='p'>);</span> <span class='c1'>// true</span>
</code></pre>
</div>
<p>While object literals suffice for basic hash map uses like caching, there are many operations that require boilerplate code such as listing all values in a hash map:</p>
<div class='highlight'><pre><code class='javascript'> 
<span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='p'>{};</span>

<span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;key1&quot;</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;one&quot;</span><span class='p'>;</span>
<span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;key2&quot;</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;two&quot;</span><span class='p'>;</span>
<span class='nx'>map</span><span class='p'>[</span><span class='s2'>&quot;key3&quot;</span><span class='p'>]</span> <span class='o'>=</span> <span class='s2'>&quot;three&quot;</span><span class='p'>;</span>

<span class='c1'>// get all values</span>
<span class='kd'>var</span> <span class='nx'>values</span> <span class='o'>=</span> <span class='p'>[];</span>
<span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='nx'>map</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='nx'>values</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]);</span>
  <span class='p'>}</span>
<span class='p'>}</span>

<span class='c1'>// the key order is not guaranteed with a basic hash map</span>
<span class='c1'>// and each browser might have different implementations</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>values</span><span class='p'>.</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;,&#39;</span><span class='p'>));</span> <span class='c1'>// &quot;two,three,one&quot;</span>
</code></pre>
</div>
<p>To rescue ourselves from reinventing the wheel, it is advisable to use a hash map class that encapsulates the behavior. The details of implementation is beyond the scope of this article, but there are many open-source libraries and articles that are worth perusing for details. For this article, we will use the following rudimentary hash map class:</p>

<p><img src='/images/posts/lhm-hashmap.png' alt='Hash Map' /></p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * Simple hash map class.</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>HashMap</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span> <span class='o'>=</span> <span class='p'>{};</span>
<span class='p'>};</span>

<span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>

  <span class='cm'>/**</span>
<span class='cm'>   * Puts the key/value pair into the map, overwriting</span>
<span class='cm'>   * any existing entry.</span>
<span class='cm'>   */</span>
  <span class='nx'>put</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>containsKey</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span><span class='o'>++</span><span class='p'>;</span>
    <span class='p'>}</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Removes the entry associated with the key</span>
<span class='cm'>   * and returns the removed value.</span>
<span class='cm'>   */</span>
  <span class='nx'>remove</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>containsKey</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span><span class='o'>--</span><span class='p'>;</span>
      <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>];</span>
      <span class='k'>delete</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>];</span>
      <span class='k'>return</span> <span class='nx'>value</span><span class='p'>;</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Checks if this map contains the given key.</span>
<span class='cm'>   */</span>
  <span class='nx'>containsKey</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>);</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Checks if this map contains the given value.</span>
<span class='cm'>   * Note that values are not required to be unique.</span>
<span class='cm'>   */</span>
  <span class='nx'>containsValue</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span> <span class='o'>===</span> <span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
          <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span>
        <span class='p'>}</span>
      <span class='p'>}</span>
    <span class='p'>}</span>

    <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Returns the value associated with the given key.</span>
<span class='cm'>   */</span>
  <span class='nx'>get</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>containsKey</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='o'>?</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span> <span class='o'>:</span> <span class='kc'>null</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Clears all entries from the map.</span>
<span class='cm'>   */</span>
  <span class='nx'>clear</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Returns an array of all keys in the map.</span>
<span class='cm'>   */</span>
  <span class='nx'>keys</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>keys</span> <span class='o'>=</span> <span class='p'>[];</span>
    <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='nx'>keys</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>);</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
    <span class='k'>return</span> <span class='nx'>keys</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Returns an array of all values in the map.</span>
<span class='cm'>   */</span>
  <span class='nx'>values</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>values</span> <span class='o'>=</span> <span class='p'>[];</span>
    <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>key</span> <span class='k'>in</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>.</span><span class='nx'>hasOwnProperty</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='nx'>values</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_map</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]);</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
    <span class='k'>return</span> <span class='nx'>values</span><span class='p'>;</span>
  <span class='p'>},</span>
  
  <span class='cm'>/**</span>
<span class='cm'>   * Returns the size of the map, which is</span>
<span class='cm'>   * the number of keys.</span>
<span class='cm'>   */</span>
  <span class='nx'>size</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_size</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This <code>HashMap</code> class lacks advanced features, but it is simple, effective, and library-agnostic.</p>

<h3 id='insertion_order'>Insertion Order</h3>

<p>Even a robust and well tested hash map has one shortcoming if it relies on an object literal backbone: the return order of <code>HashMap.keys()</code> or <code>HashMap.values()</code> is unpredictable, meaning insertion order is not preserved. The overhead of tracking insertion order is why most hash map implementations ignore such a requirement and do not guarantee return order.</p>

<p>Although insertion order seems trivial, there are many cases in which it is critical to use hash maps for constant time access while also tracking when key/value pairs were inserted into the map. For example, a user interface library might allow a developer to add widgets to a dashboard.</p>

<p><img src='/images/posts/lhm-composition.png' alt='Composition' /></p>

<p><code>Widget</code> objects are added to a <code>Dashboard</code>, and when a <code>Dashboard</code> is rendered, so too are all of its <code>Widget</code> children in a predictable order. This is to avoid having a dashboard&#8217;s widgets randomly allocated to different layout slots per render.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>dashboard</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Dashboard</span><span class='p'>();</span>
<span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>Calendar</span><span class='p'>(</span><span class='s2'>&quot;myCalendar&quot;</span><span class='p'>));</span>
<span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>StockTicker</span><span class='p'>(</span><span class='s2'>&quot;myStockTicker&quot;</span><span class='p'>));</span>
<span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>Twitter</span><span class='p'>(</span><span class='s2'>&quot;myTwitter&quot;</span><span class='p'>));</span>

<span class='c1'>// modify the Calendar before rendering</span>
<span class='kd'>var</span> <span class='nx'>calendar</span> <span class='o'>=</span> <span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>getWidget</span><span class='p'>(</span><span class='s2'>&quot;myCalendar&quot;</span><span class='p'>);</span>
<span class='nx'>calendar</span><span class='p'>.</span><span class='nx'>setTimeZone</span><span class='p'>(</span><span class='s2'>&quot;MST&quot;</span><span class='p'>);</span>

<span class='c1'>// render the dashboard and its widgets in order: Calendar, StockTicker, Twitter</span>
<span class='nx'>dashboard</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
</code></pre>
</div>
<p>We access the <code>Calendar</code> object&#8211;and other <code>Widget</code> objects&#8211;by its unique id, with <code>Dashboard.getWidget()</code> internally delegating to a private hash map. This introduces an implementation problem: we want to preserve the widget insertion order but give the developer constant time access to its <code>Widget</code> children. A common solution is to maintain two data structures within the <code>Dashboard</code> by synchronizing a hash map for access and an <code>Array</code> for order.</p>

<p><img src='/images/posts/lhm-dashboard.png' alt='Dashboard' /></p>

<p>The code to ensure consistency and integrity between the two structures is non-trivial and not reusable, hence it is not ideal. Another solution is to abandon the hash map and rely solely on an <code>Array</code>, but this will slow <code>Widget</code> access time to a crawling <em>O(n)</em>, which is also unacceptable.</p>

<p>Enter the linked hash map.</p>

<p>A linked hash map is a specialized hash map that is synchronized with a <a href='https://en.wikipedia.org/wiki/Doubly_linked_list'>doubly linked list</a>. We can merge these two data structures into a new class called <code>LinkedHashMap</code>, which allows constant time access backed by a doubly linked list to preserve insertion order. There is minimal overhead to synchronize the two structures when performing write operations on the core hash map. By extending the <code>HashMap</code> class we can add an optimized doubly linked list to track the keys. (If the hash map cannot be subclassed then consider <a href='https://en.wikipedia.org/wiki/Decorator_pattern'>decorating</a> it or rolling your own if there are application-specific or critical optimization requirements.)</p>

<p><img src='/images/posts/lhm-linkedhashmap.png' alt='LinkedHashMap' /></p>
<div class='highlight'><pre><code class='javascript'><span class='cm'>/**</span>
<span class='cm'> * Constructor that initializes the parent HashMap</span>
<span class='cm'> * and the doubly linked list head and tail.</span>
<span class='cm'> */</span>
<span class='kd'>var</span> <span class='nx'>LinkedHashMap</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// invoke super constructor</span>
  <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>

  <span class='c1'>// &quot;inner&quot; Entry class</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_Entry</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>prev</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>next</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>value</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>;</span>
  <span class='p'>};</span>

  <span class='c1'>// doubly linkedlist instance variables</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='c1'>// extend HashMap and overwrite the necessary functions</span>
<span class='kd'>var</span> <span class='nx'>temp</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{};</span>
<span class='nx'>temp</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>;</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>temp</span><span class='p'>();</span>

<span class='cm'>/**</span>
<span class='cm'> * Puts the key/value pair in the HashMap and records</span>
<span class='cm'> * the insertion record if it does not exist.</span>
<span class='cm'> * </span>
<span class='cm'> * @override HashMap.put()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>put</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>entry</span> <span class='o'>=</span> <span class='k'>new</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_Entry</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>containsKey</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>))</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>size</span><span class='p'>()</span> <span class='o'>===</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>;</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>;</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span><span class='p'>.</span><span class='nx'>next</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>;</span>
      <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>prev</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span><span class='p'>;</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>

  <span class='cm'>/*</span>
<span class='cm'>   * EDIT: Added optimization suggested</span>
<span class='cm'>   * by Chad Walker (see article comments).</span>
<span class='cm'>   */</span>
  <span class='c1'>// overwrite the value with an optimized Object wrapper</span>
  <span class='nx'>value</span> <span class='o'>=</span> <span class='p'>{</span><span class='nx'>value</span><span class='o'>:</span><span class='nx'>value</span><span class='p'>,</span> <span class='nx'>entry</span><span class='o'>:</span><span class='nx'>entry</span><span class='p'>};</span>

  <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>key</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>);</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Returns the value associated with the key.</span>
<span class='cm'> * </span>
<span class='cm'> * @override HashMap.get()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>get</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>){</span>
  <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>key</span><span class='p'>);</span>
  
  <span class='cm'>/*</span>
<span class='cm'>   * EDIT: Added optimization suggested </span>
<span class='cm'>   * by Chad Walker (see article comments).</span>
<span class='cm'>   */</span>  
  <span class='c1'>// we must unwrap the value</span>
  <span class='k'>return</span> <span class='nx'>value</span> <span class='o'>!=</span> <span class='kc'>null</span> <span class='o'>?</span> <span class='nx'>value</span><span class='p'>.</span><span class='nx'>value</span> <span class='o'>:</span> <span class='kc'>null</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Removes the key/value pair from the map and </span>
<span class='cm'> * the key from the insertion order.</span>
<span class='cm'> * </span>
<span class='cm'> * @override Hashmap.remove()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>remove</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='p'>{</span>

  <span class='cm'>/*</span>
<span class='cm'>   * EDIT: Added optimization suggested </span>
<span class='cm'>   * by Chad Walker (see article comments).</span>
<span class='cm'>   */</span>
  <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>value</span> <span class='o'>!=</span> <span class='kc'>null</span><span class='p'>)</span> <span class='p'>{</span>
  
    <span class='kd'>var</span> <span class='nx'>entry</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>.</span><span class='nx'>entry</span><span class='p'>;</span>
  
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>entry</span> <span class='o'>===</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>;</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span><span class='p'>.</span><span class='nx'>prev</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>entry</span> <span class='o'>===</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>prev</span><span class='p'>;</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span><span class='p'>.</span><span class='nx'>next</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>prev</span><span class='p'>.</span><span class='nx'>next</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>;</span>
      <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>.</span><span class='nx'>prev</span> <span class='o'>=</span> <span class='nx'>entry</span><span class='p'>.</span><span class='nx'>prev</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>

  <span class='k'>return</span> <span class='nx'>value</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Clears the HashMap and insertion order.</span>
<span class='cm'> *</span>
<span class='cm'> * @override HashMap.clear()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>clear</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>HashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>clear</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_tail</span> <span class='o'>=</span> <span class='kc'>null</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Returns the HashMap keys in insertion order.</span>
<span class='cm'> *</span>
<span class='cm'> * @override HashMap.keys()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>keys</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>keys</span> <span class='o'>=</span> <span class='p'>[];</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>cur</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span><span class='p'>;</span> <span class='nx'>cur</span> <span class='o'>!=</span> <span class='kc'>null</span><span class='p'>;</span> <span class='nx'>cur</span> <span class='o'>=</span> <span class='nx'>cur</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>keys</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>cur</span><span class='p'>.</span><span class='nx'>value</span><span class='p'>);</span>
  <span class='p'>}</span>
  <span class='k'>return</span> <span class='nx'>keys</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='cm'>/**</span>
<span class='cm'> * Returns the HashMap values in insertion order.</span>
<span class='cm'> * </span>
<span class='cm'> * @override HashMap.values()</span>
<span class='cm'> */</span>
<span class='nx'>LinkedHashMap</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>values</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>values</span> <span class='o'>=</span> <span class='p'>[];</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>cur</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>_head</span><span class='p'>;</span> <span class='nx'>cur</span> <span class='o'>!=</span> <span class='kc'>null</span><span class='p'>;</span> <span class='nx'>cur</span> <span class='o'>=</span> <span class='nx'>cur</span><span class='p'>.</span><span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>values</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='nx'>cur</span><span class='p'>.</span><span class='nx'>value</span><span class='p'>));</span>
  <span class='p'>}</span>
  <span class='k'>return</span> <span class='nx'>values</span><span class='p'>;</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This new data structure, a marriage between a hash map and doubly linked list, is perfect as the sole backbone of <code>Dashboard</code> to manage widgets.</p>

<p><img src='/images/posts/lhm-widgets.png' alt='Dashboard' /></p>

<h3 id='moving_on'>Moving On</h3>

<p>With just a little overhead for write operations to the <code>LinkedHashMap</code>, even basic problems that require hash map behavior can query the insertion order with ease.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>map</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>LinkedHashMap</span><span class='p'>();</span>

<span class='nx'>map</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span><span class='s2'>&quot;key1&quot;</span><span class='p'>,</span> <span class='s2'>&quot;one&quot;</span><span class='p'>);</span>
<span class='nx'>map</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span><span class='s2'>&quot;key2&quot;</span><span class='p'>,</span> <span class='s2'>&quot;two&quot;</span><span class='p'>);</span>
<span class='nx'>map</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span><span class='s2'>&quot;key3&quot;</span><span class='p'>,</span> <span class='s2'>&quot;three&quot;</span><span class='p'>);</span>

<span class='c1'>// return order is now predictable</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>.</span><span class='nx'>keys</span><span class='p'>().</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;,&#39;</span><span class='p'>));</span> <span class='c1'>// &quot;key1,key2,key3&quot;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>map</span><span class='p'>.</span><span class='nx'>values</span><span class='p'>().</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;,&#39;</span><span class='p'>));</span> <span class='c1'>// &quot;one,two,three&quot;</span>
</code></pre>
</div>
<p>Because <code>LinkedHashMap</code> implements the same API as <code>HashMap</code> via inheritance, calling code can switch to a <code>LinkedHashMap</code> at runtime without breaking. The beauty of object-oriented design is that the declared type (<code>HashMap</code>) of a variable is irrelevant to the runtime type (<code>LinkedHashMap</code>). The only difficulty is enforcing the API in a type-unsafe language like JavaScript&#8230;but that&#8217;s another article.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/21/lispyscript">Tutorial: LispyScript Introduction</a></h2>
      <div class="meta">
        <span class="date">21 Sep 2012</span>
        | <span class="author">By Santosh Rajan</span>
        | <span class="comments"><a href="/2012/09/21/lispyscript/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#LispyScript">LispyScript</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#lisp">lisp</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='box'>
  This tutorial is by Santosh Rajan (<a href='https://twitter.com/santoshrajan'>@santoshrajan</a>), the creator of <a href='http://lispyscript.com/'>LispyScript</a> (GitHub: <a href='https://github.com/santoshrajan/lispyscript'>santoshrajan / lispyscript</a>).
</div>
<h3 id='introduction'>Introduction</h3>

<p>LispyScript is a tree structured programming language that compiles to JavaScript. A LispyScript program is made up of one or more LispyScript expressions.</p>
<div class='highlight'><pre><code class='text'>(&lt;function&gt; arg1 arg2 arg3 ...)
</code></pre>
</div>
<p>A LispyScript expression is made up of an opening parenthesis, a set of elements separated by space characters, and a closing parenthesis. A LispyScript expression is a function call (this is not exactly accurate, but we will see the exceptions to this later).</p>

<p>The first element evaluates to a function. It may be a function reference or an anonymous function. The rest of the elements are the arguments to the function. The expression evaluates to the return value of the function.</p>
<div class='highlight'><pre><code class='text'>(console.log &quot;Hello World!&quot;)
</code></pre>
</div>
<p>You will notice that we called <code>console.log</code>, which happens to be a JavaScript function, directly from LispyScript. You can call all JavaScript functions from LispyScript, even loaded library functions and object methods. <code>console.log</code> also works like <code>printf()</code>.</p>
<div class='highlight'><pre><code class='text'>(console.log &quot;2 + 2 = %d&quot; (+ 2 2))
</code></pre>
</div>
<p>You can have expressions within expressions in LispyScript. Here the expression <code>(+ 2 2)</code> is evaluated first, and replaced with its return value <code>4</code>. Then the function <code>console.log</code> is called with arguments string <code>2 + 2 = %d</code> and value <code>4</code>.</p>

<p>And this is all there is to the basic structure of a LispyScript program. LispyScript has a tree structure: expressions within expressions. Let&#8217;s look at a tree structure almost everyone is familiar with: HTML.</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;html</span> <span class='na'>lang=</span><span class='s'>&quot;en&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;head&gt;</span>
    <span class='nt'>&lt;title&gt;</span>My Home Page<span class='nt'>&lt;/title&gt;</span>
  <span class='nt'>&lt;/head&gt;</span>
  <span class='nt'>&lt;body&gt;</span>
    <span class='nt'>&lt;h1&gt;</span>Welcome to LispyScript<span class='nt'>&lt;/h1&gt;</span>
  <span class='nt'>&lt;/body&gt;</span>
<span class='nt'>&lt;/html&gt;</span>
</code></pre>
</div>
<p>This is a LispyScript HTML template that generates the exact same HTML as above:</p>
<div class='highlight'><pre><code class='text'>(html {lang: &quot;en&quot;}
  (head
    (title &quot;My Home Page&quot;))
  (body
    (h1 &quot;Welcome to LispyScript&quot;)))
</code></pre>
</div>
<p>We will learn how LispyScript HTML templates work later. For now, you can see that LispyScript has a tree structure. This same code structure can also be a data structure in LispyScript. This is known as homoiconicity &#8211; a fancy term for code having a data structure supported in that language.</p>

<p>When a compiler compiles a language like JavaScript, or Java or C, it first parses the source code into a tree structure known as the syntax tree, and then generates the machine/byte code from the syntax tree. If you could manipulate the syntax tree (which you can&#8217;t in these languages) while compiling, you could actually modify the language itself in ways not possible in the above mentioned languages and most other languages.</p>

<p>In LispyScript your code &#8211; for all practical purposes &#8211; is the syntax tree itself. And since the language is homoiconic, you can treat your code as data, and even modify the syntax tree! This is what macros do.</p>

<h3 id='macros'>Macros</h3>

<p>LispyScript does not have a <code>print</code> expression like <code>printf()</code> or <code>console.log</code> in JavaScript. We know that we can call the JavaScript <code>console.log</code> from LispyScript. Now if we could somehow transform a <code>print</code> expression into a <code>console.log</code> expression, we are done!</p>
<div class='highlight'><pre><code class='text'>(macro print (str rest...)
  (console.log ~str ~rest...))

(print &quot;Hello print macro!&quot;)
(print &quot;2 + 2 = %d&quot; (+ 2 2))
</code></pre>
</div>
<p>This example extends LispyScript by adding a <code>print</code> expression to it. The <code>macro</code> expression takes the macro name <code>print</code> as its first argument, and a list of argument names representing the arguments that will be passed to <code>print</code> as the second argument. The last argument to <code>macro</code> is a code template that will be expanded at macro expansion time.</p>

<p>Here the <code>print</code> expression takes two arguments, the same as <code>console.log</code>, and we name the first argument <code>str</code>. The second argument <code>rest...</code> is a special argument which represents the rest of the arguments to <code>print</code>. <code>rest...</code> can represent zero or more arguments.</p>

<p>Inside the template expression we dereference the two arguments by adding a <code>~</code> to them. So what happens when we use the <code>print</code> expression below?</p>
<div class='highlight'><pre><code class='text'>(print &quot;Hello print macro!&quot;)
</code></pre>
</div>
<p>The LispyScript compiler works in two steps. First it expands any macro expressions in the code. The previous expression will be expanded to:</p>
<div class='highlight'><pre><code class='text'>(console.log &quot;Hello print macro!&quot;)
</code></pre>
</div>
<p>And then the compiler compiles the above expression to JavaScript</p>
<div class='highlight'><pre><code class='text'>console.log(&quot;Hello print macro!&quot;);
</code></pre>
</div>
<p>The expression:</p>
<div class='highlight'><pre><code class='text'>(print &quot;2 + 2 = %d&quot; (+ 2 2))
</code></pre>
</div>
<p>Is expanded to:</p>
<div class='highlight'><pre><code class='text'>(console.log &quot;2 + 2 = %d&quot; (+ 2 2))
</code></pre>
</div>
<p>&#8230;and compiled to:</p>
<div class='highlight'><pre><code class='text'>console.log(&quot;2 + 2 = %d&quot;, (2 + 2));
</code></pre>
</div>
<p>This is a very simple example and you don&#8217;t gain much, but it&#8217;s good enough to illustrate a simple macro. You might wonder why a <code>print</code> function can&#8217;t be used instead of a <code>print</code> macro. Let&#8217;s see what happens when we write a print function instead.</p>
<div class='highlight'><pre><code class='text'>(var print
  (function (data value)
    (console.log data value)))

(print &quot;2 + 2 = %d&quot; (+ 2 2))
</code></pre>
</div>
<p>This will work too, but have a look at the compiled output:</p>
<div class='highlight'><pre><code class='text'>var print = function(data,value) {
    return console.log(data,value);
};
print(&quot;2 + 2 = %d&quot;,(2 + 2));
</code></pre>
</div>
<p>The print function must be included alongside the <em>call</em> to it in the compiled output! When we used a macro the compiled code was only one line.</p>
<div class='highlight'><pre><code class='text'>console.log(&quot;2 + 2 = %d&quot;, (2 + 2));
</code></pre>
</div>
<p>This is only an incidental benefit of using macros. We still need to look at the real benefits. Rather than learn when to use macros, it is better to learn when <em>not</em> to use macros. Macros can be dangerous. Consider this function:</p>
<div class='highlight'><pre><code class='text'>(var square
  (function (x)
    (* x x)))

(console.log (square 2))
</code></pre>
</div>
<p>The above code will print the answer <code>4</code>.</p>

<p>This can be rewritten as a macro:</p>
<div class='highlight'><pre><code class='text'>(macro square (x)
  (* ~x ~x))

(console.log (square 2))
</code></pre>
</div>
<p>And the expanded code is:</p>
<div class='highlight'><pre><code class='text'>(console.log (* 2 2))
</code></pre>
</div>
<p>That&#8217;s it! The answer is correct. But now try the following:</p>
<div class='highlight'><pre><code class='text'>(var i 2)
(console.log (square i++))
</code></pre>
</div>
<p>Ouch! You get 6! An embarrassing square of an integer. If you had used the function you would have got the correct answer. This is what happened:</p>
<div class='highlight'><pre><code class='text'>var i = 2;
console.log((i++ * i++));
</code></pre>
</div>
<p>When you use functions the arguments to the function get evaluated and then passed into the function. So in this case when you pass <code>i++</code>, the value 2 is passed as <code>x</code> into the function and <code>i</code> gets incremented. So <code>(x * x)</code> yields 4. In the case of the macro the argument is not evaluated when the macro expansion happens. Whatever you pass as arguments to the macro just get substituted as is in the template. So if you pass <code>i++</code>, it gets substituted as is in your macro template yielding <code>(i++ * i++)</code> which is <code>(2 * 3)</code>!</p>

<h3 id='conclusion'>Conclusion</h3>

<p>By taking advantage of tree structures and homoiconicity, LispyScript offers an alternative way of developing JavaScript programs. Although macros are powerful, they must be handled with care.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/20/enyo-1">Enyo Tutorial: Part 1</a></h2>
      <div class="meta">
        <span class="date">20 Sep 2012</span>
        | <span class="author">By Robert Kowalski</span>
        | <span class="comments"><a href="/2012/09/20/enyo-1/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#enyo">enyo</a>
          
            <a href="/tags.html#enyo-kowalski">enyo-kowalski</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Enyo is a mobile and desktop framework that uses JavaScript and HTML5. Developed by HP and the open source community, it&#8217;s licensed under the Apache License. If you&#8217;re looking to build mobile applications with JavaScript, then Enyo is a great choice. In this tutorial series, I&#8217;ll introduce the major concepts through some worked examples that you can build or download and try out. The Enyo styleguide is suggesting double quotes instead of single quotes. Enyo also uses tabs for indentation. Although I prefer 2 Spaces as indentation and single quotes, I will follow these rules during this tutorial.</p>

<h3 id='kinds'>Kinds</h3>

<p>Enyo applications are built around object prototypes called <code>kinds</code>. These can be either <code>components</code> or <code>controls</code>. Kinds in Enyo are very modularized, reusable and encapsulated.</p>

<p>Controls, on the other hand, are for controlling DOM nodes and manipulating them. Controls can nest other controls or components &#8211; they&#8217;re the &#8220;building blocks&#8221; for applications. A good example would be an app consuming an XML feed: a component would process the feed to JSON and rearrange the data. The views of that application representing the feed would be controls.</p>

<h3 id='the_tip_calculator'>The Tip Calculator</h3>

<p>There are hundreds of tip calculator apps on all the major vendor-specific app stores. We can go one better though &#8211; let&#8217;s build a tip calculator that can run on pretty much anything. Also, our Enyo-based app will be publishable using Cordova (formerly PhoneGap).</p>

<p><img src='/images/posts/enyo-phone.png' alt='' /></p>

<h3 id='setup'>Setup</h3>

<p>The Enyo project provides Bootplate &#8211; Enyo&#8217;s template project. All we have to do is clone the repository and <code>init</code> the submodules:</p>
<div class='highlight'><pre><code class='bash'>git clone https://github.com/enyojs/bootplate.git
<span class='nb'>cd </span>bootplate
git submodule update --init
</code></pre>
</div>
<h3 id='first_steps'>First Steps</h3>

<p>Next open <code>debug.html</code>. You should now see the example app. In our developer console, type the following:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>new</span> <span class='nx'>enyo</span><span class='p'>.</span><span class='nx'>Control</span><span class='p'>({</span> <span class='nx'>content</span><span class='o'>:</span> <span class='s1'>&#39;Hello World&#39;</span> <span class='p'>}).</span><span class='nx'>write</span><span class='p'>();</span>
</code></pre>
</div>
<p>This creates an Enyo control. It&#8217;s rendered as a simple <code>div</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;html&gt;</span>
  <span class='nt'>&lt;head&gt;</span>
  <span class='nt'>&lt;/head&gt;</span>
  <span class='nt'>&lt;body&gt;</span>
    <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;control&quot;</span><span class='nt'>&gt;</span>Hello World<span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;/body&gt;</span>
<span class='nt'>&lt;/html&gt;</span>
</code></pre>
</div>
<h3 id='going_deeper_controls_getter_and_setter_events'>Going Deeper: Controls, Getter and Setter, Events</h3>

<p>To start developing the tip calculator, delete the contents of <code>source/App.js</code> &#8211; we&#8217;ll replace it with a new file.</p>

<p>Let&#8217;s add a <code>kind</code> called <code>App</code> to our emptied <code>App.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>enyo</span><span class='p'>.</span><span class='nx'>kind</span><span class='p'>({</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;App&quot;</span><span class='p'>,</span>
  <span class='nx'>kind</span><span class='o'>:</span> <span class='nx'>enyo</span><span class='p'>.</span><span class='nx'>Control</span><span class='p'>,</span>
  <span class='nx'>style</span><span class='o'>:</span> <span class='s2'>&quot;&quot;</span><span class='p'>,</span>
  <span class='nx'>classes</span><span class='o'>:</span> <span class='s2'>&quot;onyx&quot;</span><span class='p'>,</span>
  <span class='nx'>components</span><span class='o'>:</span> <span class='p'>[</span>
    <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.InputDecorator&quot;</span><span class='p'>,</span> <span class='nx'>components</span><span class='o'>:</span> <span class='p'>[</span>
      <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.Input&quot;</span><span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;sumControl&quot;</span><span class='p'>,</span> <span class='nx'>placeholder</span><span class='o'>:</span> <span class='s2'>&quot;Enter sum&quot;</span><span class='p'>}</span>
    <span class='p'>]},</span>
    <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.InputDecorator&quot;</span><span class='p'>,</span> <span class='nx'>components</span><span class='o'>:</span> <span class='p'>[</span>
      <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.Input&quot;</span><span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;percentControl&quot;</span><span class='p'>,</span> <span class='nx'>placeholder</span><span class='o'>:</span> <span class='s2'>&quot;Enter percent&quot;</span><span class='p'>}</span>
    <span class='p'>]},</span>
    <span class='p'>{</span><span class='nx'>kind</span><span class='o'>:</span> <span class='s2'>&quot;onyx.Button&quot;</span><span class='p'>,</span> <span class='nx'>content</span><span class='o'>:</span> <span class='s2'>&quot;Calculate tip&quot;</span><span class='p'>,</span> <span class='nx'>ontap</span><span class='o'>:</span> <span class='s2'>&quot;calculate&quot;</span><span class='p'>},</span>
    <span class='p'>{</span><span class='nx'>tag</span><span class='o'>:</span> <span class='s2'>&quot;div&quot;</span><span class='p'>,</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;tipAmount&quot;</span><span class='p'>}</span>
  <span class='p'>],</span>
  <span class='nx'>create</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>inherited</span><span class='p'>(</span><span class='nx'>arguments</span><span class='p'>);</span>
  <span class='p'>},</span>
  <span class='nx'>calculate</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>inSource</span><span class='p'>,</span> <span class='nx'>inEvent</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>sum</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>sumControl</span><span class='p'>.</span><span class='nx'>hasNode</span><span class='p'>().</span><span class='nx'>value</span><span class='p'>;</span>
    <span class='kd'>var</span> <span class='nx'>percent</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>percentControl</span><span class='p'>.</span><span class='nx'>hasNode</span><span class='p'>().</span><span class='nx'>value</span><span class='p'>;</span>

    <span class='kd'>var</span> <span class='nx'>result</span> <span class='o'>=</span> <span class='p'>(</span><span class='nx'>sum</span> <span class='o'>*</span> <span class='nx'>percent</span><span class='p'>)</span> <span class='o'>/</span> <span class='mi'>100</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>tipAmount</span><span class='p'>.</span><span class='nx'>setContent</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>);</span>

    <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span> <span class='c1'>// stop bubbling</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>An instance is created and rendered into the DOM in our <code>debug.html</code> file with <code>renderInto</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>new</span> <span class='nx'>App</span><span class='p'>().</span><span class='nx'>renderInto</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>);</span>
</code></pre>
</div>
<p>Now I&#8217;ll explain the previous example in detail. The <code>kind</code> property is set to <code>enyo.Control</code>, and there are currently no inline styles &#8211; the <code>style</code> property is empty. The <code>onyx</code> CSS class should be added, which is an included submodule in the Bootplate that themes our Enyo application and the applications elements.</p>

<p>The <code>components</code> property is used to nest more <strong>kinds</strong> &#8211; I&#8217;ve used several to define the required input controls, a button, and a <code>div</code> to display the results. All of these components have a <code>name</code> property, which is important and will be explained later.</p>

<p>The button has an event attached, the <code>tap</code>-event. Enyo supports many other events, e.g. dragging over the screen, <code>flick</code>, or self-created events.</p>

<p>When a <code>kind</code> is created the method <code>create</code> is automatically called by the Enyo framework. The method inherits from its parent kind with <code>this.inherited(arguments);</code> and can be overwritten. There are several other constructor and constructor-like functions in the lifecycle of a <code>kind</code>: <code>destroy</code>, <code>create</code> or <code>constructor</code>.</p>

<p>Every time we tap our button the <code>calculate</code> method is called. <code>this.$</code> is used to address and access controls within the kind.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>sum</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>sumControl</span><span class='p'>.</span><span class='nx'>hasNode</span><span class='p'>().</span><span class='nx'>value</span>
</code></pre>
</div>
<p>This line is where the value of the control with the name <code>sumControl</code> is accessed. After that we calculate the tip and render the result into the element.</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>this</span><span class='p'>.</span><span class='nx'>$</span><span class='p'>.</span><span class='nx'>tipAmount</span><span class='p'>.</span><span class='nx'>setContent</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>);</span>
</code></pre>
</div>
<p>Every control has some handy getters and setters:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>.</span><span class='nx'>setContent</span><span class='p'>();</span>
<span class='p'>.</span><span class='nx'>getContent</span><span class='p'>();</span>
<span class='p'>.</span><span class='nx'>getClasses</span><span class='p'>();</span>
<span class='p'>.</span><span class='nx'>setClasses</span><span class='p'>();</span>
<span class='p'>.</span><span class='nx'>getStyle</span><span class='p'>();</span>
<span class='p'>.</span><span class='nx'>setStyle</span><span class='p'>();</span>
<span class='p'>.</span><span class='nx'>getAttribute</span><span class='p'>();</span>
<span class='p'>.</span><span class='nx'>setAttribute</span><span class='p'>();</span>
</code></pre>
</div>
<p>At the end of the method <code>return true</code> is used to prevent the tap event from bubbling up.</p>

<h3 id='get_the_source'>Get the Source</h3>

<p>The source is available at my GitHub account: <a href='https://github.com/robertkowalski/enyo-dailyjs/'>robertkowalski/enyo-dailyjs</a>.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>We&#8217;ve now hacked together a very basic tip calculator. This example could be built on to add a canvas element for diagrams, <code>localStorage</code> for statistics, or simply to add validation to user input.</p>

<p>In the next part of this series we&#8217;ll have a closer look at components and exposing the published properties of kinds. We&#8217;ll also create more reusable components from our app.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/09/19/node-roundup">Node Roundup: mongo-lite, smog, sshfs-node</a></h2>
      <div class="meta">
        <span class="date">19 Sep 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/09/19/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#filesystem">filesystem</a>
          
            <a href="/tags.html#mongo">mongo</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='mongolite'>mongo-lite</h3>

<p><a href='http://alexeypetrushin.github.com/mongo-lite/docs/index.html'>mongo-lite</a> (GitHub: <a href='https://github.com/alexeypetrushin/mongo-lite'>alexeypetrushin / mongo-lite</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mongo-lite'>mongo-lite</a>) by Alexey Petrushin aims to simplify MongoDB by removing the need for most callbacks, adding reasonable defaults like safe updates, and offering optional compact IDs.</p>

<p>The chainable API looks more like MongoDB&#8217;s command-line interface:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>db</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;mongo-lite&#39;</span><span class='p'>).</span><span class='nx'>connect</span><span class='p'>(</span><span class='s1'>&#39;mongodb://localhost/test&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;posts&#39;</span><span class='p'>,</span> <span class='s1'>&#39;comments&#39;</span><span class='p'>]);</span>
<span class='nx'>db</span><span class='p'>.</span><span class='nx'>posts</span><span class='p'>.</span><span class='nx'>insert</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;first&#39;</span> <span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>post</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Use post</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>There&#8217;s also a Fiber-based API, so it can be used in a synchronous fashion.</p>

<h3 id='smog'>smog</h3>

<p><a href='https://github.com/wearefractal/smog'>smog</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/smog'>smog</a>) from Fractal is a web-based MongoDB interface. It displays collections, and allows them to be sorted and edited. It also supports administration features, like shutting down servers, CPU/bandwidth usage graphs, and replica set management.</p>

<p>It&#8217;s built with Connect, and there&#8217;s an experimental GTK+ desktop interface made with the <a href='https://npmjs.org/package/pane'>pane</a> module by the same authors.</p>

<h3 id='sshfsnode'>sshfs-node</h3>

<p><a href='https://github.com/cbou/sshfs-node'>sshfs-node</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/sshfs-node'>sshfs-node</a>) by Charles Bourasseau allows remote filesystems to be mounted using SSH. It uses <a href='http://fuse.sourceforge.net/sshfs.html'>sshfs</a> and requires keys for authentication, rather than passwords.</p>

<p>It comes with Vows tests, and the same author has also released <a href='https://github.com/cbou/fs2http'>fs2http</a>.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page23">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <strong>24</strong>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page25">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

