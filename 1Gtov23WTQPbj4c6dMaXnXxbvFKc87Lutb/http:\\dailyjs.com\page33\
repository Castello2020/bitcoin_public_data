http://dailyjs.com/page33/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 12:21:22 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "1080b5-20ea8-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 33998
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/02/08/node-roundup">Node Roundup: 0.6.10, 0.7.3, Backbone.IO, Notes</a></h2>
      <div class="meta">
        <span class="date">08 Feb 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/02/08/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#fibers">fibers</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='0610_073'>0.6.10, 0.7.3</h3>

<p><a href='http://blog.nodejs.org/2012/02/02/node-v0-6-10/'>Node 0.6.10</a> was released last week. Of interest to Windows users is the following:</p>

<ul>
<li>Add npm msysgit bash shim to msi installer</li>

<li>dgram: Implement udp multicast methods on Windows</li>
</ul>

<p>Node <a href='http://blog.nodejs.org/2012/02/07/node-v0-7-3/'>0.7.3</a> has also been released. This <a href='https://github.com/joyent/node/commit/74a8215a8699f89ee4b82ca616a4eafa3b11203b'>reverts support for isolates</a>:</p>

<blockquote>
<p>It was decided that the performance benefits that isolates offer (faster spin-up times for worker processes, faster inter-worker communication, possibly a lower memory footprint) are not actual bottlenecks for most people and do not outweigh the potential stability issues and intrusive changes to the code base that first-class support for isolates requires.</p>
</blockquote>

<p>Ben Noordhuis finishes the commit message with &#8220;Good bye, isolates. We hardly knew ye&#8221;. I couldn&#8217;t find any discussions about this in the <a href='http://groups.google.com/group/nodejs-dev/'>nodejs-dev</a> group, but I noticed David Herron mention it here: <a href='http://nodejs.davidherron.com/2012/02/good-bye-isolates-nodejs-hardly-knew-ye.html'>Good bye isolates, Node.js hardly knew ye</a>.</p>

<h3 id='backboneio'>Backbone.IO</h3>

<p><a href='https://github.com/scttnlsn/backbone.io'>Backbone.IO</a> (License: <em>MIT</em>, npm: <em>backbone.io</em>) by Scott Nelson is a <a href='http://documentcloud.github.com/backbone/'>Backbone.js</a> module that can synchronise multiple clients. When a model is synced, the server-side code will trigger events on collections across multiple clients.</p>

<p>The server-side code uses a Connect-inspired middleware API. Notice the familiar signature:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>backend</span> <span class='o'>=</span> <span class='nx'>backboneio</span><span class='p'>.</span><span class='nx'>createBackend</span><span class='p'>();</span>

<span class='nx'>backend</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>.</span><span class='nx'>backend</span><span class='p'>);</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>.</span><span class='nx'>method</span><span class='p'>);</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>JSON</span><span class='p'>.</span><span class='nx'>stringify</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>));</span>
    <span class='nx'>next</span><span class='p'>();</span>
<span class='p'>});</span>

<span class='nx'>backend</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>backboneio</span><span class='p'>.</span><span class='nx'>middleware</span><span class='p'>.</span><span class='nx'>memoryStore</span><span class='p'>());</span>
</code></pre>
</div>
<p>Scott has included tests as well, which are built using <a href='http://visionmedia.github.com/mocha/'>Mocha</a> and <a href='https://github.com/cjohansen/Sinon.JS'>Sinon</a>.</p>

<h3 id='notes'>Notes</h3>

<p><a href='https://github.com/olegp/notes'>Notes</a> by Oleg Podsechin is an example app built using his <a href='http://olegp.github.com/common-node/'>Common Node</a> and <a href='https://github.com/olegp/mongo-sync/'>Mongo Sync</a> libraries. This is an effort to bring traditional declarative synchronous code to Node through <a href='https://github.com/laverdet/node-fibers'>node-fibers</a>.</p>

<p>Here&#8217;s a taster:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Get an array of notes</span>
<span class='nx'>mongo</span><span class='p'>.</span><span class='nx'>db</span><span class='p'>(</span><span class='s1'>&#39;notes&#39;</span><span class='p'>).</span><span class='nx'>getCollection</span><span class='p'>(</span><span class='s1'>&#39;notes&#39;</span><span class='p'>).</span><span class='nx'>find</span><span class='p'>().</span><span class='nx'>toArray</span><span class='p'>();</span>

<span class='c1'>// Save a note</span>
<span class='nx'>mongo</span><span class='p'>.</span><span class='nx'>db</span><span class='p'>(</span><span class='s1'>&#39;notes&#39;</span><span class='p'>).</span><span class='nx'>getCollection</span><span class='p'>(</span><span class='s1'>&#39;notes&#39;</span><span class='p'>).</span><span class='nx'>save</span><span class='p'>({</span> <span class='nx'>name</span><span class='o'>:</span> <span class='nx'>request</span><span class='p'>.</span><span class='nx'>params</span><span class='p'>.</span><span class='nx'>name</span> <span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/02/07/jquery-roundup">jQuery Roundup: 1.7.2, Super Labels, jquery.textntags</a></h2>
      <div class="meta">
        <span class="date">07 Feb 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/02/07/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#forms">forms</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_172'>jQuery 1.7.2</h3>

<p><a href='http://blog.jquery.com/2012/01/31/jquery-1-7-2-beta-1-released/'>jQuery 1.7.2 Beta 1</a> has been released. There are a lot of bug fixes, and some interesting API tweaks:</p>

<ul>
<li><a href='http://bugs.jquery.com/ticket/5571'>#5571</a>: Allow chaining when passing undefined to any setter in jQuery</li>

<li><a href='http://bugs.jquery.com/ticket/8498'>#8498</a>: Animate hooks</li>

<li><a href='http://bugs.jquery.com/ticket/11119'>#11119</a>: The curCSS function needs only 2 arguments</li>

<li><a href='http://bugs.jquery.com/ticket/10931'>#10931</a>: Unit tests shouldn&#8217;t require Internet access</li>
</ul>

<p>That last one is particularly useful if you need to run jQuery&#8217;s unit tests. Tests shouldn&#8217;t need a connection!</p>

<h3 id='jquery_super_labels'>jQuery Super Labels</h3>

<p><a href='https://github.com/remybach/jQuery.superLabels'>jQuery Super Labels</a> (License: <em>MIT</em>) by Rémy Bach is a form field overlay plugin that hides labels when an <code>input</code> gains focus. It&#8217;ll work automatically with most text fields simply by calling <code>$(&#39;form&#39;).superLabels()</code>. If the label needs to be displayed in a different location, suitable options can be provided with <code>labelLeft</code> and <code>labelTop</code>.</p>

<p>Super Labels has advanced options for controlling animation easing and duration.</p>

<p>Another interesting plugin by the same author is <a href='https://github.com/remybach/jQuery.slashSearch'>jQuery Slash Search</a> which will focus on a search field when <code>/</code> is typed.</p>

<h3 id='jquerytextntags'>jquery.textntags</h3>

<p><img src='/images/posts/danielzahariev.png' alt='textntags screenshot' /></p>

<p><a href='http://daniel-zahariev.github.com/jquery-textntags/'>jquery.textntags</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/daniel-zahariev/jquery-textntags'>daniel-zahariev / jquery-textntags</a>) by Daniel Zahariev is another <code>@name</code> input enhancement tool. A full example of it using Ajax to search looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;textarea.tagged_text_ex2&#39;</span><span class='p'>).</span><span class='nx'>textntags</span><span class='p'>({</span>
  <span class='nx'>onDataRequest</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>mode</span><span class='p'>,</span> <span class='nx'>query</span><span class='p'>,</span> <span class='nx'>triggerChar</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>$</span><span class='p'>.</span><span class='nx'>getJSON</span><span class='p'>(</span><span class='s1'>&#39;assets/data.json&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>responseData</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>query</span> <span class='o'>=</span> <span class='nx'>query</span><span class='p'>.</span><span class='nx'>toLowerCase</span><span class='p'>();</span>
      <span class='nx'>responseData</span> <span class='o'>=</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>filter</span><span class='p'>(</span><span class='nx'>responseData</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>item</span><span class='p'>.</span><span class='nx'>name</span><span class='p'>.</span><span class='nx'>toLowerCase</span><span class='p'>().</span><span class='nx'>indexOf</span><span class='p'>(</span><span class='nx'>query</span><span class='p'>)</span> <span class='o'>&gt;</span> <span class='o'>-</span><span class='mi'>1</span><span class='p'>;</span> <span class='p'>});</span>
      <span class='nx'>callback</span><span class='p'>.</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>responseData</span><span class='p'>);</span>
    <span class='p'>});</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This is an early version of the library, so the author doesn&#8217;t make any promises in terms of browser support. However, the documentation is solid and it ships with CSS, so it&#8217;s easy to drop into a project.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/02/06/uikit-expect-dom-patio">UIKit, Expect-dom, Patio</a></h2>
      <div class="meta">
        <span class="date">06 Feb 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/02/06/uikit-expect-dom-patio/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#jquery">jquery</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='uikit'>UIKit</h3>

<p><img src='/images/posts/uikit.png' alt='UIKit banner' /></p>

<p>TJ Holowaychuk&#8217;s latest project is <a href='http://visionmedia.github.com/uikit/'>UIKit</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/visionmedia/uikit'>visionmedia / uikit</a>, npm: <em>uikit</em>). It&#8217;s a small library of decoupled components for creating web interfaces. Simple, structural markup and modular JavaScript is used to create widgets like a &#8220;card&#8221; that uses 3D transforms, dialogs, notification messages, and more.</p>

<p>UIKit reminded me of <a href='https://github.com/visionmedia/nib'>Nib</a>, TJ&#8217;s library of Stylus mixins, utilities, and components. TJ stresses that UIKit isn&#8217;t a CSS framework like Bootstrap, but neither is it written with Stylus and Jade. Instead it functions as a loosely-knit set of components that can be built on.</p>

<h3 id='expectdom'>Expect-dom</h3>

<p><a href='https://github.com/kevindente/expect-dom'>Expect-dom</a> (License: <em>MIT</em>) by Kevin Dente is a set of DOM-related assertions for <a href='https://github.com/LearnBoost/expect.js'>expect.js</a>. Various assertions can be made, including <code>attr</code>, <code>id</code>, and <code>html</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>expect</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;&lt;div title=&quot;some title&quot;&gt;&lt;/div&gt;&#39;</span><span class='p'>)).</span><span class='nx'>to</span><span class='p'>.</span><span class='nx'>have</span><span class='p'>.</span><span class='nx'>attr</span><span class='p'>(</span><span class='s2'>&quot;title&quot;</span><span class='p'>);</span>
<span class='nx'>expect</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='nx'>theEl</span><span class='p'>)).</span><span class='nx'>to</span><span class='p'>.</span><span class='nx'>have</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='s2'>&quot;&lt;span&gt;content&lt;/span&gt;&quot;</span><span class='p'>);</span>
</code></pre>
</div>
<p>The author has adapted code from <a href='https://github.com/velesin/jasmine-jquery'>jasmine-jquery</a> to create this library.</p>

<h3 id='patio'>Patio</h3>

<p><a href='http://pollenware.github.com/patio/index.html'>Patio</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/pollenware/patio'>Pollenware / patio</a>, npm: <em>patio</em>) from Pollenware is an SQL library inspired by <a href='http://sequel.rubyforge.org/'>Sequel</a>. It supports schema creation, migrations, queries, models, and associations. It even includes handy flow control related methods like <code>then</code>, removing the need to heavily nest certain asynchronous operations:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>User</span><span class='p'>.</span><span class='nx'>findById</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>user</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// SELECT * FROM user WHERE id = 1 </span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Patio also has some handy JavaScript-friendly utility methods:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>User</span><span class='p'>.</span><span class='nx'>toHash</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>,</span> <span class='s1'>&#39;name&#39;</span><span class='p'>).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>nameIdMap</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// SELECT * FROM user </span>
  <span class='c1'>//{&quot;1&quot;:&quot;Bob Yukon&quot;}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Full API documentation is also available: <a href='http://pollenware.github.com/patio/api/index.html'>Patio API documentation</a>.</p>

<p>The project still only has 11 GitHub followers, but it&#8217;s got an incredible amount of functionality already &#8211; check it out and give the authors some feedback!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/02/03/stackhack-ducks-remote-tilt">StackHack, Ducks, Remote-Tilt, Simplify.js</a></h2>
      <div class="meta">
        <span class="date">03 Feb 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/02/03/stackhack-ducks-remote-tilt/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='stackhack'>StackHack</h3>

<p><img src='/images/posts/stackhack.png' alt='StackHack screenshot' /></p>

<p><a href='http://stackhack.com/'>StackHack</a> by Philip Deschaine and from <a href='http://www.pubnub.com/'>PubNub</a> is a WebGL demo that uses PubNub to create a massively multiplayer interactive block stacking game. The technical details are discussed in <a href='http://www.pubnub.com/blog/stackhack'>StackHack: A Massively-Multiplayer Mashup of PubNub and Three.js</a>.</p>

<blockquote>
<p>Let&#8217;s start with the server. I used Node.js with express to serve up our HTML, CSS, JavaScript. When a client connects, we generate a UUID, append some stuff and listen on that channel. Why do it this way? Why not just use a generic PubNub channel? Excellent question I wanted what&#8217;s known as an authoritative server.</p>
</blockquote>

<p>The article includes more details behind both the client-side and server-side code.</p>

<h3 id='ducks_a_webgl_demo'>Ducks, a WebGL Demo</h3>

<p><img src='/images/posts/ducks.png' alt='Ducks screenshot' /></p>

<p><a href='http://statico.github.com/webgl-demos/ducks/'>Ducks</a> (GitHub: <a href='https://github.com/statico/webgl-demos/tree/master/ducks'>statico / webgl-demos / ducks</a>) by Ian Langworth is a simple game demo that uses WebGL and sound, complete with animated models and reflections. The <a href='http://www.glge.org/'>GLGE</a> WebGL framework has been used, along with models from the <a href='https://collada.org/owl/browse.php?sess=0&amp;parent=120&amp;expand=1&amp;order=name&amp;curview=0&amp;sortname=ASC'>COLLADA Basic Samples collection</a>.</p>

<p>The game logic, in <a href='https://github.com/statico/webgl-demos/blob/master/ducks/logic.js'>ducks / logic.js</a>, is relatively clear and easy to follow, so it works as a great example of a small, manageable example of a WebGL game.</p>

<h3 id='remotetilt'>Remote-Tilt</h3>

<p><a href='http://remote-tilt.com/'>Remote-Tilt</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/remy/remote-tilt'>remy / remote-tilt</a>) by Remy Sharp can help test motion events without fooling around with a mobile device:</p>

<blockquote>
<p>Testing motion events was never going to be easy task. You have two options, both of which suck. That&#8217;s where Remote-Tilt comes in. By including a single line of JavaScript you can emulate device motion events in your test page which can either be a regular browser or even a mobile emulator.</p>
</blockquote>

<p>By including the Remote-Tilt polyfill on a page a popup will appear that allows motion events to be simulated:</p>

<p><img src='/images/posts/motion-emulator.png' alt='Remote-Tilt motion emulator' /></p>

<h3 id='simplifyjs'>Simplify.js</h3>

<p><img src='/images/posts/simplifyjs.png' alt='Simplify.js demo screenshot' /></p>

<p><a href='http://mourner.github.com/simplify-js/'>Simplify.js</a> (License: <em>BSD</em>, GitHub: <a href='https://github.com/mourner/simplify-js'>mourner / simplify-js</a>, npm: <em>simplify-js</em>) by Vladimir Agafonkin is a library for fast 2D/3D polyline simplification:</p>

<blockquote>
<p>It is very useful when you deal with lines consisting of many tens of thousands of points, e.g. when you need to quickly render a 50k-points line on the browser (for charts, map routes, etc.).</p>
</blockquote>

<p>The demo on the Simplify.js homepage shows how impressive the performance is, easily throwing around 50,000 points like it&#8217;s child&#8217;s play! The source for this project has been extracted from another of Vladimir&#8217;s interesting libraries, <a href='http://leaflet.cloudmade.com/'>Leaflet</a>, which is also worth checking out.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/02/02/console">Mastering Console Logging</a></h2>
      <div class="meta">
        <span class="date">02 Feb 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/02/02/console/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
        </span>
      </div>
      <div class="preview">
        <p>The <code>console</code> object crops up everywhere. But what is it, and what can it do? Most people seem to use it without realising the sheer convenience it can provide. Let&#8217;s take a look at where it comes from, and how to use it correctly.</p>

<h3 id='builtin_vs_host'>Built-in vs. Host</h3>

<p>The <code>console</code> object is what&#8217;s known as a <a href='http://es5.github.com/#x4.3.8'>host object in ECMAScript</a>. Host objects are supplied by the host environment. Node&#8217;s documentation refers to <code>console</code> as a &#8220;global object&#8221;.</p>

<p>This is different to a <a href='http://es5.github.com/#x4.3.6'>native object</a> which is an object in the ECMAScript implementation in question, and defined by the specification rather than the host environment. <a href='http://es5.github.com/#x4.3.7'>Built-in objects</a> are similar, but are present when an ECMAScript program starts. In addition, built-in objects inherit from <code>Object</code> or <code>Function</code> whereas host objects might not.</p>

<p>Host objects may also not be available when execution starts. That&#8217;s why some browsers treat <code>console</code> differently depending on whether the output is visible or not. Notice that Mozilla&#8217;s documentation states that this behaviour has changed:</p>

<blockquote>
<p>Prior to Gecko 12.0 (Firefox 12.0 / Thunderbird 12.0) , the console object&#8217;s methods only work when the Web Console is open. Starting with Gecko 12.0, output is cached until the Web Console is opened, then displayed at that time.</p>
</blockquote>

<h3 id='methods'>Methods</h3>

<p>Since <code>console</code> isn&#8217;t yet formally covered by a specification, implementations vary. In Node it&#8217;s closely tied to standard input output, referred to as &#8220;stdio&#8221; by the documentation. This gives rise to <code>error</code> and <code>log</code> methods that will be printed to the appropriate output stream.</p>

<p>Most implementations give us convenient ways of separating output for debugging messages, errors, and warnings:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;This is merely an informational debug message&#39;</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>warn</span><span class='p'>(</span><span class='s1'>&#39;This is a warning&#39;</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;This is an error&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>These messages will be handled differently depending on the environment. Firefox 10&#8217;s built-in developer console will display an &#8220;X&#8221; next to the error, whereas Node will print to stderr.</p>

<h3 id='redirection'>Redirection</h3>

<p><img src='/images/posts/console-redirection.png' alt='Console redirection example' /></p>

<p>When writing Node scripts, it&#8217;s a good idea to use <code>console.error</code> when displaying errors. It means that errors can be redirected in the shell &#8211; sometimes I don&#8217;t want to see standard output, but I do care about errors, so I&#8217;ll redirect the errors into a log file.</p>

<p>I/O redirection generally works like this: <code>1&gt;</code> will redirect to stdout, and <code>2&gt;</code> redirects stderror. Given this example:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;This is just noisy debug stuff&#39;</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;This means Alex broke something again&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Then running <code>node test.js 1&gt; debug.log 2&gt; errors.log</code> will redirect the debug and error messages to separate files. Using <code>1&gt;</code> will truncate the file to a length of zero, so to <em>append</em> messages <code>1&gt;&gt;</code> and <code>2&gt;&gt;</code> can be used instead.</p>

<h3 id='inspection_and_concatenation'> Inspection and Concatenation</h3>

<p>In most browsers and Node, objects will be automatically printed in a readable format when using <code>console.log</code>. That means printing variables is possible without any extra effort:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>({</span> <span class='nx'>alex</span><span class='o'>:</span> <span class='s2'>&quot;some dude&quot;</span> <span class='p'>});</span>
</code></pre>
</div>
<p>In Node, <code>util.format</code> is applied to the arguments, which runs <code>util.inspect</code>. Therefore, there&#8217;s no need to run <code>console.log(util.inspect(value))</code> in Node!</p>

<p>Most implementations will automatically concatenate values:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>name</span> <span class='o'>=</span> <span class='s1'>&#39;Alex&#39;</span><span class='p'>;</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Name:&#39;</span><span class='p'>,</span> <span class='nx'>name</span><span class='p'>);</span>
<span class='c1'>// Name: Alex</span>
</code></pre>
</div>
<p>Notice how a space is automatically added? There&#8217;s no need to manually concatenate a value using <code>console.log(&#39;Message: &#39; + value)</code>. In fact, doing this will mean the value won&#8217;t be automatically inspected.</p>

<p>Node&#8217;s <code>format</code> method uses <code>Array.prototype.join</code> to do this: <a href='https://github.com/joyent/node/blob/master/lib/util.js#L29'>lib/util.js</a>.</p>

<h3 id='formatting'>Formatting</h3>

<p>Recent implementations also provide nascent string substitution support:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Name: %s, Intergalactic Credits: %d.&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Alex&#39;</span><span class='p'>,</span> <span class='o'>-</span><span class='mi'>100</span><span class='p'>).</span>
</code></pre>
</div>
<p>Support for substitution strings isn&#8217;t exactly <code>printf</code> yet, and with supporting between environments varying somewhat.</p>

<h3 id='extras'>Extras</h3>

<p>Both Node and Mozilla provide <code>console.dir</code>: Node runs <code>util.inspect</code> on the supplied argument and prints the output to stderr. Conversely, Firefox will display an interactive version of the object, with disclosure triangles if necessary.</p>

<p>Need to quickly benchmark a slow operation? The <code>console.time</code> and <code>console.timeEnd</code> methods can also be used in both environments. The <code>time</code> method accepts a parameter which allows the timer to be named:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>console</span><span class='p'>.</span><span class='nx'>time</span><span class='p'>(</span><span class='s1'>&#39;100-elements&#39;</span><span class='p'>);</span>
<span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='mi'>100</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='p'>;</span>
<span class='p'>}</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>timeEnd</span><span class='p'>(</span><span class='s1'>&#39;100-elements&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Stack traces can be displayed with <code>console.trace()</code>. Again, in Firefox this will be interactive, and in Node it&#8217;ll be redirected to stderr.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>The <code>console</code> object provides a surprisingly useful amount of functionality. If you&#8217;re writing lightweight Node programs, or want to debug something in a relatively modern browser (or browser with suitable developer tools), then try to take advantage of it rather than relying on unnecessary libraries.</p>

<p>In general, when logging with <code>console</code>:</p>

<ul>
<li>Use the correct logging method so redirection works as expected</li>

<li>Quickly append variables to messages using <code>console.log(&#39;Message:&#39;, value)</code></li>

<li>Use <code>console</code> to automatically inspect variables</li>
</ul>

<h3 id='references'>References</h3>

<ul>
<li><a href='https://developer.mozilla.org/en/DOM/console'>console at MDN</a></li>

<li><a href='http://nodejs.org/docs/latest/api/all.html#console'>console in Node&#8217;s documentation</a></li>

<li><a href='http://es5.github.com/'>Annotated ECMAScript 5.1</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/02/01/node-roundup">Node Roundup: Ryan Dahl Steps Down, Thimble, Mongo Model, Banking.js, Navcodec</a></h2>
      <div class="meta">
        <span class="date">01 Feb 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/02/01/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#banking">banking</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#mongo">mongo</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='ryan_dahl_steps_down'>Ryan Dahl Steps Down</h3>

<p><a href='https://groups.google.com/d/msg/nodejs/hfajgpvGTLY/DioyFo3t3A4J'>Ryan Dahl announced that he&#8217;s stepping down as &#8220;gatekeeper&#8221;</a> and Isaac Schlueter will now take the lead. Many messages of gratitude were posted to the <a href='http://groups.google.com/group/nodejs'>nodejs</a> group in response.</p>

<blockquote>
<p>Our energy will now be largely focused over the next few months on improving the third party module system experience including a website for browsing modules, a new addon build system, and binary installations from npm.</p>
</blockquote>

<p>The thing that&#8217;s fascinated me most about Ryan and Node over the last three years is the creation and development of <a href='https://github.com/joyent/libuv'>libuv</a>. Ryan made a great <a href='http://vimeo.com/24713213'>screencast about libuv</a>, and something about his attitude came across as relatively humble and reserved, which impressed me given the success of Node.</p>

<p>If you&#8217;ve followed <a href='http://blog.izs.me/'>Isaac&#8217;s blog</a> you&#8217;ll know he has a different personality &#8211; I think it&#8217;s fair to say he&#8217;s got some strong opinions about software development, but argues them in a well-tempered manner. Time will tell how these different personalities will impact on Node&#8217;s overall development and community.</p>

<p>Meanwhile, <a href='http://blog.nodejs.org/2012/01/27/node-v0-6-9/'>Node 0.6.9</a> was released which brings back some missing dgram functionality, and includes bug fixes.</p>

<h3 id='thimble'>Thimble</h3>

<p><a href='http://matthewmueller.github.com/thimble/'>Thimble</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/MatthewMueller/thimble'>MatthewMueller / thimble</a>, npm: <em>thimble</em>) by Matthew Mueller is a new way of working with Express. It inserts two middleware layers that manipulates requests and assets to provide a more integrated way of working with client-side code. Thimble&#8217;s functionality is provided through plugins, which include:</p>

<ul>
<li><em>Flatten</em>: Introduces the <code>include</code> tag to HTML templates</li>

<li><em>Embed</em>: Allows <code>script</code> tags to compile templates into functions</li>

<li><em>Package</em>: Compiles an application</li>
</ul>

<p>Matthew has created two examples of Thimble projects, available here: <a href='https://github.com/MatthewMueller/thimble/tree/master/examples'>thimble / examples</a>.</p>

<h3 id='mongo_model'>Mongo Model</h3>

<p><a href='http://alexeypetrushin.github.com/mongo-model/model.html'>Mongo Model</a> (GitHub: <a href='https://github.com/alexeypetrushin/mongo-model'>alexeypetrushin / mongo-model</a>, License: <em>MIT</em>, npm: <em>mongo-model</em>) by Alexey Petrushin is a new MongoDB library that can optionally work with <a href='https://github.com/laverdet/node-fibers'>fibers</a>.</p>

<p>I had trouble running the library without CoffeeScript, so I installed it and ran the examples with <code>coffee</code> and they seemed to work. The <a href='http://alexeypetrushin.github.com/mongo-model/model.html'>mongo-model documentation</a> is all CoffeeScript as well, so you may struggle to use it if you want to use it with JavaScript.</p>

<h3 id='bankingjs'>Banking.js</h3>

<p><a href='http://euforic.co/banking.js/'>Banking.js</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/euforic/banking.js'>euforic / banking.js</a>, npm: <em>banking</em>) by Christian Sullivan is a unified API for North American banks. Rather than logging into a clunky web interface <code>banking.getStatement</code> can be used to get statement details.</p>

<p>Imagine scripting some Arduino hardware with a suitable <a href='https://github.com/ecto/duino'>Node Arduino package</a> to disable your current debt in an amusing way!</p>

<h3 id='node_libavcodec_bindings'>Node libavcodec bindings</h3>

<p>These <a href='https://github.com/OptimalBits/navcodec'>Node libavcodec bindings</a> (License: <em>MIT</em>, npm: <em>navcodec</em>) developed by Optimal Bits offer a new way to work with <a href='http://libav.org/'>libavcodec</a> in Node. The authors have aimed to create a new JavaScript API that works how JavaScript developers would expect:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>navcodec</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;navcodec&#39;</span><span class='p'>);</span>

<span class='nx'>navcodec</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>(</span><span class='s1'>&#39;myinput.mov&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>media</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>media</span><span class='p'>){</span>
    <span class='nx'>media</span><span class='p'>.</span><span class='nx'>addOutput</span><span class='p'>(</span><span class='s1'>&#39;myoutput.mp4&#39;</span><span class='p'>,</span> <span class='p'>{</span>
      <span class='nx'>width</span><span class='o'>:</span> <span class='mi'>640</span><span class='p'>,</span>
      <span class='nx'>height</span><span class='o'>:</span> <span class='mi'>480</span><span class='p'>,</span>
      <span class='nx'>audioBitrate</span><span class='o'>:</span> <span class='mi'>128000</span><span class='p'>,</span>
      <span class='nx'>videoBitrate</span><span class='o'>:</span> <span class='mi'>500000</span>
    <span class='p'>});</span>

    <span class='nx'>media</span><span class='p'>.</span><span class='nx'>transcode</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>progress</span><span class='p'>,</span> <span class='nx'>time</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>progress</span><span class='p'>);</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>progress</span> <span class='o'>===</span> <span class='mi'>100</span><span class='p'>){</span>
        <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Total transcoding time:&#39;</span> <span class='o'>+</span> <span class='nx'>time</span><span class='p'>);</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This seems like an incredibly useful library for those that work with media. In particular, metadata extraction and thumbnail generation all become possible with <em>navcodec</em>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/31/jquery-roundup">jQuery Roundup: jPages, youRhere, jquery.lazyLoader, Deferred and Promise in jQuery</a></h2>
      <div class="meta">
        <span class="date">31 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/31/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#lazyloading">lazyloading</a>
          
            <a href="/tags.html#pagination">pagination</a>
          
            <a href="/tags.html#promises">promises</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jpages'>jPages</h3>

<p><a href='http://luis-almeida.github.com/jPages/'>jPages</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/luis-almeida/jPages'>luis-almeida / jPages</a>) by Luis Almeida is a client-side pagination plugin that can page through a set of elements in an unordered list. Given some suitable HTML, perhaps containing a list of images:</p>
<div class='highlight'><pre><code class='html'><span class='c'>&lt;!-- Future navigation panel --&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;holder&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>

<span class='c'>&lt;!-- Item container (doesn&#39;t need to be an UL) --&gt;</span>
<span class='nt'>&lt;ul</span> <span class='na'>id=</span><span class='s'>&quot;itemContainer&quot;</span><span class='nt'>&gt;</span>
    <span class='c'>&lt;!-- Items --&gt;</span>
    <span class='nt'>&lt;li&gt;&lt;/li&gt;</span>
    <span class='nt'>&lt;li&gt;&lt;/li&gt;</span>
    <span class='nt'>&lt;li&gt;&lt;/li&gt;</span>
    <span class='nt'>&lt;li&gt;&lt;/li&gt;</span>
    <span class='nt'>&lt;li&gt;&lt;/li&gt;</span>
<span class='nt'>&lt;/ul&gt;</span>
</code></pre>
</div>
<p>Then to get pagination controls the only JavaScript we need to use is <code>$(&#39;div.holder&#39;).jPages({ containerID : &#39;itemContainer&#39; });</code>.</p>

<p>The author has written lots of demos, applying the plugin to lazy loading images, or even using <a href='http://luis-almeida.github.com/jPages/titlelinks.html'>titles as links</a> to create sub-navigation for a page.</p>

<h3 id='yourhere'>youRhere</h3>

<p><img src='/images/posts/youarehere.png' alt='You Are Here' /></p>

<p><a href='http://yourhere.gandtblog.com/'>youRhere</a> (License: <em>MIT</em> or <em>GPL</em>, GitHub: <a href='https://github.com/fastrd/youRhere'>fastrd / youRhere</a>) by Daniel Sternlicht transforms pages of text to allow the reader&#8217;s progress to be saved. The current mouse position is displayed with an arrow, and clicking on a line will highlight it. This can persist by using <code>localStorage</code>.</p>

<p>Basic usage is just <code>$(&#39;#content&#39;).yourhere();</code>.</p>

<h3 id='jquerylazyloader'>jquery.lazyLoader</h3>

<p><a href='http://the-taylors.org/blog/2012/01/29/jquery-lazyloader-organic-responsive-images/'>jquery.lazyLoader</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/davetayls/jquery.lazyLoader'>davetayls / jquery.lazyLoader</a> by Dave Taylor aims to make image loading more responsive by loading images based on the browser viewport size. With carefully named images it can work pretty much automatically:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;a&#39;</span><span class='p'>).</span><span class='nx'>lazyLoader</span><span class='p'>({</span>
  <span class='nx'>img</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>url</span><span class='p'>,</span> <span class='nx'>windowWidth</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>windowWidth</span> <span class='o'>&gt;=</span> <span class='mi'>768</span><span class='p'>){</span>
      <span class='k'>return</span> <span class='nx'>url</span><span class='p'>.</span><span class='nx'>replace</span><span class='p'>(</span><span class='sr'>/.(jpg|gif|png)$/i</span><span class='p'>,</span> <span class='s1'>&#39;-mega.$1&#39;</span><span class='p'>);</span> 
    <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>url</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p><em>jQuery plugin authors take note!</em> Dave has raised the bar! He&#8217;s not only included tests, but he&#8217;s also running them through a CI server (<a href='http://travis-ci.org/davetayls/jquery.lazyLoader'>davetayls/jquery.lazyLoader</a>)! I&#8217;m not saying he&#8217;s the first person to do this, but given the amount of plugins we receive at DailyJS with no tests I found it a pleasant surprise.</p>

<h3 id='deferred_and_promise_in_jquery'>Deferred and Promise in jQuery</h3>

<p><a href='http://www.bitstorm.org/weblog/2012-1/Deferred_and_promise_in_jQuery.html'>Deferred and promise in jQuery</a> by Edwin Martin is an introduction to the tools jQuery provides for working with these functional concepts.</p>

<blockquote>
<p>So what is a deferred and what is the difference with a promise? As you have seen above, a promise is an object that is returned from an asynchronous function. You need a deferred when you write such a function yourself.</p>
</blockquote>

<p>Edwin aims to explain how to use promises and <code>$.Deferred</code>, and also explain how they&#8217;re different.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/30/helsinki-todo-testing-backbone">HelsinkiJS February, Todo, Testing Backbone.js</a></h2>
      <div class="meta">
        <span class="date">30 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/30/helsinki-todo-testing-backbone/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='helsinkijs_february'>HelsinkiJS February</h3>

<p><a href='http://lanyrd.com/2012/helsinkijs-february/'>HelsinkiJS February</a> has been announced, and will take place on the 16th of February at <a href='http://lanyrd.com/venues/helsinki/vpmh/'>Codento</a>. Two speakers are attending so far: <a href='https://twitter.com/#!/pyykkis81'>Jarno Keskikangas</a> and <a href='https://twitter.com/#!/polarblau'>@polarblau</a>.</p>

<p>If you want me to include your JavaScript event on DailyJS, just <a href='http://twitter.com/dailyjs'>@dailyjs</a> or <a href='/contact.html'>use our contact form</a> to get in touch!</p>

<h3 id='todo'>Todo</h3>

<p><img src='/images/posts/todo.png' alt='Todo screenshot' /></p>

<p><a href='https://github.com/vesln/todo'>Todo</a> (License: <em>MIT</em>, npm: <em>todo</em>) by Veselin Todorov is a small todo list application for the command-line interface, written with Node. I like seeing clever Unix utilities and command-line applications made with Node, and this one seems cool with its coloured UI and UTF-8 characters.</p>

<p>The interesting thing about this tool is it&#8217;s built using <a href='http://flatironjs.org/'>Flatiron</a>. Flatiron is designed to be adaptable, and although it&#8217;s aimed at web development, anything can (and will) be built with it.</p>

<p>If you&#8217;re a fellow command-line hacker and have mastered pretty colours and option parsing, then another useful thing is to include a man page. This is supported by npm: check out <code>npm help json</code> and scroll down to the &#8220;man&#8221; section.</p>

<h3 id='testing_backbonejs_best_practices'>Testing Backbone.js Best Practices</h3>

<p><a href='http://blog.involver.com/2012/01/26/testing-backbone-js-best-practices-2/'>Testing Backbone.js Best Practices</a> by Jonathan Eatherly includes some useful tips. I&#8217;ve often felt like testing <a href='http://documentcloud.github.com/backbone/'>Backbone.js</a> is a little bit hard to visualise, but Jonathan makes a few confusing aspects much clearer:</p>

<blockquote>
<p>By default a Backbone view will create an in-memory jQuery object containing a single DIV element &#8230; This means we don’t have to see the ugly injecting and removing of content on the page as the tests run, there is no need to clean up the DOM after each test iteration, and our test suite will run much faster.</p>
</blockquote>

<p>His examples use the <a href='http://pivotal.github.com/jasmine/'>Jasmine</a> test framework, but much of this advice can be applied to any test framework.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/27/resumable-android-webgl-coderbyte">Resumable.js, Open Source Android WebGL Implementation, Coderbyte</a></h2>
      <div class="meta">
        <span class="date">27 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/27/resumable-android-webgl-coderbyte/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#html5">html5</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='resumablejs'>Resumable.js</h3>

<p><a href='http://www.23developer.com/opensource'>Resumable.js</a> (GitHub: <a href='https://github.com/23/resumable.js'>23 / resumable.js</a>, License: <em>MIT</em>) from 23 is a library for managing concurrent and resumable uploads using the <a href='http://dev.w3.org/2006/webapi/FileAPI/'>HTML5 File API</a>:</p>

<blockquote>
<p>The library is designed to introduce fault-tolerance into the upload of large files through HTTP. This is done by splitting each files into small chunks; whenever the upload of a chunk fails, uploading is retried until the procedure completes. This allows uploads to automatically resume uploading after a network connection is lost either locally or to the server.</p>
</blockquote>

<p>Since the File API has limited support, the author&#8217;s example should degrade:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>r</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Resumable</span><span class='p'>({</span>
  <span class='nx'>target</span><span class='o'>:</span> <span class='s1'>&#39;/api/photo/redeem-upload-token&#39;</span><span class='p'>,</span>
  <span class='nx'>query</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>upload_token</span><span class='o'>:</span><span class='s1'>&#39;my_token&#39;</span> <span class='p'>}</span>
<span class='p'>});</span>
<span class='c1'>// Resumable.js isn&#39;t supported, fall back on a different method</span>
<span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>r</span><span class='p'>.</span><span class='nx'>support</span><span class='p'>)</span> <span class='nx'>location</span><span class='p'>.</span><span class='nx'>href</span> <span class='o'>=</span> <span class='s1'>&#39;/old-uploader&#39;</span><span class='p'>;</span>
</code></pre>
</div>
<p>Resumable.js&#8217;s API is event based, and events include <code>fileAdded</code>, <code>fileSuccess</code>, and <code>fileError</code>.</p>

<p>To implement the server-side part of this, the state of uploaded chunks should be managed. The documentation notes that on unstable networks the same chunk may be uploaded more than once, so appropriate HTTP status codes should be returned as chunks are received.</p>

<h3 id='open_source_android_webgl_implementation'> Open Source Android WebGL Implementation</h3>

<p>Sony Ericsson announced <a href='http://developer.sonyericsson.com/wp/2012/01/25/webgl-implementation-for-xperia-phones-released-as-open-source/'>WebGL support for Android 4.0</a> and published the source on GitHub at <a href='https://github.com/sonyericssondev/WebGL'>sonyericssondev / WebGL</a>:</p>

<blockquote>
<p>It is based on ics-mr1, and requires that webkit is built with <code>USE_ACCELERATED_COMPOSITING</code> and that the browser application is built with <code>hardwareAccelerated=true</code>.</p>
</blockquote>

<p>This is the code that will be used on forthcoming Xperia phones running Ice Cream Sandwich.</p>

<h3 id='coderbyte'>Coderbyte</h3>

<p><a href='http://coderbyte.com/'>Coderbyte</a> is a service designed to &#8220;practice and perfect&#8221; programming skills. At the moment it includes challenges for client-side JavaScript, and there are some guest challenges that you can try out here: <a href='http://coderbyte.com/CodingArea/'>Coderbyte Coding Area</a>.</p>

<p>With the right community tools I think Coderbyte could be a little bit like Stack Overflow in reverse.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/26/effective-node-modules">Using Node Modules Effectively</a></h2>
      <div class="meta">
        <span class="date">26 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/26/effective-node-modules/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Node&#8217;s module system is deceptively clever. On the surface it seems like it provides just enough functionality to get by, but it can go a long way towards helping to structure an application elegantly. <a href='http://nodejs.org/docs/latest/api/all.html#modules'>Node&#8217;s official documentation</a> covers all of the major features, yet many modules sent in for review at DailyJS don&#8217;t use these techniques where they could.</p>

<p>For this article I&#8217;ll be using <a href='http://expressjs.com/'>Express</a> applications as an example, but these techniques can be applied to any Node application, whether it&#8217;s a command-line tool or TCP service.</p>

<h3 id='splitting_up_large_files'>Splitting up Large Files</h3>

<p>Most Express tutorials and examples have a monolithic file that does everything, but Node&#8217;s module system gives us some tools to split the file up without much effort. Express routes are a good target for reorganisation.</p>

<p>Given a set of routes:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{});</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/users&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{});</span>
<span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/users/:id&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{});</span>
</code></pre>
</div>
<p>Then we can reorganise them by creating a folder called <code>routes/</code>, and creating files with the following structure:</p>
<div class='highlight'><pre><code class='text'>routes/
├── index.js
├── main.js
└── users.js
</code></pre>
</div>
<p>Express developers often use <code>main.js</code> as the convention for things that aren&#8217;t easily split into RESTful groups. In this example I&#8217;d put the <code>&#39;/&#39;</code> route in there. The extra file, <code>index.js</code> would look like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./main&#39;</span><span class='p'>);</span>
<span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./users&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Now our <code>app.js</code> file that loads Express and instantiates an <code>app</code> object can have all of the routes removed and replaced with <code>require(&#39;./routes&#39;);</code>.</p>

<p>Two things make this example work: Node will automatically look inside a folder for <code>index.js</code>, and <code>app</code> is a global.</p>

<p>In Node, defining <code>app</code> using <code>var</code> will restrict its scope to the current module. By purposefully not defining <code>app</code> with <code>var</code> it&#8217;s accessible inside the routes files. Otherwise we&#8217;d have to pass it to each routes module somehow. I see modules structured like this a lot:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/thing&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{});</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Speaking of coupling, using globals can quickly lead to tightly coupled code that makes reuse harder. Making <code>app</code> global in an Express application can help cut down a little bit of boilerplate. I generally keep my routes lightweight so the core functionality is less coupled to Express. In addition, I&#8217;ll often create new modules for functionality that seems generic, so I can reuse it in other Express apps.</p>

<h3 id='configurable_folders_as_modules'>Configurable Folders as Modules</h3>

<p>Node can also be told where to look when loading modules by using a <code>package.json</code> file. This allows the module&#8217;s main file to have a different name:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span> <span class='s2'>&quot;name&quot;</span> <span class='o'>:</span> <span class='s2'>&quot;sub-module&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;main&quot;</span> <span class='o'>:</span> <span class='s2'>&quot;./path/main.js&quot;</span> <span class='p'>}</span>
</code></pre>
</div>
<p>This seems to be used a lot less than the <code>index.js</code> convention, but it may help you fit it to your application&#8217;s internal naming scheme.</p>

<h3 id='tracking_'>Tracking <code>require</code></h3>

<p>Node sets <code>require.main</code> to its <code>module</code> when run directly, but doesn&#8217;t when loaded using <code>require</code>. I&#8217;ve also used <code>module.parent</code> to achieve this in the past.</p>

<p>These values are often used to determine if an Express application should call <code>app.listen()</code> or not, because not all tests want the same behaviour so conditionally listening based on environment isn&#8217;t always the best approach.</p>

<p>For example:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>module</span><span class='p'>.</span><span class='nx'>parent</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>app</span><span class='p'>.</span><span class='nx'>listen</span><span class='p'>();</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='private_modules'>Private Modules</h3>

<p>Using <code>package.json</code> to manage dependencies and other metadata is great, even for private, closed source projects. However, there&#8217;s always the nagging feeling that someone could accidentally publish a package when working on commercially sensitive projects. Fortunately, setting <code>&quot;private&quot;: true</code> will prevent npm from publishing the package.</p>

<h3 id='amd'>AMD</h3>

<p>If you&#8217;re primarily a client-side developer and have been writing libraries using <a href='https://github.com/amdjs/amdjs-api/wiki/AMD'>AMD</a>, using it in Node may appeal to you. However, the <a href='http://groups.google.com/group/nodejs-dev/'>nodejs-dev</a> group has had several &#8220;mile-high threads&#8221; on the subject, and support has moved to userland.</p>

<p><a href='http://requirejs.org/docs/node.html'>RequireJS</a> provides a Node implementation for AMD. The <a href='https://github.com/jrburke/amdefine'>amdefine</a> module implements <code>define</code>.</p>

<p>I&#8217;d be tempted to load define as a global in a main module using <code>define = (require(&#39;amdefine&#39;))(module);</code>. This allows modules to be structured with a leading <code>define(</code> call, so they could be shared between the browser and server without any boilerplate.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/25/node-roundup">Node Roundup: 0.6.8 and 0.7.1, Summit Coverage, Connect Router, Mongolian DeadBeef, AWS</a></h2>
      <div class="meta">
        <span class="date">25 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/25/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#middleware">middleware</a>
          
            <a href="/tags.html#mongo">mongo</a>
          
            <a href="/tags.html#amazon">amazon</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_068_and_071'>Node 0.6.8 and 0.7.1</h3>

<p><a href='http://blog.nodejs.org/2012/01/19/node-v0-6-8/'>Node 0.6.8</a> is out. V8 and npm are both updated in this release, and there are also numerous bug fixes including one for the cluster module and another for <code>fs.stat</code> in Windows.</p>

<p>Meanwhile, the unstable branch has been updated to <a href='http://blog.nodejs.org/2012/01/23/node-v0-7-1/'>Node 0.7.1</a>. I noticed that this brings V8 up to 3.8.8 which is the latest version in the <a href='http://code.google.com/p/v8/source/browse/trunk/ChangeLog'>V8 Changelog</a>.</p>

<h3 id='node_summit_coverage'>Node Summit Coverage</h3>

<p>This week is the <a href='http://nodesummit.com/'>Node Summit</a>, and David Herron has been writing up some detailed coverage at <a href='http://nodejs.davidherron.com/'>nodejs.davidherron.com/</a>. This includes talks from Microsoft, Yahoo, VMWare, and Heroku, so it&#8217;s interesting stuff for anyone interested in Node, the cloud, and the near future of Node development.</p>

<blockquote>
<p>Node is a great fit for some applications, a terrible fit for others. There&#8217;s a danger in the Node excitement to try and use Node to solve every problem. Hence, PAAS needs to be polyglot.</p>
</blockquote>

<p>From <a href='http://nodejs.davidherron.com/2012/01/nodejs-summit-platform-as-service.html'>Node.js Summit: Platform as a Service</a>.</p>

<h3 id='connect_router'> Connect Router</h3>

<p><img src='/images/posts/craig-express-router.png' alt='Connect Router syntax diagram' /></p>

<p><a href='https://github.com/crcn/connect-router'>Connect Router</a> (License: <em>MIT</em>, npm: <em>connect-router</em>) by Craig Condon is a unique take on routing in Express by using strings to express relationships between routes, HTTP methods, and middleware. Routes can be loaded from a file or directory, making splitting up applications into logical groupings extremely easy.</p>

<p>The basic API looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>connectRouter</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>router</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>router</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;parseBody&#39;</span><span class='p'>,</span> <span class='nx'>express</span><span class='p'>.</span><span class='nx'>bodyParser</span><span class='p'>());</span>

  <span class='nx'>router</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;user/exists&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>userExists</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>.</span><span class='nx'>query</span><span class='p'>.</span><span class='nx'>username</span><span class='p'>))</span> <span class='p'>{</span>
      <span class='nx'>res</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>(</span><span class='s1'>&#39;That username already exists&#39;</span><span class='p'>);</span>
      <span class='k'>return</span><span class='p'>;</span>
    <span class='p'>}</span>
    <span class='nx'>next</span><span class='p'>();</span>
  <span class='p'>});</span>

  <span class='nx'>router</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;-method=POST parseBody -&gt; user/exists -&gt; signup&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>res</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>(</span><span class='s1'>&#39;Successfuly signed up &#39;</span><span class='p'>);</span>
  <span class='p'>});</span>
<span class='p'>}));</span>
</code></pre>
</div>
<p>Notice that existing Express middleware can be applied to a router &#8211; in this case <code>bodyParser</code> has been used.</p>

<p>Rather than using an API based around HTTP verbs, Craig&#8217;s routers look like <code>EventEmitter</code> objects, and use a DSL to define what HTTP verbs should be applied. Middleware can be triggered by listing it like this: <code>&#39;user/exists -&gt; signup&#39;</code>. Middleware can also be greedy, which is a convenient way of applying permissions to sets of routes.</p>

<h3 id='mongolian_deadbeef'>Mongolian DeadBeef</h3>

<p>Have you always wanted a Node MongoDB driver that has the same API as MongoDB&#8217;s shell? It seems so obvious, yet it&#8217;s tantalizingly hard to find such a module. Oleg Podsechin said he&#8217;s been using <a href='https://github.com/marcello3d/node-mongolian'>Mongolian DeadBeef</a> (License: <em>zlib</em>, npm: <em>mongolian</em>) by Marcello Bastéa-Forte and it looks like it does the job admirably. It even includes GridFS support using streams.</p>

<p>Collections can be accessed using <code>db.collection()</code>, and then records can be found and inserted with familiar methods like <code>collection.insert()</code>, <code>collection.findOne()</code>, and <code>collection.find</code>. It allows queries to be built up using chains, like this: <code>collection.find().limit(5).sort({ created: 1 })</code>.</p>

<h3 id='amazon_web_services_node_library'>Amazon Web Services Node Library</h3>

<p>It seems like Amazon are hell-bent on creating a service for everything in the universe. How can a Node hacker take advantage of this? Well, <a href='https://github.com/livelycode/aws-lib'>aws-lib</a> (License: <em>MIT</em>, npm: <em>aws-lib</em>) by Mirko Kiefer is an Amazon Web Services library that provides clients for EC2, Product Advertising API, SimpleDB, SQS, SNS, SES, and ELB.</p>

<p>The project is dubbed as &#8220;simple&#8221; but already seems fairly extensive. Thanks to some recent Hacker News coverage it currently has 260 followers on GitHub.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/24/jquery-roundup">jQuery Roundup: Publish Subscribe, Transparency, slabText</a></h2>
      <div class="meta">
        <span class="date">24 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/24/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#text">text</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#templating">templating</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='publish_subscribe_plugin'>Publish Subscribe Plugin</h3>

<p><a href='http://www.joezimjs.com/projects/publish-subscribe-jquery-plugin/'>Joseph Zimmerman&#8217;s Publish Subscribe Plugin</a> (License: <em>GPL</em>) is an implementation of the aforementioned messaging pattern aimed at browser-based JavaScript:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>handle</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>subscribe</span><span class='p'>(</span><span class='s1'>&#39;foo&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>topic</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>,</span> <span class='nx'>topic</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>$</span><span class='p'>.</span><span class='nx'>publish</span><span class='p'>(</span><span class='s1'>&#39;foo bar&#39;</span><span class='p'>,</span> <span class='s1'>&#39;This is some data&#39;</span><span class='p'>);</span>

<span class='nx'>$</span><span class='p'>.</span><span class='nx'>unsubscribe</span><span class='p'>(</span><span class='nx'>handle</span><span class='p'>);</span>
</code></pre>
</div>
<p>The author has implemented it with core jQuery methods like <code>$.type</code> and <code>$.each</code> so the source is readily understandable.</p>

<h3 id='transparency'>Transparency</h3>

<p><a href='http://leonidas.github.com/transparency/'>Transparency</a> (GitHub: <a href='https://github.com/leonidas/transparency'>leonidas / transparency</a>, License: <em>MIT</em>) by Jarno Keskikangas is a template engine for jQuery that maps JSON to DOM elements using a <code>$.render</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>hello</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>hello</span><span class='o'>:</span>   <span class='s1'>&#39;Hello&#39;</span><span class='p'>,</span>
  <span class='nx'>goodbye</span><span class='o'>:</span> <span class='s1'>&#39;Goodbye!&#39;</span>
<span class='p'>};</span>

<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.container&#39;</span><span class='p'>).</span><span class='nx'>render</span><span class='p'>(</span><span class='nx'>hello</span><span class='p'>);</span>
</code></pre>
</div>
<p>This example would write the values to tags matching the selectors <code>.hello</code> and <code>.goodbye</code>:</p>

<blockquote>
<p>Transparency relies on convention over configuration and requires you to have 1:1 match between CSS classes and JSON objects. The idea is to minimize the cognitive noise you have to deal with. Just call <code>$(&#39;.container&#39;).render(data)</code> and move on.</p>
</blockquote>

<p>There&#8217;s a detailed blog post about Transparency here: <a href='https://github.com/leonidas/codeblog/blob/master/2012/2012-01-13-implementing-semantic-anti-templating-with-jquery.md'>Implementing Semantic Anti-Templating With jQuery</a>.</p>

<h3 id='slabtext'>slabText</h3>

<p><img src='/images/posts/slabtext.png' alt='slabText example' /></p>

<p><a href='http://www.frequency-decoder.com/demo/slabText/'>slabText</a> (GitHub: <a href='https://github.com/freqDec/slabText/'>freqdec / slabText</a>, License: <em>MIT/GPLv2</em>) by Brian McAllister splits headlines into rows, and resizes them to fill the available space. This works as the browser viewport changes.</p>

<p>Brian notes that this is based on Erik Loyer&#8217;s <a href='http://erikloyer.com/index.php/blog/the_slabtype_algorithm_part_1_background/'>slabtype algorithm</a>, which is interesting reading for those inspired by <a href='http://fittextjs.com/'>FitText</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/23/gbone-extensions-font">Gbone.js, Writing Browser Extensions, Font.js</a></h2>
      <div class="meta">
        <span class="date">23 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/23/gbone-extensions-font/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#extensions">extensions</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#fonts">fonts</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='gbonejs'>Gbone.js</h3>

<p><a href='https://github.com/gobhi/gbone.js'>Gbone.js</a> (License: <em>MIT</em>) by Gobhi Theivendran is a framework built on top of Backbone.js for building mobile applications, inspired by <a href='http://spinejs.com/mobile/index'>Spine Mobile</a>. It contains several classes that extend Backbone&#8217;s classes to make it easier to build mobile applications. For example, <code>Gbone.Stage</code> contains multiple <code>Gbone.Panel</code>s, and the panels are managed internally by a panel manager. They have a default skeleton like this:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;container&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;header&gt;&lt;/header&gt;</span>
  <span class='nt'>&lt;article&gt;&lt;/article&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>Panels can be activated and deactivated, animated using a transition. Only one stage and panel can be active at one time, so the end result is similar to native Android and iOS interfaces.</p>

<p>There&#8217;s a <a href='https://github.com/gobhi/gbone.js/tree/master/example'>Gbone.js</a> demo app, which is a rewrite of <a href='https://github.com/benschwarz/currency.io'>currency.io</a>. Gbone.js works with both jQuery and Zepto.</p>

<h3 id='writing_browser_extensions__comparing_firefox_chrome_and_opera'>Writing Browser Extensions - Comparing Firefox, Chrome and Opera</h3>

<p><a href='http://blog.nparashuram.com/2011/10/writing-browser-extensions-comparing.html'>Writing Browser Extensions - Comparing Firefox, Chrome and Opera</a> by Parashuram Narasimhan explores writing a browser extension for multiple browsers. The author covers a lot of topics, including manifest files, background processes, message passing, and debugging.</p>

<p>This tutorial is based on Parashuram&#8217;s experiences writing the <a href='http://nparashuram.com/projects/flashresizer.html'>MediaPlus</a>, so some of the coverage is specific to that, but it&#8217;s general enough to get a good overview of how difficult it is to support all of the major browsers with a single extension.</p>

<h3 id='fontjs'>Font.js</h3>

<p><a href='http://pomax.nihongoresources.com/pages/Font.js/'>Font.js</a> (GitHub: <a href='https://github.com/Pomax/Font.js'>Pomax / Font.js</a>, License: <em>MIT</em>) by Mike Kamermans is a font API for client-side JavaScript. Fonts can be loaded on demand, and an <code>onload</code> callback will run once the font has been loaded:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>font</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Font</span><span class='p'>();</span>

<span class='nx'>font</span><span class='p'>.</span><span class='nx'>onload</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// The new font has loaded</span>
<span class='p'>};</span>

<span class='nx'>font</span><span class='p'>.</span><span class='nx'>src</span> <span class='o'>=</span> <span class='s1'>&#39;http://example.com/font.ttf&#39;</span><span class='p'>;</span>
</code></pre>
</div>
<p>Metrics for a font can be accessed. For example, <code>font.metrics.leading</code> will give the line height.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/20/flavours-3d-events-lowkick">Flavors of JavaScript, 3D Events, LowKick</a></h2>
      <div class="meta">
        <span class="date">20 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/20/flavours-3d-events-lowkick/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#ECMAScript">ECMAScript</a>
          
            <a href="/tags.html#testing">testing</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='different_flavors_of_javascript'>Different Flavors of JavaScript</h3>

<p>In <a href='http://laktek.com/2012/01/19/different-flavors-of-javascript/'>Different flavors of JavaScript</a> by Lakshan Perera, ECMAScript, ES3, ES5, and ES.Next (Harmony) are explained. Lakshan gives helpful links in context, like <a href='http://es5.github.com/'>es5.github.com</a>, and gives hits on what browser support is available.</p>

<p>For related reading, I touched on some of these areas before in the <a href='http://dailyjs.com/tags.html#hoj'>History of JavaScript</a> series.</p>

<h3 id='dom_events_in_3d_space'>DOM Events in 3D Space</h3>

<p><a href='http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space/'>DOM Events in 3D Space</a> is a tutorial by Jerome Etienne that demonstrates how to use <a href='https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js'>threex.domevent.js</a>. The <a href='http://jeromeetienne.github.com/threex/examples/threex.domevent/'>3D DOM event demo</a> shows how this works &#8211; click on each teapot and different animations will be triggered. <code>THREE.Ray</code> is used, in particular the <code>intersectScene</code> method, to determine if an event intersects an object.</p>

<p>Jerome has also recently published <a href='http://jeromeetienne.github.com/threejsboilerplatebuilder/'>Boilerplate Builder for Three.js</a> which allows a customised set of HTML, JavaScript, and CSS to be generated that includes everything needed to get started with three.js.</p>

<h3 id='lowkick'>LowKick</h3>
<a href='/images/posts/lowkick-large.png'><img src='/images/posts/lowkick.png' /></a>
<p><a href='https://github.com/azer/lowkick'>LowKick</a> by E. Azer Koçulu simplifies running tests in multiple JavaScript environments. For example:</p>
<div class='highlight'><pre><code class='sh'>./bin/lowkick <span class='nb'>command </span>ie6 <span class='nb'>test</span>/config.json
</code></pre>
</div>
<p>This example, given suitable tools, will run tests in IE using VirtualBox. Headless testing is documented in the project&#8217;s readme, but it&#8217;ll need a little bit of effort to get it working.</p>

<p>Other drivers can be used, or added through configuration files. For example, LowKick comes with a Node driver, VirtualBox, and &#8220;virtualbox-ie&#8221;.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/19/semicolons">Semicolons, Objectively</a></h2>
      <div class="meta">
        <span class="date">19 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/19/semicolons/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#style">style</a>
          
            <a href="/tags.html#language">language</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Last week in <a href='http://dailyjs.com/2012/01/12/style/'>Programming Styles in the Node Community</a> I discussed the styles of three prominent developers in the Node community. The ensuing debate mainly focused on semicolons. Rather than telling you my opinion on the topic, I&#8217;d like to explore it objectively so you can make your own decision on whether to use them or not.</p>

<p>Style and semantics aside: how are semicolons handled by minimizers? Is it safe to write a client-side library without semicolons?</p>

<p>Let&#8217;s look at the two most popular minimizers according to <a href='http://dailyjs.com/2011/12/15/javascript-survey-results/'>JavaScript Developer Survey 2011 Results</a>.</p>

<h3 id='yui_compressor'>YUI Compressor</h3>

<p><a href='http://developer.yahoo.com/yui/compressor/'>YUI Compressor</a> can be downloaded as a zip file and includes a <code>jar</code> file in the <code>build/</code> directory that can be used like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>java</span> <span class='o'>-</span><span class='nx'>jar</span> <span class='nx'>yuicompressor</span><span class='o'>-</span><span class='nx'>x</span><span class='p'>.</span><span class='nx'>y</span><span class='p'>.</span><span class='nx'>z</span><span class='p'>.</span><span class='nx'>jar</span> <span class='nx'>myfile</span><span class='p'>.</span><span class='nx'>js</span> <span class='o'>-</span><span class='nx'>o</span> <span class='nx'>myfile</span><span class='o'>-</span><span class='nx'>min</span><span class='p'>.</span><span class='nx'>js</span> <span class='o'>--</span><span class='nx'>charset</span> <span class='nx'>utf</span><span class='o'>-</span><span class='mi'>8</span>
</code></pre>
</div>
<p>This basic usage will insert semicolons. If you write a file without semicolons, it&#8217;ll remove newlines and insert them for you. It&#8217;ll also add semicolons to the end of a file, so concatenating multiple files is safe.</p>

<h3 id='closure_compiler'>Closure Compiler</h3>

<p><a href='http://code.google.com/closure/'>Closure Compiler</a> is also a Java application, and there&#8217;s a web interface for it at <a href='http://closure-compiler.appspot.com/home'>closure-compiler.appspot.com</a>. By default semicolons are also inserted, and a semicolon will again be appended to the end of the file to aid concatenation.</p>

<p>In cases where usage is ambiguous, Closure Compiler will raise <code>JSC_SUSPICIOUS_SEMICOLON</code>. Try this in the web interface:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='kc'>true</span><span class='p'>);</span>
<span class='k'>else</span> <span class='nx'>alert</span><span class='p'>(</span><span class='s1'>&#39;no&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>The <a href='http://code.google.com/closure/compiler/docs/error-ref.html'>Closure Error and Warning Reference</a> documentation explains this warning, which can be turned off:</p>

<blockquote>
<p>The compiler assumes that this is a mistake, and that you meant to have a statement between <code>if (true)</code> and the semi-colon.</p>
</blockquote>

<p>Both of these libraries will also strip unnecessary semicolons. For example, given this simple example:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>hello</span><span class='p'>(</span><span class='nx'>longName</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>alert</span><span class='p'>(</span><span class='s1'>&#39;Hello, &#39;</span> <span class='o'>+</span> <span class='nx'>longName</span><span class='p'>);</span>
<span class='p'>}</span>
<span class='nx'>hello</span><span class='p'>(</span><span class='s1'>&#39;New User&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>The semicolon after <code>alert</code> will be removed.</p>

<h3 id='standards'>Standards</h3>

<p><a href='http://www.ecma-international.org/publications/standards/Ecma-262.htm'>Standard ECMA-262</a> and previous versions of ECMAScript include &#8220;Automatic Semicolon Insertion&#8221;:</p>

<blockquote>
<p>Certain ECMAScript statements (empty statement, variable statement, expression statement, <code>do-while</code> statement, <code>continue</code> statement, <code>break</code> statement, <code>return</code> statement, and <code>throw</code> statement) must be terminated with semicolons. [&#8230;] For convenience, however, such semicolons may be omitted from the source text in certain situations.</p>
</blockquote>

<p>Prior to this edition of ECMAScript, deprecating or removing this feature was discussed by Brendan Eich and Douglas Crockford in <a href='http://wiki.ecmascript.org/doku.php?id=es3.1:semicolon_insertion'>es3.1:semicolon_insertion</a>. Crockford said:</p>

<blockquote>
<p>Strong language in a spec is not likely to work. A carrot of better features that induce rewriting works better, but nothing is predictable.</p>
</blockquote>

<p>This &#8220;carrot&#8221; approach comes up frequently in the discussion of ECMAScript&#8217;s development, and it can be seen under the list of <em>Themes</em> in the index to the Harmony namespace at the ECMAScript Wiki: <a href='http://wiki.ecmascript.org/doku.php?id=harmony:harmony'>harmony:harmony</a>.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>When deciding on JavaScript style, the debate on whether to use semicolons will never end. Objectively we can say that:</p>

<ul>
<li>The tools to write client-side code without semicolons exist and are widely used</li>

<li>The specification explains how semicolon insertion works, and even includes concrete examples</li>

<li>Semicolons are going to stay around for a while</li>
</ul>

<p>Other languages have optional semicolons. Take Ruby for example: the community at large embraced writing code without semicolons. However, many JavaScript developers learned the language without the benefit of newer tools that help work safely without semicolons. Others are working with server-side JavaScript, running code on one platform rather than multiple browsers and meddling HTTP proxies. They&#8217;re able to embrace styles that were previously deemed &#8220;unsafe&#8221;.</p>

<p>The nature of the language is changing, so expect to see less semicolons in the future.</p>

<p>However, if you like the &#8220;machine&#8221;-like look of semicolons, and feel more comfortable expressing your intent by using them judiciously, then by all means use them!</p>

<p>Keep your style consistent, and enjoy writing JavaScript.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/18/node-roundup">Node Roundup: 0.7, Cromag, Servitude, Magician</a></h2>
      <div class="meta">
        <span class="date">18 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/18/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#date">date</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_07'>Node 0.7</h3>

<p><a href='http://blog.nodejs.org/2012/01/16/node-v0-7-0-unstable/'>Node 0.7.0</a> was announced on the Node blog, which marks the first release of the new unstable series:</p>

<blockquote>
<p>Almost all users will want to remain using the stable v0.6 releases</p>
</blockquote>

<p>This version includes experimental isolates support. There&#8217;s a lot of discussion on this in the <a href='http://groups.google.com/group/nodejs/browse_thread/thread/22db2d4e2711911d/6f7ef4fc5fdc49f3?#6f7ef4fc5fdc49f3'>Node v0.7.0 nodejs group</a> thread. Ben Noordhuis gave a brief overview:</p>

<blockquote>
<p>Isolates are (will be) API-compatible with child processes. So you call <code>child_process.fork({thread:true})</code> and it will spawn a new isolate instead a new process.</p>
</blockquote>

<p>Isolates are something that will crop up a lot more as Node heads towards 0.8, so it&#8217;s worth being aware of what they are and how they work.</p>

<h3 id='cromag'>Cromag</h3>

<p><a href='https://github.com/JerrySievert/cromagjs'>Cromag</a> (License: <em>MIT</em>, npm: <em>cromag</em>) by Jerry Sievert is named after the fact it doesn&#8217;t use monkey patching, unlike a lot of date libraries. We&#8217;ve recently seen some extremely solid date libraries, including <a href='http://arshaw.com/xdate/'>XDate</a>, and Cromag is another offering with a different API.</p>

<p>Cromag currently offers a slew of methods to manipulate dates and times, which are documented in the <a href='https://github.com/JerrySievert/cromagjs/blob/master/README.md'>Cromag readme</a>. The author has also included tests written with <a href='http://vowsjs.org/'>Vows</a>, so it should be fairly easy to hack and patch it.</p>

<h3 id='servitude'>Servitude</h3>

<p><a href='http://legitimatesounding.com/blog/Servitude_CSS_and_JavaScript_Injection_Sugar.html'>Servitude</a> (GitHub: <a href='https://github.com/JerrySievert/servitude'>JerrySievert / servitude</a>, License: <em>MIT/X11</em>, npm: <em>servitude</em>) also by Jerry Sievert, helps inject CSS and JavaScript into the DOM to cut down on requests. It can also optionally cache requests and mangle them with Uglify.</p>

<p>Jerry&#8217;s examples demonstrate Servitude being used with <a href='http://bricksjs.com/index.html'>Bricks</a> which is his Node web framework. Servitude&#8217;s plugin signature looks similar to Connect middleware, but I don&#8217;t think Bricks uses the same API for the <code>request</code> and <code>response</code> objects.</p>

<h3 id='magician'>Magician</h3>

<p><a href='https://github.com/vdemedes/magician'>Magician</a> (License: <em>MIT</em>, npm: <em>magician</em>) by Vadim Demedes is an <a href='http://www.imagemagick.org/script/index.php'>ImageMagick</a> library. The command-line ImageMagick libraries are required, but once they&#8217;re installed lots of image manipulation tools are possible from within your Node applications.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/17/jquery-roundup">jQuery Roundup: Jsonify, jquery-download, jqPagination</a></h2>
      <div class="meta">
        <span class="date">17 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/17/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#json">json</a>
          
            <a href="/tags.html#pagination">pagination</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jsonify'>Jsonify</h3>

<p><a href='https://github.com/jorgenhorstink/jsonify'>Jsonify</a> by Jorgen Horstink can serialize DOM elements into JSON through the use of HTML5 data attributes. The two attributes, <code>data-jsonify-name</code> and <code>data-jsonify-getter</code>, are used to map and process values as they&#8217;re serialized:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>.</span><span class='nx'>jsonify</span><span class='p'>({</span>
  <span class='nx'>getters</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>fruit</span><span class='o'>:</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>().</span><span class='nx'>toLowerCase</span><span class='p'>();</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Then <code>$(&#39;form&#39;).jsonify()</code> can be used to process a form with fields like this:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;span</span> <span class='na'>data-jsonify-name=</span><span class='s'>&quot;food.fruit[0].name&quot;</span> <span class='na'>data-jsonify-getter=</span><span class='s'>&quot;fruit&quot;</span><span class='nt'>&gt;</span>Orange<span class='nt'>&lt;/span&gt;</span>:
<span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;checkbox&quot;</span> <span class='na'>data-jsonify-name=</span><span class='s'>&quot;food.fruit[0].value&quot;</span> <span class='na'>value=</span><span class='s'>&quot;yes&quot;</span><span class='nt'>&gt;&lt;br&gt;</span>

<span class='nt'>&lt;span</span> <span class='na'>data-jsonify-name=</span><span class='s'>&quot;food.fruit[1].name&quot;</span> <span class='na'>data-jsonify-getter=</span><span class='s'>&quot;fruit&quot;</span><span class='nt'>&gt;</span>Banana<span class='nt'>&lt;/span&gt;</span>:
<span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;checkbox&quot;</span> <span class='na'>data-jsonify-name=</span><span class='s'>&quot;food.fruit[1].value&quot;</span> <span class='na'>value=</span><span class='s'>&quot;yes&quot;</span><span class='nt'>&gt;&lt;br&gt;</span>

<span class='nt'>&lt;span</span> <span class='na'>data-jsonify-name=</span><span class='s'>&quot;food.fruit[2].name&quot;</span> <span class='na'>data-jsonify-getter=</span><span class='s'>&quot;fruit&quot;</span><span class='nt'>&gt;</span>Strawberry<span class='nt'>&lt;/span&gt;</span>:
<span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;checkbox&quot;</span> <span class='na'>data-jsonify-name=</span><span class='s'>&quot;food.fruit[2].value&quot;</span> <span class='na'>value=</span><span class='s'>&quot;yes&quot;</span><span class='nt'>&gt;&lt;br&gt;</span>
</code></pre>
</div>
<h3 id='jquerydownload'>jquery-download</h3>

<p><img src='/images/posts/jquery-download.png' alt='jquery-download demo' /></p>

<p><a href='https://github.com/talos/jquery-download'>jquery-download</a> (License: BSD, Demo: <a href='http://talos.github.com/jquery-download/demo.html'>jquery-download demo</a>) by John Krauss allows the DOM, or parts of it, to be downloaded through <code>data:</code> URIs. The author&#8217;s demo has some SVG, so this plugin could be used to extract and download SVG as it&#8217;s edited.</p>

<p>The same author has a load of new stuff on GitHub at <a href='https://github.com/talos'>github.com/talos</a>.</p>

<h3 id='jqpagination'>jqPagination</h3>

<p><img src='/images/posts/jqpagination.png' alt='jqPagination screenshot' /></p>

<p><a href='http://beneverard.github.com/jqPagination/'>jqPagination</a> (GitHub: <a href='https://github.com/beneverard/jqPagination'>beneverard / jqPagination</a>, License: <em>GPL v3</em>) by Ben Everard is a different interface for pagination: next and previous selectors are displayed, but if the current page text is clicked then a page number can be entered. A callback gets the current page number when it&#8217;s changed:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.pagination&#39;</span><span class='p'>).</span><span class='nx'>jqPagination</span><span class='p'>({</span>
  <span class='nx'>paged</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>page</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// do something with the page variable</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>In the callback, anything could happen: the current location could be changed, or an Ajax method could load more content from a RESTful API. The author has included CSS as part of the plugin&#8217;s source.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/16/patterns-mobi-third">JavaScript Patterns, jQ.Mobi, Third-Party JavaScript</a></h2>
      <div class="meta">
        <span class="date">16 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/16/patterns-mobi-third/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#third-party">third-party</a>
          
            <a href="/tags.html#books">books</a>
          
            <a href="/tags.html#patterns">patterns</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='javascript_patterns'>JavaScript Patterns</h3>

<p>The <a href='http://shichuan.github.com/javascript-patterns/'>JavaScript Pattern Collection</a> (GitHub: <a href='https://github.com/shichuan/javascript-patterns'>shichuan / javascript-patterns</a>) by Shi Chuan is a collection of JavaScript patterns and anti-patterns including jQuery, functions, object literals and constructors, and object-oriented design patterns.</p>

<p>The jQuery patterns and anti-patterns are pretty good reading for anyone who writes plugins. The reasons for anti-pattern status are usually cited with a link to a post that covers why the technique is considered poor form. For example: <a href='https://github.com/shichuan/javascript-patterns/blob/master/jquery-patterns/universal-selector.html'>universal-selector.html</a> and <a href='https://github.com/shichuan/javascript-patterns/blob/master/jquery-patterns/requery.html'>requery.html</a>.</p>

<h3 id='jqmobi'>jQ.Mobi</h3>

<p><a href='http://jqmobi.com/'>jQ.Mobi</a> (GitHub: <a href='https://github.com/appMobi/jQ.Mobi'>appMobi / jQ.Mobi</a>, License: <em>MIT X11</em>) from appMobi is a framework aimed at HTML5 mobile browsers. According to the documentation, <code>jQ.Mobi</code>, is the &#8220;query selector&#8221; library. I thought this was confusing because surely a web framework that targets WebKit only has to wrap a small amount of functionality around <code>querySelectorAll</code>? In reality, this library includes most of what jQuery does: <code>$.map</code>, <code>$.each</code>, <code>$.fn</code>, css and attribute getters and setters, event handling, and even Ajax methods. There&#8217;s also a user interface library, and plugin support.</p>

<p>Each part of the library is presented as a monolithic file, and it doesn&#8217;t look like they&#8217;re built from smaller files. If this was my library, I&#8217;d split each of these files up into modules, with a build process that can output monolithic and minimised files. I&#8217;d also consider using the <a href='https://github.com/amdjs/amdjs-api/wiki/AMD'>Asynchronous Module Definition</a> specification to structure the library. It&#8217;s also slightly difficult to find the source &#8211; the homepage has a button that prompts for an email address, with a greyed out link to &#8220;No thanks, just get the code&#8221;.</p>

<p>The jQ.Mobi site claims that this is a rewrite of jQuery that targets WebKit mobile browsers, but we&#8217;ve already seen this several years ago at this point with libraries like <a href='http://zeptojs.com/'>Zepto</a>. And there are also mobile interface libraries that are compatible with both jQuery and Zepto, like <a href='http://jqtouch.com/'>jQTouch</a>, so I question the wisdom of coupling a jQuery clone with an interface library.</p>

<h3 id='writing_thirdparty_javascript_tutorial'>Writing Third-Party JavaScript Tutorial</h3>

<p><a href='http://blog.errorception.com/2012/01/writing-quality-third-party-js-part-1.html'>Writing Quality Third-Party JS</a> by Rakesh Pai from {errorception} is a tutorial series about writing third-party JavaScript. If you&#8217;re looking to scripts that run on other sites, like Disqus or Google Analytics, then this is an interesting read that covers the basics.</p>

<p><a href='http://thirdpartyjs.com/'>Third-party JavaScript The Book</a> by Ben Vinegar and Anton Kovalyov can also be bought as part of Manning&#8217;s Early Access Program for $35.99. It looks like it&#8217;ll be the most thorough coverage of this topic once it&#8217;s finished.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/13/screenshot-app-twss-tunnel-effect">Screenshot App, twss.js, WebGL Tunnel Tutorial</a></h2>
      <div class="meta">
        <span class="date">13 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/13/screenshot-app-twss-tunnel-effect/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='screenshot_app'>Screenshot App</h3>

<p><a href='https://github.com/visionmedia/screenshot-app'>Screenshot App</a> (License: <em>MIT</em>) by TJ Holowaychuk is an Express app that uses <a href='http://www.phantomjs.org/'>PhantomJS</a> to generate screenshots of web pages. It&#8217;s a small web service with a simple API that&#8217;ll return a PNG when called with a URL:</p>
<div class='highlight'><pre><code class='text'>curl -# http://localhost:3000/example.com &gt; example.com.png
</code></pre>
</div>
<p>This is a nice little example of an Express app. Like TJ&#8217;s other public apps, this one is structured around a lightweight <code>app.js</code> file, and then the HTTP methods are split into files in <code>routes/</code>. TJ defines the Express <code>app</code> object as a global, which means it&#8217;s visible inside the routes modules. There&#8217;s a lot to learn here if you&#8217;re an eager Express developer.</p>

<h3 id='twssjs'>twss.js</h3>

<p>Earlier this week a reader sent in <a href='https://github.com/DanielRapp/twss.js'>twss.js</a> (npm: <em>twss</em>, License: <em>MIT</em>) by Daniel Rapp, a classifier for Node that determines if a string can be replied with &#8220;that&#8217;s what she said&#8221;. I actually took a look at how it works, and rather than being a simple joke module, the author has actually attempted to build a <a href='http://en.wikipedia.org/wiki/Cross-validation_%28statistics%29#K-fold_cross-validation'>K-fold cross-validation</a> classifier. What&#8217;s even more hilarious is the module currently has 457 GitHub watchers.</p>

<p>The module includes data, so it&#8217;ll classify things out of the box:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>twss</span><span class='p'>.</span><span class='nx'>is</span><span class='p'>(</span><span class='s2'>&quot;You&#39;re not going fast enough!&quot;</span><span class='p'>);</span>   <span class='c1'>// true</span>
</code></pre>
</div>
<p>If you&#8217;re interested in classifiers, there are a few for Node &#8211; we&#8217;ve featured <a href='https://github.com/harthur/brain'>brain</a> (npm: <em>brain</em>, License: <em>MIT</em>) by Heather Arthur before.</p>

<h3 id='webgl_tunnel_tutorial'>WebGL Tunnel Tutorial</h3>

<p>I recently mentioned a <a href='http://jeromeetienne.github.com/tunnelgl/'>WebGL tunnel effect</a> created by Jerome Etienne. He&#8217;s now published his tutorial that explains how the demo works, in <a href='http://learningthreejs.com/blog/2012/01/11/tunnel-effect/'>Tunnel Effect for Your Demo</a>. By &#8220;demo&#8221; the title is referring to <a href='http://en.wikipedia.org/wiki/Demoscene'>demoscene</a> demos.</p>

<p>Amazingly, the source for the effect is only 20 lines.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/01/12/style">Programming Styles in the Node Community</a></h2>
      <div class="meta">
        <span class="date">12 Jan 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/01/12/style/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#style">style</a>
          
            <a href="/tags.html#language">language</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Programming style is where opinion and reason collide, often leading to endless arguments with no clear winner. The real secret to style is to be consistent, and respect other people: if you&#8217;re working on a project by another author, then follow their style. Some companies and open source projects may have their own in-house style guide, but it&#8217;s generally fairly easy to pick up the style of a project after browsing the source for long enough.</p>

<p>Why do I bring this up? Well, the Node community has several dominant styles, each with their own advantages. If you&#8217;re starting your own Node projects then you might like to use the style of a well-known developer for guidance of inspiration.</p>

<h3 id='tj_holowaychuk'>TJ Holowaychuk</h3>

<p>TJ Holowaychuk, author of Express, Jade, Stylus, and Mocha, has an extremely consistent style. TJ uses two spaces for indentation, semicolons to end lines, and formats commas at the start of a new line:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>connect</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;connect&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>Router</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./router&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>methods</span> <span class='o'>=</span> <span class='nx'>Router</span><span class='p'>.</span><span class='nx'>methods</span><span class='p'>.</span><span class='nx'>concat</span><span class='p'>(</span><span class='s1'>&#39;del&#39;</span><span class='p'>,</span> <span class='s1'>&#39;all&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>middleware</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./middleware&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>View</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./view&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>This practice is becoming more common in JavaScript, and the arguments for and against it vary. Isaac Z. Schlueter created a gist on the subject at <a href='https://gist.github.com/357981'>gist.github.com/357981</a> which grew into a heated debate that currently has 64 comments (since April 2010). It&#8217;s worth noting that TJ also carries this over to his JSON formatting, and generally only uses one <code>var</code> statement at the top of each new scope.</p>

<p>One of TJ&#8217;s more subtle stylistic habits is to remove the space before the opening brace of a method:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>exports</span><span class='p'>.</span><span class='nx'>parseQuality</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>str</span><span class='p'>){</span>
  <span class='c1'>// ...</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>When writing a <em>function</em>, however, he&#8217;ll usually retain the space:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>quality</span><span class='p'>(</span><span class='nx'>str</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>parts</span> <span class='o'>=</span> <span class='nx'>str</span><span class='p'>.</span><span class='nx'>split</span><span class='p'>(</span><span class='sr'>/ *; */</span><span class='p'>)</span>
    <span class='p'>,</span> <span class='nx'>val</span> <span class='o'>=</span> <span class='nx'>parts</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>];</span>

  <span class='kd'>var</span> <span class='nx'>q</span> <span class='o'>=</span> <span class='nx'>parts</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span>
    <span class='o'>?</span> <span class='nb'>parseFloat</span><span class='p'>(</span><span class='nx'>parts</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>].</span><span class='nx'>split</span><span class='p'>(</span><span class='sr'>/ *= */</span><span class='p'>)[</span><span class='mi'>1</span><span class='p'>])</span>
    <span class='o'>:</span> <span class='mi'>1</span><span class='p'>;</span>

  <span class='k'>return</span> <span class='p'>{</span> <span class='nx'>value</span><span class='o'>:</span> <span class='nx'>val</span><span class='p'>,</span> <span class='nx'>quality</span><span class='o'>:</span> <span class='nx'>q</span> <span class='p'>};</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Notice that the ternary operator is split across new lines as well, which can make longer expressions more readable.</p>

<p>TJ also uses double quotes sparingly as well. Most strings are written using single quotes.</p>

<p>TJ&#8217;s <a href='https://github.com/visionmedia/luna'>Luna</a> project isn&#8217;t related to JavaScript, but during development he made an interesting point: he likes the &#8220;machine-like&#8221; look of JavaScript&#8217;s operators. Some languages provide <code>and</code> instead (or as well as) <code>&amp;&amp;</code>, but TJ prefers the way operators like <code>&amp;&amp;</code> read:</p>

<blockquote>
<p>Personally I&#8217;m not a fan of &#8220;wordy&#8221; operators, aka <code>or and</code> for <code>|| &amp;&amp;</code>, etc, though again they can look ok within reason, but I find the &#8220;machine-like&#8221; look of operators provide a nice visual separation.</p>
</blockquote>

<p>I think the &#8220;visual separation&#8221; comment is interesting, because I find semicolons in JavaScript also provide visual separation, although other people may find this noisy.</p>

<h3 id='isaac_z_schlueter'> Isaac Z. Schlueter</h3>

<p><a href='http://blog.izs.me/'>Isaac Z. Schlueter</a>, author of <a href='http://npmjs.org/'>npm</a> (where would we be without it?) is outspoken about style and language &#8220;magic&#8221;. I enjoyed reading his post <a href='http://blog.izs.me/post/12604303054/experts-idiots-and-taste'>Experts, Idiots, and Taste</a>, and <a href='http://blog.izs.me/post/10213512387/javascript-is-not-web-assembly'>JavaScript is Not Web Assembly</a> is related to this. Isaac doesn&#8217;t like language &#8220;magic&#8221;. He&#8217;s pragmatic and keeps things simple. Let&#8217;s take a look at his coding style.</p>

<p>Like TJ, Isaac uses leading commas and two space indentation, and usually groups variables under one <code>var</code>. Functions are spaced out like this: <code>function help (args, cb) {</code>.</p>

<p>The biggest difference between TJ and Isaac is semicolons. Isaac doesn&#8217;t use them to end lines unless necessary:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>checkGit</span> <span class='p'>(</span><span class='nx'>folder</span><span class='p'>,</span> <span class='nx'>cb</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// if it&#39;s a git repo then don&#39;t touch it!</span>
  <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>lstat</span><span class='p'>(</span><span class='nx'>folder</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>er</span><span class='p'>,</span> <span class='nx'>s</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>er</span> <span class='o'>||</span> <span class='o'>!</span><span class='nx'>s</span><span class='p'>.</span><span class='nx'>isDirectory</span><span class='p'>())</span> <span class='k'>return</span> <span class='nx'>cb</span><span class='p'>()</span>
    <span class='k'>else</span> <span class='nx'>checkGit_</span><span class='p'>(</span><span class='nx'>folder</span><span class='p'>,</span> <span class='nx'>cb</span><span class='p'>)</span>
  <span class='p'>})</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Isaac has written a detailed explanation of this decision in <a href='http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding'>An Open Letter to JavaScript Leaders Regarding Semicolons</a>. He makes good points as to why semicolons can be left out, although admits that this style may only be slightly superior.</p>

<h3 id='ryan_dahl'>Ryan Dahl</h3>

<p><a href='http://tinyclouds.org/'>Ryan Dahl</a>, creator of Node, has a slightly different style yet again. Like TJ and Isaac, he uses two spaces for indentation. Conversely, he&#8217;ll use multiple var statements per-line:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>express</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;express&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>socketio</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;socket.io&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>bench</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./bench&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>This is from <a href='https://github.com/ry/d3bench/blob/master/server.js'>d3bench</a>, a small benchmarking app. He writes functions and methods with a single space: <code>io.sockets.on(&#39;connection&#39;, function(socket) {</code>. He doesn&#8217;t line up colons in object literals:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>r</span> <span class='o'>=</span> <span class='nx'>bench</span><span class='p'>.</span><span class='nx'>run</span><span class='p'>({</span>
  <span class='nx'>url</span><span class='o'>:</span> <span class='s2'>&quot;http://localhost:8000/buffer/12345&quot;</span><span class='p'>,</span>
  <span class='nx'>concurrency</span><span class='o'>:</span> <span class='mi'>10</span><span class='p'>,</span>
  <span class='nx'>requests</span><span class='o'>:</span> <span class='mi'>50000</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='deeper_style_choices'>Deeper Style Choices</h3>

<p>Indentation, semicolons, and other formatting topics are one side to coding style. Another is the choice of language features. Both TJ and Isaac use exceptions sparingly. Isaac is outspoken about exceptions:</p>

<blockquote>
<p>I have settled in the last few years on the sentiment that try/catch is a mistake, and an anti-pattern.</p>
</blockquote>

<p>This is from <a href='http://groups.google.com/group/nodejs/msg/6bbf436e5ff2a6e5'>try/catch/throw</a> on the Node Google Group.</p>

<p>TJ sometimes organises code into folders, with an <code>index.js</code> file, so a group of modules can be loaded with one <code>require</code>. <a href='https://github.com/visionmedia/express/tree/master/lib/router'>Router</a> in Express is an example of this. This technique removes a barrier from splitting up code into multiple files. Both authors also make heavy use of other Node modules, rather than reinventing their own solutions to common problems. The <a href='https://github.com/isaacs/npm/blob/master/package.json'>npm package.json</a> is a good example of this.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>Before starting a new project, it&#8217;s worth researching the programming styles used in the community of your chosen language and framework. Encourage the rest of your team to be consistent, even if they&#8217;re freelancers or contractors who have their own styles. The best comment I&#8217;ve read on how important it is to respect a project&#8217;s style is by Isaac:</p>

<blockquote>
<p>In your own house, you get to decide the styles and customs. But be aware that it might have an effect on who feels comfortable at your parties.</p>
</blockquote>

<p><a href='http://groups.google.com/group/nodejs/msg/428220ab8cd199d2'>Yes, it&#8217;s all FUD</a>, in reply to <a href='http://groups.google.com/group/nodejs/browse_thread/thread/3166a2bd54e2acf6/428220ab8cd199d2'>Actual drawbacks to omitting semi-colons?</a>.</p>

<p>References:</p>

<ul>
<li><a href='https://gist.github.com/357981'>gist.github.com/357981</a></li>

<li><a href='http://blog.izs.me/post/12604303054/experts-idiots-and-taste'>Experts, Idiots, and Taste</a></li>

<li><a href='http://blog.izs.me/post/10213512387/javascript-is-not-web-assembly'>JavaScript is Not Web Assembly</a></li>

<li><a href='http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding'>An Open Letter to JavaScript Leaders Regarding Semicolons</a></li>

<li><a href='https://github.com/ry/d3bench/blob/master/server.js'>d3bench</a></li>
</ul>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page32">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <strong>33</strong>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page34">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

