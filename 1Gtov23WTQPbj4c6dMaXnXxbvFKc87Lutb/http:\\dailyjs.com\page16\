http://dailyjs.com/page16/
HTTP/1.1 200 OK
Date: Tue, 22 Jul 2014 09:15:00 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Mon, 21 Jul 2014 18:13:30 GMT
ETag: "16c302-29209-4feb8106f2680"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 38730
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/27/cytoscape">Cytoscape.js</a></h2>
      <div class="meta">
        <span class="date">27 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/27/cytoscape/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#maths">maths</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/cytoscape.png' alt='Cytoscape' /></p>

<p><a href='http://cytoscape.github.io/cytoscape.js/'>Cytoscape.js</a> (GitHub: <a href='https://github.com/cytoscape/cytoscape.js'>cytoscape / cytoscape.js</a>, License: <em>LGPL</em>, npm: <a href='https://npmjs.org/package/cytoscape'>cytoscape</a>), developed at the Donnelly Centre at the University of Toronto by Max Franz, is a graph library that works with Node and browsers. This library is for working with &#8220;graphs&#8221; in the mathematical sense &#8211; interconnected sets of nodes connected by edges.</p>

<p>The API uses lots of sensible JavaScript idioms: it&#8217;s event-based, functions return objects so calls can be chained, JSON definitions of elements can be used, and nodes can be selected with selectors that are modelled on CSS selectors and jQuery&#8217;s API. That means you can query a graph with something like this: <code>cy.elements(&#39;node:locked, edge:selected&#39;)</code>.</p>

<p>Styling graphs is also handled in a natural manner:</p>

<blockquote>
<p>Graph style and data should be separate, and the library should provide core functionality with extensions adding functionality on top of the library.</p>
</blockquote>

<p>Max and several contributs have been working on the project for <a href='https://github.com/cytoscape/cytoscape.js/tree/ccb76539fb2cdcdaff8ee799b7faeda89d48f484'>two years now</a>, so it&#8217;s quite mature at this point. The project comes with detailed documentation, a build script, and a test suite written with QUnit.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/25/modulus">Node Hosting with Modulus</a></h2>
      <div class="meta">
        <span class="date">25 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/25/modulus/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#hosting">hosting</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/modulus.png' alt='Modulus' /></p>

<p><a href='https://modulus.io/'>Modulus.io</a> is a new hosting platform dedicated to Node. Why &#8220;platform&#8221;? Well, Modulus provides a complete stack for web application development: MongoDB is used for the database and file storage, and WebSockets are supported out of the box. Applications running on the Modulus stack get metrics &#8211; requests are logged and analysed in real-time. Horizontal scaling is supported by running multiple instances of your application.</p>

<p>Pricing is determined by the number of instances (servos) that you run, and storage used. The <a href='https://modulus.io/pricing'>Modulus pricing page</a> has some sliders, allowing you to see how much it&#8217;ll cost to run your application per-month.</p>

<p>I asked Modulus about using different versions of Node Node, as Heroku supports 0.4 to 0.10. However, at the time of writing only Node 0.8.15 is supported. Ghuffran Ali from Modulus said that they&#8217;re working on supporting multiple Node versions as soon as Monday (27th May), so <a href='http://blog.modulus.io/'>keep an eye on the Modulus blog</a> for details on that.</p>

<p>It&#8217;s easy to get started with Modulus &#8211; there&#8217;s a sample project, plus you can sign in with GitHub so it doesn&#8217;t take too much effort to get a basic application running. They&#8217;re also offering $15 free credit, so you could run something more substantial there to see how everything works.</p>

<p>Modulus uses a web-based interface for managing projects that allows various settings to be changed, like environmental variables, and a global SSL redirect. There&#8217;s also a command-line client &#8211; if you sign in with GitHub make sure you use <code>modulus login</code> with <code>-g</code> so you can sign in with your GitHub account.</p>

<p>On a related note, <a href='http://blog.nodejitsu.com/iriscouch-acquisition'>IrisCouch has joined Nodejitsu</a>. That means CouchDB and Redis are now both supported by Nodejitsu:</p>

<blockquote>
<p>This means that our users will be able to deploy their applications and databases from the same set of tools all backed by node.js. If youâ€™re an existing IrisCouch user you will be notified and given ample time to migrate your IrisCouch account into a Nodejitsu account.</p>
</blockquote>

<p>It&#8217;s impressive to see so much innovation in the Node hosting/PaaS space!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/23/angularjs-injection">AngularJS: More on Dependency Injection</a></h2>
      <div class="meta">
        <span class="date">23 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/23/angularjs-injection/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#angularfeeds">angularfeeds</a>
          
        </span>
      </div>
      <div class="preview">
        <p>In the <a href='http://dailyjs.com/tags#angularfeeds'>AngularJS tutorials</a> I&#8217;ve been writing, you might have noticed the use of dependency injection. In this article I&#8217;m going to explain how dependency injection works, and how it relates to the small tutorial project we&#8217;ve created.</p>

<p>Dependency injection is a software design pattern. The motivation for using it in Angular is to make it easier to transparently load mocked objects in tests. The <code>$http</code> module is a great example of this: when writing tests you don&#8217;t want to make real network calls, but defer the work to a fake object that responds with fixture data.</p>

<p>The earlier tutorials used dependency injection for this exact use case: in <a href='https://github.com/alexyoung/djsreader/blob/c9f9d06258f4973018a1cc48c226642bbb32938f/app/scripts/controllers/main.js#L3-L4'>main controller</a>, the <code>MainCtrl</code> module is set up to load the <code>$http</code> module which can then be transparently replaced during testing.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;djsreaderApp&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>controller</span><span class='p'>(</span><span class='s1'>&#39;MainCtrl&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>$scope</span><span class='p'>,</span> <span class='nx'>$http</span><span class='p'>,</span> <span class='nx'>$timeout</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Now forget everything I just said about dependency injection, and look at the callback that has been passed to <code>.controller</code> in the previous example. The <code>$http</code> and <code>$timeout</code> modules have been added by me because I want to use the <a href='http://docs.angularjs.org/api/ng.$http'>$http service</a> and the <a href='http://docs.angularjs.org/api/ng.$timeout'>$timeout service</a>. These are built-in &#8220;services&#8221; (an Angular term), but they&#8217;re not standard arguments. In fact, I could have specified these arguments in any order:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;djsreaderApp&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>controller</span><span class='p'>(</span><span class='s1'>&#39;MainCtrl&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>$scope</span><span class='p'>,</span> <span class='nx'>$timeout</span><span class='p'>,</span> <span class='nx'>$http</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>This is possible because Angular looks at the function argument <em>names</em> to load dependencies. Before you run away screaming about magic, it&#8217;s important to realise that this is just one way to load dependencies in Angular projects. For example, this is equivalent:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;djsreaderApp&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>controller</span><span class='p'>(</span><span class='s1'>&#39;MainCtrl&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;$scope&#39;</span><span class='p'>,</span> <span class='s1'>&#39;$http&#39;</span><span class='p'>,</span> <span class='s1'>&#39;$timeout&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>$scope</span><span class='p'>,</span> <span class='nx'>$http</span><span class='p'>,</span> <span class='nx'>$timeout</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>The array-based style is more like <a href='https://github.com/amdjs/amdjs-api/wiki/AMD'>AMD</a>, and requires a little bit of syntactical overhead. I call the first style &#8220;introspective dependency injection&#8221;. The array-based syntax allows us to use different names for the dependencies, which can be useful sometimes.</p>

<p>This raises the question: how does introspective dependency injection cope with minimisers, where variables are renamed to shorter values? Well, it doesn&#8217;t cope with it at all. In fact, minimisers need help to translate the first style to the second.</p>

<h3 id='yeoman_and_ngmin'>Yeoman and ngmin</h3>

<p>One reason I built the tutorial series with <a href='http://yeoman.io/'>Yeoman</a> was because the Angular generator includes <a href='https://github.com/btford/grunt-ngmin'>grunt-ngmin</a>. This is a <a href='http://gruntjs.com/'>Grunt</a> task that uses <a href='https://github.com/btford/ngmin'>ngmin</a> &#8211; an Angular-aware &#8220;pre-minifier&#8221;. It allows you to use the shorter, introspective dependency injection syntax, while still generating valid minimised production builds.</p>

<p>Therefore, building a production version of <a href='https://github.com/alexyoung/djsreader'>djsreader</a> with <code>grunt build</code> will correctly generate a deployable version of the project.</p>

<p>Why is it that almost all of Angular&#8217;s documentation and tutorials include the potentially dangerous introspective dependency injection syntax? I&#8217;m not sure, and I haven&#8217;t looked into it. I&#8217;d be happier if the only valid solution was the array-based approach, which looks more like AMD which most of us are already comfortable with anyway.</p>

<p>Just to prove I&#8217;m not making things up, here is the minimised source for djsreader:</p>
<div class='highlight'><pre><code class='javascript'><span class='s2'>&quot;use strict&quot;</span><span class='p'>;</span><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s2'>&quot;djsreaderApp&quot;</span><span class='p'>,[]).</span><span class='nx'>config</span><span class='p'>([</span><span class='s2'>&quot;$routeProvider&quot;</span><span class='p'>,</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>){</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>when</span><span class='p'>(</span><span class='s2'>&quot;/&quot;</span><span class='p'>,{</span><span class='nx'>templateUrl</span><span class='o'>:</span><span class='s2'>&quot;views/main.html&quot;</span><span class='p'>,</span><span class='nx'>controller</span><span class='o'>:</span><span class='s2'>&quot;MainCtrl&quot;</span><span class='p'>}).</span><span class='nx'>otherwise</span><span class='p'>({</span><span class='nx'>redirectTo</span><span class='o'>:</span><span class='s2'>&quot;/&quot;</span><span class='p'>})}]),</span><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s2'>&quot;djsreaderApp&quot;</span><span class='p'>).</span><span class='nx'>controller</span><span class='p'>(</span><span class='s2'>&quot;MainCtrl&quot;</span><span class='p'>,[</span><span class='s2'>&quot;$scope&quot;</span><span class='p'>,</span><span class='s2'>&quot;$http&quot;</span><span class='p'>,</span><span class='s2'>&quot;$timeout&quot;</span><span class='p'>,</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>,</span><span class='nx'>r</span><span class='p'>,</span><span class='nx'>t</span><span class='p'>){</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>refreshInterval</span><span class='o'>=</span><span class='mi'>60</span><span class='p'>,</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>feeds</span><span class='o'>=</span><span class='p'>[{</span><span class='nx'>url</span><span class='o'>:</span><span class='s2'>&quot;http://dailyjs.com/atom.xml&quot;</span><span class='p'>}],</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>fetchFeed</span><span class='o'>=</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>){</span><span class='nx'>n</span><span class='p'>.</span><span class='nx'>items</span><span class='o'>=</span><span class='p'>[];</span><span class='kd'>var</span> <span class='nx'>o</span><span class='o'>=</span><span class='s2'>&quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20xml%20where%20url%3D&#39;&quot;</span><span class='p'>;</span><span class='nx'>o</span><span class='o'>+=</span><span class='nb'>encodeURIComponent</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>),</span><span class='nx'>o</span><span class='o'>+=</span><span class='s2'>&quot;&#39;%20and%20itemPath%3D&#39;feed.entry&#39;&amp;format=json&amp;diagnostics=true&amp;callback=JSON_CALLBACK&quot;</span><span class='p'>,</span><span class='nx'>r</span><span class='p'>.</span><span class='nx'>jsonp</span><span class='p'>(</span><span class='nx'>o</span><span class='p'>).</span><span class='nx'>success</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>){</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>query</span><span class='p'>.</span><span class='nx'>results</span><span class='o'>&amp;&amp;</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>.</span><span class='nx'>items</span><span class='o'>=</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>query</span><span class='p'>.</span><span class='nx'>results</span><span class='p'>.</span><span class='nx'>entry</span><span class='p'>)}).</span><span class='nx'>error</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>){</span><span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s2'>&quot;Error fetching feed:&quot;</span><span class='p'>,</span><span class='nx'>e</span><span class='p'>)}),</span><span class='nx'>t</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(){</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>fetchFeed</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)},</span><span class='mi'>1</span><span class='nx'>e3</span><span class='o'>*</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>refreshInterval</span><span class='p'>)},</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>addFeed</span><span class='o'>=</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>r</span><span class='p'>){</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>r</span><span class='p'>),</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>fetchFeed</span><span class='p'>(</span><span class='nx'>r</span><span class='p'>),</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>newFeed</span><span class='o'>=</span><span class='p'>{}},</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>deleteFeed</span><span class='o'>=</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>r</span><span class='p'>){</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>splice</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>indexOf</span><span class='p'>(</span><span class='nx'>r</span><span class='p'>),</span><span class='mi'>1</span><span class='p'>)},</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>fetchFeed</span><span class='p'>(</span><span class='nx'>e</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>])}]);</span>
</code></pre>
</div>
<p>The demangled version shows that we&#8217;re using the array-based syntax, thanks to ngmin:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s2'>&quot;djsreaderApp&quot;</span><span class='p'>).</span><span class='nx'>controller</span><span class='p'>(</span><span class='s2'>&quot;MainCtrl&quot;</span><span class='p'>,</span> <span class='p'>[</span><span class='s2'>&quot;$scope&quot;</span><span class='p'>,</span> <span class='s2'>&quot;$http&quot;</span><span class='p'>,</span> <span class='s2'>&quot;$timeout&quot;</span><span class='p'>,</span>
</code></pre>
</div>
<h3 id='internals'>Internals</h3>

<p>In case you&#8217;re wondering how the introspective dependency injection style works, then look no further than <a href='https://github.com/angular/angular.js/blob/0272240400d7896224f34b9f10b492994e29c655/src/auto/injector.js#L45-L71'>annotate(fn)</a>. This function uses <code>Function.prototype.toString</code> to extract the argument names from the JavaScript source code. The results are effectively cached, so even though this sounds horrible it doesn&#8217;t perform as badly as it could.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>Nothing I&#8217;ve said here is new &#8211; while researching this post I found <a href='http://www.alexrothenberg.com/2013/02/11/the-magic-behind-angularjs-dependency-injection.html'>The Magic Behind Dependency Injection</a> by Alex Rothenberg, which covers the same topic, and the <a href='http://docs.angularjs.org/guide/di'>Angular Dependency Injection documentation</a> outlines the issues caused by the introspective approach and suggests that it should only be used for <a href='http://www.pretotyping.org/'>pretotyping</a>.</p>

<p>However, I felt like it was worth writing an overview of the matter, because although Yeoman is great for a quick start to a project, you really need to understand what&#8217;s going on behind the scenes!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/22/node-roundup">Node Roundup: 0.10.7, JSON Editor, puid, node-mac</a></h2>
      <div class="meta">
        <span class="date">22 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/22/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#mac">mac</a>
          
            <a href="/tags.html#windows">windows</a>
          
            <a href="/tags.html#json">json</a>
          
            <a href="/tags.html#uuid">uuid</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='node_0107'>Node 0.10.7</h3>

<p><a href='http://blog.nodejs.org/2013/05/17/node-v0-10-7-stable/'>Node 0.10.7</a> was released last week. This version includes fixes for the buffer and crypto modules, and timers. The buffer/crypto fix relates to encoding issues that could crash Node: <a href='https://github.com/joyent/node/issues/5482'>#5482</a>.</p>

<h3 id='json_editor_online'>JSON Editor Online</h3>

<p><img src='/images/posts/jsoneditoronline.png' alt='JSON Editor Online' /></p>

<p><a href='http://jsoneditoronline.org/'>JSON Editor Online</a> (GitHub: <a href='https://github.com/josdejong/jsoneditor/'>josdejong / jsoneditor</a>, License: <em>Apache 2.0</em>, npm: <a href='https://npmjs.org/package/jsoneditor'>jsoneditor</a>, bower: <em>jsoneditor</em>) by Jos de Jong is a web-based JSON editor. It uses Node for building the project, but it&#8217;s actually 100% web-based. It uses the <a href='http://ace.ajax.org/#nav=about'>Ace</a> editor, and includes features for searching and sorting JSON.</p>

<p>It&#8217;s installable with Bower, so you could technically use it as a component and embed it into another project.</p>

<h3 id='englishtime'>english-time</h3>

<p>Azer KoÃ§ulu sent in a bunch of new modules again, and one I picked out this time was english-time (GitHub: <a href='https://github.com/azer/english-time'>azer / english-time</a>, License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/english-time'>english-time</a>). He&#8217;s using it with some of the CLI tools he&#8217;s written, so rather than specifying a date in an ISO format users can express durations in English.</p>

<p>The module currently supports milliseconds, seconds, minutes, hours, days, weeks, and shortened expressions based on combinations of these. For example, <code>3 weeks, 5d 6h</code> would work.</p>

<h3 id='puid'>puid</h3>

<p>puid (GitHub: <a href='https://github.com/pid/puid'>pid / puid</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/puid'>puid</a>) by Sascha Droste can generate unique IDs suitable for use in a distributed system. The IDs are based on time, machine, and process, and can be 24, 14, or 12 characters long.</p>

<p>Each ID is comprised of an encoded timestamp, machine ID, process ID, and a counter. The counter is based on nanoseconds, and the machine ID is based on the network interface ID or the machine&#8217;s hostname.</p>

<h3 id='nodemac'>node-mac</h3>

<p><a href='https://github.com/coreybutler/node-windows'>node-windows</a> provides integration for Windows-specific services, like creating daemons and writing to <code>eventlog</code>. The creator of node-windows, Corey Butler, has also released <a href='http://coreybutler.github.io/node-mac/manual/'>node-mac</a> (GitHub: <a href='https://github.com/coreybutler/node-mac'>coreybutler / node-mac</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/node-mac'>node-mac</a>). This supports Mac-friendly daemonisation and logging.</p>

<p>Services can be created using an event-based API:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Service</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;node-mac&#39;</span><span class='p'>).</span><span class='nx'>Service</span><span class='p'>;</span>

<span class='c1'>// Create a new service object</span>
<span class='kd'>var</span> <span class='nx'>svc</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Service</span><span class='p'>({</span>
  <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Hello World&#39;</span><span class='p'>,</span>
  <span class='nx'>description</span><span class='o'>:</span> <span class='s1'>&#39;The nodejs.org example web server.&#39;</span><span class='p'>,</span>
  <span class='nx'>script</span><span class='o'>:</span> <span class='s1'>&#39;/path/to/helloworld.js&#39;</span><span class='p'>)</span>
<span class='p'>});</span>

<span class='c1'>// Listen for the &quot;install&quot; event, which indicates the</span>
<span class='c1'>// process is available as a service.</span>
<span class='nx'>svc</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;install&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>svc</span><span class='p'>.</span><span class='nx'>start</span><span class='p'>();</span>
<span class='p'>});</span>

<span class='nx'>svc</span><span class='p'>.</span><span class='nx'>install</span><span class='p'>();</span>
</code></pre>
</div>
<p>It also supports service removal, and event logging.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/21/jquery-roundup">jQuery Roundup: Anchorify.js, Minimalect</a></h2>
      <div class="meta">
        <span class="date">21 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/21/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#select">select</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='anchorifyjs'>Anchorify.js</h3>

<p><a href='http://plugins.jquery.com/anchorify/'>Anchorify.js</a> (GitHub: <a href='https://github.com/willdurand/anchorify.js'>willdurand / anchorify.js</a>, License: <em>MIT</em>) by William Durand automatically inserts unique anchored headings. The default markup is an anchor with a pilcrow sign, but this can be overridden if desired.</p>

<p>Even though the plugin is relatively simple, William has included QUnit tests and put the project up on jQuery&#8217;s new plugin site.</p>

<h3 id='minimalect'>Minimalect</h3>

<p><a href='http://groenroos.github.io/minimalect/'>Minimalect</a> (GitHub: <a href='https://github.com/groenroos/minimalect'>groenroos / minimalect</a>, License: <em>MIT</em>) by Oskari Groenroos is a <code>select</code> element replacement that supports optgroups, searching, keyboard navigation, and themes. It comes with two themes that are intentionally simple, allowing you to easily customise them using CSS, and no images are required by default.</p>

<p>Options include placeholder text, a message when no search results are found, class name overrides, and lifecycle callbacks.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/20/terminology-modules">Terminology: Modules</a></h2>
      <div class="meta">
        <span class="date">20 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/20/terminology-modules/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#commonjs">commonjs</a>
          
            <a href="/tags.html#amd">amd</a>
          
            <a href="/tags.html#terminology">terminology</a>
          
            <a href="/tags.html#basics">basics</a>
          
            <a href="/tags.html#js101">js101</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Learning modern modular frameworks like <a href='http://backbonejs.org/'>Backbone.js</a> and <a href='http://angularjs.org/'>AngularJS</a> involves mastering a large amount of terminology, even just to understand a <em>Hello, World</em> application. With that in mind, I wanted to take a break from higher-level libraries to answer the question: what is a module?</p>

<h3 id='the_background_story'>The Background Story</h3>

<p>Client-side development has always been rife with techniques for patching missing behaviour in browsers. Even the humble <code>&lt;script&gt;</code> tag has been cajoled and beaten into submission to give us alternative ways to load scripts.</p>

<p>It all started with concatenation. Rather than loading many scripts on a page, they are instead joined together to form a single file, and perhaps minimised. One school of thought was that this is more efficient, because a long HTTP request will ultimately perform better than many smaller requests.</p>

<p>That makes a lot of sense when loading libraries &#8211; things that you want to be globally available. However, when writing your own code it somehow feels wrong to place objects and functions at the top level (the global scope).</p>

<p>If you&#8217;re working with jQuery, you might organise your own code like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>function</span> <span class='nx'>MyConstructor</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='p'>}</span>

  <span class='nx'>MyConstructor</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
    <span class='nx'>myMethod</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='p'>}</span>
  <span class='p'>};</span>

  <span class='kd'>var</span> <span class='nx'>instance</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>MyConstructor</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>That neatly tucks everything away while also only running the code when the DOM is ready. That&#8217;s great for a few weeks, until the file is bustling with dozens of objects and functions. That&#8217;s when it seems like this monolithic file would benefit from being split up into multiple files.</p>

<p>To avoid the pitfalls caused by large files, we can split them up, then load them with <code>&lt;script&gt;</code> tags. The scripts can be placed at the end of the document, causing them to be loaded after the majority of the document has been parsed.</p>

<p>At this point we&#8217;re back to the original problem: we&#8217;re loading perhaps dozens of <code>&lt;script&gt;</code> tags inefficiently. Also, scripts are unable to express dependencies between each other. If dependencies between scripts can be expressed, then they can be shared between projects and loaded on demand more intelligently.</p>

<h3 id='loading_optimising_and_dependencies'>Loading, Optimising, and Dependencies</h3>

<p>The <code>&lt;script&gt;</code> tag itself has an <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async'>async attribute</a>. This helps indicate which scripts can be loaded asynchronously, potentially decreasing the time the browser blocks when loading resources. If we&#8217;re going to use an API to somehow express dependencies between scripts <em>and</em> load them quickly, then it should load scripts asynchronously when possible.</p>

<p>Five years ago this was surprisingly complicated, mainly due to legacy browsers. Then solutions like <a href='http://requirejs.org/'>RequireJS</a> appeared. Not only did RequireJS allow scripts to be loaded programmatically, but it also had an optimiser that could concatenate and minimise files. The lines between loading scripts, managing dependencies, and file optmisation are inherently blurred.</p>

<h3 id='amd'>AMD</h3>

<p>The problem with loading scripts is it&#8217;s asynchronous: there&#8217;s no way to say <code>load(&#39;/script.js&#39;)</code> and have code that uses <code>script.js</code> directly afterwards. The <a href='http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition'>CommonJS Modules/AsynchronousDefinition</a>, which became <a href='https://github.com/amdjs/amdjs-api/wiki/AMD'>AMD</a> (Asynchronous Module Definition), was designed to get around this. Rather than trying to create the illusion that scripts can be loaded synchronously, <em>all</em> scripts are wrapped in a function called <code>define</code>. This is a global function inserted by a suitable AMD implementation, like RequireJS.</p>

<p>The <code>define</code> function can be used to safely namespace code, express dependencies, and give the module a name (id) so it can be registered and loaded. Module names are &#8220;resolved&#8221; to script names using a well-defined format.</p>

<p>Although this means every module you write must be wrapped in a call to <code>define</code>, the authors of RequireJS realised it meant that build tools could easily interpret dependencies and generate optimised builds. So your development code can use RequireJS&#8217;s client-side library to load the necessary scripts, then your production version can preload all scripts in one go, without having to change your HTML templates (<code>r.js</code> is used to do this in practice).</p>

<h3 id='commonjs'>CommonJS</h3>

<p>Meanwhile, Node was becoming popular. Node&#8217;s module system is characterised by using the <code>require</code> statement to <em>return</em> a value that contains the module:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>User</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;models/user&#39;</span><span class='p'>);</span>
<span class='nx'>User</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>
</code></pre>
</div>
<p>Can you imagine if every Node module had to be wrapped in a call to <code>define</code>? It might seem like an acceptable trade-off in client-side code, but it would feel like too much boilerplate in server-side scripting when compared to languages like Python.</p>

<p>There have been many projects to make this work in browsers. Most use a build tool to load all of the modules referenced by <code>require</code> up front &#8211; they&#8217;re stored in memory so <code>require</code> can simply return them, creating the illusion that scripts are being loaded synchronously.</p>

<p>Whenever you see <code>require</code> and <code>exports</code> you&#8217;re looking at <a href='http://wiki.commonjs.org/wiki/Modules/1.1'>CommonJS Modules/1.1</a>. You&#8217;ll see this referred to as &#8220;CommonJS&#8221;.</p>

<p>Now you&#8217;ve seen CommonJS modules, AMD, and where they came from, how are they being used by modern frameworks?</p>

<h3 id='modules_in_the_wild'>Modules in the Wild</h3>

<p><a href='http://dojotoolkit.org/documentation/tutorials/1.7/modules/'>Dojo uses AMD internally</a> and for creating your own modules. It didn&#8217;t originally &#8211; it used to have its own module system. Dojo adopted AMD early on.</p>

<p><a href='http://docs.angularjs.org/guide/module'>AngularJS</a> uses its own module system that looks a lot like AMD, but with adaptations to support <a href='http://docs.angularjs.org/guide/di'>dependency injection</a>.</p>

<p>RequireJS supports AMD, but it can load scripts and other resources without wrapping them in <code>define</code>. For example, a dependency between your own well-defined modules and a jQuery plugin that doesn&#8217;t use AMD can be defined by using suitable configuration options when setting up RequireJS.</p>

<p>There&#8217;s still a disparity between development and production builds. Even though RequireJS can be used to create serverless single page applications, most people still use a lightweight development server that serves raw JavaScript files, before deploying concatenated and minimised production builds.</p>

<p>The need for script loading and building, <em>and</em> tailoring for various environments (typically development, test, and production) has resulted in a new class of projects. <a href='http://yeoman.io/'>Yeoman</a> is a good example of this: it uses Grunt for managing builds and running a development server, Bower for defining the source of dependencies so they can be fetched, and then RequireJS for loading and managing dependencies in the browser. Yeoman generates skeleton projects that set up development and build environments so you can focus on writing code.</p>

<p>Hopefully now you know all about client-side modules, so the next time you hear <em>RequireJS</em>, <em>AMD</em>, or <em>CommonJS</em>, you know what people are talking about!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/17/c64-pdf-projections">Impossible Mission, Full-Text Indexing, Backbone.Projections</a></h2>
      <div class="meta">
        <span class="date">17 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/17/c64-pdf-projections/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#pdf">pdf</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='impossible_mission'>Impossible Mission</h3>

<p><img src='/images/posts/c64-impossible-mission.png' alt='Impossible Mission' /></p>

<p><a href='http://impossible-mission.krissz.hu/'>Impossible Mission</a> by KrisztiÃ¡n TÃ³th is a JavaScript remake of the C64 classic. You can view the source to see how it all works, if things like <code>this.dieByZapFrames</code> and <code>this.searchedFurniture</code> sound appealing to you.</p>

<p>KrisztiÃ¡n previously sent in <a href='http://dailyjs.com/2012/04/06/toth-xregexp-plastron/'>Boulder Dash and Wizard of Wor</a> which were similar remakes written using the same approach.</p>

<h3 id='clientside_fulltext_indexing'>Client-Side Full-Text Indexing</h3>

<p>Gary Sieling sent in a post he wrote about full-text indexing with client-side JavaScript, in which he looks at PDF.js and Lunr: <a href='http://garysieling.com/blog/building-a-full-text-index-in-javascript'>Building a Full-Text Index in JavaScript</a>. I <a href='http://dailyjs.com/2013/03/01/localstorage-lunr-vlug/'>briefly mentioned Lunr</a> by Oliver Nightingale back in March.</p>

<blockquote>
<p>One great thing about this type of index is that the work can be done in parallel and then combined as a map-reduce job. Only three entries from the above object need to be combined, as &#8220;fields&#8221; and &#8220;pipeline&#8221; are static.</p>
</blockquote>

<h3 id='backboneprojections'>Backbone.Projections</h3>

<p>In relational databases, a projection is a subset of available data. <a href='http://andreypopp.com/posts/2013-05-15-projections-for-backbone-collections.html'>Backbone.Projections</a> (GitHub: <a href='https://github.com/andreypopp/backbone.projections'>andreypopp / backbone.projections</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/backbone.projections'>backbone.projections</a>) by Andrey Popp is the equivalent for Backbone collections &#8211; they allow a transformed subset of values in a collection can be represented and synced.</p>

<p>The supported projections are <code>Capped</code> and <code>Filtered</code>. Capped collections are limited based on a size and function &#8211; the function will be used to order the results prior to truncating them. Filtered projections filter out results based on a function that returns a boolean.</p>

<p>Projections can be composed by passing one project to another. This example creates a <code>Filtered</code> projection, and then passes it to a <code>Capped</code> projection to limit and order the results:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>todaysPosts</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Filtered</span><span class='p'>(</span><span class='nx'>posts</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>filter</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>post</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>post</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;date&#39;</span><span class='p'>).</span><span class='nx'>isToday</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>topTodaysPosts</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Capped</span><span class='p'>(</span><span class='nx'>todaysPosts</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>cap</span><span class='o'>:</span> <span class='mi'>5</span><span class='p'>,</span>
  <span class='nx'>comparator</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>post</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>post</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;likes&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The author has written unit tests with Mocha, and documentation is available in the readme.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/16/angularjs-5">AngularJS: Tests</a></h2>
      <div class="meta">
        <span class="date">16 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/16/angularjs-5/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#angularfeeds">angularfeeds</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2013/04/11/angularjs-1/'>Part 1: Google, Twitter, and AngularJS</a></li>
  <li><a href='http://dailyjs.com/2013/04/18/angularjs-2/'>Part 2: Let's Make a Feed Reader</a></li>
  <li><a href='http://dailyjs.com/2013/04/25/angularjs-3/'>Part 3: Rendering Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/09/angularjs-4/'>Part 4: Managing Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/16/angularjs-5/'><strong>Part 5: Tests</strong></a></li>
  <li><a href='http://dailyjs.com/2013/05/30/angularjs-6/'>Part 6: Adding Dependencies</a></li>
  <li><a href='http://dailyjs.com/2013/06/06/angularjs-7/'>Part 7: Form Validation</a></li>
  <li><a href='http://dailyjs.com/2013/06/13/angularjs-8/'>Part 8: Iterators and Data</a></li>
  <li><a href='http://dailyjs.com/2013/07/18/angularjs-9/'>Part 9: Installation</a></li>
</ul>
<h3 id='previously'>Previously</h3>

<p>In the <a href='http://dailyjs.com/2013/05/09/angularjs-4/'>last part</a> we changed the app to support multiple feeds.</p>

<p>This week you&#8217;ll learn how to write a short unit test to test the app&#8217;s main controller. This will involve mocking data.</p>

<p>If you get stuck at any part of this tutorial, check out the full source here: <a href='https://github.com/alexyoung/djsreader/commit/7b4bda96b787b7707582567db927f12cc80c5d27'>commit 7b4bda</a>.</p>

<h3 id='neat_and_tidy_tests'>Neat and Tidy Tests</h3>

<p>The goal of this tutorial is to demonstrate one method for writing neat and tidy tests. Ideally mocked data should be stored in separate files and loaded when required. What we absolutely don&#8217;t want is global variables littering memory.</p>

<p>To run tests with the Yeoman-generated app we&#8217;ve been working on, type <code>grunt test</code>. It&#8217;ll use <a href='http://karma-runner.github.io'>Karma</a> and <a href='http://pivotal.github.io/jasmine/'>Jasmine</a> to run tests through Chrome using WebSockets. The workflow in the console is effortless, despite Chrome appearing and disappearing in the background (it won&#8217;t trample on your existing Chrome session, it&#8217;ll make a separate process). It doesn&#8217;t steal focus away, which means you can invoke tests and continue working on code without getting interrupted.</p>
<div class='image'>
  <img src='/images/posts/djsreader-5-1.png' />
  <small>My workflow: mock, controller, test, and a terminal for running tests</small>
</div>
<p>The basic approach is to use <code>$httpBackend.whenJSONP</code> to tell AngularJS to return some mock data when the tests are run, instead of fetching the real feed data from Yahoo. That sounds simple enough, but there&#8217;s a slight compilation: leaving mock data in the test sucks. So, what do we do about this? The <code>karma.conf.js</code> file that was created for us by the Yeoman generator contains a line for loading files from a mocks directory: <code>&#39;test/mock/**/*.js</code>. These will be loaded <em>before</em> the tests, so let&#8217;s dump some JSON in there.</p>

<p>Interestingly, if you run <code>grunt test</code> right now it&#8217;ll fail, because the app makes a JSONP request, and the angular-mocks library will flag this as an error. Using <code>$httpBackend.whenJSONP</code> will fix this.</p>

<h3 id='json_mocks'>JSON Mocks</h3>

<p>Open a file called <code>test/mock/feed.js</code> (you&#8217;ll need to <code>mkdir test/mock</code> first), then add this:</p>
<div class='highlight'><pre><code class='javascript'><span class='s1'>&#39;use strict&#39;</span><span class='p'>;</span>

<span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;mockedFeed&#39;</span><span class='p'>,</span> <span class='p'>[])</span>
  <span class='p'>.</span><span class='nx'>value</span><span class='p'>(</span><span class='s1'>&#39;defaultJSON&#39;</span><span class='p'>,</span> <span class='p'>{</span>
    <span class='nx'>query</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>count</span><span class='o'>:</span> <span class='mi'>2</span><span class='p'>,</span>
      <span class='nx'>created</span><span class='o'>:</span> <span class='s1'>&#39;2013-05-16T15:01:31Z&#39;</span><span class='p'>,</span>
      <span class='nx'>lang</span><span class='o'>:</span> <span class='s1'>&#39;en-US&#39;</span><span class='p'>,</span>
      <span class='nx'>results</span><span class='o'>:</span> <span class='p'>{</span>
        <span class='nx'>entry</span><span class='o'>:</span> <span class='p'>[</span>
          <span class='p'>{</span>
            <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;Node Roundup: 0.11.2, 0.10.6, subscribe, Omelette&#39;</span><span class='p'>,</span>
            <span class='nx'>link</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>href</span><span class='o'>:</span> <span class='s1'>&#39;http://dailyjs.com/2013/05/15/node-roundup&#39;</span> <span class='p'>},</span>
            <span class='nx'>updated</span><span class='o'>:</span> <span class='s1'>&#39;2013-05-15T00:00:00+01:00&#39;</span><span class='p'>,</span>
            <span class='nx'>id</span><span class='o'>:</span> <span class='s1'>&#39;http://dailyjs.com/2013/05/15/node-roundup&#39;</span><span class='p'>,</span>
            <span class='nx'>content</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;html&#39;</span><span class='p'>,</span> <span class='nx'>content</span><span class='o'>:</span> <span class='s1'>&#39;example&#39;</span> <span class='p'>}</span>
          <span class='p'>},</span>
          <span class='p'>{</span>
            <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;jQuery Roundup: 1.10, jquery-markup, zelect&#39;</span><span class='p'>,</span>
            <span class='nx'>link</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>href</span><span class='o'>:</span> <span class='s1'>&#39;http://dailyjs.com/2013/05/14/jquery-roundup&#39;</span> <span class='p'>},</span>
            <span class='nx'>updated</span><span class='o'>:</span> <span class='s1'>&#39;2013-05-14T00:00:00+01:00&#39;</span><span class='p'>,</span>
            <span class='nx'>id</span><span class='o'>:</span> <span class='s1'>&#39;http://dailyjs.com/2013/05/14/jquery-roundup&#39;</span><span class='p'>,</span>
            <span class='nx'>content</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;html&#39;</span><span class='p'>,</span> <span class='nx'>content</span><span class='o'>:</span> <span class='s1'>&#39;example 2&#39;</span> <span class='p'>}</span>
          <span class='p'>}</span>
        <span class='p'>]</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
</code></pre>
</div>
<p>This uses <code>angular.module().value</code> to set a value that contains some JSON. I derived this JSON from Yahoo&#8217;s API by running the app and looking at the network traffic in WebKit Inspector, then edited out the <code>content</code> properties because they were huge (DailyJS has full articles in feeds).</p>

<h3 id='loading_the_mocked_value'>Loading the Mocked Value</h3>

<p>Open <code>test/spec/controllers/main.js</code> and change the first <code>beforeEach</code> to load <code>mockedFeed</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>beforeEach</span><span class='p'>(</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;djsreaderApp&#39;</span><span class='p'>,</span> <span class='s1'>&#39;mockedFeed&#39;</span><span class='p'>));</span>
</code></pre>
</div>
<p>The <code>beforeEach</code> method is provided by Jasmine, and will make the specified function run before each test. Now the <code>defaultJSON</code> value can be injected, along with the HTTP backend:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>MainCtrl</span><span class='p'>,</span> <span class='nx'>scope</span><span class='p'>,</span> <span class='nx'>mockedFeed</span><span class='p'>,</span> <span class='nx'>httpBackend</span><span class='p'>;</span>

<span class='c1'>// Initialize the controller and a mock scope</span>
<span class='nx'>beforeEach</span><span class='p'>(</span><span class='nx'>inject</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>$controller</span><span class='p'>,</span> <span class='nx'>$rootScope</span><span class='p'>,</span> <span class='nx'>$httpBackend</span><span class='p'>,</span> <span class='nx'>defaultJSON</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Set up the expected feed data</span>
  <span class='nx'>httpBackend</span> <span class='o'>=</span> <span class='nx'>$httpBackend</span><span class='p'>;</span>
  <span class='nx'>$httpBackend</span><span class='p'>.</span><span class='nx'>whenJSONP</span><span class='p'>(</span><span class='sr'>/query.yahooapis.com/</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='nx'>defaultJSON</span><span class='p'>);</span>

  <span class='nx'>scope</span> <span class='o'>=</span> <span class='nx'>$rootScope</span><span class='p'>.</span><span class='nx'>$new</span><span class='p'>();</span>
  <span class='nx'>MainCtrl</span> <span class='o'>=</span> <span class='nx'>$controller</span><span class='p'>(</span><span class='s1'>&#39;MainCtrl&#39;</span><span class='p'>,</span> <span class='p'>{</span>
    <span class='nx'>$scope</span><span class='o'>:</span> <span class='nx'>scope</span>
  <span class='p'>});</span>
<span class='p'>}));</span>
</code></pre>
</div>
<p>You should be able to guess what&#8217;s happening with <code>$httpBackend.whenJSONP(/query.yahooapis.com/)</code> &#8211; whenever the app tries to contact Yahoo&#8217;s service, it&#8217;ll trigger our mocked HTTP backend and return the <code>defaultJSON</code> value instead. Cool!</p>

<h3 id='the_test'>The Test</h3>

<p>The actual test is quite a comedown after all that mock wrangling:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>it</span><span class='p'>(</span><span class='s1'>&#39;should have a list of feeds&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>expect</span><span class='p'>(</span><span class='nx'>scope</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>length</span><span class='p'>).</span><span class='nx'>toBe</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>
  <span class='nx'>httpBackend</span><span class='p'>.</span><span class='nx'>flush</span><span class='p'>();</span>
  <span class='nx'>expect</span><span class='p'>(</span><span class='nx'>scope</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>].</span><span class='nx'>items</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>].</span><span class='nx'>title</span><span class='p'>).</span><span class='nx'>toBe</span><span class='p'>(</span><span class='s1'>&#39;Node Roundup: 0.11.2, 0.10.6, subscribe, Omelette&#39;</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The test checks <code>$scope</code> has the expected data. <code>httpBackend.flush</code> will make sure the (fake) HTTP request has finished first. The <code>scope.feeds</code> value is the one that <code>MainCtrl</code> from last week derives from the raw JSON returned by Yahoo.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>You should now be able to run <code>grunt test</code> and see some passing tests (just like in my screenshot). If not, check out <a href='https://github.com/alexyoung/djsreader'>djsreader</a> on GitHub to see what&#8217;s different.</p>

<p>Most of the work for this part can be found in <a href='https://github.com/alexyoung/djsreader/commit/7b4bda96b787b7707582567db927f12cc80c5d27'>commit 7b4bda</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/15/node-roundup">Node Roundup: 0.11.2, 0.10.6, subscribe, Omelette</a></h2>
      <div class="meta">
        <span class="date">15 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/15/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#cli">cli</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#pubsub">pubsub</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='node_0112_and_0106'>Node 0.11.2 and 0.10.6</h3>

<p>Clearly the Node core developers have had an early summer holiday, and are now back to unleash new releases. In the space of a few days <a href='http://blog.nodejs.org/2013/05/13/node-v0-11-2-unstable/'>0.11.2</a> and <a href='http://blog.nodejs.org/2013/05/14/node-v0-10-6-stable/'>0.10.6</a> were released. I was intrigued by the <code>Readable.prototype.wrap</code> update, which makes it support <code>objectMode</code> for streams that emit objects rather than strings or other data.</p>

<p>The 0.11.2 release has an update that guarantees the order of <code>&#39;finish&#39;</code> events, and another that adds some new methods: <code>cork</code> and <code>uncork</code>. Corking basically forces buffering of all writes &#8211; data will be flushed when <code>uncork</code> is called or when <code>end</code> is called.</p>

<p>There is a detailed discussion about <code>cork</code> and the related <code>_writev</code> method on the Node Google Group: <a href='https://groups.google.com/d/msg/nodejs/UNWhF64KeQI/zN2VCWYkMhcJ'>Streams writev API</a>. There are some interesting comments about a similar earlier implementation by Ryan Dahl, the validity of which Isaac questions due to Node&#8217;s code changing significantly since then.</p>

<p>If you want to read about <code>writev</code>, check out the <code>write(2)</code> (<code>man 2 write</code>) manual page:</p>

<blockquote>
<p><code>Write()</code> attempts to write <code>nbyte</code> of data to the object referenced by the descriptor <code>fildes</code> from the buffer pointed to by <code>buf</code>. <code>Writev()</code> performs the same action, but gathers the output data from the <code>iovcnt</code> buffers specified by the members of the <code>iov</code> array&#8230;</p>
</blockquote>

<h3 id='subscribe'>subscribe</h3>

<p>Azer KoÃ§ulu has been working on a suite of modules for subscribing and observing to changes on objects:</p>

<ul>
<li>Watch for changes to arrays: <a href='https://github.com/azer/watch-array'>watch-array</a></li>

<li>Watch for changes to objects: <a href='https://github.com/azer/new-object'>new-object</a></li>

<li>Array-like pub/sub: <a href='https://github.com/azer/new-list'>new-list</a></li>
</ul>

<p>Now he&#8217;s also released a module for <a href='https://github.com/azer/pubsub'>subscribing</a> to multiple pub/sub objects:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>subscribe</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;subscribe&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>pubsub</span><span class='p'>();</span>
<span class='kd'>var</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>pubsub</span><span class='p'>();</span>
<span class='kd'>var</span> <span class='nx'>c</span> <span class='o'>=</span> <span class='nx'>pubsub</span><span class='p'>();</span>

<span class='nx'>subscribe</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>,</span> <span class='nx'>c</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>updates</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>updates</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>].</span><span class='nx'>pubsub</span><span class='p'>;</span>
  <span class='c1'>// =&gt; a.onUpdate</span>
  <span class='nx'>updates</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>].</span><span class='nx'>params</span><span class='p'>;</span>
  <span class='c1'>// =&gt; 3, 4</span>
  <span class='nx'>updates</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>].</span><span class='nx'>pubsub</span><span class='p'>;</span>
  <span class='c1'>// =&gt; c.onUpdate</span>
  <span class='nx'>updates</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>].</span><span class='nx'>params</span><span class='p'>;</span>
  <span class='c1'>// =&gt; 5, 6</span>
<span class='p'>});</span>

<span class='nx'>a</span><span class='p'>.</span><span class='nx'>publish</span><span class='p'>(</span><span class='mi'>3</span><span class='p'>,</span> <span class='mi'>4</span><span class='p'>);</span>
<span class='nx'>c</span><span class='p'>.</span><span class='nx'>publish</span><span class='p'>(</span><span class='mi'>5</span><span class='p'>,</span> <span class='mi'>6</span><span class='p'>);</span>
</code></pre>
</div>
<p>This brings a <em>compositional</em> style of working to Azer&#8217;s other modules, allowing subscriptions to multiple lists and objects at the same time. The next example uses subscribe to combine the new-list module with new-object:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>fruits</span> <span class='o'>=</span> <span class='nx'>newList</span><span class='p'>(</span><span class='s1'>&#39;apple&#39;</span><span class='p'>,</span> <span class='s1'>&#39;banana&#39;</span><span class='p'>,</span> <span class='s1'>&#39;grapes&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>people</span> <span class='o'>=</span> <span class='nx'>newObject</span><span class='p'>({</span> <span class='nx'>smith</span><span class='o'>:</span> <span class='mi'>21</span><span class='p'>,</span> <span class='nx'>joe</span><span class='o'>:</span> <span class='mi'>23</span> <span class='p'>});</span>

<span class='nx'>subscribe</span><span class='p'>(</span><span class='nx'>fruits</span><span class='p'>,</span> <span class='nx'>people</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>updates</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>updates</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>].</span><span class='nx'>params</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>].</span><span class='nx'>add</span><span class='p'>;</span>
  <span class='c1'>// =&gt; melon</span>

  <span class='nx'>updates</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>].</span><span class='nx'>params</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>].</span><span class='nx'>set</span><span class='p'>;</span>
  <span class='c1'>// =&gt; { alex: 25 }</span>
<span class='p'>});</span>

<span class='nx'>fruits</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='s1'>&#39;melon&#39;</span><span class='p'>);</span>
<span class='nx'>people</span><span class='p'>(</span><span class='s1'>&#39;alex&#39;</span><span class='p'>,</span> <span class='s1'>&#39;25&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<h3 id='omelette'>Omelette</h3>

<p>Omelette (GitHub: <a href='https://github.com/f/omelette'>f / omelette</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/omelette'>omelette</a>) by Fatih Kadir AkÄ±n is a template-based autocompletion module.</p>

<p>Programs and their arguments are defined using an event-based completion API, and then they can generate the zsh or Bash completion rules. There&#8217;s an animated gif in the readme that illustrates how it works in practice.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/14/jquery-roundup">jQuery Roundup: 1.10, jquery-markup, zelect</a></h2>
      <div class="meta">
        <span class="date">14 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/14/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#markup">markup</a>
          
            <a href="/tags.html#templating">templating</a>
          
            <a href="/tags.html#select">select</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='jquery_110'>jQuery 1.10</h3>

<p>A new 1.x branch of jQuery has been released, <a href='http://blog.jquery.com/2013/05/09/jquery-1-10-beta-1-released/'>jQuery 1.10</a>. This builds on the work in the 1.9 line:</p>

<blockquote>
<p>It&#8217;s our goal to keep the 1.x and 2.x lines in sync functionally so that 1.10 and 2.0 are equal, followed by 1.11 and 2.1, then 1.12 and 2.2&#8230;</p>
</blockquote>

<p>A few of the inclded fixes were things originally planned for 1.9.x, and others are new to this branch. As always the announcement blog post contains links to full details of each change.</p>

<h3 id='jquerymarkup'>jquery-markup</h3>

<p><a href='http://plugins.jquery.com/markup/'>jquery-markup</a> (GitHub: <a href='https://github.com/rse/jquery-markup'>rse / jquery-markup</a>, License: <em>MIT</em>) by Ralf S. Engelschall is a markup generator that works with several template engines (including Jade and handlebars). By adding a tag, <code>&lt;markup&gt;</code>, <code>$(selector).markup</code> can be used render templates interpolated with values.</p>

<p>Ralf said this about the plugin:</p>

<blockquote>
<p>I wanted to use template languages like Handlebars but instead of having to store each fragment into its own file I still wanted to assemble all fragments together. Even more: I wanted to logically group and nest them to still understood the view markup code as a whole.</p>
</blockquote>

<p>The <code>&lt;markup&gt;</code> tag can include a <code>type</code> attribute that is used to determine the templating language &#8211; this means you can use multiple template languages in the same document.</p>

<h3 id='zelect'>zelect</h3>

<p><a href='http://mtkopone.github.io/zelect/'>zelect</a> (GitHub: <a href='https://github.com/mtkopone/zelect'>mtkopone / zelect</a>, License: <em>WTFPL</em>) by Mikko Koponen is a <code>&lt;select&gt;</code> component. It&#8217;s unit tested, and has built-in support for asynchronous pagination.</p>

<p>Unlike Chosen, it doesn&#8217;t come with any CSS, but that might be a good thing because it keeps the project simple. Mikko has provided an example with suitable CSS that you can use to get started.</p>

<p>If Chosen seems too large or inflexible for your project, then zelect might be a better choice.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/13/bashful">Unix: It's Alive!</a></h2>
      <div class="meta">
        <span class="date">13 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/13/bashful/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#unix">unix</a>
          
        </span>
      </div>
      <div class="preview">
        <p>On a philosophical level, <a href='http://blog.izs.me/post/48281998870/unix-philosophy-and-node-js'>Node developers love Unix</a>. I like to think that&#8217;s why Node&#8217;s core modules are relatively lightweight compared to other standard libraries (is an <a href='http://www.ruby-doc.org/stdlib-2.0/libdoc/net/ftp/rdoc/index.html'>FTP library</a> really necessary?) &#8211; Node&#8217;s modules quietly get out of the way, allowing the community to provide solutions to higher-level problems.</p>

<p>As someone who sits inside tmux/Vim/ssh all day, I&#8217;m preoccupied with command-line tools and ways to work more efficiently in the shell. That&#8217;s why I was intrigued to find bashful (GitHub: <a href='https://github.com/substack/bashful'>substack / bashful</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/bashful'>bashful</a>) by substack. It allows Bash to be parsed and executed. To use it, hook it up with some streams:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>bash</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;bashful&#39;</span><span class='p'>)(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>);</span>
<span class='nx'>bash</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;command&#39;</span><span class='p'>,</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;child_process&#39;</span><span class='p'>).</span><span class='nx'>spawn</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>s</span> <span class='o'>=</span> <span class='nx'>bash</span><span class='p'>.</span><span class='nx'>createStream</span><span class='p'>();</span>
<span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdin</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>s</span><span class='p'>).</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdout</span><span class='p'>);</span>
</code></pre>
</div>
<p>After installing <code>bashful</code>, running this example with <code>node sh.js</code> will allow you to issue shell commands. Not all of Bash&#8217;s built-in commands are supported yet (there&#8217;s a list and to-do in the readme), but you should be able to execute commands and run <code>true</code> and <code>false</code>, then get the last exit status with <code>echo $?</code>.</p>

<p>How does this work? Well, the bashful module basically parses each line, character-by-character, to tokenise the input. It then <a href='https://github.com/substack/bashful/blob/699cafe4f9e35c9f4c88836866efbcbaab21b894/index.js#L114'>checks anything that looks like a command</a> against the list of built-in commands, and runs it. It mixes Node streams with a JavaScript bash parser to create a Bash-like layer that you can reuse with other streams.</p>

<p>This module depends on <a href='https://github.com/substack/node-shell-quote'>shell-quote</a>, which correctly escapes those gnarly quotes in shell commands. I expect substack will make a few more shell-related modules as he continues work on bashful.</p>

<p><a href='http://documentup.com/arturadib/shelljs'>ShellJS</a> (GitHub: <a href='https://github.com/arturadib/shelljs'>arturadib / shelljs</a>, npm: <a href='https://npmjs.org/package/shelljs'>shelljs</a>) by Artur Adib has been around for a while, but still receives regular updates. This module gives you shell-like commands in Node:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;shelljs/global&#39;</span><span class='p'>);</span>

<span class='nx'>mkdir</span><span class='p'>(</span><span class='s1'>&#39;-p&#39;</span><span class='p'>,</span> <span class='s1'>&#39;out/Release&#39;</span><span class='p'>);</span>
<span class='nx'>cp</span><span class='p'>(</span><span class='s1'>&#39;-R&#39;</span><span class='p'>,</span> <span class='s1'>&#39;stuff/*&#39;</span><span class='p'>,</span> <span class='s1'>&#39;out/Release&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>It can even mimic Make, so you could write your build scripts with it. This would make sense if you&#8217;re sharing code with Windows-based developers.</p>

<p>There are plenty of other interesting <a href='https://npmjs.org/browse/keyword/unix'>Unix</a>-related modules that are alive and regularly updated. One I was looking at recently is suppose (GitHub: <a href='https://github.com/jprichardson/node-suppose'>jprichardson / node-suppose</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/suppose'>suppose</a>) by JP Richardson, which is an expect(1) clone:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>suppose</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;suppose&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>fs</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;fs&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>assert</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;assert&#39;</span><span class='p'>)</span>

<span class='nx'>suppose</span><span class='p'>(</span><span class='s1'>&#39;npm&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;init&#39;</span><span class='p'>])</span>
  <span class='p'>.</span><span class='nx'>debug</span><span class='p'>(</span><span class='nx'>fs</span><span class='p'>.</span><span class='nx'>createWriteStream</span><span class='p'>(</span><span class='s1'>&#39;/tmp/debug.txt&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='sr'>/name\: \([\w|\-]+\)[\s]*/</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;awesome_package\n&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;version: (0.0.0) &#39;</span><span class='p'>).</span><span class='nx'>respond</span><span class='p'>(</span><span class='s1'>&#39;0.0.1\n&#39;</span><span class='p'>)</span>
  <span class='c1'>// ...</span>
</code></pre>
</div>
<p>It uses a chainable API to allow expect-like expressions to capture and react to the output of other programs.</p>

<p>Unix in the Node community is alive and well, but I&#8217;m sure there&#8217;s also lots of <a href='https://npmjs.org/browse/keyword/windows'>Windows-related fun</a> to be had &#8211; assuming you can figure out how to use Windows 9 with a keyboard and mouse that is&#8230;</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/10/p-openpgpjs-easywebworker">P, EasyWebWorker, OpenPGP.js</a></h2>
      <div class="meta">
        <span class="date">10 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/10/p-openpgpjs-easywebworker/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#crypto">crypto</a>
          
            <a href="/tags.html#p2p">p2p</a>
          
            <a href="/tags.html#webworkers">webworkers</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='p'>P</h3>

<p><a href='http://ozan.io/p/'>P</a> (GitHub: <a href='https://github.com/oztu/p'>oztu / p</a>, License: <em>Apache 2</em>, npm: <a href='https://npmjs.org/package/onramp'>onramp</a>, bower: <em>p</em>) by Ozan Turgut is a client-side library with a WebSocket server for creating P2P networks by allowing browser-to-browser connections.</p>

<p>The <em>onramp</em> Node module is used to establish connections, but after that it isn&#8217;t necessary for communication between clients. The author has written up documentation with diagrams to explain how it works. Like other similar projects, the underlying technology is <a href='http://www.webrtc.org/'>WebRTC</a>, so it only works in Chrome or Firefox Nightly.</p>

<h3 id='easywebworker'>EasyWebWorker</h3>

<p><a href='http://easywebworker.com/'>EasyWebWorker</a> (GitHub: <a href='https://github.com/ramesaliyev/EasyWebWorker'>ramesaliyev / EasyWebWorker</a>, License: <em>MIT</em>) by RameÅŸ Aliyev is a wrapper for web workers which allows functions to be executed directly, and can execute global functions in the worker.</p>

<p>A fallback is provided for older browsers:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='c1'># Create web worker fallback if browser doesnt support Web Workers.</span>
<span class='k'>if</span> <span class='k'>this</span><span class='p'>.</span><span class='nb'>document</span> <span class='o'>isnt</span> <span class='kc'>undefined</span> <span class='o'>and</span> <span class='o'>!</span><span class='nb'>window</span><span class='p'>.</span><span class='nx'>Worker</span> <span class='o'>and</span> <span class='o'>!</span><span class='nb'>window</span><span class='p'>.</span><span class='nx'>_WorkerPrepared</span>
  <span class='nb'>window</span><span class='p'>.</span><span class='nv'>Worker = </span><span class='nx'>_WorkerFallback</span>
</code></pre>
</div>
<p>The <code>_WorkerFallback</code> class is provided, and uses <code>XMLHttpRequest</code> or <code>ActiveXObject</code>.</p>

<p>The source code is nicely commented if you want to look at what it does in more detail: <a href='https://github.com/ramesaliyev/EasyWebWorker/blob/master/easy-web-worker.coffee'>easy-web-worker.coffee</a>.</p>

<h3 id='openpgpjs'>OpenPGP.js</h3>

<p>Jeremy Darling sent in <a href='http://openpgpjs.org/'>OpenPGP.js</a> (GitHub: <a href='https://github.com/openpgpjs/openpgpjs'>openpgpjs / openpgpjs</a>, License: <em>LGPL</em>), which is an <a href='http://www.openpgp.org/'>OpenPGP</a> implementation for JavaScript:</p>

<blockquote>
<p>This is a JavaScript implementation of OpenPGP with the ability to generate public and private keys. Key generation can be a bit slow but you can also import your own keys.</p>
</blockquote>

<p>Jeremy found that OpenPGP.js is used by <a href='http://www.mailvelope.com/'>Mailvelope</a>, which is a browser extension that brings OpenPGP to webmail services like Gmail. That means Mailvelope can encrypt messages without having to upload a private key to a server.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/09/angularjs-4">AngularJS: Managing Feeds</a></h2>
      <div class="meta">
        <span class="date">09 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/09/angularjs-4/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#angularjs">angularjs</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#angularfeeds">angularfeeds</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2013/04/11/angularjs-1/'>Part 1: Google, Twitter, and AngularJS</a></li>
  <li><a href='http://dailyjs.com/2013/04/18/angularjs-2/'>Part 2: Let's Make a Feed Reader</a></li>
  <li><a href='http://dailyjs.com/2013/04/25/angularjs-3/'>Part 3: Rendering Feeds</a></li>
  <li><a href='http://dailyjs.com/2013/05/09/angularjs-4/'><strong>Part 4: Managing Feeds</strong></a></li>
  <li><a href='http://dailyjs.com/2013/05/16/angularjs-5/'>Part 5: Tests</a></li>
  <li><a href='http://dailyjs.com/2013/05/30/angularjs-6/'>Part 6: Adding Dependencies</a></li>
  <li><a href='http://dailyjs.com/2013/06/06/angularjs-7/'>Part 7: Form Validation</a></li>
  <li><a href='http://dailyjs.com/2013/06/13/angularjs-8/'>Part 8: Iterators and Data</a></li>
  <li><a href='http://dailyjs.com/2013/07/18/angularjs-9/'>Part 9: Installation</a></li>
</ul>
<h3 id='previously'>Previously</h3>

<p>In the <a href='http://dailyjs.com/2013/04/25/angularjs-3/'>last part</a> we looked at fetching and parsing feeds with YQL using Angular&#8217;s <code>$http</code> service. The commit for that part was <code>2eae54e</code>.</p>

<p>This week you&#8217;ll learn more about Angular&#8217;s data binding by adding some <code>input</code> fields to allow feeds to be added and removed.</p>

<p>If you get stuck at any part of this tutorial, check out the full source here: <a href='https://github.com/alexyoung/djsreader/tree/c9f9d06258f4973018a1cc48c226642bbb32938f'>commit c9f9d06</a>.</p>

<h3 id='modeling_multiple_feeds'>Modeling Multiple Feeds</h3>

<p>The previous part mapped one feed to a view by using the <code>$scope.feed</code> object. Now we want to support multiple feeds, so we&#8217;ll need a way of modeling ordered collections of feeds.</p>

<p>The easiest way to do this is simply by using an array. Feed objects that contain the post items and feed URLs can be pushed onto the array:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>feeds</span> <span class='o'>=</span> <span class='p'>[{</span>
  <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;http://dailyjs.com/atom.xml&#39;</span><span class='p'>,</span>
  <span class='nx'>items</span><span class='o'>:</span> <span class='p'>[</span> <span class='cm'>/* Blog posts go here */</span> <span class='p'>]</span>
<span class='p'>}];</span>
</code></pre>
</div>
<h3 id='rendering_multiple_feeds'>Rendering Multiple Feeds</h3>

<p>The view now needs to be changed to use multiple feeds instead of a single feed. This can be achieved by using the <code>ng-repeat</code> directive to iterate over each one (<code>app/views/main.html</code>):</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>ng-repeat=</span><span class='s'>&quot;feed in feeds&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;ul&gt;</span>
    <span class='nt'>&lt;li</span> <span class='na'>ng-repeat=</span><span class='s'>&quot;item in feed.items&quot;</span><span class='nt'>&gt;&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;&quot;</span><span class='nt'>&gt;&lt;/a&gt;&lt;/li&gt;</span>
  <span class='nt'>&lt;/ul&gt;</span>
  URL: <span class='nt'>&lt;input</span> <span class='na'>size=</span><span class='s'>&quot;80&quot;</span> <span class='na'>ng-model=</span><span class='s'>&quot;feed.url&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>ng-click=</span><span class='s'>&quot;fetchFeed(feed)&quot;</span><span class='nt'>&gt;</span>Update<span class='nt'>&lt;/button&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>ng-click=</span><span class='s'>&quot;deleteFeed(feed)&quot;</span><span class='nt'>&gt;</span>Delete<span class='nt'>&lt;/button&gt;</span>
  <span class='nt'>&lt;hr</span> <span class='nt'>/&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>The <code>fetchFeed</code> and <code>deleteFeed</code> methods should be added to <code>$scope</code> in the controller, but we&#8217;ll deal with those later. First let&#8217;s add a form to create new feeds.</p>

<h3 id='adding_feeds'>Adding Feeds</h3>

<p>The view for adding feeds needs to use an <code>ng-model</code> directive to bind a value so the controller can access the URL of the new feed:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div&gt;</span>
  URL: <span class='nt'>&lt;input</span> <span class='na'>size=</span><span class='s'>&quot;80&quot;</span> <span class='na'>ng-model=</span><span class='s'>&quot;newFeed.url&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>ng-click=</span><span class='s'>&quot;addFeed(newFeed)&quot;</span><span class='nt'>&gt;</span>Add Feed<span class='nt'>&lt;/button&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>The <code>addFeed</code> method will be triggered when the button is clicked. All we need to do is push <code>newFeed</code> onto <code>$scope.feed</code> then clear <code>newFeed</code> so the form will be reverted to its previous state. The <code>addFeed</code> method is also added to <code>$scope</code> in the controller (<code>app/scripts/controllers/main.js</code>), like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>addFeed</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>);</span>
  <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>fetchFeed</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>);</span>
  <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>newFeed</span> <span class='o'>=</span> <span class='p'>{};</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This example could be written to use <code>$scope.newFeed</code> instead of the <code>feed</code> argument, but don&#8217;t you think it&#8217;s cool that arguments can be passed from the view just by adding it to the directive?</p>

<h3 id='fetching_feeds'>Fetching Feeds</h3>

<p>The original <code>$http</code> code should be wrapped up as a method so it can be called by the <code>ng-click</code> directive on the button:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>fetchFeed</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>feed</span><span class='p'>.</span><span class='nx'>items</span> <span class='o'>=</span> <span class='p'>[];</span>

  <span class='kd'>var</span> <span class='nx'>apiUrl</span> <span class='o'>=</span> <span class='s2'>&quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20xml%20where%20url%3D&#39;&quot;</span><span class='p'>;</span>
  <span class='nx'>apiUrl</span> <span class='o'>+=</span> <span class='nb'>encodeURIComponent</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>);</span>
  <span class='nx'>apiUrl</span> <span class='o'>+=</span> <span class='s2'>&quot;&#39;%20and%20itemPath%3D&#39;feed.entry&#39;&amp;format=json&amp;diagnostics=true&amp;callback=JSON_CALLBACK&quot;</span><span class='p'>;</span>

  <span class='nx'>$http</span><span class='p'>.</span><span class='nx'>jsonp</span><span class='p'>(</span><span class='nx'>apiUrl</span><span class='p'>).</span>
    <span class='nx'>success</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>,</span> <span class='nx'>status</span><span class='p'>,</span> <span class='nx'>headers</span><span class='p'>,</span> <span class='nx'>config</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>data</span><span class='p'>.</span><span class='nx'>query</span><span class='p'>.</span><span class='nx'>results</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>feed</span><span class='p'>.</span><span class='nx'>items</span> <span class='o'>=</span> <span class='nx'>data</span><span class='p'>.</span><span class='nx'>query</span><span class='p'>.</span><span class='nx'>results</span><span class='p'>.</span><span class='nx'>entry</span><span class='p'>;</span>
      <span class='p'>}</span>
    <span class='p'>}).</span>
    <span class='nx'>error</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>,</span> <span class='nx'>status</span><span class='p'>,</span> <span class='nx'>headers</span><span class='p'>,</span> <span class='nx'>config</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;Error fetching feed:&#39;</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>);</span>
    <span class='p'>});</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The <code>feed</code> argument will be the same as the one in the <code>$scope.feeds</code> array, so by clearing the current set of items using <code>feed.items = [];</code> the user will see instant feedback when &#8220;Update&#8221; is clicked. That makes it easier to see what&#8217;s happening if the feed URL is changed to another URL.</p>

<p>I&#8217;ve used <code>encodeURIComponent</code> to encode the feed&#8217;s URL so it can be safely inserted as a query parameter for Yahoo&#8217;s service.</p>

<h3 id='deleting_feeds'>Deleting Feeds</h3>

<p>The controller also needs a method to delete feeds. Since we&#8217;re working with an array we can just <code>splice</code> off the desired item:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>deleteFeed</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>splice</span><span class='p'>(</span><span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>feeds</span><span class='p'>.</span><span class='nx'>indexOf</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>),</span> <span class='mi'>1</span><span class='p'>);</span>
<span class='p'>};</span>
</code></pre>
</div>
<h3 id='periodic_updates'>Periodic Updates</h3>

<p>Automatically refreshing feeds is an interesting case in AngularJS because it can be implemented using the <code>$timeout</code> service. It&#8217;s just a wrapper around <code>setTimeout</code>, but it also delegates exceptions to <code>$exceptionHandler</code>.</p>

<p>To use it, add it to the list of arguments in the controller and set a sensible default value:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>angular</span><span class='p'>.</span><span class='nx'>module</span><span class='p'>(</span><span class='s1'>&#39;djsreaderApp&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>controller</span><span class='p'>(</span><span class='s1'>&#39;MainCtrl&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>$scope</span><span class='p'>,</span> <span class='nx'>$http</span><span class='p'>,</span> <span class='nx'>$timeout</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>refreshInterval</span> <span class='o'>=</span> <span class='mi'>60</span><span class='p'>;</span>
</code></pre>
</div>
<p>Now make <code>fetchFeed</code> call itself, at the end of the method:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$timeout</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>fetchFeed</span><span class='p'>(</span><span class='nx'>feed</span><span class='p'>);</span> <span class='p'>},</span> <span class='nx'>$scope</span><span class='p'>.</span><span class='nx'>refreshInterval</span> <span class='o'>*</span> <span class='mi'>1000</span><span class='p'>);</span>
</code></pre>
</div>
<p>I&#8217;ve multiplied the value by <code>1000</code> so it converts seconds into milliseconds, which makes the view easier to understand:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;p&gt;</span>Refresh (seconds): <span class='nt'>&lt;input</span> <span class='na'>ng-model=</span><span class='s'>&quot;refreshInterval&quot;</span><span class='nt'>&gt;&lt;/p&gt;</span>
</code></pre>
</div>
<p><img src='/images/posts/angularpreview.png' alt='The finished result' /></p>

<h3 id='conclusion'>Conclusion</h3>

<p>Now you can add more feeds to the reader, it&#8217;s starting to feel more like a real web application. Over the next few weeks I&#8217;ll add tests and a better interface.</p>

<p>The code for this tutorial can be found in <a href='https://github.com/alexyoung/djsreader/tree/c9f9d06258f4973018a1cc48c226642bbb32938f'>commit c9f9d06</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/08/node-roundup">Node Roundup: Node-sass, TowTruck, peer-vnc</a></h2>
      <div class="meta">
        <span class="date">08 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/08/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#sass">sass</a>
          
            <a href="/tags.html#css">css</a>
          
            <a href="/tags.html#vnc">vnc</a>
          
            <a href="/tags.html#mozilla">mozilla</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='nodesass'>Node-sass</h3>

<p>Node-sass (GitHub: <a href='https://github.com/andrew/node-sass'>andrew / node-sass</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/node-sass'>node-sass</a>) by Andrew Nesbitt is a Node binding for libsass. It comes with some pre-compiled binaries, so it should be easy to get it running.</p>

<p>It has both synchronous and asynchronous APIs, and there&#8217;s an example app built with Connect so you can see how the middleware works: <a href='https://github.com/andrew/node-sass-example'>andrew / node-sass-example</a>.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>sass</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;node-sass&#39;</span><span class='p'>);</span>
<span class='c1'>// Async</span>
<span class='nx'>sass</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>(</span><span class='nx'>scss_content</span><span class='p'>,</span> <span class='nx'>callback</span> <span class='p'>[,</span> <span class='nx'>options</span><span class='p'>]);</span>

<span class='c1'>// Sync</span>
<span class='kd'>var</span> <span class='nx'>css</span> <span class='o'>=</span> <span class='nx'>sass</span><span class='p'>.</span><span class='nx'>renderSync</span><span class='p'>(</span><span class='nx'>scss_content</span> <span class='p'>[,</span> <span class='nx'>options</span><span class='p'>]);</span>
</code></pre>
</div>
<p>The project includes Mocha tests and more usage information in the readme.</p>

<h3 id='towtruck'>TowTruck</h3>

<p><a href='http://cscott.net'>C. Scott Ananian</a> sent in <a href='http://towtruck.mozillalabs.com/'>TowTruck</a> (GitHub: <a href='https://github.com/mozilla/towtruck'>mozilla / towtruck</a>, License: <em>MPL</em>) from Mozilla, which is an open source web service for collaboration:</p>

<blockquote>
<p>Using TowTruck two people can interact on the same page, seeing each other&#8217;s cursors, edits, and browsing a site together. The TowTruck service is included by the web site owner, and a web site can customize and configure aspects of TowTruck&#8217;s behavior on the site.</p>
</blockquote>

<p>It&#8217;s not currently distributed as a module on npm, so you&#8217;ll need to follow the instructions in the readme to install it. There&#8217;s also a bookmarklet for adding TowTruck to any page, and a Firefox add-on as well.</p>

<h3 id='peervnc'>peer-vnc</h3>

<p>peer-vnc (GitHub: <a href='https://github.com/InstantWebP2P/peer-vnc'>InstantWebP2P / peer-vnc</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/peer-vnc'>peer-vnc</a>) by Tom Zhou is a web VNC client. It uses his other project, <a href='https://github.com/InstantWebP2P/iwebpp.io'>iWebPP.io</a>, which is a P2P web service module.</p>

<p>I had trouble installing node-httpp on a Mac, so YMMV, but I like the idea of a P2P <a href='http://kanaka.github.io/noVNC/'>noVNC</a> project.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/07/jquery-roundup">jQuery Roundup: UI 1.10.3, simplePagination.js, jQuery Async</a></h2>
      <div class="meta">
        <span class="date">07 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/07/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#async">async</a>
          
            <a href="/tags.html#pagination">pagination</a>
          
            <a href="/tags.html#jquery-ui">jquery-ui</a>
          
            <a href="/tags.html#ui">ui</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='jquery_ui_1103'>jQuery UI 1.10.3</h3>

<p><a href='http://blog.jqueryui.com/2013/05/jquery-ui-1-10-3/'>jQuery UI 1.10.3</a> was released last week. This is a maintenance release that has fixes for Draggable, Sortable, Accordion, Autocomplete, Button, Datepicker, Menu, and Progressbar.</p>

<h3 id='simplepaginationjs'>simplePagination.js</h3>

<p><img src='/images/posts/simplepagination.png' alt='simplePagination' /></p>

<p><a href='http://flaviusmatis.github.io/simplePagination.js/'>simplePagination.js</a> (GitHub: <a href='https://github.com/flaviusmatis/simplePagination.js'>flaviusmatis / simplePagination.js</a>, License: <em>MIT</em>) by Flavius Matis is a pagination plugin that supports Bootstrap. It has options for configuring the page links, next and previous text, style attributes, onclick events, and the initialisation event.</p>

<p>There&#8217;s an API for selecting pages, and the author has included three themes. When selecting a page, the truncated pages will shift, so it&#8217;s easy to skip between sets of pages.</p>

<h3 id='jquery_async'>jQuery Async</h3>

<p><img src='/images/posts/jqasync.png' alt='jQuery Async' /></p>

<p><a href='http://acavailhez.github.io/jquery-async/demo.html'>jQuery Async</a> (GitHub: <a href='https://github.com/acavailhez/jquery-async'>acavailhez / jquery-async</a>, License: <em>Apache 2</em>) by Arnaud Cavailhez is a UI plugin for animating things while asynchronous operations take place. It depends on Bootstrap, and makes it easy to animate a button that triggers a long-running process.</p>

<p>The documentation has some clever examples that help visualise how the plugin works &#8211; two buttons are displayed so you can trigger the <code>&#39;success&#39;</code> and <code>&#39;error&#39;</code> events by hand. It&#8217;s built using <code>$.Deferred</code>, so it&#8217;ll work with the built-in Ajax API without much effort.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/06/swarm-dookie-angularjs-book">Swarm, Dookie, AngularJS Book</a></h2>
      <div class="meta">
        <span class="date">06 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/06/swarm-dookie-angularjs-book/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#books">books</a>
          
            <a href="/tags.html#css">css</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='swarm'>Swarm</h3>

<p><a href='http://ppyr.us/swarm/test/grid.html'>Swarm</a> (GitHub: <a href='https://github.com/gritzko/swarm'>gritzko / swarm</a>, License: <em>MIT</em>) by Victor Grishchenko is a data synchronisation library that can synchronise objects on clients and servers.</p>

<blockquote>
<p>Swarm is built around its concise four-method interface that expresses the core function of the library: synchronizing distributed object replicas. The interface is essentially a combination of two well recognized conventions, namely get/set and on/off method pairs, also available as getField/setField and addListener/removeListener calls respectively.</p>
</blockquote>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>obj</span> <span class='o'>=</span> <span class='nx'>swarmPeer</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='nx'>id</span><span class='p'>,</span> <span class='nx'>callbackFn</span><span class='p'>);</span> <span class='c1'>// also addListener()</span>
<span class='nx'>obj</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;field&#39;</span><span class='p'>,</span><span class='nx'>value</span><span class='p'>);</span>
<span class='nx'>obj</span><span class='p'>.</span><span class='nx'>getField</span><span class='p'>()</span><span class='o'>===</span><span class='nx'>obj</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;field&#39;</span><span class='p'>)</span><span class='o'>===</span><span class='nx'>obj</span><span class='p'>.</span><span class='nx'>field</span><span class='p'>;</span>
<span class='nx'>obj</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;field&#39;</span><span class='p'>,</span> <span class='nx'>fieldCallbackFn</span><span class='p'>);</span>
<span class='nx'>obj</span><span class='p'>.</span><span class='nx'>off</span><span class='p'>(</span><span class='s1'>&#39;field&#39;</span><span class='p'>,</span> <span class='nx'>fieldCallbackFn</span><span class='p'>);</span>
<span class='nx'>swarmPeer</span><span class='p'>.</span><span class='nx'>off</span><span class='p'>(</span><span class='nx'>id</span><span class='p'>,</span> <span class='nx'>callbackFn</span><span class='p'>);</span>  <span class='c1'>// also removeListener()</span>
</code></pre>
</div>
<p>The author has defined an addressing protocol that uses tokens to describe various aspects of an event and object. For more details, see <a href='https://github.com/gritzko/swarm/blob/master/doc/Specifiers.md'>Swarm: specifying events</a>.</p>

<h3 id='dookie'>Dookie</h3>

<p><a href='http://labs.voronianski.com/dookie-css/'>Dookie</a> (GitHub: <a href='https://github.com/voronianski/dookie-css'>voronianski / dookie-css</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/dookie-css'>dookie-css</a>) by Dmitri Voronianski is a CSS library that&#8217;s built on <a href='https://github.com/learnboost/stylus'>Stylus</a>. It provides several useful mixins and components:</p>

<ul>
<li>Reset mixins: <code>reset()</code>, <a href='https://github.com/necolas/normalize.css/'>normalize()</a>, and <code>fields-reset()</code></li>

<li>Helpers: Shortcuts for working with <code>display</code>, fonts, images and high pixel ratio images</li>

<li>Sprites</li>

<li>Vendor prefixes</li>

<li>Easings and gradients</li>
</ul>

<p>Dmitri has also included Mocha/PhantomJS tests for checking the generated output and visualising it.</p>

<h3 id='developing_an_angularjs_edge'>Developing an AngularJS Edge</h3>

<p><a href='http://bleedingedgepress.com/our-books/developing-an-angularjs-edge/'>Developing an AngularJS Edge</a> by Christopher Hiller is a new book about AngularJS aimed at existing JavaScript developers who just want to learn AngularJS. The author has posted examples on GitHub here: <a href='https://github.com/angularjsedge/examples'>angularjsedge / examples</a>, and there&#8217;s a <a href='http://www.bleedingedgepress.com/downloads/developing-an-angularjs-edge-sample-chapter.epub'>sample chapter</a> (ePub).</p>

<p>The book is being sold through Gumroad for $14.95, reduced from $19.95. The author notes that it is also available through Amazon and Safari Books Online.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/03/leveldb-and-node-2">LevelDB and Node: Getting Up and Running</a></h2>
      <div class="meta">
        <span class="date">03 May 2013</span>
        | <span class="author">By Rod Vagg</span>
        | <span class="comments"><a href="/2013/05/03/leveldb-and-node-2/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#leveldb">leveldb</a>
          
            <a href="/tags.html#databases">databases</a>
          
        </span>
      </div>
      <div class="preview">
        <p>This is the second article in a three-part series on LevelDB and how it can be used in Node.</p>
<ul class='parts'>
  <li><a href='http://dailyjs.com/2013/04/19/leveldb-and-node-1/'>Part 1: What is LevelDB Anyway?</a></li>
  <li><a href='http://dailyjs.com/2013/05/03/leveldb-and-node-2/'><strong>Part 2: Getting Up and Running</strong></a></li>
</ul>
<p>Our first article covered the basics of LevelDB and its internals. If you haven&#8217;t already read it you are encouraged to do so as we will be building upon this knowledge as we introduce the Node interface in this article.</p>

<p><img src='http://dailyjs.com/images/posts/leveldb.png' alt='LevelDB' /></p>

<p>There are two primary libraries for using LevelDB in Node, <strong><a href='https://github.com/rvagg/node-leveldown'>LevelDOWN</a></strong> and <strong><a href='https://github.com/rvagg/node-levelup'>LevelUP</a></strong>.</p>

<p><strong>LevelDOWN</strong> is a pure C++ interface between Node.js and LevelDB. Its API provides limited <em>sugar</em> and is mostly a straight-forward mapping of LevelDB&#8217;s operations into JavaScript. All I/O operations in LevelDOWN are asynchronous and take advantage of LevelDB&#8217;s thread-safe nature to parallelise reads and writes.</p>

<p><strong>LevelUP</strong> is the library that the majority of people will use to interface with LevelDB in Node. It wraps LevelDOWN to provide a more Node.js-style interface. Its API provides more <em>sugar</em> than LevelDOWN, with features such as optional arguments and deferred-till-open operations (i.e. if you begin operating on a database that is in the process of being opened, the operations will be queued until the open is complete).</p>

<p>LevelUP exposes iterators as Node.js-style object streams. A LevelUP <strong>ReadStream</strong> can be used to read sequential entries, forward or reverse, to and from any key.</p>

<p>LevelUP handles JSON and other encoding types for you. For example, when operating on a LevelUP instance with JSON value-encoding, you simply pass in your objects for writes and they are serialised for you. Likewise, when you read them, they are deserialised and passed back in their original form.</p>

<h3 id='a_simple_levelup_example'>A simple LevelUP example</h3>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>levelup</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;levelup&#39;</span><span class='p'>)</span>

<span class='c1'>// open a data store</span>
<span class='kd'>var</span> <span class='nx'>db</span> <span class='o'>=</span> <span class='nx'>levelup</span><span class='p'>(</span><span class='s1'>&#39;/tmp/dprk.db&#39;</span><span class='p'>)</span>

<span class='c1'>// a simple Put operation</span>
<span class='nx'>db</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span><span class='s1'>&#39;name&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Kim Jong-un&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>

  <span class='c1'>// a Batch operation made up of 3 Puts</span>
  <span class='nx'>db</span><span class='p'>.</span><span class='nx'>batch</span><span class='p'>([</span>
      <span class='p'>{</span> <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;put&#39;</span><span class='p'>,</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;spouse&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;Ri Sol-ju&#39;</span> <span class='p'>}</span>
    <span class='p'>,</span> <span class='p'>{</span> <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;put&#39;</span><span class='p'>,</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;dob&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;8 January 1983&#39;</span> <span class='p'>}</span>
    <span class='p'>,</span> <span class='p'>{</span> <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;put&#39;</span><span class='p'>,</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;occupation&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;Clown&#39;</span> <span class='p'>}</span>
  <span class='p'>],</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>

    <span class='c1'>// read the whole store as a stream and print each entry to stdout</span>
    <span class='nx'>db</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>()</span>
      <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;data&#39;</span><span class='p'>,</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>)</span>
      <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;close&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
        <span class='nx'>db</span><span class='p'>.</span><span class='nx'>close</span><span class='p'>()</span>
      <span class='p'>})</span>
  <span class='p'>})</span>
<span class='p'>})</span>
</code></pre>
</div>
<p>Execute this application and you&#8217;ll end up with this output:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;dob&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;8 January 1983&#39;</span> <span class='p'>}</span>
<span class='p'>{</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;name&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;Kim Jong-un&#39;</span> <span class='p'>}</span>
<span class='p'>{</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;occupation&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;Clown&#39;</span> <span class='p'>}</span>
<span class='p'>{</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;spouse&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;Ri Sol-ju&#39;</span> <span class='p'>}</span>
</code></pre>
</div>
<h3 id='basic_operations'>Basic operations</h3>

<h4 id='open'>Open</h4>

<p>There are two ways to create a new LevelDB store, or open an existing one:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>levelup</span><span class='p'>(</span><span class='s1'>&#39;/path/to/database&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>db</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='cm'>/* use `db` */</span>
<span class='p'>})</span>

<span class='c1'>// or</span>

<span class='kd'>var</span> <span class='nx'>db</span> <span class='o'>=</span> <span class='nx'>levelup</span><span class='p'>(</span><span class='s1'>&#39;/path/to/database&#39;</span><span class='p'>)</span>
<span class='cm'>/* use `db` */</span>
</code></pre>
</div>
<p>The first version is a more standard Node-style async instantiation. You only start using the <code>db</code> when LevelDB is set up and ready.</p>

<p>The second version is a little more opaque. It looks like a synchronous operation but the actual <em>open</em> call is still asynchronous although you get a <code>LevelUP</code> object back immediately to use. Any calls you make on that object that need to operate on the underlying LevelDB store are <em>queued</em> until the store is ready to accept calls. The actual open operation is very quick so the initial is delay generally not noticeable.</p>

<h4 id='close'>Close</h4>

<p>To close a LevelDB store, simply call <code>close()</code> and your callback will be called when the underlying store is completely closed:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// close to clean up</span>
<span class='nx'>db</span><span class='p'>.</span><span class='nx'>close</span><span class='p'>(</span><span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span> <span class='cm'>/* ... */</span> <span class='p'>})</span>
</code></pre>
</div>
<h4 id='read_write_and_delete'>Read, write and delete</h4>

<p>Reading and writing are what you would expect for asynchronous Node methods:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>db</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span><span class='s1'>&#39;key&#39;</span><span class='p'>,</span> <span class='s1'>&#39;value&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span> <span class='cm'>/* ... */</span> <span class='p'>})</span>

<span class='nx'>db</span><span class='p'>.</span><span class='nx'>del</span><span class='p'>(</span><span class='s1'>&#39;key&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span> <span class='cm'>/* ... */</span> <span class='p'>})</span>

<span class='nx'>db</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;key&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span> <span class='cm'>/* ... */</span> <span class='p'>})</span>
</code></pre>
</div>
<h4 id='batch'>Batch</h4>

<p>As mentioned in the <a href='http://dailyjs.com/2013/04/19/leveldb-and-node-1/'>first article</a>, LevelDB has a <em>batch</em> operation that performs atomic writes. These writes can be either <em>put</em> or <em>delete</em> operations.</p>

<p>LevelUP takes an array to perform a batch, each element of the array is either a <code>&#39;put&#39;</code> or a <code>&#39;del&#39;</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>operations</span> <span class='o'>=</span> <span class='p'>[</span>
    <span class='p'>{</span> <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;put&#39;</span><span class='p'>,</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;Franciscus&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;Jorge Mario Bergoglio&#39;</span> <span class='p'>}</span>
  <span class='p'>,</span> <span class='p'>{</span> <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;del&#39;</span><span class='p'>,</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;Benedictus XVI&#39;</span> <span class='p'>}</span>
<span class='p'>]</span>

<span class='nx'>db</span><span class='p'>.</span><span class='nx'>batch</span><span class='p'>(</span><span class='nx'>operations</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span> <span class='cm'>/* ... */</span> <span class='p'>})</span>
</code></pre>
</div>
<h3 id='streams'>Streams!</h3>

<p>LevelUP turns LevelDB&#8217;s <strong>Iterators</strong> into Node&#8217;s readable streams, making them surprisingly powerful as a query mechanism.</p>

<p>LevelUP&#8217;s ReadStreams share all the same characteristics as standard Node readable object streams, such as being able to <code>pipe()</code> to other streams. They also emit all of the the expected events.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>rs</span> <span class='o'>=</span> <span class='nx'>db</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>()</span>

<span class='c1'>// our new stream will emit a &#39;data&#39; event for every entry in the store</span>

<span class='nx'>rs</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;data&#39;</span> <span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span> <span class='cm'>/* data.key &amp; data.value */</span> <span class='p'>})</span>
<span class='nx'>rs</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;error&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span> <span class='cm'>/* handle err */</span> <span class='p'>})</span>
<span class='nx'>rs</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;close&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='cm'>/* stream finished &amp; cleaned up */</span> <span class='p'>})</span>
</code></pre>
</div>
<p>But it&#8217;s the various options for <code>createReadStream()</code>, combined with the fact that LevelDB sorts by keys that makes it a powerful abstraction:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>db</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>({</span>
    <span class='nx'>start</span>     <span class='o'>:</span> <span class='s1'>&#39;somewheretostart&#39;</span>
  <span class='p'>,</span> <span class='nx'>end</span>       <span class='o'>:</span> <span class='s1'>&#39;endkey&#39;</span>
  <span class='p'>,</span> <span class='nx'>limit</span>     <span class='o'>:</span> <span class='mi'>100</span>           <span class='c1'>// maximum number of entries to read</span>
  <span class='p'>,</span> <span class='nx'>reverse</span>   <span class='o'>:</span> <span class='kc'>true</span>          <span class='c1'>// flip direction</span>
  <span class='p'>,</span> <span class='nx'>keys</span>      <span class='o'>:</span> <span class='kc'>true</span>          <span class='c1'>// see db.createKeyStream()</span>
  <span class='p'>,</span> <span class='nx'>values</span>    <span class='o'>:</span> <span class='kc'>true</span>          <span class='c1'>// see db.createValueStream()</span>
<span class='p'>})</span>
</code></pre>
</div>
<p><code>&#39;start&#39;</code> and <code>&#39;end&#39;</code> point to keys in the store. These don&#8217;t need to even exist as actual keys because LevelDB will simply jump to the <em>next existing key</em> in lexicographical order. We&#8217;ll see later why this is helpful when we explore <em>namespacing</em> and <em>range queries</em>.</p>

<p>LevelUP also provides a <strong>WriteStream</strong> which maps <code>write()</code> operations to Puts or Batches.</p>

<p>Since ReadStream and WriteStream follow standard Node.js stream patterns, a <em>copy database</em> operation is simply a <code>pipe()</code> call:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>copy</span> <span class='p'>(</span><span class='nx'>srcdb</span><span class='p'>,</span> <span class='nx'>destdb</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>srcdb</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>()</span>
    <span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>destdb</span><span class='p'>.</span><span class='nx'>createWriteStream</span><span class='p'>())</span>
    <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;error&#39;</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span>
    <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;close&#39;</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='encoding'>Encoding</h3>

<p>LevelUP will accept most kinds of JavaScript objects, including Node&#8217;s <code>Buffer</code>s, as both keys and values for all its operations. LevelDB stores everything as simple byte arrays so most objects need to be <em>encoded</em> and <em>decoded</em> as they go in and come out of the store.</p>

<p>You can specify the encoding of a LevelUP instance and you can also specify the encoding of individual operations. This means that you can easily store text and binary data in the same store.</p>

<p><code>&#39;utf8&#39;</code> is the default encoding but you can change that to any of the standard Node <code>Buffer</code> encodings. You can also use the special <code>&#39;json&#39;</code> encoding:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>db</span> <span class='o'>=</span> <span class='nx'>levelup</span><span class='p'>(</span><span class='s1'>&#39;/tmp/dprk.db&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>valueEncoding</span><span class='o'>:</span> <span class='s1'>&#39;json&#39;</span> <span class='p'>})</span>

<span class='nx'>db</span><span class='p'>.</span><span class='nx'>put</span><span class='p'>(</span>
    <span class='s1'>&#39;dprk&#39;</span>
  <span class='p'>,</span> <span class='p'>{</span>
        <span class='nx'>name</span>       <span class='o'>:</span> <span class='s1'>&#39;Kim Jong-un&#39;</span>
      <span class='p'>,</span> <span class='nx'>spouse</span>     <span class='o'>:</span> <span class='s1'>&#39;Ri Sol-ju&#39;</span>
      <span class='p'>,</span> <span class='nx'>dob</span>        <span class='o'>:</span> <span class='s1'>&#39;8 January 1983&#39;</span>
      <span class='p'>,</span> <span class='nx'>occupation</span> <span class='o'>:</span> <span class='s1'>&#39;Clown&#39;</span>
    <span class='p'>}</span>
  <span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>db</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;dprk&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;dprk:&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='p'>)</span>
        <span class='nx'>db</span><span class='p'>.</span><span class='nx'>close</span><span class='p'>()</span>
      <span class='p'>})</span>
    <span class='p'>}</span>
<span class='p'>)</span>
</code></pre>
</div>
<p>Gives you the following output:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>dprk</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;Kim Jong-un&#39;</span><span class='p'>,</span>
  <span class='nx'>spouse</span><span class='o'>:</span> <span class='s1'>&#39;Ri Sol-ju&#39;</span><span class='p'>,</span>
  <span class='nx'>dob</span><span class='o'>:</span> <span class='s1'>&#39;8 January 1983&#39;</span><span class='p'>,</span>
  <span class='nx'>occupation</span><span class='o'>:</span> <span class='s1'>&#39;Clown&#39;</span> <span class='p'>}</span>
</code></pre>
</div>
<h3 id='advanced_example'>Advanced example</h3>

<p>In this example we assume the data store contains numeric data, where ranges of data are stored with <em>prefixes</em> on the keys. Our example function takes a LevelUP instance and a range key prefix and uses a ReadStream to calculate the variance of the values in that range using an <a href='http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm'>online algorithm</a>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>variance</span> <span class='p'>(</span><span class='nx'>db</span><span class='p'>,</span> <span class='nx'>prefix</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>n</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>,</span> <span class='nx'>m2</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>,</span> <span class='nx'>mean</span> <span class='o'>=</span> <span class='mi'>0</span>

  <span class='nx'>db</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>({</span>
        <span class='nx'>start</span> <span class='o'>:</span> <span class='nx'>prefix</span>          <span class='c1'>// jump to first key with the prefix</span>
      <span class='p'>,</span> <span class='nx'>end</span>   <span class='o'>:</span> <span class='nx'>prefix</span> <span class='o'>+</span> <span class='s1'>&#39;\xFF&#39;</span> <span class='c1'>// stop at the last key with the prefix</span>
    <span class='p'>})</span>
    <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;data&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>delta</span> <span class='o'>=</span> <span class='nx'>data</span><span class='p'>.</span><span class='nx'>value</span> <span class='o'>-</span> <span class='nx'>mean</span>
      <span class='nx'>mean</span> <span class='o'>+=</span> <span class='nx'>delta</span> <span class='o'>/</span> <span class='o'>++</span><span class='nx'>n</span>
      <span class='nx'>m2</span> <span class='o'>=</span> <span class='nx'>m2</span> <span class='o'>+</span> <span class='nx'>delta</span> <span class='o'>*</span> <span class='p'>(</span><span class='nx'>data</span><span class='p'>.</span><span class='nx'>value</span> <span class='o'>-</span> <span class='nx'>mean</span><span class='p'>)</span>
    <span class='p'>})</span>
    <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;error&#39;</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span>
    <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;close&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span>
      <span class='nx'>callback</span><span class='p'>(</span><span class='kc'>null</span><span class='p'>,</span> <span class='nx'>m2</span> <span class='o'>/</span> <span class='p'>(</span><span class='nx'>n</span> <span class='o'>-</span> <span class='mi'>1</span><span class='p'>))</span>
    <span class='p'>})</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Let&#8217;s say you were collecting temperature data and you stored your keys in the form: <code>location~timestamp</code>. Sampling approximately every 5 seconds, collecting temperatures in Celsius we may have data that looks like this:</p>
<div class='highlight'><pre><code class='text'>au_nsw_southcoast~1367487282112 = 18.23
au_nsw_southcoast~1367487287114 = 18.22
au_nsw_southcoast~1367487292118 = 18.23
au_nsw_southcoast~1367487297120 = 18.23
au_nsw_southcoast~1367487302124 = 18.24
au_nsw_southcoast~1367487307127 = 18.24
...
</code></pre>
</div>
<p>To calculate the variance we can use our function to do it while efficiently streaming values from our store by simply calling:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>variance</span><span class='p'>(</span><span class='nx'>db</span><span class='p'>,</span> <span class='s1'>&#39;au_nsw_southcoast~&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>v</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='cm'>/* v = variance */</span>
<span class='p'>})</span>
</code></pre>
</div>
<h3 id='namespacing'>Namespacing</h3>

<p>The concept of namespacing keys will probably be familiar if you&#8217;re used to using a key/value store of some kind. By separating keys by prefixes we create discrete <em>buckets</em>, much like a <em>table</em> in a traditional relational database is used to separate different kinds of data.</p>

<p>It may be tempting to create separate LevelDB stores for different buckets of data but you can take better advantage of LevelDB&#8217;s caching mechanisms if you can keep the data organised in a single store.</p>

<p>Because LevelDB is sorted, choosing a namespace separator character can have an impact on the order of your entries. A commonly chosen namespace character often used in NoSQL databases is <code>&#39;:&#39;</code>. However, this character lands in the middle of the list of <em>printable ASCII characters</em> (character code 58), so your entries may not end up being sorted in a useful order.</p>

<p>Imagine you&#8217;re implementing a web server session store with LevelDB and you&#8217;re prefixing keys with usernames. You may have entries that look like this:</p>
<div class='highlight'><pre><code class='text'>rod.vagg:last_login    = 1367487479499
rod.vagg:default_theme = psychedelic 
rod1977:last_login     = 1367434022300
rod1977:default_theme  = disco
rod:last_login         = 1367488445080
rod:default_theme      = funky
roderick:last_login    = 1367400900133
roderick:default_theme = whoa
</code></pre>
</div>
<p>Note that these entries are sorted and that <code>&#39;.&#39;</code> (character code 46) and <code>&#39;1&#39;</code> (character code 49) come before <code>&#39;:&#39;</code>. This may or may not matter for your particular application, but there are better ways to approach namespacing.</p>

<h4 id='recommended_delimiters'>Recommended delimiters</h4>

<p>At the beginning of the printable ASCII character range is <code>&#39;!&#39;</code> (character code 33), and at the end we find <code>&#39;~&#39;</code> (character code 126). Using these characters as a delimiter we find the following sorting for our keys:</p>
<div class='highlight'><pre><code class='text'>rod!...
rod.vagg!...
rod1977!...
roderick!...
</code></pre>
</div>
<p>or</p>
<div class='highlight'><pre><code class='text'>rod.vagg~...
rod1977~...
roderick~...
rod~...
</code></pre>
</div>
<p>But why stick to the printable range? We can go right to the edges of the single-byte character range and use <code>&#39;\x00&#39;</code> (<em>null</em>) or <code>&#39;\xff&#39;</code> (<em>&#255;</em>).</p>

<p>For best sorting of your entries, choose <code>&#39;\x00&#39;</code> (or <code>&#39;!&#39;</code> if you really can&#8217;t stomach it). But whatever delimiter you choose, you&#8217;re still going to need to control the characters that can be used as keys. Allowing user-input to determine your keys and not stripping out your delimiter character could result in the NoSQL equivalent of an <em>SQL Injection Attack</em> (e.g. consider the unintended consequences that may arise with the dataset above with a delimiter of <code>&#39;!&#39;</code> and allowing a user to have that character in their username).</p>

<h3 id='range_queries'>Range queries</h3>

<p>LevelUP&#8217;s ReadStream is the perfect range query mechanism. By combining <code>&#39;start&#39;</code> and <code>&#39;end&#39;</code>, which just need to be approximations of actual keys, you can pluck out the exact the entries you want.</p>

<p>Using our namespaced dataset above, with <code>&#39;\x00&#39;</code> as delimiters, we can fetch all entries for just a single user by carafting a ReadStream range query:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>entries</span> <span class='o'>=</span> <span class='p'>[]</span>

<span class='nx'>db</span><span class='p'>.</span><span class='nx'>createReadStream</span><span class='p'>({</span> <span class='nx'>start</span><span class='o'>:</span> <span class='s1'>&#39;rod\x00&#39;</span><span class='p'>,</span> <span class='nx'>end</span><span class='o'>:</span> <span class='s1'>&#39;rod\x00\xff&#39;</span> <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;data&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>entry</span><span class='p'>)</span> <span class='p'>{</span> <span class='nx'>entries</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>entry</span><span class='p'>)</span> <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;close&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>entries</span><span class='p'>)</span> <span class='p'>})</span>
</code></pre>
</div>
<p>Would give us:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>[</span> <span class='p'>{</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;rod\x00last_login&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;1367488445080&#39;</span> <span class='p'>},</span>
  <span class='p'>{</span> <span class='nx'>key</span><span class='o'>:</span> <span class='s1'>&#39;rod\x00default_theme&#39;</span><span class='p'>,</span> <span class='nx'>value</span><span class='o'>:</span> <span class='s1'>&#39;funky&#39;</span> <span class='p'>}</span> <span class='p'>]</span>
</code></pre>
</div>
<p>The <code>&#39;\xff&#39;</code> comes in handy here because we can use it to include every string of characters preceding it, so any of our user session keys will be included, as long as they don&#8217;t start with <code>&#39;\xff&#39;</code>. So again, you need to control the allowable characters in your keys in order to avoid surprises.</p>

<p>Namespacing and range queries are heavily used by many of the libraries that extend LevelUP. In the final article in this series we&#8217;ll be exploring some of the amazing ways that developers are extending LevelUP to provide additional features, applications and complete databases.</p>

<p>If you want to jump ahead, visit the <strong><a href='https://github.com/rvagg/node-levelup/wiki/Modules'>Modules</a></strong> page on the LevelUP wiki.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/02/meteor-book-review">Book Review: The Meteor Book</a></h2>
      <div class="meta">
        <span class="date">02 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/02/meteor-book-review/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#meteor">meteor</a>
          
            <a href="/tags.html#reviews">reviews</a>
          
            <a href="/tags.html#books">books</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/discovermeteor.png' alt='' />
  <small>Discover Meteor, by Sacha Greif and Tom Coleman</small>
</div>
<p>Sacha Greif sent me a copy of <a href='http://www.themeteorbook.com/'>The Meteor Book</a>, a new book all about Meteor that he&#8217;s writing with Tom Coleman, and will be released on May 7th. He was also kind enough to offer a 20% discount to DailyJS readers, which you can redeem at <a href='http://www.discovermeteor.com/dailyjs'>discovermeteor.com/dailyjs</a> (available when the book is released).</p>

<p>The book itself is currently being distributed as a web application that allows the authors to collect early feedback. Each chapter is displayed as a page, with chapter navigation along the left-hand-side of the page and Disqus comments. There will also be downloadable formats like PDF, ePub, and Kindle.</p>

<p>The authors teach Meteor by structuring the book around building a web application called <em>Microscope</em>, based on the open source Meteor app <a href='http://telesc.pe/'>Telescope</a>. Each chapter is presented as a long form tutorial: a list of chapter goals is given, and then you&#8217;re walked through adding a particular feature to the app. Each code listing is visible on the web through a specific instance of the app, and every sample has a Git tag so it&#8217;s easy to look up the full source at any point. I really liked this aspect of the design of the book, because it makes it easier for readers to recover from mistakes when following along with the tutorial themselves (something many DailyJS readers contact me about).</p>
<div class='image'>
  <img src='/images/posts/meteor-book-commit.png' alt='' />
  <small>Accessing a specific code sample is easy in <em>The Meteor Book</em></small>
</div>
<p>There are also &#8220;sidebar chapters&#8221;, which are used to dive into technical topics in more detail. For example, the <em>Deploying</em> chapter is a sidebar, and explains Meteor deployment issues in general rather than anything specific to the Microscope app.</p>

<p>Although I work with Node, Express, Backbone.js (and increasingly AngularJS), I&#8217;m not exactly an expert on Meteor. The book is pitched at intermediate developers, so you&#8217;ll fly through it if you&#8217;re a JavaScript developer looking to learn about Meteor.</p>

<p>Something that appealed to me specifically was how the authors picked out points where Meteor is similar to other projects &#8211; there&#8217;s a section called <em>Comparing Deps</em> which compares Meteor&#8217;s data-binding system to AngularJS:</p>

<blockquote>
<p>We&#8217;ve seen that Meteor&#8217;s model uses blocks of code, called computations, that are tracked by special &#8216;reactive&#8217; functions that invalidate the computations when appropriate. Computations can do what they like when they are invalidated, but normally simply re-run. In this way, a fine level of control over reactivity is achieved.</p>
</blockquote>

<p>They also explain the practical implications of some of Meteor&#8217;s design. For example, how hot code reloading relates to deployment and sessions, and how data can be limited to specific users for security reasons:</p>

<blockquote>
<p>So we can see in this example how a local collection is a secure subset of the real database. The logged-in user only sees enough of the real dataset to get the job done (in this case, signing in). This is a useful pattern to learn from as you&#8217;ll see later on.</p>
</blockquote>

<p>If you&#8217;ve heard about <a href='http://meteor.com/'>Meteor</a>, then this book serves as a solid introduction. I like the fact a chapter can be digested in a single sitting, and it&#8217;s presented with some excellent diagrams and cleverly managed code listings. It&#8217;s not always easy to get started with a new web framework, given the sheer amount of disparate technologies involved, but this book makes learning Meteor fun and accessible.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/05/01/node-roundup">Node Roundup: Caterpillar, squel, mongoose-currency</a></h2>
      <div class="meta">
        <span class="date">01 May 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/05/01/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#sql">sql</a>
          
            <a href="/tags.html#databases">databases</a>
          
            <a href="/tags.html#mongo">mongo</a>
          
            <a href="/tags.html#mongoose">mongoose</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='caterpillar'>Caterpillar</h3>

<p>Benjamin Lupton sent in Caterpillar (GitHub: <a href='https://github.com/bevry/caterpillar'>bevry / caterpillar</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/caterpillar'>caterpillar</a>), which is a logging system. It supports RFC-standard log levels, but the main reason I thought it was interesting is it&#8217;s based around the <em>streams2</em> API.</p>

<p>By piping a Caterpillar stream through a suitable instance of <code>stream.Transform</code>, you can do all kinds of cool things. For example, <a href='https://github.com/bevry/caterpillar-filter'>caterpillar-filter</a> can filter out unwanted log levels, and <a href='https://github.com/bevry/caterpillar-human'>caterpillar-human</a> adds fancy colours.</p>

<h3 id='squel'>squel</h3>

<p>I was impressed by Brian Carlson&#8217;s <a href='https://npmjs.org/package/sql'>sql</a> module, and Ramesh Nair sent in squel (GitHub: <a href='https://github.com/hiddentao/squel'>hiddentao / squel</a>, License: <em>BSD</em>, npm: <a href='https://github.com/hiddentao/squel'>squel</a>) which is a similar project. This SQL builder module supports non-standard queries, and has good test coverage with Mocha.</p>

<p>Ramesh has included some client-side examples as well, which sounds dangerous but may find uses, perhaps by generating SQL fragments to be used by an API that safely escapes them, or for generating documentation examples.</p>

<h3 id='mongoosecurrency'>mongoose-currency</h3>

<p>mongoose-currency (GitHub: <a href='https://github.com/catalystmediastudios/mongoose-currency'>catalystmediastudios / mongoose-currency</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/mongoose-currency'>mongoose-currency</a>) by Paul Smith adds currency support to Mongoose. Money values are stored as an integer that represents the lowest unit of currency (pence, cents). Input can be a string that contains a currency symbol, commas, and a decimal.</p>

<p>The <code>Currency</code> type works by stripping non-numerical characters. I&#8217;m not sure if this will work for regions where numbers use periods or spaces to separate groups of digits &#8211; it seems like this module would require localisation support to safely support anything other than dollars.</p>

<p>Paul has included unit tests written with Mocha, so it could be extended to support localised representations of currencies.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/04/30/jquery-roundup">jQuery Roundup: Sco.js, Datepicker Skins, LocationHandler</a></h2>
      <div class="meta">
        <span class="date">30 Apr 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/04/30/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#jquery-ui">jquery-ui</a>
          
            <a href="/tags.html#datepicker">datepicker</a>
          
            <a href="/tags.html#bootstrap">bootstrap</a>
          
            <a href="/tags.html#history">history</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='scojs'>Sco.js</h3>

<p><a href='http://terebentina.github.io/sco.js/'>Sco.js</a> (GitHub: <a href='https://github.com/terebentina/sco.js'>terebentina / sco.js</a>, License: <em>Apache 2.0</em>) by Dan Caragea is a collection of Bootstrap components. They can be dropped into an existing Bootstrap project, or used separately as well.</p>

<p>Some of the plugins are replacements of the Bootstrap equivalents, but prefixed with <code>$.scojs_</code>. There are also a few plugins that are unique to Sco.js, like <code>$.scojs_valid</code> for validating forms, and <code>$.scojs_countdown</code> for displaying a stopwatch-style timer.</p>

<p>In cases where Sco.js replaces Bootstrap plugins, the author has been motivated by simplifying the underlying markup and reducing the reliance on IDs.</p>

<p>Dan has included tests, and full documentation for each plugin.</p>

<h3 id='jquery_datepicker_skins'>jQuery Datepicker Skins</h3>

<p><img src='/images/posts/jquery-datepicker-skins.png' alt='jQuery datepicker skins' /></p>

<p>Artan Sinani sent in these <a href='http://rtsinani.github.io/jquery-datepicker-skins/'>jQuery datepicker skins</a> (GitHub: <a href='https://github.com/rtsinani/jquery-datepicker-skins'>rtsinani / jquery-datepicker-skins</a>). They&#8217;re tested with jQuery UI v1.10.1 and jQuery 1.9.1, so they should work with new projects quite nicely.</p>

<h3 id='locationhandler'>LocationHandler</h3>

<p>LocationHandler (GitHub: <a href='https://github.com/slv/LocationHandler'>slv / LocationHandler</a>) by Michele Salvini is a plugin for managing pushState and onpopstate. It emits events for various stages of the history change life cycle. Each supported state is documented in the readme, but the basic usage looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>).</span><span class='nx'>ready</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>locationHandler</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>LocationHandler</span><span class='p'>({</span>
    <span class='nx'>locationWillChange</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>change</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='p'>},</span>
    <span class='nx'>locationDidChange</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>change</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>change</code> object has properties for the from/to URLs, and page titles as well.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page15">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <strong>16</strong>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page17">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <ul class="jobs">
        <li class="job">
          <a class="link" target="_blank" href="/iridize.html">
            <h4>Lead Frontend Developer</h4>
            <h5>Iridize</h5>
            <img src="/images/posts/iridize.png" alt="">
            <p>Passionate about creating beautifully simple UX for an excitingly complex application? Join our iridize.com team @Israel.</p>
            <p><a href="/iridize.html">View full listing</a></p>
          </a>
        </li>
        <li class="job">
          <a class="link" target="_blank" href="http://tropicaldev.com/jobs/">
            <h4>NodeJS Developers</h4>
            <h5>ContinuousCRM <span class="tag node">Node</span> <span class="tag sql">SQL</span></h5>
            <img src="/images/jobs/continuous.png" alt="">
            <p>Work from Thailand! Sales and CRM system entirely in JavaScript.</p>
            <p><a href="http://tropicaldev.com/jobs/">View full listing</a></p>
          </a>
        </li>
      </ul>
      <div class="jobs-footer">JavaScript Jobs: <a href="http://contact.dailyjs.com/jobs">Create listing</a></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Contributors</h3>
      <ul>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/ricroberts">
              <img width="48" height="48" src="/images/twitter/RicRoberts.png" alt="Ric Roberts" />
              <span class="meta">
                <strong class="fullname">Ric Roberts</strong>
                <s>@</s>RicRoberts
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/rvagg">
              <img width="48" height="48" src="/images/twitter/rvagg.png" alt="Rod Vagg" />
              <span class="meta">
                <strong class="fullname">Rod Vagg</strong><br />
                <s>@</s>rvagg
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/voidfiles">
              <img width="48" height="48" src="/images/twitter/voidfiles.png" alt="Alex Kessinger" />
              <span class="meta">
                <strong class="fullname">Alex Kessinger</strong>
                <s>@</s>voidfiles
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/jaknowlden">
              <img width="48" height="48" src="/images/twitter/jaknowlden.png" alt="Justin Knowlden" />
              <span class="meta">
                <strong class="fullname">Justin Knowlden</strong>
                <s>@</s>jaknowlden
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/olegpodsechin">
              <img width="48" height="48" src="/images/twitter/olegpodsechin.png" alt="Oleg Podsechin" />
              <span class="meta">
                <strong class="fullname">Oleg Podsechin</strong>
                <s>@</s>olegpodsechin
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

