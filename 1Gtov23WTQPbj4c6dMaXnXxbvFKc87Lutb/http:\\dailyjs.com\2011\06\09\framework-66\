http://dailyjs.com/2011/06/09/framework-66/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 14:39:31 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "16c2ad-88ed-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 7641
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Let's Make a Framework: Promises Part 2</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2011/06/09/framework-66">Let's Make a Framework: Promises Part 2</a></h2>

<div class="meta">
  09 Jun 2011 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#frameworks">frameworks</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#lmaf">lmaf</a>
    
      <a href="/tags.html#documentation">documentation</a>
    
      <a href="/tags.html#promises">promises</a>
    
  </span>
</div>

<div id="post">
<div class="intro">
<p><em>Let&#8217;s Make a Framework</em> is an ongoing series about building a JavaScript framework from the ground up.</p>
<p>These articles are tagged with <a href="http://dailyjs.com/tags.html#lmaf">lmaf</a>.  The project we&#8217;re creating is called <a href="http://github.com/alexyoung/turing.js">Turing</a>.  Documentation is available at <a href="http://turingjs.com/">turingjs.com</a>.</p>
</div>
<p><a href="http://dailyjs.com/2011/06/02/framework-65/">Last week&#8217;s post</a> introduced the concept of <em>promises</em>, which are defined by the CommonJS <a href="http://wiki.commonjs.org/wiki/Promises/A">Promises/A</a> specification.</p>
<h3>Implementation Concepts</h3>
<p>It&#8217;s important to realise that implementing promises requires some coupling or wrapping between the promise library and code that will use it.  For example, in jQuery, <a href="https://github.com/jquery/jquery/blob/master/src/deferred.js">deferred.js</a> contains the promise <span class="caps">API</span> implementation.  That doesn&#8217;t mean Ajax requests can now simply be manipulated to work with a promise, like this:</p>
<div class="highlight"><pre><code class="javascript"><span class="c1">// This won&#39;t work:</span>
<span class="nx">promiseLibrary</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/example&#39;</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Ajax complete!</span>
<span class="p">});</span>
</code></pre>
</div>
<p>There&#8217;s no way for <code>promiseLibrary</code> to be signalled by a given method in a generic way.</p>
<p>This next example is from <a href="https://github.com/kriskowal/q">q</a> for Node.  It wraps promises around a file system call:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">var</span> <span class="nx">FS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">list</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">path</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="nx">FS</span><span class="p">.</span><span class="nx">readdir</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span>
      <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="k">else</span>
      <span class="nx">result</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">list</span><span class="p">(</span><span class="s1">&#39;/path/name&#39;</span><span class="p">);</span>
</code></pre>
</div>
<p>Here <code>Q</code> is used inside the callback usually called by the <code>fs</code> module.  This new <code>list()</code> method will return a promise, allowing subsequent use of q&#8217;s <code>when</code> primitive to build potentially more expressive file system queries.</p>
<p>What all of this means is jQuery&#8217;s <a href="https://github.com/jquery/jquery/blob/master/src/ajax.js">ajax.js</a> is <em>coupled</em> to the promise implementation.  This allows jQuery to offer an alternative <span class="caps">API</span> based around promises:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;$.get succeeded&#39;</span><span class="p">);</span> <span class="p">},</span>
  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;$.get failed!&#39;</span><span class="p">);</span> <span class="p">}</span>
<span class="p">);</span>
</code></pre>
</div>
<p>Despite this coupling between the Promise and Ajax libraries, injecting jQuery&#8217;s <code>Deferred</code> objects into the Ajax library isn&#8217;t particularly taxing.  Here&#8217;s a core piece of this implementation:</p>
<div class="highlight"><pre><code class="javascript"><span class="c1">// Success/Error</span>
<span class="k">if</span> <span class="p">(</span> <span class="nx">isSuccess</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolveWith</span><span class="p">(</span> <span class="nx">callbackContext</span><span class="p">,</span> <span class="p">[</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">statusText</span><span class="p">,</span> <span class="nx">jqXHR</span> <span class="p">]</span> <span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">deferred</span><span class="p">.</span><span class="nx">rejectWith</span><span class="p">(</span> <span class="nx">callbackContext</span><span class="p">,</span> <span class="p">[</span> <span class="nx">jqXHR</span><span class="p">,</span> <span class="nx">statusText</span><span class="p">,</span> <span class="nx">error</span> <span class="p">]</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre>
</div>
<p>jQuery&#8217;s public APIs place a veneer between jQuery&#8217;s other functionality and the <code>Deferred</code> object&#8217;s <span class="caps">API</span>.  Using an Ajax call looks a lot like CommonJS Promises/A&#8217;s suggestion, but in reality methods like <code>resolveWith</code> and <code>rejectWith</code> are being used underneath to provide the logic required to maintain asynchronous states.</p>
<h3>An Example</h3>
<p>I&#8217;m going to introduce promises gently, because it&#8217;s the kind of thing that can easily end up a confusing mess.  The example in this article is intentionally limited so anyone should be able to follow it.</p>
<p>Developing a promise <span class="caps">API</span> needs a straightforward example to get the basic features nailed down.  We need to be able to create a delay that can trigger the promise <span class="caps">API</span> in a predictable way.  When experimenting with anything asynchronous, I always find good old <code>setTimeout</code> to be a big help, so let&#8217;s use that:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">delay</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>
<p>This is based on q&#8217;s examples, and it just wraps <code>setTimeout</code> with a promise.  Ideally, running the following in an interpreter should take a second, <em>then</em> display the message:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Delay complete&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
</div>
<p>However&#8230; once a promise has fired, it shouldn&#8217;t be able to get triggered again.  Imagine if someone had implemented a timeout system like this:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">timeout</span><span class="p">(</span><span class="nx">duration</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">duration</span><span class="p">);</span>

  <span class="c1">// If the duration was over the limit then ideally the promise should fail</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">,</span> <span class="nx">limit</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>
<p>Should both callbacks fire?  Should an exception be thrown?  Well, jQuery is designed to simply clear out the <em>then</em> callbacks as it rattles through them:</p>
<div class="highlight"><pre><code class="javascript"><span class="c1">// resolve with given context and args</span>
<span class="nx">resolveWith</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">args</span> <span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">cancelled</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">fired</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">firing</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// make sure args are available (#8421)</span>
    <span class="nx">args</span> <span class="o">=</span> <span class="nx">args</span> <span class="o">||</span> <span class="p">[];</span>
    <span class="nx">firing</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">while</span><span class="p">(</span> <span class="nx">callbacks</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nx">callbacks</span><span class="p">.</span><span class="nx">shift</span><span class="p">().</span><span class="nx">apply</span><span class="p">(</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">args</span> <span class="p">);</span>
      <span class="p">}</span>
      <span class="c1">// ...</span>
</code></pre>
</div>
<p>See that use of <code>shift()</code> there?  That&#8217;s effectively looping through each callback, running it, then removing it.</p>
<h3>A Promise Object</h3>
<p>Of course, our promise <span class="caps">API</span> isn&#8217;t just a stack of callbacks.  We also need to store state, and allow callbacks to be added.  To me this implies a class with a simple <span class="caps">API</span>:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">Promise</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Pending callbacks</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">pending</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>

<span class="nx">Promise</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">// Called when something finished successfully</span>
  <span class="nx">resolve</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// This is where we&#39;ll loop through callbacks</span>
  <span class="p">},</span>

  <span class="c1">// Called when something broke</span>
  <span class="nx">reject</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">},</span>

  <span class="c1">// I think you&#39;ll agree that implementing then is pretty easy</span>
  <span class="c1">// This uses a handy object that follows along with our API nicely</span>
  <span class="nx">then</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">pending</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">resolve</span><span class="o">:</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">reject</span><span class="o">:</span> <span class="nx">failure</span> <span class="p">});</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre>
</div>
<p>That&#8217;s looking good, but I want to use <code>setTimeout(promise.resolve, 100)</code> and that will cause <code>resolve</code> to have the wrong <code>this</code>.  These methods could easily be moved to the constructor to make the <code>resolve</code> and <code>reject</code> methods behave more naturally:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">Promise</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">pending</span> <span class="o">=</span> <span class="p">[];</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">self</span><span class="p">.</span><span class="nx">complete</span><span class="p">(</span><span class="s1">&#39;resolve&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
  <span class="p">},</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">reject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">self</span><span class="p">.</span><span class="nx">complete</span><span class="p">(</span><span class="s1">&#39;reject&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Promise</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">then</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">pending</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">resolve</span><span class="o">:</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">reject</span><span class="o">:</span> <span class="nx">failure</span> <span class="p">});</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">},</span>

  <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pending</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">pending</span><span class="p">.</span><span class="nx">shift</span><span class="p">()[</span><span class="nx">type</span><span class="p">](</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre>
</div>
<p>I also started writing some tests for this:</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">delay</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">timeout</span><span class="p">(</span><span class="nx">duration</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">duration</span><span class="p">);</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">reject</span><span class="p">,</span> <span class="nx">limit</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Delay complete&#39;</span><span class="p">);</span>
  <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="s1">&#39;Delay completed&#39;</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">timeout</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Timeout 1 OK&#39;</span><span class="p">);</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="s1">&#39;10ms is under 100ms&#39;</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">fail</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="nx">timeout</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">fail</span><span class="p">();</span>
  <span class="p">},</span>
  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Timeout 2 OK&#39;</span><span class="p">);</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="s1">&#39;100ms is over 10ms&#39;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre>
</div>
<h3>Conclusion</h3>
<p>This is a very naive implementation of what CommonJS Promises/A describes.  Ultimately, I&#8217;d like to have something that can be used to provide an elegant <span class="caps">API</span> for Ajax callbacks and animations, which are both areas in client-side JavaScript where asynchronous code is important.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2011/06/09/framework-66/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

