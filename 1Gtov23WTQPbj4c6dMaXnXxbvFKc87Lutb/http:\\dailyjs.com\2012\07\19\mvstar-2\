http://dailyjs.com/2012/07/19/mvstar-2/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 12:19:59 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "104434-7aeb-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8436
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Backbone.js: Hacker's Guide</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2012/07/19/mvstar-2">Backbone.js: Hacker's Guide</a></h2>

<div class="meta">
  19 Jul 2012 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#mvc">mvc</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#backbone.js">backbone.js</a>
    
      <a href="/tags.html#code-review">code-review</a>
    
  </span>
</div>

<div id="post">
<p>There&#8217;s no denying the popularity and impact that <a href='http://backbonejs.org/'>Backbone.js</a> (License: <em>MIT</em>, GitHub: <a href='https://github.com/documentcloud/backbone/'>documentcloud / backbone</a>) by Jeremy Ashkenas and DocumentCloud has made. Although the documentation and examples are excellent, I thought it would be interesting to review the code on a more technical level. Hopefully this will give readers a deeper understanding of Backbone, and as the <em>MVC</em> series progresses these code reviews should prove useful in accurately comparing the many competing frameworks.</p>

<p>Follow me on a guided tour through Backbone&#8217;s source to really learn how it works and what it provides.</p>

<h3 id='namespace_and_conflict_management'>Namespace and Conflict Management</h3>

<p>Like most client-side projects, Backbone.js wraps everything in an immediately-invoked function expression:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>(</span><span class='kd'>function</span><span class='p'>(){</span>
  <span class='c1'>// Backbone.js</span>
<span class='p'>}).</span><span class='nx'>call</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
</code></pre>
</div>
<p>Several things happen during this configuration stage. A <code>Backbone</code> &#8220;namespace&#8221; is created, and multiple versions of Backbone on the same page are supported through the <code>noConflict</code> mode:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>root</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
<span class='kd'>var</span> <span class='nx'>previousBackbone</span> <span class='o'>=</span> <span class='nx'>root</span><span class='p'>.</span><span class='nx'>Backbone</span><span class='p'>;</span>

<span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>noConflict</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>root</span><span class='p'>.</span><span class='nx'>Backbone</span> <span class='o'>=</span> <span class='nx'>previousBackbone</span><span class='p'>;</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Multiple versions of Backbone can be used on the same page by calling <code>noConflict</code> like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Backbone19</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>noConflict</span><span class='p'>();</span>
<span class='c1'>// Backbone19 refers to the most recently loaded version,</span>
<span class='c1'>// and `window.Backbone` will be restored to the previously</span>
<span class='c1'>// loaded version</span>
</code></pre>
</div>
<p>This initial configuration code also supports CommonJS modules so Backbone can be used in Node projects:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Backbone</span><span class='p'>;</span>
<span class='k'>if</span> <span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>exports</span> <span class='o'>!==</span> <span class='s1'>&#39;undefined&#39;</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>Backbone</span> <span class='o'>=</span> <span class='nx'>exports</span><span class='p'>;</span>
<span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
  <span class='nx'>Backbone</span> <span class='o'>=</span> <span class='nx'>root</span><span class='p'>.</span><span class='nx'>Backbone</span> <span class='o'>=</span> <span class='p'>{};</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The existence of <a href='http://underscorejs.org/'>Underscore.js</a> (also by DocumentCloud) and a jQuery-like library is checked as well.</p>

<h3 id='server_support'>Server Support</h3>

<p>During configuration, Backbone sets a variable to denote if extended HTTP methods are supported by the server. Another setting controls if the server understands the correct MIME type for JSON:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>emulateHTTP</span> <span class='o'>=</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>emulateJSON</span> <span class='o'>=</span> <span class='kc'>false</span><span class='p'>;</span>
</code></pre>
</div>
<p>The <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L1331'>Backbone.sync</a> method that uses these values is actually an integral part of Backbone.js. A jQuery-like <code>ajax</code> method is assumed, so HTTP parameters are organised based on jQuery&#8217;s API. Searching through the code for calls to the <code>sync</code> method show it&#8217;s used whenever a model is saved, fetched, or deleted (destroyed).</p>

<p>What if jQuery&#8217;s <code>ajax</code> API isn&#8217;t appropriate for your project? Well, it seems like the <code>sync</code> method is the right place to override for changing how models are persisted, and this is confirmed by Backbone&#8217;s documentation:</p>

<blockquote>
<p>The <em>sync</em> function may be overriden globally as <code>Backbone.sync</code>, or at a finer-grained level, by adding a <code>sync</code> function to a Backbone collection or to an individual model.</p>
</blockquote>

<p>There&#8217;s no fancy plugin API for adding a persistence layer &#8211; simply override <code>Backbone.sync</code> with the same function signature:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The default <code>methodMap</code> is useful for working out what the <code>method</code> argument does:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>methodMap</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='s1'>&#39;create&#39;</span><span class='o'>:</span> <span class='s1'>&#39;POST&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;update&#39;</span><span class='o'>:</span> <span class='s1'>&#39;PUT&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;delete&#39;</span><span class='o'>:</span> <span class='s1'>&#39;DELETE&#39;</span><span class='p'>,</span>
  <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>   <span class='s1'>&#39;GET&#39;</span>
<span class='p'>};</span>
</code></pre>
</div>
<h3 id='events'>Events</h3>

<p>Backbone has a <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L76-167'>built-in module for handling events</a>. It&#8217;s a simple object with the following methods:</p>

<ul>
<li><code>on: function(events, callback, context) </code>, aliased to <code>bind</code></li>

<li><code>off: function(events, callback, context) {</code>, aliased to <code>unbind</code></li>

<li><code>trigger: function(events) {</code></li>
</ul>

<p>Each of these methods returns <code>this</code>, so it&#8217;s a chainable object. The comments recommend using Underscore.js to add <code>Backbone.Events</code> to any object:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>//     var object = {};</span>
<span class='c1'>//     _.extend(object, Backbone.Events);</span>
<span class='c1'>//     object.on(&#39;expand&#39;, function(){ alert(&#39;expanded&#39;); });</span>
<span class='c1'>//     object.trigger(&#39;expand&#39;);</span>
</code></pre>
</div>
<p>This won&#8217;t overwrite the existing object, it appends the methods instead. That means it&#8217;s easy to add event support to other objects in your project.</p>

<h3 id='model'>Model</h3>

<p><a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L178'>Backbone.Model</a> is where things start to get serious. Models use a constructor function that sets up various internal properties for managing things like attributes and whether or not the model has been saved yet. Underscore.js is used to add the methods from <code>Backbone.Events</code>, and then the public model API is defined. This contains most of the frequently used Backbone methods.</p>

<p>Notice that <code>Backbone.Model</code> is actually quite transparent: there aren&#8217;t any private methods defined inside the constructor.</p>

<p>The <code>set</code> method supports two different signatures, making it easy to support a <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L257-264'>single attribute or multiple attributes</a>:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Handle both `&quot;key&quot;, value` and `{key: value}` -style arguments.</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>_</span><span class='p'>.</span><span class='nx'>isObject</span><span class='p'>(</span><span class='nx'>key</span><span class='p'>)</span> <span class='o'>||</span> <span class='nx'>key</span> <span class='o'>==</span> <span class='kc'>null</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>attrs</span> <span class='o'>=</span> <span class='nx'>key</span><span class='p'>;</span>
  <span class='nx'>options</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>;</span>
<span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
  <span class='nx'>attrs</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='nx'>attrs</span><span class='p'>[</span><span class='nx'>key</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>value</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L349-355'>save method does something similar</a>. Notice how the authors ensure an object is always set for <code>options</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>
</code></pre>
</div>
<p>In terms of expressing the programmer&#8217;s intent, this seems better than <code>options = options || {}</code>.</p>

<p>The <code>set</code> method triggers validations and prevents the method from progressing if a validation fails:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_validate</span><span class='p'>(</span><span class='nx'>attrs</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>))</span> <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
</code></pre>
</div>
<p>Next each attribute is iterated over. If the attribute has changed, according to Underscore&#8217;s <code>isEqual</code> method, then the change is recorded. Once the list of changes have been built, the <code>change</code> method is called.</p>

<p>The <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L457'>change</a> method calls <code>trigger</code> for each change. This allows for changes to any attribute to be listened on specifically, allowing the UI to be updated appropriately. For example, let&#8217;s say I had a <code>blogPost</code> model instance:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>blogPost</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;change:title&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// Update the HTML for the page title</span>
<span class='p'>});</span>

<span class='nx'>blogPost</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;title&#39;</span><span class='p'>,</span> <span class='s1'>&#39;All Work and No Play Makes Blank a Blank Blank&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Other methods also trigger <code>change</code> events: <code>unset</code>, <code>clear</code>, and <code>fetch</code>. Since we don&#8217;t always care if these cause a change event, a <code>silent</code> option is supported that will be passed from these methods to <code>set</code>. It&#8217;s actually quite interesting how each of these methods is implemented by reusing <code>set</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Clear all attributes on the model, firing `&quot;change&quot;` unless you choose</span>
<span class='c1'>// to silence it.</span>
<span class='nx'>clear</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>options</span> <span class='o'>=</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({},</span> <span class='nx'>options</span><span class='p'>,</span> <span class='p'>{</span><span class='nx'>unset</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>});</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='nx'>_</span><span class='p'>.</span><span class='nx'>clone</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>attributes</span><span class='p'>),</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>The <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L329'>fetch</a> method will trigger a sync operation that will retrieve the latest values from the server (or suitable persistence layer if it&#8217;s been overridden).</p>

<p>The <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L345'>save</a> method ensures only valid attributes and models are persisted, and calls <code>set</code> if required:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>wait</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>_validate</span><span class='p'>(</span><span class='nx'>attrs</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>))</span> <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
  <span class='nx'>current</span> <span class='o'>=</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>clone</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>attributes</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='c1'>// Regular saves `set` attributes before persisting to the server.</span>
<span class='kd'>var</span> <span class='nx'>silentOptions</span> <span class='o'>=</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({},</span> <span class='nx'>options</span><span class='p'>,</span> <span class='p'>{</span><span class='nx'>silent</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>});</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nx'>attrs</span> <span class='o'>&amp;&amp;</span> <span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='nx'>attrs</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>wait</span> <span class='o'>?</span> <span class='nx'>silentOptions</span> <span class='o'>:</span> <span class='nx'>options</span><span class='p'>))</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='c1'>// Do not persist invalid models.</span>
<span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>attrs</span> <span class='o'>&amp;&amp;</span> <span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>isValid</span><span class='p'>())</span> <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
</code></pre>
</div>
<p>The <code>sync</code> method is called to persist the changes to the server. <code>isNew</code> is used to determine if the model should be created or updated. The <code>isNew</code> state is determined by whether an <code>id</code> attribute exists or not. This could be easily overridden if a given persistence layer works a different way. Notice that Backbone internally references this attribute as <code>this.id</code> and doesn&#8217;t map it to the value set with <code>idAttribute</code> in <code>isNew</code>.</p>

<p>A <a href='https://github.com/documentcloud/backbone/blob/ddefd21167c27d98fd1eb05a44e330a2313055f6/backbone.js#L440'>parse</a> placeholder method is called whenever models are fetched, or saved. There are examples of people using this to parse other <a href='http://newcome.wordpress.com/2011/02/20/consuming-xml-web-services-in-backbone-js-using-jath/'>data formats like XML</a>.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>After looking at the Backbone.js setup and model code, we&#8217;ve already learned quite a lot:</p>

<ul>
<li>Any persistence scheme can be supported by overriding the <code>sync</code> method</li>

<li>Models are event-based</li>

<li><code>change</code> events can drive the UI whenever models change</li>

<li>Models know when to create or update objects</li>

<li>Reusing Backbone&#8217;s models, events, and Underscore methods is useful for organising project architecture</li>
</ul>

<p>Although the Backbone models don&#8217;t have a plugin layer, the authors have kept the design open and allowed for just the right hooks to support lots of HTTP services and data types outside the built-in RESTful JSON oriented design.</p>

<p>Backbone relies heavily on Underscore.js, which means applications built with it can build on both of these libraries to create (potentially) well-designed and reusable code.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2012/07/19/mvstar-2/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

