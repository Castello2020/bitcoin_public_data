http://dailyjs.com/2010/11/22/node-tutorial-4/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 15:24:35 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:50 GMT
ETag: "141684-8d67-4fedef268ec80"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 8531
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Node Tutorial Part 4</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2010/11/22/node-tutorial-4">Node Tutorial Part 4</a></h2>

<div class="meta">
  22 Nov 2010 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#server">server</a>
    
      <a href="/tags.html#node">node</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#lmawa">lmawa</a>
    
      <a href="/tags.html#nodepad">nodepad</a>
    
  </span>
</div>

<div id="post">
<p>Welcome to part 4 of <em>Let&#8217;s Make a Web App</em>, a tutorial series about building a web app with <a href="http://nodejs.org/">Node</a>.  This series will walk you through the major areas you&#8217;ll need to face when building your own applications.  These tutorials are tagged with <a href="/tags.html#lmawa">lmawa</a>.</p>
<p>Previous tutorials:</p>
<ul>
	<li><a href="http://dailyjs.com/2010/11/01/node-tutorial/">Part 1: Introduction</a></li>
	<li><a href="http://dailyjs.com/2010/11/08/node-tutorial-2/">Part 2: Installation and Skeleton App</a>, source code commit: <a href="https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7">4ea936b</a></li>
	<li><a href="http://dailyjs.com/2010/11/15/node-tutorial-3/">Part 3: RESTful Methods and Testing</a>, source code commit: <a href="https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786">39e66cb</a></li>
</ul>
<p>In this part I&#8217;ll add so much stuff you should get up and make a cup of tea first.</p>
<p>By the end of the tutorial (or right now if you check the code out from git), you&#8217;ll have something that looks like this:</p>
<p><img src="/images/posts/nodepad3.png" alt="" /></p>
<p>Not all of the code is in this tutorial text: I&#8217;ve shortened a few code examples and haven&#8217;t included any <span class="caps">CSS</span>.  It&#8217;s all available in the repository, so download it and open it up in your editor.</p>
<h3>Updating Expresso</h3>
<p>Expresso has been updated to 0.70.  Upgrade yours with <code>npm update expresso</code>.  The version we started out with is no-longer fully compatible with <a href="http://visionmedia.github.com/expresso/">the documentation</a>, particularly the <code>beforeExit</code> method handling.</p>
<h3>Rendering Templates</h3>
<p>The document list method (<code>/documents</code>) should render a list of documents that we can edit.  To do this, add an appropriate <code>render</code> invocation:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;documents/index.jade&#39;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span> <span class="nx">documents</span><span class="o">:</span> <span class="nx">documents</span> <span class="p">}</span>
<span class="p">});</span>
</code></pre>
</div>
<p>&#8230; and a corresponding template:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">ul</span>
  <span class="o">-</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">d</span> <span class="k">in</span> <span class="nx">documents</span><span class="p">)</span>
    <span class="nx">li</span><span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">title</span>
</code></pre>
</div>
<p>Remember that our templates are written with Express&#8217;s default language, <a href="http://jade-lang.com/">Jade</a>.</p>
<h3>Jade</h3>
<p>Using Jade is strange at first, but it&#8217;s actually pretty easy to get the hang of.  Here are the key things to remember:</p>
<ul>
	<li>Indentations represent tag nesting</li>
	<li>The equals sign means include a variable</li>
	<li>Not equal means include a variable without escaping it first</li>
	<li>The hyphen sign allows inclusion of JavaScript</li>
</ul>
<p>Note that it&#8217;s generally a good idea to escape as much as possible to reduce the chance of <span class="caps">XSS</span> attacks.</p>
<h3>Partials</h3>
<p>Jade and Express make partials &#8212; little snippets of reusable templates &#8212; easy.  Here&#8217;s the new document (views/documents/new.jade) template:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">h2</span> <span class="nx">New</span> <span class="nx">Document</span>
<span class="nx">form</span><span class="p">(</span><span class="nx">method</span><span class="o">=</span><span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="nx">action</span><span class="o">=</span><span class="s1">&#39;/documents&#39;</span><span class="p">)</span>
  <span class="o">!=</span><span class="nx">partial</span><span class="p">(</span><span class="s1">&#39;documents/fields&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span> <span class="nx">d</span><span class="o">:</span> <span class="nx">d</span> <span class="p">}</span> <span class="p">})</span>
</code></pre>
</div>
<p>The partial is rendered by calling <code>partial(template file name, options)</code>. The output isn&#8217;t escaped because we&#8217;d just see <span class="caps">HTML</span> tags if it was &#8212; the user-defined fields within it will be escaped, so it&#8217;s still safe.</p>
<h3>New and Edit Forms</h3>
<p>Before creating the mind-blowingly awesome Ajax interface, let&#8217;s make some simple templates.  Our <span class="caps">REST</span> <span class="caps">API</span> defined create and update methods, so we should make corresponding new and edit methods to provide a user interface.</p>
<p>I usually split forms like this into three templates.  One is a reusable partial that contains the form fields.  The other two are new and edit templates that contain the appropriate form code to wrap around the fields.</p>
<p>The new form was used as an example above.  The edit form, views/documents/edit.jade looks like this:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">h2</span> <span class="nx">Edit</span> <span class="nx">Document</span>
<span class="nx">form</span><span class="p">(</span><span class="nx">method</span><span class="o">=</span><span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="nx">action</span><span class="o">=</span><span class="s1">&#39;/documents/&#39;</span> <span class="o">+</span> <span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
  <span class="nx">input</span><span class="p">(</span><span class="nx">name</span><span class="o">=</span><span class="s1">&#39;document[id]&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;hidden&#39;</span><span class="p">)</span>
  <span class="nx">input</span><span class="p">(</span><span class="nx">name</span><span class="o">=</span><span class="s1">&#39;_method&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">=</span><span class="s1">&#39;PUT&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;hidden&#39;</span><span class="p">)</span>
  <span class="o">!=</span><span class="nx">partial</span><span class="p">(</span><span class="s1">&#39;documents/fields&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span> <span class="nx">d</span><span class="o">:</span> <span class="nx">d</span> <span class="p">}</span> <span class="p">})</span>
</code></pre>
</div>
<p>That&#8217;s the same as new, but with added hidden input fields.  The <code>_method</code> field allows us to <code>POST</code> this form to a <code>put</code> route, which came from the RESTful <span class="caps">API</span> we designed last week.</p>
<p>The fields partial (views/partials/documents/fields.jade) is simple as well:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">div</span>
  <span class="nx">label</span> <span class="nx">Title</span><span class="o">:</span>
    <span class="nx">input</span><span class="p">(</span><span class="nx">name</span><span class="o">=</span><span class="s1">&#39;document[title]&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">title</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="nx">div</span>
  <span class="nx">label</span> <span class="nx">Note</span><span class="o">:</span>
    <span class="nx">textarea</span><span class="p">(</span><span class="nx">name</span><span class="o">=</span><span class="s1">&#39;document[data]&#39;</span><span class="p">)</span>
      <span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">data</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
<span class="nx">div</span>
  <span class="nx">input</span><span class="p">(</span><span class="nx">type</span><span class="o">=</span><span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">=</span><span class="s1">&#39;Save&#39;</span><span class="p">)</span>
</code></pre>
</div>
<p>By this point you should be getting a feel for Jade.  I&#8217;m not a die-hard haml/Jade fan, but as you can see these examples have been very light on syntax.</p>
<h3>New and Edit Back-end Methods</h3>
<p>All the new and edit server-side methods do is load a document and render the forms:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/documents/:id.:format?/edit&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Document</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;documents/edit.jade&#39;</span><span class="p">,</span> <span class="p">{</span>
      <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span> <span class="nx">d</span><span class="o">:</span> <span class="nx">d</span> <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/documents/new&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;documents/new.jade&#39;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">locals</span><span class="o">:</span> <span class="p">{</span> <span class="nx">d</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Document</span><span class="p">()</span> <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>
<p>The new method makes a blank <code>Document</code> to keep the form templates happy.</p>
<h3>Mongo IDs</h3>
<p>Did you notice that the templates refer to <code>d.id</code>?  Mongoose makes <code>_id</code> fields by default, which are <code>ObjectID</code> data types.  This doesn&#8217;t look too great on the web, so I made this getter method and added it to model.js:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">getters</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">id</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">.</span><span class="nx">toHexString</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>
<p>By using <code>toHexString</code> we get nice IDs like <code>4cd733fb20a558cee5000001</code>.</p>
<h3>Update and Delete</h3>
<p>Both the update and destroy methods load the document first then call <code>save</code> or <code>remove</code> on it.  The general pattern is as follows:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/documents/:id.:format?&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Load the document</span>
  <span class="nx">Document</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something with it</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>

    <span class="c1">// Persist the changes</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Respond according to the request format</span>
      <span class="k">switch</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">format</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="s1">&#39;json&#39;</span><span class="o">:</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">__doc</span><span class="p">);</span>
         <span class="k">break</span><span class="p">;</span>

         <span class="k">default</span><span class="o">:</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/documents&#39;</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>
</div>
<p>Delete is basically the same, except <code>remove</code> is called instead of <code>save</code>.</p>
<h3>Delete JavaScript</h3>
<p>One quirk of our <span class="caps">API</span> is we&#8217;re using Express&#8217;s <code>del</code> method, which means it&#8217;ll expect to see <code>_method="delete"</code> in the post parameters.  Most frameworks implement this by using a bit of client-side JavaScript.</p>
<p>As I said in the first tutorial, we&#8217;re going to use jQuery.  jQuery can be included by editing the layout.jade template to look like this:</p>
<div class="highlight"><pre><code class="javascript"><span class="o">!!!</span>
<span class="nx">html</span>
  <span class="nx">head</span>
    <span class="nx">title</span><span class="o">=</span> <span class="s1">&#39;Nodepad&#39;</span>
    <span class="nx">link</span><span class="p">(</span><span class="nx">rel</span><span class="o">=</span><span class="s1">&#39;stylesheet&#39;</span><span class="p">,</span> <span class="nx">href</span><span class="o">=</span><span class="s1">&#39;/stylesheets/style.css&#39;</span><span class="p">)</span>
    <span class="nx">script</span><span class="p">(</span><span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text/javascript&#39;</span><span class="p">,</span> <span class="nx">src</span><span class="o">=</span><span class="s1">&#39;https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js&#39;</span><span class="p">)</span>
  <span class="nx">body</span><span class="o">!=</span> <span class="nx">body</span>
    <span class="nx">script</span><span class="p">(</span><span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text/javascript&#39;</span><span class="p">,</span> <span class="nx">src</span><span class="o">=</span><span class="s1">&#39;/javascripts/application.js&#39;</span><span class="p">)</span>
</code></pre>
</div>
<p>This also includes our JavaScript at the bottom.  Express is already set up to serve static files that are in the public directory.</p>
<p>The client-side delete JavaScript works by:</p>
<ol>
	<li>Using <code>confirm()</code> to check if the user really wanted to delete the document</li>
	<li>Dynamically inserting a form with a hidden input called <code>_method</code> with a value of <code>delete</code></li>
	<li>Submitting the form</li>
</ol>
<p>Of course, this is simple with jQuery.  I wrote the whole thing as one chained set of instructions:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.destroy&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Are you sure you want to delete that item?&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">),</span>
        <span class="nx">form</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;form&gt;&lt;/form&gt;&#39;</span><span class="p">);</span>
    <span class="nx">form</span>
      <span class="p">.</span><span class="nx">attr</span><span class="p">({</span>
        <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
        <span class="nx">action</span><span class="o">:</span> <span class="nx">element</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">hide</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;input type=&quot;hidden&quot; /&gt;&#39;</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">attr</span><span class="p">({</span>
        <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;_method&#39;</span><span class="p">,</span>
        <span class="s1">&#39;value&#39;</span><span class="o">:</span> <span class="s1">&#39;delete&#39;</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">end</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">submit</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>
</div>
<p>It uses a live event delegate so we don&#8217;t litter our client-side <span class="caps">HTML</span> with inline JavaScript.</p>
<h3>The Index Page</h3>
<p>I&#8217;ve made the default action redirect to <code>/documents</code>, and the document index action do this:</p>
<div class="highlight"><pre><code class="javascript"><span class="nx">h1</span> <span class="nx">Your</span> <span class="nx">Documents</span>

<span class="nx">p</span>
  <span class="nx">a</span><span class="p">(</span><span class="kr">class</span><span class="o">=</span><span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">href</span><span class="o">=</span><span class="s1">&#39;/documents/new&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">New</span> <span class="nx">Document</span>

<span class="nx">ul</span>
  <span class="o">-</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">d</span> <span class="k">in</span> <span class="nx">documents</span><span class="p">)</span>
    <span class="nx">li</span>
      <span class="nx">a</span><span class="p">(</span><span class="kr">class</span><span class="o">=</span><span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">href</span><span class="o">=</span><span class="s1">&#39;/documents/&#39;</span> <span class="o">+</span> <span class="nx">documents</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;/edit&#39;</span><span class="p">)</span> <span class="nx">Edit</span>
      <span class="nx">a</span><span class="p">(</span><span class="kr">class</span><span class="o">=</span><span class="s1">&#39;button destroy&#39;</span><span class="p">,</span> <span class="nx">href</span><span class="o">=</span><span class="s1">&#39;/documents/&#39;</span> <span class="o">+</span> <span class="nx">documents</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">id</span><span class="p">)</span> <span class="nx">Delete</span>
      <span class="nx">a</span><span class="p">(</span><span class="nx">href</span><span class="o">=</span><span class="s1">&#39;/documents/&#39;</span> <span class="o">+</span> <span class="nx">documents</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">id</span><span class="p">)</span>
        <span class="o">=</span><span class="nx">documents</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">title</span>
</code></pre>
</div>
<p>This is an example of using an iterator in Jade.  A preferable approach would be to use partial&#8217;s collection support, but it&#8217;s useful to demonstrate how control blocks within templates work in Jade.</p>
<h3>Conclusion</h3>
<p>As of <a href="https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5">commit f66fdb5</a> we now have a basic working notepad.</p>
<p>Check out the latest version of <a href="https://github.com/alexyoung/nodepad/">Nodepad</a> and see what cool features you can add before I continue the series next week.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2010/11/22/node-tutorial-4/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

