http://dailyjs.com/page29/
HTTP/1.1 200 OK
Date: Tue, 22 Jul 2014 11:21:42 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Mon, 21 Jul 2014 18:13:30 GMT
ETag: "e937e-288f7-4feb8106f2680"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 36366
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/28/js101-prototype-chains">JS101: Inheritance</a></h2>
      <div class="meta">
        <span class="date">28 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/28/js101-prototype-chains/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
  JS101 is a tutorial series aimed at beginners.  Each post is a bite-sized chunk aimed to elucidate JavaScript fundamentals.  To read previous posts, view the <a href='/tags.html#js101'>js101</a> tag.
</div>
<h3 id='inheritance_chains_and_constructors'>Inheritance Chains and Constructors</h3>

<p>As we saw <a href='http://dailyjs.com/2012/05/21/js101-prototype/'>last week</a>, JavaScript objects have a <code>prototype</code> property, which is designed to facilitate inheritance. An object&#8217;s <code>prototype</code> property can be set to an instance of another object to create an inheritance chain:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Shape</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>y</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>name</span> <span class='o'>=</span> <span class='nx'>name</span><span class='p'>;</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Shape constructor called&#39;</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>move</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>,</span> <span class='nx'>y</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>+=</span> <span class='nx'>x</span><span class='p'>;</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>y</span> <span class='o'>+=</span> <span class='nx'>y</span><span class='p'>;</span>
  <span class='p'>},</span>

  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='s1'>&#39;name: &#39;</span> <span class='o'>+</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>name</span> <span class='o'>+</span> <span class='s1'>&#39;, at x: &#39;</span> <span class='o'>+</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>+</span> <span class='s1'>&#39;, y:&#39;</span> <span class='o'>+</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>y</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='c1'>// Rectangle</span>
<span class='kd'>function</span> <span class='nx'>Rectangle</span><span class='p'>(</span><span class='nx'>name</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>name</span> <span class='o'>=</span> <span class='nx'>name</span><span class='p'>;</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Rectangle constructor called&#39;</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>Rectangle</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Shape</span><span class='p'>();</span>

<span class='kd'>var</span> <span class='nx'>rect</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Rectangle</span><span class='p'>(</span><span class='s1'>&#39;Player 1&#39;</span><span class='p'>);</span>
<span class='nx'>rect</span><span class='p'>.</span><span class='nx'>move</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>rect</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>());</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>rect</span> <span class='k'>instanceof</span> <span class='nx'>Rectangle</span><span class='p'>);</span>
</code></pre>
</div>
<p>Running this will display the following output:</p>
<div class='highlight'><pre><code class='text'>Shape constructor called
Rectangle constructor called
name: Player 1, at x: 1, y:1
true
</code></pre>
</div>
<p>Notice that both the <code>Shape</code> and <code>Rectangle</code> constructors are called. This is because of the line <code>Rectangle.prototype = new Shape();</code> &#8211; the parent object&#8217;s constructor isn&#8217;t actually automatically called as a result of <code>new Rectangle()</code>. This is why I&#8217;ve duplicated the <code>this.name = name</code> line in both constructors.</p>

<p>Also notice that <code>rect.move</code> and <code>rect.toString</code> call the methods from <code>Shape.prototype</code>. When the interpreter checks for a property, it will examine the current object for it. If no such property is found, the prototype for the object is checked, and so on. This is the prototype chain:</p>

<blockquote>
<p>First the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.</p>
</blockquote>

<p>&#8211; <a href='http://es5.github.com/#x4.2.1'>Annotated ECMAScript 5.1</a></p>

<h3 id='calling_parent_methods'>Calling Parent Methods</h3>

<p>If we wanted <code>Rectangle</code> to have a different <code>move</code> method, but reuse the original in <code>Shape</code>, then it&#8217;s entirely possible to do so using <code>Function.prototype.apply</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Rectangle</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>move</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>,</span> <span class='nx'>y</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Super method called&#39;</span><span class='p'>);</span>
  <span class='nx'>Shape</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>move</span><span class='p'>.</span><span class='nx'>apply</span><span class='p'>(</span><span class='k'>this</span><span class='p'>,</span> <span class='nx'>arguments</span><span class='p'>);</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Even though <code>Shape.prototype.move.apply</code> looks complicated, it&#8217;s actually very simple if we break it down:</p>

<ol>
<li>We want to call the <code>move</code> method from <code>Shape</code></li>

<li>This method is stored in <code>Shape.prototype.move</code></li>

<li>Since this is a <code>Function</code>, there are several methods available to us (functions are objects!)</li>

<li>The <a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply'>apply</a> method in particular allows us to call the function without creating a new instance</li>

<li>It also allows us to provide our own value for <code>this</code>, and an array of arguments</li>
</ol>

<p>The <a href='http://es5.github.com/#x10.6'>arguments</a> object is created by the interpreter when a function is executed. The <code>this</code> object is a whole other story &#8211; so far I&#8217;ve been assuming you have intuitively understood what it is, but we&#8217;ll look at it in more detail in the next part.</p>

<h3 id='references'>References</h3>

<ul>
<li><a href='http://es5.github.com/'>Annotated ECMAScript 5.1</a></li>

<li><a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply'>MDN documentation for apply</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/25/ender-roundup">Ender Roundup: tablesort.js, Moment.js, jwerty, SelectNav.js, ender-events, ender-assert, Categorizr.js, Arbiter</a></h2>
      <div class="meta">
        <span class="date">25 May 2012</span>
        | <span class="author">By Rod Vagg</span>
        | <span class="comments"><a href="/2012/05/25/ender-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#ender">ender</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#time">time</a>
          
            <a href="/tags.html#date">date</a>
          
            <a href="/tags.html#keyboard">keyboard</a>
          
            <a href="/tags.html#responsive">responsive</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#history">history</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Ender-related projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
Be sure to also update the <a href='https://github.com/ender-js/Ender/wiki/Ender-package-list'>Ender package list</a> page on the <a href='https://github.com/ender-js/Ender/wiki'>Ender wiki</a>.
</div>
<h3 id='tablesortjs'>tablesort.js</h3>

<p><a href='http://tristen.ca/tablesort/demo/'>tablesort.js</a> (GitHub: <a href='https://github.com/tristen/tablesort'>tristen/tablesort</a>, npm / Ender: <em>tablesort</em>) by Tristen Brown is a dependency-free sorting library for HTML tables. tablesort.js can be invoked stand-alone via <code>new Tablesort(document.getElementById('table-id'))</code> or <code>$('#table-id').tablesort()</code> method from within Ender.</p>

<p>Olivier Vaillancourt has written a small <a href='https://github.com/rvagg/bootstrap/issues/2#issuecomment-4335651'>review</a> of tablesort.js for use in Ender on Twitter Bootstrap tables.</p>

<h3 id='momentjs'>Moment.js</h3>

<p><a href='http://momentjs.com/'>Moment.js</a> (GitHub: <a href='https://github.com/timrwood/moment'>timrwood/moment</a>, npm / Ender: <em>moment</em>) by Tim Wood is small, yet very comprehensive date and time handling library.</p>

<p><img src='http://dailyjs.com/images/posts/momentjs.png' alt='Moment.js' /></p>

<p>Moment.js was mentioned <a href='http://dailyjs.com/2011/11/09/node-roundup/'>last year</a> on DailyJS but it now has a simple Ender bridge allowing you to pack it neatly into Ender builds for use via <code>$.ender()</code>. Plus, it&#8217;s an absolutely fantastic library for anything date/time related so it&#8217;s worth mentioning again. Be sure to scan the <a href='http://momentjs.com/docs/'>docs</a> to see just how much this library can do.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>.</span><span class='nx'>moment</span><span class='p'>().</span><span class='nx'>add</span><span class='p'>(</span><span class='s1'>&#39;hours&#39;</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>fromNow</span><span class='p'>();</span> <span class='c1'>// &quot;1 hour ago&quot;</span>

<span class='c1'>// manipulate</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>moment</span><span class='p'>().</span><span class='nx'>add</span><span class='p'>(</span><span class='s1'>&#39;days&#39;</span><span class='p'>,</span> <span class='mi'>7</span><span class='p'>).</span><span class='nx'>subtract</span><span class='p'>(</span><span class='s1'>&#39;months&#39;</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>).</span><span class='nx'>year</span><span class='p'>(</span><span class='mi'>2009</span><span class='p'>).</span><span class='nx'>hours</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>).</span><span class='nx'>minutes</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>).</span><span class='nx'>seconds</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>);</span>

<span class='c1'>// parse dates in different formats</span>
<span class='kd'>var</span> <span class='nx'>day</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>moment</span><span class='p'>(</span><span class='s2'>&quot;12-25-1995&quot;</span><span class='p'>,</span> <span class='s2'>&quot;MM-DD-YYYY&quot;</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>moment</span><span class='p'>([</span><span class='mi'>2010</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>,</span> <span class='mi'>14</span><span class='p'>,</span> <span class='mi'>15</span><span class='p'>,</span> <span class='mi'>25</span><span class='p'>,</span> <span class='mi'>50</span><span class='p'>,</span> <span class='mi'>125</span><span class='p'>]);</span>
<span class='nx'>a</span><span class='p'>.</span><span class='nx'>format</span><span class='p'>(</span><span class='s2'>&quot;dddd, MMMM Do YYYY, h:mm:ss a&quot;</span><span class='p'>);</span> <span class='c1'>// &quot;Sunday, February 14th 2010, 3:25:50 pm&quot;</span>
<span class='nx'>a</span><span class='p'>.</span><span class='nx'>format</span><span class='p'>(</span><span class='s2'>&quot;ddd, hA&quot;</span><span class='p'>);</span> <span class='c1'>// &quot;Sun, 3PM&quot;</span>

<span class='c1'>// operate on different &#39;moment&#39; objects</span>
<span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>moment</span><span class='p'>([</span><span class='mi'>2007</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>]);</span>
<span class='kd'>var</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>moment</span><span class='p'>([</span><span class='mi'>2008</span><span class='p'>,</span> <span class='mi'>5</span><span class='p'>]);</span>
<span class='nx'>a</span><span class='p'>.</span><span class='nx'>diff</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>,</span> <span class='s1'>&#39;years&#39;</span><span class='p'>);</span> <span class='c1'>// 1</span>
<span class='nx'>a</span><span class='p'>.</span><span class='nx'>diff</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>,</span> <span class='s1'>&#39;years&#39;</span><span class='p'>,</span> <span class='kc'>true</span><span class='p'>);</span> <span class='c1'>// 1.5</span>
</code></pre>
</div>
<p>The project maintainers also follow a rigorous release methodology, making great use of git branches, something that is not often found on smaller open source libraries.</p>

<h3 id='jwerty'>jwerty</h3>

<p><a href='http://keithcirkel.co.uk/jwerty/'>jwerty</a> (GitHub: <a href='https://github.com/keithamus/jwerty'>keithamus/jwerty</a>, Licence: <em>MIT</em>, npm / Ender: <em>jwerty</em>) by Keith Cirkel is a small keyboard event handling library which can bind, fire and assert key combination strings against elements and events.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>.</span><span class='nx'>key</span><span class='p'>(</span><span class='s1'>&#39;ctrl+shift+P&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>[...]</span> <span class='p'>});</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>key</span><span class='p'>(</span><span class='s1'>&#39;⌃+⇧+P&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>[...]</span> <span class='p'>});</span>

<span class='c1'>// specify optional keys</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>key</span><span class='p'>(</span><span class='s1'>&#39;⌃+⇧+P/⌘+⇧+P&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>[...]</span> <span class='p'>});</span>

<span class='c1'>// key sequences</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>key</span><span class='p'>(</span><span class='s1'>&#39;↑,↑,↓,↓,←,→,←,→,B,A,↩&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>[...]</span> <span class='p'>});</span>

<span class='c1'>// pass in a selector to bind a shortcut local to that element</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>key</span><span class='p'>(</span><span class='s1'>&#39;⌃+⇧+P/⌘+⇧+P&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>[...]</span> <span class='p'>},</span> <span class='s1'>&#39;input.email&#39;</span><span class='p'>,</span> <span class='s1'>&#39;#myForm&#39;</span><span class='p'>);</span>

<span class='c1'>// use `$.event` as a decorator, to bind events your own way</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#myinput&#39;</span><span class='p'>).</span><span class='nx'>bind</span><span class='p'>(</span><span class='s1'>&#39;keydown&#39;</span><span class='p'>,</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>keyEvent</span><span class='p'>(</span><span class='s1'>&#39;⌃+⇧+P/⌘+⇧+P&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>()</span> <span class='p'>{</span> <span class='p'>[...]</span> <span class='p'>}));</span>

<span class='c1'>// use `$.isKey` to check a key combo against a keyboard event</span>
<span class='kd'>function</span> <span class='p'>(</span><span class='nx'>event</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span> <span class='nx'>$</span><span class='p'>.</span><span class='nx'>isKey</span><span class='p'>(</span><span class='s1'>&#39;⌃+⇧+P&#39;</span><span class='p'>,</span> <span class='nx'>event</span><span class='p'>)</span> <span class='p'>)</span> <span class='p'>{</span> <span class='p'>[...]</span> <span class='p'>}</span>
<span class='p'>}</span>

<span class='c1'>// use `$.fireKey` to send keyboard events to other places</span>
<span class='nx'>$</span><span class='p'>.</span><span class='nx'>fireKey</span><span class='p'>(</span><span class='s1'>&#39;enter&#39;</span><span class='p'>,</span> <span class='s1'>&#39;input:first-child&#39;</span><span class='p'>,</span> <span class='s1'>&#39;#myForm&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<h3 id='selectnavjs'>SelectNav.js</h3>

<p><a href='http://lukaszfiszer.github.com/selectnav.js/'>SelectNav.js</a> (GitHub: <a href='https://github.com/lukaszfiszer/selectnav.js/'>lukaszfiszer/selectnav.js</a>, npm / Ender: <em>selectnav.js</em>) by Lukasz Fiszer is a small library that will convert your website&#8217;s navigation into a <code>&lt;select&gt;</code> menu. Used together with media queries it helps you to create a space saving, responsive navigation for small screen devices. SelectNav.js is inspired by <a href='http://tinynav.viljamis.com/'>TinyNav.js</a> for jQuery.</p>

<h3 id='enderevents_and_enderassert'>ender-events and ender-assert</h3>

<p><a href='https://github.com/amccollum/ender-events'>ender-events</a> (GitHub: <a href='https://github.com/amccollum/ender-events'>amccollum/ender-events</a>, Licence: <em>MIT</em>, npm / Ender: <em>ender-events</em>) and <a href='https://github.com/amccollum/ender-assert'>ender-assert</a> (GitHub: <a href='https://github.com/amccollum/ender-assert'>amccollum/ender-assert</a>, Licence: <em>MIT</em>, npm / Ender: <em>ender-assert</em>) are two packages by Andrew McCollum, previously bundled in his <a href='https://github.com/amccollum/node-compat'>node-compat</a> library. ender-events gives you an implementation of the NodeJS <a href='http://nodejs.org/docs/latest/api/events.html#events_class_events_eventemitter'>EventEmitter</a> class in your browser, while ender-assert gives you a browser version of the NodeJS <a href='http://nodejs.org/docs/latest/api/assert.html'>assert</a> module.</p>

<p>Andrew also has a tiny extension to Bonzo, the DOM utility included in Ender&#8217;s starter pack (<em>The Jeesh</em>), named <a href='https://github.com/amccollum/ender-remove'>ender-remove</a> that simply triggers a <em>&#8216;remove&#8217;</em> event when nodes are removed from the DOM. Which can be helpful for performing clean-up actions.</p>

<h3 id='categorizrjs'>Categorizr.js</h3>

<p><a href='https://github.com/Skookum/categorizr.js'>Categorizr.js</a> (GitHub: <a href='https://github.com/Skookum/categorizr.js'>Skookum/categorizr.js</a>, Licence: <em>MIT</em>, npm / Ender: <em>categorizr</em>) by Dustan Kasten is a JavaScript port of the <a href='http://www.brettjankord.com/2012/01/16/categorizr-a-modern-device-detection-script/'>Categorizr</a> PHP script by Brett Jankord.</p>

<p>Categorizr gives you <code>$.isDesktop()</code> <code>$.isTablet()</code> <code>$.isTV()</code> <code>$.isMobile()</code> methods to determine the current device.</p>

<h3 id='arbiter'>Arbiter</h3>

<p><a href='https://github.com/iamdustan/arbiter'>Arbiter</a> (GitHub: <a href='https://github.com/iamdustan/arbiter'>iamdustan/arbiter</a>, Licence: <em>MIT</em>, npm / Ender: <em>arbiter</em>) also by Dustan Kasten is a tiny library for managing the HTML5 history interface via <code>pushState()</code>, using AJAX requests to load new content upon request.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/24/windows-and-node-4">Windows and Node: Writing Portable Code</a></h2>
      <div class="meta">
        <span class="date">24 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/24/windows-and-node-4/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#windows">windows</a>
          
            <a href="/tags.html#windows-and-node">windows-and-node</a>
          
        </span>
      </div>
      <div class="preview">
        <p>I&#8217;ve been surveying popular Node modules and the <a href='https://groups.google.com/forum/?fromgroups#!forum/nodejs'>nodejs Google Group</a> to find common portability issues people have found when testing modules in Windows.</p>

<p>For the most part, Node code seems very portable &#8211; there are only a few problem areas that seem to crop up frequently. Let&#8217;s take a look at these problems and the solutions so we can write code that runs everywhere.</p>

<h3 id='platformspecific_code'>Platform-Specific Code</h3>

<p>Despite Node code&#8217;s inherent portability, there are times when platform-specific code is required. This is dealt with in Node&#8217;s core modules like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>isWindows</span> <span class='o'>=</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>platform</span> <span class='o'>===</span> <span class='s1'>&#39;win32&#39;</span><span class='p'>;</span>

<span class='k'>if</span> <span class='p'>(</span><span class='nx'>isWindows</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Windows-specific code</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This example is based on <a href='https://github.com/joyent/node/blob/master/lib/path.js'>path.js</a>.</p>

<p>For more detailed information on the operating system, the <a href='http://nodejs.org/docs/latest/api/all.html#all_os'>os</a> module can come in handy.</p>

<p><img src='/images/posts/win4/1_cmd_os.png' alt='Nodes OS module in Windows' /></p>

<h3 id='file_system'>File System</h3>

<p>Windows can actually accept backslashes or forward slashes as a path separator. This means you don&#8217;t need to change all of your <code>require</code> calls to use different slashes; most things should just work. There are a few cases where we need to be careful, however, particularly if a path name is absolute or it&#8217;s going to be displayed somewhere.</p>

<p>One common issue I&#8217;ve found is where the developer has made certain assumptions about the structure of absolute paths. In a commit to Express, <a href='https://github.com/visionmedia/express/commit/cbf330c3db48e2a3e93c34a2e1e32c56a31bea7a'>Fixed absolute path checking on windows</a>, we can see where the authors have adapted a method called <code>isAbsolute</code> to support Windows:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>exports</span><span class='p'>.</span><span class='nx'>isAbsolute</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>path</span><span class='p'>){</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='s1'>&#39;/&#39;</span> <span class='o'>==</span> <span class='nx'>path</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>])</span> <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='s1'>&#39;:&#39;</span> <span class='o'>==</span> <span class='nx'>path</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span> <span class='o'>&amp;&amp;</span> <span class='s1'>&#39;\\&#39;</span> <span class='o'>==</span> <span class='nx'>path</span><span class='p'>[</span><span class='mi'>2</span><span class='p'>])</span> <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Isaac Schlueter <a href='[Best'>recommends</a> using <a href='http://nodejs.org/docs/latest/api/all.html#all_path_resolve_from_to'>path.resolve</a> to make relative paths absolute in a cross-platform way.</p>

<p>When dealing with fragments of paths, using <code>path.join</code> will automatically insert the correct slash based on platform. For example, the <a href='https://github.com/joyent/node/blob/master/lib/path.js#L195'>Windows version</a> will insert backslashes:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>joined</span> <span class='o'>=</span> <span class='nx'>paths</span><span class='p'>.</span><span class='nx'>join</span><span class='p'>(</span><span class='s1'>&#39;\\&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Notice that JavaScript strings require two backslashes because one acts as an escape, so when working with Windows path names don&#8217;t be surprised if there are lot of double slashes.</p>

<p>Another big source of Windows issues is <a href='http://nodejs.org/docs/latest/api/all.html#all_fs_watch_filename_options_listener'>fs.watch</a>. This module is routinely used by programs that watch for file system changes. Node&#8217;s documentation makes it clear that the API isn&#8217;t portable, so the slower but more compatible <a href='http://nodejs.org/docs/latest/api/all.html#all_fs_watchfile_filename_options_listener'>fs.watchFile</a> can be used instead.</p>

<p>In <a href='https://github.com/cjblomqvist/derby/commit/deeb28b68d02366844ef156d694dc95379f80258'>this patch for the Derby web framework</a>, we can see where the developers opted to branch based on <code>process.platform</code> to use <code>fs.watchFile</code> in Windows, but <code>fs.watch</code> elsewhere.</p>

<h3 id='text_interfaces'>Text Interfaces</h3>

<p>Be aware that not everybody has a super-fancy UTF-8 terminal that supports colours. Certain programs depend on text output, but people may have trouble seeing it correctly if your program relies on symbols their terminal or font doesn&#8217;t support.</p>

<p>Mocha is a good example of such a program, and in the issue <a href='https://github.com/visionmedia/mocha/issues/294'>Ability to configure passed/failed checkmarks for the spec reporter</a>, we can see where someone has struggled to read the output with <code>cmd.exe</code>.</p>

<h3 id='environment'>Environment</h3>

<p>Assuming certain environmental variables will exist (or mean the same thing) on every platform is a good way to create portability headaches.</p>

<p>James Halliday&#8217;s <a href='https://github.com/substack/node-browserify'>Browserify</a> had its fair share of Windows issues, which was problematic due to several other popular modules depending on it.</p>

<p><a href='https://github.com/bennage/node-browserify/commit/9dd2fae0f9647463b6e9bfef713c8741f3cdecff'>This commit</a> to Browserify demonstrates a fix Christopher Bennage submitted that replaces calls to <code>process.env.HOME</code> with the following:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>home</span> <span class='o'>=</span> <span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>HOME</span> <span class='o'>||</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>env</span><span class='p'>.</span><span class='nx'>USERPROFILE</span><span class='p'>);</span>
</code></pre>
</div>
<p>I tried this in Windows 7 and found <code>process.env.HOME</code> wasn&#8217;t set, but <code>process.env.USERPROFILE</code> worked as expected.</p>

<h3 id='sockets'>Sockets</h3>

<p>Node&#8217;s TCP sockets are portable, but Unix domain sockets are not. However, Windows has <a href='http://en.wikipedia.org/wiki/Named_pipe'>named pipes</a>. The following code is almost exactly the same as the Unix equivalent, it just has a different path to the named pipe:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>net</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;net&#39;</span><span class='p'>);</span>

<span class='nx'>net</span><span class='p'>.</span><span class='nx'>createServer</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>socket</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Connected&#39;</span><span class='p'>);</span>
<span class='p'>}).</span><span class='nx'>listen</span><span class='p'>(</span><span class='s1'>&#39;\\\\.\\pipe\\named-pipe-test&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>Notice the escaped backslashes &#8211; forgetting to insert them here will raise a confusing <code>EACCESS</code> error. In <a href='https://github.com/joyent/node/blob/master/test/common.js'>node/test/common.js</a>, there&#8217;s a branch based on platform to set the name of the pipe so it works in Windows and Unix:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>if</span> <span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>platform</span> <span class='o'>===</span> <span class='s1'>&#39;win32&#39;</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>exports</span><span class='p'>.</span><span class='nx'>PIPE</span> <span class='o'>=</span> <span class='s1'>&#39;\\\\.\\pipe\\libuv-test&#39;</span><span class='p'>;</span>
<span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
  <span class='nx'>exports</span><span class='p'>.</span><span class='nx'>PIPE</span> <span class='o'>=</span> <span class='nx'>exports</span><span class='p'>.</span><span class='nx'>tmpDir</span> <span class='o'>+</span> <span class='s1'>&#39;/test.sock&#39;</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='references'>References</h3>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/23/node-roundup">Node Roundup: Uptime, mmmagic, nodeflix, opt</a></h2>
      <div class="meta">
        <span class="date">23 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/23/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#cli">cli</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#unix">unix</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='uptime'>Uptime</h3>

<p><img src='/images/posts/node-uptime.png' alt='Uptime screenshot' /></p>

<p><a href='http://fzaninotto.github.com/uptime/'>Uptime</a> (GitHub: <a href='https://github.com/fzaninotto/uptime'>fzaninotto / uptime</a>, License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/node-uptime'>node-uptime</a>) by Francois Zaninotto is an Express app for remote server monitoring. It&#8217;s built with <a href='http://mongoosejs.com/'>Mongoose</a>, <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a>, <a href='https://github.com/visionmedia/ejs'>ejs</a>, <a href='http://socket.io/'>Socket.IO</a>, and jQuery.</p>

<p>To use the app, a YAML configuration file must be created for the sites you want to monitor. It seems like JSON would have been a more natural choice, but it&#8217;s pretty easy to get started and there are examples in the documentation.</p>

<p>I&#8217;m always looking for open source Express applications, so keep them coming!</p>

<h3 id='mmmagic'>mmmagic</h3>

<p><a href='https://github.com/mscdex/mmmagic'>mmmagic</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/mmmagic'>mmmagic</a>) by Brian White is a Node addon for libmagic, as used by the <a href='http://en.wikipedia.org/wiki/File_(command'>file</a>) command. It&#8217;s asynchronous, and can provide the MIME type for a file (as well as other metadata):</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>mmm</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;mmmagic&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>Magic</span> <span class='o'>=</span> <span class='nx'>mmm</span><span class='p'>.</span><span class='nx'>Magic</span><span class='p'>;</span>

<span class='kd'>var</span> <span class='nx'>magic</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Magic</span><span class='p'>(</span><span class='nx'>mmm</span><span class='p'>.</span><span class='nx'>MAGIC_MIME_TYPE</span><span class='p'>);</span>
<span class='nx'>magic</span><span class='p'>.</span><span class='nx'>detectFile</span><span class='p'>(</span><span class='s1'>&#39;/usr/bin/env&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>result</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='k'>throw</span> <span class='nx'>err</span><span class='p'>;</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It&#8217;s currently built with node-waf (rather than gyp), but the author has included a Windows binary.</p>

<h3 id='nodeflix'>Nodeflix</h3>

<p><a href='https://github.com/iamleppert/nodeflix'>Nodeflix</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/nodeflix'>nodeflix</a>) by Johnathan Leppert is a <a href='http://developer.netflix.com/'>Netflix API</a> client:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>n</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/catalog/people&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>term</span><span class='o'>:</span> <span class='s1'>&#39;DeNiro&#39;</span> <span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I&#8217;ve noticed quite a few Node media-related modules cropping up, and with the continually improving Windows support it seems like Node is becoming a strong platform for home theatre-related application development. Is there a Node XBMC alternative yet?</p>

<h3 id='opt'>opt</h3>

<p><a href='https://github.com/rsdoiel/opt'>opt</a> (License: <em>New BSD License</em>, npm: <a href='http://npmjs.org/package/opt'>opt</a>) by R. S. Doiel is an options parser that can also load configuration files. It can generate usage based on the supplied parameters, but has a slightly different API to the other option parsing modules I&#8217;ve looked at &#8211; callbacks are tied to each option instead of working with a parsed set of options:</p>
<div class='highlight'><pre><code class='javascript'><span class='err'>#</span><span class='o'>!</span><span class='err'>/usr/bin/env node</span>
<span class='kd'>var</span> <span class='nx'>opt</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;opt&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>args</span><span class='p'>;</span>

<span class='kd'>function</span> <span class='nx'>test</span><span class='p'>(</span><span class='nx'>param</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>param</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;--test parameter:&#39;</span><span class='p'>,</span> <span class='nx'>param</span><span class='p'>);</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;No parameter supplied to --test&#39;</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>}</span>

<span class='nx'>opt</span><span class='p'>.</span><span class='nx'>setup</span><span class='p'>(</span><span class='s1'>&#39;Simple test script.&#39;</span><span class='p'>);</span>
<span class='nx'>opt</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>([</span><span class='s1'>&#39;-h&#39;</span><span class='p'>,</span> <span class='s1'>&#39;--help&#39;</span><span class='p'>],</span> <span class='nx'>opt</span><span class='p'>.</span><span class='nx'>usage</span><span class='p'>,</span> <span class='s1'>&#39;Show help&#39;</span><span class='p'>);</span>
<span class='nx'>opt</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>([</span><span class='s1'>&#39;-t&#39;</span><span class='p'>,</span> <span class='s1'>&#39;--test&#39;</span><span class='p'>],</span> <span class='nx'>test</span><span class='p'>,</span> <span class='s1'>&#39;Run test&#39;</span><span class='p'>);</span>

<span class='nx'>opt</span><span class='p'>.</span><span class='nx'>parse</span><span class='p'>(</span><span class='nx'>process</span><span class='p'>.</span><span class='nx'>argv</span><span class='p'>);</span>
</code></pre>
</div>
<p>This is quite different to how <a href='https://github.com/visionmedia/commander.js'>Commander.js</a> works, for example.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/22/jquery-roundup">jQuery Roundup: jQuery UI 1.9 Milestone 8, Chico UI, Complexify</a></h2>
      <div class="meta">
        <span class="date">22 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/22/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#security">security</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_ui_19_milestone_8'>jQuery UI 1.9 Milestone 8</h3>

<p><a href='http://blog.jqueryui.com/2012/05/jquery-ui-1-9-milestone-8-position/'>jQuery UI 1.9 Milestone 8</a> has been released. The major change in this release is a <a href='http://wiki.jqueryui.com/w/page/12138026/Position'>redesign of the Position utility script</a>.</p>

<p>There are also <a href='http://bugs.jqueryui.com/query?resolution=fixed&amp;milestone=1.9&amp;group=component&amp;col=id&amp;col=summary&amp;col=type&amp;col=priority&amp;report=20&amp;order=priority'>bug fixes</a> and accessibility improvements.</p>

<h3 id='chico_ui'>Chico UI</h3>

<p><img src='/images/posts/chico.png' alt='Chico banner' /></p>

<p><a href='http://chico-ui.com.ar/'>Chico UI</a> (GitHub: <a href='https://github.com/mercadolibre/chico'>mercadolibre / chico</a>, License: <em>MIT</em>) from MercadoLibre is a set of UI widgets built with jQuery. The project includes demos with documentation for each widget, I&#8217;ve selected a few interesting ones here but there are a lot more:</p>

<ul>
<li><a href='http://chico-ui.com.ar/widgets/auto-complete'>Auto Complete</a></li>

<li><a href='http://chico-ui.com.ar/widgets/calendar'>Calendar</a></li>

<li><a href='http://chico-ui.com.ar/widgets/form'>Form</a></li>
</ul>

<p>There&#8217;s also <a href='http://chico-ui.com.ar/mesh'>Chico Mesh</a> for creating CSS column-based layouts, and <a href='http://chico-ui.com.ar/guides'>some tutorials on Chico</a>.</p>

<p>The mix of JavaScript widgets and reusable layout CSS reminds me of a combination of jQuery UI and <a href='http://twitter.github.com/bootstrap/'>Bootstrap</a>. I haven&#8217;t seen Chico before, but the authors have been committing frequently to the GitHub project over the last two years, so at this point it seems relatively mature.</p>

<h3 id='complexify'>Complexify</h3>

<p><img src='/images/posts/complexify.png' alt='Complexify' /></p>

<p><a href='http://danpalmer.me/jquery-complexify'>Complexify</a> (GitHub: <a href='https://github.com/danpalmer/jquery.complexify.js'>danpalmer / jquery.complexify.js</a>, License: <em>WTFPL v2</em>) by Dan Palmer is a password complexity checker. It&#8217;s used like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#password&#39;</span><span class='p'>).</span><span class='nx'>complexify</span><span class='p'>({</span> <span class='nx'>minimumChars</span><span class='o'>:</span> <span class='mi'>8</span> <span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>valid</span><span class='p'>,</span> <span class='nx'>complexity</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// valid: Password is the right length</span>
  <span class='c1'>// complexity: Password complexity rated as a percentage</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The algorithm Dan&#8217;s written to rate complexity is based on blocks of Unicode:</p>

<blockquote>
<p>The rationale behind this is that in an attacker were wanting to include Japanese passwords in his attack, he/she may choose to include the Hiragana set in his/her attack, but not the Katakana set. Complexify divides Unicode into 94 appropriately grouped sets.</p>
</blockquote>

<p>The main driver behind the algorithm is to try to distinguish between complex passwords, and passwords that have the illusion of complexity due to security policies.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/21/js101-prototype">JS101: Prototypes</a></h2>
      <div class="meta">
        <span class="date">21 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/21/js101-prototype/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
  JS101 is a tutorial series aimed at beginners.  Each post is a bite-sized chunk aimed to elucidate JavaScript fundamentals.  To read previous posts, view the <a href='/tags.html#js101'>js101</a> tag.
</div>
<p>After spending years studying object oriented programming, adapting to JavaScript can be frustrating. In particular, the lack of a <code>class</code> keyword is a source of confusion. However, JavaScript&#8217;s design needn&#8217;t be a hindrance &#8211; mastering its prototype-based inheritance will improve your understanding of the language.</p>

<p>The first thing to realise is there should be a distinction between <em>object</em>-oriented programming and <em>class</em>-oriented. JavaScript gives us the tools we need to do most of the things languages with classes can do &#8211; we just need to learn how to use it properly.</p>

<p>Let&#8217;s take a brief look at the <code>prototype</code> property to see how it can deepen our knowledge of JavaScript.</p>

<h3 id='the__property'>The <code>prototype</code> Property</h3>

<p>The <code>prototype</code> property is an internal property, and it&#8217;s designed to be used to implement inheritance. What we mean by &#8220;inheritance&#8221; here is a specific form of inheritance. Because both state and methods are carried by objects, then we can say that structure, behaviour, and state are all inherited (<a href='http://es5.github.com/#x4.2.1'>ES5: Objects</a>). This is in contrast to class-based languages, where state is carried by instances and methods are carried by classes.</p>

<p>A constructor is a function that has a property named <code>prototype</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Animal</span><span class='p'>()</span> <span class='p'>{</span>
<span class='p'>}</span>

<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>Animal</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>);</span>
</code></pre>
</div>
<p>This displays <code>{}</code> &#8211; the <code>Animal</code> object has a <code>prototype</code> property, but there&#8217;s nothing user-defined in it yet. We&#8217;re free to add values and methods as we please:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Animal</span><span class='p'>()</span> <span class='p'>{</span>
<span class='p'>}</span>

<span class='nx'>Animal</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>type</span> <span class='o'>=</span> <span class='s1'>&#39;Unknown&#39;</span><span class='p'>;</span>
<span class='nx'>Animal</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>weight</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
<span class='nx'>Animal</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>weightUnits</span> <span class='o'>=</span> <span class='s1'>&#39;kg&#39;</span><span class='p'>;</span>

<span class='nx'>Animal</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>toString</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>type</span> <span class='o'>+</span> <span class='s1'>&#39;, &#39;</span> <span class='o'>+</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>weight</span> <span class='o'>+</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>weightUnits</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>molly</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Animal</span><span class='p'>();</span>
<span class='nx'>molly</span><span class='p'>.</span><span class='nx'>type</span> <span class='o'>=</span> <span class='s1'>&#39;Dog&#39;</span><span class='p'>;</span>
<span class='nx'>molly</span><span class='p'>.</span><span class='nx'>weight</span> <span class='o'>=</span> <span class='mi'>28</span><span class='p'>;</span>

<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>molly</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>());</span>
</code></pre>
</div>
<p>This would display &#8220;Dog, 28kg&#8221;. We can group these assignments together by using an object literal:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Animal</span><span class='p'>()</span> <span class='p'>{</span>
<span class='p'>}</span>

<span class='nx'>Animal</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>type</span><span class='o'>:</span> <span class='s1'>&#39;Unknown&#39;</span><span class='p'>,</span>
  <span class='nx'>weight</span><span class='o'>:</span> <span class='mi'>0</span><span class='p'>,</span>
  <span class='nx'>weightUnits</span><span class='o'>:</span> <span class='s1'>&#39;kg&#39;</span><span class='p'>,</span>

  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>type</span> <span class='o'>+</span> <span class='s1'>&#39;, &#39;</span> <span class='o'>+</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>weight</span> <span class='o'>+</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>weightUnits</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This shouldn&#8217;t look too different from the classes you might be more familiar with.</p>

<h3 id='dynamic_prototypes'>Dynamic Prototypes</h3>

<p>Properties can be added to objects dynamically, simply by assigning values:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>molly</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Animal</span><span class='p'>()</span>
  <span class='p'>,</span> <span class='nx'>harley</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Animal</span><span class='p'>();</span>

<span class='nx'>molly</span><span class='p'>.</span><span class='nx'>type</span> <span class='o'>=</span> <span class='s1'>&#39;Dog&#39;</span><span class='p'>;</span>
<span class='nx'>molly</span><span class='p'>.</span><span class='nx'>weight</span> <span class='o'>=</span> <span class='mi'>28</span><span class='p'>;</span>

<span class='nx'>harley</span><span class='p'>.</span><span class='nx'>type</span> <span class='o'>=</span> <span class='s1'>&#39;Dog&#39;</span><span class='p'>;</span>
<span class='nx'>harley</span><span class='p'>.</span><span class='nx'>weight</span> <span class='o'>=</span> <span class='mi'>38</span><span class='p'>;</span>
<span class='nx'>harley</span><span class='p'>.</span><span class='nx'>name</span> <span class='o'>=</span> <span class='s1'>&#39;Harley&#39;</span><span class='p'>;</span>

<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>molly</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>harley</span><span class='p'>);</span>

<span class='c1'>// { type: &#39;Dog&#39;, weight: 28 }</span>
<span class='c1'>// { type: &#39;Dog&#39;, weight: 38, name: &#39;Harley&#39; }</span>
</code></pre>
</div>
<p>Adding the <code>name</code> property here only affects that instance. However, the constructor&#8217;s prototype can be changed, and this will affect objects made with that prototype:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Animal</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>weightUnits</span> <span class='o'>=</span> <span class='s1'>&#39;oz&#39;</span><span class='p'>;</span>

<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>molly</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>())</span>
<span class='c1'>// Now displays &#39;Dog, 28oz&#39;</span>
</code></pre>
</div>
<p>This is why people boast that their libraries don&#8217;t touch native prototypes, or only do so safely &#8211; it&#8217;s entirely possible to change the expected built-in functionality of objects like <code>String</code> to do unsafe things:</p>
<div class='highlight'><pre><code class='javascript'><span class='nb'>String</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>match</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kc'>true</span><span class='p'>;</span>
<span class='p'>};</span>

<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;alex&#39;</span><span class='p'>.</span><span class='nx'>match</span><span class='p'>(</span><span class='sr'>/1234/</span><span class='p'>));</span>
</code></pre>
</div>
<p>This returns <code>true</code>, so I&#8217;ve now succeeded in breaking a fundamental method that many JavaScript programs rely on.</p>

<p>Modifying native prototypes isn&#8217;t always bad; people use it for useful things like patching support for more modern versions of ECMAScript in older browsers.</p>

<p>What happens if we replace the <code>prototype</code> property?</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>molly</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Animal</span><span class='p'>()</span>
  <span class='p'>,</span> <span class='nx'>harley</span><span class='p'>;</span>

<span class='nx'>molly</span><span class='p'>.</span><span class='nx'>type</span> <span class='o'>=</span> <span class='s1'>&#39;Dog&#39;</span><span class='p'>;</span>
<span class='nx'>molly</span><span class='p'>.</span><span class='nx'>weight</span> <span class='o'>=</span> <span class='mi'>28</span><span class='p'>;</span>

<span class='nx'>Animal</span><span class='p'>.</span><span class='nx'>prototype</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>toString</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='s1'>&#39;...&#39;</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>

<span class='nx'>harley</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Animal</span><span class='p'>;</span>
<span class='nx'>harley</span><span class='p'>.</span><span class='nx'>type</span> <span class='o'>=</span> <span class='s1'>&#39;Dog&#39;</span><span class='p'>;</span>
<span class='nx'>harley</span><span class='p'>.</span><span class='nx'>weight</span> <span class='o'>=</span> <span class='mi'>38</span><span class='p'>;</span>

<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>molly</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>());</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>harley</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>());</span>

<span class='c1'>// Dog, 28kg</span>
<span class='c1'>// ...</span>
</code></pre>
</div>
<p>Despite the fact changing a prototype affects all of the instances, replacing a constructor&#8217;s prototype entirely does not affect older instances. Why? Well, instances have a <em>reference</em> to the prototype rather than a discrete copy. Think of it like this: each instance created by the <code>new</code> keyword is <em>connected</em> to the original prototype.</p>

<h3 id='next_week'>Next Week</h3>

<p>In the spirit of keeping this post bite-sized, I&#8217;ll finish here. Next week we&#8217;ll look at prototype chains and inheritance in more detail.</p>

<h3 id='references'>References</h3>

<ul>
<li><a href='http://es5.github.com/'>Annotated ECMAScript 5.1</a></li>

<li><a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/prototype'>MDN Prototype</a></li>

<li><a href='http://www.youtube.com/watch?v=3zpQ3bnnLUI'>Comsat Angels - Will You Stay Tonight</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/18/page-testr-screenfull">Page, testr.js, screenfull.js</a></h2>
      <div class="meta">
        <span class="date">18 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/18/page-testr-screenfull/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#fullscreen">fullscreen</a>
          
            <a href="/tags.html#routing">routing</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='page'>Page</h3>

<p>If I had to place a bet on the most activity by one person on GitHub, I&#8217;d bet on TJ Holowaychuk. His latest project is <a href='http://visionmedia.github.com/page.js/'>Page.js</a> (GitHub: <a href='https://github.com/visionmedia/page.js'>visionmedia / page.js</a>, npm: <a href='http://npmjs.org/package/page'>page</a>), which is a client-side router. The routing syntax works like Express, so variables are denoted by <code>:name</code>, and the <code>*</code> route can be used to catch 404s. In this case, 404 is open to interpretation.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>page</span><span class='p'>(</span><span class='s1'>&#39;/&#39;</span><span class='p'>,</span> <span class='nx'>index</span><span class='p'>)</span>
<span class='nx'>page</span><span class='p'>(</span><span class='s1'>&#39;/user/:user&#39;</span><span class='p'>,</span> <span class='nx'>show</span><span class='p'>)</span>
<span class='nx'>page</span><span class='p'>(</span><span class='s1'>&#39;/user/:user/edit&#39;</span><span class='p'>,</span> <span class='nx'>edit</span><span class='p'>)</span>
<span class='nx'>page</span><span class='p'>(</span><span class='s1'>&#39;/user/:user/album&#39;</span><span class='p'>,</span> <span class='nx'>album</span><span class='p'>)</span>
<span class='nx'>page</span><span class='p'>(</span><span class='s1'>&#39;/user/:user/album/sort&#39;</span><span class='p'>,</span> <span class='nx'>sort</span><span class='p'>)</span>
<span class='nx'>page</span><span class='p'>(</span><span class='s1'>&#39;\*&#39;</span><span class='p'>,</span> <span class='nx'>notfound</span><span class='p'>)</span>
<span class='nx'>page</span><span class='p'>()</span>
</code></pre>
</div>
<p>It&#8217;s actually a very lightweight project, based around <code>pushState</code>, but it includes detailed comments and Mocha tests.</p>

<h3 id='testrjs'>testr.js</h3>

<p><a href='https://github.com/mattfysh/testr.js'>testr.js</a> (License: <em>MIT</em>) by Matt Fysh is for unit testing <a href='http://requirejs.org/'>RequireJS</a> modules. Use it with your favourite test framework to test both stubbed and script-loaded dependencies:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>testr</span><span class='p'>(</span><span class='s1'>&#39;path/to/module&#39;</span><span class='p'>,</span> <span class='nx'>stubs</span><span class='p'>);</span>
<span class='nx'>testr</span><span class='p'>(</span><span class='s1'>&#39;path/to/module&#39;</span><span class='p'>,</span> <span class='nx'>useExternal</span><span class='p'>);</span>
<span class='nx'>testr</span><span class='p'>(</span><span class='s1'>&#39;path/to/module&#39;</span><span class='p'>,</span> <span class='nx'>stubs</span><span class='p'>,</span> <span class='nx'>useExternal</span><span class='p'>);</span>
</code></pre>
</div>
<p>The author has written some projects that use testr.js &#8211; <a href='https://github.com/mattfysh/asq'>asq</a> and <a href='https://github.com/mattfysh/after'>after</a> both use it with Jasmine.</p>

<h3 id='screenfulljs'>screenfull.js</h3>

<p><a href='http://sindresorhus.com/screenfull.js/'>screenfull.js</a> (GitHub: <a href='https://github.com/sindresorhus/screenfull.js'>sindresorhus / screenfull.js</a>, License: <em>MIT</em>) by Sindre Sorhus is another wrapper around the Fullscreen API. The semantics are similar to the specification, but a lot simpler &#8211; the README has a comparison with &#8220;vanilla&#8221; JavaScript which is several lines of code. Using screenfull.js, only <code>screenfull.request()</code> is required to trigger fullscreen mode.</p>

<p>The library can do other things as well: a single element can be fullscreened, or events can be used to detect a change to fullscreen mode.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/17/windows-and-node-3">Windows and Node: Addons</a></h2>
      <div class="meta">
        <span class="date">17 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/17/windows-and-node-3/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#windows">windows</a>
          
            <a href="/tags.html#addons">addons</a>
          
            <a href="/tags.html#gyp">gyp</a>
          
            <a href="/tags.html#windows-and-node">windows-and-node</a>
          
        </span>
      </div>
      <div class="preview">
        <p>In this article we&#8217;re going to look at <em>addons</em>. If you&#8217;re a Node developer working in Windows then this article should give you enough background to at least understand the basic issues surrounding addons, and install them using npm.</p>

<p>Addons are something Unix-based Node developers generally have little trouble with. However, the history of addon support in Windows has been a little bit turbulent. We&#8217;ve seen various solutions come and go &#8211; most notably <em>node-waf</em> and Cygwin &#8211; but the community has now settled on <a href='https://github.com/TooTallNate/node-gyp'>node-gyp</a> by Nathan Rajlich.</p>
<div class='aside'>
<strong>Hint:</strong> <a href='http://nodejs.org/docs/latest/api/all.html#all_addons'>Addons</a> use C or C++ libraries.  Node modules may include both addons and JavaScript code.
</div>
<p>Isaac Schlueter summarised it in <a href='http://blog.nodejs.org/2012/01/23/node-v0-7-1/#comment-1916'>this comment</a>:</p>

<blockquote>
<p>Node-waf doesn&#8217;t work on Windows. We&#8217;re working on a solution that will make it easier to get a build toolchain in Windows based on node-gyp. Many packages will have to be updated to use this instead, so we&#8217;re trying to make it as easy a transition as possible.</p>
</blockquote>

<h3 id='installing_a_module_with_native_code'>Installing a Module with Native Code</h3>

<p>The <a href='https://github.com/laverdet/node-fibers'>fibers</a> module uses node-gyp for building its native components. However, the module&#8217;s author, Marcel Laverdet, has packaged it in an extremely effective way. Rather than force everybody to build the module, he&#8217;s included binaries in the npm package. These are not present in the GitHub repository, but are available through npm. This includes both 32 and 64 bit versions.</p>

<p><img src='/images/posts/win3/1_fibers.png' alt='node-fibers installation in Windows' /></p>

<p>Therefore, simply running <code>npm install fibers</code> should result in a working module in Windows. The compressed archive on npm actually includes Linux, Mac OS, and Windows binaries, for example: <code>bin/win32-ia32/fibers.node</code>.</p>

<h3 id='building_a_module_in_windows'>Building a Module in Windows</h3>

<p>As an exercise, let&#8217;s build the fibers module. I picked this one because I already know it works &#8211; although there are other modules built with node-gyp, they don&#8217;t all build correctly in Windows yet.</p>

<p>Building the module requires a few dependencies:</p>

<ul>
<li>A global installation of node-gyp</li>

<li>Python 2.7</li>

<li>Microsoft Visual Studio (&#8220;Express&#8221; is free)</li>
</ul>

<h4 id='installing_nodegyp'>Installing node-gyp</h4>

<p>The node-gyp module is easy to install, but just make sure it&#8217;s installed globally so it&#8217;ll be in your <code>%PATH%</code>:</p>
<div class='highlight'><pre><code class='text'>npm install -g node-gyp
</code></pre>
</div>
<h4 id='installing_python'>Installing Python</h4>

<p>GYP, or Generate Your Projects, is a build system that uses Python. <a href='http://code.google.com/p/gyp/wiki/GypUserDocumentation'>GypUserDocumentation</a> covers the basics, but from our perspective we just need a working version of Python 2.7.x to use it.</p>

<p>I installed <a href='http://www.python.org/download/releases/2.7.3/'>Python 2.7.3</a> using the MSI installer.</p>

<h4 id='installing_microsoft_visual_studio'>Installing Microsoft Visual Studio</h4>

<p>Microsoft provides a free edition of Visual Studio called <a href='http://www.microsoft.com/visualstudio/en-us/products/2010-editions/express-iso'>Visual Studio 2010 Express</a>. I downloaded the ISO and extracted the ISO using <a href='http://www.7-zip.org/'>7-Zip</a>. It&#8217;s 694 MB, so you might want to brew a suitable hot drink while it&#8217;s downloading.</p>

<p><img src='/images/posts/win3/4_visualcpp_install.png' alt='Installing Visual C++' /></p>

<p>Fortunately, Microsoft provide this suite of tools and compilers for free with no user registration.</p>

<p><a href='/images/posts/win3/5_visualcpp_installed_large.png'><img src='/images/posts/win3/5_visualcpp_installed_thumb.png' alt='Running Microsofts IDE' /></a></p>

<h4 id='building_the_module'>Building the Module</h4>

<p>I downloaded the latest zip of <a href='https://github.com/laverdet/node-fibers'>node-fibers</a> from GitHub, opened Command Prompt, changed directory to the path of the extracted zip, then ran the following:</p>
<div class='highlight'><pre><code class='text'>set PATH=%PATH%;C:\Python27
node-gyp configure
node-gyp build
</code></pre>
</div>
<p><img src='/images/posts/win3/6_installing_node_fibers_from_source.png' alt='Building the fibers module' /></p>

<p>Once that was done I ran <code>npm test</code>, and the tests all passed. I found it quite satisfying to see Microsoft&#8217;s compiler actually build something, and although it&#8217;s not necessary to build the fibers module this way, there are other modules out there that don&#8217;t include binaries in npm.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>Hopefully you now appreciate a little bit about how addons are built in Windows. Although previously the situation was confusing, the community is starting to convert modules to build with node-gyp.</p>

<p>I suspect there will be cases where native code can&#8217;t be shipped as binaries due to licensing constraints, but it would be encouraging to see more addons include binaries for Windows.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/16/node-roundup">Node Roundup: express-soap2json, cb, ApiServer</a></h2>
      <div class="meta">
        <span class="date">16 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/16/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='expresssoap2json'>express-soap2json</h3>

<p>SOAP might not be the most exciting technology to work with, but if you like Node and Express then <a href='https://github.com/tonyskn/express-soap2json'>express-soap2json</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/express-soap2json'>express-soap2json</a>) by Tony Sokhon can make it a little bit easier to work with.</p>

<p>By wrapping around a SOAP service, express-soap2json creates a JSON/HTTP proxy. It&#8217;s built using the <a href='https://github.com/milewise/node-soap'>soap</a> module by Vinay Pulim. Tony has included some Mocha tests, and the README has some basic documentation.</p>

<h3 id='an_alternative_to_nodes_'>An Alternative to Node&#8217;s <code>console.time</code></h3>

<p>In <a href='http://nodetime.com/blog/powerful-alternative-to-nodes-console-time'>A Powerful Alternative to Node&#8217;s console.time()</a>, Dmitri Melikyan discusses using his <a href='http://nodetime.com/'>Nodetime</a> profiler in place of <code>console.time</code> and <code>console.timeEnd</code>.</p>

<blockquote>
<p>What if you want to know more about what happens in-between, say CPU time or other nested network of file operations in microsecods precision?</p>
</blockquote>

<h3 id='cb'>cb</h3>

<p><a href='https://github.com/jmar777/cb'>cb</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/cb'>cb</a>) by Jeremy Martin is yet another control flow library. Or is it?</p>

<blockquote>
<p>Not exactly. There are literally hundreds of libraries available for easing some of the pains associated with the continuation passing style, and most of them do a pretty good job at this.</p>
</blockquote>

<blockquote>
<p>Rather than compete with these libraries, <code>cb()</code> focuses on a much narrower range of problems, and is intended to be complementary to your control flow library (or lack thereof) of choice.</p>
</blockquote>

<p>It features timeout and error handling with a chainable API, so the following is possible:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>cb</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;cb&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>fs</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;fs&#39;</span><span class='p'>);</span>

<span class='nx'>fs</span><span class='p'>.</span><span class='nx'>readFile</span><span class='p'>(</span>
  <span class='s1'>&#39;/usr/share/dict/words&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;utf8&#39;</span>
<span class='p'>,</span> <span class='nx'>cb</span><span class='p'>(</span><span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>)</span>
    <span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span>
    <span class='p'>.</span><span class='nx'>timeout</span><span class='p'>(</span><span class='mi'>50</span><span class='p'>)</span>
    <span class='p'>.</span><span class='nx'>once</span><span class='p'>()</span>
<span class='p'>);</span>
</code></pre>
</div>
<h3 id='apiserver'>ApiServer</h3>

<p><a href='http://kilianc.github.com/node-apiserver/'>ApiServer</a> (GitHub: <a href='https://github.com/kilianc/node-apiserver'>kilianc / node-apiserver</a>, License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/apiserver'>apiserver</a>) by Kilian Ciuffolo is a modular framework that&#8217;s a bit like <a href='http://mcavage.github.com/node-restify/'>Restify</a>, but can also be used to make Express-style web applications. Kilian has written his own comparisons with Express and Restify, and it&#8217;s compatible with Express middleware even though it&#8217;s not built with Connect.</p>

<p>The routing module, <a href='https://github.com/kilianc/node-apiserver-router'>apiserver-router</a>, features a caching system, and applications are built using objects. These objects are known as modules, and each method is an API endpoint. It works with plain objects and prototype classes &#8211; classes are ideal if the module has a state (Kilian&#8217;s example passes in a database reference).</p>

<p>The author has also included a Mocha test suite, and the documentation is pretty solid too.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/15/jquery-roundup">jQuery Roundup: Knob, OmniWindow, bPopup, Pageflipper, Tiler</a></h2>
      <div class="meta">
        <span class="date">15 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/15/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#touchscreen">touchscreen</a>
          
            <a href="/tags.html#modal">modal</a>
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#tiling">tiling</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_knob'>jQuery Knob</h3>

<p><img src='/images/posts/jquery-knob.png' alt='jQuery Knobs' /></p>

<p><a href='http://anthonyterrien.com/knob/'>jQuery Knob</a> (GitHub: <a href='https://github.com/aterrien/jQuery-Knob'>aterrien / jQuery-Knob</a>, License: <em>MIT/GPL</em>) by Anthony Terrien is a nice and configurable dial widget.</p>

<p>It can be configured to exhibit a wide range of behaviours, from value range entry to an iPod clicker-style &#8220;infinite&#8221; wheel. The value that is displayed can be directly manipulated as well, and it works with scroll wheels and touchscreens.</p>

<h3 id='omniwindow'>OmniWindow</h3>

<p><a href='http://0x000000.github.com/OmniWindow/'>OmniWindow</a> (GitHub: <a href='https://github.com/0x000000/OmniWindow'>0x000000 / OmniWindow</a>, License: <em>MIT</em>) by Alexander Rudenko is a fairly small modal window plugin, and the author has attempted to target it at programmers rather than designers.</p>

<p>The documentation is good and covers the main use-cases, and despite stating that the plugin doesn&#8217;t support tonnes of options, it includes enough to keep it flexible.</p>

<p>It&#8217;s based around events, so it can be used like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;div.modal&#39;</span><span class='p'>).</span><span class='nx'>omniWindow</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>trigger</span><span class='p'>(</span><span class='s1'>&#39;show&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<p>And it allows class names to be overridden, in case you want to integrate it with an existing project:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;div.another-modal&#39;</span><span class='p'>).</span><span class='nx'>omniWindow</span><span class='p'>({</span>
  <span class='nx'>overlay</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>selector</span><span class='o'>:</span> <span class='s1'>&#39;.custom-overlay&#39;</span><span class='p'>,</span> <span class='c1'>// don&#39;t forget the period symbol! </span>
    <span class='nx'>hideClass</span><span class='o'>:</span> <span class='s1'>&#39;custom-overlay-closed&#39;</span>
  <span class='p'>},</span>
  <span class='nx'>modal</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>hideClass</span><span class='o'>:</span> <span class='s1'>&#39;custom-modal-closed&#39;</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='bpopup'>bPopup</h3>

<p><a href='http://dinbror.dk/bpopup/'>bPopup</a> by Bjørn Klinggaard is another modal plugin that is simply triggered by calling <code>$(&#39;element_to_pop_up&#39;).bPopup()</code>. By default it&#8217;ll reposition the popup when the browser&#8217;s size is changed.</p>

<p>For full details on the available downloads and source code, see <a href='http://dinbror.dk/blog/bPopup/'>21.04.12: New release, bPopup version 0.7.0</a>.</p>

<h3 id='pageflipper'>Pageflipper</h3>

<p><a href='http://wtw-software.github.com/pageflipper/'>Pageflipper</a> (GitHub: <a href='https://github.com/wtw-software/pageflipper/'>wtw-software / pageflipper</a>, License: <em>MIT</em>) from wtw-software uses CSS3 transitions to creative a native-feeling page sliding effect. It looks like something that would appeal to mobile web developers, but will also work with a mouse.</p>

<p>It can also be controlled programmatically:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#pageflipper&#39;</span><span class='p'>).</span><span class='nx'>pageflipper</span><span class='p'>(</span><span class='s1'>&#39;flipleft&#39;</span><span class='p'>)</span>
</code></pre>
</div>
<h3 id='tiler'>Tiler</h3>

<p><a href='http://borbit.github.com/tiler/'>Tiler</a> (GitHub: <a href='https://github.com/borbit/tiler/'>borbit / tiler</a>, License: <em>MIT</em>) by Serge Borbit is a library for working with infinite grids of tiles. This could be used to display map content, but the author has designed it with games in mind.</p>

<p>It feels more like a standard JavaScript library than a jQuery plugin (although jQuery is a dependency), so using it requires creating an instance of a <code>Tiler</code> object:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>tiler</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Tiler</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#viewport&#39;</span><span class='p'>),</span> <span class='p'>{</span>
  <span class='nx'>tileSize</span><span class='o'>:</span> <span class='mi'>200</span><span class='p'>,</span>

  <span class='nx'>sync</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>tosync</span> <span class='o'>=</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>tosync</span><span class='p'>;</span>

    <span class='nx'>tosync</span><span class='p'>.</span><span class='nx'>forEach</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>tile</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>img</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Image</span><span class='p'>();</span>
      <span class='kd'>var</span> <span class='nx'>x</span> <span class='o'>=</span> <span class='nx'>tile</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>];</span>
      <span class='kd'>var</span> <span class='nx'>y</span> <span class='o'>=</span> <span class='nx'>tile</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>];</span>

      <span class='nx'>img</span><span class='p'>.</span><span class='nx'>onload</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
        <span class='nx'>callback</span><span class='p'>([[</span><span class='nx'>x</span><span class='p'>,</span> <span class='nx'>y</span><span class='p'>,</span> <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;&lt;img/&gt;&#39;</span><span class='p'>).</span><span class='nx'>attr</span><span class='p'>(</span><span class='s1'>&#39;src&#39;</span><span class='p'>,</span> <span class='nx'>img</span><span class='p'>.</span><span class='nx'>src</span><span class='p'>)]]);</span>
      <span class='p'>};</span>

      <span class='nx'>img</span><span class='p'>.</span><span class='nx'>src</span> <span class='o'>=</span> <span class='s1'>&#39;image_&#39;</span> <span class='o'>+</span> <span class='nx'>x</span> <span class='o'>+</span> <span class='s1'>&#39;_&#39;</span> <span class='o'>+</span> <span class='nx'>y</span> <span class='o'>+</span> <span class='s1'>&#39;.png&#39;</span><span class='p'>;</span>
    <span class='p'>});</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>QUnit tests are included.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/14/webgl-audio-cssearth-dotnet">WebGL Audio, CSS 3D Earth, .Net Classes</a></h2>
      <div class="meta">
        <span class="date">14 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/14/webgl-audio-cssearth-dotnet/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#.net">.net</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#audio">audio</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='webgl_audio'>WebGL Audio</h3>

<p><img src='/images/posts/webglaudio-tquery.png' alt='WebGL Audio with tquery' /></p>

<p>WebGL experimenter Jerome Etienne has written a short tutorial entitled <a href='http://learningthreejs.com/blog/2012/05/08/sound-visualisation-vuemeter-in-webgl/'>Sound Visualisation: A Vuemeter in WebGL</a> that demonstrates an impressive, yet simple, WebGL VU meter using the Web Audio API.</p>

<p>To make this work, he&#8217;s used his <a href='https://github.com/jeromeetienne/webaudio.js'>webaudio.js</a> library:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>webaudio</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>WebAudio</span><span class='p'>()</span>
  <span class='p'>,</span> <span class='nx'>sound</span> <span class='o'>=</span> <span class='nx'>webaudio</span><span class='p'>.</span><span class='nx'>createSound</span><span class='p'>();</span>

<span class='nx'>sound</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='s1'>&#39;sound.wav&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>sound</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>sound</span><span class='p'>.</span><span class='nx'>play</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This library can be used alongside <a href='https://github.com/jeromeetienne/tquery'>tquery</a>.</p>

<h3 id='css_3d_earth'>CSS 3D Earth</h3>

<p><img src='/images/posts/css3dearth.png' alt='CSS 3D Earth' /></p>

<p><a href='http://www.edankwan.com/lab/css3dEarth'>CSS 3D Earth</a> by Edan Kwan uses a JavaScript library called <a href='https://github.com/edankwan/PerspectiveTransform.js'>PerspectiveTransform</a> to display an interactive model of the Earth using shading and layers.</p>

<p>The original class is by <a href='http://www.is-real.net/'>Israel Pastrana</a>, and the experiment is presented with a nice little <a href='http://code.google.com/p/dat-gui/'>dat.GUI</a> interface.</p>

<h3 id='net_javascript_classes'>.Net JavaScript Classes</h3>

<p>Julius Friedman sent in a project he created called <a href='http://www.codeproject.com/Tips/379704/Easy-JavaScript-Generic-List-Implementation'>Easy JavaScript Generic List Implementation</a>. Since then he&#8217;s expanded the scope and uploaded it to CodePlex: <a href='http://netjs.codeplex.com/'>.Net JavaScript Implementations</a>.</p>

<p>The list implementation has an API that looks a lot like LINQ:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Car</span><span class='p'>(</span><span class='nx'>make</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>make</span> <span class='o'>=</span> <span class='nx'>make</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='kd'>var</span> <span class='nx'>myList</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>List</span><span class='p'>();</span>
<span class='nx'>myList</span><span class='p'>.</span><span class='nx'>Add</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>Car</span><span class='p'>(</span><span class='s1'>&#39;Honda&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Civic&#39;</span><span class='p'>));</span>
<span class='nx'>myList</span><span class='p'>.</span><span class='nx'>Add</span><span class='p'>(</span><span class='k'>new</span> <span class='nx'>Car</span><span class='p'>(</span><span class='s1'>&#39;Nissan&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Sentra&#39;</span><span class='p'>));</span>

<span class='kd'>var</span> <span class='nx'>selList</span> <span class='o'>=</span> <span class='nx'>myList</span><span class='p'>.</span><span class='nx'>Where</span><span class='p'>(</span><span class='s1'>&#39;make == &#39;</span><span class='nx'>Honda</span><span class='s1'>&#39;&#39;</span><span class='p'>).</span><span class='nx'>OrderByDescending</span><span class='p'>(</span><span class='s1'>&#39;model&#39;</span><span class='p'>).</span><span class='nx'>Distinct</span><span class='p'>();</span>
</code></pre>
</div>
<p>He&#8217;s also working on a <code>Reflection</code> class as well as a pseudo type system.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/11/fluent-backbone-asq-lefunc">Fluent, Backbone.xmpp, leFunc, Frisby</a></h2>
      <div class="meta">
        <span class="date">11 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/11/fluent-backbone-asq-lefunc/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#conferences">conferences</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#xmpp">xmpp</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='fluent_conference'>Fluent Conference</h3>

<p><img src='/images/posts/fluent.png' alt='Fluent' /></p>

<p><a href='http://fluentconf.com/fluent2012'>Fluent</a> will be held on May 29-31, in San Francisco. It features several tracks &#8211; one covers <a href='http://fluentconf.com/fluent2012/public/schedule/topic/830'>language issues</a> and includes a session with Brendan Eich. The <a href='http://fluentconf.com/fluent2012/public/schedule/topic/831'>browser track</a> has talks from employees of social networking favourites Twitter, Facebook, and Twitter, and even Microsoft! There&#8217;s also a track for <a href='http://fluentconf.com/fluent2012/public/schedule/topic/832'>Node sessions</a>, which has speakers from Joyent, Twitter, Groupon, and lots more interesting companies.</p>

<p>&#8220;Early price&#8221; tickets are on sale until May 15th, and there are several tiers available:</p>

<ul>
<li>All-Access Pass: $1695 (standard price: $1895)</li>

<li>Conference Plus Tuesday Workshops: $1295 (standard price: $1495)</li>

<li>Conference: $995 (standard price: $1195)</li>

<li>Tuesday Workshops: $695 (standard price: $895)</li>
</ul>

<p>There are discounts for previous O&#8217;Reilly conference attendees, company teams, academic staff, non-profits, and students.</p>

<h3 id='backbonexmpp'>Backbone.xmpp</h3>

<p><a href='https://github.com/ggozad/Backbone.xmpp'>Backbone XMPP Pub-Sub Storage</a> (License: <em>MIT</em>) by Yiorgis Gozadinos is an alternative storage layer for <a href='http://documentcloud.github.com/backbone/'>Backbone.js</a> that uses <a href='http://xmpp.org/extensions/xep-0060.html'>XMPP publish-subscribe</a>.</p>

<p>To use it, set a collection&#8217;s <code>sync</code> property to <code>Backbone.xmppSync</code>, and assign an instance of <code>PubSubStorage</code> to the collection&#8217;s <code>node</code> property:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>MyCollection</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>sync</span><span class='o'>:</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>xmppSync</span>
  <span class='p'>,</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>MyModel</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>mycollection</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>MyCollection</span><span class='p'>();</span>
<span class='nx'>mycollection</span><span class='p'>.</span><span class='nx'>node</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>PubSubStorage</span><span class='p'>(</span><span class='s1'>&#39;mymodels&#39;</span><span class='p'>,</span> <span class='nx'>connection</span><span class='p'>);</span>
</code></pre>
</div>
<p>The README has links to full documentation in the form of annotated source.</p>

<h3 id='lefunc'>leFunc</h3>

<p><a href='https://github.com/jrf0110/leFunc'>leFunc</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/leFunc'>leFunc</a>) by John Fawcett is a library that uses type checking to support function overloading in pure JavaScript:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>getItems</span> <span class='o'>=</span> <span class='nx'>leFunc</span><span class='p'>({</span>
  <span class='s1'>&#39;string&#39;</span><span class='p'>;</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>id</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Do something</span>
  <span class='p'>},</span>

  <span class='s1'>&#39;string,object&#39;</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>id</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Do something else</span>
  <span class='p'>},</span>

  <span class='s1'>&#39;string,object,function&#39;</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>id</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>,</span> <span class='nx'>callback</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Do something different</span>
    <span class='nx'>callback</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='nx'>getItems</span><span class='p'>(</span><span class='s1'>&#39;123abc&#39;</span><span class='p'>);</span> <span class='c1'>// Calls the first function</span>
<span class='nx'>getItems</span><span class='p'>(</span><span class='s1'>&#39;123abc&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>awesome</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>});</span> <span class='c1'>// Calls the second function</span>
<span class='nx'>getItems</span><span class='p'>(</span><span class='s1'>&#39;123abc&#39;</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>awesome</span><span class='o'>:</span> <span class='kc'>true</span> <span class='p'>},</span> <span class='kd'>function</span><span class='p'>(){});</span> <span class='c1'>// Calls the third function</span>
</code></pre>
</div>
<p>At the moment it&#8217;ll work with any function signatures that are relatively easy to type check. That means <a href='http://dailyjs.com/2012/05/07/js101-object/'>primitive values and objects</a> will work as expected.</p>

<h3 id='frisby'>Frisby</h3>

<p>If you&#8217;re testing a lot of REST-based APIs, then <a href='http://frisbyjs.com/'>Frisby</a> (GitHub: <a href='https://github.com/vlucas/frisby'>vlucas / frisby</a>, License: <em>BSD</em>, npm: <a href='http://npmjs.org/package/frisby'>frisby</a>) by Vance Lucas might be what you&#8217;re looking for. It&#8217;s a REST API testing framework built using <a href='http://pivotal.github.com/jasmine/'>Jasmine</a>.</p>

<p>It has a nice and friendly chainable API:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>frisby</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;frisby&#39;</span><span class='p'>);</span>

<span class='nx'>frisby</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>(</span><span class='s1'>&#39;Get Brightbit Twitter feed&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;https://api.twitter.com/1/statuses/user_timeline.json?screen_name=brightbit&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>expectStatus</span><span class='p'>(</span><span class='mi'>200</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>expectHeaderContains</span><span class='p'>(</span><span class='s1'>&#39;content-type&#39;</span><span class='p'>,</span> <span class='s1'>&#39;application/json&#39;</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>expectJSON</span><span class='p'>(</span><span class='s1'>&#39;0&#39;</span><span class='p'>,</span> <span class='p'>{</span>
    <span class='nx'>place</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>val</span><span class='p'>)</span> <span class='p'>{</span> <span class='nx'>expect</span><span class='p'>(</span><span class='nx'>val</span><span class='p'>).</span><span class='nx'>toMatchOrBeNull</span><span class='p'>(</span><span class='s2'>&quot;Oklahoma City, OK&quot;</span><span class='p'>);</span> <span class='p'>},</span> <span class='c1'>// Custom matcher callback</span>
    <span class='nx'>user</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>verified</span><span class='o'>:</span> <span class='kc'>false</span><span class='p'>,</span>
      <span class='nx'>location</span><span class='o'>:</span> <span class='s2'>&quot;Oklahoma City, OK&quot;</span><span class='p'>,</span>
      <span class='nx'>url</span><span class='o'>:</span> <span class='s2'>&quot;http://brightb.it&quot;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
</code></pre>
</div>
<p>The project itself is also fully tested, and comes with <a href='http://frisbyjs.com/docs/api/'>API documentation</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/10/windows-and-node-2">Windows and Node: Windows Performance Monitor</a></h2>
      <div class="meta">
        <span class="date">10 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/10/windows-and-node-2/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#windows">windows</a>
          
            <a href="/tags.html#windows-and-node">windows-and-node</a>
          
        </span>
      </div>
      <div class="preview">
        <p>It&#8217;s time to take a look at a Windows-oriented Node module to see how it works. Before getting messy with C, C++, and all that native module stuff, let&#8217;s keep it simple by looking at something that communicates with Windows programs using Node&#8217;s streams.</p>

<p><img src='/images/posts/win2/win_performance_monitor.png' alt='Windows Performance Monitor' /></p>

<p><a href='http://technet.microsoft.com/en-us/library/cc749249.aspx'>Windows Performance Monitor</a> provides extremely detailed logging, featuring a wide array of counters, event trace data, and configuration information. The command-line tool, <a href='http://technet.microsoft.com/en-us/library/bb490960.aspx'>typeperf.exe</a> can write some of this data to a command window.</p>

<p>For example, <code>typeperf &quot;\Memory\Available bytes&quot; &quot;\processor(_total)\% processor time&quot;</code> will display processor and memory counters. The output looks like this on my computer:</p>

<p><img src='/images/posts/win2/typeperf.png' alt='typeperf' /></p>

<p>Why do I mention this? Well, the Node <a href='https://github.com/markitondemand/node-perfmon'>perfmon</a> module is a wrapper around <code>typeperf</code> that provides a <a href='http://nodejs.org/docs/latest/api/streams.html#readable_Stream'>ReadableStream</a>-based API. This is an idiomatic module that demonstrates one way of working with an existing program that comes bundled with Windows.</p>

<h3 id='the__module'>The <code>perfmon</code> Module</h3>

<p>To try it out, open a command window and make a directory:</p>
<div class='highlight'><pre><code class='text'>cd Documents\Code\
mkdir perf-example
cd perf-example
</code></pre>
</div>
<p>Then install <code>perfmon</code>:</p>
<div class='highlight'><pre><code class='text'>npm install perfmon
</code></pre>
</div>
<p>Once that&#8217;s done, create a JavaScript file that uses the <code>perfmon</code> module to gather some data:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>perfmon</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;perfmon&#39;</span><span class='p'>);</span>

<span class='nx'>perfmon</span><span class='p'>(</span><span class='s1'>&#39;\\processor(_total)\\% processor time&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Running it should display some logging. Press <code>ctrl-c</code> to stop it.</p>

<h3 id='child_processes'>Child Processes</h3>

<p>The author has written this by using <code>spawn</code> from the <a href='http://nodejs.org/docs/latest/api/all.html#all_child_process'>child_process</a> module. In fact, we can execute any executable using this module. Try the following script:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>exec</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;child_process&#39;</span><span class='p'>).</span><span class='nx'>exec</span><span class='p'>;</span>

<span class='nx'>exec</span><span class='p'>(</span><span class='s1'>&#39;echo %PATH%&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>stdout</span><span class='p'>,</span> <span class='nx'>stderr</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;PATH:&#39;</span><span class='p'>,</span> <span class='nx'>stdout</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The output should look similar to the following screenshot, but it may vary depending on what you&#8217;ve got installed:</p>

<p><img src='/images/posts/win2/path.png' alt='PATH' /></p>

<p>The <code>child_process</code> API is exactly the same in Unix, as we saw in the <em>Unix and Node</em> posts.</p>

<h3 id='portability'>Portability</h3>

<p>Does this mean Node programs are generally portable between Unix and Windows? Well, as you can see in this example, Node&#8217;s standard libraries look the same. It&#8217;s just the part that touches the operating system that may look different. In this example, the part that reads <code>echo %PATH%</code> would be different in Unix.</p>

<p>We&#8217;ll look at other portability issues as this series progresses. For now, your homework is to find more Windows-oriented Node modules and see if you can understand the basic principles at work. The <a href='http://nodejs.org/docs/latest/api/all.html'>Node documentation</a> will be indispensable for this!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/09/node-roundup">Node Roundup: Video Gallery, Restie, xml-literals, Revised Console</a></h2>
      <div class="meta">
        <span class="date">09 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/09/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='app_video_gallery'>App: Video Gallery</h3>

<p><img src='/images/posts/express-video-gallery.png' alt='Video Gallery screenshot' /></p>

<p><a href='http://bits.meloncholy.com/node-video-gallery/'>Video Gallery</a> (GitHub: <a href='https://github.com/meloncholy/node-video-gallery'>meloncholy / node-video-gallery</a>, License: <em>MIT</em>) by Andrew Weeks is a Metro-inspired video gallery written with Express, Jade, and MySQL.</p>

<p>It&#8217;s got JSON configuration files, separated routes, and lots of fancy front-end effects. There&#8217;s a blog post about it here: <a href='http://meloncholy.com/blog/node-js-video-gallery/'>Node.js Video Gallery</a>.</p>

<h3 id='restie'>Restie</h3>

<p><a href='https://github.com/vdemedes/restie'>Restie</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/restie'>restie</a>) by Vadim Demedes is an ORM that behaves the same in Node and browsers. Models can be declared then manipulated with the familiar <a href='http://en.wikipedia.org/wiki/Create,_read,_update_and_delete'>CRUD</a> methods, in a similar fashion to Backbone.js.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Post</span> <span class='o'>=</span> <span class='nx'>Restie</span><span class='p'>.</span><span class='nx'>define</span><span class='p'>(</span><span class='s1'>&#39;Post&#39;</span><span class='p'>);</span>

<span class='nx'>Post</span><span class='p'>.</span><span class='nx'>all</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>posts</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// GET /posts/</span>
<span class='p'>});</span>

 
<span class='nx'>Post</span><span class='p'>.</span><span class='nx'>find_by_id</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>post</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// DELETE /posts/1</span>
  <span class='nx'>post</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Post removed</span>
  <span class='p'>});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The author has included tests that run in both browsers and Node.</p>

<h3 id='xmlliterals'>xml-literals</h3>

<p><a href='https://github.com/laverdet/js-xml-literal'>xml-literals</a> (npm: <a href='http://npmjs.org/package/xml-literals'>xml-literals</a>) by Marcel Laverdet adds Node support for <a href='http://en.wikipedia.org/wiki/ECMAScript_for_XML'>E4X</a>-style XML literals:</p>
<div class='highlight'><pre><code class='text'>var anchor = &lt;a href={href}&gt;Hello&lt;/a&gt;;
</code></pre>
</div>
<p>To mix XML and JavaScript this way, the xml-literals module has to register a file extension first, then files that contain XML literals can be loaded. The following example would make subsequent <code>require</code> calls able to load files that include XML literals:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;xml-literals&#39;</span><span class='p'>).</span><span class='nx'>register</span><span class='p'>(</span><span class='s1'>&#39;js&#39;</span><span class='p'>);</span>

<span class='c1'>// This file contains XML literals</span>
<span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;my-xml-literal-example&#39;</span><span class='p'>);</span>
</code></pre>
</div>
<h3 id='revised_console'>Revised Console</h3>

<p><a href='https://github.com/tblobaum/rconsole'>Revised Console</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/rconsole'>rconsole</a>) by Thomas Blobaum provides C bindings for syslog and makes the <code>console</code> methods log to syslog. This would log to <code>/var/log/messages</code> (depending on the OS):</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;rconsole&#39;</span><span class='p'>)</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;hello world&#39;</span><span class='p'>)</span>
</code></pre>
</div>
<p>The author has included an example of using Express&#8217; <code>express.logger</code> to log to syslog, which strikes me as potentially useful for production web apps.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/08/jquery-roundup">jQuery Roundup: Jewel, Custom Drag and Drop, TouchTouch, BetterExamples.js</a></h2>
      <div class="meta">
        <span class="date">08 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/08/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
            <a href="/tags.html#touchscreen">touchscreen</a>
          
            <a href="/tags.html#templating">templating</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jewel'>Jewel</h3>

<p><a href='https://github.com/vdemedes/jewel'>Jewel</a> (License: <em>MIT</em>) by Vadim Demedes is an <a href='http://api.rubyonrails.org/classes/ActiveRecord/Base.html'>ActiveRecord</a>-inspired DOM query API:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Post</span> <span class='o'>=</span> <span class='nx'>Jewel</span><span class='p'>.</span><span class='nx'>define</span><span class='p'>(</span><span class='s1'>&#39;#posts&#39;</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>keys</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;h1&#39;</span>
  <span class='p'>,</span> <span class='nx'>body</span><span class='o'>:</span> <span class='s1'>&#39;p&#39;</span>
  <span class='p'>},</span>

  <span class='nx'>template</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>fields</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='s1'>&#39;&lt;div class=&quot;post&quot;&gt;&lt;h1&gt;&#39;</span> <span class='o'>+</span> <span class='nx'>fields</span><span class='p'>.</span><span class='nx'>title</span> <span class='o'>+</span> <span class='s1'>&#39;&lt;/h1&gt;&lt;p&gt;&#39;</span> <span class='o'>+</span> <span class='nx'>fields</span><span class='p'>.</span><span class='nx'>body</span> <span class='o'>+</span> <span class='s1'>&#39;&lt;/p&gt;&lt;/div&gt;&#39;</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='c1'>// Get all of the posts</span>
<span class='kd'>var</span> <span class='nx'>posts</span> <span class='o'>=</span> <span class='nx'>Post</span><span class='p'>.</span><span class='nx'>all</span><span class='p'>;</span>

<span class='c1'>// Create a new post</span>
<span class='kd'>var</span> <span class='nx'>post</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Post</span><span class='p'>();</span>
<span class='nx'>post</span><span class='p'>.</span><span class='nx'>title</span> <span class='o'>=</span> <span class='s1'>&#39;Latest post&#39;</span><span class='p'>;</span>
<span class='nx'>post</span><span class='p'>.</span><span class='nx'>body</span> <span class='o'>=</span> <span class='s1'>&#39;Latest content&#39;</span><span class='p'>;</span>
<span class='nx'>post</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>();</span> <span class='c1'>// Will be prepended to #posts</span>
</code></pre>
</div>
<p>It actually combines templating and querying, which seems to work quite well. The author has included some Mocha unit tests, and he&#8217;s tested it in everything except IE.</p>

<h3 id='custom_drag_and_drop_with_mouse'>Custom Drag and Drop with Mouse</h3>

<p><a href='http://www.solitr.com/blog/2012/05/roll-your-own-drag-and-drop-handling-with-jquery-ui/'>Roll your own drag-and-drop handling, with help from jQuery UI</a> by Jo Liss is a tutorial that explains how to build customised drag-and-drop interfaces using the <a href='https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.mouse.js'>jQuery UI Mouse</a> widget.</p>

<p>It&#8217;s interesting because I&#8217;ve struggled to get <a href='http://jqueryui.com/demos/draggable/'>Draggable</a> to do what I wanted in more complex or unique situations, and building on Mouse seems to offer the flexibility some projects demand.</p>

<h3 id='touchtouch'>TouchTouch</h3>

<p><img src='/images/posts/touchtouch.png' alt='TouchTouch' /></p>

<p><a href='http://tutorialzine.com/2012/04/mobile-touch-gallery/'>TouchTouch</a> (GitHub: <a href='https://github.com/martinaglv/touchTouch/'>martinaglv / touchTouch</a>, License: <em>MIT</em>, <a href='http://demo.tutorialzine.com/2012/04/mobile-touch-gallery/'>Demo</a> by Martin Angelov is an image gallery that&#8217;s also touchscreen-friendly. It features a responsive interface with CSS3 animations and gestures like swiping.</p>

<p>All it needs is a list of images with links: <code>$(&#39;#thumbs a&#39;).touchTouch();</code></p>

<h3 id='betterexamplesjs'>BetterExamples.js</h3>

<p><a href='http://willemmulder.github.com/BetterExamples.js/'>BetterExamples.js</a> (GitHub: <a href='https://github.com/willemmulder/BetterExamples.js'>willemmulder / BetterExamples.js</a>, License: <em>CC BY-SA 3.0</em>) by Willem Mulder is an attempt to make JavaScript code examples more interactive.</p>

<p>It&#8217;ll display both logging and errors, next to the code that generated them. This is something that I&#8217;d like to succeed because even with great tools like <a href='http://jsfiddle.net/'>jsFiddle</a> I feel like it&#8217;s still difficult to create easy to follow interactive code examples.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/07/js101-object">JS101: Primitive Values and Objects</a></h2>
      <div class="meta">
        <span class="date">07 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/07/js101-object/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='back_to_basics'>Back to Basics</h3>

<p>When people talk to me about DailyJS they often ask for more beginner&#8217;s articles. Therefore, we&#8217;re starting the <strong>JS101</strong> series on DailyJS. These are intended to be short guides on fundamental topics that shouldn&#8217;t take more than about 10 minutes to read.</p>

<p>I really believe learning JavaScript comes down to understanding <code>Object</code>, so what better place to start?</p>

<h3 id='types_of_values'>Types of Values</h3>

<p>In JavaScript, the humble <code>Object</code> underlies many of the language&#8217;s strengths. To understand JavaScript objects, let&#8217;s consider what types of values we have at our disposal. Take a look at the following example:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>one</span> <span class='o'>=</span> <span class='mi'>1</span>
  <span class='p'>,</span> <span class='nx'>oneObject</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nb'>Number</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>

<span class='nx'>log</span><span class='p'>(</span><span class='nx'>one</span> <span class='o'>===</span> <span class='nx'>oneObject</span><span class='p'>);</span>
<span class='nx'>log</span><span class='p'>(</span><span class='k'>typeof</span><span class='p'>(</span><span class='nx'>one</span><span class='p'>),</span> <span class='k'>typeof</span><span class='p'>(</span><span class='nx'>oneObject</span><span class='p'>));</span>
</code></pre>
</div>
<p>I&#8217;ve made an interactive version of this example that you can experiment with here: <a href='http://jsfiddle.net/uWup3/'>http://jsfiddle.net/uWup3/</a>.</p>

<p>This uses the <em>strict equals operator</em> to compare the value <code>1</code> with the object <code>new Number(1)</code>, and <code>false</code> is returned. The reason for this is <code>1</code> is a <a href='http://es5.github.com/#x4.3.2'>primitive value</a>, and is not an object. The number created with <code>new Number</code> is an object, as shown by the value returned by <code>typeof</code>.</p>

<p>There are other primitive values: Undefined, Null, Boolean, Number, and String. Another interesting point relates to <code>Undefined</code> and how it&#8217;s a type whose sole value is <code>undefined</code>.</p>

<h3 id='creating_objects'>Creating Objects</h3>

<p>When working in JavaScript, we mostly concern ourselves with objects. There&#8217;s a reason why JSON is so popular and powerful, and it comes down to the flexibility of objects. The main difference between objects and primitive values is objects are clearly comprised of multiple items:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>javascript</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>influences</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;C&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Java&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Scheme&#39;</span><span class='p'>]</span>
<span class='p'>,</span> <span class='nx'>designer</span><span class='o'>:</span> <span class='s1'>&#39;Brendan Eich&#39;</span>
<span class='p'>,</span> <span class='nx'>created</span><span class='o'>:</span> <span class='k'>new</span> <span class='nb'>Date</span><span class='p'>(</span><span class='mi'>1995</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>)</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The &#8216;items&#8217; in this object &#8211; <code>influences</code>, <code>designer</code>, and <code>created</code> &#8211; are known as <em>properties</em>. While it&#8217;s difficult to imagine breaking down <code>10</code> or <code>true</code> into their constituent parts, this object can easily be broken down. Notice how each value can be a different type &#8211; both primitive values and objects can be combined together in an object.</p>

<p>Now consider this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>javascript</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nb'>Object</span><span class='p'>({</span>
  <span class='nx'>influences</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;C&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Java&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Scheme&#39;</span><span class='p'>]</span>
<span class='p'>,</span> <span class='nx'>designer</span><span class='o'>:</span> <span class='s1'>&#39;Brendan Eich&#39;</span>
<span class='p'>,</span> <span class='nx'>created</span><span class='o'>:</span> <span class='k'>new</span> <span class='nb'>Date</span><span class='p'>(</span><span class='mi'>1995</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>)</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I&#8217;ve used <code>new Object</code> to create a new instance. According to the language specification, under <a href='http://es5.github.com/#x11.1.5'>Object Initialiser</a>, these forms are equivalent &#8211; creating objects with an object literal will return a new object as if <code>new Object()</code> was used. Similarly, the array literal <code>[&#39;C&#39;, &#39;Java&#39;, &#39;Scheme&#39;]</code> will create a new object as if <code>new Array()</code> had been called.</p>

<p>The important thing to notice is the use of a constructor. In this case the constructor is <code>new Object</code>, but there are other built-in constructors. I also sneaked in <code>new Date</code> which creates a <code>Date</code> object.</p>

<h3 id='constructors'>Constructors</h3>

<p>The previous example looks more like a data record than a reusable piece of code. We can make it more reusable by creating a <em>constructor</em> &#8211; a function that knows how to initialise a certain flavour of object.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Language</span><span class='p'>(</span><span class='nx'>designer</span><span class='p'>,</span> <span class='nx'>created</span><span class='p'>,</span> <span class='nx'>influences</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>designer</span> <span class='o'>=</span> <span class='nx'>designer</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>created</span> <span class='o'>=</span> <span class='nx'>created</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>influences</span> <span class='o'>=</span> <span class='nx'>influences</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='kd'>var</span> <span class='nx'>javascript</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Language</span><span class='p'>(</span>
  <span class='s1'>&#39;Brendan Eich&#39;</span>
<span class='p'>,</span> <span class='k'>new</span> <span class='nb'>Date</span><span class='p'>(</span><span class='mi'>1995</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>)</span>
<span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;C&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Java&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Scheme&#39;</span><span class='p'>]</span>
<span class='p'>);</span>
</code></pre>
</div>
<p>Now I can make other programming languages:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>c</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>Language</span><span class='p'>(</span>
  <span class='s1'>&#39;Dennis Ritchie&#39;</span>
<span class='p'>,</span> <span class='k'>new</span> <span class='nb'>Date</span><span class='p'>(</span><span class='mi'>1972</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>)</span>
<span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;B&#39;</span><span class='p'>,</span> <span class='s1'>&#39;ALGOL&#39;</span><span class='p'>]</span>
<span class='p'>);</span>
</code></pre>
</div>
<p>The constructor can be accessed using the <code>constructor</code> property, like this: <code>c.constructor</code>. In this case it&#8217;ll return <code>Language</code>. Play around with it here: <a href='http://jsfiddle.net/zYzER/6/'>http://jsfiddle.net/zYzER/6/</a>.</p>

<p>In the ES5 specification under <a href='http://es5.github.com/#x15.2.4'>Properties of the Object Prototype Object</a>, other properties of objects are mentioned. For example, we also get <code>toString</code>, and some stranger sounding methods like <code>hasOwnProperty</code>.</p>

<h3 id='next'>Next</h3>

<p>I&#8217;m going to continue this series of back to basics JavaScript each Monday. Think of it as learning JavaScript in bite-sized chunks. Next week I&#8217;ll talk about prototypes.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/04/gta-pong-textures">WebGL GTA, 3D Pong, webgl-texture-utils</a></h2>
      <div class="meta">
        <span class="date">04 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/04/gta-pong-textures/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#games">games</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='webgl_gta'>WebGL GTA</h3>

<p><img src='/images/posts/gta-webgl.png' alt='WebGL GTA' /></p>

<p><a href='http://experiments.hertzen.com/webgl-gta/index.html'>WebGL GTA</a> (GitHub: <a href='https://github.com/niklasvh/WebGL-GTA'>niklasvh / WebGL-GTA</a>, <a href='http://niklasvh.github.com/WebGL-GTA/'>Demo</a>) by Niklas von Hertzen is a WebGL interpretation of the original Grand Theft Auto. It parses the game files and builds maps and game objects, all rendered with glorious WebGL.</p>

<p>There are a few glitches, but it&#8217;s amazing how much the author has done while keeping the code relatively easy to follow.</p>

<h3 id='3d_pong'>3D Pong</h3>

<p>In <a href='http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong/'>Augmented Reality 3D Pong</a> by Jerome Etienne, a version of Pong is presented that works using a gesture-based interface. There&#8217;s a detailed screencast that explains the code here: <a href='http://www.youtube.com/watch?v=iunNd5lmAVE'>Augmented Reality 3D Pong Live Coding Screencast</a>. The actual code is here: <a href='https://github.com/jeromeetienne/augmentedgesture.js/tree/master/examples/augmentedpong'>jeromeetienne / augmentedgesture.js</a> &#8211; take a look at the <a href='https://github.com/jeromeetienne/augmentedgesture.js/blob/master/examples/augmentedpong/index.html'>index.html</a> file to see the non-library part of the project.</p>

<h3 id='webgltextureutils'>webgl-texture-utils</h3>

<p><a href='https://github.com/toji/webgl-texture-utils'>webgl-texture-utils</a> by Brandon Jones (the author of <a href='http://blog.tojicode.com/'>TojiCode</a>) is a set of WebGL texture libraries that can help with loading compressed formats. The file format is inferred by the file extension, but can also be overridden.</p>

<p>It also includes support for the <a href='http://code.google.com/p/crunch/'>crunch</a> format:</p>

<blockquote>
<p>And yes, it does support DDS. The full list of supported formats is currently JPG, PNG, GIF, BMP, DDS, CRN (Crunch), and some TGAs. I don&#8217;t actually advocate using TGAs in your WebGL apps, but I had the code available so why not?</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/03/windows-and-node-1">Windows and Node: Getting Started</a></h2>
      <div class="meta">
        <span class="date">03 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/03/windows-and-node-1/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#windows">windows</a>
          
            <a href="/tags.html#windows-and-node">windows-and-node</a>
          
        </span>
      </div>
      <div class="preview">
        <p>I enjoyed writing the <a href='http://dailyjs.com/tags.html#unix'>Unix and Node</a> tutorials over the past few months, and I hope they got people thinking about creating Node programs that behave like first-class Unix citizens.</p>

<p>Since last June, when <a href='http://blog.nodejs.org/2011/06/23/porting-node-to-windows-with-microsoft%E2%80%99s-help/'>Microsoft partnered with Joyent to port Node to Windows</a>, Node has gone from strength to strength on Microsoft&#8217;s ubiquitous OS. I thought it was only fair to give Windows the same treatment.</p>

<p>In <em>Windows and Node</em>, we&#8217;ll take a look at Windows-centric Node development. In the first part, we&#8217;ll install Node (which now includes npm), take a look at the basics, then make a little <a href='http://expressjs.com/'>Express</a> web application to prove it&#8217;s generally portable with existing Node modules.</p>

<h3 id='installation'>Installation</h3>

<p><a href='/images/posts/win1/win_1_stock_windows.png'><img src='/images/posts/win1/thumbs/win_1_stock_windows_thumb.png' alt='My Windows desktop' /></a></p>

<p>I&#8217;m running a pretty standard installation of Windows 7 Home Professional. I&#8217;ve got a few things I like installed (Steam, Putty, Chrome, Vim, Dropbox), but nothing specifically related to development. That means there&#8217;s no compilers, Cygwin, or Visual Studio.</p>

<p><a href='/images/posts/win1/win_2_node_download.png'><img src='/images/posts/win1/thumbs/win_2_node_download_thumb.png' alt='Downloading Nodes Windows installer' /></a></p>

<p>To download Node, go to <a href='http://nodejs.org/'>nodejs.org</a>, click &#8220;Download&#8221;, and click &#8220;Windows Installer&#8221;. This will give you a Windows Installer (MSI) file that will install Node and npm.</p>

<p><a href='/images/posts/win1/win_3_node_installer.png'><img src='/images/posts/win1/thumbs/win_3_node_installer_thumb.png' alt='Running the Node Windows installer' /></a></p>

<p>Running the Windows installer will show a wizard, it&#8217;s pretty easy to follow. It&#8217;s just like installing any other Windows program &#8211; the Node binaries will end up in <code>C:\Program Files (x86)\nodejs\</code>, and will be accessible from <code>cmd.exe</code>.</p>

<p><a href='/images/posts/win1/win_4_cmd.png'><img src='/images/posts/win1/thumbs/win_4_cmd_thumb.png' alt='Running Node' /></a></p>

<h3 id='running_node_and_npm'>Running Node and npm</h3>

<p>To run Node, open a Command Prompt and type <code>node</code>. This will load the standard Node REPL where JavaScript can be evaluated. Here I&#8217;ve opened my <code>win.ini</code> using Node&#8217;s <code>fs</code> module:</p>

<p><a href='/images/posts/win1/win_5_cmd_node_readfile.png'><img src='/images/posts/win1/thumbs/win_5_cmd_node_readfile_thumb.png' alt='Evaluating JavaScript' /></a></p>

<p>If you want to exit the REPL, I noticed that <code>ctrl-d</code> works (just like Unix!)</p>

<p>Similarly, <code>npm</code> can be run. The first time I used it to search for something, it took a few minutes to download the index first:</p>

<p><a href='/images/posts/win1/win_6_cmd_node_npm.png'><img src='/images/posts/win1/thumbs/win_6_cmd_node_npm_thumb.png' alt='Using npm' /></a></p>

<h3 id='getting_help'>Getting Help</h3>

<p>When I&#8217;m working in Unix, I often find myself reading npm&#8217;s <code>man</code> pages. Windows doesn&#8217;t have <code>man</code>, so instead npm will open a browser and display HTML versions of its standard help files.</p>

<p><a href='/images/posts/win1/win_7_cmd_node_npm_help_json.png'><img src='/images/posts/win1/thumbs/win_7_cmd_node_npm_help_json_thumb.png' alt='Getting help' /></a></p>

<p>The first time I tried this an error was displayed. However, there&#8217;s a <a href='https://github.com/isaacs/npm/issues/2405'>bug report</a> where fixes for the problem are discussed, and Isaac Schlueter stated that the problem will be fixed in Node 0.6.17.</p>

<h3 id='hello_world_from_express'>Hello World from Express</h3>

<p>Now that we&#8217;ve got Node and npm working it shouldn&#8217;t take too much work to get a little project started. Make a new directory somewhere and open your favourite editor. I&#8217;m using Vim, but you can use <a href='http://notepad-plus-plus.org/'>one of the many freely available editors for Windows</a>.</p>

<p>Create a file called <code>package.json</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>
  <span class='s2'>&quot;name&quot;</span><span class='o'>:</span> <span class='s2'>&quot;hello&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;version&quot;</span><span class='o'>:</span> <span class='s2'>&quot;0.0.1&quot;</span>
<span class='p'>,</span> <span class='s2'>&quot;dependencies&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;express&quot;</span><span class='o'>:</span> <span class='s2'>&quot;latest&quot;</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Then change directory to the location of your project in Command Prompt, and run <code>npm install</code> to install Express:</p>
<div class='highlight'><pre><code class='text'>cd Documents\Code\hello
npm install
</code></pre>
</div>
<p><a href='/images/posts/win1/win_8_cmd_node_npm_install.png'><img src='/images/posts/win1/thumbs/win_8_cmd_node_npm_install_thumb.png' alt='Installing packages with npm' /></a></p>

<p>Make a file that contains a simple Express app, I called mine <code>index.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>express</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;express&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>express</span><span class='p'>.</span><span class='nx'>createServer</span><span class='p'>();</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>res</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>(</span><span class='s1'>&#39;hello world&#39;</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>listen</span><span class='p'>(</span><span class='mi'>3000</span><span class='p'>)</span>
</code></pre>
</div>
<p>Then run it with <code>node index.js</code> and visit <code>http://localhost:3000/</code> in a browser.</p>

<p>I got a firewall warning when I did this, but it was fairly self-explanatory:</p>

<p><a href='/images/posts/win1/win_9_cmd_node_firewall_warning.png'><img src='/images/posts/win1/thumbs/win_9_cmd_node_firewall_warning_thumb.png' alt='Windows Security Alert' /></a></p>

<h3 id='conclusion'>Conclusion</h3>

<p>On a standard consumer-grade version of Windows 7, Node can be installed and programs can be written without installing anything else. Building modules that require C/C++ compilation is a little bit more work, but community-favourite Express can be installed without any hassle.</p>

<p>In the coming weeks I hope to look at more detailed Windows-related issues, and working with Node and Microsoft technologies like <a href='www.windowsazure.com'>Windows Azure</a>. I bought a Windows 7 license specifically to write this series, so I&#8217;m going to get my money&#8217;s worth!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/02/node-roundup">Node Roundup: 0.6.16, Node WebKit Agent, URLify, crud-bones, frontail</a></h2>
      <div class="meta">
        <span class="date">02 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/02/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#unix">unix</a>
          
            <a href="/tags.html#url">url</a>
          
            <a href="/tags.html#webkit">webkit</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_0616'>Node 0.6.16</h3>

<p>The latest stable release of Node is out: <a href='http://blog.nodejs.org/2012/04/30/version-0-6-16-stable/'>0.6.16</a>. V8 has been upgraded to 3.6.6.25, and there are improvements for each platform.</p>

<p>Dave Pacheco also posted about <a href='http://blog.nodejs.org/2012/04/25/profiling-node-js/'>profiling Node with DTrace</a>, but be forewarned that this is probably only useful if you&#8217;re able to run code on OpenSolaris-derived <a href='http://wiki.illumos.org/display/illumos/illumos+Home'>illumos</a> systems. I actually use DTrace in Mac OS for debugging things that aren&#8217;t related to Node, but Dave notes that this won&#8217;t work due to the lack of ustack helpers, and invites readers to contact Apple about this:</p>

<blockquote>
<p>OS X supports DTrace, but not ustack helpers. The way to get this changed is to contact your Apple developer liason (if you&#8217;re lucky enough to have one) or file a bug report at bugreport.apple.com. I&#8217;d suggest referencing existing bugs 5273057 and 11206497. More bugs filed (even if closed as dups) show more interest and make it more likely Apple will choose to fix this.</p>
</blockquote>

<h3 id='node_webkit_agent'>Node WebKit Agent</h3>

<p><a href='https://github.com/c4milo/node-webkit-agent'>Node WebKit Agent</a> (npm: <a href='http://npmjs.org/package/webkit-devtools-agent'>webkit-devtools-agent</a>) by Camilo Aguilar is an implementation of the <a href='https://developers.google.com/chrome-developer-tools/docs/protocol/1.0/'>Chrome developer tools protocol</a>. This allows WebKit browsers to debug Node applications, which includes profiling, a console, and network monitoring.</p>

<p>A related project that I&#8217;ve used a few times is <a href='https://github.com/dannycoates/node-inspector'>Node Inspector</a>.</p>

<h3 id='urlify'>URLify</h3>

<p><a href='https://github.com/Gottox/node-urlify'>URLify</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/urlify'>urlify</a>) by Enno Boland helps convert UTF-8 strings to ASCII that&#8217;s safe to use as a readable URL segment. For example:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>urlify</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;urlify&#39;</span><span class='p'>).</span><span class='nx'>create</span><span class='p'>({</span>
  <span class='nx'>spaces</span><span class='o'>:</span> <span class='s1'>&#39;_&#39;</span>
<span class='p'>,</span> <span class='nx'>nonPrintable</span><span class='o'>:</span> <span class='s1'>&#39;_&#39;</span>
<span class='p'>,</span> <span class='nx'>trim</span><span class='o'>:</span> <span class='kc'>true</span>
<span class='p'>});</span>

<span class='nx'>urlify</span><span class='p'>(</span><span class='s1'>&#39;竹取物語 Taketori Monogatari&#39;</span><span class='p'>);</span>
<span class='c1'>// Taketori_Monogatari</span>
</code></pre>
</div>
<h3 id='crudbones'>crud-bones</h3>

<p><a href='http://words.alexeypro.com/crud-bones/'>crud-bones</a> (GitHub: <a href='https://github.com/alexeypro/crud-bones'>alexeypro / crud-bones</a>) by Alexey Prohorenko is a boilerplate for Express-based apps that use MySQL, Mongo, or Redis. He&#8217;s also dotCloud and Heroku deployment instructions.</p>

<h3 id='frontail'>frontail</h3>

<p><img src='/images/posts/frontail.png' alt='frontail' /></p>

<p><a href='https://github.com/mthenw/frontail'>frontail</a> (License: <em>MIT</em>, npm: <a href='http://npmjs.org/package/frontail'>frontail</a>) by Maciej Winnicki is a WebSocket-based <code>tail</code>-inspired utility for watching logs. Imagine a version of <code>tail</code> that runs a little web server instead of writing to standard IO. It has some command-line options as well &#8211; for example, <code>-n &lt;number&gt;</code> will control how many lines are printed when it starts up.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/05/01/jquery-roundup">jQuery Roundup: jQuery UI 1.8.20, jq-quickvalidate, Fullscreen Plugin</a></h2>
      <div class="meta">
        <span class="date">01 May 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/05/01/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#jqueryui">jqueryui</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#validation">validation</a>
          
            <a href="/tags.html#fullscreen">fullscreen</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_ui_1820'>jQuery UI 1.8.20</h3>

<p><a href='http://blog.jqueryui.com/2012/04/jquery-ui-1-8-20/'>jQuery UI 1.8.20</a> has been released. This release marks the twentieth maintenance release, and includes bug fixes for Draggable, Sortable, and Datepicker.</p>

<h3 id='jqquickvalidate'>jq-quickvalidate</h3>

<p><a href='https://github.com/elclanrs/jq-quickvalidate'>jq-quickvalidate</a> (License: <em>GPLv2</em>, <a href='http://jsfiddle.net/elclanrs/BMz9U/embedded/result/'>Demo</a>) by <a href='http://spacirdesigns.com/bio'>Cedric Ruiz</a> is a form validation plugin. The author has provided CSS and icons, so it&#8217;s easy to drop into a site.</p>

<p>There are built-in validators, but custom ones can be added using a regular expression or function. Basic usage looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#my-form&#39;</span><span class='p'>).</span><span class='nx'>quickValidate</span><span class='p'>({</span>
  <span class='nx'>inputs</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>username</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>filters</span><span class='o'>:</span> <span class='s1'>&#39;required username exclude&#39;</span><span class='p'>,</span>
      <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span>
        <span class='nx'>exclude</span><span class='o'>:</span> <span class='p'>[</span><span class='s1'>&#39;Paul&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Mike&#39;</span><span class='p'>]</span>
      <span class='p'>}</span>
    <span class='p'>},</span>
    <span class='s1'>&#39;pass&#39;</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='nx'>filters</span><span class='o'>:</span> <span class='s1'>&#39;required pass&#39;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='fullscreen_plugin'>Fullscreen Plugin</h3>

<p><a href='https://github.com/kayahr/jquery-fullscreen-plugin/'>jQuery Fullscreen Plugin</a> (License: <em>MIT</em>) by Klaus Reimer is a jQuery-friendly API for working with the fullscreen mode present in supporting browsers. Vendor-specific versions are supported for WebKit and Firefox.</p>

<p>It can make an element or the entire document fullscreen:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>).</span><span class='nx'>fullScreen</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>);</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#myVideo&#39;</span><span class='p'>).</span><span class='nx'>fullScreen</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>);</span>
</code></pre>
</div>
<p>It can also exit fullscreen, or check if fullscreen is currently active. A related plugin is <a href='https://github.com/ruidlopes/jquery-fullscreen'>jquery.fullscreen.js</a>, which provides handling for various fullscreen-related events.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page28">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <strong>29</strong>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page30">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <ul class="jobs">
        <li class="job">
          <a class="link" target="_blank" href="/iridize.html">
            <h4>Lead Frontend Developer</h4>
            <h5>Iridize</h5>
            <img src="/images/posts/iridize.png" alt="">
            <p>Passionate about creating beautifully simple UX for an excitingly complex application? Join our iridize.com team @Israel.</p>
            <p><a href="/iridize.html">View full listing</a></p>
          </a>
        </li>
        <li class="job">
          <a class="link" target="_blank" href="http://tropicaldev.com/jobs/">
            <h4>NodeJS Developers</h4>
            <h5>ContinuousCRM <span class="tag node">Node</span> <span class="tag sql">SQL</span></h5>
            <img src="/images/jobs/continuous.png" alt="">
            <p>Work from Thailand! Sales and CRM system entirely in JavaScript.</p>
            <p><a href="http://tropicaldev.com/jobs/">View full listing</a></p>
          </a>
        </li>
      </ul>
      <div class="jobs-footer">JavaScript Jobs: <a href="http://contact.dailyjs.com/jobs">Create listing</a></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Contributors</h3>
      <ul>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/ricroberts">
              <img width="48" height="48" src="/images/twitter/RicRoberts.png" alt="Ric Roberts" />
              <span class="meta">
                <strong class="fullname">Ric Roberts</strong>
                <s>@</s>RicRoberts
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/rvagg">
              <img width="48" height="48" src="/images/twitter/rvagg.png" alt="Rod Vagg" />
              <span class="meta">
                <strong class="fullname">Rod Vagg</strong><br />
                <s>@</s>rvagg
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/voidfiles">
              <img width="48" height="48" src="/images/twitter/voidfiles.png" alt="Alex Kessinger" />
              <span class="meta">
                <strong class="fullname">Alex Kessinger</strong>
                <s>@</s>voidfiles
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/jaknowlden">
              <img width="48" height="48" src="/images/twitter/jaknowlden.png" alt="Justin Knowlden" />
              <span class="meta">
                <strong class="fullname">Justin Knowlden</strong>
                <s>@</s>jaknowlden
              </span>
            </a>
          </div>
        </li>
        <li>
          <div class="twitter">
            <a href="http://twitter.com/#!/olegpodsechin">
              <img width="48" height="48" src="/images/twitter/olegpodsechin.png" alt="Oleg Podsechin" />
              <span class="meta">
                <strong class="fullname">Oleg Podsechin</strong>
                <s>@</s>olegpodsechin
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

