http://dailyjs.com/page5/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 04:21:52 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "e9382-198a3-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 27073
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/02/node-roundup">Node Roundup: Money and npm, Isaac Schlueter Interview, KOAN</a></h2>
      <div class="meta">
        <span class="date">02 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/02/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#realtime">realtime</a>
          
            <a href="/tags.html#npm">npm</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='nebulous_profit_meditations'>Nebulous Profit Meditations</h3>

<p>Isaac Schlueter wrote a long article on the npm blog about <a href='http://blog.npmjs.org/post/80997676347/nebulous-profit-meditations'>how npm Inc. will make money</a>. It has some hints about the future of advertising on npm:</p>

<blockquote>
<p>In my opinion, a good example of advertising done very well is the hosting page on WordPress.org. The services offered are beneficial to WordPress users, and are offered in such a way as to avoid distracting from the core product. The focused curation increases the value, and provides a strong incentive for the advertised products to maintain their quality or risk losing their position. We will be pursuing similarly focused and curated advertising partnerships on the npm website, in ways that benefit our users as well as our technology partners.</p>
</blockquote>

<p>And GitHub&#8217;s influence:</p>

<blockquote>
<p>When I describe our plans to people, they often nod and say, &#8220;Oh, the GitHub model, ok.&#8221; I&#8217;m sure that &#8220;public for free, private costs money&#8221; isn&#8217;t new with GitHub. However, pursuing that kind of model, while at the same time acknowledging that coding is a social activity, really was a master stroke in the history of software development. I&#8217;m very thankful that they&#8217;ve helped pave the way for people to recognize this pattern.</p>
</blockquote>

<h3 id='meet_the_face_behind_npm'>Meet the Face Behind npm</h3>

<p>The Modulus hosting company blog has an <a href='http://blog.modulus.io/isaac-interview'>interview with Isaac</a>, with some history prior to Node and npm:</p>

<blockquote>
<p>At Yahoo!, I grew increasingly frustrated that I had to switch back and forth between PHP and JavaScript, and Google had just open sourced their V8 engine, so I started trying to seriously get into doing JavaScript on the server. I got involved with the K7 project, and started studying web servers in more detail. There was also SpiderApe, and v8cgi, and a bunch of other projects. Narwhal caught my eye, and I spent a bunch of time messing with that.</p>
</blockquote>

<p>I seem to remember making IRC bots with Rhino and Java sockets, then Node came along and changed everything!</p>

<h3 id='koan'>KOAN</h3>

<p><a href='http://www.koanjs.com/login.html'>KOAN</a> (GitHub: <a href='https://github.com/soygul/koan'>soygul / koan</a>) by Teoman Soygul is a full stack boilerplate that uses Koa, AngularJS, Node, and MongoDB. Unlike other similar projects, this one has WebSocket features baked in.</p>

<p>A KOAN app uses JSON-RPC for syncing data with the server, and the readme has details on how to deploy this to Heroku (using <code>labs:enable websockets</code>).</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/04/01/jquery">jQuery 1.11.1, 2.1.1, PositionCalculator, YModules</a></h2>
      <div class="meta">
        <span class="date">01 Apr 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/04/01/jquery/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#module-loaders">module-loaders</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='jquery_1111_beta_1_and_211_beta_1_released'>jQuery 1.11.1 Beta 1 and 2.1.1 Beta 1 Released</h3>

<p><a href='http://blog.jquery.com/2014/03/24/jquery-1-11-1-beta-1-and-2-1-1-beta-1-released/'>New jQuery betas are out</a>. These are maintenance releases with bug fixes, including a tweak that helps create builds with custom names, so you can use a different name in AMD loaders like RequireJS.</p>

<h3 id='positioncalculator'>PositionCalculator</h3>

<p><a href='http://tlindig.github.io/position-calculator/'>PositionCalculator</a> (GitHub: <a href='https://github.com/tlindig/position-calculator'>tlindig / position-calculator</a>, License: <em>MIT</em>) by Tobias Lindig is a jQuery UI Position replacement:</p>

<blockquote>
<p>This plugin will not manipulate any CSS settings or DOM-trees, it only calculate values. To be more exact, it calculates the difference of current position to target position and the overflow over boundary. Thus you are all paths open to implement the positioning according to your requirements. You can apply the new position by using top and left or using the css3 transform function or by setting margin. It is up to you.</p>
</blockquote>

<h3 id='ymodules'>YModules</h3>

<p>Vladimir Varankin sent in YModules (GitHub: <a href='https://github.com/ymaps/modules/'>ymaps / modules</a>) by Dmitry Filatov is an asynchronous modular loading system that works with Node and browsers.</p>

<p>The syntax looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>modules</span><span class='p'>.</span><span class='nx'>define</span><span class='p'>(</span>
  <span class='s1'>&#39;jquery&#39;</span><span class='p'>,</span>
  <span class='p'>[</span><span class='s1'>&#39;loader&#39;</span><span class='p'>],</span>
  <span class='kd'>function</span><span class='p'>(</span><span class='nx'>provide</span><span class='p'>,</span> <span class='nx'>loader</span><span class='p'>)</span> <span class='p'>{</span>

  <span class='nx'>loader</span><span class='p'>(</span><span class='s1'>&#39;//yandex.st/jquery/2.1.0/jquery.min.js&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>provide</span><span class='p'>(</span><span class='nx'>jQuery</span><span class='p'>.</span><span class='nx'>noConflict</span><span class='p'>(</span><span class='kc'>true</span><span class='p'>));</span>
  <span class='p'>});</span>
<span class='p'>});</span>

<span class='nx'>modules</span><span class='p'>.</span><span class='nx'>define</span><span class='p'>(</span>
  <span class='s1'>&#39;my-module&#39;</span><span class='p'>,</span>
  <span class='p'>[</span><span class='s1'>&#39;jquery&#39;</span><span class='p'>],</span>
  <span class='kd'>function</span><span class='p'>(</span><span class='nx'>provide</span><span class='p'>,</span> <span class='nx'>$</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>function</span> <span class='nx'>MyModule</span><span class='p'>()</span> <span class='p'>{</span> <span class='cm'>/* do something here */</span> <span class='p'>}</span>
    <span class='nx'>provide</span><span class='p'>(</span><span class='nx'>MyModule</span><span class='p'>);</span>
  <span class='p'>});</span>

<span class='nx'>modules</span><span class='p'>.</span><span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;my-module&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>MyModule</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// `MyModule` will be available here after</span>
  <span class='c1'>// Its dependencies will be resolved and its `provide` will fire.</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It has a feature that allows existing modules to be redeclared, which can help with component-based libraries:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>modules</span><span class='p'>.</span><span class='nx'>define</span><span class='p'>(</span><span class='s1'>&#39;button&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>provide</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>function</span> <span class='nx'>Button</span><span class='p'>()</span> <span class='p'>{</span> <span class='cm'>/* our button&#39;s constructor */</span> <span class='p'>});</span>
    <span class='nx'>Button</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>doAction</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{};</span>

    <span class='nx'>provide</span><span class='p'>(</span><span class='nx'>Button</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='c1'>// on the end user&#39;s space we could redefine the same Button</span>
<span class='nx'>modules</span><span class='p'>.</span><span class='nx'>define</span><span class='p'>(</span><span class='s1'>&#39;button&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;jquery&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>provide</span><span class='p'>,</span> <span class='nx'>$</span><span class='p'>,</span> <span class='nx'>Button</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// We&#39;re declaring the same module &quot;button&quot;,</span>
  <span class='c1'>// so we have an access to the module&#39;s previous definition</span>
  <span class='c1'>// through the last define&#39;s argument (`Button` here), which</span>
  <span class='c1'>// is appended automatically and known as &quot;previousModuleDeclaration&quot;</span>
  <span class='nx'>Button</span><span class='p'>.</span><span class='nx'>prototype</span><span class='p'>.</span><span class='nx'>doAnOtherAction</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{};</span>
  <span class='nx'>provide</span><span class='p'>(</span><span class='nx'>Button</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>modules</span><span class='p'>.</span><span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;button&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>Button</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>Button</span><span class='p'>.</span><span class='nx'>doAction</span><span class='p'>();</span>
  <span class='nx'>Button</span><span class='p'>.</span><span class='nx'>doAnOtherAction</span><span class='p'>();</span>
<span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/31/oauth-server">Building a Node OAuth2 Server</a></h2>
      <div class="meta">
        <span class="date">31 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/31/oauth-server/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#oauth2">oauth2</a>
          
            <a href="/tags.html#authentication">authentication</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Most of you have probably written an OAuth2 client using Node. I&#8217;ve used the <a href='https://www.npmjs.org/package/passport'>passport</a> module for Express and found it worked very nicely. But what about creating an OAuth2 server?</p>

<p>Writing a server takes more work, but as long as you&#8217;re clear about the authorisation flows that you want to use then it&#8217;s certainly possible. <a href='https://twitter.com/EricaLeCat'>Erica Salvaneschi</a> wrote <a href='http://blog.papersapp.com/oauth-server-in-node-js/'>Building a Node OAuth2 server</a>, a post about our experiences building an OAuth2 service for a commercial project we&#8217;re working on at Papers:</p>

<blockquote>
<p>This article is a walkthrough of Papers&#8217; test-driven implementation of an OAuth server using Node. We decided to go for what&#8217;s known as resource owner password flow and chose node-oauth2-server to build our server.</p>
</blockquote>

<p>The sample code was written using test-driven development, and depends on Express, Mongoose, bcrypt, and Mocha and SuperAgent for testing. We&#8217;ve kept the issues open on the sample code so you can give us feedback, which we&#8217;re interested in seeing as we&#8217;re new to OAuth2.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/28/modular-angularjs-codefront">13 Steps to AngularJS Modularization, codefront.io (discount inside!)</a></h2>
      <div class="meta">
        <span class="date">28 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/28/modular-angularjs-codefront/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#conferences">conferences</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#angularjs">angularjs</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='13_steps_to_angularjs_modularization'>13 Steps to AngularJS Modularization</h3>

<p>Christopher Hiller is writing a three part series about <a href='http://blog.safaribooksonline.com/2014/03/27/13-step-guide-angularjs-modularization/'>writing modular AngularJS</a>:</p>

<blockquote>
<p>AngularJS is not a silver bullet. It doesn&#8217;t just magically generate maintainable and extensible apps. You might get lucky with a small app and write it from scratch elegantly and efficiently, using each of AngularJS&#8217; features correctly, and maybe you even have 100% unit test coverage. Your app might do one thing, and do it flawlessly. There are steps you can take to improve your application and get it back in shape for easy development. That means quicker bug fixes, less bugs, and the faster implementation of new features. Taking some time to knock these out will save you from experiencing a lot of pain down the road.</p>
</blockquote>

<p>He outlines 13 steps that you can follow to modularise your application. Some might seem obvious, like putting assets in the right directories, but it&#8217;s surprising how often people dump files all over the place. This guide might help you if you&#8217;ve created your first AngularJS project and want to make it tidier.</p>

<h3 id='codefrontio'>codefront.io</h3>

<p><a href='http://codefront.io/'>codefront.io</a> is a conference taking place in Austria on May 10, 2014. Tickets start at €75 for students, and go up to €150 for tickets that include food and access to the after party.</p>

<p>24 speakers have been listed so far, including Monica Dinculescu from Google, Andy Hume from Twitter, Vitaly Friedman from Smashing Magazine, and Kevin Sawicki from GitHub. I also noticed Lena Reinhard, who is a core member of <a href='http://hood.ie/'>Hoodie</a>, which is a cool open source project you should check out if you haven&#8217;t seen it before.</p>

<p>The organisers sent me a discount code, so if you buy tickets with <a href='https://codefront2014.eventbrite.com/?discount=DAILYJS'>DAILYJS</a> you may be able to get €10 off your entry fee!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/27/tetris-websockets">Tetris with WebSockets</a></h2>
      <div class="meta">
        <span class="date">27 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/27/tetris-websockets/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#games">games</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#websocket">websocket</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/tetris-websockets.png' />
  <small>Tetris with WebSockets.</small>
</div>
<p>A few weeks ago I ran an introductory Node workshop at <a href='http://www.makersacademy.com/'>Makers Academy</a>:</p>

<blockquote>
<p>Makers Academy is a highly selective, 12 week full-time programme that teaches web development in London. We accept only the top applicants onto the course for a rigorous programme that culminates with the graduation day when we introduce them to London&#8217;s top technology companies looking to hire entry-level developers.</p>
</blockquote>

<p>The workshop had a 50 minute talk where I introduced Node, then we set the students a challenge: improve our <a href='https://bitbucket.org/alexyoung/tetris'>Tetris game</a>. The challenges started at basic UI improvements and ended at intermediate Node web development.</p>

<p>To make the game, I created a <a href='https://www.npmjs.org/package/sirtet'>small Tetris game engine</a> &#8211; using test-driven development, naturally. The idea behind the game and workshop was to get people thinking about what Node is good at, but we also had an ulterior motive: recruitment. We were struggling to hire a web junior web developer with Node skills, so Makers Academy provided us with a unique opportunity to talk to some enthusiastic new developers.</p>

<p>I&#8217;ve written a more detailed post about the workshop on Medium: <a href='https://medium.com/p/f80195005276'>An introductory Node workshop at Makers Academy</a>. I enjoyed writing the game engine as a Node module, and it made me want to try making a bigger WebSocket powered game&#8230; (when my book is finished!)</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/26/node-roundup">Node Roundup: npm Search Ranking, shortest-route, prova</a></h2>
      <div class="meta">
        <span class="date">26 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/26/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#testing">testing</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='npm_search_ranking'>npm Search Ranking</h3>
<div class='image'>
  <img src='/images/posts/npmsearch-mar-2014.png' />
  <small>Improved search results.</small>
</div>
<p><a href='http://blog.npmjs.org/post/80789086446/nicer-perusal-method'>npm&#8217;s search results are now ranked by popularity</a>:</p>

<blockquote>
<p>Packages are now scored by a nifty new algorithm that takes into account the package&#8217;s popularity (i.e. number of stars and average weekly downloads over a month). The algorithm also does some proper word parsing (so you can actually find &#8220;socket.io&#8221; with the search &#8220;socket io&#8221;) and gives higher weight to things that match the search query in the package name and details.</p>
</blockquote>

<p>The interface has been tweaked as well, so you can easily see how many downloads and starts a project has.</p>

<p>I was sceptical about the quality of the results, but I&#8217;ve recently been researching material for my book so I&#8217;ve been searching npm a lot, and generic searches now seem to get more useful results.</p>

<h3 id='shortestroute'>shortest-route</h3>

<p>Shortest-route (GitHub: <a href='https://github.com/tarun29061990/shortest-route'>tarun29061990 / shortest-route</a>, License: <em>ISC</em>, npm: <a href='https://www.npmjs.org/package/shortest-route'>shortest-route</a>) by Tarun Chaudhary is a <a href='http://en.wikipedia.org/wiki/Travelling_salesman_problem'>travelling salesman problem</a> solver that you can install with npm.</p>

<p>It calculates the distance between cities using the <a href='https://developers.google.com/maps/documentation/distancematrix/'>Google Distance Matrix API</a>, and accepts city descriptions as a pipe-separated list:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>shortestRoute</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;shortest-route&#39;</span><span class='p'>);</span>

<span class='nx'>shortestRoute</span><span class='p'>.</span><span class='nx'>getShortPath</span><span class='p'>(</span><span class='s1'>&#39;A|B|C&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>json</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;data=&#39;</span><span class='o'>+</span><span class='nx'>json</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Although you probably won&#8217;t need this for a project any time soon, I like the fact a hard problem is installable with npm. For more details, <a href='http://activegeek22.wordpress.com/2014/03/18/my-efforts-to-solve-travelling-salesman-problem-through-javascript/'>see Tarun&#8217;s blog post</a>.</p>

<h3 id='prova'>prova</h3>
<div class='image'>
  <img src='/images/posts/prova-djs.gif' />
  <small>Automatically running tests when files change.</small>
</div>
<p>I like <a href='https://github.com/substack/tape'>tape</a> by Substack &#8211; it&#8217;s easy to read and produces flexible test output. Azer also likes it, so he wrote prova (GitHub: <a href='https://github.com/azer/prova'>azer / prova</a>, License: <em>GPL</em>, npm: <a href='https://www.npmjs.org/package/prova'>prova</a>), a Node and browser test runner based on tape and browserify.</p>

<p>It has a built-in web application that uses <a href='https://github.com/substack/watchify'>watchify</a> to automatically run tests when files change. That means you can edit code and see live results in a browser.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/25/slush">Slush: Streaming Scaffolds</a></h2>
      <div class="meta">
        <span class="date">25 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/25/slush/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#gulp">gulp</a>
          
            <a href="/tags.html#scaffolding">scaffolding</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/slushgulp.png' alt='Slush' /></p>

<p>If you&#8217;ve been won over by <a href='http://gulpjs.com/'>Gulp</a>, the streaming build system, then you&#8217;ve probably been wondering about scaffolding.</p>

<p><a href='http://klei.github.io/slush/'>Slush</a> (GitHub: <a href='https://github.com/klei/slush'>klei / slush</a>, npm: <a href='https://www.npmjs.org/package/slush'>slush</a>) takes Gulp&#8217;s streaming build concept and applies it to scaffolds, making it a Gulp-friendly Yeoman competitor.</p>

<p>The author, Joakim Bengtson, notes that it may take a while for the registry of available generators to update, so until then you can use <a href='https://www.npmjs.org/browse/keyword/slushgenerator'>the slushgenerator tag on npm</a>.</p>

<p>Slush itself is fairly simple &#8211; it&#8217;s basically an interface for finding and installing generators. Like Gulp, it&#8217;s based on <a href='https://www.npmjs.org/package/liftoff'>liftoff</a>, the command-line tool authoring module.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/24/obelisk">Isometric Graphics with Obelisk.js</a></h2>
      <div class="meta">
        <span class="date">24 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/24/obelisk/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/obeliskjs.png' alt='' />
  <small>Obelisk.js.</small>
</div>
<p>Obelisk.js (GitHub: <a href='https://github.com/nosir/obelisk.js'>nosir / obelisk.js</a>, License: <em>MIT</em>) by Max Huang is a library for building isometric graphics.</p>

<blockquote>
<p>With the simple and flexible API provided by this engine, you can easily add isometric pixel element like brick, cube, pyramid onto HTML5 canvas. Obelisk.js strictly follows the pixel neat pattern: lines with 1:2 pixel dot arrangement, leading to an angle of 22.6 degrees.</p>
</blockquote>

<p>Max has written some cool examples, like <a href='http://codepen.io/nosir/details/mdiHe'>a GIF to isometric convertor</a> and <a href='http://codepen.io/nosir/details/IxBJn'>text rendering</a>.</p>
<div class='image'>
  <img src='/images/posts/isometric-example.png' alt='' />
  <small>Isometric text example.</small>
</div>
<p>There are also tutorials that introduce the basics, like <a href='https://github.com/nosir/obelisk.js/wiki/Tutorial-Part-1%3A-To-build-the-first-cube'>building cubes</a> and <a href='https://github.com/nosir/obelisk.js/wiki/Tutorial-Part-3%3A-Primitives'>other primitives</a>.</p>

<p>To draw a cube, you need to get an instance of a dimension, colour, and the <code>Cube</code> primitive. The library uses its own wrappers for colours and dimensions to set up the right co-ordinates and shading for the isometric effect:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>point</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>obelisk</span><span class='p'>.</span><span class='nx'>Point</span><span class='p'>(</span><span class='mi'>270</span><span class='p'>,</span> <span class='mi'>120</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>pixelView</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>obelisk</span><span class='p'>.</span><span class='nx'>PixelView</span><span class='p'>(</span><span class='nx'>canvas</span><span class='p'>,</span> <span class='nx'>point</span><span class='p'>);</span>

<span class='kd'>var</span> <span class='nx'>dimension</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>obelisk</span><span class='p'>.</span><span class='nx'>CubeDimension</span><span class='p'>(</span><span class='mi'>120</span><span class='p'>,</span> <span class='mi'>200</span><span class='p'>,</span> <span class='mi'>60</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>color</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>obelisk</span><span class='p'>.</span><span class='nx'>CubeColor</span><span class='p'>().</span><span class='nx'>getByHorizontalColor</span><span class='p'>(</span><span class='nx'>obelisk</span><span class='p'>.</span><span class='nx'>ColorPattern</span><span class='p'>.</span><span class='nx'>GRAY</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>cube</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>obelisk</span><span class='p'>.</span><span class='nx'>Cube</span><span class='p'>(</span><span class='nx'>dimension</span><span class='p'>,</span> <span class='nx'>color</span><span class='p'>);</span>
<span class='nx'>pixelView</span><span class='p'>.</span><span class='nx'>renderObject</span><span class='p'>(</span><span class='nx'>cube</span><span class='p'>);</span>
</code></pre>
</div>
<p>The base class is <code>obelisk.AbstractPrimitive</code>, which <code>Cube</code> inherits from. There&#8217;s a <code>demo/</code> directory with more examples.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/21/liviz">Lithium Labs Visualization Components, The Zen Approach</a></h2>
      <div class="meta">
        <span class="date">21 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/21/liviz/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#d3">d3</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
            <a href="/tags.html#style-guides">style-guides</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='lithium_labs_visualization_components'>Lithium Labs Visualization Components</h3>

<p><img src='/images/posts/sentimentwave.png' alt='Sentiment Wave' /></p>

<p>Recently I&#8217;ve been looking for D3 libraries, and coincidentally Jack Herrington sent in Lithium Labs Visualization Components (GitHub: <a href='https://github.com/lithiumtech/li-visualizations'>lithiumtech / li-visualizations</a>, License: <em>Apache 2.0</em>, Bower: <em>li-visualizations</em>). This is a set of D3 visualisations, including Sentiment Wave, Reticule, and Elegant Waves.</p>

<p>It includes some examples written in CoffeeScript and an example application that you can try out locally with preloaded data.</p>

<h3 id='the_zen_approach'>The Zen Approach</h3>

<p><a href='https://github.com/Nijikokun/the-zen-approach'>The Zen Approach</a> by Nijikokun is a JavaScript style guide. It&#8217;s detailed and instructive, so it may work well as a beginner&#8217;s guide if you&#8217;re looking for documentation that will get existing programmers up to speed with modern JavaScript.</p>

<blockquote>
<h4 id='multiline'>Multiline</h4>

<p>Judgement call, the slowest known method is <code>[].join</code>. If you are building something that requires high performance <strong>do not</strong> use <code>[].join</code>. It&#8217;s not bad, it&#8217;s just not performant. The two fastest methods of multiline are one-line strings (no breaks), and in second using the <code>\</code> character (breaks), with <code>+</code> (concat) trailing slightly behind. <a href='http://jsperf.com/ya-string-concat/10'>I&#8217;ll let hard data back me up on this.</a> My personal preference is to use one line for performance (word-wrap exists people), and then <code>[].join</code> for non-performant things, like variables and such. Should the line require variables <em>and</em> need to be performant I will use <code>+</code> concat notation.</p>
</blockquote>

<p>The author hints that it may become a book, series of talks, or an open source handout &#8211; it&#8217;s currently MIT licensed.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/20/jspm">jspm.io</a></h2>
      <div class="meta">
        <span class="date">20 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/20/jspm/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/jspmio.png' alt='jspm.io' /></p>

<p><a href='http://jspm.io/'>jspm.io</a> (GitHub: <a href='https://github.com/jspm/jspm-cli'>jspm / jspm-cli</a>, License: <em>Apache 2.0</em>, npm: <a href='https://www.npmjs.org/package/jspm'>jspm</a>) by Guy Bedford is a browser package manager that supports the ES6, AMD, and CommonJS module formats. It uses <a href='https://github.com/systemjs/systemjs'>SystemJS</a> to load modules based on the ES6 module loader specification.</p>

<p>Loading modules in browsers looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// a specific module from the latest version of an npm package:</span>
<span class='nx'>System</span><span class='p'>.</span><span class='kr'>import</span><span class='p'>(</span><span class='s1'>&#39;npm:lodash-node/modern/collections&#39;</span><span class='p'>).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>collections</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>collections</span><span class='p'>.</span><span class='nx'>max</span><span class='p'>([</span><span class='mi'>1</span><span class='p'>,</span><span class='mi'>2</span><span class='p'>,</span><span class='mi'>3</span><span class='p'>,</span><span class='mi'>4</span><span class='p'>]);</span> <span class='c1'>// 4</span>
<span class='p'>});</span>

<span class='c1'>// a semver-compatible version of jquery:</span>
<span class='nx'>System</span><span class='p'>.</span><span class='kr'>import</span><span class='p'>(</span><span class='s1'>&#39;github:components/jquery@^2.0.3&#39;</span><span class='p'>).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>)</span> <span class='p'>{</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Notice that it allows modules to be loaded based on semantic version numbers &#8211; you can use it to load modules from a CDN this way, or on the command-line: <code>jspm install npm:lodash-node jquery@^2.0.3</code>.</p>

<p>The design of the API means you can use ES6 modules now, but still get the benefits of a Node-powered command-line tool for quickly downloading and building local bundles.</p>

<p>It has its own <a href='https://github.com/jspm/registry'>registry</a>, so naturally the author is looking for pull requests to get new modules listed. The current registries use SPDY, which has some advantages for a module loading system. Once you&#8217;re ready to roll out projects to production, you can use the <code>jspm</code> command-line tool to inject package configuration and specific versions of the dependencies.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/19/node-roundup">Node Roundup: cipherhub, slate, express-di</a></h2>
      <div class="meta">
        <span class="date">19 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/19/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='cipherhub'>cipherhub</h3>

<p><img src='/images/posts/cipherhub.png' alt='Cipherhub' /></p>

<p>Cipherhub (GitHub: <a href='https://github.com/substack/cipherhub'>substack / cipherhub</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/cipherhub'>cipherhub</a>) by substack is a module for encrypting messages based on GitHub public keys.</p>

<p>The usage is simple: <code>npm install -g cipherhub</code> and then <code>cipherhub USERNAME {OPTIONS} &lt; message.txt</code>.</p>

<p>If there are multiple keys for the user, then you&#8217;ll need to add a specific key with <code>cipherhub --add USERNAME &lt; id_rsa.pub</code>.</p>

<h3 id='slate'>slate</h3>

<p><img src='/images/posts/slate.png' alt='Slate' /></p>

<p><a href='https://github.com/slate/slate'>Slate</a> is a new IRC client by TJ Holowaychuk that uses <a href='https://github.com/rogerwang/node-webkit'>node-webkit</a>. It&#8217;s a native client in a similar spirit to <a href='https://atom.io/'>GitHub&#8217;s Atom</a>.</p>

<p>TJ notes that the project started as a small hack that he intended to expand into a Kickstarter project, but he&#8217;s released it as an open source project instead.</p>

<blockquote>
<p>Conceptually I really just wanted a clean, minimalistic IRC client, completely extensible through plugins. Ideally most of the core is written using such plugins. The entire thing should be themable, and the default theme should be programmer-friendly, aka get all the clutter out of my way, I just want to see chat logs.</p>
</blockquote>

<p>I&#8217;m making a collection of Node-powered native apps, so send those in if you&#8217;re working on them.</p>

<h3 id='expressdi'>express-di</h3>

<p>If you&#8217;ve got addicted to dependency injection through AngularJS, then you might be interested in <a href='http://luin.github.io/express-di/'>Express-di</a> (GitHub: <a href='https://github.com/luin/express-di'>luin / express-di</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/express-di'>express-di</a>) by Zihua Li:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>express</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;express&#39;</span><span class='p'>);</span>
<span class='c1'>// Require express-di</span>
<span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;express-di&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>express</span><span class='p'>();</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>factory</span><span class='p'>(</span><span class='s1'>&#39;people1&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>next</span><span class='p'>(</span><span class='kc'>null</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;Bob&quot;</span> <span class='p'>});</span>
<span class='p'>});</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>factory</span><span class='p'>(</span><span class='s1'>&#39;people2&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>req</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>,</span> <span class='nx'>next</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>next</span><span class='p'>(</span><span class='kc'>null</span><span class='p'>,</span> <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;Jeff&quot;</span> <span class='p'>});</span>
<span class='p'>});</span>

<span class='nx'>app</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;/&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>people1</span><span class='p'>,</span> <span class='nx'>people2</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>res</span><span class='p'>.</span><span class='nx'>json</span><span class='p'>({</span>
    <span class='nx'>people1</span><span class='o'>:</span> <span class='nx'>people1</span><span class='p'>,</span>
    <span class='nx'>people2</span><span class='o'>:</span> <span class='nx'>people2</span>
  <span class='p'>});</span>
<span class='p'>});</span>

<span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;http&#39;</span><span class='p'>).</span><span class='nx'>createServer</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>).</span><span class='nx'>listen</span><span class='p'>(</span><span class='mi'>3008</span><span class='p'>);</span>
</code></pre>
</div>
<p>The <code>app.factory</code> method is used to define a dependency, and <code>req</code>, <code>res</code>, and <code>next</code> are handled as default dependencies.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/18/jscrambler">JScrambler</a></h2>
      <div class="meta">
        <span class="date">18 Mar 2014</span>
        | <span class="author">By Ricardo Martins</span>
        | <span class="comments"><a href="/2014/03/18/jscrambler/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#sponsored-content">sponsored-content</a>
          
            <a href="/tags.html#obfuscation">obfuscation</a>
          
            <a href="/tags.html#services">services</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='sponsored-content'>
  <p><a href='/sponsored-content.html' class='label'>Sponsored Content</a> This post is about a commercial product that we think will appeal to DailyJS readers.</p>
</div><div class='image'>
  <img src='/images/posts/jscrambler.png' />
  <small>JScrambler.</small>
</div>
<p>Well-known libraries such as Google Closure, YUI compressor or UglifyJS minify, compress and optimize JavaScript. The techniques they use can be collectively referred to as <em>JavaScript optimization</em>. They are great at improving overall page load speed, but fall short if you are interested in protecting your source code from code theft and reuse, tampering, or reverse engineering.</p>

<p>Despite that, optimized code is often confused with obfuscated code. For example, compressed code is completely encoded, which at first glance may seem to be highly obfuscated, but a simple run is often enough to retrieve something very similar to the original code. In short, these tools do a good job optimizing your code, but they don&#8217;t protect it. (fiddle: <a href='http://jsfiddle.net/JScrambler/GaeLD/'>demo</a>, <a href='http://jsfiddle.net/JScrambler/Dtna2/'>Google Compiler optimized demo</a> and <a href='http://jsfiddle.net/JScrambler/k5vLc/'>beautified optimized demo</a>).</p>

<p><a href='https://jscrambler.com/'>JScrambler</a> goes beyond these libraries by offering advanced obfuscation (<a href='http://jsfiddle.net/JScrambler/Q6QMg/'>JScrambler obfuscated version</a>) that can protect your code. It leverages obfuscation by inserting a number of different code traps to control execution and to enforce licensing. For example, you can lock the code to a list of predefined domains. If someone tries to execute the code elsewhere, the code breaks.</p>

<p>JScrambler just released a new version (3.5) that takes protection even more seriously. It introduces a completely new technique that provides JavaScript files with <em>self-defending</em> capabilities by installing a combination of anti-tampering and anti-debugging. If you try to change a single character, the code will react by breaking down intentionally (try it on <a href='http://jsfiddle.net/JScrambler/5ujp3/'>JScrambler self-defending demo</a>). It also adds new code traps to restrict execution to a certain Browser or OS, <em>code blocks</em> to give the developer the ability to enable/disable individual source code transformations in certain parts of the code.</p>

<p>There are lots of reasons why you may want to protect your code. People might try to steal your code to reuse it, perhaps to build a similar product, or to replicate a similar user experience. You may have secret algorithms or keys hidden in the code that may be easily recovered by inspecting your code. If you are selling your app, you may be worried about piracy. JavaScript can be easily copied and executed, without your authorization. And last but not least, there are all sorts of security risks, like people figuring out ways to interfere with your code, to commit fraud, or to steal data &#8211; from you, or from your users. JScrambler goes along way to combating these problems, despite the fact that there are no bulletproof solutions.</p>

<p>As expected, these techniques have a cost in file size and execution, but because JScrambler also has optimization features, this extra cost can be controlled &#8211; as proven by running the two protected demos. You don&#8217;t have to give up performance to get protection.</p>

<p>JScrambler&#8217;s web interface is simple and easy to use. In five minutes you can get your application protected. You upload the source, click a button, then wait a few seconds and download the results. JScrambler provides templates that were designed to work out of the box in most cases. It includes all sorts of JavaScript-based applications, including HTML5 Canvas, Node.js, Windows 8 WinJS Apps, etc. If you want to automate your builds, an API is also provided, and few ready to use clients, including a <a href='https://github.com/auditmark/grunt-jscrambler'>Node grunt task</a>.</p>

<p>For more examples, see the <a href='https://jscrambler.com/en/examples'>full set on jscrambler.com</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/17/picture-interfake">picturePolyfill, Interfake</a></h2>
      <div class="meta">
        <span class="date">17 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/17/picture-interfake/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#json">json</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#html5">html5</a>
          
            <a href="/tags.html#polyfills">polyfills</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='picturepolyfill'>picturePolyfill</h3>

<p><a href='http://verlok.github.io/picturePolyfill/'>picturePolyfill</a> (GitHub: <a href='https://github.com/verlok/picturePolyfill'>verlok / picturePolyfill</a>, License: <em>MIT/GPL2</em>) by Andrea Verlicchi allows you to use <code>picture</code> elements with <code>srcset</code> support so you can include high-DPI images. Here&#8217;s an example with media queries:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;picture</span> <span class='na'>data-alt=</span><span class='s'>&quot;A beautiful responsive image&quot;</span> <span class='na'>data-default-src=</span><span class='s'>&quot;img/1440x1440.gif&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;source</span> <span class='na'>src=</span><span class='s'>&quot;img/480x480.gif&quot;</span><span class='nt'>/&gt;</span>
  <span class='nt'>&lt;source</span> <span class='na'>src=</span><span class='s'>&quot;img/768x768.gif&quot;</span>   <span class='na'>media=</span><span class='s'>&quot;(min-width: 481px)&quot;</span><span class='nt'>/&gt;</span>
  <span class='nt'>&lt;source</span> <span class='na'>src=</span><span class='s'>&quot;img/1440x1440.gif&quot;</span> <span class='na'>media=</span><span class='s'>&quot;(min-width: 1025px)&quot;</span><span class='nt'>/&gt;</span>
  <span class='nt'>&lt;source</span> <span class='na'>src=</span><span class='s'>&quot;img/1920x1920.gif&quot;</span> <span class='na'>media=</span><span class='s'>&quot;(min-width: 1441px)&quot;</span><span class='nt'>/&gt;</span>
  <span class='nt'>&lt;noscript&gt;</span>
    <span class='nt'>&lt;img</span> <span class='na'>src=</span><span class='s'>&quot;img/768x768.gif&quot;</span> <span class='na'>alt=</span><span class='s'>&quot;A beautiful responsive image&quot;</span><span class='nt'>/&gt;</span>
  <span class='nt'>&lt;/noscript&gt;</span>
<span class='nt'>&lt;/picture&gt;</span>
</code></pre>
</div>
<p>It doesn&#8217;t make multiple HTTP requests, so only the required images are fetched. It also takes into account browser event handling, so it won&#8217;t run while the browser is being resized.</p>

<h3 id='interfake'>Interfake</h3>

<p>Interfake (GitHub: <a href='https://github.com/basicallydan/interfake'>basicallydan / interfake</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/interfake'>interfake</a>) by Daniel Hough is a module designed for client-side developers that makes it easy to create JSON APIs. You can create APIs using the command-line interface by making JSON files that define endpoints:</p>
<div class='highlight'><pre><code class='javascript'><span class='p'>[{</span>
  <span class='s2'>&quot;request&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;url&quot;</span><span class='o'>:</span> <span class='s2'>&quot;/whattimeisit&quot;</span><span class='p'>,</span>
    <span class='s2'>&quot;method&quot;</span><span class='o'>:</span> <span class='s2'>&quot;get&quot;</span>
  <span class='p'>},</span>
  <span class='s2'>&quot;response&quot;</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='s2'>&quot;code&quot;</span><span class='o'>:</span> <span class='mi'>200</span><span class='p'>,</span>
    <span class='s2'>&quot;body&quot;</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s2'>&quot;theTime&quot;</span><span class='o'>:</span> <span class='s2'>&quot;Adventure Time!&quot;</span><span class='p'>,</span>
      <span class='s2'>&quot;starring&quot;</span><span class='o'>:</span> <span class='p'>[</span>
        <span class='s2'>&quot;Finn&quot;</span><span class='p'>,</span>
        <span class='s2'>&quot;Jake&quot;</span>
      <span class='p'>],</span>
      <span class='s2'>&quot;location&quot;</span><span class='o'>:</span> <span class='s2'>&quot;ooo&quot;</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>}]</span>
</code></pre>
</div>
<p>It supports JSONP, and you can use it programmatically in Node. The documentation has some use-case ideas, like using it for a test API for a mobile application, automated testing, and static APIs.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/14/large-terrain">Rendering Large Terrain in WebGL</a></h2>
      <div class="meta">
        <span class="date">14 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/14/large-terrain/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#graphics">graphics</a>
          
        </span>
      </div>
      <div class="preview">
        <p><a href='http://www.pheelicks.com/2014/03/rendering-large-terrains/'>Rendering large terrains</a> by Felix Palmer is a tutorial that demonstrates how to render terrain with a variable level of detail. There&#8217;s a <a href='http://felixpalmer.github.io/lod-terrain/'>demo</a> and the <a href='https://github.com/felixpalmer/lod-terrain'>source is on GitHub</a>. It&#8217;s built with three.js, and is based on a <a href='http://www.vertexasylum.com/downloads/cdlod/cdlod_latest.pdf'>paper on level-of-detail distribution</a>.</p>

<p><img src='/images/posts/terrain-lod.png' alt='Terrain' /></p>

<blockquote>
<p>A simple way to do better is to split our plane into tiles of differing sizes, but of constant vertex count. So for example, each tile contains 64×64 vertices, but sometimes these vertices are stretched over an area corresponding to a large distant area, while for nearby areas, the tiles are smaller.</p>
</blockquote>

<p>The code uses <a href='http://en.wikipedia.org/wiki/OpenGL_Shading_Language'>GLSL</a>, but the main <a href='https://github.com/felixpalmer/lod-terrain/tree/master/js/app'>app/ JavaScript code</a> is all neatly organised with RequireJS, so it&#8217;s surprisingly easy to navigate and understand. The tutorial blog post also makes some of these difficult ideas more accessible, so I thoroughly recommend checking it out.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/13/multiline">Multiline strings in JavaScript</a></h2>
      <div class="meta">
        <span class="date">13 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/13/multiline/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#es6">es6</a>
          
            <a href="/tags.html#hacks">hacks</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Multiline (GitHub: <a href='https://github.com/sindresorhus/multiline'>sindresorhus / multiline</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/multiline'>multiline</a>) by Sindre Sorhus is a clever hack that allows you to write multiline strings by using a callback to wrap around a comment:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>str</span> <span class='o'>=</span> <span class='nx'>multiline</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(){</span><span class='cm'>/*</span>
<span class='cm'>&lt;!doctype html&gt;</span>
<span class='cm'>&lt;html&gt;</span>
<span class='cm'>    &lt;body&gt;</span>
<span class='cm'>        &lt;h1&gt;❤ unicorns&lt;/h1&gt;</span>
<span class='cm'>    &lt;/body&gt;</span>
<span class='cm'>&lt;/html&gt;</span>
<span class='cm'>*/</span><span class='p'>});</span>
</code></pre>
</div>
<p>This works by calling <code>.toString()</code> on the callback, then running a regular expression to extract the comment: <code>/\/\*!?(?:\@preserve)?\s*(?:\r\n|\n)([\s\S]*?)(?:\r\n|\n)\s*\*\//</code>.</p>

<p>Although this is a hack, I hadn&#8217;t thought about it before. Sindre notes that this has a performance impact, but that sometimes it might be worth writing things this way for the added clarity it brings.</p>

<p>EcmaScript 6 will introduce <a href='http://tc39wiki.calculist.org/es6/template-strings/'>template strings</a>, which can be used for multiline strings and interpolation with <code>${}</code>:</p>

<blockquote>
<p>A template string uses back ticks instead of double quotes or single quotes. The template string can contain place holders, which use the <code>${ }</code> syntax. The value of the expressions in the place holders as well as the text between them gets passed to a function. This function is determined on the expression before the template string. If there is no expression before the template string the default template string is used.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/12/node-roundup">Node Roundup: 0.11.12, Metalsmith, Promises and Error Handling</a></h2>
      <div class="meta">
        <span class="date">12 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/12/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#promises">promises</a>
          
            <a href="/tags.html#generators">generators</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
  <strong>Job ad</strong>: <a href='https://iridize.com/'>Iridize</a> is looking for a <a href='http://dailyjs.com/iridize.html'>lead frontend developer</a>.
</div>
<h3 id='node_01112'>Node 0.11.12</h3>

<p><a href='http://blog.nodejs.org/2014/03/12/node-v0-11-12-unstable/'>Node 0.11.12</a> is out. It updates uv, some of Node&#8217;s C++ code in <code>src/</code>, and several core modules including cluster and net.</p>

<p>One commit that caught my attention was <a href='https://github.com/joyent/node/pull/7281'>buffer: allow toString to accept Infinity for end</a> by Brian White. He said he sometimes sets <code>INSPECT_MAX_BYTES</code> to <code>Infinity</code>, allowing the buffer&#8217;s contents to be printed for debugging purposes. I think it&#8217;s interesting that this works, even though it&#8217;s not something I&#8217;d usually want to do.</p>

<h3 id='metalsmith'>Metalsmith</h3>

<p><a href='http://ianstormtaylor.com/'>Ian Storm Taylor</a> sent in <a href='http://www.metalsmith.io/'>Metalsmith</a>, a really cool static site generator by <a href='https://segment.io/'>Segment.io</a>. Why is it cool? Well, they had me at the entirely plugin-based API that uses chainable calls:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Metalsmith</span><span class='p'>(</span><span class='nx'>__dirname</span><span class='p'>)</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>drafts</span><span class='p'>())</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>markdown</span><span class='p'>())</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>permalinks</span><span class='p'>(</span><span class='s1'>&#39;posts/:title&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='nx'>templates</span><span class='p'>(</span><span class='s1'>&#39;handlebars&#39;</span><span class='p'>))</span>
  <span class='p'>.</span><span class='nx'>build</span><span class='p'>();</span>
</code></pre>
</div>
<h3 id='promises_and_error_handling'>Promises and Error Handling</h3>

<p><a href='http://making.change.org/post/69613524472/promises-and-error-handling'>Promises and Error Handling</a> by Jon Merrifield is all about error handling with promises in Node. It has guidelines for using promises safely, including the idea that you should reject rather than <code>throw</code> and how to terminate chains early and safely.</p>

<blockquote>
<p>Changing the <code>then</code> in the above code to <code>done</code> means that there will be no outer promise returned from this, and the error will result in an asynchronous uncaught exception, which will bring down the Node process. In theory this makes it unlikely that any such problem would make it into production, given how loudly and clearly it would fail during development and testing.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/11/gremlins-customsync">Gremlins.js, Backbone.CustomSync</a></h2>
      <div class="meta">
        <span class="date">11 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/11/gremlins-customsync/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#backbone">backbone</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='gremlinsjs'>Gremlins.js</h3>

<p><img src='/images/posts/monkeytesting.gif' alt='Gremlins.js' /></p>

<p>Gremlins.js (GitHub: <a href='https://github.com/marmelab/gremlins.js'>marmelab / gremlins.js</a>, License: <em>MIT</em>) from marmelab is a monkey testing library. According to the authors, it can be used to unleash a horde of undisciplined gremlins at a web application.</p>

<p>If that sounds weird, there&#8217;s a handy gif in the readme that illustrates how it works: it basically throws events at your HTML, and is able to report back when something goes wrong:</p>

<blockquote>
<p>Mogwais only monitor the activity of the application and record it on the logger. For instance, the &#8220;fps&#8221; mogwai monitors the number of frame per second, every 500ms. Mogwais also report when gremlins break the application. For instance, if the number of frames per seconds drops below 10, the fps mogwai will log an error.</p>
</blockquote>

<p>There are various kinds of gremlins that try to uncover issues. This includes a form filler, clicker, and scroller. You can manually create hordes using a chainable API:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>gremlins</span><span class='p'>.</span><span class='nx'>createHorde</span><span class='p'>()</span>
  <span class='p'>.</span><span class='nx'>gremlin</span><span class='p'>(</span><span class='nx'>gremlins</span><span class='p'>.</span><span class='nx'>species</span><span class='p'>.</span><span class='nx'>formFiller</span><span class='p'>())</span>
  <span class='p'>.</span><span class='nx'>gremlin</span><span class='p'>(</span><span class='nx'>gremlins</span><span class='p'>.</span><span class='nx'>species</span><span class='p'>.</span><span class='nx'>clicker</span><span class='p'>().</span><span class='nx'>clickTypes</span><span class='p'>([</span><span class='s1'>&#39;click&#39;</span><span class='p'>]))</span>
  <span class='p'>.</span><span class='nx'>gremlin</span><span class='p'>(</span><span class='nx'>gremlins</span><span class='p'>.</span><span class='nx'>species</span><span class='p'>.</span><span class='nx'>scroller</span><span class='p'>())</span>
  <span class='p'>.</span><span class='nx'>gremlin</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nb'>window</span><span class='p'>.</span><span class='nx'>$</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{};</span>
  <span class='p'>})</span>
  <span class='p'>.</span><span class='nx'>unleash</span><span class='p'>();</span>
</code></pre>
</div>
<h3 id='backbonecustomsync'>Backbone.CustomSync</h3>

<p>Garrett Murphey sent in <a href='http://gmurphey.com/2014/03/09/backbone-custom-sync.html#.Ux9J7ud_tbU'>Backbone.CustomSync</a> (GitHub: <a href='https://github.com/gmurphey/backbone.customsync'>gmurphey / backbone.customsync</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/backbone.customsync'>backbone.customsync</a>), a more pragmatic solution for defining <code>Backbone.sync</code> implementations that allows you to avoid giant <code>switch</code> statements:</p>

<blockquote>
<p>To use the extension, all you have to do is use <code>Backbone.CustomSync.Model</code> or <code>Backbone.CustomSync.Collection</code> in place of <code>Backbone.Model</code> and <code>Backbone.Collection</code>, respectively. If you don&#8217;t define one of these sync methods - <code>createSync</code>, for example - and Backbone attempts to save a new model, the <code>options.error</code> callback will be invoked automatically. Backbone.CustomSync will only perform the operations you define.</p>
</blockquote>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/10/components-controls">Introducing Web Components to Control Authors</a></h2>
      <div class="meta">
        <span class="date">10 Mar 2014</span>
        | <span class="author">By Matthew Phillips</span>
        | <span class="comments"><a href="/2014/03/10/components-controls/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#components">components</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>This is a guest post by Matthew Phillips, from <a href='http://bitovi.com/'>Bitovi</a>.  You can find him on Twitter: <a href='http://twitter.com/matthewcp'>@matthewcp</a> and GitHub: <a href='https://github.com/matthewp'>matthewp</a>.</div>
<p>At this point unless you&#8217;ve been living under a rock you&#8217;ve likely heard at least a little about web components, a collection of emerging standards created with the intent of making web development more declarative. Among other things, web components allow for custom elements, an easier way to encapsulate your widgets. If you&#8217;ve been developing with MVC frameworks there is a learning curve to using components, but once things start to click you&#8217;ll want to use them everywhere in your application. Who hasn&#8217;t wanted an easy way to insert a random cat picture?</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;randomcat</span> <span class='na'>width=</span><span class='s'>&quot;200&quot;</span> <span class='na'>height=</span><span class='s'>&quot;300&quot;</span><span class='nt'>&gt;&lt;/randomcat&gt;</span>
</code></pre>
</div><img src='http://placekitten.com/g/200/300' />
<p>Creating widgets that are well encapsulated is something we do on a daily basis on as JavaScript engineers. In this article I&#8217;ll explain where traditional control-based MVC has fallen short of that goal and how web components can resurrect the ease of development from the web&#8217;s early roots.</p>

<h2 id='mvcs_brick_wall'>MVC&#8217;s Brick Wall</h2>

<p>Traditional MVC frameworks encourage you to organize your view code by creating constructor functions called Controls or Views. If you&#8217;ve developed in this way you probably recognize some of the problems you encounter with this approach.</p>

<h3 id='tracking_down_instantiation'>Tracking Down Instantiation</h3>

<p>Since Controls are implemented as constructor functions that operate on a template, any sub view must be manually instantiated within one of the control&#8217;s lifecycle methods, usually either init or render. Consider the following in Backbone:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Widget</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>subView</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>InnerWidget</span><span class='p'>({</span> <span class='nx'>el</span><span class='o'>:</span> <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#inner&#39;</span><span class='p'>)</span> <span class='p'>});</span>
  <span class='p'>},</span>

  <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>());</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>subView</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>That&#8217;s a lot of code that will become more complex as you add additional subviews or conditions for rendering.</p>

<h3 id='lack_of_external_api'>(Lack Of) External API</h3>

<p>While creating a widget, its common to create an external API to interact with. With traditional MVC controls, there is no standard way to do this, so it ends up being ad-hoc at the whim of the author. For example, here&#8217;s an accordion containing Panel subviews:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>PanelView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#panel-tmpl&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>()),</span>

  <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>()));</span>
    <span class='k'>return</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='kd'>var</span> <span class='nx'>AccordionView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#acc-tmpl&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>()),</span>

  <span class='nx'>addPanel</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>panel</span> <span class='k'>instanceof</span> <span class='nx'>PanelView</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;.panels&#39;</span><span class='p'>).</span><span class='nx'>add</span><span class='p'>(</span><span class='nx'>panel</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>());</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>And then to use this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>panel</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>PanelView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>data</span> <span class='p'>});</span>
<span class='nx'>accordion</span><span class='p'>.</span><span class='nx'>addPanel</span><span class='p'>(</span><span class='nx'>panel</span><span class='p'>);</span>
</code></pre>
</div>
<p>You&#8217;ll want to abstract some of these pain points to create your own &#8220;standard API&#8221; for controls. You&#8217;ll probably create some base classes with stub functions for common tasks. Pretty soon you&#8217;ve created your own mini-framework. We&#8217;re learned to put up with these little things and they don&#8217;t bother us day-to-day, but when you discover a better way it will change the way you architect your application.</p>

<h3 id='hidden_model'>Hidden Model</h3>

<p>Similarly, widgets commonly need to interact with external model data. Most MVC frameworks provide some way to pass data into the control so a lot of people have established a pattern of passing in a &#8220;model&#8221; property to fill this hole. Having a clearer way of setting the model for a control opens a lot of doors in terms of composability. With the traditional control pattern you usually wind up using an adhoc ViewModel created with some properties passed in to the constructor and some created as part of the control&#8217;s own logic.</p>

<h2 id='enter_web_components'>Enter Web Components</h2>

<p>Web Components are a W3C spec for an HTML and JavaScript construct that, at its heart, is a way to define custom HTML elements. The spec includes:</p>

<ul>
<li>Native templates (<a href='https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html'>spec</a>)</li>

<li>A way to load them (<a href='http://w3c.github.io/webcomponents/spec/imports/'>spec</a>)</li>

<li>A method to define custom elements and extend existing ones (<a href='http://w3c.github.io/webcomponents/spec/custom/'>spec</a>)</li>

<li>Hooks to run functions when an element is inserted in the page.</li>
</ul>

<p>A custom element can be as complex as the main router for single page application, a simple widget to display markdown inline:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;x</span><span class='na'>-markdown</span> <span class='na'>table-of-contents-depth=</span><span class='s'>&quot;2&quot;</span><span class='nt'>&gt;</span>
# Heading

## Sub-heading

* List item
   - Sub list item
<span class='err'>&lt;</span>/x-markdown&gt;
</code></pre>
</div>
<p>or as simple as a way to embed a YouTube video.</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;rick</span><span class='na'>-roll</span><span class='nt'>&gt;</span><span class='err'>&lt;</span>/rick-roll&gt;
</code></pre>
</div>
<p>Web Components provide an alternate way to define traditional MVC based controls, with several key advantages.</p>

<h3 id='maximal_encapsulation'>Maximal Encapsulation</h3>

<p>The power of web components is their ability to easily encapsulate the details of a widget while still maintaining the ability to compose them together, thanks to the legacy of HTML&#8217;s document-oriented roots. Because it is layout-based, web components can be neatly organized in templates, solving the instantiation problem that a control-based workflow suffers from. Applications can become more template driven rather than instantiating controls with complex event handler logic. Let&#8217;s say you were A/B testing a feature, you could have your template (in Mustache) look something like this:</p>
<div class='highlight'><pre><code class='html'>{{if randomlyPicked}}
  <span class='nt'>&lt;rick</span><span class='na'>-roll</span><span class='nt'>&gt;</span><span class='err'>&lt;</span>/rick-roll&gt;
{{/if}}
</code></pre>
</div>
<h3 id='obvious_api_layer'>Obvious API layer</h3>

<p>The API layer for web components is easy to understand. Data is passed to components through HTML attributes.</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;x</span><span class='na'>-injector</span> <span class='na'>href=</span><span class='s'>&quot;/some-page.html&quot;</span> <span class='nt'>/&gt;</span>
</code></pre>
</div>
<p>Layout is passed through the element&#8217;s inner content, as shown in the markdown example above.</p>

<h3 id='models_and_templates'>Models and Templates</h3>

<p>The web components spec includes templates for the first time in the web&#8217;s history. This means no more script tag or hidden div hacks to include templates on a page. Templates allow you to create fragments of markup to be used by your components later. They are parsed, but not rendered until inserted into the page.</p>

<p>Models can be bound to the templates, and, through the power of <code>Object.observe</code> changes in the model, would result in relevant parts of the template being automatically rendered. If you&#8217;ve used an MVC framework with template binding and observable models you&#8217;re probably already familiar with this.</p>

<p>Models are passed into components the same way as all types of data, through attributes.</p>

<p>With CanJS&#8217; <code>can.Component</code> you can pass the name of your model through the attributes and get the live-binding today, without waiting for standardization to flesh out that part of the spec. This brings me to my last point…</p>

<h3 id='using_web_components_today'>Using Web Components today</h3>

<p>Despite this being early days for Web Components, there are already a few options if you are interested in getting started. Polymer and X-Tags are two projects started by Google and Mozilla engineers working on the Web Components spec. These projects are bleeding-edge and break compatibility often. Additionally they don&#8217;t attempt to extend the spec with functionality that won&#8217;t eventually end up in it. What they do offer you is the ability to start using components the way they will be used when browsers have fully implemented the specifications. can.Component, on the other hand, is an early implementation of Web Components that provides additional functionality that is beyond the scope of custom elements.</p>

<p>can.Component adds two-way binding between a component&#8217;s model (which is not yet part of the web component spec) and its form elements. Additionally it adds declarative binding to a component&#8217;s templates through it&#8217;s scope object. Scope is an object that is used to render the template, but with the addition of declarative binding it does much more than that. The scope can be used to update the state of a component and respond to events. Here&#8217;s a typical example of can.Component that shows off all of these features:</p>

<p>Usage:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;color</span><span class='na'>-selection</span><span class='nt'>&gt;</span><span class='err'>&lt;</span>/color-selection&gt;
</code></pre>
</div>
<p>Implementation:</p>
<div class='highlight'><pre><code class='javascript'><span class='o'>&lt;</span><span class='nx'>script</span> <span class='nx'>id</span><span class='o'>=</span><span class='s2'>&quot;color-section-template&quot;</span> <span class='nx'>type</span><span class='o'>=</span><span class='s2'>&quot;text/mustache&quot;</span><span class='o'>&gt;</span>
  <span class='o'>&lt;</span><span class='nx'>form</span><span class='o'>&gt;</span>
    <span class='o'>&lt;</span><span class='nx'>span</span> <span class='kr'>class</span><span class='o'>=</span><span class='s2'>&quot;validations&quot;</span><span class='o'>&gt;</span><span class='p'>{{</span><span class='nx'>validationMessage</span><span class='p'>}}</span><span class='o'>&lt;</span><span class='err'>/span&gt;</span>
    <span class='o'>&lt;</span><span class='nx'>input</span> <span class='nx'>name</span><span class='o'>=</span><span class='s2'>&quot;name&quot;</span> <span class='nx'>type</span><span class='o'>=</span><span class='s2'>&quot;text&quot;</span> <span class='nx'>can</span><span class='o'>-</span><span class='nx'>value</span><span class='o'>=</span><span class='s2'>&quot;color&quot;</span> <span class='nx'>can</span><span class='o'>-</span><span class='nx'>change</span><span class='o'>=</span><span class='s2'>&quot;validate&quot;</span><span class='o'>&gt;</span>
  <span class='o'>&lt;</span><span class='err'>/form&gt;</span>
<span class='o'>&lt;</span><span class='err'>/script&gt;</span>
</code></pre>
</div>
<p>This is the component&#8217;s JavaScript:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>can</span><span class='p'>.</span><span class='nx'>Component</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='nx'>tag</span><span class='o'>:</span> <span class='s2'>&quot;color-selection&quot;</span><span class='p'>,</span>
  <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>can</span><span class='p'>.</span><span class='nx'>view</span><span class='p'>(</span><span class='s2'>&quot;#color-selection-template&quot;</span><span class='p'>),</span>
  <span class='nx'>scope</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>color</span><span class='o'>:</span> <span class='s2'>&quot;blue&quot;</span><span class='p'>,</span>
    <span class='nx'>validate</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='nx'>isAColor</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>attr</span><span class='p'>(</span><span class='s2'>&quot;color&quot;</span><span class='p'>)))</span> <span class='p'>{</span>
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>attr</span><span class='p'>(</span><span class='s2'>&quot;validationMessage&quot;</span><span class='p'>,</span> <span class='s2'>&quot;Not a valid color&quot;</span><span class='p'>);</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>removeAttr</span><span class='p'>(</span><span class='s2'>&quot;validationMessage&quot;</span><span class='p'>);</span>
      <span class='p'>}</span>
    <span class='p'>}</span>
  <span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='we_still_need_libraries'>We Still Need Libraries</h3>

<p>I hope I&#8217;ve demonstrated the way in which web components breaks some of the boundaries we&#8217;ve hit with traditional control-based MVC. At the same time the specification is intentionally low level and leaves room for libraries to improve upon the experience, as can.Component is doing today.</p>

<p>As a consequence of Web Component&#8217;s inherent declarative nature your code will become more condensed, with far less boilerplate. We&#8217;re truly approaching a paradigm where separation of concerns is being achieved. But you can&#8217;t appreciate the way web components changes the way you write applications until you try it yourself. So I encourage you to choose a library and start on your first widget today.</p>

<h2 id='further_required_reading'>Further (required) Reading</h2>

<ul>
<li><a href='http://html5-demos.appspot.com/static/webcomponents/index.html'>Presentation by Eric Bidelman</a></li>

<li><a href='http://ryanseddon.github.io/web-components/'>Presentation by Ryan Seddon</a></li>

<li><a href='http://www.w3.org/TR/components-intro/'>Introduction to Web Components</a></li>
</ul>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/07/npm-stat">npm-stat</a></h2>
      <div class="meta">
        <span class="date">07 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/07/npm-stat/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Recently <a href='http://blog.npmjs.org/post/78719826768/download-counts-are-back'>npm added back download stats</a>, which means you can see how many downloads a package has had. The announcement includes the note that Mikito Takada submitted a <a href='https://github.com/npm/npm-www/pull/466'>pull request</a> for the D3 graphs &#8211; it&#8217;s things like this that make me glad npm&#8217;s website is open source.</p>

<p><img src='/images/posts/npm-stat.png' alt='npm-stat' /></p>

<p>There&#8217;s a <a href='https://github.com/npm/download-counts'>public API</a> for the statistics, which is written using <a href='http://spumko.github.io/'>hapi</a>.</p>

<p>Paul Vorbach sent in <a href='http://npm-stat.com/'>npm-stat</a> (GitHub: <a href='https://github.com/pvorb/npm-stat.com'>pvorb / npm-stat.com</a>, License: <em>MIT</em>), which generates another set of views on npm&#8217;s stats. It displays downloads per day, week, month, and year, and there are graphs for authors as well. Pages for <em>certain authors</em> that I won&#8217;t link to directly naturally take a while to generate, but it&#8217;s generally fairly responsive.</p>

<p>I&#8217;m interested in seeing what people build with npm-www and the stats public API, but so far it seems like they&#8217;ve made a big improvement over the older versions.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2014/03/06/book-review-quality-code">Book Review: Quality Code: Software Testing Principles, Practices, and Patterns</a></h2>
      <div class="meta">
        <span class="date">06 Mar 2014</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2014/03/06/book-review-quality-code/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#books">books</a>
          
            <a href="/tags.html#testing">testing</a>
          
            <a href="/tags.html#jquery">jquery</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/qualitycode.png' alt='Quality Code' /></p>

<p><a href='http://www.informit.com/store/quality-code-software-testing-principles-practices-9780321832986'>Quality Code: Software Testing Principles, Practices, and Patterns</a> ($44.99, eBook: $35.99, Addison-Wesley Professional) by Stephen Vance is a book about testing. It uses examples from several languages &#8211; Java is the most prominent, but there are JavaScript examples as well. The most significant part for DailyJS readers is a long practical exercise that involves testing an open source jQuery plugin, but there is a lot of general software design advice that you will find useful.</p>

<p>The book introduces automated testing, but also discusses how tests can be managed in real teams. One of the main points here is how the same best practices that you use for production code should go into automated tests &#8211; if you use certain object oriented patterns, small methods, SOLID principles, and so on, then these techniques should be used for test code as well.</p>

<p>This leads into the practice of writing maintainable test code: the relationship between engineering and craftsmanship.</p>

<blockquote>
<p>Civil engineers may supervise and inspect the building of bridges or buildings, but they spend little time driving rivets, pouring concrete, or stringing suspension cables. Probably the closest to software engineers&#8217; total immersion might be the handful of test pilots who are also aeronautical engineers, in that they participate in design, construction, inspection, and verification of the craft they fly.</p>
</blockquote>

<p>There are JavaScript examples for code coverage issues, dynamic dispatch, scope, asynchronous computation and promises, and Jasmine:</p>

<blockquote>
<p>Dynamic languages like JavaScript are less tied to an explicit interface, although usage still defines a de-facto interface. Jasmine&#8217;s <code>spyOn</code> functionality provides the full range of test-double variations by substituting a test-instrumented recording object for the function being replaced and letting you define how it behaves when invoked.</p>
</blockquote>

<p>What I learned most from, though, was the higher-level advice, like &#8220;test the error paths&#8221;:</p>

<blockquote>
<p>Many people stop before testing the error handling of their software. Unfortunately, much of the perception of software quality is forged not by whether the software fails, because it eventually will, but by how it handles those failures.</p>
</blockquote>

<p>And the following point reinforced the way I work, mixing &#8220;spec&#8221;-like tests with integration and unit tests:</p>

<blockquote>
<p>I prefer to test each defect, at least at the unit level.</p>
</blockquote>

<p>Stephen sometimes talks about how most of our programming languages and tools aren&#8217;t designed specifically to support testing. One idea that runs through the book is about how to design code to be testable, and writing decoupled tests is part of this. Balancing encapsulation with access to internal state for testing is something that I think most of us struggle with.</p>

<blockquote>
<p>As we have seen, verification of those internal representations sometimes occurs through interface access. Where null safety is either guaranteed by the representation or ignored by the test, we see code like <code>A.getB().getC().getD()</code> Despite the blatant violation of the Principle of Least Knowledge, we frequently find code like this-of course we do not write it ourselves!— in tests and production.</p>
</blockquote>

<p>Chapter 12, &#8220;Use Existing Seams&#8221;, left an impression on me: it&#8217;s about the idea of finding places in code that allows you to take control of that code so you can bring it under test. Since reading that chapter I seem to have found more convenient places to grapple Express applications and test them more thoroughly.</p>

<p>If you write tests, but find they become unmaintainable over time, then this book may guide you to create less entangled tests. It mixes material for dynamic languages like JavaScript with statically typed languages such as C++ and Java. I find this useful as someone who writes a lot of JavaScript but works alongside Objective-C and .NET developers.</p>

<p>Stephen has combined years of experience into a rare, testing-focused book, that relates principles that we use to write well-designed code to the problems inherent in automated testing.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page4">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <strong>5</strong>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page6">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

