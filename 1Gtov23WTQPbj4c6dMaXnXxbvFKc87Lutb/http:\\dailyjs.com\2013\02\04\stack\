http://dailyjs.com/2013/02/04/stack/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 17:29:16 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "1004d9-530d-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 7140
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: Meet the New Stack, Same as the Old Stack</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2013/02/04/stack">Meet the New Stack, Same as the Old Stack</a></h2>

<div class="meta">
  04 Feb 2013 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#components">components</a>
    
      <a href="/tags.html#twitter">twitter</a>
    
      <a href="/tags.html#google">google</a>
    
      <a href="/tags.html#jquery">jquery</a>
    
  </span>
</div>

<div id="post">
<p>Five years ago, if you asked any client-side developer which library or framework to use the most likely answer would have been jQuery. Since then, client-side development has become far more complex. A friendly wrapper for DOM programming and a browser compatibility layer isn&#8217;t enough to help us write modern applications.</p>

<p>Starting a project today involves selecting a package manager, module system, build system, templating language, data binding library, a sync layer, a widget library, and a test framework. And it doesn&#8217;t end there: many of us also regularly use a dynamic CSS language, and mobile SDKs.</p>

<p>I wouldn&#8217;t say this is a negative trend, but with large companies backing or offering solutions to these problems, making an informed decision on each of these technologies is difficult. And soon the major players will offer a complete set of tools and libraries to satisfy each requirement: we&#8217;ll be back to something that looks like the original monolithic frameworks.</p>

<p>Until recently, starting a client-side web application might have looked like this:</p>

<ul>
<li><strong>Module system</strong>: RequireJS, AMD</li>

<li><strong>Build system</strong>: RequireJS (r.js)</li>

<li><strong>Templates</strong>: <a href='https://github.com/requirejs/text'>text.js</a></li>

<li><strong>Data binding</strong>: Backbone.js</li>

<li><strong>Sync</strong>: Backbone.js</li>

<li><strong>Widgets</strong>: Bootstrap</li>

<li><strong>Test framework</strong>: QUnit</li>
</ul>

<p>There are other popular choices for each of these bullets, of course: <a href='http://foundation.zurb.com/'>Zurb Foundation</a> is a popular front-end framework, and I&#8217;ve used Mocha instead of QUnit since Mocha appeared. I also like <a href='http://knockoutjs.com/'>Knockout</a> for data binding, because the two-way declarative bindings are easy to get the hang of.</p>

<p>These libraries are not interchangeable once a project has been started &#8211; Bootstrap uses different CSS classes to jQuery UI, for example. The major difficulty is keeping libraries up to date, particularly if they have a lot of dependencies.</p>

<p>And that&#8217;s when you need a package manager. Using a package manager can make the choices even more fine grained, because managing each library and its dependencies is easier. Switching to something like <a href='https://github.com/component'>Component</a> is one option, which can lead to a totally new stack:</p>

<ul>
<li><strong>Package manager</strong>: Component</li>

<li><strong>Module system</strong>: CommonJS</li>

<li><strong>Build system</strong>: Component</li>

<li><strong>Templates</strong>: <a href='https://github.com/component/component/wiki/Components#wiki-templating'>Take your pick</a></li>

<li><strong>Data binding</strong>: Reactive or Rivets (you could easily use Knockout or Backbone though)</li>

<li><strong>Sync</strong>: <code>component/model</code> can communicate with JSON APIs</li>

<li><strong>Widgets</strong>: <a href='https://github.com/component/component/wiki/Components#wiki-ui'>Componentised UI widgets are popular</a></li>

<li><strong>Test framework</strong>: <code>test/assert</code>, Mocha</li>
</ul>

<p>Bootstrap and Zurb Foundation can be provided as components, there are projects on GitHub to do this. I&#8217;ve tried to design projects 100% around components without these larger libraries, and it was a huge amount of work. It may get easier with time, or once the right balance of functionality is found. I&#8217;ve noticed there are some &#8220;meta packages&#8221; that exist to group commonly used dependencies together.</p>

<p>You&#8217;ll notice I haven&#8217;t mentioned <a href='http://angularjs.org/'>AngularJS</a> yet. The reason for that is AngularJS is now compatible with <a href='https://code.google.com/p/closure-library/'>Closure Library</a>, which makes it possible to use an almost 100% Google-powered development stack:</p>

<ul>
<li><strong>Package manager</strong>: None (to my knowledge)</li>

<li><strong>Module system</strong>: Closure Library modules</li>

<li><strong>Build system</strong>: ClosureBuilder</li>

<li><strong>Templates</strong>: AngularJS</li>

<li><strong>Data binding</strong>: AngularJS</li>

<li><strong>Sync</strong>: AngularJS services</li>

<li><strong>Widgets</strong>: Closure Library</li>

<li><strong>Test framework</strong>: Closure Library testing</li>
</ul>

<p>While Closure Library is more like the &#8220;last generation&#8221; monolithic frameworks, each module can be loaded separately, so you don&#8217;t need to use the whole thing. You could make a project with Closure Library, ClosureBuilder, Backbone.js, and Boostrap if you wanted. You could also go the other way: deploy a Go/Python/Java app to App Engine that&#8217;s built on Closure Library and AngularJS. Google effectively provides the entire stack, including server-side development, data storage, user authentication, billing, and client-side development.</p>

<p>Recently we&#8217;ve also seen a huge amount of open source projects coming out of Twitter. A pure Twitter stack looks like this:</p>

<ul>
<li><strong>Package manager</strong>: Bower</li>

<li><strong>Module system</strong>: Flight/AMD</li>

<li><strong>Build system</strong>:</li>

<li><strong>Templates</strong>: Hogan.js</li>

<li><strong>Data binding</strong>: Flight</li>

<li><strong>Sync</strong>:</li>

<li><strong>Widgets</strong>: Bootstrap</li>

<li><strong>Test framework</strong>:</li>
</ul>

<p>Using components through Flight could satisfy the other dependencies as well. It wouldn&#8217;t be difficult to use Flight as a test runner with a suitable assertion library, although the authors use Jasmine and PhantomJS at the moment.</p>

<p>Let&#8217;s not forget, however, the incredible features provided by Dojo. Compare Google and Twitter&#8217;s client-side stacks to this:</p>

<ul>
<li><strong>Package manager</strong>: Dojo Packages, CPM</li>

<li><strong>Module system</strong>: AMD</li>

<li><strong>Build system</strong>: dojoBuild</li>

<li><strong>Templates</strong>: Dijit templates</li>

<li><strong>Data binding</strong>: dojo.store.Observable</li>

<li><strong>Sync</strong>: Dojo Object Store</li>

<li><strong>Widgets</strong>: Dijit</li>

<li><strong>Test framework</strong>: D.O.H.</li>
</ul>

<p>Dojo has the entire client-side stack covered, and also includes many more features that I haven&#8217;t mentioned here. YUI is comparable:</p>

<ul>
<li><strong>Package manager</strong>:</li>

<li><strong>Module system</strong>: <code>YUI().use</code></li>

<li><strong>Build system</strong>: <a href='http://yui.github.com/shifter/'>Shifter</a></li>

<li><strong>Templates</strong>: <a href='http://yuilibrary.com/yui/docs/template/'>Y.Template.Micro</a></li>

<li><strong>Data binding</strong>: See <a href='http://yuilibrary.com/yui/docs/app/'>App Framework</a></li>

<li><strong>Sync</strong>: <a href='http://yuilibrary.com/yui/docs/datasource/'>Data Source</a>, <code>Y.Model</code>, and <code>Y.ModelList</code></li>

<li><strong>Widgets</strong>: <a href='http://yuilibrary.com/yui/widgets/'>YUI Wigets</a></li>

<li><strong>Test framework</strong>: <a href='http://yuilibrary.com/yui/docs/test/'>Test</a></li>
</ul>

<p>On the surface, it seems like Twitter&#8217;s developers aim to create something more like Component, where each piece of the client-side puzzle can be picked à la carte. Closure Library is more like the older, monolithic model used by YUI, where a custom module system is used, and modules are harder to reuse without the base framework.</p>

<p>The question is, can these larger companies support modern, &#8220;componentised&#8221; client-side development, or is it easier to offer a consolidated monolithic framework? Projects like AngularJS and Flight suggest to me that developers within Twitter and Google want to promote that approach, while how that fits into the wider organisation remains to be seen. Will we see AngularJS alongside Closure Library in the Python, Java, and Go App Engine documentation, or will it remain a useful library that exists outside of Google&#8217;s core developer offering?</p>

<p>An interesting third option is <a href='http://yeoman.io/'>Yeoman</a>. This is another project from Google that provides a selection of smaller libraries to kick-start development:</p>

<ul>
<li><strong>Package manager</strong>: yeoman</li>

<li><strong>Module system</strong>: RequireJS, AMD</li>

<li><strong>Build system</strong>: Grunt</li>

<li><strong>Widgets</strong>: Bootstrap</li>
</ul>

<p>Yeoman generates application templates by helping you select various options, and then gives you a build system so you can easily generate something deployable. It doesn&#8217;t enforce decisions like template language or CoffeeScript, but provides a harness for installing packages, and building and testing your application.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>Client-side development is changing. It&#8217;s no-longer enough to learn a small amount of jQuery &#8211; an entire client-side stack is becoming the norm. The libraries that plugged the gaps in jQuery and its clones now have serious competition from tech giants.</p>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2013/02/04/stack/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

