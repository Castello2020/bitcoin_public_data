http://dailyjs.com/page11/
HTTP/1.1 200 OK
Date: Wed, 23 Jul 2014 19:49:11 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "19c04e-1a1f9-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 24667
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/16/node-roundup">Node Roundup: Browser Tests</a></h2>
      <div class="meta">
        <span class="date">16 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/16/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#testing">testing</a>
          
        </span>
      </div>
      <div class="preview">
        <p>I wanted to write about Substack&#8217;s <a href='https://github.com/substack/testling'>Testling</a> project, but then coincidentally Chris Scribner sent in his <a href='https://github.com/scriby/browser-harness'>Browser Harness</a> project. Let&#8217;s look at both to see how they shape up.</p>

<h3 id='testling'>Testling</h3>

<p>Testling (GitHub: <a href='https://github.com/substack/testling'>substack / testling</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/testling'>testling</a>) is a tool for running tests in local instances of browsers. It works by using <a href='http://browserify.org/'>browserify</a> &#8211; this allows Node modules to be used in browsers.</p>

<p><img src='/images/posts/browserify2.png' alt='Browserify' /></p>

<p>But what&#8217;s <em>really</em> going on? Follow Testling&#8217;s source into <a href='https://github.com/substack/testling/blob/master/browser/prelude.js'>browser/prelude.js</a> and you&#8217;ll find <a href='https://npmjs.org/package/xhr-write-stream'>xhr-write-stream</a>. Also, Testling uses <a href='https://github.com/substack/browser-launcher'>browser-launcher</a> which allows browsers to be launched headlessly through Xvfb or PhantomJS.</p>

<p>I installed <code>browserify</code> and <code>testling</code> then ran <code>browserify test.js | testling</code> and it opened Chrome and ran my tests. I wasn&#8217;t sure how to make Testling run it headlessly, or run it in a different browser, but apparently if you define a <code>&quot;testling&quot;</code> field in your <code>package.json</code> it should pick up your desired browser settings from there. Read more in <a href='https://github.com/substack/testling/blob/master/doc/testling_field.markdown'>testling field documentation</a>.</p>

<h3 id='browser_harness'>Browser Harness</h3>

<p>Browser Harness (GitHub: <a href='https://github.com/scriby/browser-harness'>scriby / browser-harness</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/browser-harness'>browser-harness</a>) takes a different approach. It uses client-side code to listen for commands to run tests. It currently uses <a href='https://github.com/Flotype/now'>NowJS</a> for communication, but the author wants to replace it with Socket.IO.</p>

<p>It requires a file to be served from the domain of the site being tested, and has a few other limitations which are documented in the readme file.</p>

<p>The harness has built-in support for fibers, so if you install <a href='https://npmjs.org/package/asyncblock'>asyncblock</a> you can write tests in a blocking style.</p>

<p>The example in the documentation uses Mocha, but the author notes that other test frameworks should work as well.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/15/frontend-roundup">Script Roundup: Dolly.js, ngProgress</a></h2>
      <div class="meta">
        <span class="date">15 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/15/frontend-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#angular">angular</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your scripts and articles in for review through our <a href='/contact.html'>contact form</a>.
</div>
<h3 id='dollyjs'>Dolly.js</h3>

<p><a href='http://lunarlogic.github.io/dolly.js/'>Dolly.js</a> (GitHub: <a href='https://github.com/LunarLogic/dolly.js'>LunarLogic / dolly.js</a>, License: <em>MIT</em>) from Lunar Logic is a jQuery UI widget for cloning fields in tables. It works like Excel and does not make any assumptions about the underlying data structure. Rows and cells can be constrained with selectors, and the API is event-based so you can hook up listeners to <code>cloned</code> events.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='nx'>cell</span><span class='p'>).</span><span class='nx'>dolly</span><span class='p'>({</span>
  <span class='nx'>rowSelector</span><span class='o'>:</span> <span class='s1'>&#39;div.row&#39;</span><span class='p'>,</span>
  <span class='nx'>cellSelector</span><span class='o'>:</span> <span class='s1'>&#39;div.cell&#39;</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='ngprogress'>ngProgress</h3>

<p><a href='http://labs.voronianski.com/ngprogress-lite.js/'>ngProgress</a> (GitHub: <a href='https://github.com/voronianski/ngprogress-lite'>voronianski / ngprogress-lite</a>, License: <em>MIT</em>) by Dmitri Voronianski is a port of <a href='https://github.com/rstacruz/nprogress/'>NProgress</a> for AngularJS applications. NProgress looks like the Chrome for Android progress bar which is a glowing blue line that grows to fill the top of the page.</p>

<p>The ngProgress demo page allows you to see how it works with buttons for each API call, for example: <code>.set(0.4)</code> and <code>.inc()</code>. This is the perfect way to give people feedback when your AngularJS app makes Ajax requests to the server.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/14/ghost">Ghost: A Blogging Platform</a></h2>
      <div class="meta">
        <span class="date">14 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/14/ghost/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#gbnc">gbnc</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/ghostblog.png' alt='Ghost' /></p>

<p><a href='http://ghost.org/'>Ghost</a> (GitHub: <a href='https://github.com/TryGhost/Ghost'>TryGhost / Ghost</a>, License: <em>MIT</em>) is a blogging platform built with Node and Express. It uses <a href='http://casperjs.org/'>CasperJS for testing</a>, and <a href='http://bookshelfjs.org/'>Bookshelf.js</a> for the ORM layer.</p>

<p>Ghost started out as a Kickstarter project, with the aim of bettering WordPress. Ghost is run by a non-profit organisation, and released the source code today under the MIT license. Ghost is also run as a service, so you can create an account at <a href='http://ghost.org/'>ghost.org</a> and try it out without having to install it.</p>

<p>However, fortunately it is pretty easy to install: <code>npm install --production</code> and <code>npm start</code> should get it running. It&#8217;s easy because Bookshelf.js is database agnostic, so if your system has SQLite then it should be able to use it to store posts and users.</p>

<p>Event better, the fact Bookshelf.js is based around Backbone.js means you should be able to start hacking Ghost without much trouble. If you&#8217;ve done any work with Express and Backbone.js then Ghost&#8217;s source will be eminently hackable.</p>

<p>The project is split into client and server code, and it uses popular patterns like promises, Express route separation, and Express middleware.</p>

<p>The architecture of the project has been shaped by the need to allow people to easily install and theme Ghost blogs, which means it deviates from the typical Express applications I write which are bespoke services. The focus on theming came from the need to create a similar designer-friendly ecosystem that WordPress has, and already on launch themes and services that sell themes are available. You can read more about this in <a href='http://blog.ghost.org/public-launch/'>Ghost Launches to The Public</a>.</p>

<p>The fact the project started off as a Kickstarter project with hundreds of eager alpha testers means it already feels mature. And unlike many open source projects it has a dedicated team and a business model behind it, so it&#8217;s definitely off to a promising start. I recommend giving it a look over if you&#8217;re an Express developer or just tired of your own blogging platform.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/11/espruino">Espruino: JavaScript Hardware Hacking</a></h2>
      <div class="meta">
        <span class="date">11 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/11/espruino/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#hardware">hardware</a>
          
            <a href="/tags.html#gbnc">gbnc</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/espruino.png' alt='Espruino' /></p>

<p><a href='http://www.espruino.com/'>Espruino</a> is a cheap and tiny microcontroller that can be scripted with JavaScript. That means you can use JavaScript and an Arduino-inspired API to communicate with sensors, motors, and LCD displays. Rather than using Arduino&#8217;s Processing-derived IDE, or Node modules to communicate with Arduino, you can use something designed with JavaScript in mind from the ground up.</p>

<p>There&#8217;s an official <a href='http://www.espruino.com/ReferenceESPRUINOBOARD'>Espruino board</a>, but there are also compatible boards that you can use. The Espruino firmware can be installed on the other boards manually, so if you&#8217;ve already dabbled with microcontrollers you should be able to get a compatible board loaded up and ready to run. The <a href='http://www.espruino.com/ReferenceESPRUINOBOARD'>Espruino hardware reference</a> has more details.</p>

<p>The Raspberry Pi has some IO pins (the GPIO connector), but microcontroller-based boards like the Espruino use much less power. That means you could leave a board running on batteries for a significant amount of time.</p>

<p>The <a href='http://www.kickstarter.com/projects/48651611/espruino-javascript-for-things'>project was successfully funded on Kickstarter</a>, where they raised &#163;100,710.</p>

<p>If you want to flash a compatible microcontroller check out <a href='http://www.espruino.com/Download'>Espruino&#8217;s downloads page</a>. If you want to see the source, go to <a href='https://github.com/espruino/Espruino'>espruino / Espruino</a>. It contains a JavaScript lexer and parser, because the author (Gordon Williams) found V8 and SpiderMonkey used too much RAM to run on the chips he wanted to target. Have a look at the <a href='https://github.com/espruino/Espruino/tree/master/src'>C source code</a> if you&#8217;re interested in seeing how it works.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/10/beams">Beams: Streams with Computation</a></h2>
      <div class="meta">
        <span class="date">10 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/10/beams/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#gbnc">gbnc</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Beam (GitHub: <a href='https://github.com/darach/beam-js'>darach / beam-js</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/beam'>beam</a>) by Darach Ennis is a module for performing computation on streamed data.</p>

<blockquote>
<p>Beams are like streams, in that they support pipes but are lightweight and work with in memory types without buffering, copying, parsing.</p>
</blockquote>

<p>Beams have some interesting properties:</p>

<ul>
<li>Events are executed in order</li>

<li>Events can be filtered</li>

<li>Beams can be branched and joined together</li>
</ul>

<h3 id='example'>Example</h3>

<p>I&#8217;ve taken one of Darach&#8217;s basic examples and interleaved it with comments to explain the major concepts. The goal is to pipe numbers through an operator that can square numbers.</p>

<p>First, load the module and create a sink.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>Beam</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;beam&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>sink</span> <span class='o'>=</span> <span class='nx'>Beam</span><span class='p'>.</span><span class='nx'>Sink</span><span class='p'>();</span>

<span class='nx'>sink</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;data&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;d:&#39;</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Sinks emit a <code>&#39;data&#39;</code> event whenever data is received, so they can be used to capture results. Operators can be used to transform data &#8211; this example just squares each value:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>square</span> <span class='o'>=</span> <span class='nx'>Beam</span><span class='p'>.</span><span class='nx'>Operator</span><span class='p'>.</span><span class='nx'>transform</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>x</span> <span class='o'>*</span> <span class='nx'>x</span><span class='p'>;</span> <span class='p'>});</span>
</code></pre>
</div>
<p>Sources can be connected to sinks with <code>pipe</code>, much like streams:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>source</span> <span class='o'>=</span> <span class='nx'>Beam</span><span class='p'>.</span><span class='nx'>Source</span><span class='p'>();</span>
<span class='nx'>source</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>square</span><span class='p'>).</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>sink</span><span class='p'>);</span>
</code></pre>
</div>
<p>Values can be sent to a source with <code>push</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;=</span> <span class='mi'>10</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>source</span><span class='p'>.</span><span class='nx'>push</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This example introduces sinks, sources, and operators, but it doesn&#8217;t even scratch the surface of what Darach is aiming for with Beams. The next step is to define a filter and declare a pipe that uses it:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>even</span> <span class='o'>=</span> <span class='nx'>Beam</span><span class='p'>.</span><span class='nx'>Operator</span><span class='p'>.</span><span class='nx'>filter</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>x</span> <span class='o'>%</span> <span class='mi'>2</span> <span class='o'>==</span> <span class='mi'>0</span><span class='p'>;</span> <span class='p'>});</span>
<span class='nx'>source</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>even</span><span class='p'>).</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>square</span><span class='p'>).</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>sink</span><span class='p'>);</span>
</code></pre>
</div>
<p>Now only even numbers will be squared. The Beams module also has built-in functions, which you can find in <code>Beam.bifs</code>. These are operators and filters that you can use to filter and compare values in beams:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>mod2</span> <span class='o'>=</span> <span class='nx'>source</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>.</span><span class='nx'>mod</span><span class='p'>(</span><span class='mi'>2</span><span class='p'>))</span>
<span class='nx'>mod2</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>.</span><span class='nx'>eq</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>)).</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>sink1</span><span class='p'>);</span>
<span class='nx'>mod2</span><span class='p'>.</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>.</span><span class='nx'>eq</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>)).</span><span class='nx'>pipe</span><span class='p'>(</span><span class='nx'>sink2</span><span class='p'>);</span>
</code></pre>
</div>
<p>To see all of the defined <code>Bifs</code>, see <a href='https://github.com/darach/beam-js/blob/0974534f0f4e8bc1eff9e006b6b4dddf81a84c0f/lib/_beam_bifs.js'>_beam_bifs.js</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/09/node-roundup">Node Roundup: Great British Node Conference Edition</a></h2>
      <div class="meta">
        <span class="date">09 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/09/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#gbnc">gbnc</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Yesterday was the <a href='http://greatbritishnodeconf.co.uk/'>Great British Node Conference</a>, which took place in London at the <a href='http://greatbritishnodeconf.co.uk/'>Shoreditch Works Village Hall</a>. Speakers included <a href='https://twitter.com/juliangruber'>Julian Gruber</a>, <a href='https://twitter.com/darachennis'>Darach Ennis</a>, <a href='https://twitter.com/antonwhalley'>Anton Whalley</a>, and <a href='https://twitter.com/timruffles'>Tim Ruffles</a>.</p>

<p>I did a talk about Node&#8217;s internals that went from the JavaScript core modules down to some libuv basics, with the aim of encouraging the audience to look at Node&#8217;s source for themselves. I want to break this talk down into a deeper analysis of uv and V8 while still remaining relevant to JavaScript developers.</p>

<p><img src='/images/posts/gbnc2.png' alt='Substack' /></p>

<p>Substack did a short talk about abstract syntax trees, Browserify, and a project he&#8217;s working on to remove unreachable code. He mentioned <a href='https://github.com/substack/testling'>testling</a>, which I haven&#8217;t seen before &#8211; it&#8217;s another way to run headless browser tests. I was recently trying to rethink the way I do this, so I&#8217;m going to give it a try.</p>

<p><a href='https://twitter.com/bananaoomarang'>Milo Mordaunt</a> and <a href='https://twitter.com/hooleanplusplus'>Harry Dalton</a> did an interesting talk about some games they created based on British government data. One of the games used Max Ogden&#8217;s <a href='https://github.com/maxogden/voxel-engine'>voxel-engine</a> project.</p>

<p>In the audience I talked to <a href='https://twitter.com/svenlito'>Sven Lito</a> who is one of the creators of <a href='http://hood.ie/'>Hoodie</a>. Hoodie is a <a href='http://nobackend.org/'>noBackend</a> project that aims to make web applications easier to build. It reminded me of Meteor, but my initial impression was that it&#8217;s more closely reliant and influenced by the Node community, so I&#8217;d like to spend more time looking at it.</p>

<p>Over the next week or so I&#8217;ll write a little bit more about the projects and technologies I learned about at the conference.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/08/jquery-roundup">jQuery Roundup: Ideal Forms 3, httpinvoke, jquery.brightness.js</a></h2>
      <div class="meta">
        <span class="date">08 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/08/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#server">server</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='ideal_forms_3'>Ideal Forms 3</h3>

<p>Ideal Forms 3 (GitHub: <a href='https://github.com/elclanrs/jq-idealforms'>elclanrs / jq-idealforms</a>, License: <em>GPL/MIT</em>) by Cedric Ruiz is a library for working with responsive HTML5 forms. It uses JavaScript to adapt form controls to the size of the container, so it works without using media queries. It supports keyboard shortcuts, custom checkboxes and file inputs, and a date picker.</p>

<p>The CSS now uses Stylus, and it uses classes in the HTML markup for denoting field types.</p>

<h3 id='httpinvoke'>httpinvoke</h3>

<p>httpinvoke (GitHub: <a href='https://github.com/jakutis/httpinvoke'>jakutis / httpinvoke</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/httpinvoke'>httpinvoke</a>, bower: <em>httpinvoke</em>) by Vytautas Jakutis is a module for making HTTP requests that works with Node and browsers. It&#8217;s designed with a focus on promises, and Node&#8217;s callback-style API:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>httpinvoke</span><span class='p'>(</span><span class='s1'>&#39;http://example.org&#39;</span><span class='p'>,</span> <span class='s1'>&#39;GET&#39;</span><span class='p'>).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Success&#39;</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>body</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>statusCode</span><span class='p'>,</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>headers</span><span class='p'>);</span>
<span class='p'>},</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Failure&#39;</span><span class='p'>,</span> <span class='nx'>err</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The readme has full documentation for each API style and the accepted options. It&#8217;s unit tested, and also available through Bower.</p>

<h3 id='jquerybrightnessjs'>jquery.brightness.js</h3>

<p><a href='https://gist.github.com/kozo002/6806421'>jquery.brightness.js</a> is a small plugin by Kozo Yamagata that detects CSS background colours and returns the brightness. Calling <code>$(selector).brightness()</code> returns either <code>&#39;light&#39;</code> or <code>&#39;dark&#39;</code>. It&#8217;s distributed as a Gist as it&#8217;s a short and sweet little snippet.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/07/harp">Harp</a></h2>
      <div class="meta">
        <span class="date">07 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/07/harp/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#browser">browser</a>
          
            <a href="/tags.html#server">server</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <p><img src='/images/posts/harpbanner.png' alt='Harp' /></p>

<p>Alex Griekspoor sent me <a href='http://harpjs.com/'>Harp</a> (GitHub: <a href='https://github.com/sintaxi/harp'>sintaxi / harp</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/harp'>harp</a>) by Brock Whitten, a static web server with a focus on client-side scripting. It&#8217;s built on <a href='https://npmjs.org/package/connect'>connect</a>, but shifts the responsibility of building client-side projects to the server:</p>

<blockquote>
<p>I wanted a lightweight web server that was powerful enough for me to abandon web frameworks for dead simple front-end publishing.</p>
</blockquote>

<p>It&#8217;ll run as a command-line tool or Node module, so you can fit it into existing projects and use it for local development.</p>

<p>If you look at the source it&#8217;s mostly based around middleware. A major chunk of this is <a href='https://npmjs.org/package/terraform'>terraform</a>, a preprocessor that handles partials, layouts, metadata, and caching. Terraform is available through npm, so you could use it from outside of Harp.</p>

<p>I&#8217;ve worked with single page web apps that are entirely server independent, or traditional client/server applications. This approach mixes both of these paradigms, and seems to be generating a lot of interest. I found a recent <a href='https://news.ycombinator.com/item?id=6495287'>Hacker News thread</a> about it, and an <a href='http://sintaxi.com/introducing-harp'>introductory blog post</a> that explains the development history so far.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/04/bluebird">Bluebird</a></h2>
      <div class="meta">
        <span class="date">04 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/04/bluebird/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#promises">promises</a>
          
            <a href="/tags.html#async">async</a>
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <p>The never-ending quest for the perfect async/promises library continues. Petka Antonov&#8217;s offering, Bluebird (GitHub: <a href='https://github.com/petkaantonov/bluebird'>petkaantonov / bluebird</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/bluebird'>bluebird</a>), has all of your favourite APIs, impressive benchmarks, and Mocha unit tests. It works in browsers as well.</p>

<p>The <a href='https://github.com/petkaantonov/bluebird/blob/master/API.md'>Bluebird API reference</a> has explanations of each method, and code examples. Here&#8217;s an example of using promises and <code>finally</code> to make an <code>XMLHttpRequest</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>ajaxGetAsync</span><span class='p'>(</span><span class='nx'>url</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='k'>new</span> <span class='nx'>Promise</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>resolve</span><span class='p'>,</span> <span class='nx'>reject</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>xhr</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>XMLHttpRequest</span><span class='p'>;</span>
    <span class='nx'>xhr</span><span class='p'>.</span><span class='nx'>addEventListener</span><span class='p'>(</span><span class='s1'>&#39;error&#39;</span><span class='p'>,</span> <span class='nx'>reject</span><span class='p'>);</span>
    <span class='nx'>xhr</span><span class='p'>.</span><span class='nx'>addEventListener</span><span class='p'>(</span><span class='s1'>&#39;load&#39;</span><span class='p'>,</span> <span class='nx'>resolve</span><span class='p'>);</span>
    <span class='nx'>xhr</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>(</span><span class='s1'>&#39;GET&#39;</span><span class='p'>,</span> <span class='nx'>url</span><span class='p'>);</span>
    <span class='nx'>xhr</span><span class='p'>.</span><span class='nx'>send</span><span class='p'>(</span><span class='kc'>null</span><span class='p'>);</span>
  <span class='p'>}).</span><span class='k'>finally</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#ajax-loader-animation&#39;</span><span class='p'>).</span><span class='nx'>hide</span><span class='p'>();</span>
  <span class='p'>});</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Petka points out that the <code>finally</code> method works like <a href='https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback'>Q&#8217;s finally method</a>. The <code>catch</code>/<code>caught</code> method also works like Q (with <code>fail</code> renamed to <code>caught</code>), which is a bit of sugar for <code>.then(null, errorHandler)</code>.</p>

<p>One of the tools Petka mentions for verifying the quality of the project was <a href='https://github.com/spion/async-compare'>async-compare</a> by Gorgi Kosev. This project aims to compare async patterns based on their complexity, performance, and &#8220;debuggability&#8221;. The stack traces generated by libraries like Bluebird and Q are captured and curated, so async-compare can be used to measure the distance between the function that created the error and the error in the stack trace. This is useful because debugging asynchronous code is notoriously difficult.</p>

<p>Even though Q and popular Node modules like <a href='https://npmjs.org/package/async'>async</a> are good, I think Bluebird is worth looking at because it seems to have attention to the right details.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/03/allonge">JavaScript Allongé</a></h2>
      <div class="meta">
        <span class="date">03 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/03/allonge/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#books">books</a>
          
        </span>
      </div>
      <div class="preview">
        <p><a href='https://leanpub.com/javascript-allonge'>JavaScript Allongé</a> by Reginald Braithwaite is a free book that focuses on using functions to write simpler JavaScript with less bugs:</p>

<blockquote>
<p>JavaScript Allongé provides recipes for using functions to write software that is simpler, cleaner, and less complicated than alternative approaches that are object-centric or code-centric. JavaScript idioms like function combinators and decorators leverage JavaScript&#8217;s power to make code easier to read, modify, debug and refactor, thus avoiding problems before they happen.</p>
</blockquote>

<p>I found the author&#8217;s blog post, <a href='http://braythwayt.com/2013/10/01/javascript-allonge-is-free.html'>JavaScript Allonge is Free</a>, interesting and inspiring. Technical authors don&#8217;t often get to air the stories behind their work, but Reginald goes into a lot of detail behind JavaScript Allongé and how his life has changed since publishing it:</p>

<blockquote>
<p>And as a bonus, I got my dream job, and now it&#8217;s time for me to walk the freedom talk. I&#8217;m now working for a company that is trying its dambdest to help every single programmer on the planet write more software and better software. And we give something away, crossing our fingers that more software and better software will be a good thing and that we&#8217;ll make enough to keep doing what we do.</p>
</blockquote>

<blockquote>
<p>I believe in this. That&#8217;s why I write, and that&#8217;s why I work at GitHub. And you helped me get here:</p>
</blockquote>

<p>It&#8217;s encouraging to hear that such a talented writer and programmer has landed his dream job and become part of the GitHub animated gif squad.</p>

<blockquote>
<p>Part of why I believed in myself enough to go through the terrors of interviewing for my job is the confidence you the readers gave me when you supported my books and told me that the ideas I was trying to share were useful. I can&#8217;t thank you enough for that.</p>
</blockquote>

<p>The book is available as a PDF, ePub, and Kindle-friendly mobile file.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/02/node-roundup">Node Roundup: 0.10.20, Asker, AbsurdJS</a></h2>
      <div class="meta">
        <span class="date">02 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/02/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#css">css</a>
          
            <a href="/tags.html#http">http</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='node_01020'>Node 0.10.20</h3>

<p><a href='http://blog.nodejs.org/2013/09/30/node-v0-10-20-stable/'>Node 0.10.20 is out</a> which means Node 0.10 is almost old enough to drink in most US states. How about that! This version fixes that annoying error that I seem to see when deploying to Heroku which reads: <code>npm ERR! cb() never called</code>.</p>

<h3 id='asker'>Asker</h3>

<p>Asker (GitHub: <a href='https://github.com/nodules/asker'>nodules / asker</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/asker'>asker</a>) is a <code>http.request</code> wrapper with retries, gzip decoding, and connection pool tuning. It was created by Phillip Kovalev for Yandex and is used on the <a href='http://auto.yandex.ru/'>auto.yandex.ru</a> site.</p>

<p>Asker isn&#8217;t really a competitor to <a href='https://npmjs.org/package/request'>request</a>, but a module designed around tailoring HTTP requests to comply with service level agreements. It makes certain things easier, like body encoding.</p>

<p>Node&#8217;s built-in HTTP connection pools are eschewed for a custom solution that allows you to prioritise services. This helps avoid situations where a critical service fails due to the exhaustion of TCP sockets. More is explained in the project&#8217;s readme file, and the project includes unit tests as well.</p>

<h3 id='absurdjs'>AbsurdJS</h3>

<p>AbsurdJS (GitHub: <a href='https://github.com/krasimir/absurd'>krasimir / absurd</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/absurd'>absurd</a>) by Krasimir Tsonev is a CSS preprocessor that converts JSON to CSS:</p>
<div class='highlight'><pre><code class='javascript'><span class='s2'>&quot;.navigation&quot;</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='nx'>margin</span><span class='o'>:</span> <span class='s2'>&quot;12px 0 0 0 &quot;</span><span class='p'>,</span>
  <span class='nx'>type</span><span class='o'>:</span> <span class='s2'>&quot;horizontal&quot;</span><span class='p'>,</span>
  <span class='nx'>a</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>elementstyle</span><span class='o'>:</span> <span class='s2'>&quot;button&quot;</span><span class='p'>,</span>
    <span class='nx'>responsive</span><span class='o'>:</span> <span class='s2'>&quot;true&quot;</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>CSS isn&#8217;t all that different from JSON when you think about it, but you can&#8217;t easily include lumps of CSS in JavaScript files. AbsurdJS allows you to sidestep this problem by converting JSON to CSS. It includes a feature called <em>storage</em> that allows you to define custom properties that will be expanded to standard CSS.</p>

<p>There&#8217;s a detailed post about how it all works here: <a href='http://davidwalsh.name/write-css-javascript'>Write Your CSS with JavaScript</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/10/01/jquery-roundup">jQuery Roundup: One Page Scroll, crSpline</a></h2>
      <div class="meta">
        <span class="date">01 Oct 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/10/01/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#animation">animation</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='one_page_scroll'>One Page Scroll</h3>

<p><a href='http://www.thepetedesign.com/demos/onepage_scroll_demo.html'>One Page Scroll</a> (GitHub: <a href='https://github.com/peachananr/onepage-scroll'>peachananr / onepage-scroll</a>) by Pete Rojwongsuriya enables pages to scroll in the vertical locking style like Apple&#8217;s new iPhone 5S page. It&#8217;s based around sections &#8211; any selector can be used &#8211; and jQuery&#8217;s animations:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;.main&#39;</span><span class='p'>).</span><span class='nx'>onepage_scroll</span><span class='p'>({</span>
   <span class='nx'>sectionContainer</span><span class='o'>:</span> <span class='s1'>&#39;section&#39;</span><span class='p'>,</span>
   <span class='nx'>easing</span><span class='o'>:</span> <span class='s1'>&#39;ease&#39;</span><span class='p'>,</span>
   <span class='nx'>animationTime</span><span class='o'>:</span> <span class='mi'>1000</span><span class='p'>,</span>
   <span class='nx'>pagination</span><span class='o'>:</span> <span class='kc'>true</span><span class='p'>,</span>
   <span class='nx'>updateURL</span><span class='o'>:</span> <span class='kc'>false</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>I had a look at the source and it includes Eike Send&#8217;s <code>$.fn.swipeEvents</code> so it should work with touchscreens.</p>

<h3 id='jquerycrspline'>jquery.crSpline</h3>
<div class='image'>
  <img src='/images/posts/crspline.png' />
  <small>A visualisation of movement along Catmull-Rom splines.</small>
</div>
<p><a href='http://ijin.net/crSpline/demo.html'>jquery.crSpline</a> (GitHub: <a href='https://github.com/MmmCurry/jquery.crSpline'>MmmCurry / jquery.crSpline</a>, License: <em>MIT</em>) by M. Ian Graham is an animation plugin that moves objects along waypoints, smoothing the edges with splines.</p>

<p>The name crSpline comes from <a href='http://en.wikipedia.org/wiki/Cubic_Hermite_spline#Catmull.E2.80.93Rom_spline'>Catmull-Rom</a>:</p>

<blockquote>
<p>The curve is named after Edwin Catmull and Raphael Rom. In computer graphics, Catmull–Rom splines are frequently used to get smooth interpolated motion between key frames. For example, most camera path animations generated from discrete key-frames are handled using Catmull–Rom splines.</p>
</blockquote>

<p>The plugin includes <code>$.crSpline.buildSequence</code> which can be used to generate spline animation objects. At the moment there isn&#8217;t much documentation, but <a href='http://ijin.net/crSpline/demo.js'>demo.js</a> should get you started.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/09/30/rss-pipes-type-check">RSS Pipes, type-check</a></h2>
      <div class="meta">
        <span class="date">30 Sep 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/09/30/rss-pipes-type-check/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#rss">rss</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#apps">apps</a>
          
            <a href="/tags.html#haskell">haskell</a>
          
            <a href="/tags.html#functional">functional</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='rss_pipes'>RSS Pipes</h3>

<p><a href='http://dai-shi.github.io/rss-pipes/'>RSS Pipes</a> (GitHub: <a href='https://github.com/dai-shi/rss-pipes'>dai-shi / rss-pipes</a>, License: <em>BSD</em>) by Daishi Kato is an Express app for aggregating RSS feeds. It has a lightweight database wrapper for PostgreSQL and SQLite using the <a href='https://npmjs.org/package/jugglingdb'>jugglingdb</a>, which seems like a cleaner ORM that some of the Node database ORMs I&#8217;ve used, and it keeps the route handlers lightweight which is good practice in Express applications.</p>

<p>One of the useful features it has is filtering feeds. For example, you can filter for keywords or truncate the result set. In this respect it&#8217;s like a simple version of Yahoo! Pipes. The client-side portion of the project uses Bootstrap, so you could probably customise it if you wanted.</p>

<h3 id='typecheck'>type-check</h3>

<p>Haskell makes an appearance in <a href='http://gkz.github.io/type-check/'>type-check</a> (GitHub: <a href='https://github.com/gkz/type-check'>gkz / type-check</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/type-check'>type-check</a>) by George Zahariev. It performs runtime type checking using a Haskell inspired syntax:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>typeCheck</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;type-check&#39;</span><span class='p'>).</span><span class='nx'>typeCheck</span><span class='p'>;</span>
<span class='nx'>typeCheck</span><span class='p'>(</span><span class='s1'>&#39;Number&#39;</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>);</span>               <span class='c1'>// true</span>
<span class='nx'>typeCheck</span><span class='p'>(</span><span class='s1'>&#39;Number&#39;</span><span class='p'>,</span> <span class='s1'>&#39;str&#39;</span><span class='p'>);</span>           <span class='c1'>// false</span>

<span class='nx'>typeCheck</span><span class='p'>(</span><span class='s1'>&#39;Number | String&#39;</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>);</span>      <span class='c1'>// true</span>
<span class='nx'>typeCheck</span><span class='p'>(</span><span class='s1'>&#39;Number | String&#39;</span><span class='p'>,</span> <span class='s1'>&#39;str&#39;</span><span class='p'>);</span>  <span class='c1'>// true</span>

<span class='nx'>typeCheck</span><span class='p'>(</span><span class='s1'>&#39;{x: Number, y: Boolean, ...}&#39;</span><span class='p'>,</span> <span class='p'>{</span><span class='nx'>x</span><span class='o'>:</span> <span class='mi'>2</span><span class='p'>,</span> <span class='nx'>y</span><span class='o'>:</span> <span class='kc'>false</span><span class='p'>,</span> <span class='nx'>z</span><span class='o'>:</span> <span class='mi'>3</span><span class='p'>});</span>  <span class='c1'>// true</span>
</code></pre>
</div>
<p>It works in browsers and Node, and apparently has 100% statement, branch, and line test coverage. It seems like something that might add an extra level of readability to test code, but could also be useful for validating user input.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/09/27/indentation">Indentation</a></h2>
      <div class="meta">
        <span class="date">27 Sep 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/09/27/indentation/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#editing">editing</a>
          
            <a href="/tags.html#indentation">indentation</a>
          
        </span>
      </div>
      <div class="preview">
        <p>I like indenting with spaces, and it&#8217;s partly due to the types of programming languages I use. Some languages and styles depend on vertical alignment, so tabs and spaces end up getting mixed, which causes anything but a particular tab width to look weird. That was the case in the Objective-C projects at the company I&#8217;m currently working at.</p>

<p>The <a href='https://twitter.com/gormlai'>C++ programmer</a> in our team loves tabs, however, and he pointed out <a href='http://nickgravgaard.com/elastictabstops/'>Elastic tabstops</a>. To understand how it works, take a look at the gif that shows code being edited as vertically aligned sections adapt automatically. There are several implementations of this idea, including Visual Studio and Eclipse plugins.</p>

<p>Sindre Sorhus sent in <a href='https://github.com/sindresorhus/detect-indent'>detect-indent</a> which is a Node module for detecting and persisting indentation. New text can be inserted with the correct indentation, and it can help configure your editor.</p>

<p>It also works in browsers, and can be installed with both Bower and Component.</p>

<p>Sindre&#8217;s example uses JSON:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>fs</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;fs&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>detectIndent</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;detect-indent&#39;</span><span class='p'>);</span>
<span class='cm'>/*</span>
<span class='cm'>{</span>
<span class='cm'>    &quot;ilove&quot;: &quot;pizza&quot;</span>
<span class='cm'>}</span>
<span class='cm'>*/</span>
<span class='kd'>var</span> <span class='nx'>file</span> <span class='o'>=</span> <span class='nx'>fs</span><span class='p'>.</span><span class='nx'>readFileSync</span><span class='p'>(</span><span class='s1'>&#39;foo.json&#39;</span><span class='p'>,</span> <span class='s1'>&#39;utf8&#39;</span><span class='p'>);</span>
<span class='c1'>// tries to detect the indentation and falls back to a default if it can&#39;t</span>
<span class='kd'>var</span> <span class='nx'>indent</span> <span class='o'>=</span> <span class='nx'>detectIndent</span><span class='p'>(</span><span class='nx'>file</span><span class='p'>)</span> <span class='o'>||</span> <span class='s1'>&#39;    &#39;</span><span class='p'>;</span>
<span class='kd'>var</span> <span class='nx'>json</span> <span class='o'>=</span> <span class='nx'>JSON</span><span class='p'>.</span><span class='nx'>parse</span><span class='p'>(</span><span class='nx'>file</span><span class='p'>);</span>

<span class='nx'>json</span><span class='p'>.</span><span class='nx'>ilove</span> <span class='o'>=</span> <span class='s1'>&#39;unicorns&#39;</span><span class='p'>;</span>

<span class='nx'>fs</span><span class='p'>.</span><span class='nx'>writeFileSync</span><span class='p'>(</span><span class='s1'>&#39;foo.json&#39;</span><span class='p'>,</span> <span class='nx'>JSON</span><span class='p'>.</span><span class='nx'>stringify</span><span class='p'>(</span><span class='nx'>json</span><span class='p'>,</span> <span class='kc'>null</span><span class='p'>,</span> <span class='nx'>indent</span><span class='p'>));</span>
<span class='cm'>/*</span>
<span class='cm'>{</span>
<span class='cm'>    &quot;ilove&quot;: &quot;unicorns&quot;</span>
<span class='cm'>}</span>
<span class='cm'>*/</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/09/26/libuv">From fs.readFile to read(2)</a></h2>
      <div class="meta">
        <span class="date">26 Sep 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/09/26/libuv/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#libuv">libuv</a>
          
            <a href="/tags.html#unix">unix</a>
          
        </span>
      </div>
      <div class="preview">
        <p>Here&#8217;s a statement you might hear used to describe Node:</p>

<blockquote>
<p>Node uses asynchronous I/O to avoid using threads for fast filesystem and network operations.</p>
</blockquote>

<p>This statement is false (in more ways than one), and understanding why will help you better understand Node.</p>

<p>First, consider the question: what is asynchronous?</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>fs</span><span class='p'>.</span><span class='nx'>readFile</span><span class='p'>(</span><span class='s1'>&#39;file.txt&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>err</span><span class='p'>,</span> <span class='nx'>data</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>err</span><span class='p'>)</span> <span class='k'>throw</span> <span class='nx'>err</span><span class='p'>;</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>data</span><span class='p'>);</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>That is an asynchronous API. The program will continue running after the <code>fs.readFile</code>. The callback may be run at some point in the future. As JavaScript programmers we like this because JavaScript&#8217;s scoping rules mean the callback gets a closure, so we find it easy to reason about what variables are available to the callback, while being able to do thing while something potentially slow (I/O, web requests) responds.</p>

<p>Even if you&#8217;re not a Node programmer, you&#8217;re probably comfortable with the last example. It&#8217;s not amazingly different to a jQuery Ajax request, where callbacks are passed to <code>$.ajax</code>.</p>

<p>Now, assuming you&#8217;re not a C/C++ programmer and don&#8217;t know too much about Node&#8217;s internals, here&#8217;s the amazing thing about <code>fs.readFile</code> &#8211; it calls a (potentially) blocking system call.</p>

<p>How is that possible? We know our program continues when we try to read a file, so what&#8217;s going on? The first step is to look at Node&#8217;s <code>fs</code> source.</p>

<h3 id='bindings'>Bindings</h3>

<p>If you look at the source for <code>fs.readFile</code> in <a href='https://github.com/joyent/node/blob/v0.10.19-release/lib/fs.js#L182'>lib/fs.js</a>, you&#8217;ll see <code>binding.read</code>. Whenever you see <code>binding</code> in Node&#8217;s core modules you&#8217;re looking at a portal into the land of C++. This binding is made available using <code>NODE_SET_METHOD(target, &quot;read&quot;, Read)</code>. If you know any C, you might think this is a macro &#8211; it was originally, but it&#8217;s now a function. The reference to <code>Read</code> here is a C++ function in <a href='https://github.com/joyent/node/blob/v0.10.19-release/src/node_file.cc#L723'>src/node_file.cc</a>.</p>

<p>Like other filesystem code in Node, <code>Read</code> defines a synchronous and asynchronous version using <code>ASYNC_CALL</code> and <code>SYNC_CALL</code>. These are macros used to bind to libuv. If you dig into libuv, which you can find in <code>deps/uv</code> or on GitHub at <a href='https://github.com/joyent/libuv'>joyent / libuv</a>, then you&#8217;ll discover something interesting: the filesystem code actually uses libuv&#8217;s own streams, buffers, and native filesystem wrapping code.</p>

<h3 id='filesystem_wrapping'>Filesystem Wrapping</h3>

<p>Going back to <code>ASYNC_CALL</code> in <code>Read</code>, one of the arguments is <code>read</code>: the syscall <code>read</code> (help: <code>man 2 read</code>). But wait, doesn&#8217;t this function block? Yes, but that&#8217;s not the end of the story. As summarised in <a href='http://nikhilm.github.io/uvbook/filesystem.html'>An Introduction to libuv</a>:</p>

<blockquote>
<p>The libuv filesystem operations are different from socket operations. Socket operations use the non-blocking operations provided by the operating system. Filesystem operations use blocking functions internally, but invoke these functions in a thread pool and notify watchers registered with the event loop when application interaction is required.</p>
</blockquote>

<p>Let&#8217;s look a little deeper. The <code>ASYNC_CALL</code> macro uses <code>FSReqWrap</code> and calls <code>uv_fs_</code> methods. The one that gets bound to for reading is <code>uv_fs_read</code>:</p>
<div class='highlight'><pre><code class='c'><span class='kt'>int</span> <span class='nf'>uv_fs_read</span><span class='p'>(</span><span class='kt'>uv_loop_t</span><span class='o'>*</span> <span class='n'>loop</span><span class='p'>,</span> <span class='kt'>uv_fs_t</span><span class='o'>*</span> <span class='n'>req</span><span class='p'>,</span>
               <span class='n'>uv_file</span> <span class='n'>file</span><span class='p'>,</span>
               <span class='kt'>void</span><span class='o'>*</span> <span class='n'>buf</span><span class='p'>,</span>
               <span class='kt'>size_t</span> <span class='n'>len</span><span class='p'>,</span>
               <span class='kt'>int64_t</span> <span class='n'>off</span><span class='p'>,</span>
               <span class='n'>uv_fs_cb</span> <span class='n'>cb</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='n'>INIT</span><span class='p'>(</span><span class='n'>READ</span><span class='p'>);</span>
  <span class='n'>req</span><span class='o'>-&gt;</span><span class='n'>file</span> <span class='o'>=</span> <span class='n'>file</span><span class='p'>;</span>
  <span class='n'>req</span><span class='o'>-&gt;</span><span class='n'>buf</span> <span class='o'>=</span> <span class='n'>buf</span><span class='p'>;</span>
  <span class='n'>req</span><span class='o'>-&gt;</span><span class='n'>len</span> <span class='o'>=</span> <span class='n'>len</span><span class='p'>;</span>
  <span class='n'>req</span><span class='o'>-&gt;</span><span class='n'>off</span> <span class='o'>=</span> <span class='n'>off</span><span class='p'>;</span>
  <span class='n'>POST</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>What&#8217;s that <code>POST</code> macro at the end? It checks to see if a callback has been provided, and if so uses <code>uv__work_submit</code> from <code>src/unix/threadpool.c</code> to read the file in a thread queue. Notice I&#8217;m just talking about Unix here, but in following <code>fs.readFile</code> down to the syscall that does the work it&#8217;s interesting to find <code>uv__work_submit</code>.</p>

<p>In this example the Node API method <code>fs.readFile</code> is asynchronous, but that doesn&#8217;t necessarily mean it&#8217;s non-blocking underneath. As the libuv book points out, socket (network) code is non-blocking, but filesystems are more complicated. Some things are event-based (kqueue), others use threads, and I&#8217;m currently trying to work out what Windows is doing (I&#8217;m only a libuv tourist for now).</p>

<p>I&#8217;m collating my notes on libuv for a talk on Node&#8217;s internals at <a href='http://greatbritishnodeconf.co.uk/'>The Great British Node Conference</a>. The talk started more as a walkthrough of the core modules and <code>binding</code>, but I enjoyed looking at libuv in more detail so hopefully I can fit some of this stuff in there. It&#8217;d be good to see you there!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/09/25/node-roundup">Node Roundup: 0.10.19, klei-migrate, division</a></h2>
      <div class="meta">
        <span class="date">25 Sep 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/09/25/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#npm">npm</a>
          
            <a href="/tags.html#cluster">cluster</a>
          
            <a href="/tags.html#databases">databases</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='node_01019_released'>Node 0.10.19 Released</h3>

<p><a href='http://blog.nodejs.org/2013/09/24/node-v0-10-19-stable/'>Node 0.10.19</a> was released yesterday. This version updates uv, npm, and also some core modules: readline, stream, and tls.</p>

<p>When you read <code>uv: Upgrade to v0.10.17</code> in the release notes, don&#8217;t you wonder what that means? If you&#8217;re interested in the changes in libuv, all you need to do is checkout the relevant tag from GitHub. In this case it&#8217;s <a href='https://github.com/joyent/libuv/tree/v0.10.17'>libuv/tree/v0.10.17</a>:</p>
<div class='highlight'><pre><code class='text'>2013.09.25, Version 0.10.17 (Stable)
Changes since version 0.10.16:

* build: remove GCC_WARN_ABOUT_MISSING_NEWLINE (Ben Noordhuis)
* darwin: fix 10.6 build error in fsevents.c (Ben Noordhuis)
</code></pre>
</div>
<p>If you switch to <a href='https://github.com/joyent/libuv/blob/v0.11.13/ChangeLog'>0.11.13</a>, the latest unstable release, you&#8217;ll see a whole load of interesting changes &#8211; <code>uv_fs_stat</code> has been rewritten, <code>FSEventStream</code> is now shared between multiple filesystem watchers, so it removes the limit on the maximum number of file watchers that can be created on OS X. These are just some random changes that caught my eye, there are plenty more.</p>

<p>These libuv changes have a direct impact on Node&#8217;s filesystem and networking modules, so it&#8217;s worth paying attention if you can.</p>

<h3 id='kleimigrate'>klei-migrate</h3>

<p>klei-migrate (GitHub: <a href='https://github.com/klei-dev/migrate'>klei-dev / migrate</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/klei-migrate'>klei-migrate</a>) by Joakim Bengtson is a database independent migration command-line tool. It also works as a module, and has a <a href='https://github.com/klei-dev/grunt-klei-migrate'>Grunt plugin</a>.</p>

<p>Migrations can be created with <code>klei-migrate new</code>, and then run with <code>klei-migrate run</code>. There are also other commands designed to help deal with switching between git branches, which can be tied into a post-checkout hook.</p>

<h3 id='division'>division</h3>

<p>division (GitHub: <a href='https://github.com/codename-/division'>codename- / division</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/division'>division</a>) is another cluster module wrapper:</p>

<blockquote>
<p>division provides an easy to use, chainable API, with some built-in extensions (like signals handlers) and is built with performance, zero-downtime restart (of workers), stability and simplicity in mind. The main advantage of division is that it does not depend of other modules - less dependencies equal less places where something could went wrong.</p>
</blockquote>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>division</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;division&#39;</span><span class='p'>);</span>
<span class='kd'>var</span> <span class='nx'>cluster</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>division</span><span class='p'>();</span>

<span class='c1'>// Configuration for development environment</span>
<span class='nx'>cluster</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='s1'>&#39;development&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// Put your development configuration here</span>
  <span class='nx'>cluster</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;args&#39;</span><span class='p'>,</span> <span class='p'>[</span><span class='s1'>&#39;--some-process-args&#39;</span><span class='p'>,</span> <span class='s1'>&#39;send-to-workers&#39;</span><span class='p'>]);</span>
<span class='p'>});</span>

<span class='nx'>cluster</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='s1'>&#39;production&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// Put your production configuration here</span>
  <span class='nx'>cluster</span><span class='p'>.</span><span class='nx'>enable</span><span class='p'>(</span><span class='s1'>&#39;silent&#39;</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>cluster</span><span class='p'>.</span><span class='nx'>configure</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;path&#39;</span><span class='p'>,</span> <span class='s1'>&#39;app.js&#39;</span><span class='p'>);</span>
<span class='p'>});</span>

<span class='nx'>cluster</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;size&#39;</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>);</span>
<span class='nx'>cluster</span><span class='p'>.</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;debug&#39;</span><span class='p'>).</span><span class='nx'>use</span><span class='p'>(</span><span class='s1'>&#39;signals&#39;</span><span class='p'>);</span>

<span class='c1'>// Start your application as a cluster!</span>
<span class='nx'>cluster</span><span class='p'>.</span><span class='nx'>run</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// `this` is pointing to the Master instance</span>
<span class='p'>});</span>
</code></pre>
</div>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/09/24/jquery-roundup">jQuery Roundup: 2.1 Beta, dna.js</a></h2>
      <div class="meta">
        <span class="date">24 Sep 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/09/24/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#templates">templates</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_111_and_21_beta_1'>jQuery 1.11 and 2.1 Beta 1</h3>

<p><a href='http://blog.jquery.com/2013/09/19/jquery-1-11-and-2-1-beta-1-released/'>jQuery 1.11 and 2.1 Beta 1</a> have been released. The biggest news is jQuery now supports AMD, and is built with it. Internal dependencies are also managed with Bower.</p>

<p>By using AMD and Bower the jQuery developers are showing that they&#8217;re receptive to the needs of modern client-side developers.</p>

<h3 id='dnajs'>dna.js</h3>

<p><a href='http://dnajs.org/'>dna.js</a> (GitHub: <a href='https://github.com/dnajs/dna.js'>dnajs / dna.js</a>, License: <em>GPLv3/MIT</em>, jQuery: <a href='http://plugins.jquery.com/dna/'>dna</a>) by Dem Pilafian is a template library that uses valid HTML rather than a new syntax or inline JavaScript templates. It clones an element as many times as you need, and interpolates values.</p>

<p>A template looks like this:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div&gt;</span>
  <span class='nt'>&lt;h2&gt;</span>Featured Books<span class='nt'>&lt;/h2&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;book&quot;</span> <span class='na'>class=</span><span class='s'>&quot;dna-template&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;div&gt;</span>Title:  <span class='nt'>&lt;span&gt;</span>~~title~~<span class='nt'>&lt;/span&gt;&lt;/div&gt;</span>
    <span class='nt'>&lt;div&gt;</span>Author: <span class='nt'>&lt;span&gt;</span>~~author~~<span class='nt'>&lt;/span&gt;&lt;/div&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>And you can clone it with <code>dna.clone(&#39;book&#39;, { title: &#39;The DOM&#39;, author: &#39;Jan&#39; })</code>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/09/23/node-piglow">Node PiGlow</a></h2>
      <div class="meta">
        <span class="date">23 Sep 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/09/23/node-piglow/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#hardware">hardware</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='image'>
  <img src='/images/posts/piglow.png' alt='' />
  <small>The PiGlow in action.</small>
</div>
<p>The <a href='http://shop.pimoroni.com/products/piglow'>PiGlow</a> is a small board for the Raspberry Pi that adds 18 single colour LEDs. Each can be controlled through I2C over the GPIO header, and you can even dim LEDs.</p>

<p>node-piglow (GitHub: <a href='https://github.com/zaphod1984/node-piglow'>zaphod1984 / node-piglow</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/piglow'>piglow</a>) by Manuel Ernst is a module for talking to the PiGlow. It uses <a href='https://npmjs.org/package/i2c'>i2c</a> and allows you to address the LEDs like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>piGlow</span><span class='p'>.</span><span class='nx'>l_0_0</span> <span class='o'>=</span> <span class='mi'>100</span><span class='p'>;</span> <span class='c1'>// lights up the first LED in the first LEG with a brightness of 100</span>
<span class='nx'>piGlow</span><span class='p'>.</span><span class='nx'>l_0_0</span><span class='p'>;</span> <span class='c1'>// lights up the first LED of the first LEG with maximum brightness (255)</span>

<span class='nx'>piGlow</span><span class='p'>.</span><span class='nx'>leg_0</span> <span class='o'>=</span> <span class='mi'>100</span><span class='p'>;</span> <span class='c1'>// lights up the first leg (8 consecutive LEDs) with brightness of 100</span>

<span class='nx'>piGLow</span><span class='p'>.</span><span class='nx'>leg_0</span><span class='p'>;</span> <span class='c1'>// maximum brightness for the first leg</span>

<span class='nx'>piGlow</span><span class='p'>.</span><span class='nx'>ring_0</span> <span class='o'>=</span> <span class='mi'>100</span><span class='p'>;</span> <span class='c1'>// sets LED 1 of leg 1, LED 1 of leg 2 and LED 1 of leg 3 to 100</span>

<span class='nx'>iGlow</span><span class='p'>.</span><span class='nx'>ring_0</span><span class='p'>;</span> <span class='c1'>// sets LED 1 of leg 1, LED 1 of leg 1 and LED 1 of leg 2 to 255</span>
</code></pre>
</div>
<p>Manuel made <a href='https://github.com/zaphod1984/node-piglow-load'>node-piglow-load</a> with it which uses the PiGlow to visualise system load. Since the API is very simple you could hook it up to lots of other interesting things, perhaps build status from your next big Node project. I&#8217;ve had my eye on the PiGlow for a few weeks for fun little hardware projects so I think node-piglow might make me get my wallet out.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/09/20/ycombinator">JavaScript Y Combinator</a></h2>
      <div class="meta">
        <span class="date">20 Sep 2013</span>
        | <span class="author">By Michael Hurley</span>
        | <span class="comments"><a href="/2013/09/20/ycombinator/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#functional">functional</a>
          
            <a href="/tags.html#guest-posts">guest-posts</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
This is a guest post by Michael Hurley.  The original is here: <a href='http://buzzdecafe.github.io/code/2013/09/05/javascript-y-combinator/'>JavaScript Y Combinator</a>.
</div>
<p>At the end of <a href='http://www.amazon.com/The-Little-Schemer-4th-Edition/dp/0262560992'>The Little Schemer</a>, the authors lead you step-by-step through the process of deriving the Y combinator. They do this repeatedly abstracting a <code>length</code> function&#8211;and then magically, the Y combinator appears. It is a pretty neat trick, and certainly mind-bending on your first read through the book.</p>

<p>Since JavaScript has first-class functions, we can derive the Y combinator in JavaScript as well. I will take a different approach than <em>The Little Schemer</em>. This approach owes a lot to a couple of blog posts I read on the subject<sup><a href='#notes'>1</a></sup>.</p>

<p>Since this is a post about recursive functions, then we can use that old chestnut, <code>factorial</code>. Here is a possible implementation of <code>factorial</code> in JavaScript:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>basicFactorial</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='nx'>n</span> <span class='o'>===</span> <span class='mi'>0</span> <span class='o'>?</span> <span class='mi'>1</span> <span class='o'>:</span> <span class='nx'>n</span> <span class='o'>*</span> <span class='nx'>basicFactorial</span><span class='p'>(</span><span class='nx'>n</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>);</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Let&#8217;s start by making a non-recursive <code>basicFactorial</code>, which we&#8217;ll call <code>nonRecursive</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>n</span> <span class='o'>===</span> <span class='mi'>0</span> <span class='o'>?</span> <span class='mi'>1</span> <span class='o'>:</span> <span class='nx'>n</span> <span class='o'>*</span> <span class='nx'>f</span><span class='p'>(</span><span class='nx'>n</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>);</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>All we&#8217;ve done here is replace the recursive call of <code>basicFactorial</code>. Instead, we pass in a function that will get called. We can pass any function that returns something that supports the <code>*</code> operator:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>nonRecursive</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='mi'>0</span><span class='p'>;</span> <span class='p'>})(</span><span class='mi'>100</span><span class='p'>);</span> <span class='c1'>// =&gt; 0</span>
<span class='nx'>nonRecursive</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='mi'>1</span><span class='p'>;</span> <span class='p'>})(</span><span class='mi'>100</span><span class='p'>);</span> <span class='c1'>// =&gt; 100</span>
<span class='nx'>nonRecursive</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='mi'>10</span><span class='p'>;</span> <span class='p'>})(</span><span class='mi'>100</span><span class='p'>);</span> <span class='c1'>// =&gt; 1000</span>
<span class='c1'>// ... etc.</span>
</code></pre>
</div>
<p>But it starts to get a little interesting when we pass <code>basicFactorial</code> in there. Then we get back &#8230; <code>basicFactorial</code>!</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>basicFactorial</span><span class='p'>)(</span><span class='mi'>4</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>basicFactorial</span><span class='p'>(</span><span class='mi'>4</span><span class='p'>);</span> 
<span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>basicFactorial</span><span class='p'>)(</span><span class='mi'>10</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>basicFactorial</span><span class='p'>(</span><span class='mi'>10</span><span class='p'>);</span> 
<span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>basicFactorial</span><span class='p'>)(</span><span class='mi'>17</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>basicFactorial</span><span class='p'>(</span><span class='mi'>17</span><span class='p'>);</span>
<span class='c1'>// ... etc.</span>
</code></pre>
</div>
<p>In other words, <code>basicFactorial</code> is a <a href='http://mathworld.wolfram.com/FixedPoint.html'>fixed point</a> of the function <code>nonRecursive</code>.</p>

<p>This is pointless here, since we have already defined <code>basicFactorial</code>. But suppose we had not defined <code>basicFactorial</code>. Wouldn&#8217;t it be nice if there was a function that we could pass <code>nonRecursive</code> to that would return the fixed point of it, i.e. the <code>factorial</code> function?</p>

<p>That is what the Y combinator does. Pass <code>nonRecursive</code> to <code>Y</code>, and out comes the factorial function:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Y</span><span class='p'>(</span><span class='nx'>nonRecursive</span><span class='p'>)(</span><span class='mi'>100</span><span class='p'>);</span> <span class='c1'>// 9.33262154439441e+157</span>
</code></pre>
</div>
<p>Note that:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Y</span><span class='p'>(</span><span class='nx'>nonRecursive</span><span class='p'>)(</span><span class='mi'>100</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>basicFactorial</span><span class='p'>)(</span><span class='mi'>100</span><span class='p'>);</span>
</code></pre>
</div>
<p>Or in other words:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Y</span><span class='p'>(</span><span class='nx'>nonRecursive</span><span class='p'>)(</span><span class='mi'>100</span><span class='p'>)</span> <span class='o'>===</span> <span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>Y</span><span class='p'>(</span><span class='nx'>nonRecursive</span><span class='p'>))(</span><span class='mi'>100</span><span class='p'>);</span>
</code></pre>
</div>
<p>So if we have <code>Y</code>, we do not need to define <code>basicFactorial</code> <em>at all</em>, we let <code>Y</code> derive it from the non-recursive function <code>nonRecursive</code>. Now let&#8217;s look at it from the other direction, and build up to <code>Y</code>. Here again, is the functional <code>nonRecursive</code> that we want to calculate the fixed point of:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>n</span> <span class='o'>===</span> <span class='mi'>0</span> <span class='o'>?</span> <span class='mi'>1</span> <span class='o'>:</span> <span class='nx'>n</span> <span class='o'>*</span> <span class='nx'>f</span><span class='p'>(</span><span class='nx'>n</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>);</span>
<span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>As noted above, pass <code>basicFactorial</code> in, and <code>nonRecursive</code> returns <code>basicFactorial</code>. Notice that we have pretty much defined factorial in the body of <code>nonRecursive</code>: <code>return n === 0 ? 1 : n * f(n-1);</code>&#8211;why not use that? So here&#8217;s our next try: Apply <code>nonRecursive</code> to itself. This requires a small change to the body of <code>nonRecursive</code>, to self-apply the passed-in function to get the body out and apply it to the inner argument.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>n</span> <span class='o'>===</span> <span class='mi'>0</span> <span class='o'>?</span> <span class='mi'>1</span> <span class='o'>:</span> <span class='nx'>n</span> <span class='o'>*</span> <span class='nx'>f</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)(</span><span class='nx'>n</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>);</span> 
  <span class='p'>};</span>
<span class='p'>}</span>
<span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>nonRecursive</span><span class='p'>)(</span><span class='mi'>5</span><span class='p'>);</span> <span class='c1'>// =&gt; 120</span>
</code></pre>
</div>
<p>Now we want to isolate the fixed point function. Let&#8217;s wrap that in a function <code>g</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>nonRecursive</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>g</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>q</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='k'>return</span> <span class='nx'>n</span> <span class='o'>===</span> <span class='mi'>0</span> <span class='o'>?</span> <span class='mi'>1</span> <span class='o'>:</span> <span class='nx'>n</span> <span class='o'>*</span> <span class='nx'>q</span><span class='p'>(</span><span class='nx'>n</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>);</span>
      <span class='p'>};</span>
    <span class='p'>};</span>
    <span class='k'>return</span> <span class='nx'>g</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>))(</span><span class='nx'>x</span><span class='p'>);</span>
  <span class='p'>};</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Since inner function <code>g</code> does not depend on anything in closure, we can pull it out:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>g</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>n</span> <span class='o'>===</span> <span class='mi'>0</span> <span class='o'>?</span> <span class='mi'>1</span> <span class='o'>:</span> <span class='nx'>n</span> <span class='o'>*</span> <span class='nx'>f</span><span class='p'>(</span><span class='nx'>n</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>);</span>
  <span class='p'>};</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The pulled-out function may look familiar&#8211;it&#8217;s <code>nonRecursive</code> again. Here&#8217;s what&#8217;s left over after <code>g</code> (a.k.a. <code>nonRecursive</code>) is pulled out; let&#8217;s call it <code>almostY</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>almostY</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>g</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>))(</span><span class='nx'>x</span><span class='p'>);</span>
  <span class='p'>};</span>
<span class='p'>}</span>
<span class='nx'>almostY</span><span class='p'>(</span><span class='nx'>almostY</span><span class='p'>)(</span><span class='mi'>5</span><span class='p'>);</span> <span class='c1'>// =&gt; 120</span>
</code></pre>
</div>
<p>We&#8217;ve pulled <code>g</code> out of <code>almostY</code>, but <code>almostY</code> still depends on <code>g</code>. The final step is to wrap <code>almostY</code> in a function that takes the functional <code>g</code> as an argument. Then <code>almostY</code> will have no dependencies.</p>

<p>So, let&#8217;s wrap it in a function that takes our non-recursive factorial functional and returns the fixed point of it. And since this is the last step, let&#8217;s call that function <code>Y</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>Y</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>p</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>h</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>x</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>return</span> <span class='nx'>f</span><span class='p'>(</span><span class='nx'>h</span><span class='p'>(</span><span class='nx'>h</span><span class='p'>))(</span><span class='nx'>x</span><span class='p'>);</span>
    <span class='p'>};</span>
  <span class='p'>};</span>
  <span class='k'>return</span> <span class='nx'>p</span><span class='p'>(</span><span class='nx'>p</span><span class='p'>);</span>
<span class='p'>}</span>

<span class='nx'>Y</span><span class='p'>(</span><span class='nx'>g</span><span class='p'>)(</span><span class='mi'>6</span><span class='p'>);</span> <span class='c1'>// =&gt; 720</span>
</code></pre>
</div>
<p>Holy crap! It works! But it&#8217;s not just for factorial&#8211;<code>Y</code> will provide a fixed point for any unary function, e.g.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>nonRecursiveFibonacci</span><span class='p'>(</span><span class='nx'>f</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>return</span> <span class='nx'>n</span> <span class='o'>&lt;</span> <span class='mi'>2</span> <span class='o'>?</span> <span class='nx'>n</span> <span class='o'>:</span> <span class='nx'>f</span><span class='p'>(</span><span class='nx'>n</span><span class='o'>-</span><span class='mi'>1</span><span class='p'>)</span> <span class='o'>+</span> <span class='nx'>f</span><span class='p'>(</span><span class='nx'>n</span><span class='o'>-</span><span class='mi'>2</span><span class='p'>);</span> 
  <span class='p'>};</span>
<span class='p'>}</span>
<span class='nx'>Y</span><span class='p'>(</span><span class='nx'>nonRecursiveFibonacci</span><span class='p'>)(</span><span class='mi'>10</span><span class='p'>);</span> <span class='c1'>// =&gt; 55</span>
</code></pre>
</div>
<p>As presented, this version of <code>Y</code> can only handle unary functions, and it will blow up the stack for relatively low values of <code>n</code>. It is straightforward to extend <code>Y</code> to handle functions of any arity, and to memoize it.</p>

<h3 id='notes'>Notes</h3>

<ol>
<li>I found these articles helpful: <a href='http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/'>Fixed-point combinators in JavaScript: Memoizing recursive functions</a> and <a href='http://blog.jcoglan.com/2008/01/10/deriving-the-y-combinator/'>Deriving the Y combinator</a>.</li>
</ol>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/09/19/underscore">Underscore, Array.prototype, and You</a></h2>
      <div class="meta">
        <span class="date">19 Sep 2013</span>
        | <span class="author">By The Angry JavaScript Nerd</span>
        | <span class="comments"><a href="/2013/09/19/underscore/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#underscore">underscore</a>
          
        </span>
      </div>
      <div class="preview">
        <p>What&#8217;s the most dependent module on npm? <a href='http://underscorejs.org/'>Underscore.js</a>! Why do people use it? Presumably because they can&#8217;t be bothered to learn how JavaScript works.</p>

<p>There are things I like about Underscore. No global meddling, sane internals &#8211; it&#8217;s a solid piece of work. But I occasionally find myself working with programmers who are probably better than me yet have weaker JavaScript skills, and they reach for Underscore like a drunk reaching for cheap gin.</p>

<p>At this point I stay their hand and point to <a href='http://es5.github.io/#x15.4.4'>Annotated ECMAScript</a>, highlighting the superpowers baked into <code>Array.prototype</code>. Granted it lacks some of the things Underscore has, but it often does what you want.</p>

<p>Mozilla&#8217;s documentation is also good because it shows you how to duplicate the functionality with lengthy code samples, which is educational if you take the time to read it.</p>

<p>If this is new to you or you&#8217;re a little uncomfortable with <code>Array.prototype</code>, start with <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach'>forEach</a> then <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map'>map</a> and <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some'>some</a>. They&#8217;re the methods that crop up in my own code a lot.</p>

<p>Another related JavaScript quirk is array type checking. Because JavaScript says <code>typeof [1, 2, 3]</code> is <code>&#39;object&#39;</code> you might want to pack your bags and give up altogether. I don&#8217;t blame you. But hiding in that ES5 documentation is a beastie called <code>Array.isArray</code>. You&#8217;ll find it in <code>util</code> in Node, which is puzzling &#8211; you&#8217;ll be OK using <code>Array.isArray([1, 2, 3])</code>.</p>

<p>I don&#8217;t think it&#8217;s a bad thing to depend on Underscore, but it makes me feel like people don&#8217;t learn Node or indeed JavaScript well enough before flinging their modules up on npm.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page10">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <strong>11</strong>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <a href="/page21">21</a>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page12">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

