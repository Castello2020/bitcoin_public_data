http://dailyjs.com/2012/07/23/js101-scope/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 12:20:11 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:54 GMT
ETag: "104446-626c-4fedef2a5f580"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 6972
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: JS101: A Brief Lesson on Scope</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <h2 class="post"><a href="/2012/07/23/js101-scope">JS101: A Brief Lesson on Scope</a></h2>

<div class="meta">
  23 Jul 2012 |
  <span class="author">By Alex Young</span> |
  <span class="tags">
    <img alt="Tags" class="icon" src="/images/tag.gif" />
    
      <a href="/tags.html#js101">js101</a>
    
      <a href="/tags.html#tutorials">tutorials</a>
    
      <a href="/tags.html#language">language</a>
    
      <a href="/tags.html#beginner">beginner</a>
    
  </span>
</div>

<div id="post">
<p>JavaScript is a language that demands a rigorous understanding of its scoping rules. One reason for this is JavaScript looks deceptively like other languages, but subtle differences in the rules that govern identifier visibility make it unexpectedly difficult to master.</p>

<p>Here&#8217;s some computer science so you can impress your friends and wayward wizards: <em>scope</em> refers to the visibility of a given identifier within a program. Sometimes we talk about <em>function scope</em> and <em>block scope</em>. I&#8217;ve already covered function scope in this series, but JavaScript doesn&#8217;t have <em>block scope</em>. In this context, <a href='http://es5.github.com/#x12.1'>block</a> refers to control structures like <code>if</code> statements and <code>for</code> loops &#8211; a block of statements grouped by curly braces.</p>

<h3 id='declaring_variables_and_functions'>Declaring Variables and Functions</h3>

<p>Variables can be defined with the <code>var</code> statement, and are initialised to <code>undefined</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>a</span><span class='p'>;</span> <span class='c1'>// undefined</span>
<span class='kd'>var</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='s1'>&#39;hello&#39;</span><span class='p'>;</span>
</code></pre>
</div>
<p>The scoping of these statements is dependent on where they&#8217;re declared. If <code>var</code> statements don&#8217;t appear inside a function, they&#8217;re globally accessible:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span>

<span class='kd'>function</span> <span class='nx'>sum</span><span class='p'>(</span><span class='nx'>b</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>return</span> <span class='nx'>a</span> <span class='o'>+</span> <span class='nx'>b</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='missing_'>Missing <code>var</code></h3>

<p>Problems start to occur when a <code>var</code> statement is forgotten:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>example</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>a</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span>
  <span class='nx'>b</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span>
  <span class='k'>return</span> <span class='nx'>a</span> <span class='o'>+</span> <span class='nx'>b</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>These variables are not local to the <code>example</code> function, they&#8217;re actually global. If <code>a</code> or <code>b</code> already existed, then their values will be overwritten.</p>

<p>Accidentally leaving out a <code>var</code> statement is surprisingly easy, and could potentially cause irritating bugs. Tools like <a href='http://www.jslint.com/'>JSLint</a> will attempt to use <em>static analysis</em> to find such errors.</p>

<h3 id='variable_declaration_styles'>Variable Declaration Styles</h3>

<p>Some people like to group <code>var</code> statements together:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>,</span>
    <span class='nx'>b</span> <span class='o'>=</span> <span class='mi'>2</span><span class='p'>,</span>
    <span class='nx'>c</span> <span class='o'>=</span> <span class='mi'>3</span><span class='p'>;</span>
</code></pre>
</div>
<p>What would happen if a comma was missed by mistake?</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>example</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='mi'>1</span>
      <span class='nx'>b</span> <span class='o'>=</span> <span class='mi'>2</span><span class='p'>,</span>
      <span class='nx'>c</span> <span class='o'>=</span> <span class='mi'>3</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='nx'>example</span><span class='p'>();</span>

<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>a</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>b</span><span class='p'>);</span>
<span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='k'>typeof</span> <span class='nx'>c</span><span class='p'>);</span>
</code></pre>
</div>
<p>Running this will show that while <code>a</code> is <code>undefined</code> and therefore local to <code>example</code>, the other variables are global.</p>

<p>The reason some developers place commas before lists of variable declarations is to make it easier to see if a comma has been forgotten:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='mi'>1</span>
  <span class='p'>,</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='mi'>2</span>
  <span class='p'>,</span> <span class='nx'>c</span> <span class='o'>=</span> <span class='mi'>3</span>
  <span class='p'>;</span>
</code></pre>
</div>
<p>However, the <a href='http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml'>Google JavaScript Style Guide</a> recommends using a <code>var</code> statement on every line, to avoid the problem altogether.</p>

<h3 id='no_block_scope'>No Block Scope</h3>

<p>Variables and functions are visible within the current function, regardless of blocks. This is amazingly confusing because it prevents us from using control structures to declare functions and variables in a dynamic way.</p>

<p>Defining variables in blocks may confuse programmers who work with other languages:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>example</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='c1'>// Do not do this</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='kd'>var</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='mi'>3</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span>
    <span class='c1'>// Do stuff with `a`</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Since there is no block scope, the previous example should be written like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>example</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>i</span><span class='p'>,</span> <span class='nx'>a</span><span class='p'>;</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='mi'>3</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>a</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span>
    <span class='c1'>// Do stuff with `a`</span>
  <span class='p'>}</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='hoisting'>Hoisting</h3>

<p>Have you ever noticed how some things appear to be in scope even though their definition appears later in the file? The colloquial term for this is <em>hoisting</em>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>example</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>);</span>
  <span class='kd'>var</span> <span class='nx'>a</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='nx'>example</span><span class='p'>();</span>
</code></pre>
</div>
<p>Running this will log <code>undefined</code> rather than <code>1</code>. The term <em>hoisting</em> isn&#8217;t in the ECMAScript 3 or 5 standards, but the behaviour is documented in <a href='http://es5.github.com/#x10.5'>10.5 Declaration Binding Instantiation</a>, in the line that starts <em>For each</em>VariableDeclaration_ and <em>VariableDeclarationNoIn</em> <em>d</em> in code, in source text order do_. The reason the value is <code>undefined</code> rather than <code>1</code> is also explained by the specification:</p>

<blockquote>
<p>A variable with an <em>Initialiser</em> is assigned the value of its <em>AssignmentExpression</em> when the <em>VariableStatement</em> is executed, not when the variable is created.</p>
</blockquote>

<h3 id='confusing_closures'>Confusing Closures</h3>

<p>The following example defines three functions and assigns them as methods to an object. Each method is then called after the loop has finished.</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>example</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>o</span> <span class='o'>=</span> <span class='p'>{},</span> <span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span>
  <span class='k'>for</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nx'>i</span> <span class='o'>&lt;</span> <span class='mi'>3</span><span class='p'>;</span> <span class='nx'>i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>o</span><span class='p'>[</span><span class='nx'>i</span><span class='p'>]</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>i</span><span class='p'>);</span> <span class='p'>};</span>
  <span class='p'>}</span>
  <span class='nx'>o</span><span class='p'>[</span><span class='mi'>0</span><span class='p'>]();</span>
  <span class='nx'>o</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]();</span>
  <span class='nx'>o</span><span class='p'>[</span><span class='mi'>2</span><span class='p'>]();</span>
<span class='p'>}</span>

<span class='nx'>example</span><span class='p'>();</span>
</code></pre>
</div>
<p>The output will be <code>3</code> each time, because the closure is bound to the function scope, not the (non-existent) block scope. Intermediate JavaScript programmers often make this mistake.</p>

<h3 id='conclusion'>Conclusion</h3>

<p>If understanding JavaScript&#8217;s scoping rules was a video game, then the levels would be as follows:</p>

<ul>
<li>Title Screen: Press <strong>[Start]</strong> to begin (I always press the other buttons to see if it starts anyway)</li>

<li>Level 1: Function scope</li>

<li>Level 2: No block scope</li>

<li>Level 3: Missing <code>var</code></li>

<li>Level 4: Hoisting</li>

<li>Level 5: Closures</li>
</ul>

<p>The scoping story isn&#8217;t complete, and worth noting is the fact that <a href='http://kangax.github.com/es5-compat-table/non-standard/'>ECMAScript extensions</a> can subtly alter scoping behaviour for certain things. If you&#8217;re interested in going beyond this 101 introduction level article, then try reading Angus Croll&#8217;s <a href='http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/'>Function Declarations vs. Function Expressions</a> to see how some of these scoping rules play out, and Dmitry Soshnikov&#8217;s <a href='http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/#this-binding'>post on ECMAScript&#8217;s lexical environments</a>.</p>

<h3 id='references'>References</h3>

<ul>
<li><a href='http://javascript.crockford.com/code.html'>Code Conventions for the JavaScript Programming Language</a> by Douglas Crockford</li>

<li>ECMAScript 5: <a href='http://es5.github.com/#x10.5'>10.5 Declaration Binding Instantiation</a></li>

<li><a href='http://www.jslint.com/'>JSLint</a></li>
</ul>
</div>

<div id="related">
  <h2>Other Recent Posts</h2>
  <ul class="related-posts">
    
      <li>
        <div>23 Jul 2014</div>
        <a href="/2014/07/23/typeframework">TypeFramework: A TypeScript Web Framework</a>
      </li>
    
      <li>
        <div>22 Jul 2014</div>
        <a href="/2014/07/22/typescript">TypeScript Week</a>
      </li>
    
      <li>
        <div>21 Jul 2014</div>
        <a href="/2014/07/21/is">Simplifying Conditional Statements with Is</a>
      </li>
    
  </ul>
</div>



<div><br clear="all" /></div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    var disqus_shortname = 'dailyjs';
    var disqus_url = 'http://dailyjs.com/2012/07/23/js101-scope/';
    // var disqus_identifier = 'unique_dynamic_id_1234';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

