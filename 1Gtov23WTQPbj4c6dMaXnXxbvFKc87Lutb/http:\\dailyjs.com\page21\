http://dailyjs.com/page21/
HTTP/1.1 200 OK
Date: Thu, 24 Jul 2014 12:59:10 GMT
Server: Apache/2.2.16 (Debian) DAV/2 SVN/1.6.12 PHP/5.3.3-7+squeeze19 with Suhosin-Patch mod_python/3.3.1 Python/2.6.6 Phusion_Passenger/3.0.7
Last-Modified: Wed, 23 Jul 2014 16:36:55 GMT
ETag: "e9371-2d516-4fedef2b537c0"
Accept-Ranges: bytes
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 40332
Connection: close
Content-Type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="readability-verification" content="WMMgm9NJRpLhScSjQYrbY8eang5M9LVB5RMtFNcU"/>
  <meta name="google-site-verification" content="8c4TegFWyWioqBSA_RyiKdOSR9g2JVNodKB4cmfXzcY" />
  <title>DailyJS: A JavaScript Blog</title>
  <meta name="author" content="DailyJS Staff" />
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://feeds.feedburner.com/dailyjs" />
  <link rel="stylesheet" href="/stylesheets/syntax.css" type="text/css" />
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" />
  <script src="/javascripts/jquery-1.5.1.min.js" type="text/javascript"></script>
  <script src="/javascripts/all.js" type="text/javascript"></script>
  <link href="https://plus.google.com/110075199769457074728/" rel="publisher" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <script type="text/javascript">
    // var disqus_developer = 1; 
  </script>
  <script type="text/javascript">
  var disqus_shortname = 'dailyjs';
  (function () {
    var s = document.createElement('script'); s.async = true;
    s.src = 'http://disqus.com/forums/dailyjs/count.js';
    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
  </script>
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-11413789-1");
  pageTracker._trackPageview();
  } catch(err) {}</script>
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>
<body>
  <div class="navbar">
    <div class="navbar-inner">
      <div class="container">
        <a class="brand" href="http://dailyjs.com">
          DailyJS
        </a>
      </div>
      <ul class="nav">
        <li class="twitter-button"><a href="https://twitter.com/dailyjs" class="twitter-follow-button" data-show-count="false">@dailyjs</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
        <li><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Ffacebook.com%2Fdailyjs&amp;layout=button_count&amp;show_faces=true&amp;width=90&amp;action=like&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:90px; height:21px;" allowTransparency="true"></iframe></li>
        <li><script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script><div class="g-plusone" data-size="medium" data-annotation="none"></div></li>
        <li><a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed24.png" alt="Feed" /></a></li>
      </ul>
      <div class="nav-collapse">
        <form class="navbar-search" action="http://www.google.com/search" method="get">
          <input name="sitesearch" type="hidden" value="dailyjs.com" />
          <input type="text" class="search-query" name="q" placeholder="Search">
        </form>
      </div>
    </div>
  </div>
  <div class="subnav">
    <ul class="nav nav-pills">
      <li><a href="/">Home</a></li>
      <li><a href="http://contact.dailyjs.com">Contact</a></li>
      <li><a href="/subscribe.html">Subscribe</a></li>
      <li><a href="/sponsored-content.html">Sponsorship</a></li>
    </ul>
  </div>
  <div id="container">
    <div id="content">
      <div class="posts">
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/09/node-roundup">Node Roundup: AsyncMachine, require-directory, sayeasy</a></h2>
      <div class="meta">
        <span class="date">09 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/09/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#audio">audio</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#async">async</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='asyncmachine'>AsyncMachine</h3>

<p><a href='https://github.com/TobiaszCudnik/asyncmachine'>AsyncMachine</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/asyncmachine'>asyncmachine</a>) by Tobiasz Cudnik is a state machine for declaring asynchronous logic. It&#8217;s written in TypeScript, and supports state definition using an object-oriented API.</p>

<p>Transitions between states are exposed using an <code>EventEmitter</code>, and promises are supported for &#8220;deferred state changes&#8221;. Although the project is written with TypeScript, the documentation includes a plain JavaScript example.</p>

<p>AsyncMachine isn&#8217;t based on a formalised state machine design, but it has an interesting blend of concepts from other finite state machine implementations, asynchronous programming in Node, and object-oriented design. It&#8217;s definitely got a lot of ideas on how to deal with state in an asynchronous environment.</p>

<h3 id='requiredirectory'>require-directory</h3>

<p><a href='https://github.com/TroyGoode/node-require-directory'>require-directory</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/require-directory'>require-directory</a>) by <a href='https://twitter.com/troygoode'>Troy Goode</a> allows directories to be loaded with <code>require</code> as if an <code>index.js</code> file had been used.</p>

<p>If you&#8217;ve got a project with an <code>index.js</code> file &#8211; let&#8217;s say it&#8217;s in <code>routes/</code>, and it looks like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>module</span><span class='p'>.</span><span class='nx'>exports</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>auth</span><span class='o'>:</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./auth&#39;</span><span class='p'>)</span>
<span class='p'>,</span> <span class='nx'>products</span><span class='o'>:</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./products&#39;</span><span class='p'>)</span>
<span class='p'>,</span> <span class='nx'>categories</span><span class='o'>:</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;./categories&#39;</span><span class='p'>)</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>When it&#8217;s loaded using <code>require(&#39;./routes&#39;)</code>, you&#8217;ll get an object with <code>auth</code>, <code>products</code>, and <code>categories</code>. Troy argues that this can cause maintenance problems, and prefers to write the <code>index.js</code> file like this: <code>module.exports = require(&#39;require-directory&#39;)(module);</code>.</p>

<p>Files can also be blacklisted and whitelisted, and <code>index.js</code> will be automatically ignored.</p>

<h3 id='sayeasy'>sayeasy</h3>

<p><a href='https://github.com/smithclay/sayeasy'>sayeasy</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/sayeasy'>sayeasy</a>) by Clay Smith is a RESTful wrapper around Mac OS X&#8217;s <code>say</code> command, created with Express. The author is using it to speak notifications in a continuous integration environment &#8211; you could have a sayeasy server in your office that speaks when tests start to fail.</p>

<p>It also has a command-line wrapper, allowing messages to be sent to a central sayeasy server.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/08/jquery-roundup">jQuery Roundup: ParamQuery Grid, Backbone.ViewDSL, Events Demo</a></h2>
      <div class="meta">
        <span class="date">08 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/08/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='paramquery_grid'>ParamQuery Grid</h3>

<p><img src='/images/posts/paramquery.png' alt='ParamQuery' /></p>

<p><a href='http://paramquery.com/'>ParamQuery Grid</a> (GitHub: <a href='https://github.com/paramquery/grid'>paramquery / grid</a>, License: <em>MIT</em>) by Paramvir Dhindsa is a table grid plugin that&#8217;s based on jQuery UI widgets. It supports sorting, row and cell selection, built-in and custom editing, resizing, and pagination.</p>

<p>The author has written <a href='http://paramquery.com/api'>full API documentation for ParamQuery</a>, and <a href='http://paramquery.com/tutorial'>an introductory tutorial</a>. Additional data formats can be supported with the <a href='http://paramquery.com/api#option-dataModel'>dataModel API</a>, but it works with XML and JSON out of the box.</p>

<h3 id='backboneviewdsl'>Backbone.ViewDSL</h3>

<p><a href='http://andreypopp.github.com/backbone.viewdsl/'>Backbone.ViewDSL</a> (GitHub: <a href='https://github.com/andreypopp/backbone.viewdsl'>andreypopp / backbone.viewdsl</a>, License: <em>BSD3</em>) by Andrey Popp is a DSL for defining <code>Backbone.View</code> hierarchies. Views can be automatically loaded (AMD is supported), instantiated, and interpolated.</p>

<p>The author&#8217;s example compares a ViewDSL class with a standard Backbone class:</p>
<div class='highlight'><pre><code class='coffeescript'><span class='k'>class</span> <span class='nx'>App</span> <span class='k'>extends</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>ViewDSL</span><span class='p'>.</span><span class='nx'>View</span>
  <span class='nv'>template: </span><span class='s'>&quot;&quot;&quot;</span>
<span class='s'>    &lt;h1&gt;&lt;/h1&gt;</span>
<span class='s'>    &lt;view name=&quot;app.views.Sidebar&quot; id=&quot;sidebar&quot; /&gt;</span>
<span class='s'>    &lt;view name=&quot;app.views.Content&quot; id=&quot;content&quot; /&gt;</span>
<span class='s'>    &lt;div class=&quot;footer&quot;&gt; by &lt;/div&gt;</span>
<span class='s'>    &quot;&quot;&quot;</span>
</code></pre>
</div>
<p>In that example, <code>app.views.Sidebar</code> refers to another <code>Backbone.View</code>. A <code>view</code> attribute is also supported, and views can be accessed with <code>Backbone.ViewDSL.View.from</code>. Although Andrey describes the library as &#8216;tiny&#8217;, it packs in other features including conditional DOM removal, and there are some <a href='http://metaskills.net/mocha-phantomjs/'>PhantomJS-powered Mocha tests</a> as well.</p>

<h3 id='events_demo'>Events Demo</h3>

<p><a href='http://liouh.com/jsevents/'>Events Demo</a> (GitHub: <a href='https://github.com/liouh/js-events-demo'>liouh / js-events-demo</a>) by Henry Liou is an interactive demo that shows how each property works on the event object jQuery passes to <code>.on</code>. It uses nested elements so you can see how <code>target</code> and <code>relatedTarget</code> change depending on which element the event was triggered on.</p>

<p>Given how many people confuse the target properties, it made me wonder if this would be better than the <a href='http://api.jquery.com/category/events/event-object/'>official jQuery documentation</a>. This project was sent in by Anthony Ettinger.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/07/oogl-jot-conference">OOGL, Jot, Conference</a></h2>
      <div class="meta">
        <span class="date">07 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/07/oogl-jot-conference/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#webgl">webgl</a>
          
            <a href="/tags.html#text">text</a>
          
            <a href="/tags.html#editor">editor</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='oogl'>OOGL</h3>

<p><img src='/images/posts/ooglejs.png' alt='oogle.js' /></p>

<p><a href='http://www.oogljs.com/'>OOGL</a> (GitHub: <a href='https://github.com/71104/oogl.js'>71104 / oogl.js</a>, License: <em>MIT</em>) by Alberto La Rocca is a thin object-oriented library to make WebGL easier to work with. It has asynchronous shader loading, texture and attribute array management, and a render loop implemented with <code>requestAnimationFrame</code> and a <code>setInterval</code> fallback.</p>

<p>The author has written an <a href='http://71104.github.com/oogl.js/doc/'>API reference for oogl.js</a>, and there are some <a href='http://71104.github.com/oogl.js/demos/'>oogle.js demos as well</a>.</p>

<h3 id='jot'>Jot</h3>

<p><img src='/images/posts/jotwiki.png' alt='Jot' /></p>

<p><a href='http://jotwiki.boutell.com/'>Jot</a> (GitHub: <a href='https://github.com/boutell/jot'>boutell / jot</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/node-jot'>node-jot</a>) by Tom Boutell is a text editor built with Express and some client-side libraries like <a href='http://code.google.com/p/rangy/'>Rangy</a>, and has some options for MongoDB as well.</p>

<p>Media files like photos and videos are supported, using a <em>widgets</em> system:</p>

<blockquote>
<p>Jot introduces &#8220;widgets,&#8221; separate editors for rich media items like photos, videos, pullquotes and code samples. Jot&#8217;s widgets handle these items much better than a rich text editor on its own.</p>
</blockquote>

<p>Also, Jot can be configured to send uploaded files to Amazon S3 or a custom backend solution. It uses ImageMagick to process image files.</p>

<p>It has the usual rich text editing features as well, and supports major browsers from IE7 up.</p>

<p>The author has provided instructions on how to integrate Jot with another Express application.</p>

<h3 id='conference'>Conference</h3>

<p><a href='http://github.com/axemclion/conference'>Conference</a> (GitHub: <a href='https://github.com/axemclion/conference'>axemclion / conference</a>, License: <em>MIT/GPL</em>) by Parashuram Narasimhan is a Backbone.js application that provides an example schedule for a conference. Designed to alleviate the symptoms of bad conference wi-fi, Conference stores the data about the conference locally to avoid requiring a data connection once it has been initially loaded.</p>

<p>I&#8217;ve seen conferences that use custom native mobile apps to do a similar thing, but this version would be suitable for a mobile browser as well (and free as it&#8217;s released under a permissive license). Anyway, it&#8217;s an interesting use of Backbone.js, and Parashuram would like to help conferences adopt it.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/04/controldeck-xlsx-inverted">Inverted, controldeck.js, xlsx</a></h2>
      <div class="meta">
        <span class="date">04 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/04/controldeck-xlsx-inverted/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#excel">excel</a>
          
            <a href="/tags.html#spreadsheets">spreadsheets</a>
          
            <a href="/tags.html#presentations">presentations</a>
          
            <a href="/tags.html#oo">oo</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='inverted'>Inverted</h3>

<p><a href='http://philmander.github.com/inverted/'>Inverted</a> (GitHub: <a href='https://github.com/philmander/inverted'>philmander / inverted</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/inverted'>inverted</a>) by Phil Mander is an <a href='http://en.wikipedia.org/wiki/Inversion_of_control'>inversion of control</a> container. Used in conjunction with AMD, Inverted uses a separate configuration file to express how classes are instantiated and how they interact. Once these defaults and relationships have been defined, an application context can be created, and instances of the classes can be used.</p>

<p>Phil has provided several examples on the Inverted site that use AMD, but he&#8217;s also included a CommonJS example that could be used with Node. The API is mostly based around callbacks. For example, fetching an instance is performed with <code>appContext.getProto(&#39;name&#39;, fn)</code>, where <code>fn</code> receives the instance as the first argument.</p>

<blockquote>
<p>JavaScript module loading systems such as the CommonJS and AMD manage the loading of your application&#8217;s dependencies, but they don&#8217;t actually inject dependencies and wire your code together. Inverted uses a separate application configuration file to define how your Javascript &#8216;classes&#8217; interact without needing to add any library specific code within your modules.</p>
</blockquote>

<h3 id='controldeckjs'>controldeck.js</h3>
<div class='image'>
  <img src='/images/posts/controljs.png' alt='' />
  <small>One of the controldeck.js demos.</small>
</div>
<p><a href='http://dfcb.github.com/controldeck.js/'>controldeck.js</a> (GitHub: <a href='https://github.com/dfcb/controldeck.js/'>dfcb / controldeck.js</a>, License: <em>MIT</em>) from Draftfcb in Chicago is a small Node web application that provides a remote control for HTML presentations. This offers a simple way of using a mobile phone to control a slideshow.</p>

<p><a href='http://socket.io/'>Socket.IO</a> is used to communicate between the controller and the slides, and the authors have demos running on <a href='http://www.appfog.com/'>AppFog</a>.</p>

<h3 id='xlsx'>xlsx</h3>

<p><a href='http://niggler.github.com/js-xlsx/'>xlsx</a> (GitHub: <a href='https://github.com/Niggler/js-xlsx'>Niggler / js-xlsx</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/xlsx'>xlsx</a>) by Niggler is an implementation of the ISO 29500 Office Open XML specification. The author states that it has been tested with some simple Excel 2011 files, but is still a nascent attempt at supporting the format.</p>

<p>It&#8217;s designed to work with Node and browsers, and the project&#8217;s homepage has a browser-based demo. This project was created in response to Stephen Hardy&#8217;s <a href='https://github.com/stephen-hardy/xlsx.js'>xlsx.js</a> project &#8211; there was a lengthy discussion on the license of the project which some felt is ambiguous: <a href='https://github.com/stephen-hardy/xlsx.js/issues/8'>stephen-hardy / xlsx.js, issue #8: Use a more permissive license</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/03/backbone-tutorial-6">Backbone.js Tutorial: Creating Lists</a></h2>
      <div class="meta">
        <span class="date">03 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/03/backbone-tutorial-6/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'><strong>Part 6: Creating Lists</strong></a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>82fe08e</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 82fe08e
</code></pre>
</div>
<h3 id='list_crud'>List CRUD</h3>

<p>The last few parts of this tutorial series have demonstrated how to talk to Google&#8217;s Tasks API and authenticate with OAuth. At this point, you should be able to sign in and see a list of task lists.</p>

<p>As we&#8217;ve seen, Backbone.js is based around RESTful APIs that speak in terms of CRUD (create, read, update and delete). In <a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4</a>, I explained how to write a custom <code>Backbone.sync</code> method that can communicate with Google&#8217;s APIs, but so far we&#8217;ve only implemented &#8220;read&#8221; functionality, which fetches task lists using <code>gapi.client.tasks</code>.</p>

<p>Now we really need to implement the full set of CRUD operations so users can manage lists. Part 4 showed how Google&#8217;s API maps to Backbone&#8217;s <code>sync</code> operations:</p>
<table class='amy'>
  <thead>
    <tr>
      <th>Google Tasks API</th><th>Backbone.sync Method</th><th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>insert</code></td><td><code>create</code></td><td>Create a new task.</td>
    </tr>
    <tr>
      <td><code>update</code></td><td><code>update</code></td><td>Update an existing task.</td>
    </tr>
    <tr>
      <td><code>delete</code></td><td><code>delete</code></td><td>Delete a task.</td>
    </tr>
    <tr>
      <td><code>list</code></td><td><code>read</code></td><td>Get a list of tasks.</td>
    </tr>
  </tbody>
</table>
<p>In this part we&#8217;ll add support for &#8220;create&#8221;, but as you&#8217;ll see the principles are very similar to the &#8220;read&#8221; implementation.</p>

<h3 id='creating_lists'>Creating Lists</h3>

<p>In order to create lists, several new components are required:</p>

<ol>
<li>Suitable buttons</li>

<li>A form template</li>

<li>Add and edit views</li>

<li>Controller code</li>
</ol>

<p>In Backbone.js, models and collections emit events. We&#8217;ve already created code to manage list item views, so all we need to do is hook this up to the event that fires when a new model is created and added to the <code>TaskLists</code> collection.</p>

<p>Mastering and exploiting events in this way is one of the tricks to writing manageable Backbone.js code.</p>

<h3 id='backbonesync'>Backbone.sync</h3>

<p>So far, <code>Backbone.sync</code> can only read lists from Google&#8217;s API. To make it capable of creating items we&#8217;ll need a little bit of extra code. This will build upon what we&#8217;ve already written, so it&#8217;ll be short and sweet.</p>

<p>Go back to <code>app/js/gapi.js</code> and change <code>Backbone.sync</code> to call <code>gapiRequest</code> when the <code>create</code> operation is invoked:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>requestContent</span> <span class='o'>=</span> <span class='p'>{};</span>
  <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>method</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;create&#39;</span><span class='o'>:</span>
      <span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>
      <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>].</span><span class='nx'>insert</span><span class='p'>(</span><span class='nx'>requestContent</span><span class='p'>);</span>
      <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
    <span class='k'>break</span><span class='p'>;</span>
</code></pre>
</div>
<p>This looks a lot like the &#8220;read&#8221; code. There is one more thing we need to do in this file &#8211; change <code>Backbone.gapiRequest</code> to deal with single resources. I&#8217;ve put the full code for the method below because it&#8217;s still short with the modifications for this tutorial:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>result</span><span class='p'>;</span>
  <span class='nx'>request</span><span class='p'>.</span><span class='nx'>execute</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>res</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>);</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>res</span><span class='p'>.</span><span class='nx'>items</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>items</span><span class='p'>;</span>
      <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
        <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>res</span><span class='p'>;</span>
      <span class='p'>}</span>
      <span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>,</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>request</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This looks to see if an array of items has been returned by Google&#8217;s API, or simply a single object. There&#8217;s an important lesson here though: <code>Backbone.sync</code> is sandwiched between other Backbone code, and is capable of providing Backbone with properties that will be used to set model attributes later on. This code doesn&#8217;t look like it does much, but the <code>success</code> callback will receive <code>result</code>, which will have an <code>id</code> property when models are created. Backbone will see this <code>id</code> property and use it to set the model&#8217;s <code>id</code> attribute, automatically!</p>

<p>Many Bothans died to bring us this information.</p>

<h3 id='template_junk'>Template Junk</h3>

<p>Open <code>app/js/templates/app.html</code> and update the <code>signed-in-container</code> <code>div</code> to contain a list and another container <code>div</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;ul</span> <span class='na'>class=</span><span class='s'>&quot;nav nav-tabs&quot;</span> <span class='na'>id=</span><span class='s'>&quot;top-nav&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;li</span> <span class='na'>class=</span><span class='s'>&quot;buttons&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;btn-group&quot;</span><span class='nt'>&gt;</span>
      <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn&quot;</span> <span class='na'>id=</span><span class='s'>&quot;add-list-button&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-plus&quot;</span><span class='nt'>&gt;</span>Add List<span class='nt'>&lt;/i&gt;&lt;/a&gt;</span>
      <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn&quot;</span> <span class='na'>id=</span><span class='s'>&quot;edit-list-button&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-cog&quot;</span><span class='nt'>&gt;</span>Edit List<span class='nt'>&lt;/i&gt;&lt;/a&gt;</span>
      <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn delete-list&quot;</span> <span class='na'>id=</span><span class='s'>&quot;delete-list-button&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-trash&quot;</span><span class='nt'>&gt;</span>Delete List<span class='nt'>&lt;/i&gt;&lt;/a&gt;</span>
    <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;/li&gt;</span>
<span class='nt'>&lt;/ul&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;content-container&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;list-editor&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;tasks-container&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>This has the &#8220;Add List&#8221; button that you&#8217;ll be able to use by the end of this tutorial, and it also has a <code>div</code> that&#8217;ll contain the list add/edit form.</p>

<p>Now open <code>app/js/templates/lists/form.html</code> and paste this in:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;fieldset&gt;</span>
  <span class='nt'>&lt;legend&gt;</span>
    <span class='nt'>&lt;span</span> <span class='na'>class=</span><span class='s'>&quot;form-title&quot;</span><span class='nt'>&gt;</span>Edit List<span class='nt'>&lt;/span&gt;</span>
    <span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;pull-right delete-list btn&quot;</span><span class='nt'>&gt;&lt;i</span> <span class='na'>class=</span><span class='s'>&quot;icon-trash&quot;</span><span class='nt'>&gt;&lt;/i&gt;&lt;/a&gt;</span>
  <span class='nt'>&lt;/legend&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;control-group&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;label</span> <span class='na'>class=</span><span class='s'>&quot;control-label&quot;</span> <span class='na'>for=</span><span class='s'>&quot;list_title&quot;</span><span class='nt'>&gt;</span>Title<span class='nt'>&lt;/label&gt;</span>
    <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;controls&quot;</span><span class='nt'>&gt;</span>
      <span class='nt'>&lt;input</span> <span class='na'>type=</span><span class='s'>&quot;text&quot;</span> <span class='na'>class=</span><span class='s'>&quot;input-xlarge&quot;</span> <span class='na'>name=</span><span class='s'>&quot;title&quot;</span> <span class='na'>id=</span><span class='s'>&quot;list_title&quot;</span> <span class='na'>value=</span><span class='s'>&quot;&quot;</span> <span class='na'>placeholder=</span><span class='s'>&quot;The list&#39;s title&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/fieldset&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;form-actions&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>type=</span><span class='s'>&quot;submit&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn btn-primary&quot;</span><span class='nt'>&gt;</span>Save Changes<span class='nt'>&lt;/button&gt;</span>
  <span class='nt'>&lt;button</span> <span class='na'>class=</span><span class='s'>&quot;cancel btn&quot;</span><span class='nt'>&gt;</span>Close<span class='nt'>&lt;/button&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>This is the body of a form that will be used to add or edit lists. It uses the variable interpolation features we&#8217;ve already seen in this tutorial series.</p>

<h3 id='add_and_edit_views'>Add and Edit Views</h3>

<p>I&#8217;m only going to cover adding lists in this tutorial, we&#8217;ll get to the other functionality later (mainly because I&#8217;ve been writing this for three hours and I have client work to do and I need to pay the bills). Bill-paying aside, what&#8217;s the difference between an &#8220;add&#8221; and &#8220;edit&#8221; view? The <code>form.html</code> template can be reused by both, so why don&#8217;t we create an edit view and just inherit from it to make the list add view?</p>

<p>Open <code>app/js/views/lists/edit.js</code> and add this new view:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/lists/form.html&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>EditListView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;form&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;form-horizontal well edit-list&#39;</span><span class='p'>,</span>
    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;submit&#39;</span><span class='o'>:</span> <span class='s1'>&#39;submit&#39;</span>
    <span class='p'>,</span> <span class='s1'>&#39;click .cancel&#39;</span><span class='o'>:</span> <span class='s1'>&#39;cancel&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;change&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>el</span><span class='p'>);</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>()));</span>

      <span class='k'>if</span> <span class='p'>(</span><span class='o'>!</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>))</span> <span class='p'>{</span>
        <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;legend&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='s1'>&#39;Add List&#39;</span><span class='p'>);</span>
      <span class='p'>}</span>

      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>submit</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span>
        <span class='p'>,</span> <span class='nx'>title</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input[name=&quot;title&quot;]&#39;</span><span class='p'>).</span><span class='nx'>val</span><span class='p'>()</span>
        <span class='p'>;</span>

      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='nx'>title</span> <span class='p'>},</span> <span class='p'>{</span>
        <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
          <span class='nx'>self</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>();</span>
        <span class='p'>}</span>
      <span class='p'>});</span>

      <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>cancel</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>hide</span><span class='p'>();</span>
      <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>EditListView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>In this class, I&#8217;ve declared events for submitting and closing the form, and bound them to suitable methods. I&#8217;ve also bound the <code>change</code> event on the view&#8217;s model to <code>render</code>, so changes to the model will automatically get displayed. This will be important later on.</p>

<p>Notice that in <code>render</code>, the <code>legend</code> will be changed when the model doesn&#8217;t yet have an id. In other words, when the model is new and hasn&#8217;t been saved, show a different title and hide the delete button.</p>

<p>Now compare this file to <code>app/js/views/lists/add.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
<span class='s1'>&#39;models/tasklist&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/edit&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>TaskList</span><span class='p'>,</span> <span class='nx'>EditListView</span><span class='p'>)</span> <span class='p'>{</span>
<span class='kd'>var</span> <span class='nx'>AddListView</span> <span class='o'>=</span> <span class='nx'>EditListView</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
  <span class='nx'>submit</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span>
      <span class='p'>,</span> <span class='nx'>title</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input[name=&quot;title&quot;]&#39;</span><span class='p'>).</span><span class='nx'>val</span><span class='p'>()</span>
      <span class='p'>;</span>

    <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>save</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='nx'>title</span> <span class='p'>},</span> <span class='p'>{</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// Add the updated model to the collection</span>
      <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>);</span>
      <span class='nx'>self</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>();</span>
    <span class='p'>}});</span>

    <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>});</span>

<span class='k'>return</span> <span class='nx'>AddListView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>This file uses RequireJS to load <code>EditListView</code>, and then inherits from it. The <code>submit</code> method is replaced because creating lists is slightly different to updating them. When lists are created, it&#8217;ll receive an updated model from the server in the <code>success</code> callback, which can be added to the global <code>lists</code> collection. The view removes itself afterwards.</p>

<h3 id='add_list_button'>Add List Button</h3>

<p>A link for adding lists was added to the main <code>app.html</code> template earlier on. To hook it up, open <code>app/js/views/app.js</code> and add a new method called <code>addList</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>addList</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>list</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>bTask</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>({</span> <span class='nx'>title</span><span class='o'>:</span> <span class='s1'>&#39;&#39;</span> <span class='p'>})</span>
    <span class='p'>,</span> <span class='nx'>form</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>AddListView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>list</span> <span class='p'>})</span>
    <span class='p'>,</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span>
    <span class='p'>;</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;#list-editor&#39;</span><span class='p'>).</span><span class='nx'>html</span><span class='p'>(</span><span class='nx'>form</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='nx'>form</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>find</span><span class='p'>(</span><span class='s1'>&#39;input:first&#39;</span><span class='p'>).</span><span class='nx'>focus</span><span class='p'>();</span>

  <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>This will render the <code>AddListView</code> template and focus on the title field. You&#8217;ll also have to change the top of the file to load <code>AddListView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;text!templates/app.html&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/add&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>,</span> <span class='nx'>AddListView</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Finally, add the events bindings somewhere in <code>AppView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='s1'>&#39;click #add-list-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;addList&#39;</span>
<span class='p'>},</span>
</code></pre>
</div>
<h3 id='summary'>Summary</h3>

<p><img src='/images/posts/backbone-tutorial-6.png' alt='Adding Lists' /></p>

<p>If you run <code>node server</code> and visit <code>http://localhost:8080</code>, you should now be able to add lists. The project doesn&#8217;t <em>look</em> particularly cool yet, but I&#8217;ll get to that soon.</p>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/465523fa20c9f17a422de3646a8db5f7d1b707e8'>alexyoung / dailyjs-backbone-tutorial, commit 465523f</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/02/node-roundup">Node Roundup: 0.9.5, juxt, email-templates</a></h2>
      <div class="meta">
        <span class="date">02 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/02/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#email">email</a>
          
            <a href="/tags.html#express">express</a>
          
            <a href="/tags.html#functional">functional</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_095'>Node 0.9.5</h3>

<p><a href='http://blog.nodejs.org/2012/12/29/node-v0-9-5-unstable/'>Node 0.9.5</a> (unstable) is out, and Isaac said weekly releases will be the norm for the near future:</p>

<blockquote>
<p>For the next month at least, the primary focus will be on bug fixing and performance. Expect nearly-weekly releases until v0.10 is ready.</p>
</blockquote>

<p>Amongst the raft of bug fixes, the updated stream module has some tweaks as well:</p>

<ul>
<li>stream: fix to emit end event on http.ClientResponse (Shigeki Ohtsu)</li>

<li>stream: fix event handler leak in readstream pipe and unpipe (Andreas Madsen)</li>
</ul>

<h3 id='juxt'>juxt</h3>

<p><a href='https://github.com/azer/juxt.js'>juxt</a> (License: <em>WTFPL</em>, npm: <a href='https://npmjs.org/package/juxt'>juxt</a>) by Azer Koculu is a small module that takes in functions and outputs a new function that stitches them together:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>inc1</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>n</span><span class='o'>+</span><span class='mi'>1</span> <span class='p'>};</span>
<span class='kd'>function</span> <span class='nx'>inc2</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>n</span><span class='o'>+</span><span class='mi'>2</span> <span class='p'>};</span>
<span class='kd'>function</span> <span class='nx'>inc3</span><span class='p'>(</span><span class='nx'>n</span><span class='p'>)</span> <span class='p'>{</span> <span class='k'>return</span> <span class='nx'>n</span><span class='o'>+</span><span class='mi'>3</span> <span class='p'>};</span>

<span class='nx'>juxt</span><span class='p'>(</span><span class='nx'>inc1</span><span class='p'>,</span> <span class='nx'>inc2</span><span class='p'>,</span> <span class='nx'>inc3</span><span class='p'>)(</span><span class='mi'>314</span><span class='p'>);</span> <span class='c1'>// returns [315, 316, 317]</span>
</code></pre>
</div>
<p>It also has an asynchronous API, and will intelligently collate arguments into arrays or objects.</p>

<h3 id='emailtemplates'>email-templates</h3>

<p><a href='https://github.com/niftylettuce/node-email-templates'>email-templates</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/email-templates'>email-templates</a>) by Nick Baugh is a module for rendering email templates using ejs and &#8220;email-friendly&#8221; inline CSS. When I make Node web applications, I usually treat emails as an afterthought, rendering them with Jade or ejs. However, there are times when more attention to design is required, and this is made difficult in email due to the way certain major email clients treat CSS.</p>

<p><a href='https://github.com/LearnBoost/juice'>Juice</a> from LearnBoost is used to generate suitable <code>style</code> attributes based on your CSS, making the task of inlining CSS less messy. The module will also generate a text version of the email if a suitable template is provided. The author has provided a full example with <a href='https://github.com/andris9/Nodemailer'>Nodemailer</a>.</p>

<p>Nick also sent in a few of his other interesting modules, including <a href='http://niftylettuce.github.com/express-cdn/'>express-cdn</a> (GitHub: <a href='https://github.com/niftylettuce/express-cdn'>niftylettuce / express-cdn</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/express-cdn'>express-cdn</a>) which automatically optimises assets in Express applications. The assets will be delivered using Amazon S3 and CloudFront, so you can create your own CDN.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2013/01/01/jquery-roundup">jQuery Roundup: jKit, ZinoUI, jQuery.ajax.fake</a></h2>
      <div class="meta">
        <span class="date">01 Jan 2013</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2013/01/01/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#frameworks">frameworks</a>
          
            <a href="/tags.html#ui">ui</a>
          
            <a href="/tags.html#ajax">ajax</a>
          
            <a href="/tags.html#testing">testing</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jkit'>jKit</h3>
<div class='image'>
  <img src='/images/posts/jkit.png' alt='' />
  <small>jKit's site includes demos of every effect and component.</small>
</div>
<p><a href='http://jquery-jkit.com/'>jKit</a> (GitHub: <a href='https://github.com/FrediBach/jQuery-jKit'>FrediBach / jQuery-jKit</a>, License: <em>MIT</em>) by Fredi Bach is a relatively small (47 KB) UI toolkit. It can work with data attributes, so adding <code>data-jkit</code> attributes to the relevant elements will invoke various components.</p>

<p>There are a lot of effects and components, including tooltips, charts, parallax scrolling, and a lightbox. The project has detailed documentation on each of the bundled plugins, and <a href='http://jquery-jkit.com/pages/basics.php'>a simple introduction for non-programmers</a>.</p>

<h3 id='zinoui'>ZinoUI</h3>
<div class='image'>
  <img src='/images/posts/zinotree.png' alt='' />
  <small>The ZinoUI TreeView component.</small>
</div>
<p>Coincidentally, Dimitar Ivanov also sent in a UI toolkit of sorts: the <a href='http://zinoui.com/'>ZinoUI Framework</a> (License: <a href='http://zinoui.com/license'>CC BY-NC 3.0</a>). This framework requires commercial licensing starting at $50 per site, and includes advanced widgets more comparable to jQuery UI, like a calendar and tree view.</p>

<p>ZinoUI is <a href='http://www.w3.org/WAI/intro/aria.php'>WAI-ARIA</a> compatible, so may suit projects with stricter accessibility requirements. It has been tested with Google Chrome 12+, Firefox 4+, Safari 5+, Opera 11+, and IE8+.</p>

<h3 id='jqueryajaxfake'>jQuery.ajax.fake</h3>

<p><a href='http://anasnakawa.github.com/jquery.ajax.fake/'>jQuery.ajax.fake</a> (GitHub: <a href='https://github.com/anasnakawa/jquery.ajax.fake'>anasnakawa / jquery.ajax.fake</a>, License: <em>MIT</em>, component: <code>anasnakawa/jquery.ajax.fake</code>) by Anas Nakawa can be used to mock jQuery <code>$.ajax</code> calls. A mocked call will be made when passing <code>fake: true</code> as an option to <code>$.ajax</code>. It can be disabled globally, and works with deferred calls.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/31/js101-strings">JS101: A Primer on Strings and String Encodings</a></h2>
      <div class="meta">
        <span class="date">31 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/31/js101-strings/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#js101">js101</a>
          
            <a href="/tags.html#tutorials">tutorials</a>
          
            <a href="/tags.html#language">language</a>
          
            <a href="/tags.html#beginner">beginner</a>
          
        </span>
      </div>
      <div class="preview">
        <p>What is a JavaScript string? It depends on the context. For instance, a string is a <a href='http://dailyjs.com/2012/05/07/js101-object/'>primitive value</a> &#8211; a value represented at the &#8220;lowest level&#8221; of the language&#8217;s implementation.</p>

<p>Strings are also members of the type <code>String</code>. Strings can be created with the <code>String</code> constructor. Running <code>new String(&#39;hello&#39;)</code> creates an instance of <code>String</code>.</p>

<p>Finally, String literals are found in the program&#8217;s source: <code>var name = &#39;alex&#39;</code>.</p>

<p>Given that there are many ways to represent strings, what is the underlying encoding in JavaScript? Both the third and fifth editions of ECMAScript state that strings are represented as <a href='http://es5.github.com/#x4.3.16'>16-bit unsigned integers</a>:</p>

<blockquote>
<p>Each integer value in the sequence usually represents a single 16-bit unit of UTF-16 text. However, ECMAScript does not place any restrictions or requirements on the values except that they must be 16-bit unsigned integers.</p>
</blockquote>

<h3 id='string_encoding'>String Encoding</h3>

<p>Ultimately a string is just a sequence of characters. In other words, an array of units of information that correspond to digits, letters, and so on. Characters are represented as byte sequences.</p>

<p>When working on client-side JavaScript and HTML, we&#8217;re used to seeing <code>charset=UTF-8</code>. UTF-8 is a system for encoding characters, and is actually &#8220;variable width&#8221;, which means the bytes used to represent an individual character can vary in length.</p>

<p>I said earlier that JavaScript strings are 16-bit, so how does this relate to UTF-8? In extremely simplified terms for the purposes of a beginner&#8217;s article, you can think about it like this: JavaScript engines use a fixed 16-bit representation of characters that makes it easier to manage strings internally.</p>

<p>So, even though a browser&#8217;s JavaScript engine internally represents characters as 16-bit numbers, we don&#8217;t usually need to know about this. Writing the strings to form controls with the DOM or using <code>XMLHTTPRequest</code> should convert the string to the right encoding. Ideally the server should have sent the <code>Content-Type</code> header set to UTF-8, so the browser will know what to do.</p>

<h3 id='more_about_encodings'>More About Encodings</h3>

<p>Even if you&#8217;re a client-side developer that doesn&#8217;t care about string encodings, Joel Spolsky&#8217;s <a href='http://www.joelonsoftware.com/articles/Unicode.html'>The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a> is worth reading because it explains the history behind string encodings. Understanding the history behind what can be a frustrating topic makes it easier to understand.</p>

<p>If you need to work on string encodings in JavaScript, Johan Sundström&#8217;s post <a href='http://ecmanaut.blogspot.co.uk/2006/07/encoding-decoding-utf8-in-javascript.html'>Encoding / decoding UTF8 in javascript</a> from back in 2006 explains how to encode and decode UTF-8.</p>

<p>Monsur Hossain went on to write <a href='http://monsur.hossa.in/2012/07/20/utf-8-in-javascript.html'>UTF-8 in JavaScript</a> which goes into <code>unescape</code> and <code>encodeURIComponent</code> in more detail.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/28/campjs-euh-node-startup">CampJS, euh.js, node-startup</a></h2>
      <div class="meta">
        <span class="date">28 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/28/campjs-euh-node-startup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#conferences">conferences</a>
          
            <a href="/tags.html#events">events</a>
          
            <a href="/tags.html#node">node</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='campjs'>CampJS</h3>

<p><img src='/images/posts/campjs.png' alt='CampJS' /></p>

<p><a href='http://campjs.com/'>CampJS</a> is a weekend-long JavaScript &#8220;hack retreat&#8221; taking place in Gold Coast Hinterland, Queensland, Australia, from February 15th to the 18th. Early bird tickets are $270, and then prices go up to $470 by the 1st of February.</p>

<p>Some well-known developers will be there, including Dominic Tarr and James Halliday (substack).</p>

<p>The event is organised by Tim Oxley, Nigel Rausch, and Geoffrey Donaldson. For more about the event, follow <a href='https://twitter.com/campjsnews'>@campjsnews</a>.</p>

<h3 id='euhjs'>euh.js</h3>

<p><a href='https://github.com/CristianTincu/euh.js'>euh.js</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/euh.js'>euh.js</a>) by Cristian Tincu is a <code>console</code> implementation that supports the usual <code>log</code>, <code>warn</code>, and <code>error</code> methods.</p>

<p>It&#8217;s exposed as the <code>ø</code> object, and has a chainable API. It can be installed with npm and ender (<code>ender build euh.js</code>).</p>

<h3 id='nodestartup'>node-startup</h3>

<p><a href='https://github.com/chovy/node-startup'>node-startup</a> (License: <em>MIT</em>) by Anthony Ettinger is an init script for managing Node applications. The script itself, <a href='https://github.com/chovy/node-startup/blob/master/init.d/node-app'>init.d/node-app</a>, implements the usual <code>start</code>, <code>stop</code>, and <code>restart</code> commands, and will manage processes using PID files.</p>

<p>It&#8217;s exactly the kind of thing you can&#8217;t find when you need it, so it&#8217;s probably worth starring on GitHub if you&#8217;re the kind of developer that doesn&#8217;t typically have to deal with sysadmin tasks. I wrote about using <a href='http://dailyjs.com/2011/03/07/node-deployment/'>Upstart for managing Node apps</a> last year on DailyJS.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/27/backbone-tutorial-5">Backbone.js Tutorial: List Views</a></h2>
      <div class="meta">
        <span class="date">27 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/27/backbone-tutorial-5/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'><strong>Part 5: List Views</strong></a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>fcd653ec6</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard fcd653ec6
</code></pre>
</div>
<h3 id='wireframe'>Wireframe</h3>

<p>The application we&#8217;re building has several main interface elements:</p>

<ul>
<li>A two column layout for displaying task lists and tasks</li>

<li>Forms for adding and editing each item type</li>

<li>Buttons for invoking the forms, deleting items, and clearing complete items</li>

<li>Task state control (done checkbox)</li>
</ul>

<p>The image below shows the basic layout.</p>
<div class='image'>
  <img src='/images/posts/backbone-tutorial-wireframe.jpg' alt='' />
  <small>The application's wireframe.</small>
</div>
<p>In this tutorial we&#8217;ll start implementing the interface by using an unordered list to represent task lists.</p>

<h3 id='list_items'>List Items</h3>

<p>Despite being relatively simple, implementing a navigable list of task lists involves several Backbone.js elements:</p>

<ul>
<li>HTML templates</li>

<li>Backbone views: <code>ListMenuView</code>, <code>ListMenuItemView</code></li>

<li>Backbone collection: <code>TaskLists</code></li>
</ul>

<p>The <code>ListMenuView</code> contains the task list menu, and the <code>ListMenuItemView</code> is the navigation item for each task list itself. This can be modeled as a <code>ul</code> and a set of <code>li</code> elements.</p>

<p>Create a new directory called <code>app/js/views/lists</code> to store the task list-related <code>Backbone.View</code> classes, and another called <code>app/js/templates/lists</code> for the corresponding templates.</p>

<h3 id='view_'>View: <code>ListMenuView</code></h3>

<p>This view resides in <code>app/js/views/lists/menu.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;views/lists/menuitem&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>ListMenuItemView</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>ListMenuView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>el</span><span class='o'>:</span> <span class='s1'>&#39;.left-nav&#39;</span><span class='p'>,</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;ul&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;nav nav-list lists-nav&#39;</span><span class='p'>,</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;add&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='c1'>// TODO</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>ListMenuView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>It loads <code>views/lists/menuitem</code> which we&#8217;ll create in a moment. Then it binds itself to the <code>.left-nav</code> element which was created by <code>AppView</code> and its corresponding template. The menu itself is an unordered list, and it uses some class names that will become more relevant once styles are added.</p>

<p>Notice that this view expects a collection. Collections can be passed to views during instantiation. For example, <code>new ListMenuView({ collection: lists })</code> will pass the <code>lists</code> collection to an instance of this view.</p>

<p>The <code>render</code> method should look like this:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>el</span><span class='p'>)</span>
    <span class='p'>,</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>collection</span><span class='p'>.</span><span class='nx'>each</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>list</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='kd'>var</span> <span class='nx'>item</span><span class='p'>,</span> <span class='nx'>sidebarItem</span><span class='p'>;</span>
    <span class='nx'>item</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ListMenuItemView</span><span class='p'>({</span> <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>list</span> <span class='p'>});</span>
    <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>append</span><span class='p'>(</span><span class='nx'>item</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>().</span><span class='nx'>el</span><span class='p'>);</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>The view&#8217;s element is used as the container for each <code>ListMenuItemView</code> which is passed a model by iterating over the collection.</p>

<h3 id='view_'>View: <code>ListMenuItemView</code></h3>

<p>The <code>app/js/views/lists/menuitem.js</code> is similar to the previous view, but makes use of a template and Backbone&#8217;s declarative event binding feature.</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/lists/menuitem.html&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>ListMenuItemView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;li&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;list-menu-item&#39;</span><span class='p'>,</span>

    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;click&#39;</span><span class='o'>:</span> <span class='s1'>&#39;open&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;change&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;destroy&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>);</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>$el</span> <span class='o'>=</span> <span class='nx'>$</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>el</span><span class='p'>);</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>data</span><span class='p'>(</span><span class='s1'>&#39;listId&#39;</span><span class='p'>,</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;id&#39;</span><span class='p'>));</span>
      <span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>()));</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>open</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
      <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>ListMenuItemView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The template is <code>app/js/templates/lists/menuitem.html</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>class=</span><span class='s'>&quot;list-title&quot;</span> <span class='na'>data-list-id=</span><span class='s'>&quot;&quot;</span><span class='nt'>&gt;&lt;/a&gt;</span>
</code></pre>
</div>
<p>Notice that curly braces are used to insert values. This is provided by Underscore&#8217;s built-in template system.</p>

<p>The view&#8217;s <code>open</code> method is bound to <code>click</code> events, and I&#8217;ve also bound <code>change</code> and <code>destroy</code> model events to the view as well &#8211; these will come in handy later.</p>

<p>The template&#8217;s values are inserted by using the <code>template</code> method in <code>render</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>()));</span>
</code></pre>
</div>
<p>The model&#8217;s raw JSON is passed to <code>template</code> so <code>title</code> and <code>id</code> will be resolved to the correct values.</p>

<h3 id='invoking_'>Invoking <code>ListMenuView</code></h3>

<p>Open <code>app/js/app.js</code> and add <code>ListMenuView</code> to the list of <code>define</code> requirements:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;gapi&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/app&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/auth&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/lists/menu&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;collections/tasklists&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>ApiManager</span><span class='p'>,</span> <span class='nx'>AppView</span><span class='p'>,</span> <span class='nx'>AuthView</span><span class='p'>,</span> <span class='nx'>ListMenuView</span><span class='p'>,</span> <span class='nx'>TaskLists</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Last week I added a <code>console.log</code> to print out the name of each list. Remove that code and change it to render the <code>ListMenuView</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>connectGapi</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>self</span> <span class='o'>=</span> <span class='k'>this</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ApiManager</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>userId</span><span class='o'>:</span> <span class='s1'>&#39;@me&#39;</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>self</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>listMenu</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
    <span class='p'>}});</span>
  <span class='p'>});</span>
<span class='p'>}</span>
</code></pre>
</div>
<p>Go back up to the <code>App</code> constructor function to make it instantiate <code>listMenu</code> by passing the relevant collection:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>App</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>app</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>AppView</span><span class='p'>();</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>auth</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>AuthView</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>auth</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>TaskLists</span><span class='p'>();</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>listMenu</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>ListMenuView</span><span class='p'>({</span> <span class='nx'>collection</span><span class='o'>:</span> <span class='k'>this</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span> <span class='p'>});</span>

  <span class='k'>this</span><span class='p'>.</span><span class='nx'>connectGapi</span><span class='p'>();</span>
<span class='p'>};</span>
</code></pre>
</div>
<h3 id='running_it'>Running It</h3>

<p>Now if you run <code>node server</code> and visit <code>http://localhost:8080/</code>, you should see your task lists displayed in a simple unordered list.</p>

<h3 id='summary'>Summary</h3>

<p>The app is now communicating with Google, allowing users to sign in, and also displays the user&#8217;s task lists. It still doesn&#8217;t look too exciting because we haven&#8217;t yet applied any styles, but you should be able to adapt the code you&#8217;ve seen so far to work with other Google APIs and similar services.</p>

<p>This tutorial&#8217;s code is available in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/82fe08ebff2cbc71350870dcd1a2c1b49f57f22d'>commit 82fe08e on GitHub</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/26/node-roundup">Node Roundup: 0.9.4, screener, Jyql</a></h2>
      <div class="meta">
        <span class="date">26 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/26/node-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
You can send in your Node projects for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='node_094'>Node 0.9.4</h3>

<p><a href='http://blog.nodejs.org/2012/12/21/node-v0-9-4-unstable/'>Node 0.9.4</a> has been released, and this version is a milestone because it features the <a href='http://blog.nodejs.org/2012/12/20/streams2/'>new streams API</a>. There are the usual platform-specific bug fixes and other improvements to core modules.</p>

<p>The <a href='http://nodejs.org/docs/v0.9.4/api/stream.html'>new streams API documentation</a> was published as part of this release.</p>

<h3 id='nodescreener'>node-screener</h3>

<p><a href='https://github.com/RushPL/node-screener/'>node-screener</a> (License: <em>BSD</em>, npm: <a href='https://npmjs.org/package/screener'>screener</a>) by Damian Kaczmarek is a module for validating objects, and the author notes it works with Mongoose:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>screen</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;screener&#39;</span><span class='p'>).</span><span class='nx'>screen</span><span class='p'>;</span>
<span class='kd'>var</span> <span class='nx'>object</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>_id</span><span class='o'>:</span> <span class='s2'>&quot;503cb6d92c32a8cd06006c53&quot;</span><span class='p'>,</span>
  <span class='nx'>user</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>name</span><span class='o'>:</span> <span class='s2'>&quot;Joe Doe&quot;</span><span class='p'>,</span> <span class='nx'>birthdate</span><span class='o'>:</span> <span class='s2'>&quot;04.07.1980&quot;</span><span class='p'>},</span>
  <span class='nx'>location</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>lat</span><span class='o'>:</span> <span class='mf'>16.5015636</span><span class='p'>,</span> <span class='nx'>lon</span><span class='o'>:</span> <span class='mf'>52.1971881</span> <span class='p'>}</span>
<span class='p'>};</span>

<span class='kd'>var</span> <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>screen</span><span class='p'>(</span><span class='nx'>object</span><span class='p'>,</span> <span class='p'>{</span>
  <span class='nx'>user</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='nx'>name</span><span class='o'>:</span> <span class='s1'>&#39;string&#39;</span><span class='p'>,</span> <span class='c1'>// same effect would be if passed /.*/ regexp</span>
    <span class='nx'>birthdate</span><span class='o'>:</span> <span class='sr'>/\d\d\.\d\d\.\d\d\d\d/</span>
  <span class='p'>}</span>
  <span class='nx'>location</span><span class='o'>:</span> <span class='p'>{</span><span class='nx'>lat</span><span class='o'>:</span> <span class='s1'>&#39;number&#39;</span><span class='p'>,</span> <span class='nx'>lon</span><span class='o'>:</span> <span class='s1'>&#39;number&#39;</span><span class='p'>}</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='jyql'>Jyql</h3>

<p><a href='https://github.com/giacecco/jyql'>Jyql</a> (License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/jyql'>jyql</a>) by Gianfranco Cecconi is a Node module and browser library for working with the Yahoo! Query Language engine. The Node module uses the <a href='https://npmjs.org/package/request'>request</a> module by Mikeal Rogers to automatically fetch a suitable resource to be processed with YQL.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/25/jquery-roundup">jQuery Roundup: jquery.columns, stackable.js</a></h2>
      <div class="meta">
        <span class="date">25 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/25/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#columns">columns</a>
          
            <a href="/tags.html#responsive">responsive</a>
          
            <a href="/tags.html#tables">tables</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquerycolumns'>jquery.columns</h3>

<p><a href='https://github.com/elclanrs/jquery.columns'>jquery.columns</a> (License: <em>MIT</em>) by Cedric Ruiz extends the <code>$.css</code> method to support <a href='http://www.w3.org/TR/css3-values/#viewport-relative-lengths'>viewport-percentage lengths</a>, basically making it a lot easier to work with responsive grids.</p>

<p>The plugin provides a <code>$.columns</code> method, but passing sizes with <code>vw</code> units to <code>$.css</code> will work as well.</p>

<p>There&#8217;s a demo here: <a href='http://elclanrs.github.com/jquery.columns/'>jquery.columns demo</a>.</p>

<h3 id='stacktablejs'>stacktable.js</h3>

<p><a href='http://johnpolacek.github.com/stacktable.js/'>stacktable.js</a> (GitHub: <a href='https://github.com/johnpolacek/stacktable.js/'>johnpolacek / stacktable.js</a>, License: <em>MIT/GPL</em>) by John Polacek is a plugin for stacking tables on small screens. It&#8217;s designed to work in responsive layouts by using media queries.</p>

<p>To make tables fit smaller screens, this plugin stacks each column vertically in order. The headers will be placed in the correct order as well. Behind the scenes, tables are actually replaced with the stacked version &#8211; by passing a specific class name to the plugin responsive layouts can be supported.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/24/javascript-survey-results">JavaScript Developer Survey 2012: Results</a></h2>
      <div class="meta">
        <span class="date">24 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/24/javascript-survey-results/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#community">community</a>
          
            <a href="/tags.html#surveys">surveys</a>
          
        </span>
      </div>
      <div class="preview">
        <p>The JavaScript Developer Survey has now closed. As always the results are available to the community for further analysis:</p>

<ul>
<li><a href='http://dailyjs.com/files/2012-survey-summary.pdf'>Summary</a></li>

<li><a href='https://docs.google.com/spreadsheet/ccc?key=0AooyU9-5EwIVdFNDeGZEUTZUZ1ctY0Q2WFZnOVlBV3c'>Raw spreadsheet data</a></li>
</ul>
<div class='image'>
  <img src='/images/posts/survey-2012-type.png' alt='' />
  <small>Meteor seems to be struggling to gain traction.</small>
</div>
<p>98% of readers write client-side JavaScript, which is unchanged from last year. I included Meteor because it&#8217;s had so much press this year, but it seems like it&#8217;s still not very popular, at 2%.</p>

<p>I&#8217;ve always felt like this survey could be useful to those who are looking to create open source projects and even commercial services aimed at the JavaScript community. With that in mind, it&#8217;s interesting that 57% of respondents said they don&#8217;t currently write Node but are interested in learning about it. Only 9% were not interested. There are solid educational resources for Node out there, but it seems like people are hungry for more.</p>

<p>71% of respondents don&#8217;t use a language that compiles to JavaScript. This surprised me, because this year it certainly felt like more of our project submissions (for both client-side and server-side) were written in CoffeeScript.</p>

<p>Speaking of CoffeeScript, it was the most popular compile-to-JavaScript language, at 82%. TypeScript was second, at 14%, which is ahead of Dart by 10%.</p>
<div class='image'>
  <img src='/images/posts/survey-2012-style.png' alt='' />
  <small>There are plenty of worn out semicolon keys out there.</small>
</div>
<p>I thought the question &#8220;What JavaScript stylistic choices do you prefer?&#8221; may have resulted in controversy, but thankfully we got some interesting results. At 85%, most respondents use semicolons. And, 67% use commas at the end. 53% use spaces, with 39% tabbing instead. I would have thought spaces were more popular, but I&#8217;ve seen a lot of open source client-side projects that use tabs, so the JavaScript community isn&#8217;t as settled on tabs vs. spaces as some other popular languages.</p>

<p>My philosophy on this is to always match the style of the project you&#8217;re working on, and you&#8217;ll see me doing this in some planned DailyJS eBooks for 2013.</p>

<h3 id='testing_and_benchmarking'>Testing and Benchmarking</h3>

<p>51% of respondents don&#8217;t write tests &#8211; down from 58% last year.</p>

<p>Jasmine is the most popular testing library, at 45%, with Mocha close behind at 41%. QUnit is also very popular with 31%. For reference, these were last year&#8217;s test library results:</p>

<blockquote>
<p>Jasmine (44%) has edged out QUnit (41%)! Vows is also doing well with 13%. Express/Mocha scored 11%, slightly ahead of Nodeunit at 8%.</p>
</blockquote>

<p>Vows is now down to 7%, and Mocha has risen by a staggering 30%. It&#8217;s natural for some libraries to rank higher if they work in both browsers and Node.</p>

<p>JSLint is down to 56% from 67%, but it&#8217;s still the most popular static analysis tool. JSHint is close behind at 55%.</p>

<p><em>uglify</em> is the most popular minimiser, which isn&#8217;t surprising given that it&#8217;s bundled with many other tools.</p>

<p>WebKit Inspector is the most popular debugging tool, at 79%. 500 people said they debug using <code>node --debug</code>, which is interesting because this is an area that I still feel needs work when developing with Node.</p>

<p>80% of respondents benchmark with client-side tools (1372 people). That&#8217;s probably not surprising, but given the performance-obsessed nature of certain prominent Node developers I&#8217;d have expected to see more people ticking &#8220;Benchmark scripts using a benchmarking library&#8221;.</p>

<p>44% of readers also write PHP, down slightly from 46% last year. C, Java, Python, and Ruby all rank around 20%, with Java edging the others out. Are there any Android developers out there?</p>

<h3 id='loading'>Loading</h3>

<p>RequireJS is the most popular module loading system &#8211; 1237 people use it. Given the sheer amount of documentation it has and the high quality site, it&#8217;s not surprising that it&#8217;s popular. Others that I didn&#8217;t mention included YUI, LABjs, and ExtJS.</p>

<p>Google Ajax Libraries is the most popular CDN, and it was interesting to see CloudFlare at 11%.</p>

<h3 id='project_hosting'>Project Hosting</h3>
<div class='image'>
  <img src='/images/posts/survey-2012-hosting.png' alt='' />
  <small>GitHub dominates when it comes to project hosting.</small>
</div>
<p>At 91%, I wondered if GitHub might be at its peak. It was at 81% last year. I know there are many fellow freelancers who appreciate Bitbucket&#8217;s free private hosting, and at 20% I suspect there are people out there using both for the same reasons as me. Google Code is at 3%, so Google has got its work cut out if it wants to compete for open source projects.</p>

<p>Also, at 83%, GitHub was the most popular &#8216;project discovery&#8217; site. This is higher than news sites (22%), which surprised me because it seems like there&#8217;s an interesting JavaScript project on Hacker News every other day.</p>

<h3 id='summary'>Summary</h3>

<p>Apart from a few surprises, 2012 has seen similar trends to last year. The new questions from Todd Bashor, Tyler Larson, and Adam Alexander were excellent, and I&#8217;m looking forward to seeing if semicolon use changes over time.</p>

<p>Thanks to everyone who took part in the survey!</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/21/components-holler-gruntstart">New Streaming API for Node, Components Tutorial, Holler, GruntStart</a></h2>
      <div class="meta">
        <span class="date">21 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/21/components-holler-gruntstart/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#components">components</a>
          
            <a href="/tags.html#grunt">grunt</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#streams">streams</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='new_streaming_api_for_node'>New Streaming API for Node</h3>

<p>In <a href='http://blog.nodejs.org/2012/12/21/streams2/'>New Streaming API for Node</a>, Isaac Schlueter outlines the issues found in Node&#8217;s current streaming API, and presents the new Node 0.10 API that addresses these problems. Although the documentation makes it clear that the stream API is &#8220;unstable&#8221;, it&#8217;s notable for two reasons: it&#8217;s built on <code>EventEmitter</code>, and many of Node&#8217;s core modules have stream interfaces. Streams are an integral part of Node, and it&#8217;s becoming clear that many problems are best solved with streams.</p>

<p>The 0.10 version of streams will cause backward compatibility issues, but this has been considered and mitigated:</p>

<blockquote>
<p>For backwards compatibility with older Node programs, Readable streams switch into &#8220;old mode&#8221; when a <code>&#39;data&#39;</code> event handler is added, or when the <code>pause()</code> or <code>resume()</code> methods are called.</p>
</blockquote>

<p>Isaac has included the new stream API&#8217;s documentation in the post, and if you&#8217;re working with Node at all it&#8217;s worth reading. If you&#8217;re struggling to understand the motivation behind the changes, it boils down to <code>pause()</code> not really pausing, and the potential for <code>&#39;data&#39;</code> events to be dropped before they&#8217;re ready to be consumed. I liked Isaac&#8217;s practical example of this issue:</p>

<blockquote>
<p><code>&#39;data&#39;</code> events come right away (whether you&#8217;re ready or not). This makes it unreasonably difficult to do common tasks like load a user&#8217;s session before deciding how to handle their request.</p>
</blockquote>

<p>So, read <a href='http://blog.nodejs.org/2012/12/21/streams2/'>A New Streaming API for Node v0.10</a> carefully even if you&#8217;re not working with streams directly. I&#8217;m of the opinion that you <em>should</em> be thinking about streams when designing Node programs, and if Node&#8217;s core developers can get them right for version 0.10 it&#8217;ll be a huge win for the platform.</p>

<h3 id='components_tutorial'>Components Tutorial</h3>

<p><img src='/images/posts/picker2.png' alt='The date picker from the tutorial' /></p>

<p>TJ Holowaychuk has written up a detailed tutorial on <a href='https://github.com/component'>Components</a>, about <a href='http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component'>building a date picker</a>. I&#8217;m a believer of the Components idea, and at the moment good tutorials are lacking in this area, so it&#8217;s good to see TJ writing up detailed examples like this.</p>

<p>There are also some screencasts available: <a href='http://vimeo.com/53730178'>Creating components</a>, and <a href='http://vimeo.com/48054442'>Web Components - Introduction</a>.</p>

<h3 id='hollerjs'>Holler.js</h3>

<p><a href='http://bitpshr.info/holler/'>Holler.js</a> (GitHub: <a href='https://github.com/bitpshr/holler'>bitpshr / holler</a>, License: <em>WTFPL</em>, npm: <a href='https://npmjs.org/package/holler'>holler</a>) by Paul Bouchon is a real-time notification service. It&#8217;s distributed as a Node module with client-side code that builds on <a href='http://fabien-d.github.com/alertify.js/'>alertifyjs</a>.</p>

<p>The real-time communication is handled by <a href='http://faye.jcoglan.com/'>Faye</a>. Paul has made a <a href='http://vimeo.com/55747016'>brief demonstration video</a> to show how it works.</p>

<h3 id='gruntstart'>GruntStart</h3>

<p><img src='/images/posts/gruntstart.png' alt='GruntStart' /></p>

<p><a href='http://tsvensen.github.com/GruntStart/'>GruntStart</a> (GitHub: <a href='https://github.com/tsvensen/gruntstart'>tsvensen / GruntStart</a>, License: <em>MIT, GPL</em>) by Tim Svensen is a Grunt task for building optimised websites using <a href='http://html5boilerplate.com/'>HTML5 Boiler Plate</a>, jQuery, Modernizr and <a href='https://github.com/scottjehl/Respond'>Respond.js</a>. It includes a task that watches for file changes and automatically generates optimised assets.</p>

<p>The client-side scripts are all included, so all you need to do to get started is download GruntStart from GitHub.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/20/backbone-tutorial-4">Backbone.js Tutorial: Backbone.sync</a></h2>
      <div class="meta">
        <span class="date">20 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/20/backbone-tutorial-4/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'>Part 3: Authenticating with OAuth2</a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'><strong>Part 4: Backbone.sync</strong></a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>c1d5a2e7cc</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard c1d5a2e7cc
</code></pre>
</div>
<h3 id='googles_tasks_api'>Google&#8217;s Tasks API</h3>

<p>To recap: the point of this tutorial series is to build a Backbone.js single page application that uses client-side JavaScript to communicate with Google&#8217;s authentication and to-do list APIs. Got that? Good!</p>

<p>Google provides access to our to-do lists through two APIs:</p>

<ul>
<li><a href='https://developers.google.com/google-apps/tasks/v1/reference/tasklists#resource'>Tasklists</a></li>

<li><a href='https://developers.google.com/google-apps/tasks/v1/reference/tasks'>Tasks</a></li>
</ul>

<p>When loading Google&#8217;s JavaScript, the browser is bestowed with a global called <code>gapi</code> that provides access to various objects and methods. In the last part, I quietly included a call to <code>gapi.client.load</code> that loads the <code>tasks</code> API:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>load</span><span class='p'>(</span><span class='s1'>&#39;tasks&#39;</span><span class='p'>,</span> <span class='s1'>&#39;v1&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span> <span class='cm'>/* Loaded */</span> <span class='p'>});</span>
</code></pre>
</div>
<p>This can be found in <code>app/js/gapi.js</code>. The remaining challenge before building the interface is to implement a new <code>Backbone.sync</code> method that uses <code>gapi</code> to communicate with the Tasks and Tasklists APIs.</p>

<h3 id='backbonesync_structure'>Backbone.sync Structure</h3>

<p>I&#8217;ve already talked about the overall structure of <code>Backbone.sync</code> in <a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>part 2</a>. The pattern I&#8217;ll use in these tutorials is fairly generic, so you could use the same approach to communicate with something other than Google&#8217;s APIs.</p>

<p>The <code>sync</code> method itself takes three arguments, the first of which is the <code>method</code> (<code>create</code>, <code>update</code>, <code>delete</code>, and <code>read</code>). We need to map <code>method</code> to something Google&#8217;s API can understand.</p>

<p>This is what we&#8217;ve got so far:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>sync</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>options</span> <span class='o'>||</span> <span class='p'>(</span><span class='nx'>options</span> <span class='o'>=</span> <span class='p'>{});</span>

  <span class='k'>switch</span> <span class='p'>(</span><span class='nx'>method</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>case</span> <span class='s1'>&#39;create&#39;</span><span class='o'>:</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;update&#39;</span><span class='o'>:</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;delete&#39;</span><span class='o'>:</span>
    <span class='k'>break</span><span class='p'>;</span>

    <span class='k'>case</span> <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>
    <span class='k'>break</span><span class='p'>;</span>
  <span class='p'>}</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>Google&#8217;s Tasks API methods map to the Backbone <code>method</code> argument like this:</p>
<table class='amy'>
  <thead>
    <tr>
      <th>Google Tasks API</th><th>Backbone.sync Method</th><th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>insert</code></td><td><code>create</code></td><td>Create a new task.</td>
    </tr>
    <tr>
      <td><code>update</code></td><td><code>update</code></td><td>Update an existing task.</td>
    </tr>
    <tr>
      <td><code>delete</code></td><td><code>delete</code></td><td>Delete a task.</td>
    </tr>
    <tr>
      <td><code>list</code></td><td><code>read</code></td><td>Get a list of tasks.</td>
    </tr>
  </tbody>
</table>
<p>Even though Google&#8217;s API doesn&#8217;t look like the Rails 3-based RESTful API that Backbone.js is designed for out of the box, it&#8217;s still very close.</p>

<h3 id='making_requests_with_'>Making Requests with <code>gapi</code></h3>

<p>The <code>gapi</code> object makes requests using this pattern:</p>

<ul>
<li>Call one of the <code>gapi.client.tasks</code> methods with the <em>request content</em> to get a <code>request</code> object</li>

<li>Call <code>request.execute</code> with a callback to send the request</li>

<li>The callback receives a <code>response</code> object, much like a standard Ajax request</li>
</ul>

<p>Here&#8217;s what this looks like in reality:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>requestContent</span> <span class='o'>=</span> <span class='p'>{}</span>
  <span class='p'>,</span> <span class='nx'>request</span>
  <span class='p'>,</span> <span class='nx'>gapiResource</span><span class='p'>;</span>

<span class='nx'>gapiResource</span> <span class='o'>=</span> <span class='s1'>&#39;tasks&#39;</span><span class='p'>;</span>
<span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;tasklist&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>tasklistId</span><span class='p'>;</span> <span class='c1'>// Assuming we have one</span>
<span class='nx'>requestContent</span><span class='p'>[</span><span class='s1'>&#39;resource&#39;</span><span class='p'>]</span> <span class='o'>=</span> <span class='nx'>model</span><span class='p'>.</span><span class='nx'>toJSON</span><span class='p'>();</span>

<span class='c1'>// &#39;insert&#39; is for creating new tasks</span>
<span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>gapiResource</span><span class='p'>].</span><span class='nx'>insert</span><span class='p'>(</span><span class='nx'>requestContent</span><span class='p'>);</span>

<span class='c1'>// Send the request to the API</span>
<span class='nx'>request</span><span class='p'>.</span><span class='nx'>execute</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='c1'>// Handle the response</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>Looking at this, it&#8217;s clear that we need two models: <code>Task</code> and <code>TaskList</code>. There also need to be two corresponding collections: <code>Tasks</code> and <code>TaskLists</code>.</p>

<p>Backbone models and collections have URLs &#8211; these are used for making API requests. Similarly, Google&#8217;s APIs have URLs: <code>tasks</code> and <code>tasklists</code>, so by using the model URL <code>Backbone.sync</code> can determine which API resource is required for a given request.</p>

<h3 id='models'>Models</h3>

<p>Create a new directory called <code>app/js/models</code> and add <code>task.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>Task</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Model</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasks&#39;</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>Task</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>You&#8217;ll also want to create a <code>app/js/models/tasklist.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TaskList</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Model</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasklists&#39;</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TaskList</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<h3 id='collections'>Collections</h3>

<p>Create another new directory called <code>app/js/collections</code> and add <code>tasklists.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;models/tasklist&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>TaskList</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>TaskLists</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>Collection</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>model</span><span class='o'>:</span> <span class='nx'>TaskList</span>
  <span class='p'>,</span> <span class='nx'>url</span><span class='o'>:</span> <span class='s1'>&#39;tasklists&#39;</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>TaskLists</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>We&#8217;re going to use the <code>TaskList</code> collection later on to load your task lists.</p>

<h3 id='making_api_requests'>Making API Requests</h3>

<p>Open up <code>app/js/gapi.js</code> and add a new line after line 36:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>app</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>auth</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>hide</span><span class='p'>();</span>
<span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#signed-in-container&#39;</span><span class='p'>).</span><span class='nx'>show</span><span class='p'>();</span>
<span class='nx'>self</span><span class='p'>.</span><span class='nx'>trigger</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>);</span> <span class='c1'>// This one</span>
</code></pre>
</div>
<p>This <code>&#39;ready&#39;</code> event will be used to signify that authentication was successful, and the Tasks API is ready for use. Next, add the following two lines to <code>Backbone.sync</code>, inside the <code>read</code> switch case:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>case</span> <span class='s1'>&#39;read&#39;</span><span class='o'>:</span>
  <span class='kd'>var</span> <span class='nx'>request</span> <span class='o'>=</span> <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>client</span><span class='p'>.</span><span class='nx'>tasks</span><span class='p'>[</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>url</span><span class='p'>].</span><span class='nx'>list</span><span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>data</span><span class='p'>);</span>
  <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>);</span>
<span class='k'>break</span><span class='p'>;</span>
</code></pre>
</div>
<p>This code creates a request, and then <code>Backbone.gapiRequest</code> will execute it and delegate the response.</p>

<p>Here&#8217;s the most basic <code>Backbone.gapiRequest</code> implementation:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>gapiRequest</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>request</span><span class='p'>,</span> <span class='nx'>method</span><span class='p'>,</span> <span class='nx'>model</span><span class='p'>,</span> <span class='nx'>options</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>result</span><span class='p'>;</span>
  <span class='nx'>request</span><span class='p'>.</span><span class='nx'>execute</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>res</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='nx'>options</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>);</span>
    <span class='p'>}</span> <span class='k'>else</span> <span class='k'>if</span> <span class='p'>(</span><span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>result</span> <span class='o'>=</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>items</span><span class='p'>;</span>
      <span class='nx'>options</span><span class='p'>.</span><span class='nx'>success</span><span class='p'>(</span><span class='nx'>result</span><span class='p'>,</span> <span class='kc'>true</span><span class='p'>,</span> <span class='nx'>request</span><span class='p'>);</span>
    <span class='p'>}</span>
  <span class='p'>});</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>All it does is run <code>request.execute</code>, which is provided by Google, and then maps the result to be compatible with Backbone&#8217;s API by running the <code>success</code> and <code>error</code> callbacks.</p>

<p>Just so you can see something is really happening, open <code>app/js/app.js</code> and make it load the <code>TaskLists</code> collection by changing the <code>define</code> invocation at the top:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;gapi&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/app&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/auth&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;collections/tasklists&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>ApiManager</span><span class='p'>,</span> <span class='nx'>AppView</span><span class='p'>,</span> <span class='nx'>AuthView</span><span class='p'>,</span> <span class='nx'>TaskLists</span><span class='p'>)</span> <span class='p'>{</span>
</code></pre>
</div>
<p>Now add this to the <code>connectGapi</code> method:</p>
<div class='highlight'><pre><code class='javascript'><span class='k'>this</span><span class='p'>.</span><span class='nx'>apiManager</span><span class='p'>.</span><span class='nx'>on</span><span class='p'>(</span><span class='s1'>&#39;ready&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>self</span><span class='p'>.</span><span class='nx'>collections</span><span class='p'>.</span><span class='nx'>lists</span><span class='p'>.</span><span class='nx'>fetch</span><span class='p'>({</span> <span class='nx'>data</span><span class='o'>:</span> <span class='p'>{</span> <span class='nx'>userId</span><span class='o'>:</span> <span class='s1'>&#39;@me&#39;</span> <span class='p'>},</span> <span class='nx'>success</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='nx'>_</span><span class='p'>.</span><span class='nx'>each</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>.</span><span class='nx'>models</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='nx'>model</span><span class='p'>.</span><span class='nx'>get</span><span class='p'>(</span><span class='s1'>&#39;title&#39;</span><span class='p'>));</span>
    <span class='p'>});</span>
  <span class='p'>}});</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>That code uses Underscore&#8217;s <code>each</code> method to iterate over each &#8220;model&#8221; returned by <code>Backbone.sync</code>, which is called by the <code>TaskList</code> collection.</p>

<p>Run the server with <code>npm start</code>, and visit <code>http://localhost:8080</code>. If you run it in a browser that supports <code>console</code>, then you should see your task lists printed out.</p>
<div class='image'>
  <img src='/images/posts/backbone-tutorial-api-example.png' alt='' />
  <small>My task lists.</small>
</div>
<p>If you&#8217;ve got this working then you&#8217;re not far off building a real world Backbone.js app that communicates with Google&#8217;s APIs. The same concepts can be applied to other Google JavaScript APIs.</p>

<h3 id='summary'>Summary</h3>

<p>The full source for this tutorial can be found in <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/fcd653ec6fa5916246e3f8b9b5f942f4be31d2e7'>alexyoung / dailyjs-backbone-tutorial, commit fcd653ec6</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/19/substack-music">Substack's Musical Node Modules</a></h2>
      <div class="meta">
        <span class="date">19 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/19/substack-music/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#modules">modules</a>
          
            <a href="/tags.html#audio">audio</a>
          
            <a href="/tags.html#music">music</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
<strong>Prerequisites</strong>: Install <a href='http://www.gnuplot.info/'>gnuplot</a> and <a href='http://sox.sourceforge.net/'>SoX</a> to follow along.
</div>
<p>James Halliday, otherwise known as &#8220;substack&#8221;, has been making what he calls <a href='https://soundcloud.com/substack/beepstep'>computer generated beepstep</a> using two new modules: <a href='https://github.com/substack/baudio'>baudio</a> (npm: <a href='https://npmjs.org/package/baudio'>baudio</a>, License: <em>MIT</em>) and <a href='https://github.com/substack/plucky'>plucky</a> (npm: <a href='https://npmjs.org/package/plucky'>plucky</a>, License: <em>MIT</em>).</p>

<p>The baudio module returns a <a href='http://nodejs.org/docs/latest/api/all.html#all_readable_stream'>readable stream</a> that generates raw audio data. It requires <a href='http://sox.sourceforge.net/'>SoX</a> to play or record audio, which should be installable from your package manager (Debian has it, and so does <a href='http://mxcl.github.com/homebrew/'>Homebrew</a>).</p>

<p>The callback passed to the <code>baudio</code> function receives two arguments: <code>t</code> and <code>i</code> &#8211; the time in seconds, and a counter. The callback will be run using <code>process.nextTick</code> to generate a stream of audio data. The audio data will be passed to SoX for playback or recording using <a href='http://nodejs.org/docs/latest/api/all.html#all_child_process_spawn_command_args_options'>child_process.spawn</a>.</p>

<p>The audio data itself is where things get interesting. The baudio stream is sent directly into SoX through SoX&#8217;s &#8220;pipeline&#8221; mode, in which audio data is read from standard input, using the &#8220;s16&#8221; format &#8211; it&#8217;s streams all the way down! Internally, baudio converts the float values returned from the callback into integers, which are written to a buffer using Node&#8217;s <a href='http://nodejs.org/docs/latest/api/all.html#all_buf_writeint16le_value_offset_noassert'>buf.writeInt16LE</a> method.</p>

<p>Your callback should generate floating point values between <code>-1.0</code> and <code>1.0</code>. By default, baudio is set to use a frequency of 44 kHz &#8211; that&#8217;s 44,000 values a second. This is close to CD quality (44.1 kHz).</p>

<p>Unless you&#8217;re well-versed in audio programming, generating sounds with baudio is going to be hard work. To help you understand what&#8217;s going on, I&#8217;ve written a small example that uses gnuplot to visualise the output.</p>

<p>First, install baudio:</p>
<div class='highlight'><pre><code class='text'>npm install baudio
</code></pre>
</div>
<p>And then create a file called <code>baudio-simple.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>baudio</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;baudio&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>out</span> <span class='o'>=</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdout</span>
  <span class='p'>,</span> <span class='nx'>note</span> <span class='o'>=</span> <span class='mf'>1.0</span>
  <span class='p'>;</span>

<span class='kd'>var</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>baudio</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>t</span><span class='p'>,</span> <span class='nx'>i</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sin</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>PI</span> <span class='o'>*</span> <span class='nx'>t</span> <span class='o'>*</span> <span class='mf'>261.626</span><span class='p'>);</span>
  <span class='nx'>out</span><span class='p'>.</span><span class='nx'>write</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>()</span> <span class='o'>+</span> <span class='s1'>&#39;\n&#39;</span><span class='p'>);</span>
  <span class='k'>return</span> <span class='nx'>value</span><span class='p'>;</span>
<span class='p'>});</span>

<span class='nx'>setTimeout</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>b</span><span class='p'>.</span><span class='nx'>end</span><span class='p'>();</span>
<span class='p'>},</span> <span class='mi'>1000</span><span class='p'>);</span>

<span class='nx'>b</span><span class='p'>.</span><span class='nx'>play</span><span class='p'>();</span>
</code></pre>
</div>
<p>This file can be run with <code>node baudio-simple.js &gt; audio.dat</code> (the redirection is important for generating the graphs), and if you&#8217;ve got SoX installed you&#8217;ll get a sound.</p>

<p>Now you&#8217;re going to write a bit of gnuplot. Create a file called <code>baudio-plot</code> with this script:</p>
<div class='highlight'><pre><code class='text'>#!/usr/bin/env gnuplot

set terminal png size 530,420
set output &quot;baudio.png&quot;
plot &quot;audio.dat&quot; using 0:1 with lines
</code></pre>
</div>
<p>Now make it executable, and run it:</p>
<div class='highlight'><pre><code class='text'>chmod 700 baudio-plot
./baudio-plot
</code></pre>
</div>
<p>It should generate a file called <code>baudio.png</code> with a second&#8217;s worth of audio data plotted.</p>
<div class='image'>
  <img src='/images/posts/baudio-1.png' alt='' />
  <small>A graph of baudio's output using one second of audio.</small>
</div>
<p>If you&#8217;re looking at <code>Math.sin</code> in the example code and wondering why there isn&#8217;t a beautiful sweeping sine wave, then the reason is simple: there&#8217;s too much data. Let&#8217;s try ending the output earlier:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>baudio</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;baudio&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>out</span> <span class='o'>=</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdout</span>
  <span class='p'>,</span> <span class='nx'>note</span> <span class='o'>=</span> <span class='mf'>1.0</span>
  <span class='p'>;</span>

<span class='kd'>var</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>baudio</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>t</span><span class='p'>,</span> <span class='nx'>i</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>&gt;</span> <span class='mi'>100</span><span class='p'>)</span> <span class='nx'>b</span><span class='p'>.</span><span class='nx'>end</span><span class='p'>();</span>
  <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sin</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>PI</span> <span class='o'>*</span> <span class='nx'>t</span> <span class='o'>*</span> <span class='mf'>261.626</span><span class='p'>);</span>
  <span class='nx'>out</span><span class='p'>.</span><span class='nx'>write</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>()</span> <span class='o'>+</span> <span class='s1'>&#39;\n&#39;</span><span class='p'>);</span>
  <span class='k'>return</span> <span class='nx'>value</span><span class='p'>;</span>
<span class='p'>});</span>

<span class='nx'>b</span><span class='p'>.</span><span class='nx'>play</span><span class='p'>();</span>
</code></pre>
</div>
<p>Now your graph should look like a wave, but you won&#8217;t hear much sound:</p>
<div class='image'>
  <img src='/images/posts/baudio-short.png' alt='' />
  <small>A much shorter sample shows the output really is a sine wave.</small>
</div>
<h3 id='wave_period_and_amplitude'>Wave Period and Amplitude</h3>

<p>The simple example I&#8217;ve used above is focused on controlling the &#8220;wave period&#8221;, or the pitch of the output. To demonstrate this, try changing <code>261.626</code> to <code>60.0</code>:</p>
<div class='image'>
  <img src='/images/posts/baudio-bass.png' alt='' />
  <small>Some sub-bass.</small>
</div>
<p>Now the output is a lower pitch, and the graph makes this clear because you can see there are less cycles in the same amount of time. So we&#8217;ve mastered pitch, but what about volume?</p>

<p>It&#8217;s actually easy once you know what the wave equation is doing. The generalised equation is <code>A sin(t - K) + b</code> (from <a href='http://en.wikipedia.org/wiki/Amplitude'>Amplitude on Wikipedia</a>). In programmer-speak, this equation can be written as <code>A * sin(t - K) + b</code>, where <code>A</code> is the &#8220;peak amplitude of the wave&#8221;, <code>t</code> is time (which we already know baudio gives us), and <code>K</code> and <code>b</code> are offsets for the wave (which I&#8217;m not going to talk about here).</p>

<p>That gives rise to the following example that allows volume to be controlled by adding a variable, <code>vol</code>, for <code>A</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>baudio</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;baudio&#39;</span><span class='p'>)</span>
  <span class='p'>,</span> <span class='nx'>out</span> <span class='o'>=</span> <span class='nx'>process</span><span class='p'>.</span><span class='nx'>stdout</span>
  <span class='p'>,</span> <span class='nx'>note</span> <span class='o'>=</span> <span class='mf'>1.0</span>
  <span class='p'>,</span> <span class='nx'>vol</span> <span class='o'>=</span> <span class='mf'>0.1</span>
  <span class='p'>;</span>

<span class='kd'>var</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='nx'>baudio</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>t</span><span class='p'>,</span> <span class='nx'>i</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>i</span> <span class='o'>&gt;</span> <span class='mi'>100</span><span class='p'>)</span> <span class='nx'>b</span><span class='p'>.</span><span class='nx'>end</span><span class='p'>();</span>
  <span class='kd'>var</span> <span class='nx'>value</span> <span class='o'>=</span> <span class='nx'>vol</span> <span class='o'>*</span> <span class='nb'>Math</span><span class='p'>.</span><span class='nx'>sin</span><span class='p'>(</span><span class='nb'>Math</span><span class='p'>.</span><span class='nx'>PI</span> <span class='o'>*</span> <span class='nx'>t</span> <span class='o'>*</span> <span class='mf'>261.626</span><span class='p'>);</span>
  <span class='nx'>out</span><span class='p'>.</span><span class='nx'>write</span><span class='p'>(</span><span class='nx'>value</span><span class='p'>.</span><span class='nx'>toString</span><span class='p'>()</span> <span class='o'>+</span> <span class='s1'>&#39;\n&#39;</span><span class='p'>);</span>
  <span class='k'>return</span> <span class='nx'>value</span><span class='p'>;</span>
<span class='p'>});</span>

<span class='nx'>b</span><span class='p'>.</span><span class='nx'>play</span><span class='p'>();</span>
</code></pre>
</div>
<p>The graph is now appropriately smaller:</p>
<div class='image'>
  <img src='/images/posts/baudio-quiet.png' alt='' />
  <small>A quieter audio sample, plotted with <code>set yrange [-1.0:1.0]</code> to correct the axis.</small>
</div>
<h3 id='more_fun_stuff'>More Fun Stuff</h3>

<p>If you&#8217;ve managed to get gnuplot and SoX installed and played around with these examples, then there&#8217;s more! First, try taking a look at <a href='https://github.com/substack/plucky'>plucky</a>, which can be used to make &#8220;arrangements&#8221; of callbacks that generate different channels of audio. Also, James wrote <a href='https://gist.github.com/4325336'>beepstep.js</a> which is a much more involved example than anything I&#8217;ve talked about here.</p>

<p>And, James tweets about this stuff, so follow <a href='http://twitter.com/substack'>@substack</a> if you&#8217;re into streams and audio hacking.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/18/jquery-roundup">jQuery Roundup: 1.9, UI 1.10, Maskew</a></h2>
      <div class="meta">
        <span class="date">18 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/18/jquery-roundup/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#jquery">jquery</a>
          
            <a href="/tags.html#plugins">plugins</a>
          
            <a href="/tags.html#mobile">mobile</a>
          
            <a href="/tags.html#effects">effects</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
Note: You can send your plugins and articles in for review through our <a href='/contact.html'>contact form</a> or <a href='http://twitter.com/dailyjs'>@dailyjs</a>.
</div>
<h3 id='jquery_19_beta_1'>jQuery 1.9 Beta 1</h3>

<p><a href='http://blog.jquery.com/2012/12/17/jquery-1-9-beta-1-released/'>jQuery 1.9 Beta 1</a> has been released, and this version removes previously deprecated features so you&#8217;ll want to pay attention. Fortunately, Dave Methvin has been working on <a href='https://github.com/jquery/jquery-migrate'>jquery / jquery-migrate</a>, which is a plugin for figuring out which deprecated features are being used in your projects. The development version shows console warning messages, and these are stored in <code>jQuery.migrateWarnings</code> for browsers that don&#8217;t support <code>console</code>. There&#8217;s a full list of the warnings in <a href='https://github.com/jquery/jquery-migrate/blob/master/warnings.md'>jQuery Migrate Plugin - Warning Messages</a>.</p>

<p>The focus of 1.9 has been API cleanup, and there&#8217;s also a <a href='http://jquery.com/upgrade-guide/1.9/'>jQuery 1.9 Upgrade Guide</a>, where these API changes have been documented.</p>

<h3 id='jquery_ui_110_beta'>jQuery UI 1.10 Beta</h3>

<p><a href='http://blog.jqueryui.com/2012/12/jquery-ui-1-10-beta/'>jQuery UI 1.10 Beta</a> is out. This version features a new API for the <a href='http://forum.jquery.com/topic/dialog-api-redesign'>Dialog widget</a>, and a redesigned <a href='http://forum.jquery.com/topic/progressbar-api-redesign'>Progressbar API</a>.</p>

<p>There are major API changes in 1.10, so if you haven&#8217;t updated to 1.9 yet then you might want to read through the <a href='http://jqueryui.com/upgrade-guide/1.9/'>1.9 upgrade guide</a>.</p>

<h3 id='maskew'>Maskew</h3>
<div class='image'>
  <img src='/images/posts/maskew.png' alt='' />
  <small>Get skewed.</small>
</div>
<p><a href='http://oxism.com/maskew/'>Maskew</a> (GitHub: <a href='https://github.com/dmotz/maskew'>dmotz / maskew</a>, License: <em>MIT</em>) by Dan Motzenbecker is a small plugin that can skew elements along a specified angle. It has an optional jQuery plugin, but also has a simple prototype class API. It has support for touchscreen events, specified by passing <code>{ touch: true }</code> as an argument.</p>

<p>Dan has included the build script and some tests.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/17/javascript-survey">JavaScript Developer Survey 2012</a></h2>
      <div class="meta">
        <span class="date">17 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/17/javascript-survey/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#community">community</a>
          
            <a href="/tags.html#surveys">surveys</a>
          
        </span>
      </div>
      <div class="preview">
        <div class='intro'>
  <strong>Note:</strong> This survey has now closed.  <a href='http://dailyjs.com/2012/12/24/javascript-survey-results/'>The results are here</a>.
</div>
<p>Welcome to the JavaScript Developer Survey 2012. To complete the survey, visit <a href='https://docs.google.com/spreadsheet/viewform?formkey=dFNDeGZEUTZUZ1ctY0Q2WFZnOVlBV3c6MA'>JavaScript Developer Survey 2012</a> or fill out the embedded form in this post.</p>

<p>I&#8217;ve includes some question suggestions from readers Todd Bashor, Tyler Larson, and Adam Alexander.</p>

<p>If you can share this survey on social networking sites, or your favourite news site, then I&#8217;d appreciate it. As always this survey is open in the sense that responses are public, so you can use the data to develop related open source or commercial projects.</p>

<p><strong>This survey has closed.</strong></p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/14/continuum-analytics-maskjs">Continuum, Analytics.js, MaskJS</a></h2>
      <div class="meta">
        <span class="date">14 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/14/continuum-analytics-maskjs/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#libraries">libraries</a>
          
            <a href="/tags.html#templates">templates</a>
          
            <a href="/tags.html#browser">browser</a>
          
        </span>
      </div>
      <div class="preview">
        <h3 id='continuum'>Continuum</h3>

<p><a href='http://benvie.github.com/continuum/'>Continuum</a> (GitHub: <a href='https://github.com/Benvie/continuum'>Benvie / continuum</a>, License: <em>MIT</em>, npm: <a href='https://npmjs.org/package/continuum'>continuum</a>) by Brandon Benvie is an ES6 virtual machine written in ES3. By using <a href='http://esprima.org/'>Esprima</a> to parse a given source file, it generates bytecode which is then executed within an ES6 runtime environment.</p>

<p>If this doesn&#8217;t sound enough like science fiction to you, then think about it like this: this project will run your ECMAScript 6 code inside its own space-time continuum that allows legacy browsers to support ECMAScript 6 features.</p>

<p>Brandon has already implemented a slew of ES6 features, but hasn&#8217;t yet added support for array comprehensions, tail call optimisation, or the binary data API. What you do get, however, is destructuring assignment, spread in arguments and array initializers, &#8220;rest&#8221; parameters, classes and super, arrow functions, and even Map, Set, and WeakMap.</p>

<p>If you want to get an idea of how this project works, take a look at the <code>engine/assembler.js</code> and <code>engine/runtime.js</code> files to see the opcodes and how the stack is used.</p>

<h3 id='analyticsjs'>Analytics.js</h3>

<p><a href='http://segmentio.github.com/analytics.js/'>Analytics.js</a> (GitHub: <a href='https://github.com/segmentio/analytics.js'>segmentio / analytics.js</a>, License: <em>MIT</em>) from Segment.io is a simplified API for supporting various web analytics services, including Google Analtyics, KISSmetrics, Mixpanel, and Chartbeat.</p>

<p>It provides a single API for defining events that should be tracked, allowing you to focus on getting the data out of activities on your site without becoming bogged down in a given service&#8217;s implementation peculiarities.</p>

<p>Segment.io also made <a href='http://socrates.io/'>Socrates.io</a>, which seems to be very popular. I recommend keeping an eye on the <a href='https://github.com/segmentio'>GitHub Segment.io</a> account for more cool projects.</p>

<h3 id='maskjs'>MaskJS</h3>

<p><a href='http://libjs.it/#/mask'>MaskJS</a> (GitHub: <a href='https://github.com/tenbits/MaskJS'>tenbits / MaskJS</a>, License: <em>MIT</em>) by Alexander Kit is a template engine for Node and browsers. The author has built it with performance and mobile devices in mind, and has a <a href='http://jsperf.com/javascript-template-engine-compare/27'>jsperf benchmark</a> that compares it against other template engines.</p>

<p>It supports custom tags, which are designed to help encapsulate markup into reusable components, and the author has created some for two-way data binding. The best way to get a feel for the markup style and API is to check out the <a href='http://libjs.it/#/mask/examples'>MaskJS examples</a>.</p>
      </div>
    </div>
  
    <div class="post-inner">
      <h2 class="post"><a href="/2012/12/13/backbone-tutorial-3">Backbone.js Tutorial: Authenticating with OAuth2</a></h2>
      <div class="meta">
        <span class="date">13 Dec 2012</span>
        | <span class="author">By Alex Young</span>
        | <span class="comments"><a href="/2012/12/13/backbone-tutorial-3/#disqus_thread">Comments</a></span>
        | <span class="tags">
          <img alt="Tags" class="icon" src="/images/tag.gif" />
          
            <a href="/tags.html#backbone.js">backbone.js</a>
          
            <a href="/tags.html#mvc">mvc</a>
          
            <a href="/tags.html#node">node</a>
          
            <a href="/tags.html#backgoog">backgoog</a>
          
        </span>
      </div>
      <div class="preview">
        <ul class='parts'>
  <li><a href='http://dailyjs.com/2012/11/29/backbone-tutorial-1/'>Part 1: Build Environment</a></li>
  <li><a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google's APIs and RequireJS</a></li>
  <li><a href='http://dailyjs.com/2012/12/13/backbone-tutorial-3/'><strong>Part 3: Authenticating with OAuth2</strong></a></li>
  <li><a href='http://dailyjs.com/2012/12/20/backbone-tutorial-4/'>Part 4: Backbone.sync</a></li>
  <li><a href='http://dailyjs.com/2012/12/27/backbone-tutorial-5/'>Part 5: List Views</a></li>
  <li><a href='http://dailyjs.com/2013/01/03/backbone-tutorial-6/'>Part 6: Creating Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/10/backbone-tutorial-7/'>Part 7: Editing Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/17/backbone-tutorial-8/'>Part 8: Deleting Lists</a></li>
  <li><a href='http://dailyjs.com/2013/01/24/backbone-tutorial-9/'>Part 9: Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/01/31/backbone-tutorial-10/'>Part 10: Oh No Not More Tasks</a></li>
  <li><a href='http://dailyjs.com/2013/02/07/backbone-tutorial-11/'>Part 11: Spies, Stubs, and Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/02/14/backbone-tutorial-12/'>Part 12: Testing with Mocks</a></li>
  <li><a href='http://dailyjs.com/2013/03/07/backbone-tutorial-13/'>Part 13: Routes</a></li>
  <li><a href='http://dailyjs.com/2013/03/14/backbone-tutorial-14/'>Part 14: Customosing the UI</a></li>
  <li><a href='http://dailyjs.com/2013/03/28/backbone-tutorial-15/'>Part 15: Updates for 1.0, Clear Complete</a></li>
  <li><a href='http://dailyjs.com/2013/04/04/backbone-tutorial-16/'>Part 16: jQuery Plugins</a></li>
</ul>
<p>In <a href='http://dailyjs.com/2012/12/06/backbone-tutorial-2/'>Part 2: Google&#8217;s APIs</a>, I laid the groundwork for talking to Google&#8217;s JavaScript APIs. Now you&#8217;re in a position to start talking to the <code>todos</code> API, but first a user account is required.</p>

<h3 id='preparation'>Preparation</h3>

<p>Before starting this tutorial, you&#8217;ll need the following:</p>

<ul>
<li><a href='https://github.com/alexyoung/dailyjs-backbone-tutorial'>alexyoung / dailyjs-backbone-tutorial</a> at commit <code>9d09a66b1f</code></li>

<li>The API key from part 2</li>

<li>The &#8220;Client ID&#8221; key from part 2</li>

<li>Update <code>app/js/config.js</code> with your keys (if you&#8217;ve checked out my source)</li>
</ul>

<p>To check out the source, run the following commands (or use a suitable Git GUI tool):</p>
<div class='highlight'><pre><code class='text'>git clone git@github.com:alexyoung/dailyjs-backbone-tutorial.git
cd dailyjs-backbone-tutorial
git reset --hard 9d09a66b1f
</code></pre>
</div>
<h3 id='googles_oauth_20_clientside_api'>Google&#8217;s OAuth 2.0 Client-side API</h3>

<p>Open <code>app/js/gapi.js</code> and take a look at <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/blob/9d09a66b1f722ebf80198a8db76dd32a7b4a6923/app/js/gapi.js#L11-L25'>lines 11 to 25</a>. There&#8217;s a method, provided by Google, called <code>gapi.auth.authorize</code>. This uses the &#8220;Client ID&#8221; and some scopes to attempt to authenticate. I&#8217;ve already set the scopes in <code>app/js/config.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>config</span><span class='p'>.</span><span class='nx'>scopes</span> <span class='o'>=</span> <span class='s1'>&#39;https://www.googleapis.com/auth/tasks https://www.googleapis.com/auth/userinfo.profile&#39;</span><span class='p'>;</span>
</code></pre>
</div>
<p>This tells the authentication system that our application would like to access the user&#8217;s profile and Gmail tasks. Everything is almost ready to work, but two things are missing: an implementation for <code>handleAuthResult</code> and an interface.</p>

<h3 id='templates'>Templates</h3>

<p>RequireJS can load templates by using the <a href='https://github.com/requirejs/text'>text</a> plugin. Download <a href='https://raw.github.com/requirejs/text/master/text.js'>text.js</a> from GitHub and save it to <code>app/js/lib/text.js</code>.</p>

<p>This is my preferred technique for handling templates. Although this application could easily fit into a monolithic <code>index.html</code> file, breaking up projects into smaller templates is more manageable in the long run, so it&#8217;s a good idea to get used to doing this.</p>

<p>Now open <code>app/js/main.js</code> and add the <code>text</code> plugin to the <code>paths</code> property of the RequireJS configuration:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>paths</span><span class='o'>:</span> <span class='p'>{</span>
  <span class='nx'>text</span><span class='o'>:</span> <span class='s1'>&#39;lib/text&#39;</span>
<span class='p'>},</span>
</code></pre>
</div>
<p>Finally, add this to <code>app/js/config.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>_</span><span class='p'>.</span><span class='nx'>templateSettings</span> <span class='o'>=</span> <span class='p'>{</span>
  <span class='nx'>interpolate</span><span class='o'>:</span> <span class='sr'>/\{\{(.+?)\}\}/g</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>This tells Underscore&#8217;s templating system to use double curly braces for inserting values, otherwise known as interpolation.</p>

<p>The app needs some directories to store template-related things:</p>

<ul>
<li><code>app/js/views</code> &#8211; This is for Backbone.js views</li>

<li><code>app/js/templates</code> &#8211; Plain HTML templates, to be loaded by the views</li>

<li><code>app/css</code></li>
</ul>

<p>The <code>app/index.html</code> file needs to load the CSS, so add a <code>link</code> tag to it:</p>
<div class='highlight'><pre><code class='javascript'><span class='o'>&lt;</span><span class='nx'>link</span> <span class='nx'>rel</span><span class='o'>=</span><span class='s2'>&quot;stylesheet&quot;</span> <span class='nx'>href</span><span class='o'>=</span><span class='s2'>&quot;css/app.css&quot;</span><span class='o'>&gt;</span>
</code></pre>
</div>
<p>And create a suitable CSS file in <code>app/css/app.css</code>:</p>
<div class='highlight'><pre><code class='css'><span class='nf'>#sign-in-container</span><span class='o'>,</span> <span class='nf'>#signed-in-container</span> <span class='p'>{</span> <span class='k'>display</span><span class='o'>:</span> <span class='k'>none</span> <span class='p'>}</span>
</code></pre>
</div>
<p>The application will start up by hiding both the sign-in button and the main content. The oauth API will be queried for existing user credentials &#8211; if the user has already logged in recently their details will be stored in a cookie, so the views need to be configured appropriately.</p>

<h3 id='templates'>Templates</h3>

<p>The templates aren&#8217;t particularly remarkable at this stage, just dump this into <code>app/js/templates/app.html</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;row-fluid&quot;</span><span class='nt'>&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;span2 main-left-col&quot;</span> <span class='na'>id=</span><span class='s'>&quot;lists-panel&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;h1&gt;</span>bTask<span class='nt'>&lt;/h1&gt;</span>
    <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;left-nav&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;main-right-col&quot;</span><span class='nt'>&gt;</span>
    <span class='nt'>&lt;small</span> <span class='na'>class=</span><span class='s'>&quot;pull-right&quot;</span> <span class='na'>id=</span><span class='s'>&quot;profile-container&quot;</span><span class='nt'>&gt;&lt;/small&gt;</span>
    <span class='nt'>&lt;div&gt;</span>
      <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;sign-in-container&quot;</span><span class='nt'>&gt;&lt;/div&gt;</span>
      <span class='nt'>&lt;div</span> <span class='na'>id=</span><span class='s'>&quot;signed-in-container&quot;</span><span class='nt'>&gt;</span>
        <span class='nt'>&lt;p&gt;</span>You&#39;re signed in!<span class='nt'>&lt;/p&gt;</span>
      <span class='nt'>&lt;/div&gt;</span>
    <span class='nt'>&lt;/div&gt;</span>
  <span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
</code></pre>
</div>
<p>This template shows some things that we won&#8217;t be using yet, just ignore it for now and focus on <code>sign-in-container</code> and <code>signed-in-container</code>.</p>

<p>Next, paste the following into <code>app/js/templates/auth.html</code>:</p>
<div class='highlight'><pre><code class='html'><span class='nt'>&lt;a</span> <span class='na'>href=</span><span class='s'>&quot;#&quot;</span> <span class='na'>id=</span><span class='s'>&quot;authorize-button&quot;</span> <span class='na'>class=</span><span class='s'>&quot;btn btn-primary&quot;</span><span class='nt'>&gt;</span>Sign In with Google<span class='nt'>&lt;/a&gt;</span>
</code></pre>
</div>
<p>The <code>auth.html</code> template will be inserted into <code>sign-in-container</code>. It&#8217;s very simple at the moment, I only really included it for an excuse to create extra Backbone.js views so you can see how it&#8217;s done.</p>

<h3 id='backbone_views'>Backbone Views</h3>

<p>These templates need corresponding Backbone.js views to manage them. This part demonstrates how to load templates with RequireJS and render them. Create a file called <code>app/js/views/app.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;text!templates/app.html&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>AppView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>id</span><span class='o'>:</span> <span class='s1'>&#39;main&#39;</span><span class='p'>,</span>
    <span class='nx'>tagName</span><span class='o'>:</span> <span class='s1'>&#39;div&#39;</span><span class='p'>,</span>
    <span class='nx'>className</span><span class='o'>:</span> <span class='s1'>&#39;container-fluid&#39;</span><span class='p'>,</span>
    <span class='nx'>el</span><span class='o'>:</span> <span class='s1'>&#39;body&#39;</span><span class='p'>,</span>
    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>());</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>AppView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>AppView</code> class doesn&#8217;t have any events yet, but it does bind to an element, <code>body</code>, and load a template: <code>define([&#39;text!templates/app.html&#39;]</code>. The <code>text!</code> directive is provided by the RequireJS &#8220;text&#8221; plugin we added earlier. The template itself is just a string that contains the corresponding HTML. It&#8217;s rendered by binding it to the <code>Backbone.View</code>, and then calling jQuery&#8217;s <code>html()</code> method which replaces the HTML within an element: <code>this.$el.html(this.template());</code>.</p>

<p>The <code>AuthView</code> is a bit different. Create a file called <code>app/js/views/auth.js</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span><span class='s1'>&#39;text!templates/auth.html&#39;</span><span class='p'>],</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>AuthView</span> <span class='o'>=</span> <span class='nx'>Backbone</span><span class='p'>.</span><span class='nx'>View</span><span class='p'>.</span><span class='nx'>extend</span><span class='p'>({</span>
    <span class='nx'>el</span><span class='o'>:</span> <span class='s1'>&#39;#sign-in-container&#39;</span><span class='p'>,</span>
    <span class='nx'>template</span><span class='o'>:</span> <span class='nx'>_</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>(</span><span class='nx'>template</span><span class='p'>),</span>

    <span class='nx'>events</span><span class='o'>:</span> <span class='p'>{</span>
      <span class='s1'>&#39;click #authorize-button&#39;</span><span class='o'>:</span> <span class='s1'>&#39;auth&#39;</span>
    <span class='p'>},</span>

    <span class='nx'>initialize</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>app</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>app</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>render</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>html</span><span class='p'>(</span><span class='k'>this</span><span class='p'>.</span><span class='nx'>template</span><span class='p'>());</span>
      <span class='k'>return</span> <span class='k'>this</span><span class='p'>;</span>
    <span class='p'>},</span>

    <span class='nx'>auth</span><span class='o'>:</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
      <span class='k'>this</span><span class='p'>.</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>apiManager</span><span class='p'>.</span><span class='nx'>checkAuth</span><span class='p'>();</span>
      <span class='k'>return</span> <span class='kc'>false</span><span class='p'>;</span>
    <span class='p'>}</span>
  <span class='p'>});</span>

  <span class='k'>return</span> <span class='nx'>AuthView</span><span class='p'>;</span>
<span class='p'>});</span>
</code></pre>
</div>
<p>The <code>app</code> object is passed to <code>initialize</code> when <code>AuthView</code> is instantiated (with <code>new AuthView(this)</code> later on). The reason I&#8217;ve done this is to allow the view to call the required authentication code from <code>ApiManager</code>. This could also be handled with events, or many other ways &#8211; I just wanted to show that we can initialise views with values just like any other class.</p>

<h3 id='app_core'>App Core</h3>

<p>The views need to be instantiated and rendered. Open <code>app/js/app.js</code> and change it to load the views using RequireJS:</p>
<div class='highlight'><pre><code class='javascript'><span class='nx'>define</span><span class='p'>([</span>
  <span class='s1'>&#39;gapi&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/app&#39;</span>
<span class='p'>,</span> <span class='s1'>&#39;views/auth&#39;</span>
<span class='p'>],</span>

<span class='kd'>function</span><span class='p'>(</span><span class='nx'>ApiManager</span><span class='p'>,</span> <span class='nx'>AppView</span><span class='p'>,</span> <span class='nx'>AuthView</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>App</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>app</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>AppView</span><span class='p'>();</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>app</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>

    <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>auth</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>AuthView</span><span class='p'>(</span><span class='k'>this</span><span class='p'>);</span>
    <span class='k'>this</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>auth</span><span class='p'>.</span><span class='nx'>render</span><span class='p'>();</span>

    <span class='k'>this</span><span class='p'>.</span><span class='nx'>connectGapi</span><span class='p'>();</span>
  <span class='p'>}</span>
</code></pre>
</div>
<p>The rest of the file can remain the same. Notice that the order these views are rendered is important &#8211; <code>AuthView</code> won&#8217;t work unless it has some of <code>AppView</code>&#8217;s tags available. A better way of modeling this might be to move <code>AuthView</code> inside <code>AppView</code> so the dependency is reflected. You can try this yourself if you want to experiment.</p>

<h3 id='authentication_implementation'>Authentication Implementation</h3>

<p>The <code>app/js/gapi.js</code> file still doesn&#8217;t have the <code>handleAuthResult</code> function, so nothing will work yet. Here&#8217;s the code to handle authentication:</p>
<div class='highlight'><pre><code class='javascript'><span class='kd'>function</span> <span class='nx'>handleAuthResult</span><span class='p'>(</span><span class='nx'>authResult</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='kd'>var</span> <span class='nx'>authTimeout</span><span class='p'>;</span>

  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authResult</span> <span class='o'>&amp;&amp;</span> <span class='o'>!</span><span class='nx'>authResult</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='p'>{</span>
    <span class='c1'>// Schedule a check when the authentication token expires</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authResult</span><span class='p'>.</span><span class='nx'>expires_in</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='nx'>authTimeout</span> <span class='o'>=</span> <span class='p'>(</span><span class='nx'>authResult</span><span class='p'>.</span><span class='nx'>expires_in</span> <span class='o'>-</span> <span class='mi'>5</span> <span class='o'>*</span> <span class='mi'>60</span><span class='p'>)</span> <span class='o'>*</span> <span class='mi'>1000</span><span class='p'>;</span>
      <span class='nx'>setTimeout</span><span class='p'>(</span><span class='nx'>checkAuth</span><span class='p'>,</span> <span class='nx'>authTimeout</span><span class='p'>);</span>
    <span class='p'>}</span>

    <span class='nx'>app</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>auth</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>hide</span><span class='p'>();</span>
    <span class='nx'>$</span><span class='p'>(</span><span class='s1'>&#39;#signed-in-container&#39;</span><span class='p'>).</span><span class='nx'>show</span><span class='p'>();</span>
  <span class='p'>}</span> <span class='k'>else</span> <span class='p'>{</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='nx'>authResult</span> <span class='o'>&amp;&amp;</span> <span class='nx'>authResult</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>)</span> <span class='p'>{</span>
      <span class='c1'>// TODO: Show error</span>
      <span class='nx'>console</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>(</span><span class='s1'>&#39;Unable to sign in:&#39;</span><span class='p'>,</span> <span class='nx'>authResult</span><span class='p'>.</span><span class='nx'>error</span><span class='p'>);</span>
    <span class='p'>}</span>

    <span class='nx'>app</span><span class='p'>.</span><span class='nx'>views</span><span class='p'>.</span><span class='nx'>auth</span><span class='p'>.</span><span class='nx'>$el</span><span class='p'>.</span><span class='nx'>show</span><span class='p'>();</span>
  <span class='p'>}</span>
<span class='p'>}</span>

<span class='k'>this</span><span class='p'>.</span><span class='nx'>checkAuth</span> <span class='o'>=</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>
  <span class='nx'>gapi</span><span class='p'>.</span><span class='nx'>auth</span><span class='p'>.</span><span class='nx'>authorize</span><span class='p'>({</span> <span class='nx'>client_id</span><span class='o'>:</span> <span class='nx'>config</span><span class='p'>.</span><span class='nx'>clientId</span><span class='p'>,</span> <span class='nx'>scope</span><span class='o'>:</span> <span class='nx'>config</span><span class='p'>.</span><span class='nx'>scopes</span><span class='p'>,</span> <span class='nx'>immediate</span><span class='o'>:</span> <span class='kc'>false</span> <span class='p'>},</span> <span class='nx'>handleAuthResult</span><span class='p'>);</span>
<span class='p'>};</span>
</code></pre>
</div>
<p>The trick to a smooth sign-in flow is to determine when the user is already signed in. If so, then authentication should be handled transparently, otherwise the user should be prompted.</p>

<p>The <code>handleAuthResult</code> function is called by <code>gapi.auth.authorize</code> from the <code>checkAuth</code> function, which isn&#8217;t displayed here (it&#8217;s before <code>handleAuthResult</code> in the source file if you want to check it). The <code>this.checkAuth</code> <em>method</em> is different &#8211; this is a public method that calls <code>gapi.auth.authorize</code> with <code>immediate</code> set to <code>false</code>, while the other invocation calls it with <code>true</code>.</p>

<p>The <code>immediate</code> option is important because it determines whether a popup will be displayed or not. I&#8217;ve used it to check if the user is already signed in, otherwise it&#8217;s called again with <code>immediate: false</code> and will display a suitable popup so the user can see what permissions the app wants to use:</p>

<p><img src='/images/posts/google-auth-backbone.png' alt='Authentication process' /></p>

<p>I designed it this way based on the <a href='http://code.google.com/p/google-api-javascript-client/wiki/Authentication'>Google APIs Client Library for JavaScript</a> documentation:</p>

<blockquote>
<p>&#8220;The standard <code>authorize()</code> method always shows a popup, which can be a little jarring if you are just trying to refresh an OAuth 2.0 token. Google&#8217;s OAuth 2.0 implementation also supports &#8220;immediate&#8221; mode, which refreshes a token without a popup. To use immediate mode, just add &#8220;immediate: true&#8221; to the login config as in the example above.&#8221;</p>
</blockquote>

<p>I&#8217;ve also changed the <code>ApiManager</code> class to store a reference to <code>App</code>:</p>
<div class='highlight'><pre><code class='javascript'><span class='c1'>// Near the top of gapi.js</span>
<span class='kd'>var</span> <span class='nx'>app</span><span class='p'>;</span>

<span class='kd'>function</span> <span class='nx'>ApiManager</span><span class='p'>(</span><span class='nx'>_app</span><span class='p'>)</span> <span class='p'>{</span>
  <span class='nx'>app</span> <span class='o'>=</span> <span class='nx'>_app</span><span class='p'>;</span>
  <span class='k'>this</span><span class='p'>.</span><span class='nx'>loadGapi</span><span class='p'>();</span>
<span class='p'>}</span>
</code></pre>
</div>
<h3 id='summary'>Summary</h3>

<p>In this tutorial you&#8217;ve seen how to use Google&#8217;s APIs to sign into an app you&#8217;ve previously registered with the Google API Console (documented in part 2). It might seem like a lot of work to get RequireJS, Backbone.js, and Google OAuth working together, but think about what this has achieved: 100% client-side scripting that can authenticate with existing Google accounts.</p>

<p>If I&#8217;ve missed anything here, you can check out the full source from <a href='https://github.com/alexyoung/dailyjs-backbone-tutorial/tree/c1d5a2e7ccadf82289676e6dd4fead9b1e311435'>commit c1d5a2e7c</a>.</p>
      </div>
    </div>
  
</div>


  <div class="prev_next">
    
      &larr; <a class="previous" href="/page20">previous</a> 
    
  </div>


  <div class="prev_next">
  
    
      <a href="/">1</a>
    
  
    
      <a href="/page2">2</a>
    
  
    
      <a href="/page3">3</a>
    
  
    
      <a href="/page4">4</a>
    
  
    
      <a href="/page5">5</a>
    
  
    
      <a href="/page6">6</a>
    
  
    
      <a href="/page7">7</a>
    
  
    
      <a href="/page8">8</a>
    
  
    
      <a href="/page9">9</a>
    
  
    
      <a href="/page10">10</a>
    
  
    
      <a href="/page11">11</a>
    
  
    
      <a href="/page12">12</a>
    
  
    
      <a href="/page13">13</a>
    
  
    
      <a href="/page14">14</a>
    
  
    
      <a href="/page15">15</a>
    
  
    
      <a href="/page16">16</a>
    
  
    
      <a href="/page17">17</a>
    
  
    
      <a href="/page18">18</a>
    
  
    
      <a href="/page19">19</a>
    
  
    
      <a href="/page20">20</a>
    
  
    
      <strong>21</strong>
    
  
    
      <a href="/page22">22</a>
    
  
    
      <a href="/page23">23</a>
    
  
    
      <a href="/page24">24</a>
    
  
    
      <a href="/page25">25</a>
    
  
    
      <a href="/page26">26</a>
    
  
    
      <a href="/page27">27</a>
    
  
    
      <a href="/page28">28</a>
    
  
    
      <a href="/page29">29</a>
    
  
    
      <a href="/page30">30</a>
    
  
    
      <a href="/page31">31</a>
    
  
    
      <a href="/page32">32</a>
    
  
    
      <a href="/page33">33</a>
    
  
    
      <a href="/page34">34</a>
    
  
    
      <a href="/page35">35</a>
    
  
    
      <a href="/page36">36</a>
    
  
    
      <a href="/page37">37</a>
    
  
    
      <a href="/page38">38</a>
    
  
    
      <a href="/page39">39</a>
    
  
    
      <a href="/page40">40</a>
    
  
    
      <a href="/page41">41</a>
    
  
    
      <a href="/page42">42</a>
    
  
    
      <a href="/page43">43</a>
    
  
    
      <a href="/page44">44</a>
    
  
    
      <a href="/page45">45</a>
    
  
    
      <a href="/page46">46</a>
    
  
    
      <a href="/page47">47</a>
    
  
    
      <a href="/page48">48</a>
    
  
    
      <a href="/page49">49</a>
    
  
    
      <a href="/page50">50</a>
    
  
    
      <a href="/page51">51</a>
    
  
    
      <a href="/page52">52</a>
    
  
    
      <a href="/page53">53</a>
    
  
    
      <a href="/page54">54</a>
    
  
    
      <a href="/page55">55</a>
    
  
    
      <a href="/page56">56</a>
    
  
    
      <a href="/page57">57</a>
    
  
    
      <a href="/page58">58</a>
    
  
    
      <a href="/page59">59</a>
    
  
    
      <a href="/page60">60</a>
    
  
    
      <a href="/page61">61</a>
    
  
    
      <a href="/page62">62</a>
    
  
  
    <a class="next" href="/page22">next</a> &rarr;
  
</div>


    </div>
    <div id="sidebar">
  <ul>
    <li>
      <div id="carbonads-container"><div class="carbonad"><div id="azcarbon"></div><script type="text/javascript">var z = document.createElement("script"); z.type = "text/javascript"; z.async = true; z.src = "http://engine.carbonads.com/z/12104/azcarbon_2_1_0_VERT"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(z, s);</script></div></div>
    </li>
    <li class="itemlist">
      <h3>Support</h3>
      <ul class="support">
        <li class="if">
<script src="http://coinwidget.com/widget/coin.js"></script>
<script>
CoinWidgetCom.go({
  wallet_address: "1Gtov23WTQPbj4c6dMaXnXxbvFKc87Lutb"
  , currency: "bitcoin"
  , counter: "count"
  , alignment: "bl"
  , qrcode: true
  , auto_show: false
  , lbl_button: "Donate"
  , lbl_address: "DailyJS:"
  , lbl_count: "donations"
  , lbl_amount: "BTC"
});
</script>
          <p>Support the authors by donating Bitcoins!</p>
        </li>
        <li class="flattr if">
          <a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="http://dailyjs.com"></a>
          <noscript><a href="http://flattr.com/thing/456257/DailyJS" target="_blank">
          <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Subscribe</h3>
      <ul class="subscribe">
        <li class="links">
          <a class="social-button" href="http://twitter.com/dailyjs"><img src="/images/icons/twitter.png" alt="Twitter" /></a>
          <a class="social-button" href="https://www.facebook.com/dailyjs"><img src="/images/icons/facebook.png" alt="Facebook Page" /></a>
          <a class="social-button" href="https://plus.google.com/110075199769457074728/?prsrc=3&rel=author"><img src="/images/icons/google.png" alt="Google+ Page" /></a>
          <a class="social-button" href="http://feeds.feedburner.com/dailyjs"><img src="/images/icons/feed.png" alt="Feed" /></a>
          <a class="social-button" href="http://feedburner.google.com/fb/a/mailverify?uri=dailyjs&amp;loc=en_US"><img src="/images/icons/mail.png" alt="Email" /></a>
        </li>
        <li class="rss">
          <p><a href="http://feeds.feedburner.com/dailyjs"><img src="http://feeds.feedburner.com/~fc/dailyjs?bg=000000&amp;fg=FFFFFF&amp;anim=0" height="26" width="88" style="border:0" alt="" /></a></p>
        </li>
      </ul>
    </li>
    <li class="itemlist staff">
      <h3>Staff</h3>
      <ul>
        <li>
          <h4>Editor-in-Chief</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/alex_young">
              <img width="48" height="48" src="/images/twitter/alex_young.png" alt="Alex R. Young" />
              <span class="meta">
                <strong class="fullname">Alex R. Young</strong>
                <s>@</s>alex_young
              </span>
            </a>
          </div>
          <h4>Proof-Reading</h4>
          <div class="twitter">
            <a href="http://twitter.com/#!/YukaYoung">
              <img width="48" height="48" src="/images/twitter/YukaYoung.png" alt="Yuka Young" />
              <span class="meta">
                <strong class="fullname">Yuka Young</strong>
                <s>@</s>YukaYoung
              </span>
            </a>
          </div>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Buy the Book</h3>
      <ul>
        <li>
          <p style="margin-top: 10px"><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343"><img src="/images/young_cover150.jpeg" alt="Node.js in Practice" /></a></p>
          <h4><a href="http://affiliate.manning.com/idevaffiliate.php?id=1259_343">Node.js in Practice</a></h4>
          <p><em>By Alex Young and Marc Harter</em></p>
        </li>
      </ul>
    </li>
    <li class="itemlist">
      <h3>Featured Series</h3>
      <ul>
        <li>
          <h4><a href="/sponsored-content.html">Sponsored Content</a></h4>
          <p>Advertise your JavaScript-related product or service through DailyJS.</p>
        <li>
          <h4><a href="/js101.html">JS101</a></h4>
          <p>New to JavaScript?  Get started here.</p>
        </li>
        <li>
          <h4><a href="/framework.html">Let's Make a Framework</a></h4>
          <p>Learn how client-side frameworks are built, and then build your own.</p>
        </li>
        <li>
          <h4><a href="/web-app.html">Let's Make a Web App</a></h4>
          <p>Build a Node web app.</p>
        </li>
        <li>
          <h4><a href="/history-of-javascript.html">History of JavaScript</a></h4>
          <p>Find out who created JavaScript, and why.</p>
        </li>
      </ul>
    </li>
  </ul>
</div>

    <div id="footer">
      <p>Copyright &copy; DailyJS. | <a href="http://github.com/alexyoung/dailyjs">Site Source</a> | <a href="http://www.glyphicons.com">Glyphicons</a>
      | <a href="/cookies.html">Cookies and Privacy</a></p>
    </div>
  </div>
<script type="text/javascript">
var _sf_async_config={uid:39178,domain:"dailyjs.com"};
(function(){
  function loadChartbeat() {
    window._sf_endpt=(new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('src',
       (("https:" == document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") +
       "js/chartbeat.js");
    document.body.appendChild(e);
  }
  var oldonload = window.onload;
  window.onload = (typeof window.onload != 'function') ?
     loadChartbeat : function() { oldonload(); loadChartbeat(); };
})();
</script>
</body>
</html>

